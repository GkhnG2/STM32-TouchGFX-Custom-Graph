
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002104c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002600  080212f0  080212f0  000312f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002b3a  080238f0  080238f0  000338f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000016c  0802642c  0802642c  0003642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000074  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08026598  08026598  001c7074  2**0
                  CONTENTS
  8 .ARM          00000008  08026598  08026598  00036598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080265a0  080265a0  001c7074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  080265a0  080265a0  000365a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080265b8  080265b8  000365b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000190  24000000  080265c0  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000f6b4  24000190  08026750  00040190  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2400f844  08026750  0004f844  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c7074  2**0
                  CONTENTS, READONLY
 16 .debug_info   00106aa0  00000000  00000000  001c70a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017b69  00000000  00000000  002cdb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000036b0  00000000  00000000  002e56b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000074b0  00000000  00000000  002e8d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00051a78  00000000  00000000  002f0210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0006357b  00000000  00000000  00341c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001dfc15  00000000  00000000  003a5203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00584e18  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a76c  00000000  00000000  00584ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0003694a  00000000  00000000  0058f654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000190 	.word	0x24000190
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080212d4 	.word	0x080212d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000194 	.word	0x24000194
 80002dc:	080212d4 	.word	0x080212d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ldivmod>:
 80003a4:	b97b      	cbnz	r3, 80003c6 <__aeabi_ldivmod+0x22>
 80003a6:	b972      	cbnz	r2, 80003c6 <__aeabi_ldivmod+0x22>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bfbe      	ittt	lt
 80003ac:	2000      	movlt	r0, #0
 80003ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003b2:	e006      	blt.n	80003c2 <__aeabi_ldivmod+0x1e>
 80003b4:	bf08      	it	eq
 80003b6:	2800      	cmpeq	r0, #0
 80003b8:	bf1c      	itt	ne
 80003ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003be:	f04f 30ff 	movne.w	r0, #4294967295
 80003c2:	f000 b9a7 	b.w	8000714 <__aeabi_idiv0>
 80003c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ce:	2900      	cmp	r1, #0
 80003d0:	db09      	blt.n	80003e6 <__aeabi_ldivmod+0x42>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db1a      	blt.n	800040c <__aeabi_ldivmod+0x68>
 80003d6:	f000 f835 	bl	8000444 <__udivmoddi4>
 80003da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e2:	b004      	add	sp, #16
 80003e4:	4770      	bx	lr
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db1b      	blt.n	8000428 <__aeabi_ldivmod+0x84>
 80003f0:	f000 f828 	bl	8000444 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4240      	negs	r0, r0
 8000400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000404:	4252      	negs	r2, r2
 8000406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040a:	4770      	bx	lr
 800040c:	4252      	negs	r2, r2
 800040e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000412:	f000 f817 	bl	8000444 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4240      	negs	r0, r0
 8000422:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f809 	bl	8000444 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4252      	negs	r2, r2
 800043e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000442:	4770      	bx	lr

08000444 <__udivmoddi4>:
 8000444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000448:	9d08      	ldr	r5, [sp, #32]
 800044a:	4604      	mov	r4, r0
 800044c:	468e      	mov	lr, r1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d14d      	bne.n	80004ee <__udivmoddi4+0xaa>
 8000452:	428a      	cmp	r2, r1
 8000454:	4694      	mov	ip, r2
 8000456:	d969      	bls.n	800052c <__udivmoddi4+0xe8>
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	b152      	cbz	r2, 8000474 <__udivmoddi4+0x30>
 800045e:	fa01 f302 	lsl.w	r3, r1, r2
 8000462:	f1c2 0120 	rsb	r1, r2, #32
 8000466:	fa20 f101 	lsr.w	r1, r0, r1
 800046a:	fa0c fc02 	lsl.w	ip, ip, r2
 800046e:	ea41 0e03 	orr.w	lr, r1, r3
 8000472:	4094      	lsls	r4, r2
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	0c21      	lsrs	r1, r4, #16
 800047a:	fbbe f6f8 	udiv	r6, lr, r8
 800047e:	fa1f f78c 	uxth.w	r7, ip
 8000482:	fb08 e316 	mls	r3, r8, r6, lr
 8000486:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048a:	fb06 f107 	mul.w	r1, r6, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d90a      	bls.n	80004a8 <__udivmoddi4+0x64>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 811f 	bcs.w	80006dc <__udivmoddi4+0x298>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 811c 	bls.w	80006dc <__udivmoddi4+0x298>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 f707 	mul.w	r7, r0, r7
 80004bc:	42a7      	cmp	r7, r4
 80004be:	d90a      	bls.n	80004d6 <__udivmoddi4+0x92>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	f080 810a 	bcs.w	80006e0 <__udivmoddi4+0x29c>
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	f240 8107 	bls.w	80006e0 <__udivmoddi4+0x29c>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004da:	1be4      	subs	r4, r4, r7
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa4>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d909      	bls.n	8000506 <__udivmoddi4+0xc2>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	f000 80ef 	beq.w	80006d6 <__udivmoddi4+0x292>
 80004f8:	2600      	movs	r6, #0
 80004fa:	e9c5 0100 	strd	r0, r1, [r5]
 80004fe:	4630      	mov	r0, r6
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	fab3 f683 	clz	r6, r3
 800050a:	2e00      	cmp	r6, #0
 800050c:	d14a      	bne.n	80005a4 <__udivmoddi4+0x160>
 800050e:	428b      	cmp	r3, r1
 8000510:	d302      	bcc.n	8000518 <__udivmoddi4+0xd4>
 8000512:	4282      	cmp	r2, r0
 8000514:	f200 80f9 	bhi.w	800070a <__udivmoddi4+0x2c6>
 8000518:	1a84      	subs	r4, r0, r2
 800051a:	eb61 0303 	sbc.w	r3, r1, r3
 800051e:	2001      	movs	r0, #1
 8000520:	469e      	mov	lr, r3
 8000522:	2d00      	cmp	r5, #0
 8000524:	d0e0      	beq.n	80004e8 <__udivmoddi4+0xa4>
 8000526:	e9c5 4e00 	strd	r4, lr, [r5]
 800052a:	e7dd      	b.n	80004e8 <__udivmoddi4+0xa4>
 800052c:	b902      	cbnz	r2, 8000530 <__udivmoddi4+0xec>
 800052e:	deff      	udf	#255	; 0xff
 8000530:	fab2 f282 	clz	r2, r2
 8000534:	2a00      	cmp	r2, #0
 8000536:	f040 8092 	bne.w	800065e <__udivmoddi4+0x21a>
 800053a:	eba1 010c 	sub.w	r1, r1, ip
 800053e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000542:	fa1f fe8c 	uxth.w	lr, ip
 8000546:	2601      	movs	r6, #1
 8000548:	0c20      	lsrs	r0, r4, #16
 800054a:	fbb1 f3f7 	udiv	r3, r1, r7
 800054e:	fb07 1113 	mls	r1, r7, r3, r1
 8000552:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000556:	fb0e f003 	mul.w	r0, lr, r3
 800055a:	4288      	cmp	r0, r1
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x12c>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f103 38ff 	add.w	r8, r3, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x12a>
 8000568:	4288      	cmp	r0, r1
 800056a:	f200 80cb 	bhi.w	8000704 <__udivmoddi4+0x2c0>
 800056e:	4643      	mov	r3, r8
 8000570:	1a09      	subs	r1, r1, r0
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb1 f0f7 	udiv	r0, r1, r7
 8000578:	fb07 1110 	mls	r1, r7, r0, r1
 800057c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000580:	fb0e fe00 	mul.w	lr, lr, r0
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x156>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x154>
 8000592:	45a6      	cmp	lr, r4
 8000594:	f200 80bb 	bhi.w	800070e <__udivmoddi4+0x2ca>
 8000598:	4608      	mov	r0, r1
 800059a:	eba4 040e 	sub.w	r4, r4, lr
 800059e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a2:	e79c      	b.n	80004de <__udivmoddi4+0x9a>
 80005a4:	f1c6 0720 	rsb	r7, r6, #32
 80005a8:	40b3      	lsls	r3, r6
 80005aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b2:	fa20 f407 	lsr.w	r4, r0, r7
 80005b6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ba:	431c      	orrs	r4, r3
 80005bc:	40f9      	lsrs	r1, r7
 80005be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c2:	fa00 f306 	lsl.w	r3, r0, r6
 80005c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ca:	0c20      	lsrs	r0, r4, #16
 80005cc:	fa1f fe8c 	uxth.w	lr, ip
 80005d0:	fb09 1118 	mls	r1, r9, r8, r1
 80005d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005d8:	fb08 f00e 	mul.w	r0, r8, lr
 80005dc:	4288      	cmp	r0, r1
 80005de:	fa02 f206 	lsl.w	r2, r2, r6
 80005e2:	d90b      	bls.n	80005fc <__udivmoddi4+0x1b8>
 80005e4:	eb1c 0101 	adds.w	r1, ip, r1
 80005e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005ec:	f080 8088 	bcs.w	8000700 <__udivmoddi4+0x2bc>
 80005f0:	4288      	cmp	r0, r1
 80005f2:	f240 8085 	bls.w	8000700 <__udivmoddi4+0x2bc>
 80005f6:	f1a8 0802 	sub.w	r8, r8, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	1a09      	subs	r1, r1, r0
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb1 f0f9 	udiv	r0, r1, r9
 8000604:	fb09 1110 	mls	r1, r9, r0, r1
 8000608:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800060c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000610:	458e      	cmp	lr, r1
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x1e2>
 8000614:	eb1c 0101 	adds.w	r1, ip, r1
 8000618:	f100 34ff 	add.w	r4, r0, #4294967295
 800061c:	d26c      	bcs.n	80006f8 <__udivmoddi4+0x2b4>
 800061e:	458e      	cmp	lr, r1
 8000620:	d96a      	bls.n	80006f8 <__udivmoddi4+0x2b4>
 8000622:	3802      	subs	r0, #2
 8000624:	4461      	add	r1, ip
 8000626:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062a:	fba0 9402 	umull	r9, r4, r0, r2
 800062e:	eba1 010e 	sub.w	r1, r1, lr
 8000632:	42a1      	cmp	r1, r4
 8000634:	46c8      	mov	r8, r9
 8000636:	46a6      	mov	lr, r4
 8000638:	d356      	bcc.n	80006e8 <__udivmoddi4+0x2a4>
 800063a:	d053      	beq.n	80006e4 <__udivmoddi4+0x2a0>
 800063c:	b15d      	cbz	r5, 8000656 <__udivmoddi4+0x212>
 800063e:	ebb3 0208 	subs.w	r2, r3, r8
 8000642:	eb61 010e 	sbc.w	r1, r1, lr
 8000646:	fa01 f707 	lsl.w	r7, r1, r7
 800064a:	fa22 f306 	lsr.w	r3, r2, r6
 800064e:	40f1      	lsrs	r1, r6
 8000650:	431f      	orrs	r7, r3
 8000652:	e9c5 7100 	strd	r7, r1, [r5]
 8000656:	2600      	movs	r6, #0
 8000658:	4631      	mov	r1, r6
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	40d8      	lsrs	r0, r3
 8000664:	fa0c fc02 	lsl.w	ip, ip, r2
 8000668:	fa21 f303 	lsr.w	r3, r1, r3
 800066c:	4091      	lsls	r1, r2
 800066e:	4301      	orrs	r1, r0
 8000670:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000674:	fa1f fe8c 	uxth.w	lr, ip
 8000678:	fbb3 f0f7 	udiv	r0, r3, r7
 800067c:	fb07 3610 	mls	r6, r7, r0, r3
 8000680:	0c0b      	lsrs	r3, r1, #16
 8000682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000686:	fb00 f60e 	mul.w	r6, r0, lr
 800068a:	429e      	cmp	r6, r3
 800068c:	fa04 f402 	lsl.w	r4, r4, r2
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0x260>
 8000692:	eb1c 0303 	adds.w	r3, ip, r3
 8000696:	f100 38ff 	add.w	r8, r0, #4294967295
 800069a:	d22f      	bcs.n	80006fc <__udivmoddi4+0x2b8>
 800069c:	429e      	cmp	r6, r3
 800069e:	d92d      	bls.n	80006fc <__udivmoddi4+0x2b8>
 80006a0:	3802      	subs	r0, #2
 80006a2:	4463      	add	r3, ip
 80006a4:	1b9b      	subs	r3, r3, r6
 80006a6:	b289      	uxth	r1, r1
 80006a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006ac:	fb07 3316 	mls	r3, r7, r6, r3
 80006b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b4:	fb06 f30e 	mul.w	r3, r6, lr
 80006b8:	428b      	cmp	r3, r1
 80006ba:	d908      	bls.n	80006ce <__udivmoddi4+0x28a>
 80006bc:	eb1c 0101 	adds.w	r1, ip, r1
 80006c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c4:	d216      	bcs.n	80006f4 <__udivmoddi4+0x2b0>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d914      	bls.n	80006f4 <__udivmoddi4+0x2b0>
 80006ca:	3e02      	subs	r6, #2
 80006cc:	4461      	add	r1, ip
 80006ce:	1ac9      	subs	r1, r1, r3
 80006d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d4:	e738      	b.n	8000548 <__udivmoddi4+0x104>
 80006d6:	462e      	mov	r6, r5
 80006d8:	4628      	mov	r0, r5
 80006da:	e705      	b.n	80004e8 <__udivmoddi4+0xa4>
 80006dc:	4606      	mov	r6, r0
 80006de:	e6e3      	b.n	80004a8 <__udivmoddi4+0x64>
 80006e0:	4618      	mov	r0, r3
 80006e2:	e6f8      	b.n	80004d6 <__udivmoddi4+0x92>
 80006e4:	454b      	cmp	r3, r9
 80006e6:	d2a9      	bcs.n	800063c <__udivmoddi4+0x1f8>
 80006e8:	ebb9 0802 	subs.w	r8, r9, r2
 80006ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f0:	3801      	subs	r0, #1
 80006f2:	e7a3      	b.n	800063c <__udivmoddi4+0x1f8>
 80006f4:	4646      	mov	r6, r8
 80006f6:	e7ea      	b.n	80006ce <__udivmoddi4+0x28a>
 80006f8:	4620      	mov	r0, r4
 80006fa:	e794      	b.n	8000626 <__udivmoddi4+0x1e2>
 80006fc:	4640      	mov	r0, r8
 80006fe:	e7d1      	b.n	80006a4 <__udivmoddi4+0x260>
 8000700:	46d0      	mov	r8, sl
 8000702:	e77b      	b.n	80005fc <__udivmoddi4+0x1b8>
 8000704:	3b02      	subs	r3, #2
 8000706:	4461      	add	r1, ip
 8000708:	e732      	b.n	8000570 <__udivmoddi4+0x12c>
 800070a:	4630      	mov	r0, r6
 800070c:	e709      	b.n	8000522 <__udivmoddi4+0xde>
 800070e:	4464      	add	r4, ip
 8000710:	3802      	subs	r0, #2
 8000712:	e742      	b.n	800059a <__udivmoddi4+0x156>

08000714 <__aeabi_idiv0>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000718:	4901      	ldr	r1, [pc, #4]	; (8000720 <vApplicationIdleHook+0x8>)
 800071a:	2000      	movs	r0, #0
 800071c:	f00c b812 	b.w	800c744 <vTaskSetApplicationTaskTag>
 8000720:	08001f31 	.word	0x08001f31

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000728:	224c      	movs	r2, #76	; 0x4c
 800072a:	2100      	movs	r1, #0
 800072c:	a809      	add	r0, sp, #36	; 0x24
 800072e:	f01e fde5 	bl	801f2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	a801      	add	r0, sp, #4
 8000738:	f01e fde0 	bl	801f2fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800073c:	2004      	movs	r0, #4
 800073e:	f008 fa41 	bl	8008bc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SystemClock_Config+0xcc>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	f022 0201 	bic.w	r2, r2, #1
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	699a      	ldr	r2, [r3, #24]
 8000764:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	0491      	lsls	r1, r2, #18
 8000770:	d5fc      	bpl.n	800076c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000772:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000780:	f023 0303 	bic.w	r3, r3, #3
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800078e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2301      	movs	r3, #1
 8000798:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f008 fcf5 	bl	80091a0 <HAL_RCC_OscConfig>
 80007b6:	b108      	cbz	r0, 80007bc <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f009 f885 	bl	80098e4 <HAL_RCC_ClockConfig>
 80007da:	4601      	mov	r1, r0
 80007dc:	b108      	cbz	r0, 80007e2 <SystemClock_Config+0xbe>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e6:	f008 ff8f 	bl	8009708 <HAL_RCC_MCOConfig>
}
 80007ea:	b01d      	add	sp, #116	; 0x74
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58000400 	.word	0x58000400
 80007f4:	58024800 	.word	0x58024800
 80007f8:	58024400 	.word	0x58024400

080007fc <main>:
{
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	b0bd      	sub	sp, #244	; 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000802:	2210      	movs	r2, #16
 8000804:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000806:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000808:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800080a:	f04f 4710 	mov.w	r7, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080e:	f01e fd75 	bl	801f2fc <memset>
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000812:	2504      	movs	r5, #4
  HAL_MPU_Disable();
 8000814:	f006 fc72 	bl	80070fc <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000818:	4bb6      	ldr	r3, [pc, #728]	; (8000af4 <main+0x2f8>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081a:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081c:	f8ad 40bc 	strh.w	r4, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000820:	9432      	str	r4, [sp, #200]	; 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000822:	e9cd 7330 	strd	r7, r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000826:	f006 fc87 	bl	8007138 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800082a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800082e:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000832:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000836:	f006 fc7f 	bl	8007138 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800083a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800083e:	f88d 40ca 	strb.w	r4, [sp, #202]	; 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000842:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000846:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800084a:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800084c:	2318      	movs	r3, #24
 800084e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f006 fc71 	bl	8007138 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000856:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800085a:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 800085e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000862:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000864:	2312      	movs	r3, #18
 8000866:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000870:	f006 fc62 	bl	8007138 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000878:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800087a:	f88d 50bd 	strb.w	r5, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 800087e:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000880:	2311      	movs	r3, #17
 8000882:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000886:	f006 fc57 	bl	8007138 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800088a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800088e:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000892:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000896:	4b98      	ldr	r3, [pc, #608]	; (8000af8 <main+0x2fc>)
 8000898:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800089a:	230e      	movs	r3, #14
 800089c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a0:	f006 fc4a 	bl	8007138 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a4:	4628      	mov	r0, r5
 80008a6:	f006 fc37 	bl	8007118 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008aa:	4b94      	ldr	r3, [pc, #592]	; (8000afc <main+0x300>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80008b2:	d111      	bne.n	80008d8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d8:	4a88      	ldr	r2, [pc, #544]	; (8000afc <main+0x300>)
 80008da:	6953      	ldr	r3, [r2, #20]
 80008dc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008e0:	d123      	bne.n	800092a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ee:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008f6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008fa:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000900:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000902:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000906:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000908:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800090c:	d2f9      	bcs.n	8000902 <main+0x106>
    } while(sets-- != 0U);
 800090e:	3b20      	subs	r3, #32
 8000910:	f113 0f20 	cmn.w	r3, #32
 8000914:	d1f2      	bne.n	80008fc <main+0x100>
 8000916:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091a:	6953      	ldr	r3, [r2, #20]
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000926:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	4d74      	ldr	r5, [pc, #464]	; (8000b00 <main+0x304>)
 8000930:	682c      	ldr	r4, [r5, #0]
 8000932:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000936:	f000 8324 	beq.w	8000f82 <main+0x786>
 800093a:	3b01      	subs	r3, #1
 800093c:	d1f8      	bne.n	8000930 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
  while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x144>
 8000942:	b672      	cpsid	i
 8000944:	e7fe      	b.n	8000944 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000946:	f006 f869 	bl	8006a1c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800094a:	4640      	mov	r0, r8
 800094c:	f006 f8b4 	bl	8006ab8 <BSP_SDRAM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	b108      	cbz	r0, 8000958 <main+0x15c>
 8000954:	b672      	cpsid	i
  while (1)
 8000956:	e7fe      	b.n	8000956 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000958:	486a      	ldr	r0, [pc, #424]	; (8000b04 <main+0x308>)
 800095a:	4a6b      	ldr	r2, [pc, #428]	; (8000b08 <main+0x30c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800095c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800095e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000960:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000964:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000968:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800096c:	f008 fa3e 	bl	8008dec <HAL_QSPI_Init>
 8000970:	b108      	cbz	r0, 8000976 <main+0x17a>
 8000972:	b672      	cpsid	i
  while (1)
 8000974:	e7fe      	b.n	8000974 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000976:	a92f      	add	r1, sp, #188	; 0xbc
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000978:	f88d 70bc 	strb.w	r7, [sp, #188]	; 0xbc
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800097c:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000980:	f88d 50be 	strb.w	r5, [sp, #190]	; 0xbe
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000984:	f005 fe90 	bl	80066a8 <BSP_QSPI_Init>
 8000988:	b108      	cbz	r0, 800098e <main+0x192>
 800098a:	b672      	cpsid	i
  while (1)
 800098c:	e7fe      	b.n	800098c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800098e:	f005 fe37 	bl	8006600 <BSP_QSPI_EnableMemoryMappedMode>
 8000992:	4603      	mov	r3, r0
 8000994:	b108      	cbz	r0, 800099a <main+0x19e>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800099a:	485c      	ldr	r0, [pc, #368]	; (8000b0c <main+0x310>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800099c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a0:	4d5b      	ldr	r5, [pc, #364]	; (8000b10 <main+0x314>)
  hdma2d.Init.OutputOffset = 0;
 80009a2:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 80009a6:	e9c0 5200 	strd	r5, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009aa:	f006 fc51 	bl	8007250 <HAL_DMA2D_Init>
 80009ae:	4605      	mov	r5, r0
 80009b0:	b108      	cbz	r0, 80009b6 <main+0x1ba>
 80009b2:	b672      	cpsid	i
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x1b8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 80009b6:	4602      	mov	r2, r0
 80009b8:	4631      	mov	r1, r6
 80009ba:	4856      	ldr	r0, [pc, #344]	; (8000b14 <main+0x318>)
 80009bc:	f007 faf4 	bl	8007fa8 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009c0:	2014      	movs	r0, #20
 80009c2:	f006 fb1d 	bl	8007000 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009c6:	4631      	mov	r1, r6
 80009c8:	4622      	mov	r2, r4
 80009ca:	4852      	ldr	r0, [pc, #328]	; (8000b14 <main+0x318>)
 80009cc:	f007 faec 	bl	8007fa8 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009d0:	200a      	movs	r0, #10
 80009d2:	f006 fb15 	bl	8007000 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009d6:	2224      	movs	r2, #36	; 0x24
 80009d8:	4629      	mov	r1, r5
 80009da:	a819      	add	r0, sp, #100	; 0x64
  DSI_PLLInitTypeDef PLLInit = {0};
 80009dc:	9512      	str	r5, [sp, #72]	; 0x48
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009de:	f01e fc8d 	bl	801f2fc <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009e2:	2218      	movs	r2, #24
 80009e4:	4629      	mov	r1, r5
 80009e6:	a813      	add	r0, sp, #76	; 0x4c
  hdsi.Instance = DSI;
 80009e8:	4e4b      	ldr	r6, [pc, #300]	; (8000b18 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009ea:	f01e fc87 	bl	801f2fc <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	4629      	mov	r1, r5
 80009f2:	a82f      	add	r0, sp, #188	; 0xbc
 80009f4:	f01e fc82 	bl	801f2fc <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009f8:	4629      	mov	r1, r5
 80009fa:	222c      	movs	r2, #44	; 0x2c
 80009fc:	a822      	add	r0, sp, #136	; 0x88
 80009fe:	f01e fc7d 	bl	801f2fc <memset>
  hdsi.Instance = DSI;
 8000a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a06:	2063      	movs	r0, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a08:	a910      	add	r1, sp, #64	; 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a0a:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a0e:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a10:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a14:	2305      	movs	r3, #5
 8000a16:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f006 fd64 	bl	80074e8 <HAL_DSI_Init>
 8000a20:	b108      	cbz	r0, 8000a26 <main+0x22a>
 8000a22:	b672      	cpsid	i
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x228>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a26:	e9cd 4019 	strd	r4, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a2a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a2e:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a32:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  HostTimeouts.BTATimeout = 0;
 8000a36:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a38:	a919      	add	r1, sp, #100	; 0x64
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	f006 ff80 	bl	8007940 <HAL_DSI_ConfigHostTimeouts>
 8000a40:	b108      	cbz	r0, 8000a46 <main+0x24a>
 8000a42:	b672      	cpsid	i
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x248>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a46:	2321      	movs	r3, #33	; 0x21
 8000a48:	221c      	movs	r2, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a4a:	210f      	movs	r1, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a4c:	4832      	ldr	r0, [pc, #200]	; (8000b18 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a4e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a52:	2319      	movs	r3, #25
 8000a54:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a58:	2300      	movs	r3, #0
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a5a:	a913      	add	r1, sp, #76	; 0x4c
  PhyTimings.StopWaitTime = 0;
 8000a5c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a60:	f006 ff31 	bl	80078c6 <HAL_DSI_ConfigPhyTimer>
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x26e>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x26c>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	482a      	ldr	r0, [pc, #168]	; (8000b18 <main+0x31c>)
 8000a6e:	f006 ff19 	bl	80078a4 <HAL_DSI_ConfigFlowControl>
 8000a72:	b108      	cbz	r0, 8000a78 <main+0x27c>
 8000a74:	b672      	cpsid	i
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <main+0x27a>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7c:	4826      	ldr	r0, [pc, #152]	; (8000b18 <main+0x31c>)
 8000a7e:	f007 f8e9 	bl	8007c54 <HAL_DSI_SetLowPowerRXFilter>
 8000a82:	4601      	mov	r1, r0
 8000a84:	b108      	cbz	r0, 8000a8a <main+0x28e>
 8000a86:	b672      	cpsid	i
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x28c>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <main+0x31c>)
 8000a8c:	f006 fcca 	bl	8007424 <HAL_DSI_ConfigErrorMonitor>
 8000a90:	b108      	cbz	r0, 8000a96 <main+0x29a>
 8000a92:	b672      	cpsid	i
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x298>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9e:	f44f 6980 	mov.w	r9, #1024	; 0x400
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000aa2:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000aa6:	f44f 3a00 	mov.w	sl, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000aaa:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aae:	a92f      	add	r1, sp, #188	; 0xbc
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <main+0x31c>)
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000ab2:	e9cd 832f 	strd	r8, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aba:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000abe:	e9cd 9331 	strd	r9, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ac6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000aca:	e9cd 7335 	strd	r7, r3, [sp, #212]	; 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ace:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ad2:	e9cd a337 	strd	sl, r3, [sp, #220]	; 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ada:	e9cd b339 	strd	fp, r3, [sp, #228]	; 0xe4
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000ade:	f04f 0b02 	mov.w	fp, #2
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ae2:	e9cd 9833 	strd	r9, r8, [sp, #204]	; 0xcc
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000ae6:	f8cd b0ec 	str.w	fp, [sp, #236]	; 0xec
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aea:	f006 fea7 	bl	800783c <HAL_DSI_ConfigCommand>
 8000aee:	b1a8      	cbz	r0, 8000b1c <main+0x320>
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <main+0x2f6>
 8000af4:	0300001b 	.word	0x0300001b
 8000af8:	10040000 	.word	0x10040000
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	58024400 	.word	0x58024400
 8000b04:	24000330 	.word	0x24000330
 8000b08:	52005000 	.word	0x52005000
 8000b0c:	24000204 	.word	0x24000204
 8000b10:	52001000 	.word	0x52001000
 8000b14:	58021800 	.word	0x58021800
 8000b18:	2400026c 	.word	0x2400026c
  CmdCfg.CommandSize = 400;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	f44f 74c8 	mov.w	r4, #400	; 0x190
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b22:	f04f 0a10 	mov.w	sl, #16
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b26:	2501      	movs	r5, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b28:	a922      	add	r1, sp, #136	; 0x88
  CmdCfg.VirtualChannelID = 0;
 8000b2a:	9022      	str	r0, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b2c:	9029      	str	r0, [sp, #164]	; 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b2e:	952c      	str	r5, [sp, #176]	; 0xb0
  CmdCfg.CommandSize = 400;
 8000b30:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b34:	2380      	movs	r3, #128	; 0x80
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b36:	e9cd a025 	strd	sl, r0, [sp, #148]	; 0x94
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b3a:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b3e:	e9cd 302a 	strd	r3, r0, [sp, #168]	; 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b42:	4889      	ldr	r0, [pc, #548]	; (8000d68 <main+0x56c>)
 8000b44:	f006 fe08 	bl	8007758 <HAL_DSI_ConfigAdaptedCommandMode>
 8000b48:	4601      	mov	r1, r0
 8000b4a:	b108      	cbz	r0, 8000b50 <main+0x354>
 8000b4c:	b672      	cpsid	i
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <main+0x352>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b50:	4885      	ldr	r0, [pc, #532]	; (8000d68 <main+0x56c>)
 8000b52:	f006 fdf0 	bl	8007736 <HAL_DSI_SetGenericVCID>
 8000b56:	4601      	mov	r1, r0
 8000b58:	b108      	cbz	r0, 8000b5e <main+0x362>
 8000b5a:	b672      	cpsid	i
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <main+0x360>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b5e:	9003      	str	r0, [sp, #12]
 8000b60:	2234      	movs	r2, #52	; 0x34
 8000b62:	a822      	add	r0, sp, #136	; 0x88
  hltdc.Instance = LTDC;
 8000b64:	4e81      	ldr	r6, [pc, #516]	; (8000d6c <main+0x570>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b66:	f01e fbc9 	bl	801f2fc <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b6a:	4881      	ldr	r0, [pc, #516]	; (8000d70 <main+0x574>)
 8000b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b70:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b74:	9903      	ldr	r1, [sp, #12]
  hltdc.Init.TotalHeigh = 483;
 8000b76:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b7a:	e9c6 0300 	strd	r0, r3, [r6]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b82:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 8000b84:	86b1      	strh	r1, [r6, #52]	; 0x34
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b86:	60b3      	str	r3, [r6, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b88:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
  hltdc.Init.Backcolor.Red = 0;
 8000b8c:	f886 1036 	strb.w	r1, [r6, #54]	; 0x36
  hltdc.Init.AccumulatedActiveH = 482;
 8000b90:	e9c6 c309 	strd	ip, r3, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b94:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b98:	e9c6 1103 	strd	r1, r1, [r6, #12]
  hltdc.Init.VerticalSync = 0;
 8000b9c:	e9c6 1105 	strd	r1, r1, [r6, #20]
  hltdc.Init.AccumulatedVBP = 2;
 8000ba0:	e9c6 bb07 	strd	fp, fp, [r6, #28]
  hltdc.Init.TotalHeigh = 483;
 8000ba4:	e9c6 e30b 	strd	lr, r3, [r6, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ba8:	f007 fe48 	bl	800883c <HAL_LTDC_Init>
 8000bac:	b108      	cbz	r0, 8000bb2 <main+0x3b6>
 8000bae:	b672      	cpsid	i
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x3b4>
  pLayerCfg.Alpha = 255;
 8000bb2:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000bb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000bbc:	9024      	str	r0, [sp, #144]	; 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000bbe:	f8ad 00b8 	strh.w	r0, [sp, #184]	; 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000bc2:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
  pLayerCfg.ImageHeight = 480;
 8000bc6:	932d      	str	r3, [sp, #180]	; 0xb4
  pLayerCfg.Alpha0 = 0;
 8000bc8:	e9cd 2027 	strd	r2, r0, [sp, #156]	; 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bcc:	2207      	movs	r2, #7
 8000bce:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bd2:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bd6:	a922      	add	r1, sp, #136	; 0x88
  pLayerCfg.WindowX1 = 400;
 8000bd8:	e9cd 0422 	strd	r0, r4, [sp, #136]	; 0x88
  pLayerCfg.ImageWidth = 400;
 8000bdc:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be0:	4602      	mov	r2, r0
 8000be2:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000be4:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be8:	f007 fef4 	bl	80089d4 <HAL_LTDC_ConfigLayer>
 8000bec:	4604      	mov	r4, r0
 8000bee:	b108      	cbz	r0, 8000bf4 <main+0x3f8>
 8000bf0:	b672      	cpsid	i
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <main+0x3f6>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bf4:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8000bf6:	485c      	ldr	r0, [pc, #368]	; (8000d68 <main+0x56c>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bf8:	6993      	ldr	r3, [r2, #24]
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000c00:	f006 ff04 	bl	8007a0c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000c04:	495b      	ldr	r1, [pc, #364]	; (8000d74 <main+0x578>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c06:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <main+0x57c>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c08:	485c      	ldr	r0, [pc, #368]	; (8000d7c <main+0x580>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c0a:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c0c:	4b5c      	ldr	r3, [pc, #368]	; (8000d80 <main+0x584>)
  IOCtx.Address     = 0;
 8000c0e:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c10:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000c12:	4b5c      	ldr	r3, [pc, #368]	; (8000d84 <main+0x588>)
 8000c14:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c16:	f005 fae7 	bl	80061e8 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000c1a:	462a      	mov	r2, r5
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	4857      	ldr	r0, [pc, #348]	; (8000d7c <main+0x580>)
 8000c20:	f004 ff3e 	bl	8005aa0 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c24:	2328      	movs	r3, #40	; 0x28
 8000c26:	2215      	movs	r2, #21
 8000c28:	4621      	mov	r1, r4
 8000c2a:	484f      	ldr	r0, [pc, #316]	; (8000d68 <main+0x56c>)
 8000c2c:	9400      	str	r4, [sp, #0]
 8000c2e:	f006 ff20 	bl	8007a72 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c32:	a92f      	add	r1, sp, #188	; 0xbc
 8000c34:	484c      	ldr	r0, [pc, #304]	; (8000d68 <main+0x56c>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c36:	9439      	str	r4, [sp, #228]	; 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c38:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c3c:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c40:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c44:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c48:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c4c:	f006 fdf6 	bl	800783c <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c50:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c54:	4622      	mov	r2, r4
 8000c56:	4630      	mov	r0, r6
 8000c58:	f007 feea 	bl	8008a30 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c5c:	6832      	ldr	r2, [r6, #0]
	GPIO_InitStruct.Pin = LED4_Blue_Pin;
 8000c5e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  __HAL_LTDC_ENABLE(&hltdc);
 8000c62:	6993      	ldr	r3, [r2, #24]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c6a:	f000 fd31 	bl	80016d0 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c6e:	f000 fd2e 	bl	80016ce <MX_TouchGFX_PreOSInit>
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <main+0x58c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	9433      	str	r4, [sp, #204]	; 0xcc
	HAL_GPIO_Init(LED1_Green_Port, &GPIO_InitStruct);
 8000c76:	a92f      	add	r1, sp, #188	; 0xbc
 8000c78:	4844      	ldr	r0, [pc, #272]	; (8000d8c <main+0x590>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c8e:	9532      	str	r5, [sp, #200]	; 0xc8
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c94:	9322      	str	r3, [sp, #136]	; 0x88
 8000c96:	9b22      	ldr	r3, [sp, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	e9cd 952f 	strd	r9, r5, [sp, #188]	; 0xbc
	HAL_GPIO_Init(LED1_Green_Port, &GPIO_InitStruct);
 8000c9c:	f006 fff0 	bl	8007c80 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED1_Green_Port, LED1_Green_Pin, GPIO_PIN_RESET);
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	4649      	mov	r1, r9
 8000ca4:	4839      	ldr	r0, [pc, #228]	; (8000d8c <main+0x590>)
 8000ca6:	f007 f97f 	bl	8007fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED2_Orange_Port, &GPIO_InitStruct);
 8000caa:	a92f      	add	r1, sp, #188	; 0xbc
 8000cac:	4837      	ldr	r0, [pc, #220]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	e9cd 852f 	strd	r8, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cb2:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED2_Orange_Port, &GPIO_InitStruct);
 8000cb6:	f006 ffe3 	bl	8007c80 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED2_Orange_Port, LED2_Orange_Pin, GPIO_PIN_RESET);
 8000cba:	4622      	mov	r2, r4
 8000cbc:	4641      	mov	r1, r8
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <main+0x590>)
 8000cc0:	f007 f972 	bl	8007fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED3_Red_Port, &GPIO_InitStruct);
 8000cc4:	a92f      	add	r1, sp, #188	; 0xbc
 8000cc6:	4831      	ldr	r0, [pc, #196]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	e9cd 752f 	strd	r7, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ccc:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED3_Red_Port, &GPIO_InitStruct);
 8000cd0:	f006 ffd6 	bl	8007c80 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED3_Red_Port, LED3_Red_Pin, GPIO_PIN_RESET);
 8000cd4:	4622      	mov	r2, r4
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	482c      	ldr	r0, [pc, #176]	; (8000d8c <main+0x590>)
 8000cda:	f007 f965 	bl	8007fa8 <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED4_Blue_Port, &GPIO_InitStruct);
 8000cde:	a92f      	add	r1, sp, #188	; 0xbc
 8000ce0:	482a      	ldr	r0, [pc, #168]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	e9cd 652f 	strd	r6, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce6:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED4_Blue_Port, &GPIO_InitStruct);
 8000cea:	f006 ffc9 	bl	8007c80 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED4_Blue_Port, LED4_Blue_Pin, GPIO_PIN_RESET);
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <main+0x590>)
 8000cf4:	f007 f958 	bl	8007fa8 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cf8:	2304      	movs	r3, #4
	HAL_GPIO_Init(JOY_SEL_Port, &GPIO_InitStruct);
 8000cfa:	a92f      	add	r1, sp, #188	; 0xbc
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <main+0x594>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d02:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_SEL_Port, &GPIO_InitStruct);
 8000d06:	f006 ffbb 	bl	8007c80 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000d0a:	2308      	movs	r3, #8
	HAL_GPIO_Init(JOY_DOWN_Port, &GPIO_InitStruct);
 8000d0c:	a92f      	add	r1, sp, #188	; 0xbc
 8000d0e:	4820      	ldr	r0, [pc, #128]	; (8000d90 <main+0x594>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d14:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_DOWN_Port, &GPIO_InitStruct);
 8000d18:	f006 ffb2 	bl	8007c80 <HAL_GPIO_Init>
	HAL_GPIO_Init(JOY_LEFT_Port, &GPIO_InitStruct);
 8000d1c:	a92f      	add	r1, sp, #188	; 0xbc
 8000d1e:	481c      	ldr	r0, [pc, #112]	; (8000d90 <main+0x594>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d20:	e9cd a42f 	strd	sl, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d24:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_LEFT_Port, &GPIO_InitStruct);
 8000d28:	f006 ffaa 	bl	8007c80 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8000d2c:	2320      	movs	r3, #32
	HAL_GPIO_Init(JOY_RIGHT_Port, &GPIO_InitStruct);
 8000d2e:	a92f      	add	r1, sp, #188	; 0xbc
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <main+0x594>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d32:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d36:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_RIGHT_Port, &GPIO_InitStruct);
 8000d3a:	f006 ffa1 	bl	8007c80 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000d3e:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(JOY_UP_Port, &GPIO_InitStruct);
 8000d40:	a92f      	add	r1, sp, #188	; 0xbc
 8000d42:	4813      	ldr	r0, [pc, #76]	; (8000d90 <main+0x594>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d48:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_UP_Port, &GPIO_InitStruct);
 8000d4c:	f006 ff98 	bl	8007c80 <HAL_GPIO_Init>
  osKernelInitialize();
 8000d50:	f00a f85c 	bl	800ae0c <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d54:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <main+0x598>)
 8000d56:	4621      	mov	r1, r4
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <main+0x59c>)
 8000d5a:	f00a f883 	bl	800ae64 <osThreadNew>
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <main+0x5a0>)
 8000d60:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d62:	f00a f865 	bl	800ae30 <osKernelStart>
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <main+0x56a>
 8000d68:	2400026c 	.word	0x2400026c
 8000d6c:	24000288 	.word	0x24000288
 8000d70:	50001000 	.word	0x50001000
 8000d74:	240001ac 	.word	0x240001ac
 8000d78:	080065d1 	.word	0x080065d1
 8000d7c:	240001bc 	.word	0x240001bc
 8000d80:	08001c65 	.word	0x08001c65
 8000d84:	08001c9d 	.word	0x08001c9d
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58022000 	.word	0x58022000
 8000d90:	58022800 	.word	0x58022800
 8000d94:	0802134c 	.word	0x0802134c
 8000d98:	080016df 	.word	0x080016df
 8000d9c:	240001dc 	.word	0x240001dc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	2214      	movs	r2, #20
 8000da2:	2100      	movs	r1, #0
 8000da4:	a82f      	add	r0, sp, #188	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f01e faa8 	bl	801f2fc <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000dba:	4883      	ldr	r0, [pc, #524]	; (8000fc8 <main+0x7cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dc2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000dc6:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd0:	9306      	str	r3, [sp, #24]
 8000dd2:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ddc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000de0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de8:	9307      	str	r3, [sp, #28]
 8000dea:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000df8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dfc:	f003 0310 	and.w	r3, r3, #16
 8000e00:	9308      	str	r3, [sp, #32]
 8000e02:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e04:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e10:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e18:	9309      	str	r3, [sp, #36]	; 0x24
 8000e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e28:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	930a      	str	r3, [sp, #40]	; 0x28
 8000e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e34:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e40:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e58:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	930c      	str	r3, [sp, #48]	; 0x30
 8000e62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e70:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	930d      	str	r3, [sp, #52]	; 0x34
 8000e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e88:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e8c:	f003 0320 	and.w	r3, r3, #32
 8000e90:	930e      	str	r3, [sp, #56]	; 0x38
 8000e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000ea0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	930f      	str	r3, [sp, #60]	; 0x3c
 8000eac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000eae:	f007 f87b 	bl	8007fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	4845      	ldr	r0, [pc, #276]	; (8000fcc <main+0x7d0>)
 8000eb8:	f007 f876 	bl	8007fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec2:	4843      	ldr	r0, [pc, #268]	; (8000fd0 <main+0x7d4>)
 8000ec4:	f007 f870 	bl	8007fa8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000ece:	483e      	ldr	r0, [pc, #248]	; (8000fc8 <main+0x7cc>)
 8000ed0:	f007 f86a 	bl	8007fa8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ed8:	a92f      	add	r1, sp, #188	; 0xbc
 8000eda:	483b      	ldr	r0, [pc, #236]	; (8000fc8 <main+0x7cc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	e9cd 5731 	strd	r5, r7, [sp, #196]	; 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ee4:	f006 fecc 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	a92f      	add	r1, sp, #188	; 0xbc
 8000eec:	4839      	ldr	r0, [pc, #228]	; (8000fd4 <main+0x7d8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000eee:	9533      	str	r5, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	e9cd 832f 	strd	r8, r3, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f006 fec2 	bl	8007c80 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000efc:	a92f      	add	r1, sp, #188	; 0xbc
 8000efe:	4833      	ldr	r0, [pc, #204]	; (8000fcc <main+0x7d0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	e9cd 642f 	strd	r6, r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	e9cd 4731 	strd	r4, r7, [sp, #196]	; 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f006 feba 	bl	8007c80 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	a92f      	add	r1, sp, #188	; 0xbc
 8000f0e:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <main+0x7d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	e9cd 842f 	strd	r8, r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	e9cd 5731 	strd	r5, r7, [sp, #196]	; 0xc4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f006 feb2 	bl	8007c80 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000f1c:	482e      	ldr	r0, [pc, #184]	; (8000fd8 <main+0x7dc>)
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <main+0x7e0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f20:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000f22:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f24:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f26:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f2a:	f006 f931 	bl	8007190 <HAL_CRC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2800      	cmp	r0, #0
 8000f32:	f47f ad06 	bne.w	8000942 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000f36:	492a      	ldr	r1, [pc, #168]	; (8000fe0 <main+0x7e4>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f38:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f3a:	482a      	ldr	r0, [pc, #168]	; (8000fe4 <main+0x7e8>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000f3c:	680a      	ldr	r2, [r1, #0]
 8000f3e:	f022 0201 	bic.w	r2, r2, #1
 8000f42:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f44:	a92f      	add	r1, sp, #188	; 0xbc
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f46:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <main+0x7ec>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f48:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f4a:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f4e:	2220      	movs	r2, #32
 8000f50:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f54:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000f56:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f5a:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f5e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000f62:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f64:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RowCycleDelay = 16;
 8000f68:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RPDelay = 16;
 8000f6c:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  SdramTiming.RCDDelay = 16;
 8000f70:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f72:	f009 fc6f 	bl	800a854 <HAL_SDRAM_Init>
 8000f76:	4680      	mov	r8, r0
 8000f78:	2800      	cmp	r0, #0
 8000f7a:	f43f ace4 	beq.w	8000946 <main+0x14a>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x784>
  HAL_Init();
 8000f82:	f005 fffd 	bl	8006f80 <HAL_Init>
  SystemClock_Config();
 8000f86:	f7ff fbcd 	bl	8000724 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f8a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f8e:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f94:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000f98:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa0:	9305      	str	r3, [sp, #20]
 8000fa2:	9b05      	ldr	r3, [sp, #20]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000fa4:	f007 f80e 	bl	8007fc4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000fa8:	4621      	mov	r1, r4
 8000faa:	4620      	mov	r0, r4
 8000fac:	f007 f818 	bl	8007fe0 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000fb0:	4c0e      	ldr	r4, [pc, #56]	; (8000fec <main+0x7f0>)
 8000fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	0416      	lsls	r6, r2, #16
 8000fba:	f53f aef1 	bmi.w	8000da0 <main+0x5a4>
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	d1f9      	bne.n	8000fb6 <main+0x7ba>
 8000fc2:	b672      	cpsid	i
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <main+0x7c8>
 8000fc6:	bf00      	nop
 8000fc8:	58022400 	.word	0x58022400
 8000fcc:	58021800 	.word	0x58021800
 8000fd0:	58021400 	.word	0x58021400
 8000fd4:	58020000 	.word	0x58020000
 8000fd8:	240001e0 	.word	0x240001e0
 8000fdc:	58024c00 	.word	0x58024c00
 8000fe0:	52004000 	.word	0x52004000
 8000fe4:	2400037c 	.word	0x2400037c
 8000fe8:	52004140 	.word	0x52004140
 8000fec:	58024400 	.word	0x58024400

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000ff0:	6802      	ldr	r2, [r0, #0]
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d101      	bne.n	8000ffc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ff8:	f005 bff0 	b.w	8006fdc <HAL_IncTick>
}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000

08001004 <Error_Handler>:
 8001004:	b672      	cpsid	i
  while (1)
 8001006:	e7fe      	b.n	8001006 <Error_Handler+0x2>

08001008 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_MspInit+0x2c>)
{
 800100a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001016:	f042 0202 	orr.w	r2, r2, #2
 800101a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800101e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800102e:	f006 b811 	b.w	8007054 <HAL_NVIC_SetPriority>
 8001032:	bf00      	nop
 8001034:	58024400 	.word	0x58024400

08001038 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001038:	6802      	ldr	r2, [r0, #0]
{
 800103a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_CRC_MspInit+0x2c>)
 800103e:	429a      	cmp	r2, r3
 8001040:	d10d      	bne.n	800105e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001042:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001046:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800104a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800104e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800105e:	b002      	add	sp, #8
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	58024c00 	.word	0x58024c00

08001068 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_DMA2D_MspInit+0x40>)
{
 800106a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800106c:	6802      	ldr	r2, [r0, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d117      	bne.n	80010a2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001074:	2107      	movs	r1, #7
 8001076:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001078:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800107c:	f042 0210 	orr.w	r2, r2, #16
 8001080:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001084:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001086:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001092:	f005 ffdf 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001096:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001098:	b003      	add	sp, #12
 800109a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800109e:	f006 b80b 	b.w	80070b8 <HAL_NVIC_EnableIRQ>
}
 80010a2:	b003      	add	sp, #12
 80010a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a8:	52001000 	.word	0x52001000
 80010ac:	58024400 	.word	0x58024400

080010b0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80010b0:	b510      	push	{r4, lr}
 80010b2:	b0ba      	sub	sp, #232	; 0xe8
 80010b4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	2214      	movs	r2, #20
 80010b8:	2100      	movs	r1, #0
 80010ba:	a803      	add	r0, sp, #12
 80010bc:	f01e f91e 	bl	801f2fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	22c8      	movs	r2, #200	; 0xc8
 80010c2:	2100      	movs	r1, #0
 80010c4:	a808      	add	r0, sp, #32
 80010c6:	f01e f919 	bl	801f2fc <memset>
  if(hdsi->Instance==DSI)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010d0:	d138      	bne.n	8001144 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010d6:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010da:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010de:	f008 fe87 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	b108      	cbz	r0, 80010e8 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80010e4:	f7ff ff8e 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010ec:	a903      	add	r1, sp, #12
 80010ee:	4817      	ldr	r0, [pc, #92]	; (800114c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80010f0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80010f4:	f042 0210 	orr.w	r2, r2, #16
 80010f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80010fc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001100:	f002 0210 	and.w	r2, r2, #16
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001108:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800110c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001110:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001128:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800112e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001130:	f006 fda6 	bl	8007c80 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001134:	207b      	movs	r0, #123	; 0x7b
 8001136:	4622      	mov	r2, r4
 8001138:	2107      	movs	r1, #7
 800113a:	f005 ff8b 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800113e:	207b      	movs	r0, #123	; 0x7b
 8001140:	f005 ffba 	bl	80070b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001144:	b03a      	add	sp, #232	; 0xe8
 8001146:	bd10      	pop	{r4, pc}
 8001148:	58024400 	.word	0x58024400
 800114c:	58022400 	.word	0x58022400

08001150 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	b0b4      	sub	sp, #208	; 0xd0
 8001154:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001156:	22c8      	movs	r2, #200	; 0xc8
 8001158:	2100      	movs	r1, #0
 800115a:	a802      	add	r0, sp, #8
 800115c:	f01e f8ce 	bl	801f2fc <memset>
  if(hltdc->Instance==LTDC)
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <HAL_LTDC_MspInit+0x74>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d12b      	bne.n	80011c0 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001168:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800116c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800116e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001170:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001172:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001176:	23a1      	movs	r3, #161	; 0xa1
 8001178:	2205      	movs	r2, #5
 800117a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800117e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001180:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001184:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001188:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118c:	f008 fe30 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8001190:	b108      	cbz	r0, 8001196 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001192:	f7ff ff37 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001198:	2058      	movs	r0, #88	; 0x58
 800119a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800119c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80011a0:	f042 0208 	orr.w	r2, r2, #8
 80011a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011a8:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011b6:	f005 ff4d 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011ba:	2058      	movs	r0, #88	; 0x58
 80011bc:	f005 ff7c 	bl	80070b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011c0:	b034      	add	sp, #208	; 0xd0
 80011c2:	bd10      	pop	{r4, pc}
 80011c4:	50001000 	.word	0x50001000
 80011c8:	58024400 	.word	0x58024400

080011cc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b0bf      	sub	sp, #252	; 0xfc
 80011d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	2214      	movs	r2, #20
 80011d4:	2100      	movs	r1, #0
 80011d6:	a807      	add	r0, sp, #28
 80011d8:	f01e f890 	bl	801f2fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	22c8      	movs	r2, #200	; 0xc8
 80011de:	2100      	movs	r1, #0
 80011e0:	a80c      	add	r0, sp, #48	; 0x30
 80011e2:	f01e f88b 	bl	801f2fc <memset>
  if(hqspi->Instance==QUADSPI)
 80011e6:	6822      	ldr	r2, [r4, #0]
 80011e8:	4b53      	ldr	r3, [pc, #332]	; (8001338 <HAL_QSPI_MspInit+0x16c>)
 80011ea:	429a      	cmp	r2, r3
 80011ec:	f040 80a1 	bne.w	8001332 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80011f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011f4:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f6:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80011f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f008 fdf8 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8001200:	b108      	cbz	r0, 8001206 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8001202:	f7ff feff 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800120c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800120e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001212:	a907      	add	r1, sp, #28
 8001214:	484a      	ldr	r0, [pc, #296]	; (8001340 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001216:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800121c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001220:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001224:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001228:	9201      	str	r2, [sp, #4]
 800122a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800122c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001234:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001238:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800123c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001240:	9202      	str	r2, [sp, #8]
 8001242:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001244:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001248:	f042 0220 	orr.w	r2, r2, #32
 800124c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001254:	f002 0220 	and.w	r2, r2, #32
 8001258:	9203      	str	r2, [sp, #12]
 800125a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800125c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001260:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001264:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001268:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800126c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001270:	9204      	str	r2, [sp, #16]
 8001272:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001278:	f042 0202 	orr.w	r2, r2, #2
 800127c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001280:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001284:	f002 0202 	and.w	r2, r2, #2
 8001288:	9205      	str	r2, [sp, #20]
 800128a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001290:	f042 0208 	orr.w	r2, r2, #8
 8001294:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	9306      	str	r3, [sp, #24]
 80012a2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80012a8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012b0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b2:	f006 fce5 	bl	8007c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b6:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b8:	a907      	add	r1, sp, #28
 80012ba:	4821      	ldr	r0, [pc, #132]	; (8001340 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012bc:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c6:	f006 fcdb 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012cc:	a907      	add	r1, sp, #28
 80012ce:	481d      	ldr	r0, [pc, #116]	; (8001344 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d0:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012da:	f006 fcd1 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012de:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e2:	a907      	add	r1, sp, #28
 80012e4:	4817      	ldr	r0, [pc, #92]	; (8001344 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012e6:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f0:	f006 fcc6 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012f4:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012f6:	a907      	add	r1, sp, #28
 80012f8:	4813      	ldr	r0, [pc, #76]	; (8001348 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fa:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001304:	f006 fcbc 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001308:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	a907      	add	r1, sp, #28
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800130e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001318:	f006 fcb2 	bl	8007c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	a907      	add	r1, sp, #28
 8001322:	480b      	ldr	r0, [pc, #44]	; (8001350 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001324:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	f006 fca7 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001332:	b03f      	add	sp, #252	; 0xfc
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001336:	bf00      	nop
 8001338:	52005000 	.word	0x52005000
 800133c:	58024400 	.word	0x58024400
 8001340:	58021800 	.word	0x58021800
 8001344:	58021400 	.word	0x58021400
 8001348:	58021c00 	.word	0x58021c00
 800134c:	58020400 	.word	0x58020400
 8001350:	58020c00 	.word	0x58020c00

08001354 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001356:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001358:	2100      	movs	r1, #0
 800135a:	2214      	movs	r2, #20
 800135c:	a801      	add	r0, sp, #4
 800135e:	f01d ffcd 	bl	801f2fc <memset>
  if (FMC_Initialized) {
 8001362:	4b3a      	ldr	r3, [pc, #232]	; (800144c <HAL_SDRAM_MspInit+0xf8>)
 8001364:	6819      	ldr	r1, [r3, #0]
 8001366:	2900      	cmp	r1, #0
 8001368:	d16d      	bne.n	8001446 <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 800136a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800136e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001370:	22c0      	movs	r2, #192	; 0xc0
 8001372:	f01d ffc3 	bl	801f2fc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001376:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800137a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800137e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f008 fd35 	bl	8009df0 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	b108      	cbz	r0, 800138c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001388:	f7ff fe3c 	bl	8001004 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2600      	movs	r6, #0
 8001392:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001394:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001398:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800139a:	a901      	add	r1, sp, #4
 800139c:	482d      	ldr	r0, [pc, #180]	; (8001454 <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800139e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013a2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80013a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013aa:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013c0:	f006 fc5e 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80013c4:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013c8:	a901      	add	r1, sp, #4
 80013ca:	4823      	ldr	r0, [pc, #140]	; (8001458 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013cc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d6:	f006 fc53 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80013da:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013de:	a901      	add	r1, sp, #4
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ec:	f006 fc48 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013f0:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f4:	a901      	add	r1, sp, #4
 80013f6:	481a      	ldr	r0, [pc, #104]	; (8001460 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001402:	f006 fc3d 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001406:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	a901      	add	r1, sp, #4
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001418:	f006 fc32 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800141c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001420:	a901      	add	r1, sp, #4
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001424:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142e:	f006 fc27 	bl	8007c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001432:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	a901      	add	r1, sp, #4
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001438:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001442:	f006 fc1d 	bl	8007c80 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001446:	b039      	add	sp, #228	; 0xe4
 8001448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144a:	bf00      	nop
 800144c:	240003b4 	.word	0x240003b4
 8001450:	58024400 	.word	0x58024400
 8001454:	58022000 	.word	0x58022000
 8001458:	58021000 	.word	0x58021000
 800145c:	58021c00 	.word	0x58021c00
 8001460:	58021800 	.word	0x58021800
 8001464:	58020c00 	.word	0x58020c00
 8001468:	58021400 	.word	0x58021400
 800146c:	58020800 	.word	0x58020800

08001470 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001470:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_SDRAM_MspDeInit+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	bb62      	cbnz	r2, 80014d2 <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001478:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800147a:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800147e:	4816      	ldr	r0, [pc, #88]	; (80014d8 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001480:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001482:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_SDRAM_MspDeInit+0x6c>)
 8001484:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800148c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001490:	f006 fce2 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001494:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <HAL_SDRAM_MspDeInit+0x70>)
 800149a:	f006 fcdd 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800149e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <HAL_SDRAM_MspDeInit+0x74>)
 80014a4:	f006 fcd8 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80014a8:	f248 1131 	movw	r1, #33073	; 0x8131
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <HAL_SDRAM_MspDeInit+0x78>)
 80014ae:	f006 fcd3 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80014b2:	f24c 7103 	movw	r1, #50947	; 0xc703
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <HAL_SDRAM_MspDeInit+0x7c>)
 80014b8:	f006 fcce 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80014bc:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <HAL_SDRAM_MspDeInit+0x80>)
 80014c2:	f006 fcc9 	bl	8007e58 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80014c6:	210d      	movs	r1, #13
 80014c8:	480a      	ldr	r0, [pc, #40]	; (80014f4 <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80014ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80014ce:	f006 bcc3 	b.w	8007e58 <HAL_GPIO_DeInit>
}
 80014d2:	bd08      	pop	{r3, pc}
 80014d4:	240003b0 	.word	0x240003b0
 80014d8:	58022000 	.word	0x58022000
 80014dc:	58024400 	.word	0x58024400
 80014e0:	58021000 	.word	0x58021000
 80014e4:	58021c00 	.word	0x58021c00
 80014e8:	58021800 	.word	0x58021800
 80014ec:	58020c00 	.word	0x58020c00
 80014f0:	58021400 	.word	0x58021400
 80014f4:	58020800 	.word	0x58020800

080014f8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f8:	280f      	cmp	r0, #15
{
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4604      	mov	r4, r0
 80014fe:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	d902      	bls.n	8001508 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001502:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001504:	b00a      	add	sp, #40	; 0x28
 8001506:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001508:	4601      	mov	r1, r0
 800150a:	2200      	movs	r2, #0
 800150c:	2036      	movs	r0, #54	; 0x36
 800150e:	f005 fda1 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001512:	2036      	movs	r0, #54	; 0x36
 8001514:	f005 fdd0 	bl	80070b8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800151a:	4669      	mov	r1, sp
 800151c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800151e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_InitTick+0x88>)
 8001522:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800152e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153a:	f008 fb3f 	bl	8009bbc <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800153e:	9b07      	ldr	r3, [sp, #28]
 8001540:	b9c3      	cbnz	r3, 8001574 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001542:	f008 fb17 	bl	8009b74 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001546:	4c0f      	ldr	r4, [pc, #60]	; (8001584 <HAL_InitTick+0x8c>)
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_InitTick+0x90>)
 800154a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800154c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001550:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <HAL_InitTick+0x94>)
 8001554:	fbb0 f0f3 	udiv	r0, r0, r3
 8001558:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800155a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800155c:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800155e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001560:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001564:	f009 fb76 	bl	800ac54 <HAL_TIM_Base_Init>
 8001568:	2800      	cmp	r0, #0
 800156a:	d1ca      	bne.n	8001502 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 800156c:	4620      	mov	r0, r4
 800156e:	f009 fa19 	bl	800a9a4 <HAL_TIM_Base_Start_IT>
 8001572:	e7c7      	b.n	8001504 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001574:	f008 fafe 	bl	8009b74 <HAL_RCC_GetPCLK1Freq>
 8001578:	0040      	lsls	r0, r0, #1
 800157a:	e7e4      	b.n	8001546 <HAL_InitTick+0x4e>
 800157c:	24000064 	.word	0x24000064
 8001580:	58024400 	.word	0x58024400
 8001584:	240003b8 	.word	0x240003b8
 8001588:	40001000 	.word	0x40001000
 800158c:	000f4240 	.word	0x000f4240

08001590 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <NMI_Handler>

08001592 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler>

08001594 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler>

08001596 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler>

08001598 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <UsageFault_Handler>

0800159a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159a:	4770      	bx	lr

0800159c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800159c:	4801      	ldr	r0, [pc, #4]	; (80015a4 <TIM6_DAC_IRQHandler+0x8>)
 800159e:	f009 ba43 	b.w	800aa28 <HAL_TIM_IRQHandler>
 80015a2:	bf00      	nop
 80015a4:	240003b8 	.word	0x240003b8

080015a8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015a8:	4801      	ldr	r0, [pc, #4]	; (80015b0 <LTDC_IRQHandler+0x8>)
 80015aa:	f007 b9b6 	b.w	800891a <HAL_LTDC_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	24000288 	.word	0x24000288

080015b4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80015b4:	4801      	ldr	r0, [pc, #4]	; (80015bc <DMA2D_IRQHandler+0x8>)
 80015b6:	f005 be8a 	b.w	80072ce <HAL_DMA2D_IRQHandler>
 80015ba:	bf00      	nop
 80015bc:	24000204 	.word	0x24000204

080015c0 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <DSI_IRQHandler+0x8>)
 80015c2:	f006 b846 	b.w	8007652 <HAL_DSI_IRQHandler>
 80015c6:	bf00      	nop
 80015c8:	2400026c 	.word	0x2400026c

080015cc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80015cc:	2001      	movs	r0, #1
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015d2:	f01d fc49 	bl	801ee68 <__errno>
 80015d6:	2316      	movs	r3, #22
 80015d8:	6003      	str	r3, [r0, #0]
	return -1;
}
 80015da:	f04f 30ff 	mov.w	r0, #4294967295
 80015de:	bd08      	pop	{r3, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015e2:	f01d fc41 	bl	801ee68 <__errno>
 80015e6:	2316      	movs	r3, #22
 80015e8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80015ea:	e7fe      	b.n	80015ea <_exit+0xa>

080015ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b570      	push	{r4, r5, r6, lr}
 80015ee:	460d      	mov	r5, r1
 80015f0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	460e      	mov	r6, r1
 80015f4:	1b73      	subs	r3, r6, r5
 80015f6:	429c      	cmp	r4, r3
 80015f8:	dc01      	bgt.n	80015fe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015fa:	4620      	mov	r0, r4
 80015fc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	e7f5      	b.n	80015f4 <_read+0x8>

08001608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001608:	b570      	push	{r4, r5, r6, lr}
 800160a:	460d      	mov	r5, r1
 800160c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	460e      	mov	r6, r1
 8001610:	1b73      	subs	r3, r6, r5
 8001612:	429c      	cmp	r4, r3
 8001614:	dc01      	bgt.n	800161a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001616:	4620      	mov	r0, r4
 8001618:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800161a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800161e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001622:	e7f5      	b.n	8001610 <_write+0x8>

08001624 <_close>:

int _close(int file)
{
	return -1;
}
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800162a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800162e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001630:	604b      	str	r3, [r1, #4]
}
 8001632:	4770      	bx	lr

08001634 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001634:	2001      	movs	r0, #1
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001638:	2000      	movs	r0, #0
 800163a:	4770      	bx	lr

0800163c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <_sbrk+0x30>)
{
 800163e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001640:	6811      	ldr	r1, [r2, #0]
{
 8001642:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001644:	b909      	cbnz	r1, 800164a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001646:	490a      	ldr	r1, [pc, #40]	; (8001670 <_sbrk+0x34>)
 8001648:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	6810      	ldr	r0, [r2, #0]
 800164c:	4909      	ldr	r1, [pc, #36]	; (8001674 <_sbrk+0x38>)
 800164e:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <_sbrk+0x3c>)
 8001650:	4403      	add	r3, r0
 8001652:	1b09      	subs	r1, r1, r4
 8001654:	428b      	cmp	r3, r1
 8001656:	d906      	bls.n	8001666 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001658:	f01d fc06 	bl	801ee68 <__errno>
 800165c:	230c      	movs	r3, #12
 800165e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001660:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001664:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001666:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001668:	e7fc      	b.n	8001664 <_sbrk+0x28>
 800166a:	bf00      	nop
 800166c:	24000408 	.word	0x24000408
 8001670:	2400f848 	.word	0x2400f848
 8001674:	24080000 	.word	0x24080000
 8001678:	00001000 	.word	0x00001000

0800167c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001680:	f005 fc0e 	bl	8006ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001686:	490d      	ldr	r1, [pc, #52]	; (80016bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001688:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800168c:	e002      	b.n	8001694 <LoopCopyDataInit>

0800168e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001692:	3304      	adds	r3, #4

08001694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001698:	d3f9      	bcc.n	800168e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800169a:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800169c:	4c0a      	ldr	r4, [pc, #40]	; (80016c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a0:	e001      	b.n	80016a6 <LoopFillZerobss>

080016a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a4:	3204      	adds	r2, #4

080016a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a8:	d3fb      	bcc.n	80016a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016aa:	f01d fceb 	bl	801f084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ae:	f7ff f8a5 	bl	80007fc <main>
  bx  lr
 80016b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016bc:	24000190 	.word	0x24000190
  ldr r2, =_sidata
 80016c0:	080265c0 	.word	0x080265c0
  ldr r2, =_sbss
 80016c4:	24000190 	.word	0x24000190
  ldr r4, =_ebss
 80016c8:	2400f844 	.word	0x2400f844

080016cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016cc:	e7fe      	b.n	80016cc <ADC3_IRQHandler>

080016ce <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80016ce:	4770      	bx	lr

080016d0 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80016d0:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80016d2:	f000 ff6d 	bl	80025b0 <touchgfx_components_init>
  touchgfx_init();
}
 80016d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80016da:	f000 bef5 	b.w	80024c8 <touchgfx_init>

080016de <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80016de:	f000 bf69 	b.w	80025b4 <touchgfx_taskEntry>

080016e2 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80016e2:	6840      	ldr	r0, [r0, #4]
    }
 80016e4:	4770      	bx	lr

080016e6 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80016e6:	6041      	str	r1, [r0, #4]
    }
 80016e8:	4770      	bx	lr

080016ea <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80016ea:	1a51      	subs	r1, r2, r1
 80016ec:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80016f0:	fbb1 f0f3 	udiv	r0, r1, r3
 80016f4:	4770      	bx	lr
	...

080016f8 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80016fa:	68c0      	ldr	r0, [r0, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001700:	4358      	muls	r0, r3
 8001702:	4770      	bx	lr
 8001704:	2400040c 	.word	0x2400040c

08001708 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001708:	4770      	bx	lr
	...

0800170c <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 800170c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170e:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001710:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 8001714:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001716:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001726:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001734:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001738:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 800173e:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001740:	2101      	movs	r1, #1
 8001742:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001744:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001746:	2210      	movs	r2, #16
 8001748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800174c:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001750:	fab2 f282 	clz	r2, r2
 8001754:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	b983      	cbnz	r3, 800177e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 800175c:	f008 f9e8 	bl	8009b30 <HAL_RCC_GetHCLKFreq>
 8001760:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001762:	f008 f81f 	bl	80097a4 <HAL_RCC_GetSysClockFreq>
 8001766:	fbb0 f0f4 	udiv	r0, r0, r4
 800176a:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 800176c:	4807      	ldr	r0, [pc, #28]	; (800178c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800176e:	f009 fa71 	bl	800ac54 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001774:	b003      	add	sp, #12
 8001776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 800177a:	f009 b8d9 	b.w	800a930 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 800177e:	f008 f9f9 	bl	8009b74 <HAL_RCC_GetPCLK1Freq>
 8001782:	0044      	lsls	r4, r0, #1
 8001784:	e7ed      	b.n	8001762 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001786:	bf00      	nop
 8001788:	58024400 	.word	0x58024400
 800178c:	2400040c 	.word	0x2400040c
 8001790:	08022ad0 	.word	0x08022ad0

08001794 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001794:	b510      	push	{r4, lr}
 8001796:	4604      	mov	r4, r0
 8001798:	2110      	movs	r1, #16
 800179a:	f01c fd0c 	bl	801e1b6 <_ZdlPvj>
 800179e:	4620      	mov	r0, r4
 80017a0:	bd10      	pop	{r4, pc}

080017a2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 80017a2:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 80017a4:	6803      	ldr	r3, [r0, #0]
{
 80017a6:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80017a8:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80017aa:	b131      	cbz	r1, 80017ba <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80017ac:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80017ae:	4790      	blx	r2
 80017b0:	6863      	ldr	r3, [r4, #4]
 80017b2:	1b5b      	subs	r3, r3, r5
 80017b4:	4418      	add	r0, r3
 80017b6:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80017b8:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80017ba:	4790      	blx	r2
 80017bc:	60a0      	str	r0, [r4, #8]
}
 80017be:	e7fb      	b.n	80017b8 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080017c0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80017c0:	4770      	bx	lr

080017c2 <_ZN20STM32TouchControllerD0Ev>:
 80017c2:	b510      	push	{r4, lr}
 80017c4:	4604      	mov	r4, r0
 80017c6:	2104      	movs	r1, #4
 80017c8:	f01c fcf5 	bl	801e1b6 <_ZdlPvj>
 80017cc:	4620      	mov	r0, r4
 80017ce:	bd10      	pop	{r4, pc}

080017d0 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80017d0:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80017d4:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80017d8:	2000      	movs	r0, #0
    hTS->Width = 800;
 80017da:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80017dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80017e0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80017e4:	230c      	movs	r3, #12
 80017e6:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80017ea:	f005 fa65 	bl	8006cb8 <BSP_TS_Init>
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_ZN20STM32TouchController4initEv+0x40>)
 80017f0:	b910      	cbnz	r0, 80017f8 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80017f6:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1fb      	bne.n	80017f6 <_ZN20STM32TouchController4initEv+0x26>
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <_ZN20STM32TouchController4initEv+0x44>)
 8001800:	212e      	movs	r1, #46	; 0x2e
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <_ZN20STM32TouchController4initEv+0x48>)
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <_ZN20STM32TouchController4initEv+0x4c>)
 8001806:	f01d fafd 	bl	801ee04 <__assert_func>
 800180a:	bf00      	nop
 800180c:	24000468 	.word	0x24000468
 8001810:	24000464 	.word	0x24000464
 8001814:	08021398 	.word	0x08021398
 8001818:	080213ab 	.word	0x080213ab
 800181c:	080213d5 	.word	0x080213d5

08001820 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001824:	460f      	mov	r7, r1
 8001826:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001828:	781d      	ldrb	r5, [r3, #0]
 800182a:	b915      	cbnz	r5, 8001832 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 800182c:	2500      	movs	r5, #0
}
 800182e:	4628      	mov	r0, r5
 8001830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001832:	4c07      	ldr	r4, [pc, #28]	; (8001850 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001834:	2000      	movs	r0, #0
 8001836:	4621      	mov	r1, r4
 8001838:	f005 fad2 	bl	8006de0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f4      	beq.n	800182c <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001842:	6863      	ldr	r3, [r4, #4]
 8001844:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001846:	68a3      	ldr	r3, [r4, #8]
 8001848:	6033      	str	r3, [r6, #0]
            return true;
 800184a:	e7f0      	b.n	800182e <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 800184c:	24000464 	.word	0x24000464
 8001850:	24000458 	.word	0x24000458

08001854 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001854:	2803      	cmp	r0, #3
 8001856:	d825      	bhi.n	80018a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001858:	e8df f000 	tbb	[pc, r0]
 800185c:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001862:	2108      	movs	r1, #8
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	fab2 f282 	clz	r2, r2
 800186a:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800186c:	480f      	ldr	r0, [pc, #60]	; (80018ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800186e:	f006 bb9b 	b.w	8007fa8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001872:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	0952      	lsrs	r2, r2, #5
 8001880:	e7f4      	b.n	800186c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	fab2 f282 	clz	r2, r2
 800188e:	0952      	lsrs	r2, r2, #5
 8001890:	e7ec      	b.n	800186c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	fab2 f282 	clz	r2, r2
 80018a0:	0952      	lsrs	r2, r2, #5
 80018a2:	e7e4      	b.n	800186e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2400046c 	.word	0x2400046c
 80018ac:	58022400 	.word	0x58022400
 80018b0:	58021400 	.word	0x58021400

080018b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80018b4:	2803      	cmp	r0, #3
 80018b6:	d825      	bhi.n	8001904 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80018b8:	e8df f000 	tbb	[pc, r0]
 80018bc:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80018c2:	2108      	movs	r1, #8
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	3a00      	subs	r2, #0
 80018c8:	bf18      	it	ne
 80018ca:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80018ce:	f006 bb6b 	b.w	8007fa8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80018d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	3a00      	subs	r2, #0
 80018dc:	bf18      	it	ne
 80018de:	2201      	movne	r2, #1
 80018e0:	e7f4      	b.n	80018cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80018e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	3a00      	subs	r2, #0
 80018ec:	bf18      	it	ne
 80018ee:	2201      	movne	r2, #1
 80018f0:	e7ec      	b.n	80018cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80018f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	3a00      	subs	r2, #0
 80018fe:	bf18      	it	ne
 8001900:	2201      	movne	r2, #1
 8001902:	e7e4      	b.n	80018ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	2400046c 	.word	0x2400046c
 800190c:	58022400 	.word	0x58022400
 8001910:	58021400 	.word	0x58021400

08001914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001914:	2803      	cmp	r0, #3
 8001916:	d811      	bhi.n	800193c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001918:	e8df f000 	tbb	[pc, r0]
 800191c:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001920:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001922:	4807      	ldr	r0, [pc, #28]	; (8001940 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001924:	f006 bb45 	b.w	8007fb2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	e7f9      	b.n	8001922 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800192e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001932:	e7f6      	b.n	8001922 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 800193a:	e7f3      	b.n	8001924 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	58022400 	.word	0x58022400
 8001944:	58021400 	.word	0x58021400

08001948 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001948:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 800194a:	2803      	cmp	r0, #3
 800194c:	d815      	bhi.n	800197a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 800194e:	e8df f000 	tbb	[pc, r0]
 8001952:	0a02      	.short	0x0a02
 8001954:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001956:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800195a:	f006 fb1f 	bl	8007f9c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800195e:	1e43      	subs	r3, r0, #1
 8001960:	4258      	negs	r0, r3
 8001962:	4158      	adcs	r0, r3
 8001964:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196a:	e7f5      	b.n	8001958 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800196c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001970:	e7f2      	b.n	8001958 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001978:	e7ef      	b.n	800195a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 800197a:	2000      	movs	r0, #0
 800197c:	e7ef      	b.n	800195e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 800197e:	bf00      	nop
 8001980:	58022400 	.word	0x58022400
 8001984:	58021400 	.word	0x58021400

08001988 <_ZN8touchgfx4GPIO4initEv>:
{
 8001988:	b570      	push	{r4, r5, r6, lr}
 800198a:	4d08      	ldr	r5, [pc, #32]	; (80019ac <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800198c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800198e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001990:	b2e0      	uxtb	r0, r4
 8001992:	f7ff ffd9 	bl	8001948 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001996:	b118      	cbz	r0, 80019a0 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800199c:	bf18      	it	ne
 800199e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80019a0:	3401      	adds	r4, #1
 80019a2:	3504      	adds	r5, #4
 80019a4:	2c05      	cmp	r4, #5
 80019a6:	d1f3      	bne.n	8001990 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80019a8:	bd70      	pop	{r4, r5, r6, pc}
 80019aa:	bf00      	nop
 80019ac:	2400046c 	.word	0x2400046c

080019b0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80019b0:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80019b2:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80019b6:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80019ba:	4770      	bx	lr

080019bc <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80019bc:	2000      	movs	r0, #0
 80019be:	4770      	bx	lr

080019c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80019c0:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80019c2:	3900      	subs	r1, #0
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80019c6:	bf18      	it	ne
 80019c8:	2101      	movne	r1, #1
 80019ca:	7019      	strb	r1, [r3, #0]
    }
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2400f58f 	.word	0x2400f58f

080019d4 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80019d4:	2000      	movs	r0, #0
 80019d6:	4770      	bx	lr

080019d8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80019d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80019da:	b10b      	cbz	r3, 80019e0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80019dc:	4608      	mov	r0, r1
 80019de:	4718      	bx	r3
        }
    }
 80019e0:	4770      	bx	lr

080019e2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80019e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019e6:	4770      	bx	lr

080019e8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80019e8:	6840      	ldr	r0, [r0, #4]
 80019ea:	6803      	ldr	r3, [r0, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4718      	bx	r3

080019f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80019f0:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2400047c 	.word	0x2400047c

080019fc <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80019fc:	4770      	bx	lr

080019fe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80019fe:	f000 be75 	b.w	80026ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a02 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a02:	f000 be53 	b.w	80026ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001a06 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001a06:	f000 beb1 	b.w	800276c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001a0a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001a0a:	f000 bea3 	b.w	8002754 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001a0e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001a0e:	f000 be55 	b.w	80026bc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001a12 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001a12:	b510      	push	{r4, lr}
 8001a14:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001a16:	f00c fb57 	bl	800e0c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001a26:	4718      	bx	r3

08001a28 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001a28:	f00b bdb4 	b.w	800d594 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001a2c <_ZN11TouchGFXHALD0Ev>:
 8001a2c:	b510      	push	{r4, lr}
 8001a2e:	4604      	mov	r4, r0
 8001a30:	217c      	movs	r1, #124	; 0x7c
 8001a32:	f01c fbc0 	bl	801e1b6 <_ZdlPvj>
 8001a36:	4620      	mov	r0, r4
 8001a38:	bd10      	pop	{r4, pc}
	...

08001a3c <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001a3c:	4b02      	ldr	r3, [pc, #8]	; (8001a48 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001a42:	f00b bde3 	b.w	800d60c <_ZN8touchgfx3HAL10beginFrameEv>
 8001a46:	bf00      	nop
 8001a48:	24000010 	.word	0x24000010

08001a4c <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	4604      	mov	r4, r0
    HAL::endFrame();
 8001a50:	f00b fde8 	bl	800d624 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001a54:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001a58:	b113      	cbz	r3, 8001a60 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001a5a:	4b02      	ldr	r3, [pc, #8]	; (8001a64 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
    }
}
 8001a60:	bd10      	pop	{r4, pc}
 8001a62:	bf00      	nop
 8001a64:	24000010 	.word	0x24000010

08001a68 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4604      	mov	r4, r0
    GPIO::init();
 8001a6c:	f7ff ff8c 	bl	8001988 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001a70:	4d07      	ldr	r5, [pc, #28]	; (8001a90 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 8001a72:	4620      	mov	r0, r4
 8001a74:	f000 fe23 	bl	80026be <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001a78:	2300      	movs	r3, #0
    mcuInstr.init();
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001a80:	f7ff fe44 	bl	800170c <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001a84:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001a86:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001a88:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001a8c:	bd38      	pop	{r3, r4, r5, pc}
 8001a8e:	bf00      	nop
 8001a90:	24000484 	.word	0x24000484

08001a94 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001a94:	6803      	ldr	r3, [r0, #0]
{
 8001a96:	4604      	mov	r4, r0
 8001a98:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9e:	4798      	blx	r3
    enableInterrupts();
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aa6:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001aa8:	f000 faa6 	bl	8001ff8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	4620      	mov	r0, r4
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2329      	movs	r3, #41	; 0x29
 8001ab8:	2215      	movs	r2, #21
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001abc:	9100      	str	r1, [sp, #0]
 8001abe:	f005 ffd8 	bl	8007a72 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001ac2:	f000 fa99 	bl	8001ff8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	4620      	mov	r0, r4
 8001aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001acc:	4798      	blx	r3
    for (;;)
 8001ace:	e7f8      	b.n	8001ac2 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001ad0:	2400026c 	.word	0x2400026c

08001ad4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001ad4:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001ad8:	b11b      	cbz	r3, 8001ae2 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001ada:	6840      	ldr	r0, [r0, #4]
 8001adc:	6803      	ldr	r3, [r0, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4718      	bx	r3
    }
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001ae8:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001aee:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001af0:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001af4:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001af6:	428c      	cmp	r4, r1
 8001af8:	d009      	beq.n	8001b0e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001afa:	b93a      	cbnz	r2, 8001b0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001afc:	490a      	ldr	r1, [pc, #40]	; (8001b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b00:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b02:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b04:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b06:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b08:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b0a:	701a      	strb	r2, [r3, #0]
        }
    }
 8001b0c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d0fc      	beq.n	8001b0c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b12:	4a06      	ldr	r2, [pc, #24]	; (8001b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001b14:	4904      	ldr	r1, [pc, #16]	; (8001b28 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b16:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001b18:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b1a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001b1c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001b1e:	2200      	movs	r2, #0
 8001b20:	e7f3      	b.n	8001b0a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001b22:	bf00      	nop
 8001b24:	2400f588 	.word	0x2400f588
 8001b28:	2400f586 	.word	0x2400f586
 8001b2c:	2400f584 	.word	0x2400f584

08001b30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b30:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	428b      	cmp	r3, r1
 8001b38:	d803      	bhi.n	8001b42 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d905      	bls.n	8001b4e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001b44:	219e      	movs	r1, #158	; 0x9e
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001b4a:	f01d f95b 	bl	801ee04 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001b50:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001b54:	801a      	strh	r2, [r3, #0]
    }
 8001b56:	bd08      	pop	{r3, pc}
 8001b58:	2400f584 	.word	0x2400f584
 8001b5c:	2400f586 	.word	0x2400f586
 8001b60:	0802143c 	.word	0x0802143c
 8001b64:	0802149f 	.word	0x0802149f
 8001b68:	080214e2 	.word	0x080214e2
 8001b6c:	2400f58a 	.word	0x2400f58a
 8001b70:	2400f58c 	.word	0x2400f58c

08001b74 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	460d      	mov	r5, r1
 8001b78:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001b7c:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b7e:	b935      	cbnz	r5, 8001b8e <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001b82:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001b8a:	f01d f93b 	bl	801ee04 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b8e:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b92:	3a00      	subs	r2, #0
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001b96:	bf18      	it	ne
 8001b98:	2201      	movne	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001b9c:	6803      	ldr	r3, [r0, #0]
}
 8001b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba6:	4718      	bx	r3
 8001ba8:	2400047c 	.word	0x2400047c
 8001bac:	08021535 	.word	0x08021535
 8001bb0:	0802156d 	.word	0x0802156d
 8001bb4:	080214e2 	.word	0x080214e2
 8001bb8:	2400f58e 	.word	0x2400f58e

08001bbc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001bbc:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001bc0:	60c3      	str	r3, [r0, #12]
 8001bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001bce:	8503      	strh	r3, [r0, #40]	; 0x28
 8001bd0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001bd4:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001bd6:	8603      	strh	r3, [r0, #48]	; 0x30
 8001bd8:	6603      	str	r3, [r0, #96]	; 0x60
 8001bda:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001bde:	6703      	str	r3, [r0, #112]	; 0x70
 8001be0:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be8:	6742      	str	r2, [r0, #116]	; 0x74
 8001bea:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001bec:	b570      	push	{r4, r5, r6, lr}
 8001bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bf2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001bf6:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001bfa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001bfe:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001c02:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001c06:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001c0a:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001c0e:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001c12:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c16:	42b5      	cmp	r5, r6
        instance = this;
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001c1a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001c1e:	8015      	strh	r5, [r2, #0]
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001c22:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c24:	bf28      	it	cs
 8001c26:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c28:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c2a:	bf38      	it	cc
 8001c2c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c2e:	8016      	strh	r6, [r2, #0]
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c32:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c36:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001c3a:	7013      	strb	r3, [r2, #0]
                           height)
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001c3e:	6003      	str	r3, [r0, #0]
}
 8001c40:	bd70      	pop	{r4, r5, r6, pc}
 8001c42:	bf00      	nop
 8001c44:	01000001 	.word	0x01000001
 8001c48:	2400f590 	.word	0x2400f590
 8001c4c:	2400f584 	.word	0x2400f584
 8001c50:	2400f58a 	.word	0x2400f58a
 8001c54:	2400f586 	.word	0x2400f586
 8001c58:	2400f58c 	.word	0x2400f58c
 8001c5c:	2400f588 	.word	0x2400f588
 8001c60:	080215c4 	.word	0x080215c4

08001c64 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001c64:	2b01      	cmp	r3, #1
    {
 8001c66:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001c68:	d80e      	bhi.n	8001c88 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001c6a:	5cd3      	ldrb	r3, [r2, r3]
 8001c6c:	2215      	movs	r2, #21
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	4601      	mov	r1, r0
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <DSI_IO_Write+0x34>)
 8001c76:	f005 fefc 	bl	8007a72 <HAL_DSI_ShortWrite>
 8001c7a:	b118      	cbz	r0, 8001c84 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001c7c:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001c80:	b002      	add	sp, #8
 8001c82:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001c84:	2000      	movs	r0, #0
 8001c86:	e7fb      	b.n	8001c80 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001c88:	e9cd 1200 	strd	r1, r2, [sp]
 8001c8c:	4601      	mov	r1, r0
 8001c8e:	2239      	movs	r2, #57	; 0x39
 8001c90:	4801      	ldr	r0, [pc, #4]	; (8001c98 <DSI_IO_Write+0x34>)
 8001c92:	f005 feff 	bl	8007a94 <HAL_DSI_LongWrite>
 8001c96:	e7f0      	b.n	8001c7a <DSI_IO_Write+0x16>
 8001c98:	2400026c 	.word	0x2400026c

08001c9c <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001c9e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001ca2:	2106      	movs	r1, #6
 8001ca4:	9100      	str	r1, [sp, #0]
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <DSI_IO_Read+0x24>)
 8001caa:	f005 ff54 	bl	8007b56 <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001cae:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001cb0:	bf14      	ite	ne
 8001cb2:	f06f 0007 	mvnne.w	r0, #7
 8001cb6:	2000      	moveq	r0, #0
 8001cb8:	b005      	add	sp, #20
 8001cba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cbe:	bf00      	nop
 8001cc0:	2400026c 	.word	0x2400026c

08001cc4 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001cc4:	b530      	push	{r4, r5, lr}
 8001cc6:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001cc8:	4c0c      	ldr	r4, [pc, #48]	; (8001cfc <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001cca:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001ccc:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001cce:	aa03      	add	r2, sp, #12
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001cd4:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001cdc:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001ce0:	9200      	str	r2, [sp, #0]
 8001ce2:	2239      	movs	r2, #57	; 0x39
 8001ce4:	f005 fed6 	bl	8007a94 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001ce8:	2100      	movs	r1, #0
 8001cea:	2335      	movs	r3, #53	; 0x35
 8001cec:	462a      	mov	r2, r5
 8001cee:	4620      	mov	r0, r4
 8001cf0:	9100      	str	r1, [sp, #0]
 8001cf2:	f005 febe 	bl	8007a72 <HAL_DSI_ShortWrite>
    }
 8001cf6:	b005      	add	sp, #20
 8001cf8:	bd30      	pop	{r4, r5, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2400026c 	.word	0x2400026c

08001d00 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001d00:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001d02:	f7ff ffdf 	bl	8001cc4 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001d08:	2202      	movs	r2, #2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001d16:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001d22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001d26:	f042 0202 	orr.w	r2, r2, #2
 8001d2a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d34:	bd08      	pop	{r3, pc}
 8001d36:	bf00      	nop
 8001d38:	2400026c 	.word	0x2400026c
 8001d3c:	50001000 	.word	0x50001000

08001d40 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <LCD_ReqEnable+0x20>)
    {
 8001d42:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001d44:	7819      	ldrb	r1, [r3, #0]
 8001d46:	b939      	cbnz	r1, 8001d58 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001d48:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001d4c:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001d4e:	2329      	movs	r3, #41	; 0x29
 8001d50:	2215      	movs	r2, #21
 8001d52:	9100      	str	r1, [sp, #0]
 8001d54:	f005 fe8d 	bl	8007a72 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001d58:	b003      	add	sp, #12
 8001d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d5e:	bf00      	nop
 8001d60:	24000494 	.word	0x24000494
 8001d64:	2400026c 	.word	0x2400026c

08001d68 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001d6a:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	232a      	movs	r3, #42	; 0x2a
 8001d70:	2239      	movs	r2, #57	; 0x39
 8001d72:	2100      	movs	r1, #0
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2304      	movs	r3, #4
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <LCD_SetUpdateRegionLeft+0x20>)
 8001d7a:	f005 fe8b 	bl	8007a94 <HAL_DSI_LongWrite>
    }
 8001d7e:	b003      	add	sp, #12
 8001d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d84:	24000008 	.word	0x24000008
 8001d88:	2400026c 	.word	0x2400026c

08001d8c <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001d8e:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	232a      	movs	r3, #42	; 0x2a
 8001d94:	2239      	movs	r2, #57	; 0x39
 8001d96:	2100      	movs	r1, #0
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	4803      	ldr	r0, [pc, #12]	; (8001dac <LCD_SetUpdateRegionRight+0x20>)
 8001d9e:	f005 fe79 	bl	8007a94 <HAL_DSI_LongWrite>
    }
 8001da2:	b003      	add	sp, #12
 8001da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da8:	2400000c 	.word	0x2400000c
 8001dac:	2400026c 	.word	0x2400026c

08001db0 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001db0:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001db2:	4d14      	ldr	r5, [pc, #80]	; (8001e04 <HAL_DSI_TearingEffectCallback+0x54>)
 8001db4:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fd4c 	bl	8001854 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001dbc:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001dbe:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001dc8:	f000 f90a 	bl	8001fe0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001dce:	682a      	ldr	r2, [r5, #0]
 8001dd0:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001dd8:	b173      	cbz	r3, 8001df8 <HAL_DSI_TearingEffectCallback+0x48>
 8001dda:	4d0c      	ldr	r5, [pc, #48]	; (8001e0c <HAL_DSI_TearingEffectCallback+0x5c>)
 8001ddc:	782b      	ldrb	r3, [r5, #0]
 8001dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001de2:	b94b      	cbnz	r3, 8001df8 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_DSI_TearingEffectCallback+0x60>)
 8001de6:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001de8:	f7ff ffbe 	bl	8001d68 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001dec:	4620      	mov	r0, r4
 8001dee:	f005 fe30 	bl	8007a52 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001df2:	2301      	movs	r3, #1
 8001df4:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001df8:	2000      	movs	r0, #0
    }
 8001dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001dfe:	f7ff bd59 	b.w	80018b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001e02:	bf00      	nop
 8001e04:	2400f590 	.word	0x2400f590
 8001e08:	24000010 	.word	0x24000010
 8001e0c:	24000495 	.word	0x24000495
 8001e10:	24000480 	.word	0x24000480

08001e14 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001e18:	4e3f      	ldr	r6, [pc, #252]	; (8001f18 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001e1e:	7833      	ldrb	r3, [r6, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d076      	beq.n	8001f12 <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001e24:	4d3d      	ldr	r5, [pc, #244]	; (8001f1c <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001e26:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001f2c <HAL_DSI_EndOfRefreshCallback+0x118>
 8001e2a:	f8d5 9000 	ldr.w	r9, [r5]
 8001e2e:	4f3c      	ldr	r7, [pc, #240]	; (8001f20 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001e30:	f1b9 0f00 	cmp.w	r9, #0
 8001e34:	d139      	bne.n	8001eaa <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f005 f8e2 	bl	8007000 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	f8cd 9000 	str.w	r9, [sp]
 8001e42:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001e46:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e4a:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e54:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e58:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e5c:	f002 0208 	and.w	r2, r2, #8
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001e64:	4a2f      	ldr	r2, [pc, #188]	; (8001f24 <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001e66:	8812      	ldrh	r2, [r2, #0]
 8001e68:	0852      	lsrs	r2, r2, #1
 8001e6a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001e6e:	4402      	add	r2, r0
 8001e70:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001e72:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001e7a:	f8cd 9004 	str.w	r9, [sp, #4]
 8001e7e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001e82:	f042 0208 	orr.w	r2, r2, #8
 8001e86:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001e96:	f7ff ff79 	bl	8001d8c <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001e9a:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001e9c:	4620      	mov	r0, r4
                updateRegion = 1;
 8001e9e:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001ea0:	b005      	add	sp, #20
 8001ea2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001ea6:	f005 bdd4 	b.w	8007a52 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001eaa:	6803      	ldr	r3, [r0, #0]
 8001eac:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001eae:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001eb0:	9502      	str	r5, [sp, #8]
 8001eb2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001eb6:	f022 0208 	bic.w	r2, r2, #8
 8001eba:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001ebe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ec2:	f002 0208 	and.w	r2, r2, #8
 8001ec6:	9202      	str	r2, [sp, #8]
 8001ec8:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001eca:	f8d8 2000 	ldr.w	r2, [r8]
 8001ece:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001ed2:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001ed4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001ed6:	f041 0101 	orr.w	r1, r1, #1
 8001eda:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001edc:	9503      	str	r5, [sp, #12]
 8001ede:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ee2:	f042 0208 	orr.w	r2, r2, #8
 8001ee6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001eea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	9303      	str	r3, [sp, #12]
 8001ef4:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001ef6:	f7ff fcdd 	bl	80018b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001efa:	f7ff ff21 	bl	8001d40 <LCD_ReqEnable>
        return instance;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001f00:	7035      	strb	r5, [r6, #0]
 8001f02:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001f04:	b128      	cbz	r0, 8001f12 <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001f06:	6803      	ldr	r3, [r0, #0]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
    }
 8001f0a:	b005      	add	sp, #20
 8001f0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f10:	4718      	bx	r3
 8001f12:	b005      	add	sp, #20
 8001f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f18:	24000495 	.word	0x24000495
 8001f1c:	24000480 	.word	0x24000480
 8001f20:	2400047c 	.word	0x2400047c
 8001f24:	2400f58a 	.word	0x2400f58a
 8001f28:	2400f590 	.word	0x2400f590
 8001f2c:	24000288 	.word	0x24000288

08001f30 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001f30:	4601      	mov	r1, r0
 8001f32:	b508      	push	{r3, lr}
        return instance;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <IdleTaskHook+0x14>)
 8001f36:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001f38:	b101      	cbz	r1, 8001f3c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001f3a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001f3c:	f00c f8de 	bl	800e0fc <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001f40:	2001      	movs	r0, #1
 8001f42:	bd08      	pop	{r3, pc}
 8001f44:	2400f590 	.word	0x2400f590

08001f48 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	4a02      	ldr	r2, [pc, #8]	; (8001f5c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001f52:	601a      	str	r2, [r3, #0]

}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	24000484 	.word	0x24000484
 8001f5c:	08021378 	.word	0x08021378

08001f60 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f60:	2101      	movs	r1, #1
 8001f62:	2200      	movs	r2, #0
{
 8001f64:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001f66:	4608      	mov	r0, r1
 8001f68:	f008 ffc5 	bl	800aef6 <osSemaphoreNew>
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001f6e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001f70:	b928      	cbnz	r0, 8001f7e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001f74:	2128      	movs	r1, #40	; 0x28
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f78:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001f7a:	f01c ff43 	bl	801ee04 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2104      	movs	r1, #4
 8001f82:	2001      	movs	r0, #1
 8001f84:	f009 f854 	bl	800b030 <osMessageQueueNew>
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001f8a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001f8c:	b918      	cbnz	r0, 8001f96 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001f90:	212c      	movs	r1, #44	; 0x2c
 8001f92:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001f94:	e7f0      	b.n	8001f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001f96:	bd08      	pop	{r3, pc}
 8001f98:	2400049c 	.word	0x2400049c
 8001f9c:	08021694 	.word	0x08021694
 8001fa0:	080216dd 	.word	0x080216dd
 8001fa4:	0802170c 	.word	0x0802170c
 8001fa8:	24000498 	.word	0x24000498
 8001fac:	0802175b 	.word	0x0802175b

08001fb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001fb0:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	f008 bfe7 	b.w	800af8a <osSemaphoreAcquire>
 8001fbc:	2400049c 	.word	0x2400049c

08001fc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001fc0:	4b01      	ldr	r3, [pc, #4]	; (8001fc8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	f009 b80c 	b.w	800afe0 <osSemaphoreRelease>
 8001fc8:	2400049c 	.word	0x2400049c

08001fcc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	f008 bfda 	b.w	800af8a <osSemaphoreAcquire>
 8001fd6:	bf00      	nop
 8001fd8:	2400049c 	.word	0x2400049c

08001fdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001fdc:	f7ff bff0 	b.w	8001fc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001fe0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4803      	ldr	r0, [pc, #12]	; (8001ff0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001fe4:	4903      	ldr	r1, [pc, #12]	; (8001ff4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	6800      	ldr	r0, [r0, #0]
 8001fea:	f009 b85c 	b.w	800b0a6 <osMessageQueuePut>
 8001fee:	bf00      	nop
 8001ff0:	24000498 	.word	0x24000498
 8001ff4:	24000014 	.word	0x24000014

08001ff8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ff8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	4c07      	ldr	r4, [pc, #28]	; (800201c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ffe:	a901      	add	r1, sp, #4
 8002000:	461a      	mov	r2, r3
 8002002:	6820      	ldr	r0, [r4, #0]
 8002004:	f009 f87f 	bl	800b106 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	2200      	movs	r2, #0
 800200e:	a901      	add	r1, sp, #4
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	f009 f878 	bl	800b106 <osMessageQueueGet>
}
 8002016:	b002      	add	sp, #8
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	24000498 	.word	0x24000498

08002020 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8002020:	6803      	ldr	r3, [r0, #0]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	4718      	bx	r3

08002026 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002026:	2001      	movs	r0, #1
 8002028:	4770      	bx	lr

0800202a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 800202a:	6803      	ldr	r3, [r0, #0]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	4718      	bx	r3

08002030 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002030:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8002034:	4770      	bx	lr
	...

08002038 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800203e:	6003      	str	r3, [r0, #0]
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <_ZN8STM32DMAD1Ev+0x1c>)
 8002042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002046:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800204a:	f3bf 8f6f 	isb	sy
}
 800204e:	4770      	bx	lr
 8002050:	080218fc 	.word	0x080218fc
 8002054:	e000e100 	.word	0xe000e100

08002058 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002058:	b510      	push	{r4, lr}
 800205a:	4604      	mov	r4, r0
}
 800205c:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8002060:	f7ff ffea 	bl	8002038 <_ZN8STM32DMAD1Ev>
 8002064:	4620      	mov	r0, r4
 8002066:	f01c f8a6 	bl	801e1b6 <_ZdlPvj>
 800206a:	4620      	mov	r0, r4
 800206c:	bd10      	pop	{r4, pc}
	...

08002070 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8002072:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002074:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002078:	f042 0210 	orr.w	r2, r2, #16
 800207c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002080:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002084:	f002 0210 	and.w	r2, r2, #16
 8002088:	9201      	str	r2, [sp, #4]
 800208a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800208c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800208e:	f042 0210 	orr.w	r2, r2, #16
 8002092:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002094:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002096:	f022 0210 	bic.w	r2, r2, #16
 800209a:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <_ZN8STM32DMA10initializeEv+0x44>)
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <_ZN8STM32DMA10initializeEv+0x48>)
 80020a0:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <_ZN8STM32DMA10initializeEv+0x4c>)
 80020a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	b002      	add	sp, #8
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	24000204 	.word	0x24000204
 80020b8:	080020c1 	.word	0x080020c1
 80020bc:	e000e100 	.word	0xe000e100

080020c0 <DMA2D_XferCpltCallback>:
 80020c0:	4b02      	ldr	r3, [pc, #8]	; (80020cc <DMA2D_XferCpltCallback+0xc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4718      	bx	r3
 80020cc:	2400f590 	.word	0x2400f590

080020d0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <_ZN8STM32DMAC1Ev+0x30>)
 80020d6:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020d8:	2600      	movs	r6, #0
 80020da:	4625      	mov	r5, r4
 80020dc:	2260      	movs	r2, #96	; 0x60
 80020de:	6060      	str	r0, [r4, #4]
 80020e0:	7226      	strb	r6, [r4, #8]
 80020e2:	7266      	strb	r6, [r4, #9]
 80020e4:	f845 3b20 	str.w	r3, [r5], #32
 80020e8:	4629      	mov	r1, r5
 80020ea:	f00c f95b 	bl	800e3a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020ee:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 80020f2:	60ee      	str	r6, [r5, #12]
 80020f4:	3524      	adds	r5, #36	; 0x24
 80020f6:	42ab      	cmp	r3, r5
 80020f8:	d1fb      	bne.n	80020f2 <_ZN8STM32DMAC1Ev+0x22>
}
 80020fa:	4620      	mov	r0, r4
 80020fc:	bd70      	pop	{r4, r5, r6, pc}
 80020fe:	bf00      	nop
 8002100:	080218fc 	.word	0x080218fc

08002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002104:	b508      	push	{r3, lr}
    switch (format)
 8002106:	290b      	cmp	r1, #11
 8002108:	d80b      	bhi.n	8002122 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 800210a:	e8df f001 	tbb	[pc, r1]
 800210e:	0612      	.short	0x0612
 8002110:	0a0a0a10 	.word	0x0a0a0a10
 8002114:	0808080a 	.word	0x0808080a
 8002118:	0808      	.short	0x0808
 800211a:	2001      	movs	r0, #1
}
 800211c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800211e:	2005      	movs	r0, #5
        break;
 8002120:	e7fc      	b.n	800211c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002124:	2166      	movs	r1, #102	; 0x66
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002128:	4805      	ldr	r0, [pc, #20]	; (8002140 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 800212a:	f01c fe6b 	bl	801ee04 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800212e:	2000      	movs	r0, #0
 8002130:	e7f4      	b.n	800211c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002132:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002134:	e7f2      	b.n	800211c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002136:	bf00      	nop
 8002138:	0802179d 	.word	0x0802179d
 800213c:	080217b8 	.word	0x080217b8
 8002140:	08021802 	.word	0x08021802

08002144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8002144:	b508      	push	{r3, lr}
    switch (format)
 8002146:	290a      	cmp	r1, #10
 8002148:	d809      	bhi.n	800215e <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 800214a:	e8df f001 	tbb	[pc, r1]
 800214e:	0610      	.short	0x0610
 8002150:	0808080e 	.word	0x0808080e
 8002154:	06060608 	.word	0x06060608
 8002158:	06          	.byte	0x06
 8002159:	00          	.byte	0x00
 800215a:	2001      	movs	r0, #1
}
 800215c:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800215e:	4b05      	ldr	r3, [pc, #20]	; (8002174 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002160:	2187      	movs	r1, #135	; 0x87
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8002164:	4805      	ldr	r0, [pc, #20]	; (800217c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002166:	f01c fe4d 	bl	801ee04 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800216a:	2000      	movs	r0, #0
 800216c:	e7f6      	b.n	800215c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800216e:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002170:	e7f4      	b.n	800215c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8002172:	bf00      	nop
 8002174:	0802179d 	.word	0x0802179d
 8002178:	0802184f 	.word	0x0802184f
 800217c:	08021802 	.word	0x08021802

08002180 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002184:	7f4f      	ldrb	r7, [r1, #29]
{
 8002186:	460c      	mov	r4, r1
 8002188:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800218a:	4639      	mov	r1, r7
 800218c:	f7ff ffba 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002190:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002194:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002196:	4648      	mov	r0, r9
 8002198:	4641      	mov	r1, r8
 800219a:	f7ff ffb3 	bl	8002104 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800219e:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021a0:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021a2:	4648      	mov	r0, r9
 80021a4:	f7ff ffce 	bl	8002144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021a8:	8aa1      	ldrh	r1, [r4, #20]
 80021aa:	8b62      	ldrh	r2, [r4, #26]
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80021ae:	1a52      	subs	r2, r2, r1
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021b2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80021b4:	8b22      	ldrh	r2, [r4, #24]
 80021b6:	1a52      	subs	r2, r2, r1
 80021b8:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021ba:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021bc:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021c2:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80021c6:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021c8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80021ca:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80021cc:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ce:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80021d2:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021d4:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80021d8:	d026      	beq.n	8002228 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80021da:	d810      	bhi.n	80021fe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80021dc:	2920      	cmp	r1, #32
 80021de:	ea45 0402 	orr.w	r4, r5, r2
 80021e2:	d062      	beq.n	80022aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80021e4:	2940      	cmp	r1, #64	; 0x40
 80021e6:	d060      	beq.n	80022aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80021e8:	2904      	cmp	r1, #4
 80021ea:	d05e      	beq.n	80022aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021ec:	432a      	orrs	r2, r5
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80021f0:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021f6:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80021f8:	d05b      	beq.n	80022b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80021fc:	e040      	b.n	8002280 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80021fe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002202:	d007      	beq.n	8002214 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002204:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002208:	d1f0      	bne.n	80021ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800220a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800220e:	f042 0209 	orr.w	r2, r2, #9
 8002212:	e003      	b.n	800221c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002214:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002218:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800221c:	61da      	str	r2, [r3, #28]
        return color;
 800221e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002220:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002222:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002224:	6158      	str	r0, [r3, #20]
 8002226:	e02a      	b.n	800227e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002228:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800222a:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800222c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002230:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002232:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002234:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002236:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800223a:	7822      	ldrb	r2, [r4, #0]
 800223c:	b142      	cbz	r2, 8002250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800223e:	2a01      	cmp	r2, #1
 8002240:	d021      	beq.n	8002286 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8002244:	f240 1101 	movw	r1, #257	; 0x101
 8002248:	4a1e      	ldr	r2, [pc, #120]	; (80022c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 800224a:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 800224c:	f01c fdda 	bl	801ee04 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002250:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8002252:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002254:	8861      	ldrh	r1, [r4, #2]
 8002256:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800225a:	3901      	subs	r1, #1
 800225c:	f022 0210 	bic.w	r2, r2, #16
 8002260:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002264:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002268:	69da      	ldr	r2, [r3, #28]
 800226a:	f042 0220 	orr.w	r2, r2, #32
 800226e:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002270:	69da      	ldr	r2, [r3, #28]
 8002272:	0692      	lsls	r2, r2, #26
 8002274:	d4fc      	bmi.n	8002270 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002276:	2210      	movs	r2, #16
 8002278:	609a      	str	r2, [r3, #8]
            if(blend)
 800227a:	2800      	cmp	r0, #0
 800227c:	d0bd      	beq.n	80021fa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002280:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8002282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002286:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002288:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800228c:	69d9      	ldr	r1, [r3, #28]
 800228e:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8002292:	bf18      	it	ne
 8002294:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002296:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 800229a:	f022 0210 	bic.w	r2, r2, #16
 800229e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80022a2:	f042 0210 	orr.w	r2, r2, #16
 80022a6:	61da      	str	r2, [r3, #28]
                break;
 80022a8:	e7dd      	b.n	8002266 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80022aa:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80022ae:	61dc      	str	r4, [r3, #28]
 80022b0:	e7b7      	b.n	8002222 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80022b2:	f240 2201 	movw	r2, #513	; 0x201
 80022b6:	e7e3      	b.n	8002280 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80022b8:	52001000 	.word	0x52001000
 80022bc:	00010201 	.word	0x00010201
 80022c0:	0802189a 	.word	0x0802189a
 80022c4:	080218b4 	.word	0x080218b4
 80022c8:	08021802 	.word	0x08021802
 80022cc:	00020201 	.word	0x00020201

080022d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80022d0:	b570      	push	{r4, r5, r6, lr}
 80022d2:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80022d4:	7f89      	ldrb	r1, [r1, #30]
 80022d6:	f7ff ff35 	bl	8002144 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022dc:	8aa5      	ldrh	r5, [r4, #20]
 80022de:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022e0:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80022e6:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022e8:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80022ea:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80022ec:	6921      	ldr	r1, [r4, #16]
 80022ee:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80022f2:	6826      	ldr	r6, [r4, #0]
 80022f4:	68e5      	ldr	r5, [r4, #12]
 80022f6:	2e08      	cmp	r6, #8
 80022f8:	d10d      	bne.n	8002316 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022fa:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80022fc:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80022fe:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002302:	7f20      	ldrb	r0, [r4, #28]
 8002304:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002308:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800230c:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800230e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002310:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002312:	601a      	str	r2, [r3, #0]
    }
}
 8002314:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002316:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002318:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800231a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800231e:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002320:	e7f7      	b.n	8002312 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002322:	bf00      	nop
 8002324:	52001000 	.word	0x52001000
 8002328:	00010009 	.word	0x00010009
 800232c:	00020201 	.word	0x00020201
 8002330:	00030201 	.word	0x00030201

08002334 <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	07d2      	lsls	r2, r2, #31
 800233a:	d4fc      	bmi.n	8002336 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800233c:	2223      	movs	r2, #35	; 0x23
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	52001000 	.word	0x52001000

08002348 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002348:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800234a:	4c10      	ldr	r4, [pc, #64]	; (800238c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 800234c:	6825      	ldr	r5, [r4, #0]
 800234e:	07ed      	lsls	r5, r5, #31
 8002350:	d4fc      	bmi.n	800234c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002352:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002354:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002356:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002358:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800235a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800235e:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002362:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002364:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002366:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002368:	d00c      	beq.n	8002384 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800236a:	4909      	ldr	r1, [pc, #36]	; (8002390 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800236c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002370:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002372:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002376:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800237a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 800237c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800237e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002380:	6023      	str	r3, [r4, #0]
    }
}
 8002382:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002384:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002388:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800238a:	e7f9      	b.n	8002380 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 800238c:	52001000 	.word	0x52001000
 8002390:	00010009 	.word	0x00010009
 8002394:	00020001 	.word	0x00020001
 8002398:	00030001 	.word	0x00030001

0800239c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 800239c:	2001      	movs	r0, #1
 800239e:	4770      	bx	lr

080023a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80023a0:	200c      	movs	r0, #12
 80023a2:	4770      	bx	lr

080023a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80023a4:	230c      	movs	r3, #12
 80023a6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80023aa:	3008      	adds	r0, #8
 80023ac:	4770      	bx	lr

080023ae <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80023ae:	230c      	movs	r3, #12
 80023b0:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80023b4:	3008      	adds	r0, #8
 80023b6:	4770      	bx	lr

080023b8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80023b8:	2001      	movs	r0, #1
 80023ba:	4770      	bx	lr

080023bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80023bc:	f244 50b8 	movw	r0, #17848	; 0x45b8
 80023c0:	4770      	bx	lr

080023c2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80023c2:	f244 53b8 	movw	r3, #17848	; 0x45b8
 80023c6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80023ca:	3008      	adds	r0, #8
 80023cc:	4770      	bx	lr

080023ce <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80023ce:	f244 53b8 	movw	r3, #17848	; 0x45b8
 80023d2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80023d6:	3008      	adds	r0, #8
 80023d8:	4770      	bx	lr

080023da <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80023da:	2001      	movs	r0, #1
 80023dc:	4770      	bx	lr

080023de <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80023de:	2010      	movs	r0, #16
 80023e0:	4770      	bx	lr

080023e2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80023e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80023e6:	3008      	adds	r0, #8
 80023e8:	4770      	bx	lr

080023ea <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80023ea:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80023ee:	3008      	adds	r0, #8
 80023f0:	4770      	bx	lr

080023f2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80023f2:	4608      	mov	r0, r1
 80023f4:	f000 bb8a 	b.w	8002b0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080023f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80023fa:	b510      	push	{r4, lr}
 80023fc:	4604      	mov	r4, r0
 80023fe:	6003      	str	r3, [r0, #0]
 8002400:	f00a fe21 	bl	800d046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002404:	4620      	mov	r0, r4
 8002406:	bd10      	pop	{r4, pc}
 8002408:	080219b4 	.word	0x080219b4

0800240c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800240c:	b510      	push	{r4, lr}
 800240e:	4604      	mov	r4, r0
 8002410:	f7ff fff2 	bl	80023f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002414:	2114      	movs	r1, #20
 8002416:	4620      	mov	r0, r4
 8002418:	f01b fecd 	bl	801e1b6 <_ZdlPvj>
 800241c:	4620      	mov	r0, r4
 800241e:	bd10      	pop	{r4, pc}

08002420 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002422:	b510      	push	{r4, lr}
 8002424:	4604      	mov	r4, r0
 8002426:	6003      	str	r3, [r0, #0]
 8002428:	f00a fe0d 	bl	800d046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800242c:	4620      	mov	r0, r4
 800242e:	bd10      	pop	{r4, pc}
 8002430:	08021980 	.word	0x08021980

08002434 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002434:	b510      	push	{r4, lr}
 8002436:	4604      	mov	r4, r0
 8002438:	f7ff fff2 	bl	8002420 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800243c:	f244 51c0 	movw	r1, #17856	; 0x45c0
 8002440:	4620      	mov	r0, r4
 8002442:	f01b feb8 	bl	801e1b6 <_ZdlPvj>
 8002446:	4620      	mov	r0, r4
 8002448:	bd10      	pop	{r4, pc}
	...

0800244c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800244e:	b510      	push	{r4, lr}
 8002450:	4604      	mov	r4, r0
 8002452:	6003      	str	r3, [r0, #0]
 8002454:	f00a fdf7 	bl	800d046 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002458:	4620      	mov	r0, r4
 800245a:	bd10      	pop	{r4, pc}
 800245c:	0802194c 	.word	0x0802194c

08002460 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002460:	b510      	push	{r4, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	f7ff fff2 	bl	800244c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002468:	2118      	movs	r1, #24
 800246a:	4620      	mov	r0, r4
 800246c:	f01b fea3 	bl	801e1b6 <_ZdlPvj>
 8002470:	4620      	mov	r0, r4
 8002472:	bd10      	pop	{r4, pc}

08002474 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002474:	4b09      	ldr	r3, [pc, #36]	; (800249c <_ZN12FrontendHeapD1Ev+0x28>)
 8002476:	b510      	push	{r4, lr}
 8002478:	4604      	mov	r4, r0
 800247a:	6003      	str	r3, [r0, #0]
 800247c:	f500 408b 	add.w	r0, r0, #17792	; 0x4580
 8002480:	306c      	adds	r0, #108	; 0x6c
 8002482:	f7ff ffb9 	bl	80023f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002486:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800248a:	f7ff ffc9 	bl	8002420 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800248e:	f104 0014 	add.w	r0, r4, #20
 8002492:	f7ff ffdb 	bl	800244c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002496:	4620      	mov	r0, r4
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	080219e8 	.word	0x080219e8

080024a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80024a0:	b508      	push	{r3, lr}
 80024a2:	4802      	ldr	r0, [pc, #8]	; (80024ac <__tcf_0+0xc>)
 80024a4:	f7ff ffe6 	bl	8002474 <_ZN12FrontendHeapD1Ev>
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	240004a4 	.word	0x240004a4

080024b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80024b0:	b510      	push	{r4, lr}
 80024b2:	4604      	mov	r4, r0
 80024b4:	f7ff ffde 	bl	8002474 <_ZN12FrontendHeapD1Ev>
 80024b8:	f244 7160 	movw	r1, #18272	; 0x4760
 80024bc:	4620      	mov	r0, r4
 80024be:	f01b fe7a 	bl	801e1b6 <_ZdlPvj>
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd10      	pop	{r4, pc}
	...

080024c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80024c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80024cc:	f000 f9aa 	bl	8002824 <_ZN14BitmapDatabase11getInstanceEv>
 80024d0:	2400      	movs	r4, #0
 80024d2:	4605      	mov	r5, r0
 80024d4:	f000 f9aa 	bl	800282c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80024d8:	4623      	mov	r3, r4
 80024da:	4601      	mov	r1, r0
 80024dc:	4622      	mov	r2, r4
 80024de:	4628      	mov	r0, r5
 80024e0:	9400      	str	r4, [sp, #0]
 80024e2:	f013 fa57 	bl	8015994 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <touchgfx_init+0xb8>)
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80024ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80024ec:	4d26      	ldr	r5, [pc, #152]	; (8002588 <touchgfx_init+0xc0>)
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f000 fd9a 	bl	8003028 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80024f4:	4825      	ldr	r0, [pc, #148]	; (800258c <touchgfx_init+0xc4>)
 80024f6:	f013 f905 	bl	8015704 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80024fa:	782b      	ldrb	r3, [r5, #0]
 80024fc:	f3bf 8f5b 	dmb	ish
 8002500:	07db      	lsls	r3, r3, #31
 8002502:	d436      	bmi.n	8002572 <touchgfx_init+0xaa>
 8002504:	4628      	mov	r0, r5
 8002506:	f01b fe58 	bl	801e1ba <__cxa_guard_acquire>
 800250a:	b390      	cbz	r0, 8002572 <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800250c:	4c20      	ldr	r4, [pc, #128]	; (8002590 <touchgfx_init+0xc8>)
 800250e:	4f21      	ldr	r7, [pc, #132]	; (8002594 <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <touchgfx_init+0xd0>)
 8002512:	f104 0014 	add.w	r0, r4, #20
 8002516:	f107 0618 	add.w	r6, r7, #24
 800251a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	6060      	str	r0, [r4, #4]
 8002522:	f8c4 8008 	str.w	r8, [r4, #8]
 8002526:	60e7      	str	r7, [r4, #12]
 8002528:	6126      	str	r6, [r4, #16]
 800252a:	f00a fd8d 	bl	800d048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <touchgfx_init+0xd4>)
 8002530:	4640      	mov	r0, r8
 8002532:	6163      	str	r3, [r4, #20]
 8002534:	f00a fd88 	bl	800d048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <touchgfx_init+0xd8>)
 800253a:	4638      	mov	r0, r7
 800253c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800253e:	f00a fd83 	bl	800d048 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002542:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8002546:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <touchgfx_init+0xdc>)
 8002548:	f504 408c 	add.w	r0, r4, #17920	; 0x4600
 800254c:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
 8002550:	f001 fdc0 	bl	80040d4 <_ZN5ModelC1Ev>
 8002554:	4622      	mov	r2, r4
 8002556:	f504 418c 	add.w	r1, r4, #17920	; 0x4600
 800255a:	4630      	mov	r0, r6
 800255c:	f001 fdb0 	bl	80040c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002560:	4630      	mov	r0, r6
 8002562:	f000 fad3 	bl	8002b0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002566:	4810      	ldr	r0, [pc, #64]	; (80025a8 <touchgfx_init+0xe0>)
 8002568:	f01c fc6a 	bl	801ee40 <atexit>
 800256c:	4628      	mov	r0, r5
 800256e:	f01b fe30 	bl	801e1d2 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002572:	480e      	ldr	r0, [pc, #56]	; (80025ac <touchgfx_init+0xe4>)
}
 8002574:	b002      	add	sp, #8
 8002576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800257a:	f7ff ba75 	b.w	8001a68 <_ZN11TouchGFXHAL10initializeEv>
 800257e:	bf00      	nop
 8002580:	2400f5f4 	.word	0x2400f5f4
 8002584:	24005a24 	.word	0x24005a24
 8002588:	240004a0 	.word	0x240004a0
 800258c:	24000018 	.word	0x24000018
 8002590:	240004a4 	.word	0x240004a4
 8002594:	24004a90 	.word	0x24004a90
 8002598:	080219e8 	.word	0x080219e8
 800259c:	0802194c 	.word	0x0802194c
 80025a0:	08021980 	.word	0x08021980
 80025a4:	080219b4 	.word	0x080219b4
 80025a8:	080024a1 	.word	0x080024a1
 80025ac:	240059a8 	.word	0x240059a8

080025b0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80025b0:	4770      	bx	lr
	...

080025b4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80025b4:	4801      	ldr	r0, [pc, #4]	; (80025bc <touchgfx_taskEntry+0x8>)
 80025b6:	f7ff ba6d 	b.w	8001a94 <_ZN11TouchGFXHAL9taskEntryEv>
 80025ba:	bf00      	nop
 80025bc:	240059a8 	.word	0x240059a8

080025c0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80025c0:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80025c2:	490c      	ldr	r1, [pc, #48]	; (80025f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80025c6:	4c0d      	ldr	r4, [pc, #52]	; (80025fc <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80025c8:	4608      	mov	r0, r1
 80025ca:	6023      	str	r3, [r4, #0]
 80025cc:	f7ff fd80 	bl	80020d0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80025d2:	4610      	mov	r0, r2
 80025d4:	f015 fbf8 	bl	8017dc8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80025d8:	f44f 7348 	mov.w	r3, #800	; 0x320
 80025dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80025e2:	4808      	ldr	r0, [pc, #32]	; (8002604 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80025e4:	e9cd 3200 	strd	r3, r2, [sp]
 80025e8:	4623      	mov	r3, r4
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80025ec:	f7ff fae6 	bl	8001bbc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80025f0:	b002      	add	sp, #8
 80025f2:	bd10      	pop	{r4, pc}
 80025f4:	24004c08 	.word	0x24004c08
 80025f8:	0802142c 	.word	0x0802142c
 80025fc:	24004c04 	.word	0x24004c04
 8002600:	24005a28 	.word	0x24005a28
 8002604:	240059a8 	.word	0x240059a8

08002608 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002608:	4801      	ldr	r0, [pc, #4]	; (8002610 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800260a:	f7ff bd15 	b.w	8002038 <_ZN8STM32DMAD1Ev>
 800260e:	bf00      	nop
 8002610:	24004c08 	.word	0x24004c08

08002614 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002614:	2000      	movs	r0, #0
 8002616:	4770      	bx	lr

08002618 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002618:	8081      	strh	r1, [r0, #4]
    }
 800261a:	4770      	bx	lr

0800261c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800261c:	80c1      	strh	r1, [r0, #6]
    }
 800261e:	4770      	bx	lr

08002620 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002620:	8101      	strh	r1, [r0, #8]
    }
 8002622:	4770      	bx	lr

08002624 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002624:	8141      	strh	r1, [r0, #10]
    }
 8002626:	4770      	bx	lr

08002628 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002628:	4770      	bx	lr

0800262a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800262a:	4770      	bx	lr

0800262c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800262c:	4770      	bx	lr

0800262e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800262e:	4770      	bx	lr

08002630 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002630:	4770      	bx	lr

08002632 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002632:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002634:	88c4      	ldrh	r4, [r0, #6]
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	1b12      	subs	r2, r2, r4
 800263a:	8884      	ldrh	r4, [r0, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	1b09      	subs	r1, r1, r4
 8002640:	b212      	sxth	r2, r2
    }
 8002642:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002646:	b209      	sxth	r1, r1
 8002648:	4718      	bx	r3

0800264a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800264e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800265a:	6010      	str	r0, [r2, #0]
    }
 800265c:	4770      	bx	lr

0800265e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800265e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002662:	b11a      	cbz	r2, 800266c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002664:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002668:	b102      	cbz	r2, 800266c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800266a:	6018      	str	r0, [r3, #0]
        }
    }
 800266c:	4770      	bx	lr

0800266e <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800266e:	2000      	movs	r0, #0
 8002670:	4770      	bx	lr

08002672 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 8002672:	888b      	ldrh	r3, [r1, #4]
 8002674:	8083      	strh	r3, [r0, #4]
        return true;
    }
 8002676:	2001      	movs	r0, #1
 8002678:	4770      	bx	lr

0800267a <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 800267a:	4770      	bx	lr

0800267c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800267c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002680:	4770      	bx	lr

08002682 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8002682:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002686:	4770      	bx	lr

08002688 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002688:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800268a:	b510      	push	{r4, lr}
        return rect.width;
 800268c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002690:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002694:	8002      	strh	r2, [r0, #0]
 8002696:	8042      	strh	r2, [r0, #2]
 8002698:	8084      	strh	r4, [r0, #4]
 800269a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800269c:	bd10      	pop	{r4, pc}

0800269e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800269e:	2200      	movs	r2, #0
 80026a0:	8002      	strh	r2, [r0, #0]
 80026a2:	8042      	strh	r2, [r0, #2]
 80026a4:	8082      	strh	r2, [r0, #4]
 80026a6:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80026a8:	4770      	bx	lr
	...

080026ac <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ac:	4b02      	ldr	r3, [pc, #8]	; (80026b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80026ae:	2290      	movs	r2, #144	; 0x90
 80026b0:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000e100 	.word	0xe000e100

080026bc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80026bc:	4770      	bx	lr

080026be <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80026be:	b570      	push	{r4, r5, r6, lr}
 80026c0:	4604      	mov	r4, r0
    HAL::initialize();
 80026c2:	f00a ffbc 	bl	800d63e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80026ca:	f00f ffe5 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
 80026ce:	4601      	mov	r1, r0
 80026d0:	4620      	mov	r0, r4
 80026d2:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	4620      	mov	r0, r4
 80026d8:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80026dc:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80026e0:	2300      	movs	r3, #0
 80026e2:	46ac      	mov	ip, r5
 80026e4:	461a      	mov	r2, r3
}
 80026e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80026ea:	4760      	bx	ip

080026ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80026ec:	f00a bf58 	b.w	800d5a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080026f0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80026f0:	f00b b8b3 	b.w	800d85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080026f4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80026f4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80026f8:	b112      	cbz	r2, 8002700 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4718      	bx	r3
    }
 8002700:	4770      	bx	lr
	...

08002704 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 8002706:	6953      	ldr	r3, [r2, #20]
 8002708:	03db      	lsls	r3, r3, #15
{
 800270a:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800270c:	d51e      	bpl.n	800274c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800270e:	2300      	movs	r3, #0
 8002710:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002714:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002718:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800271c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002720:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002724:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002728:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800272a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800272e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002730:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002734:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002736:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 800273a:	d2f9      	bcs.n	8002730 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800273c:	3b20      	subs	r3, #32
 800273e:	f113 0f20 	cmn.w	r3, #32
 8002742:	d1f2      	bne.n	800272a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8002744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002748:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800274c:	bd70      	pop	{r4, r5, r6, pc}
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8002756:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800275a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800275e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002762:	f3bf 8f6f 	isb	sy
}
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100

0800276c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276c:	4b02      	ldr	r3, [pc, #8]	; (8002778 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 800276e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 800277c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800277e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002780:	4e12      	ldr	r6, [pc, #72]	; (80027cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8002782:	4604      	mov	r4, r0
 8002784:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002788:	6003      	str	r3, [r0, #0]
 800278a:	6833      	ldr	r3, [r6, #0]
 800278c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002790:	b10a      	cbz	r2, 8002796 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8002792:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002794:	b900      	cbnz	r0, 8002798 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8002796:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002798:	6803      	ldr	r3, [r0, #0]
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	4798      	blx	r3
 800279e:	1e43      	subs	r3, r0, #1
 80027a0:	425d      	negs	r5, r3
 80027a2:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80027a4:	6833      	ldr	r3, [r6, #0]
 80027a6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80027a8:	b130      	cbz	r0, 80027b8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80027aa:	6803      	ldr	r3, [r0, #0]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4798      	blx	r3
 80027b0:	2801      	cmp	r0, #1
 80027b2:	bf08      	it	eq
 80027b4:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80027b8:	b92d      	cbnz	r5, 80027c6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80027bc:	2127      	movs	r1, #39	; 0x27
 80027be:	4a06      	ldr	r2, [pc, #24]	; (80027d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80027c0:	4806      	ldr	r0, [pc, #24]	; (80027dc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80027c2:	f01c fb1f 	bl	801ee04 <__assert_func>
    }
 80027c6:	4620      	mov	r0, r4
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	bf00      	nop
 80027cc:	2400f590 	.word	0x2400f590
 80027d0:	08021b04 	.word	0x08021b04
 80027d4:	080219f4 	.word	0x080219f4
 80027d8:	08021a52 	.word	0x08021a52
 80027dc:	08021a8b 	.word	0x08021a8b

080027e0 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_12_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80027e0:	4770      	bx	lr

080027e2 <_ZN23ApplicationFontProviderD0Ev>:
 80027e2:	b510      	push	{r4, lr}
 80027e4:	4604      	mov	r4, r0
 80027e6:	2104      	movs	r1, #4
 80027e8:	f01b fce5 	bl	801e1b6 <_ZdlPvj>
 80027ec:	4620      	mov	r0, r4
 80027ee:	bd10      	pop	{r4, pc}

080027f0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80027f0:	b508      	push	{r3, lr}
    switch (typography)
 80027f2:	2903      	cmp	r1, #3
 80027f4:	d813      	bhi.n	800281e <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80027f6:	e8df f001 	tbb	[pc, r1]
 80027fa:	0602      	.short	0x0602
 80027fc:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80027fe:	f000 fc5f 	bl	80030c0 <_ZN17TypedTextDatabase8getFontsEv>
 8002802:	6800      	ldr	r0, [r0, #0]
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002804:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002806:	f000 fc5b 	bl	80030c0 <_ZN17TypedTextDatabase8getFontsEv>
 800280a:	6840      	ldr	r0, [r0, #4]
 800280c:	e7fa      	b.n	8002804 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800280e:	f000 fc57 	bl	80030c0 <_ZN17TypedTextDatabase8getFontsEv>
 8002812:	6880      	ldr	r0, [r0, #8]
 8002814:	e7f6      	b.n	8002804 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002816:	f000 fc53 	bl	80030c0 <_ZN17TypedTextDatabase8getFontsEv>
 800281a:	68c0      	ldr	r0, [r0, #12]
 800281c:	e7f2      	b.n	8002804 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800281e:	2000      	movs	r0, #0
 8002820:	e7f0      	b.n	8002804 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002824 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002824:	4800      	ldr	r0, [pc, #0]	; (8002828 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002826:	4770      	bx	lr
 8002828:	08021b30 	.word	0x08021b30

0800282c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800282c:	2001      	movs	r0, #1
 800282e:	4770      	bx	lr

08002830 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002830:	b513      	push	{r0, r1, r4, lr}
 8002832:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002834:	b151      	cbz	r1, 800284c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800283a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800283c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002840:	689c      	ldr	r4, [r3, #8]
 8002842:	f10d 0303 	add.w	r3, sp, #3
 8002846:	47a0      	blx	r4
        return glyph;
    }
 8002848:	b002      	add	sp, #8
 800284a:	bd10      	pop	{r4, pc}
            return 0;
 800284c:	4608      	mov	r0, r1
 800284e:	e7fb      	b.n	8002848 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002850 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002850:	89c0      	ldrh	r0, [r0, #14]
 8002852:	4770      	bx	lr

08002854 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002854:	8a00      	ldrh	r0, [r0, #16]
 8002856:	4770      	bx	lr

08002858 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002858:	88c0      	ldrh	r0, [r0, #6]
 800285a:	4770      	bx	lr

0800285c <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 800285c:	8880      	ldrh	r0, [r0, #4]
 800285e:	4770      	bx	lr

08002860 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002860:	7a80      	ldrb	r0, [r0, #10]
    }
 8002862:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002866:	4770      	bx	lr

08002868 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002868:	7a80      	ldrb	r0, [r0, #10]
    }
 800286a:	09c0      	lsrs	r0, r0, #7
 800286c:	4770      	bx	lr

0800286e <_ZN8touchgfx9TypedTextD1Ev>:
    }
 800286e:	4770      	bx	lr

08002870 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002870:	b510      	push	{r4, lr}
 8002872:	4604      	mov	r4, r0
    }
 8002874:	2108      	movs	r1, #8
 8002876:	f01b fc9e 	bl	801e1b6 <_ZdlPvj>
 800287a:	4620      	mov	r0, r4
 800287c:	bd10      	pop	{r4, pc}

0800287e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800287e:	4770      	bx	lr

08002880 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002880:	4770      	bx	lr

08002882 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002882:	f500 7398 	add.w	r3, r0, #304	; 0x130
 8002886:	6808      	ldr	r0, [r1, #0]
 8002888:	6849      	ldr	r1, [r1, #4]
 800288a:	c303      	stmia	r3!, {r0, r1}
    }
 800288c:	4770      	bx	lr

0800288e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800288e:	4770      	bx	lr

08002890 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002890:	4770      	bx	lr

08002892 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002892:	6041      	str	r1, [r0, #4]
    }
 8002894:	4770      	bx	lr

08002896 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002896:	4770      	bx	lr

08002898 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800289a:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 800289e:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80028a8:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80028ac:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	08002959 	.word	0x08002959

080028b8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80028b8:	2301      	movs	r3, #1
 80028ba:	7203      	strb	r3, [r0, #8]
    }
 80028bc:	4770      	bx	lr

080028be <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80028be:	4770      	bx	lr

080028c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80028c0:	4770      	bx	lr

080028c2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80028c2:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80028c4:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80028c6:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80028c8:	68c2      	ldr	r2, [r0, #12]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	1054      	asrs	r4, r2, #1
 80028ce:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80028d2:	07d2      	lsls	r2, r2, #31
 80028d4:	bf48      	it	mi
 80028d6:	590a      	ldrmi	r2, [r1, r4]
    }
 80028d8:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80028dc:	bf48      	it	mi
 80028de:	58d3      	ldrmi	r3, [r2, r3]
 80028e0:	4718      	bx	r3

080028e2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80028e2:	6843      	ldr	r3, [r0, #4]
 80028e4:	b12b      	cbz	r3, 80028f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80028e6:	6883      	ldr	r3, [r0, #8]
 80028e8:	b92b      	cbnz	r3, 80028f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80028ea:	68c0      	ldr	r0, [r0, #12]
 80028ec:	f000 0001 	and.w	r0, r0, #1
 80028f0:	4770      	bx	lr
 80028f2:	4618      	mov	r0, r3
 80028f4:	4770      	bx	lr
 80028f6:	2001      	movs	r0, #1
    }
 80028f8:	4770      	bx	lr

080028fa <_ZN8touchgfx12NoTransitionD0Ev>:
 80028fa:	b510      	push	{r4, lr}
 80028fc:	4604      	mov	r4, r0
 80028fe:	210c      	movs	r1, #12
 8002900:	f01b fc59 	bl	801e1b6 <_ZdlPvj>
 8002904:	4620      	mov	r0, r4
 8002906:	bd10      	pop	{r4, pc}

08002908 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002908:	b510      	push	{r4, lr}
 800290a:	4604      	mov	r4, r0
 800290c:	2110      	movs	r1, #16
 800290e:	f01b fc52 	bl	801e1b6 <_ZdlPvj>
 8002912:	4620      	mov	r0, r4
 8002914:	bd10      	pop	{r4, pc}

08002916 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002916:	b510      	push	{r4, lr}
 8002918:	4604      	mov	r4, r0
 800291a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800291e:	f01b fc4a 	bl	801e1b6 <_ZdlPvj>
 8002922:	4620      	mov	r0, r4
 8002924:	bd10      	pop	{r4, pc}

08002926 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002926:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002928:	f00f feb6 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
    }
 800292c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002930:	f010 bafc 	b.w	8012f2c <_ZN8touchgfx11Application10invalidateEv>

08002934 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002934:	b510      	push	{r4, lr}
 8002936:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002938:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800293c:	b158      	cbz	r0, 8002956 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800293e:	6803      	ldr	r3, [r0, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4798      	blx	r3
 8002944:	b138      	cbz	r0, 8002956 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002946:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 8002956:	bd10      	pop	{r4, pc}

08002958 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002958:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800295c:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002960:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002962:	68a8      	ldr	r0, [r5, #8]
 8002964:	6803      	ldr	r3, [r0, #0]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4798      	blx	r3
 800296a:	f244 53b7 	movw	r3, #17847	; 0x45b7
 800296e:	4298      	cmp	r0, r3
 8002970:	d805      	bhi.n	800297e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002972:	4b46      	ldr	r3, [pc, #280]	; (8002a8c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002974:	21a3      	movs	r1, #163	; 0xa3
 8002976:	4a46      	ldr	r2, [pc, #280]	; (8002a90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002978:	4846      	ldr	r0, [pc, #280]	; (8002a94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800297a:	f01c fa43 	bl	801ee04 <__assert_func>
 800297e:	6868      	ldr	r0, [r5, #4]
 8002980:	6803      	ldr	r3, [r0, #0]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4798      	blx	r3
 8002986:	280f      	cmp	r0, #15
 8002988:	d803      	bhi.n	8002992 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 800298a:	4b43      	ldr	r3, [pc, #268]	; (8002a98 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 800298c:	21a4      	movs	r1, #164	; 0xa4
 800298e:	4a40      	ldr	r2, [pc, #256]	; (8002a90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002990:	e7f2      	b.n	8002978 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002992:	68e8      	ldr	r0, [r5, #12]
 8002994:	6803      	ldr	r3, [r0, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4798      	blx	r3
 800299a:	280b      	cmp	r0, #11
 800299c:	d803      	bhi.n	80029a6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 80029a0:	21a5      	movs	r1, #165	; 0xa5
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80029a4:	e7e8      	b.n	8002978 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80029a6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002aa4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80029aa:	f00f fe75 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80029ae:	3004      	adds	r0, #4
 80029b0:	f00f fe97 	bl	80126e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80029b4:	f8d9 0000 	ldr.w	r0, [r9]
 80029b8:	b110      	cbz	r0, 80029c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4798      	blx	r3
    if (*currentTrans)
 80029c0:	f8d9 0000 	ldr.w	r0, [r9]
 80029c4:	b110      	cbz	r0, 80029cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4798      	blx	r3
    if (*currentScreen)
 80029cc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002aa8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80029d0:	f8d8 0000 	ldr.w	r0, [r8]
 80029d4:	b110      	cbz	r0, 80029dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80029d6:	6803      	ldr	r3, [r0, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4798      	blx	r3
    if (*currentPresenter)
 80029dc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80029e0:	b110      	cbz	r0, 80029e8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80029e2:	6803      	ldr	r3, [r0, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4798      	blx	r3
    if (*currentScreen)
 80029e8:	f8d8 0000 	ldr.w	r0, [r8]
 80029ec:	b110      	cbz	r0, 80029f4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80029ee:	6803      	ldr	r3, [r0, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4798      	blx	r3
    if (*currentPresenter)
 80029f4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80029f8:	b110      	cbz	r0, 8002a00 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80029fa:	6803      	ldr	r3, [r0, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002a00:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002a02:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002a04:	f04f 0b00 	mov.w	fp, #0
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	4798      	blx	r3
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002a10:	4604      	mov	r4, r0
 8002a12:	f8c0 b004 	str.w	fp, [r0, #4]
 8002a16:	6003      	str	r3, [r0, #0]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002a1e:	68a8      	ldr	r0, [r5, #8]
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	4798      	blx	r3
 8002a26:	4606      	mov	r6, r0
 8002a28:	f001 fc34 	bl	8004294 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002a2c:	6868      	ldr	r0, [r5, #4]
 8002a2e:	4659      	mov	r1, fp
 8002a30:	6803      	ldr	r3, [r0, #0]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	4798      	blx	r3
 8002a36:	4605      	mov	r5, r0
 8002a38:	4631      	mov	r1, r6
 8002a3a:	f001 fb5d 	bl	80040f8 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002a3e:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002a42:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 8002a46:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002a4a:	b1e5      	cbz	r5, 8002a86 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002a4c:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002a4e:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002a52:	4630      	mov	r0, r6
 8002a54:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002a56:	f8c5 a008 	str.w	sl, [r5, #8]
 8002a5a:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002a5c:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002a5e:	4798      	blx	r3
    newPresenter->activate();
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	4628      	mov	r0, r5
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002a68:	4621      	mov	r1, r4
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f011 fb76 	bl	801415c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	4620      	mov	r0, r4
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	4798      	blx	r3
    newTransition->invalidate();
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	695b      	ldr	r3, [r3, #20]
}
 8002a7e:	b001      	add	sp, #4
 8002a80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	4718      	bx	r3
    model->bind(newPresenter);
 8002a86:	462b      	mov	r3, r5
 8002a88:	e7e1      	b.n	8002a4e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8002a8a:	bf00      	nop
 8002a8c:	08021b54 	.word	0x08021b54
 8002a90:	08021be2 	.word	0x08021be2
 8002a94:	08021ce6 	.word	0x08021ce6
 8002a98:	08021d3b 	.word	0x08021d3b
 8002a9c:	08021dde 	.word	0x08021dde
 8002aa0:	08021ef0 	.word	0x08021ef0
 8002aa4:	2400f5d8 	.word	0x2400f5d8
 8002aa8:	2400f5d4 	.word	0x2400f5d4

08002aac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	4604      	mov	r4, r0
 8002ab0:	4617      	mov	r7, r2
 8002ab2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002ab4:	f00f feb6 	bl	8012824 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 8002aba:	2500      	movs	r5, #0
        instance = this;
 8002abc:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002abe:	4629      	mov	r1, r5
      model(m)
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8002ac2:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 8002ac6:	4e0f      	ldr	r6, [pc, #60]	; (8002b04 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002ace:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 8002ad2:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8002ad6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8002ad8:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f000 faa1 	bl	8003028 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002ae6:	6833      	ldr	r3, [r6, #0]
 8002ae8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002aec:	b10a      	cbz	r2, 8002af2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 8002aee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002af0:	b900      	cbnz	r0, 8002af4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002af2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002af4:	f016 fa19 	bl	8018f2a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002af8:	4620      	mov	r0, r4
 8002afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002afc:	2400f5e4 	.word	0x2400f5e4
 8002b00:	08021ea4 	.word	0x08021ea4
 8002b04:	2400f590 	.word	0x2400f590
 8002b08:	08021e8c 	.word	0x08021e8c

08002b0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002b0e:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002b12:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002b16:	2300      	movs	r3, #0
 8002b18:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002b1c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002b20:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	08002959 	.word	0x08002959

08002b2c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002b2c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002b2e:	4770      	bx	lr

08002b30 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002b30:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002b32:	4770      	bx	lr

08002b34 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002b34:	4770      	bx	lr

08002b36 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002b36:	888b      	ldrh	r3, [r1, #4]
 8002b38:	69c0      	ldr	r0, [r0, #28]
 8002b3a:	0adb      	lsrs	r3, r3, #11
 8002b3c:	680a      	ldr	r2, [r1, #0]
 8002b3e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002b42:	4410      	add	r0, r2
 8002b44:	4770      	bx	lr

08002b46 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002b46:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002b48:	b1c2      	cbz	r2, 8002b7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002b4a:	7b13      	ldrb	r3, [r2, #12]
 8002b4c:	b1b3      	cbz	r3, 8002b7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002b4e:	7b54      	ldrb	r4, [r2, #13]
 8002b50:	7ad2      	ldrb	r2, [r2, #11]
 8002b52:	0224      	lsls	r4, r4, #8
 8002b54:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002b58:	4314      	orrs	r4, r2
 8002b5a:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002b5c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002b5e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002b62:	8813      	ldrh	r3, [r2, #0]
 8002b64:	428b      	cmp	r3, r1
 8002b66:	d102      	bne.n	8002b6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002b68:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002b6c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002b6e:	d805      	bhi.n	8002b7c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002b70:	3801      	subs	r0, #1
 8002b72:	3204      	adds	r2, #4
 8002b74:	b280      	uxth	r0, r0
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d1f3      	bne.n	8002b62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002b7a:	e7f7      	b.n	8002b6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e7f5      	b.n	8002b6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002b80 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002b80:	b510      	push	{r4, lr}
 8002b82:	4604      	mov	r4, r0
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	f01b fb16 	bl	801e1b6 <_ZdlPvj>
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	bd10      	pop	{r4, pc}
	...

08002b90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002b90:	b530      	push	{r4, r5, lr}
 8002b92:	b08b      	sub	sp, #44	; 0x2c
 8002b94:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002b96:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002b9a:	9508      	str	r5, [sp, #32]
 8002b9c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002ba0:	9507      	str	r5, [sp, #28]
 8002ba2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002ba6:	9506      	str	r5, [sp, #24]
 8002ba8:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002bac:	9505      	str	r5, [sp, #20]
 8002bae:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002bb2:	9504      	str	r5, [sp, #16]
 8002bb4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002bb8:	9503      	str	r5, [sp, #12]
 8002bba:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002bbe:	9502      	str	r5, [sp, #8]
 8002bc0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002bc4:	9501      	str	r5, [sp, #4]
 8002bc6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002bca:	9500      	str	r5, [sp, #0]
 8002bcc:	f010 fe56 	bl	801387c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002bd2:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002bd8:	61e3      	str	r3, [r4, #28]
 8002bda:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002bdc:	6223      	str	r3, [r4, #32]
 8002bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002be0:	6263      	str	r3, [r4, #36]	; 0x24
 8002be2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002be4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002be6:	b00b      	add	sp, #44	; 0x2c
 8002be8:	bd30      	pop	{r4, r5, pc}
 8002bea:	bf00      	nop
 8002bec:	08021f14 	.word	0x08021f14

08002bf0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002bf0:	4770      	bx	lr

08002bf2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002bf2:	4770      	bx	lr

08002bf4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002bf4:	4770      	bx	lr

08002bf6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002bf6:	4770      	bx	lr

08002bf8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002bf8:	4770      	bx	lr

08002bfa <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 8002bfa:	3098      	adds	r0, #152	; 0x98
 8002bfc:	f002 bb28 	b.w	8005250 <_ZN11customGraph10initializeEv>

08002c00 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <_ZN15Screen1ViewBaseD1Ev+0x1c>)
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
 8002c06:	6003      	str	r3, [r0, #0]
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 8002c08:	f00e f8c8 	bl	8010d9c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <_ZN15Screen1ViewBaseD1Ev+0x20>)
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f840 3f98 	str.w	r3, [r0, #152]!
 8002c14:	f000 fd22 	bl	800365c <_ZN15customGraphBaseD1Ev>
}
 8002c18:	4620      	mov	r0, r4
 8002c1a:	bd10      	pop	{r4, pc}
 8002c1c:	08021f74 	.word	0x08021f74
 8002c20:	080228ec 	.word	0x080228ec

08002c24 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4604      	mov	r4, r0
}
 8002c28:	f7ff ffea 	bl	8002c00 <_ZN15Screen1ViewBaseD1Ev>
 8002c2c:	f244 51a8 	movw	r1, #17832	; 0x45a8
 8002c30:	4620      	mov	r0, r4
 8002c32:	f01b fac0 	bl	801e1b6 <_ZdlPvj>
 8002c36:	4620      	mov	r0, r4
 8002c38:	bd10      	pop	{r4, pc}

08002c3a <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002c3a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002c3c:	b570      	push	{r4, r5, r6, lr}
 8002c3e:	4604      	mov	r4, r0
        setX(x);
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8002c42:	4615      	mov	r5, r2
        setX(x);
 8002c44:	4798      	blx	r3
        setY(y);
 8002c46:	6823      	ldr	r3, [r4, #0]
 8002c48:	4620      	mov	r0, r4
 8002c4a:	4629      	mov	r1, r5
 8002c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8002c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002c52:	4718      	bx	r3

08002c54 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8002c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c58:	4604      	mov	r4, r0
        : presenter(0)
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	f011 f8d2 	bl	8013e04 <_ZN8touchgfx6ScreenC1Ev>
 8002c60:	4b38      	ldr	r3, [pc, #224]	; (8002d44 <_ZN15Screen1ViewBaseC1Ev+0xf0>)
 8002c62:	4626      	mov	r6, r4
 8002c64:	63e5      	str	r5, [r4, #60]	; 0x3c
          visible(true)
 8002c66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c6a:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 8002c6e:	f846 3b40 	str.w	r3, [r6], #64
 8002c72:	f104 0998 	add.w	r9, r4, #152	; 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002c76:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <_ZN15Screen1ViewBaseC1Ev+0xf4>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 8002c78:	a901      	add	r1, sp, #4
 8002c7a:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 8002c7e:	4638      	mov	r0, r7
 8002c80:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002c84:	f104 0804 	add.w	r8, r4, #4
        : Widget(), bitmap(bmp), alpha(255)
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <_ZN15Screen1ViewBaseC1Ev+0xf8>)
 8002c8a:	6625      	str	r5, [r4, #96]	; 0x60
 8002c8c:	66e2      	str	r2, [r4, #108]	; 0x6c
        : color(col)
 8002c8e:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 8002c90:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 8002c94:	23ff      	movs	r3, #255	; 0xff
 8002c96:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9e:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ca2:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 8002ca6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 8002caa:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002cae:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 8002cb2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 8002cb6:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 8002cba:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 8002cbe:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8002cc2:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 8002cc6:	f00d f964 	bl	800ff92 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002cca:	4648      	mov	r0, r9
 8002ccc:	f001 fb76 	bl	80043bc <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8002cd0:	f504 50b6 	add.w	r0, r4, #5824	; 0x16c0
 8002cd4:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8002cd8:	3008      	adds	r0, #8
 8002cda:	f00e f855 	bl	8010d88 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        setXY(x, y);
 8002cde:	462a      	mov	r2, r5
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	4630      	mov	r0, r6
 8002ce4:	f7ff ffa9 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002ce8:	4630      	mov	r0, r6
 8002cea:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002cee:	f7ff fc97 	bl	8002620 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002cf8:	f7ff fc94 	bl	8002624 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002cfc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002d00:	4631      	mov	r1, r6
 8002d02:	4640      	mov	r0, r8
 8002d04:	66a3      	str	r3, [r4, #104]	; 0x68
 8002d06:	f00a f9b1 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 8002d0a:	462a      	mov	r2, r5
 8002d0c:	4629      	mov	r1, r5
 8002d0e:	4638      	mov	r0, r7
 8002d10:	f7ff ff93 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8002d14:	a901      	add	r1, sp, #4
 8002d16:	4638      	mov	r0, r7
 8002d18:	f8ad 5004 	strh.w	r5, [sp, #4]
 8002d1c:	f00d f939 	bl	800ff92 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002d20:	4639      	mov	r1, r7
 8002d22:	4640      	mov	r0, r8
 8002d24:	f00a f9a2 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(245, 140);
 8002d28:	228c      	movs	r2, #140	; 0x8c
 8002d2a:	4648      	mov	r0, r9
 8002d2c:	21f5      	movs	r1, #245	; 0xf5
 8002d2e:	f7ff ff84 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
 8002d32:	4640      	mov	r0, r8
 8002d34:	4649      	mov	r1, r9
 8002d36:	f00a f999 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	b003      	add	sp, #12
 8002d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d42:	bf00      	nop
 8002d44:	08021f74 	.word	0x08021f74
 8002d48:	08023028 	.word	0x08023028
 8002d4c:	08023090 	.word	0x08023090

08002d50 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 67, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002d50:	4770      	bx	lr
	...

08002d54 <_Z23getFont_verdana_12_4bppv>:
{
 8002d54:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 67, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002d56:	4d17      	ldr	r5, [pc, #92]	; (8002db4 <_Z23getFont_verdana_12_4bppv+0x60>)
{
 8002d58:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 67, 15, 12, 0, 0, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002d5a:	782c      	ldrb	r4, [r5, #0]
 8002d5c:	f3bf 8f5b 	dmb	ish
 8002d60:	f014 0401 	ands.w	r4, r4, #1
 8002d64:	d122      	bne.n	8002dac <_Z23getFont_verdana_12_4bppv+0x58>
 8002d66:	4628      	mov	r0, r5
 8002d68:	f01b fa27 	bl	801e1ba <__cxa_guard_acquire>
 8002d6c:	b1f0      	cbz	r0, 8002dac <_Z23getFont_verdana_12_4bppv+0x58>
 8002d6e:	233a      	movs	r3, #58	; 0x3a
 8002d70:	2243      	movs	r2, #67	; 0x43
 8002d72:	4911      	ldr	r1, [pc, #68]	; (8002db8 <_Z23getFont_verdana_12_4bppv+0x64>)
 8002d74:	9309      	str	r3, [sp, #36]	; 0x24
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <_Z23getFont_verdana_12_4bppv+0x68>)
 8002d78:	4811      	ldr	r0, [pc, #68]	; (8002dc0 <_Z23getFont_verdana_12_4bppv+0x6c>)
 8002d7a:	9308      	str	r3, [sp, #32]
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <_Z23getFont_verdana_12_4bppv+0x70>)
 8002d7e:	940a      	str	r4, [sp, #40]	; 0x28
 8002d80:	9307      	str	r3, [sp, #28]
 8002d82:	2301      	movs	r3, #1
 8002d84:	9401      	str	r4, [sp, #4]
 8002d86:	9304      	str	r3, [sp, #16]
 8002d88:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002d92:	230c      	movs	r3, #12
 8002d94:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	230f      	movs	r3, #15
 8002d9c:	f7ff fef8 	bl	8002b90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002da0:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <_Z23getFont_verdana_12_4bppv+0x74>)
 8002da2:	f01c f84d 	bl	801ee40 <atexit>
 8002da6:	4628      	mov	r0, r5
 8002da8:	f01b fa13 	bl	801e1d2 <__cxa_guard_release>
    return verdana_12_4bpp;
}
 8002dac:	4804      	ldr	r0, [pc, #16]	; (8002dc0 <_Z23getFont_verdana_12_4bppv+0x6c>)
 8002dae:	b00f      	add	sp, #60	; 0x3c
 8002db0:	bd30      	pop	{r4, r5, pc}
 8002db2:	bf00      	nop
 8002db4:	24005a80 	.word	0x24005a80
 8002db8:	0802596c 	.word	0x0802596c
 8002dbc:	0802642c 	.word	0x0802642c
 8002dc0:	24005a84 	.word	0x24005a84
 8002dc4:	08026588 	.word	0x08026588
 8002dc8:	08002d51 	.word	0x08002d51

08002dcc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 63, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_Z23getFont_verdana_14_4bppv>:
{
 8002dd0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 63, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002dd2:	4d17      	ldr	r5, [pc, #92]	; (8002e30 <_Z23getFont_verdana_14_4bppv+0x60>)
{
 8002dd4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 63, 17, 14, 0, 0, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002dd6:	782c      	ldrb	r4, [r5, #0]
 8002dd8:	f3bf 8f5b 	dmb	ish
 8002ddc:	f014 0401 	ands.w	r4, r4, #1
 8002de0:	d122      	bne.n	8002e28 <_Z23getFont_verdana_14_4bppv+0x58>
 8002de2:	4628      	mov	r0, r5
 8002de4:	f01b f9e9 	bl	801e1ba <__cxa_guard_acquire>
 8002de8:	b1f0      	cbz	r0, 8002e28 <_Z23getFont_verdana_14_4bppv+0x58>
 8002dea:	233a      	movs	r3, #58	; 0x3a
 8002dec:	223f      	movs	r2, #63	; 0x3f
 8002dee:	4911      	ldr	r1, [pc, #68]	; (8002e34 <_Z23getFont_verdana_14_4bppv+0x64>)
 8002df0:	9309      	str	r3, [sp, #36]	; 0x24
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <_Z23getFont_verdana_14_4bppv+0x68>)
 8002df4:	4811      	ldr	r0, [pc, #68]	; (8002e3c <_Z23getFont_verdana_14_4bppv+0x6c>)
 8002df6:	9308      	str	r3, [sp, #32]
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_Z23getFont_verdana_14_4bppv+0x70>)
 8002dfa:	940a      	str	r4, [sp, #40]	; 0x28
 8002dfc:	9307      	str	r3, [sp, #28]
 8002dfe:	2301      	movs	r3, #1
 8002e00:	9401      	str	r4, [sp, #4]
 8002e02:	9304      	str	r3, [sp, #16]
 8002e04:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002e08:	2304      	movs	r3, #4
 8002e0a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002e0e:	230e      	movs	r3, #14
 8002e10:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2311      	movs	r3, #17
 8002e18:	f7ff feba 	bl	8002b90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002e1c:	4809      	ldr	r0, [pc, #36]	; (8002e44 <_Z23getFont_verdana_14_4bppv+0x74>)
 8002e1e:	f01c f80f 	bl	801ee40 <atexit>
 8002e22:	4628      	mov	r0, r5
 8002e24:	f01b f9d5 	bl	801e1d2 <__cxa_guard_release>
    return verdana_14_4bpp;
}
 8002e28:	4804      	ldr	r0, [pc, #16]	; (8002e3c <_Z23getFont_verdana_14_4bppv+0x6c>)
 8002e2a:	b00f      	add	sp, #60	; 0x3c
 8002e2c:	bd30      	pop	{r4, r5, pc}
 8002e2e:	bf00      	nop
 8002e30:	24005ab0 	.word	0x24005ab0
 8002e34:	08025d18 	.word	0x08025d18
 8002e38:	080264a8 	.word	0x080264a8
 8002e3c:	24005ab4 	.word	0x24005ab4
 8002e40:	0802658c 	.word	0x0802658c
 8002e44:	08002dcd 	.word	0x08002dcd

08002e48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 65, 19, 16, 0, 0, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002e48:	4770      	bx	lr
	...

08002e4c <_Z23getFont_verdana_16_4bppv>:
{
 8002e4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 65, 19, 16, 0, 0, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002e4e:	4d17      	ldr	r5, [pc, #92]	; (8002eac <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8002e50:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 65, 19, 16, 0, 0, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002e52:	782c      	ldrb	r4, [r5, #0]
 8002e54:	f3bf 8f5b 	dmb	ish
 8002e58:	f014 0401 	ands.w	r4, r4, #1
 8002e5c:	d122      	bne.n	8002ea4 <_Z23getFont_verdana_16_4bppv+0x58>
 8002e5e:	4628      	mov	r0, r5
 8002e60:	f01b f9ab 	bl	801e1ba <__cxa_guard_acquire>
 8002e64:	b1f0      	cbz	r0, 8002ea4 <_Z23getFont_verdana_16_4bppv+0x58>
 8002e66:	233a      	movs	r3, #58	; 0x3a
 8002e68:	2241      	movs	r2, #65	; 0x41
 8002e6a:	4911      	ldr	r1, [pc, #68]	; (8002eb0 <_Z23getFont_verdana_16_4bppv+0x64>)
 8002e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <_Z23getFont_verdana_16_4bppv+0x68>)
 8002e70:	4811      	ldr	r0, [pc, #68]	; (8002eb8 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8002e72:	9308      	str	r3, [sp, #32]
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <_Z23getFont_verdana_16_4bppv+0x70>)
 8002e76:	940a      	str	r4, [sp, #40]	; 0x28
 8002e78:	9307      	str	r3, [sp, #28]
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	9401      	str	r4, [sp, #4]
 8002e7e:	9304      	str	r3, [sp, #16]
 8002e80:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002e84:	2304      	movs	r3, #4
 8002e86:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8002e8a:	2310      	movs	r3, #16
 8002e8c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2313      	movs	r3, #19
 8002e94:	f7ff fe7c 	bl	8002b90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002e98:	4809      	ldr	r0, [pc, #36]	; (8002ec0 <_Z23getFont_verdana_16_4bppv+0x74>)
 8002e9a:	f01b ffd1 	bl	801ee40 <atexit>
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	f01b f997 	bl	801e1d2 <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8002ea4:	4804      	ldr	r0, [pc, #16]	; (8002eb8 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8002ea6:	b00f      	add	sp, #60	; 0x3c
 8002ea8:	bd30      	pop	{r4, r5, pc}
 8002eaa:	bf00      	nop
 8002eac:	24005ae0 	.word	0x24005ae0
 8002eb0:	0802608c 	.word	0x0802608c
 8002eb4:	080264f0 	.word	0x080264f0
 8002eb8:	24005ae4 	.word	0x24005ae4
 8002ebc:	08026590 	.word	0x08026590
 8002ec0:	08002e49 	.word	0x08002e49

08002ec4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002ec4:	4770      	bx	lr
	...

08002ec8 <_Z23getFont_verdana_40_4bppv>:
{
 8002ec8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002eca:	4d16      	ldr	r5, [pc, #88]	; (8002f24 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8002ecc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002ece:	782c      	ldrb	r4, [r5, #0]
 8002ed0:	f3bf 8f5b 	dmb	ish
 8002ed4:	f014 0401 	ands.w	r4, r4, #1
 8002ed8:	d120      	bne.n	8002f1c <_Z23getFont_verdana_40_4bppv+0x54>
 8002eda:	4628      	mov	r0, r5
 8002edc:	f01b f96d 	bl	801e1ba <__cxa_guard_acquire>
 8002ee0:	b1e0      	cbz	r0, 8002f1c <_Z23getFont_verdana_40_4bppv+0x54>
 8002ee2:	233f      	movs	r3, #63	; 0x3f
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4910      	ldr	r1, [pc, #64]	; (8002f28 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eea:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <_Z23getFont_verdana_40_4bppv+0x64>)
 8002eec:	4810      	ldr	r0, [pc, #64]	; (8002f30 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002eee:	9308      	str	r3, [sp, #32]
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002ef2:	940a      	str	r4, [sp, #40]	; 0x28
 8002ef4:	9405      	str	r4, [sp, #20]
 8002ef6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8002efa:	2304      	movs	r3, #4
 8002efc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8002f00:	2328      	movs	r3, #40	; 0x28
 8002f02:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8002f0c:	f7ff fe40 	bl	8002b90 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002f10:	4809      	ldr	r0, [pc, #36]	; (8002f38 <_Z23getFont_verdana_40_4bppv+0x70>)
 8002f12:	f01b ff95 	bl	801ee40 <atexit>
 8002f16:	4628      	mov	r0, r5
 8002f18:	f01b f95b 	bl	801e1d2 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002f1c:	4804      	ldr	r0, [pc, #16]	; (8002f30 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002f1e:	b00f      	add	sp, #60	; 0x3c
 8002f20:	bd30      	pop	{r4, r5, pc}
 8002f22:	bf00      	nop
 8002f24:	24005b10 	.word	0x24005b10
 8002f28:	0802641c 	.word	0x0802641c
 8002f2c:	08026584 	.word	0x08026584
 8002f30:	24005b14 	.word	0x24005b14
 8002f34:	08026594 	.word	0x08026594
 8002f38:	08002ec5 	.word	0x08002ec5

08002f3c <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	4770      	bx	lr

08002f40 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002f40:	2000      	movs	r0, #0
 8002f42:	4770      	bx	lr

08002f44 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002f44:	b40e      	push	{r1, r2, r3}
 8002f46:	b503      	push	{r0, r1, lr}
 8002f48:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002f4a:	2100      	movs	r1, #0
{
 8002f4c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002f50:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002f52:	f010 fabb 	bl	80134cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002f56:	b002      	add	sp, #8
 8002f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f5c:	b003      	add	sp, #12
 8002f5e:	4770      	bx	lr

08002f60 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002f60:	b40c      	push	{r2, r3}
 8002f62:	b507      	push	{r0, r1, r2, lr}
 8002f64:	ab04      	add	r3, sp, #16
 8002f66:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002f6a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002f6c:	f010 faae 	bl	80134cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002f70:	b003      	add	sp, #12
 8002f72:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f76:	b002      	add	sp, #8
 8002f78:	4770      	bx	lr
	...

08002f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002f7c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002f7e:	b510      	push	{r4, lr}
 8002f80:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002f82:	b373      	cbz	r3, 8002fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002f84:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002f86:	b92b      	cbnz	r3, 8002f94 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002f8a:	21c5      	movs	r1, #197	; 0xc5
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002f8e:	4819      	ldr	r0, [pc, #100]	; (8002ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002f90:	f01b ff38 	bl	801ee04 <__assert_func>
            return buffer[pos];
 8002f94:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002f96:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f9a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002f9c:	b30b      	cbz	r3, 8002fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002f9e:	f011 fdf5 	bl	8014b8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002fa2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d803      	bhi.n	8002fb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002faa:	21cb      	movs	r1, #203	; 0xcb
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002fae:	e7ee      	b.n	8002f8e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002fb0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002fb2:	f640 103f 	movw	r0, #2367	; 0x93f
 8002fb6:	1c53      	adds	r3, r2, #1
 8002fb8:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	bf88      	it	hi
 8002fc0:	f1a3 010a 	subhi.w	r1, r3, #10
 8002fc4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002fc8:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002fca:	4281      	cmp	r1, r0
 8002fcc:	d109      	bne.n	8002fe2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002fce:	2b0a      	cmp	r3, #10
 8002fd0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002fd4:	bf28      	it	cs
 8002fd6:	2300      	movcs	r3, #0
            return buffer[pos];
 8002fd8:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002fda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002fde:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002fe0:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002fe2:	4620      	mov	r0, r4
}
 8002fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002fe8:	f011 bcd2 	b.w	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002fec:	08021fa0 	.word	0x08021fa0
 8002ff0:	08021fa9 	.word	0x08021fa9
 8002ff4:	08022054 	.word	0x08022054
 8002ff8:	080220ac 	.word	0x080220ac
 8002ffc:	080220ba 	.word	0x080220ba

08003000 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8003000:	f011 bc8f 	b.w	8014922 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08003004 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003004:	b510      	push	{r4, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	ac02      	add	r4, sp, #8
 800300a:	e884 0006 	stmia.w	r4, {r1, r2}
 800300e:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003010:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003012:	4621      	mov	r1, r4
    va_start(pArg, format);
 8003014:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003016:	9301      	str	r3, [sp, #4]
 8003018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	9b08      	ldr	r3, [sp, #32]
 800301e:	f00e ff3f 	bl	8011ea0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003022:	b006      	add	sp, #24
 8003024:	bd10      	pop	{r4, pc}
	...

08003028 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003028:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800302a:	bb18      	cbnz	r0, 8003074 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800302e:	4813      	ldr	r0, [pc, #76]	; (800307c <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4913      	ldr	r1, [pc, #76]	; (8003080 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003034:	b1b3      	cbz	r3, 8003064 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003036:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003038:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800303a:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800303c:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800303e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	441a      	add	r2, r3
 8003044:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003048:	2200      	movs	r2, #0
 800304a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800304c:	f000 f838 	bl	80030c0 <_ZN17TypedTextDatabase8getFontsEv>
 8003050:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8003052:	f000 f833 	bl	80030bc <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003058:	601c      	str	r4, [r3, #0]
        fonts = f;
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 800305c:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003060:	8018      	strh	r0, [r3, #0]
    }
}
 8003062:	e007      	b.n	8003074 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8003066:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800306a:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800306e:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003070:	2c00      	cmp	r4, #0
 8003072:	d1e8      	bne.n	8003046 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8003074:	bd38      	pop	{r3, r4, r5, pc}
 8003076:	bf00      	nop
 8003078:	24005b40 	.word	0x24005b40
 800307c:	24005b44 	.word	0x24005b44
 8003080:	24005b48 	.word	0x24005b48
 8003084:	24005b4c 	.word	0x24005b4c
 8003088:	2400f5e8 	.word	0x2400f5e8
 800308c:	2400f5f0 	.word	0x2400f5f0
 8003090:	2400f5ec 	.word	0x2400f5ec
 8003094:	90177034 	.word	0x90177034
 8003098:	90177000 	.word	0x90177000
 800309c:	90177070 	.word	0x90177070

080030a0 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 80030aa:	681b      	ldr	r3, [r3, #0]
}
 80030ac:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	24005b48 	.word	0x24005b48
 80030b8:	24005b44 	.word	0x24005b44

080030bc <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80030bc:	200d      	movs	r0, #13
 80030be:	4770      	bx	lr

080030c0 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80030c0:	4800      	ldr	r0, [pc, #0]	; (80030c4 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80030c2:	4770      	bx	lr
 80030c4:	24005b50 	.word	0x24005b50

080030c8 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80030c8:	b510      	push	{r4, lr}
};
 80030ca:	4c07      	ldr	r4, [pc, #28]	; (80030e8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 80030cc:	f7ff febe 	bl	8002e4c <_Z23getFont_verdana_16_4bppv>
};
 80030d0:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80030d2:	f7ff fef9 	bl	8002ec8 <_Z23getFont_verdana_40_4bppv>
};
 80030d6:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_12_4bpp()),
 80030d8:	f7ff fe3c 	bl	8002d54 <_Z23getFont_verdana_12_4bppv>
};
 80030dc:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_14_4bpp())
 80030de:	f7ff fe77 	bl	8002dd0 <_Z23getFont_verdana_14_4bppv>
};
 80030e2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	24005b50 	.word	0x24005b50

080030ec <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80030ec:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030ee:	4770      	bx	lr

080030f0 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 80030f0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030f2:	4770      	bx	lr

080030f4 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 80030f4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80030f6:	4770      	bx	lr

080030f8 <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80030f8:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 80030fc:	4770      	bx	lr

080030fe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 80030fe:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003100:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8003102:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003108:	4362      	muls	r2, r4
 800310a:	4361      	muls	r1, r4
    }
 800310c:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8003110:	4718      	bx	r3

08003112 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8003112:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8003116:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800311c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8003120:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8003124:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	db17      	blt.n	800315e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 800312e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003132:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003136:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800313a:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 800313e:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8003142:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	db1c      	blt.n	8003186 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 800314c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003150:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8003154:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003158:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800315c:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800315e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003162:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8003166:	ee17 2a10 	vmov	r2, s14
 800316a:	1e51      	subs	r1, r2, #1
 800316c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003170:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8003174:	ee30 0a26 	vadd.f32	s0, s0, s13
 8003178:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800317c:	ee10 2a10 	vmov	r2, s0
 8003180:	440a      	add	r2, r1
 8003182:	4611      	mov	r1, r2
 8003184:	e7db      	b.n	800313e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8003186:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800318a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800318e:	ee17 2a90 	vmov	r2, s15
 8003192:	3a01      	subs	r2, #1
 8003194:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8003198:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800319c:	ee70 0a87 	vadd.f32	s1, s1, s14
 80031a0:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80031a4:	ee10 ca90 	vmov	ip, s1
 80031a8:	4494      	add	ip, r2
 80031aa:	4662      	mov	r2, ip
 80031ac:	e7d6      	b.n	800315c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

080031ae <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 80031ae:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80031b0:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80031b2:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80031b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031b8:	4362      	muls	r2, r4
    }
 80031ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 80031be:	4718      	bx	r3

080031c0 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 80031c0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80031c4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80031c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80031ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 80031ce:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80031d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	db08      	blt.n	80031ee <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 80031dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80031e0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80031e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80031e8:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 80031ec:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80031ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80031f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f6:	ee17 2a90 	vmov	r2, s15
 80031fa:	3a01      	subs	r2, #1
 80031fc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003200:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003204:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003208:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800320c:	ee10 ca10 	vmov	ip, s0
 8003210:	4494      	add	ip, r2
 8003212:	4662      	mov	r2, ip
 8003214:	e7ea      	b.n	80031ec <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08003216 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8003216:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8003218:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 800321a:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800321c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003220:	4362      	muls	r2, r4
 8003222:	4361      	muls	r1, r4
    }
 8003224:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8003228:	4718      	bx	r3

0800322a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 800322a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800322e:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8003230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003234:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8003238:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 800323c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	db17      	blt.n	8003276 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8003246:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800324a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800324e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8003252:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8003256:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 800325a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	db1c      	blt.n	800329e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8003264:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003268:	ee70 0aa7 	vadd.f32	s1, s1, s15
 800326c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8003270:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8003274:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003276:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800327a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800327e:	ee17 2a10 	vmov	r2, s14
 8003282:	1e51      	subs	r1, r2, #1
 8003284:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003288:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800328c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8003290:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003294:	ee10 2a10 	vmov	r2, s0
 8003298:	440a      	add	r2, r1
 800329a:	4611      	mov	r1, r2
 800329c:	e7db      	b.n	8003256 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 800329e:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80032a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a6:	ee17 2a90 	vmov	r2, s15
 80032aa:	3a01      	subs	r2, #1
 80032ac:	ee70 0ac7 	vsub.f32	s1, s1, s14
 80032b0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80032b4:	ee70 0a87 	vadd.f32	s1, s1, s14
 80032b8:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 80032bc:	ee10 ca90 	vmov	ip, s1
 80032c0:	4494      	add	ip, r2
 80032c2:	4662      	mov	r2, ip
 80032c4:	e7d6      	b.n	8003274 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

080032c6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 80032c6:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80032c8:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 80032ca:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80032cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032d0:	4362      	muls	r2, r4
    }
 80032d2:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 80032d6:	4718      	bx	r3

080032d8 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 80032d8:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80032dc:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 80032de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80032e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 80032e6:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 80032ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80032ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f2:	db08      	blt.n	8003306 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 80032f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80032f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80032fc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003300:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003304:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8003306:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800330a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800330e:	ee17 2a90 	vmov	r2, s15
 8003312:	3a01      	subs	r2, #1
 8003314:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003318:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800331c:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003320:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003324:	ee10 ca10 	vmov	ip, s0
 8003328:	4494      	add	ip, r2
 800332a:	4662      	mov	r2, ip
 800332c:	e7ea      	b.n	8003304 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

0800332e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 800332e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8003332:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8003334:	2b00      	cmp	r3, #0
 8003336:	db07      	blt.n	8003348 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003338:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800333c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003340:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003344:	1040      	asrs	r0, r0, #1
 8003346:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003348:	f06f 0001 	mvn.w	r0, #1
 800334c:	fb00 2003 	mla	r0, r0, r3, r2
 8003350:	3801      	subs	r0, #1
 8003352:	fb90 f0f2 	sdiv	r0, r0, r2
 8003356:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800335a:	1040      	asrs	r0, r0, #1
 800335c:	4240      	negs	r0, r0
    }
 800335e:	4770      	bx	lr

08003360 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8003360:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8003364:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003368:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800336c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003370:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003374:	4770      	bx	lr

08003376 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8003376:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 800337a:	4770      	bx	lr

0800337c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 800337c:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8003380:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8003382:	2b00      	cmp	r3, #0
 8003384:	db07      	blt.n	8003396 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003386:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800338a:	fb93 f0f2 	sdiv	r0, r3, r2
 800338e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003392:	1040      	asrs	r0, r0, #1
 8003394:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003396:	f06f 0001 	mvn.w	r0, #1
 800339a:	fb00 2003 	mla	r0, r0, r3, r2
 800339e:	3801      	subs	r0, #1
 80033a0:	fb90 f0f2 	sdiv	r0, r0, r2
 80033a4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80033a8:	1040      	asrs	r0, r0, #1
 80033aa:	4240      	negs	r0, r0
    }
 80033ac:	4770      	bx	lr

080033ae <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 80033ae:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 80033b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80033b6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80033ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80033be:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80033c2:	4770      	bx	lr

080033c4 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80033c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 80033c8:	4770      	bx	lr

080033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80033ca:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 80033ce:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	db07      	blt.n	80033e4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80033d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80033d8:	fb93 f0f2 	sdiv	r0, r3, r2
 80033dc:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80033e0:	1040      	asrs	r0, r0, #1
 80033e2:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80033e4:	f06f 0001 	mvn.w	r0, #1
 80033e8:	fb00 2003 	mla	r0, r0, r3, r2
 80033ec:	3801      	subs	r0, #1
 80033ee:	fb90 f0f2 	sdiv	r0, r0, r2
 80033f2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80033f6:	1040      	asrs	r0, r0, #1
 80033f8:	4240      	negs	r0, r0
    }
 80033fa:	4770      	bx	lr

080033fc <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 80033fc:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8003400:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003404:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8003408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800340c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003410:	4770      	bx	lr

08003412 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8003412:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8003416:	4770      	bx	lr

08003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8003418:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 800341c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 800341e:	2b00      	cmp	r3, #0
 8003420:	db07      	blt.n	8003432 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003422:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003426:	fb93 f0f2 	sdiv	r0, r3, r2
 800342a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800342e:	1040      	asrs	r0, r0, #1
 8003430:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003432:	f06f 0001 	mvn.w	r0, #1
 8003436:	fb00 2003 	mla	r0, r0, r3, r2
 800343a:	3801      	subs	r0, #1
 800343c:	fb90 f0f2 	sdiv	r0, r0, r2
 8003440:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003444:	1040      	asrs	r0, r0, #1
 8003446:	4240      	negs	r0, r0
    }
 8003448:	4770      	bx	lr

0800344a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 800344a:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 800344e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003452:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8003456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800345a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800345e:	4770      	bx	lr

08003460 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8003460:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8003464:	4770      	bx	lr

08003466 <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 8003466:	4610      	mov	r0, r2
 8003468:	4770      	bx	lr

0800346a <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 800346a:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800346e:	6803      	ldr	r3, [r0, #0]
 8003470:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003474:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003478:	4718      	bx	r3

0800347a <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 800347a:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 800347e:	6803      	ldr	r3, [r0, #0]
 8003480:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003484:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8003488:	4718      	bx	r3

0800348a <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 800348a:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 800348c:	4770      	bx	lr

0800348e <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 800348e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003490:	4770      	bx	lr

08003492 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 8003492:	2001      	movs	r0, #1
 8003494:	4770      	bx	lr

08003496 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 8003496:	4770      	bx	lr

08003498 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003498:	4770      	bx	lr

0800349a <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 800349a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800349c:	b118      	cbz	r0, 80034a6 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800349e:	6803      	ldr	r3, [r0, #0]
 80034a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a4:	4718      	bx	r3
    }
 80034a6:	4770      	bx	lr

080034a8 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034a8:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80034ac:	b530      	push	{r4, r5, lr}
        return topPadding;
 80034ae:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 80034b2:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80034b6:	4421      	add	r1, r4
 80034b8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80034bc:	8044      	strh	r4, [r0, #2]
 80034be:	1a52      	subs	r2, r2, r1
 80034c0:	2100      	movs	r1, #0
 80034c2:	8085      	strh	r5, [r0, #4]
 80034c4:	8001      	strh	r1, [r0, #0]
 80034c6:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 80034c8:	bd30      	pop	{r4, r5, pc}

080034ca <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80034ca:	b510      	push	{r4, lr}
 80034cc:	8042      	strh	r2, [r0, #2]
 80034ce:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80034d2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80034d6:	8004      	strh	r4, [r0, #0]
 80034d8:	8082      	strh	r2, [r0, #4]
 80034da:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 80034dc:	bd10      	pop	{r4, pc}

080034de <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 80034de:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80034e0:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 80034e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034e6:	4718      	bx	r3

080034e8 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 80034e8:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80034ea:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034f0:	4718      	bx	r3

080034f2 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80034f2:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80034f6:	4770      	bx	lr

080034f8 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80034f8:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80034fc:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003500:	4403      	add	r3, r0
 8003502:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003506:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003508:	b200      	sxth	r0, r0
 800350a:	4770      	bx	lr

0800350c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800350c:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003510:	4770      	bx	lr

08003512 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003512:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003516:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 800351a:	4403      	add	r3, r0
 800351c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003520:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003522:	b200      	sxth	r0, r0
 8003524:	4770      	bx	lr

08003526 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8003526:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003528:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800352a:	4611      	mov	r1, r2
 800352c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003530:	4718      	bx	r3

08003532 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 8003532:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003536:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8003538:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800353c:	186c      	adds	r4, r5, r1
 800353e:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 8003542:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 8003546:	1b09      	subs	r1, r1, r4
 8003548:	2400      	movs	r4, #0
 800354a:	8005      	strh	r5, [r0, #0]
 800354c:	8044      	strh	r4, [r0, #2]
 800354e:	8081      	strh	r1, [r0, #4]
 8003550:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 8003552:	bd30      	pop	{r4, r5, pc}

08003554 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 8003554:	8002      	strh	r2, [r0, #0]
 8003556:	8083      	strh	r3, [r0, #4]
 8003558:	f9bd 2000 	ldrsh.w	r2, [sp]
 800355c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003560:	8042      	strh	r2, [r0, #2]
 8003562:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 8003564:	4770      	bx	lr

08003566 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 8003566:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003568:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 800356a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800356e:	4718      	bx	r3

08003570 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003570:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 8003572:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 8003574:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003578:	4718      	bx	r3

0800357a <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800357a:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 800357e:	4770      	bx	lr

08003580 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003580:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003584:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003588:	4403      	add	r3, r0
 800358a:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 800358e:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003590:	b200      	sxth	r0, r0
 8003592:	4770      	bx	lr

08003594 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003594:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003598:	4770      	bx	lr

0800359a <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800359a:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800359e:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80035a2:	4403      	add	r3, r0
 80035a4:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80035a8:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80035aa:	b200      	sxth	r0, r0
 80035ac:	4770      	bx	lr

080035ae <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 80035ae:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80035b0:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 80035b2:	4611      	mov	r1, r2
 80035b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80035b8:	4718      	bx	r3

080035ba <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80035ba:	b530      	push	{r4, r5, lr}
 80035bc:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80035be:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80035c0:	4604      	mov	r4, r0
        rect.width = width;
 80035c2:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80035c4:	466d      	mov	r5, sp
 80035c6:	4601      	mov	r1, r0
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	343c      	adds	r4, #60	; 0x3c
 80035ce:	4628      	mov	r0, r5
 80035d0:	4798      	blx	r3
 80035d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80035da:	b005      	add	sp, #20
 80035dc:	bd30      	pop	{r4, r5, pc}

080035de <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80035de:	b530      	push	{r4, r5, lr}
 80035e0:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80035e2:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80035e4:	4604      	mov	r4, r0
        rect.height = height;
 80035e6:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80035e8:	466d      	mov	r5, sp
 80035ea:	4601      	mov	r1, r0
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	343c      	adds	r4, #60	; 0x3c
 80035f2:	4628      	mov	r0, r5
 80035f4:	4798      	blx	r3
 80035f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80035fe:	b005      	add	sp, #20
 8003600:	bd30      	pop	{r4, r5, pc}

08003602 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003602:	2200      	movs	r2, #0
 8003604:	8002      	strh	r2, [r0, #0]
 8003606:	8042      	strh	r2, [r0, #2]
 8003608:	8082      	strh	r2, [r0, #4]
 800360a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800360c:	4770      	bx	lr

0800360e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800360e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8003612:	4770      	bx	lr

08003614 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003614:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003616:	b570      	push	{r4, r5, r6, lr}
 8003618:	4604      	mov	r4, r0
        setX(x);
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800361c:	4615      	mov	r5, r2
        setX(x);
 800361e:	4798      	blx	r3
        setBaselineY(baselineY);
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8003628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800362c:	4718      	bx	r3

0800362e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800362e:	2000      	movs	r0, #0
 8003630:	4770      	bx	lr

08003632 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8003632:	2200      	movs	r2, #0
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 8003638:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800363a:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 800363e:	4770      	bx	lr

08003640 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003640:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003642:	4770      	bx	lr

08003644 <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8003644:	b082      	sub	sp, #8
 8003646:	ab02      	add	r3, sp, #8
 8003648:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 800364c:	b002      	add	sp, #8
 800364e:	4770      	bx	lr

08003650 <_ZN15customGraphBase13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
    virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8003650:	b082      	sub	sp, #8
 8003652:	ab02      	add	r3, sp, #8
 8003654:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 8003658:	b002      	add	sp, #8
 800365a:	4770      	bx	lr

0800365c <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 800365c:	4770      	bx	lr

0800365e <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 800365e:	4770      	bx	lr

08003660 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003660:	4770      	bx	lr

08003662 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
 8003662:	4770      	bx	lr

08003664 <_ZN8touchgfx5GraphILs500EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 8003664:	4770      	bx	lr

08003666 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003666:	4770      	bx	lr

08003668 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8003668:	4770      	bx	lr

0800366a <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800366a:	4770      	bx	lr

0800366c <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 800366c:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 800366e:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 8003670:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 8003672:	68c4      	ldr	r4, [r0, #12]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	1066      	asrs	r6, r4, #1
 8003678:	eb05 0064 	add.w	r0, r5, r4, asr #1
 800367c:	07e4      	lsls	r4, r4, #31
 800367e:	bf44      	itt	mi
 8003680:	59ac      	ldrmi	r4, [r5, r6]
 8003682:	58e3      	ldrmi	r3, [r4, r3]
    }
 8003684:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8003686:	4718      	bx	r3

08003688 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8003688:	6843      	ldr	r3, [r0, #4]
 800368a:	b12b      	cbz	r3, 8003698 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x10>
 800368c:	6883      	ldr	r3, [r0, #8]
 800368e:	b92b      	cbnz	r3, 800369c <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x14>
 8003690:	68c0      	ldr	r0, [r0, #12]
 8003692:	f000 0001 	and.w	r0, r0, #1
 8003696:	4770      	bx	lr
 8003698:	4618      	mov	r0, r3
 800369a:	4770      	bx	lr
 800369c:	2001      	movs	r0, #1
    }
 800369e:	4770      	bx	lr

080036a0 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80036a0:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80036a2:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80036a4:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80036a6:	68c4      	ldr	r4, [r0, #12]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	1066      	asrs	r6, r4, #1
 80036ac:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80036b0:	07e4      	lsls	r4, r4, #31
 80036b2:	bf44      	itt	mi
 80036b4:	59ac      	ldrmi	r4, [r5, r6]
 80036b6:	58e3      	ldrmi	r3, [r4, r3]
    }
 80036b8:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80036ba:	4718      	bx	r3

080036bc <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80036bc:	6843      	ldr	r3, [r0, #4]
 80036be:	b12b      	cbz	r3, 80036cc <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 80036c0:	6883      	ldr	r3, [r0, #8]
 80036c2:	b92b      	cbnz	r3, 80036d0 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 80036c4:	68c0      	ldr	r0, [r0, #12]
 80036c6:	f000 0001 	and.w	r0, r0, #1
 80036ca:	4770      	bx	lr
 80036cc:	4618      	mov	r0, r3
 80036ce:	4770      	bx	lr
 80036d0:	2001      	movs	r0, #1
    }
 80036d2:	4770      	bx	lr

080036d4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80036d4:	b510      	push	{r4, lr}
 80036d6:	4604      	mov	r4, r0
 80036d8:	214c      	movs	r1, #76	; 0x4c
 80036da:	f01a fd6c 	bl	801e1b6 <_ZdlPvj>
 80036de:	4620      	mov	r0, r4
 80036e0:	bd10      	pop	{r4, pc}

080036e2 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80036e2:	b510      	push	{r4, lr}
 80036e4:	4604      	mov	r4, r0
 80036e6:	2140      	movs	r1, #64	; 0x40
 80036e8:	f01a fd65 	bl	801e1b6 <_ZdlPvj>
 80036ec:	4620      	mov	r0, r4
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80036f0:	b510      	push	{r4, lr}
 80036f2:	4604      	mov	r4, r0
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	f01a fd5e 	bl	801e1b6 <_ZdlPvj>
 80036fa:	4620      	mov	r0, r4
 80036fc:	bd10      	pop	{r4, pc}

080036fe <_ZN8touchgfx5GraphILs500EED0Ev>:
 80036fe:	b510      	push	{r4, lr}
 8003700:	4604      	mov	r4, r0
 8003702:	f241 01e4 	movw	r1, #4324	; 0x10e4
 8003706:	f01a fd56 	bl	801e1b6 <_ZdlPvj>
 800370a:	4620      	mov	r0, r4
 800370c:	bd10      	pop	{r4, pc}

0800370e <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800370e:	b510      	push	{r4, lr}
 8003710:	4604      	mov	r4, r0
 8003712:	2110      	movs	r1, #16
 8003714:	f01a fd4f 	bl	801e1b6 <_ZdlPvj>
 8003718:	4620      	mov	r0, r4
 800371a:	bd10      	pop	{r4, pc}

0800371c <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
 800371c:	b510      	push	{r4, lr}
 800371e:	4604      	mov	r4, r0
 8003720:	2110      	movs	r1, #16
 8003722:	f01a fd48 	bl	801e1b6 <_ZdlPvj>
 8003726:	4620      	mov	r0, r4
 8003728:	bd10      	pop	{r4, pc}

0800372a <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 800372a:	b510      	push	{r4, lr}
 800372c:	4604      	mov	r4, r0
}
 800372e:	f241 510c 	movw	r1, #5388	; 0x150c
 8003732:	f01a fd40 	bl	801e1b6 <_ZdlPvj>
 8003736:	4620      	mov	r0, r4
 8003738:	bd10      	pop	{r4, pc}

0800373a <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800373a:	b513      	push	{r0, r1, r4, lr}
 800373c:	4603      	mov	r3, r0
 800373e:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003740:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003744:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003746:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374c:	4798      	blx	r3
 800374e:	9901      	ldr	r1, [sp, #4]
 8003750:	4602      	mov	r2, r0
 8003752:	4620      	mov	r0, r4
    }
 8003754:	b002      	add	sp, #8
 8003756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 800375a:	f00b baf1 	b.w	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800375e <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800375e:	b513      	push	{r0, r1, r4, lr}
 8003760:	4603      	mov	r3, r0
 8003762:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003764:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003768:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 800376a:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800376c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003770:	4798      	blx	r3
 8003772:	9901      	ldr	r1, [sp, #4]
 8003774:	4602      	mov	r2, r0
 8003776:	4620      	mov	r0, r4
    }
 8003778:	b002      	add	sp, #8
 800377a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800377e:	f00b badf 	b.w	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

08003782 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8003782:	b508      	push	{r3, lr}
        if (alpha > 0)
 8003784:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003788:	b10b      	cbz	r3, 800378e <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 800378a:	f7fe ffb3 	bl	80026f4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800378e:	bd08      	pop	{r3, pc}

08003790 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 8003790:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 8003792:	f7fe ffaf 	bl	80026f4 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003796:	bd08      	pop	{r3, pc}

08003798 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 8003798:	b410      	push	{r4}
    if (&src == &graph1)
 800379a:	f100 0458 	add.w	r4, r0, #88	; 0x58
 800379e:	428c      	cmp	r4, r1
 80037a0:	d106      	bne.n	80037b0 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 80037a2:	6803      	ldr	r3, [r0, #0]
    }
}
 80037a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 80037a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037ac:	ca06      	ldmia	r2, {r1, r2}
 80037ae:	4718      	bx	r3
}
 80037b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void customGraphBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 80037b6:	b410      	push	{r4}
    if (&src == &graph1)
 80037b8:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80037bc:	428c      	cmp	r4, r1
 80037be:	d106      	bne.n	80037ce <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x18>
    {
        //Interaction2
        //When graph1 clicked call virtual function
        //Call graph1clicked
        graph1clicked(value);
 80037c0:	6803      	ldr	r3, [r0, #0]
    }
}
 80037c2:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1clicked(value);
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	ca06      	ldmia	r2, {r1, r2}
 80037cc:	4718      	bx	r3
}
 80037ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80037d4:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80037d6:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 80037d8:	db03      	blt.n	80037e2 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 80037da:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 80037de:	428b      	cmp	r3, r1
 80037e0:	dc06      	bgt.n	80037f0 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 80037e4:	f240 61f5 	movw	r1, #1781	; 0x6f5
 80037e8:	4a05      	ldr	r2, [pc, #20]	; (8003800 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 80037ea:	4806      	ldr	r0, [pc, #24]	; (8003804 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 80037ec:	f01b fb0a 	bl	801ee04 <__assert_func>
        return yValues[index];
 80037f0:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 80037f4:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80037f8:	bd08      	pop	{r3, pc}
 80037fa:	bf00      	nop
 80037fc:	0802218c 	.word	0x0802218c
 8003800:	080221af 	.word	0x080221af
 8003804:	080221fd 	.word	0x080221fd

08003808 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003808:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 800380a:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 800380c:	db03      	blt.n	8003816 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 800380e:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003812:	428b      	cmp	r3, r1
 8003814:	dc06      	bgt.n	8003824 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 8003818:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800381c:	4a05      	ldr	r2, [pc, #20]	; (8003834 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 800381e:	4806      	ldr	r0, [pc, #24]	; (8003838 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003820:	f01b faf0 	bl	801ee04 <__assert_func>
        return xValues[index];
 8003824:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 8003828:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800382c:	bd08      	pop	{r3, pc}
 800382e:	bf00      	nop
 8003830:	0802218c 	.word	0x0802218c
 8003834:	08022268 	.word	0x08022268
 8003838:	080221fd 	.word	0x080221fd

0800383c <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800383c:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 800383e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003840:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 8003842:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003844:	4b11      	ldr	r3, [pc, #68]	; (800388c <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003846:	b28d      	uxth	r5, r1
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b92b      	cbnz	r3, 8003858 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 800384c:	4b10      	ldr	r3, [pc, #64]	; (8003890 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 800384e:	216c      	movs	r1, #108	; 0x6c
 8003850:	4a10      	ldr	r2, [pc, #64]	; (8003894 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003852:	4811      	ldr	r0, [pc, #68]	; (8003898 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8003854:	f01b fad6 	bl	801ee04 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003858:	4910      	ldr	r1, [pc, #64]	; (800389c <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800385a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800385c:	8809      	ldrh	r1, [r1, #0]
 800385e:	4291      	cmp	r1, r2
 8003860:	d803      	bhi.n	800386a <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8003862:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8003864:	216d      	movs	r1, #109	; 0x6d
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003868:	e7f3      	b.n	8003852 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800386a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800386e:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003876:	6803      	ldr	r3, [r0, #0]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4798      	blx	r3
 800387c:	1a28      	subs	r0, r5, r0
 800387e:	4633      	mov	r3, r6
 8003880:	b201      	sxth	r1, r0
 8003882:	4620      	mov	r0, r4
    }
 8003884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8003888:	4718      	bx	r3
 800388a:	bf00      	nop
 800388c:	2400f5e8 	.word	0x2400f5e8
 8003890:	080222b6 	.word	0x080222b6
 8003894:	080222f8 	.word	0x080222f8
 8003898:	08022333 	.word	0x08022333
 800389c:	2400f5ec 	.word	0x2400f5ec
 80038a0:	08022388 	.word	0x08022388
 80038a4:	2400f5f0 	.word	0x2400f5f0

080038a8 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80038aa:	6002      	str	r2, [r0, #0]
 80038ac:	2200      	movs	r2, #0
 80038ae:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80038b2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80038b6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80038ba:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80038be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c2:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	08023158 	.word	0x08023158

080038cc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4604      	mov	r4, r0
 80038d0:	461d      	mov	r5, r3
 80038d2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80038d6:	f7ff f9b0 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	4629      	mov	r1, r5
 80038de:	4620      	mov	r0, r4
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4798      	blx	r3
        setHeight(height);
 80038e4:	6823      	ldr	r3, [r4, #0]
 80038e6:	4631      	mov	r1, r6
 80038e8:	4620      	mov	r0, r4
 80038ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 80038ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80038f0:	4718      	bx	r3

080038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80038f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80038f4:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80038f6:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80038f8:	f010 f8bb 	bl	8013a72 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80038fc:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80038fe:	462a      	mov	r2, r5
 8003900:	9901      	ldr	r1, [sp, #4]
 8003902:	ea4f 1440 	mov.w	r4, r0, lsl #5
 8003906:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 800390a:	db04      	blt.n	8003916 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800390c:	f010 f8d0 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8003910:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 8003912:	b003      	add	sp, #12
 8003914:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 8003916:	f010 f8cb 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 800391a:	1a20      	subs	r0, r4, r0
 800391c:	e7f9      	b.n	8003912 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

0800391e <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800391e:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003920:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003924:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003926:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 800392a:	1963      	adds	r3, r4, r5
 800392c:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 8003930:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8003932:	b22d      	sxth	r5, r5
 8003934:	442c      	add	r4, r5
 8003936:	1e69      	subs	r1, r5, #1
 8003938:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 800393c:	3c01      	subs	r4, #1
 800393e:	1ad2      	subs	r2, r2, r3
 8003940:	1af0      	subs	r0, r6, r3
 8003942:	f7ff ffd6 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 8003946:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800394a:	bd70      	pop	{r4, r5, r6, pc}

0800394c <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4604      	mov	r4, r0
 8003950:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003952:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8003956:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800395a:	440b      	add	r3, r1
 800395c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8003960:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8003962:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 8003966:	b209      	sxth	r1, r1
 8003968:	1b52      	subs	r2, r2, r5
 800396a:	1b40      	subs	r0, r0, r5
 800396c:	3901      	subs	r1, #1
 800396e:	f7ff ffc0 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003972:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8003976:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800397a:	bd38      	pop	{r3, r4, r5, pc}

0800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 800397c:	b510      	push	{r4, lr}
 800397e:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003980:	2226      	movs	r2, #38	; 0x26
 8003982:	2100      	movs	r1, #0
 8003984:	f01b fcba 	bl	801f2fc <memset>
class Widget : public Drawable
 8003988:	4620      	mov	r0, r4
 800398a:	f7ff ff8d 	bl	80038a8 <_ZN8touchgfx8DrawableC1Ev>
        : typedTextId(id)
 800398e:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8003990:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8003994:	4620      	mov	r0, r4
 8003996:	62a3      	str	r3, [r4, #40]	; 0x28
 8003998:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800399c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 800399e:	2300      	movs	r3, #0
 80039a0:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 80039a4:	4a05      	ldr	r2, [pc, #20]	; (80039bc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 80039a6:	8723      	strh	r3, [r4, #56]	; 0x38
 80039a8:	6022      	str	r2, [r4, #0]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295
 80039ae:	63e3      	str	r3, [r4, #60]	; 0x3c
 80039b0:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 80039b2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 80039b6:	bd10      	pop	{r4, pc}
 80039b8:	08021b4c 	.word	0x08021b4c
 80039bc:	0802257c 	.word	0x0802257c

080039c0 <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 80039c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c4:	4605      	mov	r5, r0
          firstChild(0)
 80039c6:	2600      	movs	r6, #0
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80039c8:	f04f 0801 	mov.w	r8, #1
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 80039cc:	46a9      	mov	r9, r5
 80039ce:	f105 0758 	add.w	r7, r5, #88	; 0x58
        : color(col)
 80039d2:	f505 5480 	add.w	r4, r5, #4096	; 0x1000
 80039d6:	f505 5b9b 	add.w	fp, r5, #4960	; 0x1360
 80039da:	f505 5a9e 	add.w	sl, r5, #5056	; 0x13c0
 80039de:	f10b 0b1c 	add.w	fp, fp, #28
 80039e2:	f10a 0a08 	add.w	sl, sl, #8
customGraphBase::customGraphBase() :
 80039e6:	ed2d 8b04 	vpush	{d8-d9}
 80039ea:	b08f      	sub	sp, #60	; 0x3c
 80039ec:	f7ff ff5c 	bl	80038a8 <_ZN8touchgfx8DrawableC1Ev>
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 80039f0:	4bdc      	ldr	r3, [pc, #880]	; (8003d64 <_ZN15customGraphBaseC1Ev+0x3a4>)
        : Widget(), alpha(255), color(0)
 80039f2:	2226      	movs	r2, #38	; 0x26
 80039f4:	4631      	mov	r1, r6
 80039f6:	62ae      	str	r6, [r5, #40]	; 0x28
 80039f8:	f849 3b2c 	str.w	r3, [r9], #44
 80039fc:	4648      	mov	r0, r9
 80039fe:	f01b fc7d 	bl	801f2fc <memset>
 8003a02:	4648      	mov	r0, r9
 8003a04:	f7ff ff50 	bl	80038a8 <_ZN8touchgfx8DrawableC1Ev>
 8003a08:	4bd7      	ldr	r3, [pc, #860]	; (8003d68 <_ZN15customGraphBaseC1Ev+0x3a8>)
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003a0a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a0e:	4638      	mov	r0, r7
 8003a10:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003a12:	23ff      	movs	r3, #255	; 0xff
 8003a14:	656e      	str	r6, [r5, #84]	; 0x54
 8003a16:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
 8003a1a:	f00b f92d 	bl	800ec78 <_ZN8touchgfx17AbstractDataGraphC1Es>
 8003a1e:	4bd3      	ldr	r3, [pc, #844]	; (8003d6c <_ZN15customGraphBaseC1Ev+0x3ac>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8003a20:	4631      	mov	r1, r6
 8003a22:	f240 12f3 	movw	r2, #499	; 0x1f3
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003a26:	65ab      	str	r3, [r5, #88]	; 0x58
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 8003a28:	f505 73ce 	add.w	r3, r5, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8003a2c:	4638      	mov	r0, r7
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003a2e:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
 8003a32:	f605 136c 	addw	r3, r5, #2412	; 0x96c
 8003a36:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 8003a3a:	f7ff fb60 	bl	80030fe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8003a3e:	4bcc      	ldr	r3, [pc, #816]	; (8003d70 <_ZN15customGraphBaseC1Ev+0x3b0>)
 8003a40:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a42:	f505 5389 	add.w	r3, r5, #4384	; 0x1120
 8003a46:	331c      	adds	r3, #28
        : CanvasWidget()
 8003a48:	4618      	mov	r0, r3
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	f00a fd88 	bl	800e560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003a50:	2201      	movs	r2, #1
 8003a52:	230a      	movs	r3, #10
 8003a54:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
 8003a58:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
 8003a5c:	f8c4 6178 	str.w	r6, [r4, #376]	; 0x178
 8003a60:	e9c4 235b 	strd	r2, r3, [r4, #364]	; 0x16c
class GraphElementGridX : public GraphElementGridBase
 8003a64:	4bc3      	ldr	r3, [pc, #780]	; (8003d74 <_ZN15customGraphBaseC1Ev+0x3b4>)
 8003a66:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 8003a6a:	f505 538b 	add.w	r3, r5, #4448	; 0x1160
 8003a6e:	331c      	adds	r3, #28
        : CanvasWidget()
 8003a70:	4618      	mov	r0, r3
 8003a72:	9304      	str	r3, [sp, #16]
 8003a74:	f00a fd74 	bl	800e560 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	230a      	movs	r3, #10
 8003a7c:	f884 81b4 	strb.w	r8, [r4, #436]	; 0x1b4
 8003a80:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
 8003a84:	f505 5892 	add.w	r8, r5, #4672	; 0x1240
 8003a88:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
 8003a8c:	f108 080c 	add.w	r8, r8, #12
 8003a90:	e9c4 136b 	strd	r1, r3, [r4, #428]	; 0x1ac
class GraphElementGridY : public GraphElementGridBase
 8003a94:	4bb8      	ldr	r3, [pc, #736]	; (8003d78 <_ZN15customGraphBaseC1Ev+0x3b8>)
 8003a96:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
 8003a9a:	f505 538d 	add.w	r3, r5, #4512	; 0x11a0
 8003a9e:	331c      	adds	r3, #28
        : CanvasWidget()
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	9305      	str	r3, [sp, #20]
 8003aa4:	f00a fd5c 	bl	800e560 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f8c4 61e8 	str.w	r6, [r4, #488]	; 0x1e8
 8003aae:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
 8003ab2:	f8a4 61fe 	strh.w	r6, [r4, #510]	; 0x1fe
 8003ab6:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
 8003aba:	e9c4 367b 	strd	r3, r6, [r4, #492]	; 0x1ec
 8003abe:	4baf      	ldr	r3, [pc, #700]	; (8003d7c <_ZN15customGraphBaseC1Ev+0x3bc>)
 8003ac0:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
 8003ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ac8:	f8a4 31f8 	strh.w	r3, [r4, #504]	; 0x1f8
 8003acc:	232e      	movs	r3, #46	; 0x2e
 8003ace:	f8a4 3200 	strh.w	r3, [r4, #512]	; 0x200

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 8003ad2:	4bab      	ldr	r3, [pc, #684]	; (8003d80 <_ZN15customGraphBaseC1Ev+0x3c0>)
 8003ad4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
 8003ad8:	f505 5390 	add.w	r3, r5, #4608	; 0x1200
 8003adc:	3308      	adds	r3, #8
 8003ade:	4618      	mov	r0, r3
 8003ae0:	9306      	str	r3, [sp, #24]
 8003ae2:	f00a fd3d 	bl	800e560 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003ae6:	4ba7      	ldr	r3, [pc, #668]	; (8003d84 <_ZN15customGraphBaseC1Ev+0x3c4>)
 8003ae8:	f04f 0202 	mov.w	r2, #2
 8003aec:	f8c4 3208 	str.w	r3, [r4, #520]	; 0x208
 8003af0:	f505 5391 	add.w	r3, r5, #4640	; 0x1220
 8003af4:	f884 2234 	strb.w	r2, [r4, #564]	; 0x234
 8003af8:	3318      	adds	r3, #24
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003afa:	4618      	mov	r0, r3
 8003afc:	9307      	str	r3, [sp, #28]
 8003afe:	f7fe fe3d 	bl	800277c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003b02:	4ba1      	ldr	r3, [pc, #644]	; (8003d88 <_ZN15customGraphBaseC1Ev+0x3c8>)
 8003b04:	4640      	mov	r0, r8
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003b06:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
 8003b0a:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
 8003b0e:	3324      	adds	r3, #36	; 0x24
 8003b10:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
 8003b14:	f7ff ff32 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b18:	f505 5394 	add.w	r3, r5, #4736	; 0x1280
 8003b1c:	3318      	adds	r3, #24
 8003b1e:	4618      	mov	r0, r3
 8003b20:	ee08 3a10 	vmov	s16, r3
 8003b24:	f7ff ff2a 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b28:	f505 5397 	add.w	r3, r5, #4832	; 0x12e0
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	ee09 3a10 	vmov	s18, r3
 8003b34:	f7ff ff22 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b38:	f505 5399 	add.w	r3, r5, #4896	; 0x1320
 8003b3c:	3310      	adds	r3, #16
 8003b3e:	4618      	mov	r0, r3
 8003b40:	ee08 3a90 	vmov	s17, r3
 8003b44:	f7ff ff1a 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b48:	4658      	mov	r0, fp
 8003b4a:	f7ff ff17 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b4e:	4650      	mov	r0, sl
 8003b50:	f7ff ff14 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8003b54:	f505 53a0 	add.w	r3, r5, #5120	; 0x1400
 8003b58:	3314      	adds	r3, #20
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	ee09 3a90 	vmov	s19, r3
 8003b60:	f7ff ff0c 	bl	800397c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pObject), pmemfun(pmemfun_2)
 8003b64:	4b89      	ldr	r3, [pc, #548]	; (8003d8c <_ZN15customGraphBaseC1Ev+0x3cc>)
 8003b66:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
    box1.setPosition(0, 0, 310, 200);
 8003b6a:	4632      	mov	r2, r6
 8003b6c:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8003b70:	4648      	mov	r0, r9
 8003b72:	4b87      	ldr	r3, [pc, #540]	; (8003d90 <_ZN15customGraphBaseC1Ev+0x3d0>)
 8003b74:	4631      	mov	r1, r6
 8003b76:	f8c4 64f8 	str.w	r6, [r4, #1272]	; 0x4f8
 8003b7a:	f8c4 34f4 	str.w	r3, [r4, #1268]	; 0x4f4
 8003b7e:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <_ZN15customGraphBaseC1Ev+0x3d4>)
 8003b80:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
 8003b84:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
 8003b88:	4b83      	ldr	r3, [pc, #524]	; (8003d98 <_ZN15customGraphBaseC1Ev+0x3d8>)
 8003b8a:	f8c4 6508 	str.w	r6, [r4, #1288]	; 0x508
 8003b8e:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        rect.width = width;
 8003b92:	4b82      	ldr	r3, [pc, #520]	; (8003d9c <_ZN15customGraphBaseC1Ev+0x3dc>)
 8003b94:	60ab      	str	r3, [r5, #8]
 8003b96:	23c8      	movs	r3, #200	; 0xc8
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003b9e:	f7ff fe95 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	4628      	mov	r0, r5
 8003baa:	656b      	str	r3, [r5, #84]	; 0x54
 8003bac:	f009 fa5e 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph1.setPosition(0, 0, 310, 200);
 8003bb0:	23c8      	movs	r3, #200	; 0xc8
 8003bb2:	4638      	mov	r0, r7
 8003bb4:	4632      	mov	r2, r6
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	f44f 739b 	mov.w	r3, #310	; 0x136
        color = newColor;
 8003bbe:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8003db8 <_ZN15customGraphBaseC1Ev+0x3f8>
 8003bc2:	f7ff fe83 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setScaleX(1);
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	4632      	mov	r2, r6
 8003bca:	2101      	movs	r1, #1
 8003bcc:	f00b f8c0 	bl	800ed50 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(10);
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	4632      	mov	r2, r6
 8003bd4:	210a      	movs	r1, #10
 8003bd6:	f00b f8da 	bl	800ed8e <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setGraphAreaMargin(30, 55, 5, 19);
 8003bda:	2313      	movs	r3, #19
 8003bdc:	4638      	mov	r0, r7
 8003bde:	2237      	movs	r2, #55	; 0x37
 8003be0:	211e      	movs	r1, #30
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2305      	movs	r3, #5
 8003be6:	f00a fff8 	bl	800ebda <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 8003bea:	4633      	mov	r3, r6
 8003bec:	4638      	mov	r0, r7
 8003bee:	4632      	mov	r2, r6
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	9600      	str	r6, [sp, #0]
 8003bf4:	f00a ff16 	bl	800ea24 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(0, 60);
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	223c      	movs	r2, #60	; 0x3c
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	f7ff fa7e 	bl	80030fe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(0, 40000);
 8003c02:	4638      	mov	r0, r7
 8003c04:	f649 4240 	movw	r2, #40000	; 0x9c40
 8003c08:	4631      	mov	r1, r6
 8003c0a:	f7ff fb04 	bl	8003216 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    graph1.setDragAction(graphDraggedCallback);
 8003c0e:	f505 53a7 	add.w	r3, r5, #5344	; 0x14e0
        setIntervalScaled(abs(interval) * dataScale);
 8003c12:	f8d4 116c 	ldr.w	r1, [r4, #364]	; 0x16c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c16:	2201      	movs	r2, #1
 8003c18:	330c      	adds	r3, #12
        setIntervalScaled(abs(interval) * dataScale);
 8003c1a:	ebc1 1001 	rsb	r0, r1, r1, lsl #4
        dragAction = &callback;
 8003c1e:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    graph1.setClickAction(graphClickedCallback);
 8003c22:	f505 53a7 	add.w	r3, r5, #5344	; 0x14e0
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003c26:	2800      	cmp	r0, #0
 8003c28:	f103 031c 	add.w	r3, r3, #28
 8003c2c:	bfb8      	it	lt
 8003c2e:	4240      	neglt	r0, r0
        clickAction = &callback;
 8003c30:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
        lineWidth = width;
 8003c34:	f04f 0301 	mov.w	r3, #1
        color = newColor;
 8003c38:	f8c4 9168 	str.w	r9, [r4, #360]	; 0x168
        lineWidth = width;
 8003c3c:	f884 3174 	strb.w	r3, [r4, #372]	; 0x174
        gridInterval = abs(interval);
 8003c40:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c44:	f00b f87c 	bl	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003c48:	2201      	movs	r2, #1
    graph1.addGraphElement(graph1MajorXAxisGrid);
 8003c4a:	9903      	ldr	r1, [sp, #12]
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c4c:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 8003c50:	4638      	mov	r0, r7
        dataScale = scale;
 8003c52:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 8003c56:	f00a fef0 	bl	800ea3a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003c5a:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
        color = newColor;
 8003c5e:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
        setIntervalScaled(abs(interval) * dataScale);
 8003c62:	f242 7910 	movw	r9, #10000	; 0x2710
        lineWidth = width;
 8003c66:	f04f 0301 	mov.w	r3, #1
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c6a:	220a      	movs	r2, #10
        setIntervalScaled(abs(interval) * dataScale);
 8003c6c:	fb09 f001 	mul.w	r0, r9, r1
        lineWidth = width;
 8003c70:	f884 31b4 	strb.w	r3, [r4, #436]	; 0x1b4
 8003c74:	2800      	cmp	r0, #0
 8003c76:	bfb8      	it	lt
 8003c78:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003c7a:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c7e:	f00b f85f 	bl	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003c82:	230a      	movs	r3, #10
    graph1.addGraphElement(graph1MajorYAxisGrid);
 8003c84:	9904      	ldr	r1, [sp, #16]
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003c86:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
 8003c8a:	4638      	mov	r0, r7
        dataScale = scale;
 8003c8c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
 8003c90:	f00a fed3 	bl	800ea3a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8003c94:	f8d4 11ec 	ldr.w	r1, [r4, #492]	; 0x1ec
class TypedText
 8003c98:	230c      	movs	r3, #12
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003c9a:	220a      	movs	r2, #10
        return i * scale;
 8003c9c:	fb09 f001 	mul.w	r0, r9, r1
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003ca0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8003dbc <_ZN15customGraphBaseC1Ev+0x3fc>
class TypedText
 8003ca4:	f8a4 31f8 	strh.w	r3, [r4, #504]	; 0x1f8
        labelDecimals = decimals;
 8003ca8:	f04f 0301 	mov.w	r3, #1
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
        color = newColor;
 8003cb2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003cb6:	bfb8      	it	lt
 8003cb8:	4240      	neglt	r0, r0
 8003cba:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        labelInterval = abs(interval);
 8003cbe:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003cc2:	f00b f83d 	bl	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003cc6:	230a      	movs	r3, #10
    graph1.addLeftElement(graph1MajorYAxisLabel);
 8003cc8:	9905      	ldr	r1, [sp, #20]
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003cca:	f8c4 01f0 	str.w	r0, [r4, #496]	; 0x1f0
 8003cce:	4638      	mov	r0, r7
        dataScale = scale;
 8003cd0:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
 8003cd4:	f00a fec3 	bl	800ea5e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <_ZN15customGraphBaseC1Ev+0x3e0>)
    graph1.addGraphElement(graph1Line1);
 8003cda:	4638      	mov	r0, r7
 8003cdc:	9906      	ldr	r1, [sp, #24]
 8003cde:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003ce2:	f24c 2332 	movw	r3, #49714	; 0xc232
 8003ce6:	f8a4 3248 	strh.w	r3, [r4, #584]	; 0x248
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003cea:	2337      	movs	r3, #55	; 0x37
 8003cec:	f884 324a 	strb.w	r3, [r4, #586]	; 0x24a
        canvasPainter = &painter;
 8003cf0:	9b07      	ldr	r3, [sp, #28]
 8003cf2:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003cf6:	f04f 0304 	mov.w	r3, #4
 8003cfa:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
 8003cfe:	f00a fe9c 	bl	800ea3a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
    add(graph1);
 8003d02:	4639      	mov	r1, r7
 8003d04:	4628      	mov	r0, r5
        boundingArea = calculateBoundingArea();
 8003d06:	af08      	add	r7, sp, #32
 8003d08:	f009 f9b0 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    debugText.setXY(126, 0);
 8003d0c:	4632      	mov	r2, r6
 8003d0e:	217e      	movs	r1, #126	; 0x7e
 8003d10:	4640      	mov	r0, r8
 8003d12:	f7fe ff92 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d16:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	4638      	mov	r0, r7
        color = newColor;
 8003d1e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 8003d22:	f8d4 324c 	ldr.w	r3, [r4, #588]	; 0x24c
        linespace = space;
 8003d26:	f8a4 6280 	strh.w	r6, [r4, #640]	; 0x280
        boundingArea = calculateBoundingArea();
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	4798      	blx	r3
 8003d30:	f108 033c 	add.w	r3, r8, #60	; 0x3c
 8003d34:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003d38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 8003d3c:	f505 53a3 	add.w	r3, r5, #5216	; 0x1460
 8003d40:	9303      	str	r3, [sp, #12]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d42:	f8d9 3000 	ldr.w	r3, [r9]
 8003d46:	b92b      	cbnz	r3, 8003d54 <_ZN15customGraphBaseC1Ev+0x394>
 8003d48:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <_ZN15customGraphBaseC1Ev+0x3e4>)
 8003d4a:	2160      	movs	r1, #96	; 0x60
 8003d4c:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <_ZN15customGraphBaseC1Ev+0x3e8>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003d4e:	4817      	ldr	r0, [pc, #92]	; (8003dac <_ZN15customGraphBaseC1Ev+0x3ec>)
 8003d50:	f01b f858 	bl	801ee04 <__assert_func>
 8003d54:	4b16      	ldr	r3, [pc, #88]	; (8003db0 <_ZN15customGraphBaseC1Ev+0x3f0>)
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	2b07      	cmp	r3, #7
 8003d5a:	d831      	bhi.n	8003dc0 <_ZN15customGraphBaseC1Ev+0x400>
 8003d5c:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <_ZN15customGraphBaseC1Ev+0x3f4>)
 8003d5e:	2161      	movs	r1, #97	; 0x61
 8003d60:	4a11      	ldr	r2, [pc, #68]	; (8003da8 <_ZN15customGraphBaseC1Ev+0x3e8>)
 8003d62:	e7f4      	b.n	8003d4e <_ZN15customGraphBaseC1Ev+0x38e>
 8003d64:	08022778 	.word	0x08022778
 8003d68:	08023028 	.word	0x08023028
 8003d6c:	08022ca0 	.word	0x08022ca0
 8003d70:	0802260c 	.word	0x0802260c
 8003d74:	0802240c 	.word	0x0802240c
 8003d78:	080224c4 	.word	0x080224c4
 8003d7c:	08021b4c 	.word	0x08021b4c
 8003d80:	08022f88 	.word	0x08022f88
 8003d84:	08022f0c 	.word	0x08022f0c
 8003d88:	08022bf0 	.word	0x08022bf0
 8003d8c:	08022748 	.word	0x08022748
 8003d90:	08003799 	.word	0x08003799
 8003d94:	08022760 	.word	0x08022760
 8003d98:	080037b7 	.word	0x080037b7
 8003d9c:	00c80136 	.word	0x00c80136
 8003da0:	ff32c237 	.word	0xff32c237
 8003da4:	080222b6 	.word	0x080222b6
 8003da8:	080223c6 	.word	0x080223c6
 8003dac:	08022333 	.word	0x08022333
 8003db0:	2400f5ec 	.word	0x2400f5ec
 8003db4:	08022388 	.word	0x08022388
 8003db8:	ff0061aa 	.word	0xff0061aa
 8003dbc:	2400f5e8 	.word	0x2400f5e8
        return texts->getText(typedTextId);
 8003dc0:	4bb1      	ldr	r3, [pc, #708]	; (8004088 <_ZN15customGraphBaseC1Ev+0x6c8>)
 8003dc2:	2107      	movs	r1, #7
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	f7ff f96b 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 8003dca:	4ab0      	ldr	r2, [pc, #704]	; (800408c <_ZN15customGraphBaseC1Ev+0x6cc>)
 8003dcc:	4603      	mov	r3, r0
 8003dce:	210a      	movs	r1, #10
 8003dd0:	9803      	ldr	r0, [sp, #12]
 8003dd2:	f011 fc89 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8003dd6:	9903      	ldr	r1, [sp, #12]
    debugText.resizeToCurrentText();
 8003dd8:	4640      	mov	r0, r8
 8003dda:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
 8003dde:	f00b fff1 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003de2:	4bab      	ldr	r3, [pc, #684]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
    debugText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LR9V));
 8003de4:	a90c      	add	r1, sp, #48	; 0x30
 8003de6:	4640      	mov	r0, r8
 8003de8:	930c      	str	r3, [sp, #48]	; 0x30
 8003dea:	2309      	movs	r3, #9
 8003dec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003df0:	f00c f808 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(debugText);
 8003df4:	4641      	mov	r1, r8
 8003df6:	4628      	mov	r0, r5
 8003df8:	f009 f938 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel4.setXY(278, 183);
 8003dfc:	22b7      	movs	r2, #183	; 0xb7
 8003dfe:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003e02:	ee18 0a10 	vmov	r0, s16
 8003e06:	f7fe ff18 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e0a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003e0e:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
 8003e12:	4638      	mov	r0, r7
        color = newColor;
 8003e14:	f8c4 12c8 	str.w	r1, [r4, #712]	; 0x2c8
        boundingArea = calculateBoundingArea();
 8003e18:	ee18 1a10 	vmov	r1, s16
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003e20:	f8a4 62cc 	strh.w	r6, [r4, #716]	; 0x2cc
        boundingArea = calculateBoundingArea();
 8003e24:	4798      	blx	r3
 8003e26:	ee18 1a10 	vmov	r1, s16
 8003e2a:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 8003e2e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003e32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003e36:	f505 53a3 	add.w	r3, r5, #5216	; 0x1460
    timeLabel4.resizeToCurrentText();
 8003e3a:	ee18 0a10 	vmov	r0, s16
    timeLabel4Buffer[0] = 0;
 8003e3e:	f8a4 6474 	strh.w	r6, [r4, #1140]	; 0x474
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003e42:	3314      	adds	r3, #20
 8003e44:	f8c4 32e0 	str.w	r3, [r4, #736]	; 0x2e0
    timeLabel4.resizeToCurrentText();
 8003e48:	f00b ffbc 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003e4c:	4b90      	ldr	r3, [pc, #576]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
    timeLabel4.setTypedText(touchgfx::TypedText(T_TIMEL4));
 8003e4e:	a90c      	add	r1, sp, #48	; 0x30
 8003e50:	ee18 0a10 	vmov	r0, s16
 8003e54:	930c      	str	r3, [sp, #48]	; 0x30
 8003e56:	2305      	movs	r3, #5
 8003e58:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003e5c:	f00b ffd2 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel4);
 8003e60:	ee18 1a10 	vmov	r1, s16
 8003e64:	4628      	mov	r0, r5
 8003e66:	f009 f901 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel3.setXY(215, 183);
 8003e6a:	22b7      	movs	r2, #183	; 0xb7
 8003e6c:	21d7      	movs	r1, #215	; 0xd7
 8003e6e:	ee19 0a10 	vmov	r0, s18
 8003e72:	f7fe fee2 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e76:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003e7a:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 8003e7e:	4638      	mov	r0, r7
        color = newColor;
 8003e80:	f8c4 1314 	str.w	r1, [r4, #788]	; 0x314
        boundingArea = calculateBoundingArea();
 8003e84:	ee19 1a10 	vmov	r1, s18
 8003e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003e8c:	f8a4 6318 	strh.w	r6, [r4, #792]	; 0x318
        boundingArea = calculateBoundingArea();
 8003e90:	4798      	blx	r3
 8003e92:	f505 5399 	add.w	r3, r5, #4896	; 0x1320
 8003e96:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003e9e:	f505 53a4 	add.w	r3, r5, #5248	; 0x1480
    timeLabel3.resizeToCurrentText();
 8003ea2:	ee19 0a10 	vmov	r0, s18
    timeLabel3Buffer[0] = 0;
 8003ea6:	f8a4 6488 	strh.w	r6, [r4, #1160]	; 0x488
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003eaa:	3308      	adds	r3, #8
 8003eac:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
    timeLabel3.resizeToCurrentText();
 8003eb0:	f00b ff88 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003eb4:	f04f 0102 	mov.w	r1, #2
 8003eb8:	4b75      	ldr	r3, [pc, #468]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
    timeLabel3.setTypedText(touchgfx::TypedText(T_TIMEL3));
 8003eba:	ee19 0a10 	vmov	r0, s18
 8003ebe:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 8003ec2:	a90c      	add	r1, sp, #48	; 0x30
 8003ec4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ec6:	f00b ff9d 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel3);
 8003eca:	ee19 1a10 	vmov	r1, s18
 8003ece:	4628      	mov	r0, r5
 8003ed0:	f009 f8cc 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel2.setXY(151, 183);
 8003ed4:	22b7      	movs	r2, #183	; 0xb7
 8003ed6:	2197      	movs	r1, #151	; 0x97
 8003ed8:	ee18 0a90 	vmov	r0, s17
 8003edc:	f7fe fead 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ee0:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003ee4:	f8d4 3330 	ldr.w	r3, [r4, #816]	; 0x330
 8003ee8:	4638      	mov	r0, r7
        color = newColor;
 8003eea:	f8c4 1360 	str.w	r1, [r4, #864]	; 0x360
        boundingArea = calculateBoundingArea();
 8003eee:	ee18 1a90 	vmov	r1, s17
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003ef6:	f8a4 6364 	strh.w	r6, [r4, #868]	; 0x364
        boundingArea = calculateBoundingArea();
 8003efa:	4798      	blx	r3
 8003efc:	ee18 1a90 	vmov	r1, s17
 8003f00:	f101 033c 	add.w	r3, r1, #60	; 0x3c
 8003f04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003f0c:	f505 53a4 	add.w	r3, r5, #5248	; 0x1480
    timeLabel2.resizeToCurrentText();
 8003f10:	ee18 0a90 	vmov	r0, s17
    timeLabel2Buffer[0] = 0;
 8003f14:	f8a4 649c 	strh.w	r6, [r4, #1180]	; 0x49c
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003f18:	331c      	adds	r3, #28
 8003f1a:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
    timeLabel2.resizeToCurrentText();
 8003f1e:	f00b ff51 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
    timeLabel2.setTypedText(touchgfx::TypedText(T_TIMEL2));
 8003f24:	a90c      	add	r1, sp, #48	; 0x30
 8003f26:	ee18 0a90 	vmov	r0, s17
 8003f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003f32:	f00b ff67 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel2);
 8003f36:	ee18 1a90 	vmov	r1, s17
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f009 f896 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel1.setXY(84, 183);
 8003f40:	22b7      	movs	r2, #183	; 0xb7
 8003f42:	2154      	movs	r1, #84	; 0x54
 8003f44:	4658      	mov	r0, fp
 8003f46:	f7fe fe78 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003f4a:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003f4e:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003f52:	4638      	mov	r0, r7
        color = newColor;
 8003f54:	f8c4 13ac 	str.w	r1, [r4, #940]	; 0x3ac
        boundingArea = calculateBoundingArea();
 8003f58:	4659      	mov	r1, fp
 8003f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003f5e:	f8a4 63b0 	strh.w	r6, [r4, #944]	; 0x3b0
        boundingArea = calculateBoundingArea();
 8003f62:	4798      	blx	r3
 8003f64:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 8003f68:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8003f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003f70:	f505 53a5 	add.w	r3, r5, #5280	; 0x14a0
    timeLabel1.resizeToCurrentText();
 8003f74:	4658      	mov	r0, fp
    timeLabel1Buffer[0] = 0;
 8003f76:	f8a4 64b0 	strh.w	r6, [r4, #1200]	; 0x4b0
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003f7a:	3310      	adds	r3, #16
 8003f7c:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
    timeLabel1.resizeToCurrentText();
 8003f80:	f00b ff20 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
    timeLabel1.setTypedText(touchgfx::TypedText(T_TIMEL1));
 8003f86:	a90c      	add	r1, sp, #48	; 0x30
 8003f88:	4658      	mov	r0, fp
 8003f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8003f92:	f00b ff37 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel1);
 8003f96:	4659      	mov	r1, fp
 8003f98:	4628      	mov	r0, r5
 8003f9a:	f009 f867 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dateLabel.setXY(248, 3);
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	21f8      	movs	r1, #248	; 0xf8
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f7fe fe49 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003fa8:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003fac:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003fb0:	4638      	mov	r0, r7
        color = newColor;
 8003fb2:	f8c4 13f8 	str.w	r1, [r4, #1016]	; 0x3f8
        boundingArea = calculateBoundingArea();
 8003fb6:	4651      	mov	r1, sl
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003fbc:	f8a4 63fc 	strh.w	r6, [r4, #1020]	; 0x3fc
        boundingArea = calculateBoundingArea();
 8003fc0:	4798      	blx	r3
 8003fc2:	f10a 033c 	add.w	r3, sl, #60	; 0x3c
 8003fc6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    Unicode::snprintf(dateLabelBuffer, DATELABEL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_WAHU).getText());
 8003fca:	f505 57a6 	add.w	r7, r5, #5312	; 0x14c0
 8003fce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8003fd6:	3704      	adds	r7, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f43f aeb5 	beq.w	8003d48 <_ZN15customGraphBaseC1Ev+0x388>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003fde:	492d      	ldr	r1, [pc, #180]	; (8004094 <_ZN15customGraphBaseC1Ev+0x6d4>)
 8003fe0:	880b      	ldrh	r3, [r1, #0]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	f67f aeba 	bls.w	8003d5c <_ZN15customGraphBaseC1Ev+0x39c>
        return texts->getText(typedTextId);
 8003fe8:	4a27      	ldr	r2, [pc, #156]	; (8004088 <_ZN15customGraphBaseC1Ev+0x6c8>)
 8003fea:	2103      	movs	r1, #3
 8003fec:	6810      	ldr	r0, [r2, #0]
 8003fee:	f7ff f857 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <_ZN15customGraphBaseC1Ev+0x6cc>)
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	210a      	movs	r1, #10
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f011 fb75 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    dateLabel.resizeToCurrentText();
 8003ffe:	4650      	mov	r0, sl
 8004000:	f8c4 7410 	str.w	r7, [r4, #1040]	; 0x410
 8004004:	f00b fede 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8004008:	4f21      	ldr	r7, [pc, #132]	; (8004090 <_ZN15customGraphBaseC1Ev+0x6d0>)
 800400a:	f04f 0304 	mov.w	r3, #4
    dateLabel.setTypedText(touchgfx::TypedText(T_DATE));
 800400e:	a90c      	add	r1, sp, #48	; 0x30
 8004010:	4650      	mov	r0, sl
 8004012:	970c      	str	r7, [sp, #48]	; 0x30
 8004014:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8004018:	f00b fef4 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(dateLabel);
 800401c:	4651      	mov	r1, sl
 800401e:	4628      	mov	r0, r5
 8004020:	f009 f824 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    y_axisName.setXY(29, 1);
 8004024:	2201      	movs	r2, #1
 8004026:	211d      	movs	r1, #29
 8004028:	ee19 0a90 	vmov	r0, s19
 800402c:	f7fe fe05 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004030:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    y_axisName.resizeToCurrentText();
 8004034:	ee19 0a90 	vmov	r0, s19
        linespace = space;
 8004038:	f8a4 6448 	strh.w	r6, [r4, #1096]	; 0x448
        color = newColor;
 800403c:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
        boundingArea = calculateBoundingArea();
 8004040:	f04f 33ff 	mov.w	r3, #4294967295
 8004044:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
 8004048:	f8c4 3454 	str.w	r3, [r4, #1108]	; 0x454
    y_axisName.setWildcard(y_axisNameBuffer);
 800404c:	f505 53a6 	add.w	r3, r5, #5312	; 0x14c0
 8004050:	f8c4 6458 	str.w	r6, [r4, #1112]	; 0x458
 8004054:	3318      	adds	r3, #24
    y_axisNameBuffer[0] = 0;
 8004056:	f8a4 64d8 	strh.w	r6, [r4, #1240]	; 0x4d8
 800405a:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    y_axisName.resizeToCurrentText();
 800405e:	f00b feb1 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    y_axisName.setTypedText(touchgfx::TypedText(T___SINGLEUSE_627Q));
 8004062:	a90c      	add	r1, sp, #48	; 0x30
 8004064:	ee19 0a90 	vmov	r0, s19
 8004068:	970c      	str	r7, [sp, #48]	; 0x30
 800406a:	f8ad 6034 	strh.w	r6, [sp, #52]	; 0x34
 800406e:	f00b fec9 	bl	800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(y_axisName);
 8004072:	4628      	mov	r0, r5
 8004074:	ee19 1a90 	vmov	r1, s19
 8004078:	f008 fff8 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800407c:	4628      	mov	r0, r5
 800407e:	b00f      	add	sp, #60	; 0x3c
 8004080:	ecbd 8b04 	vpop	{d8-d9}
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	2400f5f4 	.word	0x2400f5f4
 800408c:	080223fe 	.word	0x080223fe
 8004090:	08021b4c 	.word	0x08021b4c
 8004094:	2400f5ec 	.word	0x2400f5ec

08004098 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004098:	4770      	bx	lr

0800409a <_ZN19FrontendApplicationD0Ev>:
 800409a:	b510      	push	{r4, lr}
 800409c:	4604      	mov	r4, r0
 800409e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80040a2:	f01a f888 	bl	801e1b6 <_ZdlPvj>
 80040a6:	4620      	mov	r0, r4
 80040a8:	bd10      	pop	{r4, pc}

080040aa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80040aa:	b510      	push	{r4, lr}
 80040ac:	4604      	mov	r4, r0
    {
        model.tick();
 80040ae:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80040b2:	f000 f812 	bl	80040da <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80040b6:	4620      	mov	r0, r4
    }
 80040b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80040bc:	f00e bb6e 	b.w	801279c <_ZN8touchgfx11Application15handleTickEventEv>

080040c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80040c4:	f7fe fcf2 	bl	8002aac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80040ca:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80040cc:	6023      	str	r3, [r4, #0]
}
 80040ce:	bd10      	pop	{r4, pc}
 80040d0:	08022814 	.word	0x08022814

080040d4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80040d4:	2200      	movs	r2, #0
 80040d6:	6002      	str	r2, [r0, #0]
{

}
 80040d8:	4770      	bx	lr

080040da <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80040da:	4770      	bx	lr

080040dc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80040dc:	4770      	bx	lr

080040de <_ZThn4_N16Screen1PresenterD1Ev>:
 80040de:	3804      	subs	r0, #4
 80040e0:	4770      	bx	lr

080040e2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80040e2:	4770      	bx	lr

080040e4 <_ZN16Screen1PresenterD0Ev>:
 80040e4:	b510      	push	{r4, lr}
 80040e6:	4604      	mov	r4, r0
 80040e8:	2110      	movs	r1, #16
 80040ea:	f01a f864 	bl	801e1b6 <_ZdlPvj>
 80040ee:	4620      	mov	r0, r4
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <_ZThn4_N16Screen1PresenterD0Ev>:
 80040f2:	f1a0 0004 	sub.w	r0, r0, #4
 80040f6:	e7f5      	b.n	80040e4 <_ZN16Screen1PresenterD0Ev>

080040f8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80040f8:	2200      	movs	r2, #0
    : view(v)
 80040fa:	60c1      	str	r1, [r0, #12]
 80040fc:	6082      	str	r2, [r0, #8]
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8004100:	b510      	push	{r4, lr}
    : view(v)
 8004102:	f102 0408 	add.w	r4, r2, #8
 8004106:	3220      	adds	r2, #32
 8004108:	6004      	str	r4, [r0, #0]
 800410a:	6042      	str	r2, [r0, #4]
}
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	08022858 	.word	0x08022858

08004114 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8004114:	4770      	bx	lr
	...

08004118 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter++;
 8004118:	f500 4380 	add.w	r3, r0, #16384	; 0x4000
 800411c:	f8d3 25a8 	ldr.w	r2, [r3, #1448]	; 0x5a8
{
 8004120:	b573      	push	{r0, r1, r4, r5, r6, lr}
	tickCounter++;
 8004122:	3201      	adds	r2, #1
	tickCounter2++;
 8004124:	f8d3 15ac 	ldr.w	r1, [r3, #1452]	; 0x5ac
{
 8004128:	4604      	mov	r4, r0
	tickCounter2++;
 800412a:	3101      	adds	r1, #1
	if(tickCounter == 10){
 800412c:	2a0a      	cmp	r2, #10
	tickCounter++;
 800412e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	tickCounter2++;
 8004132:	f8c3 15ac 	str.w	r1, [r3, #1452]	; 0x5ac
	if(tickCounter == 10){
 8004136:	d11b      	bne.n	8004170 <_ZN11Screen1View15handleTickEventEv+0x58>
		tickCounter= 0;
 8004138:	2200      	movs	r2, #0
		//tickCounter2++;
		if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_2) == 0x00)
 800413a:	2104      	movs	r1, #4
 800413c:	4844      	ldr	r0, [pc, #272]	; (8004250 <_ZN11Screen1View15handleTickEventEv+0x138>)
		tickCounter= 0;
 800413e:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
		if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_2) == 0x00)
 8004142:	f003 ff2b 	bl	8007f9c <HAL_GPIO_ReadPin>
 8004146:	b998      	cbnz	r0, 8004170 <_ZN11Screen1View15handleTickEventEv+0x58>
		{
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_12);
 8004148:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800414c:	4841      	ldr	r0, [pc, #260]	; (8004254 <_ZN11Screen1View15handleTickEventEv+0x13c>)
 800414e:	f003 ff30 	bl	8007fb2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 8004152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004156:	483f      	ldr	r0, [pc, #252]	; (8004254 <_ZN11Screen1View15handleTickEventEv+0x13c>)
 8004158:	f003 ff2b 	bl	8007fb2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_14);
 800415c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004160:	483c      	ldr	r0, [pc, #240]	; (8004254 <_ZN11Screen1View15handleTickEventEv+0x13c>)
 8004162:	f003 ff26 	bl	8007fb2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_15);
 8004166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800416a:	483a      	ldr	r0, [pc, #232]	; (8004254 <_ZN11Screen1View15handleTickEventEv+0x13c>)
 800416c:	f003 ff21 	bl	8007fb2 <HAL_GPIO_TogglePin>
		}
	}
	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_2) == 0x00)
 8004170:	2104      	movs	r1, #4
 8004172:	4837      	ldr	r0, [pc, #220]	; (8004250 <_ZN11Screen1View15handleTickEventEv+0x138>)
 8004174:	f003 ff12 	bl	8007f9c <HAL_GPIO_ReadPin>
 8004178:	bb18      	cbnz	r0, 80041c2 <_ZN11Screen1View15handleTickEventEv+0xaa>
	{
		if(testCNTR < 500){
 800417a:	4e37      	ldr	r6, [pc, #220]	; (8004258 <_ZN11Screen1View15handleTickEventEv+0x140>)
 800417c:	6835      	ldr	r5, [r6, #0]
 800417e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8004182:	d255      	bcs.n	8004230 <_ZN11Screen1View15handleTickEventEv+0x118>
			customGraph1.addPoint(firstTime+testCNTR*180, 2+cos(testCNTR*(PI/180.0)));
 8004184:	ee07 5a90 	vmov	s15, r5
 8004188:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800418c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004248 <_ZN11Screen1View15handleTickEventEv+0x130>
 8004190:	ee20 0b07 	vmul.f64	d0, d0, d7
 8004194:	f01a f838 	bl	801e208 <cos>
 8004198:	22b4      	movs	r2, #180	; 0xb4
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <_ZN11Screen1View15handleTickEventEv+0x144>)
 800419c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80041a0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80041a4:	4355      	muls	r5, r2
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 80041ae:	18aa      	adds	r2, r5, r2
 80041b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80041b4:	f143 0300 	adc.w	r3, r3, #0
 80041b8:	f000 ff7c 	bl	80050b4 <_ZN11customGraph8addPointExf>
			testCNTR++;
 80041bc:	6833      	ldr	r3, [r6, #0]
 80041be:	3301      	adds	r3, #1
 80041c0:	6033      	str	r3, [r6, #0]
		{
			customGraph1.setTimeRange(8);
		}
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_3) == 0x00)
 80041c2:	2108      	movs	r1, #8
 80041c4:	4822      	ldr	r0, [pc, #136]	; (8004250 <_ZN11Screen1View15handleTickEventEv+0x138>)
 80041c6:	f003 fee9 	bl	8007f9c <HAL_GPIO_ReadPin>
 80041ca:	4605      	mov	r5, r0
 80041cc:	b928      	cbnz	r0, 80041da <_ZN11Screen1View15handleTickEventEv+0xc2>
	{
		customGraph1.clearAllData();
 80041ce:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80041d2:	f000 ff6b 	bl	80050ac <_ZN11customGraph12clearAllDataEv>
		testCNTR = 0;
 80041d6:	4b20      	ldr	r3, [pc, #128]	; (8004258 <_ZN11Screen1View15handleTickEventEv+0x140>)
 80041d8:	601d      	str	r5, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_4) == 0x00)
 80041da:	2110      	movs	r1, #16
 80041dc:	481c      	ldr	r0, [pc, #112]	; (8004250 <_ZN11Screen1View15handleTickEventEv+0x138>)
 80041de:	f003 fedd 	bl	8007f9c <HAL_GPIO_ReadPin>
 80041e2:	b970      	cbnz	r0, 8004202 <_ZN11Screen1View15handleTickEventEv+0xea>
	{
		customGraph1.setLineColor(0xFF0000);
 80041e4:	f104 0098 	add.w	r0, r4, #152	; 0x98
 80041e8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 80041ec:	9001      	str	r0, [sp, #4]
 80041ee:	f000 f915 	bl	800441c <_ZN11customGraph12setLineColorEm>
		customGraph1.setYAxisLabel("Curr");
 80041f2:	491b      	ldr	r1, [pc, #108]	; (8004260 <_ZN11Screen1View15handleTickEventEv+0x148>)
 80041f4:	9801      	ldr	r0, [sp, #4]
 80041f6:	f000 fb14 	bl	8004822 <_ZN11customGraph13setYAxisLabelEPKc>
		customGraph1.setTimeRange(8);
 80041fa:	2108      	movs	r1, #8
 80041fc:	9801      	ldr	r0, [sp, #4]
 80041fe:	f000 fb07 	bl	8004810 <_ZN11customGraph12setTimeRangeEi>
	}
	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_5) == 0x00)
 8004202:	2120      	movs	r1, #32
 8004204:	4812      	ldr	r0, [pc, #72]	; (8004250 <_ZN11Screen1View15handleTickEventEv+0x138>)
 8004206:	f003 fec9 	bl	8007f9c <HAL_GPIO_ReadPin>
 800420a:	b9c0      	cbnz	r0, 800423e <_ZN11Screen1View15handleTickEventEv+0x126>
	{
		customGraph1.setLineColor(0x00FF00);
 800420c:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8004210:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004214:	9001      	str	r0, [sp, #4]
 8004216:	f000 f901 	bl	800441c <_ZN11customGraph12setLineColorEm>
		customGraph1.setYAxisLabel("CO2");
 800421a:	9801      	ldr	r0, [sp, #4]
 800421c:	4911      	ldr	r1, [pc, #68]	; (8004264 <_ZN11Screen1View15handleTickEventEv+0x14c>)
 800421e:	f000 fb00 	bl	8004822 <_ZN11customGraph13setYAxisLabelEPKc>
		customGraph1.setTimeRange(24);
 8004222:	2118      	movs	r1, #24
 8004224:	9801      	ldr	r0, [sp, #4]
	if(tickCounter2 % 3 == 0)
	{
		//customGraph1.addPoint((sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, (float)tickCounter2);
		//graph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, tickCounter2);
	}
}
 8004226:	b002      	add	sp, #8
 8004228:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		customGraph1.setTimeRange(24);
 800422c:	f000 baf0 	b.w	8004810 <_ZN11customGraph12setTimeRangeEi>
		else if(testCNTR == 500)
 8004230:	d1c7      	bne.n	80041c2 <_ZN11Screen1View15handleTickEventEv+0xaa>
			customGraph1.setTimeRange(8);
 8004232:	2108      	movs	r1, #8
 8004234:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8004238:	f000 faea 	bl	8004810 <_ZN11customGraph12setTimeRangeEi>
 800423c:	e7c1      	b.n	80041c2 <_ZN11Screen1View15handleTickEventEv+0xaa>
}
 800423e:	b002      	add	sp, #8
 8004240:	bd70      	pop	{r4, r5, r6, pc}
 8004242:	bf00      	nop
 8004244:	f3af 8000 	nop.w
 8004248:	aaaaaaab 	.word	0xaaaaaaab
 800424c:	3f91df46 	.word	0x3f91df46
 8004250:	58022800 	.word	0x58022800
 8004254:	58022000 	.word	0x58022000
 8004258:	24005b60 	.word	0x24005b60
 800425c:	24000020 	.word	0x24000020
 8004260:	08022880 	.word	0x08022880
 8004264:	08022885 	.word	0x08022885

08004268 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <_ZN11Screen1ViewD1Ev+0x10>)
 800426a:	b510      	push	{r4, lr}
 800426c:	4604      	mov	r4, r0
 800426e:	6003      	str	r3, [r0, #0]
 8004270:	f7fe fcc6 	bl	8002c00 <_ZN15Screen1ViewBaseD1Ev>
 8004274:	4620      	mov	r0, r4
 8004276:	bd10      	pop	{r4, pc}
 8004278:	08022894 	.word	0x08022894

0800427c <_ZN11Screen1ViewD0Ev>:
 800427c:	b510      	push	{r4, lr}
 800427e:	4604      	mov	r4, r0
 8004280:	f7ff fff2 	bl	8004268 <_ZN11Screen1ViewD1Ev>
 8004284:	f244 51b8 	movw	r1, #17848	; 0x45b8
 8004288:	4620      	mov	r0, r4
 800428a:	f019 ff94 	bl	801e1b6 <_ZdlPvj>
 800428e:	4620      	mov	r0, r4
 8004290:	bd10      	pop	{r4, pc}
	...

08004294 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8004294:	b510      	push	{r4, lr}
 8004296:	4604      	mov	r4, r0
 8004298:	f7fe fcdc 	bl	8002c54 <_ZN15Screen1ViewBaseC1Ev>
 800429c:	4b07      	ldr	r3, [pc, #28]	; (80042bc <_ZN11Screen1ViewC1Ev+0x28>)
 800429e:	2200      	movs	r2, #0
}
 80042a0:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 80042a8:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
 80042ac:	f8c3 25b4 	str.w	r2, [r3, #1460]	; 0x5b4
	tickCounter  = 0;
 80042b0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	tickCounter2 = 0;
 80042b4:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
}
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	bf00      	nop
 80042bc:	08022894 	.word	0x08022894

080042c0 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80042c0:	f7fe bc9b 	b.w	8002bfa <_ZN15Screen1ViewBase11setupScreenEv>

080042c4 <_ZN11customGraphD1Ev>:
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <_ZN11customGraphD1Ev+0x10>)
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	6003      	str	r3, [r0, #0]
 80042cc:	f7ff f9c6 	bl	800365c <_ZN15customGraphBaseD1Ev>
 80042d0:	4620      	mov	r0, r4
 80042d2:	bd10      	pop	{r4, pc}
 80042d4:	080228ec 	.word	0x080228ec

080042d8 <_ZN11customGraphD0Ev>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
 80042dc:	f7ff fff2 	bl	80042c4 <_ZN11customGraphD1Ev>
 80042e0:	f241 6130 	movw	r1, #5680	; 0x1630
 80042e4:	4620      	mov	r0, r4
 80042e6:	f019 ff66 	bl	801e1b6 <_ZdlPvj>
 80042ea:	4620      	mov	r0, r4
 80042ec:	bd10      	pop	{r4, pc}

080042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
            return v < 0 ? Q5((v + 1) - toQ5(1).v / 2).to<int>() : Q5(v + toQ5(1).v / 2).to<int>();
 80042ee:	6803      	ldr	r3, [r0, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	da02      	bge.n	80042fa <_ZNK8touchgfx7CWRUtil2Q55roundEv+0xc>
            return (T)((T)v / (T)Rasterizer::POLY_BASE_SIZE);
 80042f4:	f1b3 000f 	subs.w	r0, r3, #15
 80042f8:	d501      	bpl.n	80042fe <_ZNK8touchgfx7CWRUtil2Q55roundEv+0x10>
 80042fa:	f103 0010 	add.w	r0, r3, #16
 80042fe:	1140      	asrs	r0, r0, #5
 8004300:	4770      	bx	lr
	...

08004304 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);

	}

	virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8004304:	b530      	push	{r4, r5, lr}
 8004306:	b087      	sub	sp, #28
 8004308:	4604      	mov	r4, r0
 800430a:	ab02      	add	r3, sp, #8
 800430c:	e883 0006 	stmia.w	r3, {r1, r2}
            : v(0)
 8004310:	2300      	movs	r3, #0
 8004312:	9305      	str	r3, [sp, #20]
	{
		CWRUtil::Q5 test;
		//int x;
		// Override and implement this function in customGraph
		if(value.clickEvent.getType() == ClickEvent::PRESSED){
 8004314:	7913      	ldrb	r3, [r2, #4]
 8004316:	bb83      	cbnz	r3, 800437a <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x76>
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004318:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getUsedCapacity());
			//x = graph1.int2scaledX(value.index);
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 800431c:	f504 55a3 	add.w	r5, r4, #5216	; 0x1460
 8004320:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004324:	440b      	add	r3, r1
 8004326:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 800432a:	1ac9      	subs	r1, r1, r3
			test = CWRUtil::muldiv_toQ5(12 - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800432c:	e9d0 0261 	ldrd	r0, r2, [r0, #388]	; 0x184
 8004330:	b209      	sxth	r1, r1
 8004332:	1a12      	subs	r2, r2, r0
 8004334:	f1c0 000c 	rsb	r0, r0, #12
 8004338:	3901      	subs	r1, #1
 800433a:	f7ff fada 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 800433e:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 8004342:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004346:	9005      	str	r0, [sp, #20]
			Unicode::snprintf(debugTextBuffer, 10, "%d", test.round());
 8004348:	a805      	add	r0, sp, #20
 800434a:	f7ff ffd0 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800434e:	4a0c      	ldr	r2, [pc, #48]	; (8004380 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x7c>)
 8004350:	4603      	mov	r3, r0
 8004352:	210a      	movs	r1, #10
 8004354:	4628      	mov	r0, r5
 8004356:	f011 f9c7 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.indexToScreenX(value.index));
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled());
			//Unicode::snprintf(debugTextBuffer, 10, "%d", graph1.getGraphAreaPaddingLeft());
			debugText.setWildcard(debugTextBuffer);
			debugText.invalidate();
 800435a:	f504 5092 	add.w	r0, r4, #4672	; 0x1240
 800435e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8004362:	300c      	adds	r0, #12
 8004364:	f8c3 5294 	str.w	r5, [r3, #660]	; 0x294
 8004368:	9001      	str	r0, [sp, #4]
 800436a:	f00f f9da 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
			debugText.resizeToCurrentText();
 800436e:	9801      	ldr	r0, [sp, #4]
 8004370:	f00b fd28 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			debugText.invalidate();
 8004374:	9801      	ldr	r0, [sp, #4]
 8004376:	f00f f9d4 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
		}
		if(value.clickEvent.getType() == ClickEvent::RELEASED){

		}
	}
 800437a:	b007      	add	sp, #28
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	080228c0 	.word	0x080228c0

08004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>:
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 8004384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004386:	4615      	mov	r5, r2
    	Unicode::snprintf(timeLabelBuf, 10, "%02d:%02d",time->tm_hour, time->tm_min);
 8004388:	685a      	ldr	r2, [r3, #4]
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 800438a:	460c      	mov	r4, r1
    	Unicode::snprintf(timeLabelBuf, 10, "%02d:%02d",time->tm_hour, time->tm_min);
 800438c:	210a      	movs	r1, #10
 800438e:	9200      	str	r2, [sp, #0]
 8004390:	4628      	mov	r0, r5
 8004392:	4a09      	ldr	r2, [pc, #36]	; (80043b8 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm+0x34>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f011 f9a7 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    	timelabel->invalidate();
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	4620      	mov	r0, r4
 800439e:	64a5      	str	r5, [r4, #72]	; 0x48
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4798      	blx	r3
    	timelabel->resizeToCurrentText();
 80043a4:	4620      	mov	r0, r4
 80043a6:	f00b fd0d 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	timelabel->invalidate();
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	4620      	mov	r0, r4
 80043ae:	695b      	ldr	r3, [r3, #20]
    }
 80043b0:	b003      	add	sp, #12
 80043b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    	timelabel->invalidate();
 80043b6:	4718      	bx	r3
 80043b8:	080228c3 	.word	0x080228c3

080043bc <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 80043bc:	b510      	push	{r4, lr}
 80043be:	4604      	mov	r4, r0
 80043c0:	f7ff fafe 	bl	80039c0 <_ZN15customGraphBaseC1Ev>
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <_ZN11customGraphC1Ev+0x5c>)
            : v(0)
 80043c6:	2200      	movs	r2, #0
 80043c8:	2000      	movs	r0, #0
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80043d0:	f203 511c 	addw	r1, r3, #1308	; 0x51c
 80043d4:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
 80043d8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
 80043dc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
 80043e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 80043e4:	6008      	str	r0, [r1, #0]
{

}
 80043e6:	4620      	mov	r0, r4
customGraph::customGraph()
 80043e8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
 80043ec:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
 80043f0:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
 80043f4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
 80043f8:	f883 255c 	strb.w	r2, [r3, #1372]	; 0x55c
 80043fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004400:	f8a3 261c 	strh.w	r2, [r3, #1564]	; 0x61c
 8004404:	2218      	movs	r2, #24
 8004406:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 800440a:	227d      	movs	r2, #125	; 0x7d
 800440c:	f8c3 2624 	str.w	r2, [r3, #1572]	; 0x624
 8004410:	2204      	movs	r2, #4
 8004412:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
}
 8004416:	bd10      	pop	{r4, pc}
 8004418:	080228ec 	.word	0x080228ec

0800441c <_ZN11customGraph12setLineColorEm>:
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800441c:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
 8004420:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8004424:	0c0b      	lsrs	r3, r1, #16
 8004426:	f8c0 1244 	str.w	r1, [r0, #580]	; 0x244
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800442a:	f880 124a 	strb.w	r1, [r0, #586]	; 0x24a
        return color >> 16;
 800442e:	f880 3248 	strb.w	r3, [r0, #584]	; 0x248
        return color >> 8;
 8004432:	0a0b      	lsrs	r3, r1, #8
 8004434:	f880 3249 	strb.w	r3, [r0, #585]	; 0x249


void customGraph::setLineColor(uint32_t colorCode)
{
	graph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB((colorCode&0x00FF0000) >> 16, (colorCode&0x0000FF00) >> 8, colorCode&0x000000FF));
}
 8004438:	4770      	bx	lr
	...

0800443c <_ZN11customGraph12setTimeRangeEi.part.0>:
void customGraph::setTimeRange(int hours)
 800443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		customGraphInterval = (hours*60)/numberofGrid;
 8004440:	223c      	movs	r2, #60	; 0x3c
		customGraphTimeRange = hours;
 8004442:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004446:	f100 0758 	add.w	r7, r0, #88	; 0x58
void customGraph::setTimeRange(int hours)
 800444a:	4604      	mov	r4, r0
		customGraphInterval = (hours*60)/numberofGrid;
 800444c:	434a      	muls	r2, r1
 800444e:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004452:	4638      	mov	r0, r7
		customGraphInterval = (hours*60)/numberofGrid;
 8004454:	fb92 f3f3 	sdiv	r3, r2, r3
void customGraph::setTimeRange(int hours)
 8004458:	ed2d 8b02 	vpush	{d8}
		customGraphTimeRange = hours;
 800445c:	f8c5 1620 	str.w	r1, [r5, #1568]	; 0x620
void customGraph::setTimeRange(int hours)
 8004460:	b085      	sub	sp, #20
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004462:	2100      	movs	r1, #0
		customGraphInterval = (hours*60)/numberofGrid;
 8004464:	f8c5 3624 	str.w	r3, [r5, #1572]	; 0x624
		customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004468:	f7fe fe49 	bl	80030fe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
        setIntervalScaled(abs(interval) * dataScale);
 800446c:	f8d5 216c 	ldr.w	r2, [r5, #364]	; 0x16c
 8004470:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
		customGraphBase::graph1.setGraphRangeYAutoScaled(true,1);
 8004474:	4638      	mov	r0, r7
 8004476:	4353      	muls	r3, r2
 8004478:	2201      	movs	r2, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	4611      	mov	r1, r2
 800447e:	bfb8      	it	lt
 8004480:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8004482:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
 8004486:	f00a f937 	bl	800e6f8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
		customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 800448a:	4638      	mov	r0, r7
 800448c:	f7fe ffc4 	bl	8003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004490:	4606      	mov	r6, r0
 8004492:	4638      	mov	r0, r7
 8004494:	f7fe ff99 	bl	80033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004498:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 800449c:	ee07 3a90 	vmov	s15, r3
 80044a0:	1a33      	subs	r3, r6, r0
 80044a2:	ee07 3a10 	vmov	s14, r3
 80044a6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80044aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044ae:	eec7 7a08 	vdiv.f32	s15, s14, s16
        const float fs = f * (float)scale;
 80044b2:	ed95 7a7b 	vldr	s14, [r5, #492]	; 0x1ec
 80044b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044ba:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	f2c0 8179 	blt.w	80047bc <_ZN11customGraph12setTimeRangeEi.part.0+0x380>
            return (int)(fs + 0.5f);
 80044ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d6:	ee17 3a90 	vmov	r3, s15
 80044da:	2b00      	cmp	r3, #0
		customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 80044dc:	4638      	mov	r0, r7
 80044de:	bfb8      	it	lt
 80044e0:	425b      	neglt	r3, r3
        labelInterval = abs(interval);
 80044e2:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0
 80044e6:	f7fe ff97 	bl	8003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 80044ea:	4606      	mov	r6, r0
 80044ec:	4638      	mov	r0, r7
 80044ee:	f7fe ff6c 	bl	80033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 80044f2:	1a33      	subs	r3, r6, r0
        const float fs = f * (float)scale;
 80044f4:	edd5 7a6b 	vldr	s15, [r5, #428]	; 0x1ac
 80044f8:	ee07 3a10 	vmov	s14, r3
 80044fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004500:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004504:	eec7 6a08 	vdiv.f32	s13, s14, s16
 8004508:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004510:	bf48      	it	mi
 8004512:	eef1 6a66 	vnegmi.f32	s13, s13
 8004516:	ee67 7aa6 	vmul.f32	s15, s15, s13
        if (fs >= 0)
 800451a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	f2c0 815f 	blt.w	80047e4 <_ZN11customGraph12setTimeRangeEi.part.0+0x3a8>
            return (int)(fs + 0.5f);
 8004526:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800452a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800452e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004532:	ee17 3a90 	vmov	r3, s15
 8004536:	2b00      	cmp	r3, #0
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004538:	f8d5 2624 	ldr.w	r2, [r5, #1572]	; 0x624
 800453c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8004540:	f504 56ab 	add.w	r6, r4, #5472	; 0x1560
 8004544:	bfb8      	it	lt
 8004546:	425b      	neglt	r3, r3
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004548:	f241 5b90 	movw	fp, #5520	; 0x1590
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 800454c:	fb0a f202 	mul.w	r2, sl, r2
		convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 8004550:	f106 0908 	add.w	r9, r6, #8
 8004554:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004558:	f241 5330 	movw	r3, #5424	; 0x1530
    	localtime_r(timestamp, date_time);
 800455c:	4630      	mov	r0, r6
		convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 800455e:	f504 57ac 	add.w	r7, r4, #5504	; 0x1580
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004562:	18e1      	adds	r1, r4, r3
 8004564:	58e3      	ldr	r3, [r4, r3]
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004566:	eb04 080b 	add.w	r8, r4, fp
		convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 800456a:	3718      	adds	r7, #24
		timeLabel1_time = firstDataTime + customGraphInterval*60;
 800456c:	189b      	adds	r3, r3, r2
 800456e:	6849      	ldr	r1, [r1, #4]
 8004570:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 8004574:	4649      	mov	r1, r9
 8004576:	e9c6 3200 	strd	r3, r2, [r6]
 800457a:	f01a fda7 	bl	801f0cc <localtime_r>
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 800457e:	f8d5 2624 	ldr.w	r2, [r5, #1572]	; 0x624
 8004582:	4640      	mov	r0, r8
		convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 8004584:	f108 0838 	add.w	r8, r8, #56	; 0x38
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004588:	fb0a f202 	mul.w	r2, sl, r2
 800458c:	e9d6 3100 	ldrd	r3, r1, [r6]
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 8004590:	f504 56ae 	add.w	r6, r4, #5568	; 0x15c0
		timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004594:	189b      	adds	r3, r3, r2
 8004596:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 800459a:	f844 300b 	str.w	r3, [r4, fp]
 800459e:	4639      	mov	r1, r7
 80045a0:	f848 2c34 	str.w	r2, [r8, #-52]
 80045a4:	f01a fd92 	bl	801f0cc <localtime_r>
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80045a8:	f8d5 2624 	ldr.w	r2, [r5, #1572]	; 0x624
 80045ac:	f854 300b 	ldr.w	r3, [r4, fp]
 80045b0:	4630      	mov	r0, r6
 80045b2:	fb0a f202 	mul.w	r2, sl, r2
 80045b6:	f858 1c34 	ldr.w	r1, [r8, #-52]
		updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80045ba:	f504 5b9b 	add.w	fp, r4, #4960	; 0x1360
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80045be:	189b      	adds	r3, r3, r2
		updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80045c0:	f10b 0b1c 	add.w	fp, fp, #28
		timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 80045c4:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 80045c8:	4641      	mov	r1, r8
 80045ca:	e9c6 3200 	strd	r3, r2, [r6]
 80045ce:	f01a fd7d 	bl	801f0cc <localtime_r>
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80045d2:	f8d5 2624 	ldr.w	r2, [r5, #1572]	; 0x624
 80045d6:	f241 51f0 	movw	r1, #5616	; 0x15f0
 80045da:	fb0a f202 	mul.w	r2, sl, r2
		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 80045de:	f504 5aa6 	add.w	sl, r4, #5312	; 0x14c0
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80045e2:	1860      	adds	r0, r4, r1
		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 80045e4:	f10a 0a04 	add.w	sl, sl, #4
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80045e8:	e9d6 3600 	ldrd	r3, r6, [r6]
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	eb46 72e2 	adc.w	r2, r6, r2, asr #31
		convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 80045f2:	f504 56af 	add.w	r6, r4, #5600	; 0x15e0
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80045f6:	5063      	str	r3, [r4, r1]
		convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 80045f8:	3618      	adds	r6, #24
		timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 80045fa:	6042      	str	r2, [r0, #4]
 80045fc:	4631      	mov	r1, r6
 80045fe:	f01a fd65 	bl	801f0cc <localtime_r>
		Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 8004602:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 8004606:	4a81      	ldr	r2, [pc, #516]	; (800480c <_ZN11customGraph12setTimeRangeEi.part.0+0x3d0>)
 8004608:	210a      	movs	r1, #10
 800460a:	3b64      	subs	r3, #100	; 0x64
 800460c:	4650      	mov	r0, sl
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	f8d5 3548 	ldr.w	r3, [r5, #1352]	; 0x548
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	f8d5 3544 	ldr.w	r3, [r5, #1348]	; 0x544
 800461a:	f011 f865 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		dateLabel.invalidate();
 800461e:	f504 509e 	add.w	r0, r4, #5056	; 0x13c0
 8004622:	f8c5 a410 	str.w	sl, [r5, #1040]	; 0x410
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004626:	f504 5a99 	add.w	sl, r4, #4896	; 0x1320
		dateLabel.invalidate();
 800462a:	3008      	adds	r0, #8
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800462c:	f10a 0a10 	add.w	sl, sl, #16
		dateLabel.invalidate();
 8004630:	9003      	str	r0, [sp, #12]
 8004632:	f00f f876 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
		dateLabel.resizeToCurrentText();
 8004636:	9803      	ldr	r0, [sp, #12]
 8004638:	f00b fbc4 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		dateLabel.invalidate();
 800463c:	9803      	ldr	r0, [sp, #12]
 800463e:	f00f f870 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
		updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004642:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 8004646:	464b      	mov	r3, r9
 8004648:	4659      	mov	r1, fp
 800464a:	4620      	mov	r0, r4
 800464c:	3210      	adds	r2, #16
 800464e:	f7ff fe99 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004652:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004656:	463b      	mov	r3, r7
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004658:	f504 5797 	add.w	r7, r4, #4832	; 0x12e0
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800465c:	4651      	mov	r1, sl
 800465e:	4620      	mov	r0, r4
 8004660:	321c      	adds	r2, #28
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004662:	3704      	adds	r7, #4
		updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004664:	f7ff fe8e 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004668:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 800466c:	4643      	mov	r3, r8
		updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 800466e:	f504 5894 	add.w	r8, r4, #4736	; 0x1280
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004672:	4639      	mov	r1, r7
 8004674:	4620      	mov	r0, r4
 8004676:	3208      	adds	r2, #8
		updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004678:	f108 0818 	add.w	r8, r8, #24
		updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 800467c:	f7ff fe82 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004680:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 8004684:	4641      	mov	r1, r8
 8004686:	4633      	mov	r3, r6
 8004688:	3214      	adds	r2, #20
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff fe7a 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004690:	f8b4 616e 	ldrh.w	r6, [r4, #366]	; 0x16e
 8004694:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
		customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel1.getTextWidth()/2) + 1);
 8004698:	4658      	mov	r0, fp
 800469a:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
 800469e:	4433      	add	r3, r6
 80046a0:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
 80046a4:	1af6      	subs	r6, r6, r3
 80046a6:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 80046aa:	b236      	sxth	r6, r6
 80046ac:	fb96 f6f3 	sdiv	r6, r6, r3
 80046b0:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 80046b4:	b2b6      	uxth	r6, r6
        return rect.width;
 80046b6:	4499      	add	r9, r3
 80046b8:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 80046bc:	f109 0901 	add.w	r9, r9, #1
 80046c0:	eba9 0903 	sub.w	r9, r9, r3
 80046c4:	f00b face 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 80046c8:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80046cc:	fa1f f989 	uxth.w	r9, r9
 80046d0:	444e      	add	r6, r9
 80046d2:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel2.getTextWidth()/2) + 1);
 80046d6:	4650      	mov	r0, sl
        rect.x = x;
 80046d8:	f8a5 6380 	strh.w	r6, [r5, #896]	; 0x380
 80046dc:	f8b4 616e 	ldrh.w	r6, [r4, #366]	; 0x16e
 80046e0:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
 80046e4:	4433      	add	r3, r6
 80046e6:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
 80046ea:	1af6      	subs	r6, r6, r3
 80046ec:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 80046f0:	b236      	sxth	r6, r6
 80046f2:	0076      	lsls	r6, r6, #1
 80046f4:	fb96 f6f3 	sdiv	r6, r6, r3
 80046f8:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 80046fc:	b2b6      	uxth	r6, r6
        return rect.width;
 80046fe:	4499      	add	r9, r3
 8004700:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 8004704:	f109 0901 	add.w	r9, r9, #1
 8004708:	eba9 0903 	sub.w	r9, r9, r3
 800470c:	f00b faaa 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004710:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 8004714:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
 8004718:	fa1f f989 	uxth.w	r9, r9
 800471c:	441a      	add	r2, r3
 800471e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004722:	444e      	add	r6, r9
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 800472a:	4638      	mov	r0, r7
 800472c:	b21b      	sxth	r3, r3
        rect.x = x;
 800472e:	f8a5 6334 	strh.w	r6, [r5, #820]	; 0x334
 8004732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004736:	f8d5 6628 	ldr.w	r6, [r5, #1576]	; 0x628
 800473a:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
 800473e:	fb93 f6f6 	sdiv	r6, r3, r6
 8004742:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 8004746:	b2b6      	uxth	r6, r6
        return rect.width;
 8004748:	4499      	add	r9, r3
 800474a:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 800474e:	f109 0901 	add.w	r9, r9, #1
 8004752:	eba9 0903 	sub.w	r9, r9, r3
 8004756:	f00b fa85 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 800475a:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 800475e:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
 8004762:	fa1f f989 	uxth.w	r9, r9
 8004766:	441a      	add	r2, r3
 8004768:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 800476c:	444e      	add	r6, r9
 800476e:	1a9b      	subs	r3, r3, r2
		customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004770:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
		customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 8004774:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004778:	4640      	mov	r0, r8
 800477a:	b21b      	sxth	r3, r3
        rect.x = x;
 800477c:	f8a5 62e8 	strh.w	r6, [r5, #744]	; 0x2e8
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	fb93 f3f2 	sdiv	r3, r3, r2
 8004786:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 800478a:	b29e      	uxth	r6, r3
        return rect.width;
 800478c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004790:	f8b4 40f0 	ldrh.w	r4, [r4, #240]	; 0xf0
 8004794:	4413      	add	r3, r2
 8004796:	3301      	adds	r3, #1
 8004798:	1b1c      	subs	r4, r3, r4
 800479a:	f00b fa63 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
		scrollCounter = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	b2a4      	uxth	r4, r4
		customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 80047a2:	4434      	add	r4, r6
 80047a4:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
        rect.x = x;
 80047a8:	f8a5 429c 	strh.w	r4, [r5, #668]	; 0x29c
		scrollCounter = 0;
 80047ac:	f205 551c 	addw	r5, r5, #1308	; 0x51c
 80047b0:	602b      	str	r3, [r5, #0]
}
 80047b2:	b005      	add	sp, #20
 80047b4:	ecbd 8b02 	vpop	{d8}
 80047b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80047bc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80047c0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80047c4:	ee17 3a10 	vmov	r3, s14
 80047c8:	3b01      	subs	r3, #1
 80047ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047ce:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80047d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047da:	ee17 2a90 	vmov	r2, s15
 80047de:	441a      	add	r2, r3
 80047e0:	4613      	mov	r3, r2
 80047e2:	e67a      	b.n	80044da <_ZN11customGraph12setTimeRangeEi.part.0+0x9e>
 80047e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80047e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80047ec:	ee17 3a10 	vmov	r3, s14
 80047f0:	3b01      	subs	r3, #1
 80047f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80047f6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	441a      	add	r2, r3
 8004808:	4613      	mov	r3, r2
 800480a:	e694      	b.n	8004536 <_ZN11customGraph12setTimeRangeEi.part.0+0xfa>
 800480c:	080228cd 	.word	0x080228cd

08004810 <_ZN11customGraph12setTimeRangeEi>:
	if(hours == 1 || hours ==8 || hours == 24)
 8004810:	2901      	cmp	r1, #1
 8004812:	d003      	beq.n	800481c <_ZN11customGraph12setTimeRangeEi+0xc>
 8004814:	f021 0310 	bic.w	r3, r1, #16
 8004818:	2b08      	cmp	r3, #8
 800481a:	d101      	bne.n	8004820 <_ZN11customGraph12setTimeRangeEi+0x10>
 800481c:	f7ff be0e 	b.w	800443c <_ZN11customGraph12setTimeRangeEi.part.0>
}
 8004820:	4770      	bx	lr

08004822 <_ZN11customGraph13setYAxisLabelEPKc>:
void customGraph::setYAxisLabel(const char* name){
 8004822:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Unicode::snprintf(y_axisNameBuffer, 10, name);
 8004824:	f500 54a6 	add.w	r4, r0, #5312	; 0x14c0
void customGraph::setYAxisLabel(const char* name){
 8004828:	4605      	mov	r5, r0
 800482a:	460a      	mov	r2, r1
	Unicode::snprintf(y_axisNameBuffer, 10, name);
 800482c:	210a      	movs	r1, #10
 800482e:	3418      	adds	r4, #24
 8004830:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8004834:	4620      	mov	r0, r4
 8004836:	f010 ff57 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	y_axisName.invalidate();
 800483a:	f505 50a0 	add.w	r0, r5, #5120	; 0x1400
 800483e:	f8c6 445c 	str.w	r4, [r6, #1116]	; 0x45c
 8004842:	3014      	adds	r0, #20
 8004844:	9001      	str	r0, [sp, #4]
 8004846:	f00e ff6c 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
	y_axisName.resizeToCurrentText();
 800484a:	9801      	ldr	r0, [sp, #4]
 800484c:	f00b faba 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	y_axisName.invalidate();
 8004850:	9801      	ldr	r0, [sp, #4]
 8004852:	f00e ff66 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
	y_axisName.setX(graph1.getX() + graph1.getGraphAreaMarginLeft() - (y_axisName.getTextWidth()/2));
 8004856:	f8b5 405c 	ldrh.w	r4, [r5, #92]	; 0x5c
 800485a:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 800485e:	9801      	ldr	r0, [sp, #4]
 8004860:	441c      	add	r4, r3
 8004862:	f00b f9ff 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004866:	b2a4      	uxth	r4, r4
 8004868:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 800486c:	f8a6 0418 	strh.w	r0, [r6, #1048]	; 0x418
}
 8004870:	b002      	add	sp, #8
 8004872:	bd70      	pop	{r4, r5, r6, pc}

08004874 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8004874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004878:	ed2d 8b02 	vpush	{d8}
 800487c:	b085      	sub	sp, #20
 800487e:	f500 599b 	add.w	r9, r0, #4960	; 0x1360
 8004882:	f500 5899 	add.w	r8, r0, #4896	; 0x1320
 8004886:	f500 5797 	add.w	r7, r0, #4832	; 0x12e0
 800488a:	ab04      	add	r3, sp, #16
 800488c:	f500 5a94 	add.w	sl, r0, #4736	; 0x1280
 8004890:	4604      	mov	r4, r0
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 8004892:	f100 0658 	add.w	r6, r0, #88	; 0x58
 8004896:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 800489a:	f109 091c 	add.w	r9, r9, #28
 800489e:	f108 0810 	add.w	r8, r8, #16
 80048a2:	3704      	adds	r7, #4
 80048a4:	f10a 0a18 	add.w	sl, sl, #24
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 80048a8:	e903 0006 	stmdb	r3, {r1, r2}
 80048ac:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 80048ae:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 80048b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0.0){
 80048b6:	4293      	cmp	r3, r2
 80048b8:	f280 8279 	bge.w	8004dae <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x53a>
 80048bc:	f205 531c 	addw	r3, r5, #1308	; 0x51c
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048cc:	f340 80e1 	ble.w	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
			scrollCounter -= (customGraphTimeRange/float(2.0));
 80048d0:	f8d5 2620 	ldr.w	r2, [r5, #1568]	; 0x620
 80048d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80048d8:	f8b0 116e 	ldrh.w	r1, [r0, #366]	; 0x16e
 80048dc:	ee07 2a10 	vmov	s14, r2
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80048e0:	f9b5 2380 	ldrsh.w	r2, [r5, #896]	; 0x380
			scrollCounter -= (customGraphTimeRange/float(2.0));
 80048e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80048e8:	3210      	adds	r2, #16
			scrollCounter -= (customGraphTimeRange/float(2.0));
 80048ea:	eee7 7a66 	vfms.f32	s15, s14, s13
 80048ee:	edc3 7a00 	vstr	s15, [r3]
 80048f2:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
 80048f6:	4419      	add	r1, r3
 80048f8:	f8b0 3098 	ldrh.w	r3, [r0, #152]	; 0x98
 80048fc:	1a5b      	subs	r3, r3, r1
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80048fe:	f9b0 105c 	ldrsh.w	r1, [r0, #92]	; 0x5c
 8004902:	f9b0 00c4 	ldrsh.w	r0, [r0, #196]	; 0xc4
 8004906:	4401      	add	r1, r0
 8004908:	fa01 f383 	sxtah	r3, r1, r3
 800490c:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004910:	1a5b      	subs	r3, r3, r1
 8004912:	429a      	cmp	r2, r3
 8004914:	f280 8262 	bge.w	8004ddc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x568>
 8004918:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800491c:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel2.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 8004920:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 8004924:	4419      	add	r1, r3
 8004926:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 800492a:	f9b5 2334 	ldrsh.w	r2, [r5, #820]	; 0x334
 800492e:	1a5b      	subs	r3, r3, r1
 8004930:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8004934:	3210      	adds	r2, #16
 8004936:	4401      	add	r1, r0
 8004938:	fa01 f383 	sxtah	r3, r1, r3
 800493c:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004940:	1a5b      	subs	r3, r3, r1
 8004942:	429a      	cmp	r2, r3
 8004944:	db29      	blt.n	800499a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x126>
				if(timeLabel2_pageCNTR > 0){
 8004946:	f8d5 3524 	ldr.w	r3, [r5, #1316]	; 0x524
 800494a:	2b00      	cmp	r3, #0
 800494c:	dd25      	ble.n	800499a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x126>
					timeLabel2_pageCNTR--;
 800494e:	3b01      	subs	r3, #1
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 8004950:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004954:	f241 5c90 	movw	ip, #5520	; 0x1590
					convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004958:	f504 5bac 	add.w	fp, r4, #5504	; 0x1580
					timeLabel2_pageCNTR--;
 800495c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 8004960:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004964:	eb04 000c 	add.w	r0, r4, ip
					convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004968:	f10b 0b18 	add.w	fp, fp, #24
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 800496c:	4353      	muls	r3, r2
 800496e:	223c      	movs	r2, #60	; 0x3c
 8004970:	6841      	ldr	r1, [r0, #4]
 8004972:	4353      	muls	r3, r2
 8004974:	f854 200c 	ldr.w	r2, [r4, ip]
 8004978:	1ad2      	subs	r2, r2, r3
 800497a:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 800497e:	f844 200c 	str.w	r2, [r4, ip]
    	localtime_r(timestamp, date_time);
 8004982:	4659      	mov	r1, fp
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 8004984:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 8004986:	f01a fba1 	bl	801f0cc <localtime_r>
					updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 800498a:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 800498e:	465b      	mov	r3, fp
 8004990:	4641      	mov	r1, r8
 8004992:	321c      	adds	r2, #28
 8004994:	4620      	mov	r0, r4
 8004996:	f7ff fcf5 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 800499a:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 800499e:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel3.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80049a2:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80049a6:	4419      	add	r1, r3
 80049a8:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80049ac:	f9b5 22e8 	ldrsh.w	r2, [r5, #744]	; 0x2e8
 80049b0:	1a5b      	subs	r3, r3, r1
 80049b2:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80049b6:	3210      	adds	r2, #16
 80049b8:	4401      	add	r1, r0
 80049ba:	fa01 f383 	sxtah	r3, r1, r3
 80049be:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80049c2:	1a5b      	subs	r3, r3, r1
 80049c4:	429a      	cmp	r2, r3
 80049c6:	db23      	blt.n	8004a10 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x19c>
				if(timeLabel3_pageCNTR > 0){
 80049c8:	f8d5 3528 	ldr.w	r3, [r5, #1320]	; 0x528
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	dd1f      	ble.n	8004a10 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x19c>
					timeLabel3_pageCNTR--;
 80049d0:	3b01      	subs	r3, #1
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80049d2:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 80049d6:	f504 50ae 	add.w	r0, r4, #5568	; 0x15c0
					timeLabel3_pageCNTR--;
 80049da:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80049de:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
					convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 80049e2:	f100 0b08 	add.w	fp, r0, #8
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80049e6:	4353      	muls	r3, r2
 80049e8:	223c      	movs	r2, #60	; 0x3c
 80049ea:	4353      	muls	r3, r2
 80049ec:	e9d0 2100 	ldrd	r2, r1, [r0]
 80049f0:	1ad2      	subs	r2, r2, r3
 80049f2:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
    	localtime_r(timestamp, date_time);
 80049f6:	4659      	mov	r1, fp
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80049f8:	e9c0 2300 	strd	r2, r3, [r0]
    	localtime_r(timestamp, date_time);
 80049fc:	f01a fb66 	bl	801f0cc <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004a00:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004a04:	465b      	mov	r3, fp
 8004a06:	4639      	mov	r1, r7
 8004a08:	3208      	adds	r2, #8
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f7ff fcba 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004a10:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004a14:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel4.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 8004a18:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 8004a1c:	4419      	add	r1, r3
 8004a1e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004a22:	f9b5 229c 	ldrsh.w	r2, [r5, #668]	; 0x29c
 8004a26:	1a5b      	subs	r3, r3, r1
 8004a28:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8004a2c:	3210      	adds	r2, #16
 8004a2e:	4401      	add	r1, r0
 8004a30:	fa01 f383 	sxtah	r3, r1, r3
 8004a34:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004a38:	1a5b      	subs	r3, r3, r1
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	db29      	blt.n	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
				if(timeLabel4_pageCNTR > 0){
 8004a3e:	f8d5 352c 	ldr.w	r3, [r5, #1324]	; 0x52c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dd25      	ble.n	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
					timeLabel4_pageCNTR--;
 8004a46:	3b01      	subs	r3, #1
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004a48:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004a4c:	f241 5cf0 	movw	ip, #5616	; 0x15f0
					convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 8004a50:	f504 5baf 	add.w	fp, r4, #5600	; 0x15e0
					timeLabel4_pageCNTR--;
 8004a54:	f8c5 352c 	str.w	r3, [r5, #1324]	; 0x52c
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004a58:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004a5c:	eb04 000c 	add.w	r0, r4, ip
					convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 8004a60:	f10b 0b18 	add.w	fp, fp, #24
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004a64:	4353      	muls	r3, r2
 8004a66:	223c      	movs	r2, #60	; 0x3c
 8004a68:	6841      	ldr	r1, [r0, #4]
 8004a6a:	4353      	muls	r3, r2
 8004a6c:	f854 200c 	ldr.w	r2, [r4, ip]
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 8004a76:	f844 200c 	str.w	r2, [r4, ip]
    	localtime_r(timestamp, date_time);
 8004a7a:	4659      	mov	r1, fp
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004a7c:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 8004a7e:	f01a fb25 	bl	801f0cc <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel4Buffer, &timeLabel4_time_tm);
 8004a82:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 8004a86:	465b      	mov	r3, fp
 8004a88:	4639      	mov	r1, r7
 8004a8a:	3214      	adds	r2, #20
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f7ff fc79 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		graph1.setGraphRangeX(0 + int(scrollCounter), (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + int(scrollCounter));
 8004a92:	f205 531c 	addw	r3, r5, #1308	; 0x51c
 8004a96:	4630      	mov	r0, r6
 8004a98:	edd3 7a00 	vldr	s15, [r3]
 8004a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa0:	ee17 ba90 	vmov	fp, s15
 8004aa4:	f7fe fc6a 	bl	800337c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
        return scaled2intX(graphRangeMinX);
 8004aa8:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
        return scaled2int(i, xScale);
 8004aac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        if (i >= 0)
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f2c0 82ad 	blt.w	8005010 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x79c>
            return ((i * 2 + scale) / scale) / 2;
 8004ab6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004aba:	fb93 f2f1 	sdiv	r2, r3, r1
 8004abe:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004ac2:	1052      	asrs	r2, r2, #1
 8004ac4:	1a82      	subs	r2, r0, r2
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	4630      	mov	r0, r6
 8004aca:	445a      	add	r2, fp
 8004acc:	f7fe fb17 	bl	80030fe <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		graph1.setGraphRangeYAuto(true,(graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f7fe fca1 	bl	8003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004ad6:	4683      	mov	fp, r0
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f7fe fc76 	bl	80033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004ade:	ebab 0300 	sub.w	r3, fp, r0
 8004ae2:	ee07 3a10 	vmov	s14, r3
 8004ae6:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004af2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004af6:	eec7 7a26 	vdiv.f32	s15, s14, s13
        const float fs = f * (float)scale;
 8004afa:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8004afe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b02:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	f2c0 828b 	blt.w	8005028 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x7b4>
            return (int)(fs + 0.5f);
 8004b12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8004b22:	2101      	movs	r1, #1
 8004b24:	4630      	mov	r0, r6
 8004b26:	f009 fde7 	bl	800e6f8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
		graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7fe fc74 	bl	8003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004b30:	4683      	mov	fp, r0
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fe fc49 	bl	80033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004b38:	f505 63c5 	add.w	r3, r5, #1576	; 0x628
 8004b3c:	ed93 8a00 	vldr	s16, [r3]
 8004b40:	ebab 0300 	sub.w	r3, fp, r0
 8004b44:	ee07 3a10 	vmov	s14, r3
 8004b48:	eef8 8ac8 	vcvt.f32.s32	s17, s16
 8004b4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b50:	eec7 7a28 	vdiv.f32	s15, s14, s17
        const float fs = f * (float)scale;
 8004b54:	ed95 7a7b 	vldr	s14, [r5, #492]	; 0x1ec
 8004b58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	f2c0 8272 	blt.w	8005050 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x7dc>
            return (int)(fs + 0.5f);
 8004b6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b78:	ee17 3a90 	vmov	r3, s15
 8004b7c:	2b00      	cmp	r3, #0
		graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004b7e:	4630      	mov	r0, r6
 8004b80:	bfb8      	it	lt
 8004b82:	425b      	neglt	r3, r3
 8004b84:	f8c5 31f0 	str.w	r3, [r5, #496]	; 0x1f0
 8004b88:	f7fe fc46 	bl	8003418 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004b8c:	4683      	mov	fp, r0
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7fe fc1b 	bl	80033ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004b94:	ebab 0300 	sub.w	r3, fp, r0
        const float fs = f * (float)scale;
 8004b98:	edd5 7a6b 	vldr	s15, [r5, #428]	; 0x1ac
 8004b9c:	ee07 3a10 	vmov	s14, r3
 8004ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004ba8:	eec7 6a28 	vdiv.f32	s13, s14, s17
 8004bac:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb4:	bf48      	it	mi
 8004bb6:	eef1 6a66 	vnegmi.f32	s13, s13
 8004bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
        if (fs >= 0)
 8004bbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc6:	f2c0 8257 	blt.w	8005078 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x804>
            return (int)(fs + 0.5f);
 8004bca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bd6:	ee17 3a90 	vmov	r3, s15
 8004bda:	2b00      	cmp	r3, #0
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004bdc:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*numberofGrid)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004be0:	f8d5 6624 	ldr.w	r6, [r5, #1572]	; 0x624
 8004be4:	ee18 ca10 	vmov	ip, s16
 8004be8:	bfb8      	it	lt
 8004bea:	425b      	neglt	r3, r3
 8004bec:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
 8004bf0:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004bf4:	440b      	add	r3, r1
 8004bf6:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 8004bfa:	1ac9      	subs	r1, r1, r3
 8004bfc:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
 8004c00:	4373      	muls	r3, r6
 8004c02:	b209      	sxth	r1, r1
 8004c04:	fb0c 6603 	mla	r6, ip, r3, r6
 8004c08:	3901      	subs	r1, #1
 8004c0a:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004c0e:	1a12      	subs	r2, r2, r0
 8004c10:	1a30      	subs	r0, r6, r0
 8004c12:	f7fe fe6e 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004c16:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004c1a:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
            return Q5(v + q5.v);
 8004c1e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c22:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004c26:	4431      	add	r1, r6
 8004c28:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*numberofGrid)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c2c:	f8c5 050c 	str.w	r0, [r5, #1292]	; 0x50c
 8004c30:	1a71      	subs	r1, r6, r1
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c32:	f8d5 6524 	ldr.w	r6, [r5, #1316]	; 0x524
 8004c36:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004c3a:	435e      	muls	r6, r3
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	9201      	str	r2, [sp, #4]
 8004c40:	b209      	sxth	r1, r1
 8004c42:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004c46:	3901      	subs	r1, #1
 8004c48:	fb02 3306 	mla	r3, r2, r6, r3
 8004c4c:	9a01      	ldr	r2, [sp, #4]
 8004c4e:	1a12      	subs	r2, r2, r0
 8004c50:	1a18      	subs	r0, r3, r0
 8004c52:	f7fe fe4e 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004c56:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004c5a:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 8004c5e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c62:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004c66:	4431      	add	r1, r6
 8004c68:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c6c:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
 8004c70:	1a71      	subs	r1, r6, r1
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004c72:	f8d5 6528 	ldr.w	r6, [r5, #1320]	; 0x528
 8004c76:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004c7a:	435e      	muls	r6, r3
 8004c7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004c80:	9201      	str	r2, [sp, #4]
 8004c82:	b209      	sxth	r1, r1
 8004c84:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004c88:	3901      	subs	r1, #1
 8004c8a:	fb02 3306 	mla	r3, r2, r6, r3
 8004c8e:	9a01      	ldr	r2, [sp, #4]
 8004c90:	1a12      	subs	r2, r2, r0
 8004c92:	1a18      	subs	r0, r3, r0
 8004c94:	f7fe fe2d 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004c98:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004c9c:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 8004ca0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*numberofGrid)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004ca4:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004ca8:	4431      	add	r1, r6
 8004caa:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004cae:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
 8004cb2:	1a71      	subs	r1, r6, r1
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*numberofGrid)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004cb4:	f8d5 652c 	ldr.w	r6, [r5, #1324]	; 0x52c
 8004cb8:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004cbc:	435e      	muls	r6, r3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	9201      	str	r2, [sp, #4]
 8004cc2:	b209      	sxth	r1, r1
 8004cc4:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004cc8:	3901      	subs	r1, #1
 8004cca:	fb02 3306 	mla	r3, r2, r6, r3
 8004cce:	9a01      	ldr	r2, [sp, #4]
 8004cd0:	1a12      	subs	r2, r2, r0
 8004cd2:	1a18      	subs	r0, r3, r0
 8004cd4:	f7fe fe0d 	bl	80038f2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8004cd8:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 8004cdc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8004ce0:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
		timeLabel1.setX(graph1.getX() + timeLabel1_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel1.getTextWidth()/2) + 1);
 8004ce4:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 8004ce8:	300c      	adds	r0, #12
 8004cea:	f7ff fb00 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004cee:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 8004cf2:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004cf6:	4683      	mov	fp, r0
 8004cf8:	4648      	mov	r0, r9
 8004cfa:	4433      	add	r3, r6
 8004cfc:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 8004d00:	3301      	adds	r3, #1
 8004d02:	1b9b      	subs	r3, r3, r6
 8004d04:	b29e      	uxth	r6, r3
 8004d06:	f00a ffad 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004d0a:	445e      	add	r6, fp
 8004d0c:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel2.setX(graph1.getX() + timeLabel2_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel2.getTextWidth()/2) + 1);
 8004d10:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 8004d14:	f8a5 6380 	strh.w	r6, [r5, #896]	; 0x380
 8004d18:	3010      	adds	r0, #16
 8004d1a:	f7ff fae8 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004d1e:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 8004d22:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004d26:	4681      	mov	r9, r0
 8004d28:	4640      	mov	r0, r8
 8004d2a:	4433      	add	r3, r6
 8004d2c:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 8004d30:	3301      	adds	r3, #1
 8004d32:	1b9b      	subs	r3, r3, r6
 8004d34:	b29e      	uxth	r6, r3
 8004d36:	f00a ff95 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004d3a:	444e      	add	r6, r9
 8004d3c:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 8004d40:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 8004d44:	f8a5 6334 	strh.w	r6, [r5, #820]	; 0x334
 8004d48:	3014      	adds	r0, #20
 8004d4a:	f7ff fad0 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004d4e:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 8004d52:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004d56:	4680      	mov	r8, r0
 8004d58:	4638      	mov	r0, r7
 8004d5a:	4433      	add	r3, r6
 8004d5c:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 8004d60:	3301      	adds	r3, #1
 8004d62:	1b9b      	subs	r3, r3, r6
 8004d64:	b29e      	uxth	r6, r3
 8004d66:	f00a ff7d 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004d6a:	4446      	add	r6, r8
 8004d6c:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004d70:	f504 50a8 	add.w	r0, r4, #5376	; 0x1500
 8004d74:	f8a5 62e8 	strh.w	r6, [r5, #744]	; 0x2e8
 8004d78:	3018      	adds	r0, #24
 8004d7a:	f7ff fab8 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004d7e:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8004d82:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004d86:	4606      	mov	r6, r0
        return rect.width;
 8004d88:	f8b4 40f0 	ldrh.w	r4, [r4, #240]	; 0xf0
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	4413      	add	r3, r2
 8004d90:	3301      	adds	r3, #1
 8004d92:	1b1b      	subs	r3, r3, r4
 8004d94:	b29c      	uxth	r4, r3
 8004d96:	f00a ff65 	bl	800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004d9a:	4434      	add	r4, r6
 8004d9c:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
        rect.x = x;
 8004da0:	f8a5 429c 	strh.w	r4, [r5, #668]	; 0x29c
	}
 8004da4:	b005      	add	sp, #20
 8004da6:	ecbd 8b02 	vpop	{d8}
 8004daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 8004dae:	f77f ae70 	ble.w	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7fe fae2 	bl	800337c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
        return usedCapacity;
 8004db8:	f9b4 1176 	ldrsh.w	r1, [r4, #374]	; 0x176
 8004dbc:	f8d5 2624 	ldr.w	r2, [r5, #1572]	; 0x624
 8004dc0:	1e4b      	subs	r3, r1, #1
 8004dc2:	1a80      	subs	r0, r0, r2
 8004dc4:	b21b      	sxth	r3, r3
        assert(index >= 0 && index < usedCapacity);
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db01      	blt.n	8004dce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x55a>
 8004dca:	428b      	cmp	r3, r1
 8004dcc:	db2c      	blt.n	8004e28 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5b4>
 8004dce:	4bb4      	ldr	r3, [pc, #720]	; (80050a0 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x82c>)
 8004dd0:	f240 61e5 	movw	r1, #1765	; 0x6e5
 8004dd4:	4ab3      	ldr	r2, [pc, #716]	; (80050a4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x830>)
 8004dd6:	48b4      	ldr	r0, [pc, #720]	; (80050a8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x834>)
 8004dd8:	f01a f814 	bl	801ee04 <__assert_func>
				if(timeLabel1_pageCNTR > 0){
 8004ddc:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f77f ad99 	ble.w	8004918 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xa4>
					timeLabel1_pageCNTR--;
 8004de6:	3b01      	subs	r3, #1
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 8004de8:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
 8004dec:	f504 50ab 	add.w	r0, r4, #5472	; 0x1560
					timeLabel1_pageCNTR--;
 8004df0:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 8004df4:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
					convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 8004df8:	f100 0b08 	add.w	fp, r0, #8
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 8004dfc:	4353      	muls	r3, r2
 8004dfe:	223c      	movs	r2, #60	; 0x3c
 8004e00:	4353      	muls	r3, r2
 8004e02:	e9d0 2100 	ldrd	r2, r1, [r0]
 8004e06:	1ad2      	subs	r2, r2, r3
 8004e08:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
    	localtime_r(timestamp, date_time);
 8004e0c:	4659      	mov	r1, fp
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 8004e0e:	e9c0 2300 	strd	r2, r3, [r0]
    	localtime_r(timestamp, date_time);
 8004e12:	f01a f95b 	bl	801f0cc <localtime_r>
					updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004e16:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 8004e1a:	465b      	mov	r3, fp
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	3210      	adds	r2, #16
 8004e20:	4620      	mov	r0, r4
 8004e22:	f7ff faaf 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004e26:	e577      	b.n	8004918 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xa4>
        return xValues[index];
 8004e28:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
 8004e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        return scaled2int(i, xScale);
 8004e30:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        if (i >= 0)
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f2c0 80df 	blt.w	8004ff8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x784>
            return ((i * 2 + scale) / scale) / 2;
 8004e3a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004e3e:	fb93 f3f1 	sdiv	r3, r3, r1
 8004e42:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004e46:	105b      	asrs	r3, r3, #1
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 8004e48:	4298      	cmp	r0, r3
 8004e4a:	f6bf ae22 	bge.w	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004e4e:	f8d5 3620 	ldr.w	r3, [r5, #1568]	; 0x620
 8004e52:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004e56:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004e5a:	ee07 3a90 	vmov	s15, r3
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0.0){
 8004e5e:	f205 531c 	addw	r3, r5, #1308	; 0x51c
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004e62:	f9b5 1380 	ldrsh.w	r1, [r5, #896]	; 0x380
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e6a:	edd3 7a00 	vldr	s15, [r3]
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004e6e:	310f      	adds	r1, #15
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004e70:	eee7 7a26 	vfma.f32	s15, s14, s13
 8004e74:	edc3 7a00 	vstr	s15, [r3]
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004e78:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8004e7c:	4403      	add	r3, r0
 8004e7e:	f9b4 00f0 	ldrsh.w	r0, [r4, #240]	; 0xf0
 8004e82:	1a1b      	subs	r3, r3, r0
 8004e84:	4299      	cmp	r1, r3
 8004e86:	da1f      	bge.n	8004ec8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x654>
				timeLabel1_pageCNTR++;
 8004e88:	f8d5 3520 	ldr.w	r3, [r5, #1312]	; 0x520
				timeLabel1_time = timeLabel1_time + customGraphInterval*numberofGrid*60;
 8004e8c:	f504 50ab 	add.w	r0, r4, #5472	; 0x1560
				timeLabel1_pageCNTR++;
 8004e90:	3301      	adds	r3, #1
				convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);
 8004e92:	f100 0b08 	add.w	fp, r0, #8
				timeLabel1_pageCNTR++;
 8004e96:	f8c5 3520 	str.w	r3, [r5, #1312]	; 0x520
				timeLabel1_time = timeLabel1_time + customGraphInterval*numberofGrid*60;
 8004e9a:	f8d5 3628 	ldr.w	r3, [r5, #1576]	; 0x628
 8004e9e:	435a      	muls	r2, r3
 8004ea0:	233c      	movs	r3, #60	; 0x3c
 8004ea2:	435a      	muls	r2, r3
 8004ea4:	e9d0 3100 	ldrd	r3, r1, [r0]
 8004ea8:	18d3      	adds	r3, r2, r3
 8004eaa:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    	localtime_r(timestamp, date_time);
 8004eae:	4659      	mov	r1, fp
				timeLabel1_time = timeLabel1_time + customGraphInterval*numberofGrid*60;
 8004eb0:	e9c0 3200 	strd	r3, r2, [r0]
    	localtime_r(timestamp, date_time);
 8004eb4:	f01a f90a 	bl	801f0cc <localtime_r>
				updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004eb8:	f504 52a5 	add.w	r2, r4, #5280	; 0x14a0
 8004ebc:	465b      	mov	r3, fp
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	3210      	adds	r2, #16
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7ff fa5e 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel2.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004ec8:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004ecc:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8004ed0:	f9b5 2334 	ldrsh.w	r2, [r5, #820]	; 0x334
 8004ed4:	440b      	add	r3, r1
 8004ed6:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004eda:	320f      	adds	r2, #15
 8004edc:	1a5b      	subs	r3, r3, r1
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	da27      	bge.n	8004f32 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x6be>
				timeLabel2_pageCNTR++;
 8004ee2:	f8d5 3524 	ldr.w	r3, [r5, #1316]	; 0x524
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 8004ee6:	f241 5c90 	movw	ip, #5520	; 0x1590
 8004eea:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
				convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004eee:	f504 5bac 	add.w	fp, r4, #5504	; 0x1580
				timeLabel2_pageCNTR++;
 8004ef2:	3301      	adds	r3, #1
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 8004ef4:	eb04 000c 	add.w	r0, r4, ip
				convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);
 8004ef8:	f10b 0b18 	add.w	fp, fp, #24
				timeLabel2_pageCNTR++;
 8004efc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 8004f00:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004f04:	6841      	ldr	r1, [r0, #4]
 8004f06:	4353      	muls	r3, r2
 8004f08:	223c      	movs	r2, #60	; 0x3c
 8004f0a:	4353      	muls	r3, r2
 8004f0c:	f854 200c 	ldr.w	r2, [r4, ip]
 8004f10:	189a      	adds	r2, r3, r2
 8004f12:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8004f16:	f844 200c 	str.w	r2, [r4, ip]
    	localtime_r(timestamp, date_time);
 8004f1a:	4659      	mov	r1, fp
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 8004f1c:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 8004f1e:	f01a f8d5 	bl	801f0cc <localtime_r>
				updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004f22:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004f26:	465b      	mov	r3, fp
 8004f28:	4641      	mov	r1, r8
 8004f2a:	321c      	adds	r2, #28
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff fa29 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel3.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004f32:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004f36:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8004f3a:	f9b5 22e8 	ldrsh.w	r2, [r5, #744]	; 0x2e8
 8004f3e:	440b      	add	r3, r1
 8004f40:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004f44:	320f      	adds	r2, #15
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	da21      	bge.n	8004f90 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x71c>
				timeLabel3_pageCNTR++;
 8004f4c:	f8d5 3528 	ldr.w	r3, [r5, #1320]	; 0x528
				timeLabel3_time = timeLabel3_time + customGraphInterval*numberofGrid*60;
 8004f50:	f504 50ae 	add.w	r0, r4, #5568	; 0x15c0
 8004f54:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
				timeLabel3_pageCNTR++;
 8004f58:	3301      	adds	r3, #1
				convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);
 8004f5a:	f100 0b08 	add.w	fp, r0, #8
				timeLabel3_pageCNTR++;
 8004f5e:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
				timeLabel3_time = timeLabel3_time + customGraphInterval*numberofGrid*60;
 8004f62:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004f66:	4353      	muls	r3, r2
 8004f68:	223c      	movs	r2, #60	; 0x3c
 8004f6a:	4353      	muls	r3, r2
 8004f6c:	e9d0 2100 	ldrd	r2, r1, [r0]
 8004f70:	189a      	adds	r2, r3, r2
 8004f72:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    	localtime_r(timestamp, date_time);
 8004f76:	4659      	mov	r1, fp
				timeLabel3_time = timeLabel3_time + customGraphInterval*numberofGrid*60;
 8004f78:	e9c0 2300 	strd	r2, r3, [r0]
    	localtime_r(timestamp, date_time);
 8004f7c:	f01a f8a6 	bl	801f0cc <localtime_r>
				updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004f80:	f504 52a4 	add.w	r2, r4, #5248	; 0x1480
 8004f84:	465b      	mov	r3, fp
 8004f86:	4639      	mov	r1, r7
 8004f88:	3208      	adds	r2, #8
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f7ff f9fa 	bl	8004384 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel4.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004f90:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004f94:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8004f98:	f9b5 229c 	ldrsh.w	r2, [r5, #668]	; 0x29c
 8004f9c:	440b      	add	r3, r1
 8004f9e:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004fa2:	320f      	adds	r2, #15
 8004fa4:	1a5b      	subs	r3, r3, r1
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	f6bf ad73 	bge.w	8004a92 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x21e>
				timeLabel4_pageCNTR++;
 8004fac:	f8d5 352c 	ldr.w	r3, [r5, #1324]	; 0x52c
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 8004fb0:	f241 5cf0 	movw	ip, #5616	; 0x15f0
 8004fb4:	f8d5 2628 	ldr.w	r2, [r5, #1576]	; 0x628
				convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 8004fb8:	f504 5baf 	add.w	fp, r4, #5600	; 0x15e0
				timeLabel4_pageCNTR++;
 8004fbc:	3301      	adds	r3, #1
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 8004fbe:	eb04 000c 	add.w	r0, r4, ip
				convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);
 8004fc2:	f10b 0b18 	add.w	fp, fp, #24
				timeLabel4_pageCNTR++;
 8004fc6:	f8c5 352c 	str.w	r3, [r5, #1324]	; 0x52c
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 8004fca:	f8d5 3624 	ldr.w	r3, [r5, #1572]	; 0x624
 8004fce:	6841      	ldr	r1, [r0, #4]
 8004fd0:	4353      	muls	r3, r2
 8004fd2:	223c      	movs	r2, #60	; 0x3c
 8004fd4:	4353      	muls	r3, r2
 8004fd6:	f854 200c 	ldr.w	r2, [r4, ip]
 8004fda:	189a      	adds	r2, r3, r2
 8004fdc:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8004fe0:	f844 200c 	str.w	r2, [r4, ip]
    	localtime_r(timestamp, date_time);
 8004fe4:	4659      	mov	r1, fp
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 8004fe6:	6043      	str	r3, [r0, #4]
    	localtime_r(timestamp, date_time);
 8004fe8:	f01a f870 	bl	801f0cc <localtime_r>
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004fec:	f504 52a3 	add.w	r2, r4, #5216	; 0x1460
 8004ff0:	465b      	mov	r3, fp
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	3214      	adds	r2, #20
 8004ff6:	e549      	b.n	8004a8c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x218>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004ff8:	f06f 0c01 	mvn.w	ip, #1
 8004ffc:	fb0c 1303 	mla	r3, ip, r3, r1
 8005000:	3b01      	subs	r3, #1
 8005002:	fb93 f3f1 	sdiv	r3, r3, r1
 8005006:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800500a:	105b      	asrs	r3, r3, #1
 800500c:	425b      	negs	r3, r3
 800500e:	e71b      	b.n	8004e48 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5d4>
 8005010:	f06f 0201 	mvn.w	r2, #1
 8005014:	fb02 1203 	mla	r2, r2, r3, r1
 8005018:	3a01      	subs	r2, #1
 800501a:	fb92 f2f1 	sdiv	r2, r2, r1
 800501e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8005022:	1052      	asrs	r2, r2, #1
 8005024:	4252      	negs	r2, r2
 8005026:	e54d      	b.n	8004ac4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x250>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8005028:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800502c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005030:	ee17 3a10 	vmov	r3, s14
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800503a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005046:	ee17 3a90 	vmov	r3, s15
 800504a:	4413      	add	r3, r2
 800504c:	461a      	mov	r2, r3
 800504e:	e568      	b.n	8004b22 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x2ae>
 8005050:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005054:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005058:	ee17 3a10 	vmov	r3, s14
 800505c:	3b01      	subs	r3, #1
 800505e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005062:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800506e:	ee17 2a90 	vmov	r2, s15
 8005072:	441a      	add	r2, r3
 8005074:	4613      	mov	r3, r2
 8005076:	e581      	b.n	8004b7c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x308>
 8005078:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800507c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005080:	ee17 3a10 	vmov	r3, s14
 8005084:	3b01      	subs	r3, #1
 8005086:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800508a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800508e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005096:	ee17 2a90 	vmov	r2, s15
 800509a:	441a      	add	r2, r3
 800509c:	4613      	mov	r3, r2
 800509e:	e59c      	b.n	8004bda <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x366>
 80050a0:	0802218c 	.word	0x0802218c
 80050a4:	08022268 	.word	0x08022268
 80050a8:	080221fd 	.word	0x080221fd

080050ac <_ZN11customGraph12clearAllDataEv>:

void customGraph::clearAllData()
{
	graph1.clear();
 80050ac:	3058      	adds	r0, #88	; 0x58
 80050ae:	f009 bb1d 	b.w	800e6ec <_ZN8touchgfx17AbstractDataGraph5clearEv>
	...

080050b4 <_ZN11customGraph8addPointExf>:
{
 80050b4:	b530      	push	{r4, r5, lr}
	if(firstDataTaken == 0)
 80050b6:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
{
 80050ba:	4604      	mov	r4, r0
 80050bc:	ed2d 8b02 	vpush	{d8}
 80050c0:	b08d      	sub	sp, #52	; 0x34
	if(firstDataTaken == 0)
 80050c2:	f895 155c 	ldrb.w	r1, [r5, #1372]	; 0x55c
{
 80050c6:	eeb0 8a40 	vmov.f32	s16, s0
 80050ca:	e9cd 2300 	strd	r2, r3, [sp]
	if(firstDataTaken == 0)
 80050ce:	2900      	cmp	r1, #0
 80050d0:	d150      	bne.n	8005174 <_ZN11customGraph8addPointExf+0xc0>
		firstDataTaken = 1;
 80050d2:	2101      	movs	r1, #1
		firstDataTime = x;
 80050d4:	f500 50a9 	add.w	r0, r0, #5408	; 0x1520
		firstDataTaken = 1;
 80050d8:	f885 155c 	strb.w	r1, [r5, #1372]	; 0x55c
    	localtime_r(timestamp, date_time);
 80050dc:	f504 51a9 	add.w	r1, r4, #5408	; 0x1520
		firstDataTime = x;
 80050e0:	3010      	adds	r0, #16
 80050e2:	3118      	adds	r1, #24
 80050e4:	e9c0 2300 	strd	r2, r3, [r0]
 80050e8:	f019 fff0 	bl	801f0cc <localtime_r>
        const float fs = f * (float)scale;
 80050ec:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 80050f0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800524c <_ZN11customGraph8addPointExf+0x198>
		customGraphBase::graph1.addDataPoint(float(0.0), y);
 80050f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005108:	db20      	blt.n	800514c <_ZN11customGraph8addPointExf+0x98>
            return (int)(fs + 0.5f);
 800510a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800510e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005116:	ee17 1a90 	vmov	r1, s15
        const float fs = f * (float)scale;
 800511a:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
 800511e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8005122:	ee20 0a08 	vmul.f32	s0, s0, s16
        if (fs >= 0)
 8005126:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800512a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512e:	db78      	blt.n	8005222 <_ZN11customGraph8addPointExf+0x16e>
            return (int)(fs + 0.5f);
 8005130:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005134:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005138:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800513c:	ee17 2a90 	vmov	r2, s15
        return addValue(float2scaledX(x), float2scaledY(y));
 8005140:	f009 fe44 	bl	800edcc <_ZN8touchgfx9GraphData8addValueEii>
}
 8005144:	b00d      	add	sp, #52	; 0x34
 8005146:	ecbd 8b02 	vpop	{d8}
 800514a:	bd30      	pop	{r4, r5, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800514c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005150:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005154:	ee17 3a10 	vmov	r3, s14
 8005158:	1e59      	subs	r1, r3, #1
 800515a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800515e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005166:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800516a:	ee17 3a90 	vmov	r3, s15
 800516e:	440b      	add	r3, r1
 8005170:	4619      	mov	r1, r3
 8005172:	e7d2      	b.n	800511a <_ZN11customGraph8addPointExf+0x66>
 8005174:	a903      	add	r1, sp, #12
 8005176:	4668      	mov	r0, sp
 8005178:	f019 ffa8 	bl	801f0cc <localtime_r>
		if(x_tm.tm_year == firstDataTime_tm.tm_year && x_tm.tm_mon == firstDataTime_tm.tm_mon && (x_tm.tm_mday - firstDataTime_tm.tm_mday) < 2)
 800517c:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 8005180:	9a08      	ldr	r2, [sp, #32]
 8005182:	429a      	cmp	r2, r3
 8005184:	d1de      	bne.n	8005144 <_ZN11customGraph8addPointExf+0x90>
 8005186:	f8d5 3548 	ldr.w	r3, [r5, #1352]	; 0x548
 800518a:	9a07      	ldr	r2, [sp, #28]
 800518c:	429a      	cmp	r2, r3
 800518e:	d1d9      	bne.n	8005144 <_ZN11customGraph8addPointExf+0x90>
 8005190:	f8d5 2544 	ldr.w	r2, [r5, #1348]	; 0x544
 8005194:	9b06      	ldr	r3, [sp, #24]
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	2b01      	cmp	r3, #1
 800519a:	dcd3      	bgt.n	8005144 <_ZN11customGraph8addPointExf+0x90>
			x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 800519c:	f8d5 1540 	ldr.w	r1, [r5, #1344]	; 0x540
			customGraphBase::graph1.addDataPoint(float(x_axisVal), y);
 80051a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
			x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 80051a4:	9a05      	ldr	r2, [sp, #20]
        const float fs = f * (float)scale;
 80051a6:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80051aa:	1a52      	subs	r2, r2, r1
 80051ac:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80051b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80051b4:	434b      	muls	r3, r1
 80051b6:	213c      	movs	r1, #60	; 0x3c
 80051b8:	fb01 3302 	mla	r3, r1, r2, r3
 80051bc:	f8d5 153c 	ldr.w	r1, [r5, #1340]	; 0x53c
 80051c0:	9a04      	ldr	r2, [sp, #16]
 80051c2:	1a52      	subs	r2, r2, r1
 80051c4:	4413      	add	r3, r2
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051ce:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051da:	db0e      	blt.n	80051fa <_ZN11customGraph8addPointExf+0x146>
            return (int)(fs + 0.5f);
 80051dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051e8:	ee17 1a90 	vmov	r1, s15
        const float fs = f * (float)scale;
 80051ec:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80051f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051f4:	ee27 0a88 	vmul.f32	s0, s15, s16
 80051f8:	e795      	b.n	8005126 <_ZN11customGraph8addPointExf+0x72>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80051fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80051fe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005202:	ee17 3a10 	vmov	r3, s14
 8005206:	1e59      	subs	r1, r3, #1
 8005208:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800520c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8005210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005218:	ee17 3a90 	vmov	r3, s15
 800521c:	440b      	add	r3, r1
 800521e:	4619      	mov	r1, r3
 8005220:	e7e4      	b.n	80051ec <_ZN11customGraph8addPointExf+0x138>
 8005222:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800522a:	ee17 3a90 	vmov	r3, s15
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005234:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8005238:	ee30 0a07 	vadd.f32	s0, s0, s14
 800523c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005240:	ee10 3a10 	vmov	r3, s0
 8005244:	4413      	add	r3, r2
 8005246:	461a      	mov	r2, r3
 8005248:	e77a      	b.n	8005140 <_ZN11customGraph8addPointExf+0x8c>
 800524a:	bf00      	nop
 800524c:	00000000 	.word	0x00000000

08005250 <_ZN11customGraph10initializeEv>:
{
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4604      	mov	r4, r0
    customGraphBase::initialize();
 8005254:	f7fe fa03 	bl	800365e <_ZN15customGraphBase10initializeEv>
    firstDataTime = 1681492804;			// 1681492804 --> 14 April 2023 17:20			//firstDataTime = time(NULL);
 8005258:	f504 55a9 	add.w	r5, r4, #5408	; 0x1520
 800525c:	f504 51a9 	add.w	r1, r4, #5408	; 0x1520
 8005260:	a30e      	add	r3, pc, #56	; (adr r3, 800529c <_ZN11customGraph10initializeEv+0x4c>)
 8005262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005266:	3510      	adds	r5, #16
 8005268:	3118      	adds	r1, #24
 800526a:	e9c5 2300 	strd	r2, r3, [r5]
 800526e:	4628      	mov	r0, r5
 8005270:	f019 ff2c 	bl	801f0cc <localtime_r>
    addPoint(firstDataTime, float(1.0));
 8005274:	4620      	mov	r0, r4
 8005276:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800527a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800527e:	f7ff ff19 	bl	80050b4 <_ZN11customGraph8addPointExf>
	if(hours == 1 || hours ==8 || hours == 24)
 8005282:	4620      	mov	r0, r4
 8005284:	2118      	movs	r1, #24
 8005286:	f7ff f8d9 	bl	800443c <_ZN11customGraph12setTimeRangeEi.part.0>
	setYAxisLabel("Voltage");
 800528a:	4620      	mov	r0, r4
 800528c:	4902      	ldr	r1, [pc, #8]	; (8005298 <_ZN11customGraph10initializeEv+0x48>)
}
 800528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	setYAxisLabel("Voltage");
 8005292:	f7ff bac6 	b.w	8004822 <_ZN11customGraph13setYAxisLabelEPKc>
 8005296:	bf00      	nop
 8005298:	080228dc 	.word	0x080228dc
 800529c:	64398b44 	.word	0x64398b44
 80052a0:	00000000 	.word	0x00000000

080052a4 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80052a4:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80052a6:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 80052aa:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80052ac:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80052ae:	2302      	movs	r3, #2
 80052b0:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80052b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80052b6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80052ba:	4770      	bx	lr

080052bc <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80052bc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80052c0:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80052c2:	bf04      	itt	eq
 80052c4:	2300      	moveq	r3, #0
 80052c6:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 80052ca:	2000      	movs	r0, #0
 80052cc:	4770      	bx	lr

080052ce <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80052ce:	2000      	movs	r0, #0
 80052d0:	4770      	bx	lr

080052d2 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80052d2:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052d4:	6904      	ldr	r4, [r0, #16]
 80052d6:	8900      	ldrh	r0, [r0, #8]
 80052d8:	46a4      	mov	ip, r4
}
 80052da:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80052de:	4760      	bx	ip

080052e0 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80052e0:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052e2:	68c4      	ldr	r4, [r0, #12]
 80052e4:	8900      	ldrh	r0, [r0, #8]
 80052e6:	46a4      	mov	ip, r4
}
 80052e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052ec:	4760      	bx	ip

080052ee <FT6X06_GestureConfig>:
{
 80052ee:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80052f2:	f100 0818 	add.w	r8, r0, #24
{
 80052f6:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80052f8:	7809      	ldrb	r1, [r1, #0]
 80052fa:	4640      	mov	r0, r8
 80052fc:	f000 f918 	bl	8005530 <ft6x06_radian_value>
 8005300:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005302:	f899 1004 	ldrb.w	r1, [r9, #4]
 8005306:	4640      	mov	r0, r8
 8005308:	f000 f91e 	bl	8005548 <ft6x06_offset_left_right>
 800530c:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800530e:	f899 1008 	ldrb.w	r1, [r9, #8]
 8005312:	4640      	mov	r0, r8
 8005314:	f000 f924 	bl	8005560 <ft6x06_offset_up_down>
 8005318:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800531a:	f899 100c 	ldrb.w	r1, [r9, #12]
 800531e:	4640      	mov	r0, r8
 8005320:	f000 f92a 	bl	8005578 <ft6x06_disatnce_left_right>
 8005324:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005326:	f899 1010 	ldrb.w	r1, [r9, #16]
 800532a:	4640      	mov	r0, r8
 800532c:	f000 f930 	bl	8005590 <ft6x06_distance_up_down>
 8005330:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005332:	f899 1014 	ldrb.w	r1, [r9, #20]
 8005336:	4640      	mov	r0, r8
 8005338:	f000 f936 	bl	80055a8 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800533c:	42c5      	cmn	r5, r0
}
 800533e:	bf14      	ite	ne
 8005340:	f04f 30ff 	movne.w	r0, #4294967295
 8005344:	2000      	moveq	r0, #0
 8005346:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

0800534a <FT6X06_ReadID>:
{
 800534a:	b513      	push	{r0, r1, r4, lr}
 800534c:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800534e:	3018      	adds	r0, #24
 8005350:	f10d 0107 	add.w	r1, sp, #7
 8005354:	f000 f940 	bl	80055d8 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005358:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800535c:	6023      	str	r3, [r4, #0]
}
 800535e:	b002      	add	sp, #8
 8005360:	bd10      	pop	{r4, pc}

08005362 <FT6X06_GetState>:
{
 8005362:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005364:	f100 0518 	add.w	r5, r0, #24
{
 8005368:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800536a:	a901      	add	r1, sp, #4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f8d2 	bl	8005516 <ft6x06_td_status>
 8005372:	bb08      	cbnz	r0, 80053b8 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005374:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005378:	2b02      	cmp	r3, #2
 800537a:	bf98      	it	ls
 800537c:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800537e:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005380:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005382:	2103      	movs	r1, #3
 8005384:	4628      	mov	r0, r5
 8005386:	eb0d 0203 	add.w	r2, sp, r3
 800538a:	f000 f8b1 	bl	80054f0 <ft6x06_read_reg>
 800538e:	b9b0      	cbnz	r0, 80053be <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005390:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005394:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800539e:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80053a0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80053a4:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80053a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60a3      	str	r3, [r4, #8]
}
 80053b4:	b003      	add	sp, #12
 80053b6:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80053b8:	f04f 30ff 	mov.w	r0, #4294967295
 80053bc:	e7df      	b.n	800537e <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80053be:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80053c2:	e7f7      	b.n	80053b4 <FT6X06_GetState+0x52>

080053c4 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80053c4:	3018      	adds	r0, #24
 80053c6:	f000 b8a1 	b.w	800550c <ft6x06_gest_id>

080053ca <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80053ca:	2101      	movs	r1, #1
 80053cc:	3018      	adds	r0, #24
 80053ce:	f000 b8f7 	b.w	80055c0 <ft6x06_g_mode>

080053d2 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80053d2:	2100      	movs	r1, #0
 80053d4:	3018      	adds	r0, #24
 80053d6:	f000 b8f3 	b.w	80055c0 <ft6x06_g_mode>

080053da <FT6X06_Init>:
{
 80053da:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80053dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80053e0:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80053e2:	b96b      	cbnz	r3, 8005400 <FT6X06_Init+0x26>
    pObj->IO.Init();
 80053e4:	6803      	ldr	r3, [r0, #0]
 80053e6:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80053e8:	4620      	mov	r0, r4
 80053ea:	f7ff fff2 	bl	80053d2 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80053ee:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80053f0:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80053f4:	bf18      	it	ne
 80053f6:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80053f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 80053fc:	4240      	negs	r0, r0
}
 80053fe:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 8005400:	2000      	movs	r0, #0
  return ret;
 8005402:	e7fc      	b.n	80053fe <FT6X06_Init+0x24>

08005404 <FT6X06_ClearIT>:
 8005404:	2000      	movs	r0, #0
 8005406:	4770      	bx	lr

08005408 <FT6X06_GetMultiTouchState>:
{
 8005408:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800540a:	f100 0518 	add.w	r5, r0, #24
{
 800540e:	b085      	sub	sp, #20
 8005410:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005412:	4628      	mov	r0, r5
 8005414:	a901      	add	r1, sp, #4
 8005416:	f000 f87e 	bl	8005516 <ft6x06_td_status>
 800541a:	2800      	cmp	r0, #0
 800541c:	d145      	bne.n	80054aa <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800541e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005422:	2b02      	cmp	r3, #2
 8005424:	bf98      	it	ls
 8005426:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005428:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800542a:	230c      	movs	r3, #12
 800542c:	aa01      	add	r2, sp, #4
 800542e:	2103      	movs	r1, #3
 8005430:	4628      	mov	r0, r5
 8005432:	f000 f85d 	bl	80054f0 <ft6x06_read_reg>
 8005436:	2800      	cmp	r0, #0
 8005438:	d13a      	bne.n	80054b0 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800543a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800543e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005442:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005444:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005446:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800544a:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800544c:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800544e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005452:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005456:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005458:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800545c:	021b      	lsls	r3, r3, #8
 800545e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005462:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005464:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005468:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 800546a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800546e:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005470:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005474:	091b      	lsrs	r3, r3, #4
 8005476:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005478:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800547a:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800547c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005480:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005482:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005484:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005488:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800548a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005494:	430b      	orrs	r3, r1
 8005496:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005498:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800549c:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 800549e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80054a6:	b005      	add	sp, #20
 80054a8:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80054aa:	f04f 30ff 	mov.w	r0, #4294967295
 80054ae:	e7bb      	b.n	8005428 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80054b0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80054b4:	e7f7      	b.n	80054a6 <FT6X06_GetMultiTouchState+0x9e>
	...

080054b8 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80054b8:	b190      	cbz	r0, 80054e0 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80054ba:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80054bc:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80054be:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80054c0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80054c2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80054c4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054c6:	68ca      	ldr	r2, [r1, #12]
 80054c8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80054ca:	690a      	ldr	r2, [r1, #16]
 80054cc:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80054ce:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80054d0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80054d2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <FT6X06_RegisterBusIO+0x30>)
 80054d6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <FT6X06_RegisterBusIO+0x34>)
 80054da:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80054dc:	b103      	cbz	r3, 80054e0 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80054de:	4718      	bx	r3
}
 80054e0:	f04f 30ff 	mov.w	r0, #4294967295
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	080052d3 	.word	0x080052d3
 80054ec:	080052e1 	.word	0x080052e1

080054f0 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80054f0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80054f2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80054f6:	46a4      	mov	ip, r4
}
 80054f8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80054fc:	4760      	bx	ip

080054fe <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80054fe:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005500:	6804      	ldr	r4, [r0, #0]
 8005502:	6880      	ldr	r0, [r0, #8]
 8005504:	46a4      	mov	ip, r4
}
 8005506:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800550a:	4760      	bx	ip

0800550c <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800550c:	2301      	movs	r3, #1
{
 800550e:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005510:	4619      	mov	r1, r3
 8005512:	f7ff bfed 	b.w	80054f0 <ft6x06_read_reg>

08005516 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005516:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005518:	460a      	mov	r2, r1
{
 800551a:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800551c:	2301      	movs	r3, #1
 800551e:	2102      	movs	r1, #2
 8005520:	f7ff ffe6 	bl	80054f0 <ft6x06_read_reg>
  
  if(ret == 0)
 8005524:	b918      	cbnz	r0, 800552e <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005526:	7823      	ldrb	r3, [r4, #0]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800552e:	bd10      	pop	{r4, pc}

08005530 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005530:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005532:	2301      	movs	r3, #1
{
 8005534:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005538:	f10d 0207 	add.w	r2, sp, #7
 800553c:	2191      	movs	r1, #145	; 0x91
 800553e:	f7ff ffde 	bl	80054fe <ft6x06_write_reg>
}
 8005542:	b003      	add	sp, #12
 8005544:	f85d fb04 	ldr.w	pc, [sp], #4

08005548 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005548:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800554a:	2301      	movs	r3, #1
{
 800554c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005550:	f10d 0207 	add.w	r2, sp, #7
 8005554:	2192      	movs	r1, #146	; 0x92
 8005556:	f7ff ffd2 	bl	80054fe <ft6x06_write_reg>
}
 800555a:	b003      	add	sp, #12
 800555c:	f85d fb04 	ldr.w	pc, [sp], #4

08005560 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005560:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005562:	2301      	movs	r3, #1
{
 8005564:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005568:	f10d 0207 	add.w	r2, sp, #7
 800556c:	2193      	movs	r1, #147	; 0x93
 800556e:	f7ff ffc6 	bl	80054fe <ft6x06_write_reg>
}
 8005572:	b003      	add	sp, #12
 8005574:	f85d fb04 	ldr.w	pc, [sp], #4

08005578 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005578:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800557a:	2301      	movs	r3, #1
{
 800557c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005580:	f10d 0207 	add.w	r2, sp, #7
 8005584:	2194      	movs	r1, #148	; 0x94
 8005586:	f7ff ffba 	bl	80054fe <ft6x06_write_reg>
}
 800558a:	b003      	add	sp, #12
 800558c:	f85d fb04 	ldr.w	pc, [sp], #4

08005590 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005590:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005592:	2301      	movs	r3, #1
{
 8005594:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005598:	f10d 0207 	add.w	r2, sp, #7
 800559c:	2195      	movs	r1, #149	; 0x95
 800559e:	f7ff ffae 	bl	80054fe <ft6x06_write_reg>
}
 80055a2:	b003      	add	sp, #12
 80055a4:	f85d fb04 	ldr.w	pc, [sp], #4

080055a8 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 80055a8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80055aa:	2301      	movs	r3, #1
{
 80055ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80055b0:	f10d 0207 	add.w	r2, sp, #7
 80055b4:	2196      	movs	r1, #150	; 0x96
 80055b6:	f7ff ffa2 	bl	80054fe <ft6x06_write_reg>
}
 80055ba:	b003      	add	sp, #12
 80055bc:	f85d fb04 	ldr.w	pc, [sp], #4

080055c0 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80055c0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80055c2:	2301      	movs	r3, #1
{
 80055c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80055c8:	f10d 0207 	add.w	r2, sp, #7
 80055cc:	21a4      	movs	r1, #164	; 0xa4
 80055ce:	f7ff ff96 	bl	80054fe <ft6x06_write_reg>
}
 80055d2:	b003      	add	sp, #12
 80055d4:	f85d fb04 	ldr.w	pc, [sp], #4

080055d8 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80055d8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80055da:	2301      	movs	r3, #1
 80055dc:	21a8      	movs	r1, #168	; 0xa8
 80055de:	f7ff bf87 	b.w	80054f0 <ft6x06_read_reg>
	...

080055e4 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80055e4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80055e6:	2201      	movs	r2, #1
 80055e8:	4b07      	ldr	r3, [pc, #28]	; (8005608 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80055ea:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80055ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80055f0:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80055f2:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80055f4:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80055f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055fa:	f005 f961 	bl	800a8c0 <HAL_SDRAM_SendCommand>
 80055fe:	3800      	subs	r0, #0
 8005600:	bf18      	it	ne
 8005602:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005604:	4240      	negs	r0, r0
 8005606:	bd08      	pop	{r3, pc}
 8005608:	24005b64 	.word	0x24005b64

0800560c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800560c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800560e:	2202      	movs	r2, #2
 8005610:	4b08      	ldr	r3, [pc, #32]	; (8005634 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8005612:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005616:	2101      	movs	r1, #1
 8005618:	2200      	movs	r2, #0
 800561a:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800561e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005622:	4619      	mov	r1, r3
 8005624:	f005 f94c 	bl	800a8c0 <HAL_SDRAM_SendCommand>
 8005628:	3800      	subs	r0, #0
 800562a:	bf18      	it	ne
 800562c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800562e:	4240      	negs	r0, r0
 8005630:	bd08      	pop	{r3, pc}
 8005632:	bf00      	nop
 8005634:	24005b64 	.word	0x24005b64

08005638 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005638:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 800563c:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800563e:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 8005640:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005642:	4c0b      	ldr	r4, [pc, #44]	; (8005670 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 8005644:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 8005646:	698a      	ldr	r2, [r1, #24]
 8005648:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800564a:	69ca      	ldr	r2, [r1, #28]
 800564c:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800564e:	2204      	movs	r2, #4
 8005650:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8005652:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005654:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 8005656:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8005658:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 800565a:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800565e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005662:	f005 f92d 	bl	800a8c0 <HAL_SDRAM_SendCommand>
 8005666:	3800      	subs	r0, #0
 8005668:	bf18      	it	ne
 800566a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800566c:	4240      	negs	r0, r0
 800566e:	bd10      	pop	{r4, pc}
 8005670:	24005b64 	.word	0x24005b64

08005674 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8005674:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8005678:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800567c:	2108      	movs	r1, #8
 800567e:	2200      	movs	r2, #0
 8005680:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005688:	4619      	mov	r1, r3
 800568a:	f005 f919 	bl	800a8c0 <HAL_SDRAM_SendCommand>
 800568e:	3800      	subs	r0, #0
 8005690:	bf18      	it	ne
 8005692:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005694:	4240      	negs	r0, r0
 8005696:	bd08      	pop	{r3, pc}
 8005698:	24005b64 	.word	0x24005b64

0800569c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800569c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800569e:	f005 f92e 	bl	800a8fe <HAL_SDRAM_ProgramRefreshRate>
 80056a2:	3800      	subs	r0, #0
 80056a4:	bf18      	it	ne
 80056a6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80056a8:	4240      	negs	r0, r0
 80056aa:	bd08      	pop	{r3, pc}

080056ac <IS42S32800J_Init>:
{
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80056b0:	6809      	ldr	r1, [r1, #0]
{
 80056b2:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80056b4:	f7ff ff96 	bl	80055e4 <IS42S32800J_ClockEnable>
 80056b8:	b110      	cbz	r0, 80056c0 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80056be:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80056c0:	f001 fc98 	bl	8006ff4 <HAL_GetTick>
 80056c4:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80056c6:	f001 fc95 	bl	8006ff4 <HAL_GetTick>
 80056ca:	4286      	cmp	r6, r0
 80056cc:	d0fb      	beq.n	80056c6 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80056ce:	6821      	ldr	r1, [r4, #0]
 80056d0:	4628      	mov	r0, r5
 80056d2:	f7ff ff9b 	bl	800560c <IS42S32800J_Precharge>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d1ef      	bne.n	80056ba <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80056da:	4628      	mov	r0, r5
 80056dc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80056e0:	f7ff ffc8 	bl	8005674 <IS42S32800J_RefreshMode>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d1e8      	bne.n	80056ba <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80056e8:	4621      	mov	r1, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	f7ff ffa4 	bl	8005638 <IS42S32800J_ModeRegConfig>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1e2      	bne.n	80056ba <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80056f4:	68a1      	ldr	r1, [r4, #8]
 80056f6:	4628      	mov	r0, r5
 80056f8:	f7ff ffd0 	bl	800569c <IS42S32800J_RefreshRate>
 80056fc:	3800      	subs	r0, #0
 80056fe:	bf18      	it	ne
 8005700:	2001      	movne	r0, #1
 8005702:	4240      	negs	r0, r0
  return ret;
 8005704:	e7db      	b.n	80056be <IS42S32800J_Init+0x12>

08005706 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800570a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800570e:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005712:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800571a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800571e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005722:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005724:	2000      	movs	r0, #0
 8005726:	4770      	bx	lr

08005728 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005728:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800572a:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800572e:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005730:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005734:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005736:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005738:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 800573a:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800573c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800573e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8005740:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005742:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005744:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8005746:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005748:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 800574a:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800574c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800574e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005752:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8005756:	2310      	movs	r3, #16
 8005758:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800575a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800575e:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8005760:	f240 1301 	movw	r3, #257	; 0x101
 8005764:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005766:	f241 3388 	movw	r3, #5000	; 0x1388
 800576a:	f003 fc88 	bl	800907e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800576e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 8005770:	bf14      	ite	ne
 8005772:	f06f 0004 	mvnne.w	r0, #4
 8005776:	2000      	moveq	r0, #0
 8005778:	b015      	add	sp, #84	; 0x54
 800577a:	f85d fb04 	ldr.w	pc, [sp], #4

0800577e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800577e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005780:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005784:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005786:	bf08      	it	eq
 8005788:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800578c:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800578e:	bf18      	it	ne
 8005790:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8005794:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005796:	a906      	add	r1, sp, #24
{
 8005798:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800579a:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800579c:	2306      	movs	r3, #6
 800579e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80057a0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80057a2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 80057a6:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 80057a8:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80057aa:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80057ac:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057b0:	f003 fb6a 	bl	8008e88 <HAL_QSPI_Command>
 80057b4:	bb20      	cbnz	r0, 8005800 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80057b6:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 80057ba:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80057bc:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80057be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80057c2:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057c4:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 80057c6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80057ca:	f04f 0310 	mov.w	r3, #16
 80057ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80057d2:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057d6:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 80057d8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80057dc:	bf0c      	ite	eq
 80057de:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 80057e2:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057e6:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 80057e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80057ee:	f003 fc46 	bl	800907e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 80057f2:	2800      	cmp	r0, #0
 80057f4:	bf0c      	ite	eq
 80057f6:	2000      	moveq	r0, #0
 80057f8:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 80057fc:	b015      	add	sp, #84	; 0x54
 80057fe:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005800:	f06f 0001 	mvn.w	r0, #1
 8005804:	e7fa      	b.n	80057fc <MT25TL01G_WriteEnable+0x7e>

08005806 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005806:	2903      	cmp	r1, #3
{
 8005808:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800580a:	bf08      	it	eq
 800580c:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8005810:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005812:	bf18      	it	ne
 8005814:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 8005818:	4604      	mov	r4, r0
 800581a:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800581c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800581e:	23b7      	movs	r3, #183	; 0xb7
 8005820:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005822:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005824:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005828:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800582a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800582c:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800582e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8005832:	f7ff ffa4 	bl	800577e <MT25TL01G_WriteEnable>
 8005836:	b958      	cbnz	r0, 8005850 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4669      	mov	r1, sp
 800583e:	4620      	mov	r0, r4
 8005840:	f003 fb22 	bl	8008e88 <HAL_QSPI_Command>
 8005844:	b920      	cbnz	r0, 8005850 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8005846:	4629      	mov	r1, r5
 8005848:	4620      	mov	r0, r4
 800584a:	f7ff ff6d 	bl	8005728 <MT25TL01G_AutoPollingMemReady>
 800584e:	b108      	cbz	r0, 8005854 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 8005850:	f06f 0001 	mvn.w	r0, #1
}
 8005854:	b00f      	add	sp, #60	; 0x3c
 8005856:	bd30      	pop	{r4, r5, pc}

08005858 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005858:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800585a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800585e:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005860:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005864:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005866:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005868:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800586a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800586c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800586e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005872:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005874:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005876:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005878:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800587c:	f003 fb04 	bl	8008e88 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005880:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005882:	bf14      	ite	ne
 8005884:	f06f 0001 	mvnne.w	r0, #1
 8005888:	2000      	moveq	r0, #0
 800588a:	b00f      	add	sp, #60	; 0x3c
 800588c:	f85d fb04 	ldr.w	pc, [sp], #4

08005890 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005890:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005892:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005896:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005898:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800589c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800589e:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058a0:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 80058a2:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80058a4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058a6:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80058aa:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80058ac:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80058ae:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80058b0:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058b4:	f003 fae8 	bl	8008e88 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80058b8:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80058ba:	bf14      	ite	ne
 80058bc:	f06f 0001 	mvnne.w	r0, #1
 80058c0:	2000      	moveq	r0, #0
 80058c2:	b00f      	add	sp, #60	; 0x3c
 80058c4:	f85d fb04 	ldr.w	pc, [sp], #4

080058c8 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80058c8:	b500      	push	{lr}
 80058ca:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80058cc:	2903      	cmp	r1, #3
 80058ce:	d80e      	bhi.n	80058ee <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 80058d0:	e8df f001 	tbb	[pc, r1]
 80058d4:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80058d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058dc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80058de:	230e      	movs	r3, #14
 80058e0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80058e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058e6:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80058e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80058ec:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80058ee:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80058f0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80058f4:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80058f8:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80058fa:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80058fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005900:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005902:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8005904:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005908:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800590a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800590c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800590e:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005912:	f003 fc04 	bl	800911e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 8005916:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005918:	bf14      	ite	ne
 800591a:	f06f 0005 	mvnne.w	r0, #5
 800591e:	2000      	moveq	r0, #0
 8005920:	b011      	add	sp, #68	; 0x44
 8005922:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800592a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800592c:	233d      	movs	r3, #61	; 0x3d
 800592e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	e7d7      	b.n	80058ec <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800593c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005940:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8005942:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005944:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005946:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800594a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800594c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005950:	e7cc      	b.n	80058ec <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005952:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005956:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005958:	23ed      	movs	r3, #237	; 0xed
 800595a:	e7f3      	b.n	8005944 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800595c <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800595c:	b500      	push	{lr}
 800595e:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005960:	2903      	cmp	r1, #3
 8005962:	d80e      	bhi.n	8005982 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8005964:	e8df f001 	tbb	[pc, r1]
 8005968:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800596c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005970:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8005972:	230c      	movs	r3, #12
 8005974:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800597a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800597c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005980:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005982:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005984:	466a      	mov	r2, sp
 8005986:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005988:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800598a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800598e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005990:	2300      	movs	r3, #0
 8005992:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005994:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005996:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800599a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800599e:	f003 fbbe 	bl	800911e <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80059a2:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80059a4:	bf14      	ite	ne
 80059a6:	f06f 0005 	mvnne.w	r0, #5
 80059aa:	2000      	moveq	r0, #0
 80059ac:	b011      	add	sp, #68	; 0x44
 80059ae:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80059b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059b6:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80059b8:	23bc      	movs	r3, #188	; 0xbc
 80059ba:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80059bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80059c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c6:	e7db      	b.n	8005980 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80059c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059cc:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80059ce:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80059d0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80059d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80059d6:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80059d8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80059dc:	e7d0      	b.n	8005980 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80059de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80059e2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80059e4:	23eb      	movs	r3, #235	; 0xeb
 80059e6:	e7f3      	b.n	80059d0 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080059e8 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059e8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80059ee:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059f0:	bf08      	it	eq
 80059f2:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80059f6:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80059f8:	bf18      	it	ne
 80059fa:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059fe:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005a00:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8005a02:	2366      	movs	r3, #102	; 0x66
 8005a04:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005a06:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a08:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005a0e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a10:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a12:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a16:	f003 fa37 	bl	8008e88 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005a1a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005a1c:	bf14      	ite	ne
 8005a1e:	f06f 0001 	mvnne.w	r0, #1
 8005a22:	2000      	moveq	r0, #0
 8005a24:	b00f      	add	sp, #60	; 0x3c
 8005a26:	f85d fb04 	ldr.w	pc, [sp], #4

08005a2a <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005a2a:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005a30:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005a32:	bf08      	it	eq
 8005a34:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8005a38:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005a3a:	bf18      	it	ne
 8005a3c:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a40:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005a42:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005a44:	2399      	movs	r3, #153	; 0x99
 8005a46:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005a48:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005a4a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005a4e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005a50:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005a52:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005a54:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a58:	f003 fa16 	bl	8008e88 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005a5c:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005a5e:	bf14      	ite	ne
 8005a60:	f06f 0001 	mvnne.w	r0, #1
 8005a64:	2000      	moveq	r0, #0
 8005a66:	b00f      	add	sp, #60	; 0x3c
 8005a68:	f85d fb04 	ldr.w	pc, [sp], #4

08005a6c <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005a6c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005a6e:	6884      	ldr	r4, [r0, #8]
 8005a70:	8800      	ldrh	r0, [r0, #0]
 8005a72:	46a4      	mov	ip, r4
}
 8005a74:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005a78:	4760      	bx	ip

08005a7a <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005a7a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a7c:	6844      	ldr	r4, [r0, #4]
 8005a7e:	8800      	ldrh	r0, [r0, #0]
 8005a80:	46a4      	mov	ip, r4
}
 8005a82:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a86:	4760      	bx	ip

08005a88 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8005a88:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005a8a:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8005a90:	4798      	blx	r3
 8005a92:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005a94:	68e3      	ldr	r3, [r4, #12]
 8005a96:	4798      	blx	r3
 8005a98:	1b83      	subs	r3, r0, r6
 8005a9a:	42ab      	cmp	r3, r5
 8005a9c:	d3fa      	bcc.n	8005a94 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}

08005aa0 <OTM8009A_Init>:
{
 8005aa0:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f100 0810 	add.w	r8, r0, #16
{
 8005aaa:	4682      	mov	sl, r0
 8005aac:	4689      	mov	r9, r1
 8005aae:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4add      	ldr	r2, [pc, #884]	; (8005e28 <OTM8009A_Init+0x388>)
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	f000 fbad 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005aba:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005abc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005abe:	4adb      	ldr	r2, [pc, #876]	; (8005e2c <OTM8009A_Init+0x38c>)
 8005ac0:	21ff      	movs	r1, #255	; 0xff
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f000 fba6 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ac8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005aca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005acc:	4ad8      	ldr	r2, [pc, #864]	; (8005e30 <OTM8009A_Init+0x390>)
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	f000 fb9f 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005ad6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ad8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005ada:	4ad6      	ldr	r2, [pc, #856]	; (8005e34 <OTM8009A_Init+0x394>)
 8005adc:	21ff      	movs	r1, #255	; 0xff
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f000 fb98 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ae4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005ae6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ae8:	4ad1      	ldr	r2, [pc, #836]	; (8005e30 <OTM8009A_Init+0x390>)
 8005aea:	4619      	mov	r1, r3
 8005aec:	4640      	mov	r0, r8
 8005aee:	f000 fb91 	bl	8006214 <otm8009a_write_reg>
 8005af2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005af4:	2300      	movs	r3, #0
 8005af6:	4ad0      	ldr	r2, [pc, #832]	; (8005e38 <OTM8009A_Init+0x398>)
 8005af8:	21c4      	movs	r1, #196	; 0xc4
 8005afa:	4640      	mov	r0, r8
 8005afc:	f000 fb8a 	bl	8006214 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005b00:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8005b02:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005b04:	4650      	mov	r0, sl
 8005b06:	f7ff ffbf 	bl	8005a88 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4acb      	ldr	r2, [pc, #812]	; (8005e3c <OTM8009A_Init+0x39c>)
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4619      	mov	r1, r3
 8005b12:	4dcb      	ldr	r5, [pc, #812]	; (8005e40 <OTM8009A_Init+0x3a0>)
 8005b14:	f000 fb7e 	bl	8006214 <otm8009a_write_reg>
 8005b18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4ac9      	ldr	r2, [pc, #804]	; (8005e44 <OTM8009A_Init+0x3a4>)
 8005b1e:	21c4      	movs	r1, #196	; 0xc4
 8005b20:	4640      	mov	r0, r8
 8005b22:	f000 fb77 	bl	8006214 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005b26:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8005b28:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	f7ff ffac 	bl	8005a88 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005b30:	2300      	movs	r3, #0
 8005b32:	4ac5      	ldr	r2, [pc, #788]	; (8005e48 <OTM8009A_Init+0x3a8>)
 8005b34:	4640      	mov	r0, r8
 8005b36:	4619      	mov	r1, r3
 8005b38:	f000 fb6c 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005b3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005b3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005b40:	4ac2      	ldr	r2, [pc, #776]	; (8005e4c <OTM8009A_Init+0x3ac>)
 8005b42:	21c5      	movs	r1, #197	; 0xc5
 8005b44:	4640      	mov	r0, r8
 8005b46:	f000 fb65 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005b4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005b4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005b4e:	4ac0      	ldr	r2, [pc, #768]	; (8005e50 <OTM8009A_Init+0x3b0>)
 8005b50:	4619      	mov	r1, r3
 8005b52:	4640      	mov	r0, r8
 8005b54:	f000 fb5e 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005b5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b5c:	4abd      	ldr	r2, [pc, #756]	; (8005e54 <OTM8009A_Init+0x3b4>)
 8005b5e:	21c5      	movs	r1, #197	; 0xc5
 8005b60:	4640      	mov	r0, r8
 8005b62:	f000 fb57 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005b66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005b68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005b6a:	4abb      	ldr	r2, [pc, #748]	; (8005e58 <OTM8009A_Init+0x3b8>)
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f000 fb50 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005b74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005b76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005b78:	4ab8      	ldr	r2, [pc, #736]	; (8005e5c <OTM8009A_Init+0x3bc>)
 8005b7a:	21c0      	movs	r1, #192	; 0xc0
 8005b7c:	4640      	mov	r0, r8
 8005b7e:	f000 fb49 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005b84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b86:	4aa8      	ldr	r2, [pc, #672]	; (8005e28 <OTM8009A_Init+0x388>)
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f000 fb42 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005b90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005b92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005b94:	4ab2      	ldr	r2, [pc, #712]	; (8005e60 <OTM8009A_Init+0x3c0>)
 8005b96:	21d9      	movs	r1, #217	; 0xd9
 8005b98:	4640      	mov	r0, r8
 8005b9a:	f000 fb3b 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005b9e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005ba0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005ba2:	4ab0      	ldr	r2, [pc, #704]	; (8005e64 <OTM8009A_Init+0x3c4>)
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	f000 fb34 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005bac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005bae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005bb0:	4aad      	ldr	r2, [pc, #692]	; (8005e68 <OTM8009A_Init+0x3c8>)
 8005bb2:	21c1      	movs	r1, #193	; 0xc1
 8005bb4:	4640      	mov	r0, r8
 8005bb6:	f000 fb2d 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005bbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bbe:	4aab      	ldr	r2, [pc, #684]	; (8005e6c <OTM8009A_Init+0x3cc>)
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f000 fb26 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005bc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005bca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005bcc:	4aa8      	ldr	r2, [pc, #672]	; (8005e70 <OTM8009A_Init+0x3d0>)
 8005bce:	21c1      	movs	r1, #193	; 0xc1
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	f000 fb1f 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005bd6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005bd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005bda:	4aa6      	ldr	r2, [pc, #664]	; (8005e74 <OTM8009A_Init+0x3d4>)
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4640      	mov	r0, r8
 8005be0:	f000 fb18 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005be4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005be6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005be8:	4aa3      	ldr	r2, [pc, #652]	; (8005e78 <OTM8009A_Init+0x3d8>)
 8005bea:	21c5      	movs	r1, #197	; 0xc5
 8005bec:	4640      	mov	r0, r8
 8005bee:	f000 fb11 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005bf2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005bf4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005bf6:	4aa1      	ldr	r2, [pc, #644]	; (8005e7c <OTM8009A_Init+0x3dc>)
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f000 fb0a 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005c00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005c02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005c04:	4a93      	ldr	r2, [pc, #588]	; (8005e54 <OTM8009A_Init+0x3b4>)
 8005c06:	21c5      	movs	r1, #197	; 0xc5
 8005c08:	4640      	mov	r0, r8
 8005c0a:	f000 fb03 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005c0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005c10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005c12:	4a85      	ldr	r2, [pc, #532]	; (8005e28 <OTM8009A_Init+0x388>)
 8005c14:	4619      	mov	r1, r3
 8005c16:	4640      	mov	r0, r8
 8005c18:	f000 fafc 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005c1c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005c1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005c20:	4a97      	ldr	r2, [pc, #604]	; (8005e80 <OTM8009A_Init+0x3e0>)
 8005c22:	21d8      	movs	r1, #216	; 0xd8
 8005c24:	4640      	mov	r0, r8
 8005c26:	f000 faf5 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005c2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8005c2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005c2e:	4a95      	ldr	r2, [pc, #596]	; (8005e84 <OTM8009A_Init+0x3e4>)
 8005c30:	4619      	mov	r1, r3
 8005c32:	4640      	mov	r0, r8
 8005c34:	f000 faee 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005c38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8005c3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005c3c:	4a92      	ldr	r2, [pc, #584]	; (8005e88 <OTM8009A_Init+0x3e8>)
 8005c3e:	21c5      	movs	r1, #197	; 0xc5
 8005c40:	4640      	mov	r0, r8
 8005c42:	f000 fae7 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005c46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8005c48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005c4a:	4a90      	ldr	r2, [pc, #576]	; (8005e8c <OTM8009A_Init+0x3ec>)
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4640      	mov	r0, r8
 8005c50:	f000 fae0 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005c54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8005c56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005c58:	4a8d      	ldr	r2, [pc, #564]	; (8005e90 <OTM8009A_Init+0x3f0>)
 8005c5a:	21c0      	movs	r1, #192	; 0xc0
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	f000 fad9 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005c62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005c64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005c66:	4a8b      	ldr	r2, [pc, #556]	; (8005e94 <OTM8009A_Init+0x3f4>)
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	f000 fad2 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005c70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005c72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005c74:	4a88      	ldr	r2, [pc, #544]	; (8005e98 <OTM8009A_Init+0x3f8>)
 8005c76:	21c5      	movs	r1, #197	; 0xc5
 8005c78:	4640      	mov	r0, r8
 8005c7a:	f000 facb 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c7e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005c80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c82:	4a78      	ldr	r2, [pc, #480]	; (8005e64 <OTM8009A_Init+0x3c4>)
 8005c84:	4619      	mov	r1, r3
 8005c86:	4640      	mov	r0, r8
 8005c88:	f000 fac4 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005c8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005c90:	4a82      	ldr	r2, [pc, #520]	; (8005e9c <OTM8009A_Init+0x3fc>)
 8005c92:	21c4      	movs	r1, #196	; 0xc4
 8005c94:	4640      	mov	r0, r8
 8005c96:	f000 fabd 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005c9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005c9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005c9e:	4a73      	ldr	r2, [pc, #460]	; (8005e6c <OTM8009A_Init+0x3cc>)
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f000 fab6 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005ca8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005caa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005cac:	4a7c      	ldr	r2, [pc, #496]	; (8005ea0 <OTM8009A_Init+0x400>)
 8005cae:	21c1      	movs	r1, #193	; 0xc1
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	f000 faaf 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005cb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005cb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005cba:	4a7a      	ldr	r2, [pc, #488]	; (8005ea4 <OTM8009A_Init+0x404>)
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f000 faa8 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005cc4:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005cc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005cc8:	4a77      	ldr	r2, [pc, #476]	; (8005ea8 <OTM8009A_Init+0x408>)
 8005cca:	21b3      	movs	r1, #179	; 0xb3
 8005ccc:	4640      	mov	r0, r8
 8005cce:	f000 faa1 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005cd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005cd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005cd6:	4a56      	ldr	r2, [pc, #344]	; (8005e30 <OTM8009A_Init+0x390>)
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4640      	mov	r0, r8
 8005cdc:	f000 fa9a 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005ce0:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005ce2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005ce4:	4a71      	ldr	r2, [pc, #452]	; (8005eac <OTM8009A_Init+0x40c>)
 8005ce6:	21ce      	movs	r1, #206	; 0xce
 8005ce8:	4640      	mov	r0, r8
 8005cea:	f000 fa93 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005cee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005cf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005cf2:	4a6f      	ldr	r2, [pc, #444]	; (8005eb0 <OTM8009A_Init+0x410>)
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f000 fa8c 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005cfc:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005cfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005d00:	4a6c      	ldr	r2, [pc, #432]	; (8005eb4 <OTM8009A_Init+0x414>)
 8005d02:	21ce      	movs	r1, #206	; 0xce
 8005d04:	4640      	mov	r0, r8
 8005d06:	f000 fa85 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8005d0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d0e:	4a6a      	ldr	r2, [pc, #424]	; (8005eb8 <OTM8009A_Init+0x418>)
 8005d10:	4619      	mov	r1, r3
 8005d12:	4640      	mov	r0, r8
 8005d14:	f000 fa7e 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005d18:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005d1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005d1c:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <OTM8009A_Init+0x41c>)
 8005d1e:	21ce      	movs	r1, #206	; 0xce
 8005d20:	4640      	mov	r0, r8
 8005d22:	f000 fa77 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d26:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005d28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d2a:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <OTM8009A_Init+0x420>)
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4640      	mov	r0, r8
 8005d30:	f000 fa70 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005d34:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005d36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005d38:	4a62      	ldr	r2, [pc, #392]	; (8005ec4 <OTM8009A_Init+0x424>)
 8005d3a:	21cf      	movs	r1, #207	; 0xcf
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	f000 fa69 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d42:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005d44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d46:	4a60      	ldr	r2, [pc, #384]	; (8005ec8 <OTM8009A_Init+0x428>)
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f000 fa62 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005d50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005d52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005d54:	4a5d      	ldr	r2, [pc, #372]	; (8005ecc <OTM8009A_Init+0x42c>)
 8005d56:	21cf      	movs	r1, #207	; 0xcf
 8005d58:	4640      	mov	r0, r8
 8005d5a:	f000 fa5b 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d5e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005d60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d62:	4a33      	ldr	r2, [pc, #204]	; (8005e30 <OTM8009A_Init+0x390>)
 8005d64:	4619      	mov	r1, r3
 8005d66:	4640      	mov	r0, r8
 8005d68:	f000 fa54 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005d6c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005d6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005d70:	4a57      	ldr	r2, [pc, #348]	; (8005ed0 <OTM8009A_Init+0x430>)
 8005d72:	21cb      	movs	r1, #203	; 0xcb
 8005d74:	4640      	mov	r0, r8
 8005d76:	f000 fa4d 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d7a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005d7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d7e:	4a55      	ldr	r2, [pc, #340]	; (8005ed4 <OTM8009A_Init+0x434>)
 8005d80:	4619      	mov	r1, r3
 8005d82:	4640      	mov	r0, r8
 8005d84:	f000 fa46 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005d88:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005d8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005d8c:	4a52      	ldr	r2, [pc, #328]	; (8005ed8 <OTM8009A_Init+0x438>)
 8005d8e:	21cb      	movs	r1, #203	; 0xcb
 8005d90:	4640      	mov	r0, r8
 8005d92:	f000 fa3f 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005d96:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005d98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005d9a:	4a45      	ldr	r2, [pc, #276]	; (8005eb0 <OTM8009A_Init+0x410>)
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4640      	mov	r0, r8
 8005da0:	f000 fa38 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005da4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005da6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005da8:	4a4c      	ldr	r2, [pc, #304]	; (8005edc <OTM8009A_Init+0x43c>)
 8005daa:	21cb      	movs	r1, #203	; 0xcb
 8005dac:	4640      	mov	r0, r8
 8005dae:	f000 fa31 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005db2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005db4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005db6:	4a40      	ldr	r2, [pc, #256]	; (8005eb8 <OTM8009A_Init+0x418>)
 8005db8:	4619      	mov	r1, r3
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f000 fa2a 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005dc0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005dc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005dc4:	4a46      	ldr	r2, [pc, #280]	; (8005ee0 <OTM8009A_Init+0x440>)
 8005dc6:	21cb      	movs	r1, #203	; 0xcb
 8005dc8:	4640      	mov	r0, r8
 8005dca:	f000 fa23 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005dd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dd2:	4a3b      	ldr	r2, [pc, #236]	; (8005ec0 <OTM8009A_Init+0x420>)
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f000 fa1c 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005ddc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005dde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005de0:	4a40      	ldr	r2, [pc, #256]	; (8005ee4 <OTM8009A_Init+0x444>)
 8005de2:	21cb      	movs	r1, #203	; 0xcb
 8005de4:	4640      	mov	r0, r8
 8005de6:	f000 fa15 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005dea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005dec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005dee:	4a36      	ldr	r2, [pc, #216]	; (8005ec8 <OTM8009A_Init+0x428>)
 8005df0:	4619      	mov	r1, r3
 8005df2:	4640      	mov	r0, r8
 8005df4:	f000 fa0e 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005df8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005dfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005dfc:	4a3a      	ldr	r2, [pc, #232]	; (8005ee8 <OTM8009A_Init+0x448>)
 8005dfe:	21cb      	movs	r1, #203	; 0xcb
 8005e00:	4640      	mov	r0, r8
 8005e02:	f000 fa07 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005e06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005e08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005e0a:	4a38      	ldr	r2, [pc, #224]	; (8005eec <OTM8009A_Init+0x44c>)
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f000 fa00 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005e14:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005e16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005e18:	4a35      	ldr	r2, [pc, #212]	; (8005ef0 <OTM8009A_Init+0x450>)
 8005e1a:	21cb      	movs	r1, #203	; 0xcb
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	f000 f9f9 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005e22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005e24:	4404      	add	r4, r0
 8005e26:	e065      	b.n	8005ef4 <OTM8009A_Init+0x454>
 8005e28:	08022a95 	.word	0x08022a95
 8005e2c:	08022988 	.word	0x08022988
 8005e30:	08022a96 	.word	0x08022a96
 8005e34:	08022a03 	.word	0x08022a03
 8005e38:	08022a97 	.word	0x08022a97
 8005e3c:	08022a98 	.word	0x08022a98
 8005e40:	24005b74 	.word	0x24005b74
 8005e44:	08022a99 	.word	0x08022a99
 8005e48:	08022a9a 	.word	0x08022a9a
 8005e4c:	08022a9b 	.word	0x08022a9b
 8005e50:	08022a9c 	.word	0x08022a9c
 8005e54:	08022a9d 	.word	0x08022a9d
 8005e58:	08022a9e 	.word	0x08022a9e
 8005e5c:	08022a9f 	.word	0x08022a9f
 8005e60:	08022aa0 	.word	0x08022aa0
 8005e64:	08022aa1 	.word	0x08022aa1
 8005e68:	08022aa2 	.word	0x08022aa2
 8005e6c:	08022aa3 	.word	0x08022aa3
 8005e70:	08022aa4 	.word	0x08022aa4
 8005e74:	08022aa5 	.word	0x08022aa5
 8005e78:	08022aa6 	.word	0x08022aa6
 8005e7c:	08022aa7 	.word	0x08022aa7
 8005e80:	08022a6e 	.word	0x08022a6e
 8005e84:	08022aa8 	.word	0x08022aa8
 8005e88:	08022aa9 	.word	0x08022aa9
 8005e8c:	08022aaa 	.word	0x08022aaa
 8005e90:	08022aab 	.word	0x08022aab
 8005e94:	08022aac 	.word	0x08022aac
 8005e98:	08022aad 	.word	0x08022aad
 8005e9c:	08022aae 	.word	0x08022aae
 8005ea0:	08022aaf 	.word	0x08022aaf
 8005ea4:	08022ab0 	.word	0x08022ab0
 8005ea8:	08022a70 	.word	0x08022a70
 8005eac:	08022a72 	.word	0x08022a72
 8005eb0:	08022ab1 	.word	0x08022ab1
 8005eb4:	08022a78 	.word	0x08022a78
 8005eb8:	08022ab2 	.word	0x08022ab2
 8005ebc:	08022a86 	.word	0x08022a86
 8005ec0:	08022ab3 	.word	0x08022ab3
 8005ec4:	0802298b 	.word	0x0802298b
 8005ec8:	08022ab4 	.word	0x08022ab4
 8005ecc:	08022ac1 	.word	0x08022ac1
 8005ed0:	08022995 	.word	0x08022995
 8005ed4:	08022ab5 	.word	0x08022ab5
 8005ed8:	0802299f 	.word	0x0802299f
 8005edc:	080229ae 	.word	0x080229ae
 8005ee0:	080229bd 	.word	0x080229bd
 8005ee4:	080229c7 	.word	0x080229c7
 8005ee8:	080229d6 	.word	0x080229d6
 8005eec:	08022ab6 	.word	0x08022ab6
 8005ef0:	080229e5 	.word	0x080229e5
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005ef4:	4a99      	ldr	r2, [pc, #612]	; (800615c <OTM8009A_Init+0x6bc>)
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4640      	mov	r0, r8
 8005efa:	f000 f98b 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005efe:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005f00:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005f02:	4a97      	ldr	r2, [pc, #604]	; (8006160 <OTM8009A_Init+0x6c0>)
 8005f04:	21cb      	movs	r1, #203	; 0xcb
 8005f06:	4640      	mov	r0, r8
 8005f08:	f000 f984 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f0c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005f0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f10:	4a94      	ldr	r2, [pc, #592]	; (8006164 <OTM8009A_Init+0x6c4>)
 8005f12:	4619      	mov	r1, r3
 8005f14:	4640      	mov	r0, r8
 8005f16:	f000 f97d 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005f1a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005f1c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005f1e:	4a92      	ldr	r2, [pc, #584]	; (8006168 <OTM8009A_Init+0x6c8>)
 8005f20:	21cc      	movs	r1, #204	; 0xcc
 8005f22:	4640      	mov	r0, r8
 8005f24:	f000 f976 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005f28:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005f2a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005f2c:	4a8f      	ldr	r2, [pc, #572]	; (800616c <OTM8009A_Init+0x6cc>)
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4640      	mov	r0, r8
 8005f32:	f000 f96f 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005f36:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005f38:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005f3a:	4a8d      	ldr	r2, [pc, #564]	; (8006170 <OTM8009A_Init+0x6d0>)
 8005f3c:	21cc      	movs	r1, #204	; 0xcc
 8005f3e:	4640      	mov	r0, r8
 8005f40:	f000 f968 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f44:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005f46:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f48:	4a8a      	ldr	r2, [pc, #552]	; (8006174 <OTM8009A_Init+0x6d4>)
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	f000 f961 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005f52:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005f54:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005f56:	4a88      	ldr	r2, [pc, #544]	; (8006178 <OTM8009A_Init+0x6d8>)
 8005f58:	21cc      	movs	r1, #204	; 0xcc
 8005f5a:	4640      	mov	r0, r8
 8005f5c:	f000 f95a 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f60:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005f62:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f64:	4a85      	ldr	r2, [pc, #532]	; (800617c <OTM8009A_Init+0x6dc>)
 8005f66:	4619      	mov	r1, r3
 8005f68:	4640      	mov	r0, r8
 8005f6a:	f000 f953 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005f6e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005f70:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005f72:	4a83      	ldr	r2, [pc, #524]	; (8006180 <OTM8009A_Init+0x6e0>)
 8005f74:	21cc      	movs	r1, #204	; 0xcc
 8005f76:	4640      	mov	r0, r8
 8005f78:	f000 f94c 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f7c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005f7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f80:	4a80      	ldr	r2, [pc, #512]	; (8006184 <OTM8009A_Init+0x6e4>)
 8005f82:	4619      	mov	r1, r3
 8005f84:	4640      	mov	r0, r8
 8005f86:	f000 f945 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005f8a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005f8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005f8e:	4a7e      	ldr	r2, [pc, #504]	; (8006188 <OTM8009A_Init+0x6e8>)
 8005f90:	21cc      	movs	r1, #204	; 0xcc
 8005f92:	4640      	mov	r0, r8
 8005f94:	f000 f93e 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005f98:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005f9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005f9c:	4a7b      	ldr	r2, [pc, #492]	; (800618c <OTM8009A_Init+0x6ec>)
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	f000 f937 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005fa6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005fa8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005faa:	4a79      	ldr	r2, [pc, #484]	; (8006190 <OTM8009A_Init+0x6f0>)
 8005fac:	21cc      	movs	r1, #204	; 0xcc
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f000 f930 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005fb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005fb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005fb8:	4a76      	ldr	r2, [pc, #472]	; (8006194 <OTM8009A_Init+0x6f4>)
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	f000 f929 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005fc2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005fc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005fc6:	4a74      	ldr	r2, [pc, #464]	; (8006198 <OTM8009A_Init+0x6f8>)
 8005fc8:	21c5      	movs	r1, #197	; 0xc5
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f000 f922 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005fd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005fd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005fd4:	4a71      	ldr	r2, [pc, #452]	; (800619c <OTM8009A_Init+0x6fc>)
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4640      	mov	r0, r8
 8005fda:	f000 f91b 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005fde:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005fe0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005fe2:	4a6f      	ldr	r2, [pc, #444]	; (80061a0 <OTM8009A_Init+0x700>)
 8005fe4:	21f5      	movs	r1, #245	; 0xf5
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	f000 f914 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005fec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005fee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005ff0:	4a6c      	ldr	r2, [pc, #432]	; (80061a4 <OTM8009A_Init+0x704>)
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	f000 f90d 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005ffa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005ffc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005ffe:	4a6a      	ldr	r2, [pc, #424]	; (80061a8 <OTM8009A_Init+0x708>)
 8006000:	21c6      	movs	r1, #198	; 0xc6
 8006002:	4640      	mov	r0, r8
 8006004:	f000 f906 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006008:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800600a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800600c:	4a67      	ldr	r2, [pc, #412]	; (80061ac <OTM8009A_Init+0x70c>)
 800600e:	4619      	mov	r1, r3
 8006010:	4640      	mov	r0, r8
 8006012:	f000 f8ff 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006016:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006018:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800601a:	4a65      	ldr	r2, [pc, #404]	; (80061b0 <OTM8009A_Init+0x710>)
 800601c:	21ff      	movs	r1, #255	; 0xff
 800601e:	4640      	mov	r0, r8
 8006020:	f000 f8f8 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006024:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006026:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006028:	4a60      	ldr	r2, [pc, #384]	; (80061ac <OTM8009A_Init+0x70c>)
 800602a:	4619      	mov	r1, r3
 800602c:	4640      	mov	r0, r8
 800602e:	f000 f8f1 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006032:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006034:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006036:	4a5d      	ldr	r2, [pc, #372]	; (80061ac <OTM8009A_Init+0x70c>)
 8006038:	4619      	mov	r1, r3
 800603a:	4640      	mov	r0, r8
 800603c:	f000 f8ea 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006040:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006042:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006044:	4a5b      	ldr	r2, [pc, #364]	; (80061b4 <OTM8009A_Init+0x714>)
 8006046:	21e1      	movs	r1, #225	; 0xe1
 8006048:	4640      	mov	r0, r8
 800604a:	f000 f8e3 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800604e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006050:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006052:	4a56      	ldr	r2, [pc, #344]	; (80061ac <OTM8009A_Init+0x70c>)
 8006054:	4619      	mov	r1, r3
 8006056:	4640      	mov	r0, r8
 8006058:	f000 f8dc 	bl	8006214 <otm8009a_write_reg>
 800605c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800605e:	2310      	movs	r3, #16
 8006060:	4a55      	ldr	r2, [pc, #340]	; (80061b8 <OTM8009A_Init+0x718>)
 8006062:	21e2      	movs	r1, #226	; 0xe2
 8006064:	4640      	mov	r0, r8
 8006066:	f000 f8d5 	bl	8006214 <otm8009a_write_reg>
 800606a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800606c:	2300      	movs	r3, #0
 800606e:	4a53      	ldr	r2, [pc, #332]	; (80061bc <OTM8009A_Init+0x71c>)
 8006070:	2111      	movs	r1, #17
 8006072:	4640      	mov	r0, r8
 8006074:	f000 f8ce 	bl	8006214 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8006078:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800607a:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800607c:	4650      	mov	r0, sl
 800607e:	f7ff fd03 	bl	8005a88 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8006082:	f1b9 0f00 	cmp.w	r9, #0
 8006086:	d062      	beq.n	800614e <OTM8009A_Init+0x6ae>
 8006088:	f1b9 0f02 	cmp.w	r9, #2
 800608c:	d108      	bne.n	80060a0 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800608e:	2300      	movs	r3, #0
 8006090:	4a4b      	ldr	r2, [pc, #300]	; (80061c0 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006092:	213a      	movs	r1, #58	; 0x3a
 8006094:	4640      	mov	r0, r8
 8006096:	f000 f8bd 	bl	8006214 <otm8009a_write_reg>
 800609a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800609c:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80060a0:	f1bb 0f01 	cmp.w	fp, #1
 80060a4:	d156      	bne.n	8006154 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80060a6:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80060a8:	f10d 0207 	add.w	r2, sp, #7
 80060ac:	2136      	movs	r1, #54	; 0x36
 80060ae:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80060b0:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80060b4:	2300      	movs	r3, #0
 80060b6:	f000 f8ad 	bl	8006214 <otm8009a_write_reg>
 80060ba:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80060bc:	2304      	movs	r3, #4
 80060be:	4a41      	ldr	r2, [pc, #260]	; (80061c4 <OTM8009A_Init+0x724>)
 80060c0:	212a      	movs	r1, #42	; 0x2a
 80060c2:	4640      	mov	r0, r8
 80060c4:	f000 f8a6 	bl	8006214 <otm8009a_write_reg>
 80060c8:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80060ca:	2304      	movs	r3, #4
 80060cc:	4a3e      	ldr	r2, [pc, #248]	; (80061c8 <OTM8009A_Init+0x728>)
 80060ce:	212b      	movs	r1, #43	; 0x2b
 80060d0:	4640      	mov	r0, r8
 80060d2:	f000 f89f 	bl	8006214 <otm8009a_write_reg>
 80060d6:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80060d8:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80060dc:	2300      	movs	r3, #0
 80060de:	4a3b      	ldr	r2, [pc, #236]	; (80061cc <OTM8009A_Init+0x72c>)
 80060e0:	2151      	movs	r1, #81	; 0x51
 80060e2:	4640      	mov	r0, r8
 80060e4:	f000 f896 	bl	8006214 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80060e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80060ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80060ec:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <OTM8009A_Init+0x730>)
 80060ee:	2153      	movs	r1, #83	; 0x53
 80060f0:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80060f2:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80060f4:	f000 f88e 	bl	8006214 <otm8009a_write_reg>
 80060f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80060fa:	2300      	movs	r3, #0
 80060fc:	4a35      	ldr	r2, [pc, #212]	; (80061d4 <OTM8009A_Init+0x734>)
 80060fe:	2155      	movs	r1, #85	; 0x55
 8006100:	4640      	mov	r0, r8
 8006102:	f000 f887 	bl	8006214 <otm8009a_write_reg>
 8006106:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006108:	2300      	movs	r3, #0
 800610a:	4a33      	ldr	r2, [pc, #204]	; (80061d8 <OTM8009A_Init+0x738>)
 800610c:	215e      	movs	r1, #94	; 0x5e
 800610e:	4640      	mov	r0, r8
 8006110:	f000 f880 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006114:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006116:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006118:	4a30      	ldr	r2, [pc, #192]	; (80061dc <OTM8009A_Init+0x73c>)
 800611a:	2129      	movs	r1, #41	; 0x29
 800611c:	4640      	mov	r0, r8
 800611e:	f000 f879 	bl	8006214 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006122:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006124:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006126:	4a21      	ldr	r2, [pc, #132]	; (80061ac <OTM8009A_Init+0x70c>)
 8006128:	4619      	mov	r1, r3
 800612a:	4640      	mov	r0, r8
 800612c:	f000 f872 	bl	8006214 <otm8009a_write_reg>
 8006130:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006132:	2300      	movs	r3, #0
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <OTM8009A_Init+0x740>)
 8006136:	212c      	movs	r1, #44	; 0x2c
 8006138:	4640      	mov	r0, r8
 800613a:	f000 f86b 	bl	8006214 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800613e:	42c5      	cmn	r5, r0
}
 8006140:	bf14      	ite	ne
 8006142:	f04f 30ff 	movne.w	r0, #4294967295
 8006146:	2000      	moveq	r0, #0
 8006148:	b003      	add	sp, #12
 800614a:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800614e:	464b      	mov	r3, r9
 8006150:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <OTM8009A_Init+0x744>)
 8006152:	e79e      	b.n	8006092 <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006154:	2300      	movs	r3, #0
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	e7c0      	b.n	80060dc <OTM8009A_Init+0x63c>
 800615a:	bf00      	nop
 800615c:	08022ab7 	.word	0x08022ab7
 8006160:	080229ef 	.word	0x080229ef
 8006164:	08022a96 	.word	0x08022a96
 8006168:	080229f9 	.word	0x080229f9
 800616c:	08022ab5 	.word	0x08022ab5
 8006170:	08022a05 	.word	0x08022a05
 8006174:	08022ab1 	.word	0x08022ab1
 8006178:	08022a14 	.word	0x08022a14
 800617c:	08022ab2 	.word	0x08022ab2
 8006180:	08022a23 	.word	0x08022a23
 8006184:	08022ab3 	.word	0x08022ab3
 8006188:	08022a2d 	.word	0x08022a2d
 800618c:	08022ab4 	.word	0x08022ab4
 8006190:	08022a3c 	.word	0x08022a3c
 8006194:	08022aa1 	.word	0x08022aa1
 8006198:	08022ac2 	.word	0x08022ac2
 800619c:	08022ac3 	.word	0x08022ac3
 80061a0:	08022ac4 	.word	0x08022ac4
 80061a4:	08022ac5 	.word	0x08022ac5
 80061a8:	08022ac6 	.word	0x08022ac6
 80061ac:	08022a95 	.word	0x08022a95
 80061b0:	08022a4b 	.word	0x08022a4b
 80061b4:	08022a4e 	.word	0x08022a4e
 80061b8:	08022a5e 	.word	0x08022a5e
 80061bc:	08022ab8 	.word	0x08022ab8
 80061c0:	08022ab9 	.word	0x08022ab9
 80061c4:	08022980 	.word	0x08022980
 80061c8:	08022984 	.word	0x08022984
 80061cc:	08022abb 	.word	0x08022abb
 80061d0:	08022abc 	.word	0x08022abc
 80061d4:	08022abd 	.word	0x08022abd
 80061d8:	08022abe 	.word	0x08022abe
 80061dc:	08022abf 	.word	0x08022abf
 80061e0:	08022ac0 	.word	0x08022ac0
 80061e4:	08022aba 	.word	0x08022aba

080061e8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80061e8:	b160      	cbz	r0, 8006204 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80061ea:	684b      	ldr	r3, [r1, #4]
 80061ec:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80061ee:	688b      	ldr	r3, [r1, #8]
 80061f0:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80061f2:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80061f4:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80061f6:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80061f8:	4b04      	ldr	r3, [pc, #16]	; (800620c <OTM8009A_RegisterBusIO+0x24>)
 80061fa:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80061fc:	4b04      	ldr	r3, [pc, #16]	; (8006210 <OTM8009A_RegisterBusIO+0x28>)
 80061fe:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8006200:	2000      	movs	r0, #0
 8006202:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	08005a6d 	.word	0x08005a6d
 8006210:	08005a7b 	.word	0x08005a7b

08006214 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8006214:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006216:	6804      	ldr	r4, [r0, #0]
 8006218:	6880      	ldr	r0, [r0, #8]
 800621a:	46a4      	mov	ip, r4
}
 800621c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006220:	4760      	bx	ip
	...

08006224 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8006224:	4a10      	ldr	r2, [pc, #64]	; (8006268 <BSP_I2C4_DeInit+0x44>)
{
 8006226:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006228:	6813      	ldr	r3, [r2, #0]
 800622a:	3b01      	subs	r3, #1
 800622c:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800622e:	b10b      	cbz	r3, 8006234 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006230:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8006232:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006238:	480c      	ldr	r0, [pc, #48]	; (800626c <BSP_I2C4_DeInit+0x48>)
 800623a:	f001 fe0d 	bl	8007e58 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800623e:	480b      	ldr	r0, [pc, #44]	; (800626c <BSP_I2C4_DeInit+0x48>)
 8006240:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006244:	f001 fe08 	bl	8007e58 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006248:	4a09      	ldr	r2, [pc, #36]	; (8006270 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800624a:	480a      	ldr	r0, [pc, #40]	; (8006274 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800624c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8006250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006254:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006258:	f002 f849 	bl	80082ee <HAL_I2C_DeInit>
 800625c:	2800      	cmp	r0, #0
 800625e:	d0e7      	beq.n	8006230 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006260:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006264:	e7e5      	b.n	8006232 <BSP_I2C4_DeInit+0xe>
 8006266:	bf00      	nop
 8006268:	24005b80 	.word	0x24005b80
 800626c:	58020c00 	.word	0x58020c00
 8006270:	58024400 	.word	0x58024400
 8006274:	24006588 	.word	0x24006588

08006278 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006278:	2300      	movs	r3, #0
 800627a:	2201      	movs	r2, #1
{
 800627c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800627e:	6041      	str	r1, [r0, #4]
{
 8006280:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006282:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006284:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8006288:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800628c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006290:	f001 ffdb 	bl	800824a <HAL_I2C_Init>
 8006294:	4601      	mov	r1, r0
 8006296:	b108      	cbz	r0, 800629c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8006298:	2001      	movs	r0, #1
}
 800629a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800629c:	4620      	mov	r0, r4
 800629e:	f002 f9fc 	bl	800869a <HAL_I2CEx_ConfigAnalogFilter>
 80062a2:	4601      	mov	r1, r0
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d1f7      	bne.n	8006298 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80062a8:	4620      	mov	r0, r4
 80062aa:	f002 fa1c 	bl	80086e6 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80062ae:	3800      	subs	r0, #0
 80062b0:	bf18      	it	ne
 80062b2:	2001      	movne	r0, #1
 80062b4:	e7f1      	b.n	800629a <MX_I2C4_Init+0x22>
	...

080062b8 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80062b8:	4ba3      	ldr	r3, [pc, #652]	; (8006548 <BSP_I2C4_Init+0x290>)
 80062ba:	48a4      	ldr	r0, [pc, #656]	; (800654c <BSP_I2C4_Init+0x294>)
{
 80062bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80062c0:	6003      	str	r3, [r0, #0]
{
 80062c2:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 80062c4:	4ba2      	ldr	r3, [pc, #648]	; (8006550 <BSP_I2C4_Init+0x298>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	9200      	str	r2, [sp, #0]
 80062ca:	2a00      	cmp	r2, #0
 80062cc:	f040 80cf 	bne.w	800646e <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80062d4:	f002 f9dc 	bl	8008690 <HAL_I2C_GetState>
 80062d8:	2800      	cmp	r0, #0
 80062da:	f040 80c8 	bne.w	800646e <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80062de:	4d9d      	ldr	r5, [pc, #628]	; (8006554 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80062e0:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80062e4:	2702      	movs	r7, #2
 80062e6:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80062e8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80062ec:	a90d      	add	r1, sp, #52	; 0x34
 80062ee:	489a      	ldr	r0, [pc, #616]	; (8006558 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80062f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80062fc:	f003 0308 	and.w	r3, r3, #8
 8006300:	930a      	str	r3, [sp, #40]	; 0x28
 8006302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006304:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006308:	f043 0308 	orr.w	r3, r3, #8
 800630c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8006310:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8006314:	f003 0308 	and.w	r3, r3, #8
 8006318:	930b      	str	r3, [sp, #44]	; 0x2c
 800631a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800631c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006320:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006324:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006326:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800632a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800632c:	f001 fca8 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006334:	a90d      	add	r1, sp, #52	; 0x34
 8006336:	4888      	ldr	r0, [pc, #544]	; (8006558 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006338:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800633a:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800633e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006340:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006344:	f001 fc9c 	bl	8007c80 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006348:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800634c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006350:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8006354:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8006358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635c:	930c      	str	r3, [sp, #48]	; 0x30
 800635e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8006360:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006368:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800636c:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006370:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006374:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006378:	f003 fc0e 	bl	8009b98 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800637c:	2800      	cmp	r0, #0
 800637e:	d070      	beq.n	8006462 <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006380:	4b76      	ldr	r3, [pc, #472]	; (800655c <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006382:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006386:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8006564 <BSP_I2C4_Init+0x2ac>
 800638a:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800638e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8006392:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006396:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800639a:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800639e:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80063a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80063a4:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80063a8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80063ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063b0:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 80063b2:	9302      	str	r3, [sp, #8]
 80063b4:	4b6a      	ldr	r3, [pc, #424]	; (8006560 <BSP_I2C4_Init+0x2a8>)
 80063b6:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80063ba:	9a00      	ldr	r2, [sp, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4696      	mov	lr, r2
{
 80063c0:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80063c2:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80063c4:	f240 3479 	movw	r4, #889	; 0x379
 80063c8:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80063ca:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 80063cc:	45a4      	cmp	ip, r4
 80063ce:	d959      	bls.n	8006484 <BSP_I2C4_Init+0x1cc>
 80063d0:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80063d2:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 80063d4:	45ab      	cmp	fp, r5
 80063d6:	d851      	bhi.n	800647c <BSP_I2C4_Init+0x1c4>
 80063d8:	9c02      	ldr	r4, [sp, #8]
 80063da:	42ac      	cmp	r4, r5
 80063dc:	d34e      	bcc.n	800647c <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 80063de:	4590      	cmp	r8, r2
 80063e0:	d04c      	beq.n	800647c <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80063e2:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 80063e6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80063e8:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80063ea:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80063ee:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80063f0:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80063f4:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80063f8:	d93d      	bls.n	8006476 <BSP_I2C4_Init+0x1be>
 80063fa:	4a59      	ldr	r2, [pc, #356]	; (8006560 <BSP_I2C4_Init+0x2a8>)
 80063fc:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80063fe:	4b58      	ldr	r3, [pc, #352]	; (8006560 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006400:	f242 7210 	movw	r2, #10000	; 0x2710
 8006404:	4957      	ldr	r1, [pc, #348]	; (8006564 <BSP_I2C4_Init+0x2ac>)
 8006406:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006408:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800640a:	9203      	str	r2, [sp, #12]
 800640c:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006410:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006412:	0043      	lsls	r3, r0, #1
 8006414:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8006418:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 800641c:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8006420:	f10b 0b0c 	add.w	fp, fp, #12
 8006424:	9409      	str	r4, [sp, #36]	; 0x24
 8006426:	3b0a      	subs	r3, #10
 8006428:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800642a:	9b05      	ldr	r3, [sp, #20]
 800642c:	429f      	cmp	r7, r3
 800642e:	d134      	bne.n	800649a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8006430:	2a7f      	cmp	r2, #127	; 0x7f
 8006432:	d816      	bhi.n	8006462 <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006434:	2314      	movs	r3, #20
 8006436:	435a      	muls	r2, r3
 8006438:	4b4a      	ldr	r3, [pc, #296]	; (8006564 <BSP_I2C4_Init+0x2ac>)
 800643a:	1899      	adds	r1, r3, r2
 800643c:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800643e:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006440:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006444:	684b      	ldr	r3, [r1, #4]
 8006446:	051b      	lsls	r3, r3, #20
 8006448:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800644c:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800644e:	688b      	ldr	r3, [r1, #8]
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006456:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006458:	68cb      	ldr	r3, [r1, #12]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800645e:	4323      	orrs	r3, r4
 8006460:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006462:	9900      	ldr	r1, [sp, #0]
 8006464:	4839      	ldr	r0, [pc, #228]	; (800654c <BSP_I2C4_Init+0x294>)
 8006466:	f7ff ff07 	bl	8006278 <MX_I2C4_Init>
 800646a:	2800      	cmp	r0, #0
 800646c:	d169      	bne.n	8006542 <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 800646e:	2000      	movs	r0, #0
}
 8006470:	b013      	add	sp, #76	; 0x4c
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	4690      	mov	r8, r2
 8006478:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800647c:	3701      	adds	r7, #1
 800647e:	440d      	add	r5, r1
 8006480:	2f10      	cmp	r7, #16
 8006482:	d1a7      	bne.n	80063d4 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006484:	2e10      	cmp	r6, #16
 8006486:	448c      	add	ip, r1
 8006488:	d19c      	bne.n	80063c4 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800648a:	3201      	adds	r2, #1
 800648c:	4401      	add	r1, r0
 800648e:	2a10      	cmp	r2, #16
 8006490:	d196      	bne.n	80063c0 <BSP_I2C4_Init+0x108>
 8006492:	f1be 0f00 	cmp.w	lr, #0
 8006496:	d1b0      	bne.n	80063fa <BSP_I2C4_Init+0x142>
 8006498:	e7b1      	b.n	80063fe <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800649a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800649c:	f04f 0c00 	mov.w	ip, #0
 80064a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80064a2:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80064a6:	441c      	add	r4, r3
 80064a8:	ebab 0503 	sub.w	r5, fp, r3
 80064ac:	9404      	str	r4, [sp, #16]
 80064ae:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80064b0:	9d04      	ldr	r5, [sp, #16]
 80064b2:	9401      	str	r4, [sp, #4]
 80064b4:	9c02      	ldr	r4, [sp, #8]
 80064b6:	441c      	add	r4, r3
 80064b8:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80064ba:	f241 245c 	movw	r4, #4700	; 0x125c
 80064be:	f8cd c018 	str.w	ip, [sp, #24]
 80064c2:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80064c6:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80064ca:	42a5      	cmp	r5, r4
 80064cc:	d92e      	bls.n	800652c <BSP_I2C4_Init+0x274>
 80064ce:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80064d2:	d22b      	bcs.n	800652c <BSP_I2C4_Init+0x274>
 80064d4:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80064d6:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80064da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80064de:	1966      	adds	r6, r4, r5
 80064e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80064e4:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 80064e8:	f241 0447 	movw	r4, #4167	; 0x1047
 80064ec:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80064f0:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80064f4:	45a2      	cmp	sl, r4
 80064f6:	d812      	bhi.n	800651e <BSP_I2C4_Init+0x266>
 80064f8:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 80064fc:	d30f      	bcc.n	800651e <BSP_I2C4_Init+0x266>
 80064fe:	4540      	cmp	r0, r8
 8006500:	d20d      	bcs.n	800651e <BSP_I2C4_Init+0x266>
              error = -error;
 8006502:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006506:	bf28      	it	cs
 8006508:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800650a:	9c03      	ldr	r4, [sp, #12]
 800650c:	45a2      	cmp	sl, r4
 800650e:	d206      	bcs.n	800651e <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 8006510:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8006512:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8006516:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006518:	9a07      	ldr	r2, [sp, #28]
 800651a:	60ca      	str	r2, [r1, #12]
 800651c:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800651e:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8006522:	eba9 0903 	sub.w	r9, r9, r3
 8006526:	441e      	add	r6, r3
 8006528:	4498      	add	r8, r3
 800652a:	d1db      	bne.n	80064e4 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800652c:	9c01      	ldr	r4, [sp, #4]
 800652e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8006532:	441d      	add	r5, r3
 8006534:	eba4 0403 	sub.w	r4, r4, r3
 8006538:	9401      	str	r4, [sp, #4]
 800653a:	d1be      	bne.n	80064ba <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800653c:	3701      	adds	r7, #1
 800653e:	3114      	adds	r1, #20
 8006540:	e773      	b.n	800642a <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 8006542:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006546:	e793      	b.n	8006470 <BSP_I2C4_Init+0x1b8>
 8006548:	58001c00 	.word	0x58001c00
 800654c:	24006588 	.word	0x24006588
 8006550:	24005b80 	.word	0x24005b80
 8006554:	58024400 	.word	0x58024400
 8006558:	58020c00 	.word	0x58020c00
 800655c:	3b9aca00 	.word	0x3b9aca00
 8006560:	24006584 	.word	0x24006584
 8006564:	24005b84 	.word	0x24005b84

08006568 <BSP_I2C4_WriteReg>:
{
 8006568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800656a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800656e:	9200      	str	r2, [sp, #0]
 8006570:	460a      	mov	r2, r1
 8006572:	4601      	mov	r1, r0
 8006574:	4808      	ldr	r0, [pc, #32]	; (8006598 <BSP_I2C4_WriteReg+0x30>)
 8006576:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800657a:	2301      	movs	r3, #1
 800657c:	f001 fed0 	bl	8008320 <HAL_I2C_Mem_Write>
 8006580:	b140      	cbz	r0, 8006594 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006582:	4805      	ldr	r0, [pc, #20]	; (8006598 <BSP_I2C4_WriteReg+0x30>)
 8006584:	f002 f887 	bl	8008696 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006588:	2804      	cmp	r0, #4
 800658a:	bf0c      	ite	eq
 800658c:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8006590:	f06f 0003 	mvnne.w	r0, #3
}
 8006594:	b004      	add	sp, #16
 8006596:	bd10      	pop	{r4, pc}
 8006598:	24006588 	.word	0x24006588

0800659c <BSP_I2C4_ReadReg>:
{
 800659c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800659e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80065a2:	9200      	str	r2, [sp, #0]
 80065a4:	460a      	mov	r2, r1
 80065a6:	4601      	mov	r1, r0
 80065a8:	4808      	ldr	r0, [pc, #32]	; (80065cc <BSP_I2C4_ReadReg+0x30>)
 80065aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065ae:	2301      	movs	r3, #1
 80065b0:	f001 ff90 	bl	80084d4 <HAL_I2C_Mem_Read>
 80065b4:	b140      	cbz	r0, 80065c8 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80065b6:	4805      	ldr	r0, [pc, #20]	; (80065cc <BSP_I2C4_ReadReg+0x30>)
 80065b8:	f002 f86d 	bl	8008696 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80065bc:	2804      	cmp	r0, #4
 80065be:	bf0c      	ite	eq
 80065c0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 80065c4:	f06f 0003 	mvnne.w	r0, #3
}
 80065c8:	b004      	add	sp, #16
 80065ca:	bd10      	pop	{r4, pc}
 80065cc:	24006588 	.word	0x24006588

080065d0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 80065d0:	f000 bd10 	b.w	8006ff4 <HAL_GetTick>

080065d4 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80065d4:	4a09      	ldr	r2, [pc, #36]	; (80065fc <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80065d6:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 80065da:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80065dc:	684a      	ldr	r2, [r1, #4]
 80065de:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80065e0:	2201      	movs	r2, #1
 80065e2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80065e4:	688a      	ldr	r2, [r1, #8]
 80065e6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80065e8:	680a      	ldr	r2, [r1, #0]
 80065ea:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80065ec:	2200      	movs	r2, #0
 80065ee:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80065f2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80065f4:	68ca      	ldr	r2, [r1, #12]
 80065f6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80065f8:	f002 bbf8 	b.w	8008dec <HAL_QSPI_Init>
 80065fc:	52005000 	.word	0x52005000

08006600 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006600:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006602:	b988      	cbnz	r0, 8006628 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006604:	4c0a      	ldr	r4, [pc, #40]	; (8006630 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8006606:	480b      	ldr	r0, [pc, #44]	; (8006634 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006608:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800660a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800660c:	b94b      	cbnz	r3, 8006622 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800660e:	f7ff f9a5 	bl	800595c <MT25TL01G_EnableMemoryMappedModeSTR>
 8006612:	b110      	cbz	r0, 800661a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006614:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006618:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800661a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800661c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800661e:	7023      	strb	r3, [r4, #0]
 8006620:	e7fa      	b.n	8006618 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006622:	f7ff f951 	bl	80058c8 <MT25TL01G_EnableMemoryMappedModeDTR>
 8006626:	e7f4      	b.n	8006612 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006628:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800662c:	e7f4      	b.n	8006618 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800662e:	bf00      	nop
 8006630:	240065dc 	.word	0x240065dc
 8006634:	24000330 	.word	0x24000330

08006638 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	460c      	mov	r4, r1
 800663c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800663e:	bb28      	cbnz	r0, 800668c <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006640:	4d17      	ldr	r5, [pc, #92]	; (80066a0 <BSP_QSPI_ConfigFlash+0x68>)
 8006642:	782b      	ldrb	r3, [r5, #0]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d024      	beq.n	8006692 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006648:	2a00      	cmp	r2, #0
 800664a:	4e16      	ldr	r6, [pc, #88]	; (80066a4 <BSP_QSPI_ConfigFlash+0x6c>)
 800664c:	bf08      	it	eq
 800664e:	2010      	moveq	r0, #16
 8006650:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006652:	4630      	mov	r0, r6
 8006654:	f002 fbca 	bl	8008dec <HAL_QSPI_Init>
 8006658:	b9f0      	cbnz	r0, 8006698 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800665a:	786b      	ldrb	r3, [r5, #1]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d10f      	bne.n	8006680 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006660:	2c03      	cmp	r4, #3
 8006662:	d105      	bne.n	8006670 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006664:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006666:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8006668:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800666a:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800666c:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8006670:	4630      	mov	r0, r6
 8006672:	f7ff f90d 	bl	8005890 <MT25TL01G_ExitQPIMode>
 8006676:	2800      	cmp	r0, #0
 8006678:	d0f4      	beq.n	8006664 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800667a:	f06f 0004 	mvn.w	r0, #4
 800667e:	e7f6      	b.n	800666e <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8006680:	2c03      	cmp	r4, #3
 8006682:	d1ef      	bne.n	8006664 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8006684:	4630      	mov	r0, r6
 8006686:	f7ff f8e7 	bl	8005858 <MT25TL01G_EnterQPIMode>
 800668a:	e7f4      	b.n	8006676 <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800668c:	f06f 0001 	mvn.w	r0, #1
 8006690:	e7ed      	b.n	800666e <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8006692:	f06f 0019 	mvn.w	r0, #25
 8006696:	e7ea      	b.n	800666e <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006698:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800669c:	e7e7      	b.n	800666e <BSP_QSPI_ConfigFlash+0x36>
 800669e:	bf00      	nop
 80066a0:	240065dc 	.word	0x240065dc
 80066a4:	24000330 	.word	0x24000330

080066a8 <BSP_QSPI_Init>:
{
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	460d      	mov	r5, r1
 80066ae:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80066b0:	4604      	mov	r4, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f040 81ac 	bne.w	8006a10 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 80066b8:	4e03      	ldr	r6, [pc, #12]	; (80066c8 <BSP_QSPI_Init+0x20>)
 80066ba:	7833      	ldrb	r3, [r6, #0]
 80066bc:	b133      	cbz	r3, 80066cc <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 80066be:	2000      	movs	r0, #0
}
 80066c0:	b024      	add	sp, #144	; 0x90
 80066c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c6:	bf00      	nop
 80066c8:	240065dc 	.word	0x240065dc
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80066cc:	4bc2      	ldr	r3, [pc, #776]	; (80069d8 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80066ce:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80066d2:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80066d4:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 80066d6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80066da:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80066de:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80066e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80066ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80066ee:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80066f2:	9201      	str	r2, [sp, #4]
 80066f4:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 80066f6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80066f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fc:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80066fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006700:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006704:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006706:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800670a:	f042 0202 	orr.w	r2, r2, #2
 800670e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006712:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006716:	f002 0202 	and.w	r2, r2, #2
 800671a:	9202      	str	r2, [sp, #8]
 800671c:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800671e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006726:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800672a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800672e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006732:	9203      	str	r2, [sp, #12]
 8006734:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8006736:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006742:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006746:	f002 0208 	and.w	r2, r2, #8
 800674a:	9204      	str	r2, [sp, #16]
 800674c:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800674e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006752:	f042 0220 	orr.w	r2, r2, #32
 8006756:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800675a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800675e:	f002 0220 	and.w	r2, r2, #32
 8006762:	9205      	str	r2, [sp, #20]
 8006764:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8006766:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800676a:	f042 0220 	orr.w	r2, r2, #32
 800676e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006772:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006776:	f002 0220 	and.w	r2, r2, #32
 800677a:	9206      	str	r2, [sp, #24]
 800677c:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800677e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006782:	f042 0220 	orr.w	r2, r2, #32
 8006786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800678a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800678e:	f002 0220 	and.w	r2, r2, #32
 8006792:	9207      	str	r2, [sp, #28]
 8006794:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8006796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800679a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067a6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80067aa:	9208      	str	r2, [sp, #32]
 80067ac:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80067ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80067c2:	9209      	str	r2, [sp, #36]	; 0x24
 80067c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80067c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80067da:	920a      	str	r2, [sp, #40]	; 0x28
 80067dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80067de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067ee:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80067f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80067f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80067f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	930c      	str	r3, [sp, #48]	; 0x30
 800680c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800680e:	2302      	movs	r3, #2
 8006810:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006814:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006816:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006818:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800681c:	486f      	ldr	r0, [pc, #444]	; (80069dc <BSP_QSPI_Init+0x334>)
 800681e:	f001 fa2f 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006822:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006824:	a916      	add	r1, sp, #88	; 0x58
 8006826:	486e      	ldr	r0, [pc, #440]	; (80069e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006828:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800682a:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800682e:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006832:	f001 fa25 	bl	8007c80 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006836:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800683a:	a916      	add	r1, sp, #88	; 0x58
 800683c:	4869      	ldr	r0, [pc, #420]	; (80069e4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800683e:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006840:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006842:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006844:	f001 fa1c 	bl	8007c80 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006848:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800684a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800684e:	4866      	ldr	r0, [pc, #408]	; (80069e8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006850:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006854:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006856:	f001 fa13 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800685a:	a916      	add	r1, sp, #88	; 0x58
 800685c:	4863      	ldr	r0, [pc, #396]	; (80069ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800685e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006862:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006866:	f001 fa0b 	bl	8007c80 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800686a:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800686c:	a916      	add	r1, sp, #88	; 0x58
 800686e:	485e      	ldr	r0, [pc, #376]	; (80069e8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006870:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006872:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006874:	f001 fa04 	bl	8007c80 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006878:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800687a:	a916      	add	r1, sp, #88	; 0x58
 800687c:	485b      	ldr	r0, [pc, #364]	; (80069ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800687e:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006880:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006882:	f001 f9fd 	bl	8007c80 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006886:	a916      	add	r1, sp, #88	; 0x58
 8006888:	4855      	ldr	r0, [pc, #340]	; (80069e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800688a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800688e:	f001 f9f7 	bl	8007c80 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006892:	a916      	add	r1, sp, #88	; 0x58
 8006894:	4855      	ldr	r0, [pc, #340]	; (80069ec <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8006896:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800689a:	f001 f9f1 	bl	8007c80 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800689e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80068a2:	a916      	add	r1, sp, #88	; 0x58
 80068a4:	484e      	ldr	r0, [pc, #312]	; (80069e0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80068a6:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80068a8:	f001 f9ea 	bl	8007c80 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80068ac:	4622      	mov	r2, r4
 80068ae:	210f      	movs	r1, #15
 80068b0:	205c      	movs	r0, #92	; 0x5c
 80068b2:	f000 fbcf 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80068b6:	205c      	movs	r0, #92	; 0x5c
 80068b8:	f000 fbfe 	bl	80070b8 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 80068bc:	a811      	add	r0, sp, #68	; 0x44
 80068be:	f7fe ff22 	bl	8005706 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80068c2:	786a      	ldrb	r2, [r5, #1]
 80068c4:	4b4a      	ldr	r3, [pc, #296]	; (80069f0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 80068c6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d2:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80068d6:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 80068d8:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80068dc:	a90d      	add	r1, sp, #52	; 0x34
 80068de:	4845      	ldr	r0, [pc, #276]	; (80069f4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80068e0:	bf08      	it	eq
 80068e2:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80068e4:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80068e6:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 80068e8:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 80068ea:	f7ff fe73 	bl	80065d4 <MX_QSPI_Init>
 80068ee:	2800      	cmp	r0, #0
 80068f0:	f040 8091 	bne.w	8006a16 <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80068f4:	2103      	movs	r1, #3
 80068f6:	483f      	ldr	r0, [pc, #252]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 80068f8:	f7ff f876 	bl	80059e8 <MT25TL01G_ResetEnable>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d17c      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006900:	2103      	movs	r1, #3
 8006902:	483c      	ldr	r0, [pc, #240]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 8006904:	f7ff f891 	bl	8005a2a <MT25TL01G_ResetMemory>
 8006908:	2800      	cmp	r0, #0
 800690a:	d176      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800690c:	7871      	ldrb	r1, [r6, #1]
 800690e:	4839      	ldr	r0, [pc, #228]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 8006910:	f7fe ff0a 	bl	8005728 <MT25TL01G_AutoPollingMemReady>
 8006914:	4601      	mov	r1, r0
 8006916:	2800      	cmp	r0, #0
 8006918:	d16f      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800691a:	4836      	ldr	r0, [pc, #216]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 800691c:	f7ff f864 	bl	80059e8 <MT25TL01G_ResetEnable>
 8006920:	4601      	mov	r1, r0
 8006922:	2800      	cmp	r0, #0
 8006924:	d169      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8006926:	4833      	ldr	r0, [pc, #204]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 8006928:	f7ff f87f 	bl	8005a2a <MT25TL01G_ResetMemory>
 800692c:	4601      	mov	r1, r0
 800692e:	2800      	cmp	r0, #0
 8006930:	d163      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006932:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8006934:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006936:	482f      	ldr	r0, [pc, #188]	; (80069f4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8006938:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800693a:	f7fe fef5 	bl	8005728 <MT25TL01G_AutoPollingMemReady>
 800693e:	2800      	cmp	r0, #0
 8006940:	d15b      	bne.n	80069fa <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006942:	7871      	ldrb	r1, [r6, #1]
 8006944:	482b      	ldr	r0, [pc, #172]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 8006946:	f7fe ff5e 	bl	8005806 <MT25TL01G_Enter4BytesAddressMode>
 800694a:	2800      	cmp	r0, #0
 800694c:	d155      	bne.n	80069fa <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800694e:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 8006952:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8006956:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006958:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800695c:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800695e:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006960:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006962:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8006964:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006968:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 800696a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800696c:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006970:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006974:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006978:	481e      	ldr	r0, [pc, #120]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 800697a:	f002 fa85 	bl	8008e88 <HAL_QSPI_Command>
 800697e:	2800      	cmp	r0, #0
 8006980:	d13b      	bne.n	80069fa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	f10d 0102 	add.w	r1, sp, #2
 800698a:	481a      	ldr	r0, [pc, #104]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 800698c:	f002 fb18 	bl	8008fc0 <HAL_QSPI_Receive>
 8006990:	bb98      	cbnz	r0, 80069fa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006992:	7871      	ldrb	r1, [r6, #1]
 8006994:	4817      	ldr	r0, [pc, #92]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 8006996:	f7fe fef2 	bl	800577e <MT25TL01G_WriteEnable>
 800699a:	bb70      	cbnz	r0, 80069fa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800699c:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800699e:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a2:	a916      	add	r1, sp, #88	; 0x58
 80069a4:	4813      	ldr	r0, [pc, #76]	; (80069f4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80069a6:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80069a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80069ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	0d1b      	lsrs	r3, r3, #20
 80069b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069c0:	f002 fa62 	bl	8008e88 <HAL_QSPI_Command>
 80069c4:	b9c8      	cbnz	r0, 80069fa <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	f10d 0102 	add.w	r1, sp, #2
 80069ce:	4809      	ldr	r0, [pc, #36]	; (80069f4 <BSP_QSPI_Init+0x34c>)
 80069d0:	f002 fa9d 	bl	8008f0e <HAL_QSPI_Transmit>
 80069d4:	e010      	b.n	80069f8 <BSP_QSPI_Init+0x350>
 80069d6:	bf00      	nop
 80069d8:	58024400 	.word	0x58024400
 80069dc:	58020400 	.word	0x58020400
 80069e0:	58021800 	.word	0x58021800
 80069e4:	58020c00 	.word	0x58020c00
 80069e8:	58021c00 	.word	0x58021c00
 80069ec:	58021400 	.word	0x58021400
 80069f0:	08022ac8 	.word	0x08022ac8
 80069f4:	24000330 	.word	0x24000330
 80069f8:	b110      	cbz	r0, 8006a00 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80069fa:	f06f 0004 	mvn.w	r0, #4
 80069fe:	e65f      	b.n	80066c0 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8006a00:	786a      	ldrb	r2, [r5, #1]
 8006a02:	7829      	ldrb	r1, [r5, #0]
 8006a04:	f7ff fe18 	bl	8006638 <BSP_QSPI_ConfigFlash>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f43f ae58 	beq.w	80066be <BSP_QSPI_Init+0x16>
 8006a0e:	e7f4      	b.n	80069fa <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 8006a10:	f06f 0001 	mvn.w	r0, #1
 8006a14:	e654      	b.n	80066c0 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006a16:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006a1a:	e651      	b.n	80066c0 <BSP_QSPI_Init+0x18>

08006a1c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8006a1c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8006a1e:	4604      	mov	r4, r0
 8006a20:	b970      	cbnz	r0, 8006a40 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8006a22:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <BSP_SDRAM_DeInit+0x2c>)
 8006a24:	4809      	ldr	r0, [pc, #36]	; (8006a4c <BSP_SDRAM_DeInit+0x30>)
 8006a26:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8006a28:	f003 ff3c 	bl	800a8a4 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8006a2c:	207a      	movs	r0, #122	; 0x7a
 8006a2e:	f000 fb51 	bl	80070d4 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8006a32:	4807      	ldr	r0, [pc, #28]	; (8006a50 <BSP_SDRAM_DeInit+0x34>)
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <BSP_SDRAM_DeInit+0x38>)
 8006a36:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006a38:	f002 f8a5 	bl	8008b86 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8006a3c:	4620      	mov	r0, r4
}
 8006a3e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006a40:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006a44:	e7fb      	b.n	8006a3e <BSP_SDRAM_DeInit+0x22>
 8006a46:	bf00      	nop
 8006a48:	52004140 	.word	0x52004140
 8006a4c:	240065e8 	.word	0x240065e8
 8006a50:	2400661c 	.word	0x2400661c
 8006a54:	52000040 	.word	0x52000040

08006a58 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006a58:	2201      	movs	r2, #1
 8006a5a:	4915      	ldr	r1, [pc, #84]	; (8006ab0 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <MX_SDRAM_Init+0x5c>)
{
 8006a5e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006a60:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8006a64:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006a66:	2104      	movs	r1, #4
 8006a68:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006a6a:	2440      	movs	r4, #64	; 0x40
{
 8006a6c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006a6e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006a72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006a76:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8006a80:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006a84:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8006a88:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006a8a:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8006a90:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006a94:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8006a96:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006a98:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8006a9c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006aa0:	f003 fed8 	bl	800a854 <HAL_SDRAM_Init>
}
 8006aa4:	3800      	subs	r0, #0
 8006aa6:	bf18      	it	ne
 8006aa8:	2001      	movne	r0, #1
 8006aaa:	b008      	add	sp, #32
 8006aac:	bd10      	pop	{r4, pc}
 8006aae:	bf00      	nop
 8006ab0:	52004140 	.word	0x52004140
 8006ab4:	240065e8 	.word	0x240065e8

08006ab8 <BSP_SDRAM_Init>:
{
 8006ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006aba:	4605      	mov	r5, r0
{
 8006abc:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	f040 80dd 	bne.w	8006c7e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ac4:	4b71      	ldr	r3, [pc, #452]	; (8006c8c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006ac6:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006ac8:	a909      	add	r1, sp, #36	; 0x24
 8006aca:	4871      	ldr	r0, [pc, #452]	; (8006c90 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006acc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006ad0:	4c70      	ldr	r4, [pc, #448]	; (8006c94 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ad2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006ad6:	4e70      	ldr	r6, [pc, #448]	; (8006c98 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006ad8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006adc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006ae0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006ae4:	9201      	str	r2, [sp, #4]
 8006ae6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006ae8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006aec:	f042 0201 	orr.w	r2, r2, #1
 8006af0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006af4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006af8:	f002 0201 	and.w	r2, r2, #1
 8006afc:	9202      	str	r2, [sp, #8]
 8006afe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b04:	f042 0208 	orr.w	r2, r2, #8
 8006b08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b10:	f002 0208 	and.w	r2, r2, #8
 8006b14:	9203      	str	r2, [sp, #12]
 8006b16:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b1c:	f042 0210 	orr.w	r2, r2, #16
 8006b20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b28:	f002 0210 	and.w	r2, r2, #16
 8006b2c:	9204      	str	r2, [sp, #16]
 8006b2e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b34:	f042 0220 	orr.w	r2, r2, #32
 8006b38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b40:	f002 0220 	and.w	r2, r2, #32
 8006b44:	9205      	str	r2, [sp, #20]
 8006b46:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006b48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b58:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006b5c:	9206      	str	r2, [sp, #24]
 8006b5e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006b6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b70:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006b74:	9207      	str	r2, [sp, #28]
 8006b76:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b84:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b8e:	9308      	str	r3, [sp, #32]
 8006b90:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006b98:	230c      	movs	r3, #12
 8006b9a:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006b9e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006ba4:	f001 f86c 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006ba8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006bac:	a909      	add	r1, sp, #36	; 0x24
 8006bae:	483b      	ldr	r0, [pc, #236]	; (8006c9c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006bb2:	f001 f865 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006bb6:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006bba:	a909      	add	r1, sp, #36	; 0x24
 8006bbc:	4838      	ldr	r0, [pc, #224]	; (8006ca0 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006bc0:	f001 f85e 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006bc4:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006bc8:	a909      	add	r1, sp, #36	; 0x24
 8006bca:	4836      	ldr	r0, [pc, #216]	; (8006ca4 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006bcc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006bce:	f001 f857 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006bd2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006bd6:	a909      	add	r1, sp, #36	; 0x24
 8006bd8:	4833      	ldr	r0, [pc, #204]	; (8006ca8 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006bda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006bdc:	f001 f850 	bl	8007c80 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006be0:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006be4:	a909      	add	r1, sp, #36	; 0x24
 8006be6:	4831      	ldr	r0, [pc, #196]	; (8006cac <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006bea:	f001 f849 	bl	8007c80 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006bee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006bf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006bf6:	f240 2002 	movw	r0, #514	; 0x202
 8006bfa:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006bfe:	6334      	str	r4, [r6, #48]	; 0x30
 8006c00:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006c02:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8006c06:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8006c0a:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8006c0c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006c0e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8006c10:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8006c12:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8006c16:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8006c20:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8006c22:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8006c24:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8006c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8006c2c:	f001 ffab 	bl	8008b86 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8006c30:	4620      	mov	r0, r4
 8006c32:	f001 ff39 	bl	8008aa8 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8006c36:	462a      	mov	r2, r5
 8006c38:	210f      	movs	r1, #15
 8006c3a:	207a      	movs	r0, #122	; 0x7a
 8006c3c:	f000 fa0a 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8006c40:	207a      	movs	r0, #122	; 0x7a
 8006c42:	f000 fa39 	bl	80070b8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ff06 	bl	8006a58 <MX_SDRAM_Init>
 8006c4c:	b9d0      	cbnz	r0, 8006c84 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006c4e:	4919      	ldr	r1, [pc, #100]	; (8006cb4 <BSP_SDRAM_Init+0x1fc>)
 8006c50:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8006c52:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8006c56:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006c5a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006c5c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006c60:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8006c62:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006c66:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006c6a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006c6c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006c6e:	f7fe fd1d 	bl	80056ac <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006c72:	2800      	cmp	r0, #0
 8006c74:	bf18      	it	ne
 8006c76:	f06f 0004 	mvnne.w	r0, #4
}
 8006c7a:	b00f      	add	sp, #60	; 0x3c
 8006c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006c7e:	f06f 0001 	mvn.w	r0, #1
 8006c82:	e7fa      	b.n	8006c7a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	e7f7      	b.n	8006c7a <BSP_SDRAM_Init+0x1c2>
 8006c8a:	bf00      	nop
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	58020c00 	.word	0x58020c00
 8006c94:	24006688 	.word	0x24006688
 8006c98:	240065e8 	.word	0x240065e8
 8006c9c:	58021000 	.word	0x58021000
 8006ca0:	58021400 	.word	0x58021400
 8006ca4:	58021800 	.word	0x58021800
 8006ca8:	58021c00 	.word	0x58021c00
 8006cac:	58022000 	.word	0x58022000
 8006cb0:	52000040 	.word	0x52000040
 8006cb4:	240066f4 	.word	0x240066f4

08006cb8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d171      	bne.n	8006daa <BSP_TS_Init+0xf2>
 8006cc6:	680b      	ldr	r3, [r1, #0]
 8006cc8:	1e5a      	subs	r2, r3, #1
 8006cca:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8006cce:	d26c      	bcs.n	8006daa <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006cd0:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006cd2:	1e51      	subs	r1, r2, #1
 8006cd4:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8006cd8:	d267      	bcs.n	8006daa <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	bf28      	it	cs
 8006cde:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006ce0:	68e2      	ldr	r2, [r4, #12]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d861      	bhi.n	8006daa <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006ce6:	2370      	movs	r3, #112	; 0x70
 8006ce8:	2254      	movs	r2, #84	; 0x54
 8006cea:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006cee:	4f32      	ldr	r7, [pc, #200]	; (8006db8 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006cf0:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8006dd8 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006cf4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006ddc <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006cf8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8006cfc:	4b2f      	ldr	r3, [pc, #188]	; (8006dbc <BSP_TS_Init+0x104>)
 8006cfe:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8006d00:	4b2f      	ldr	r3, [pc, #188]	; (8006dc0 <BSP_TS_Init+0x108>)
 8006d02:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006d04:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <BSP_TS_Init+0x10c>)
 8006d06:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006d08:	4b2f      	ldr	r3, [pc, #188]	; (8006dc8 <BSP_TS_Init+0x110>)
 8006d0a:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8006d0c:	4b2f      	ldr	r3, [pc, #188]	; (8006dcc <BSP_TS_Init+0x114>)
 8006d0e:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006d10:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006d14:	a906      	add	r1, sp, #24
 8006d16:	4828      	ldr	r0, [pc, #160]	; (8006db8 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8006d18:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006d1c:	f7fe fbcc 	bl	80054b8 <FT6X06_RegisterBusIO>
 8006d20:	b118      	cbz	r0, 8006d2a <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 8006d22:	2e01      	cmp	r6, #1
 8006d24:	d044      	beq.n	8006db0 <BSP_TS_Init+0xf8>
 8006d26:	2601      	movs	r6, #1
 8006d28:	e7f2      	b.n	8006d10 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8006d2a:	4669      	mov	r1, sp
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7fe fb0c 	bl	800534a <FT6X06_ReadID>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1f5      	bne.n	8006d22 <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	2b11      	cmp	r3, #17
 8006d3a:	d1f2      	bne.n	8006d22 <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8006d3c:	a903      	add	r1, sp, #12
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f7fe fab0 	bl	80052a4 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006d44:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006d46:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006d48:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006d4c:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4798      	blx	r3
 8006d54:	4605      	mov	r5, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d1e3      	bne.n	8006d22 <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006d5a:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006d5c:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006d5e:	4e1d      	ldr	r6, [pc, #116]	; (8006dd4 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006d60:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006d64:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006d66:	6863      	ldr	r3, [r4, #4]
 8006d68:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006d72:	f8d9 3000 	ldr.w	r3, [r9]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	4798      	blx	r3
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	da02      	bge.n	8006d84 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d7e:	f06f 0504 	mvn.w	r5, #4
 8006d82:	e00e      	b.n	8006da2 <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006d84:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006d86:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006d88:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006d8a:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006d8c:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006d8e:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006d90:	68e3      	ldr	r3, [r4, #12]
 8006d92:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006d94:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006d96:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006d98:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006d9a:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006d9c:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006d9e:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006da2:	4628      	mov	r0, r5
 8006da4:	b00c      	add	sp, #48	; 0x30
 8006da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006daa:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006dae:	e7f8      	b.n	8006da2 <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8006db0:	f04f 35ff 	mov.w	r5, #4294967295
 8006db4:	e7f5      	b.n	8006da2 <BSP_TS_Init+0xea>
 8006db6:	bf00      	nop
 8006db8:	24006714 	.word	0x24006714
 8006dbc:	080062b9 	.word	0x080062b9
 8006dc0:	08006225 	.word	0x08006225
 8006dc4:	0800659d 	.word	0x0800659d
 8006dc8:	08006569 	.word	0x08006569
 8006dcc:	080065d1 	.word	0x080065d1
 8006dd0:	24000028 	.word	0x24000028
 8006dd4:	24006740 	.word	0x24006740
 8006dd8:	2400673c 	.word	0x2400673c
 8006ddc:	24006768 	.word	0x24006768

08006de0 <BSP_TS_GetState>:
{
 8006de0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006de4:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d151      	bne.n	8006e8e <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006dea:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <BSP_TS_GetState+0xb4>)
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	4a2a      	ldr	r2, [pc, #168]	; (8006e98 <BSP_TS_GetState+0xb8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6810      	ldr	r0, [r2, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	4798      	blx	r3
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	db45      	blt.n	8006e88 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006dfc:	4927      	ldr	r1, [pc, #156]	; (8006e9c <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 8006dfe:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006e00:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006e04:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006e06:	2800      	cmp	r0, #0
 8006e08:	d03a      	beq.n	8006e80 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006e0a:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006e0c:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006e10:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006e12:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 8006e16:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006e1a:	bf42      	ittt	mi
 8006e1c:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 8006e1e:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8006e20:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006e22:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006e24:	bf44      	itt	mi
 8006e26:	f108 34ff 	addmi.w	r4, r8, #4294967295
 8006e2a:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006e2c:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006e2e:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006e30:	bf48      	it	mi
 8006e32:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006e36:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006e3a:	bf48      	it	mi
 8006e3c:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006e3e:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006e40:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006e42:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006e44:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006e46:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006e4a:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006e4e:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006e50:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006e52:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006e54:	bf8c      	ite	hi
 8006e56:	eba4 050c 	subhi.w	r5, r4, ip
 8006e5a:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	bf8c      	ite	hi
 8006e62:	1bda      	subhi	r2, r3, r7
 8006e64:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006e66:	42a8      	cmp	r0, r5
 8006e68:	d301      	bcc.n	8006e6e <BSP_TS_GetState+0x8e>
 8006e6a:	4290      	cmp	r0, r2
 8006e6c:	d205      	bcs.n	8006e7a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006e6e:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006e70:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006e72:	2000      	movs	r0, #0
}
 8006e74:	b004      	add	sp, #16
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006e7a:	e9c6 c701 	strd	ip, r7, [r6, #4]
 8006e7e:	e7f8      	b.n	8006e72 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006e80:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006e84:	60b7      	str	r7, [r6, #8]
 8006e86:	e7f5      	b.n	8006e74 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006e88:	f06f 0004 	mvn.w	r0, #4
 8006e8c:	e7f2      	b.n	8006e74 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006e8e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006e92:	e7ef      	b.n	8006e74 <BSP_TS_GetState+0x94>
 8006e94:	24006768 	.word	0x24006768
 8006e98:	2400673c 	.word	0x2400673c
 8006e9c:	24006740 	.word	0x24006740

08006ea0 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <SystemInit+0xb8>)
 8006ea2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ea6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	f042 0210 	orr.w	r2, r2, #16
 8006eb4:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006eb6:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <SystemInit+0xbc>)
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d805      	bhi.n	8006ece <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	f023 030f 	bic.w	r3, r3, #15
 8006ec8:	f043 0307 	orr.w	r3, r3, #7
 8006ecc:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <SystemInit+0xc0>)
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006ed8:	2200      	movs	r2, #0
 8006eda:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006edc:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <SystemInit+0xc4>)
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006ee2:	491e      	ldr	r1, [pc, #120]	; (8006f5c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006ee4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006ee6:	680a      	ldr	r2, [r1, #0]
 8006ee8:	0712      	lsls	r2, r2, #28
 8006eea:	d505      	bpl.n	8006ef8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006eec:	680a      	ldr	r2, [r1, #0]
 8006eee:	f022 020f 	bic.w	r2, r2, #15
 8006ef2:	f042 0207 	orr.w	r2, r2, #7
 8006ef6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006ef8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006efa:	491b      	ldr	r1, [pc, #108]	; (8006f68 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006efc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006efe:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006f00:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006f02:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006f04:	4919      	ldr	r1, [pc, #100]	; (8006f6c <SystemInit+0xcc>)
 8006f06:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006f08:	4919      	ldr	r1, [pc, #100]	; (8006f70 <SystemInit+0xd0>)
 8006f0a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006f0e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006f10:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006f12:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006f14:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006f16:	6819      	ldr	r1, [r3, #0]
 8006f18:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006f1c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006f24:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8006f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <SystemInit+0xd4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	0c1b      	lsrs	r3, r3, #16
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f3c:	d203      	bcs.n	8006f46 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <SystemInit+0xd8>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006f46:	4b0d      	ldr	r3, [pc, #52]	; (8006f7c <SystemInit+0xdc>)
 8006f48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f52:	4b01      	ldr	r3, [pc, #4]	; (8006f58 <SystemInit+0xb8>)
 8006f54:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8006f56:	4770      	bx	lr
 8006f58:	e000ed00 	.word	0xe000ed00
 8006f5c:	52002000 	.word	0x52002000
 8006f60:	58024400 	.word	0x58024400
 8006f64:	eaf6ed7f 	.word	0xeaf6ed7f
 8006f68:	02020200 	.word	0x02020200
 8006f6c:	01ff0000 	.word	0x01ff0000
 8006f70:	01010280 	.word	0x01010280
 8006f74:	5c001000 	.word	0x5c001000
 8006f78:	51008000 	.word	0x51008000
 8006f7c:	52004000 	.word	0x52004000

08006f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f80:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f82:	2003      	movs	r0, #3
 8006f84:	f000 f854 	bl	8007030 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f88:	f002 fc0c 	bl	80097a4 <HAL_RCC_GetSysClockFreq>
 8006f8c:	490f      	ldr	r1, [pc, #60]	; (8006fcc <HAL_Init+0x4c>)
 8006f8e:	4a10      	ldr	r2, [pc, #64]	; (8006fd0 <HAL_Init+0x50>)
 8006f90:	698b      	ldr	r3, [r1, #24]
 8006f92:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006f96:	5cd3      	ldrb	r3, [r2, r3]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f9e:	698b      	ldr	r3, [r1, #24]
 8006fa0:	f003 030f 	and.w	r3, r3, #15
 8006fa4:	5cd3      	ldrb	r3, [r2, r3]
 8006fa6:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <HAL_Init+0x54>)
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	fa20 f303 	lsr.w	r3, r0, r3
 8006fb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_Init+0x58>)
 8006fb4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f7fa fa9e 	bl	80014f8 <HAL_InitTick>
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	b918      	cbnz	r0, 8006fc8 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006fc0:	f7fa f822 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006fc8:	2401      	movs	r4, #1
 8006fca:	e7fb      	b.n	8006fc4 <HAL_Init+0x44>
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	08022ad0 	.word	0x08022ad0
 8006fd4:	2400005c 	.word	0x2400005c
 8006fd8:	24000058 	.word	0x24000058

08006fdc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006fdc:	4a03      	ldr	r2, [pc, #12]	; (8006fec <HAL_IncTick+0x10>)
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <HAL_IncTick+0x14>)
 8006fe0:	6811      	ldr	r1, [r2, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	440b      	add	r3, r1
 8006fe6:	6013      	str	r3, [r2, #0]
}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2400676c 	.word	0x2400676c
 8006ff0:	24000060 	.word	0x24000060

08006ff4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006ff4:	4b01      	ldr	r3, [pc, #4]	; (8006ffc <HAL_GetTick+0x8>)
 8006ff6:	6818      	ldr	r0, [r3, #0]
}
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2400676c 	.word	0x2400676c

08007000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007000:	b538      	push	{r3, r4, r5, lr}
 8007002:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007004:	f7ff fff6 	bl	8006ff4 <HAL_GetTick>
 8007008:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800700a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800700c:	bf1e      	ittt	ne
 800700e:	4b04      	ldrne	r3, [pc, #16]	; (8007020 <HAL_Delay+0x20>)
 8007010:	781b      	ldrbne	r3, [r3, #0]
 8007012:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007014:	f7ff ffee 	bl	8006ff4 <HAL_GetTick>
 8007018:	1b43      	subs	r3, r0, r5
 800701a:	42a3      	cmp	r3, r4
 800701c:	d3fa      	bcc.n	8007014 <HAL_Delay+0x14>
  {
  }
}
 800701e:	bd38      	pop	{r3, r4, r5, pc}
 8007020:	24000060 	.word	0x24000060

08007024 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007024:	4b01      	ldr	r3, [pc, #4]	; (800702c <HAL_GetREVID+0x8>)
 8007026:	6818      	ldr	r0, [r3, #0]
}
 8007028:	0c00      	lsrs	r0, r0, #16
 800702a:	4770      	bx	lr
 800702c:	5c001000 	.word	0x5c001000

08007030 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007030:	4907      	ldr	r1, [pc, #28]	; (8007050 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007032:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007034:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007036:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800703a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800703e:	0412      	lsls	r2, r2, #16
 8007040:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800704c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800704e:	4770      	bx	lr
 8007050:	e000ed00 	.word	0xe000ed00

08007054 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007056:	b530      	push	{r4, r5, lr}
 8007058:	68dc      	ldr	r4, [r3, #12]
 800705a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800705e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007062:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007064:	2d04      	cmp	r5, #4
 8007066:	bf28      	it	cs
 8007068:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800706a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800706c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007070:	bf8c      	ite	hi
 8007072:	3c03      	subhi	r4, #3
 8007074:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007076:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800707a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800707c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007080:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007084:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007088:	fa01 f104 	lsl.w	r1, r1, r4
 800708c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007090:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007094:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007096:	db06      	blt.n	80070a6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007098:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800709c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80070a0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80070a4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a6:	f000 000f 	and.w	r0, r0, #15
 80070aa:	4a02      	ldr	r2, [pc, #8]	; (80070b4 <HAL_NVIC_SetPriority+0x60>)
 80070ac:	5413      	strb	r3, [r2, r0]
 80070ae:	e7f9      	b.n	80070a4 <HAL_NVIC_SetPriority+0x50>
 80070b0:	e000ed00 	.word	0xe000ed00
 80070b4:	e000ed14 	.word	0xe000ed14

080070b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80070b8:	2800      	cmp	r0, #0
 80070ba:	db08      	blt.n	80070ce <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070bc:	2301      	movs	r3, #1
 80070be:	0942      	lsrs	r2, r0, #5
 80070c0:	f000 001f 	and.w	r0, r0, #31
 80070c4:	fa03 f000 	lsl.w	r0, r3, r0
 80070c8:	4b01      	ldr	r3, [pc, #4]	; (80070d0 <HAL_NVIC_EnableIRQ+0x18>)
 80070ca:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80070ce:	4770      	bx	lr
 80070d0:	e000e100 	.word	0xe000e100

080070d4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80070d4:	2800      	cmp	r0, #0
 80070d6:	db0d      	blt.n	80070f4 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070d8:	0943      	lsrs	r3, r0, #5
 80070da:	2201      	movs	r2, #1
 80070dc:	f000 001f 	and.w	r0, r0, #31
 80070e0:	3320      	adds	r3, #32
 80070e2:	fa02 f000 	lsl.w	r0, r2, r0
 80070e6:	4a04      	ldr	r2, [pc, #16]	; (80070f8 <HAL_NVIC_DisableIRQ+0x24>)
 80070e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80070ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80070f0:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	e000e100 	.word	0xe000e100

080070fc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80070fc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007100:	4b04      	ldr	r3, [pc, #16]	; (8007114 <HAL_MPU_Disable+0x18>)
 8007102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007104:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	e000ed00 	.word	0xe000ed00

08007118 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007118:	4b06      	ldr	r3, [pc, #24]	; (8007134 <HAL_MPU_Enable+0x1c>)
 800711a:	f040 0001 	orr.w	r0, r0, #1
 800711e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007128:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800712a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800712e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007132:	4770      	bx	lr
 8007134:	e000ed00 	.word	0xe000ed00

08007138 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007138:	7843      	ldrb	r3, [r0, #1]
 800713a:	4a14      	ldr	r2, [pc, #80]	; (800718c <HAL_MPU_ConfigRegion+0x54>)
{
 800713c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800713e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8007142:	7801      	ldrb	r1, [r0, #0]
 8007144:	b1e9      	cbz	r1, 8007182 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8007146:	6843      	ldr	r3, [r0, #4]
 8007148:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800714c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800714e:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007150:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007152:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007156:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007158:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800715a:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800715e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007160:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007164:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007166:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800716a:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800716c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007170:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007172:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007176:	7a01      	ldrb	r1, [r0, #8]
 8007178:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800717c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007180:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8007182:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8007186:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800718a:	e7f9      	b.n	8007180 <HAL_MPU_ConfigRegion+0x48>
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007190:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007192:	4604      	mov	r4, r0
 8007194:	b908      	cbnz	r0, 800719a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8007196:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007198:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800719a:	7f43      	ldrb	r3, [r0, #29]
 800719c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071a0:	b913      	cbnz	r3, 80071a8 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80071a2:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80071a4:	f7f9 ff48 	bl	8001038 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80071a8:	2302      	movs	r3, #2
 80071aa:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80071ac:	7923      	ldrb	r3, [r4, #4]
 80071ae:	b9e3      	cbnz	r3, 80071ea <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <HAL_CRC_Init+0x70>)
 80071b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	f022 0218 	bic.w	r2, r2, #24
 80071bc:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80071be:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80071c0:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80071c2:	b9d2      	cbnz	r2, 80071fa <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80071c4:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80071c8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80071ca:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	6961      	ldr	r1, [r4, #20]
 80071d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071d4:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80071d6:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80071d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80071da:	689a      	ldr	r2, [r3, #8]
 80071dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80071e4:	2301      	movs	r3, #1
 80071e6:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80071e8:	e7d6      	b.n	8007198 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80071ea:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 f808 	bl	8007204 <HAL_CRCEx_Polynomial_Set>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d0e2      	beq.n	80071be <HAL_CRC_Init+0x2e>
 80071f8:	e7cd      	b.n	8007196 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80071fa:	6922      	ldr	r2, [r4, #16]
 80071fc:	e7e4      	b.n	80071c8 <HAL_CRC_Init+0x38>
 80071fe:	bf00      	nop
 8007200:	04c11db7 	.word	0x04c11db7

08007204 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007204:	07cb      	lsls	r3, r1, #31
{
 8007206:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007208:	d50c      	bpl.n	8007224 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800720a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800720c:	3b01      	subs	r3, #1
 800720e:	d31c      	bcc.n	800724a <HAL_CRCEx_Polynomial_Set+0x46>
 8007210:	fa21 f403 	lsr.w	r4, r1, r3
 8007214:	07e4      	lsls	r4, r4, #31
 8007216:	d5f9      	bpl.n	800720c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8007218:	2a10      	cmp	r2, #16
 800721a:	d012      	beq.n	8007242 <HAL_CRCEx_Polynomial_Set+0x3e>
 800721c:	d804      	bhi.n	8007228 <HAL_CRCEx_Polynomial_Set+0x24>
 800721e:	b13a      	cbz	r2, 8007230 <HAL_CRCEx_Polynomial_Set+0x2c>
 8007220:	2a08      	cmp	r2, #8
 8007222:	d010      	beq.n	8007246 <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 8007224:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007226:	e00b      	b.n	8007240 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 8007228:	2a18      	cmp	r2, #24
 800722a:	d1fb      	bne.n	8007224 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800722c:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800722e:	d8f9      	bhi.n	8007224 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007230:	6800      	ldr	r0, [r0, #0]
 8007232:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007234:	6883      	ldr	r3, [r0, #8]
 8007236:	f023 0318 	bic.w	r3, r3, #24
 800723a:	431a      	orrs	r2, r3
 800723c:	6082      	str	r2, [r0, #8]
 800723e:	2000      	movs	r0, #0
}
 8007240:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007242:	2b07      	cmp	r3, #7
 8007244:	e7f3      	b.n	800722e <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007246:	2b0f      	cmp	r3, #15
 8007248:	e7f1      	b.n	800722e <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800724a:	2a00      	cmp	r2, #0
 800724c:	d1ea      	bne.n	8007224 <HAL_CRCEx_Polynomial_Set+0x20>
 800724e:	e7ef      	b.n	8007230 <HAL_CRCEx_Polynomial_Set+0x2c>

08007250 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007250:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007252:	4604      	mov	r4, r0
 8007254:	2800      	cmp	r0, #0
 8007256:	d036      	beq.n	80072c6 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007258:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800725c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007260:	b91b      	cbnz	r3, 800726a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007262:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007266:	f7f9 feff 	bl	8001068 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800726a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800726c:	69e0      	ldr	r0, [r4, #28]
 800726e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007270:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007278:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800727a:	6819      	ldr	r1, [r3, #0]
 800727c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007280:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007284:	430a      	orrs	r2, r1
 8007286:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800728a:	68a2      	ldr	r2, [r4, #8]
 800728c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8007290:	4302      	orrs	r2, r0
 8007292:	f021 0101 	bic.w	r1, r1, #1
 8007296:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007298:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800729a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800729c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800729e:	0c12      	lsrs	r2, r2, #16
 80072a0:	0412      	lsls	r2, r2, #16
 80072a2:	430a      	orrs	r2, r1
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80072a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80072a8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80072ac:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80072b0:	0552      	lsls	r2, r2, #21
 80072b2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80072b6:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80072b8:	430a      	orrs	r2, r1
 80072ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80072bc:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80072be:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80072c0:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 80072c4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7fc      	b.n	80072c4 <HAL_DMA2D_Init+0x74>

080072ca <HAL_DMA2D_LineEventCallback>:
 80072ca:	4770      	bx	lr

080072cc <HAL_DMA2D_CLUTLoadingCpltCallback>:
 80072cc:	4770      	bx	lr

080072ce <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80072ce:	6803      	ldr	r3, [r0, #0]
{
 80072d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80072d2:	685e      	ldr	r6, [r3, #4]
{
 80072d4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80072d6:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80072d8:	07f2      	lsls	r2, r6, #31
 80072da:	d514      	bpl.n	8007306 <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80072dc:	05e9      	lsls	r1, r5, #23
 80072de:	d512      	bpl.n	8007306 <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072e6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80072e8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80072f0:	2201      	movs	r2, #1
 80072f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072f4:	2304      	movs	r3, #4
 80072f6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072fa:	2300      	movs	r3, #0
 80072fc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007300:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007302:	b103      	cbz	r3, 8007306 <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007304:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007306:	06b2      	lsls	r2, r6, #26
 8007308:	d516      	bpl.n	8007338 <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800730a:	04ab      	lsls	r3, r5, #18
 800730c:	d514      	bpl.n	8007338 <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007316:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007318:	2220      	movs	r2, #32
 800731a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800731c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800731e:	f043 0302 	orr.w	r3, r3, #2
 8007322:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007324:	2304      	movs	r3, #4
 8007326:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800732a:	2300      	movs	r3, #0
 800732c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007332:	b10b      	cbz	r3, 8007338 <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007334:	4620      	mov	r0, r4
 8007336:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007338:	0730      	lsls	r0, r6, #28
 800733a:	d516      	bpl.n	800736a <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800733c:	0529      	lsls	r1, r5, #20
 800733e:	d514      	bpl.n	800736a <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007348:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800734a:	2208      	movs	r2, #8
 800734c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800734e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007356:	2304      	movs	r3, #4
 8007358:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800735c:	2300      	movs	r3, #0
 800735e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007364:	b10b      	cbz	r3, 800736a <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007366:	4620      	mov	r0, r4
 8007368:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800736a:	0772      	lsls	r2, r6, #29
 800736c:	d50b      	bpl.n	8007386 <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800736e:	056b      	lsls	r3, r5, #21
 8007370:	d509      	bpl.n	8007386 <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007372:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007374:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800737c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800737e:	2204      	movs	r2, #4
 8007380:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007382:	f7ff ffa2 	bl	80072ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007386:	07b0      	lsls	r0, r6, #30
 8007388:	d514      	bpl.n	80073b4 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800738a:	05a9      	lsls	r1, r5, #22
 800738c:	d512      	bpl.n	80073b4 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007396:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007398:	2202      	movs	r2, #2
 800739a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800739c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800739e:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073a6:	2300      	movs	r3, #0
 80073a8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 80073ac:	6a23      	ldr	r3, [r4, #32]
 80073ae:	b10b      	cbz	r3, 80073b4 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80073b0:	4620      	mov	r0, r4
 80073b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80073b4:	06f2      	lsls	r2, r6, #27
 80073b6:	d513      	bpl.n	80073e0 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80073b8:	04eb      	lsls	r3, r5, #19
 80073ba:	d511      	bpl.n	80073e0 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80073bc:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80073be:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80073c8:	2210      	movs	r2, #16
 80073ca:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80073cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ce:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 80073d6:	2300      	movs	r3, #0
 80073d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80073dc:	f7ff ff76 	bl	80072cc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80073e0:	bd70      	pop	{r4, r5, r6, pc}

080073e2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	4607      	mov	r7, r0
 80073e8:	460d      	mov	r5, r1
 80073ea:	4614      	mov	r4, r2
 80073ec:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80073ee:	f7ff fe01 	bl	8006ff4 <HAL_GetTick>
 80073f2:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80073f8:	07d2      	lsls	r2, r2, #31
 80073fa:	d50a      	bpl.n	8007412 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80073fc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007400:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 8007402:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007404:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007408:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800740c:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800740e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007412:	f7ff fdef 	bl	8006ff4 <HAL_GetTick>
 8007416:	eba0 0008 	sub.w	r0, r0, r8
 800741a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800741e:	d9e9      	bls.n	80073f4 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 8007420:	2003      	movs	r0, #3
 8007422:	e7f4      	b.n	800740e <DSI_ShortWrite+0x2c>

08007424 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007424:	7c03      	ldrb	r3, [r0, #16]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d05c      	beq.n	80074e4 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800742a:	2200      	movs	r2, #0
 800742c:	6803      	ldr	r3, [r0, #0]
 800742e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007432:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007436:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007438:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800743a:	d507      	bpl.n	800744c <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800743c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007440:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8007444:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8007448:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800744c:	078a      	lsls	r2, r1, #30
 800744e:	d505      	bpl.n	800745c <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007450:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007454:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8007458:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800745c:	074a      	lsls	r2, r1, #29
 800745e:	d505      	bpl.n	800746c <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007460:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800746c:	070a      	lsls	r2, r1, #28
 800746e:	d505      	bpl.n	800747c <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007470:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007474:	f042 0202 	orr.w	r2, r2, #2
 8007478:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800747c:	06ca      	lsls	r2, r1, #27
 800747e:	d505      	bpl.n	800748c <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007480:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007484:	f042 020c 	orr.w	r2, r2, #12
 8007488:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800748c:	068a      	lsls	r2, r1, #26
 800748e:	d505      	bpl.n	800749c <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007490:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007494:	f042 0210 	orr.w	r2, r2, #16
 8007498:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800749c:	064a      	lsls	r2, r1, #25
 800749e:	d505      	bpl.n	80074ac <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80074a0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074a4:	f042 0220 	orr.w	r2, r2, #32
 80074a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80074ac:	060a      	lsls	r2, r1, #24
 80074ae:	d505      	bpl.n	80074bc <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80074b0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80074bc:	05ca      	lsls	r2, r1, #23
 80074be:	d505      	bpl.n	80074cc <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80074c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074c8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80074cc:	058a      	lsls	r2, r1, #22
 80074ce:	d505      	bpl.n	80074dc <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80074d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80074d4:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80074d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80074dc:	2300      	movs	r3, #0
 80074de:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80074e0:	4618      	mov	r0, r3
 80074e2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80074e4:	2002      	movs	r0, #2
}
 80074e6:	4770      	bx	lr

080074e8 <HAL_DSI_Init>:
{
 80074e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074ea:	460d      	mov	r5, r1
  if (hdsi == NULL)
 80074ec:	4604      	mov	r4, r0
 80074ee:	2800      	cmp	r0, #0
 80074f0:	f000 80a9 	beq.w	8007646 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80074f4:	7c43      	ldrb	r3, [r0, #17]
 80074f6:	b90b      	cbnz	r3, 80074fc <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80074f8:	f7f9 fdda 	bl	80010b0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80074fc:	2303      	movs	r3, #3
 80074fe:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800750a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800750e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8007512:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8007516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800751e:	f7ff fd69 	bl	8006ff4 <HAL_GetTick>
 8007522:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007524:	6822      	ldr	r2, [r4, #0]
 8007526:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800752a:	04d9      	lsls	r1, r3, #19
 800752c:	d57a      	bpl.n	8007624 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800752e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007532:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8007536:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800753a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800753e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007542:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007546:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007548:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800754c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800754e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007552:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007554:	430b      	orrs	r3, r1
 8007556:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800755a:	2300      	movs	r3, #0
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007562:	f043 0301 	orr.w	r3, r3, #1
 8007566:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800756a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007576:	f7ff fd43 	bl	8007000 <HAL_Delay>
  tickstart = HAL_GetTick();
 800757a:	f7ff fd3b 	bl	8006ff4 <HAL_GetTick>
 800757e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007586:	05d2      	lsls	r2, r2, #23
 8007588:	d556      	bpl.n	8007638 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800758a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800758e:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007592:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007594:	f042 0206 	orr.w	r2, r2, #6
 8007598:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800759c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80075a0:	f022 0203 	bic.w	r2, r2, #3
 80075a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80075ac:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80075ae:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80075b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80075bc:	f022 0203 	bic.w	r2, r2, #3
 80075c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80075c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80075c8:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80075ca:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80075cc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80075d6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80075d8:	689a      	ldr	r2, [r3, #8]
 80075da:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075dc:	491b      	ldr	r1, [pc, #108]	; (800764c <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80075de:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075e0:	686a      	ldr	r2, [r5, #4]
 80075e2:	2a01      	cmp	r2, #1
 80075e4:	bf38      	it	cc
 80075e6:	2201      	movcc	r2, #1
 80075e8:	434a      	muls	r2, r1
 80075ea:	68a9      	ldr	r1, [r5, #8]
 80075ec:	f001 0103 	and.w	r1, r1, #3
 80075f0:	408a      	lsls	r2, r1
 80075f2:	6829      	ldr	r1, [r5, #0]
 80075f4:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 80075f6:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80075f8:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80075fc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8007600:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8007604:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007608:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800760c:	430a      	orrs	r2, r1
 800760e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007612:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007616:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800761a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800761c:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800761e:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8007620:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8007622:	e007      	b.n	8007634 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007624:	f7ff fce6 	bl	8006ff4 <HAL_GetTick>
 8007628:	1b80      	subs	r0, r0, r6
 800762a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800762e:	f67f af79 	bls.w	8007524 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007632:	2003      	movs	r0, #3
}
 8007634:	b002      	add	sp, #8
 8007636:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007638:	f7ff fcdc 	bl	8006ff4 <HAL_GetTick>
 800763c:	1b80      	subs	r0, r0, r6
 800763e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007642:	d99d      	bls.n	8007580 <HAL_DSI_Init+0x98>
 8007644:	e7f5      	b.n	8007632 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8007646:	2001      	movs	r0, #1
 8007648:	e7f4      	b.n	8007634 <HAL_DSI_Init+0x14c>
 800764a:	bf00      	nop
 800764c:	003d0900 	.word	0x003d0900

08007650 <HAL_DSI_ErrorCallback>:
 8007650:	4770      	bx	lr

08007652 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007652:	6803      	ldr	r3, [r0, #0]
 8007654:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007658:	07d1      	lsls	r1, r2, #31
{
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800765e:	d508      	bpl.n	8007672 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007660:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007664:	07d2      	lsls	r2, r2, #31
 8007666:	d504      	bpl.n	8007672 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8007668:	2201      	movs	r2, #1
 800766a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800766e:	f7fa fb9f 	bl	8001db0 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007672:	6823      	ldr	r3, [r4, #0]
 8007674:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8007678:	0791      	lsls	r1, r2, #30
 800767a:	d509      	bpl.n	8007690 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800767c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007680:	0792      	lsls	r2, r2, #30
 8007682:	d505      	bpl.n	8007690 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007684:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007686:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007688:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800768c:	f7fa fbc2 	bl	8001e14 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007690:	69a3      	ldr	r3, [r4, #24]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d04e      	beq.n	8007734 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800769c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80076a0:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80076a4:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80076a6:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80076aa:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80076ac:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80076ae:	b119      	cbz	r1, 80076b8 <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80076b0:	6961      	ldr	r1, [r4, #20]
 80076b2:	f041 0101 	orr.w	r1, r1, #1
 80076b6:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80076b8:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80076bc:	d003      	beq.n	80076c6 <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80076be:	6962      	ldr	r2, [r4, #20]
 80076c0:	f042 0202 	orr.w	r2, r2, #2
 80076c4:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80076c6:	07d8      	lsls	r0, r3, #31
 80076c8:	d503      	bpl.n	80076d2 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80076ca:	6962      	ldr	r2, [r4, #20]
 80076cc:	f042 0204 	orr.w	r2, r2, #4
 80076d0:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80076d2:	0799      	lsls	r1, r3, #30
 80076d4:	d503      	bpl.n	80076de <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80076d6:	6962      	ldr	r2, [r4, #20]
 80076d8:	f042 0208 	orr.w	r2, r2, #8
 80076dc:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80076de:	f013 0f0c 	tst.w	r3, #12
 80076e2:	d003      	beq.n	80076ec <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80076e4:	6962      	ldr	r2, [r4, #20]
 80076e6:	f042 0210 	orr.w	r2, r2, #16
 80076ea:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80076ec:	06da      	lsls	r2, r3, #27
 80076ee:	d503      	bpl.n	80076f8 <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80076f0:	6962      	ldr	r2, [r4, #20]
 80076f2:	f042 0220 	orr.w	r2, r2, #32
 80076f6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80076f8:	0698      	lsls	r0, r3, #26
 80076fa:	d503      	bpl.n	8007704 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80076fc:	6962      	ldr	r2, [r4, #20]
 80076fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007702:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007704:	0659      	lsls	r1, r3, #25
 8007706:	d503      	bpl.n	8007710 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007708:	6962      	ldr	r2, [r4, #20]
 800770a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800770e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007710:	061a      	lsls	r2, r3, #24
 8007712:	d503      	bpl.n	800771c <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007714:	6962      	ldr	r2, [r4, #20]
 8007716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800771a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800771c:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8007720:	d003      	beq.n	800772a <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007722:	6963      	ldr	r3, [r4, #20]
 8007724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007728:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800772a:	6963      	ldr	r3, [r4, #20]
 800772c:	b113      	cbz	r3, 8007734 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff ff8e 	bl	8007650 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8007734:	bd10      	pop	{r4, pc}

08007736 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007736:	7c03      	ldrb	r3, [r0, #16]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d00b      	beq.n	8007754 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800773c:	6803      	ldr	r3, [r0, #0]
 800773e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007740:	f022 0203 	bic.w	r2, r2, #3
 8007744:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8007746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007748:	4311      	orrs	r1, r2
 800774a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800774c:	2300      	movs	r3, #0
 800774e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007750:	4618      	mov	r0, r3
 8007752:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007754:	2002      	movs	r0, #2
}
 8007756:	4770      	bx	lr

08007758 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007758:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800775a:	7c03      	ldrb	r3, [r0, #16]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d06a      	beq.n	8007836 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007760:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007762:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800776c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007778:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	f022 0203 	bic.w	r2, r2, #3
 800778a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	4322      	orrs	r2, r4
 8007790:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007792:	695a      	ldr	r2, [r3, #20]
 8007794:	f022 0207 	bic.w	r2, r2, #7
 8007798:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800779a:	695c      	ldr	r4, [r3, #20]
 800779c:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 80077a0:	432a      	orrs	r2, r5
 80077a2:	694d      	ldr	r5, [r1, #20]
 80077a4:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80077a6:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80077a8:	4322      	orrs	r2, r4
 80077aa:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80077ac:	691a      	ldr	r2, [r3, #16]
 80077ae:	f022 020f 	bic.w	r2, r2, #15
 80077b2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80077b4:	691c      	ldr	r4, [r3, #16]
 80077b6:	432c      	orrs	r4, r5
 80077b8:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80077ba:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 80077be:	f024 040e 	bic.w	r4, r4, #14
 80077c2:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80077c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80077ca:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80077cc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80077d0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80077d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077d6:	0c12      	lsrs	r2, r2, #16
 80077d8:	0412      	lsls	r2, r2, #16
 80077da:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80077dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80077de:	4322      	orrs	r2, r4
 80077e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80077e2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80077e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80077ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80077ee:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 80077f2:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80077f6:	432a      	orrs	r2, r5
 80077f8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80077fa:	432a      	orrs	r2, r5
 80077fc:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80077fe:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007800:	432a      	orrs	r2, r5
 8007802:	4322      	orrs	r2, r4
 8007804:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007808:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800780a:	f022 0201 	bic.w	r2, r2, #1
 800780e:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007810:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007812:	430a      	orrs	r2, r1
 8007814:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007816:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007822:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007826:	f042 0202 	orr.w	r2, r2, #2
 800782a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800782e:	2300      	movs	r3, #0
 8007830:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007832:	4618      	mov	r0, r3
}
 8007834:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007836:	2002      	movs	r0, #2
 8007838:	e7fc      	b.n	8007834 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800783c <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800783c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800783e:	7c03      	ldrb	r3, [r0, #16]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d02a      	beq.n	800789a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007844:	6802      	ldr	r2, [r0, #0]
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <HAL_DSI_ConfigCommand+0x64>)
 8007848:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800784a:	4023      	ands	r3, r4
 800784c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800784e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8007850:	e9d1 3500 	ldrd	r3, r5, [r1]
 8007854:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8007856:	688d      	ldr	r5, [r1, #8]
 8007858:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800785a:	68cd      	ldr	r5, [r1, #12]
 800785c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800785e:	690d      	ldr	r5, [r1, #16]
 8007860:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007862:	694d      	ldr	r5, [r1, #20]
 8007864:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8007866:	698d      	ldr	r5, [r1, #24]
 8007868:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800786a:	69cd      	ldr	r5, [r1, #28]
 800786c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800786e:	6a0d      	ldr	r5, [r1, #32]
 8007870:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007872:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8007874:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8007876:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8007878:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800787a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800787c:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800787e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007880:	4323      	orrs	r3, r4
 8007882:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007884:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8007886:	f023 0302 	bic.w	r3, r3, #2
 800788a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800788c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800788e:	430b      	orrs	r3, r1
 8007890:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007892:	2300      	movs	r3, #0
 8007894:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007896:	4618      	mov	r0, r3
}
 8007898:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800789a:	2002      	movs	r0, #2
 800789c:	e7fc      	b.n	8007898 <HAL_DSI_ConfigCommand+0x5c>
 800789e:	bf00      	nop
 80078a0:	fef080ff 	.word	0xfef080ff

080078a4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078a4:	7c03      	ldrb	r3, [r0, #16]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d00b      	beq.n	80078c2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80078aa:	6803      	ldr	r3, [r0, #0]
 80078ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ae:	f022 021f 	bic.w	r2, r2, #31
 80078b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	4311      	orrs	r1, r2
 80078b8:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80078ba:	2300      	movs	r3, #0
 80078bc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80078be:	4618      	mov	r0, r3
 80078c0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80078c2:	2002      	movs	r0, #2
}
 80078c4:	4770      	bx	lr

080078c6 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80078c6:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078c8:	7c03      	ldrb	r3, [r0, #16]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d035      	beq.n	800793a <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80078ce:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80078d0:	e9d1 2400 	ldrd	r2, r4, [r1]
 80078d4:	4294      	cmp	r4, r2
 80078d6:	bf38      	it	cc
 80078d8:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80078da:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80078de:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80078e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80078e6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80078ea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80078ee:	4322      	orrs	r2, r4
 80078f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80078f4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80078f8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80078fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007900:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007904:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007908:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800790a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800790e:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007910:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007912:	432a      	orrs	r2, r5
 8007914:	4322      	orrs	r2, r4
 8007916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800791a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800791e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007922:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007926:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800792a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800792e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007932:	2300      	movs	r3, #0
 8007934:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007936:	4618      	mov	r0, r3
}
 8007938:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800793a:	2002      	movs	r0, #2
 800793c:	e7fc      	b.n	8007938 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08007940 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007940:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007942:	7c03      	ldrb	r3, [r0, #16]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d05c      	beq.n	8007a02 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007948:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800794a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800794c:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800794e:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007950:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8007954:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800795c:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800795e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007960:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007962:	b292      	uxth	r2, r2
 8007964:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007966:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007968:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800796c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800796e:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007970:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8007972:	4014      	ands	r4, r2
 8007974:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007976:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8007978:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800797a:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800797c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800797e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8007980:	4014      	ands	r4, r2
 8007982:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007984:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8007986:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007988:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800798a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800798c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007990:	4014      	ands	r4, r2
 8007992:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007996:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800799a:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800799c:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800799e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80079a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079a6:	4014      	ands	r4, r2
 80079a8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80079ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079b0:	432c      	orrs	r4, r5
 80079b2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80079b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079ba:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80079be:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80079c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079c6:	698d      	ldr	r5, [r1, #24]
 80079c8:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80079ca:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80079cc:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80079ce:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80079d2:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80079d6:	4014      	ands	r4, r2
 80079d8:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80079dc:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80079e0:	432c      	orrs	r4, r5
 80079e2:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80079e6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80079ea:	4022      	ands	r2, r4
 80079ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80079f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80079f4:	430a      	orrs	r2, r1
 80079f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80079fa:	2300      	movs	r3, #0
 80079fc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80079fe:	4618      	mov	r0, r3
}
 8007a00:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007a02:	2002      	movs	r0, #2
 8007a04:	e7fc      	b.n	8007a00 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8007a06:	bf00      	nop
 8007a08:	ffff0000 	.word	0xffff0000

08007a0c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a0c:	7c03      	ldrb	r3, [r0, #16]
{
 8007a0e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d01c      	beq.n	8007a4e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007a14:	6802      	ldr	r2, [r0, #0]
 8007a16:	2300      	movs	r3, #0
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6851      	ldr	r1, [r2, #4]
 8007a1c:	f041 0101 	orr.w	r1, r1, #1
 8007a20:	6051      	str	r1, [r2, #4]
 8007a22:	6851      	ldr	r1, [r2, #4]
 8007a24:	f001 0101 	and.w	r1, r1, #1
 8007a28:	9100      	str	r1, [sp, #0]
 8007a2a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8007a32:	f041 0108 	orr.w	r1, r1, #8
 8007a36:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8007a3a:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a3e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007a40:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8007a42:	f002 0208 	and.w	r2, r2, #8
 8007a46:	9201      	str	r2, [sp, #4]
 8007a48:	9a01      	ldr	r2, [sp, #4]
}
 8007a4a:	b002      	add	sp, #8
 8007a4c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a4e:	2002      	movs	r0, #2
 8007a50:	e7fb      	b.n	8007a4a <HAL_DSI_Start+0x3e>

08007a52 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a52:	7c03      	ldrb	r3, [r0, #16]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d00a      	beq.n	8007a6e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007a58:	6802      	ldr	r2, [r0, #0]
 8007a5a:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8007a5e:	f043 0304 	orr.w	r3, r3, #4
 8007a62:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a66:	2300      	movs	r3, #0
 8007a68:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007a6e:	2002      	movs	r0, #2
}
 8007a70:	4770      	bx	lr

08007a72 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007a72:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a74:	7c05      	ldrb	r5, [r0, #16]
{
 8007a76:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007a78:	2d01      	cmp	r5, #1
 8007a7a:	d009      	beq.n	8007a90 <HAL_DSI_ShortWrite+0x1e>
 8007a7c:	2501      	movs	r5, #1
 8007a7e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007a80:	9d06      	ldr	r5, [sp, #24]
 8007a82:	9500      	str	r5, [sp, #0]
 8007a84:	f7ff fcad 	bl	80073e2 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007a8c:	b003      	add	sp, #12
 8007a8e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007a90:	2002      	movs	r0, #2
 8007a92:	e7fb      	b.n	8007a8c <HAL_DSI_ShortWrite+0x1a>

08007a94 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a98:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007a9a:	7c03      	ldrb	r3, [r0, #16]
{
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007aa0:	2b01      	cmp	r3, #1
{
 8007aa2:	4615      	mov	r5, r2
 8007aa4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8007aa8:	d053      	beq.n	8007b52 <HAL_DSI_LongWrite+0xbe>
 8007aaa:	2301      	movs	r3, #1
 8007aac:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aae:	f7ff faa1 	bl	8006ff4 <HAL_GetTick>
 8007ab2:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007ab4:	6831      	ldr	r1, [r6, #0]
 8007ab6:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8007ab8:	f013 0a01 	ands.w	sl, r3, #1
 8007abc:	d01a      	beq.n	8007af4 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007abe:	2c03      	cmp	r4, #3
 8007ac0:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007ac2:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007ac6:	bf28      	it	cs
 8007ac8:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8007aca:	4282      	cmp	r2, r0
 8007acc:	d11e      	bne.n	8007b0c <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007ace:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8007ad0:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8007ad2:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007ad6:	bb1b      	cbnz	r3, 8007b20 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007ad8:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007ada:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007ade:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007ae0:	0222      	lsls	r2, r4, #8
 8007ae2:	0224      	lsls	r4, r4, #8
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8007aea:	4315      	orrs	r5, r2
 8007aec:	432c      	orrs	r4, r5
 8007aee:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8007af0:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8007af2:	e009      	b.n	8007b08 <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007af4:	f7ff fa7e 	bl	8006ff4 <HAL_GetTick>
 8007af8:	eba0 000b 	sub.w	r0, r0, fp
 8007afc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007b00:	d9d8      	bls.n	8007ab4 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007b02:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007b04:	f886 a010 	strb.w	sl, [r6, #16]
}
 8007b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8007b0c:	f818 3002 	ldrb.w	r3, [r8, r2]
 8007b10:	3201      	adds	r2, #1
 8007b12:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8007b16:	fa03 f30c 	lsl.w	r3, r3, ip
 8007b1a:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 8007b1e:	e7d4      	b.n	8007aca <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b20:	2b04      	cmp	r3, #4
    fifoword = 0U;
 8007b22:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b26:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 8007b28:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007b2a:	bf28      	it	cs
 8007b2c:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b30:	f812 8000 	ldrb.w	r8, [r2, r0]
 8007b34:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8007b38:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b3a:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8007b3e:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8007b40:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8007b44:	d1f4      	bne.n	8007b30 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 8007b46:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 8007b4a:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 8007b4c:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 8007b50:	e7c1      	b.n	8007ad6 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8007b52:	2002      	movs	r0, #2
 8007b54:	e7d8      	b.n	8007b08 <HAL_DSI_LongWrite+0x74>

08007b56 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8007b56:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b5a:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007b5c:	7c03      	ldrb	r3, [r0, #16]
{
 8007b5e:	4605      	mov	r5, r0
 8007b60:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007b62:	2b01      	cmp	r3, #1
{
 8007b64:	4617      	mov	r7, r2
 8007b66:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8007b6a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 8007b6e:	d06f      	beq.n	8007c50 <HAL_DSI_Read+0xfa>
 8007b70:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007b72:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007b74:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007b76:	d90d      	bls.n	8007b94 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8007b78:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007b7c:	2237      	movs	r2, #55	; 0x37
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	b2f3      	uxtb	r3, r6
 8007b82:	f7ff fc2e 	bl	80073e2 <DSI_ShortWrite>
 8007b86:	b128      	cbz	r0, 8007b94 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8007b88:	2300      	movs	r3, #0

      return HAL_ERROR;
 8007b8a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007b8c:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007b8e:	b003      	add	sp, #12
 8007b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007b94:	f1b9 0f06 	cmp.w	r9, #6
 8007b98:	d10f      	bne.n	8007bba <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007b9c:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 8007ba4:	f044 0406 	orr.w	r4, r4, #6
 8007ba8:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8007baa:	f7ff fa23 	bl	8006ff4 <HAL_GetTick>
 8007bae:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	dc27      	bgt.n	8007c04 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007bb8:	e7e9      	b.n	8007b8e <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007bba:	f1b9 0f04 	cmp.w	r9, #4
 8007bbe:	d105      	bne.n	8007bcc <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bc0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007bc2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bc4:	f044 0404 	orr.w	r4, r4, #4
 8007bc8:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 8007bca:	e7ee      	b.n	8007baa <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007bcc:	f1b9 0f14 	cmp.w	r9, #20
 8007bd0:	d108      	bne.n	8007be4 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007bd2:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bd6:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007bd8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bda:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007bde:	f044 0414 	orr.w	r4, r4, #20
 8007be2:	e7f1      	b.n	8007bc8 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007be4:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 8007be8:	d1ce      	bne.n	8007b88 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007bea:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bee:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007bf0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007bf8:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007bfa:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007bfe:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 8007c02:	e7e1      	b.n	8007bc8 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007c04:	682a      	ldr	r2, [r5, #0]
 8007c06:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8007c08:	f013 0310 	ands.w	r3, r3, #16
 8007c0c:	d10d      	bne.n	8007c2a <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007c0e:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8007c10:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007c12:	4632      	mov	r2, r6
 8007c14:	bf28      	it	cs
 8007c16:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007c18:	00d9      	lsls	r1, r3, #3
 8007c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8007c1e:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8007c20:	3301      	adds	r3, #1
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d1f8      	bne.n	8007c18 <HAL_DSI_Read+0xc2>
        pdata++;
 8007c26:	4417      	add	r7, r2
        datasize--;
 8007c28:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007c2a:	f7ff f9e3 	bl	8006ff4 <HAL_GetTick>
 8007c2e:	1b00      	subs	r0, r0, r4
 8007c30:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007c34:	d903      	bls.n	8007c3e <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8007c36:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8007c38:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007c3a:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8007c3c:	e7a7      	b.n	8007b8e <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8007c3e:	682b      	ldr	r3, [r5, #0]
 8007c40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007c42:	0652      	lsls	r2, r2, #25
 8007c44:	d4b4      	bmi.n	8007bb0 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8007c46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c4a:	069b      	lsls	r3, r3, #26
 8007c4c:	d49c      	bmi.n	8007b88 <HAL_DSI_Read+0x32>
 8007c4e:	e7af      	b.n	8007bb0 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8007c50:	2002      	movs	r0, #2
 8007c52:	e79c      	b.n	8007b8e <HAL_DSI_Read+0x38>

08007c54 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007c54:	7c03      	ldrb	r3, [r0, #16]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d010      	beq.n	8007c7c <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8007c5a:	6803      	ldr	r3, [r0, #0]
 8007c5c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007c60:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007c64:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007c68:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007c6c:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8007c70:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007c74:	2300      	movs	r3, #0
 8007c76:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007c78:	4618      	mov	r0, r3
 8007c7a:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007c7c:	2002      	movs	r0, #2
}
 8007c7e:	4770      	bx	lr

08007c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007c84:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c86:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8007e54 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c8a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c8e:	680a      	ldr	r2, [r1, #0]
 8007c90:	fa32 f503 	lsrs.w	r5, r2, r3
 8007c94:	d102      	bne.n	8007c9c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007c96:	b003      	add	sp, #12
 8007c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c9c:	f04f 0e01 	mov.w	lr, #1
 8007ca0:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8007ca4:	ea1e 0202 	ands.w	r2, lr, r2
 8007ca8:	f000 80bd 	beq.w	8007e26 <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cac:	684e      	ldr	r6, [r1, #4]
 8007cae:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cb2:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cb6:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cba:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cbe:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cc0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cc4:	2f01      	cmp	r7, #1
 8007cc6:	d834      	bhi.n	8007d32 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8007cc8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cca:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cce:	68cf      	ldr	r7, [r1, #12]
 8007cd0:	fa07 f708 	lsl.w	r7, r7, r8
 8007cd4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007cd8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007cda:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cdc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ce0:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007ce4:	409f      	lsls	r7, r3
 8007ce6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8007cea:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007cec:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cee:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007cf0:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cf4:	688f      	ldr	r7, [r1, #8]
 8007cf6:	fa07 f708 	lsl.w	r7, r7, r8
 8007cfa:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 8007cfe:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d00:	d119      	bne.n	8007d36 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8007d02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d06:	f003 0b07 	and.w	fp, r3, #7
 8007d0a:	f04f 0e0f 	mov.w	lr, #15
 8007d0e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8007d12:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007d16:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d1a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8007d1e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d22:	690f      	ldr	r7, [r1, #16]
 8007d24:	fa07 f70b 	lsl.w	r7, r7, fp
 8007d28:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8007d2c:	f8ca 7020 	str.w	r7, [sl, #32]
 8007d30:	e001      	b.n	8007d36 <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d32:	2d03      	cmp	r5, #3
 8007d34:	d1da      	bne.n	8007cec <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8007d36:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d38:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d3c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d40:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d44:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8007d48:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d4a:	d06c      	beq.n	8007e26 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8007d50:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d54:	f003 0c03 	and.w	ip, r3, #3
 8007d58:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d5c:	f045 0502 	orr.w	r5, r5, #2
 8007d60:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d64:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d68:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8007d6c:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007d70:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8007d74:	f005 0502 	and.w	r5, r5, #2
 8007d78:	9501      	str	r5, [sp, #4]
 8007d7a:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d7c:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8007d80:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d84:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d88:	4d31      	ldr	r5, [pc, #196]	; (8007e50 <HAL_GPIO_Init+0x1d0>)
 8007d8a:	42a8      	cmp	r0, r5
 8007d8c:	d04d      	beq.n	8007e2a <HAL_GPIO_Init+0x1aa>
 8007d8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d92:	42a8      	cmp	r0, r5
 8007d94:	d04b      	beq.n	8007e2e <HAL_GPIO_Init+0x1ae>
 8007d96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007d9a:	42a8      	cmp	r0, r5
 8007d9c:	d049      	beq.n	8007e32 <HAL_GPIO_Init+0x1b2>
 8007d9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007da2:	42a8      	cmp	r0, r5
 8007da4:	d047      	beq.n	8007e36 <HAL_GPIO_Init+0x1b6>
 8007da6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007daa:	42a8      	cmp	r0, r5
 8007dac:	d045      	beq.n	8007e3a <HAL_GPIO_Init+0x1ba>
 8007dae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007db2:	42a8      	cmp	r0, r5
 8007db4:	d043      	beq.n	8007e3e <HAL_GPIO_Init+0x1be>
 8007db6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dba:	42a8      	cmp	r0, r5
 8007dbc:	d041      	beq.n	8007e42 <HAL_GPIO_Init+0x1c2>
 8007dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dc2:	42a8      	cmp	r0, r5
 8007dc4:	d03f      	beq.n	8007e46 <HAL_GPIO_Init+0x1c6>
 8007dc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dca:	42a8      	cmp	r0, r5
 8007dcc:	d03d      	beq.n	8007e4a <HAL_GPIO_Init+0x1ca>
 8007dce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007dd2:	42a8      	cmp	r0, r5
 8007dd4:	bf0c      	ite	eq
 8007dd6:	2509      	moveq	r5, #9
 8007dd8:	250a      	movne	r5, #10
 8007dda:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007dde:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007de2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007de6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007de8:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007dec:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007dee:	bf0c      	ite	eq
 8007df0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007df2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007df4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8007df8:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007dfa:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007dfc:	bf0c      	ite	eq
 8007dfe:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007e00:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e02:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8007e06:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007e08:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8007e0c:	bf0c      	ite	eq
 8007e0e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007e10:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e12:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007e14:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007e18:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8007e1c:	bf54      	ite	pl
 8007e1e:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007e20:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007e22:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8007e26:	3301      	adds	r3, #1
 8007e28:	e731      	b.n	8007c8e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e2a:	2500      	movs	r5, #0
 8007e2c:	e7d5      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e2e:	2501      	movs	r5, #1
 8007e30:	e7d3      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e32:	2502      	movs	r5, #2
 8007e34:	e7d1      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e36:	2503      	movs	r5, #3
 8007e38:	e7cf      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e3a:	2504      	movs	r5, #4
 8007e3c:	e7cd      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e3e:	2505      	movs	r5, #5
 8007e40:	e7cb      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e42:	2506      	movs	r5, #6
 8007e44:	e7c9      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e46:	2507      	movs	r5, #7
 8007e48:	e7c7      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e4a:	2508      	movs	r5, #8
 8007e4c:	e7c5      	b.n	8007dda <HAL_GPIO_Init+0x15a>
 8007e4e:	bf00      	nop
 8007e50:	58020000 	.word	0x58020000
 8007e54:	58024400 	.word	0x58024400

08007e58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007e5c:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e5e:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8007f8c <HAL_GPIO_DeInit+0x134>
 8007e62:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8007f90 <HAL_GPIO_DeInit+0x138>
 8007e66:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007f94 <HAL_GPIO_DeInit+0x13c>
 8007e6a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007f98 <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 8007e6e:	fa31 f302 	lsrs.w	r3, r1, r2
 8007e72:	d101      	bne.n	8007e78 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8007e7e:	ea1c 0601 	ands.w	r6, ip, r1
 8007e82:	d06d      	beq.n	8007f60 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e84:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e88:	f002 0703 	and.w	r7, r2, #3
 8007e8c:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e8e:	4b3e      	ldr	r3, [pc, #248]	; (8007f88 <HAL_GPIO_DeInit+0x130>)
 8007e90:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e94:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007e96:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007e98:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007e9c:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007ea0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ea4:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007ea8:	d05c      	beq.n	8007f64 <HAL_GPIO_DeInit+0x10c>
 8007eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eae:	4298      	cmp	r0, r3
 8007eb0:	d05a      	beq.n	8007f68 <HAL_GPIO_DeInit+0x110>
 8007eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eb6:	4298      	cmp	r0, r3
 8007eb8:	d058      	beq.n	8007f6c <HAL_GPIO_DeInit+0x114>
 8007eba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ebe:	4298      	cmp	r0, r3
 8007ec0:	d056      	beq.n	8007f70 <HAL_GPIO_DeInit+0x118>
 8007ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ec6:	4298      	cmp	r0, r3
 8007ec8:	d054      	beq.n	8007f74 <HAL_GPIO_DeInit+0x11c>
 8007eca:	4540      	cmp	r0, r8
 8007ecc:	d054      	beq.n	8007f78 <HAL_GPIO_DeInit+0x120>
 8007ece:	4548      	cmp	r0, r9
 8007ed0:	d054      	beq.n	8007f7c <HAL_GPIO_DeInit+0x124>
 8007ed2:	4550      	cmp	r0, sl
 8007ed4:	d054      	beq.n	8007f80 <HAL_GPIO_DeInit+0x128>
 8007ed6:	4558      	cmp	r0, fp
 8007ed8:	d054      	beq.n	8007f84 <HAL_GPIO_DeInit+0x12c>
 8007eda:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8007ede:	4298      	cmp	r0, r3
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2309      	moveq	r3, #9
 8007ee4:	230a      	movne	r3, #10
 8007ee6:	40bb      	lsls	r3, r7
 8007ee8:	4573      	cmp	r3, lr
 8007eea:	d119      	bne.n	8007f20 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef0:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8007ef4:	ea27 0706 	bic.w	r7, r7, r6
 8007ef8:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007efc:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8007f00:	ea27 0706 	bic.w	r7, r7, r6
 8007f04:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007f08:	685f      	ldr	r7, [r3, #4]
 8007f0a:	ea27 0706 	bic.w	r7, r7, r6
 8007f0e:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007f10:	681f      	ldr	r7, [r3, #0]
 8007f12:	ea27 0606 	bic.w	r6, r7, r6
 8007f16:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007f18:	68a3      	ldr	r3, [r4, #8]
 8007f1a:	ea23 0305 	bic.w	r3, r3, r5
 8007f1e:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f20:	2503      	movs	r5, #3
 8007f22:	0053      	lsls	r3, r2, #1
 8007f24:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f26:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f2a:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f2e:	260f      	movs	r6, #15
 8007f30:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f32:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f34:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007f36:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007f38:	fa22 f405 	lsr.w	r4, r2, r5
 8007f3c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007f40:	6a25      	ldr	r5, [r4, #32]
 8007f42:	ea25 0606 	bic.w	r6, r5, r6
 8007f46:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f48:	68c4      	ldr	r4, [r0, #12]
 8007f4a:	ea24 0403 	bic.w	r4, r4, r3
 8007f4e:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f50:	6844      	ldr	r4, [r0, #4]
 8007f52:	ea24 040c 	bic.w	r4, r4, ip
 8007f56:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f58:	6884      	ldr	r4, [r0, #8]
 8007f5a:	ea24 0303 	bic.w	r3, r4, r3
 8007f5e:	6083      	str	r3, [r0, #8]
    position++;
 8007f60:	3201      	adds	r2, #1
 8007f62:	e784      	b.n	8007e6e <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007f64:	2300      	movs	r3, #0
 8007f66:	e7be      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e7bc      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e7ba      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f70:	2303      	movs	r3, #3
 8007f72:	e7b8      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f74:	2304      	movs	r3, #4
 8007f76:	e7b6      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f78:	2305      	movs	r3, #5
 8007f7a:	e7b4      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f7c:	2306      	movs	r3, #6
 8007f7e:	e7b2      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f80:	2307      	movs	r3, #7
 8007f82:	e7b0      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f84:	2308      	movs	r3, #8
 8007f86:	e7ae      	b.n	8007ee6 <HAL_GPIO_DeInit+0x8e>
 8007f88:	58020000 	.word	0x58020000
 8007f8c:	58021400 	.word	0x58021400
 8007f90:	58021800 	.word	0x58021800
 8007f94:	58021c00 	.word	0x58021c00
 8007f98:	58022000 	.word	0x58022000

08007f9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f9c:	6903      	ldr	r3, [r0, #16]
 8007f9e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007fa0:	bf14      	ite	ne
 8007fa2:	2001      	movne	r0, #1
 8007fa4:	2000      	moveq	r0, #0
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fa8:	b10a      	cbz	r2, 8007fae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007faa:	6181      	str	r1, [r0, #24]
  }
}
 8007fac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fae:	0409      	lsls	r1, r1, #16
 8007fb0:	e7fb      	b.n	8007faa <HAL_GPIO_WritePin+0x2>

08007fb2 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007fb2:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007fb4:	ea01 0203 	and.w	r2, r1, r3
 8007fb8:	ea21 0103 	bic.w	r1, r1, r3
 8007fbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fc0:	6181      	str	r1, [r0, #24]
}
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007fc4:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <HAL_HSEM_FastTake+0x14>)
 8007fc6:	3020      	adds	r0, #32
 8007fc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <HAL_HSEM_FastTake+0x18>)
 8007fce:	1ac0      	subs	r0, r0, r3
 8007fd0:	bf18      	it	ne
 8007fd2:	2001      	movne	r0, #1
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	58026400 	.word	0x58026400
 8007fdc:	80000300 	.word	0x80000300

08007fe0 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007fe0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007fe4:	4b01      	ldr	r3, [pc, #4]	; (8007fec <HAL_HSEM_Release+0xc>)
 8007fe6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007fea:	4770      	bx	lr
 8007fec:	58026400 	.word	0x58026400

08007ff0 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007ff0:	6803      	ldr	r3, [r0, #0]
 8007ff2:	699a      	ldr	r2, [r3, #24]
 8007ff4:	0791      	lsls	r1, r2, #30
 8007ff6:	d501      	bpl.n	8007ffc <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	07d2      	lsls	r2, r2, #31
 8008000:	d403      	bmi.n	800800a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008002:	699a      	ldr	r2, [r3, #24]
 8008004:	f042 0201 	orr.w	r2, r2, #1
 8008008:	619a      	str	r2, [r3, #24]
  }
}
 800800a:	4770      	bx	lr

0800800c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800800c:	b530      	push	{r4, r5, lr}
 800800e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008010:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008014:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008016:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8008018:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800801a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800801e:	4a05      	ldr	r2, [pc, #20]	; (8008034 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008020:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008022:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008026:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800802a:	ea20 0002 	bic.w	r0, r0, r2
 800802e:	4303      	orrs	r3, r0
 8008030:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008032:	bd30      	pop	{r4, r5, pc}
 8008034:	03ff63ff 	.word	0x03ff63ff

08008038 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8008038:	6803      	ldr	r3, [r0, #0]
{
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800803e:	699c      	ldr	r4, [r3, #24]
{
 8008040:	4605      	mov	r5, r0
 8008042:	460f      	mov	r7, r1
 8008044:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008046:	f014 0410 	ands.w	r4, r4, #16
 800804a:	d070      	beq.n	800812e <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800804c:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800804e:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008050:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008052:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008054:	682b      	ldr	r3, [r5, #0]
 8008056:	699a      	ldr	r2, [r3, #24]
 8008058:	0692      	lsls	r2, r2, #26
 800805a:	d462      	bmi.n	8008122 <I2C_IsErrorOccurred+0xea>
 800805c:	f1b8 0f00 	cmp.w	r8, #0
 8008060:	d036      	beq.n	80080d0 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 8008062:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008066:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800806c:	05d6      	lsls	r6, r2, #23
 800806e:	d505      	bpl.n	800807c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008070:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008074:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008078:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800807a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800807c:	0551      	lsls	r1, r2, #21
 800807e:	d505      	bpl.n	800808c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008080:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008084:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008088:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800808a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800808c:	0592      	lsls	r2, r2, #22
 800808e:	d550      	bpl.n	8008132 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008090:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008094:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008098:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800809a:	4628      	mov	r0, r5
 800809c:	f7ff ffa8 	bl	8007ff0 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80080a0:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 80080a2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80080a4:	6853      	ldr	r3, [r2, #4]
 80080a6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80080aa:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80080ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80080b2:	f023 0301 	bic.w	r3, r3, #1
 80080b6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80080b8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80080ba:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80080bc:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80080be:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080c0:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80080ca:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 80080ce:	e032      	b.n	8008136 <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 80080d0:	1c7a      	adds	r2, r7, #1
 80080d2:	d0c0      	beq.n	8008056 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80080d4:	f7fe ff8e 	bl	8006ff4 <HAL_GetTick>
 80080d8:	1b80      	subs	r0, r0, r6
 80080da:	42b8      	cmp	r0, r7
 80080dc:	d801      	bhi.n	80080e2 <I2C_IsErrorOccurred+0xaa>
 80080de:	2f00      	cmp	r7, #0
 80080e0:	d1b8      	bne.n	8008054 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80080e2:	682b      	ldr	r3, [r5, #0]
 80080e4:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80080e6:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080ea:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80080ec:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80080ee:	0400      	lsls	r0, r0, #16
 80080f0:	d50a      	bpl.n	8008108 <I2C_IsErrorOccurred+0xd0>
 80080f2:	0448      	lsls	r0, r1, #17
 80080f4:	d408      	bmi.n	8008108 <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 80080f6:	2a20      	cmp	r2, #32
 80080f8:	d006      	beq.n	8008108 <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008100:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008102:	f7fe ff77 	bl	8006ff4 <HAL_GetTick>
 8008106:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	0699      	lsls	r1, r3, #26
 800810e:	d4a1      	bmi.n	8008054 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008110:	f7fe ff70 	bl	8006ff4 <HAL_GetTick>
 8008114:	1b80      	subs	r0, r0, r6
 8008116:	2819      	cmp	r0, #25
 8008118:	d9f6      	bls.n	8008108 <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800811a:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800811c:	f04f 0801 	mov.w	r8, #1
 8008120:	e798      	b.n	8008054 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008122:	f1b8 0f00 	cmp.w	r8, #0
 8008126:	d19c      	bne.n	8008062 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008128:	2220      	movs	r2, #32
 800812a:	61da      	str	r2, [r3, #28]
 800812c:	e799      	b.n	8008062 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	4620      	mov	r0, r4
 8008130:	e79a      	b.n	8008068 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008132:	2800      	cmp	r0, #0
 8008134:	d1b1      	bne.n	800809a <I2C_IsErrorOccurred+0x62>
}
 8008136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800813a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800813a:	b570      	push	{r4, r5, r6, lr}
 800813c:	4604      	mov	r4, r0
 800813e:	460d      	mov	r5, r1
 8008140:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	079b      	lsls	r3, r3, #30
 8008148:	d501      	bpl.n	800814e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800814a:	2000      	movs	r0, #0
}
 800814c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800814e:	4632      	mov	r2, r6
 8008150:	4629      	mov	r1, r5
 8008152:	4620      	mov	r0, r4
 8008154:	f7ff ff70 	bl	8008038 <I2C_IsErrorOccurred>
 8008158:	b9c0      	cbnz	r0, 800818c <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800815a:	1c6a      	adds	r2, r5, #1
 800815c:	d0f1      	beq.n	8008142 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800815e:	f7fe ff49 	bl	8006ff4 <HAL_GetTick>
 8008162:	1b80      	subs	r0, r0, r6
 8008164:	42a8      	cmp	r0, r5
 8008166:	d801      	bhi.n	800816c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008168:	2d00      	cmp	r5, #0
 800816a:	d1ea      	bne.n	8008142 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f013 0302 	ands.w	r3, r3, #2
 8008174:	d1e5      	bne.n	8008142 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008176:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8008178:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800817c:	f042 0220 	orr.w	r2, r2, #32
 8008180:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008182:	2220      	movs	r2, #32
 8008184:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800818c:	2001      	movs	r0, #1
 800818e:	e7dd      	b.n	800814c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08008190 <I2C_WaitOnFlagUntilTimeout>:
{
 8008190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008194:	9f06      	ldr	r7, [sp, #24]
 8008196:	4604      	mov	r4, r0
 8008198:	4688      	mov	r8, r1
 800819a:	4616      	mov	r6, r2
 800819c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800819e:	6822      	ldr	r2, [r4, #0]
 80081a0:	6993      	ldr	r3, [r2, #24]
 80081a2:	ea38 0303 	bics.w	r3, r8, r3
 80081a6:	bf0c      	ite	eq
 80081a8:	2301      	moveq	r3, #1
 80081aa:	2300      	movne	r3, #0
 80081ac:	42b3      	cmp	r3, r6
 80081ae:	d001      	beq.n	80081b4 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80081b0:	2000      	movs	r0, #0
 80081b2:	e01e      	b.n	80081f2 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 80081b4:	1c6b      	adds	r3, r5, #1
 80081b6:	d0f3      	beq.n	80081a0 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b8:	f7fe ff1c 	bl	8006ff4 <HAL_GetTick>
 80081bc:	1bc0      	subs	r0, r0, r7
 80081be:	42a8      	cmp	r0, r5
 80081c0:	d801      	bhi.n	80081c6 <I2C_WaitOnFlagUntilTimeout+0x36>
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	d1eb      	bne.n	800819e <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	ea38 0303 	bics.w	r3, r8, r3
 80081ce:	bf0c      	ite	eq
 80081d0:	2301      	moveq	r3, #1
 80081d2:	2300      	movne	r3, #0
 80081d4:	42b3      	cmp	r3, r6
 80081d6:	d1e2      	bne.n	800819e <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80081da:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081dc:	f043 0320 	orr.w	r3, r3, #32
 80081e0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80081e2:	2320      	movs	r3, #32
 80081e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80081ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80081f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080081f6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80081f6:	b570      	push	{r4, r5, r6, lr}
 80081f8:	4604      	mov	r4, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	069b      	lsls	r3, r3, #26
 8008204:	d501      	bpl.n	800820a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008206:	2000      	movs	r0, #0
}
 8008208:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800820a:	4632      	mov	r2, r6
 800820c:	4629      	mov	r1, r5
 800820e:	4620      	mov	r0, r4
 8008210:	f7ff ff12 	bl	8008038 <I2C_IsErrorOccurred>
 8008214:	b9b0      	cbnz	r0, 8008244 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008216:	f7fe feed 	bl	8006ff4 <HAL_GetTick>
 800821a:	1b80      	subs	r0, r0, r6
 800821c:	42a8      	cmp	r0, r5
 800821e:	d801      	bhi.n	8008224 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008220:	2d00      	cmp	r5, #0
 8008222:	d1ec      	bne.n	80081fe <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f013 0320 	ands.w	r3, r3, #32
 800822c:	d1e7      	bne.n	80081fe <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800822e:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8008230:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008234:	f042 0220 	orr.w	r2, r2, #32
 8008238:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800823a:	2220      	movs	r2, #32
 800823c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8008244:	2001      	movs	r0, #1
 8008246:	e7df      	b.n	8008208 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08008248 <HAL_I2C_MspInit>:
}
 8008248:	4770      	bx	lr

0800824a <HAL_I2C_Init>:
{
 800824a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800824c:	4604      	mov	r4, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d04a      	beq.n	80082e8 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008252:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800825a:	b91b      	cbnz	r3, 8008264 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800825c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8008260:	f7ff fff2 	bl	8008248 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008264:	2324      	movs	r3, #36	; 0x24
 8008266:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008274:	6862      	ldr	r2, [r4, #4]
 8008276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800827a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800827c:	689a      	ldr	r2, [r3, #8]
 800827e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008282:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008284:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008288:	2901      	cmp	r1, #1
 800828a:	d124      	bne.n	80082d6 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800828c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008290:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008292:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008294:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008296:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800829a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800829e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082a6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082a8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80082ac:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80082ae:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80082b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80082b4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80082b6:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80082ba:	430a      	orrs	r2, r1
 80082bc:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	f042 0201 	orr.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80082c6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082c8:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ce:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80082d4:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082da:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082dc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082de:	d1d8      	bne.n	8008292 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082e4:	605a      	str	r2, [r3, #4]
 80082e6:	e7d4      	b.n	8008292 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80082e8:	2001      	movs	r0, #1
 80082ea:	e7f3      	b.n	80082d4 <HAL_I2C_Init+0x8a>

080082ec <HAL_I2C_MspDeInit>:
 80082ec:	4770      	bx	lr

080082ee <HAL_I2C_DeInit>:
{
 80082ee:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80082f0:	4604      	mov	r4, r0
 80082f2:	b198      	cbz	r0, 800831c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80082f4:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80082f6:	2324      	movs	r3, #36	; 0x24
 80082f8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80082fc:	6813      	ldr	r3, [r2, #0]
 80082fe:	f023 0301 	bic.w	r3, r3, #1
 8008302:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008304:	f7ff fff2 	bl	80082ec <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008308:	2000      	movs	r0, #0
 800830a:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800830c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008310:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008314:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008316:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800831a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800831c:	2001      	movs	r0, #1
 800831e:	e7fc      	b.n	800831a <HAL_I2C_DeInit+0x2c>

08008320 <HAL_I2C_Mem_Write>:
{
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008326:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800832a:	4604      	mov	r4, r0
 800832c:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800832e:	2b20      	cmp	r3, #32
{
 8008330:	4616      	mov	r6, r2
 8008332:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8008336:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800833a:	f040 80c6 	bne.w	80084ca <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800833e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008340:	b113      	cbz	r3, 8008348 <HAL_I2C_Mem_Write+0x28>
 8008342:	f1ba 0f00 	cmp.w	sl, #0
 8008346:	d106      	bne.n	8008356 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834c:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800834e:	2001      	movs	r0, #1
}
 8008350:	b003      	add	sp, #12
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008356:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800835a:	2b01      	cmp	r3, #1
 800835c:	f000 80b5 	beq.w	80084ca <HAL_I2C_Mem_Write+0x1aa>
 8008360:	f04f 0b01 	mov.w	fp, #1
 8008364:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008368:	f7fe fe44 	bl	8006ff4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800836c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800836e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008370:	9000      	str	r0, [sp, #0]
 8008372:	465a      	mov	r2, fp
 8008374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008378:	4620      	mov	r0, r4
 800837a:	f7ff ff09 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 800837e:	2800      	cmp	r0, #0
 8008380:	d1e5      	bne.n	800834e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008382:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008384:	fa5f f289 	uxtb.w	r2, r9
 8008388:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800838a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800838c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008390:	2340      	movs	r3, #64	; 0x40
 8008392:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8008396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008398:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800839a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800839c:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800839e:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80083a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083aa:	f7ff fe2f 	bl	800800c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ae:	462a      	mov	r2, r5
 80083b0:	4641      	mov	r1, r8
 80083b2:	4620      	mov	r0, r4
 80083b4:	f7ff fec1 	bl	800813a <I2C_WaitOnTXISFlagUntilTimeout>
 80083b8:	bb18      	cbnz	r0, 8008402 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083ba:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083be:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80083c0:	d115      	bne.n	80083ee <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083c2:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083c4:	2200      	movs	r2, #0
 80083c6:	2180      	movs	r1, #128	; 0x80
 80083c8:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083ca:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80083cc:	4643      	mov	r3, r8
 80083ce:	9500      	str	r5, [sp, #0]
 80083d0:	f7ff fede 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 80083d4:	b9a8      	cbnz	r0, 8008402 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	2bff      	cmp	r3, #255	; 0xff
 80083dc:	d815      	bhi.n	800840a <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80083de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083e4:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80083e6:	b292      	uxth	r2, r2
 80083e8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	e012      	b.n	8008414 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083ee:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f0:	4641      	mov	r1, r8
 80083f2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80083f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f6:	462a      	mov	r2, r5
 80083f8:	f7ff fe9f 	bl	800813a <I2C_WaitOnTXISFlagUntilTimeout>
 80083fc:	b908      	cbnz	r0, 8008402 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	e7df      	b.n	80083c2 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8008402:	2300      	movs	r3, #0
 8008404:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008408:	e7a1      	b.n	800834e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800840a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800840c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008410:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008412:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008414:	4639      	mov	r1, r7
 8008416:	4620      	mov	r0, r4
 8008418:	f7ff fdf8 	bl	800800c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800841c:	462a      	mov	r2, r5
 800841e:	4641      	mov	r1, r8
 8008420:	4620      	mov	r0, r4
 8008422:	f7ff fe8a 	bl	800813a <I2C_WaitOnTXISFlagUntilTimeout>
 8008426:	2800      	cmp	r0, #0
 8008428:	d191      	bne.n	800834e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800842a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008432:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008434:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008436:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008438:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800843a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800843c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800843e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008440:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008442:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008444:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008446:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008448:	b29b      	uxth	r3, r3
 800844a:	b1b3      	cbz	r3, 800847a <HAL_I2C_Mem_Write+0x15a>
 800844c:	b9aa      	cbnz	r2, 800847a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800844e:	4643      	mov	r3, r8
 8008450:	2180      	movs	r1, #128	; 0x80
 8008452:	4620      	mov	r0, r4
 8008454:	9500      	str	r5, [sp, #0]
 8008456:	f7ff fe9b 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 800845a:	2800      	cmp	r0, #0
 800845c:	f47f af77 	bne.w	800834e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008460:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008462:	b29b      	uxth	r3, r3
 8008464:	2bff      	cmp	r3, #255	; 0xff
 8008466:	d928      	bls.n	80084ba <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008468:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800846a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800846e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008470:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008472:	4639      	mov	r1, r7
 8008474:	4620      	mov	r0, r4
 8008476:	f7ff fdc9 	bl	800800c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800847a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800847c:	b29b      	uxth	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1cc      	bne.n	800841c <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008482:	462a      	mov	r2, r5
 8008484:	4641      	mov	r1, r8
 8008486:	4620      	mov	r0, r4
 8008488:	f7ff feb5 	bl	80081f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800848c:	2800      	cmp	r0, #0
 800848e:	f47f af5e 	bne.w	800834e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	2120      	movs	r1, #32
 8008496:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800849e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80084a2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80084a6:	f022 0201 	bic.w	r2, r2, #1
 80084aa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80084ac:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80084b0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084b4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80084b8:	e74a      	b.n	8008350 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80084ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084c0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80084c2:	b292      	uxth	r2, r2
 80084c4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80084c6:	b2d2      	uxtb	r2, r2
 80084c8:	e7d3      	b.n	8008472 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 80084ca:	2002      	movs	r0, #2
 80084cc:	e740      	b.n	8008350 <HAL_I2C_Mem_Write+0x30>
 80084ce:	bf00      	nop
 80084d0:	80002000 	.word	0x80002000

080084d4 <HAL_I2C_Mem_Read>:
{
 80084d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80084de:	4604      	mov	r4, r0
 80084e0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084e2:	2b20      	cmp	r3, #32
{
 80084e4:	4616      	mov	r6, r2
 80084e6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80084ea:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80084ee:	f040 80c9 	bne.w	8008684 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80084f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084f4:	b113      	cbz	r3, 80084fc <HAL_I2C_Mem_Read+0x28>
 80084f6:	f1ba 0f00 	cmp.w	sl, #0
 80084fa:	d106      	bne.n	800850a <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80084fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008500:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8008502:	2001      	movs	r0, #1
}
 8008504:	b003      	add	sp, #12
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800850a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800850e:	2b01      	cmp	r3, #1
 8008510:	f000 80b8 	beq.w	8008684 <HAL_I2C_Mem_Read+0x1b0>
 8008514:	f04f 0b01 	mov.w	fp, #1
 8008518:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800851c:	f7fe fd6a 	bl	8006ff4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008520:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008522:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008524:	9000      	str	r0, [sp, #0]
 8008526:	465a      	mov	r2, fp
 8008528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800852c:	4620      	mov	r0, r4
 800852e:	f7ff fe2f 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8008532:	2800      	cmp	r0, #0
 8008534:	d1e5      	bne.n	8008502 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008536:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008538:	fa5f f289 	uxtb.w	r2, r9
 800853c:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800853e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008540:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008544:	2340      	movs	r3, #64	; 0x40
 8008546:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800854a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800854c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800854e:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008550:	4b4d      	ldr	r3, [pc, #308]	; (8008688 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8008552:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4603      	mov	r3, r0
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff fd56 	bl	800800c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008560:	462a      	mov	r2, r5
 8008562:	4641      	mov	r1, r8
 8008564:	4620      	mov	r0, r4
 8008566:	f7ff fde8 	bl	800813a <I2C_WaitOnTXISFlagUntilTimeout>
 800856a:	bb20      	cbnz	r0, 80085b6 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800856c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008570:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008572:	d116      	bne.n	80085a2 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008574:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008576:	2200      	movs	r2, #0
 8008578:	2140      	movs	r1, #64	; 0x40
 800857a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800857c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800857e:	4643      	mov	r3, r8
 8008580:	9500      	str	r5, [sp, #0]
 8008582:	f7ff fe05 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8008586:	b9b0      	cbnz	r0, 80085b6 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008588:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800858a:	b29b      	uxth	r3, r3
 800858c:	2bff      	cmp	r3, #255	; 0xff
 800858e:	4b3f      	ldr	r3, [pc, #252]	; (800868c <HAL_I2C_Mem_Read+0x1b8>)
 8008590:	d815      	bhi.n	80085be <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008592:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800859a:	b292      	uxth	r2, r2
 800859c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	e012      	b.n	80085c8 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085a2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085a4:	4641      	mov	r1, r8
 80085a6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80085a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085aa:	462a      	mov	r2, r5
 80085ac:	f7ff fdc5 	bl	800813a <I2C_WaitOnTXISFlagUntilTimeout>
 80085b0:	b908      	cbnz	r0, 80085b6 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80085b2:	6823      	ldr	r3, [r4, #0]
 80085b4:	e7de      	b.n	8008574 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80085b6:	2300      	movs	r3, #0
 80085b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80085bc:	e7a1      	b.n	8008502 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085be:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80085c6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085c8:	4639      	mov	r1, r7
 80085ca:	4620      	mov	r0, r4
 80085cc:	f7ff fd1e 	bl	800800c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80085d0:	4643      	mov	r3, r8
 80085d2:	2200      	movs	r2, #0
 80085d4:	2104      	movs	r1, #4
 80085d6:	4620      	mov	r0, r4
 80085d8:	9500      	str	r5, [sp, #0]
 80085da:	f7ff fdd9 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 80085de:	2800      	cmp	r0, #0
 80085e0:	d18f      	bne.n	8008502 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80085ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80085ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80085ee:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80085f0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80085f2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80085f4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80085f6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80085f8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80085fa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008600:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008602:	b29b      	uxth	r3, r3
 8008604:	b1b3      	cbz	r3, 8008634 <HAL_I2C_Mem_Read+0x160>
 8008606:	b9aa      	cbnz	r2, 8008634 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008608:	4643      	mov	r3, r8
 800860a:	2180      	movs	r1, #128	; 0x80
 800860c:	4620      	mov	r0, r4
 800860e:	9500      	str	r5, [sp, #0]
 8008610:	f7ff fdbe 	bl	8008190 <I2C_WaitOnFlagUntilTimeout>
 8008614:	2800      	cmp	r0, #0
 8008616:	f47f af74 	bne.w	8008502 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800861a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	2bff      	cmp	r3, #255	; 0xff
 8008620:	d928      	bls.n	8008674 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008622:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008628:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800862a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800862c:	4639      	mov	r1, r7
 800862e:	4620      	mov	r0, r4
 8008630:	f7ff fcec 	bl	800800c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008636:	b29b      	uxth	r3, r3
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1c9      	bne.n	80085d0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800863c:	462a      	mov	r2, r5
 800863e:	4641      	mov	r1, r8
 8008640:	4620      	mov	r0, r4
 8008642:	f7ff fdd8 	bl	80081f6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008646:	2800      	cmp	r0, #0
 8008648:	f47f af5b 	bne.w	8008502 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	2120      	movs	r1, #32
 8008650:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8008652:	685a      	ldr	r2, [r3, #4]
 8008654:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8008658:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800865c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8008660:	f022 0201 	bic.w	r2, r2, #1
 8008664:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008666:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800866a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800866e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8008672:	e747      	b.n	8008504 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8008674:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800867a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800867c:	b292      	uxth	r2, r2
 800867e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	e7d3      	b.n	800862c <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8008684:	2002      	movs	r0, #2
 8008686:	e73d      	b.n	8008504 <HAL_I2C_Mem_Read+0x30>
 8008688:	80002000 	.word	0x80002000
 800868c:	80002400 	.word	0x80002400

08008690 <HAL_I2C_GetState>:
  return hi2c->State;
 8008690:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8008694:	4770      	bx	lr

08008696 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8008696:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8008698:	4770      	bx	lr

0800869a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800869a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800869c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80086a0:	2b20      	cmp	r3, #32
 80086a2:	b2dc      	uxtb	r4, r3
 80086a4:	d11d      	bne.n	80086e2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086a6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d019      	beq.n	80086e2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086ae:	2324      	movs	r3, #36	; 0x24
 80086b0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086b4:	6803      	ldr	r3, [r0, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	f022 0201 	bic.w	r2, r2, #1
 80086bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4311      	orrs	r1, r2
 80086ca:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80086d6:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80086da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80086de:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80086e0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80086e2:	2002      	movs	r0, #2
 80086e4:	e7fc      	b.n	80086e0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080086e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086e6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	b2dc      	uxtb	r4, r3
 80086f0:	d11c      	bne.n	800872c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086f2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d018      	beq.n	800872c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086fa:	2324      	movs	r3, #36	; 0x24
 80086fc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008700:	6803      	ldr	r3, [r0, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800870a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800870c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008710:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008714:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	f042 0201 	orr.w	r2, r2, #1
 800871c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800871e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008720:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008724:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8008728:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800872a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800872c:	2002      	movs	r0, #2
 800872e:	e7fc      	b.n	800872a <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008730 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008730:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008732:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008734:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008738:	3284      	adds	r2, #132	; 0x84
 800873a:	1883      	adds	r3, r0, r2
{
 800873c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008740:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008742:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008746:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008748:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800874c:	684c      	ldr	r4, [r1, #4]
 800874e:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008752:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008756:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800875a:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800875c:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800875e:	68c5      	ldr	r5, [r0, #12]
 8008760:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008764:	443d      	add	r5, r7
 8008766:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800876a:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800876c:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800876e:	68c5      	ldr	r5, [r0, #12]
 8008770:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8008774:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008776:	689d      	ldr	r5, [r3, #8]
 8008778:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800877c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800877e:	688d      	ldr	r5, [r1, #8]
 8008780:	68c7      	ldr	r7, [r0, #12]
 8008782:	3501      	adds	r5, #1
 8008784:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008788:	443d      	add	r5, r7
 800878a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800878e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008790:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008792:	691d      	ldr	r5, [r3, #16]
 8008794:	f025 0507 	bic.w	r5, r5, #7
 8008798:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800879a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800879c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800879e:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80087a2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80087a6:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80087aa:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80087ae:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80087b2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80087b6:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80087ba:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80087bc:	695d      	ldr	r5, [r3, #20]
 80087be:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80087c2:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80087c4:	694d      	ldr	r5, [r1, #20]
 80087c6:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80087c8:	69dd      	ldr	r5, [r3, #28]
 80087ca:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80087ce:	f025 0507 	bic.w	r5, r5, #7
 80087d2:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80087d4:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80087d8:	433d      	orrs	r5, r7
 80087da:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80087dc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80087de:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80087e0:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80087e4:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80087e6:	b31e      	cbz	r6, 8008830 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80087e8:	2e01      	cmp	r6, #1
 80087ea:	d023      	beq.n	8008834 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80087ec:	1eb5      	subs	r5, r6, #2
 80087ee:	2d02      	cmp	r5, #2
 80087f0:	d922      	bls.n	8008838 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80087f2:	2e07      	cmp	r6, #7
 80087f4:	bf0c      	ite	eq
 80087f6:	2502      	moveq	r5, #2
 80087f8:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80087fa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80087fc:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008800:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008804:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008806:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008808:	3407      	adds	r4, #7
 800880a:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800880c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800880e:	436e      	muls	r6, r5
 8008810:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8008814:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008816:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8008818:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800881c:	f024 0407 	bic.w	r4, r4, #7
 8008820:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008822:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008824:	5883      	ldr	r3, [r0, r2]
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	5083      	str	r3, [r0, r2]
}
 800882c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8008830:	2504      	movs	r5, #4
 8008832:	e7e2      	b.n	80087fa <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008834:	2503      	movs	r5, #3
 8008836:	e7e0      	b.n	80087fa <LTDC_SetConfig+0xca>
    tmp = 2U;
 8008838:	2502      	movs	r5, #2
 800883a:	e7de      	b.n	80087fa <LTDC_SetConfig+0xca>

0800883c <HAL_LTDC_Init>:
{
 800883c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800883e:	4604      	mov	r4, r0
 8008840:	2800      	cmp	r0, #0
 8008842:	d063      	beq.n	800890c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008844:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8008848:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800884c:	b91b      	cbnz	r3, 8008856 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800884e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008852:	f7f8 fc7d 	bl	8001150 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008856:	2302      	movs	r3, #2
 8008858:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008864:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008866:	6999      	ldr	r1, [r3, #24]
 8008868:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800886c:	4302      	orrs	r2, r0
 800886e:	68e0      	ldr	r0, [r4, #12]
 8008870:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008872:	6920      	ldr	r0, [r4, #16]
 8008874:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008876:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008878:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800887a:	4925      	ldr	r1, [pc, #148]	; (8008910 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800887c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	400a      	ands	r2, r1
 8008882:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800888a:	69a0      	ldr	r0, [r4, #24]
 800888c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800888e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008890:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008892:	68da      	ldr	r2, [r3, #12]
 8008894:	400a      	ands	r2, r1
 8008896:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800889e:	6a20      	ldr	r0, [r4, #32]
 80088a0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80088a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80088a4:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80088a6:	691a      	ldr	r2, [r3, #16]
 80088a8:	400a      	ands	r2, r1
 80088aa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80088ac:	691a      	ldr	r2, [r3, #16]
 80088ae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80088b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80088b4:	4302      	orrs	r2, r0
 80088b6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80088b8:	695a      	ldr	r2, [r3, #20]
 80088ba:	4011      	ands	r1, r2
 80088bc:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80088be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80088c0:	695a      	ldr	r2, [r3, #20]
 80088c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80088c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80088c8:	430a      	orrs	r2, r1
 80088ca:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80088cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80088ce:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80088d2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80088d6:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80088da:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80088dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80088de:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80088e2:	430a      	orrs	r2, r1
 80088e4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80088e8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80088ec:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80088ee:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80088f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088f2:	f042 0206 	orr.w	r2, r2, #6
 80088f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008900:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008902:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008906:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800890a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800890c:	2001      	movs	r0, #1
 800890e:	e7fc      	b.n	800890a <HAL_LTDC_Init+0xce>
 8008910:	f000f800 	.word	0xf000f800

08008914 <HAL_LTDC_ErrorCallback>:
 8008914:	4770      	bx	lr

08008916 <HAL_LTDC_LineEventCallback>:
 8008916:	4770      	bx	lr

08008918 <HAL_LTDC_ReloadEventCallback>:
 8008918:	4770      	bx	lr

0800891a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800891a:	6803      	ldr	r3, [r0, #0]
{
 800891c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800891e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8008920:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008922:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008924:	0772      	lsls	r2, r6, #29
 8008926:	d514      	bpl.n	8008952 <HAL_LTDC_IRQHandler+0x38>
 8008928:	0769      	lsls	r1, r5, #29
 800892a:	d512      	bpl.n	8008952 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800892c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892e:	f022 0204 	bic.w	r2, r2, #4
 8008932:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008934:	2204      	movs	r2, #4
 8008936:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008938:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8008944:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008946:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800894a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800894e:	f7ff ffe1 	bl	8008914 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008952:	07b2      	lsls	r2, r6, #30
 8008954:	d516      	bpl.n	8008984 <HAL_LTDC_IRQHandler+0x6a>
 8008956:	07ab      	lsls	r3, r5, #30
 8008958:	d514      	bpl.n	8008984 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800895a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800895c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800895e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008960:	f022 0202 	bic.w	r2, r2, #2
 8008964:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008966:	2202      	movs	r2, #2
 8008968:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800896a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008974:	2304      	movs	r3, #4
 8008976:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800897a:	2300      	movs	r3, #0
 800897c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008980:	f7ff ffc8 	bl	8008914 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008984:	07f0      	lsls	r0, r6, #31
 8008986:	d510      	bpl.n	80089aa <HAL_LTDC_IRQHandler+0x90>
 8008988:	07e9      	lsls	r1, r5, #31
 800898a:	d50e      	bpl.n	80089aa <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800898c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800898e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008992:	f022 0201 	bic.w	r2, r2, #1
 8008996:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008998:	2201      	movs	r2, #1
 800899a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800899c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800899e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80089a2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80089a6:	f7ff ffb6 	bl	8008916 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80089aa:	0732      	lsls	r2, r6, #28
 80089ac:	d511      	bpl.n	80089d2 <HAL_LTDC_IRQHandler+0xb8>
 80089ae:	072b      	lsls	r3, r5, #28
 80089b0:	d50f      	bpl.n	80089d2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089b2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089b4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80089b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089b8:	f022 0208 	bic.w	r2, r2, #8
 80089bc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80089be:	2208      	movs	r2, #8
 80089c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80089c2:	2301      	movs	r3, #1
 80089c4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80089c8:	2300      	movs	r3, #0
 80089ca:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80089ce:	f7ff ffa3 	bl	8008918 <HAL_LTDC_ReloadEventCallback>
}
 80089d2:	bd70      	pop	{r4, r5, r6, pc}

080089d4 <HAL_LTDC_ConfigLayer>:
{
 80089d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80089d8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	f04f 0002 	mov.w	r0, #2
 80089e8:	d01f      	beq.n	8008a2a <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089ea:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80089ec:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089f0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80089f2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089f6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80089fa:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80089fe:	3438      	adds	r4, #56	; 0x38
 8008a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a0c:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a0e:	4630      	mov	r0, r6
 8008a10:	4662      	mov	r2, ip
 8008a12:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008a14:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008a16:	f7ff fe8b 	bl	8008730 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a1a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008a1c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008a1e:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008a22:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008a26:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8008a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008a30 <HAL_LTDC_SetPitch>:
{
 8008a30:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008a32:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	f04f 0302 	mov.w	r3, #2
 8008a3c:	d02c      	beq.n	8008a98 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008a3e:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008a40:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008a44:	fb04 0402 	mla	r4, r4, r2, r0
 8008a48:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008a4a:	b33c      	cbz	r4, 8008a9c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008a4c:	2c01      	cmp	r4, #1
 8008a4e:	d027      	beq.n	8008aa0 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008a50:	1ea5      	subs	r5, r4, #2
 8008a52:	429d      	cmp	r5, r3
 8008a54:	d902      	bls.n	8008a5c <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 8008a56:	2c07      	cmp	r4, #7
 8008a58:	bf18      	it	ne
 8008a5a:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008a5c:	01d2      	lsls	r2, r2, #7
 8008a5e:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008a60:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008a62:	3284      	adds	r2, #132	; 0x84
 8008a64:	4422      	add	r2, r4
 8008a66:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 8008a68:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008a6c:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8008a70:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008a72:	4c0c      	ldr	r4, [pc, #48]	; (8008aa4 <HAL_LTDC_SetPitch+0x74>)
 8008a74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008a76:	f045 0501 	orr.w	r5, r5, #1
 8008a7a:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008a7c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8008a7e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008a82:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008a92:	2300      	movs	r3, #0
 8008a94:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	e7dd      	b.n	8008a5c <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e7db      	b.n	8008a5c <HAL_LTDC_SetPitch+0x2c>
 8008aa4:	50001000 	.word	0x50001000

08008aa8 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8008aa8:	b538      	push	{r3, r4, r5, lr}
 8008aaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008aac:	f7fe faa2 	bl	8006ff4 <HAL_GetTick>
 8008ab0:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008ab2:	2c00      	cmp	r4, #0
 8008ab4:	d061      	beq.n	8008b7a <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8008ab6:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8008ab8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008aba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008ac4:	68d3      	ldr	r3, [r2, #12]
 8008ac6:	f023 0301 	bic.w	r3, r3, #1
 8008aca:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008acc:	6823      	ldr	r3, [r4, #0]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	07d2      	lsls	r2, r2, #31
 8008ad2:	d448      	bmi.n	8008b66 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8008ad4:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008adc:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	69e1      	ldr	r1, [r4, #28]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	6a21      	ldr	r1, [r4, #32]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008aec:	430a      	orrs	r2, r1
 8008aee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008af0:	430a      	orrs	r2, r1
 8008af2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008af4:	430a      	orrs	r2, r1
 8008af6:	68a1      	ldr	r1, [r4, #8]
 8008af8:	430a      	orrs	r2, r1
 8008afa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008afc:	3901      	subs	r1, #1
 8008afe:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b02:	6861      	ldr	r1, [r4, #4]
 8008b04:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008b08:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008b0a:	d103      	bne.n	8008b14 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008b0c:	691a      	ldr	r2, [r3, #16]
 8008b0e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8008b12:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8008b14:	2200      	movs	r2, #0
 8008b16:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008b18:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	da04      	bge.n	8008b28 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b1e:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8008b20:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008b22:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8008b26:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008b28:	b292      	uxth	r2, r2
 8008b2a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008b2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	da25      	bge.n	8008b7e <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b32:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008b34:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008b36:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 8008b3a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b3c:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b3e:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b42:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b46:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008b48:	f04f 0200 	mov.w	r2, #0
 8008b4c:	d019      	beq.n	8008b82 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008b4e:	b2c9      	uxtb	r1, r1
 8008b50:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008b52:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008b54:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b56:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008b58:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008b5a:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008b5c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008b60:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8008b66:	f7fe fa45 	bl	8006ff4 <HAL_GetTick>
 8008b6a:	1b40      	subs	r0, r0, r5
 8008b6c:	2805      	cmp	r0, #5
 8008b6e:	d9ad      	bls.n	8008acc <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008b74:	2303      	movs	r3, #3
 8008b76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8008b7a:	2001      	movs	r0, #1
 8008b7c:	e7f2      	b.n	8008b64 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008b7e:	6a18      	ldr	r0, [r3, #32]
 8008b80:	e7dd      	b.n	8008b3e <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008b82:	629a      	str	r2, [r3, #40]	; 0x28
 8008b84:	e7e5      	b.n	8008b52 <HAL_MDMA_Init+0xaa>

08008b86 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8008b86:	b1d8      	cbz	r0, 8008bc0 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8008b88:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008b8a:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008b8c:	68d3      	ldr	r3, [r2, #12]
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008b94:	2300      	movs	r3, #0
 8008b96:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8008b98:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8008b9a:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008b9c:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008b9e:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008ba0:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008ba2:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8008ba4:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 8008ba6:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 8008ba8:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008baa:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008bac:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008bae:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008bb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8008bb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008bb8:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	4770      	bx	lr
    return HAL_ERROR;
 8008bc0:	2001      	movs	r0, #1
}
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008bc4:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008bc6:	4d1c      	ldr	r5, [pc, #112]	; (8008c38 <HAL_PWREx_ConfigSupply+0x74>)
{
 8008bc8:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008bca:	68eb      	ldr	r3, [r5, #12]
 8008bcc:	f003 0307 	and.w	r3, r3, #7
 8008bd0:	2b06      	cmp	r3, #6
 8008bd2:	d006      	beq.n	8008be2 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008bd4:	68e8      	ldr	r0, [r5, #12]
 8008bd6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008bda:	1b00      	subs	r0, r0, r4
 8008bdc:	bf18      	it	ne
 8008bde:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008be0:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008be2:	68eb      	ldr	r3, [r5, #12]
 8008be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008be8:	4303      	orrs	r3, r0
 8008bea:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008bec:	f7fe fa02 	bl	8006ff4 <HAL_GetTick>
 8008bf0:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008bf2:	686b      	ldr	r3, [r5, #4]
 8008bf4:	049a      	lsls	r2, r3, #18
 8008bf6:	d508      	bpl.n	8008c0a <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008bf8:	f1a4 031d 	sub.w	r3, r4, #29
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d90c      	bls.n	8008c1a <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008c00:	3c2d      	subs	r4, #45	; 0x2d
 8008c02:	2c01      	cmp	r4, #1
 8008c04:	d909      	bls.n	8008c1a <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8008c06:	2000      	movs	r0, #0
 8008c08:	e7ea      	b.n	8008be0 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c0a:	f7fe f9f3 	bl	8006ff4 <HAL_GetTick>
 8008c0e:	1b80      	subs	r0, r0, r6
 8008c10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008c14:	d9ed      	bls.n	8008bf2 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008c16:	2001      	movs	r0, #1
 8008c18:	e7e2      	b.n	8008be0 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008c1a:	f7fe f9eb 	bl	8006ff4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c1e:	4d06      	ldr	r5, [pc, #24]	; (8008c38 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008c20:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008c22:	68eb      	ldr	r3, [r5, #12]
 8008c24:	03db      	lsls	r3, r3, #15
 8008c26:	d4ee      	bmi.n	8008c06 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c28:	f7fe f9e4 	bl	8006ff4 <HAL_GetTick>
 8008c2c:	1b00      	subs	r0, r0, r4
 8008c2e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008c32:	d9f6      	bls.n	8008c22 <HAL_PWREx_ConfigSupply+0x5e>
 8008c34:	e7ef      	b.n	8008c16 <HAL_PWREx_ConfigSupply+0x52>
 8008c36:	bf00      	nop
 8008c38:	58024800 	.word	0x58024800

08008c3c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008c40:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008c42:	b136      	cbz	r6, 8008c52 <QSPI_Config+0x16>
 8008c44:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8008c48:	d003      	beq.n	8008c52 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008c4a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008c4c:	6804      	ldr	r4, [r0, #0]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008c52:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008c56:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008c5a:	f1b9 0f00 	cmp.w	r9, #0
 8008c5e:	d04f      	beq.n	8008d00 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c60:	694b      	ldr	r3, [r1, #20]
 8008c62:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008c66:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c68:	f8d1 a000 	ldr.w	sl, [r1]
 8008c6c:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8008c70:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8008c74:	ea49 0902 	orr.w	r9, r9, r2
 8008c78:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008c7c:	b335      	cbz	r5, 8008ccc <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008c7e:	688b      	ldr	r3, [r1, #8]
 8008c80:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c84:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008c86:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008c88:	b19f      	cbz	r7, 8008cb2 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008c8a:	ea4a 0307 	orr.w	r3, sl, r7
 8008c8e:	4323      	orrs	r3, r4
 8008c90:	68cc      	ldr	r4, [r1, #12]
 8008c92:	ea43 0308 	orr.w	r3, r3, r8
 8008c96:	ea43 030e 	orr.w	r3, r3, lr
 8008c9a:	4333      	orrs	r3, r6
 8008c9c:	4323      	orrs	r3, r4
 8008c9e:	ea43 030c 	orr.w	r3, r3, ip
 8008ca2:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008ca4:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ca8:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008caa:	d00d      	beq.n	8008cc8 <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008cac:	684b      	ldr	r3, [r1, #4]
 8008cae:	6183      	str	r3, [r0, #24]
 8008cb0:	e00a      	b.n	8008cc8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cb2:	ea4a 0304 	orr.w	r3, sl, r4
 8008cb6:	ea43 0308 	orr.w	r3, r3, r8
 8008cba:	ea43 030e 	orr.w	r3, r3, lr
 8008cbe:	4333      	orrs	r3, r6
 8008cc0:	ea43 030c 	orr.w	r3, r3, ip
 8008cc4:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cc6:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008ccc:	b16f      	cbz	r7, 8008cea <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cce:	ea4a 0307 	orr.w	r3, sl, r7
 8008cd2:	4323      	orrs	r3, r4
 8008cd4:	68cc      	ldr	r4, [r1, #12]
 8008cd6:	ea43 0308 	orr.w	r3, r3, r8
 8008cda:	ea43 030e 	orr.w	r3, r3, lr
 8008cde:	4323      	orrs	r3, r4
 8008ce0:	ea43 030c 	orr.w	r3, r3, ip
 8008ce4:	ea43 0309 	orr.w	r3, r3, r9
 8008ce8:	e7dc      	b.n	8008ca4 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008cea:	ea4a 0304 	orr.w	r3, sl, r4
 8008cee:	ea43 0308 	orr.w	r3, r3, r8
 8008cf2:	ea43 030e 	orr.w	r3, r3, lr
 8008cf6:	ea43 030c 	orr.w	r3, r3, ip
 8008cfa:	ea43 0309 	orr.w	r3, r3, r9
 8008cfe:	e7e2      	b.n	8008cc6 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008d00:	b365      	cbz	r5, 8008d5c <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d02:	6804      	ldr	r4, [r0, #0]
 8008d04:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d06:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d08:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d0a:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d0e:	694e      	ldr	r6, [r1, #20]
 8008d10:	ea43 0502 	orr.w	r5, r3, r2
 8008d14:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8008d18:	04b6      	lsls	r6, r6, #18
 8008d1a:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d1e:	b1a7      	cbz	r7, 8008d4a <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d20:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d22:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d26:	ea40 0008 	orr.w	r0, r0, r8
 8008d2a:	ea43 0300 	orr.w	r3, r3, r0
 8008d2e:	68c8      	ldr	r0, [r1, #12]
 8008d30:	ea43 030c 	orr.w	r3, r3, ip
 8008d34:	ea43 0300 	orr.w	r3, r3, r0
 8008d38:	ea43 0306 	orr.w	r3, r3, r6
 8008d3c:	ea43 0305 	orr.w	r3, r3, r5
 8008d40:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d42:	d0c1      	beq.n	8008cc8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008d44:	684b      	ldr	r3, [r1, #4]
 8008d46:	61a3      	str	r3, [r4, #24]
 8008d48:	e7be      	b.n	8008cc8 <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d4a:	ea40 0008 	orr.w	r0, r0, r8
 8008d4e:	4303      	orrs	r3, r0
 8008d50:	ea43 030c 	orr.w	r3, r3, ip
 8008d54:	4333      	orrs	r3, r6
 8008d56:	432b      	orrs	r3, r5
 8008d58:	6163      	str	r3, [r4, #20]
 8008d5a:	e7b5      	b.n	8008cc8 <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d5c:	b17f      	cbz	r7, 8008d7e <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d5e:	ea46 0307 	orr.w	r3, r6, r7
 8008d62:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8008d64:	6800      	ldr	r0, [r0, #0]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	4323      	orrs	r3, r4
 8008d6a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8008d6c:	4323      	orrs	r3, r4
 8008d6e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008d70:	4323      	orrs	r3, r4
 8008d72:	68cc      	ldr	r4, [r1, #12]
 8008d74:	4323      	orrs	r3, r4
 8008d76:	694c      	ldr	r4, [r1, #20]
 8008d78:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008d7c:	e792      	b.n	8008ca4 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008d7e:	2e00      	cmp	r6, #0
 8008d80:	d0a2      	beq.n	8008cc8 <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d82:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008d84:	6800      	ldr	r0, [r0, #0]
 8008d86:	4333      	orrs	r3, r6
 8008d88:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	694b      	ldr	r3, [r1, #20]
 8008d8e:	4332      	orrs	r2, r6
 8008d90:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8008d92:	4332      	orrs	r2, r6
 8008d94:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8008d98:	6142      	str	r2, [r0, #20]
}
 8008d9a:	e795      	b.n	8008cc8 <QSPI_Config+0x8c>

08008d9c <QSPI_WaitFlagStateUntilTimeout>:
{
 8008d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008da4:	4604      	mov	r4, r0
 8008da6:	460e      	mov	r6, r1
 8008da8:	4615      	mov	r5, r2
 8008daa:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008dac:	6822      	ldr	r2, [r4, #0]
 8008dae:	6893      	ldr	r3, [r2, #8]
 8008db0:	4233      	tst	r3, r6
 8008db2:	bf14      	ite	ne
 8008db4:	2301      	movne	r3, #1
 8008db6:	2300      	moveq	r3, #0
 8008db8:	42ab      	cmp	r3, r5
 8008dba:	d101      	bne.n	8008dc0 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e012      	b.n	8008de6 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008dc0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008dc4:	d0f3      	beq.n	8008dae <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc6:	f7fe f915 	bl	8006ff4 <HAL_GetTick>
 8008dca:	1bc0      	subs	r0, r0, r7
 8008dcc:	4540      	cmp	r0, r8
 8008dce:	d802      	bhi.n	8008dd6 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008dd0:	f1b8 0f00 	cmp.w	r8, #0
 8008dd4:	d1ea      	bne.n	8008dac <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008dd6:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008dd8:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008dda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008dde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008dec <HAL_QSPI_Init>:
{
 8008dec:	b530      	push	{r4, r5, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8008df2:	f7fe f8ff 	bl	8006ff4 <HAL_GetTick>
 8008df6:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8008df8:	2c00      	cmp	r4, #0
 8008dfa:	d040      	beq.n	8008e7e <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008dfc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008e00:	b93a      	cbnz	r2, 8008e12 <HAL_QSPI_Init+0x26>
 8008e02:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8008e04:	4620      	mov	r0, r4
 8008e06:	f7f8 f9e1 	bl	80011cc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8008e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008e12:	6820      	ldr	r0, [r4, #0]
 8008e14:	68a1      	ldr	r1, [r4, #8]
 8008e16:	6802      	ldr	r2, [r0, #0]
 8008e18:	3901      	subs	r1, #1
 8008e1a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8008e1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e22:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008e24:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e26:	4620      	mov	r0, r4
 8008e28:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008e2a:	9200      	str	r2, [sp, #0]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f7ff ffb5 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008e32:	bb10      	cbnz	r0, 8008e7a <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	69e5      	ldr	r5, [r4, #28]
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	6811      	ldr	r1, [r2, #0]
 8008e3c:	432b      	orrs	r3, r5
 8008e3e:	6a25      	ldr	r5, [r4, #32]
 8008e40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008e44:	432b      	orrs	r3, r5
 8008e46:	6865      	ldr	r5, [r4, #4]
 8008e48:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8008e4c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008e50:	430b      	orrs	r3, r1
 8008e52:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008e54:	6855      	ldr	r5, [r2, #4]
 8008e56:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008e62:	4908      	ldr	r1, [pc, #32]	; (8008e84 <HAL_QSPI_Init+0x98>)
 8008e64:	4029      	ands	r1, r5
 8008e66:	430b      	orrs	r3, r1
 8008e68:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	f043 0301 	orr.w	r3, r3, #1
 8008e70:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e72:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e74:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008e76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8008e7a:	b005      	add	sp, #20
 8008e7c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008e7e:	2001      	movs	r0, #1
 8008e80:	e7fb      	b.n	8008e7a <HAL_QSPI_Init+0x8e>
 8008e82:	bf00      	nop
 8008e84:	ffe0f8fe 	.word	0xffe0f8fe

08008e88 <HAL_QSPI_Command>:
{
 8008e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	b085      	sub	sp, #20
 8008e90:	4617      	mov	r7, r2
 8008e92:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8008e94:	f7fe f8ae 	bl	8006ff4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008e98:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008e9c:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008e9e:	2a01      	cmp	r2, #1
 8008ea0:	d033      	beq.n	8008f0a <HAL_QSPI_Command+0x82>
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	2602      	movs	r6, #2
 8008ea6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008eaa:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008eae:	2a01      	cmp	r2, #1
 8008eb0:	fa5f f882 	uxtb.w	r8, r2
 8008eb4:	d127      	bne.n	8008f06 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008eb6:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008eb8:	9003      	str	r0, [sp, #12]
 8008eba:	2120      	movs	r1, #32
 8008ebc:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008ebe:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008ec0:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008ec2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008ec6:	f7ff ff69 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008eca:	4605      	mov	r5, r0
 8008ecc:	b9a0      	cbnz	r0, 8008ef8 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008ece:	4602      	mov	r2, r0
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f7ff feb2 	bl	8008c3c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008ed8:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8008edc:	9b03      	ldr	r3, [sp, #12]
 8008ede:	b94a      	cbnz	r2, 8008ef4 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008ee0:	4642      	mov	r2, r8
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	9700      	str	r7, [sp, #0]
 8008ee8:	f7ff ff58 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008eec:	4605      	mov	r5, r0
 8008eee:	b918      	cbnz	r0, 8008ef8 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008ef4:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008efe:	4628      	mov	r0, r5
 8008f00:	b005      	add	sp, #20
 8008f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8008f06:	4635      	mov	r5, r6
 8008f08:	e7f6      	b.n	8008ef8 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8008f0a:	2502      	movs	r5, #2
 8008f0c:	e7f7      	b.n	8008efe <HAL_QSPI_Command+0x76>

08008f0e <HAL_QSPI_Transmit>:
{
 8008f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f10:	4604      	mov	r4, r0
 8008f12:	b085      	sub	sp, #20
 8008f14:	4616      	mov	r6, r2
 8008f16:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008f18:	f7fe f86c 	bl	8006ff4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008f1c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008f20:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008f22:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8008f24:	2a01      	cmp	r2, #1
 8008f26:	d049      	beq.n	8008fbc <HAL_QSPI_Transmit+0xae>
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008f2e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008f32:	2a01      	cmp	r2, #1
 8008f34:	b2d0      	uxtb	r0, r2
 8008f36:	d13f      	bne.n	8008fb8 <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f38:	2200      	movs	r2, #0
 8008f3a:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008f3c:	2f00      	cmp	r7, #0
 8008f3e:	d036      	beq.n	8008fae <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008f40:	2212      	movs	r2, #18
 8008f42:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008f46:	692a      	ldr	r2, [r5, #16]
 8008f48:	3201      	adds	r2, #1
 8008f4a:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008f4c:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8008f4e:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008f50:	3201      	adds	r2, #1
 8008f52:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008f54:	696a      	ldr	r2, [r5, #20]
 8008f56:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008f5a:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8008f5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f5e:	b98a      	cbnz	r2, 8008f84 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008f60:	2201      	movs	r2, #1
 8008f62:	2102      	movs	r1, #2
 8008f64:	4620      	mov	r0, r4
 8008f66:	9600      	str	r6, [sp, #0]
 8008f68:	f7ff ff18 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008f6c:	b910      	cbnz	r0, 8008f74 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	2202      	movs	r2, #2
 8008f72:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008f74:	2301      	movs	r3, #1
 8008f76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008f80:	b005      	add	sp, #20
 8008f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008f84:	2201      	movs	r2, #1
 8008f86:	2104      	movs	r1, #4
 8008f88:	4620      	mov	r0, r4
 8008f8a:	9600      	str	r6, [sp, #0]
 8008f8c:	9303      	str	r3, [sp, #12]
 8008f8e:	f7ff ff05 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1ee      	bne.n	8008f74 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008f96:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008f98:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008f9a:	7812      	ldrb	r2, [r2, #0]
 8008f9c:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8008fa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008fa2:	3201      	adds	r2, #1
 8008fa4:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008fa6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008fa8:	3a01      	subs	r2, #1
 8008faa:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008fac:	e7d6      	b.n	8008f5c <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008fae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008fb0:	f043 0308 	orr.w	r3, r3, #8
 8008fb4:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8008fb6:	e7e0      	b.n	8008f7a <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8008fb8:	2002      	movs	r0, #2
 8008fba:	e7de      	b.n	8008f7a <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8008fbc:	2002      	movs	r0, #2
 8008fbe:	e7df      	b.n	8008f80 <HAL_QSPI_Transmit+0x72>

08008fc0 <HAL_QSPI_Receive>:
{
 8008fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	4616      	mov	r6, r2
 8008fc8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008fca:	f7fe f813 	bl	8006ff4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008fce:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8008fd0:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008fd2:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8008fd6:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008fda:	2a01      	cmp	r2, #1
 8008fdc:	d04d      	beq.n	800907a <HAL_QSPI_Receive+0xba>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008fe4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008fe8:	2a01      	cmp	r2, #1
 8008fea:	b2d0      	uxtb	r0, r2
 8008fec:	d143      	bne.n	8009076 <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008fee:	2200      	movs	r2, #0
 8008ff0:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008ff2:	2f00      	cmp	r7, #0
 8008ff4:	d03a      	beq.n	800906c <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008ff6:	2222      	movs	r2, #34	; 0x22
 8008ff8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008ffc:	692a      	ldr	r2, [r5, #16]
 8008ffe:	3201      	adds	r2, #1
 8009000:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009002:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009004:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009006:	3201      	adds	r2, #1
 8009008:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800900a:	6969      	ldr	r1, [r5, #20]
 800900c:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8009010:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8009014:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009016:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800901a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800901c:	b98a      	cbnz	r2, 8009042 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800901e:	2201      	movs	r2, #1
 8009020:	2102      	movs	r1, #2
 8009022:	4620      	mov	r0, r4
 8009024:	9600      	str	r6, [sp, #0]
 8009026:	f7ff feb9 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800902a:	b910      	cbnz	r0, 8009032 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	2202      	movs	r2, #2
 8009030:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009032:	2301      	movs	r3, #1
 8009034:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8009038:	2300      	movs	r3, #0
 800903a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800903e:	b005      	add	sp, #20
 8009040:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009042:	2201      	movs	r2, #1
 8009044:	2106      	movs	r1, #6
 8009046:	4620      	mov	r0, r4
 8009048:	9600      	str	r6, [sp, #0]
 800904a:	9303      	str	r3, [sp, #12]
 800904c:	f7ff fea6 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009050:	2800      	cmp	r0, #0
 8009052:	d1ee      	bne.n	8009032 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009054:	f895 1020 	ldrb.w	r1, [r5, #32]
 8009058:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800905a:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800905c:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800905e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009060:	3201      	adds	r2, #1
 8009062:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8009064:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009066:	3a01      	subs	r2, #1
 8009068:	63a2      	str	r2, [r4, #56]	; 0x38
 800906a:	e7d6      	b.n	800901a <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800906c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800906e:	f043 0308 	orr.w	r3, r3, #8
 8009072:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8009074:	e7e0      	b.n	8009038 <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8009076:	2002      	movs	r0, #2
 8009078:	e7de      	b.n	8009038 <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800907a:	2002      	movs	r0, #2
 800907c:	e7df      	b.n	800903e <HAL_QSPI_Receive+0x7e>

0800907e <HAL_QSPI_AutoPolling>:
{
 800907e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009082:	4604      	mov	r4, r0
 8009084:	4615      	mov	r5, r2
 8009086:	461e      	mov	r6, r3
 8009088:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800908a:	f7fd ffb3 	bl	8006ff4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800908e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009092:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009094:	2a01      	cmp	r2, #1
 8009096:	d040      	beq.n	800911a <HAL_QSPI_AutoPolling+0x9c>
 8009098:	2201      	movs	r2, #1
 800909a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800909e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80090a2:	2a01      	cmp	r2, #1
 80090a4:	b2d7      	uxtb	r7, r2
 80090a6:	d136      	bne.n	8009116 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80090a8:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090aa:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090ac:	9003      	str	r0, [sp, #12]
 80090ae:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090b0:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090b2:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80090b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80090b8:	2120      	movs	r1, #32
 80090ba:	f7ff fe6f 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80090be:	bb20      	cbnz	r0, 800910a <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80090c0:	6821      	ldr	r1, [r4, #0]
 80090c2:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80090c4:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80090c6:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80090c8:	686a      	ldr	r2, [r5, #4]
 80090ca:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80090cc:	68aa      	ldr	r2, [r5, #8]
 80090ce:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80090d0:	680a      	ldr	r2, [r1, #0]
 80090d2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80090d6:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80090d8:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80090da:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80090de:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80090e0:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 80090e2:	68ea      	ldr	r2, [r5, #12]
 80090e4:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80090e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80090ec:	f7ff fda6 	bl	8008c3c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80090f0:	9b03      	ldr	r3, [sp, #12]
 80090f2:	463a      	mov	r2, r7
 80090f4:	2108      	movs	r1, #8
 80090f6:	4620      	mov	r0, r4
 80090f8:	9600      	str	r6, [sp, #0]
 80090fa:	f7ff fe4f 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80090fe:	b920      	cbnz	r0, 800910a <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	2208      	movs	r2, #8
 8009104:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009106:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800910a:	2300      	movs	r3, #0
 800910c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009110:	b004      	add	sp, #16
 8009112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8009116:	2002      	movs	r0, #2
 8009118:	e7f7      	b.n	800910a <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800911a:	2002      	movs	r0, #2
 800911c:	e7f8      	b.n	8009110 <HAL_QSPI_AutoPolling+0x92>

0800911e <HAL_QSPI_MemoryMapped>:
{
 800911e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009120:	4604      	mov	r4, r0
 8009122:	4616      	mov	r6, r2
 8009124:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009126:	f7fd ff65 	bl	8006ff4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800912a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800912e:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009130:	2a01      	cmp	r2, #1
 8009132:	d033      	beq.n	800919c <HAL_QSPI_MemoryMapped+0x7e>
 8009134:	2201      	movs	r2, #1
 8009136:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800913a:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800913e:	2a01      	cmp	r2, #1
 8009140:	d12a      	bne.n	8009198 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009142:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009144:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009146:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009148:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800914a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800914e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009150:	9100      	str	r1, [sp, #0]
 8009152:	2120      	movs	r1, #32
 8009154:	f7ff fe22 	bl	8008d9c <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009158:	4605      	mov	r5, r0
 800915a:	b9b8      	cbnz	r0, 800918c <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	6872      	ldr	r2, [r6, #4]
 8009160:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009162:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009164:	f020 0008 	bic.w	r0, r0, #8
 8009168:	ea40 0002 	orr.w	r0, r0, r2
 800916c:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800916e:	d107      	bne.n	8009180 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009170:	6832      	ldr	r2, [r6, #0]
 8009172:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009174:	2210      	movs	r2, #16
 8009176:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800917e:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009180:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8009184:	4639      	mov	r1, r7
 8009186:	4620      	mov	r0, r4
 8009188:	f7ff fd58 	bl	8008c3c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800918c:	2300      	movs	r3, #0
 800918e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009192:	4628      	mov	r0, r5
 8009194:	b003      	add	sp, #12
 8009196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009198:	2502      	movs	r5, #2
 800919a:	e7f7      	b.n	800918c <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800919c:	2502      	movs	r5, #2
 800919e:	e7f8      	b.n	8009192 <HAL_QSPI_MemoryMapped+0x74>

080091a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091a2:	4604      	mov	r4, r0
 80091a4:	b908      	cbnz	r0, 80091aa <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 80091a6:	2001      	movs	r0, #1
 80091a8:	e08b      	b.n	80092c2 <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091aa:	6803      	ldr	r3, [r0, #0]
 80091ac:	07df      	lsls	r7, r3, #31
 80091ae:	d45e      	bmi.n	800926e <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	079e      	lsls	r6, r3, #30
 80091b4:	f100 80af 	bmi.w	8009316 <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	06da      	lsls	r2, r3, #27
 80091bc:	d527      	bpl.n	800920e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091be:	4b9e      	ldr	r3, [pc, #632]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80091c0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091c4:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091c8:	2a08      	cmp	r2, #8
 80091ca:	d007      	beq.n	80091dc <HAL_RCC_OscConfig+0x3c>
 80091cc:	2a18      	cmp	r2, #24
 80091ce:	f040 8107 	bne.w	80093e0 <HAL_RCC_OscConfig+0x240>
 80091d2:	f001 0203 	and.w	r2, r1, #3
 80091d6:	2a01      	cmp	r2, #1
 80091d8:	f040 8102 	bne.w	80093e0 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	05db      	lsls	r3, r3, #23
 80091e0:	d502      	bpl.n	80091e8 <HAL_RCC_OscConfig+0x48>
 80091e2:	69e3      	ldr	r3, [r4, #28]
 80091e4:	2b80      	cmp	r3, #128	; 0x80
 80091e6:	d1de      	bne.n	80091a6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091e8:	f7fd ff1c 	bl	8007024 <HAL_GetREVID>
 80091ec:	f241 0303 	movw	r3, #4099	; 0x1003
 80091f0:	6a21      	ldr	r1, [r4, #32]
 80091f2:	4298      	cmp	r0, r3
 80091f4:	4b90      	ldr	r3, [pc, #576]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80091f6:	f200 80ec 	bhi.w	80093d2 <HAL_RCC_OscConfig+0x232>
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	2920      	cmp	r1, #32
 80091fe:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8009202:	bf0c      	ite	eq
 8009204:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8009208:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800920c:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	0719      	lsls	r1, r3, #28
 8009212:	f100 8127 	bmi.w	8009464 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	069a      	lsls	r2, r3, #26
 800921a:	f100 8148 	bmi.w	80094ae <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800921e:	6823      	ldr	r3, [r4, #0]
 8009220:	075d      	lsls	r5, r3, #29
 8009222:	d51e      	bpl.n	8009262 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8009224:	4d85      	ldr	r5, [pc, #532]	; (800943c <HAL_RCC_OscConfig+0x29c>)
 8009226:	682b      	ldr	r3, [r5, #0]
 8009228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800922c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800922e:	f7fd fee1 	bl	8006ff4 <HAL_GetTick>
 8009232:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	05da      	lsls	r2, r3, #23
 8009238:	f140 815e 	bpl.w	80094f8 <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800923c:	68a3      	ldr	r3, [r4, #8]
 800923e:	4d7e      	ldr	r5, [pc, #504]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009240:	2b01      	cmp	r3, #1
 8009242:	f040 8160 	bne.w	8009506 <HAL_RCC_OscConfig+0x366>
 8009246:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009248:	f043 0301 	orr.w	r3, r3, #1
 800924c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800924e:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8009252:	f7fd fecf 	bl	8006ff4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009256:	4e78      	ldr	r6, [pc, #480]	; (8009438 <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8009258:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800925a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800925c:	079b      	lsls	r3, r3, #30
 800925e:	f140 8178 	bpl.w	8009552 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009264:	2800      	cmp	r0, #0
 8009266:	f040 817b 	bne.w	8009560 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800926a:	2000      	movs	r0, #0
 800926c:	e029      	b.n	80092c2 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800926e:	4b72      	ldr	r3, [pc, #456]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009270:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009272:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009274:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009278:	2a10      	cmp	r2, #16
 800927a:	d005      	beq.n	8009288 <HAL_RCC_OscConfig+0xe8>
 800927c:	2a18      	cmp	r2, #24
 800927e:	d10a      	bne.n	8009296 <HAL_RCC_OscConfig+0xf6>
 8009280:	f001 0203 	and.w	r2, r1, #3
 8009284:	2a02      	cmp	r2, #2
 8009286:	d106      	bne.n	8009296 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	039d      	lsls	r5, r3, #14
 800928c:	d590      	bpl.n	80091b0 <HAL_RCC_OscConfig+0x10>
 800928e:	6863      	ldr	r3, [r4, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d18d      	bne.n	80091b0 <HAL_RCC_OscConfig+0x10>
 8009294:	e787      	b.n	80091a6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009296:	6862      	ldr	r2, [r4, #4]
 8009298:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800929c:	d112      	bne.n	80092c4 <HAL_RCC_OscConfig+0x124>
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80092a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80092a6:	f7fd fea5 	bl	8006ff4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092aa:	4e63      	ldr	r6, [pc, #396]	; (8009438 <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 80092ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ae:	6833      	ldr	r3, [r6, #0]
 80092b0:	0398      	lsls	r0, r3, #14
 80092b2:	f53f af7d 	bmi.w	80091b0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092b6:	f7fd fe9d 	bl	8006ff4 <HAL_GetTick>
 80092ba:	1b40      	subs	r0, r0, r5
 80092bc:	2864      	cmp	r0, #100	; 0x64
 80092be:	d9f6      	bls.n	80092ae <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80092c0:	2003      	movs	r0, #3
}
 80092c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092c4:	4d5c      	ldr	r5, [pc, #368]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b99a      	cbnz	r2, 80092f2 <HAL_RCC_OscConfig+0x152>
 80092ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	682b      	ldr	r3, [r5, #0]
 80092d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80092d8:	f7fd fe8c 	bl	8006ff4 <HAL_GetTick>
 80092dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	0399      	lsls	r1, r3, #14
 80092e2:	f57f af65 	bpl.w	80091b0 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092e6:	f7fd fe85 	bl	8006ff4 <HAL_GetTick>
 80092ea:	1b80      	subs	r0, r0, r6
 80092ec:	2864      	cmp	r0, #100	; 0x64
 80092ee:	d9f6      	bls.n	80092de <HAL_RCC_OscConfig+0x13e>
 80092f0:	e7e6      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092f2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80092f6:	d107      	bne.n	8009308 <HAL_RCC_OscConfig+0x168>
 80092f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092fc:	602b      	str	r3, [r5, #0]
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	e7ce      	b.n	80092a6 <HAL_RCC_OscConfig+0x106>
 8009308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800930c:	602b      	str	r3, [r5, #0]
 800930e:	682b      	ldr	r3, [r5, #0]
 8009310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009314:	e7f6      	b.n	8009304 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009316:	4b48      	ldr	r3, [pc, #288]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 8009318:	68e1      	ldr	r1, [r4, #12]
 800931a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800931c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800931e:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8009322:	d003      	beq.n	800932c <HAL_RCC_OscConfig+0x18c>
 8009324:	2a18      	cmp	r2, #24
 8009326:	d12b      	bne.n	8009380 <HAL_RCC_OscConfig+0x1e0>
 8009328:	0782      	lsls	r2, r0, #30
 800932a:	d129      	bne.n	8009380 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	075b      	lsls	r3, r3, #29
 8009330:	d502      	bpl.n	8009338 <HAL_RCC_OscConfig+0x198>
 8009332:	2900      	cmp	r1, #0
 8009334:	f43f af37 	beq.w	80091a6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009338:	4d3f      	ldr	r5, [pc, #252]	; (8009438 <HAL_RCC_OscConfig+0x298>)
 800933a:	682a      	ldr	r2, [r5, #0]
 800933c:	f022 0219 	bic.w	r2, r2, #25
 8009340:	430a      	orrs	r2, r1
 8009342:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8009344:	f7fd fe56 	bl	8006ff4 <HAL_GetTick>
 8009348:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800934a:	682b      	ldr	r3, [r5, #0]
 800934c:	075f      	lsls	r7, r3, #29
 800934e:	d511      	bpl.n	8009374 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009350:	f7fd fe68 	bl	8007024 <HAL_GetREVID>
 8009354:	f241 0303 	movw	r3, #4099	; 0x1003
 8009358:	6922      	ldr	r2, [r4, #16]
 800935a:	4298      	cmp	r0, r3
 800935c:	686b      	ldr	r3, [r5, #4]
 800935e:	d822      	bhi.n	80093a6 <HAL_RCC_OscConfig+0x206>
 8009360:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009364:	2a40      	cmp	r2, #64	; 0x40
 8009366:	bf0c      	ite	eq
 8009368:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800936c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009370:	606b      	str	r3, [r5, #4]
 8009372:	e721      	b.n	80091b8 <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009374:	f7fd fe3e 	bl	8006ff4 <HAL_GetTick>
 8009378:	1b80      	subs	r0, r0, r6
 800937a:	2802      	cmp	r0, #2
 800937c:	d9e5      	bls.n	800934a <HAL_RCC_OscConfig+0x1aa>
 800937e:	e79f      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009380:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009382:	b1a9      	cbz	r1, 80093b0 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009384:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009388:	4d2b      	ldr	r5, [pc, #172]	; (8009438 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800938a:	430a      	orrs	r2, r1
 800938c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800938e:	f7fd fe31 	bl	8006ff4 <HAL_GetTick>
 8009392:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	0758      	lsls	r0, r3, #29
 8009398:	d4da      	bmi.n	8009350 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800939a:	f7fd fe2b 	bl	8006ff4 <HAL_GetTick>
 800939e:	1b80      	subs	r0, r0, r6
 80093a0:	2802      	cmp	r0, #2
 80093a2:	d9f7      	bls.n	8009394 <HAL_RCC_OscConfig+0x1f4>
 80093a4:	e78c      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80093aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80093ae:	e7df      	b.n	8009370 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 80093b0:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80093b4:	4e20      	ldr	r6, [pc, #128]	; (8009438 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 80093b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093b8:	f7fd fe1c 	bl	8006ff4 <HAL_GetTick>
 80093bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80093be:	6833      	ldr	r3, [r6, #0]
 80093c0:	0759      	lsls	r1, r3, #29
 80093c2:	f57f aef9 	bpl.w	80091b8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80093c6:	f7fd fe15 	bl	8006ff4 <HAL_GetTick>
 80093ca:	1b40      	subs	r0, r0, r5
 80093cc:	2802      	cmp	r0, #2
 80093ce:	d9f6      	bls.n	80093be <HAL_RCC_OscConfig+0x21e>
 80093d0:	e776      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80093d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80093dc:	60da      	str	r2, [r3, #12]
 80093de:	e716      	b.n	800920e <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80093e0:	69e2      	ldr	r2, [r4, #28]
 80093e2:	b36a      	cbz	r2, 8009440 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 80093e4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093e6:	4d14      	ldr	r5, [pc, #80]	; (8009438 <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 80093e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80093ee:	f7fd fe01 	bl	8006ff4 <HAL_GetTick>
 80093f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	05df      	lsls	r7, r3, #23
 80093f8:	d511      	bpl.n	800941e <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80093fa:	f7fd fe13 	bl	8007024 <HAL_GetREVID>
 80093fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8009402:	6a22      	ldr	r2, [r4, #32]
 8009404:	4298      	cmp	r0, r3
 8009406:	d810      	bhi.n	800942a <HAL_RCC_OscConfig+0x28a>
 8009408:	686b      	ldr	r3, [r5, #4]
 800940a:	2a20      	cmp	r2, #32
 800940c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009410:	bf0c      	ite	eq
 8009412:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8009416:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800941a:	606b      	str	r3, [r5, #4]
 800941c:	e6f7      	b.n	800920e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800941e:	f7fd fde9 	bl	8006ff4 <HAL_GetTick>
 8009422:	1b80      	subs	r0, r0, r6
 8009424:	2802      	cmp	r0, #2
 8009426:	d9e5      	bls.n	80093f4 <HAL_RCC_OscConfig+0x254>
 8009428:	e74a      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800942a:	68eb      	ldr	r3, [r5, #12]
 800942c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009430:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009434:	60eb      	str	r3, [r5, #12]
 8009436:	e6ea      	b.n	800920e <HAL_RCC_OscConfig+0x6e>
 8009438:	58024400 	.word	0x58024400
 800943c:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009440:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009442:	4e88      	ldr	r6, [pc, #544]	; (8009664 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 8009444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009448:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800944a:	f7fd fdd3 	bl	8006ff4 <HAL_GetTick>
 800944e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	05d8      	lsls	r0, r3, #23
 8009454:	f57f aedb 	bpl.w	800920e <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009458:	f7fd fdcc 	bl	8006ff4 <HAL_GetTick>
 800945c:	1b40      	subs	r0, r0, r5
 800945e:	2802      	cmp	r0, #2
 8009460:	d9f6      	bls.n	8009450 <HAL_RCC_OscConfig+0x2b0>
 8009462:	e72d      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009464:	6963      	ldr	r3, [r4, #20]
 8009466:	4d7f      	ldr	r5, [pc, #508]	; (8009664 <HAL_RCC_OscConfig+0x4c4>)
 8009468:	b183      	cbz	r3, 800948c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800946a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009472:	f7fd fdbf 	bl	8006ff4 <HAL_GetTick>
 8009476:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009478:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800947a:	079b      	lsls	r3, r3, #30
 800947c:	f53f aecb 	bmi.w	8009216 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009480:	f7fd fdb8 	bl	8006ff4 <HAL_GetTick>
 8009484:	1b80      	subs	r0, r0, r6
 8009486:	2802      	cmp	r0, #2
 8009488:	d9f6      	bls.n	8009478 <HAL_RCC_OscConfig+0x2d8>
 800948a:	e719      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800948c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009494:	f7fd fdae 	bl	8006ff4 <HAL_GetTick>
 8009498:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800949a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800949c:	079f      	lsls	r7, r3, #30
 800949e:	f57f aeba 	bpl.w	8009216 <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094a2:	f7fd fda7 	bl	8006ff4 <HAL_GetTick>
 80094a6:	1b80      	subs	r0, r0, r6
 80094a8:	2802      	cmp	r0, #2
 80094aa:	d9f6      	bls.n	800949a <HAL_RCC_OscConfig+0x2fa>
 80094ac:	e708      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80094ae:	69a3      	ldr	r3, [r4, #24]
 80094b0:	4d6c      	ldr	r5, [pc, #432]	; (8009664 <HAL_RCC_OscConfig+0x4c4>)
 80094b2:	b183      	cbz	r3, 80094d6 <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80094ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80094bc:	f7fd fd9a 	bl	8006ff4 <HAL_GetTick>
 80094c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80094c2:	682b      	ldr	r3, [r5, #0]
 80094c4:	0498      	lsls	r0, r3, #18
 80094c6:	f53f aeaa 	bmi.w	800921e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094ca:	f7fd fd93 	bl	8006ff4 <HAL_GetTick>
 80094ce:	1b80      	subs	r0, r0, r6
 80094d0:	2802      	cmp	r0, #2
 80094d2:	d9f6      	bls.n	80094c2 <HAL_RCC_OscConfig+0x322>
 80094d4:	e6f4      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094dc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80094de:	f7fd fd89 	bl	8006ff4 <HAL_GetTick>
 80094e2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	0499      	lsls	r1, r3, #18
 80094e8:	f57f ae99 	bpl.w	800921e <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80094ec:	f7fd fd82 	bl	8006ff4 <HAL_GetTick>
 80094f0:	1b80      	subs	r0, r0, r6
 80094f2:	2802      	cmp	r0, #2
 80094f4:	d9f6      	bls.n	80094e4 <HAL_RCC_OscConfig+0x344>
 80094f6:	e6e3      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094f8:	f7fd fd7c 	bl	8006ff4 <HAL_GetTick>
 80094fc:	1b80      	subs	r0, r0, r6
 80094fe:	2864      	cmp	r0, #100	; 0x64
 8009500:	f67f ae98 	bls.w	8009234 <HAL_RCC_OscConfig+0x94>
 8009504:	e6dc      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009506:	b9b3      	cbnz	r3, 8009536 <HAL_RCC_OscConfig+0x396>
 8009508:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800950a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800950e:	f023 0301 	bic.w	r3, r3, #1
 8009512:	672b      	str	r3, [r5, #112]	; 0x70
 8009514:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009516:	f023 0304 	bic.w	r3, r3, #4
 800951a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800951c:	f7fd fd6a 	bl	8006ff4 <HAL_GetTick>
 8009520:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009522:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009524:	0798      	lsls	r0, r3, #30
 8009526:	f57f ae9c 	bpl.w	8009262 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800952a:	f7fd fd63 	bl	8006ff4 <HAL_GetTick>
 800952e:	1b80      	subs	r0, r0, r6
 8009530:	42b8      	cmp	r0, r7
 8009532:	d9f6      	bls.n	8009522 <HAL_RCC_OscConfig+0x382>
 8009534:	e6c4      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009536:	2b05      	cmp	r3, #5
 8009538:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800953a:	d103      	bne.n	8009544 <HAL_RCC_OscConfig+0x3a4>
 800953c:	f043 0304 	orr.w	r3, r3, #4
 8009540:	672b      	str	r3, [r5, #112]	; 0x70
 8009542:	e680      	b.n	8009246 <HAL_RCC_OscConfig+0xa6>
 8009544:	f023 0301 	bic.w	r3, r3, #1
 8009548:	672b      	str	r3, [r5, #112]	; 0x70
 800954a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800954c:	f023 0304 	bic.w	r3, r3, #4
 8009550:	e67c      	b.n	800924c <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009552:	f7fd fd4f 	bl	8006ff4 <HAL_GetTick>
 8009556:	1b40      	subs	r0, r0, r5
 8009558:	42b8      	cmp	r0, r7
 800955a:	f67f ae7e 	bls.w	800925a <HAL_RCC_OscConfig+0xba>
 800955e:	e6af      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009560:	4d40      	ldr	r5, [pc, #256]	; (8009664 <HAL_RCC_OscConfig+0x4c4>)
 8009562:	692b      	ldr	r3, [r5, #16]
 8009564:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009568:	2b18      	cmp	r3, #24
 800956a:	d07d      	beq.n	8009668 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800956c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800956e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009574:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009576:	d167      	bne.n	8009648 <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 8009578:	f7fd fd3c 	bl	8006ff4 <HAL_GetTick>
 800957c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800957e:	682b      	ldr	r3, [r5, #0]
 8009580:	0199      	lsls	r1, r3, #6
 8009582:	d45b      	bmi.n	800963c <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009584:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009586:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009588:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800958c:	f023 0303 	bic.w	r3, r3, #3
 8009590:	4313      	orrs	r3, r2
 8009592:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009594:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009598:	62ab      	str	r3, [r5, #40]	; 0x28
 800959a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800959c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800959e:	3b01      	subs	r3, #1
 80095a0:	3a01      	subs	r2, #1
 80095a2:	025b      	lsls	r3, r3, #9
 80095a4:	0412      	lsls	r2, r2, #16
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80095ac:	4313      	orrs	r3, r2
 80095ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80095b0:	3a01      	subs	r2, #1
 80095b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b6:	4313      	orrs	r3, r2
 80095b8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80095ba:	3a01      	subs	r2, #1
 80095bc:	0612      	lsls	r2, r2, #24
 80095be:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80095c2:	4313      	orrs	r3, r2
 80095c4:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80095c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095c8:	f023 0301 	bic.w	r3, r3, #1
 80095cc:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80095d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80095d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80095da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80095de:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80095e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80095e4:	f023 030c 	bic.w	r3, r3, #12
 80095e8:	4313      	orrs	r3, r2
 80095ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80095ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095ee:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80095f0:	f023 0302 	bic.w	r3, r3, #2
 80095f4:	4313      	orrs	r3, r2
 80095f6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80095fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009600:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009606:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009608:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800960a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800960e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009610:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009618:	682b      	ldr	r3, [r5, #0]
 800961a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800961e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009620:	f7fd fce8 	bl	8006ff4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009624:	4d0f      	ldr	r5, [pc, #60]	; (8009664 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 8009626:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	019a      	lsls	r2, r3, #6
 800962c:	f53f ae1d 	bmi.w	800926a <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009630:	f7fd fce0 	bl	8006ff4 <HAL_GetTick>
 8009634:	1b00      	subs	r0, r0, r4
 8009636:	2802      	cmp	r0, #2
 8009638:	d9f6      	bls.n	8009628 <HAL_RCC_OscConfig+0x488>
 800963a:	e641      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800963c:	f7fd fcda 	bl	8006ff4 <HAL_GetTick>
 8009640:	1b80      	subs	r0, r0, r6
 8009642:	2802      	cmp	r0, #2
 8009644:	d99b      	bls.n	800957e <HAL_RCC_OscConfig+0x3de>
 8009646:	e63b      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8009648:	f7fd fcd4 	bl	8006ff4 <HAL_GetTick>
 800964c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	019b      	lsls	r3, r3, #6
 8009652:	f57f ae0a 	bpl.w	800926a <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009656:	f7fd fccd 	bl	8006ff4 <HAL_GetTick>
 800965a:	1b00      	subs	r0, r0, r4
 800965c:	2802      	cmp	r0, #2
 800965e:	d9f6      	bls.n	800964e <HAL_RCC_OscConfig+0x4ae>
 8009660:	e62e      	b.n	80092c0 <HAL_RCC_OscConfig+0x120>
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009668:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800966a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800966c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800966e:	f43f ae28 	beq.w	80092c2 <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009672:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009676:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009678:	4281      	cmp	r1, r0
 800967a:	f47f ad94 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800967e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009682:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009684:	428a      	cmp	r2, r1
 8009686:	f47f ad8e 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800968a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800968c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009690:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009692:	4291      	cmp	r1, r2
 8009694:	f47f ad87 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009698:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800969a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800969e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096a0:	4291      	cmp	r1, r2
 80096a2:	f47f ad80 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80096a8:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80096ac:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096ae:	4291      	cmp	r1, r2
 80096b0:	f47f ad79 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80096b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80096b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80096ba:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80096bc:	4293      	cmp	r3, r2
 80096be:	f47f ad72 	bne.w	80091a6 <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80096c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80096c4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80096c6:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80096ca:	429a      	cmp	r2, r3
 80096cc:	f43f adcd 	beq.w	800926a <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 80096d0:	4d0c      	ldr	r5, [pc, #48]	; (8009704 <HAL_RCC_OscConfig+0x564>)
 80096d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80096da:	f7fd fc8b 	bl	8006ff4 <HAL_GetTick>
 80096de:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80096e0:	f7fd fc88 	bl	8006ff4 <HAL_GetTick>
 80096e4:	42b0      	cmp	r0, r6
 80096e6:	d0fb      	beq.n	80096e0 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80096ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80096ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80096f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80096f8:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80096fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80096fc:	f043 0301 	orr.w	r3, r3, #1
 8009700:	62eb      	str	r3, [r5, #44]	; 0x2c
 8009702:	e5b2      	b.n	800926a <HAL_RCC_OscConfig+0xca>
 8009704:	58024400 	.word	0x58024400

08009708 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4c23      	ldr	r4, [pc, #140]	; (8009798 <HAL_RCC_MCOConfig+0x90>)
 800970c:	b088      	sub	sp, #32
 800970e:	460e      	mov	r6, r1
 8009710:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009712:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009716:	b9f8      	cbnz	r0, 8009758 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009718:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800971c:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009720:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009722:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009726:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800972a:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	9301      	str	r3, [sp, #4]
 8009732:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009734:	2302      	movs	r3, #2
 8009736:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800973a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800973c:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009740:	4816      	ldr	r0, [pc, #88]	; (800979c <HAL_RCC_MCOConfig+0x94>)
 8009742:	f7fe fa9d 	bl	8007c80 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009746:	6923      	ldr	r3, [r4, #16]
 8009748:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800974c:	ea43 0106 	orr.w	r1, r3, r6
 8009750:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009752:	6121      	str	r1, [r4, #16]
  }
}
 8009754:	b008      	add	sp, #32
 8009756:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009758:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800975c:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009760:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009762:	480f      	ldr	r0, [pc, #60]	; (80097a0 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009764:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8009768:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	9302      	str	r3, [sp, #8]
 8009772:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009774:	2302      	movs	r3, #2
 8009776:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800977a:	2300      	movs	r3, #0
 800977c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009780:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009782:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009784:	f7fe fa7c 	bl	8007c80 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800978e:	ea43 0106 	orr.w	r1, r3, r6
 8009792:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009796:	e7dc      	b.n	8009752 <HAL_RCC_MCOConfig+0x4a>
 8009798:	58024400 	.word	0x58024400
 800979c:	58020000 	.word	0x58020000
 80097a0:	58020800 	.word	0x58020800

080097a4 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097a4:	4b48      	ldr	r3, [pc, #288]	; (80098c8 <HAL_RCC_GetSysClockFreq+0x124>)
 80097a6:	691a      	ldr	r2, [r3, #16]
 80097a8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80097ac:	2a10      	cmp	r2, #16
{
 80097ae:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097b0:	f000 8086 	beq.w	80098c0 <HAL_RCC_GetSysClockFreq+0x11c>
 80097b4:	2a18      	cmp	r2, #24
 80097b6:	d00c      	beq.n	80097d2 <HAL_RCC_GetSysClockFreq+0x2e>
 80097b8:	2a00      	cmp	r2, #0
 80097ba:	f040 8083 	bne.w	80098c4 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	4842      	ldr	r0, [pc, #264]	; (80098cc <HAL_RCC_GetSysClockFreq+0x128>)
 80097c2:	f012 0f20 	tst.w	r2, #32
 80097c6:	d003      	beq.n	80097d0 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80097ce:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80097d0:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80097d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097d6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 80097d8:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80097dc:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 80097e2:	d0f5      	beq.n	80097d0 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097e4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80097e8:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097ec:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097f0:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097f4:	4362      	muls	r2, r4
 80097f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80097fe:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009800:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009804:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009808:	d04c      	beq.n	80098a4 <HAL_RCC_GetSysClockFreq+0x100>
 800980a:	2902      	cmp	r1, #2
 800980c:	d03c      	beq.n	8009888 <HAL_RCC_GetSysClockFreq+0xe4>
 800980e:	2900      	cmp	r1, #0
 8009810:	d148      	bne.n	80098a4 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	0692      	lsls	r2, r2, #26
 8009816:	d527      	bpl.n	8009868 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009818:	6819      	ldr	r1, [r3, #0]
 800981a:	4a2c      	ldr	r2, [pc, #176]	; (80098cc <HAL_RCC_GetSysClockFreq+0x128>)
 800981c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009822:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009828:	ee07 2a10 	vmov	s14, r2
 800982c:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8009830:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8009834:	ee06 3a90 	vmov	s13, r3
 8009838:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800983c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009840:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009844:	4b20      	ldr	r3, [pc, #128]	; (80098c8 <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009846:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009850:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009852:	ee07 3a10 	vmov	s14, r3
 8009856:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800985a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800985e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009862:	ee17 0a90 	vmov	r0, s15
 8009866:	e7b3      	b.n	80097d0 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986e:	ee07 3a10 	vmov	s14, r3
 8009872:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800987a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800987e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80098d0 <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009882:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009886:	e7dd      	b.n	8009844 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a10 	vmov	s14, r3
 8009892:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800989a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800989e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80098d4 <HAL_RCC_GetSysClockFreq+0x130>
 80098a2:	e7ee      	b.n	8009882 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098aa:	ee07 3a10 	vmov	s14, r3
 80098ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80098b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098b6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80098ba:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80098d8 <HAL_RCC_GetSysClockFreq+0x134>
 80098be:	e7e0      	b.n	8009882 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098c0:	4806      	ldr	r0, [pc, #24]	; (80098dc <HAL_RCC_GetSysClockFreq+0x138>)
 80098c2:	e785      	b.n	80097d0 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80098c4:	4806      	ldr	r0, [pc, #24]	; (80098e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80098c6:	e783      	b.n	80097d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80098c8:	58024400 	.word	0x58024400
 80098cc:	03d09000 	.word	0x03d09000
 80098d0:	4c742400 	.word	0x4c742400
 80098d4:	4bbebc20 	.word	0x4bbebc20
 80098d8:	4a742400 	.word	0x4a742400
 80098dc:	017d7840 	.word	0x017d7840
 80098e0:	003d0900 	.word	0x003d0900

080098e4 <HAL_RCC_ClockConfig>:
{
 80098e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098e8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80098ea:	4604      	mov	r4, r0
 80098ec:	b910      	cbnz	r0, 80098f4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80098ee:	2001      	movs	r0, #1
}
 80098f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80098f4:	4a88      	ldr	r2, [pc, #544]	; (8009b18 <HAL_RCC_ClockConfig+0x234>)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	428b      	cmp	r3, r1
 80098fe:	f0c0 8093 	bcc.w	8009a28 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009902:	6823      	ldr	r3, [r4, #0]
 8009904:	075f      	lsls	r7, r3, #29
 8009906:	f100 809b 	bmi.w	8009a40 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800990a:	071e      	lsls	r6, r3, #28
 800990c:	d50b      	bpl.n	8009926 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800990e:	4983      	ldr	r1, [pc, #524]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009910:	6966      	ldr	r6, [r4, #20]
 8009912:	69c8      	ldr	r0, [r1, #28]
 8009914:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009918:	4286      	cmp	r6, r0
 800991a:	d904      	bls.n	8009926 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800991c:	69ca      	ldr	r2, [r1, #28]
 800991e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009922:	4332      	orrs	r2, r6
 8009924:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009926:	06d8      	lsls	r0, r3, #27
 8009928:	d50b      	bpl.n	8009942 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800992a:	497c      	ldr	r1, [pc, #496]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 800992c:	69a6      	ldr	r6, [r4, #24]
 800992e:	69c8      	ldr	r0, [r1, #28]
 8009930:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009934:	4286      	cmp	r6, r0
 8009936:	d904      	bls.n	8009942 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009938:	69ca      	ldr	r2, [r1, #28]
 800993a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800993e:	4332      	orrs	r2, r6
 8009940:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009942:	0699      	lsls	r1, r3, #26
 8009944:	d50b      	bpl.n	800995e <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009946:	4975      	ldr	r1, [pc, #468]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009948:	69e6      	ldr	r6, [r4, #28]
 800994a:	6a08      	ldr	r0, [r1, #32]
 800994c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009950:	4286      	cmp	r6, r0
 8009952:	d904      	bls.n	800995e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009954:	6a0a      	ldr	r2, [r1, #32]
 8009956:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800995a:	4332      	orrs	r2, r6
 800995c:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800995e:	079a      	lsls	r2, r3, #30
 8009960:	d50b      	bpl.n	800997a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009962:	496e      	ldr	r1, [pc, #440]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009964:	68e6      	ldr	r6, [r4, #12]
 8009966:	6988      	ldr	r0, [r1, #24]
 8009968:	f000 000f 	and.w	r0, r0, #15
 800996c:	4286      	cmp	r6, r0
 800996e:	d904      	bls.n	800997a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009970:	698a      	ldr	r2, [r1, #24]
 8009972:	f022 020f 	bic.w	r2, r2, #15
 8009976:	4332      	orrs	r2, r6
 8009978:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800997a:	07df      	lsls	r7, r3, #31
 800997c:	d46e      	bmi.n	8009a5c <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	079e      	lsls	r6, r3, #30
 8009982:	f100 80a1 	bmi.w	8009ac8 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009986:	4964      	ldr	r1, [pc, #400]	; (8009b18 <HAL_RCC_ClockConfig+0x234>)
 8009988:	680a      	ldr	r2, [r1, #0]
 800998a:	f002 020f 	and.w	r2, r2, #15
 800998e:	42aa      	cmp	r2, r5
 8009990:	f200 80a8 	bhi.w	8009ae4 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009994:	0758      	lsls	r0, r3, #29
 8009996:	f100 80b1 	bmi.w	8009afc <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800999a:	0719      	lsls	r1, r3, #28
 800999c:	d50b      	bpl.n	80099b6 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800999e:	495f      	ldr	r1, [pc, #380]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 80099a0:	6965      	ldr	r5, [r4, #20]
 80099a2:	69c8      	ldr	r0, [r1, #28]
 80099a4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80099a8:	4285      	cmp	r5, r0
 80099aa:	d204      	bcs.n	80099b6 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099ac:	69ca      	ldr	r2, [r1, #28]
 80099ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80099b2:	432a      	orrs	r2, r5
 80099b4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099b6:	06da      	lsls	r2, r3, #27
 80099b8:	d50b      	bpl.n	80099d2 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099ba:	4958      	ldr	r1, [pc, #352]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 80099bc:	69a5      	ldr	r5, [r4, #24]
 80099be:	69c8      	ldr	r0, [r1, #28]
 80099c0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80099c4:	4285      	cmp	r5, r0
 80099c6:	d204      	bcs.n	80099d2 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099c8:	69ca      	ldr	r2, [r1, #28]
 80099ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80099ce:	432a      	orrs	r2, r5
 80099d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099d2:	069b      	lsls	r3, r3, #26
 80099d4:	d50b      	bpl.n	80099ee <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099d6:	4a51      	ldr	r2, [pc, #324]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 80099d8:	69e0      	ldr	r0, [r4, #28]
 80099da:	6a11      	ldr	r1, [r2, #32]
 80099dc:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80099e0:	4288      	cmp	r0, r1
 80099e2:	d204      	bcs.n	80099ee <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099e4:	6a13      	ldr	r3, [r2, #32]
 80099e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ea:	4303      	orrs	r3, r0
 80099ec:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099ee:	f7ff fed9 	bl	80097a4 <HAL_RCC_GetSysClockFreq>
 80099f2:	494a      	ldr	r1, [pc, #296]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 80099f4:	4a4a      	ldr	r2, [pc, #296]	; (8009b20 <HAL_RCC_ClockConfig+0x23c>)
 80099f6:	698b      	ldr	r3, [r1, #24]
 80099f8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80099fc:	5cd3      	ldrb	r3, [r2, r3]
 80099fe:	f003 031f 	and.w	r3, r3, #31
 8009a02:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a04:	698b      	ldr	r3, [r1, #24]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	5cd3      	ldrb	r3, [r2, r3]
 8009a0c:	4a45      	ldr	r2, [pc, #276]	; (8009b24 <HAL_RCC_ClockConfig+0x240>)
 8009a0e:	f003 031f 	and.w	r3, r3, #31
 8009a12:	fa20 f303 	lsr.w	r3, r0, r3
 8009a16:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009a18:	4b43      	ldr	r3, [pc, #268]	; (8009b28 <HAL_RCC_ClockConfig+0x244>)
 8009a1a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009a1c:	4b43      	ldr	r3, [pc, #268]	; (8009b2c <HAL_RCC_ClockConfig+0x248>)
}
 8009a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009a22:	6818      	ldr	r0, [r3, #0]
 8009a24:	f7f7 bd68 	b.w	80014f8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	f023 030f 	bic.w	r3, r3, #15
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a32:	6813      	ldr	r3, [r2, #0]
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	f47f af58 	bne.w	80098ee <HAL_RCC_ClockConfig+0xa>
 8009a3e:	e760      	b.n	8009902 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009a40:	4936      	ldr	r1, [pc, #216]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009a42:	6926      	ldr	r6, [r4, #16]
 8009a44:	6988      	ldr	r0, [r1, #24]
 8009a46:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009a4a:	4286      	cmp	r6, r0
 8009a4c:	f67f af5d 	bls.w	800990a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009a50:	698a      	ldr	r2, [r1, #24]
 8009a52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a56:	4332      	orrs	r2, r6
 8009a58:	618a      	str	r2, [r1, #24]
 8009a5a:	e756      	b.n	800990a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009a5c:	4b2f      	ldr	r3, [pc, #188]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009a5e:	68a1      	ldr	r1, [r4, #8]
 8009a60:	699a      	ldr	r2, [r3, #24]
 8009a62:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8009a66:	430a      	orrs	r2, r1
 8009a68:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a6a:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a6c:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a6e:	2a02      	cmp	r2, #2
 8009a70:	d11d      	bne.n	8009aae <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a76:	f43f af3a 	beq.w	80098ee <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a7a:	4e28      	ldr	r6, [pc, #160]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a7c:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009a80:	6933      	ldr	r3, [r6, #16]
 8009a82:	f023 0307 	bic.w	r3, r3, #7
 8009a86:	4313      	orrs	r3, r2
 8009a88:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8009a8a:	f7fd fab3 	bl	8006ff4 <HAL_GetTick>
 8009a8e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a90:	6933      	ldr	r3, [r6, #16]
 8009a92:	6862      	ldr	r2, [r4, #4]
 8009a94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a98:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009a9c:	f43f af6f 	beq.w	800997e <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009aa0:	f7fd faa8 	bl	8006ff4 <HAL_GetTick>
 8009aa4:	1bc0      	subs	r0, r0, r7
 8009aa6:	4540      	cmp	r0, r8
 8009aa8:	d9f2      	bls.n	8009a90 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009aaa:	2003      	movs	r0, #3
 8009aac:	e720      	b.n	80098f0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009aae:	2a03      	cmp	r2, #3
 8009ab0:	d102      	bne.n	8009ab8 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ab2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009ab6:	e7de      	b.n	8009a76 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ab8:	2a01      	cmp	r2, #1
 8009aba:	d102      	bne.n	8009ac2 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009abc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009ac0:	e7d9      	b.n	8009a76 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ac2:	f013 0f04 	tst.w	r3, #4
 8009ac6:	e7d6      	b.n	8009a76 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009ac8:	4914      	ldr	r1, [pc, #80]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009aca:	68e6      	ldr	r6, [r4, #12]
 8009acc:	6988      	ldr	r0, [r1, #24]
 8009ace:	f000 000f 	and.w	r0, r0, #15
 8009ad2:	4286      	cmp	r6, r0
 8009ad4:	f4bf af57 	bcs.w	8009986 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009ad8:	698a      	ldr	r2, [r1, #24]
 8009ada:	f022 020f 	bic.w	r2, r2, #15
 8009ade:	4332      	orrs	r2, r6
 8009ae0:	618a      	str	r2, [r1, #24]
 8009ae2:	e750      	b.n	8009986 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ae4:	680a      	ldr	r2, [r1, #0]
 8009ae6:	f022 020f 	bic.w	r2, r2, #15
 8009aea:	432a      	orrs	r2, r5
 8009aec:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009aee:	680a      	ldr	r2, [r1, #0]
 8009af0:	f002 020f 	and.w	r2, r2, #15
 8009af4:	42aa      	cmp	r2, r5
 8009af6:	f47f aefa 	bne.w	80098ee <HAL_RCC_ClockConfig+0xa>
 8009afa:	e74b      	b.n	8009994 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009afc:	4907      	ldr	r1, [pc, #28]	; (8009b1c <HAL_RCC_ClockConfig+0x238>)
 8009afe:	6925      	ldr	r5, [r4, #16]
 8009b00:	6988      	ldr	r0, [r1, #24]
 8009b02:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009b06:	4285      	cmp	r5, r0
 8009b08:	f4bf af47 	bcs.w	800999a <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b0c:	698a      	ldr	r2, [r1, #24]
 8009b0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009b12:	432a      	orrs	r2, r5
 8009b14:	618a      	str	r2, [r1, #24]
 8009b16:	e740      	b.n	800999a <HAL_RCC_ClockConfig+0xb6>
 8009b18:	52002000 	.word	0x52002000
 8009b1c:	58024400 	.word	0x58024400
 8009b20:	08022ad0 	.word	0x08022ad0
 8009b24:	2400005c 	.word	0x2400005c
 8009b28:	24000058 	.word	0x24000058
 8009b2c:	24000064 	.word	0x24000064

08009b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b30:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b32:	4c0c      	ldr	r4, [pc, #48]	; (8009b64 <HAL_RCC_GetHCLKFreq+0x34>)
 8009b34:	f7ff fe36 	bl	80097a4 <HAL_RCC_GetSysClockFreq>
 8009b38:	490b      	ldr	r1, [pc, #44]	; (8009b68 <HAL_RCC_GetHCLKFreq+0x38>)
 8009b3a:	69a3      	ldr	r3, [r4, #24]
 8009b3c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009b40:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b42:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b44:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b48:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b4c:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b50:	5ccb      	ldrb	r3, [r1, r3]
 8009b52:	f003 031f 	and.w	r3, r3, #31
 8009b56:	fa22 f003 	lsr.w	r0, r2, r3
 8009b5a:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <HAL_RCC_GetHCLKFreq+0x3c>)
 8009b5c:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <HAL_RCC_GetHCLKFreq+0x40>)
 8009b60:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	58024400 	.word	0x58024400
 8009b68:	08022ad0 	.word	0x08022ad0
 8009b6c:	2400005c 	.word	0x2400005c
 8009b70:	24000058 	.word	0x24000058

08009b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b74:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009b76:	f7ff ffdb 	bl	8009b30 <HAL_RCC_GetHCLKFreq>
 8009b7a:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009b7c:	4a05      	ldr	r2, [pc, #20]	; (8009b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009b84:	5cd3      	ldrb	r3, [r2, r3]
 8009b86:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009b8a:	40d8      	lsrs	r0, r3
 8009b8c:	bd08      	pop	{r3, pc}
 8009b8e:	bf00      	nop
 8009b90:	58024400 	.word	0x58024400
 8009b94:	08022ad0 	.word	0x08022ad0

08009b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b9a:	f7ff ffc9 	bl	8009b30 <HAL_RCC_GetHCLKFreq>
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009ba0:	4a05      	ldr	r2, [pc, #20]	; (8009bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009ba2:	69db      	ldr	r3, [r3, #28]
 8009ba4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009ba8:	5cd3      	ldrb	r3, [r2, r3]
 8009baa:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009bae:	40d8      	lsrs	r0, r3
 8009bb0:	bd08      	pop	{r3, pc}
 8009bb2:	bf00      	nop
 8009bb4:	58024400 	.word	0x58024400
 8009bb8:	08022ad0 	.word	0x08022ad0

08009bbc <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009bbc:	233f      	movs	r3, #63	; 0x3f
 8009bbe:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009bc0:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <HAL_RCC_GetClockConfig+0x4c>)
 8009bc2:	691a      	ldr	r2, [r3, #16]
 8009bc4:	f002 0207 	and.w	r2, r2, #7
 8009bc8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009bca:	699a      	ldr	r2, [r3, #24]
 8009bcc:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009bd0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009bd2:	699a      	ldr	r2, [r3, #24]
 8009bd4:	f002 020f 	and.w	r2, r2, #15
 8009bd8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009bda:	699a      	ldr	r2, [r3, #24]
 8009bdc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009be0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009be2:	69da      	ldr	r2, [r3, #28]
 8009be4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009be8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009bea:	69da      	ldr	r2, [r3, #28]
 8009bec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009bf0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009bf2:	6a1b      	ldr	r3, [r3, #32]
 8009bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bf8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009bfa:	4b04      	ldr	r3, [pc, #16]	; (8009c0c <HAL_RCC_GetClockConfig+0x50>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	600b      	str	r3, [r1, #0]
}
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	58024400 	.word	0x58024400
 8009c0c:	52002000 	.word	0x52002000

08009c10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c12:	4c3a      	ldr	r4, [pc, #232]	; (8009cfc <RCCEx_PLL2_Config+0xec>)
{
 8009c14:	4606      	mov	r6, r0
 8009c16:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c1a:	f003 0303 	and.w	r3, r3, #3
 8009c1e:	2b03      	cmp	r3, #3
 8009c20:	d069      	beq.n	8009cf6 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c28:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c2a:	f7fd f9e3 	bl	8006ff4 <HAL_GetTick>
 8009c2e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009c30:	6823      	ldr	r3, [r4, #0]
 8009c32:	011a      	lsls	r2, r3, #4
 8009c34:	d44b      	bmi.n	8009cce <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009c36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009c38:	6832      	ldr	r2, [r6, #0]
 8009c3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c3e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c44:	68b3      	ldr	r3, [r6, #8]
 8009c46:	68f2      	ldr	r2, [r6, #12]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	3a01      	subs	r2, #1
 8009c4c:	025b      	lsls	r3, r3, #9
 8009c4e:	0412      	lsls	r2, r2, #16
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009c56:	4313      	orrs	r3, r2
 8009c58:	6872      	ldr	r2, [r6, #4]
 8009c5a:	3a01      	subs	r2, #1
 8009c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c60:	4313      	orrs	r3, r2
 8009c62:	6932      	ldr	r2, [r6, #16]
 8009c64:	3a01      	subs	r2, #1
 8009c66:	0612      	lsls	r2, r2, #24
 8009c68:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c72:	6972      	ldr	r2, [r6, #20]
 8009c74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009c7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c7e:	69b2      	ldr	r2, [r6, #24]
 8009c80:	f023 0320 	bic.w	r3, r3, #32
 8009c84:	4313      	orrs	r3, r2
 8009c86:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c8a:	f023 0310 	bic.w	r3, r3, #16
 8009c8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009c90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009c92:	69f2      	ldr	r2, [r6, #28]
 8009c94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c98:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009c9c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009ca0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ca4:	f043 0310 	orr.w	r3, r3, #16
 8009ca8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009caa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009cac:	b9b5      	cbnz	r5, 8009cdc <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009cb2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009cb4:	4c11      	ldr	r4, [pc, #68]	; (8009cfc <RCCEx_PLL2_Config+0xec>)
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009cbc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cbe:	f7fd f999 	bl	8006ff4 <HAL_GetTick>
 8009cc2:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	d50f      	bpl.n	8009cea <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009cca:	2000      	movs	r0, #0
 8009ccc:	e005      	b.n	8009cda <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cce:	f7fd f991 	bl	8006ff4 <HAL_GetTick>
 8009cd2:	1bc0      	subs	r0, r0, r7
 8009cd4:	2802      	cmp	r0, #2
 8009cd6:	d9ab      	bls.n	8009c30 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009cd8:	2003      	movs	r0, #3
}
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cdc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009cde:	bf0c      	ite	eq
 8009ce0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009ce4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8009ce8:	e7e3      	b.n	8009cb2 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009cea:	f7fd f983 	bl	8006ff4 <HAL_GetTick>
 8009cee:	1b40      	subs	r0, r0, r5
 8009cf0:	2802      	cmp	r0, #2
 8009cf2:	d9e7      	bls.n	8009cc4 <RCCEx_PLL2_Config+0xb4>
 8009cf4:	e7f0      	b.n	8009cd8 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009cf6:	2001      	movs	r0, #1
 8009cf8:	e7ef      	b.n	8009cda <RCCEx_PLL2_Config+0xca>
 8009cfa:	bf00      	nop
 8009cfc:	58024400 	.word	0x58024400

08009d00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d02:	4c3a      	ldr	r4, [pc, #232]	; (8009dec <RCCEx_PLL3_Config+0xec>)
{
 8009d04:	4606      	mov	r6, r0
 8009d06:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d069      	beq.n	8009de6 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d18:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d1a:	f7fd f96b 	bl	8006ff4 <HAL_GetTick>
 8009d1e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	009a      	lsls	r2, r3, #2
 8009d24:	d44b      	bmi.n	8009dbe <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009d26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d28:	6832      	ldr	r2, [r6, #0]
 8009d2a:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8009d2e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009d32:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d34:	68b3      	ldr	r3, [r6, #8]
 8009d36:	68f2      	ldr	r2, [r6, #12]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	3a01      	subs	r2, #1
 8009d3c:	025b      	lsls	r3, r3, #9
 8009d3e:	0412      	lsls	r2, r2, #16
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009d46:	4313      	orrs	r3, r2
 8009d48:	6872      	ldr	r2, [r6, #4]
 8009d4a:	3a01      	subs	r2, #1
 8009d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d50:	4313      	orrs	r3, r2
 8009d52:	6932      	ldr	r2, [r6, #16]
 8009d54:	3a01      	subs	r2, #1
 8009d56:	0612      	lsls	r2, r2, #24
 8009d58:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d62:	6972      	ldr	r2, [r6, #20]
 8009d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d6e:	69b2      	ldr	r2, [r6, #24]
 8009d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d74:	4313      	orrs	r3, r2
 8009d76:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d7e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d82:	69f2      	ldr	r2, [r6, #28]
 8009d84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009d8c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009d90:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d98:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009d9c:	b9b5      	cbnz	r5, 8009dcc <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009da2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009da4:	4c11      	ldr	r4, [pc, #68]	; (8009dec <RCCEx_PLL3_Config+0xec>)
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dae:	f7fd f921 	bl	8006ff4 <HAL_GetTick>
 8009db2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	d50f      	bpl.n	8009dda <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e005      	b.n	8009dca <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dbe:	f7fd f919 	bl	8006ff4 <HAL_GetTick>
 8009dc2:	1bc0      	subs	r0, r0, r7
 8009dc4:	2802      	cmp	r0, #2
 8009dc6:	d9ab      	bls.n	8009d20 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009dc8:	2003      	movs	r0, #3
}
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dcc:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009dce:	bf0c      	ite	eq
 8009dd0:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009dd4:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009dd8:	e7e3      	b.n	8009da2 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009dda:	f7fd f90b 	bl	8006ff4 <HAL_GetTick>
 8009dde:	1b40      	subs	r0, r0, r5
 8009de0:	2802      	cmp	r0, #2
 8009de2:	d9e7      	bls.n	8009db4 <RCCEx_PLL3_Config+0xb4>
 8009de4:	e7f0      	b.n	8009dc8 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009de6:	2001      	movs	r0, #1
 8009de8:	e7ef      	b.n	8009dca <RCCEx_PLL3_Config+0xca>
 8009dea:	bf00      	nop
 8009dec:	58024400 	.word	0x58024400

08009df0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009df4:	6803      	ldr	r3, [r0, #0]
{
 8009df6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009df8:	011c      	lsls	r4, r3, #4
 8009dfa:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8009dfe:	d509      	bpl.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e00:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e06:	d02e      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009e08:	d813      	bhi.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8009e0a:	b1f3      	cbz	r3, 8009e4a <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8009e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e10:	d021      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8009e12:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	05d8      	lsls	r0, r3, #23
 8009e18:	f140 8104 	bpl.w	800a024 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e1c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	f200 80ff 	bhi.w	800a022 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8009e24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009e28:	002b0024 	.word	0x002b0024
 8009e2c:	002900f7 	.word	0x002900f7
 8009e30:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e36:	d1ec      	bne.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009e38:	4aaa      	ldr	r2, [pc, #680]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e3a:	2600      	movs	r6, #0
 8009e3c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8009e3e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009e44:	430b      	orrs	r3, r1
 8009e46:	6513      	str	r3, [r2, #80]	; 0x50
 8009e48:	e7e4      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e4a:	4aa6      	ldr	r2, [pc, #664]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e4c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e52:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8009e54:	e7f0      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e56:	2102      	movs	r1, #2
 8009e58:	3008      	adds	r0, #8
 8009e5a:	f7ff fed9 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e5e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8009e60:	2800      	cmp	r0, #0
 8009e62:	d1d7      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8009e64:	e7e8      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e66:	2102      	movs	r1, #2
 8009e68:	3028      	adds	r0, #40	; 0x28
 8009e6a:	f7ff ff49 	bl	8009d00 <RCCEx_PLL3_Config>
 8009e6e:	e7f6      	b.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e70:	4a9c      	ldr	r2, [pc, #624]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e78:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 8009e7a:	4634      	mov	r4, r6
 8009e7c:	e005      	b.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f105 0008 	add.w	r0, r5, #8
 8009e84:	f7ff fec4 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e88:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	f040 80cc 	bne.w	800a028 <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e90:	4a94      	ldr	r2, [pc, #592]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e92:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8009e94:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	0599      	lsls	r1, r3, #22
 8009ea2:	d50d      	bpl.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009ea4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009ea6:	2b80      	cmp	r3, #128	; 0x80
 8009ea8:	f000 80dc 	beq.w	800a064 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8009eac:	f200 80be 	bhi.w	800a02c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 80ca 	beq.w	800a04a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009eb6:	2b40      	cmp	r3, #64	; 0x40
 8009eb8:	f000 80cd 	beq.w	800a056 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8009ebc:	2601      	movs	r6, #1
 8009ebe:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	055a      	lsls	r2, r3, #21
 8009ec4:	d510      	bpl.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009ec6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8009eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ece:	f000 80ef 	beq.w	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8009ed2:	f200 80cf 	bhi.w	800a074 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f000 80dd 	beq.w	800a096 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009edc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ee0:	f000 80df 	beq.w	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8009ee4:	2601      	movs	r6, #1
 8009ee6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	051b      	lsls	r3, r3, #20
 8009eec:	d510      	bpl.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 8009eee:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8009ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ef6:	f000 8104 	beq.w	800a102 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8009efa:	f200 80e1 	bhi.w	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80f2 	beq.w	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f08:	f000 80f4 	beq.w	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009f0c:	2601      	movs	r6, #1
 8009f0e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	019f      	lsls	r7, r3, #6
 8009f14:	d50d      	bpl.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 8009f16:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	f000 810c 	beq.w	800a136 <HAL_RCCEx_PeriphCLKConfig+0x346>
 8009f1e:	f200 80f8 	bhi.w	800a112 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	f000 80f8 	beq.w	800a118 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8009f28:	2b10      	cmp	r3, #16
 8009f2a:	f000 80fe 	beq.w	800a12a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8009f2e:	2601      	movs	r6, #1
 8009f30:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f32:	682b      	ldr	r3, [r5, #0]
 8009f34:	04d8      	lsls	r0, r3, #19
 8009f36:	d50f      	bpl.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 8009f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f3e:	f000 8120 	beq.w	800a182 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8009f42:	f200 8101 	bhi.w	800a148 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 810e 	beq.w	800a168 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f50:	f000 8110 	beq.w	800a174 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8009f54:	2601      	movs	r6, #1
 8009f56:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	0499      	lsls	r1, r3, #18
 8009f5c:	d50f      	bpl.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 8009f5e:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8009f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f64:	f000 812e 	beq.w	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8009f68:	f200 8113 	bhi.w	800a192 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 8119 	beq.w	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f76:	f000 811e 	beq.w	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8009f7a:	2601      	movs	r6, #1
 8009f7c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f7e:	682b      	ldr	r3, [r5, #0]
 8009f80:	045a      	lsls	r2, r3, #17
 8009f82:	d510      	bpl.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 8009f84:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8009f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f8c:	f000 813c 	beq.w	800a208 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009f90:	f200 8120 	bhi.w	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 8126 	beq.w	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8009f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f9e:	f000 812c 	beq.w	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009fa2:	2601      	movs	r6, #1
 8009fa4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009fa6:	682b      	ldr	r3, [r5, #0]
 8009fa8:	015b      	lsls	r3, r3, #5
 8009faa:	d515      	bpl.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 8009fac:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fae:	b14b      	cbz	r3, 8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb4:	f040 8130 	bne.w	800a218 <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f105 0008 	add.w	r0, r5, #8
 8009fbe:	f7ff fe27 	bl	8009c10 <RCCEx_PLL2_Config>
 8009fc2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 8009fc4:	2c00      	cmp	r4, #0
 8009fc6:	f040 812a 	bne.w	800a21e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009fca:	4a46      	ldr	r2, [pc, #280]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fcc:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8009fce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd4:	430b      	orrs	r3, r1
 8009fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	041f      	lsls	r7, r3, #16
 8009fdc:	d50d      	bpl.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 8009fde:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fe4:	f000 811d 	beq.w	800a222 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8009fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fec:	f000 8127 	beq.w	800a23e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 811b 	beq.w	800a22c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8009ff6:	2601      	movs	r6, #1
 8009ff8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009ffa:	682b      	ldr	r3, [r5, #0]
 8009ffc:	01d8      	lsls	r0, r3, #7
 8009ffe:	f140 8135 	bpl.w	800a26c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800a002:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800a004:	2b03      	cmp	r3, #3
 800a006:	f200 8176 	bhi.w	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a00a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a00e:	0126      	.short	0x0126
 800a010:	016d0121 	.word	0x016d0121
 800a014:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a016:	2100      	movs	r1, #0
 800a018:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a01c:	f7ff fe70 	bl	8009d00 <RCCEx_PLL3_Config>
 800a020:	e732      	b.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a022:	2601      	movs	r6, #1
 800a024:	4634      	mov	r4, r6
 800a026:	e73a      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xae>
 800a028:	4626      	mov	r6, r4
 800a02a:	e738      	b.n	8009e9e <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a02c:	2bc0      	cmp	r3, #192	; 0xc0
 800a02e:	d003      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x248>
 800a030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a034:	f47f af42 	bne.w	8009ebc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800a038:	b9d4      	cbnz	r4, 800a070 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a03a:	4a2a      	ldr	r2, [pc, #168]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a03c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a03e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a040:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800a044:	430b      	orrs	r3, r1
 800a046:	6513      	str	r3, [r2, #80]	; 0x50
 800a048:	e73a      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04a:	4a26      	ldr	r2, [pc, #152]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a04c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a052:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a054:	e7f0      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a056:	2100      	movs	r1, #0
 800a058:	f105 0008 	add.w	r0, r5, #8
 800a05c:	f7ff fdd8 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a060:	4604      	mov	r4, r0
        break;
 800a062:	e7e9      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a064:	2100      	movs	r1, #0
 800a066:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a06a:	f7ff fe49 	bl	8009d00 <RCCEx_PLL3_Config>
 800a06e:	e7f7      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x270>
 800a070:	4626      	mov	r6, r4
 800a072:	e725      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a074:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a078:	d003      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a07a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07e:	f47f af31 	bne.w	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800a082:	b9dc      	cbnz	r4, 800a0bc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a084:	4a17      	ldr	r2, [pc, #92]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a086:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800a08a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a08c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800a090:	430b      	orrs	r3, r1
 800a092:	6593      	str	r3, [r2, #88]	; 0x58
 800a094:	e728      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a096:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a098:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a09a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a09e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a0a0:	e7ef      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	f105 0008 	add.w	r0, r5, #8
 800a0a8:	f7ff fdb2 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0ac:	4604      	mov	r4, r0
        break;
 800a0ae:	e7e8      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a0b6:	f7ff fe23 	bl	8009d00 <RCCEx_PLL3_Config>
 800a0ba:	e7f7      	b.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a0bc:	4626      	mov	r6, r4
 800a0be:	e713      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a0c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0c4:	d003      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a0c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0ca:	f47f af1f 	bne.w	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800a0ce:	b9f4      	cbnz	r4, 800a10e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a0d0:	4a04      	ldr	r2, [pc, #16]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0d2:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800a0d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a0d8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800a0dc:	430b      	orrs	r3, r1
 800a0de:	6593      	str	r3, [r2, #88]	; 0x58
 800a0e0:	e716      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a0e2:	bf00      	nop
 800a0e4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e8:	4aa1      	ldr	r2, [pc, #644]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a0ea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a0ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a0f2:	e7ec      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	f105 0008 	add.w	r0, r5, #8
 800a0fa:	f7ff fd89 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0fe:	4604      	mov	r4, r0
        break;
 800a100:	e7e5      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a102:	2100      	movs	r1, #0
 800a104:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a108:	f7ff fdfa 	bl	8009d00 <RCCEx_PLL3_Config>
 800a10c:	e7f7      	b.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800a10e:	4626      	mov	r6, r4
 800a110:	e6fe      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800a112:	2b30      	cmp	r3, #48	; 0x30
 800a114:	f47f af0b 	bne.w	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800a118:	b9a4      	cbnz	r4, 800a144 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a11a:	4a95      	ldr	r2, [pc, #596]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a11c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800a11e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a120:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800a124:	430b      	orrs	r3, r1
 800a126:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a128:	e703      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a12a:	4a91      	ldr	r2, [pc, #580]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a12c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a132:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a134:	e7f0      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a136:	2102      	movs	r1, #2
 800a138:	f105 0008 	add.w	r0, r5, #8
 800a13c:	f7ff fd68 	bl	8009c10 <RCCEx_PLL2_Config>
 800a140:	4604      	mov	r4, r0
        break;
 800a142:	e7e9      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800a144:	4626      	mov	r6, r4
 800a146:	e6f4      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a148:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a14c:	d003      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a152:	f47f aeff 	bne.w	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800a156:	b9d4      	cbnz	r4, 800a18e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a158:	4a85      	ldr	r2, [pc, #532]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a15a:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800a15c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a15e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a162:	430b      	orrs	r3, r1
 800a164:	6513      	str	r3, [r2, #80]	; 0x50
 800a166:	e6f7      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a168:	4a81      	ldr	r2, [pc, #516]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a16a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a16c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a170:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800a172:	e7f0      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a174:	2100      	movs	r1, #0
 800a176:	f105 0008 	add.w	r0, r5, #8
 800a17a:	f7ff fd49 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a17e:	4604      	mov	r4, r0
        break;
 800a180:	e7e9      	b.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a182:	2100      	movs	r1, #0
 800a184:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a188:	f7ff fdba 	bl	8009d00 <RCCEx_PLL3_Config>
 800a18c:	e7f7      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800a18e:	4626      	mov	r6, r4
 800a190:	e6e2      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a196:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800a19a:	d003      	beq.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800a19c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a1a0:	f47f aeeb 	bne.w	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800a1a4:	b9a4      	cbnz	r4, 800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1a6:	4a72      	ldr	r2, [pc, #456]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a1a8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800a1aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a1ac:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6513      	str	r3, [r2, #80]	; 0x50
 800a1b4:	e6e3      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	f105 0008 	add.w	r0, r5, #8
 800a1bc:	f7ff fd28 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c0:	4604      	mov	r4, r0
        break;
 800a1c2:	e7ef      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a1ca:	f7ff fd99 	bl	8009d00 <RCCEx_PLL3_Config>
 800a1ce:	e7f7      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800a1d0:	4626      	mov	r6, r4
 800a1d2:	e6d4      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a1d4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a1d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a1dc:	d003      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800a1de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1e2:	f47f aede 	bne.w	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800a1e6:	b9ac      	cbnz	r4, 800a214 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a1e8:	4a61      	ldr	r2, [pc, #388]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a1ea:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800a1ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a1f0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a1f4:	430b      	orrs	r3, r1
 800a1f6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1f8:	e6d5      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	f105 0008 	add.w	r0, r5, #8
 800a200:	f7ff fd06 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a204:	4604      	mov	r4, r0
        break;
 800a206:	e7ee      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a208:	2101      	movs	r1, #1
 800a20a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a20e:	f7ff fd77 	bl	8009d00 <RCCEx_PLL3_Config>
 800a212:	e7f7      	b.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a214:	4626      	mov	r6, r4
 800a216:	e6c6      	b.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800a218:	2601      	movs	r6, #1
 800a21a:	4634      	mov	r4, r6
 800a21c:	e6dc      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a21e:	4626      	mov	r6, r4
 800a220:	e6da      	b.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a222:	4a53      	ldr	r2, [pc, #332]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a224:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a22c:	b974      	cbnz	r4, 800a24c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a22e:	4a50      	ldr	r2, [pc, #320]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a230:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800a232:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a234:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800a238:	430b      	orrs	r3, r1
 800a23a:	6513      	str	r3, [r2, #80]	; 0x50
 800a23c:	e6dd      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a23e:	2101      	movs	r1, #1
 800a240:	f105 0008 	add.w	r0, r5, #8
 800a244:	f7ff fce4 	bl	8009c10 <RCCEx_PLL2_Config>
 800a248:	4604      	mov	r4, r0
        break;
 800a24a:	e7ef      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800a24c:	4626      	mov	r6, r4
 800a24e:	e6d4      	b.n	8009ffa <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a250:	4a47      	ldr	r2, [pc, #284]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a252:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a258:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a25a:	2c00      	cmp	r4, #0
 800a25c:	d14e      	bne.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a25e:	4a44      	ldr	r2, [pc, #272]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a260:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800a262:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a264:	f023 0303 	bic.w	r3, r3, #3
 800a268:	430b      	orrs	r3, r1
 800a26a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	0259      	lsls	r1, r3, #9
 800a270:	d54e      	bpl.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a272:	4f40      	ldr	r7, [pc, #256]	; (800a374 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a27a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a27c:	f7fc feba 	bl	8006ff4 <HAL_GetTick>
 800a280:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	05da      	lsls	r2, r3, #23
 800a286:	d53b      	bpl.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800a288:	2c00      	cmp	r4, #0
 800a28a:	d16f      	bne.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a28c:	4b38      	ldr	r3, [pc, #224]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a28e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800a292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a294:	4042      	eors	r2, r0
 800a296:	f412 7f40 	tst.w	r2, #768	; 0x300
 800a29a:	d00b      	beq.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a29c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a29e:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2a0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2a4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800a2a8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2aa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2ac:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800a2b0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800a2b2:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a2b4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a2b8:	d043      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2ba:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800a2be:	492c      	ldr	r1, [pc, #176]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a2c0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800a2c4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800a2c8:	d14c      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800a2ca:	6908      	ldr	r0, [r1, #16]
 800a2cc:	4a2a      	ldr	r2, [pc, #168]	; (800a378 <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800a2ce:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800a2d2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a2d6:	4302      	orrs	r2, r0
 800a2d8:	610a      	str	r2, [r1, #16]
 800a2da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2de:	4a24      	ldr	r2, [pc, #144]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800a2e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800a2e2:	430b      	orrs	r3, r1
 800a2e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2e6:	e013      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2e8:	2102      	movs	r1, #2
 800a2ea:	f105 0008 	add.w	r0, r5, #8
 800a2ee:	f7ff fc8f 	bl	8009c10 <RCCEx_PLL2_Config>
 800a2f2:	4604      	mov	r4, r0
        break;
 800a2f4:	e7b1      	b.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800a2f6:	2601      	movs	r6, #1
 800a2f8:	4634      	mov	r4, r6
 800a2fa:	e7b7      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800a2fc:	4626      	mov	r6, r4
 800a2fe:	e7b5      	b.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a300:	f7fc fe78 	bl	8006ff4 <HAL_GetTick>
 800a304:	eba0 0008 	sub.w	r0, r0, r8
 800a308:	2864      	cmp	r0, #100	; 0x64
 800a30a:	d9ba      	bls.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800a30c:	2603      	movs	r6, #3
 800a30e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	07d8      	lsls	r0, r3, #31
 800a314:	d50a      	bpl.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a316:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800a31a:	2b10      	cmp	r3, #16
 800a31c:	d045      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800a31e:	d82d      	bhi.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800a320:	2b00      	cmp	r3, #0
 800a322:	d031      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a324:	2b08      	cmp	r3, #8
 800a326:	d039      	beq.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800a328:	2601      	movs	r6, #1
 800a32a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	0799      	lsls	r1, r3, #30
 800a330:	d551      	bpl.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a332:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800a334:	2b05      	cmp	r3, #5
 800a336:	d864      	bhi.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800a338:	e8df f003 	tbb	[pc, r3]
 800a33c:	455d3f45 	.word	0x455d3f45
 800a340:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800a342:	f7fc fe57 	bl	8006ff4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a346:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800a370 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800a34a:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a34c:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a350:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800a354:	079b      	lsls	r3, r3, #30
 800a356:	d4b0      	bmi.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a358:	f7fc fe4c 	bl	8006ff4 <HAL_GetTick>
 800a35c:	1bc0      	subs	r0, r0, r7
 800a35e:	4548      	cmp	r0, r9
 800a360:	d9f6      	bls.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800a362:	e7d3      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a364:	690a      	ldr	r2, [r1, #16]
 800a366:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800a36a:	e7b5      	b.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800a36c:	4626      	mov	r6, r4
 800a36e:	e7cf      	b.n	800a310 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a370:	58024400 	.word	0x58024400
 800a374:	58024800 	.word	0x58024800
 800a378:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800a37c:	f023 0208 	bic.w	r2, r3, #8
 800a380:	2a20      	cmp	r2, #32
 800a382:	d001      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a384:	2b18      	cmp	r3, #24
 800a386:	d1cf      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800a388:	b9ac      	cbnz	r4, 800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a38a:	4a20      	ldr	r2, [pc, #128]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800a38c:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800a390:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a392:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a396:	430b      	orrs	r3, r1
 800a398:	6553      	str	r3, [r2, #84]	; 0x54
 800a39a:	e7c7      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a39c:	2101      	movs	r1, #1
 800a39e:	f105 0008 	add.w	r0, r5, #8
 800a3a2:	f7ff fc35 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3a6:	4604      	mov	r4, r0
        break;
 800a3a8:	e7ee      	b.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a3b0:	f7ff fca6 	bl	8009d00 <RCCEx_PLL3_Config>
 800a3b4:	e7f7      	b.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800a3b6:	4626      	mov	r6, r4
 800a3b8:	e7b8      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	f105 0008 	add.w	r0, r5, #8
 800a3c0:	f7ff fc26 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c4:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a3c6:	b9fc      	cbnz	r4, 800a408 <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a3c8:	4a10      	ldr	r2, [pc, #64]	; (800a40c <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800a3ca:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800a3cc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a3ce:	f023 0307 	bic.w	r3, r3, #7
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	075a      	lsls	r2, r3, #29
 800a3da:	d52a      	bpl.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a3dc:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a3e0:	2b05      	cmp	r3, #5
 800a3e2:	f200 817b 	bhi.w	800a6dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800a3e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a3ea:	0019      	.short	0x0019
 800a3ec:	01730013 	.word	0x01730013
 800a3f0:	00190019 	.word	0x00190019
 800a3f4:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a3fc:	f7ff fc80 	bl	8009d00 <RCCEx_PLL3_Config>
 800a400:	e7e0      	b.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a402:	2601      	movs	r6, #1
 800a404:	4634      	mov	r4, r6
 800a406:	e7e6      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800a408:	4626      	mov	r6, r4
 800a40a:	e7e4      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800a40c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a410:	2101      	movs	r1, #1
 800a412:	f105 0008 	add.w	r0, r5, #8
 800a416:	f7ff fbfb 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a41a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a41c:	2c00      	cmp	r4, #0
 800a41e:	f040 8160 	bne.w	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a422:	4aaa      	ldr	r2, [pc, #680]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a424:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800a428:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a42a:	f023 0307 	bic.w	r3, r3, #7
 800a42e:	430b      	orrs	r3, r1
 800a430:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	069b      	lsls	r3, r3, #26
 800a436:	d510      	bpl.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a438:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800a43c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a440:	f000 816b 	beq.w	800a71a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800a444:	f200 814f 	bhi.w	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 8155 	beq.w	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a44e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a452:	f000 815b 	beq.w	800a70c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a456:	2601      	movs	r6, #1
 800a458:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	065f      	lsls	r7, r3, #25
 800a45e:	d510      	bpl.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a460:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800a464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a468:	f000 8179 	beq.w	800a75e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a46c:	f200 815d 	bhi.w	800a72a <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 8163 	beq.w	800a73c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a47a:	f000 8169 	beq.w	800a750 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a47e:	2601      	movs	r6, #1
 800a480:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	0618      	lsls	r0, r3, #24
 800a486:	d510      	bpl.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a488:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800a48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a490:	f000 8187 	beq.w	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800a494:	f200 816b 	bhi.w	800a76e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 8171 	beq.w	800a780 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4a2:	f000 8177 	beq.w	800a794 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800a4a6:	2601      	movs	r6, #1
 800a4a8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	0719      	lsls	r1, r3, #28
 800a4ae:	d514      	bpl.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a4b0:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800a4b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b8:	d107      	bne.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4ba:	2102      	movs	r1, #2
 800a4bc:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a4c0:	f7ff fc1e 	bl	8009d00 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	bf18      	it	ne
 800a4c8:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4ca:	4a80      	ldr	r2, [pc, #512]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a4cc:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800a4d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a4d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a4d6:	430b      	orrs	r3, r1
 800a4d8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	06da      	lsls	r2, r3, #27
 800a4de:	d514      	bpl.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a4e0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a4e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e8:	d107      	bne.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4ea:	2102      	movs	r1, #2
 800a4ec:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a4f0:	f7ff fc06 	bl	8009d00 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	bf18      	it	ne
 800a4f8:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4fa:	4a74      	ldr	r2, [pc, #464]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a4fc:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800a500:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a506:	430b      	orrs	r3, r1
 800a508:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a50a:	682b      	ldr	r3, [r5, #0]
 800a50c:	031b      	lsls	r3, r3, #12
 800a50e:	d51b      	bpl.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800a510:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800a514:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a518:	f000 814b 	beq.w	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a51c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a520:	d007      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0x742>
 800a522:	2900      	cmp	r1, #0
 800a524:	f040 814b 	bne.w	800a7be <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a528:	f105 0008 	add.w	r0, r5, #8
 800a52c:	f7ff fb70 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a530:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a532:	2c00      	cmp	r4, #0
 800a534:	f040 8146 	bne.w	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a538:	4a64      	ldr	r2, [pc, #400]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a53a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800a53e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a540:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a544:	430b      	orrs	r3, r1
 800a546:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	035f      	lsls	r7, r3, #13
 800a54c:	d51c      	bpl.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800a54e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800a552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a556:	f000 8137 	beq.w	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800a55a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a55e:	d008      	beq.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x782>
 800a560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a564:	f040 8137 	bne.w	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a568:	4a58      	ldr	r2, [pc, #352]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a56a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a56c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a570:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a572:	2c00      	cmp	r4, #0
 800a574:	f040 8132 	bne.w	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a578:	4a54      	ldr	r2, [pc, #336]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a57a:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800a57e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a580:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a584:	430b      	orrs	r3, r1
 800a586:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	03d8      	lsls	r0, r3, #15
 800a58c:	d509      	bpl.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a58e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8125 	beq.w	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800a596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a59a:	f000 812f 	beq.w	800a7fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800a59e:	2601      	movs	r6, #1
 800a5a0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5a2:	682b      	ldr	r3, [r5, #0]
 800a5a4:	0099      	lsls	r1, r3, #2
 800a5a6:	d507      	bpl.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5a8:	2102      	movs	r1, #2
 800a5aa:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a5ae:	f7ff fba7 	bl	8009d00 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a5b8:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a5bc:	039a      	lsls	r2, r3, #14
 800a5be:	d50b      	bpl.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800a5c0:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800a5c4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a5c8:	f000 812f 	beq.w	800a82a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800a5cc:	f200 811f 	bhi.w	800a80e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f000 8122 	beq.w	800a81a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800a5d6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5d8:	02df      	lsls	r7, r3, #11
 800a5da:	d506      	bpl.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5dc:	483b      	ldr	r0, [pc, #236]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a5de:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800a5e0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a5e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a5e6:	4322      	orrs	r2, r4
 800a5e8:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a5ea:	00dc      	lsls	r4, r3, #3
 800a5ec:	d507      	bpl.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a5ee:	4837      	ldr	r0, [pc, #220]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a5f0:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800a5f4:	6902      	ldr	r2, [r0, #16]
 800a5f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a5fa:	4322      	orrs	r2, r4
 800a5fc:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5fe:	0298      	lsls	r0, r3, #10
 800a600:	d506      	bpl.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a602:	4832      	ldr	r0, [pc, #200]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a604:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800a606:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800a608:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a60c:	4322      	orrs	r2, r4
 800a60e:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a610:	005a      	lsls	r2, r3, #1
 800a612:	d509      	bpl.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a614:	4a2d      	ldr	r2, [pc, #180]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a616:	6910      	ldr	r0, [r2, #16]
 800a618:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800a61c:	6110      	str	r0, [r2, #16]
 800a61e:	6910      	ldr	r0, [r2, #16]
 800a620:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800a624:	4320      	orrs	r0, r4
 800a626:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a628:	2b00      	cmp	r3, #0
 800a62a:	da06      	bge.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a62c:	4827      	ldr	r0, [pc, #156]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a62e:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800a630:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a632:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a636:	4322      	orrs	r2, r4
 800a638:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a63a:	021b      	lsls	r3, r3, #8
 800a63c:	d507      	bpl.n	800a64e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a63e:	4a23      	ldr	r2, [pc, #140]	; (800a6cc <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800a640:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800a644:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a646:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a64a:	4303      	orrs	r3, r0
 800a64c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a64e:	07cf      	lsls	r7, r1, #31
 800a650:	d507      	bpl.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a652:	2100      	movs	r1, #0
 800a654:	f105 0008 	add.w	r0, r5, #8
 800a658:	f7ff fada 	bl	8009c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a65c:	2800      	cmp	r0, #0
 800a65e:	bf18      	it	ne
 800a660:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a662:	686b      	ldr	r3, [r5, #4]
 800a664:	079c      	lsls	r4, r3, #30
 800a666:	d507      	bpl.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a668:	2101      	movs	r1, #1
 800a66a:	f105 0008 	add.w	r0, r5, #8
 800a66e:	f7ff facf 	bl	8009c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a672:	2800      	cmp	r0, #0
 800a674:	bf18      	it	ne
 800a676:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a678:	686b      	ldr	r3, [r5, #4]
 800a67a:	0758      	lsls	r0, r3, #29
 800a67c:	d507      	bpl.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a67e:	2102      	movs	r1, #2
 800a680:	f105 0008 	add.w	r0, r5, #8
 800a684:	f7ff fac4 	bl	8009c10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a688:	2800      	cmp	r0, #0
 800a68a:	bf18      	it	ne
 800a68c:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a68e:	686b      	ldr	r3, [r5, #4]
 800a690:	0719      	lsls	r1, r3, #28
 800a692:	d507      	bpl.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a694:	2100      	movs	r1, #0
 800a696:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a69a:	f7ff fb31 	bl	8009d00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a69e:	2800      	cmp	r0, #0
 800a6a0:	bf18      	it	ne
 800a6a2:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a6a4:	686b      	ldr	r3, [r5, #4]
 800a6a6:	06da      	lsls	r2, r3, #27
 800a6a8:	d507      	bpl.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a6b0:	f7ff fb26 	bl	8009d00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	bf18      	it	ne
 800a6b8:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a6ba:	686b      	ldr	r3, [r5, #4]
 800a6bc:	069b      	lsls	r3, r3, #26
 800a6be:	f100 80bc 	bmi.w	800a83a <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800a6c2:	1e30      	subs	r0, r6, #0
 800a6c4:	bf18      	it	ne
 800a6c6:	2001      	movne	r0, #1
}
 800a6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6d0:	2101      	movs	r1, #1
 800a6d2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a6d6:	f7ff fb13 	bl	8009d00 <RCCEx_PLL3_Config>
 800a6da:	e69e      	b.n	800a41a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a6dc:	2601      	movs	r6, #1
 800a6de:	4634      	mov	r4, r6
 800a6e0:	e6a7      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a6e2:	4626      	mov	r6, r4
 800a6e4:	e6a5      	b.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a6e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a6ea:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a6ee:	d003      	beq.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a6f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6f4:	f47f aeaf 	bne.w	800a456 <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800a6f8:	b9ac      	cbnz	r4, 800a726 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6fa:	4a55      	ldr	r2, [pc, #340]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a6fc:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800a700:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a702:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a706:	430b      	orrs	r3, r1
 800a708:	6553      	str	r3, [r2, #84]	; 0x54
 800a70a:	e6a6      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a70c:	2100      	movs	r1, #0
 800a70e:	f105 0008 	add.w	r0, r5, #8
 800a712:	f7ff fa7d 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a716:	4604      	mov	r4, r0
        break;
 800a718:	e7ee      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a71a:	2102      	movs	r1, #2
 800a71c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a720:	f7ff faee 	bl	8009d00 <RCCEx_PLL3_Config>
 800a724:	e7f7      	b.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800a726:	4626      	mov	r6, r4
 800a728:	e697      	b.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a72a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a72e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a732:	d003      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a738:	f47f aea1 	bne.w	800a47e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800a73c:	b9ac      	cbnz	r4, 800a76a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a73e:	4a44      	ldr	r2, [pc, #272]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a740:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800a744:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a746:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a74a:	430b      	orrs	r3, r1
 800a74c:	6593      	str	r3, [r2, #88]	; 0x58
 800a74e:	e698      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a750:	2100      	movs	r1, #0
 800a752:	f105 0008 	add.w	r0, r5, #8
 800a756:	f7ff fa5b 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a75a:	4604      	mov	r4, r0
        break;
 800a75c:	e7ee      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a75e:	2102      	movs	r1, #2
 800a760:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a764:	f7ff facc 	bl	8009d00 <RCCEx_PLL3_Config>
 800a768:	e7f7      	b.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a76a:	4626      	mov	r6, r4
 800a76c:	e689      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a76e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a772:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a776:	d003      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800a778:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a77c:	f47f ae93 	bne.w	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800a780:	b9ac      	cbnz	r4, 800a7ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a782:	4a33      	ldr	r2, [pc, #204]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a784:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800a788:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a78a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a78e:	430b      	orrs	r3, r1
 800a790:	6593      	str	r3, [r2, #88]	; 0x58
 800a792:	e68a      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a794:	2100      	movs	r1, #0
 800a796:	f105 0008 	add.w	r0, r5, #8
 800a79a:	f7ff fa39 	bl	8009c10 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a79e:	4604      	mov	r4, r0
        break;
 800a7a0:	e7ee      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a2:	2102      	movs	r1, #2
 800a7a4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a7a8:	f7ff faaa 	bl	8009d00 <RCCEx_PLL3_Config>
 800a7ac:	e7f7      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800a7ae:	4626      	mov	r6, r4
 800a7b0:	e67b      	b.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7b2:	2102      	movs	r1, #2
 800a7b4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a7b8:	f7ff faa2 	bl	8009d00 <RCCEx_PLL3_Config>
 800a7bc:	e6b8      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800a7be:	2601      	movs	r6, #1
 800a7c0:	4634      	mov	r4, r6
 800a7c2:	e6c1      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x758>
 800a7c4:	4626      	mov	r6, r4
 800a7c6:	e6bf      	b.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a7ce:	f7ff fa97 	bl	8009d00 <RCCEx_PLL3_Config>
 800a7d2:	4604      	mov	r4, r0
        break;
 800a7d4:	e6cd      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800a7d6:	2601      	movs	r6, #1
 800a7d8:	4634      	mov	r4, r6
 800a7da:	e6d5      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x798>
 800a7dc:	4626      	mov	r6, r4
 800a7de:	e6d3      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7e0:	4a1b      	ldr	r2, [pc, #108]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a7e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a7e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800a7ea:	b974      	cbnz	r4, 800a80a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7ec:	4a18      	ldr	r2, [pc, #96]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a7ee:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800a7f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a7f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7f6:	430b      	orrs	r3, r1
 800a7f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a7fa:	e6d2      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7fc:	2102      	movs	r1, #2
 800a7fe:	f105 0008 	add.w	r0, r5, #8
 800a802:	f7ff fa05 	bl	8009c10 <RCCEx_PLL2_Config>
 800a806:	4604      	mov	r4, r0
        break;
 800a808:	e7ef      	b.n	800a7ea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800a80a:	4626      	mov	r6, r4
 800a80c:	e6c9      	b.n	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800a80e:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800a812:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a816:	f47f aede 	bne.w	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800a81a:	b964      	cbnz	r4, 800a836 <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a81c:	4c0c      	ldr	r4, [pc, #48]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a81e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a820:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a824:	4302      	orrs	r2, r0
 800a826:	6562      	str	r2, [r4, #84]	; 0x54
 800a828:	e6d6      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a82a:	4f09      	ldr	r7, [pc, #36]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800a82c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a82e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a832:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800a834:	e7f1      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800a836:	4626      	mov	r6, r4
 800a838:	e6ce      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a83a:	2102      	movs	r1, #2
 800a83c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800a840:	f7ff fa5e 	bl	8009d00 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a844:	2800      	cmp	r0, #0
 800a846:	f43f af3c 	beq.w	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800a84a:	2001      	movs	r0, #1
 800a84c:	e73c      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a84e:	bf00      	nop
 800a850:	58024400 	.word	0x58024400

0800a854 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a858:	4604      	mov	r4, r0
 800a85a:	b1f0      	cbz	r0, 800a89a <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a85c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a860:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a864:	b91b      	cbnz	r3, 800a86e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a866:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a86a:	f7f6 fd73 	bl	8001354 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a86e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a870:	1d21      	adds	r1, r4, #4
 800a872:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a874:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a878:	f000 fa1f 	bl	800acba <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a87c:	6862      	ldr	r2, [r4, #4]
 800a87e:	4629      	mov	r1, r5
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	f000 fa55 	bl	800ad30 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a886:	4a06      	ldr	r2, [pc, #24]	; (800a8a0 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800a888:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a890:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a892:	2301      	movs	r3, #1
 800a894:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a898:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a89a:	2001      	movs	r0, #1
 800a89c:	e7fc      	b.n	800a898 <HAL_SDRAM_Init+0x44>
 800a89e:	bf00      	nop
 800a8a0:	52004000 	.word	0x52004000

0800a8a4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800a8a8:	f7f6 fde2 	bl	8001470 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800a8ac:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a8b0:	f000 fa74 	bl	800ad9c <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800a8b4:	2000      	movs	r0, #0
 800a8b6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800a8ba:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800a8be:	bd10      	pop	{r4, pc}

0800a8c0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a8c0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a8c2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a8ca:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a8cc:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a8ce:	d010      	beq.n	800a8f2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a8d0:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a8d4:	2c01      	cmp	r4, #1
 800a8d6:	d110      	bne.n	800a8fa <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8d8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a8da:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8dc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a8e0:	f000 fa6b 	bl	800adba <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8e4:	6833      	ldr	r3, [r6, #0]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d104      	bne.n	800a8f4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a8ea:	2305      	movs	r3, #5
 800a8ec:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a8f0:	2000      	movs	r0, #0
}
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a8f4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800a8f8:	e7fa      	b.n	800a8f0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7f9      	b.n	800a8f2 <HAL_SDRAM_SendCommand+0x32>

0800a8fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a8fe:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a900:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a904:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a906:	2b02      	cmp	r3, #2
 800a908:	b2d8      	uxtb	r0, r3
 800a90a:	d00d      	beq.n	800a928 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a90c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a910:	2b01      	cmp	r3, #1
 800a912:	b2dd      	uxtb	r5, r3
 800a914:	d109      	bne.n	800a92a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a916:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a918:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a91a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a91e:	f000 fa5e 	bl	800adde <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a922:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a924:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a928:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a92a:	2001      	movs	r0, #1
 800a92c:	e7fc      	b.n	800a928 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800a92e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a92e:	4770      	bx	lr

0800a930 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a930:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a934:	2b01      	cmp	r3, #1
 800a936:	d12f      	bne.n	800a998 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a938:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a93a:	4a18      	ldr	r2, [pc, #96]	; (800a99c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a93c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a940:	6803      	ldr	r3, [r0, #0]
 800a942:	4293      	cmp	r3, r2
 800a944:	d01a      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94a:	d017      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a94c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a950:	4293      	cmp	r3, r2
 800a952:	d013      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a954:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a958:	4293      	cmp	r3, r2
 800a95a:	d00f      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a95c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a960:	4293      	cmp	r3, r2
 800a962:	d00b      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a964:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a968:	4293      	cmp	r3, r2
 800a96a:	d007      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a96c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a970:	4293      	cmp	r3, r2
 800a972:	d003      	beq.n	800a97c <HAL_TIM_Base_Start+0x4c>
 800a974:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a978:	4293      	cmp	r3, r2
 800a97a:	d107      	bne.n	800a98c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a97c:	6899      	ldr	r1, [r3, #8]
 800a97e:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <HAL_TIM_Base_Start+0x70>)
 800a980:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a982:	2a06      	cmp	r2, #6
 800a984:	d006      	beq.n	800a994 <HAL_TIM_Base_Start+0x64>
 800a986:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a98a:	d003      	beq.n	800a994 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	f042 0201 	orr.w	r2, r2, #1
 800a992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a994:	2000      	movs	r0, #0
}
 800a996:	4770      	bx	lr
    return HAL_ERROR;
 800a998:	2001      	movs	r0, #1
 800a99a:	4770      	bx	lr
 800a99c:	40010000 	.word	0x40010000
 800a9a0:	00010007 	.word	0x00010007

0800a9a4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d133      	bne.n	800aa14 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9ac:	2302      	movs	r3, #2
 800a9ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b2:	6803      	ldr	r3, [r0, #0]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	f042 0201 	orr.w	r2, r2, #1
 800a9ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9bc:	4a16      	ldr	r2, [pc, #88]	; (800aa18 <HAL_TIM_Base_Start_IT+0x74>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d01a      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9c6:	d017      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9c8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d013      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d00f      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d00b      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9e0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d007      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9e8:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d003      	beq.n	800a9f8 <HAL_TIM_Base_Start_IT+0x54>
 800a9f0:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d107      	bne.n	800aa08 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f8:	6899      	ldr	r1, [r3, #8]
 800a9fa:	4a08      	ldr	r2, [pc, #32]	; (800aa1c <HAL_TIM_Base_Start_IT+0x78>)
 800a9fc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9fe:	2a06      	cmp	r2, #6
 800aa00:	d006      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x6c>
 800aa02:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800aa06:	d003      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	f042 0201 	orr.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa10:	2000      	movs	r0, #0
}
 800aa12:	4770      	bx	lr
    return HAL_ERROR;
 800aa14:	2001      	movs	r0, #1
 800aa16:	4770      	bx	lr
 800aa18:	40010000 	.word	0x40010000
 800aa1c:	00010007 	.word	0x00010007

0800aa20 <HAL_TIM_OC_DelayElapsedCallback>:
 800aa20:	4770      	bx	lr

0800aa22 <HAL_TIM_IC_CaptureCallback>:
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIM_PWM_PulseFinishedCallback>:
 800aa24:	4770      	bx	lr

0800aa26 <HAL_TIM_TriggerCallback>:
 800aa26:	4770      	bx	lr

0800aa28 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa28:	6803      	ldr	r3, [r0, #0]
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	0791      	lsls	r1, r2, #30
{
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa32:	d50f      	bpl.n	800aa54 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	0792      	lsls	r2, r2, #30
 800aa38:	d50c      	bpl.n	800aa54 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa3a:	f06f 0202 	mvn.w	r2, #2
 800aa3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa40:	2201      	movs	r2, #1
 800aa42:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa44:	699b      	ldr	r3, [r3, #24]
 800aa46:	0799      	lsls	r1, r3, #30
 800aa48:	f000 8085 	beq.w	800ab56 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa4c:	f7ff ffe9 	bl	800aa22 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa50:	2300      	movs	r3, #0
 800aa52:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	691a      	ldr	r2, [r3, #16]
 800aa58:	0752      	lsls	r2, r2, #29
 800aa5a:	d510      	bpl.n	800aa7e <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	0750      	lsls	r0, r2, #29
 800aa60:	d50d      	bpl.n	800aa7e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa62:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aa68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	f413 7f40 	tst.w	r3, #768	; 0x300
 800aa74:	d075      	beq.n	800ab62 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800aa76:	f7ff ffd4 	bl	800aa22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	691a      	ldr	r2, [r3, #16]
 800aa82:	0711      	lsls	r1, r2, #28
 800aa84:	d50f      	bpl.n	800aaa6 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	0712      	lsls	r2, r2, #28
 800aa8a:	d50c      	bpl.n	800aaa6 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa8c:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa94:	2204      	movs	r2, #4
 800aa96:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	079b      	lsls	r3, r3, #30
 800aa9c:	d067      	beq.n	800ab6e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800aa9e:	f7ff ffc0 	bl	800aa22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	691a      	ldr	r2, [r3, #16]
 800aaaa:	06d0      	lsls	r0, r2, #27
 800aaac:	d510      	bpl.n	800aad0 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	06d1      	lsls	r1, r2, #27
 800aab2:	d50d      	bpl.n	800aad0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aab4:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aaba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aabc:	2208      	movs	r2, #8
 800aabe:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f413 7f40 	tst.w	r3, #768	; 0x300
 800aac6:	d058      	beq.n	800ab7a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800aac8:	f7ff ffab 	bl	800aa22 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aacc:	2300      	movs	r3, #0
 800aace:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	691a      	ldr	r2, [r3, #16]
 800aad4:	07d2      	lsls	r2, r2, #31
 800aad6:	d508      	bpl.n	800aaea <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	07d0      	lsls	r0, r2, #31
 800aadc:	d505      	bpl.n	800aaea <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aade:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aae2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aae4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800aae6:	f7f6 fa83 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	691a      	ldr	r2, [r3, #16]
 800aaee:	0611      	lsls	r1, r2, #24
 800aaf0:	d508      	bpl.n	800ab04 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aaf2:	68da      	ldr	r2, [r3, #12]
 800aaf4:	0612      	lsls	r2, r2, #24
 800aaf6:	d505      	bpl.n	800ab04 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aaf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aafc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aafe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ab00:	f000 f8d9 	bl	800acb6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	05d0      	lsls	r0, r2, #23
 800ab0a:	d508      	bpl.n	800ab1e <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	0611      	lsls	r1, r2, #24
 800ab10:	d505      	bpl.n	800ab1e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab12:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ab16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ab1a:	f000 f8cd 	bl	800acb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	691a      	ldr	r2, [r3, #16]
 800ab22:	0652      	lsls	r2, r2, #25
 800ab24:	d508      	bpl.n	800ab38 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab26:	68da      	ldr	r2, [r3, #12]
 800ab28:	0650      	lsls	r0, r2, #25
 800ab2a:	d505      	bpl.n	800ab38 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ab34:	f7ff ff77 	bl	800aa26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	691a      	ldr	r2, [r3, #16]
 800ab3c:	0691      	lsls	r1, r2, #26
 800ab3e:	d522      	bpl.n	800ab86 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	0692      	lsls	r2, r2, #26
 800ab44:	d51f      	bpl.n	800ab86 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab46:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab4c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ab52:	f000 b8af 	b.w	800acb4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab56:	f7ff ff63 	bl	800aa20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f7ff ff62 	bl	800aa24 <HAL_TIM_PWM_PulseFinishedCallback>
 800ab60:	e776      	b.n	800aa50 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab62:	f7ff ff5d 	bl	800aa20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff ff5c 	bl	800aa24 <HAL_TIM_PWM_PulseFinishedCallback>
 800ab6c:	e785      	b.n	800aa7a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab6e:	f7ff ff57 	bl	800aa20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7ff ff56 	bl	800aa24 <HAL_TIM_PWM_PulseFinishedCallback>
 800ab78:	e793      	b.n	800aaa2 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab7a:	f7ff ff51 	bl	800aa20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f7ff ff50 	bl	800aa24 <HAL_TIM_PWM_PulseFinishedCallback>
 800ab84:	e7a2      	b.n	800aacc <HAL_TIM_IRQHandler+0xa4>
}
 800ab86:	bd10      	pop	{r4, pc}

0800ab88 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab88:	4a30      	ldr	r2, [pc, #192]	; (800ac4c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800ab8a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab8c:	4290      	cmp	r0, r2
 800ab8e:	d012      	beq.n	800abb6 <TIM_Base_SetConfig+0x2e>
 800ab90:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ab94:	d00f      	beq.n	800abb6 <TIM_Base_SetConfig+0x2e>
 800ab96:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ab9a:	4290      	cmp	r0, r2
 800ab9c:	d00b      	beq.n	800abb6 <TIM_Base_SetConfig+0x2e>
 800ab9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800aba2:	4290      	cmp	r0, r2
 800aba4:	d007      	beq.n	800abb6 <TIM_Base_SetConfig+0x2e>
 800aba6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abaa:	4290      	cmp	r0, r2
 800abac:	d003      	beq.n	800abb6 <TIM_Base_SetConfig+0x2e>
 800abae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800abb2:	4290      	cmp	r0, r2
 800abb4:	d119      	bne.n	800abea <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800abb6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800abb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800abbc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abbe:	4a23      	ldr	r2, [pc, #140]	; (800ac4c <TIM_Base_SetConfig+0xc4>)
 800abc0:	4290      	cmp	r0, r2
 800abc2:	d01d      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800abc8:	d01a      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800abce:	4290      	cmp	r0, r2
 800abd0:	d016      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abd6:	4290      	cmp	r0, r2
 800abd8:	d012      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abde:	4290      	cmp	r0, r2
 800abe0:	d00e      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abe2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800abe6:	4290      	cmp	r0, r2
 800abe8:	d00a      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abea:	4a19      	ldr	r2, [pc, #100]	; (800ac50 <TIM_Base_SetConfig+0xc8>)
 800abec:	4290      	cmp	r0, r2
 800abee:	d007      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abf4:	4290      	cmp	r0, r2
 800abf6:	d003      	beq.n	800ac00 <TIM_Base_SetConfig+0x78>
 800abf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800abfc:	4290      	cmp	r0, r2
 800abfe:	d103      	bne.n	800ac08 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac04:	68ca      	ldr	r2, [r1, #12]
 800ac06:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac08:	694a      	ldr	r2, [r1, #20]
 800ac0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac0e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ac10:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac12:	688b      	ldr	r3, [r1, #8]
 800ac14:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac16:	680b      	ldr	r3, [r1, #0]
 800ac18:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac1a:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <TIM_Base_SetConfig+0xc4>)
 800ac1c:	4298      	cmp	r0, r3
 800ac1e:	d00f      	beq.n	800ac40 <TIM_Base_SetConfig+0xb8>
 800ac20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac24:	4298      	cmp	r0, r3
 800ac26:	d00b      	beq.n	800ac40 <TIM_Base_SetConfig+0xb8>
 800ac28:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800ac2c:	4298      	cmp	r0, r3
 800ac2e:	d007      	beq.n	800ac40 <TIM_Base_SetConfig+0xb8>
 800ac30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac34:	4298      	cmp	r0, r3
 800ac36:	d003      	beq.n	800ac40 <TIM_Base_SetConfig+0xb8>
 800ac38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac3c:	4298      	cmp	r0, r3
 800ac3e:	d101      	bne.n	800ac44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac40:	690b      	ldr	r3, [r1, #16]
 800ac42:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac44:	2301      	movs	r3, #1
 800ac46:	6143      	str	r3, [r0, #20]
}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	40010000 	.word	0x40010000
 800ac50:	40014000 	.word	0x40014000

0800ac54 <HAL_TIM_Base_Init>:
{
 800ac54:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ac56:	4604      	mov	r4, r0
 800ac58:	b350      	cbz	r0, 800acb0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ac5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ac5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ac62:	b91b      	cbnz	r3, 800ac6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800ac64:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ac68:	f7ff fe61 	bl	800a92e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800ac6c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac6e:	6820      	ldr	r0, [r4, #0]
 800ac70:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800ac72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac76:	f7ff ff87 	bl	800ab88 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac7a:	2301      	movs	r3, #1
  return HAL_OK;
 800ac7c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac7e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac82:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ac86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ac8a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ac8e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ac92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac9a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ac9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aca2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800aca6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800acaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800acae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800acb0:	2001      	movs	r0, #1
 800acb2:	e7fc      	b.n	800acae <HAL_TIM_Base_Init+0x5a>

0800acb4 <HAL_TIMEx_CommutCallback>:
 800acb4:	4770      	bx	lr

0800acb6 <HAL_TIMEx_BreakCallback>:
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_Break2Callback>:
 800acb8:	4770      	bx	lr

0800acba <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800acba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800acbe:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800acc0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800acc4:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800acc8:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800accc:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800acd0:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800acd4:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800acd6:	b9a2      	cbnz	r2, 800ad02 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800acd8:	ea43 0209 	orr.w	r2, r3, r9
 800acdc:	6801      	ldr	r1, [r0, #0]
 800acde:	432a      	orrs	r2, r5
 800ace0:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800ace4:	ea42 0308 	orr.w	r3, r2, r8
 800ace8:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800acec:	ea43 030e 	orr.w	r3, r3, lr
 800acf0:	ea43 030c 	orr.w	r3, r3, ip
 800acf4:	433b      	orrs	r3, r7
 800acf6:	4333      	orrs	r3, r6
 800acf8:	430b      	orrs	r3, r1
 800acfa:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800acfc:	2000      	movs	r0, #0
 800acfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad02:	6802      	ldr	r2, [r0, #0]
 800ad04:	ea43 0309 	orr.w	r3, r3, r9
 800ad08:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ad10:	ea45 0308 	orr.w	r3, r5, r8
 800ad14:	6842      	ldr	r2, [r0, #4]
 800ad16:	ea43 030e 	orr.w	r3, r3, lr
 800ad1a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800ad1e:	ea43 030c 	orr.w	r3, r3, ip
 800ad22:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800ad26:	433b      	orrs	r3, r7
 800ad28:	4333      	orrs	r3, r6
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	6043      	str	r3, [r0, #4]
 800ad2e:	e7e5      	b.n	800acfc <FMC_SDRAM_Init+0x42>

0800ad30 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad30:	68cb      	ldr	r3, [r1, #12]
 800ad32:	f103 3cff 	add.w	ip, r3, #4294967295
 800ad36:	694b      	ldr	r3, [r1, #20]
{
 800ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	680f      	ldr	r7, [r1, #0]
 800ad3e:	684c      	ldr	r4, [r1, #4]
 800ad40:	688e      	ldr	r6, [r1, #8]
 800ad42:	051b      	lsls	r3, r3, #20
 800ad44:	690d      	ldr	r5, [r1, #16]
 800ad46:	3c01      	subs	r4, #1
 800ad48:	6989      	ldr	r1, [r1, #24]
 800ad4a:	3e01      	subs	r6, #1
 800ad4c:	3d01      	subs	r5, #1
 800ad4e:	3f01      	subs	r7, #1
 800ad50:	3901      	subs	r1, #1
 800ad52:	0124      	lsls	r4, r4, #4
 800ad54:	0236      	lsls	r6, r6, #8
 800ad56:	042d      	lsls	r5, r5, #16
 800ad58:	0609      	lsls	r1, r1, #24
 800ad5a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ad5e:	b95a      	cbnz	r2, 800ad78 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad60:	433b      	orrs	r3, r7
 800ad62:	6882      	ldr	r2, [r0, #8]
 800ad64:	4323      	orrs	r3, r4
 800ad66:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ad6a:	4333      	orrs	r3, r6
 800ad6c:	432b      	orrs	r3, r5
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	4313      	orrs	r3, r2
 800ad72:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ad74:	2000      	movs	r0, #0
 800ad76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad78:	6882      	ldr	r2, [r0, #8]
 800ad7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ad7e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800ad82:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ad84:	ea44 0306 	orr.w	r3, r4, r6
 800ad88:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad8a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ad8c:	68c2      	ldr	r2, [r0, #12]
 800ad8e:	432b      	orrs	r3, r5
 800ad90:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800ad94:	430b      	orrs	r3, r1
 800ad96:	4313      	orrs	r3, r2
 800ad98:	60c3      	str	r3, [r0, #12]
 800ad9a:	e7eb      	b.n	800ad74 <FMC_SDRAM_Timing_Init+0x44>

0800ad9c <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800ad9c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800ada0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ada4:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800ada8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800adac:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800adae:	2300      	movs	r3, #0
 800adb0:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800adb2:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800adb4:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	4770      	bx	lr

0800adba <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800adba:	6902      	ldr	r2, [r0, #16]
{
 800adbc:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800adbe:	e9d1 3400 	ldrd	r3, r4, [r1]
 800adc2:	0d92      	lsrs	r2, r2, #22
 800adc4:	4323      	orrs	r3, r4
 800adc6:	68cc      	ldr	r4, [r1, #12]
 800adc8:	0592      	lsls	r2, r2, #22
 800adca:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800adce:	4313      	orrs	r3, r2
 800add0:	688a      	ldr	r2, [r1, #8]
 800add2:	3a01      	subs	r2, #1
 800add4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800add8:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800adda:	2000      	movs	r0, #0
 800addc:	bd10      	pop	{r4, pc}

0800adde <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800adde:	6943      	ldr	r3, [r0, #20]
 800ade0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800ade4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800ade8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800adec:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800adee:	2000      	movs	r0, #0
 800adf0:	4770      	bx	lr

0800adf2 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800adf2:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800adf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800adf8:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800adfa:	f001 fe25 	bl	800ca48 <xTaskGetSchedulerState>
 800adfe:	2801      	cmp	r0, #1
 800ae00:	d003      	beq.n	800ae0a <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ae02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ae06:	f000 bbcd 	b.w	800b5a4 <xPortSysTickHandler>
}
 800ae0a:	bd08      	pop	{r3, pc}

0800ae0c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae0c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae10:	b92b      	cbnz	r3, 800ae1e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae12:	4b06      	ldr	r3, [pc, #24]	; (800ae2c <osKernelInitialize+0x20>)
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	b928      	cbnz	r0, 800ae24 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae18:	2201      	movs	r2, #1
 800ae1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae1c:	4770      	bx	lr
    stat = osErrorISR;
 800ae1e:	f06f 0005 	mvn.w	r0, #5
 800ae22:	4770      	bx	lr
    } else {
      stat = osError;
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	24006a30 	.word	0x24006a30

0800ae30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae30:	b510      	push	{r4, lr}
 800ae32:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae36:	b95c      	cbnz	r4, 800ae50 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800ae38:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <osKernelStart+0x2c>)
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	2a01      	cmp	r2, #1
 800ae3e:	d10a      	bne.n	800ae56 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae40:	4a07      	ldr	r2, [pc, #28]	; (800ae60 <osKernelStart+0x30>)
 800ae42:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae44:	2202      	movs	r2, #2
 800ae46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae48:	f001 fc98 	bl	800c77c <vTaskStartScheduler>
      stat = osOK;
 800ae4c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800ae4e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800ae50:	f06f 0005 	mvn.w	r0, #5
 800ae54:	e7fb      	b.n	800ae4e <osKernelStart+0x1e>
      stat = osError;
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800ae5a:	e7f8      	b.n	800ae4e <osKernelStart+0x1e>
 800ae5c:	24006a30 	.word	0x24006a30
 800ae60:	e000ed00 	.word	0xe000ed00

0800ae64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae66:	4614      	mov	r4, r2
 800ae68:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae6a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae6c:	460b      	mov	r3, r1
  hTask = NULL;
 800ae6e:	9205      	str	r2, [sp, #20]
 800ae70:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800ae74:	b9d2      	cbnz	r2, 800aeac <osThreadNew+0x48>
 800ae76:	b1c8      	cbz	r0, 800aeac <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d02f      	beq.n	800aedc <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800ae7c:	69a5      	ldr	r5, [r4, #24]
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	bf08      	it	eq
 800ae82:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ae84:	1e69      	subs	r1, r5, #1
 800ae86:	46ac      	mov	ip, r5
 800ae88:	2937      	cmp	r1, #55	; 0x37
 800ae8a:	d82b      	bhi.n	800aee4 <osThreadNew+0x80>
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	07c9      	lsls	r1, r1, #31
 800ae90:	d428      	bmi.n	800aee4 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800ae92:	6966      	ldr	r6, [r4, #20]
 800ae94:	b16e      	cbz	r6, 800aeb2 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ae96:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800ae98:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ae9a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800ae9e:	b157      	cbz	r7, 800aeb6 <osThreadNew+0x52>
 800aea0:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 800aea4:	d902      	bls.n	800aeac <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aea6:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aea8:	b104      	cbz	r4, 800aeac <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aeaa:	b9ee      	cbnz	r6, 800aee8 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aeac:	9805      	ldr	r0, [sp, #20]
}
 800aeae:	b007      	add	sp, #28
 800aeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800aeb2:	2280      	movs	r2, #128	; 0x80
 800aeb4:	e7f0      	b.n	800ae98 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aeb6:	f1be 0f00 	cmp.w	lr, #0
 800aeba:	d1f7      	bne.n	800aeac <osThreadNew+0x48>
      if (mem == 0) {
 800aebc:	6924      	ldr	r4, [r4, #16]
 800aebe:	2c00      	cmp	r4, #0
 800aec0:	d1f4      	bne.n	800aeac <osThreadNew+0x48>
 800aec2:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aec4:	a905      	add	r1, sp, #20
 800aec6:	b292      	uxth	r2, r2
 800aec8:	e9cd c100 	strd	ip, r1, [sp]
 800aecc:	4621      	mov	r1, r4
 800aece:	f001 faf3 	bl	800c4b8 <xTaskCreate>
 800aed2:	2801      	cmp	r0, #1
            hTask = NULL;
 800aed4:	bf1c      	itt	ne
 800aed6:	2300      	movne	r3, #0
 800aed8:	9305      	strne	r3, [sp, #20]
 800aeda:	e7e7      	b.n	800aeac <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800aedc:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800aee0:	2280      	movs	r2, #128	; 0x80
 800aee2:	e7ef      	b.n	800aec4 <osThreadNew+0x60>
        return (NULL);
 800aee4:	4610      	mov	r0, r2
 800aee6:	e7e2      	b.n	800aeae <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aee8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800aeec:	9500      	str	r5, [sp, #0]
 800aeee:	f001 faab 	bl	800c448 <xTaskCreateStatic>
 800aef2:	9005      	str	r0, [sp, #20]
 800aef4:	e7da      	b.n	800aeac <osThreadNew+0x48>

0800aef6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aef6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef8:	4604      	mov	r4, r0
 800aefa:	460e      	mov	r6, r1
 800aefc:	4615      	mov	r5, r2
 800aefe:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af02:	b11a      	cbz	r2, 800af0c <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800af04:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800af06:	4620      	mov	r0, r4
 800af08:	b003      	add	sp, #12
 800af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800af0c:	2800      	cmp	r0, #0
 800af0e:	d0f9      	beq.n	800af04 <osSemaphoreNew+0xe>
 800af10:	4288      	cmp	r0, r1
 800af12:	d3f7      	bcc.n	800af04 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800af14:	b1e5      	cbz	r5, 800af50 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af16:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800af1a:	b1bb      	cbz	r3, 800af4c <osSemaphoreNew+0x56>
 800af1c:	2f4f      	cmp	r7, #79	; 0x4f
 800af1e:	d9f1      	bls.n	800af04 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800af20:	2801      	cmp	r0, #1
 800af22:	d12a      	bne.n	800af7a <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800af24:	2103      	movs	r1, #3
 800af26:	9100      	str	r1, [sp, #0]
 800af28:	4611      	mov	r1, r2
 800af2a:	f000 fce3 	bl	800b8f4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800af2e:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800af30:	2800      	cmp	r0, #0
 800af32:	d0e7      	beq.n	800af04 <osSemaphoreNew+0xe>
 800af34:	b1de      	cbz	r6, 800af6e <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af36:	2300      	movs	r3, #0
 800af38:	461a      	mov	r2, r3
 800af3a:	4619      	mov	r1, r3
 800af3c:	f000 fd8f 	bl	800ba5e <xQueueGenericSend>
 800af40:	2801      	cmp	r0, #1
 800af42:	d014      	beq.n	800af6e <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800af44:	4620      	mov	r0, r4
 800af46:	f001 f8cb 	bl	800c0e0 <vQueueDelete>
 800af4a:	e7db      	b.n	800af04 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800af4c:	2f00      	cmp	r7, #0
 800af4e:	d1d9      	bne.n	800af04 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800af50:	2c01      	cmp	r4, #1
 800af52:	d105      	bne.n	800af60 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800af54:	2203      	movs	r2, #3
 800af56:	2100      	movs	r1, #0
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 fd19 	bl	800b990 <xQueueGenericCreate>
 800af5e:	e7e6      	b.n	800af2e <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800af60:	4620      	mov	r0, r4
 800af62:	4631      	mov	r1, r6
 800af64:	f000 fd5d 	bl	800ba22 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800af68:	4604      	mov	r4, r0
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0ca      	beq.n	800af04 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800af6e:	b955      	cbnz	r5, 800af86 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800af70:	4629      	mov	r1, r5
 800af72:	4620      	mov	r0, r4
 800af74:	f001 f88e 	bl	800c094 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800af78:	e7c5      	b.n	800af06 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800af7a:	461a      	mov	r2, r3
 800af7c:	f000 fd2f 	bl	800b9de <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800af80:	4604      	mov	r4, r0
 800af82:	2800      	cmp	r0, #0
 800af84:	d0be      	beq.n	800af04 <osSemaphoreNew+0xe>
          name = attr->name;
 800af86:	682d      	ldr	r5, [r5, #0]
 800af88:	e7f2      	b.n	800af70 <osSemaphoreNew+0x7a>

0800af8a <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800af8a:	b513      	push	{r0, r1, r4, lr}
 800af8c:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800af8e:	b308      	cbz	r0, 800afd4 <osSemaphoreAcquire+0x4a>
 800af90:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800af94:	b1b3      	cbz	r3, 800afc4 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800af96:	b9e9      	cbnz	r1, 800afd4 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800af98:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800af9a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800af9c:	f001 f82a 	bl	800bff4 <xQueueReceiveFromISR>
 800afa0:	2801      	cmp	r0, #1
 800afa2:	d114      	bne.n	800afce <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	b913      	cbnz	r3, 800afae <osSemaphoreAcquire+0x24>
  stat = osOK;
 800afa8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800afaa:	b002      	add	sp, #8
 800afac:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800afae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	e7f1      	b.n	800afa8 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800afc4:	f000 ff53 	bl	800be6e <xQueueSemaphoreTake>
 800afc8:	2801      	cmp	r0, #1
 800afca:	d0ed      	beq.n	800afa8 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800afcc:	b92c      	cbnz	r4, 800afda <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800afce:	f06f 0002 	mvn.w	r0, #2
 800afd2:	e7ea      	b.n	800afaa <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800afd4:	f06f 0003 	mvn.w	r0, #3
 800afd8:	e7e7      	b.n	800afaa <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800afda:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800afde:	e7e4      	b.n	800afaa <osSemaphoreAcquire+0x20>

0800afe0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800afe0:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800afe2:	b310      	cbz	r0, 800b02a <osSemaphoreRelease+0x4a>
 800afe4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800afe8:	b1b3      	cbz	r3, 800b018 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800afea:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800afec:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800afee:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aff0:	f000 fe4a 	bl	800bc88 <xQueueGiveFromISR>
 800aff4:	2801      	cmp	r0, #1
 800aff6:	d115      	bne.n	800b024 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	b913      	cbnz	r3, 800b002 <osSemaphoreRelease+0x22>
  stat = osOK;
 800affc:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800affe:	b002      	add	sp, #8
 800b000:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800b002:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	e7f1      	b.n	800affc <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b018:	461a      	mov	r2, r3
 800b01a:	4619      	mov	r1, r3
 800b01c:	f000 fd1f 	bl	800ba5e <xQueueGenericSend>
 800b020:	2801      	cmp	r0, #1
 800b022:	d0eb      	beq.n	800affc <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800b024:	f06f 0002 	mvn.w	r0, #2
 800b028:	e7e9      	b.n	800affe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b02a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b02e:	e7e6      	b.n	800affe <osSemaphoreRelease+0x1e>

0800b030 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b032:	4605      	mov	r5, r0
 800b034:	460e      	mov	r6, r1
 800b036:	4614      	mov	r4, r2
 800b038:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b03c:	b11f      	cbz	r7, 800b046 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b03e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b040:	4628      	mov	r0, r5
 800b042:	b003      	add	sp, #12
 800b044:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b046:	2800      	cmp	r0, #0
 800b048:	d0f9      	beq.n	800b03e <osMessageQueueNew+0xe>
 800b04a:	2900      	cmp	r1, #0
 800b04c:	d0f7      	beq.n	800b03e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b04e:	b1da      	cbz	r2, 800b088 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b050:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b054:	b183      	cbz	r3, 800b078 <osMessageQueueNew+0x48>
 800b056:	2a4f      	cmp	r2, #79	; 0x4f
 800b058:	d9f1      	bls.n	800b03e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b05a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b05c:	2a00      	cmp	r2, #0
 800b05e:	d0ee      	beq.n	800b03e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b060:	434d      	muls	r5, r1
 800b062:	6966      	ldr	r6, [r4, #20]
 800b064:	42ae      	cmp	r6, r5
 800b066:	d3ea      	bcc.n	800b03e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b068:	9700      	str	r7, [sp, #0]
 800b06a:	f000 fc43 	bl	800b8f4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b06e:	4605      	mov	r5, r0
 800b070:	2800      	cmp	r0, #0
 800b072:	d0e4      	beq.n	800b03e <osMessageQueueNew+0xe>
        name = attr->name;
 800b074:	6824      	ldr	r4, [r4, #0]
 800b076:	e011      	b.n	800b09c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b078:	2a00      	cmp	r2, #0
 800b07a:	d1e0      	bne.n	800b03e <osMessageQueueNew+0xe>
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1dd      	bne.n	800b03e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b082:	6963      	ldr	r3, [r4, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1da      	bne.n	800b03e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b088:	4628      	mov	r0, r5
 800b08a:	2200      	movs	r2, #0
 800b08c:	4631      	mov	r1, r6
 800b08e:	f000 fc7f 	bl	800b990 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b092:	4605      	mov	r5, r0
 800b094:	2800      	cmp	r0, #0
 800b096:	d0d2      	beq.n	800b03e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b098:	2c00      	cmp	r4, #0
 800b09a:	d1eb      	bne.n	800b074 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b09c:	4621      	mov	r1, r4
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 fff8 	bl	800c094 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b0a4:	e7cc      	b.n	800b040 <osMessageQueueNew+0x10>

0800b0a6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0a8:	461c      	mov	r4, r3
 800b0aa:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b0ae:	b1c6      	cbz	r6, 800b0e2 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0b0:	b318      	cbz	r0, 800b0fa <osMessageQueuePut+0x54>
 800b0b2:	b311      	cbz	r1, 800b0fa <osMessageQueuePut+0x54>
 800b0b4:	bb0b      	cbnz	r3, 800b0fa <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b0b6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b0b8:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b0ba:	f000 fd83 	bl	800bbc4 <xQueueGenericSendFromISR>
 800b0be:	2801      	cmp	r0, #1
 800b0c0:	d118      	bne.n	800b0f4 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b0c2:	9b01      	ldr	r3, [sp, #4]
 800b0c4:	b913      	cbnz	r3, 800b0cc <osMessageQueuePut+0x26>
  stat = osOK;
 800b0c6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b0c8:	b002      	add	sp, #8
 800b0ca:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b0cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	e7f1      	b.n	800b0c6 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b0e2:	b150      	cbz	r0, 800b0fa <osMessageQueuePut+0x54>
 800b0e4:	b149      	cbz	r1, 800b0fa <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0e6:	4633      	mov	r3, r6
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	f000 fcb8 	bl	800ba5e <xQueueGenericSend>
 800b0ee:	2801      	cmp	r0, #1
 800b0f0:	d0e9      	beq.n	800b0c6 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800b0f2:	b92c      	cbnz	r4, 800b100 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800b0f4:	f06f 0002 	mvn.w	r0, #2
 800b0f8:	e7e6      	b.n	800b0c8 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800b0fa:	f06f 0003 	mvn.w	r0, #3
 800b0fe:	e7e3      	b.n	800b0c8 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800b100:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b104:	e7e0      	b.n	800b0c8 <osMessageQueuePut+0x22>

0800b106 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b108:	461c      	mov	r4, r3
 800b10a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b10e:	b1c3      	cbz	r3, 800b142 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b110:	b310      	cbz	r0, 800b158 <osMessageQueueGet+0x52>
 800b112:	b309      	cbz	r1, 800b158 <osMessageQueueGet+0x52>
 800b114:	bb04      	cbnz	r4, 800b158 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b116:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b118:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b11a:	f000 ff6b 	bl	800bff4 <xQueueReceiveFromISR>
 800b11e:	2801      	cmp	r0, #1
 800b120:	d117      	bne.n	800b152 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800b122:	9b01      	ldr	r3, [sp, #4]
 800b124:	b913      	cbnz	r3, 800b12c <osMessageQueueGet+0x26>
  stat = osOK;
 800b126:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b128:	b003      	add	sp, #12
 800b12a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b12c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b134:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	e7f1      	b.n	800b126 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b142:	b148      	cbz	r0, 800b158 <osMessageQueueGet+0x52>
 800b144:	b141      	cbz	r1, 800b158 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b146:	4622      	mov	r2, r4
 800b148:	f000 fdf2 	bl	800bd30 <xQueueReceive>
 800b14c:	2801      	cmp	r0, #1
 800b14e:	d0ea      	beq.n	800b126 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800b150:	b92c      	cbnz	r4, 800b15e <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800b152:	f06f 0002 	mvn.w	r0, #2
 800b156:	e7e7      	b.n	800b128 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800b158:	f06f 0003 	mvn.w	r0, #3
 800b15c:	e7e4      	b.n	800b128 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800b15e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800b162:	e7e1      	b.n	800b128 <osMessageQueueGet+0x22>

0800b164 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b164:	4b03      	ldr	r3, [pc, #12]	; (800b174 <vApplicationGetIdleTaskMemory+0x10>)
 800b166:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b168:	4b03      	ldr	r3, [pc, #12]	; (800b178 <vApplicationGetIdleTaskMemory+0x14>)
 800b16a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b16c:	2380      	movs	r3, #128	; 0x80
 800b16e:	6013      	str	r3, [r2, #0]
}
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	24006970 	.word	0x24006970
 800b178:	24006770 	.word	0x24006770

0800b17c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b17c:	4b03      	ldr	r3, [pc, #12]	; (800b18c <vApplicationGetTimerTaskMemory+0x10>)
 800b17e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b180:	4b03      	ldr	r3, [pc, #12]	; (800b190 <vApplicationGetTimerTaskMemory+0x14>)
 800b182:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b184:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b188:	6013      	str	r3, [r2, #0]
}
 800b18a:	4770      	bx	lr
 800b18c:	24006e34 	.word	0x24006e34
 800b190:	24006a34 	.word	0x24006a34

0800b194 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b194:	4b0f      	ldr	r3, [pc, #60]	; (800b1d4 <prvInsertBlockIntoFreeList+0x40>)
{
 800b196:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b198:	461a      	mov	r2, r3
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4283      	cmp	r3, r0
 800b19e:	d3fb      	bcc.n	800b198 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b1a0:	6854      	ldr	r4, [r2, #4]
 800b1a2:	1911      	adds	r1, r2, r4
 800b1a4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6841      	ldreq	r1, [r0, #4]
 800b1aa:	4610      	moveq	r0, r2
 800b1ac:	1909      	addeq	r1, r1, r4
 800b1ae:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b1b0:	6844      	ldr	r4, [r0, #4]
 800b1b2:	1901      	adds	r1, r0, r4
 800b1b4:	428b      	cmp	r3, r1
 800b1b6:	d107      	bne.n	800b1c8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b1b8:	4907      	ldr	r1, [pc, #28]	; (800b1d8 <prvInsertBlockIntoFreeList+0x44>)
 800b1ba:	6809      	ldr	r1, [r1, #0]
 800b1bc:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1be:	bf1f      	itttt	ne
 800b1c0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b1c2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b1c4:	1909      	addne	r1, r1, r4
 800b1c6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1c8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1ca:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1cc:	bf18      	it	ne
 800b1ce:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	bf00      	nop
 800b1d4:	2400ef0c 	.word	0x2400ef0c
 800b1d8:	24006ef4 	.word	0x24006ef4

0800b1dc <pvPortMalloc>:
{
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b1e2:	f001 f997 	bl	800c514 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b1e6:	4842      	ldr	r0, [pc, #264]	; (800b2f0 <pvPortMalloc+0x114>)
 800b1e8:	4d42      	ldr	r5, [pc, #264]	; (800b2f4 <pvPortMalloc+0x118>)
 800b1ea:	6803      	ldr	r3, [r0, #0]
 800b1ec:	bb0b      	cbnz	r3, 800b232 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800b1ee:	4942      	ldr	r1, [pc, #264]	; (800b2f8 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1f0:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1f2:	4e42      	ldr	r6, [pc, #264]	; (800b2fc <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1f4:	bf1b      	ittet	ne
 800b1f6:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1f8:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1fc:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b200:	f023 0307 	bicne.w	r3, r3, #7
 800b204:	bf1c      	itt	ne
 800b206:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b208:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800b20a:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b20c:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b20e:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b210:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800b212:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b214:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b218:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b21c:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800b21e:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b220:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b224:	4a36      	ldr	r2, [pc, #216]	; (800b300 <pvPortMalloc+0x124>)
 800b226:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b228:	4a36      	ldr	r2, [pc, #216]	; (800b304 <pvPortMalloc+0x128>)
 800b22a:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b230:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b232:	682f      	ldr	r7, [r5, #0]
 800b234:	4227      	tst	r7, r4
 800b236:	d155      	bne.n	800b2e4 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800b238:	2c00      	cmp	r4, #0
 800b23a:	d046      	beq.n	800b2ca <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800b23c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b240:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b242:	bf1c      	itt	ne
 800b244:	f023 0307 	bicne.w	r3, r3, #7
 800b248:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d04a      	beq.n	800b2e4 <pvPortMalloc+0x108>
 800b24e:	4c2d      	ldr	r4, [pc, #180]	; (800b304 <pvPortMalloc+0x128>)
 800b250:	6826      	ldr	r6, [r4, #0]
 800b252:	429e      	cmp	r6, r3
 800b254:	d346      	bcc.n	800b2e4 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800b256:	4a29      	ldr	r2, [pc, #164]	; (800b2fc <pvPortMalloc+0x120>)
 800b258:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b25a:	6869      	ldr	r1, [r5, #4]
 800b25c:	4299      	cmp	r1, r3
 800b25e:	d204      	bcs.n	800b26a <pvPortMalloc+0x8e>
 800b260:	f8d5 c000 	ldr.w	ip, [r5]
 800b264:	f1bc 0f00 	cmp.w	ip, #0
 800b268:	d115      	bne.n	800b296 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800b26a:	6800      	ldr	r0, [r0, #0]
 800b26c:	42a8      	cmp	r0, r5
 800b26e:	d039      	beq.n	800b2e4 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b270:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b272:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b274:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b278:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b27a:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b27c:	d912      	bls.n	800b2a4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b27e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b280:	0742      	lsls	r2, r0, #29
 800b282:	d00b      	beq.n	800b29c <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	e7fe      	b.n	800b294 <pvPortMalloc+0xb8>
 800b296:	462a      	mov	r2, r5
 800b298:	4665      	mov	r5, ip
 800b29a:	e7de      	b.n	800b25a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b29c:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b29e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2a0:	f7ff ff78 	bl	800b194 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2a4:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2a6:	4916      	ldr	r1, [pc, #88]	; (800b300 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2a8:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2aa:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800b2ac:	4a16      	ldr	r2, [pc, #88]	; (800b308 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800b2ae:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2b0:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800b2b2:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b2b4:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2b6:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2b8:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b2ba:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800b2be:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2c2:	bf38      	it	cc
 800b2c4:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2c6:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b2c8:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b2ca:	f001 f9c7 	bl	800c65c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2ce:	0763      	lsls	r3, r4, #29
 800b2d0:	d00a      	beq.n	800b2e8 <pvPortMalloc+0x10c>
 800b2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d6:	f383 8811 	msr	BASEPRI, r3
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	f3bf 8f4f 	dsb	sy
 800b2e2:	e7fe      	b.n	800b2e2 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800b2e4:	2400      	movs	r4, #0
 800b2e6:	e7f0      	b.n	800b2ca <pvPortMalloc+0xee>
}
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ee:	bf00      	nop
 800b2f0:	24006ef4 	.word	0x24006ef4
 800b2f4:	2400eef8 	.word	0x2400eef8
 800b2f8:	24006ef8 	.word	0x24006ef8
 800b2fc:	2400ef0c 	.word	0x2400ef0c
 800b300:	2400ef00 	.word	0x2400ef00
 800b304:	2400eefc 	.word	0x2400eefc
 800b308:	2400ef04 	.word	0x2400ef04

0800b30c <vPortFree>:
{
 800b30c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b30e:	4604      	mov	r4, r0
 800b310:	b390      	cbz	r0, 800b378 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b312:	4a1a      	ldr	r2, [pc, #104]	; (800b37c <vPortFree+0x70>)
 800b314:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b318:	6812      	ldr	r2, [r2, #0]
 800b31a:	4213      	tst	r3, r2
 800b31c:	d108      	bne.n	800b330 <vPortFree+0x24>
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	e7fe      	b.n	800b32e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b330:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b334:	b141      	cbz	r1, 800b348 <vPortFree+0x3c>
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	e7fe      	b.n	800b346 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b348:	ea23 0302 	bic.w	r3, r3, r2
 800b34c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b350:	f001 f8e0 	bl	800c514 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b354:	4a0a      	ldr	r2, [pc, #40]	; (800b380 <vPortFree+0x74>)
 800b356:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b35a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b35e:	6811      	ldr	r1, [r2, #0]
 800b360:	440b      	add	r3, r1
 800b362:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b364:	f7ff ff16 	bl	800b194 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b368:	4a06      	ldr	r2, [pc, #24]	; (800b384 <vPortFree+0x78>)
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	3301      	adds	r3, #1
}
 800b36e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b372:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b374:	f001 b972 	b.w	800c65c <xTaskResumeAll>
}
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	bf00      	nop
 800b37c:	2400eef8 	.word	0x2400eef8
 800b380:	2400eefc 	.word	0x2400eefc
 800b384:	2400ef08 	.word	0x2400ef08

0800b388 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b388:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b390:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b392:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b394:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b39c:	4770      	bx	lr

0800b39e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b3a2:	4770      	bx	lr

0800b3a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b3a4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3a6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b3a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b3aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b3b2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b3b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	6003      	str	r3, [r0, #0]
}
 800b3ba:	4770      	bx	lr

0800b3bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3bc:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3be:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3c0:	1c63      	adds	r3, r4, #1
 800b3c2:	d10a      	bne.n	800b3da <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3c4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b3c6:	685a      	ldr	r2, [r3, #4]
 800b3c8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b3ca:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b3cc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b3ce:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b3d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b3d2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	6003      	str	r3, [r0, #0]
}
 800b3d8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3da:	f100 0208 	add.w	r2, r0, #8
 800b3de:	4613      	mov	r3, r2
 800b3e0:	6852      	ldr	r2, [r2, #4]
 800b3e2:	6815      	ldr	r5, [r2, #0]
 800b3e4:	42a5      	cmp	r5, r4
 800b3e6:	d9fa      	bls.n	800b3de <vListInsert+0x22>
 800b3e8:	e7ed      	b.n	800b3c6 <vListInsert+0xa>

0800b3ea <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3ea:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3ec:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b3f0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3f2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3f4:	6859      	ldr	r1, [r3, #4]
 800b3f6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3f8:	bf08      	it	eq
 800b3fa:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	3a01      	subs	r2, #1
 800b404:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b406:	6818      	ldr	r0, [r3, #0]
}
 800b408:	4770      	bx	lr
	...

0800b40c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b40c:	4808      	ldr	r0, [pc, #32]	; (800b430 <prvPortStartFirstTask+0x24>)
 800b40e:	6800      	ldr	r0, [r0, #0]
 800b410:	6800      	ldr	r0, [r0, #0]
 800b412:	f380 8808 	msr	MSP, r0
 800b416:	f04f 0000 	mov.w	r0, #0
 800b41a:	f380 8814 	msr	CONTROL, r0
 800b41e:	b662      	cpsie	i
 800b420:	b661      	cpsie	f
 800b422:	f3bf 8f4f 	dsb	sy
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	df00      	svc	0
 800b42c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b42e:	0000      	.short	0x0000
 800b430:	e000ed08 	.word	0xe000ed08

0800b434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b444 <vPortEnableVFP+0x10>
 800b438:	6801      	ldr	r1, [r0, #0]
 800b43a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b43e:	6001      	str	r1, [r0, #0]
 800b440:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b442:	0000      	.short	0x0000
 800b444:	e000ed88 	.word	0xe000ed88

0800b448 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b448:	2300      	movs	r3, #0
{
 800b44a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b44c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b44e:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <prvTaskExitError+0x3c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	d008      	beq.n	800b468 <prvTaskExitError+0x20>
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	e7fe      	b.n	800b466 <prvTaskExitError+0x1e>
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d0fc      	beq.n	800b478 <prvTaskExitError+0x30>
}
 800b47e:	b002      	add	sp, #8
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	24000068 	.word	0x24000068

0800b488 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b488:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b48c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b490:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b494:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b496:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b498:	4b03      	ldr	r3, [pc, #12]	; (800b4a8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b49a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b49c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b49e:	f06f 0302 	mvn.w	r3, #2
 800b4a2:	6203      	str	r3, [r0, #32]
}
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	0800b449 	.word	0x0800b449
 800b4ac:	00000000 	.word	0x00000000

0800b4b0 <SVC_Handler>:
	__asm volatile (
 800b4b0:	4b07      	ldr	r3, [pc, #28]	; (800b4d0 <pxCurrentTCBConst2>)
 800b4b2:	6819      	ldr	r1, [r3, #0]
 800b4b4:	6808      	ldr	r0, [r1, #0]
 800b4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ba:	f380 8809 	msr	PSP, r0
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f04f 0000 	mov.w	r0, #0
 800b4c6:	f380 8811 	msr	BASEPRI, r0
 800b4ca:	4770      	bx	lr
 800b4cc:	f3af 8000 	nop.w

0800b4d0 <pxCurrentTCBConst2>:
 800b4d0:	2400ef5c 	.word	0x2400ef5c

0800b4d4 <vPortEnterCritical>:
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b4e4:	4a0a      	ldr	r2, [pc, #40]	; (800b510 <vPortEnterCritical+0x3c>)
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b4ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b4ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b4ee:	d10e      	bne.n	800b50e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b4f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b4f4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b4f8:	b2db      	uxtb	r3, r3
 800b4fa:	b143      	cbz	r3, 800b50e <vPortEnterCritical+0x3a>
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	e7fe      	b.n	800b50c <vPortEnterCritical+0x38>
}
 800b50e:	4770      	bx	lr
 800b510:	24000068 	.word	0x24000068

0800b514 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b514:	4a08      	ldr	r2, [pc, #32]	; (800b538 <vPortExitCritical+0x24>)
 800b516:	6813      	ldr	r3, [r2, #0]
 800b518:	b943      	cbnz	r3, 800b52c <vPortExitCritical+0x18>
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	e7fe      	b.n	800b52a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b52c:	3b01      	subs	r3, #1
 800b52e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b530:	b90b      	cbnz	r3, 800b536 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b532:	f383 8811 	msr	BASEPRI, r3
}
 800b536:	4770      	bx	lr
 800b538:	24000068 	.word	0x24000068
 800b53c:	00000000 	.word	0x00000000

0800b540 <PendSV_Handler>:
	__asm volatile
 800b540:	f3ef 8009 	mrs	r0, PSP
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <pxCurrentTCBConst>)
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	f01e 0f10 	tst.w	lr, #16
 800b550:	bf08      	it	eq
 800b552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	6010      	str	r0, [r2, #0]
 800b55c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b560:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b564:	f380 8811 	msr	BASEPRI, r0
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f001 f958 	bl	800c824 <vTaskSwitchContext>
 800b574:	f04f 0000 	mov.w	r0, #0
 800b578:	f380 8811 	msr	BASEPRI, r0
 800b57c:	bc09      	pop	{r0, r3}
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	6808      	ldr	r0, [r1, #0]
 800b582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b586:	f01e 0f10 	tst.w	lr, #16
 800b58a:	bf08      	it	eq
 800b58c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b590:	f380 8809 	msr	PSP, r0
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w

0800b5a0 <pxCurrentTCBConst>:
 800b5a0:	2400ef5c 	.word	0x2400ef5c

0800b5a4 <xPortSysTickHandler>:
{
 800b5a4:	b508      	push	{r3, lr}
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b5b6:	f000 ffbb 	bl	800c530 <xTaskIncrementTick>
 800b5ba:	b128      	cbz	r0, 800b5c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b5bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b5c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bd08      	pop	{r3, pc}

0800b5d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b5d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5da:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5dc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5de:	4b04      	ldr	r3, [pc, #16]	; (800b5f0 <vPortSetupTimerInterrupt+0x20>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5ea:	2307      	movs	r3, #7
 800b5ec:	6113      	str	r3, [r2, #16]
}
 800b5ee:	4770      	bx	lr
 800b5f0:	24000058 	.word	0x24000058

0800b5f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800b5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5fa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800b5fe:	4a3a      	ldr	r2, [pc, #232]	; (800b6e8 <xPortStartScheduler+0xf4>)
 800b600:	4291      	cmp	r1, r2
 800b602:	d108      	bne.n	800b616 <xPortStartScheduler+0x22>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	e7fe      	b.n	800b614 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b616:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800b61a:	4b34      	ldr	r3, [pc, #208]	; (800b6ec <xPortStartScheduler+0xf8>)
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d108      	bne.n	800b632 <xPortStartScheduler+0x3e>
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	e7fe      	b.n	800b630 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b632:	4b2f      	ldr	r3, [pc, #188]	; (800b6f0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b634:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b63c:	22ff      	movs	r2, #255	; 0xff
 800b63e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b640:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b642:	4a2c      	ldr	r2, [pc, #176]	; (800b6f4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b64a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b64e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b652:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b654:	2307      	movs	r3, #7
 800b656:	4a28      	ldr	r2, [pc, #160]	; (800b6f8 <xPortStartScheduler+0x104>)
 800b658:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b65a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b65e:	1e5c      	subs	r4, r3, #1
 800b660:	0600      	lsls	r0, r0, #24
 800b662:	d40c      	bmi.n	800b67e <xPortStartScheduler+0x8a>
 800b664:	b111      	cbz	r1, 800b66c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b666:	2b03      	cmp	r3, #3
 800b668:	6013      	str	r3, [r2, #0]
 800b66a:	d011      	beq.n	800b690 <xPortStartScheduler+0x9c>
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	e7fe      	b.n	800b67c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b67e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b682:	2101      	movs	r1, #1
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	f88d 3003 	strb.w	r3, [sp, #3]
 800b68c:	4623      	mov	r3, r4
 800b68e:	e7e4      	b.n	800b65a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b690:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b694:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800b698:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b69a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	4a14      	ldr	r2, [pc, #80]	; (800b6f0 <xPortStartScheduler+0xfc>)
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6a4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b6a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6ac:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6b0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b6b4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6b8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800b6bc:	f7ff ff88 	bl	800b5d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b6c0:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <xPortStartScheduler+0x108>)
 800b6c2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b6c4:	f7ff feb6 	bl	800b434 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6c8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800b6cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6d0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800b6d4:	f7ff fe9a 	bl	800b40c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b6d8:	f001 f8a4 	bl	800c824 <vTaskSwitchContext>
}
 800b6dc:	4628      	mov	r0, r5
	prvTaskExitError();
 800b6de:	f7ff feb3 	bl	800b448 <prvTaskExitError>
}
 800b6e2:	b003      	add	sp, #12
 800b6e4:	bd30      	pop	{r4, r5, pc}
 800b6e6:	bf00      	nop
 800b6e8:	410fc271 	.word	0x410fc271
 800b6ec:	410fc270 	.word	0x410fc270
 800b6f0:	e000e400 	.word	0xe000e400
 800b6f4:	2400ef14 	.word	0x2400ef14
 800b6f8:	2400ef18 	.word	0x2400ef18
 800b6fc:	24000068 	.word	0x24000068

0800b700 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b700:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b704:	2b0f      	cmp	r3, #15
 800b706:	d90e      	bls.n	800b726 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b708:	4a11      	ldr	r2, [pc, #68]	; (800b750 <vPortValidateInterruptPriority+0x50>)
 800b70a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b70c:	4a11      	ldr	r2, [pc, #68]	; (800b754 <vPortValidateInterruptPriority+0x54>)
 800b70e:	7812      	ldrb	r2, [r2, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d908      	bls.n	800b726 <vPortValidateInterruptPriority+0x26>
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	e7fe      	b.n	800b724 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b726:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b72a:	4a0b      	ldr	r2, [pc, #44]	; (800b758 <vPortValidateInterruptPriority+0x58>)
 800b72c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b736:	4293      	cmp	r3, r2
 800b738:	d908      	bls.n	800b74c <vPortValidateInterruptPriority+0x4c>
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	e7fe      	b.n	800b74a <vPortValidateInterruptPriority+0x4a>
	}
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	e000e3f0 	.word	0xe000e3f0
 800b754:	2400ef14 	.word	0x2400ef14
 800b758:	2400ef18 	.word	0x2400ef18

0800b75c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b75c:	b510      	push	{r4, lr}
 800b75e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b760:	f7ff feb8 	bl	800b4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b764:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b766:	f7ff fed5 	bl	800b514 <vPortExitCritical>

	return xReturn;
}
 800b76a:	fab4 f084 	clz	r0, r4
 800b76e:	0940      	lsrs	r0, r0, #5
 800b770:	bd10      	pop	{r4, pc}

0800b772 <prvCopyDataToQueue>:
{
 800b772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b774:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b776:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b778:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b77a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b77c:	b952      	cbnz	r2, 800b794 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b77e:	6807      	ldr	r7, [r0, #0]
 800b780:	bb47      	cbnz	r7, 800b7d4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b782:	6880      	ldr	r0, [r0, #8]
 800b784:	f001 f9b0 	bl	800cae8 <xTaskPriorityDisinherit>
 800b788:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b78a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b78c:	3601      	adds	r6, #1
}
 800b78e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b790:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b794:	b965      	cbnz	r5, 800b7b0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b796:	6840      	ldr	r0, [r0, #4]
 800b798:	f013 fda2 	bl	801f2e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b7a0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7a2:	68a2      	ldr	r2, [r4, #8]
 800b7a4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7a6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7a8:	d3f0      	bcc.n	800b78c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	6063      	str	r3, [r4, #4]
 800b7ae:	e7ed      	b.n	800b78c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b7b0:	68c0      	ldr	r0, [r0, #12]
 800b7b2:	f013 fd95 	bl	801f2e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b7b8:	68e3      	ldr	r3, [r4, #12]
 800b7ba:	4251      	negs	r1, r2
 800b7bc:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b7c2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b7c4:	bf3e      	ittt	cc
 800b7c6:	68a3      	ldrcc	r3, [r4, #8]
 800b7c8:	185b      	addcc	r3, r3, r1
 800b7ca:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b7cc:	2d02      	cmp	r5, #2
 800b7ce:	d101      	bne.n	800b7d4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7d0:	b116      	cbz	r6, 800b7d8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800b7d2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b7d4:	2500      	movs	r5, #0
 800b7d6:	e7d9      	b.n	800b78c <prvCopyDataToQueue+0x1a>
 800b7d8:	4635      	mov	r5, r6
 800b7da:	e7d7      	b.n	800b78c <prvCopyDataToQueue+0x1a>

0800b7dc <prvCopyDataFromQueue>:
{
 800b7dc:	4603      	mov	r3, r0
 800b7de:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800b7e2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b7e4:	b162      	cbz	r2, 800b800 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7e6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7e8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7ea:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7ec:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7ee:	60dc      	str	r4, [r3, #12]
}
 800b7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7f4:	bf24      	itt	cs
 800b7f6:	6819      	ldrcs	r1, [r3, #0]
 800b7f8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7fa:	68d9      	ldr	r1, [r3, #12]
 800b7fc:	f013 bd70 	b.w	801f2e0 <memcpy>
}
 800b800:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <prvUnlockQueue>:
{
 800b806:	b570      	push	{r4, r5, r6, lr}
 800b808:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b80a:	f7ff fe63 	bl	800b4d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b80e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b812:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b816:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b818:	2d00      	cmp	r5, #0
 800b81a:	dc14      	bgt.n	800b846 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b81c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b81e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b826:	f7ff fe75 	bl	800b514 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b82a:	f7ff fe53 	bl	800b4d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b82e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800b832:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b834:	2d00      	cmp	r5, #0
 800b836:	dc12      	bgt.n	800b85e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b838:	23ff      	movs	r3, #255	; 0xff
 800b83a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b842:	f7ff be67 	b.w	800b514 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d0e7      	beq.n	800b81c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b84c:	4630      	mov	r0, r6
 800b84e:	f001 f869 	bl	800c924 <xTaskRemoveFromEventList>
 800b852:	b108      	cbz	r0, 800b858 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b854:	f001 f8f2 	bl	800ca3c <vTaskMissedYield>
			--cTxLock;
 800b858:	3d01      	subs	r5, #1
 800b85a:	b26d      	sxtb	r5, r5
 800b85c:	e7dc      	b.n	800b818 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85e:	6923      	ldr	r3, [r4, #16]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d0e9      	beq.n	800b838 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b864:	4630      	mov	r0, r6
 800b866:	f001 f85d 	bl	800c924 <xTaskRemoveFromEventList>
 800b86a:	b108      	cbz	r0, 800b870 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b86c:	f001 f8e6 	bl	800ca3c <vTaskMissedYield>
				--cRxLock;
 800b870:	3d01      	subs	r5, #1
 800b872:	b26d      	sxtb	r5, r5
 800b874:	e7de      	b.n	800b834 <prvUnlockQueue+0x2e>

0800b876 <xQueueGenericReset>:
{
 800b876:	b538      	push	{r3, r4, r5, lr}
 800b878:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b87a:	4604      	mov	r4, r0
 800b87c:	b940      	cbnz	r0, 800b890 <xQueueGenericReset+0x1a>
 800b87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b882:	f383 8811 	msr	BASEPRI, r3
 800b886:	f3bf 8f6f 	isb	sy
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	e7fe      	b.n	800b88e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800b890:	f7ff fe20 	bl	800b4d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b894:	6822      	ldr	r2, [r4, #0]
 800b896:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b89a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b89c:	434b      	muls	r3, r1
 800b89e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a0:	1a5b      	subs	r3, r3, r1
 800b8a2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8a6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8a8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8aa:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8ac:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b8ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b8b6:	b9a5      	cbnz	r5, 800b8e2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	b173      	cbz	r3, 800b8da <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8bc:	f104 0010 	add.w	r0, r4, #16
 800b8c0:	f001 f830 	bl	800c924 <xTaskRemoveFromEventList>
 800b8c4:	b148      	cbz	r0, 800b8da <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800b8c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800b8da:	f7ff fe1b 	bl	800b514 <vPortExitCritical>
}
 800b8de:	2001      	movs	r0, #1
 800b8e0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8e2:	f104 0010 	add.w	r0, r4, #16
 800b8e6:	f7ff fd4f 	bl	800b388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8ee:	f7ff fd4b 	bl	800b388 <vListInitialise>
 800b8f2:	e7f2      	b.n	800b8da <xQueueGenericReset+0x64>

0800b8f4 <xQueueGenericCreateStatic>:
	{
 800b8f4:	b513      	push	{r0, r1, r4, lr}
 800b8f6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8f8:	b940      	cbnz	r0, 800b90c <xQueueGenericCreateStatic+0x18>
 800b8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	e7fe      	b.n	800b90a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800b90c:	b943      	cbnz	r3, 800b920 <xQueueGenericCreateStatic+0x2c>
 800b90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	e7fe      	b.n	800b91e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b920:	b14a      	cbz	r2, 800b936 <xQueueGenericCreateStatic+0x42>
 800b922:	b991      	cbnz	r1, 800b94a <xQueueGenericCreateStatic+0x56>
 800b924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b928:	f383 8811 	msr	BASEPRI, r3
 800b92c:	f3bf 8f6f 	isb	sy
 800b930:	f3bf 8f4f 	dsb	sy
 800b934:	e7fe      	b.n	800b934 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b936:	b141      	cbz	r1, 800b94a <xQueueGenericCreateStatic+0x56>
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	e7fe      	b.n	800b948 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b94a:	2350      	movs	r3, #80	; 0x50
 800b94c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	2b50      	cmp	r3, #80	; 0x50
 800b952:	d008      	beq.n	800b966 <xQueueGenericCreateStatic+0x72>
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	e7fe      	b.n	800b964 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b966:	2900      	cmp	r1, #0
 800b968:	bf08      	it	eq
 800b96a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b96c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	6022      	str	r2, [r4, #0]
 800b972:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800b976:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b97a:	4619      	mov	r1, r3
 800b97c:	4620      	mov	r0, r4
 800b97e:	f7ff ff7a 	bl	800b876 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b982:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800b986:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800b988:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800b98c:	b002      	add	sp, #8
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <xQueueGenericCreate>:
	{
 800b990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b992:	460d      	mov	r5, r1
 800b994:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b996:	4606      	mov	r6, r0
 800b998:	b940      	cbnz	r0, 800b9ac <xQueueGenericCreate+0x1c>
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	e7fe      	b.n	800b9aa <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9ac:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9ae:	3050      	adds	r0, #80	; 0x50
 800b9b0:	f7ff fc14 	bl	800b1dc <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	b170      	cbz	r0, 800b9d6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9be:	b165      	cbz	r5, 800b9da <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9c0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800b9ca:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9ce:	f7ff ff52 	bl	800b876 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b9d2:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9da:	4603      	mov	r3, r0
 800b9dc:	e7f2      	b.n	800b9c4 <xQueueGenericCreate+0x34>

0800b9de <xQueueCreateCountingSemaphoreStatic>:
	{
 800b9de:	b513      	push	{r0, r1, r4, lr}
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b9e4:	b940      	cbnz	r0, 800b9f8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	e7fe      	b.n	800b9f6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b9f8:	4288      	cmp	r0, r1
 800b9fa:	d208      	bcs.n	800ba0e <xQueueCreateCountingSemaphoreStatic+0x30>
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	f383 8811 	msr	BASEPRI, r3
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	f3bf 8f4f 	dsb	sy
 800ba0c:	e7fe      	b.n	800ba0c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba0e:	2202      	movs	r2, #2
 800ba10:	9200      	str	r2, [sp, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	4611      	mov	r1, r2
 800ba16:	f7ff ff6d 	bl	800b8f4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ba1a:	b100      	cbz	r0, 800ba1e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba1c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ba1e:	b002      	add	sp, #8
 800ba20:	bd10      	pop	{r4, pc}

0800ba22 <xQueueCreateCountingSemaphore>:
	{
 800ba22:	b510      	push	{r4, lr}
 800ba24:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ba26:	b940      	cbnz	r0, 800ba3a <xQueueCreateCountingSemaphore+0x18>
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	e7fe      	b.n	800ba38 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba3a:	4288      	cmp	r0, r1
 800ba3c:	d208      	bcs.n	800ba50 <xQueueCreateCountingSemaphore+0x2e>
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	e7fe      	b.n	800ba4e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ba50:	2202      	movs	r2, #2
 800ba52:	2100      	movs	r1, #0
 800ba54:	f7ff ff9c 	bl	800b990 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ba58:	b100      	cbz	r0, 800ba5c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ba5a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800ba5c:	bd10      	pop	{r4, pc}

0800ba5e <xQueueGenericSend>:
{
 800ba5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba62:	b085      	sub	sp, #20
 800ba64:	4688      	mov	r8, r1
 800ba66:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800ba68:	4604      	mov	r4, r0
{
 800ba6a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ba6c:	b940      	cbnz	r0, 800ba80 <xQueueGenericSend+0x22>
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	e7fe      	b.n	800ba7e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba80:	b951      	cbnz	r1, 800ba98 <xQueueGenericSend+0x3a>
 800ba82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800ba84:	b143      	cbz	r3, 800ba98 <xQueueGenericSend+0x3a>
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	e7fe      	b.n	800ba96 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba98:	2f02      	cmp	r7, #2
 800ba9a:	d10b      	bne.n	800bab4 <xQueueGenericSend+0x56>
 800ba9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d008      	beq.n	800bab4 <xQueueGenericSend+0x56>
 800baa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa6:	f383 8811 	msr	BASEPRI, r3
 800baaa:	f3bf 8f6f 	isb	sy
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	e7fe      	b.n	800bab2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bab4:	f000 ffc8 	bl	800ca48 <xTaskGetSchedulerState>
 800bab8:	4606      	mov	r6, r0
 800baba:	b950      	cbnz	r0, 800bad2 <xQueueGenericSend+0x74>
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	b14b      	cbz	r3, 800bad4 <xQueueGenericSend+0x76>
 800bac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac4:	f383 8811 	msr	BASEPRI, r3
 800bac8:	f3bf 8f6f 	isb	sy
 800bacc:	f3bf 8f4f 	dsb	sy
 800bad0:	e7fe      	b.n	800bad0 <xQueueGenericSend+0x72>
 800bad2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800bad4:	f04f 0900 	mov.w	r9, #0
 800bad8:	e037      	b.n	800bb4a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bada:	9d01      	ldr	r5, [sp, #4]
 800badc:	b91d      	cbnz	r5, 800bae6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800bade:	f7ff fd19 	bl	800b514 <vPortExitCritical>
			return errQUEUE_FULL;
 800bae2:	2000      	movs	r0, #0
 800bae4:	e052      	b.n	800bb8c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800bae6:	b916      	cbnz	r6, 800baee <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bae8:	a802      	add	r0, sp, #8
 800baea:	f000 ff5f 	bl	800c9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800baee:	f7ff fd11 	bl	800b514 <vPortExitCritical>
		vTaskSuspendAll();
 800baf2:	f000 fd0f 	bl	800c514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baf6:	f7ff fced 	bl	800b4d4 <vPortEnterCritical>
 800bafa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bafe:	2bff      	cmp	r3, #255	; 0xff
 800bb00:	d101      	bne.n	800bb06 <xQueueGenericSend+0xa8>
 800bb02:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800bb06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb0a:	2bff      	cmp	r3, #255	; 0xff
 800bb0c:	d101      	bne.n	800bb12 <xQueueGenericSend+0xb4>
 800bb0e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800bb12:	f7ff fcff 	bl	800b514 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb16:	a901      	add	r1, sp, #4
 800bb18:	a802      	add	r0, sp, #8
 800bb1a:	f000 ff53 	bl	800c9c4 <xTaskCheckForTimeOut>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d14a      	bne.n	800bbb8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb22:	f7ff fcd7 	bl	800b4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d131      	bne.n	800bb92 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bb2e:	f7ff fcf1 	bl	800b514 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb32:	9901      	ldr	r1, [sp, #4]
 800bb34:	f104 0010 	add.w	r0, r4, #16
 800bb38:	f000 febc 	bl	800c8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f7ff fe62 	bl	800b806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb42:	f000 fd8b 	bl	800c65c <xTaskResumeAll>
 800bb46:	b360      	cbz	r0, 800bba2 <xQueueGenericSend+0x144>
 800bb48:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800bb4a:	f7ff fcc3 	bl	800b4d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bb4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bb50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d301      	bcc.n	800bb5a <xQueueGenericSend+0xfc>
 800bb56:	2f02      	cmp	r7, #2
 800bb58:	d1bf      	bne.n	800bada <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f7ff fe07 	bl	800b772 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb66:	b11b      	cbz	r3, 800bb70 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bb6c:	f000 feda 	bl	800c924 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800bb70:	b148      	cbz	r0, 800bb86 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800bb72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bb86:	f7ff fcc5 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 800bb8a:	2001      	movs	r0, #1
}
 800bb8c:	b005      	add	sp, #20
 800bb8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800bb92:	f7ff fcbf 	bl	800b514 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bb96:	4620      	mov	r0, r4
 800bb98:	f7ff fe35 	bl	800b806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb9c:	f000 fd5e 	bl	800c65c <xTaskResumeAll>
 800bba0:	e7d2      	b.n	800bb48 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800bba2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	f3bf 8f6f 	isb	sy
 800bbb6:	e7c7      	b.n	800bb48 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f7ff fe24 	bl	800b806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbbe:	f000 fd4d 	bl	800c65c <xTaskResumeAll>
 800bbc2:	e78e      	b.n	800bae2 <xQueueGenericSend+0x84>

0800bbc4 <xQueueGenericSendFromISR>:
{
 800bbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbc8:	4689      	mov	r9, r1
 800bbca:	4690      	mov	r8, r2
 800bbcc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800bbce:	4604      	mov	r4, r0
 800bbd0:	b940      	cbnz	r0, 800bbe4 <xQueueGenericSendFromISR+0x20>
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	e7fe      	b.n	800bbe2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbe4:	b951      	cbnz	r1, 800bbfc <xQueueGenericSendFromISR+0x38>
 800bbe6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bbe8:	b143      	cbz	r3, 800bbfc <xQueueGenericSendFromISR+0x38>
 800bbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbee:	f383 8811 	msr	BASEPRI, r3
 800bbf2:	f3bf 8f6f 	isb	sy
 800bbf6:	f3bf 8f4f 	dsb	sy
 800bbfa:	e7fe      	b.n	800bbfa <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbfc:	2f02      	cmp	r7, #2
 800bbfe:	d10b      	bne.n	800bc18 <xQueueGenericSendFromISR+0x54>
 800bc00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d008      	beq.n	800bc18 <xQueueGenericSendFromISR+0x54>
 800bc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0a:	f383 8811 	msr	BASEPRI, r3
 800bc0e:	f3bf 8f6f 	isb	sy
 800bc12:	f3bf 8f4f 	dsb	sy
 800bc16:	e7fe      	b.n	800bc16 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc18:	f7ff fd72 	bl	800b700 <vPortValidateInterruptPriority>
	__asm volatile
 800bc1c:	f3ef 8611 	mrs	r6, BASEPRI
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc30:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800bc32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d301      	bcc.n	800bc3c <xQueueGenericSendFromISR+0x78>
 800bc38:	2f02      	cmp	r7, #2
 800bc3a:	d123      	bne.n	800bc84 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc3c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc40:	463a      	mov	r2, r7
 800bc42:	4649      	mov	r1, r9
 800bc44:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc46:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc4a:	f7ff fd92 	bl	800b772 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800bc4e:	1c6b      	adds	r3, r5, #1
 800bc50:	d113      	bne.n	800bc7a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc54:	b90b      	cbnz	r3, 800bc5a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800bc56:	2001      	movs	r0, #1
 800bc58:	e00b      	b.n	800bc72 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bc5e:	f000 fe61 	bl	800c924 <xTaskRemoveFromEventList>
 800bc62:	2800      	cmp	r0, #0
 800bc64:	d0f7      	beq.n	800bc56 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800bc66:	f1b8 0f00 	cmp.w	r8, #0
 800bc6a:	d0f4      	beq.n	800bc56 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800bc72:	f386 8811 	msr	BASEPRI, r6
}
 800bc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc7a:	3501      	adds	r5, #1
 800bc7c:	b26d      	sxtb	r5, r5
 800bc7e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800bc82:	e7e8      	b.n	800bc56 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7f4      	b.n	800bc72 <xQueueGenericSendFromISR+0xae>

0800bc88 <xQueueGiveFromISR>:
{
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	b940      	cbnz	r0, 800bca2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	e7fe      	b.n	800bca0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800bca2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bca4:	b143      	cbz	r3, 800bcb8 <xQueueGiveFromISR+0x30>
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	e7fe      	b.n	800bcb6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bcb8:	6803      	ldr	r3, [r0, #0]
 800bcba:	b953      	cbnz	r3, 800bcd2 <xQueueGiveFromISR+0x4a>
 800bcbc:	6883      	ldr	r3, [r0, #8]
 800bcbe:	b143      	cbz	r3, 800bcd2 <xQueueGiveFromISR+0x4a>
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	e7fe      	b.n	800bcd0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcd2:	f7ff fd15 	bl	800b700 <vPortValidateInterruptPriority>
	__asm volatile
 800bcd6:	f3ef 8611 	mrs	r6, BASEPRI
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bcec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d91c      	bls.n	800bd2c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcf2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcf6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800bcf8:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcfa:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bcfc:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800bcfe:	d110      	bne.n	800bd22 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd02:	b90b      	cbnz	r3, 800bd08 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800bd04:	2001      	movs	r0, #1
 800bd06:	e009      	b.n	800bd1c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bd0c:	f000 fe0a 	bl	800c924 <xTaskRemoveFromEventList>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	d0f7      	beq.n	800bd04 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800bd14:	2d00      	cmp	r5, #0
 800bd16:	d0f5      	beq.n	800bd04 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd18:	2001      	movs	r0, #1
 800bd1a:	6028      	str	r0, [r5, #0]
	__asm volatile
 800bd1c:	f386 8811 	msr	BASEPRI, r6
}
 800bd20:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd22:	3301      	adds	r3, #1
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd2a:	e7eb      	b.n	800bd04 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e7f5      	b.n	800bd1c <xQueueGiveFromISR+0x94>

0800bd30 <xQueueReceive>:
{
 800bd30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bd34:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800bd36:	4604      	mov	r4, r0
{
 800bd38:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bd3a:	b940      	cbnz	r0, 800bd4e <xQueueReceive+0x1e>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	e7fe      	b.n	800bd4c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd4e:	b951      	cbnz	r1, 800bd66 <xQueueReceive+0x36>
 800bd50:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bd52:	b143      	cbz	r3, 800bd66 <xQueueReceive+0x36>
 800bd54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	e7fe      	b.n	800bd64 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd66:	f000 fe6f 	bl	800ca48 <xTaskGetSchedulerState>
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	b950      	cbnz	r0, 800bd84 <xQueueReceive+0x54>
 800bd6e:	9b01      	ldr	r3, [sp, #4]
 800bd70:	b14b      	cbz	r3, 800bd86 <xQueueReceive+0x56>
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	e7fe      	b.n	800bd82 <xQueueReceive+0x52>
 800bd84:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800bd86:	f04f 0800 	mov.w	r8, #0
 800bd8a:	e03d      	b.n	800be08 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd8c:	9d01      	ldr	r5, [sp, #4]
 800bd8e:	b91d      	cbnz	r5, 800bd98 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800bd90:	f7ff fbc0 	bl	800b514 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800bd94:	2000      	movs	r0, #0
 800bd96:	e056      	b.n	800be46 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800bd98:	b916      	cbnz	r6, 800bda0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd9a:	a802      	add	r0, sp, #8
 800bd9c:	f000 fe06 	bl	800c9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bda0:	f7ff fbb8 	bl	800b514 <vPortExitCritical>
		vTaskSuspendAll();
 800bda4:	f000 fbb6 	bl	800c514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bda8:	f7ff fb94 	bl	800b4d4 <vPortEnterCritical>
 800bdac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bdb0:	2bff      	cmp	r3, #255	; 0xff
 800bdb2:	d101      	bne.n	800bdb8 <xQueueReceive+0x88>
 800bdb4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800bdb8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bdbc:	2bff      	cmp	r3, #255	; 0xff
 800bdbe:	d101      	bne.n	800bdc4 <xQueueReceive+0x94>
 800bdc0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800bdc4:	f7ff fba6 	bl	800b514 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdc8:	a901      	add	r1, sp, #4
 800bdca:	a802      	add	r0, sp, #8
 800bdcc:	f000 fdfa 	bl	800c9c4 <xTaskCheckForTimeOut>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	d141      	bne.n	800be58 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7ff fcc1 	bl	800b75c <prvIsQueueEmpty>
 800bdda:	b3b8      	cbz	r0, 800be4c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bddc:	9901      	ldr	r1, [sp, #4]
 800bdde:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bde2:	f000 fd67 	bl	800c8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff fd0d 	bl	800b806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bdec:	f000 fc36 	bl	800c65c <xTaskResumeAll>
 800bdf0:	b948      	cbnz	r0, 800be06 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800bdf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bdf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800be08:	f7ff fb64 	bl	800b4d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be0c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be0e:	2d00      	cmp	r5, #0
 800be10:	d0bc      	beq.n	800bd8c <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be12:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800be14:	4639      	mov	r1, r7
 800be16:	4620      	mov	r0, r4
 800be18:	f7ff fce0 	bl	800b7dc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800be1c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be1e:	6923      	ldr	r3, [r4, #16]
 800be20:	b173      	cbz	r3, 800be40 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be22:	f104 0010 	add.w	r0, r4, #16
 800be26:	f000 fd7d 	bl	800c924 <xTaskRemoveFromEventList>
 800be2a:	b148      	cbz	r0, 800be40 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800be2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800be30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be34:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800be40:	f7ff fb68 	bl	800b514 <vPortExitCritical>
				return pdPASS;
 800be44:	2001      	movs	r0, #1
}
 800be46:	b004      	add	sp, #16
 800be48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800be4c:	4620      	mov	r0, r4
 800be4e:	f7ff fcda 	bl	800b806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be52:	f000 fc03 	bl	800c65c <xTaskResumeAll>
 800be56:	e7d6      	b.n	800be06 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff fcd4 	bl	800b806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be5e:	f000 fbfd 	bl	800c65c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be62:	4620      	mov	r0, r4
 800be64:	f7ff fc7a 	bl	800b75c <prvIsQueueEmpty>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d0cc      	beq.n	800be06 <xQueueReceive+0xd6>
 800be6c:	e792      	b.n	800bd94 <xQueueReceive+0x64>

0800be6e <xQueueSemaphoreTake>:
{
 800be6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be70:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800be72:	4604      	mov	r4, r0
{
 800be74:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800be76:	b940      	cbnz	r0, 800be8a <xQueueSemaphoreTake+0x1c>
 800be78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be7c:	f383 8811 	msr	BASEPRI, r3
 800be80:	f3bf 8f6f 	isb	sy
 800be84:	f3bf 8f4f 	dsb	sy
 800be88:	e7fe      	b.n	800be88 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800be8a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800be8c:	b145      	cbz	r5, 800bea0 <xQueueSemaphoreTake+0x32>
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	e7fe      	b.n	800be9e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bea0:	f000 fdd2 	bl	800ca48 <xTaskGetSchedulerState>
 800bea4:	4606      	mov	r6, r0
 800bea6:	b950      	cbnz	r0, 800bebe <xQueueSemaphoreTake+0x50>
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	b15b      	cbz	r3, 800bec4 <xQueueSemaphoreTake+0x56>
 800beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	e7fe      	b.n	800bebc <xQueueSemaphoreTake+0x4e>
 800bebe:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800bec0:	2700      	movs	r7, #0
 800bec2:	e053      	b.n	800bf6c <xQueueSemaphoreTake+0xfe>
 800bec4:	4605      	mov	r5, r0
 800bec6:	e7fb      	b.n	800bec0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	b963      	cbnz	r3, 800bee6 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800becc:	b145      	cbz	r5, 800bee0 <xQueueSemaphoreTake+0x72>
 800bece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	e7fe      	b.n	800bede <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800bee0:	f7ff fb18 	bl	800b514 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bee4:	e062      	b.n	800bfac <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800bee6:	b916      	cbnz	r6, 800beee <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bee8:	a802      	add	r0, sp, #8
 800beea:	f000 fd5f 	bl	800c9ac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800beee:	f7ff fb11 	bl	800b514 <vPortExitCritical>
		vTaskSuspendAll();
 800bef2:	f000 fb0f 	bl	800c514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bef6:	f7ff faed 	bl	800b4d4 <vPortEnterCritical>
 800befa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800befe:	2bff      	cmp	r3, #255	; 0xff
 800bf00:	d101      	bne.n	800bf06 <xQueueSemaphoreTake+0x98>
 800bf02:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800bf06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bf0a:	2bff      	cmp	r3, #255	; 0xff
 800bf0c:	d101      	bne.n	800bf12 <xQueueSemaphoreTake+0xa4>
 800bf0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf12:	f7ff faff 	bl	800b514 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf16:	a901      	add	r1, sp, #4
 800bf18:	a802      	add	r0, sp, #8
 800bf1a:	f000 fd53 	bl	800c9c4 <xTaskCheckForTimeOut>
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	d14d      	bne.n	800bfbe <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf22:	4620      	mov	r0, r4
 800bf24:	f7ff fc1a 	bl	800b75c <prvIsQueueEmpty>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d042      	beq.n	800bfb2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf2c:	6823      	ldr	r3, [r4, #0]
 800bf2e:	b93b      	cbnz	r3, 800bf40 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800bf30:	f7ff fad0 	bl	800b4d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf34:	68a0      	ldr	r0, [r4, #8]
 800bf36:	f000 fd97 	bl	800ca68 <xTaskPriorityInherit>
 800bf3a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800bf3c:	f7ff faea 	bl	800b514 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf40:	9901      	ldr	r1, [sp, #4]
 800bf42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bf46:	f000 fcb5 	bl	800c8b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f7ff fc5b 	bl	800b806 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf50:	f000 fb84 	bl	800c65c <xTaskResumeAll>
 800bf54:	b948      	cbnz	r0, 800bf6a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800bf56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bf5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800bf6c:	f7ff fab2 	bl	800b4d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0a8      	beq.n	800bec8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf76:	3b01      	subs	r3, #1
 800bf78:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf7a:	6823      	ldr	r3, [r4, #0]
 800bf7c:	b913      	cbnz	r3, 800bf84 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf7e:	f000 fe49 	bl	800cc14 <pvTaskIncrementMutexHeldCount>
 800bf82:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	b173      	cbz	r3, 800bfa6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf88:	f104 0010 	add.w	r0, r4, #16
 800bf8c:	f000 fcca 	bl	800c924 <xTaskRemoveFromEventList>
 800bf90:	b148      	cbz	r0, 800bfa6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800bf92:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800bfa6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800bfa8:	f7ff fab4 	bl	800b514 <vPortExitCritical>
}
 800bfac:	4628      	mov	r0, r5
 800bfae:	b005      	add	sp, #20
 800bfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f7ff fc27 	bl	800b806 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfb8:	f000 fb50 	bl	800c65c <xTaskResumeAll>
 800bfbc:	e7d5      	b.n	800bf6a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f7ff fc21 	bl	800b806 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfc4:	f000 fb4a 	bl	800c65c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7ff fbc7 	bl	800b75c <prvIsQueueEmpty>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d0cb      	beq.n	800bf6a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800bfd2:	2d00      	cmp	r5, #0
 800bfd4:	d0ea      	beq.n	800bfac <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800bfd6:	f7ff fa7d 	bl	800b4d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfda:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfdc:	b119      	cbz	r1, 800bfe6 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bfe0:	6819      	ldr	r1, [r3, #0]
 800bfe2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfe6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800bfe8:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfea:	f000 fdc1 	bl	800cb70 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800bfee:	f7ff fa91 	bl	800b514 <vPortExitCritical>
 800bff2:	e7db      	b.n	800bfac <xQueueSemaphoreTake+0x13e>

0800bff4 <xQueueReceiveFromISR>:
{
 800bff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bff8:	4689      	mov	r9, r1
 800bffa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800bffc:	4605      	mov	r5, r0
 800bffe:	b940      	cbnz	r0, 800c012 <xQueueReceiveFromISR+0x1e>
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	e7fe      	b.n	800c010 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c012:	b951      	cbnz	r1, 800c02a <xQueueReceiveFromISR+0x36>
 800c014:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c016:	b143      	cbz	r3, 800c02a <xQueueReceiveFromISR+0x36>
 800c018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01c:	f383 8811 	msr	BASEPRI, r3
 800c020:	f3bf 8f6f 	isb	sy
 800c024:	f3bf 8f4f 	dsb	sy
 800c028:	e7fe      	b.n	800c028 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c02a:	f7ff fb69 	bl	800b700 <vPortValidateInterruptPriority>
	__asm volatile
 800c02e:	f3ef 8711 	mrs	r7, BASEPRI
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c042:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c044:	b31c      	cbz	r4, 800c08e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c046:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c04a:	4649      	mov	r1, r9
 800c04c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c04e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c050:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c052:	f7ff fbc3 	bl	800b7dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c056:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800c058:	1c73      	adds	r3, r6, #1
 800c05a:	d113      	bne.n	800c084 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c05c:	692b      	ldr	r3, [r5, #16]
 800c05e:	b90b      	cbnz	r3, 800c064 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800c060:	2001      	movs	r0, #1
 800c062:	e00b      	b.n	800c07c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c064:	f105 0010 	add.w	r0, r5, #16
 800c068:	f000 fc5c 	bl	800c924 <xTaskRemoveFromEventList>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d0f7      	beq.n	800c060 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	d0f4      	beq.n	800c060 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c076:	2001      	movs	r0, #1
 800c078:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800c07c:	f387 8811 	msr	BASEPRI, r7
}
 800c080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c084:	3601      	adds	r6, #1
 800c086:	b276      	sxtb	r6, r6
 800c088:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800c08c:	e7e8      	b.n	800c060 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800c08e:	4620      	mov	r0, r4
 800c090:	e7f4      	b.n	800c07c <xQueueReceiveFromISR+0x88>
	...

0800c094 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c094:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c096:	4a07      	ldr	r2, [pc, #28]	; (800c0b4 <vQueueAddToRegistry+0x20>)
	{
 800c098:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c09a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800c09e:	b92c      	cbnz	r4, 800c0ac <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c0a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0a8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0aa:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	2b08      	cmp	r3, #8
 800c0b0:	d1f3      	bne.n	800c09a <vQueueAddToRegistry+0x6>
 800c0b2:	e7fa      	b.n	800c0aa <vQueueAddToRegistry+0x16>
 800c0b4:	2400ef1c 	.word	0x2400ef1c

0800c0b8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0b8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0ba:	4a08      	ldr	r2, [pc, #32]	; (800c0dc <vQueueUnregisterQueue+0x24>)
	{
 800c0bc:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c0be:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c0c2:	684c      	ldr	r4, [r1, #4]
 800c0c4:	4284      	cmp	r4, r0
 800c0c6:	d104      	bne.n	800c0d2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c0c8:	2000      	movs	r0, #0
 800c0ca:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c0ce:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c0d0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	2b08      	cmp	r3, #8
 800c0d6:	d1f2      	bne.n	800c0be <vQueueUnregisterQueue+0x6>
 800c0d8:	e7fa      	b.n	800c0d0 <vQueueUnregisterQueue+0x18>
 800c0da:	bf00      	nop
 800c0dc:	2400ef1c 	.word	0x2400ef1c

0800c0e0 <vQueueDelete>:
{
 800c0e0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	b940      	cbnz	r0, 800c0f8 <vQueueDelete+0x18>
	__asm volatile
 800c0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ea:	f383 8811 	msr	BASEPRI, r3
 800c0ee:	f3bf 8f6f 	isb	sy
 800c0f2:	f3bf 8f4f 	dsb	sy
 800c0f6:	e7fe      	b.n	800c0f6 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800c0f8:	f7ff ffde 	bl	800c0b8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c0fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c100:	b923      	cbnz	r3, 800c10c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800c102:	4620      	mov	r0, r4
}
 800c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c108:	f7ff b900 	b.w	800b30c <vPortFree>
}
 800c10c:	bd10      	pop	{r4, pc}

0800c10e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c10e:	b570      	push	{r4, r5, r6, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c116:	f7ff f9dd 	bl	800b4d4 <vPortEnterCritical>
 800c11a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c11e:	2bff      	cmp	r3, #255	; 0xff
 800c120:	d102      	bne.n	800c128 <vQueueWaitForMessageRestricted+0x1a>
 800c122:	2300      	movs	r3, #0
 800c124:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800c128:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c12c:	2bff      	cmp	r3, #255	; 0xff
 800c12e:	d102      	bne.n	800c136 <vQueueWaitForMessageRestricted+0x28>
 800c130:	2300      	movs	r3, #0
 800c132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c136:	f7ff f9ed 	bl	800b514 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c13a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c13c:	b92b      	cbnz	r3, 800c14a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c13e:	4632      	mov	r2, r6
 800c140:	4629      	mov	r1, r5
 800c142:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c146:	f000 fbcf 	bl	800c8e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c14a:	4620      	mov	r0, r4
	}
 800c14c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c150:	f7ff bb59 	b.w	800b806 <prvUnlockQueue>

0800c154 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c158:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c15a:	f7ff f9bb 	bl	800b4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c15e:	4b2f      	ldr	r3, [pc, #188]	; (800c21c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c160:	4e2f      	ldr	r6, [pc, #188]	; (800c220 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	4f2f      	ldr	r7, [pc, #188]	; (800c224 <prvAddNewTaskToReadyList+0xd0>)
 800c166:	3201      	adds	r2, #1
 800c168:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c16a:	6835      	ldr	r5, [r6, #0]
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	d14a      	bne.n	800c206 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c170:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d11f      	bne.n	800c1b8 <prvAddNewTaskToReadyList+0x64>
 800c178:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c17a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c17c:	4640      	mov	r0, r8
 800c17e:	f7ff f903 	bl	800b388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c182:	f108 0814 	add.w	r8, r8, #20
 800c186:	2d38      	cmp	r5, #56	; 0x38
 800c188:	d1f7      	bne.n	800c17a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c18a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c24c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c18e:	4d26      	ldr	r5, [pc, #152]	; (800c228 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c190:	4640      	mov	r0, r8
 800c192:	f7ff f8f9 	bl	800b388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c196:	4628      	mov	r0, r5
 800c198:	f7ff f8f6 	bl	800b388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c19c:	4823      	ldr	r0, [pc, #140]	; (800c22c <prvAddNewTaskToReadyList+0xd8>)
 800c19e:	f7ff f8f3 	bl	800b388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c1a2:	4823      	ldr	r0, [pc, #140]	; (800c230 <prvAddNewTaskToReadyList+0xdc>)
 800c1a4:	f7ff f8f0 	bl	800b388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c1a8:	4822      	ldr	r0, [pc, #136]	; (800c234 <prvAddNewTaskToReadyList+0xe0>)
 800c1aa:	f7ff f8ed 	bl	800b388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c1ae:	4b22      	ldr	r3, [pc, #136]	; (800c238 <prvAddNewTaskToReadyList+0xe4>)
 800c1b0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c1b4:	4b21      	ldr	r3, [pc, #132]	; (800c23c <prvAddNewTaskToReadyList+0xe8>)
 800c1b6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c1b8:	4a21      	ldr	r2, [pc, #132]	; (800c240 <prvAddNewTaskToReadyList+0xec>)
 800c1ba:	6813      	ldr	r3, [r2, #0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c1c0:	4a20      	ldr	r2, [pc, #128]	; (800c244 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c1c2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c1c4:	6811      	ldr	r1, [r2, #0]
 800c1c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c1c8:	428b      	cmp	r3, r1
 800c1ca:	d900      	bls.n	800c1ce <prvAddNewTaskToReadyList+0x7a>
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	2014      	movs	r0, #20
 800c1d0:	1d21      	adds	r1, r4, #4
 800c1d2:	fb00 7003 	mla	r0, r0, r3, r7
 800c1d6:	f7ff f8e5 	bl	800b3a4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c1da:	f7ff f99b 	bl	800b514 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c1de:	4b1a      	ldr	r3, [pc, #104]	; (800c248 <prvAddNewTaskToReadyList+0xf4>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	b173      	cbz	r3, 800c202 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1e4:	6833      	ldr	r3, [r6, #0]
 800c1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d209      	bcs.n	800c202 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c1ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c1f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	f3bf 8f6f 	isb	sy
}
 800c202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c206:	4b10      	ldr	r3, [pc, #64]	; (800c248 <prvAddNewTaskToReadyList+0xf4>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1d4      	bne.n	800c1b8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c20e:	6833      	ldr	r3, [r6, #0]
 800c210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c214:	429a      	cmp	r2, r3
 800c216:	d8cf      	bhi.n	800c1b8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c218:	6034      	str	r4, [r6, #0]
 800c21a:	e7cd      	b.n	800c1b8 <prvAddNewTaskToReadyList+0x64>
 800c21c:	2400f3c8 	.word	0x2400f3c8
 800c220:	2400ef5c 	.word	0x2400ef5c
 800c224:	2400ef68 	.word	0x2400ef68
 800c228:	2400f3f0 	.word	0x2400f3f0
 800c22c:	2400f410 	.word	0x2400f410
 800c230:	2400f43c 	.word	0x2400f43c
 800c234:	2400f428 	.word	0x2400f428
 800c238:	2400ef60 	.word	0x2400ef60
 800c23c:	2400ef64 	.word	0x2400ef64
 800c240:	2400f3d4 	.word	0x2400f3d4
 800c244:	2400f3d8 	.word	0x2400f3d8
 800c248:	2400f424 	.word	0x2400f424
 800c24c:	2400f3dc 	.word	0x2400f3dc

0800c250 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c252:	4b15      	ldr	r3, [pc, #84]	; (800c2a8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c254:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c256:	4e15      	ldr	r6, [pc, #84]	; (800c2ac <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c258:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c25a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c25c:	6830      	ldr	r0, [r6, #0]
 800c25e:	3004      	adds	r0, #4
 800c260:	f7ff f8c3 	bl	800b3ea <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c264:	1c63      	adds	r3, r4, #1
 800c266:	d107      	bne.n	800c278 <prvAddCurrentTaskToDelayedList+0x28>
 800c268:	b137      	cbz	r7, 800c278 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c26a:	6831      	ldr	r1, [r6, #0]
 800c26c:	4810      	ldr	r0, [pc, #64]	; (800c2b0 <prvAddCurrentTaskToDelayedList+0x60>)
 800c26e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c274:	f7ff b896 	b.w	800b3a4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c278:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c27a:	6833      	ldr	r3, [r6, #0]
 800c27c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c27e:	d307      	bcc.n	800c290 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c280:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <prvAddCurrentTaskToDelayedList+0x64>)
 800c282:	6818      	ldr	r0, [r3, #0]
 800c284:	6831      	ldr	r1, [r6, #0]
}
 800c286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c28a:	3104      	adds	r1, #4
 800c28c:	f7ff b896 	b.w	800b3bc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c290:	4b09      	ldr	r3, [pc, #36]	; (800c2b8 <prvAddCurrentTaskToDelayedList+0x68>)
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	6831      	ldr	r1, [r6, #0]
 800c296:	3104      	adds	r1, #4
 800c298:	f7ff f890 	bl	800b3bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c29c:	4b07      	ldr	r3, [pc, #28]	; (800c2bc <prvAddCurrentTaskToDelayedList+0x6c>)
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	42a2      	cmp	r2, r4
 800c2a2:	d900      	bls.n	800c2a6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c2a4:	601c      	str	r4, [r3, #0]
}
 800c2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2a8:	2400f450 	.word	0x2400f450
 800c2ac:	2400ef5c 	.word	0x2400ef5c
 800c2b0:	2400f428 	.word	0x2400f428
 800c2b4:	2400ef64 	.word	0x2400ef64
 800c2b8:	2400ef60 	.word	0x2400ef60
 800c2bc:	2400f404 	.word	0x2400f404

0800c2c0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2c0:	4a06      	ldr	r2, [pc, #24]	; (800c2dc <prvResetNextTaskUnblockTime+0x1c>)
 800c2c2:	6813      	ldr	r3, [r2, #0]
 800c2c4:	6819      	ldr	r1, [r3, #0]
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <prvResetNextTaskUnblockTime+0x20>)
 800c2c8:	b919      	cbnz	r1, 800c2d2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c2ca:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2ce:	601a      	str	r2, [r3, #0]
}
 800c2d0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d2:	6812      	ldr	r2, [r2, #0]
 800c2d4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c2d6:	68d2      	ldr	r2, [r2, #12]
 800c2d8:	6852      	ldr	r2, [r2, #4]
 800c2da:	e7f8      	b.n	800c2ce <prvResetNextTaskUnblockTime+0xe>
 800c2dc:	2400ef60 	.word	0x2400ef60
 800c2e0:	2400f404 	.word	0x2400f404

0800c2e4 <prvDeleteTCB>:
	{
 800c2e4:	b510      	push	{r4, lr}
 800c2e6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2e8:	3058      	adds	r0, #88	; 0x58
 800c2ea:	f013 fbeb 	bl	801fac4 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2ee:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800c2f2:	b93b      	cbnz	r3, 800c304 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800c2f4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c2f6:	f7ff f809 	bl	800b30c <vPortFree>
				vPortFree( pxTCB );
 800c2fa:	4620      	mov	r0, r4
	}
 800c2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c300:	f7ff b804 	b.w	800b30c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c304:	2b01      	cmp	r3, #1
 800c306:	d0f8      	beq.n	800c2fa <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d008      	beq.n	800c31e <prvDeleteTCB+0x3a>
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	e7fe      	b.n	800c31c <prvDeleteTCB+0x38>
	}
 800c31e:	bd10      	pop	{r4, pc}

0800c320 <prvIdleTask>:
{
 800c320:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c322:	4c14      	ldr	r4, [pc, #80]	; (800c374 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c324:	4f14      	ldr	r7, [pc, #80]	; (800c378 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c326:	4d15      	ldr	r5, [pc, #84]	; (800c37c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	b983      	cbnz	r3, 800c34e <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c32c:	4b14      	ldr	r3, [pc, #80]	; (800c380 <prvIdleTask+0x60>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d909      	bls.n	800c348 <prvIdleTask+0x28>
				taskYIELD();
 800c334:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c33c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c348:	f7f4 f9e6 	bl	8000718 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c34c:	e7eb      	b.n	800c326 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c34e:	f7ff f8c1 	bl	800b4d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c356:	1d30      	adds	r0, r6, #4
 800c358:	f7ff f847 	bl	800b3ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	3b01      	subs	r3, #1
 800c360:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	3b01      	subs	r3, #1
 800c366:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c368:	f7ff f8d4 	bl	800b514 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff ffb9 	bl	800c2e4 <prvDeleteTCB>
 800c372:	e7d9      	b.n	800c328 <prvIdleTask+0x8>
 800c374:	2400f3cc 	.word	0x2400f3cc
 800c378:	2400f43c 	.word	0x2400f43c
 800c37c:	2400f3c8 	.word	0x2400f3c8
 800c380:	2400ef68 	.word	0x2400ef68

0800c384 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c388:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c38c:	4606      	mov	r6, r0
 800c38e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c390:	21a5      	movs	r1, #165	; 0xa5
 800c392:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c394:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c396:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c39a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c39e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800c3a0:	f012 ffac 	bl	801f2fc <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c3a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c3a6:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3a8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800c3ac:	2d00      	cmp	r5, #0
 800c3ae:	d042      	beq.n	800c436 <prvInitialiseNewTask.constprop.0+0xb2>
 800c3b0:	1e6b      	subs	r3, r5, #1
 800c3b2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800c3b6:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3b8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800c3bc:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800c3c0:	b108      	cbz	r0, 800c3c6 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3c2:	42ab      	cmp	r3, r5
 800c3c4:	d1f8      	bne.n	800c3b8 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3cc:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c3ce:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3d2:	1d20      	adds	r0, r4, #4
 800c3d4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c3d6:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800c3da:	bf28      	it	cs
 800c3dc:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c3de:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c3e0:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3e2:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c3e6:	f7fe ffda 	bl	800b39e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c3ea:	f104 0018 	add.w	r0, r4, #24
 800c3ee:	f7fe ffd6 	bl	800b39e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c3f2:	2260      	movs	r2, #96	; 0x60
 800c3f4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800c3f6:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c3fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c3fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c400:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c402:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c404:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c408:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c40c:	f012 ff76 	bl	801f2fc <memset>
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c412:	463a      	mov	r2, r7
 800c414:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c416:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c418:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c41a:	4b09      	ldr	r3, [pc, #36]	; (800c440 <prvInitialiseNewTask.constprop.0+0xbc>)
 800c41c:	6623      	str	r3, [r4, #96]	; 0x60
 800c41e:	4b09      	ldr	r3, [pc, #36]	; (800c444 <prvInitialiseNewTask.constprop.0+0xc0>)
 800c420:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c422:	f7ff f831 	bl	800b488 <pxPortInitialiseStack>
 800c426:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c428:	f1b8 0f00 	cmp.w	r8, #0
 800c42c:	d001      	beq.n	800c432 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c42e:	f8c8 4000 	str.w	r4, [r8]
}
 800c432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c436:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800c43a:	e7c7      	b.n	800c3cc <prvInitialiseNewTask.constprop.0+0x48>
 800c43c:	080236bc 	.word	0x080236bc
 800c440:	080236dc 	.word	0x080236dc
 800c444:	0802369c 	.word	0x0802369c

0800c448 <xTaskCreateStatic>:
	{
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c450:	b945      	cbnz	r5, 800c464 <xTaskCreateStatic+0x1c>
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	e7fe      	b.n	800c462 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c464:	b944      	cbnz	r4, 800c478 <xTaskCreateStatic+0x30>
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	e7fe      	b.n	800c476 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c478:	26c0      	movs	r6, #192	; 0xc0
 800c47a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c47c:	9e05      	ldr	r6, [sp, #20]
 800c47e:	2ec0      	cmp	r6, #192	; 0xc0
 800c480:	d008      	beq.n	800c494 <xTaskCreateStatic+0x4c>
 800c482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c486:	f383 8811 	msr	BASEPRI, r3
 800c48a:	f3bf 8f6f 	isb	sy
 800c48e:	f3bf 8f4f 	dsb	sy
 800c492:	e7fe      	b.n	800c492 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c494:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c496:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c498:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c49a:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c49e:	ad04      	add	r5, sp, #16
 800c4a0:	9402      	str	r4, [sp, #8]
 800c4a2:	9501      	str	r5, [sp, #4]
 800c4a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c4a6:	9500      	str	r5, [sp, #0]
 800c4a8:	f7ff ff6c 	bl	800c384 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f7ff fe51 	bl	800c154 <prvAddNewTaskToReadyList>
	}
 800c4b2:	9804      	ldr	r0, [sp, #16]
 800c4b4:	b006      	add	sp, #24
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}

0800c4b8 <xTaskCreate>:
	{
 800c4b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4607      	mov	r7, r0
 800c4be:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4c0:	0090      	lsls	r0, r2, #2
	{
 800c4c2:	4688      	mov	r8, r1
 800c4c4:	4616      	mov	r6, r2
 800c4c6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c4c8:	f7fe fe88 	bl	800b1dc <pvPortMalloc>
			if( pxStack != NULL )
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	b1e8      	cbz	r0, 800c50c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4d0:	20c0      	movs	r0, #192	; 0xc0
 800c4d2:	f7fe fe83 	bl	800b1dc <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c4d6:	4604      	mov	r4, r0
 800c4d8:	b1a8      	cbz	r0, 800c506 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4da:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c4dc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4de:	4632      	mov	r2, r6
 800c4e0:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4e2:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e8:	9002      	str	r0, [sp, #8]
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	464b      	mov	r3, r9
 800c4f4:	f7ff ff46 	bl	800c384 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f7ff fe2b 	bl	800c154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4fe:	2001      	movs	r0, #1
	}
 800c500:	b005      	add	sp, #20
 800c502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800c506:	4628      	mov	r0, r5
 800c508:	f7fe ff00 	bl	800b30c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c50c:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800c510:	e7f6      	b.n	800c500 <xTaskCreate+0x48>
	...

0800c514 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c514:	4a02      	ldr	r2, [pc, #8]	; (800c520 <vTaskSuspendAll+0xc>)
 800c516:	6813      	ldr	r3, [r2, #0]
 800c518:	3301      	adds	r3, #1
 800c51a:	6013      	str	r3, [r2, #0]
}
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	2400f3d0 	.word	0x2400f3d0

0800c524 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c524:	4b01      	ldr	r3, [pc, #4]	; (800c52c <xTaskGetTickCount+0x8>)
 800c526:	6818      	ldr	r0, [r3, #0]
}
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	2400f450 	.word	0x2400f450

0800c530 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c530:	4b3f      	ldr	r3, [pc, #252]	; (800c630 <xTaskIncrementTick+0x100>)
 800c532:	681b      	ldr	r3, [r3, #0]
{
 800c534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d172      	bne.n	800c622 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c53c:	4b3d      	ldr	r3, [pc, #244]	; (800c634 <xTaskIncrementTick+0x104>)
 800c53e:	681d      	ldr	r5, [r3, #0]
 800c540:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c542:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c544:	b9bd      	cbnz	r5, 800c576 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c546:	4b3c      	ldr	r3, [pc, #240]	; (800c638 <xTaskIncrementTick+0x108>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	6812      	ldr	r2, [r2, #0]
 800c54c:	b142      	cbz	r2, 800c560 <xTaskIncrementTick+0x30>
 800c54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	e7fe      	b.n	800c55e <xTaskIncrementTick+0x2e>
 800c560:	4a36      	ldr	r2, [pc, #216]	; (800c63c <xTaskIncrementTick+0x10c>)
 800c562:	6819      	ldr	r1, [r3, #0]
 800c564:	6810      	ldr	r0, [r2, #0]
 800c566:	6018      	str	r0, [r3, #0]
 800c568:	6011      	str	r1, [r2, #0]
 800c56a:	4a35      	ldr	r2, [pc, #212]	; (800c640 <xTaskIncrementTick+0x110>)
 800c56c:	6813      	ldr	r3, [r2, #0]
 800c56e:	3301      	adds	r3, #1
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	f7ff fea5 	bl	800c2c0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c576:	4e33      	ldr	r6, [pc, #204]	; (800c644 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c578:	2400      	movs	r4, #0
 800c57a:	4f33      	ldr	r7, [pc, #204]	; (800c648 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c57c:	6833      	ldr	r3, [r6, #0]
 800c57e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800c654 <xTaskIncrementTick+0x124>
 800c582:	429d      	cmp	r5, r3
 800c584:	d211      	bcs.n	800c5aa <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c586:	f8d8 3000 	ldr.w	r3, [r8]
 800c58a:	2214      	movs	r2, #20
 800c58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58e:	4353      	muls	r3, r2
 800c590:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800c592:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800c594:	4b2d      	ldr	r3, [pc, #180]	; (800c64c <xTaskIncrementTick+0x11c>)
 800c596:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800c598:	bf28      	it	cs
 800c59a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bf18      	it	ne
 800c5a0:	2401      	movne	r4, #1
}
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	b003      	add	sp, #12
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c638 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c5ae:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c658 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5b2:	f8d9 3000 	ldr.w	r3, [r9]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	b91b      	cbnz	r3, 800c5c2 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c5be:	6033      	str	r3, [r6, #0]
					break;
 800c5c0:	e7e1      	b.n	800c586 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5c2:	f8d9 3000 	ldr.w	r3, [r9]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c5cc:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800c5d0:	4295      	cmp	r5, r2
 800c5d2:	d201      	bcs.n	800c5d8 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800c5d4:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c5d6:	e7d6      	b.n	800c586 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d8:	f10b 0104 	add.w	r1, fp, #4
 800c5dc:	4608      	mov	r0, r1
 800c5de:	9101      	str	r1, [sp, #4]
 800c5e0:	f7fe ff03 	bl	800b3ea <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c5e4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800c5e8:	9901      	ldr	r1, [sp, #4]
 800c5ea:	b122      	cbz	r2, 800c5f6 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ec:	f10b 0018 	add.w	r0, fp, #24
 800c5f0:	f7fe fefb 	bl	800b3ea <uxListRemove>
 800c5f4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800c5f6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800c5fa:	f8da 2000 	ldr.w	r2, [sl]
 800c5fe:	4290      	cmp	r0, r2
 800c600:	d901      	bls.n	800c606 <xTaskIncrementTick+0xd6>
 800c602:	f8ca 0000 	str.w	r0, [sl]
 800c606:	2314      	movs	r3, #20
 800c608:	fb03 7000 	mla	r0, r3, r0, r7
 800c60c:	f7fe feca 	bl	800b3a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c610:	f8d8 1000 	ldr.w	r1, [r8]
 800c614:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800c618:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800c61a:	429a      	cmp	r2, r3
 800c61c:	bf28      	it	cs
 800c61e:	2401      	movcs	r4, #1
 800c620:	e7c7      	b.n	800c5b2 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800c622:	4a0b      	ldr	r2, [pc, #44]	; (800c650 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800c624:	2400      	movs	r4, #0
		++xPendedTicks;
 800c626:	6813      	ldr	r3, [r2, #0]
 800c628:	3301      	adds	r3, #1
 800c62a:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800c62c:	e7b9      	b.n	800c5a2 <xTaskIncrementTick+0x72>
 800c62e:	bf00      	nop
 800c630:	2400f3d0 	.word	0x2400f3d0
 800c634:	2400f450 	.word	0x2400f450
 800c638:	2400ef60 	.word	0x2400ef60
 800c63c:	2400ef64 	.word	0x2400ef64
 800c640:	2400f408 	.word	0x2400f408
 800c644:	2400f404 	.word	0x2400f404
 800c648:	2400ef68 	.word	0x2400ef68
 800c64c:	2400f454 	.word	0x2400f454
 800c650:	2400f40c 	.word	0x2400f40c
 800c654:	2400ef5c 	.word	0x2400ef5c
 800c658:	2400f3d8 	.word	0x2400f3d8

0800c65c <xTaskResumeAll>:
{
 800c65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800c65e:	4c31      	ldr	r4, [pc, #196]	; (800c724 <xTaskResumeAll+0xc8>)
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	b943      	cbnz	r3, 800c676 <xTaskResumeAll+0x1a>
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	f383 8811 	msr	BASEPRI, r3
 800c66c:	f3bf 8f6f 	isb	sy
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	e7fe      	b.n	800c674 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800c676:	f7fe ff2d 	bl	800b4d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	3b01      	subs	r3, #1
 800c67e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c680:	6824      	ldr	r4, [r4, #0]
 800c682:	b12c      	cbz	r4, 800c690 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800c684:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c686:	f7fe ff45 	bl	800b514 <vPortExitCritical>
}
 800c68a:	4620      	mov	r0, r4
 800c68c:	b003      	add	sp, #12
 800c68e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c690:	4b25      	ldr	r3, [pc, #148]	; (800c728 <xTaskResumeAll+0xcc>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0f5      	beq.n	800c684 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c698:	4d24      	ldr	r5, [pc, #144]	; (800c72c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800c69a:	4e25      	ldr	r6, [pc, #148]	; (800c730 <xTaskResumeAll+0xd4>)
 800c69c:	4f25      	ldr	r7, [pc, #148]	; (800c734 <xTaskResumeAll+0xd8>)
 800c69e:	e01e      	b.n	800c6de <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a0:	68eb      	ldr	r3, [r5, #12]
 800c6a2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6a4:	f104 0018 	add.w	r0, r4, #24
 800c6a8:	f7fe fe9f 	bl	800b3ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6ac:	1d21      	adds	r1, r4, #4
 800c6ae:	4608      	mov	r0, r1
 800c6b0:	9101      	str	r1, [sp, #4]
 800c6b2:	f7fe fe9a 	bl	800b3ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c6b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c6b8:	6832      	ldr	r2, [r6, #0]
 800c6ba:	9901      	ldr	r1, [sp, #4]
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d900      	bls.n	800c6c2 <xTaskResumeAll+0x66>
 800c6c0:	6033      	str	r3, [r6, #0]
 800c6c2:	2014      	movs	r0, #20
 800c6c4:	fb00 7003 	mla	r0, r0, r3, r7
 800c6c8:	f7fe fe6c 	bl	800b3a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c6cc:	4b1a      	ldr	r3, [pc, #104]	; (800c738 <xTaskResumeAll+0xdc>)
 800c6ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d302      	bcc.n	800c6de <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800c6d8:	4b18      	ldr	r3, [pc, #96]	; (800c73c <xTaskResumeAll+0xe0>)
 800c6da:	2201      	movs	r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1dd      	bne.n	800c6a0 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800c6e4:	b10c      	cbz	r4, 800c6ea <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800c6e6:	f7ff fdeb 	bl	800c2c0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c6ea:	4d15      	ldr	r5, [pc, #84]	; (800c740 <xTaskResumeAll+0xe4>)
 800c6ec:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c6ee:	b144      	cbz	r4, 800c702 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800c6f0:	4e12      	ldr	r6, [pc, #72]	; (800c73c <xTaskResumeAll+0xe0>)
 800c6f2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c6f4:	f7ff ff1c 	bl	800c530 <xTaskIncrementTick>
 800c6f8:	b100      	cbz	r0, 800c6fc <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800c6fa:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c6fc:	3c01      	subs	r4, #1
 800c6fe:	d1f9      	bne.n	800c6f4 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800c700:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c702:	4b0e      	ldr	r3, [pc, #56]	; (800c73c <xTaskResumeAll+0xe0>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0bc      	beq.n	800c684 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800c70a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c70e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c712:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c71e:	2401      	movs	r4, #1
 800c720:	e7b1      	b.n	800c686 <xTaskResumeAll+0x2a>
 800c722:	bf00      	nop
 800c724:	2400f3d0 	.word	0x2400f3d0
 800c728:	2400f3c8 	.word	0x2400f3c8
 800c72c:	2400f410 	.word	0x2400f410
 800c730:	2400f3d8 	.word	0x2400f3d8
 800c734:	2400ef68 	.word	0x2400ef68
 800c738:	2400ef5c 	.word	0x2400ef5c
 800c73c:	2400f454 	.word	0x2400f454
 800c740:	2400f40c 	.word	0x2400f40c

0800c744 <vTaskSetApplicationTaskTag>:
	{
 800c744:	b538      	push	{r3, r4, r5, lr}
 800c746:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c748:	4604      	mov	r4, r0
 800c74a:	b908      	cbnz	r0, 800c750 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c74c:	4b04      	ldr	r3, [pc, #16]	; (800c760 <vTaskSetApplicationTaskTag+0x1c>)
 800c74e:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c750:	f7fe fec0 	bl	800b4d4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c754:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800c756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c75a:	f7fe bedb 	b.w	800b514 <vPortExitCritical>
 800c75e:	bf00      	nop
 800c760:	2400ef5c 	.word	0x2400ef5c

0800c764 <xTaskCallApplicationTaskHook>:
	{
 800c764:	4603      	mov	r3, r0
 800c766:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c768:	b90b      	cbnz	r3, 800c76e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c76a:	4b03      	ldr	r3, [pc, #12]	; (800c778 <xTaskCallApplicationTaskHook+0x14>)
 800c76c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c770:	b103      	cbz	r3, 800c774 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c772:	4718      	bx	r3
	}
 800c774:	4618      	mov	r0, r3
 800c776:	4770      	bx	lr
 800c778:	2400ef5c 	.word	0x2400ef5c

0800c77c <vTaskStartScheduler>:
{
 800c77c:	b510      	push	{r4, lr}
 800c77e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c780:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c782:	aa07      	add	r2, sp, #28
 800c784:	a906      	add	r1, sp, #24
 800c786:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c788:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c78c:	f7fe fcea 	bl	800b164 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	9302      	str	r3, [sp, #8]
 800c796:	9b06      	ldr	r3, [sp, #24]
 800c798:	491b      	ldr	r1, [pc, #108]	; (800c808 <vTaskStartScheduler+0x8c>)
 800c79a:	481c      	ldr	r0, [pc, #112]	; (800c80c <vTaskStartScheduler+0x90>)
 800c79c:	e9cd 4300 	strd	r4, r3, [sp]
 800c7a0:	4623      	mov	r3, r4
 800c7a2:	f7ff fe51 	bl	800c448 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c7a6:	b360      	cbz	r0, 800c802 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800c7a8:	f000 fa92 	bl	800ccd0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c7ac:	2801      	cmp	r0, #1
 800c7ae:	d11d      	bne.n	800c7ec <vTaskStartScheduler+0x70>
 800c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c7c0:	4a13      	ldr	r2, [pc, #76]	; (800c810 <vTaskStartScheduler+0x94>)
 800c7c2:	4914      	ldr	r1, [pc, #80]	; (800c814 <vTaskStartScheduler+0x98>)
 800c7c4:	6813      	ldr	r3, [r2, #0]
 800c7c6:	3358      	adds	r3, #88	; 0x58
 800c7c8:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7ca:	f04f 31ff 	mov.w	r1, #4294967295
 800c7ce:	4b12      	ldr	r3, [pc, #72]	; (800c818 <vTaskStartScheduler+0x9c>)
 800c7d0:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c7d2:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800c7d4:	4b11      	ldr	r3, [pc, #68]	; (800c81c <vTaskStartScheduler+0xa0>)
 800c7d6:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7d8:	4b11      	ldr	r3, [pc, #68]	; (800c820 <vTaskStartScheduler+0xa4>)
 800c7da:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c7dc:	6810      	ldr	r0, [r2, #0]
 800c7de:	f7ff ffc1 	bl	800c764 <xTaskCallApplicationTaskHook>
}
 800c7e2:	b008      	add	sp, #32
 800c7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c7e8:	f7fe bf04 	b.w	800b5f4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d108      	bne.n	800c802 <vTaskStartScheduler+0x86>
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	f383 8811 	msr	BASEPRI, r3
 800c7f8:	f3bf 8f6f 	isb	sy
 800c7fc:	f3bf 8f4f 	dsb	sy
 800c800:	e7fe      	b.n	800c800 <vTaskStartScheduler+0x84>
}
 800c802:	b008      	add	sp, #32
 800c804:	bd10      	pop	{r4, pc}
 800c806:	bf00      	nop
 800c808:	08022ae0 	.word	0x08022ae0
 800c80c:	0800c321 	.word	0x0800c321
 800c810:	2400ef5c 	.word	0x2400ef5c
 800c814:	240000c4 	.word	0x240000c4
 800c818:	2400f404 	.word	0x2400f404
 800c81c:	2400f424 	.word	0x2400f424
 800c820:	2400f450 	.word	0x2400f450

0800c824 <vTaskSwitchContext>:
{
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c826:	4b1d      	ldr	r3, [pc, #116]	; (800c89c <vTaskSwitchContext+0x78>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <vTaskSwitchContext+0x7c>)
 800c82c:	b112      	cbz	r2, 800c834 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c82e:	2201      	movs	r2, #1
 800c830:	601a      	str	r2, [r3, #0]
}
 800c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c834:	4c1b      	ldr	r4, [pc, #108]	; (800c8a4 <vTaskSwitchContext+0x80>)
 800c836:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c838:	4e1b      	ldr	r6, [pc, #108]	; (800c8a8 <vTaskSwitchContext+0x84>)
 800c83a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800c83c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c83e:	6820      	ldr	r0, [r4, #0]
 800c840:	f7ff ff90 	bl	800c764 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c844:	6832      	ldr	r2, [r6, #0]
 800c846:	4919      	ldr	r1, [pc, #100]	; (800c8ac <vTaskSwitchContext+0x88>)
 800c848:	fb07 f302 	mul.w	r3, r7, r2
 800c84c:	58cd      	ldr	r5, [r1, r3]
 800c84e:	18c8      	adds	r0, r1, r3
 800c850:	b1c5      	cbz	r5, 800c884 <vTaskSwitchContext+0x60>
 800c852:	6845      	ldr	r5, [r0, #4]
 800c854:	3308      	adds	r3, #8
 800c856:	686d      	ldr	r5, [r5, #4]
 800c858:	440b      	add	r3, r1
 800c85a:	429d      	cmp	r5, r3
 800c85c:	6045      	str	r5, [r0, #4]
 800c85e:	bf04      	itt	eq
 800c860:	686b      	ldreq	r3, [r5, #4]
 800c862:	6043      	streq	r3, [r0, #4]
 800c864:	2314      	movs	r3, #20
 800c866:	fb03 1102 	mla	r1, r3, r2, r1
 800c86a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800c86c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800c874:	6820      	ldr	r0, [r4, #0]
 800c876:	f7ff ff75 	bl	800c764 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	4a0c      	ldr	r2, [pc, #48]	; (800c8b0 <vTaskSwitchContext+0x8c>)
 800c87e:	3358      	adds	r3, #88	; 0x58
 800c880:	6013      	str	r3, [r2, #0]
}
 800c882:	e7d6      	b.n	800c832 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c884:	b942      	cbnz	r2, 800c898 <vTaskSwitchContext+0x74>
 800c886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	e7fe      	b.n	800c896 <vTaskSwitchContext+0x72>
 800c898:	3a01      	subs	r2, #1
 800c89a:	e7d5      	b.n	800c848 <vTaskSwitchContext+0x24>
 800c89c:	2400f3d0 	.word	0x2400f3d0
 800c8a0:	2400f454 	.word	0x2400f454
 800c8a4:	2400ef5c 	.word	0x2400ef5c
 800c8a8:	2400f3d8 	.word	0x2400f3d8
 800c8ac:	2400ef68 	.word	0x2400ef68
 800c8b0:	240000c4 	.word	0x240000c4

0800c8b4 <vTaskPlaceOnEventList>:
{
 800c8b4:	b510      	push	{r4, lr}
 800c8b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800c8b8:	b940      	cbnz	r0, 800c8cc <vTaskPlaceOnEventList+0x18>
 800c8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	e7fe      	b.n	800c8ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8cc:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <vTaskPlaceOnEventList+0x30>)
 800c8ce:	6819      	ldr	r1, [r3, #0]
 800c8d0:	3118      	adds	r1, #24
 800c8d2:	f7fe fd73 	bl	800b3bc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	2101      	movs	r1, #1
}
 800c8da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8de:	f7ff bcb7 	b.w	800c250 <prvAddCurrentTaskToDelayedList>
 800c8e2:	bf00      	nop
 800c8e4:	2400ef5c 	.word	0x2400ef5c

0800c8e8 <vTaskPlaceOnEventListRestricted>:
	{
 800c8e8:	b538      	push	{r3, r4, r5, lr}
 800c8ea:	460d      	mov	r5, r1
 800c8ec:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800c8ee:	b940      	cbnz	r0, 800c902 <vTaskPlaceOnEventListRestricted+0x1a>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	e7fe      	b.n	800c900 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c902:	4b07      	ldr	r3, [pc, #28]	; (800c920 <vTaskPlaceOnEventListRestricted+0x38>)
 800c904:	6819      	ldr	r1, [r3, #0]
 800c906:	3118      	adds	r1, #24
 800c908:	f7fe fd4c 	bl	800b3a4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800c90c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c90e:	4621      	mov	r1, r4
 800c910:	bf0c      	ite	eq
 800c912:	4628      	moveq	r0, r5
 800c914:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800c918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c91c:	f7ff bc98 	b.w	800c250 <prvAddCurrentTaskToDelayedList>
 800c920:	2400ef5c 	.word	0x2400ef5c

0800c924 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c924:	68c3      	ldr	r3, [r0, #12]
{
 800c926:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c928:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c92a:	b944      	cbnz	r4, 800c93e <xTaskRemoveFromEventList+0x1a>
 800c92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	e7fe      	b.n	800c93c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c93e:	f104 0118 	add.w	r1, r4, #24
 800c942:	4608      	mov	r0, r1
 800c944:	9101      	str	r1, [sp, #4]
 800c946:	f7fe fd50 	bl	800b3ea <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c94a:	4b12      	ldr	r3, [pc, #72]	; (800c994 <xTaskRemoveFromEventList+0x70>)
 800c94c:	9901      	ldr	r1, [sp, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	b9e3      	cbnz	r3, 800c98c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c952:	1d21      	adds	r1, r4, #4
 800c954:	4608      	mov	r0, r1
 800c956:	9101      	str	r1, [sp, #4]
 800c958:	f7fe fd47 	bl	800b3ea <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c95c:	4a0e      	ldr	r2, [pc, #56]	; (800c998 <xTaskRemoveFromEventList+0x74>)
 800c95e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c960:	6810      	ldr	r0, [r2, #0]
 800c962:	9901      	ldr	r1, [sp, #4]
 800c964:	4283      	cmp	r3, r0
 800c966:	d900      	bls.n	800c96a <xTaskRemoveFromEventList+0x46>
 800c968:	6013      	str	r3, [r2, #0]
 800c96a:	4a0c      	ldr	r2, [pc, #48]	; (800c99c <xTaskRemoveFromEventList+0x78>)
 800c96c:	2014      	movs	r0, #20
 800c96e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c972:	f7fe fd17 	bl	800b3a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c976:	4b0a      	ldr	r3, [pc, #40]	; (800c9a0 <xTaskRemoveFromEventList+0x7c>)
 800c978:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	429a      	cmp	r2, r3
 800c980:	d906      	bls.n	800c990 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800c982:	2001      	movs	r0, #1
 800c984:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <xTaskRemoveFromEventList+0x80>)
 800c986:	6018      	str	r0, [r3, #0]
}
 800c988:	b002      	add	sp, #8
 800c98a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c98c:	4806      	ldr	r0, [pc, #24]	; (800c9a8 <xTaskRemoveFromEventList+0x84>)
 800c98e:	e7f0      	b.n	800c972 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800c990:	2000      	movs	r0, #0
	return xReturn;
 800c992:	e7f9      	b.n	800c988 <xTaskRemoveFromEventList+0x64>
 800c994:	2400f3d0 	.word	0x2400f3d0
 800c998:	2400f3d8 	.word	0x2400f3d8
 800c99c:	2400ef68 	.word	0x2400ef68
 800c9a0:	2400ef5c 	.word	0x2400ef5c
 800c9a4:	2400f454 	.word	0x2400f454
 800c9a8:	2400f410 	.word	0x2400f410

0800c9ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9ac:	4b03      	ldr	r3, [pc, #12]	; (800c9bc <vTaskInternalSetTimeOutState+0x10>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c9b2:	4b03      	ldr	r3, [pc, #12]	; (800c9c0 <vTaskInternalSetTimeOutState+0x14>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6043      	str	r3, [r0, #4]
}
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	2400f408 	.word	0x2400f408
 800c9c0:	2400f450 	.word	0x2400f450

0800c9c4 <xTaskCheckForTimeOut>:
{
 800c9c4:	b570      	push	{r4, r5, r6, lr}
 800c9c6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	b940      	cbnz	r0, 800c9de <xTaskCheckForTimeOut+0x1a>
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	e7fe      	b.n	800c9dc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800c9de:	b941      	cbnz	r1, 800c9f2 <xTaskCheckForTimeOut+0x2e>
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	f383 8811 	msr	BASEPRI, r3
 800c9e8:	f3bf 8f6f 	isb	sy
 800c9ec:	f3bf 8f4f 	dsb	sy
 800c9f0:	e7fe      	b.n	800c9f0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800c9f2:	f7fe fd6f 	bl	800b4d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c9f6:	4b0f      	ldr	r3, [pc, #60]	; (800ca34 <xTaskCheckForTimeOut+0x70>)
 800c9f8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	d010      	beq.n	800ca22 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca00:	480d      	ldr	r0, [pc, #52]	; (800ca38 <xTaskCheckForTimeOut+0x74>)
 800ca02:	682e      	ldr	r6, [r5, #0]
 800ca04:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca06:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca08:	4286      	cmp	r6, r0
 800ca0a:	d001      	beq.n	800ca10 <xTaskCheckForTimeOut+0x4c>
 800ca0c:	428a      	cmp	r2, r1
 800ca0e:	d90f      	bls.n	800ca30 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca10:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca12:	4283      	cmp	r3, r0
 800ca14:	d90a      	bls.n	800ca2c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800ca16:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca18:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800ca1a:	4413      	add	r3, r2
 800ca1c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ca1e:	f7ff ffc5 	bl	800c9ac <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800ca22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ca24:	f7fe fd76 	bl	800b514 <vPortExitCritical>
}
 800ca28:	4620      	mov	r0, r4
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800ca30:	2401      	movs	r4, #1
 800ca32:	e7f7      	b.n	800ca24 <xTaskCheckForTimeOut+0x60>
 800ca34:	2400f450 	.word	0x2400f450
 800ca38:	2400f408 	.word	0x2400f408

0800ca3c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ca3c:	4b01      	ldr	r3, [pc, #4]	; (800ca44 <vTaskMissedYield+0x8>)
 800ca3e:	2201      	movs	r2, #1
 800ca40:	601a      	str	r2, [r3, #0]
}
 800ca42:	4770      	bx	lr
 800ca44:	2400f454 	.word	0x2400f454

0800ca48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <xTaskGetSchedulerState+0x18>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	b133      	cbz	r3, 800ca5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca4e:	4b05      	ldr	r3, [pc, #20]	; (800ca64 <xTaskGetSchedulerState+0x1c>)
 800ca50:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bf0c      	ite	eq
 800ca56:	2002      	moveq	r0, #2
 800ca58:	2000      	movne	r0, #0
 800ca5a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca5c:	2001      	movs	r0, #1
	}
 800ca5e:	4770      	bx	lr
 800ca60:	2400f424 	.word	0x2400f424
 800ca64:	2400f3d0 	.word	0x2400f3d0

0800ca68 <xTaskPriorityInherit>:
	{
 800ca68:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	b340      	cbz	r0, 800cac0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca6e:	4d1b      	ldr	r5, [pc, #108]	; (800cadc <xTaskPriorityInherit+0x74>)
 800ca70:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ca72:	682a      	ldr	r2, [r5, #0]
 800ca74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d228      	bcs.n	800cacc <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca7a:	6982      	ldr	r2, [r0, #24]
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	db04      	blt.n	800ca8a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca80:	682a      	ldr	r2, [r5, #0]
 800ca82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ca84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800ca88:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca8a:	2214      	movs	r2, #20
 800ca8c:	4e14      	ldr	r6, [pc, #80]	; (800cae0 <xTaskPriorityInherit+0x78>)
 800ca8e:	fb02 6303 	mla	r3, r2, r3, r6
 800ca92:	6962      	ldr	r2, [r4, #20]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d115      	bne.n	800cac4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca98:	1d21      	adds	r1, r4, #4
 800ca9a:	4608      	mov	r0, r1
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	f7fe fca4 	bl	800b3ea <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caa2:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800caa4:	4a0f      	ldr	r2, [pc, #60]	; (800cae4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800caa8:	6810      	ldr	r0, [r2, #0]
 800caaa:	9901      	ldr	r1, [sp, #4]
 800caac:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caae:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cab0:	d900      	bls.n	800cab4 <xTaskPriorityInherit+0x4c>
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	2014      	movs	r0, #20
 800cab6:	fb00 6003 	mla	r0, r0, r3, r6
 800caba:	f7fe fc73 	bl	800b3a4 <vListInsertEnd>
				xReturn = pdTRUE;
 800cabe:	2001      	movs	r0, #1
	}
 800cac0:	b002      	add	sp, #8
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800caca:	e7f8      	b.n	800cabe <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cacc:	682b      	ldr	r3, [r5, #0]
 800cace:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800cad0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800cad2:	42a0      	cmp	r0, r4
 800cad4:	bf2c      	ite	cs
 800cad6:	2000      	movcs	r0, #0
 800cad8:	2001      	movcc	r0, #1
 800cada:	e7f1      	b.n	800cac0 <xTaskPriorityInherit+0x58>
 800cadc:	2400ef5c 	.word	0x2400ef5c
 800cae0:	2400ef68 	.word	0x2400ef68
 800cae4:	2400f3d8 	.word	0x2400f3d8

0800cae8 <xTaskPriorityDisinherit>:
	{
 800cae8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800caea:	b910      	cbnz	r0, 800caf2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800caec:	2000      	movs	r0, #0
	}
 800caee:	b002      	add	sp, #8
 800caf0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800caf2:	4b1c      	ldr	r3, [pc, #112]	; (800cb64 <xTaskPriorityDisinherit+0x7c>)
 800caf4:	681c      	ldr	r4, [r3, #0]
 800caf6:	4284      	cmp	r4, r0
 800caf8:	d008      	beq.n	800cb0c <xTaskPriorityDisinherit+0x24>
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	e7fe      	b.n	800cb0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb0e:	b943      	cbnz	r3, 800cb22 <xTaskPriorityDisinherit+0x3a>
 800cb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	e7fe      	b.n	800cb20 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cb24:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb26:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cb28:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb2a:	4291      	cmp	r1, r2
 800cb2c:	d0de      	beq.n	800caec <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d1dc      	bne.n	800caec <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb32:	1d21      	adds	r1, r4, #4
 800cb34:	4608      	mov	r0, r1
 800cb36:	9101      	str	r1, [sp, #4]
 800cb38:	f7fe fc57 	bl	800b3ea <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800cb3e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb44:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb46:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb48:	4a07      	ldr	r2, [pc, #28]	; (800cb68 <xTaskPriorityDisinherit+0x80>)
 800cb4a:	6810      	ldr	r0, [r2, #0]
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	d900      	bls.n	800cb52 <xTaskPriorityDisinherit+0x6a>
 800cb50:	6013      	str	r3, [r2, #0]
 800cb52:	4a06      	ldr	r2, [pc, #24]	; (800cb6c <xTaskPriorityDisinherit+0x84>)
 800cb54:	2014      	movs	r0, #20
 800cb56:	fb00 2003 	mla	r0, r0, r3, r2
 800cb5a:	f7fe fc23 	bl	800b3a4 <vListInsertEnd>
					xReturn = pdTRUE;
 800cb5e:	2001      	movs	r0, #1
		return xReturn;
 800cb60:	e7c5      	b.n	800caee <xTaskPriorityDisinherit+0x6>
 800cb62:	bf00      	nop
 800cb64:	2400ef5c 	.word	0x2400ef5c
 800cb68:	2400f3d8 	.word	0x2400f3d8
 800cb6c:	2400ef68 	.word	0x2400ef68

0800cb70 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cb70:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cb72:	4604      	mov	r4, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d044      	beq.n	800cc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb78:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800cb7a:	b942      	cbnz	r2, 800cb8e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	e7fe      	b.n	800cb8c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cb8e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800cb90:	4299      	cmp	r1, r3
 800cb92:	bf38      	it	cc
 800cb94:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cb96:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800cb98:	428b      	cmp	r3, r1
 800cb9a:	d032      	beq.n	800cc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cb9c:	2a01      	cmp	r2, #1
 800cb9e:	d130      	bne.n	800cc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800cba0:	4a19      	ldr	r2, [pc, #100]	; (800cc08 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	4282      	cmp	r2, r0
 800cba6:	d108      	bne.n	800cbba <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbac:	f383 8811 	msr	BASEPRI, r3
 800cbb0:	f3bf 8f6f 	isb	sy
 800cbb4:	f3bf 8f4f 	dsb	sy
 800cbb8:	e7fe      	b.n	800cbb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbba:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbbc:	4d13      	ldr	r5, [pc, #76]	; (800cc0c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbbe:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbc0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cbc4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbc6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbca:	bfa8      	it	ge
 800cbcc:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbd0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd2:	bfa8      	it	ge
 800cbd4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d113      	bne.n	800cc02 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbda:	1d01      	adds	r1, r0, #4
 800cbdc:	4608      	mov	r0, r1
 800cbde:	9101      	str	r1, [sp, #4]
 800cbe0:	f7fe fc03 	bl	800b3ea <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800cbe4:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800cbe6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cbe8:	6810      	ldr	r0, [r2, #0]
 800cbea:	9901      	ldr	r1, [sp, #4]
 800cbec:	4283      	cmp	r3, r0
 800cbee:	d900      	bls.n	800cbf2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	2014      	movs	r0, #20
 800cbf4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800cbf8:	b003      	add	sp, #12
 800cbfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800cbfe:	f7fe bbd1 	b.w	800b3a4 <vListInsertEnd>
	}
 800cc02:	b003      	add	sp, #12
 800cc04:	bd30      	pop	{r4, r5, pc}
 800cc06:	bf00      	nop
 800cc08:	2400ef5c 	.word	0x2400ef5c
 800cc0c:	2400ef68 	.word	0x2400ef68
 800cc10:	2400f3d8 	.word	0x2400f3d8

0800cc14 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800cc14:	4b04      	ldr	r3, [pc, #16]	; (800cc28 <pvTaskIncrementMutexHeldCount+0x14>)
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	b11a      	cbz	r2, 800cc22 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800cc1a:	6819      	ldr	r1, [r3, #0]
 800cc1c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800cc1e:	3201      	adds	r2, #1
 800cc20:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800cc22:	6818      	ldr	r0, [r3, #0]
	}
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	2400ef5c 	.word	0x2400ef5c

0800cc2c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800cc2e:	4c11      	ldr	r4, [pc, #68]	; (800cc74 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800cc30:	f7fe fc50 	bl	800b4d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800cc34:	6825      	ldr	r5, [r4, #0]
 800cc36:	b9bd      	cbnz	r5, 800cc68 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc38:	4f0f      	ldr	r7, [pc, #60]	; (800cc78 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800cc3a:	4e10      	ldr	r6, [pc, #64]	; (800cc7c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7fe fba3 	bl	800b388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc42:	4630      	mov	r0, r6
 800cc44:	f7fe fba0 	bl	800b388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc48:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc4a:	4a0e      	ldr	r2, [pc, #56]	; (800cc84 <prvCheckForValidListAndQueue+0x58>)
 800cc4c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800cc4e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc50:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800cc52:	4b0d      	ldr	r3, [pc, #52]	; (800cc88 <prvCheckForValidListAndQueue+0x5c>)
 800cc54:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cc56:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <prvCheckForValidListAndQueue+0x60>)
 800cc58:	9500      	str	r5, [sp, #0]
 800cc5a:	f7fe fe4b 	bl	800b8f4 <xQueueGenericCreateStatic>
 800cc5e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc60:	b110      	cbz	r0, 800cc68 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc62:	490b      	ldr	r1, [pc, #44]	; (800cc90 <prvCheckForValidListAndQueue+0x64>)
 800cc64:	f7ff fa16 	bl	800c094 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800cc68:	b003      	add	sp, #12
 800cc6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800cc6e:	f7fe bc51 	b.w	800b514 <vPortExitCritical>
 800cc72:	bf00      	nop
 800cc74:	2400f57c 	.word	0x2400f57c
 800cc78:	2400f500 	.word	0x2400f500
 800cc7c:	2400f514 	.word	0x2400f514
 800cc80:	2400f458 	.word	0x2400f458
 800cc84:	2400f460 	.word	0x2400f460
 800cc88:	2400f45c 	.word	0x2400f45c
 800cc8c:	2400f52c 	.word	0x2400f52c
 800cc90:	08022ae5 	.word	0x08022ae5

0800cc94 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800cc94:	4291      	cmp	r1, r2
{
 800cc96:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc98:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc9a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800cc9c:	d80a      	bhi.n	800ccb4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9e:	1ad2      	subs	r2, r2, r3
 800cca0:	6983      	ldr	r3, [r0, #24]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d20d      	bcs.n	800ccc2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cca6:	1d01      	adds	r1, r0, #4
 800cca8:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccaa:	6818      	ldr	r0, [r3, #0]
 800ccac:	f7fe fb86 	bl	800b3bc <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ccb0:	2000      	movs	r0, #0
}
 800ccb2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d201      	bcs.n	800ccbc <prvInsertTimerInActiveList+0x28>
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	d202      	bcs.n	800ccc2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccbc:	1d01      	adds	r1, r0, #4
 800ccbe:	4b03      	ldr	r3, [pc, #12]	; (800cccc <prvInsertTimerInActiveList+0x38>)
 800ccc0:	e7f3      	b.n	800ccaa <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ccc2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ccc4:	e7f5      	b.n	800ccb2 <prvInsertTimerInActiveList+0x1e>
 800ccc6:	bf00      	nop
 800ccc8:	2400f45c 	.word	0x2400f45c
 800cccc:	2400f458 	.word	0x2400f458

0800ccd0 <xTimerCreateTimerTask>:
{
 800ccd0:	b510      	push	{r4, lr}
 800ccd2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800ccd4:	f7ff ffaa 	bl	800cc2c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800ccd8:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <xTimerCreateTimerTask+0x54>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	b1b3      	cbz	r3, 800cd0c <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ccde:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cce0:	aa07      	add	r2, sp, #28
 800cce2:	a906      	add	r1, sp, #24
 800cce4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cce6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ccea:	f7fe fa47 	bl	800b17c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ccee:	9b05      	ldr	r3, [sp, #20]
 800ccf0:	9a07      	ldr	r2, [sp, #28]
 800ccf2:	9302      	str	r3, [sp, #8]
 800ccf4:	9b06      	ldr	r3, [sp, #24]
 800ccf6:	490c      	ldr	r1, [pc, #48]	; (800cd28 <xTimerCreateTimerTask+0x58>)
 800ccf8:	9301      	str	r3, [sp, #4]
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	480b      	ldr	r0, [pc, #44]	; (800cd2c <xTimerCreateTimerTask+0x5c>)
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	4623      	mov	r3, r4
 800cd02:	f7ff fba1 	bl	800c448 <xTaskCreateStatic>
 800cd06:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <xTimerCreateTimerTask+0x60>)
 800cd08:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800cd0a:	b940      	cbnz	r0, 800cd1e <xTimerCreateTimerTask+0x4e>
 800cd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800cd1c:	e7fe      	b.n	800cd1c <xTimerCreateTimerTask+0x4c>
}
 800cd1e:	2001      	movs	r0, #1
 800cd20:	b008      	add	sp, #32
 800cd22:	bd10      	pop	{r4, pc}
 800cd24:	2400f57c 	.word	0x2400f57c
 800cd28:	08022aea 	.word	0x08022aea
 800cd2c:	0800ce35 	.word	0x0800ce35
 800cd30:	2400f580 	.word	0x2400f580

0800cd34 <xTimerGenericCommand>:
{
 800cd34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cd36:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800cd38:	4604      	mov	r4, r0
{
 800cd3a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800cd3c:	b940      	cbnz	r0, 800cd50 <xTimerGenericCommand+0x1c>
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	e7fe      	b.n	800cd4e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800cd50:	4d0c      	ldr	r5, [pc, #48]	; (800cd84 <xTimerGenericCommand+0x50>)
 800cd52:	6828      	ldr	r0, [r5, #0]
 800cd54:	b178      	cbz	r0, 800cd76 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd56:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd58:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd5a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd5e:	dc0c      	bgt.n	800cd7a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd60:	f7ff fe72 	bl	800ca48 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd64:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd66:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd68:	4669      	mov	r1, sp
 800cd6a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd6c:	bf0c      	ite	eq
 800cd6e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd70:	461a      	movne	r2, r3
 800cd72:	f7fe fe74 	bl	800ba5e <xQueueGenericSend>
}
 800cd76:	b004      	add	sp, #16
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4669      	mov	r1, sp
 800cd7e:	f7fe ff21 	bl	800bbc4 <xQueueGenericSendFromISR>
 800cd82:	e7f8      	b.n	800cd76 <xTimerGenericCommand+0x42>
 800cd84:	2400f57c 	.word	0x2400f57c

0800cd88 <prvSampleTimeNow>:
{
 800cd88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800cd8c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800ce30 <prvSampleTimeNow+0xa8>
{
 800cd90:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800cd92:	f7ff fbc7 	bl	800c524 <xTaskGetTickCount>
 800cd96:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800cd98:	f8d8 3000 	ldr.w	r3, [r8]
 800cd9c:	4283      	cmp	r3, r0
 800cd9e:	d940      	bls.n	800ce22 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda0:	4f21      	ldr	r7, [pc, #132]	; (800ce28 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cda2:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	b95a      	cbnz	r2, 800cdc4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800cdac:	4a1f      	ldr	r2, [pc, #124]	; (800ce2c <prvSampleTimeNow+0xa4>)
 800cdae:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cdb0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800cdb2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800cdb4:	6039      	str	r1, [r7, #0]
}
 800cdb6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800cdb8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800cdba:	f8c8 5000 	str.w	r5, [r8]
}
 800cdbe:	b004      	add	sp, #16
 800cdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdc4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cdc8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdcc:	1d21      	adds	r1, r4, #4
 800cdce:	4608      	mov	r0, r1
 800cdd0:	9103      	str	r1, [sp, #12]
 800cdd2:	f7fe fb0a 	bl	800b3ea <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdd6:	6a23      	ldr	r3, [r4, #32]
 800cdd8:	4620      	mov	r0, r4
 800cdda:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cddc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cde0:	9903      	ldr	r1, [sp, #12]
 800cde2:	f013 0f04 	tst.w	r3, #4
 800cde6:	d0de      	beq.n	800cda6 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cde8:	69a3      	ldr	r3, [r4, #24]
 800cdea:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800cdec:	459a      	cmp	sl, r3
 800cdee:	d205      	bcs.n	800cdfc <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdf0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdf2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdf4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdf6:	f7fe fae1 	bl	800b3bc <vListInsert>
 800cdfa:	e7d4      	b.n	800cda6 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	4652      	mov	r2, sl
 800ce00:	4620      	mov	r0, r4
 800ce02:	f8cd 9000 	str.w	r9, [sp]
 800ce06:	4619      	mov	r1, r3
 800ce08:	f7ff ff94 	bl	800cd34 <xTimerGenericCommand>
				configASSERT( xResult );
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d1ca      	bne.n	800cda6 <prvSampleTimeNow+0x1e>
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	e7fe      	b.n	800ce20 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e7c7      	b.n	800cdb6 <prvSampleTimeNow+0x2e>
 800ce26:	bf00      	nop
 800ce28:	2400f458 	.word	0x2400f458
 800ce2c:	2400f45c 	.word	0x2400f45c
 800ce30:	2400f528 	.word	0x2400f528

0800ce34 <prvTimerTask>:
{
 800ce34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce38:	4d6e      	ldr	r5, [pc, #440]	; (800cff4 <prvTimerTask+0x1c0>)
{
 800ce3a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce3c:	4e6e      	ldr	r6, [pc, #440]	; (800cff8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce3e:	682b      	ldr	r3, [r5, #0]
 800ce40:	f8d3 8000 	ldr.w	r8, [r3]
 800ce44:	f1b8 0f00 	cmp.w	r8, #0
 800ce48:	d035      	beq.n	800ceb6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce4a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce4c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce4e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800ce52:	f7ff fb5f 	bl	800c514 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce56:	a804      	add	r0, sp, #16
 800ce58:	f7ff ff96 	bl	800cd88 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800ce5c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce5e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d169      	bne.n	800cf38 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce64:	2c00      	cmp	r4, #0
 800ce66:	d14c      	bne.n	800cf02 <prvTimerTask+0xce>
 800ce68:	4540      	cmp	r0, r8
 800ce6a:	d350      	bcc.n	800cf0e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800ce6c:	f7ff fbf6 	bl	800c65c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce76:	1d38      	adds	r0, r7, #4
 800ce78:	f7fe fab7 	bl	800b3ea <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ce80:	0758      	lsls	r0, r3, #29
 800ce82:	d51a      	bpl.n	800ceba <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ce84:	69b9      	ldr	r1, [r7, #24]
 800ce86:	4643      	mov	r3, r8
 800ce88:	464a      	mov	r2, r9
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	4441      	add	r1, r8
 800ce8e:	f7ff ff01 	bl	800cc94 <prvInsertTimerInActiveList>
 800ce92:	b1b0      	cbz	r0, 800cec2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce94:	4623      	mov	r3, r4
 800ce96:	4642      	mov	r2, r8
 800ce98:	4621      	mov	r1, r4
 800ce9a:	4638      	mov	r0, r7
 800ce9c:	9400      	str	r4, [sp, #0]
 800ce9e:	f7ff ff49 	bl	800cd34 <xTimerGenericCommand>
			configASSERT( xResult );
 800cea2:	b970      	cbnz	r0, 800cec2 <prvTimerTask+0x8e>
 800cea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	e7fe      	b.n	800ceb4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ceb6:	2401      	movs	r4, #1
 800ceb8:	e7cb      	b.n	800ce52 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceba:	f023 0301 	bic.w	r3, r3, #1
 800cebe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	4638      	mov	r0, r7
 800cec6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cec8:	2200      	movs	r2, #0
 800ceca:	a904      	add	r1, sp, #16
 800cecc:	6830      	ldr	r0, [r6, #0]
 800cece:	f7fe ff2f 	bl	800bd30 <xQueueReceive>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d0b3      	beq.n	800ce3e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ced6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ced8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	db2f      	blt.n	800cf3e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cede:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cee0:	6963      	ldr	r3, [r4, #20]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d132      	bne.n	800cf4c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cee6:	a803      	add	r0, sp, #12
 800cee8:	f7ff ff4e 	bl	800cd88 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ceec:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceee:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800cef0:	2b09      	cmp	r3, #9
 800cef2:	d8e9      	bhi.n	800cec8 <prvTimerTask+0x94>
 800cef4:	e8df f003 	tbb	[pc, r3]
 800cef8:	572e2e2e 	.word	0x572e2e2e
 800cefc:	2e2e765e 	.word	0x2e2e765e
 800cf00:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cf02:	4b3e      	ldr	r3, [pc, #248]	; (800cffc <prvTimerTask+0x1c8>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681c      	ldr	r4, [r3, #0]
 800cf08:	fab4 f484 	clz	r4, r4
 800cf0c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cf0e:	4622      	mov	r2, r4
 800cf10:	eba8 0109 	sub.w	r1, r8, r9
 800cf14:	6830      	ldr	r0, [r6, #0]
 800cf16:	f7ff f8fa 	bl	800c10e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cf1a:	f7ff fb9f 	bl	800c65c <xTaskResumeAll>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d1d2      	bne.n	800cec8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800cf22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cf26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cf2e:	f3bf 8f4f 	dsb	sy
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	e7c7      	b.n	800cec8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800cf38:	f7ff fb90 	bl	800c65c <xTaskResumeAll>
}
 800cf3c:	e7c4      	b.n	800cec8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cf3e:	9b05      	ldr	r3, [sp, #20]
 800cf40:	9907      	ldr	r1, [sp, #28]
 800cf42:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cf44:	9b04      	ldr	r3, [sp, #16]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	dbbe      	blt.n	800cec8 <prvTimerTask+0x94>
 800cf4a:	e7c8      	b.n	800cede <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf4c:	1d20      	adds	r0, r4, #4
 800cf4e:	f7fe fa4c 	bl	800b3ea <uxListRemove>
 800cf52:	e7c8      	b.n	800cee6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf58:	4620      	mov	r0, r4
 800cf5a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf5c:	f043 0301 	orr.w	r3, r3, #1
 800cf60:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf64:	9b05      	ldr	r3, [sp, #20]
 800cf66:	4419      	add	r1, r3
 800cf68:	f7ff fe94 	bl	800cc94 <prvInsertTimerInActiveList>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	d0ab      	beq.n	800cec8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf70:	6a23      	ldr	r3, [r4, #32]
 800cf72:	4620      	mov	r0, r4
 800cf74:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cf7a:	0759      	lsls	r1, r3, #29
 800cf7c:	d5a4      	bpl.n	800cec8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf7e:	69a2      	ldr	r2, [r4, #24]
 800cf80:	2300      	movs	r3, #0
 800cf82:	9905      	ldr	r1, [sp, #20]
 800cf84:	4620      	mov	r0, r4
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	440a      	add	r2, r1
 800cf8a:	4619      	mov	r1, r3
 800cf8c:	f7ff fed2 	bl	800cd34 <xTimerGenericCommand>
							configASSERT( xResult );
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d199      	bne.n	800cec8 <prvTimerTask+0x94>
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	e7fe      	b.n	800cfa4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfa6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfaa:	f023 0301 	bic.w	r3, r3, #1
 800cfae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800cfb2:	e789      	b.n	800cec8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cfb8:	f043 0301 	orr.w	r3, r3, #1
 800cfbc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfc0:	9905      	ldr	r1, [sp, #20]
 800cfc2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfc4:	b941      	cbnz	r1, 800cfd8 <prvTimerTask+0x1a4>
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	e7fe      	b.n	800cfd6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cfd8:	4603      	mov	r3, r0
 800cfda:	4401      	add	r1, r0
 800cfdc:	4620      	mov	r0, r4
 800cfde:	f7ff fe59 	bl	800cc94 <prvInsertTimerInActiveList>
					break;
 800cfe2:	e771      	b.n	800cec8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cfe4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cfe8:	079a      	lsls	r2, r3, #30
 800cfea:	d4de      	bmi.n	800cfaa <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800cfec:	4620      	mov	r0, r4
 800cfee:	f7fe f98d 	bl	800b30c <vPortFree>
 800cff2:	e769      	b.n	800cec8 <prvTimerTask+0x94>
 800cff4:	2400f458 	.word	0x2400f458
 800cff8:	2400f57c 	.word	0x2400f57c
 800cffc:	2400f45c 	.word	0x2400f45c

0800d000 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d000:	8880      	ldrh	r0, [r0, #4]
 800d002:	4770      	bx	lr

0800d004 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d004:	b570      	push	{r4, r5, r6, lr}
 800d006:	6803      	ldr	r3, [r0, #0]
 800d008:	460c      	mov	r4, r1
 800d00a:	2100      	movs	r1, #0
 800d00c:	4605      	mov	r5, r0
 800d00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d010:	4798      	blx	r3
 800d012:	4606      	mov	r6, r0
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	4628      	mov	r0, r5
 800d018:	1ba4      	subs	r4, r4, r6
 800d01a:	6a1b      	ldr	r3, [r3, #32]
 800d01c:	b2a4      	uxth	r4, r4
 800d01e:	4798      	blx	r3
 800d020:	fbb4 f0f0 	udiv	r0, r4, r0
 800d024:	bd70      	pop	{r4, r5, r6, pc}

0800d026 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d026:	2300      	movs	r3, #0
 800d028:	8083      	strh	r3, [r0, #4]
 800d02a:	4770      	bx	lr

0800d02c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	6803      	ldr	r3, [r0, #0]
 800d030:	4604      	mov	r4, r0
 800d032:	8881      	ldrh	r1, [r0, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d036:	4798      	blx	r3
 800d038:	88a3      	ldrh	r3, [r4, #4]
 800d03a:	3301      	adds	r3, #1
 800d03c:	80a3      	strh	r3, [r4, #4]
 800d03e:	bd10      	pop	{r4, pc}

0800d040 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d040:	6803      	ldr	r3, [r0, #0]
 800d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d044:	4718      	bx	r3

0800d046 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d046:	4770      	bx	lr

0800d048 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d048:	4a02      	ldr	r2, [pc, #8]	; (800d054 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d04a:	6002      	str	r2, [r0, #0]
 800d04c:	2200      	movs	r2, #0
 800d04e:	8082      	strh	r2, [r0, #4]
 800d050:	4770      	bx	lr
 800d052:	bf00      	nop
 800d054:	08022afc 	.word	0x08022afc

0800d058 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d058:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d05a:	2000      	movs	r0, #0
 800d05c:	b12b      	cbz	r3, 800d06a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d05e:	b920      	cbnz	r0, 800d06a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d060:	1a5a      	subs	r2, r3, r1
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	4250      	negs	r0, r2
 800d066:	4150      	adcs	r0, r2
 800d068:	e7f8      	b.n	800d05c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d06a:	4770      	bx	lr

0800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d06c:	2300      	movs	r3, #0
 800d06e:	6148      	str	r0, [r1, #20]
 800d070:	618b      	str	r3, [r1, #24]
 800d072:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d074:	b913      	cbnz	r3, 800d07c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d076:	6281      	str	r1, [r0, #40]	; 0x28
 800d078:	4770      	bx	lr
 800d07a:	4613      	mov	r3, r2
 800d07c:	699a      	ldr	r2, [r3, #24]
 800d07e:	2a00      	cmp	r2, #0
 800d080:	d1fb      	bne.n	800d07a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d082:	6199      	str	r1, [r3, #24]
 800d084:	4770      	bx	lr

0800d086 <_ZN8touchgfx9Container9removeAllEv>:
 800d086:	2200      	movs	r2, #0
 800d088:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d08a:	b123      	cbz	r3, 800d096 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d08c:	6999      	ldr	r1, [r3, #24]
 800d08e:	6281      	str	r1, [r0, #40]	; 0x28
 800d090:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d094:	e7f8      	b.n	800d088 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d096:	4770      	bx	lr

0800d098 <_ZN8touchgfx9Container6unlinkEv>:
 800d098:	2300      	movs	r3, #0
 800d09a:	6283      	str	r3, [r0, #40]	; 0x28
 800d09c:	4770      	bx	lr

0800d09e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d09e:	2200      	movs	r2, #0
 800d0a0:	8002      	strh	r2, [r0, #0]
 800d0a2:	8042      	strh	r2, [r0, #2]
 800d0a4:	8082      	strh	r2, [r0, #4]
 800d0a6:	80c2      	strh	r2, [r0, #6]
 800d0a8:	4770      	bx	lr

0800d0aa <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d0aa:	b570      	push	{r4, r5, r6, lr}
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	4616      	mov	r6, r2
 800d0b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d0b2:	b13c      	cbz	r4, 800d0c4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d0b4:	6823      	ldr	r3, [r4, #0]
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4632      	mov	r2, r6
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0be:	4798      	blx	r3
 800d0c0:	69a4      	ldr	r4, [r4, #24]
 800d0c2:	e7f6      	b.n	800d0b2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d0c4:	bd70      	pop	{r4, r5, r6, pc}

0800d0c6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d0c6:	b538      	push	{r3, r4, r5, lr}
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d0cc:	b134      	cbz	r4, 800d0dc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d0ce:	682b      	ldr	r3, [r5, #0]
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	4798      	blx	r3
 800d0d8:	69a4      	ldr	r4, [r4, #24]
 800d0da:	e7f7      	b.n	800d0cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d0dc:	bd38      	pop	{r3, r4, r5, pc}

0800d0de <_ZN8touchgfx9ContainerD1Ev>:
 800d0de:	4770      	bx	lr

0800d0e0 <_ZN8touchgfx9ContainerD0Ev>:
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	212c      	movs	r1, #44	; 0x2c
 800d0e6:	f011 f866 	bl	801e1b6 <_ZdlPvj>
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	bd10      	pop	{r4, pc}

0800d0ee <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d0ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d0f0:	b19b      	cbz	r3, 800d11a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d0f2:	428b      	cmp	r3, r1
 800d0f4:	d109      	bne.n	800d10a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d0f6:	699a      	ldr	r2, [r3, #24]
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6159      	str	r1, [r3, #20]
 800d0fc:	6282      	str	r2, [r0, #40]	; 0x28
 800d0fe:	b902      	cbnz	r2, 800d102 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d100:	4770      	bx	lr
 800d102:	6199      	str	r1, [r3, #24]
 800d104:	4770      	bx	lr
 800d106:	4613      	mov	r3, r2
 800d108:	b13a      	cbz	r2, 800d11a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d10a:	699a      	ldr	r2, [r3, #24]
 800d10c:	428a      	cmp	r2, r1
 800d10e:	d1fa      	bne.n	800d106 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d110:	698a      	ldr	r2, [r1, #24]
 800d112:	619a      	str	r2, [r3, #24]
 800d114:	2300      	movs	r3, #0
 800d116:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d11a:	4770      	bx	lr

0800d11c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d11c:	b410      	push	{r4}
 800d11e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d120:	4604      	mov	r4, r0
 800d122:	b92b      	cbnz	r3, 800d130 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d124:	6803      	ldr	r3, [r0, #0]
 800d126:	4611      	mov	r1, r2
 800d128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d12e:	4718      	bx	r3
 800d130:	b941      	cbnz	r1, 800d144 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d132:	6193      	str	r3, [r2, #24]
 800d134:	6282      	str	r2, [r0, #40]	; 0x28
 800d136:	6154      	str	r4, [r2, #20]
 800d138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d13c:	4770      	bx	lr
 800d13e:	4603      	mov	r3, r0
 800d140:	2800      	cmp	r0, #0
 800d142:	d0f9      	beq.n	800d138 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d144:	4299      	cmp	r1, r3
 800d146:	6998      	ldr	r0, [r3, #24]
 800d148:	d1f9      	bne.n	800d13e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d14a:	6190      	str	r0, [r2, #24]
 800d14c:	618a      	str	r2, [r1, #24]
 800d14e:	e7f2      	b.n	800d136 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d154:	461f      	mov	r7, r3
 800d156:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d15a:	460d      	mov	r5, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	b103      	cbz	r3, 800d162 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d160:	6038      	str	r0, [r7, #0]
 800d162:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d164:	b314      	cbz	r4, 800d1ac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d166:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d16a:	b1eb      	cbz	r3, 800d1a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d16c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d170:	428d      	cmp	r5, r1
 800d172:	db19      	blt.n	800d1a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d174:	b289      	uxth	r1, r1
 800d176:	8923      	ldrh	r3, [r4, #8]
 800d178:	440b      	add	r3, r1
 800d17a:	b21b      	sxth	r3, r3
 800d17c:	429d      	cmp	r5, r3
 800d17e:	da13      	bge.n	800d1a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d180:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d184:	4296      	cmp	r6, r2
 800d186:	db0f      	blt.n	800d1a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d188:	b292      	uxth	r2, r2
 800d18a:	8963      	ldrh	r3, [r4, #10]
 800d18c:	4413      	add	r3, r2
 800d18e:	b21b      	sxth	r3, r3
 800d190:	429e      	cmp	r6, r3
 800d192:	da09      	bge.n	800d1a8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	1ab2      	subs	r2, r6, r2
 800d198:	1a69      	subs	r1, r5, r1
 800d19a:	4620      	mov	r0, r4
 800d19c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800d1a0:	b212      	sxth	r2, r2
 800d1a2:	463b      	mov	r3, r7
 800d1a4:	b209      	sxth	r1, r1
 800d1a6:	47c0      	blx	r8
 800d1a8:	69a4      	ldr	r4, [r4, #24]
 800d1aa:	e7db      	b.n	800d164 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	4c6d      	ldr	r4, [pc, #436]	; (800d36c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d1b6:	b0a1      	sub	sp, #132	; 0x84
 800d1b8:	4606      	mov	r6, r0
 800d1ba:	6824      	ldr	r4, [r4, #0]
 800d1bc:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d1be:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	9303      	str	r3, [sp, #12]
 800d1c6:	802c      	strh	r4, [r5, #0]
 800d1c8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d1ca:	802c      	strh	r4, [r5, #0]
 800d1cc:	601c      	str	r4, [r3, #0]
 800d1ce:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d1d2:	f7ff ffbd 	bl	800d150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d1d6:	f1b9 0f03 	cmp.w	r9, #3
 800d1da:	f340 80c1 	ble.w	800d360 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	a80c      	add	r0, sp, #48	; 0x30
 800d1e2:	f006 fb39 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d1e6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d1ea:	9306      	str	r3, [sp, #24]
 800d1ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800d1f0:	9307      	str	r3, [sp, #28]
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	f8d3 a000 	ldr.w	sl, [r3]
 800d1f8:	f1ba 0f00 	cmp.w	sl, #0
 800d1fc:	f000 80b3 	beq.w	800d366 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d200:	4651      	mov	r1, sl
 800d202:	a810      	add	r0, sp, #64	; 0x40
 800d204:	f006 fb28 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d208:	2002      	movs	r0, #2
 800d20a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800d20e:	9b01      	ldr	r3, [sp, #4]
 800d210:	9a06      	ldr	r2, [sp, #24]
 800d212:	fb91 f1f0 	sdiv	r1, r1, r0
 800d216:	189d      	adds	r5, r3, r2
 800d218:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800d21c:	9a07      	ldr	r2, [sp, #28]
 800d21e:	4419      	add	r1, r3
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	4413      	add	r3, r2
 800d224:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d228:	1a6d      	subs	r5, r5, r1
 800d22a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d22e:	fb92 f2f0 	sdiv	r2, r2, r0
 800d232:	440a      	add	r2, r1
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	435b      	muls	r3, r3
 800d238:	fb05 3505 	mla	r5, r5, r5, r3
 800d23c:	4f4c      	ldr	r7, [pc, #304]	; (800d370 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d23e:	ac10      	add	r4, sp, #64	; 0x40
 800d240:	f1b9 0f0c 	cmp.w	r9, #12
 800d244:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d248:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d24a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d24c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d24e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d250:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d254:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d258:	f04f 0303 	mov.w	r3, #3
 800d25c:	bfd8      	it	le
 800d25e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d262:	f04f 0400 	mov.w	r4, #0
 800d266:	f8cd 9000 	str.w	r9, [sp]
 800d26a:	bfcc      	ite	gt
 800d26c:	4698      	movgt	r8, r3
 800d26e:	fb92 f8f3 	sdivle	r8, r2, r3
 800d272:	1c63      	adds	r3, r4, #1
 800d274:	aa10      	add	r2, sp, #64	; 0x40
 800d276:	f004 0401 	and.w	r4, r4, #1
 800d27a:	f04f 0b00 	mov.w	fp, #0
 800d27e:	9308      	str	r3, [sp, #32]
 800d280:	9b00      	ldr	r3, [sp, #0]
 800d282:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d286:	fb93 f3f8 	sdiv	r3, r3, r8
 800d28a:	3404      	adds	r4, #4
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	9304      	str	r3, [sp, #16]
 800d290:	9a04      	ldr	r2, [sp, #16]
 800d292:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d296:	fb13 f302 	smulbb	r3, r3, r2
 800d29a:	9a01      	ldr	r2, [sp, #4]
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	1899      	adds	r1, r3, r2
 800d2a0:	9305      	str	r3, [sp, #20]
 800d2a2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d2a6:	b209      	sxth	r1, r1
 800d2a8:	4299      	cmp	r1, r3
 800d2aa:	db4d      	blt.n	800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2ac:	8932      	ldrh	r2, [r6, #8]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	b21b      	sxth	r3, r3
 800d2b2:	4299      	cmp	r1, r3
 800d2b4:	da48      	bge.n	800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2b6:	9b04      	ldr	r3, [sp, #16]
 800d2b8:	6827      	ldr	r7, [r4, #0]
 800d2ba:	fb17 f703 	smulbb	r7, r7, r3
 800d2be:	9b02      	ldr	r3, [sp, #8]
 800d2c0:	b2bf      	uxth	r7, r7
 800d2c2:	18fa      	adds	r2, r7, r3
 800d2c4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d2c8:	b212      	sxth	r2, r2
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	db3c      	blt.n	800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2ce:	8970      	ldrh	r0, [r6, #10]
 800d2d0:	4403      	add	r3, r0
 800d2d2:	b21b      	sxth	r3, r3
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	da37      	bge.n	800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4630      	mov	r0, r6
 800d2dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2de:	ab0b      	add	r3, sp, #44	; 0x2c
 800d2e0:	f7ff ff36 	bl	800d150 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2e6:	b37a      	cbz	r2, 800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2e8:	4552      	cmp	r2, sl
 800d2ea:	d02d      	beq.n	800d348 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d2ec:	4611      	mov	r1, r2
 800d2ee:	a80e      	add	r0, sp, #56	; 0x38
 800d2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f2:	f006 fab1 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d2f6:	f04f 0e02 	mov.w	lr, #2
 800d2fa:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800d2fe:	9a06      	ldr	r2, [sp, #24]
 800d300:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800d30a:	4413      	add	r3, r2
 800d30c:	9a07      	ldr	r2, [sp, #28]
 800d30e:	fb91 f1fe 	sdiv	r1, r1, lr
 800d312:	fb9c fcfe 	sdiv	ip, ip, lr
 800d316:	4401      	add	r1, r0
 800d318:	1a58      	subs	r0, r3, r1
 800d31a:	9b02      	ldr	r3, [sp, #8]
 800d31c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800d320:	4413      	add	r3, r2
 800d322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d324:	448c      	add	ip, r1
 800d326:	eba3 030c 	sub.w	r3, r3, ip
 800d32a:	435b      	muls	r3, r3
 800d32c:	fb00 3300 	mla	r3, r0, r0, r3
 800d330:	42ab      	cmp	r3, r5
 800d332:	d208      	bcs.n	800d346 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d336:	461d      	mov	r5, r3
 800d338:	9803      	ldr	r0, [sp, #12]
 800d33a:	6001      	str	r1, [r0, #0]
 800d33c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d33e:	9805      	ldr	r0, [sp, #20]
 800d340:	8008      	strh	r0, [r1, #0]
 800d342:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d344:	800f      	strh	r7, [r1, #0]
 800d346:	4692      	mov	sl, r2
 800d348:	f10b 0b01 	add.w	fp, fp, #1
 800d34c:	3408      	adds	r4, #8
 800d34e:	f1bb 0f04 	cmp.w	fp, #4
 800d352:	d19d      	bne.n	800d290 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d354:	9b00      	ldr	r3, [sp, #0]
 800d356:	9c08      	ldr	r4, [sp, #32]
 800d358:	444b      	add	r3, r9
 800d35a:	4544      	cmp	r4, r8
 800d35c:	9300      	str	r3, [sp, #0]
 800d35e:	d188      	bne.n	800d272 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d360:	b021      	add	sp, #132	; 0x84
 800d362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d366:	f04f 35ff 	mov.w	r5, #4294967295
 800d36a:	e767      	b.n	800d23c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d36c:	2400f590 	.word	0x2400f590
 800d370:	080212f0 	.word	0x080212f0

0800d374 <_ZN8touchgfx4RectaNERKS0_>:
 800d374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d378:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d37c:	888c      	ldrh	r4, [r1, #4]
 800d37e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d382:	443c      	add	r4, r7
 800d384:	b2a4      	uxth	r4, r4
 800d386:	fa0f f884 	sxth.w	r8, r4
 800d38a:	45c1      	cmp	r9, r8
 800d38c:	da2f      	bge.n	800d3ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d38e:	8882      	ldrh	r2, [r0, #4]
 800d390:	444a      	add	r2, r9
 800d392:	b292      	uxth	r2, r2
 800d394:	fa0f fe82 	sxth.w	lr, r2
 800d398:	4577      	cmp	r7, lr
 800d39a:	da28      	bge.n	800d3ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d39c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d3a0:	88cb      	ldrh	r3, [r1, #6]
 800d3a2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d3a6:	442b      	add	r3, r5
 800d3a8:	b21b      	sxth	r3, r3
 800d3aa:	429e      	cmp	r6, r3
 800d3ac:	da1f      	bge.n	800d3ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d3ae:	88c3      	ldrh	r3, [r0, #6]
 800d3b0:	4433      	add	r3, r6
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	fa0f fc83 	sxth.w	ip, r3
 800d3b8:	4565      	cmp	r5, ip
 800d3ba:	da18      	bge.n	800d3ee <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d3bc:	454f      	cmp	r7, r9
 800d3be:	bfb8      	it	lt
 800d3c0:	464f      	movlt	r7, r9
 800d3c2:	42b5      	cmp	r5, r6
 800d3c4:	bfb8      	it	lt
 800d3c6:	4635      	movlt	r5, r6
 800d3c8:	45f0      	cmp	r8, lr
 800d3ca:	bfd8      	it	le
 800d3cc:	4622      	movle	r2, r4
 800d3ce:	1bd2      	subs	r2, r2, r7
 800d3d0:	8082      	strh	r2, [r0, #4]
 800d3d2:	884a      	ldrh	r2, [r1, #2]
 800d3d4:	88c9      	ldrh	r1, [r1, #6]
 800d3d6:	8007      	strh	r7, [r0, #0]
 800d3d8:	440a      	add	r2, r1
 800d3da:	8045      	strh	r5, [r0, #2]
 800d3dc:	b292      	uxth	r2, r2
 800d3de:	b211      	sxth	r1, r2
 800d3e0:	458c      	cmp	ip, r1
 800d3e2:	bfa8      	it	ge
 800d3e4:	4613      	movge	r3, r2
 800d3e6:	1b5b      	subs	r3, r3, r5
 800d3e8:	80c3      	strh	r3, [r0, #6]
 800d3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	8003      	strh	r3, [r0, #0]
 800d3f2:	8043      	strh	r3, [r0, #2]
 800d3f4:	8083      	strh	r3, [r0, #4]
 800d3f6:	80c3      	strh	r3, [r0, #6]
 800d3f8:	e7f7      	b.n	800d3ea <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d3fa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	dd06      	ble.n	800d410 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d402:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d406:	2800      	cmp	r0, #0
 800d408:	bfcc      	ite	gt
 800d40a:	2000      	movgt	r0, #0
 800d40c:	2001      	movle	r0, #1
 800d40e:	4770      	bx	lr
 800d410:	2001      	movs	r0, #1
 800d412:	4770      	bx	lr

0800d414 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d418:	2300      	movs	r3, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800d41e:	8003      	strh	r3, [r0, #0]
 800d420:	8043      	strh	r3, [r0, #2]
 800d422:	8083      	strh	r3, [r0, #4]
 800d424:	80c3      	strh	r3, [r0, #6]
 800d426:	2d00      	cmp	r5, #0
 800d428:	d040      	beq.n	800d4ac <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d42a:	1d28      	adds	r0, r5, #4
 800d42c:	f7ff ffe5 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d430:	b988      	cbnz	r0, 800d456 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d432:	4620      	mov	r0, r4
 800d434:	f7ff ffe1 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d438:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d43c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d440:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d444:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d448:	b138      	cbz	r0, 800d45a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d44a:	8022      	strh	r2, [r4, #0]
 800d44c:	8063      	strh	r3, [r4, #2]
 800d44e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d452:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d456:	69ad      	ldr	r5, [r5, #24]
 800d458:	e7e5      	b.n	800d426 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d45a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d45e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d462:	4290      	cmp	r0, r2
 800d464:	4607      	mov	r7, r0
 800d466:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d46a:	460e      	mov	r6, r1
 800d46c:	bfa8      	it	ge
 800d46e:	4617      	movge	r7, r2
 800d470:	4299      	cmp	r1, r3
 800d472:	4472      	add	r2, lr
 800d474:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d478:	bfa8      	it	ge
 800d47a:	461e      	movge	r6, r3
 800d47c:	4440      	add	r0, r8
 800d47e:	4471      	add	r1, lr
 800d480:	4463      	add	r3, ip
 800d482:	b200      	sxth	r0, r0
 800d484:	8027      	strh	r7, [r4, #0]
 800d486:	b212      	sxth	r2, r2
 800d488:	8066      	strh	r6, [r4, #2]
 800d48a:	b209      	sxth	r1, r1
 800d48c:	b21b      	sxth	r3, r3
 800d48e:	4290      	cmp	r0, r2
 800d490:	bfac      	ite	ge
 800d492:	ebc7 0200 	rsbge	r2, r7, r0
 800d496:	ebc7 0202 	rsblt	r2, r7, r2
 800d49a:	4299      	cmp	r1, r3
 800d49c:	bfac      	ite	ge
 800d49e:	ebc6 0301 	rsbge	r3, r6, r1
 800d4a2:	ebc6 0303 	rsblt	r3, r6, r3
 800d4a6:	80a2      	strh	r2, [r4, #4]
 800d4a8:	80e3      	strh	r3, [r4, #6]
 800d4aa:	e7d4      	b.n	800d456 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d4b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d4b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d4b6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d4ba:	b383      	cbz	r3, 800d51e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d4bc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d4be:	b374      	cbz	r4, 800d51e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d4c0:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d4c4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d4c8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d4cc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d4d0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d4d4:	b303      	cbz	r3, 800d518 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d4d6:	4668      	mov	r0, sp
 800d4d8:	1d21      	adds	r1, r4, #4
 800d4da:	f8ad 5000 	strh.w	r5, [sp]
 800d4de:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d4e2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d4e6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d4ea:	f7ff ff43 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800d4ee:	4668      	mov	r0, sp
 800d4f0:	f7ff ff83 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d4f4:	b980      	cbnz	r0, 800d518 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d4f6:	f8bd 3000 	ldrh.w	r3, [sp]
 800d4fa:	4669      	mov	r1, sp
 800d4fc:	88a2      	ldrh	r2, [r4, #4]
 800d4fe:	4620      	mov	r0, r4
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	88e2      	ldrh	r2, [r4, #6]
 800d504:	f8ad 3000 	strh.w	r3, [sp]
 800d508:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d50c:	1a9b      	subs	r3, r3, r2
 800d50e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	4798      	blx	r3
 800d518:	69a4      	ldr	r4, [r4, #24]
 800d51a:	2c00      	cmp	r4, #0
 800d51c:	d1d8      	bne.n	800d4d0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d51e:	b002      	add	sp, #8
 800d520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d526:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d52a:	460d      	mov	r5, r1
 800d52c:	4616      	mov	r6, r2
 800d52e:	b323      	cbz	r3, 800d57a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d530:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d532:	b314      	cbz	r4, 800d57a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d534:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d538:	b1eb      	cbz	r3, 800d576 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d53a:	6828      	ldr	r0, [r5, #0]
 800d53c:	466b      	mov	r3, sp
 800d53e:	6869      	ldr	r1, [r5, #4]
 800d540:	c303      	stmia	r3!, {r0, r1}
 800d542:	4668      	mov	r0, sp
 800d544:	1d21      	adds	r1, r4, #4
 800d546:	f7ff ff15 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800d54a:	4668      	mov	r0, sp
 800d54c:	f7ff ff55 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800d550:	b988      	cbnz	r0, 800d576 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d552:	f8bd 3000 	ldrh.w	r3, [sp]
 800d556:	4669      	mov	r1, sp
 800d558:	88a2      	ldrh	r2, [r4, #4]
 800d55a:	4620      	mov	r0, r4
 800d55c:	1a9b      	subs	r3, r3, r2
 800d55e:	88e2      	ldrh	r2, [r4, #6]
 800d560:	f8ad 3000 	strh.w	r3, [sp]
 800d564:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d568:	1a9b      	subs	r3, r3, r2
 800d56a:	4632      	mov	r2, r6
 800d56c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d574:	4798      	blx	r3
 800d576:	69a4      	ldr	r4, [r4, #24]
 800d578:	e7db      	b.n	800d532 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d57a:	b002      	add	sp, #8
 800d57c:	bd70      	pop	{r4, r5, r6, pc}

0800d57e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d57e:	6803      	ldr	r3, [r0, #0]
 800d580:	b513      	push	{r0, r1, r4, lr}
 800d582:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800d586:	2300      	movs	r3, #0
 800d588:	e9cd 3300 	strd	r3, r3, [sp]
 800d58c:	466b      	mov	r3, sp
 800d58e:	47a0      	blx	r4
 800d590:	b002      	add	sp, #8
 800d592:	bd10      	pop	{r4, pc}

0800d594 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d594:	2301      	movs	r3, #1
 800d596:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d59a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d59e:	4770      	bx	lr

0800d5a0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d5a6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d5aa:	4770      	bx	lr

0800d5ac <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d5ac:	6843      	ldr	r3, [r0, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	725a      	strb	r2, [r3, #9]
 800d5b2:	6840      	ldr	r0, [r0, #4]
 800d5b4:	6803      	ldr	r3, [r0, #0]
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	4718      	bx	r3

0800d5ba <_ZN8touchgfx3HAL8flushDMAEv>:
 800d5ba:	6840      	ldr	r0, [r0, #4]
 800d5bc:	6803      	ldr	r3, [r0, #0]
 800d5be:	689b      	ldr	r3, [r3, #8]
 800d5c0:	4718      	bx	r3

0800d5c2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d5c2:	b530      	push	{r4, r5, lr}
 800d5c4:	b08b      	sub	sp, #44	; 0x2c
 800d5c6:	6804      	ldr	r4, [r0, #0]
 800d5c8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800d5cc:	9509      	str	r5, [sp, #36]	; 0x24
 800d5ce:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800d5d2:	9508      	str	r5, [sp, #32]
 800d5d4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800d5d8:	9507      	str	r5, [sp, #28]
 800d5da:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800d5de:	9506      	str	r5, [sp, #24]
 800d5e0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800d5e4:	9505      	str	r5, [sp, #20]
 800d5e6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800d5ea:	9504      	str	r5, [sp, #16]
 800d5ec:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800d5f0:	9503      	str	r5, [sp, #12]
 800d5f2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d5f6:	9502      	str	r5, [sp, #8]
 800d5f8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800d5fc:	e9cd 3500 	strd	r3, r5, [sp]
 800d600:	4613      	mov	r3, r2
 800d602:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800d604:	2200      	movs	r2, #0
 800d606:	47a0      	blx	r4
 800d608:	b00b      	add	sp, #44	; 0x2c
 800d60a:	bd30      	pop	{r4, r5, pc}

0800d60c <_ZN8touchgfx3HAL10beginFrameEv>:
 800d60c:	4b04      	ldr	r3, [pc, #16]	; (800d620 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	b123      	cbz	r3, 800d61c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d612:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800d616:	f080 0001 	eor.w	r0, r0, #1
 800d61a:	4770      	bx	lr
 800d61c:	2001      	movs	r0, #1
 800d61e:	4770      	bx	lr
 800d620:	2400f58e 	.word	0x2400f58e

0800d624 <_ZN8touchgfx3HAL8endFrameEv>:
 800d624:	b510      	push	{r4, lr}
 800d626:	4604      	mov	r4, r0
 800d628:	6840      	ldr	r0, [r0, #4]
 800d62a:	6803      	ldr	r3, [r0, #0]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	4798      	blx	r3
 800d630:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800d634:	b113      	cbz	r3, 800d63c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d636:	2301      	movs	r3, #1
 800d638:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d63c:	bd10      	pop	{r4, pc}

0800d63e <_ZN8touchgfx3HAL10initializeEv>:
 800d63e:	b510      	push	{r4, lr}
 800d640:	4604      	mov	r4, r0
 800d642:	f7f4 fc8d 	bl	8001f60 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d646:	f7f4 f99f 	bl	8001988 <_ZN8touchgfx4GPIO4initEv>
 800d64a:	6860      	ldr	r0, [r4, #4]
 800d64c:	6803      	ldr	r3, [r0, #0]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	4798      	blx	r3
 800d652:	68e0      	ldr	r0, [r4, #12]
 800d654:	6803      	ldr	r3, [r0, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	4798      	blx	r3
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	4620      	mov	r0, r4
 800d65e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d664:	4718      	bx	r3
	...

0800d668 <_ZN8touchgfx3HAL4tickEv>:
 800d668:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d66a:	6803      	ldr	r3, [r0, #0]
 800d66c:	4604      	mov	r4, r0
 800d66e:	4d5b      	ldr	r5, [pc, #364]	; (800d7dc <_ZN8touchgfx3HAL4tickEv+0x174>)
 800d670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d674:	4798      	blx	r3
 800d676:	2800      	cmp	r0, #0
 800d678:	f000 8095 	beq.w	800d7a6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800d67c:	2001      	movs	r0, #1
 800d67e:	2600      	movs	r6, #0
 800d680:	f7f4 f8e8 	bl	8001854 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d684:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800d688:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800d68c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d690:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800d694:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800d698:	b133      	cbz	r3, 800d6a8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	4620      	mov	r0, r4
 800d69e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d6a2:	4798      	blx	r3
 800d6a4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800d6a8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800d6ac:	2601      	movs	r6, #1
 800d6ae:	6862      	ldr	r2, [r4, #4]
 800d6b0:	f083 0301 	eor.w	r3, r3, #1
 800d6b4:	702e      	strb	r6, [r5, #0]
 800d6b6:	7253      	strb	r3, [r2, #9]
 800d6b8:	f004 ffee 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
 800d6bc:	6803      	ldr	r3, [r0, #0]
 800d6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c0:	4798      	blx	r3
 800d6c2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d6c6:	b90b      	cbnz	r3, 800d6cc <_ZN8touchgfx3HAL4tickEv+0x64>
 800d6c8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800d6cc:	f004 ffe4 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
 800d6d0:	6803      	ldr	r3, [r0, #0]
 800d6d2:	695b      	ldr	r3, [r3, #20]
 800d6d4:	4798      	blx	r3
 800d6d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6d8:	6803      	ldr	r3, [r0, #0]
 800d6da:	691b      	ldr	r3, [r3, #16]
 800d6dc:	4798      	blx	r3
 800d6de:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d6e2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d6ee:	b10a      	cbz	r2, 800d6f4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1eb      	bne.n	800d6cc <_ZN8touchgfx3HAL4tickEv+0x64>
 800d6f4:	4a3a      	ldr	r2, [pc, #232]	; (800d7e0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800d6f6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800d6fa:	7813      	ldrb	r3, [r2, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	b25b      	sxtb	r3, r3
 800d700:	4299      	cmp	r1, r3
 800d702:	7013      	strb	r3, [r2, #0]
 800d704:	dc10      	bgt.n	800d728 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d706:	2300      	movs	r3, #0
 800d708:	68e0      	ldr	r0, [r4, #12]
 800d70a:	a902      	add	r1, sp, #8
 800d70c:	7013      	strb	r3, [r2, #0]
 800d70e:	aa03      	add	r2, sp, #12
 800d710:	6803      	ldr	r3, [r0, #0]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	4798      	blx	r3
 800d716:	6823      	ldr	r3, [r4, #0]
 800d718:	2800      	cmp	r0, #0
 800d71a:	d050      	beq.n	800d7be <_ZN8touchgfx3HAL4tickEv+0x156>
 800d71c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d720:	4620      	mov	r0, r4
 800d722:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d726:	4798      	blx	r3
 800d728:	2300      	movs	r3, #0
 800d72a:	6960      	ldr	r0, [r4, #20]
 800d72c:	f88d 3007 	strb.w	r3, [sp, #7]
 800d730:	b158      	cbz	r0, 800d74a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d732:	6803      	ldr	r3, [r0, #0]
 800d734:	f10d 0107 	add.w	r1, sp, #7
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	4798      	blx	r3
 800d73c:	b128      	cbz	r0, 800d74a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d73e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d740:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d744:	6803      	ldr	r3, [r0, #0]
 800d746:	68db      	ldr	r3, [r3, #12]
 800d748:	4798      	blx	r3
 800d74a:	f104 001c 	add.w	r0, r4, #28
 800d74e:	f010 f95b 	bl	801da08 <_ZN8touchgfx8Gestures4tickEv>
 800d752:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d756:	b30b      	cbz	r3, 800d79c <_ZN8touchgfx3HAL4tickEv+0x134>
 800d758:	6920      	ldr	r0, [r4, #16]
 800d75a:	6803      	ldr	r3, [r0, #0]
 800d75c:	691b      	ldr	r3, [r3, #16]
 800d75e:	4798      	blx	r3
 800d760:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d762:	4606      	mov	r6, r0
 800d764:	b903      	cbnz	r3, 800d768 <_ZN8touchgfx3HAL4tickEv+0x100>
 800d766:	6720      	str	r0, [r4, #112]	; 0x70
 800d768:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d76a:	4a1e      	ldr	r2, [pc, #120]	; (800d7e4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800d76c:	1af3      	subs	r3, r6, r3
 800d76e:	4293      	cmp	r3, r2
 800d770:	d914      	bls.n	800d79c <_ZN8touchgfx3HAL4tickEv+0x134>
 800d772:	6920      	ldr	r0, [r4, #16]
 800d774:	6803      	ldr	r3, [r0, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	4798      	blx	r3
 800d77a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d77c:	2264      	movs	r2, #100	; 0x64
 800d77e:	1af3      	subs	r3, r6, r3
 800d780:	fbb3 f3f2 	udiv	r3, r3, r2
 800d784:	fbb0 f0f3 	udiv	r0, r0, r3
 800d788:	2800      	cmp	r0, #0
 800d78a:	dc1d      	bgt.n	800d7c8 <_ZN8touchgfx3HAL4tickEv+0x160>
 800d78c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800d790:	6920      	ldr	r0, [r4, #16]
 800d792:	2100      	movs	r1, #0
 800d794:	6803      	ldr	r3, [r0, #0]
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	4798      	blx	r3
 800d79a:	6726      	str	r6, [r4, #112]	; 0x70
 800d79c:	f004 ff7c 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
 800d7a0:	6803      	ldr	r3, [r0, #0]
 800d7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a4:	4798      	blx	r3
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d7ae:	4798      	blx	r3
 800d7b0:	2001      	movs	r0, #1
 800d7b2:	f7f4 f87f 	bl	80018b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	702b      	strb	r3, [r5, #0]
 800d7ba:	b004      	add	sp, #16
 800d7bc:	bd70      	pop	{r4, r5, r6, pc}
 800d7be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4798      	blx	r3
 800d7c6:	e7af      	b.n	800d728 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d7c8:	2863      	cmp	r0, #99	; 0x63
 800d7ca:	bfcb      	itete	gt
 800d7cc:	2300      	movgt	r3, #0
 800d7ce:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800d7d2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800d7d6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800d7da:	e7d9      	b.n	800d790 <_ZN8touchgfx3HAL4tickEv+0x128>
 800d7dc:	2400f594 	.word	0x2400f594
 800d7e0:	2400f595 	.word	0x2400f595
 800d7e4:	05f5e100 	.word	0x05f5e100

0800d7e8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d7e8:	f7f4 bbea 	b.w	8001fc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d7ec <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d7ec:	6581      	str	r1, [r0, #88]	; 0x58
 800d7ee:	301c      	adds	r0, #28
 800d7f0:	f010 b908 	b.w	801da04 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d7f4 <_ZN8touchgfx3HAL5touchEll>:
 800d7f4:	b530      	push	{r4, r5, lr}
 800d7f6:	b087      	sub	sp, #28
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	a804      	add	r0, sp, #16
 800d7fc:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d800:	f004 fd90 	bl	8012324 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d804:	9b04      	ldr	r3, [sp, #16]
 800d806:	a906      	add	r1, sp, #24
 800d808:	a803      	add	r0, sp, #12
 800d80a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d80e:	9b05      	ldr	r3, [sp, #20]
 800d810:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d814:	f004 fdd8 	bl	80123c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d818:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800d81c:	f104 001c 	add.w	r0, r4, #28
 800d820:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d824:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d828:	b189      	cbz	r1, 800d84e <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d82a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	4613      	mov	r3, r2
 800d832:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d836:	462a      	mov	r2, r5
 800d838:	f010 f8f4 	bl	801da24 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d83c:	b128      	cbz	r0, 800d84a <_ZN8touchgfx3HAL5touchEll+0x56>
 800d83e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d842:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d844:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d848:	6623      	str	r3, [r4, #96]	; 0x60
 800d84a:	b007      	add	sp, #28
 800d84c:	bd30      	pop	{r4, r5, pc}
 800d84e:	f010 f929 	bl	801daa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d852:	2301      	movs	r3, #1
 800d854:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d858:	e7f1      	b.n	800d83e <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d85a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d85a:	b510      	push	{r4, lr}
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d046      	beq.n	800d8ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d860:	ea81 0002 	eor.w	r0, r1, r2
 800d864:	07c4      	lsls	r4, r0, #31
 800d866:	d508      	bpl.n	800d87a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d868:	440b      	add	r3, r1
 800d86a:	3a01      	subs	r2, #1
 800d86c:	428b      	cmp	r3, r1
 800d86e:	d93e      	bls.n	800d8ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d870:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d874:	f801 0b01 	strb.w	r0, [r1], #1
 800d878:	e7f8      	b.n	800d86c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d87a:	07d0      	lsls	r0, r2, #31
 800d87c:	bf42      	ittt	mi
 800d87e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d882:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d886:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d911      	bls.n	800d8b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d88e:	ea81 0402 	eor.w	r4, r1, r2
 800d892:	4610      	mov	r0, r2
 800d894:	07a4      	lsls	r4, r4, #30
 800d896:	d022      	beq.n	800d8de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d898:	f023 0401 	bic.w	r4, r3, #1
 800d89c:	440c      	add	r4, r1
 800d89e:	428c      	cmp	r4, r1
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	d904      	bls.n	800d8ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d8a4:	8812      	ldrh	r2, [r2, #0]
 800d8a6:	3002      	adds	r0, #2
 800d8a8:	f821 2b02 	strh.w	r2, [r1], #2
 800d8ac:	e7f7      	b.n	800d89e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	f023 0003 	bic.w	r0, r3, #3
 800d8b6:	4408      	add	r0, r1
 800d8b8:	4288      	cmp	r0, r1
 800d8ba:	4614      	mov	r4, r2
 800d8bc:	d904      	bls.n	800d8c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d8be:	6824      	ldr	r4, [r4, #0]
 800d8c0:	3204      	adds	r2, #4
 800d8c2:	f841 4b04 	str.w	r4, [r1], #4
 800d8c6:	e7f7      	b.n	800d8b8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d8c8:	f003 0303 	and.w	r3, r3, #3
 800d8cc:	3a01      	subs	r2, #1
 800d8ce:	440b      	add	r3, r1
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	d90c      	bls.n	800d8ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d8d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d8d8:	f801 0b01 	strb.w	r0, [r1], #1
 800d8dc:	e7f8      	b.n	800d8d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d8de:	0790      	lsls	r0, r2, #30
 800d8e0:	d0e7      	beq.n	800d8b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d8e2:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d8e6:	3b02      	subs	r3, #2
 800d8e8:	f821 0b02 	strh.w	r0, [r1], #2
 800d8ec:	e7e1      	b.n	800d8b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	bd10      	pop	{r4, pc}

0800d8f2 <_ZN8touchgfx3HAL7noTouchEv>:
 800d8f2:	b510      	push	{r4, lr}
 800d8f4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	b153      	cbz	r3, 800d912 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d8fc:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d900:	2101      	movs	r1, #1
 800d902:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800d906:	301c      	adds	r0, #28
 800d908:	f010 f8cc 	bl	801daa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d90c:	2300      	movs	r3, #0
 800d90e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d912:	bd10      	pop	{r4, pc}

0800d914 <_ZN8touchgfx3HAL3lcdEv>:
 800d914:	4b04      	ldr	r3, [pc, #16]	; (800d928 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d91c:	b10a      	cbz	r2, 800d922 <_ZN8touchgfx3HAL3lcdEv+0xe>
 800d91e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d920:	b900      	cbnz	r0, 800d924 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800d922:	6898      	ldr	r0, [r3, #8]
 800d924:	4770      	bx	lr
 800d926:	bf00      	nop
 800d928:	2400f590 	.word	0x2400f590

0800d92c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d930:	b085      	sub	sp, #20
 800d932:	4604      	mov	r4, r0
 800d934:	2000      	movs	r0, #0
 800d936:	4699      	mov	r9, r3
 800d938:	ad04      	add	r5, sp, #16
 800d93a:	460f      	mov	r7, r1
 800d93c:	4690      	mov	r8, r2
 800d93e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800d942:	69a0      	ldr	r0, [r4, #24]
 800d944:	6806      	ldr	r6, [r0, #0]
 800d946:	9501      	str	r5, [sp, #4]
 800d948:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d94c:	9500      	str	r5, [sp, #0]
 800d94e:	6835      	ldr	r5, [r6, #0]
 800d950:	47a8      	blx	r5
 800d952:	4d10      	ldr	r5, [pc, #64]	; (800d994 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800d954:	4606      	mov	r6, r0
 800d956:	f8a5 9000 	strh.w	r9, [r5]
 800d95a:	f7ff ffdb 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800d95e:	6803      	ldr	r3, [r0, #0]
 800d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d962:	4798      	blx	r3
 800d964:	b128      	cbz	r0, 800d972 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800d966:	2801      	cmp	r0, #1
 800d968:	d00b      	beq.n	800d982 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800d96a:	4630      	mov	r0, r6
 800d96c:	b005      	add	sp, #20
 800d96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d972:	882b      	ldrh	r3, [r5, #0]
 800d974:	fb08 7203 	mla	r2, r8, r3, r7
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d97e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d980:	e7f3      	b.n	800d96a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d982:	882a      	ldrh	r2, [r5, #0]
 800d984:	9b03      	ldr	r3, [sp, #12]
 800d986:	fb08 7202 	mla	r2, r8, r2, r7
 800d98a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d98e:	1a9a      	subs	r2, r3, r2
 800d990:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d992:	e7ea      	b.n	800d96a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800d994:	2400f58a 	.word	0x2400f58a

0800d998 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d99a:	b08b      	sub	sp, #44	; 0x2c
 800d99c:	4617      	mov	r7, r2
 800d99e:	4604      	mov	r4, r0
 800d9a0:	460e      	mov	r6, r1
 800d9a2:	461d      	mov	r5, r3
 800d9a4:	f7ff ffb6 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800d9a8:	6803      	ldr	r3, [r0, #0]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	4798      	blx	r3
 800d9ae:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d9b2:	9007      	str	r0, [sp, #28]
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	6822      	ldr	r2, [r4, #0]
 800d9b8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d9bc:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d9be:	4620      	mov	r0, r4
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	9306      	str	r3, [sp, #24]
 800d9c4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d9ce:	9304      	str	r3, [sp, #16]
 800d9d0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d9d4:	9303      	str	r3, [sp, #12]
 800d9d6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d9da:	9302      	str	r3, [sp, #8]
 800d9dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d9e0:	e9cd 5300 	strd	r5, r3, [sp]
 800d9e4:	463b      	mov	r3, r7
 800d9e6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	47a8      	blx	r5
 800d9ec:	b00b      	add	sp, #44	; 0x2c
 800d9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9f0:	2400f58a 	.word	0x2400f58a

0800d9f4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d9f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9f8:	4698      	mov	r8, r3
 800d9fa:	6803      	ldr	r3, [r0, #0]
 800d9fc:	b08b      	sub	sp, #44	; 0x2c
 800d9fe:	4617      	mov	r7, r2
 800da00:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800da02:	460e      	mov	r6, r1
 800da04:	4b13      	ldr	r3, [pc, #76]	; (800da54 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800da06:	4604      	mov	r4, r0
 800da08:	f8b3 9000 	ldrh.w	r9, [r3]
 800da0c:	f7ff ff82 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800da10:	6803      	ldr	r3, [r0, #0]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	4798      	blx	r3
 800da16:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800da1a:	2200      	movs	r2, #0
 800da1c:	4631      	mov	r1, r6
 800da1e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800da22:	2302      	movs	r3, #2
 800da24:	4620      	mov	r0, r4
 800da26:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800da2a:	2301      	movs	r3, #1
 800da2c:	9305      	str	r3, [sp, #20]
 800da2e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800da32:	9304      	str	r3, [sp, #16]
 800da34:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800da38:	9303      	str	r3, [sp, #12]
 800da3a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800da3e:	9302      	str	r3, [sp, #8]
 800da40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800da44:	e9cd 8300 	strd	r8, r3, [sp]
 800da48:	463b      	mov	r3, r7
 800da4a:	47a8      	blx	r5
 800da4c:	b00b      	add	sp, #44	; 0x2c
 800da4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da52:	bf00      	nop
 800da54:	2400f58a 	.word	0x2400f58a

0800da58 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800da58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da5c:	4698      	mov	r8, r3
 800da5e:	6803      	ldr	r3, [r0, #0]
 800da60:	b087      	sub	sp, #28
 800da62:	460e      	mov	r6, r1
 800da64:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800da66:	4617      	mov	r7, r2
 800da68:	4b0f      	ldr	r3, [pc, #60]	; (800daa8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800da6a:	4604      	mov	r4, r0
 800da6c:	f8b3 9000 	ldrh.w	r9, [r3]
 800da70:	f7ff ff50 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800da74:	6803      	ldr	r3, [r0, #0]
 800da76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da78:	4798      	blx	r3
 800da7a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800da7e:	463a      	mov	r2, r7
 800da80:	4631      	mov	r1, r6
 800da82:	f8cd 900c 	str.w	r9, [sp, #12]
 800da86:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800da8a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800da8e:	4620      	mov	r0, r4
 800da90:	9302      	str	r3, [sp, #8]
 800da92:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800da96:	9301      	str	r3, [sp, #4]
 800da98:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800da9c:	9300      	str	r3, [sp, #0]
 800da9e:	4643      	mov	r3, r8
 800daa0:	47a8      	blx	r5
 800daa2:	b007      	add	sp, #28
 800daa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daa8:	2400f58a 	.word	0x2400f58a

0800daac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800daac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab0:	4604      	mov	r4, r0
 800dab2:	b08f      	sub	sp, #60	; 0x3c
 800dab4:	4610      	mov	r0, r2
 800dab6:	460d      	mov	r5, r1
 800dab8:	4691      	mov	r9, r2
 800daba:	461e      	mov	r6, r3
 800dabc:	f007 fe3a 	bl	8015734 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f000 809d 	beq.w	800dc00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	4620      	mov	r0, r4
 800daca:	f8df b198 	ldr.w	fp, [pc, #408]	; 800dc64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800dace:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800dad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad4:	4798      	blx	r3
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	4620      	mov	r0, r4
 800dada:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800dc68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800dade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae0:	4798      	blx	r3
 800dae2:	f8bb 3000 	ldrh.w	r3, [fp]
 800dae6:	4f5c      	ldr	r7, [pc, #368]	; (800dc58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	f8ba 3000 	ldrh.w	r3, [sl]
 800daee:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800daf2:	4640      	mov	r0, r8
 800daf4:	9302      	str	r3, [sp, #8]
 800daf6:	883b      	ldrh	r3, [r7, #0]
 800daf8:	9303      	str	r3, [sp, #12]
 800dafa:	4b58      	ldr	r3, [pc, #352]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800dafc:	881a      	ldrh	r2, [r3, #0]
 800dafe:	9305      	str	r3, [sp, #20]
 800db00:	9204      	str	r2, [sp, #16]
 800db02:	f007 ff5b 	bl	80159bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800db06:	8038      	strh	r0, [r7, #0]
 800db08:	4640      	mov	r0, r8
 800db0a:	f007 ff8b 	bl	8015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800db0e:	9b05      	ldr	r3, [sp, #20]
 800db10:	b280      	uxth	r0, r0
 800db12:	8018      	strh	r0, [r3, #0]
 800db14:	4b52      	ldr	r3, [pc, #328]	; (800dc60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d174      	bne.n	800dc06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800db1c:	883b      	ldrh	r3, [r7, #0]
 800db1e:	f8aa 0000 	strh.w	r0, [sl]
 800db22:	f8ab 3000 	strh.w	r3, [fp]
 800db26:	4648      	mov	r0, r9
 800db28:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800db2c:	f007 fe02 	bl	8015734 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800db30:	2200      	movs	r2, #0
 800db32:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800db36:	4611      	mov	r1, r2
 800db38:	4628      	mov	r0, r5
 800db3a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800db3e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800db42:	f7f5 f87a 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
 800db46:	2301      	movs	r3, #1
 800db48:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800db4c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800db50:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800db54:	2b00      	cmp	r3, #0
 800db56:	dd5c      	ble.n	800dc12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800db58:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	dd58      	ble.n	800dc12 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800db60:	462a      	mov	r2, r5
 800db62:	ab0a      	add	r3, sp, #40	; 0x28
 800db64:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800db68:	6851      	ldr	r1, [r2, #4]
 800db6a:	c303      	stmia	r3!, {r0, r1}
 800db6c:	4631      	mov	r1, r6
 800db6e:	a80a      	add	r0, sp, #40	; 0x28
 800db70:	f7ff fc00 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800db74:	4b38      	ldr	r3, [pc, #224]	; (800dc58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800db76:	2100      	movs	r1, #0
 800db78:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db7c:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800db7e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800db82:	aa0a      	add	r2, sp, #40	; 0x28
 800db84:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db88:	910c      	str	r1, [sp, #48]	; 0x30
 800db8a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800db8e:	ab08      	add	r3, sp, #32
 800db90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db94:	e883 0003 	stmia.w	r3, {r0, r1}
 800db98:	4618      	mov	r0, r3
 800db9a:	a90c      	add	r1, sp, #48	; 0x30
 800db9c:	f7ff fbea 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800dba0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d13c      	bne.n	800dc20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800dba6:	2000      	movs	r0, #0
 800dba8:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800dbac:	2600      	movs	r6, #0
 800dbae:	696b      	ldr	r3, [r5, #20]
 800dbb0:	a908      	add	r1, sp, #32
 800dbb2:	682a      	ldr	r2, [r5, #0]
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	9305      	str	r3, [sp, #20]
 800dbb8:	616e      	str	r6, [r5, #20]
 800dbba:	6892      	ldr	r2, [r2, #8]
 800dbbc:	4790      	blx	r2
 800dbbe:	9b05      	ldr	r3, [sp, #20]
 800dbc0:	4652      	mov	r2, sl
 800dbc2:	4649      	mov	r1, r9
 800dbc4:	616b      	str	r3, [r5, #20]
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800dbcc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800dbd0:	f7f5 f833 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
 800dbd4:	9a01      	ldr	r2, [sp, #4]
 800dbd6:	4b23      	ldr	r3, [pc, #140]	; (800dc64 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800dbd8:	4620      	mov	r0, r4
 800dbda:	801a      	strh	r2, [r3, #0]
 800dbdc:	9a02      	ldr	r2, [sp, #8]
 800dbde:	4b22      	ldr	r3, [pc, #136]	; (800dc68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800dbe0:	801a      	strh	r2, [r3, #0]
 800dbe2:	9a03      	ldr	r2, [sp, #12]
 800dbe4:	4b1c      	ldr	r3, [pc, #112]	; (800dc58 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800dbe6:	801a      	strh	r2, [r3, #0]
 800dbe8:	4b1c      	ldr	r3, [pc, #112]	; (800dc5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800dbea:	9a04      	ldr	r2, [sp, #16]
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbf6:	4798      	blx	r3
 800dbf8:	6823      	ldr	r3, [r4, #0]
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	4798      	blx	r3
 800dc00:	b00f      	add	sp, #60	; 0x3c
 800dc02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc06:	883b      	ldrh	r3, [r7, #0]
 800dc08:	f8ab 0000 	strh.w	r0, [fp]
 800dc0c:	f8aa 3000 	strh.w	r3, [sl]
 800dc10:	e789      	b.n	800db26 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800dc12:	462a      	mov	r2, r5
 800dc14:	ab0a      	add	r3, sp, #40	; 0x28
 800dc16:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800dc1a:	6851      	ldr	r1, [r2, #4]
 800dc1c:	c303      	stmia	r3!, {r0, r1}
 800dc1e:	e7a9      	b.n	800db74 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800dc20:	a807      	add	r0, sp, #28
 800dc22:	f008 f803 	bl	8015c2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dc26:	4606      	mov	r6, r0
 800dc28:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800dc2a:	6803      	ldr	r3, [r0, #0]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2e:	4798      	blx	r3
 800dc30:	4286      	cmp	r6, r0
 800dc32:	d1b8      	bne.n	800dba6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800dc34:	f7ff fe6e 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800dc38:	6803      	ldr	r3, [r0, #0]
 800dc3a:	4606      	mov	r6, r0
 800dc3c:	a807      	add	r0, sp, #28
 800dc3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc40:	9305      	str	r3, [sp, #20]
 800dc42:	f007 fff3 	bl	8015c2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800dc46:	9b05      	ldr	r3, [sp, #20]
 800dc48:	4601      	mov	r1, r0
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	4798      	blx	r3
 800dc4e:	f080 0001 	eor.w	r0, r0, #1
 800dc52:	b2c0      	uxtb	r0, r0
 800dc54:	e7a8      	b.n	800dba8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800dc56:	bf00      	nop
 800dc58:	2400f584 	.word	0x2400f584
 800dc5c:	2400f586 	.word	0x2400f586
 800dc60:	2400f588 	.word	0x2400f588
 800dc64:	2400f58a 	.word	0x2400f58a
 800dc68:	2400f58c 	.word	0x2400f58c

0800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800dc6c:	4b07      	ldr	r3, [pc, #28]	; (800dc8c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800dc6e:	b510      	push	{r4, lr}
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	4604      	mov	r4, r0
 800dc74:	b13b      	cbz	r3, 800dc86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dc76:	6803      	ldr	r3, [r0, #0]
 800dc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7a:	4798      	blx	r3
 800dc7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dc7e:	4283      	cmp	r3, r0
 800dc80:	d101      	bne.n	800dc86 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800dc82:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800dc84:	bd10      	pop	{r4, pc}
 800dc86:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dc88:	e7fc      	b.n	800dc84 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800dc8a:	bf00      	nop
 800dc8c:	2400f58e 	.word	0x2400f58e

0800dc90 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	461d      	mov	r5, r3
 800dc96:	b08a      	sub	sp, #40	; 0x28
 800dc98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc9c:	4690      	mov	r8, r2
 800dc9e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800dca2:	2400      	movs	r4, #0
 800dca4:	4607      	mov	r7, r0
 800dca6:	fb06 8505 	mla	r5, r6, r5, r8
 800dcaa:	9404      	str	r4, [sp, #16]
 800dcac:	f88d 4020 	strb.w	r4, [sp, #32]
 800dcb0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dcb4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800dcb8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dcbc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800dcc0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dcc4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dcc8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dccc:	f7ff ffce 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dcd0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dcda:	a901      	add	r1, sp, #4
 800dcdc:	9505      	str	r5, [sp, #20]
 800dcde:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800dce2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800dce6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800dcea:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800dcee:	6803      	ldr	r3, [r0, #0]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	4798      	blx	r3
 800dcf4:	b00a      	add	sp, #40	; 0x28
 800dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dcfa <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800dcfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dcfe:	b08b      	sub	sp, #44	; 0x2c
 800dd00:	2400      	movs	r4, #0
 800dd02:	4691      	mov	r9, r2
 800dd04:	461d      	mov	r5, r3
 800dd06:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800dd0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dd0e:	4688      	mov	r8, r1
 800dd10:	4607      	mov	r7, r0
 800dd12:	9404      	str	r4, [sp, #16]
 800dd14:	fb06 9505 	mla	r5, r6, r5, r9
 800dd18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd1c:	f7ff ffa6 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dd20:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dd24:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dd2e:	a901      	add	r1, sp, #4
 800dd30:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800dd34:	9505      	str	r5, [sp, #20]
 800dd36:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dd3a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800dd3e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800dd42:	f8cd 8010 	str.w	r8, [sp, #16]
 800dd46:	f8ad 4020 	strh.w	r4, [sp, #32]
 800dd4a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800dd4e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800dd52:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800dd56:	6803      	ldr	r3, [r0, #0]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	4798      	blx	r3
 800dd5c:	b00b      	add	sp, #44	; 0x2c
 800dd5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800dd64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800dd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd68:	b08a      	sub	sp, #40	; 0x28
 800dd6a:	4698      	mov	r8, r3
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	4606      	mov	r6, r0
 800dd70:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800dd74:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800dd78:	2d0b      	cmp	r5, #11
 800dd7a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800dd7e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800dd82:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800dd86:	9304      	str	r3, [sp, #16]
 800dd88:	d137      	bne.n	800ddfa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800dd8a:	2380      	movs	r3, #128	; 0x80
 800dd8c:	f88d 0020 	strb.w	r0, [sp, #32]
 800dd90:	4630      	mov	r0, r6
 800dd92:	9203      	str	r2, [sp, #12]
 800dd94:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dd98:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800dd9c:	f8ad 3018 	strh.w	r3, [sp, #24]
 800dda0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800dda4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800dda8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ddac:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ddb0:	f7ff ff5c 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ddb4:	2c0b      	cmp	r4, #11
 800ddb6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ddba:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ddbe:	bf94      	ite	ls
 800ddc0:	4b19      	ldrls	r3, [pc, #100]	; (800de28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ddc2:	2100      	movhi	r1, #0
 800ddc4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ddc8:	bf98      	it	ls
 800ddca:	5d19      	ldrbls	r1, [r3, r4]
 800ddcc:	fb02 8307 	mla	r3, r2, r7, r8
 800ddd0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ddd4:	10c9      	asrs	r1, r1, #3
 800ddd6:	fb01 0003 	mla	r0, r1, r3, r0
 800ddda:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800ddde:	a901      	add	r1, sp, #4
 800dde0:	9005      	str	r0, [sp, #20]
 800dde2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800dde6:	2300      	movs	r3, #0
 800dde8:	6870      	ldr	r0, [r6, #4]
 800ddea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ddee:	6803      	ldr	r3, [r0, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	4798      	blx	r3
 800ddf4:	b00a      	add	sp, #40	; 0x28
 800ddf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddfa:	2d02      	cmp	r5, #2
 800ddfc:	d109      	bne.n	800de12 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800ddfe:	28ff      	cmp	r0, #255	; 0xff
 800de00:	d105      	bne.n	800de0e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800de02:	f1bc 0f00 	cmp.w	ip, #0
 800de06:	bf14      	ite	ne
 800de08:	2340      	movne	r3, #64	; 0x40
 800de0a:	2320      	moveq	r3, #32
 800de0c:	e7be      	b.n	800dd8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de0e:	2340      	movs	r3, #64	; 0x40
 800de10:	e7bc      	b.n	800dd8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de12:	28ff      	cmp	r0, #255	; 0xff
 800de14:	d105      	bne.n	800de22 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800de16:	f1bc 0f00 	cmp.w	ip, #0
 800de1a:	bf14      	ite	ne
 800de1c:	2304      	movne	r3, #4
 800de1e:	2301      	moveq	r3, #1
 800de20:	e7b4      	b.n	800dd8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de22:	2304      	movs	r3, #4
 800de24:	e7b2      	b.n	800dd8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800de26:	bf00      	nop
 800de28:	08022bb8 	.word	0x08022bb8

0800de2c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800de2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de30:	b08b      	sub	sp, #44	; 0x2c
 800de32:	461d      	mov	r5, r3
 800de34:	2400      	movs	r4, #0
 800de36:	4688      	mov	r8, r1
 800de38:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800de3c:	4693      	mov	fp, r2
 800de3e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800de42:	4607      	mov	r7, r0
 800de44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800de48:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800de4c:	9404      	str	r4, [sp, #16]
 800de4e:	bf14      	ite	ne
 800de50:	2308      	movne	r3, #8
 800de52:	2302      	moveq	r3, #2
 800de54:	fb05 b50a 	mla	r5, r5, sl, fp
 800de58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de5c:	f7ff ff06 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800de60:	2e0b      	cmp	r6, #11
 800de62:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800de66:	a901      	add	r1, sp, #4
 800de68:	bf98      	it	ls
 800de6a:	4b13      	ldrls	r3, [pc, #76]	; (800deb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800de6c:	f8ad a01e 	strh.w	sl, [sp, #30]
 800de70:	bf98      	it	ls
 800de72:	5d9c      	ldrbls	r4, [r3, r6]
 800de74:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800de78:	10e4      	asrs	r4, r4, #3
 800de7a:	f8cd 8010 	str.w	r8, [sp, #16]
 800de7e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800de82:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800de86:	fb04 0405 	mla	r4, r4, r5, r0
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800de90:	2300      	movs	r3, #0
 800de92:	9405      	str	r4, [sp, #20]
 800de94:	f8ad 301c 	strh.w	r3, [sp, #28]
 800de98:	f88d 9020 	strb.w	r9, [sp, #32]
 800de9c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800dea0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800dea4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800dea8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800deac:	6803      	ldr	r3, [r0, #0]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	4798      	blx	r3
 800deb2:	b00b      	add	sp, #44	; 0x2c
 800deb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deb8:	08022bb8 	.word	0x08022bb8

0800debc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800debc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec0:	461e      	mov	r6, r3
 800dec2:	4b0a      	ldr	r3, [pc, #40]	; (800deec <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800dec4:	460f      	mov	r7, r1
 800dec6:	4690      	mov	r8, r2
 800dec8:	881d      	ldrh	r5, [r3, #0]
 800deca:	f7ff fd23 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800dece:	6803      	ldr	r3, [r0, #0]
 800ded0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ded2:	4798      	blx	r3
 800ded4:	280b      	cmp	r0, #11
 800ded6:	bf96      	itet	ls
 800ded8:	4b05      	ldrls	r3, [pc, #20]	; (800def0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800deda:	2400      	movhi	r4, #0
 800dedc:	5c1c      	ldrbls	r4, [r3, r0]
 800dede:	fb08 7005 	mla	r0, r8, r5, r7
 800dee2:	10e4      	asrs	r4, r4, #3
 800dee4:	fb04 6000 	mla	r0, r4, r0, r6
 800dee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deec:	2400f58a 	.word	0x2400f58a
 800def0:	08022bb8 	.word	0x08022bb8

0800def4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800def4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800def6:	b08b      	sub	sp, #44	; 0x2c
 800def8:	461f      	mov	r7, r3
 800defa:	4604      	mov	r4, r0
 800defc:	4616      	mov	r6, r2
 800defe:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800df02:	2500      	movs	r5, #0
 800df04:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800df08:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800df0c:	9504      	str	r5, [sp, #16]
 800df0e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800df12:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800df16:	f8ad 301a 	strh.w	r3, [sp, #26]
 800df1a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800df1e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800df22:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800df26:	f88d 3020 	strb.w	r3, [sp, #32]
 800df2a:	f7ff fe9f 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df2e:	463a      	mov	r2, r7
 800df30:	4631      	mov	r1, r6
 800df32:	4603      	mov	r3, r0
 800df34:	4620      	mov	r0, r4
 800df36:	f7ff ffc1 	bl	800debc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800df3a:	4b0e      	ldr	r3, [pc, #56]	; (800df74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800df3c:	9005      	str	r0, [sp, #20]
 800df3e:	881b      	ldrh	r3, [r3, #0]
 800df40:	f8ad 301e 	strh.w	r3, [sp, #30]
 800df44:	f7ff fce6 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800df48:	6803      	ldr	r3, [r0, #0]
 800df4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df4c:	4798      	blx	r3
 800df4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800df50:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800df54:	a901      	add	r1, sp, #4
 800df56:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800df5a:	9304      	str	r3, [sp, #16]
 800df5c:	6860      	ldr	r0, [r4, #4]
 800df5e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800df62:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800df66:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800df6a:	6803      	ldr	r3, [r0, #0]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	4798      	blx	r3
 800df70:	b00b      	add	sp, #44	; 0x2c
 800df72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df74:	2400f58a 	.word	0x2400f58a

0800df78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800df78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df7a:	b08d      	sub	sp, #52	; 0x34
 800df7c:	2501      	movs	r5, #1
 800df7e:	4604      	mov	r4, r0
 800df80:	466b      	mov	r3, sp
 800df82:	9503      	str	r5, [sp, #12]
 800df84:	e883 0006 	stmia.w	r3, {r1, r2}
 800df88:	2300      	movs	r3, #0
 800df8a:	f8bd 6000 	ldrh.w	r6, [sp]
 800df8e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800df92:	9306      	str	r3, [sp, #24]
 800df94:	6803      	ldr	r3, [r0, #0]
 800df96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df98:	4798      	blx	r3
 800df9a:	463a      	mov	r2, r7
 800df9c:	4631      	mov	r1, r6
 800df9e:	4603      	mov	r3, r0
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f7ff ff8b 	bl	800debc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dfa6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfa8:	9004      	str	r0, [sp, #16]
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800dfb0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dfb4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dfb8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800dfbc:	4b0e      	ldr	r3, [pc, #56]	; (800dff8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800dfc4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800dfc8:	f7ff fca4 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800dfcc:	6803      	ldr	r3, [r0, #0]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	4798      	blx	r3
 800dfd2:	23ff      	movs	r3, #255	; 0xff
 800dfd4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800dfd8:	a903      	add	r1, sp, #12
 800dfda:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800dfde:	6860      	ldr	r0, [r4, #4]
 800dfe0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800dfe4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800dfe8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800dfec:	6803      	ldr	r3, [r0, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	4798      	blx	r3
 800dff2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800dff4:	b00d      	add	sp, #52	; 0x34
 800dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff8:	2400f58a 	.word	0x2400f58a

0800dffc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800dffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e000:	b08c      	sub	sp, #48	; 0x30
 800e002:	461e      	mov	r6, r3
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	466d      	mov	r5, sp
 800e00a:	9306      	str	r3, [sp, #24]
 800e00c:	6803      	ldr	r3, [r0, #0]
 800e00e:	e885 0006 	stmia.w	r5, {r1, r2}
 800e012:	2501      	movs	r5, #1
 800e014:	f8bd 7000 	ldrh.w	r7, [sp]
 800e018:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e01c:	9503      	str	r5, [sp, #12]
 800e01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e020:	4798      	blx	r3
 800e022:	4642      	mov	r2, r8
 800e024:	4639      	mov	r1, r7
 800e026:	4603      	mov	r3, r0
 800e028:	4620      	mov	r0, r4
 800e02a:	f7ff ff47 	bl	800debc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e02e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e032:	9004      	str	r0, [sp, #16]
 800e034:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e038:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e03c:	9607      	str	r6, [sp, #28]
 800e03e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e042:	4b10      	ldr	r3, [pc, #64]	; (800e084 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e04a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e04c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e050:	f7ff fc60 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800e054:	6803      	ldr	r3, [r0, #0]
 800e056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e058:	4798      	blx	r3
 800e05a:	23ff      	movs	r3, #255	; 0xff
 800e05c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e060:	a903      	add	r1, sp, #12
 800e062:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e066:	6860      	ldr	r0, [r4, #4]
 800e068:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e06c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e070:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e074:	6803      	ldr	r3, [r0, #0]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	4798      	blx	r3
 800e07a:	4630      	mov	r0, r6
 800e07c:	b00c      	add	sp, #48	; 0x30
 800e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e082:	bf00      	nop
 800e084:	2400f58a 	.word	0x2400f58a

0800e088 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e08a:	b085      	sub	sp, #20
 800e08c:	4605      	mov	r5, r0
 800e08e:	ac02      	add	r4, sp, #8
 800e090:	e884 0006 	stmia.w	r4, {r1, r2}
 800e094:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e098:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e09c:	f7ff fde6 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f7ff ff08 	bl	800debc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e0ac:	4a05      	ldr	r2, [pc, #20]	; (800e0c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e0ae:	682b      	ldr	r3, [r5, #0]
 800e0b0:	8812      	ldrh	r2, [r2, #0]
 800e0b2:	9200      	str	r2, [sp, #0]
 800e0b4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	4628      	mov	r0, r5
 800e0ba:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e0be:	47b0      	blx	r6
 800e0c0:	b005      	add	sp, #20
 800e0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0c4:	2400f58a 	.word	0x2400f58a

0800e0c8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	b19b      	cbz	r3, 800e0fa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e0d2:	2002      	movs	r0, #2
 800e0d4:	f7f3 fc1e 	bl	8001914 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4620      	mov	r0, r4
 800e0dc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800e0e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800e0e4:	6823      	ldr	r3, [r4, #0]
 800e0e6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800e0ea:	f7ff fdbf 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e0ee:	4601      	mov	r1, r0
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0f8:	4718      	bx	r3
 800e0fa:	bd70      	pop	{r4, r5, r6, pc}

0800e0fc <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	4605      	mov	r5, r0
 800e100:	460c      	mov	r4, r1
 800e102:	2003      	movs	r0, #3
 800e104:	b149      	cbz	r1, 800e11a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e106:	f7f3 fba5 	bl	8001854 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e10a:	6928      	ldr	r0, [r5, #16]
 800e10c:	b168      	cbz	r0, 800e12a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e10e:	6803      	ldr	r3, [r0, #0]
 800e110:	2101      	movs	r1, #1
 800e112:	695b      	ldr	r3, [r3, #20]
 800e114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e118:	4718      	bx	r3
 800e11a:	f7f3 fbcb 	bl	80018b4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e11e:	6928      	ldr	r0, [r5, #16]
 800e120:	b118      	cbz	r0, 800e12a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e122:	6803      	ldr	r3, [r0, #0]
 800e124:	4621      	mov	r1, r4
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	e7f4      	b.n	800e114 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e12a:	bd70      	pop	{r4, r5, r6, pc}

0800e12c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e12c:	b538      	push	{r3, r4, r5, lr}
 800e12e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800e132:	4604      	mov	r4, r0
 800e134:	460d      	mov	r5, r1
 800e136:	428b      	cmp	r3, r1
 800e138:	d006      	beq.n	800e148 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e13a:	6803      	ldr	r3, [r0, #0]
 800e13c:	b929      	cbnz	r1, 800e14a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e13e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e142:	4798      	blx	r3
 800e144:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800e148:	bd38      	pop	{r3, r4, r5, pc}
 800e14a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e14e:	e7f8      	b.n	800e142 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e150 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e150:	4b0d      	ldr	r3, [pc, #52]	; (800e188 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e152:	b510      	push	{r4, lr}
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	4604      	mov	r4, r0
 800e158:	b95b      	cbnz	r3, 800e172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e15a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e15e:	2b02      	cmp	r3, #2
 800e160:	d007      	beq.n	800e172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e162:	6840      	ldr	r0, [r0, #4]
 800e164:	f000 f92a 	bl	800e3bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e168:	b118      	cbz	r0, 800e172 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e16a:	6862      	ldr	r2, [r4, #4]
 800e16c:	7a53      	ldrb	r3, [r2, #9]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d0fc      	beq.n	800e16c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e172:	f7f3 ff1d 	bl	8001fb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e176:	4620      	mov	r0, r4
 800e178:	2100      	movs	r1, #0
 800e17a:	f7ff ffd7 	bl	800e12c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e17e:	4620      	mov	r0, r4
 800e180:	f7ff fd74 	bl	800dc6c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e184:	bd10      	pop	{r4, pc}
 800e186:	bf00      	nop
 800e188:	2400f58e 	.word	0x2400f58e

0800e18c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e18c:	b570      	push	{r4, r5, r6, lr}
 800e18e:	4604      	mov	r4, r0
 800e190:	6803      	ldr	r3, [r0, #0]
 800e192:	b919      	cbnz	r1, 800e19c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e196:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e19a:	4718      	bx	r3
 800e19c:	2200      	movs	r2, #0
 800e19e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 800e1a2:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 800e1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1a8:	4798      	blx	r3
 800e1aa:	4605      	mov	r5, r0
 800e1ac:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	f7ff ffba 	bl	800e12c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}

0800e1bc <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e1bc:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e1c0:	1a13      	subs	r3, r2, r0
 800e1c2:	4258      	negs	r0, r3
 800e1c4:	4158      	adcs	r0, r3
 800e1c6:	4770      	bx	lr

0800e1c8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e1c8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e1cc:	1a9b      	subs	r3, r3, r2
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	bfdc      	itt	le
 800e1d2:	6882      	ldrle	r2, [r0, #8]
 800e1d4:	189b      	addle	r3, r3, r2
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	bfcc      	ite	gt
 800e1da:	2000      	movgt	r0, #0
 800e1dc:	2001      	movle	r0, #1
 800e1de:	4770      	bx	lr

0800e1e0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e1e0:	6902      	ldr	r2, [r0, #16]
 800e1e2:	6843      	ldr	r3, [r0, #4]
 800e1e4:	2024      	movs	r0, #36	; 0x24
 800e1e6:	fb00 3002 	mla	r0, r0, r2, r3
 800e1ea:	4770      	bx	lr

0800e1ec <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e1ec:	6803      	ldr	r3, [r0, #0]
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	4718      	bx	r3

0800e1f2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	7203      	strb	r3, [r0, #8]
 800e1f8:	4604      	mov	r4, r0
 800e1fa:	6840      	ldr	r0, [r0, #4]
 800e1fc:	6803      	ldr	r3, [r0, #0]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	4798      	blx	r3
 800e202:	6803      	ldr	r3, [r0, #0]
 800e204:	4605      	mov	r5, r0
 800e206:	2b40      	cmp	r3, #64	; 0x40
 800e208:	d00c      	beq.n	800e224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e20a:	d810      	bhi.n	800e22e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d01d      	beq.n	800e24c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e210:	d804      	bhi.n	800e21c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e212:	2b01      	cmp	r3, #1
 800e214:	d006      	beq.n	800e224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e216:	2b02      	cmp	r3, #2
 800e218:	d02c      	beq.n	800e274 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	2b08      	cmp	r3, #8
 800e21e:	d01d      	beq.n	800e25c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e220:	2b20      	cmp	r3, #32
 800e222:	d1fa      	bne.n	800e21a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e224:	6823      	ldr	r3, [r4, #0]
 800e226:	4620      	mov	r0, r4
 800e228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e22a:	4798      	blx	r3
 800e22c:	e013      	b.n	800e256 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e232:	d0f7      	beq.n	800e224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e234:	d804      	bhi.n	800e240 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e236:	2b80      	cmp	r3, #128	; 0x80
 800e238:	d0f4      	beq.n	800e224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e23a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e23e:	e7f0      	b.n	800e222 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e244:	d0ee      	beq.n	800e224 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e24a:	e7e5      	b.n	800e218 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e24c:	6823      	ldr	r3, [r4, #0]
 800e24e:	7f01      	ldrb	r1, [r0, #28]
 800e250:	4620      	mov	r0, r4
 800e252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e254:	4798      	blx	r3
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e25a:	e006      	b.n	800e26a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e25c:	6823      	ldr	r3, [r4, #0]
 800e25e:	7f01      	ldrb	r1, [r0, #28]
 800e260:	4620      	mov	r0, r4
 800e262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e264:	4798      	blx	r3
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e26a:	4629      	mov	r1, r5
 800e26c:	4620      	mov	r0, r4
 800e26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e272:	4718      	bx	r3
 800e274:	6823      	ldr	r3, [r4, #0]
 800e276:	4620      	mov	r0, r4
 800e278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e27a:	4798      	blx	r3
 800e27c:	e7f3      	b.n	800e266 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e27e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e27e:	4770      	bx	lr

0800e280 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e280:	4770      	bx	lr

0800e282 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e282:	4770      	bx	lr

0800e284 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e284:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e288:	b510      	push	{r4, lr}
 800e28a:	1ad2      	subs	r2, r2, r3
 800e28c:	2a00      	cmp	r2, #0
 800e28e:	bfdc      	itt	le
 800e290:	6884      	ldrle	r4, [r0, #8]
 800e292:	1912      	addle	r2, r2, r4
 800e294:	2a01      	cmp	r2, #1
 800e296:	dd16      	ble.n	800e2c6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e298:	6842      	ldr	r2, [r0, #4]
 800e29a:	2424      	movs	r4, #36	; 0x24
 800e29c:	fb04 2303 	mla	r3, r4, r3, r2
 800e2a0:	f101 0220 	add.w	r2, r1, #32
 800e2a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800e2a8:	4291      	cmp	r1, r2
 800e2aa:	f843 4b04 	str.w	r4, [r3], #4
 800e2ae:	d1f9      	bne.n	800e2a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e2b0:	780a      	ldrb	r2, [r1, #0]
 800e2b2:	701a      	strb	r2, [r3, #0]
 800e2b4:	68c3      	ldr	r3, [r0, #12]
 800e2b6:	6882      	ldr	r2, [r0, #8]
 800e2b8:	f3bf 8f5b 	dmb	ish
 800e2bc:	3301      	adds	r3, #1
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	bfd8      	it	le
 800e2c2:	1a9b      	suble	r3, r3, r2
 800e2c4:	60c3      	str	r3, [r0, #12]
 800e2c6:	bd10      	pop	{r4, pc}

0800e2c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e2c8:	6903      	ldr	r3, [r0, #16]
 800e2ca:	6882      	ldr	r2, [r0, #8]
 800e2cc:	f3bf 8f5b 	dmb	ish
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	bfd8      	it	le
 800e2d6:	1a9b      	suble	r3, r3, r2
 800e2d8:	6103      	str	r3, [r0, #16]
 800e2da:	4770      	bx	lr

0800e2dc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e2dc:	b570      	push	{r4, r5, r6, lr}
 800e2de:	4604      	mov	r4, r0
 800e2e0:	460e      	mov	r6, r1
 800e2e2:	6860      	ldr	r0, [r4, #4]
 800e2e4:	6803      	ldr	r3, [r0, #0]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	4798      	blx	r3
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d1f9      	bne.n	800e2e2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e2ee:	4d0d      	ldr	r5, [pc, #52]	; (800e324 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e2f0:	6828      	ldr	r0, [r5, #0]
 800e2f2:	6803      	ldr	r3, [r0, #0]
 800e2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f6:	4798      	blx	r3
 800e2f8:	f7f3 fe68 	bl	8001fcc <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e2fc:	6828      	ldr	r0, [r5, #0]
 800e2fe:	2101      	movs	r1, #1
 800e300:	f7ff ff14 	bl	800e12c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e304:	6860      	ldr	r0, [r4, #4]
 800e306:	4631      	mov	r1, r6
 800e308:	6803      	ldr	r3, [r0, #0]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	4798      	blx	r3
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	4620      	mov	r0, r4
 800e312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e314:	4798      	blx	r3
 800e316:	6828      	ldr	r0, [r5, #0]
 800e318:	6803      	ldr	r3, [r0, #0]
 800e31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e31e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e320:	4718      	bx	r3
 800e322:	bf00      	nop
 800e324:	2400f590 	.word	0x2400f590

0800e328 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e328:	b508      	push	{r3, lr}
 800e32a:	f7f3 fe41 	bl	8001fb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e32e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e332:	f7f3 be45 	b.w	8001fc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e336 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e336:	b510      	push	{r4, lr}
 800e338:	4604      	mov	r4, r0
 800e33a:	2114      	movs	r1, #20
 800e33c:	f00f ff3b 	bl	801e1b6 <_ZdlPvj>
 800e340:	4620      	mov	r0, r4
 800e342:	bd10      	pop	{r4, pc}

0800e344 <_ZN8touchgfx13DMA_Interface5startEv>:
 800e344:	b510      	push	{r4, lr}
 800e346:	4604      	mov	r4, r0
 800e348:	6840      	ldr	r0, [r0, #4]
 800e34a:	6803      	ldr	r3, [r0, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4798      	blx	r3
 800e350:	b948      	cbnz	r0, 800e366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e352:	7a63      	ldrb	r3, [r4, #9]
 800e354:	b13b      	cbz	r3, 800e366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e356:	7a23      	ldrb	r3, [r4, #8]
 800e358:	b92b      	cbnz	r3, 800e366 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	4620      	mov	r0, r4
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e364:	4718      	bx	r3
 800e366:	bd10      	pop	{r4, pc}

0800e368 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4604      	mov	r4, r0
 800e36c:	6840      	ldr	r0, [r0, #4]
 800e36e:	6803      	ldr	r3, [r0, #0]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	4798      	blx	r3
 800e374:	4605      	mov	r5, r0
 800e376:	b930      	cbnz	r0, 800e386 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e378:	7a23      	ldrb	r3, [r4, #8]
 800e37a:	b123      	cbz	r3, 800e386 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e37c:	6860      	ldr	r0, [r4, #4]
 800e37e:	6803      	ldr	r3, [r0, #0]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	4798      	blx	r3
 800e384:	7225      	strb	r5, [r4, #8]
 800e386:	6860      	ldr	r0, [r4, #4]
 800e388:	6803      	ldr	r3, [r0, #0]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4798      	blx	r3
 800e38e:	b928      	cbnz	r0, 800e39c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e390:	6823      	ldr	r3, [r4, #0]
 800e392:	4620      	mov	r0, r4
 800e394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e39a:	4718      	bx	r3
 800e39c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e3a0:	f7f3 be1c 	b.w	8001fdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e3a4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e3a4:	b510      	push	{r4, lr}
 800e3a6:	6082      	str	r2, [r0, #8]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4c03      	ldr	r4, [pc, #12]	; (800e3b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e3ac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e3b0:	e9c0 4100 	strd	r4, r1, [r0]
 800e3b4:	bd10      	pop	{r4, pc}
 800e3b6:	bf00      	nop
 800e3b8:	08022bcc 	.word	0x08022bcc

0800e3bc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e3bc:	6840      	ldr	r0, [r0, #4]
 800e3be:	6803      	ldr	r3, [r0, #0]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4718      	bx	r3

0800e3c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800e3c4:	0c0b      	lsrs	r3, r1, #16
 800e3c6:	60c1      	str	r1, [r0, #12]
 800e3c8:	7481      	strb	r1, [r0, #18]
 800e3ca:	7403      	strb	r3, [r0, #16]
 800e3cc:	0a0b      	lsrs	r3, r1, #8
 800e3ce:	7443      	strb	r3, [r0, #17]
 800e3d0:	4770      	bx	lr

0800e3d2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800e3d2:	f1a0 0008 	sub.w	r0, r0, #8
 800e3d6:	e7f5      	b.n	800e3c4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

0800e3d8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800e3d8:	b508      	push	{r3, lr}
 800e3da:	4b05      	ldr	r3, [pc, #20]	; (800e3f0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800e3dc:	6818      	ldr	r0, [r3, #0]
 800e3de:	6803      	ldr	r3, [r0, #0]
 800e3e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e3e4:	4798      	blx	r3
 800e3e6:	1e43      	subs	r3, r0, #1
 800e3e8:	4258      	negs	r0, r3
 800e3ea:	4158      	adcs	r0, r3
 800e3ec:	bd08      	pop	{r3, pc}
 800e3ee:	bf00      	nop
 800e3f0:	2400f590 	.word	0x2400f590

0800e3f4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800e3f4:	4770      	bx	lr

0800e3f6 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800e3f6:	3808      	subs	r0, #8
 800e3f8:	4770      	bx	lr

0800e3fa <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800e3fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e3fe:	b410      	push	{r4}
 800e400:	188c      	adds	r4, r1, r2
 800e402:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e406:	68c2      	ldr	r2, [r0, #12]
 800e408:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800e40c:	4620      	mov	r0, r4
 800e40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e412:	f7f3 bf99 	b.w	8002348 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800e416 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800e416:	f7f3 bf8d 	b.w	8002334 <_ZN8touchgfx5paint8tearDownEv>

0800e41a <_ZN8touchgfx13PainterRGB888D0Ev>:
 800e41a:	b510      	push	{r4, lr}
 800e41c:	4604      	mov	r4, r0
 800e41e:	2114      	movs	r1, #20
 800e420:	f00f fec9 	bl	801e1b6 <_ZdlPvj>
 800e424:	4620      	mov	r0, r4
 800e426:	bd10      	pop	{r4, pc}

0800e428 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800e428:	f1a0 0008 	sub.w	r0, r0, #8
 800e42c:	e7f5      	b.n	800e41a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800e430 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800e430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e432:	6803      	ldr	r3, [r0, #0]
 800e434:	460d      	mov	r5, r1
 800e436:	4604      	mov	r4, r0
 800e438:	4601      	mov	r1, r0
 800e43a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e43c:	a802      	add	r0, sp, #8
 800e43e:	4798      	blx	r3
 800e440:	6828      	ldr	r0, [r5, #0]
 800e442:	6869      	ldr	r1, [r5, #4]
 800e444:	466b      	mov	r3, sp
 800e446:	c303      	stmia	r3!, {r0, r1}
 800e448:	4668      	mov	r0, sp
 800e44a:	4619      	mov	r1, r3
 800e44c:	f7fe ff92 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800e450:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e452:	b1a8      	cbz	r0, 800e480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800e454:	6803      	ldr	r3, [r0, #0]
 800e456:	1d21      	adds	r1, r4, #4
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	4798      	blx	r3
 800e45c:	b180      	cbz	r0, 800e480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800e45e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	dd0c      	ble.n	800e480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800e466:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800e46a:	2d00      	cmp	r5, #0
 800e46c:	dd08      	ble.n	800e480 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 800e46e:	4a2d      	ldr	r2, [pc, #180]	; (800e524 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 800e470:	7812      	ldrb	r2, [r2, #0]
 800e472:	b13a      	cbz	r2, 800e484 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 800e474:	2a01      	cmp	r2, #1
 800e476:	d02d      	beq.n	800e4d4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 800e478:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e47a:	6803      	ldr	r3, [r0, #0]
 800e47c:	691b      	ldr	r3, [r3, #16]
 800e47e:	4798      	blx	r3
 800e480:	b004      	add	sp, #16
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e488:	441d      	add	r5, r3
 800e48a:	b2ad      	uxth	r5, r5
 800e48c:	b22e      	sxth	r6, r5
 800e48e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800e492:	42b3      	cmp	r3, r6
 800e494:	daf0      	bge.n	800e478 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	4669      	mov	r1, sp
 800e49a:	4620      	mov	r0, r4
 800e49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e49e:	4798      	blx	r3
 800e4a0:	b940      	cbnz	r0, 800e4b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800e4a2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e4a6:	2b01      	cmp	r3, #1
 800e4a8:	d004      	beq.n	800e4b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	105b      	asrs	r3, r3, #1
 800e4ae:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e4b2:	e7f0      	b.n	800e496 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 800e4b4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e4b8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e4bc:	4413      	add	r3, r2
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	441a      	add	r2, r3
 800e4c2:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e4c6:	b212      	sxth	r2, r2
 800e4c8:	4296      	cmp	r6, r2
 800e4ca:	dae0      	bge.n	800e48e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800e4cc:	1aeb      	subs	r3, r5, r3
 800e4ce:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e4d2:	e7dc      	b.n	800e48e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800e4d4:	f8bd 5000 	ldrh.w	r5, [sp]
 800e4d8:	441d      	add	r5, r3
 800e4da:	b2ad      	uxth	r5, r5
 800e4dc:	b22e      	sxth	r6, r5
 800e4de:	f9bd 3000 	ldrsh.w	r3, [sp]
 800e4e2:	42b3      	cmp	r3, r6
 800e4e4:	dac8      	bge.n	800e478 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	4669      	mov	r1, sp
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4ee:	4798      	blx	r3
 800e4f0:	b940      	cbnz	r0, 800e504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800e4f2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800e4f6:	2b01      	cmp	r3, #1
 800e4f8:	d004      	beq.n	800e504 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	105b      	asrs	r3, r3, #1
 800e4fe:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e502:	e7f0      	b.n	800e4e6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 800e504:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800e508:	f8bd 3000 	ldrh.w	r3, [sp]
 800e50c:	4413      	add	r3, r2
 800e50e:	b29b      	uxth	r3, r3
 800e510:	441a      	add	r2, r3
 800e512:	f8ad 3000 	strh.w	r3, [sp]
 800e516:	b212      	sxth	r2, r2
 800e518:	4296      	cmp	r6, r2
 800e51a:	dae0      	bge.n	800e4de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800e51c:	1aeb      	subs	r3, r5, r3
 800e51e:	f8ad 3004 	strh.w	r3, [sp, #4]
 800e522:	e7dc      	b.n	800e4de <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800e524:	2400f588 	.word	0x2400f588

0800e528 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800e528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e52a:	6803      	ldr	r3, [r0, #0]
 800e52c:	4604      	mov	r4, r0
 800e52e:	4601      	mov	r1, r0
 800e530:	4668      	mov	r0, sp
 800e532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e534:	4798      	blx	r3
 800e536:	2100      	movs	r1, #0
 800e538:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800e53c:	4668      	mov	r0, sp
 800e53e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800e542:	9102      	str	r1, [sp, #8]
 800e544:	a902      	add	r1, sp, #8
 800e546:	f8ad 200c 	strh.w	r2, [sp, #12]
 800e54a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e54e:	f7fe ff11 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800e552:	6823      	ldr	r3, [r4, #0]
 800e554:	4669      	mov	r1, sp
 800e556:	4620      	mov	r0, r4
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	4798      	blx	r3
 800e55c:	b004      	add	sp, #16
 800e55e:	bd10      	pop	{r4, pc}

0800e560 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800e560:	2101      	movs	r1, #1
 800e562:	2200      	movs	r2, #0
 800e564:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800e568:	490a      	ldr	r1, [pc, #40]	; (800e594 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 800e56a:	8082      	strh	r2, [r0, #4]
 800e56c:	6001      	str	r1, [r0, #0]
 800e56e:	21ff      	movs	r1, #255	; 0xff
 800e570:	80c2      	strh	r2, [r0, #6]
 800e572:	8102      	strh	r2, [r0, #8]
 800e574:	8142      	strh	r2, [r0, #10]
 800e576:	8182      	strh	r2, [r0, #12]
 800e578:	81c2      	strh	r2, [r0, #14]
 800e57a:	8202      	strh	r2, [r0, #16]
 800e57c:	8242      	strh	r2, [r0, #18]
 800e57e:	61c2      	str	r2, [r0, #28]
 800e580:	8402      	strh	r2, [r0, #32]
 800e582:	8442      	strh	r2, [r0, #34]	; 0x22
 800e584:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800e588:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800e58c:	6282      	str	r2, [r0, #40]	; 0x28
 800e58e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e592:	4770      	bx	lr
 800e594:	08022c28 	.word	0x08022c28

0800e598 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 800e598:	6301      	str	r1, [r0, #48]	; 0x30
 800e59a:	4770      	bx	lr

0800e59c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 800e59c:	6341      	str	r1, [r0, #52]	; 0x34
 800e59e:	4770      	bx	lr

0800e5a0 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800e5a0:	b530      	push	{r4, r5, lr}
 800e5a2:	460d      	mov	r5, r1
 800e5a4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e5a6:	8949      	ldrh	r1, [r1, #10]
 800e5a8:	b085      	sub	sp, #20
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	1ac9      	subs	r1, r1, r3
 800e5ae:	6803      	ldr	r3, [r0, #0]
 800e5b0:	f10d 0206 	add.w	r2, sp, #6
 800e5b4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e5b8:	b209      	sxth	r1, r1
 800e5ba:	4798      	blx	r3
 800e5bc:	b1a0      	cbz	r0, 800e5e8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e5be:	792b      	ldrb	r3, [r5, #4]
 800e5c0:	b993      	cbnz	r3, 800e5e8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e5c2:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800e5c6:	b178      	cbz	r0, 800e5e8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e5c8:	6803      	ldr	r3, [r0, #0]
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	4798      	blx	r3
 800e5ce:	b158      	cbz	r0, 800e5e8 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e5d0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e5d4:	aa02      	add	r2, sp, #8
 800e5d6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800e5da:	4621      	mov	r1, r4
 800e5dc:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e5e0:	9503      	str	r5, [sp, #12]
 800e5e2:	6803      	ldr	r3, [r0, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	4798      	blx	r3
 800e5e8:	b005      	add	sp, #20
 800e5ea:	bd30      	pop	{r4, r5, pc}

0800e5ec <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 800e5ec:	b430      	push	{r4, r5}
 800e5ee:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 800e5f2:	b1cd      	cbz	r5, 800e628 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800e5f4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800e5f8:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800e5fc:	3d01      	subs	r5, #1
 800e5fe:	6823      	ldr	r3, [r4, #0]
 800e600:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800e604:	b139      	cbz	r1, 800e616 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 800e606:	4293      	cmp	r3, r2
 800e608:	f1c2 0100 	rsb	r1, r2, #0
 800e60c:	bfa8      	it	ge
 800e60e:	4613      	movge	r3, r2
 800e610:	428c      	cmp	r4, r1
 800e612:	bfb8      	it	lt
 800e614:	460c      	movlt	r4, r1
 800e616:	1a99      	subs	r1, r3, r2
 800e618:	4422      	add	r2, r4
 800e61a:	4291      	cmp	r1, r2
 800e61c:	d004      	beq.n	800e628 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800e61e:	6803      	ldr	r3, [r0, #0]
 800e620:	bc30      	pop	{r4, r5}
 800e622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e626:	4718      	bx	r3
 800e628:	bc30      	pop	{r4, r5}
 800e62a:	4770      	bx	lr

0800e62c <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 800e62c:	b410      	push	{r4}
 800e62e:	2300      	movs	r3, #0
 800e630:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800e634:	429a      	cmp	r2, r3
 800e636:	dd0e      	ble.n	800e656 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 800e638:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800e63c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e640:	428c      	cmp	r4, r1
 800e642:	d106      	bne.n	800e652 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 800e644:	6802      	ldr	r2, [r0, #0]
 800e646:	4619      	mov	r1, r3
 800e648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e64c:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800e650:	4710      	bx	r2
 800e652:	3301      	adds	r3, #1
 800e654:	e7ee      	b.n	800e634 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 800e656:	f04f 30ff 	mov.w	r0, #4294967295
 800e65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 800e660:	428a      	cmp	r2, r1
 800e662:	bfbc      	itt	lt
 800e664:	460b      	movlt	r3, r1
 800e666:	4611      	movlt	r1, r2
 800e668:	b510      	push	{r4, lr}
 800e66a:	bfb8      	it	lt
 800e66c:	461a      	movlt	r2, r3
 800e66e:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800e672:	4604      	mov	r4, r0
 800e674:	428b      	cmp	r3, r1
 800e676:	d103      	bne.n	800e680 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 800e678:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d011      	beq.n	800e6a4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 800e680:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800e684:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800e688:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800e68c:	f005 f849 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e690:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e694:	f005 f845 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e698:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6a0:	f005 b83f 	b.w	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e6a4:	bd10      	pop	{r4, pc}

0800e6a6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 800e6a6:	428a      	cmp	r2, r1
 800e6a8:	bfbc      	itt	lt
 800e6aa:	460b      	movlt	r3, r1
 800e6ac:	4611      	movlt	r1, r2
 800e6ae:	b510      	push	{r4, lr}
 800e6b0:	bfb8      	it	lt
 800e6b2:	461a      	movlt	r2, r3
 800e6b4:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	428b      	cmp	r3, r1
 800e6bc:	d103      	bne.n	800e6c6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 800e6be:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800e6c2:	4293      	cmp	r3, r2
 800e6c4:	d011      	beq.n	800e6ea <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 800e6c6:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 800e6ca:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e6ce:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800e6d2:	f005 f826 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e6d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e6da:	f005 f822 	bl	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e6de:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800e6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6e6:	f005 b81c 	b.w	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e6ea:	bd10      	pop	{r4, pc}

0800e6ec <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	3038      	adds	r0, #56	; 0x38
 800e6f0:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 800e6f4:	f005 b815 	b.w	8013722 <_ZNK8touchgfx8Drawable10invalidateEv>

0800e6f8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e700:	4604      	mov	r4, r0
 800e702:	4688      	mov	r8, r1
 800e704:	4616      	mov	r6, r2
 800e706:	2b00      	cmp	r3, #0
 800e708:	d04c      	beq.n	800e7a4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e70a:	6803      	ldr	r3, [r0, #0]
 800e70c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e710:	4798      	blx	r3
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	4605      	mov	r5, r0
 800e716:	4620      	mov	r0, r4
 800e718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e71c:	4798      	blx	r3
 800e71e:	4285      	cmp	r5, r0
 800e720:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800e724:	bfc2      	ittt	gt
 800e726:	b22b      	sxthgt	r3, r5
 800e728:	4605      	movgt	r5, r0
 800e72a:	4618      	movgt	r0, r3
 800e72c:	2300      	movs	r3, #0
 800e72e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800e732:	0099      	lsls	r1, r3, #2
 800e734:	42aa      	cmp	r2, r5
 800e736:	da05      	bge.n	800e744 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e738:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 800e73c:	42bb      	cmp	r3, r7
 800e73e:	da01      	bge.n	800e744 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e740:	3301      	adds	r3, #1
 800e742:	e7f4      	b.n	800e72e <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 800e744:	4282      	cmp	r2, r0
 800e746:	dc2d      	bgt.n	800e7a4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e748:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 800e74c:	3301      	adds	r3, #1
 800e74e:	f85c 5001 	ldr.w	r5, [ip, r1]
 800e752:	462a      	mov	r2, r5
 800e754:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800e758:	4288      	cmp	r0, r1
 800e75a:	dd0d      	ble.n	800e778 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e75c:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 800e760:	428b      	cmp	r3, r1
 800e762:	da09      	bge.n	800e778 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e764:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800e768:	3301      	adds	r3, #1
 800e76a:	42bd      	cmp	r5, r7
 800e76c:	bfa8      	it	ge
 800e76e:	463d      	movge	r5, r7
 800e770:	42ba      	cmp	r2, r7
 800e772:	bfb8      	it	lt
 800e774:	463a      	movlt	r2, r7
 800e776:	e7ed      	b.n	800e754 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 800e778:	f1b8 0f00 	cmp.w	r8, #0
 800e77c:	d007      	beq.n	800e78e <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 800e77e:	42b5      	cmp	r5, r6
 800e780:	f1c6 0300 	rsb	r3, r6, #0
 800e784:	bfa8      	it	ge
 800e786:	4635      	movge	r5, r6
 800e788:	429a      	cmp	r2, r3
 800e78a:	bfb8      	it	lt
 800e78c:	461a      	movlt	r2, r3
 800e78e:	1ba9      	subs	r1, r5, r6
 800e790:	4432      	add	r2, r6
 800e792:	4291      	cmp	r1, r2
 800e794:	d006      	beq.n	800e7a4 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	4620      	mov	r0, r4
 800e79a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a2:	4718      	bx	r3
 800e7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e7a8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800e7a8:	b530      	push	{r4, r5, lr}
 800e7aa:	790b      	ldrb	r3, [r1, #4]
 800e7ac:	b085      	sub	sp, #20
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	460d      	mov	r5, r1
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d020      	beq.n	800e7f8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e7b6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e7b8:	f10d 0206 	add.w	r2, sp, #6
 800e7bc:	88c9      	ldrh	r1, [r1, #6]
 800e7be:	1ac9      	subs	r1, r1, r3
 800e7c0:	6803      	ldr	r3, [r0, #0]
 800e7c2:	b209      	sxth	r1, r1
 800e7c4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e7c8:	4798      	blx	r3
 800e7ca:	b1a8      	cbz	r0, 800e7f8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e7cc:	792b      	ldrb	r3, [r5, #4]
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d812      	bhi.n	800e7f8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e7d2:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e7d6:	b178      	cbz	r0, 800e7f8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e7d8:	6803      	ldr	r3, [r0, #0]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	4798      	blx	r3
 800e7de:	b158      	cbz	r0, 800e7f8 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e7e0:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e7e4:	aa02      	add	r2, sp, #8
 800e7e6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e7f0:	9503      	str	r5, [sp, #12]
 800e7f2:	6803      	ldr	r3, [r0, #0]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	4798      	blx	r3
 800e7f8:	b005      	add	sp, #20
 800e7fa:	bd30      	pop	{r4, r5, pc}

0800e7fc <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 800e7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e800:	4604      	mov	r4, r0
 800e802:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e806:	4690      	mov	r8, r2
 800e808:	461e      	mov	r6, r3
 800e80a:	9f06      	ldr	r7, [sp, #24]
 800e80c:	b928      	cbnz	r0, 800e81a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800e80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e812:	803b      	strh	r3, [r7, #0]
 800e814:	8033      	strh	r3, [r6, #0]
 800e816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800e81e:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800e822:	1883      	adds	r3, r0, r2
 800e824:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	b212      	sxth	r2, r2
 800e82c:	2a01      	cmp	r2, #1
 800e82e:	dc07      	bgt.n	800e840 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 800e830:	2300      	movs	r3, #0
 800e832:	8033      	strh	r3, [r6, #0]
 800e834:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800e838:	3b01      	subs	r3, #1
 800e83a:	803b      	strh	r3, [r7, #0]
 800e83c:	2001      	movs	r0, #1
 800e83e:	e7ea      	b.n	800e816 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800e840:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800e844:	1a08      	subs	r0, r1, r0
 800e846:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e84a:	3a01      	subs	r2, #1
 800e84c:	0140      	lsls	r0, r0, #5
 800e84e:	1ae9      	subs	r1, r5, r3
 800e850:	f005 f92e 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
 800e854:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800e858:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800e85c:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800e860:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800e864:	1883      	adds	r3, r0, r2
 800e866:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800e86a:	eba8 0000 	sub.w	r0, r8, r0
 800e86e:	1ad2      	subs	r2, r2, r3
 800e870:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800e874:	0140      	lsls	r0, r0, #5
 800e876:	b212      	sxth	r2, r2
 800e878:	1a59      	subs	r1, r3, r1
 800e87a:	3a01      	subs	r2, #1
 800e87c:	f005 f918 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
 800e880:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800e884:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800e888:	4285      	cmp	r5, r0
 800e88a:	bfde      	ittt	le
 800e88c:	4603      	movle	r3, r0
 800e88e:	4628      	movle	r0, r5
 800e890:	461d      	movle	r5, r3
 800e892:	2320      	movs	r3, #32
 800e894:	2d00      	cmp	r5, #0
 800e896:	bfa8      	it	ge
 800e898:	351f      	addge	r5, #31
 800e89a:	fb90 f0f3 	sdiv	r0, r0, r3
 800e89e:	bfb4      	ite	lt
 800e8a0:	fb95 f5f3 	sdivlt	r5, r5, r3
 800e8a4:	116d      	asrge	r5, r5, #5
 800e8a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8aa:	8033      	strh	r3, [r6, #0]
 800e8ac:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 800e8b0:	f9b6 3000 	ldrsh.w	r3, [r6]
 800e8b4:	1e51      	subs	r1, r2, #1
 800e8b6:	428b      	cmp	r3, r1
 800e8b8:	da06      	bge.n	800e8c8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800e8c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e8c4:	4288      	cmp	r0, r1
 800e8c6:	daf0      	bge.n	800e8aa <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 800e8c8:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800e8cc:	803a      	strh	r2, [r7, #0]
 800e8ce:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	dd23      	ble.n	800e91e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 800e8d6:	181a      	adds	r2, r3, r0
 800e8d8:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800e8dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800e8e0:	42aa      	cmp	r2, r5
 800e8e2:	db10      	blt.n	800e906 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 800e8e4:	3b01      	subs	r3, #1
 800e8e6:	803b      	strh	r3, [r7, #0]
 800e8e8:	e7f1      	b.n	800e8ce <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 800e8ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e8ee:	8032      	strh	r2, [r6, #0]
 800e8f0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e8f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	bfdc      	itt	le
 800e8fc:	f103 33ff 	addle.w	r3, r3, #4294967295
 800e900:	b21a      	sxthle	r2, r3
 800e902:	803a      	strh	r2, [r7, #0]
 800e904:	e79a      	b.n	800e83c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 800e906:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e90a:	f9b6 2000 	ldrsh.w	r2, [r6]
 800e90e:	3b01      	subs	r3, #1
 800e910:	429a      	cmp	r2, r3
 800e912:	dbea      	blt.n	800e8ea <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 800e914:	b21b      	sxth	r3, r3
 800e916:	2000      	movs	r0, #0
 800e918:	803b      	strh	r3, [r7, #0]
 800e91a:	8033      	strh	r3, [r6, #0]
 800e91c:	e77b      	b.n	800e816 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800e91e:	2000      	movs	r0, #0
 800e920:	8038      	strh	r0, [r7, #0]
 800e922:	8030      	strh	r0, [r6, #0]
 800e924:	e777      	b.n	800e816 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
	...

0800e928 <_ZN8touchgfx9ContainerC1Ev>:
 800e928:	2101      	movs	r1, #1
 800e92a:	2200      	movs	r2, #0
 800e92c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800e930:	4909      	ldr	r1, [pc, #36]	; (800e958 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 800e932:	8082      	strh	r2, [r0, #4]
 800e934:	80c2      	strh	r2, [r0, #6]
 800e936:	8102      	strh	r2, [r0, #8]
 800e938:	8142      	strh	r2, [r0, #10]
 800e93a:	8182      	strh	r2, [r0, #12]
 800e93c:	81c2      	strh	r2, [r0, #14]
 800e93e:	8202      	strh	r2, [r0, #16]
 800e940:	8242      	strh	r2, [r0, #18]
 800e942:	61c2      	str	r2, [r0, #28]
 800e944:	8402      	strh	r2, [r0, #32]
 800e946:	8442      	strh	r2, [r0, #34]	; 0x22
 800e948:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800e94c:	6001      	str	r1, [r0, #0]
 800e94e:	6282      	str	r2, [r0, #40]	; 0x28
 800e950:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	08022b30 	.word	0x08022b30

0800e95c <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800e95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	4605      	mov	r5, r0
 800e962:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e966:	4688      	mov	r8, r1
 800e968:	4691      	mov	r9, r2
 800e96a:	469a      	mov	sl, r3
 800e96c:	b360      	cbz	r0, 800e9c8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 800e96e:	2700      	movs	r7, #0
 800e970:	f04f 3bff 	mov.w	fp, #4294967295
 800e974:	b23e      	sxth	r6, r7
 800e976:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 800e97a:	42b3      	cmp	r3, r6
 800e97c:	dd23      	ble.n	800e9c6 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	4631      	mov	r1, r6
 800e982:	4628      	mov	r0, r5
 800e984:	3701      	adds	r7, #1
 800e986:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e98a:	4798      	blx	r3
 800e98c:	9001      	str	r0, [sp, #4]
 800e98e:	a801      	add	r0, sp, #4
 800e990:	f7f5 fcad 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e994:	682b      	ldr	r3, [r5, #0]
 800e996:	eba0 0008 	sub.w	r0, r0, r8
 800e99a:	4631      	mov	r1, r6
 800e99c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e9a0:	b204      	sxth	r4, r0
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	4798      	blx	r3
 800e9a6:	9001      	str	r0, [sp, #4]
 800e9a8:	a801      	add	r0, sp, #4
 800e9aa:	f7f5 fca0 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800e9ae:	eba0 0009 	sub.w	r0, r0, r9
 800e9b2:	fb10 f000 	smulbb	r0, r0, r0
 800e9b6:	fb04 0404 	mla	r4, r4, r4, r0
 800e9ba:	455c      	cmp	r4, fp
 800e9bc:	bf3c      	itt	cc
 800e9be:	f8aa 6000 	strhcc.w	r6, [sl]
 800e9c2:	46a3      	movcc	fp, r4
 800e9c4:	e7d6      	b.n	800e974 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800e9c6:	2001      	movs	r0, #1
 800e9c8:	b003      	add	sp, #12
 800e9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9ce <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800e9ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e9d8:	4688      	mov	r8, r1
 800e9da:	4691      	mov	r9, r2
 800e9dc:	b1f8      	cbz	r0, 800ea1e <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 800e9de:	2500      	movs	r5, #0
 800e9e0:	f04f 37ff 	mov.w	r7, #4294967295
 800e9e4:	b22e      	sxth	r6, r5
 800e9e6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800e9ea:	42b3      	cmp	r3, r6
 800e9ec:	dd16      	ble.n	800ea1c <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	4631      	mov	r1, r6
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800e9fa:	4798      	blx	r3
 800e9fc:	9001      	str	r0, [sp, #4]
 800e9fe:	a801      	add	r0, sp, #4
 800ea00:	f7f5 fc75 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ea04:	b200      	sxth	r0, r0
 800ea06:	eba0 0008 	sub.w	r0, r0, r8
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	bfb8      	it	lt
 800ea0e:	4240      	neglt	r0, r0
 800ea10:	42b8      	cmp	r0, r7
 800ea12:	bf3c      	itt	cc
 800ea14:	f8a9 6000 	strhcc.w	r6, [r9]
 800ea18:	4607      	movcc	r7, r0
 800ea1a:	e7e3      	b.n	800e9e4 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	b003      	add	sp, #12
 800ea20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ea24 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800ea24:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 800ea28:	f9bd 3000 	ldrsh.w	r3, [sp]
 800ea2c:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 800ea30:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 800ea34:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800ea38:	4770      	bx	lr

0800ea3a <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800ea3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea3c:	4604      	mov	r4, r0
 800ea3e:	3038      	adds	r0, #56	; 0x38
 800ea40:	460d      	mov	r5, r1
 800ea42:	f7fe fb13 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ea46:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800ea4a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ea4e:	4628      	mov	r0, r5
 800ea50:	9200      	str	r2, [sp, #0]
 800ea52:	2200      	movs	r2, #0
 800ea54:	4611      	mov	r1, r2
 800ea56:	f7f4 ff39 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ea5a:	b003      	add	sp, #12
 800ea5c:	bd30      	pop	{r4, r5, pc}

0800ea5e <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 800ea5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea60:	4604      	mov	r4, r0
 800ea62:	3064      	adds	r0, #100	; 0x64
 800ea64:	460d      	mov	r5, r1
 800ea66:	f7fe fb01 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ea6a:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800ea6e:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800ea72:	4628      	mov	r0, r5
 800ea74:	9200      	str	r2, [sp, #0]
 800ea76:	2200      	movs	r2, #0
 800ea78:	4611      	mov	r1, r2
 800ea7a:	f7f4 ff27 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ea7e:	b003      	add	sp, #12
 800ea80:	bd30      	pop	{r4, r5, pc}

0800ea82 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800ea82:	b538      	push	{r3, r4, r5, lr}
 800ea84:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800ea88:	460d      	mov	r5, r1
 800ea8a:	428b      	cmp	r3, r1
 800ea8c:	dd08      	ble.n	800eaa0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800ea8e:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800ea90:	b134      	cbz	r4, 800eaa0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800ea92:	6823      	ldr	r3, [r4, #0]
 800ea94:	4620      	mov	r0, r4
 800ea96:	4629      	mov	r1, r5
 800ea98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea9a:	4798      	blx	r3
 800ea9c:	69a4      	ldr	r4, [r4, #24]
 800ea9e:	e7f7      	b.n	800ea90 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800eaa0:	bd38      	pop	{r3, r4, r5, pc}

0800eaa2 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 800eaa2:	b570      	push	{r4, r5, r6, lr}
 800eaa4:	b20e      	sxth	r6, r1
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	4631      	mov	r1, r6
 800eaac:	f7ff ffe9 	bl	800ea82 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800eab0:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800eab4:	3b01      	subs	r3, #1
 800eab6:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800eaba:	00a3      	lsls	r3, r4, #2
 800eabc:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 800eac0:	1d1a      	adds	r2, r3, #4
 800eac2:	42a1      	cmp	r1, r4
 800eac4:	dd0a      	ble.n	800eadc <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 800eac6:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 800eaca:	3401      	adds	r4, #1
 800eacc:	5888      	ldr	r0, [r1, r2]
 800eace:	50c8      	str	r0, [r1, r3]
 800ead0:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 800ead4:	5888      	ldr	r0, [r1, r2]
 800ead6:	50c8      	str	r0, [r1, r3]
 800ead8:	4613      	mov	r3, r2
 800eada:	e7ef      	b.n	800eabc <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 800eadc:	4630      	mov	r0, r6
 800eade:	bd70      	pop	{r4, r5, r6, pc}

0800eae0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800eae6:	b15d      	cbz	r5, 800eb00 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800eae8:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800eaec:	4628      	mov	r0, r5
 800eaee:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800eaf2:	9200      	str	r2, [sp, #0]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	f7f4 fee8 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800eafc:	69ad      	ldr	r5, [r5, #24]
 800eafe:	e7f2      	b.n	800eae6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800eb00:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 800eb04:	b15d      	cbz	r5, 800eb1e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800eb06:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 800eb10:	9200      	str	r2, [sp, #0]
 800eb12:	2200      	movs	r2, #0
 800eb14:	4611      	mov	r1, r2
 800eb16:	f7f4 fed9 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800eb1a:	69ad      	ldr	r5, [r5, #24]
 800eb1c:	e7f2      	b.n	800eb04 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800eb1e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800eb22:	b15d      	cbz	r5, 800eb3c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800eb24:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800eb2e:	9200      	str	r2, [sp, #0]
 800eb30:	2200      	movs	r2, #0
 800eb32:	4611      	mov	r1, r2
 800eb34:	f7f4 feca 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800eb38:	69ad      	ldr	r5, [r5, #24]
 800eb3a:	e7f2      	b.n	800eb22 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800eb3c:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800eb40:	b15d      	cbz	r5, 800eb5a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800eb42:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 800eb46:	4628      	mov	r0, r5
 800eb48:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 800eb4c:	9200      	str	r2, [sp, #0]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	4611      	mov	r1, r2
 800eb52:	f7f4 febb 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800eb56:	69ad      	ldr	r5, [r5, #24]
 800eb58:	e7f2      	b.n	800eb40 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800eb5a:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800eb5e:	b15d      	cbz	r5, 800eb78 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800eb60:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800eb64:	4628      	mov	r0, r5
 800eb66:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800eb6a:	9200      	str	r2, [sp, #0]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	4611      	mov	r1, r2
 800eb70:	f7f4 feac 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800eb74:	69ad      	ldr	r5, [r5, #24]
 800eb76:	e7f2      	b.n	800eb5e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800eb78:	6823      	ldr	r3, [r4, #0]
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	b003      	add	sp, #12
 800eb80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb84:	4718      	bx	r3

0800eb86 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800eb86:	b430      	push	{r4, r5}
 800eb88:	b28a      	uxth	r2, r1
 800eb8a:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 800eb8e:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 800eb92:	1b15      	subs	r5, r2, r4
 800eb94:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 800eb98:	8101      	strh	r1, [r0, #8]
 800eb9a:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 800eb9e:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 800eba2:	442c      	add	r4, r5
 800eba4:	1b12      	subs	r2, r2, r4
 800eba6:	bc30      	pop	{r4, r5}
 800eba8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800ebac:	f7ff bf98 	b.w	800eae0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800ebb0 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800ebb0:	b430      	push	{r4, r5}
 800ebb2:	b28a      	uxth	r2, r1
 800ebb4:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 800ebb8:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 800ebbc:	1b15      	subs	r5, r2, r4
 800ebbe:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 800ebc2:	8141      	strh	r1, [r0, #10]
 800ebc4:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 800ebc8:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 800ebcc:	442c      	add	r4, r5
 800ebce:	1b12      	subs	r2, r2, r4
 800ebd0:	bc30      	pop	{r4, r5}
 800ebd2:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800ebd6:	f7ff bf83 	b.w	800eae0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800ebda <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800ebda:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebde:	fa1f fa83 	uxth.w	sl, r3
 800ebe2:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800ebe6:	4615      	mov	r5, r2
 800ebe8:	4699      	mov	r9, r3
 800ebea:	fa1f f887 	uxth.w	r8, r7
 800ebee:	8903      	ldrh	r3, [r0, #8]
 800ebf0:	4452      	add	r2, sl
 800ebf2:	4604      	mov	r4, r0
 800ebf4:	8940      	ldrh	r0, [r0, #10]
 800ebf6:	460e      	mov	r6, r1
 800ebf8:	1a9b      	subs	r3, r3, r2
 800ebfa:	eb08 0201 	add.w	r2, r8, r1
 800ebfe:	1a80      	subs	r0, r0, r2
 800ec00:	b21b      	sxth	r3, r3
 800ec02:	460a      	mov	r2, r1
 800ec04:	4629      	mov	r1, r5
 800ec06:	b200      	sxth	r0, r0
 800ec08:	9000      	str	r0, [sp, #0]
 800ec0a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ec0e:	f7f4 fe5d 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec12:	2200      	movs	r2, #0
 800ec14:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ec18:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800ec1c:	4611      	mov	r1, r2
 800ec1e:	9600      	str	r6, [sp, #0]
 800ec20:	f7f4 fe54 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec24:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	462b      	mov	r3, r5
 800ec32:	4611      	mov	r1, r2
 800ec34:	f7f4 fe4a 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec38:	8921      	ldrh	r1, [r4, #8]
 800ec3a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ec3e:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800ec42:	eba1 010a 	sub.w	r1, r1, sl
 800ec46:	2200      	movs	r2, #0
 800ec48:	9300      	str	r3, [sp, #0]
 800ec4a:	464b      	mov	r3, r9
 800ec4c:	b209      	sxth	r1, r1
 800ec4e:	f7f4 fe3d 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec52:	8962      	ldrh	r2, [r4, #10]
 800ec54:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ec58:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ec5c:	eba2 0208 	sub.w	r2, r2, r8
 800ec60:	9700      	str	r7, [sp, #0]
 800ec62:	2100      	movs	r1, #0
 800ec64:	b212      	sxth	r2, r2
 800ec66:	f7f4 fe31 	bl	80038cc <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	b002      	add	sp, #8
 800ec6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec72:	f7ff bf35 	b.w	800eae0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

0800ec78 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7c:	b085      	sub	sp, #20
 800ec7e:	4604      	mov	r4, r0
 800ec80:	2601      	movs	r6, #1
 800ec82:	2500      	movs	r5, #0
 800ec84:	9103      	str	r1, [sp, #12]
 800ec86:	f7ff fe4f 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ec8a:	4b2c      	ldr	r3, [pc, #176]	; (800ed3c <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 800ec8c:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800ec90:	f104 0964 	add.w	r9, r4, #100	; 0x64
 800ec94:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800ec98:	6023      	str	r3, [r4, #0]
 800ec9a:	23ff      	movs	r3, #255	; 0xff
 800ec9c:	4658      	mov	r0, fp
 800ec9e:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 800eca2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800eca6:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 800ecaa:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800ecae:	f7ff fe3b 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ecb2:	4648      	mov	r0, r9
 800ecb4:	f7ff fe38 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ecb8:	4640      	mov	r0, r8
 800ecba:	f7ff fe35 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ecbe:	4650      	mov	r0, sl
 800ecc0:	f7ff fe32 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ecc4:	4638      	mov	r0, r7
 800ecc6:	f7ff fe2f 	bl	800e928 <_ZN8touchgfx9ContainerC1Ev>
 800ecca:	9903      	ldr	r1, [sp, #12]
 800eccc:	4620      	mov	r0, r4
 800ecce:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800ecd2:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 800ecd6:	4659      	mov	r1, fp
 800ecd8:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800ecdc:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 800ece0:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800ece4:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800ece8:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800ecec:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800ecf0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800ecf4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800ecf8:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800ecfc:	f7fe f9b6 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ed00:	4651      	mov	r1, sl
 800ed02:	4620      	mov	r0, r4
 800ed04:	f7fe f9b2 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f7fe f9ae 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ed10:	4641      	mov	r1, r8
 800ed12:	4620      	mov	r0, r4
 800ed14:	f7fe f9aa 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ed18:	4639      	mov	r1, r7
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f7fe f9a6 	bl	800d06c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ed20:	4620      	mov	r0, r4
 800ed22:	9500      	str	r5, [sp, #0]
 800ed24:	462b      	mov	r3, r5
 800ed26:	462a      	mov	r2, r5
 800ed28:	4629      	mov	r1, r5
 800ed2a:	f7ff ff56 	bl	800ebda <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800ed2e:	4620      	mov	r0, r4
 800ed30:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800ed34:	b005      	add	sp, #20
 800ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed3a:	bf00      	nop
 800ed3c:	08022ddc 	.word	0x08022ddc

0800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 800ed40:	4291      	cmp	r1, r2
 800ed42:	4613      	mov	r3, r2
 800ed44:	d003      	beq.n	800ed4e <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 800ed46:	460a      	mov	r2, r1
 800ed48:	4619      	mov	r1, r3
 800ed4a:	f004 beb1 	b.w	8013ab0 <_ZN8touchgfx6muldivElll>
 800ed4e:	4770      	bx	lr

0800ed50 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 800ed50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed54:	4604      	mov	r4, r0
 800ed56:	460f      	mov	r7, r1
 800ed58:	b1b2      	cbz	r2, 800ed88 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800ed5a:	6803      	ldr	r3, [r0, #0]
 800ed5c:	2600      	movs	r6, #0
 800ed5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed62:	4798      	blx	r3
 800ed64:	4681      	mov	r9, r0
 800ed66:	b235      	sxth	r5, r6
 800ed68:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ed6c:	3601      	adds	r6, #1
 800ed6e:	42ab      	cmp	r3, r5
 800ed70:	dd0a      	ble.n	800ed88 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800ed72:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 800ed76:	463a      	mov	r2, r7
 800ed78:	4649      	mov	r1, r9
 800ed7a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800ed7e:	f7ff ffdf 	bl	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800ed82:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800ed86:	e7ee      	b.n	800ed66 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 800ed88:	6327      	str	r7, [r4, #48]	; 0x30
 800ed8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ed8e <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 800ed8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed92:	4604      	mov	r4, r0
 800ed94:	460f      	mov	r7, r1
 800ed96:	b1b2      	cbz	r2, 800edc6 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800ed98:	6803      	ldr	r3, [r0, #0]
 800ed9a:	2600      	movs	r6, #0
 800ed9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eda0:	4798      	blx	r3
 800eda2:	4681      	mov	r9, r0
 800eda4:	b235      	sxth	r5, r6
 800eda6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800edaa:	3601      	adds	r6, #1
 800edac:	42ab      	cmp	r3, r5
 800edae:	dd0a      	ble.n	800edc6 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800edb0:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800edb4:	463a      	mov	r2, r7
 800edb6:	4649      	mov	r1, r9
 800edb8:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800edbc:	f7ff ffc0 	bl	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800edc0:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800edc4:	e7ee      	b.n	800eda4 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 800edc6:	6367      	str	r7, [r4, #52]	; 0x34
 800edc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800edcc <_ZN8touchgfx9GraphData8addValueEii>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800edd4:	4605      	mov	r5, r0
 800edd6:	4617      	mov	r7, r2
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d03e      	beq.n	800ee5a <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800eddc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800ede0:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800ede4:	3801      	subs	r0, #1
 800ede6:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800edea:	4288      	cmp	r0, r1
 800edec:	db35      	blt.n	800ee5a <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800edee:	2000      	movs	r0, #0
 800edf0:	b204      	sxth	r4, r0
 800edf2:	42a3      	cmp	r3, r4
 800edf4:	dd16      	ble.n	800ee24 <_ZN8touchgfx9GraphData8addValueEii+0x58>
 800edf6:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800edfa:	3001      	adds	r0, #1
 800edfc:	f852 6008 	ldr.w	r6, [r2, r8]
 800ee00:	428e      	cmp	r6, r1
 800ee02:	dbf5      	blt.n	800edf0 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 800ee04:	d10f      	bne.n	800ee26 <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 800ee06:	4621      	mov	r1, r4
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f7ff fe3a 	bl	800ea82 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800ee0e:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800ee12:	f843 7008 	str.w	r7, [r3, r8]
 800ee16:	4621      	mov	r1, r4
 800ee18:	4628      	mov	r0, r5
 800ee1a:	f7ff fe32 	bl	800ea82 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800ee1e:	4620      	mov	r0, r4
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	d01a      	beq.n	800ee5c <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800ee26:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800ee2a:	428a      	cmp	r2, r1
 800ee2c:	dc16      	bgt.n	800ee5c <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800ee2e:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800ee32:	3801      	subs	r0, #1
 800ee34:	0080      	lsls	r0, r0, #2
 800ee36:	42a3      	cmp	r3, r4
 800ee38:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 800ee3c:	dd15      	ble.n	800ee6a <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 800ee3e:	5832      	ldr	r2, [r6, r0]
 800ee40:	f100 0c04 	add.w	ip, r0, #4
 800ee44:	3b01      	subs	r3, #1
 800ee46:	f846 200c 	str.w	r2, [r6, ip]
 800ee4a:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 800ee4e:	b21b      	sxth	r3, r3
 800ee50:	5832      	ldr	r2, [r6, r0]
 800ee52:	3804      	subs	r0, #4
 800ee54:	f846 200c 	str.w	r2, [r6, ip]
 800ee58:	e7ed      	b.n	800ee36 <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 800ee5a:	461c      	mov	r4, r3
 800ee5c:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d1e4      	bne.n	800ee2e <_ZN8touchgfx9GraphData8addValueEii+0x62>
 800ee64:	f04f 34ff 	mov.w	r4, #4294967295
 800ee68:	e7d9      	b.n	800ee1e <_ZN8touchgfx9GraphData8addValueEii+0x52>
 800ee6a:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800ee6e:	3301      	adds	r3, #1
 800ee70:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800ee74:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 800ee78:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800ee7c:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800ee80:	e7c9      	b.n	800ee16 <_ZN8touchgfx9GraphData8addValueEii+0x4a>

0800ee82 <_ZN8touchgfx16GraphElementLineD1Ev>:
 800ee82:	4770      	bx	lr

0800ee84 <_ZN8touchgfx16GraphElementLineD0Ev>:
 800ee84:	b510      	push	{r4, lr}
 800ee86:	4604      	mov	r4, r0
 800ee88:	2130      	movs	r1, #48	; 0x30
 800ee8a:	f00f f994 	bl	801e1b6 <_ZdlPvj>
 800ee8e:	4620      	mov	r0, r4
 800ee90:	bd10      	pop	{r4, pc}

0800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800ee92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee94:	4604      	mov	r4, r0
 800ee96:	4608      	mov	r0, r1
 800ee98:	460d      	mov	r5, r1
 800ee9a:	f7fe faae 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800ee9e:	b978      	cbnz	r0, 800eec0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7fe faaa 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800eea6:	f9b5 6000 	ldrsh.w	r6, [r5]
 800eeaa:	b150      	cbz	r0, 800eec2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800eeac:	8026      	strh	r6, [r4, #0]
 800eeae:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800eeb2:	8063      	strh	r3, [r4, #2]
 800eeb4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800eeb8:	80a3      	strh	r3, [r4, #4]
 800eeba:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800eebe:	80e3      	strh	r3, [r4, #6]
 800eec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eec2:	f9b4 1000 	ldrsh.w	r1, [r4]
 800eec6:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800eeca:	42b1      	cmp	r1, r6
 800eecc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800eed0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800eed4:	460f      	mov	r7, r1
 800eed6:	88ed      	ldrh	r5, [r5, #6]
 800eed8:	bfa8      	it	ge
 800eeda:	4637      	movge	r7, r6
 800eedc:	4293      	cmp	r3, r2
 800eede:	4618      	mov	r0, r3
 800eee0:	4466      	add	r6, ip
 800eee2:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800eee6:	bfa8      	it	ge
 800eee8:	4610      	movge	r0, r2
 800eeea:	442a      	add	r2, r5
 800eeec:	88e5      	ldrh	r5, [r4, #6]
 800eeee:	4461      	add	r1, ip
 800eef0:	b236      	sxth	r6, r6
 800eef2:	8027      	strh	r7, [r4, #0]
 800eef4:	442b      	add	r3, r5
 800eef6:	b209      	sxth	r1, r1
 800eef8:	b212      	sxth	r2, r2
 800eefa:	8060      	strh	r0, [r4, #2]
 800eefc:	b21b      	sxth	r3, r3
 800eefe:	428e      	cmp	r6, r1
 800ef00:	bfac      	ite	ge
 800ef02:	ebc7 0106 	rsbge	r1, r7, r6
 800ef06:	ebc7 0101 	rsblt	r1, r7, r1
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	bfac      	ite	ge
 800ef0e:	ebc0 0202 	rsbge	r2, r0, r2
 800ef12:	ebc0 0203 	rsblt	r2, r0, r3
 800ef16:	80a1      	strh	r1, [r4, #4]
 800ef18:	80e2      	strh	r2, [r4, #6]
 800ef1a:	e7d1      	b.n	800eec0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800ef1c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800ef1c:	6800      	ldr	r0, [r0, #0]
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	bfb9      	ittee	lt
 800ef22:	2320      	movlt	r3, #32
 800ef24:	fb90 f0f3 	sdivlt	r0, r0, r3
 800ef28:	301f      	addge	r0, #31
 800ef2a:	1140      	asrge	r0, r0, #5
 800ef2c:	4770      	bx	lr

0800ef2e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 800ef2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef32:	6803      	ldr	r3, [r0, #0]
 800ef34:	b093      	sub	sp, #76	; 0x4c
 800ef36:	6945      	ldr	r5, [r0, #20]
 800ef38:	4604      	mov	r4, r0
 800ef3a:	460f      	mov	r7, r1
 800ef3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef3e:	2d00      	cmp	r5, #0
 800ef40:	f000 81ad 	beq.w	800f29e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 800ef44:	696d      	ldr	r5, [r5, #20]
 800ef46:	4798      	blx	r3
 800ef48:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d077      	beq.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800ef50:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800ef54:	fb13 f000 	smulbb	r0, r3, r0
 800ef58:	b283      	uxth	r3, r0
 800ef5a:	1c58      	adds	r0, r3, #1
 800ef5c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800ef60:	1200      	asrs	r0, r0, #8
 800ef62:	d06d      	beq.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800ef64:	b2c3      	uxtb	r3, r0
 800ef66:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800ef6a:	462a      	mov	r2, r5
 800ef6c:	4621      	mov	r1, r4
 800ef6e:	9308      	str	r3, [sp, #32]
 800ef70:	4640      	mov	r0, r8
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	ae0e      	add	r6, sp, #56	; 0x38
 800ef76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef7a:	4798      	blx	r3
 800ef7c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ef80:	e886 0003 	stmia.w	r6, {r0, r1}
 800ef84:	4639      	mov	r1, r7
 800ef86:	4630      	mov	r0, r6
 800ef88:	f7fe f9f4 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800ef8c:	6823      	ldr	r3, [r4, #0]
 800ef8e:	4629      	mov	r1, r5
 800ef90:	4620      	mov	r0, r4
 800ef92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef96:	4798      	blx	r3
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	4607      	mov	r7, r0
 800ef9c:	4629      	mov	r1, r5
 800ef9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efa2:	4620      	mov	r0, r4
 800efa4:	4798      	blx	r3
 800efa6:	4681      	mov	r9, r0
 800efa8:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 800efac:	4629      	mov	r1, r5
 800efae:	0103      	lsls	r3, r0, #4
 800efb0:	4620      	mov	r0, r4
 800efb2:	9309      	str	r3, [sp, #36]	; 0x24
 800efb4:	6823      	ldr	r3, [r4, #0]
 800efb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800efba:	4798      	blx	r3
 800efbc:	4629      	mov	r1, r5
 800efbe:	b203      	sxth	r3, r0
 800efc0:	4620      	mov	r0, r4
 800efc2:	9306      	str	r3, [sp, #24]
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800efca:	4798      	blx	r3
 800efcc:	2f00      	cmp	r7, #0
 800efce:	b203      	sxth	r3, r0
 800efd0:	9307      	str	r3, [sp, #28]
 800efd2:	d138      	bne.n	800f046 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 800efd4:	f1b9 0f00 	cmp.w	r9, #0
 800efd8:	d132      	bne.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800efda:	6823      	ldr	r3, [r4, #0]
 800efdc:	464a      	mov	r2, r9
 800efde:	4629      	mov	r1, r5
 800efe0:	4620      	mov	r0, r4
 800efe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800efe6:	4798      	blx	r3
 800efe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efea:	1ac0      	subs	r0, r0, r3
 800efec:	9010      	str	r0, [sp, #64]	; 0x40
 800efee:	4640      	mov	r0, r8
 800eff0:	f7f5 f97d 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	4607      	mov	r7, r0
 800eff8:	4629      	mov	r1, r5
 800effa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800effe:	4620      	mov	r0, r4
 800f000:	4798      	blx	r3
 800f002:	1a38      	subs	r0, r7, r0
 800f004:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f008:	fa0f f880 	sxth.w	r8, r0
 800f00c:	eb13 0f08 	cmn.w	r3, r8
 800f010:	d416      	bmi.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	4629      	mov	r1, r5
 800f016:	4620      	mov	r0, r4
 800f018:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f01c:	4798      	blx	r3
 800f01e:	4580      	cmp	r8, r0
 800f020:	da0e      	bge.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f022:	9a08      	ldr	r2, [sp, #32]
 800f024:	b23f      	sxth	r7, r7
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	4631      	mov	r1, r6
 800f02a:	9202      	str	r2, [sp, #8]
 800f02c:	4620      	mov	r0, r4
 800f02e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800f032:	9700      	str	r7, [sp, #0]
 800f034:	9201      	str	r2, [sp, #4]
 800f036:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800f03a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f03e:	47a8      	blx	r5
 800f040:	b013      	add	sp, #76	; 0x4c
 800f042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f046:	ddfb      	ble.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f048:	6823      	ldr	r3, [r4, #0]
 800f04a:	4629      	mov	r1, r5
 800f04c:	4620      	mov	r0, r4
 800f04e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f052:	4798      	blx	r3
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	4683      	mov	fp, r0
 800f058:	4629      	mov	r1, r5
 800f05a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f05e:	4620      	mov	r0, r4
 800f060:	4798      	blx	r3
 800f062:	eba0 030b 	sub.w	r3, r0, fp
 800f066:	4680      	mov	r8, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bfb8      	it	lt
 800f06c:	425b      	neglt	r3, r3
 800f06e:	fb93 f3f7 	sdiv	r3, r3, r7
 800f072:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f076:	dce3      	bgt.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f078:	6823      	ldr	r3, [r4, #0]
 800f07a:	465a      	mov	r2, fp
 800f07c:	4629      	mov	r1, r5
 800f07e:	4620      	mov	r0, r4
 800f080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f084:	4798      	blx	r3
 800f086:	6823      	ldr	r3, [r4, #0]
 800f088:	4606      	mov	r6, r0
 800f08a:	4642      	mov	r2, r8
 800f08c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f090:	4629      	mov	r1, r5
 800f092:	4620      	mov	r0, r4
 800f094:	4798      	blx	r3
 800f096:	42b0      	cmp	r0, r6
 800f098:	bfa2      	ittt	ge
 800f09a:	4643      	movge	r3, r8
 800f09c:	46d8      	movge	r8, fp
 800f09e:	469b      	movge	fp, r3
 800f0a0:	fb98 f6f7 	sdiv	r6, r8, r7
 800f0a4:	fb9b f2f7 	sdiv	r2, fp, r7
 800f0a8:	45d8      	cmp	r8, fp
 800f0aa:	bfac      	ite	ge
 800f0ac:	f04f 33ff 	movge.w	r3, #4294967295
 800f0b0:	2301      	movlt	r3, #1
 800f0b2:	1af6      	subs	r6, r6, r3
 800f0b4:	441a      	add	r2, r3
 800f0b6:	4296      	cmp	r6, r2
 800f0b8:	bfac      	ite	ge
 800f0ba:	f04f 3aff 	movge.w	sl, #4294967295
 800f0be:	f04f 0a01 	movlt.w	sl, #1
 800f0c2:	f1b9 0f00 	cmp.w	r9, #0
 800f0c6:	d13e      	bne.n	800f146 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 800f0c8:	fb07 fb0a 	mul.w	fp, r7, sl
 800f0cc:	eb0a 0802 	add.w	r8, sl, r2
 800f0d0:	4377      	muls	r7, r6
 800f0d2:	45b0      	cmp	r8, r6
 800f0d4:	d0b4      	beq.n	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	463a      	mov	r2, r7
 800f0da:	4629      	mov	r1, r5
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f0e2:	4798      	blx	r3
 800f0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0e6:	1ac0      	subs	r0, r0, r3
 800f0e8:	9010      	str	r0, [sp, #64]	; 0x40
 800f0ea:	a810      	add	r0, sp, #64	; 0x40
 800f0ec:	f7f5 f8ff 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f0f0:	6823      	ldr	r3, [r4, #0]
 800f0f2:	4681      	mov	r9, r0
 800f0f4:	4629      	mov	r1, r5
 800f0f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	4798      	blx	r3
 800f0fe:	eba9 0000 	sub.w	r0, r9, r0
 800f102:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800f106:	b203      	sxth	r3, r0
 800f108:	42da      	cmn	r2, r3
 800f10a:	9304      	str	r3, [sp, #16]
 800f10c:	d418      	bmi.n	800f140 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800f10e:	6822      	ldr	r2, [r4, #0]
 800f110:	4629      	mov	r1, r5
 800f112:	4620      	mov	r0, r4
 800f114:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800f118:	4790      	blx	r2
 800f11a:	9b04      	ldr	r3, [sp, #16]
 800f11c:	4283      	cmp	r3, r0
 800f11e:	da0f      	bge.n	800f140 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800f120:	9b08      	ldr	r3, [sp, #32]
 800f122:	a90e      	add	r1, sp, #56	; 0x38
 800f124:	6822      	ldr	r2, [r4, #0]
 800f126:	4620      	mov	r0, r4
 800f128:	9302      	str	r3, [sp, #8]
 800f12a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f12e:	9301      	str	r3, [sp, #4]
 800f130:	fa0f f389 	sxth.w	r3, r9
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 800f13a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f13e:	47c8      	blx	r9
 800f140:	4456      	add	r6, sl
 800f142:	445f      	add	r7, fp
 800f144:	e7c5      	b.n	800f0d2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 800f146:	fb98 f8f9 	sdiv	r8, r8, r9
 800f14a:	eba8 0203 	sub.w	r2, r8, r3
 800f14e:	4629      	mov	r1, r5
 800f150:	4620      	mov	r0, r4
 800f152:	9204      	str	r2, [sp, #16]
 800f154:	fb9b f8f9 	sdiv	r8, fp, r9
 800f158:	4498      	add	r8, r3
 800f15a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800f15e:	4542      	cmp	r2, r8
 800f160:	bfac      	ite	ge
 800f162:	f04f 33ff 	movge.w	r3, #4294967295
 800f166:	2301      	movlt	r3, #1
 800f168:	fb02 f209 	mul.w	r2, r2, r9
 800f16c:	930a      	str	r3, [sp, #40]	; 0x28
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f174:	4798      	blx	r3
 800f176:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800f17a:	4658      	mov	r0, fp
 800f17c:	f7f5 f8b7 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f180:	fb06 f207 	mul.w	r2, r6, r7
 800f184:	b203      	sxth	r3, r0
 800f186:	4629      	mov	r1, r5
 800f188:	4620      	mov	r0, r4
 800f18a:	9305      	str	r3, [sp, #20]
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f192:	4798      	blx	r3
 800f194:	9010      	str	r0, [sp, #64]	; 0x40
 800f196:	4658      	mov	r0, fp
 800f198:	f7f5 f8a9 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f19c:	fb07 f20a 	mul.w	r2, r7, sl
 800f1a0:	b203      	sxth	r3, r0
 800f1a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800f1a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1a6:	4442      	add	r2, r8
 800f1a8:	920c      	str	r2, [sp, #48]	; 0x30
 800f1aa:	9a05      	ldr	r2, [sp, #20]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	dc16      	bgt.n	800f1de <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 800f1b0:	eb06 080a 	add.w	r8, r6, sl
 800f1b4:	fb07 f808 	mul.w	r8, r7, r8
 800f1b8:	9a05      	ldr	r2, [sp, #20]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	db54      	blt.n	800f268 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	4642      	mov	r2, r8
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1ca:	4456      	add	r6, sl
 800f1cc:	4798      	blx	r3
 800f1ce:	9010      	str	r0, [sp, #64]	; 0x40
 800f1d0:	4658      	mov	r0, fp
 800f1d2:	f7f5 f88c 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f1d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1d8:	b203      	sxth	r3, r0
 800f1da:	4490      	add	r8, r2
 800f1dc:	e7ec      	b.n	800f1b8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 800f1de:	6823      	ldr	r3, [r4, #0]
 800f1e0:	fb07 f206 	mul.w	r2, r7, r6
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f1ec:	4798      	blx	r3
 800f1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1f0:	1ac0      	subs	r0, r0, r3
 800f1f2:	9010      	str	r0, [sp, #64]	; 0x40
 800f1f4:	4658      	mov	r0, fp
 800f1f6:	f7f5 f87a 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f1fa:	6823      	ldr	r3, [r4, #0]
 800f1fc:	4680      	mov	r8, r0
 800f1fe:	4629      	mov	r1, r5
 800f200:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f204:	4620      	mov	r0, r4
 800f206:	4798      	blx	r3
 800f208:	eba8 0000 	sub.w	r0, r8, r0
 800f20c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800f210:	b203      	sxth	r3, r0
 800f212:	42da      	cmn	r2, r3
 800f214:	930d      	str	r3, [sp, #52]	; 0x34
 800f216:	d418      	bmi.n	800f24a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800f218:	6822      	ldr	r2, [r4, #0]
 800f21a:	4629      	mov	r1, r5
 800f21c:	4620      	mov	r0, r4
 800f21e:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 800f222:	4790      	blx	r2
 800f224:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f226:	4283      	cmp	r3, r0
 800f228:	da0f      	bge.n	800f24a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800f22a:	9b08      	ldr	r3, [sp, #32]
 800f22c:	a90e      	add	r1, sp, #56	; 0x38
 800f22e:	6822      	ldr	r2, [r4, #0]
 800f230:	4620      	mov	r0, r4
 800f232:	9302      	str	r3, [sp, #8]
 800f234:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	fa0f f388 	sxth.w	r3, r8
 800f23e:	9300      	str	r3, [sp, #0]
 800f240:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 800f244:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f248:	47c0      	blx	r8
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	4456      	add	r6, sl
 800f24e:	4629      	mov	r1, r5
 800f250:	4620      	mov	r0, r4
 800f252:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f256:	fb06 f207 	mul.w	r2, r6, r7
 800f25a:	4798      	blx	r3
 800f25c:	9010      	str	r0, [sp, #64]	; 0x40
 800f25e:	4658      	mov	r0, fp
 800f260:	f7f5 f845 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f264:	b203      	sxth	r3, r0
 800f266:	e7a0      	b.n	800f1aa <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800f268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f26a:	930d      	str	r3, [sp, #52]	; 0x34
 800f26c:	9b04      	ldr	r3, [sp, #16]
 800f26e:	4413      	add	r3, r2
 800f270:	9304      	str	r3, [sp, #16]
 800f272:	9a04      	ldr	r2, [sp, #16]
 800f274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f276:	4293      	cmp	r3, r2
 800f278:	f43f aee2 	beq.w	800f040 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f27c:	9b04      	ldr	r3, [sp, #16]
 800f27e:	4629      	mov	r1, r5
 800f280:	6822      	ldr	r2, [r4, #0]
 800f282:	4620      	mov	r0, r4
 800f284:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 800f288:	fb03 f209 	mul.w	r2, r3, r9
 800f28c:	47c0      	blx	r8
 800f28e:	9010      	str	r0, [sp, #64]	; 0x40
 800f290:	4658      	mov	r0, fp
 800f292:	f7f5 f82c 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f296:	b203      	sxth	r3, r0
 800f298:	9305      	str	r3, [sp, #20]
 800f29a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f29c:	e785      	b.n	800f1aa <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800f29e:	4798      	blx	r3
 800f2a0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f2a4:	deff      	udf	#255	; 0xff

0800f2a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800f2a6:	b510      	push	{r4, lr}
 800f2a8:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800f2ac:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800f2b0:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800f2b4:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800f2b8:	139b      	asrs	r3, r3, #14
 800f2ba:	13a4      	asrs	r4, r4, #14
 800f2bc:	429c      	cmp	r4, r3
 800f2be:	bfb8      	it	lt
 800f2c0:	461c      	movlt	r4, r3
 800f2c2:	2c01      	cmp	r4, #1
 800f2c4:	dd07      	ble.n	800f2d6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800f2c6:	fb91 f1f4 	sdiv	r1, r1, r4
 800f2ca:	fb90 f0f4 	sdiv	r0, r0, r4
 800f2ce:	f7ff ffea 	bl	800f2a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800f2d2:	4360      	muls	r0, r4
 800f2d4:	bd10      	pop	{r4, pc}
 800f2d6:	4340      	muls	r0, r0
 800f2d8:	fb01 0101 	mla	r1, r1, r1, r0
 800f2dc:	2000      	movs	r0, #0
 800f2de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f2e2:	bfb4      	ite	lt
 800f2e4:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 800f2e8:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800f2ec:	18c2      	adds	r2, r0, r3
 800f2ee:	428a      	cmp	r2, r1
 800f2f0:	bf9c      	itt	ls
 800f2f2:	1898      	addls	r0, r3, r2
 800f2f4:	1a89      	subls	r1, r1, r2
 800f2f6:	089b      	lsrs	r3, r3, #2
 800f2f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800f2fc:	d1f6      	bne.n	800f2ec <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 800f2fe:	e7e9      	b.n	800f2d4 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800f300 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 800f300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f302:	9906      	ldr	r1, [sp, #24]
 800f304:	4606      	mov	r6, r0
 800f306:	461c      	mov	r4, r3
 800f308:	2020      	movs	r0, #32
 800f30a:	4291      	cmp	r1, r2
 800f30c:	bfbc      	itt	lt
 800f30e:	9206      	strlt	r2, [sp, #24]
 800f310:	460a      	movlt	r2, r1
 800f312:	9907      	ldr	r1, [sp, #28]
 800f314:	428b      	cmp	r3, r1
 800f316:	bfc4      	itt	gt
 800f318:	460c      	movgt	r4, r1
 800f31a:	9307      	strgt	r3, [sp, #28]
 800f31c:	fb92 f5f0 	sdiv	r5, r2, r0
 800f320:	fb94 f4f0 	sdiv	r4, r4, r0
 800f324:	a806      	add	r0, sp, #24
 800f326:	f7ff fdf9 	bl	800ef1c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f32a:	4607      	mov	r7, r0
 800f32c:	a807      	add	r0, sp, #28
 800f32e:	f7ff fdf5 	bl	800ef1c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f332:	1b7a      	subs	r2, r7, r5
 800f334:	1b00      	subs	r0, r0, r4
 800f336:	8035      	strh	r5, [r6, #0]
 800f338:	8074      	strh	r4, [r6, #2]
 800f33a:	80f0      	strh	r0, [r6, #6]
 800f33c:	4630      	mov	r0, r6
 800f33e:	80b2      	strh	r2, [r6, #4]
 800f340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f342 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 800f342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f344:	9c08      	ldr	r4, [sp, #32]
 800f346:	2602      	movs	r6, #2
 800f348:	4605      	mov	r5, r0
 800f34a:	3401      	adds	r4, #1
 800f34c:	fb94 f4f6 	sdiv	r4, r4, r6
 800f350:	18a6      	adds	r6, r4, r2
 800f352:	191f      	adds	r7, r3, r4
 800f354:	1b12      	subs	r2, r2, r4
 800f356:	1b1b      	subs	r3, r3, r4
 800f358:	e9cd 6700 	strd	r6, r7, [sp]
 800f35c:	f7ff ffd0 	bl	800f300 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 800f360:	4628      	mov	r0, r5
 800f362:	b003      	add	sp, #12
 800f364:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f366 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 800f366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f36a:	6943      	ldr	r3, [r0, #20]
 800f36c:	b087      	sub	sp, #28
 800f36e:	4606      	mov	r6, r0
 800f370:	460d      	mov	r5, r1
 800f372:	2b00      	cmp	r3, #0
 800f374:	d072      	beq.n	800f45c <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 800f376:	695c      	ldr	r4, [r3, #20]
 800f378:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	4620      	mov	r0, r4
 800f380:	017f      	lsls	r7, r7, #5
 800f382:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f386:	4798      	blx	r3
 800f388:	6823      	ldr	r3, [r4, #0]
 800f38a:	4680      	mov	r8, r0
 800f38c:	4629      	mov	r1, r5
 800f38e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f392:	4620      	mov	r0, r4
 800f394:	4798      	blx	r3
 800f396:	9700      	str	r7, [sp, #0]
 800f398:	4603      	mov	r3, r0
 800f39a:	4642      	mov	r2, r8
 800f39c:	4631      	mov	r1, r6
 800f39e:	a802      	add	r0, sp, #8
 800f3a0:	f7ff ffcf 	bl	800f342 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f3a4:	2d00      	cmp	r5, #0
 800f3a6:	dd1b      	ble.n	800f3e0 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 800f3a8:	f105 38ff 	add.w	r8, r5, #4294967295
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	fa0f f888 	sxth.w	r8, r8
 800f3b4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f3b8:	4641      	mov	r1, r8
 800f3ba:	4798      	blx	r3
 800f3bc:	6823      	ldr	r3, [r4, #0]
 800f3be:	4681      	mov	r9, r0
 800f3c0:	4641      	mov	r1, r8
 800f3c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	4798      	blx	r3
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	9700      	str	r7, [sp, #0]
 800f3d0:	a804      	add	r0, sp, #16
 800f3d2:	464a      	mov	r2, r9
 800f3d4:	f7ff ffb5 	bl	800f342 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f3d8:	a904      	add	r1, sp, #16
 800f3da:	a802      	add	r0, sp, #8
 800f3dc:	f7ff fd59 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f3e0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	429d      	cmp	r5, r3
 800f3e8:	da19      	bge.n	800f41e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 800f3ea:	3501      	adds	r5, #1
 800f3ec:	6823      	ldr	r3, [r4, #0]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	b22d      	sxth	r5, r5
 800f3f2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f3f6:	4629      	mov	r1, r5
 800f3f8:	4798      	blx	r3
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	4680      	mov	r8, r0
 800f3fe:	4629      	mov	r1, r5
 800f400:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f404:	4620      	mov	r0, r4
 800f406:	4798      	blx	r3
 800f408:	4631      	mov	r1, r6
 800f40a:	4603      	mov	r3, r0
 800f40c:	9700      	str	r7, [sp, #0]
 800f40e:	a804      	add	r0, sp, #16
 800f410:	4642      	mov	r2, r8
 800f412:	f7ff ff96 	bl	800f342 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f416:	a904      	add	r1, sp, #16
 800f418:	a802      	add	r0, sp, #8
 800f41a:	f7ff fd3a 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f41e:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800f422:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800f426:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800f42a:	18ca      	adds	r2, r1, r3
 800f42c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f430:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f434:	a904      	add	r1, sp, #16
 800f436:	1a9b      	subs	r3, r3, r2
 800f438:	2200      	movs	r2, #0
 800f43a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f43e:	a802      	add	r0, sp, #8
 800f440:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f444:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f448:	f7fd ff94 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	a902      	add	r1, sp, #8
 800f450:	4630      	mov	r0, r6
 800f452:	691b      	ldr	r3, [r3, #16]
 800f454:	4798      	blx	r3
 800f456:	b007      	add	sp, #28
 800f458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	deff      	udf	#255	; 0xff

0800f460 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 800f460:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	da05      	bge.n	800f474 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 800f468:	b29b      	uxth	r3, r3
 800f46a:	880a      	ldrh	r2, [r1, #0]
 800f46c:	441a      	add	r2, r3
 800f46e:	425b      	negs	r3, r3
 800f470:	800a      	strh	r2, [r1, #0]
 800f472:	808b      	strh	r3, [r1, #4]
 800f474:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	da05      	bge.n	800f488 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 800f47c:	b29b      	uxth	r3, r3
 800f47e:	884a      	ldrh	r2, [r1, #2]
 800f480:	441a      	add	r2, r3
 800f482:	425b      	negs	r3, r3
 800f484:	804a      	strh	r2, [r1, #2]
 800f486:	80cb      	strh	r3, [r1, #6]
 800f488:	4770      	bx	lr

0800f48a <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 800f48a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f48c:	4604      	mov	r4, r0
 800f48e:	460d      	mov	r5, r1
 800f490:	6801      	ldr	r1, [r0, #0]
 800f492:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800f496:	9001      	str	r0, [sp, #4]
 800f498:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800f49c:	9000      	str	r0, [sp, #0]
 800f49e:	a802      	add	r0, sp, #8
 800f4a0:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	47b0      	blx	r6
 800f4a8:	a902      	add	r1, sp, #8
 800f4aa:	4620      	mov	r0, r4
 800f4ac:	f7ff ffd8 	bl	800f460 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 800f4b0:	a802      	add	r0, sp, #8
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	f7fd ff5e 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800f4b8:	a802      	add	r0, sp, #8
 800f4ba:	f7fd ff9e 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 800f4be:	b968      	cbnz	r0, 800f4dc <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 800f4c0:	6823      	ldr	r3, [r4, #0]
 800f4c2:	a902      	add	r1, sp, #8
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c8:	4798      	blx	r3
 800f4ca:	f7fe fa23 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800f4ce:	6803      	ldr	r3, [r0, #0]
 800f4d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f4d2:	a902      	add	r1, sp, #8
 800f4d4:	6a1d      	ldr	r5, [r3, #32]
 800f4d6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f4da:	47a8      	blx	r5
 800f4dc:	b004      	add	sp, #16
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 800f4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e4:	b08b      	sub	sp, #44	; 0x2c
 800f4e6:	461e      	mov	r6, r3
 800f4e8:	460f      	mov	r7, r1
 800f4ea:	4615      	mov	r5, r2
 800f4ec:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800f4f0:	429e      	cmp	r6, r3
 800f4f2:	9304      	str	r3, [sp, #16]
 800f4f4:	d074      	beq.n	800f5e0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 800f4f6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4610      	mov	r0, r2
 800f4fe:	4634      	mov	r4, r6
 800f500:	015b      	lsls	r3, r3, #5
 800f502:	9303      	str	r3, [sp, #12]
 800f504:	6813      	ldr	r3, [r2, #0]
 800f506:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f50a:	4798      	blx	r3
 800f50c:	ab0a      	add	r3, sp, #40	; 0x28
 800f50e:	f843 0d10 	str.w	r0, [r3, #-16]!
 800f512:	4618      	mov	r0, r3
 800f514:	f7f4 feeb 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f518:	682b      	ldr	r3, [r5, #0]
 800f51a:	4631      	mov	r1, r6
 800f51c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f520:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f524:	4628      	mov	r0, r5
 800f526:	4798      	blx	r3
 800f528:	ab0a      	add	r3, sp, #40	; 0x28
 800f52a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800f52e:	4618      	mov	r0, r3
 800f530:	f7f4 fedd 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f534:	4641      	mov	r1, r8
 800f536:	ea4f 1940 	mov.w	r9, r0, lsl #5
 800f53a:	4638      	mov	r0, r7
 800f53c:	464a      	mov	r2, r9
 800f53e:	f00e fd79 	bl	801e034 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f542:	2301      	movs	r3, #1
 800f544:	9300      	str	r3, [sp, #0]
 800f546:	4628      	mov	r0, r5
 800f548:	9b00      	ldr	r3, [sp, #0]
 800f54a:	441c      	add	r4, r3
 800f54c:	682b      	ldr	r3, [r5, #0]
 800f54e:	b224      	sxth	r4, r4
 800f550:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f554:	4621      	mov	r1, r4
 800f556:	4798      	blx	r3
 800f558:	9008      	str	r0, [sp, #32]
 800f55a:	a808      	add	r0, sp, #32
 800f55c:	f7f4 fec7 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f560:	4621      	mov	r1, r4
 800f562:	0143      	lsls	r3, r0, #5
 800f564:	4628      	mov	r0, r5
 800f566:	9301      	str	r3, [sp, #4]
 800f568:	682b      	ldr	r3, [r5, #0]
 800f56a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f56e:	4798      	blx	r3
 800f570:	9009      	str	r0, [sp, #36]	; 0x24
 800f572:	a809      	add	r0, sp, #36	; 0x24
 800f574:	f7f4 febb 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f578:	0143      	lsls	r3, r0, #5
 800f57a:	9302      	str	r3, [sp, #8]
 800f57c:	9b01      	ldr	r3, [sp, #4]
 800f57e:	eba3 0b08 	sub.w	fp, r3, r8
 800f582:	9b02      	ldr	r3, [sp, #8]
 800f584:	eba3 0a09 	sub.w	sl, r3, r9
 800f588:	4658      	mov	r0, fp
 800f58a:	4651      	mov	r1, sl
 800f58c:	f7ff fe8b 	bl	800f2a6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800f590:	b320      	cbz	r0, 800f5dc <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 800f592:	4602      	mov	r2, r0
 800f594:	4651      	mov	r1, sl
 800f596:	9005      	str	r0, [sp, #20]
 800f598:	9803      	ldr	r0, [sp, #12]
 800f59a:	f004 fa89 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
 800f59e:	2302      	movs	r3, #2
 800f5a0:	4659      	mov	r1, fp
 800f5a2:	fb90 faf3 	sdiv	sl, r0, r3
 800f5a6:	9b05      	ldr	r3, [sp, #20]
 800f5a8:	9803      	ldr	r0, [sp, #12]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	f004 fa80 	bl	8013ab0 <_ZN8touchgfx6muldivElll>
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	eba8 010a 	sub.w	r1, r8, sl
 800f5b6:	fb90 fbf3 	sdiv	fp, r0, r3
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	eb0b 0209 	add.w	r2, fp, r9
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	4798      	blx	r3
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	9a02      	ldr	r2, [sp, #8]
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	9901      	ldr	r1, [sp, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	445a      	add	r2, fp
 800f5d2:	eba1 010a 	sub.w	r1, r1, sl
 800f5d6:	4798      	blx	r3
 800f5d8:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 800f5dc:	42a6      	cmp	r6, r4
 800f5de:	db02      	blt.n	800f5e6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 800f5e0:	b00b      	add	sp, #44	; 0x2c
 800f5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e6:	9b00      	ldr	r3, [sp, #0]
 800f5e8:	9a04      	ldr	r2, [sp, #16]
 800f5ea:	42a2      	cmp	r2, r4
 800f5ec:	bf08      	it	eq
 800f5ee:	f04f 33ff 	moveq.w	r3, #4294967295
 800f5f2:	e7a7      	b.n	800f544 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>

0800f5f4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 800f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f8:	6943      	ldr	r3, [r0, #20]
 800f5fa:	b0a2      	sub	sp, #136	; 0x88
 800f5fc:	4606      	mov	r6, r0
 800f5fe:	460f      	mov	r7, r1
 800f600:	2b00      	cmp	r3, #0
 800f602:	d06c      	beq.n	800f6de <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 800f604:	695c      	ldr	r4, [r3, #20]
 800f606:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	dc04      	bgt.n	800f618 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 800f60e:	2401      	movs	r4, #1
 800f610:	4620      	mov	r0, r4
 800f612:	b022      	add	sp, #136	; 0x88
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f61c:	ad22      	add	r5, sp, #136	; 0x88
 800f61e:	011b      	lsls	r3, r3, #4
 800f620:	f845 3d70 	str.w	r3, [r5, #-112]!
 800f624:	4628      	mov	r0, r5
 800f626:	f7ff fc79 	bl	800ef1c <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f62a:	8839      	ldrh	r1, [r7, #0]
 800f62c:	88ba      	ldrh	r2, [r7, #4]
 800f62e:	b280      	uxth	r0, r0
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	440a      	add	r2, r1
 800f634:	1a09      	subs	r1, r1, r0
 800f636:	4402      	add	r2, r0
 800f638:	f10d 000e 	add.w	r0, sp, #14
 800f63c:	b209      	sxth	r1, r1
 800f63e:	9000      	str	r0, [sp, #0]
 800f640:	b212      	sxth	r2, r2
 800f642:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 800f646:	4620      	mov	r0, r4
 800f648:	ab03      	add	r3, sp, #12
 800f64a:	47c0      	blx	r8
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d0de      	beq.n	800f60e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 800f650:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800f654:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800f658:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800f65c:	18ca      	adds	r2, r1, r3
 800f65e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f662:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f666:	4639      	mov	r1, r7
 800f668:	1a9b      	subs	r3, r3, r2
 800f66a:	2200      	movs	r2, #0
 800f66c:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f670:	a804      	add	r0, sp, #16
 800f672:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f676:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f67a:	f7fd fe7b 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800f67e:	aa04      	add	r2, sp, #16
 800f680:	4631      	mov	r1, r6
 800f682:	4628      	mov	r0, r5
 800f684:	f00e fb5c 	bl	801dd40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800f688:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 800f68c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f690:	2f00      	cmp	r7, #0
 800f692:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 800f696:	dd03      	ble.n	800f6a0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800f698:	42bb      	cmp	r3, r7
 800f69a:	da01      	bge.n	800f6a0 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800f69c:	42ba      	cmp	r2, r7
 800f69e:	da11      	bge.n	800f6c4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 800f6a0:	9200      	str	r2, [sp, #0]
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	4630      	mov	r0, r6
 800f6a8:	f7ff ff1a 	bl	800f4e0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800f6ac:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	f00e fc01 	bl	801deb8 <_ZN8touchgfx6Canvas6renderEh>
 800f6b6:	4b0b      	ldr	r3, [pc, #44]	; (800f6e4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	a80e      	add	r0, sp, #56	; 0x38
 800f6bc:	9306      	str	r3, [sp, #24]
 800f6be:	f000 fce5 	bl	801008c <_ZN8touchgfx7OutlineD1Ev>
 800f6c2:	e7a5      	b.n	800f610 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 800f6c4:	1e7a      	subs	r2, r7, #1
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	b212      	sxth	r2, r2
 800f6cc:	9200      	str	r2, [sp, #0]
 800f6ce:	4622      	mov	r2, r4
 800f6d0:	f7ff ff06 	bl	800f4e0 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800f6d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f6d8:	9300      	str	r3, [sp, #0]
 800f6da:	463b      	mov	r3, r7
 800f6dc:	e7e1      	b.n	800f6a2 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 800f6de:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 800f6e2:	deff      	udf	#255	; 0xff
 800f6e4:	08023478 	.word	0x08023478

0800f6e8 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 800f6e8:	4770      	bx	lr

0800f6ea <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 800f6ea:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f6ec:	b118      	cbz	r0, 800f6f6 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800f6ee:	6803      	ldr	r3, [r0, #0]
 800f6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f6f4:	4718      	bx	r3
 800f6f6:	4770      	bx	lr

0800f6f8 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800f6f8:	680b      	ldr	r3, [r1, #0]
 800f6fa:	4608      	mov	r0, r1
 800f6fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f700:	4718      	bx	r3

0800f702 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800f702:	680b      	ldr	r3, [r1, #0]
 800f704:	4608      	mov	r0, r1
 800f706:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f70a:	4718      	bx	r3

0800f70c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 800f70c:	4a38      	ldr	r2, [pc, #224]	; (800f7f0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 800f70e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f712:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800f714:	b087      	sub	sp, #28
 800f716:	8812      	ldrh	r2, [r2, #0]
 800f718:	4604      	mov	r4, r0
 800f71a:	4689      	mov	r9, r1
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d937      	bls.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f720:	4a34      	ldr	r2, [pc, #208]	; (800f7f4 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 800f722:	6812      	ldr	r2, [r2, #0]
 800f724:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f728:	4b33      	ldr	r3, [pc, #204]	; (800f7f8 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800f730:	f1b8 0f00 	cmp.w	r8, #0
 800f734:	d02c      	beq.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f736:	6803      	ldr	r3, [r0, #0]
 800f738:	6945      	ldr	r5, [r0, #20]
 800f73a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	d052      	beq.n	800f7e6 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 800f740:	696f      	ldr	r7, [r5, #20]
 800f742:	4798      	blx	r3
 800f744:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 800f748:	fb15 f000 	smulbb	r0, r5, r0
 800f74c:	b280      	uxth	r0, r0
 800f74e:	1c45      	adds	r5, r0, #1
 800f750:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800f754:	122d      	asrs	r5, r5, #8
 800f756:	d01b      	beq.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f758:	6823      	ldr	r3, [r4, #0]
 800f75a:	4639      	mov	r1, r7
 800f75c:	4620      	mov	r0, r4
 800f75e:	b2ed      	uxtb	r5, r5
 800f760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f764:	4798      	blx	r3
 800f766:	6823      	ldr	r3, [r4, #0]
 800f768:	4606      	mov	r6, r0
 800f76a:	4639      	mov	r1, r7
 800f76c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f770:	4620      	mov	r0, r4
 800f772:	4798      	blx	r3
 800f774:	4683      	mov	fp, r0
 800f776:	b970      	cbnz	r0, 800f796 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800f778:	b96e      	cbnz	r6, 800f796 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	4642      	mov	r2, r8
 800f77e:	9600      	str	r6, [sp, #0]
 800f780:	4649      	mov	r1, r9
 800f782:	4620      	mov	r0, r4
 800f784:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800f788:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800f78c:	463b      	mov	r3, r7
 800f78e:	47a8      	blx	r5
 800f790:	b007      	add	sp, #28
 800f792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f796:	2e00      	cmp	r6, #0
 800f798:	ddfa      	ble.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	4639      	mov	r1, r7
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f7a4:	4798      	blx	r3
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4682      	mov	sl, r0
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	4798      	blx	r3
 800f7b4:	4582      	cmp	sl, r0
 800f7b6:	bfde      	ittt	le
 800f7b8:	4603      	movle	r3, r0
 800f7ba:	4650      	movle	r0, sl
 800f7bc:	469a      	movle	sl, r3
 800f7be:	ebaa 0300 	sub.w	r3, sl, r0
 800f7c2:	fb93 f3f6 	sdiv	r3, r3, r6
 800f7c6:	2b64      	cmp	r3, #100	; 0x64
 800f7c8:	dce2      	bgt.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f7ca:	6823      	ldr	r3, [r4, #0]
 800f7cc:	4642      	mov	r2, r8
 800f7ce:	9000      	str	r0, [sp, #0]
 800f7d0:	4649      	mov	r1, r9
 800f7d2:	4620      	mov	r0, r4
 800f7d4:	e9cd b503 	strd	fp, r5, [sp, #12]
 800f7d8:	e9cd a601 	strd	sl, r6, [sp, #4]
 800f7dc:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800f7e0:	463b      	mov	r3, r7
 800f7e2:	47a8      	blx	r5
 800f7e4:	e7d4      	b.n	800f790 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 800f7e6:	4798      	blx	r3
 800f7e8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f7ec:	deff      	udf	#255	; 0xff
 800f7ee:	bf00      	nop
 800f7f0:	2400f5ec 	.word	0x2400f5ec
 800f7f4:	2400f5e8 	.word	0x2400f5e8
 800f7f8:	2400f5f0 	.word	0x2400f5f0

0800f7fc <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800f7fc:	4770      	bx	lr

0800f7fe <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800f7fe:	b538      	push	{r3, r4, r5, lr}
 800f800:	680a      	ldr	r2, [r1, #0]
 800f802:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800f806:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800f80a:	4608      	mov	r0, r1
 800f80c:	4790      	blx	r2
 800f80e:	4629      	mov	r1, r5
 800f810:	4602      	mov	r2, r0
 800f812:	4620      	mov	r0, r4
 800f814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f818:	f7ff ba92 	b.w	800ed40 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800f81c <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	4604      	mov	r4, r0
 800f820:	214c      	movs	r1, #76	; 0x4c
 800f822:	f00e fcc8 	bl	801e1b6 <_ZdlPvj>
 800f826:	4620      	mov	r0, r4
 800f828:	bd10      	pop	{r4, pc}

0800f82a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800f82a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f82e:	b08d      	sub	sp, #52	; 0x34
 800f830:	4606      	mov	r6, r0
 800f832:	9309      	str	r3, [sp, #36]	; 0x24
 800f834:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800f838:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 800f83c:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800f840:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 800f844:	930a      	str	r3, [sp, #40]	; 0x28
 800f846:	f1b9 0f00 	cmp.w	r9, #0
 800f84a:	d117      	bne.n	800f87c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 800f84c:	2f00      	cmp	r7, #0
 800f84e:	dc7c      	bgt.n	800f94a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 800f850:	f1b8 0f00 	cmp.w	r8, #0
 800f854:	da01      	bge.n	800f85a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800f856:	2f00      	cmp	r7, #0
 800f858:	d17a      	bne.n	800f950 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f85c:	4630      	mov	r0, r6
 800f85e:	6832      	ldr	r2, [r6, #0]
 800f860:	9318      	str	r3, [sp, #96]	; 0x60
 800f862:	2300      	movs	r3, #0
 800f864:	9907      	ldr	r1, [sp, #28]
 800f866:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800f86a:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 800f86e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f872:	46a4      	mov	ip, r4
 800f874:	b00d      	add	sp, #52	; 0x34
 800f876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87a:	4760      	bx	ip
 800f87c:	fb97 f4f9 	sdiv	r4, r7, r9
 800f880:	1e63      	subs	r3, r4, #1
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	f1ba 0f00 	cmp.w	sl, #0
 800f888:	d122      	bne.n	800f8d0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 800f88a:	fb03 f509 	mul.w	r5, r3, r9
 800f88e:	fb98 faf9 	sdiv	sl, r8, r9
 800f892:	f10a 0a02 	add.w	sl, sl, #2
 800f896:	9b05      	ldr	r3, [sp, #20]
 800f898:	459a      	cmp	sl, r3
 800f89a:	d059      	beq.n	800f950 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f89c:	42af      	cmp	r7, r5
 800f89e:	dc5a      	bgt.n	800f956 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 800f8a0:	45a8      	cmp	r8, r5
 800f8a2:	da01      	bge.n	800f8a8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 800f8a4:	42af      	cmp	r7, r5
 800f8a6:	db0e      	blt.n	800f8c6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800f8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	9905      	ldr	r1, [sp, #20]
 800f8ae:	9302      	str	r3, [sp, #8]
 800f8b0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800f8b2:	6832      	ldr	r2, [r6, #0]
 800f8b4:	434b      	muls	r3, r1
 800f8b6:	9907      	ldr	r1, [sp, #28]
 800f8b8:	e9cd 5300 	strd	r5, r3, [sp]
 800f8bc:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 800f8c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f8c4:	47d8      	blx	fp
 800f8c6:	9b05      	ldr	r3, [sp, #20]
 800f8c8:	444d      	add	r5, r9
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	9305      	str	r3, [sp, #20]
 800f8ce:	e7e2      	b.n	800f896 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 800f8d0:	fb97 f3fa 	sdiv	r3, r7, sl
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	9306      	str	r3, [sp, #24]
 800f8d8:	9a06      	ldr	r2, [sp, #24]
 800f8da:	fb98 f3fa 	sdiv	r3, r8, sl
 800f8de:	fb02 fb0a 	mul.w	fp, r2, sl
 800f8e2:	9a05      	ldr	r2, [sp, #20]
 800f8e4:	3302      	adds	r3, #2
 800f8e6:	fb02 f509 	mul.w	r5, r2, r9
 800f8ea:	930b      	str	r3, [sp, #44]	; 0x2c
 800f8ec:	45ab      	cmp	fp, r5
 800f8ee:	dd1d      	ble.n	800f92c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800f8f0:	42af      	cmp	r7, r5
 800f8f2:	dc08      	bgt.n	800f906 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 800f8f4:	45a8      	cmp	r8, r5
 800f8f6:	da08      	bge.n	800f90a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800f8f8:	42af      	cmp	r7, r5
 800f8fa:	da06      	bge.n	800f90a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800f8fc:	9b05      	ldr	r3, [sp, #20]
 800f8fe:	444d      	add	r5, r9
 800f900:	3301      	adds	r3, #1
 800f902:	9305      	str	r3, [sp, #20]
 800f904:	e7f2      	b.n	800f8ec <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800f906:	45a8      	cmp	r8, r5
 800f908:	dcf8      	bgt.n	800f8fc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800f90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f90c:	4630      	mov	r0, r6
 800f90e:	9905      	ldr	r1, [sp, #20]
 800f910:	9302      	str	r3, [sp, #8]
 800f912:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800f914:	6832      	ldr	r2, [r6, #0]
 800f916:	434b      	muls	r3, r1
 800f918:	9907      	ldr	r1, [sp, #28]
 800f91a:	e9cd 5300 	strd	r5, r3, [sp]
 800f91e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f922:	461c      	mov	r4, r3
 800f924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f928:	47a0      	blx	r4
 800f92a:	e7e7      	b.n	800f8fc <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800f92c:	45ab      	cmp	fp, r5
 800f92e:	db04      	blt.n	800f93a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 800f930:	9b05      	ldr	r3, [sp, #20]
 800f932:	444d      	add	r5, r9
 800f934:	3301      	adds	r3, #1
 800f936:	9305      	str	r3, [sp, #20]
 800f938:	e7f8      	b.n	800f92c <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800f93a:	9b06      	ldr	r3, [sp, #24]
 800f93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f93e:	3301      	adds	r3, #1
 800f940:	4293      	cmp	r3, r2
 800f942:	9306      	str	r3, [sp, #24]
 800f944:	d004      	beq.n	800f950 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800f946:	44d3      	add	fp, sl
 800f948:	e7d0      	b.n	800f8ec <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800f94a:	f1b8 0f00 	cmp.w	r8, #0
 800f94e:	dd84      	ble.n	800f85a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800f950:	b00d      	add	sp, #52	; 0x34
 800f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f956:	45a8      	cmp	r8, r5
 800f958:	dcb5      	bgt.n	800f8c6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800f95a:	e7a5      	b.n	800f8a8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0800f95c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 800f95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f960:	f1b3 0900 	subs.w	r9, r3, #0
 800f964:	460d      	mov	r5, r1
 800f966:	4690      	mov	r8, r2
 800f968:	9f08      	ldr	r7, [sp, #32]
 800f96a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800f96e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f970:	da18      	bge.n	800f9a4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800f972:	2a01      	cmp	r2, #1
 800f974:	dd16      	ble.n	800f9a4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800f976:	232d      	movs	r3, #45	; 0x2d
 800f978:	f1c9 0900 	rsb	r9, r9, #0
 800f97c:	2001      	movs	r0, #1
 800f97e:	800b      	strh	r3, [r1, #0]
 800f980:	2f00      	cmp	r7, #0
 800f982:	d111      	bne.n	800f9a8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 800f984:	2302      	movs	r3, #2
 800f986:	eba8 0100 	sub.w	r1, r8, r0
 800f98a:	4a26      	ldr	r2, [pc, #152]	; (800fa24 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800f98c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800f990:	b289      	uxth	r1, r1
 800f992:	fb96 f3f3 	sdiv	r3, r6, r3
 800f996:	444b      	add	r3, r9
 800f998:	fb93 f3f6 	sdiv	r3, r3, r6
 800f99c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a0:	f005 bea2 	b.w	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f9a4:	2000      	movs	r0, #0
 800f9a6:	e7eb      	b.n	800f980 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 800f9a8:	dd39      	ble.n	800fa1e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800f9aa:	eba8 0100 	sub.w	r1, r8, r0
 800f9ae:	4a1d      	ldr	r2, [pc, #116]	; (800fa24 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800f9b0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800f9b4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9b8:	b289      	uxth	r1, r1
 800f9ba:	fb99 f4f6 	sdiv	r4, r9, r6
 800f9be:	4623      	mov	r3, r4
 800f9c0:	f005 fe92 	bl	80156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800f9c4:	4628      	mov	r0, r5
 800f9c6:	f005 fb1d 	bl	8015004 <_ZN8touchgfx7Unicode6strlenEPKt>
 800f9ca:	4580      	cmp	r8, r0
 800f9cc:	dd27      	ble.n	800fa1e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800f9ce:	f04f 0e02 	mov.w	lr, #2
 800f9d2:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 800f9d6:	fb06 9314 	mls	r3, r6, r4, r9
 800f9da:	3001      	adds	r0, #1
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f04f 090a 	mov.w	r9, #10
 800f9e2:	f107 3aff 	add.w	sl, r7, #4294967295
 800f9e6:	fb96 fefe 	sdiv	lr, r6, lr
 800f9ea:	4580      	cmp	r8, r0
 800f9ec:	4684      	mov	ip, r0
 800f9ee:	dd13      	ble.n	800fa18 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 800f9f0:	fb09 f303 	mul.w	r3, r9, r3
 800f9f4:	4592      	cmp	sl, r2
 800f9f6:	f102 0201 	add.w	r2, r2, #1
 800f9fa:	f100 0c01 	add.w	ip, r0, #1
 800f9fe:	bf08      	it	eq
 800fa00:	4473      	addeq	r3, lr
 800fa02:	4297      	cmp	r7, r2
 800fa04:	fb93 f4f6 	sdiv	r4, r3, r6
 800fa08:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fa0c:	fb06 3314 	mls	r3, r6, r4, r3
 800fa10:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 800fa14:	4660      	mov	r0, ip
 800fa16:	d1e8      	bne.n	800f9ea <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 800fa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa22:	bf00      	nop
 800fa24:	080228c0 	.word	0x080228c0

0800fa28 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	b09b      	sub	sp, #108	; 0x6c
 800fa2e:	4698      	mov	r8, r3
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4604      	mov	r4, r0
 800fa34:	ae1a      	add	r6, sp, #104	; 0x68
 800fa36:	9104      	str	r1, [sp, #16]
 800fa38:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fa3c:	4640      	mov	r0, r8
 800fa3e:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fa40:	4617      	mov	r7, r2
 800fa42:	4798      	blx	r3
 800fa44:	f846 0d28 	str.w	r0, [r6, #-40]!
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7f4 fc50 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fa4e:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 800fa52:	1ac0      	subs	r0, r0, r3
 800fa54:	b200      	sxth	r0, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	f2c0 80ba 	blt.w	800fbd0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800fa5c:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 800fa60:	441a      	add	r2, r3
 800fa62:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 800fa66:	1a9b      	subs	r3, r3, r2
 800fa68:	b21b      	sxth	r3, r3
 800fa6a:	4298      	cmp	r0, r3
 800fa6c:	f280 80b0 	bge.w	800fbd0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800fa70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa72:	2214      	movs	r2, #20
 800fa74:	4631      	mov	r1, r6
 800fa76:	4620      	mov	r0, r4
 800fa78:	9302      	str	r3, [sp, #8]
 800fa7a:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800fa7e:	9301      	str	r3, [sp, #4]
 800fa80:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800fa84:	9300      	str	r3, [sp, #0]
 800fa86:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fa88:	f7ff ff68 	bl	800f95c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800fa8c:	4b55      	ldr	r3, [pc, #340]	; (800fbe4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 800fa8e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800fa90:	6818      	ldr	r0, [r3, #0]
 800fa92:	f7f3 fb05 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fa96:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800fa9a:	4681      	mov	r9, r0
 800fa9c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	f040 8098 	bne.w	800fbd6 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 800faa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa8:	4638      	mov	r0, r7
 800faaa:	4798      	blx	r3
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	4605      	mov	r5, r0
 800fab0:	4632      	mov	r2, r6
 800fab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fab4:	4649      	mov	r1, r9
 800fab6:	4638      	mov	r0, r7
 800fab8:	4798      	blx	r3
 800faba:	fb15 f500 	smulbb	r5, r5, r0
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	4632      	mov	r2, r6
 800fac2:	b2ad      	uxth	r5, r5
 800fac4:	4649      	mov	r1, r9
 800fac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fac8:	4638      	mov	r0, r7
 800faca:	4798      	blx	r3
 800facc:	4405      	add	r5, r0
 800face:	b22d      	sxth	r5, r5
 800fad0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800fad4:	2002      	movs	r0, #2
 800fad6:	f8d8 2000 	ldr.w	r2, [r8]
 800fada:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800fade:	2b01      	cmp	r3, #1
 800fae0:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 800fae4:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 800fae8:	bf88      	it	hi
 800faea:	f105 0b01 	addhi.w	fp, r5, #1
 800faee:	9305      	str	r3, [sp, #20]
 800faf0:	9924      	ldr	r1, [sp, #144]	; 0x90
 800faf2:	bf8c      	ite	hi
 800faf4:	fb9b fbf0 	sdivhi	fp, fp, r0
 800faf8:	fb95 fbf0 	sdivls	fp, r5, r0
 800fafc:	4640      	mov	r0, r8
 800fafe:	bf88      	it	hi
 800fb00:	fa0f fb8b 	sxthhi.w	fp, fp
 800fb04:	4790      	blx	r2
 800fb06:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 800fb0a:	4650      	mov	r0, sl
 800fb0c:	f04f 0800 	mov.w	r8, #0
 800fb10:	f7f4 fbed 	bl	80042ee <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fb14:	9b05      	ldr	r3, [sp, #20]
 800fb16:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fb1a:	4418      	add	r0, r3
 800fb1c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800fb20:	ad07      	add	r5, sp, #28
 800fb22:	f8ad 801c 	strh.w	r8, [sp, #28]
 800fb26:	eba0 0b0b 	sub.w	fp, r0, fp
 800fb2a:	f8ad 1020 	strh.w	r1, [sp, #32]
 800fb2e:	f8ad b01e 	strh.w	fp, [sp, #30]
 800fb32:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800fb36:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb3a:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fb3e:	9904      	ldr	r1, [sp, #16]
 800fb40:	4658      	mov	r0, fp
 800fb42:	f7fd fc17 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 800fb46:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800fb4a:	4543      	cmp	r3, r8
 800fb4c:	dd40      	ble.n	800fbd0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800fb4e:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800fb52:	4543      	cmp	r3, r8
 800fb54:	dd3c      	ble.n	800fbd0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 800fb56:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800fb60:	1a5b      	subs	r3, r3, r1
 800fb62:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 800fb66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fb6a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800fb6e:	1a5b      	subs	r3, r3, r1
 800fb70:	4629      	mov	r1, r5
 800fb72:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fb76:	6823      	ldr	r3, [r4, #0]
 800fb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7a:	4798      	blx	r3
 800fb7c:	4b1a      	ldr	r3, [pc, #104]	; (800fbe8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 800fb7e:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800fb86:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800fb8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fb8c:	785b      	ldrb	r3, [r3, #1]
 800fb8e:	910d      	str	r1, [sp, #52]	; 0x34
 800fb90:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 800fb94:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800fb98:	970b      	str	r7, [sp, #44]	; 0x2c
 800fb9a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800fb9e:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800fba2:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 800fba6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800fbaa:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 800fbae:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 800fbb2:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 800fbb6:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 800fbba:	f7fd feab 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 800fbbe:	465b      	mov	r3, fp
 800fbc0:	e9cd 6802 	strd	r6, r8, [sp, #8]
 800fbc4:	e9cd a900 	strd	sl, r9, [sp]
 800fbc8:	e895 0006 	ldmia.w	r5, {r1, r2}
 800fbcc:	f7f3 fa1a 	bl	8003004 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fbd0:	b01b      	add	sp, #108	; 0x6c
 800fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	4632      	mov	r2, r6
 800fbdc:	4638      	mov	r0, r7
 800fbde:	4798      	blx	r3
 800fbe0:	b205      	sxth	r5, r0
 800fbe2:	e775      	b.n	800fad0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 800fbe4:	2400f5f4 	.word	0x2400f5f4
 800fbe8:	2400f5e8 	.word	0x2400f5e8

0800fbec <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800fbec:	4b07      	ldr	r3, [pc, #28]	; (800fc0c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800fbee:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	bf81      	itttt	hi
 800fbf6:	4b06      	ldrhi	r3, [pc, #24]	; (800fc10 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800fbf8:	681b      	ldrhi	r3, [r3, #0]
 800fbfa:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800fbfe:	7858      	ldrbhi	r0, [r3, #1]
 800fc00:	bf8c      	ite	hi
 800fc02:	f000 0003 	andhi.w	r0, r0, #3
 800fc06:	2000      	movls	r0, #0
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	2400f5ec 	.word	0x2400f5ec
 800fc10:	2400f5e8 	.word	0x2400f5e8

0800fc14 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800fc14:	4b11      	ldr	r3, [pc, #68]	; (800fc5c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800fc16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	428b      	cmp	r3, r1
 800fc22:	d918      	bls.n	800fc56 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800fc24:	6803      	ldr	r3, [r0, #0]
 800fc26:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800fc28:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800fc2a:	6818      	ldr	r0, [r3, #0]
 800fc2c:	f7f3 fa38 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fc30:	6823      	ldr	r3, [r4, #0]
 800fc32:	4606      	mov	r6, r0
 800fc34:	4620      	mov	r0, r4
 800fc36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc38:	4798      	blx	r3
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	4607      	mov	r7, r0
 800fc3e:	4620      	mov	r0, r4
 800fc40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc44:	4798      	blx	r3
 800fc46:	463a      	mov	r2, r7
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4631      	mov	r1, r6
 800fc4c:	4620      	mov	r0, r4
 800fc4e:	46ac      	mov	ip, r5
 800fc50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc54:	4760      	bx	ip
 800fc56:	2000      	movs	r0, #0
 800fc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc5c:	2400f5ec 	.word	0x2400f5ec
 800fc60:	2400f5f4 	.word	0x2400f5f4

0800fc64 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800fc64:	4b18      	ldr	r3, [pc, #96]	; (800fcc8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800fc66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc6a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	428b      	cmp	r3, r1
 800fc72:	d926      	bls.n	800fcc2 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800fc74:	4b15      	ldr	r3, [pc, #84]	; (800fccc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800fc7c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800fc80:	4b13      	ldr	r3, [pc, #76]	; (800fcd0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800fc82:	7855      	ldrb	r5, [r2, #1]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800fc8a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800fc8e:	6833      	ldr	r3, [r6, #0]
 800fc90:	69df      	ldr	r7, [r3, #28]
 800fc92:	4b10      	ldr	r3, [pc, #64]	; (800fcd4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800fc94:	6818      	ldr	r0, [r3, #0]
 800fc96:	f7f3 fa03 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 800fc9a:	6823      	ldr	r3, [r4, #0]
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4620      	mov	r0, r4
 800fca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fca2:	4798      	blx	r3
 800fca4:	6823      	ldr	r3, [r4, #0]
 800fca6:	4681      	mov	r9, r0
 800fca8:	4620      	mov	r0, r4
 800fcaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcae:	4798      	blx	r3
 800fcb0:	464b      	mov	r3, r9
 800fcb2:	9000      	str	r0, [sp, #0]
 800fcb4:	4642      	mov	r2, r8
 800fcb6:	4629      	mov	r1, r5
 800fcb8:	4630      	mov	r0, r6
 800fcba:	47b8      	blx	r7
 800fcbc:	b003      	add	sp, #12
 800fcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	e7fa      	b.n	800fcbc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800fcc6:	bf00      	nop
 800fcc8:	2400f5ec 	.word	0x2400f5ec
 800fccc:	2400f5e8 	.word	0x2400f5e8
 800fcd0:	2400f5f0 	.word	0x2400f5f0
 800fcd4:	2400f5f4 	.word	0x2400f5f4

0800fcd8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800fcd8:	b40e      	push	{r1, r2, r3}
 800fcda:	4b30      	ldr	r3, [pc, #192]	; (800fd9c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800fcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce0:	881a      	ldrh	r2, [r3, #0]
 800fce2:	b09d      	sub	sp, #116	; 0x74
 800fce4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800fce6:	4604      	mov	r4, r0
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d954      	bls.n	800fd96 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800fcec:	aa26      	add	r2, sp, #152	; 0x98
 800fcee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800fda0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800fcf2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800fda4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800fcf6:	9202      	str	r2, [sp, #8]
 800fcf8:	f8d9 2000 	ldr.w	r2, [r9]
 800fcfc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800fd00:	f8d8 3000 	ldr.w	r3, [r8]
 800fd04:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd0e:	4798      	blx	r3
 800fd10:	4606      	mov	r6, r0
 800fd12:	b207      	sxth	r7, r0
 800fd14:	a803      	add	r0, sp, #12
 800fd16:	f004 fa27 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 800fd1a:	682b      	ldr	r3, [r5, #0]
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd20:	4798      	blx	r3
 800fd22:	682b      	ldr	r3, [r5, #0]
 800fd24:	4682      	mov	sl, r0
 800fd26:	4628      	mov	r0, r5
 800fd28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd2a:	4798      	blx	r3
 800fd2c:	4653      	mov	r3, sl
 800fd2e:	9000      	str	r0, [sp, #0]
 800fd30:	a803      	add	r0, sp, #12
 800fd32:	9a02      	ldr	r2, [sp, #8]
 800fd34:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fd36:	f004 fa6a 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fd3a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800fd3c:	f8d9 3000 	ldr.w	r3, [r9]
 800fd40:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800fd44:	8925      	ldrh	r5, [r4, #8]
 800fd46:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800fd4a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800fd4e:	eba5 050c 	sub.w	r5, r5, ip
 800fd52:	784a      	ldrb	r2, [r1, #1]
 800fd54:	f8d8 3000 	ldr.w	r3, [r8]
 800fd58:	b22d      	sxth	r5, r5
 800fd5a:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800fd5e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800fd62:	9500      	str	r5, [sp, #0]
 800fd64:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800fd68:	a803      	add	r0, sp, #12
 800fd6a:	f002 f869 	bl	8011e40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800fd6e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800fd72:	b203      	sxth	r3, r0
 800fd74:	18b9      	adds	r1, r7, r2
 800fd76:	2900      	cmp	r1, #0
 800fd78:	dd0b      	ble.n	800fd92 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800fd7a:	3b01      	subs	r3, #1
 800fd7c:	fb13 f302 	smulbb	r3, r3, r2
 800fd80:	fb16 3300 	smlabb	r3, r6, r0, r3
 800fd84:	b21f      	sxth	r7, r3
 800fd86:	4638      	mov	r0, r7
 800fd88:	b01d      	add	sp, #116	; 0x74
 800fd8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd8e:	b003      	add	sp, #12
 800fd90:	4770      	bx	lr
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	dcf7      	bgt.n	800fd86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800fd96:	2700      	movs	r7, #0
 800fd98:	e7f5      	b.n	800fd86 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800fd9a:	bf00      	nop
 800fd9c:	2400f5ec 	.word	0x2400f5ec
 800fda0:	2400f5e8 	.word	0x2400f5e8
 800fda4:	2400f5f0 	.word	0x2400f5f0

0800fda8 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800fda8:	b570      	push	{r4, r5, r6, lr}
 800fdaa:	6803      	ldr	r3, [r0, #0]
 800fdac:	4604      	mov	r4, r0
 800fdae:	4615      	mov	r5, r2
 800fdb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdb2:	4798      	blx	r3
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	4620      	mov	r0, r4
 800fdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdc0:	4718      	bx	r3
	...

0800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	4b0e      	ldr	r3, [pc, #56]	; (800fe00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800fdc8:	4604      	mov	r4, r0
 800fdca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800fdcc:	881b      	ldrh	r3, [r3, #0]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d214      	bcs.n	800fdfc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800fdd2:	6803      	ldr	r3, [r0, #0]
 800fdd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdd6:	4798      	blx	r3
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	4605      	mov	r5, r0
 800fddc:	4620      	mov	r0, r4
 800fdde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fde0:	4798      	blx	r3
 800fde2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800fde6:	b22d      	sxth	r5, r5
 800fde8:	4601      	mov	r1, r0
 800fdea:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800fdee:	bf06      	itte	eq
 800fdf0:	4602      	moveq	r2, r0
 800fdf2:	4629      	moveq	r1, r5
 800fdf4:	462a      	movne	r2, r5
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7ff ffd6 	bl	800fda8 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fdfc:	bd38      	pop	{r3, r4, r5, pc}
 800fdfe:	bf00      	nop
 800fe00:	2400f5ec 	.word	0x2400f5ec

0800fe04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800fe04:	b530      	push	{r4, r5, lr}
 800fe06:	888b      	ldrh	r3, [r1, #4]
 800fe08:	b085      	sub	sp, #20
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	8583      	strh	r3, [r0, #44]	; 0x2c
 800fe0e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800fe12:	b923      	cbnz	r3, 800fe1e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fe14:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fe18:	b90b      	cbnz	r3, 800fe1e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fe1a:	f7ff ffd3 	bl	800fdc4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800fe1e:	6823      	ldr	r3, [r4, #0]
 800fe20:	466d      	mov	r5, sp
 800fe22:	4621      	mov	r1, r4
 800fe24:	343c      	adds	r4, #60	; 0x3c
 800fe26:	4628      	mov	r0, r5
 800fe28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe2c:	4798      	blx	r3
 800fe2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe36:	b005      	add	sp, #20
 800fe38:	bd30      	pop	{r4, r5, pc}

0800fe3a <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	8083      	strh	r3, [r0, #4]
 800fe3e:	80c3      	strh	r3, [r0, #6]
 800fe40:	8003      	strh	r3, [r0, #0]
 800fe42:	8043      	strh	r3, [r0, #2]
 800fe44:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800fe48:	2bff      	cmp	r3, #255	; 0xff
 800fe4a:	bf01      	itttt	eq
 800fe4c:	890b      	ldrheq	r3, [r1, #8]
 800fe4e:	8083      	strheq	r3, [r0, #4]
 800fe50:	894b      	ldrheq	r3, [r1, #10]
 800fe52:	80c3      	strheq	r3, [r0, #6]
 800fe54:	4770      	bx	lr
	...

0800fe58 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800fe58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	466b      	mov	r3, sp
 800fe5e:	6808      	ldr	r0, [r1, #0]
 800fe60:	6849      	ldr	r1, [r1, #4]
 800fe62:	c303      	stmia	r3!, {r0, r1}
 800fe64:	6823      	ldr	r3, [r4, #0]
 800fe66:	4669      	mov	r1, sp
 800fe68:	4620      	mov	r0, r4
 800fe6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe6c:	4798      	blx	r3
 800fe6e:	4b08      	ldr	r3, [pc, #32]	; (800fe90 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800fe76:	b10a      	cbz	r2, 800fe7c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800fe78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fe7a:	b900      	cbnz	r0, 800fe7e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800fe7c:	6898      	ldr	r0, [r3, #8]
 800fe7e:	6803      	ldr	r3, [r0, #0]
 800fe80:	4669      	mov	r1, sp
 800fe82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fe84:	6a1d      	ldr	r5, [r3, #32]
 800fe86:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fe8a:	47a8      	blx	r5
 800fe8c:	b003      	add	sp, #12
 800fe8e:	bd30      	pop	{r4, r5, pc}
 800fe90:	2400f590 	.word	0x2400f590

0800fe94 <_ZN8touchgfx3BoxD1Ev>:
 800fe94:	4770      	bx	lr

0800fe96 <_ZN8touchgfx3BoxD0Ev>:
 800fe96:	b510      	push	{r4, lr}
 800fe98:	4604      	mov	r4, r0
 800fe9a:	212c      	movs	r1, #44	; 0x2c
 800fe9c:	f00e f98b 	bl	801e1b6 <_ZdlPvj>
 800fea0:	4620      	mov	r0, r4
 800fea2:	bd10      	pop	{r4, pc}

0800fea4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800fea4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800fea8:	b12a      	cbz	r2, 800feb6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800feaa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800feae:	b112      	cbz	r2, 800feb6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800feb0:	6803      	ldr	r3, [r0, #0]
 800feb2:	695b      	ldr	r3, [r3, #20]
 800feb4:	4718      	bx	r3
 800feb6:	4770      	bx	lr

0800feb8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800feb8:	4b30      	ldr	r3, [pc, #192]	; (800ff7c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800feba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800febe:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800fec0:	b08d      	sub	sp, #52	; 0x34
 800fec2:	881b      	ldrh	r3, [r3, #0]
 800fec4:	4604      	mov	r4, r0
 800fec6:	460f      	mov	r7, r1
 800fec8:	4293      	cmp	r3, r2
 800feca:	d954      	bls.n	800ff76 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800fecc:	4b2c      	ldr	r3, [pc, #176]	; (800ff80 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800fece:	6819      	ldr	r1, [r3, #0]
 800fed0:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800fed4:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800fed8:	4a2a      	ldr	r2, [pc, #168]	; (800ff84 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800feda:	6812      	ldr	r2, [r2, #0]
 800fedc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fee0:	2900      	cmp	r1, #0
 800fee2:	d048      	beq.n	800ff76 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800fee4:	785a      	ldrb	r2, [r3, #1]
 800fee6:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800feea:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800feee:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800fef2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800fef6:	4b24      	ldr	r3, [pc, #144]	; (800ff88 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800fef8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 800ff02:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 800ff06:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 800ff0a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800ff0c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800ff10:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 800ff14:	9107      	str	r1, [sp, #28]
 800ff16:	f88d 8020 	strb.w	r8, [sp, #32]
 800ff1a:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 800ff1e:	9609      	str	r6, [sp, #36]	; 0x24
 800ff20:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 800ff24:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800ff28:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 800ff2c:	b10b      	cbz	r3, 800ff32 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800ff2e:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 800ff30:	b905      	cbnz	r5, 800ff34 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800ff32:	6895      	ldr	r5, [r2, #8]
 800ff34:	ae05      	add	r6, sp, #20
 800ff36:	4621      	mov	r1, r4
 800ff38:	4630      	mov	r0, r6
 800ff3a:	f003 fc8d 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ff3e:	4b13      	ldr	r3, [pc, #76]	; (800ff8c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800ff40:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800ff42:	6818      	ldr	r0, [r3, #0]
 800ff44:	f7f3 f8ac 	bl	80030a0 <_ZNK8touchgfx5Texts7getTextEt>
 800ff48:	6823      	ldr	r3, [r4, #0]
 800ff4a:	4680      	mov	r8, r0
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff50:	4798      	blx	r3
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	4681      	mov	r9, r0
 800ff56:	4620      	mov	r0, r4
 800ff58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff5c:	4798      	blx	r3
 800ff5e:	ab07      	add	r3, sp, #28
 800ff60:	f8cd 8004 	str.w	r8, [sp, #4]
 800ff64:	9300      	str	r3, [sp, #0]
 800ff66:	463b      	mov	r3, r7
 800ff68:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	e896 0006 	ldmia.w	r6, {r1, r2}
 800ff72:	f7f3 f847 	bl	8003004 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800ff76:	b00d      	add	sp, #52	; 0x34
 800ff78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff7c:	2400f5ec 	.word	0x2400f5ec
 800ff80:	2400f5e8 	.word	0x2400f5e8
 800ff84:	2400f5f0 	.word	0x2400f5f0
 800ff88:	2400f590 	.word	0x2400f590
 800ff8c:	2400f5f4 	.word	0x2400f5f4

0800ff90 <_ZN8touchgfx5ImageD1Ev>:
 800ff90:	4770      	bx	lr

0800ff92 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800ff92:	b570      	push	{r4, r5, r6, lr}
 800ff94:	880b      	ldrh	r3, [r1, #0]
 800ff96:	460d      	mov	r5, r1
 800ff98:	4604      	mov	r4, r0
 800ff9a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	f005 fd0d 	bl	80159bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	f005 fd3d 	bl	8015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	4605      	mov	r5, r0
 800ffae:	4631      	mov	r1, r6
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb4:	4798      	blx	r3
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	4629      	mov	r1, r5
 800ffba:	4620      	mov	r0, r4
 800ffbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ffc2:	4718      	bx	r3

0800ffc4 <_ZN8touchgfx5ImageD0Ev>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	4604      	mov	r4, r0
 800ffc8:	212c      	movs	r1, #44	; 0x2c
 800ffca:	f00e f8f4 	bl	801e1b6 <_ZdlPvj>
 800ffce:	4620      	mov	r0, r4
 800ffd0:	bd10      	pop	{r4, pc}

0800ffd2 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800ffd2:	b510      	push	{r4, lr}
 800ffd4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800ffd8:	4604      	mov	r4, r0
 800ffda:	2bff      	cmp	r3, #255	; 0xff
 800ffdc:	d006      	beq.n	800ffec <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	8003      	strh	r3, [r0, #0]
 800ffe2:	8043      	strh	r3, [r0, #2]
 800ffe4:	8083      	strh	r3, [r0, #4]
 800ffe6:	80c3      	strh	r3, [r0, #6]
 800ffe8:	4620      	mov	r0, r4
 800ffea:	bd10      	pop	{r4, pc}
 800ffec:	3126      	adds	r1, #38	; 0x26
 800ffee:	f005 fd4d 	bl	8015a8c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fff2:	e7f9      	b.n	800ffe8 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800fff4 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800fff4:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800fff8:	b12a      	cbz	r2, 8010006 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800fffa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fffe:	b112      	cbz	r2, 8010006 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8010000:	6803      	ldr	r3, [r0, #0]
 8010002:	695b      	ldr	r3, [r3, #20]
 8010004:	4718      	bx	r3
 8010006:	4770      	bx	lr

08010008 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801000c:	4604      	mov	r4, r0
 801000e:	b088      	sub	sp, #32
 8010010:	2500      	movs	r5, #0
 8010012:	460f      	mov	r7, r1
 8010014:	f854 3b26 	ldr.w	r3, [r4], #38
 8010018:	a904      	add	r1, sp, #16
 801001a:	4606      	mov	r6, r0
 801001c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010022:	4798      	blx	r3
 8010024:	4620      	mov	r0, r4
 8010026:	f005 fcc9 	bl	80159bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801002a:	4680      	mov	r8, r0
 801002c:	4620      	mov	r0, r4
 801002e:	f005 fcf9 	bl	8015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010032:	9506      	str	r5, [sp, #24]
 8010034:	ad06      	add	r5, sp, #24
 8010036:	f8ad 001e 	strh.w	r0, [sp, #30]
 801003a:	4639      	mov	r1, r7
 801003c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8010040:	4628      	mov	r0, r5
 8010042:	f7fd f997 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8010046:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801004a:	2b00      	cmp	r3, #0
 801004c:	dd19      	ble.n	8010082 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801004e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010052:	2b00      	cmp	r3, #0
 8010054:	dd15      	ble.n	8010082 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010056:	4b0c      	ldr	r3, [pc, #48]	; (8010088 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801005e:	b10a      	cbz	r2, 8010064 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8010060:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010062:	b900      	cbnz	r0, 8010066 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010064:	6898      	ldr	r0, [r3, #8]
 8010066:	2701      	movs	r7, #1
 8010068:	6801      	ldr	r1, [r0, #0]
 801006a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801006e:	9702      	str	r7, [sp, #8]
 8010070:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8010074:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8010078:	e9cd 5600 	strd	r5, r6, [sp]
 801007c:	688d      	ldr	r5, [r1, #8]
 801007e:	4621      	mov	r1, r4
 8010080:	47a8      	blx	r5
 8010082:	b008      	add	sp, #32
 8010084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010088:	2400f590 	.word	0x2400f590

0801008c <_ZN8touchgfx7OutlineD1Ev>:
 801008c:	4770      	bx	lr

0801008e <_ZN8touchgfx7OutlineD0Ev>:
 801008e:	b510      	push	{r4, lr}
 8010090:	4604      	mov	r4, r0
 8010092:	2130      	movs	r1, #48	; 0x30
 8010094:	f00e f88f 	bl	801e1b6 <_ZdlPvj>
 8010098:	4620      	mov	r0, r4
 801009a:	bd10      	pop	{r4, pc}

0801009c <_ZN8touchgfx7Outline5resetEv>:
 801009c:	b510      	push	{r4, lr}
 801009e:	4604      	mov	r4, r0
 80100a0:	f000 fe86 	bl	8010db0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80100a4:	60e0      	str	r0, [r4, #12]
 80100a6:	f000 fe89 	bl	8010dbc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80100aa:	68e3      	ldr	r3, [r4, #12]
 80100ac:	08c0      	lsrs	r0, r0, #3
 80100ae:	2200      	movs	r2, #0
 80100b0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80100b4:	6123      	str	r3, [r4, #16]
 80100b6:	3801      	subs	r0, #1
 80100b8:	60a2      	str	r2, [r4, #8]
 80100ba:	6060      	str	r0, [r4, #4]
 80100bc:	8019      	strh	r1, [r3, #0]
 80100be:	8059      	strh	r1, [r3, #2]
 80100c0:	809a      	strh	r2, [r3, #4]
 80100c2:	80da      	strh	r2, [r3, #6]
 80100c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80100c6:	f023 0301 	bic.w	r3, r3, #1
 80100ca:	f043 0302 	orr.w	r3, r3, #2
 80100ce:	6263      	str	r3, [r4, #36]	; 0x24
 80100d0:	bd10      	pop	{r4, pc}
	...

080100d4 <_ZN8touchgfx7OutlineC1Ev>:
 80100d4:	4b0a      	ldr	r3, [pc, #40]	; (8010100 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80100d6:	b510      	push	{r4, lr}
 80100d8:	6003      	str	r3, [r0, #0]
 80100da:	2300      	movs	r3, #0
 80100dc:	4604      	mov	r4, r0
 80100de:	6243      	str	r3, [r0, #36]	; 0x24
 80100e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80100e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80100e8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80100ec:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80100f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80100f4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80100f8:	f7ff ffd0 	bl	801009c <_ZN8touchgfx7Outline5resetEv>
 80100fc:	4620      	mov	r0, r4
 80100fe:	bd10      	pop	{r4, pc}
 8010100:	080230fc 	.word	0x080230fc

08010104 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8010104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010108:	b093      	sub	sp, #76	; 0x4c
 801010a:	1156      	asrs	r6, r2, #5
 801010c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801010e:	9305      	str	r3, [sp, #20]
 8010110:	1153      	asrs	r3, r2, #5
 8010112:	f004 051f 	and.w	r5, r4, #31
 8010116:	9303      	str	r3, [sp, #12]
 8010118:	1163      	asrs	r3, r4, #5
 801011a:	9504      	str	r5, [sp, #16]
 801011c:	1165      	asrs	r5, r4, #5
 801011e:	9306      	str	r3, [sp, #24]
 8010120:	f002 031f 	and.w	r3, r2, #31
 8010124:	42ae      	cmp	r6, r5
 8010126:	f040 80f4 	bne.w	8010312 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801012a:	9c04      	ldr	r4, [sp, #16]
 801012c:	9a05      	ldr	r2, [sp, #20]
 801012e:	42a3      	cmp	r3, r4
 8010130:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8010134:	6902      	ldr	r2, [r0, #16]
 8010136:	d125      	bne.n	8010184 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010138:	f9b2 3000 	ldrsh.w	r3, [r2]
 801013c:	459e      	cmp	lr, r3
 801013e:	d103      	bne.n	8010148 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8010140:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010144:	429e      	cmp	r6, r3
 8010146:	d035      	beq.n	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010148:	88d1      	ldrh	r1, [r2, #6]
 801014a:	8893      	ldrh	r3, [r2, #4]
 801014c:	430b      	orrs	r3, r1
 801014e:	d010      	beq.n	8010172 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010150:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010154:	2b00      	cmp	r3, #0
 8010156:	db0c      	blt.n	8010172 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010158:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801015a:	428b      	cmp	r3, r1
 801015c:	da09      	bge.n	8010172 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801015e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010162:	428b      	cmp	r3, r1
 8010164:	f103 0301 	add.w	r3, r3, #1
 8010168:	bf38      	it	cc
 801016a:	3208      	addcc	r2, #8
 801016c:	6083      	str	r3, [r0, #8]
 801016e:	bf38      	it	cc
 8010170:	6102      	strcc	r2, [r0, #16]
 8010172:	6903      	ldr	r3, [r0, #16]
 8010174:	9a03      	ldr	r2, [sp, #12]
 8010176:	f8a3 e000 	strh.w	lr, [r3]
 801017a:	805a      	strh	r2, [r3, #2]
 801017c:	2200      	movs	r2, #0
 801017e:	809a      	strh	r2, [r3, #4]
 8010180:	80da      	strh	r2, [r3, #6]
 8010182:	e017      	b.n	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010184:	9c05      	ldr	r4, [sp, #20]
 8010186:	114e      	asrs	r6, r1, #5
 8010188:	f001 0c1f 	and.w	ip, r1, #31
 801018c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010190:	f004 041f 	and.w	r4, r4, #31
 8010194:	4576      	cmp	r6, lr
 8010196:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801019a:	9402      	str	r4, [sp, #8]
 801019c:	9c04      	ldr	r4, [sp, #16]
 801019e:	eba4 0403 	sub.w	r4, r4, r3
 80101a2:	d10a      	bne.n	80101ba <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80101a4:	9b02      	ldr	r3, [sp, #8]
 80101a6:	44a0      	add	r8, r4
 80101a8:	449c      	add	ip, r3
 80101aa:	f8a2 8004 	strh.w	r8, [r2, #4]
 80101ae:	fb04 a40c 	mla	r4, r4, ip, sl
 80101b2:	80d4      	strh	r4, [r2, #6]
 80101b4:	b013      	add	sp, #76	; 0x4c
 80101b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ba:	9d05      	ldr	r5, [sp, #20]
 80101bc:	1a69      	subs	r1, r5, r1
 80101be:	bf51      	iteee	pl
 80101c0:	f1cc 0520 	rsbpl	r5, ip, #32
 80101c4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80101c8:	4249      	negmi	r1, r1
 80101ca:	2500      	movmi	r5, #0
 80101cc:	bf5d      	ittte	pl
 80101ce:	436c      	mulpl	r4, r5
 80101d0:	2520      	movpl	r5, #32
 80101d2:	f04f 0901 	movpl.w	r9, #1
 80101d6:	f04f 39ff 	movmi.w	r9, #4294967295
 80101da:	9501      	str	r5, [sp, #4]
 80101dc:	9f01      	ldr	r7, [sp, #4]
 80101de:	444e      	add	r6, r9
 80101e0:	fb94 f5f1 	sdiv	r5, r4, r1
 80101e4:	fb01 4415 	mls	r4, r1, r5, r4
 80101e8:	44bc      	add	ip, r7
 80101ea:	2c00      	cmp	r4, #0
 80101ec:	bfbc      	itt	lt
 80101ee:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80101f2:	1864      	addlt	r4, r4, r1
 80101f4:	44a8      	add	r8, r5
 80101f6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80101fa:	f8a2 8004 	strh.w	r8, [r2, #4]
 80101fe:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010202:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010206:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801020a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801020e:	ea58 0202 	orrs.w	r2, r8, r2
 8010212:	d011      	beq.n	8010238 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010214:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010218:	f1b8 0f00 	cmp.w	r8, #0
 801021c:	db0c      	blt.n	8010238 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801021e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010220:	4590      	cmp	r8, r2
 8010222:	da09      	bge.n	8010238 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010224:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010228:	4590      	cmp	r8, r2
 801022a:	bf3c      	itt	cc
 801022c:	f10c 0208 	addcc.w	r2, ip, #8
 8010230:	6102      	strcc	r2, [r0, #16]
 8010232:	f108 0201 	add.w	r2, r8, #1
 8010236:	6082      	str	r2, [r0, #8]
 8010238:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801023c:	2700      	movs	r7, #0
 801023e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010242:	45b6      	cmp	lr, r6
 8010244:	f8ac 6000 	strh.w	r6, [ip]
 8010248:	442b      	add	r3, r5
 801024a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801024e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010252:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010256:	d04b      	beq.n	80102f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010258:	9f04      	ldr	r7, [sp, #16]
 801025a:	1a64      	subs	r4, r4, r1
 801025c:	f04f 0a00 	mov.w	sl, #0
 8010260:	1aff      	subs	r7, r7, r3
 8010262:	443d      	add	r5, r7
 8010264:	016d      	lsls	r5, r5, #5
 8010266:	fb95 f8f1 	sdiv	r8, r5, r1
 801026a:	fb01 5518 	mls	r5, r1, r8, r5
 801026e:	2d00      	cmp	r5, #0
 8010270:	bfbc      	itt	lt
 8010272:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010276:	186d      	addlt	r5, r5, r1
 8010278:	f108 0701 	add.w	r7, r8, #1
 801027c:	9703      	str	r7, [sp, #12]
 801027e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010282:	1964      	adds	r4, r4, r5
 8010284:	444e      	add	r6, r9
 8010286:	bf54      	ite	pl
 8010288:	9f03      	ldrpl	r7, [sp, #12]
 801028a:	4647      	movmi	r7, r8
 801028c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010290:	bf58      	it	pl
 8010292:	1a64      	subpl	r4, r4, r1
 8010294:	443b      	add	r3, r7
 8010296:	44bb      	add	fp, r7
 8010298:	f8ac b004 	strh.w	fp, [ip, #4]
 801029c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80102a0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80102a4:	f8ac b006 	strh.w	fp, [ip, #6]
 80102a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80102ac:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80102b0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80102b4:	ea5b 0707 	orrs.w	r7, fp, r7
 80102b8:	d011      	beq.n	80102de <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80102ba:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80102be:	f1bb 0f00 	cmp.w	fp, #0
 80102c2:	db0c      	blt.n	80102de <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80102c4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80102c6:	45bb      	cmp	fp, r7
 80102c8:	da09      	bge.n	80102de <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80102ca:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80102ce:	45bb      	cmp	fp, r7
 80102d0:	bf3c      	itt	cc
 80102d2:	f10c 0708 	addcc.w	r7, ip, #8
 80102d6:	6107      	strcc	r7, [r0, #16]
 80102d8:	f10b 0701 	add.w	r7, fp, #1
 80102dc:	6087      	str	r7, [r0, #8]
 80102de:	6907      	ldr	r7, [r0, #16]
 80102e0:	45b6      	cmp	lr, r6
 80102e2:	803e      	strh	r6, [r7, #0]
 80102e4:	807a      	strh	r2, [r7, #2]
 80102e6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80102ea:	f8a7 a006 	strh.w	sl, [r7, #6]
 80102ee:	d1c6      	bne.n	801027e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80102f0:	9a04      	ldr	r2, [sp, #16]
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	6902      	ldr	r2, [r0, #16]
 80102f6:	8891      	ldrh	r1, [r2, #4]
 80102f8:	88d6      	ldrh	r6, [r2, #6]
 80102fa:	4419      	add	r1, r3
 80102fc:	8091      	strh	r1, [r2, #4]
 80102fe:	9902      	ldr	r1, [sp, #8]
 8010300:	f101 0c20 	add.w	ip, r1, #32
 8010304:	9901      	ldr	r1, [sp, #4]
 8010306:	ebac 0c01 	sub.w	ip, ip, r1
 801030a:	fb03 630c 	mla	r3, r3, ip, r6
 801030e:	80d3      	strh	r3, [r2, #6]
 8010310:	e750      	b.n	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010312:	9d05      	ldr	r5, [sp, #20]
 8010314:	1aa2      	subs	r2, r4, r2
 8010316:	eba5 0501 	sub.w	r5, r5, r1
 801031a:	9202      	str	r2, [sp, #8]
 801031c:	9508      	str	r5, [sp, #32]
 801031e:	f140 8128 	bpl.w	8010572 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8010322:	9a03      	ldr	r2, [sp, #12]
 8010324:	2a00      	cmp	r2, #0
 8010326:	f6ff af45 	blt.w	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801032a:	9a02      	ldr	r2, [sp, #8]
 801032c:	f04f 34ff 	mov.w	r4, #4294967295
 8010330:	4252      	negs	r2, r2
 8010332:	940b      	str	r4, [sp, #44]	; 0x2c
 8010334:	2400      	movs	r4, #0
 8010336:	9202      	str	r2, [sp, #8]
 8010338:	9a06      	ldr	r2, [sp, #24]
 801033a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801033e:	9206      	str	r2, [sp, #24]
 8010340:	462a      	mov	r2, r5
 8010342:	435a      	muls	r2, r3
 8010344:	9401      	str	r4, [sp, #4]
 8010346:	9c02      	ldr	r4, [sp, #8]
 8010348:	9d02      	ldr	r5, [sp, #8]
 801034a:	fb92 f4f4 	sdiv	r4, r2, r4
 801034e:	fb05 2214 	mls	r2, r5, r4, r2
 8010352:	2a00      	cmp	r2, #0
 8010354:	9207      	str	r2, [sp, #28]
 8010356:	bfbc      	itt	lt
 8010358:	1952      	addlt	r2, r2, r5
 801035a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801035e:	6905      	ldr	r5, [r0, #16]
 8010360:	bfb8      	it	lt
 8010362:	9207      	strlt	r2, [sp, #28]
 8010364:	eb04 0901 	add.w	r9, r4, r1
 8010368:	9a01      	ldr	r2, [sp, #4]
 801036a:	ea4f 1669 	mov.w	r6, r9, asr #5
 801036e:	429a      	cmp	r2, r3
 8010370:	f040 8111 	bne.w	8010596 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8010374:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010378:	429e      	cmp	r6, r3
 801037a:	d104      	bne.n	8010386 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 801037c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010380:	9a03      	ldr	r2, [sp, #12]
 8010382:	429a      	cmp	r2, r3
 8010384:	d01b      	beq.n	80103be <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010386:	88ea      	ldrh	r2, [r5, #6]
 8010388:	88ab      	ldrh	r3, [r5, #4]
 801038a:	4313      	orrs	r3, r2
 801038c:	d010      	beq.n	80103b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801038e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010392:	2a00      	cmp	r2, #0
 8010394:	db0c      	blt.n	80103b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010396:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010398:	429a      	cmp	r2, r3
 801039a:	da09      	bge.n	80103b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801039c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80103a0:	429a      	cmp	r2, r3
 80103a2:	f102 0201 	add.w	r2, r2, #1
 80103a6:	bf38      	it	cc
 80103a8:	3508      	addcc	r5, #8
 80103aa:	6082      	str	r2, [r0, #8]
 80103ac:	bf38      	it	cc
 80103ae:	6105      	strcc	r5, [r0, #16]
 80103b0:	6903      	ldr	r3, [r0, #16]
 80103b2:	9a03      	ldr	r2, [sp, #12]
 80103b4:	801e      	strh	r6, [r3, #0]
 80103b6:	805a      	strh	r2, [r3, #2]
 80103b8:	2200      	movs	r2, #0
 80103ba:	809a      	strh	r2, [r3, #4]
 80103bc:	80da      	strh	r2, [r3, #6]
 80103be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103c0:	9a03      	ldr	r2, [sp, #12]
 80103c2:	6901      	ldr	r1, [r0, #16]
 80103c4:	441a      	add	r2, r3
 80103c6:	f9b1 3000 	ldrsh.w	r3, [r1]
 80103ca:	42b3      	cmp	r3, r6
 80103cc:	d103      	bne.n	80103d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 80103ce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d01a      	beq.n	801040c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 80103d6:	88cc      	ldrh	r4, [r1, #6]
 80103d8:	888b      	ldrh	r3, [r1, #4]
 80103da:	4323      	orrs	r3, r4
 80103dc:	d010      	beq.n	8010400 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80103de:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80103e2:	2c00      	cmp	r4, #0
 80103e4:	db0c      	blt.n	8010400 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80103e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80103e8:	429c      	cmp	r4, r3
 80103ea:	da09      	bge.n	8010400 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80103ec:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80103f0:	429c      	cmp	r4, r3
 80103f2:	f104 0401 	add.w	r4, r4, #1
 80103f6:	bf38      	it	cc
 80103f8:	3108      	addcc	r1, #8
 80103fa:	6084      	str	r4, [r0, #8]
 80103fc:	bf38      	it	cc
 80103fe:	6101      	strcc	r1, [r0, #16]
 8010400:	6903      	ldr	r3, [r0, #16]
 8010402:	2100      	movs	r1, #0
 8010404:	801e      	strh	r6, [r3, #0]
 8010406:	805a      	strh	r2, [r3, #2]
 8010408:	8099      	strh	r1, [r3, #4]
 801040a:	80d9      	strh	r1, [r3, #6]
 801040c:	9b06      	ldr	r3, [sp, #24]
 801040e:	4293      	cmp	r3, r2
 8010410:	f000 8082 	beq.w	8010518 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8010414:	9b08      	ldr	r3, [sp, #32]
 8010416:	9902      	ldr	r1, [sp, #8]
 8010418:	015b      	lsls	r3, r3, #5
 801041a:	9c02      	ldr	r4, [sp, #8]
 801041c:	fb93 f1f1 	sdiv	r1, r3, r1
 8010420:	fb04 3311 	mls	r3, r4, r1, r3
 8010424:	9103      	str	r1, [sp, #12]
 8010426:	2b00      	cmp	r3, #0
 8010428:	9308      	str	r3, [sp, #32]
 801042a:	da04      	bge.n	8010436 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 801042c:	1e4b      	subs	r3, r1, #1
 801042e:	9303      	str	r3, [sp, #12]
 8010430:	9b08      	ldr	r3, [sp, #32]
 8010432:	4423      	add	r3, r4
 8010434:	9308      	str	r3, [sp, #32]
 8010436:	9b07      	ldr	r3, [sp, #28]
 8010438:	464f      	mov	r7, r9
 801043a:	9902      	ldr	r1, [sp, #8]
 801043c:	2600      	movs	r6, #0
 801043e:	1a5b      	subs	r3, r3, r1
 8010440:	9307      	str	r3, [sp, #28]
 8010442:	9b01      	ldr	r3, [sp, #4]
 8010444:	f1c3 0320 	rsb	r3, r3, #32
 8010448:	930e      	str	r3, [sp, #56]	; 0x38
 801044a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801044c:	9b01      	ldr	r3, [sp, #4]
 801044e:	1a5b      	subs	r3, r3, r1
 8010450:	930a      	str	r3, [sp, #40]	; 0x28
 8010452:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8010456:	185b      	adds	r3, r3, r1
 8010458:	bf58      	it	pl
 801045a:	9902      	ldrpl	r1, [sp, #8]
 801045c:	9307      	str	r3, [sp, #28]
 801045e:	bf57      	itett	pl
 8010460:	1a5b      	subpl	r3, r3, r1
 8010462:	9903      	ldrmi	r1, [sp, #12]
 8010464:	9307      	strpl	r3, [sp, #28]
 8010466:	9b03      	ldrpl	r3, [sp, #12]
 8010468:	bf58      	it	pl
 801046a:	1c59      	addpl	r1, r3, #1
 801046c:	2a00      	cmp	r2, #0
 801046e:	4489      	add	r9, r1
 8010470:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8010474:	db2e      	blt.n	80104d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010476:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8010478:	4293      	cmp	r3, r2
 801047a:	dd2b      	ble.n	80104d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801047c:	9c01      	ldr	r4, [sp, #4]
 801047e:	6905      	ldr	r5, [r0, #16]
 8010480:	46a0      	mov	r8, r4
 8010482:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8010484:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8010488:	45a0      	cmp	r8, r4
 801048a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801048e:	f040 814c 	bne.w	801072a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8010492:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010496:	4551      	cmp	r1, sl
 8010498:	d103      	bne.n	80104a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801049a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801049e:	4291      	cmp	r1, r2
 80104a0:	d018      	beq.n	80104d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80104a2:	ea5c 010e 	orrs.w	r1, ip, lr
 80104a6:	d00f      	beq.n	80104c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80104a8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80104ac:	2900      	cmp	r1, #0
 80104ae:	db0b      	blt.n	80104c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80104b0:	428b      	cmp	r3, r1
 80104b2:	dd09      	ble.n	80104c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 80104b4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 80104b8:	4299      	cmp	r1, r3
 80104ba:	f101 0101 	add.w	r1, r1, #1
 80104be:	bf38      	it	cc
 80104c0:	3508      	addcc	r5, #8
 80104c2:	6081      	str	r1, [r0, #8]
 80104c4:	bf38      	it	cc
 80104c6:	6105      	strcc	r5, [r0, #16]
 80104c8:	6903      	ldr	r3, [r0, #16]
 80104ca:	f8a3 a000 	strh.w	sl, [r3]
 80104ce:	805a      	strh	r2, [r3, #2]
 80104d0:	809e      	strh	r6, [r3, #4]
 80104d2:	80de      	strh	r6, [r3, #6]
 80104d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104d6:	6901      	ldr	r1, [r0, #16]
 80104d8:	441a      	add	r2, r3
 80104da:	88cc      	ldrh	r4, [r1, #6]
 80104dc:	888b      	ldrh	r3, [r1, #4]
 80104de:	4323      	orrs	r3, r4
 80104e0:	d010      	beq.n	8010504 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80104e2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80104e6:	2c00      	cmp	r4, #0
 80104e8:	db0c      	blt.n	8010504 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80104ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80104ec:	429c      	cmp	r4, r3
 80104ee:	da09      	bge.n	8010504 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80104f0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80104f4:	429c      	cmp	r4, r3
 80104f6:	f104 0401 	add.w	r4, r4, #1
 80104fa:	bf38      	it	cc
 80104fc:	3108      	addcc	r1, #8
 80104fe:	6084      	str	r4, [r0, #8]
 8010500:	bf38      	it	cc
 8010502:	6101      	strcc	r1, [r0, #16]
 8010504:	6903      	ldr	r3, [r0, #16]
 8010506:	464f      	mov	r7, r9
 8010508:	f8a3 a000 	strh.w	sl, [r3]
 801050c:	805a      	strh	r2, [r3, #2]
 801050e:	809e      	strh	r6, [r3, #4]
 8010510:	80de      	strh	r6, [r3, #6]
 8010512:	9b06      	ldr	r3, [sp, #24]
 8010514:	4293      	cmp	r3, r2
 8010516:	d19c      	bne.n	8010452 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8010518:	9b01      	ldr	r3, [sp, #4]
 801051a:	6907      	ldr	r7, [r0, #16]
 801051c:	f1c3 0620 	rsb	r6, r3, #32
 8010520:	9b05      	ldr	r3, [sp, #20]
 8010522:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8010526:	9b04      	ldr	r3, [sp, #16]
 8010528:	429e      	cmp	r6, r3
 801052a:	f040 81c7 	bne.w	80108bc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801052e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010532:	459e      	cmp	lr, r3
 8010534:	d104      	bne.n	8010540 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8010536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801053a:	429a      	cmp	r2, r3
 801053c:	f43f ae3a 	beq.w	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010540:	88f9      	ldrh	r1, [r7, #6]
 8010542:	88bb      	ldrh	r3, [r7, #4]
 8010544:	430b      	orrs	r3, r1
 8010546:	d010      	beq.n	801056a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801054c:	2b00      	cmp	r3, #0
 801054e:	db0c      	blt.n	801056a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010550:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8010552:	428b      	cmp	r3, r1
 8010554:	da09      	bge.n	801056a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010556:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801055a:	428b      	cmp	r3, r1
 801055c:	f103 0301 	add.w	r3, r3, #1
 8010560:	bf38      	it	cc
 8010562:	3708      	addcc	r7, #8
 8010564:	6083      	str	r3, [r0, #8]
 8010566:	bf38      	it	cc
 8010568:	6107      	strcc	r7, [r0, #16]
 801056a:	6903      	ldr	r3, [r0, #16]
 801056c:	f8a3 e000 	strh.w	lr, [r3]
 8010570:	e603      	b.n	801017a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8010572:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010574:	9c03      	ldr	r4, [sp, #12]
 8010576:	42a2      	cmp	r2, r4
 8010578:	f6ff ae1c 	blt.w	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801057c:	9c06      	ldr	r4, [sp, #24]
 801057e:	42a2      	cmp	r2, r4
 8010580:	9c08      	ldr	r4, [sp, #32]
 8010582:	bfbc      	itt	lt
 8010584:	3201      	addlt	r2, #1
 8010586:	9206      	strlt	r2, [sp, #24]
 8010588:	f1c3 0220 	rsb	r2, r3, #32
 801058c:	4362      	muls	r2, r4
 801058e:	2401      	movs	r4, #1
 8010590:	940b      	str	r4, [sp, #44]	; 0x2c
 8010592:	2420      	movs	r4, #32
 8010594:	e6d6      	b.n	8010344 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8010596:	ea4f 1861 	mov.w	r8, r1, asr #5
 801059a:	f009 021f 	and.w	r2, r9, #31
 801059e:	f001 011f 	and.w	r1, r1, #31
 80105a2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80105a6:	920c      	str	r2, [sp, #48]	; 0x30
 80105a8:	45b0      	cmp	r8, r6
 80105aa:	9a01      	ldr	r2, [sp, #4]
 80105ac:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 80105b0:	eba2 0203 	sub.w	r2, r2, r3
 80105b4:	d108      	bne.n	80105c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 80105b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80105b8:	4496      	add	lr, r2
 80105ba:	4419      	add	r1, r3
 80105bc:	f8a5 e004 	strh.w	lr, [r5, #4]
 80105c0:	fb02 a101 	mla	r1, r2, r1, sl
 80105c4:	80e9      	strh	r1, [r5, #6]
 80105c6:	e6fa      	b.n	80103be <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80105c8:	2c00      	cmp	r4, #0
 80105ca:	f2c0 80a7 	blt.w	801071c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 80105ce:	2701      	movs	r7, #1
 80105d0:	f1c1 0c20 	rsb	ip, r1, #32
 80105d4:	970a      	str	r7, [sp, #40]	; 0x28
 80105d6:	2720      	movs	r7, #32
 80105d8:	fb02 f20c 	mul.w	r2, r2, ip
 80105dc:	9709      	str	r7, [sp, #36]	; 0x24
 80105de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80105e0:	fb92 fcf4 	sdiv	ip, r2, r4
 80105e4:	fb04 221c 	mls	r2, r4, ip, r2
 80105e8:	4439      	add	r1, r7
 80105ea:	2a00      	cmp	r2, #0
 80105ec:	bfbc      	itt	lt
 80105ee:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 80105f2:	1912      	addlt	r2, r2, r4
 80105f4:	fb0c a101 	mla	r1, ip, r1, sl
 80105f8:	44e6      	add	lr, ip
 80105fa:	80e9      	strh	r1, [r5, #6]
 80105fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80105fe:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010602:	eb08 0501 	add.w	r5, r8, r1
 8010606:	6901      	ldr	r1, [r0, #16]
 8010608:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801060c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8010610:	ea58 070e 	orrs.w	r7, r8, lr
 8010614:	d010      	beq.n	8010638 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010616:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801061a:	f1be 0f00 	cmp.w	lr, #0
 801061e:	db0b      	blt.n	8010638 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010620:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8010622:	45be      	cmp	lr, r7
 8010624:	da08      	bge.n	8010638 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010626:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801062a:	45be      	cmp	lr, r7
 801062c:	bf3c      	itt	cc
 801062e:	3108      	addcc	r1, #8
 8010630:	6101      	strcc	r1, [r0, #16]
 8010632:	f10e 0101 	add.w	r1, lr, #1
 8010636:	6081      	str	r1, [r0, #8]
 8010638:	6901      	ldr	r1, [r0, #16]
 801063a:	f04f 0e00 	mov.w	lr, #0
 801063e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010642:	42ae      	cmp	r6, r5
 8010644:	800d      	strh	r5, [r1, #0]
 8010646:	4463      	add	r3, ip
 8010648:	f8a1 8002 	strh.w	r8, [r1, #2]
 801064c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8010650:	f8a1 e006 	strh.w	lr, [r1, #6]
 8010654:	d053      	beq.n	80106fe <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8010656:	9901      	ldr	r1, [sp, #4]
 8010658:	1b12      	subs	r2, r2, r4
 801065a:	1ac9      	subs	r1, r1, r3
 801065c:	4461      	add	r1, ip
 801065e:	0149      	lsls	r1, r1, #5
 8010660:	fb91 fef4 	sdiv	lr, r1, r4
 8010664:	fb04 111e 	mls	r1, r4, lr, r1
 8010668:	2900      	cmp	r1, #0
 801066a:	bfbc      	itt	lt
 801066c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8010670:	1909      	addlt	r1, r1, r4
 8010672:	f10e 0701 	add.w	r7, lr, #1
 8010676:	970d      	str	r7, [sp, #52]	; 0x34
 8010678:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801067c:	1852      	adds	r2, r2, r1
 801067e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8010680:	bf54      	ite	pl
 8010682:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8010686:	46f4      	movmi	ip, lr
 8010688:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801068c:	bf58      	it	pl
 801068e:	1b12      	subpl	r2, r2, r4
 8010690:	4463      	add	r3, ip
 8010692:	443d      	add	r5, r7
 8010694:	44e3      	add	fp, ip
 8010696:	f8aa b004 	strh.w	fp, [sl, #4]
 801069a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801069e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 80106a2:	f8aa b006 	strh.w	fp, [sl, #6]
 80106a6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80106aa:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80106ae:	f8bc a004 	ldrh.w	sl, [ip, #4]
 80106b2:	ea5b 070a 	orrs.w	r7, fp, sl
 80106b6:	d014      	beq.n	80106e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80106b8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 80106bc:	f1ba 0f00 	cmp.w	sl, #0
 80106c0:	db0f      	blt.n	80106e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80106c2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80106c4:	45ba      	cmp	sl, r7
 80106c6:	da0c      	bge.n	80106e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 80106c8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 80106cc:	45ba      	cmp	sl, r7
 80106ce:	f10a 0a01 	add.w	sl, sl, #1
 80106d2:	bf38      	it	cc
 80106d4:	f10c 0c08 	addcc.w	ip, ip, #8
 80106d8:	f8c0 a008 	str.w	sl, [r0, #8]
 80106dc:	bf38      	it	cc
 80106de:	f8c0 c010 	strcc.w	ip, [r0, #16]
 80106e2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80106e6:	f04f 0700 	mov.w	r7, #0
 80106ea:	42ae      	cmp	r6, r5
 80106ec:	f8ac 5000 	strh.w	r5, [ip]
 80106f0:	f8ac 8002 	strh.w	r8, [ip, #2]
 80106f4:	f8ac 7004 	strh.w	r7, [ip, #4]
 80106f8:	f8ac 7006 	strh.w	r7, [ip, #6]
 80106fc:	d1bc      	bne.n	8010678 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 80106fe:	6904      	ldr	r4, [r0, #16]
 8010700:	9a01      	ldr	r2, [sp, #4]
 8010702:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010704:	1ad3      	subs	r3, r2, r3
 8010706:	88a2      	ldrh	r2, [r4, #4]
 8010708:	3120      	adds	r1, #32
 801070a:	441a      	add	r2, r3
 801070c:	80a2      	strh	r2, [r4, #4]
 801070e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010710:	1a89      	subs	r1, r1, r2
 8010712:	88e2      	ldrh	r2, [r4, #6]
 8010714:	fb03 2301 	mla	r3, r3, r1, r2
 8010718:	80e3      	strh	r3, [r4, #6]
 801071a:	e650      	b.n	80103be <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801071c:	f04f 37ff 	mov.w	r7, #4294967295
 8010720:	434a      	muls	r2, r1
 8010722:	4264      	negs	r4, r4
 8010724:	970a      	str	r7, [sp, #40]	; 0x28
 8010726:	2700      	movs	r7, #0
 8010728:	e758      	b.n	80105dc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801072a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801072e:	f009 031f 	and.w	r3, r9, #31
 8010732:	f007 071f 	and.w	r7, r7, #31
 8010736:	fa1f fc8c 	uxth.w	ip, ip
 801073a:	45d0      	cmp	r8, sl
 801073c:	930f      	str	r3, [sp, #60]	; 0x3c
 801073e:	fa1f fe8e 	uxth.w	lr, lr
 8010742:	d10a      	bne.n	801075a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8010744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010746:	449c      	add	ip, r3
 8010748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801074a:	441f      	add	r7, r3
 801074c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801074e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010752:	fb03 e707 	mla	r7, r3, r7, lr
 8010756:	80ef      	strh	r7, [r5, #6]
 8010758:	e6bc      	b.n	80104d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801075a:	2900      	cmp	r1, #0
 801075c:	f2c0 80a6 	blt.w	80108ac <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8010760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8010762:	f1c7 0320 	rsb	r3, r7, #32
 8010766:	4363      	muls	r3, r4
 8010768:	2401      	movs	r4, #1
 801076a:	940d      	str	r4, [sp, #52]	; 0x34
 801076c:	2420      	movs	r4, #32
 801076e:	940c      	str	r4, [sp, #48]	; 0x30
 8010770:	fb93 f4f1 	sdiv	r4, r3, r1
 8010774:	fb01 3b14 	mls	fp, r1, r4, r3
 8010778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801077a:	f1bb 0f00 	cmp.w	fp, #0
 801077e:	441f      	add	r7, r3
 8010780:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010782:	bfbc      	itt	lt
 8010784:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010788:	448b      	addlt	fp, r1
 801078a:	fb04 e707 	mla	r7, r4, r7, lr
 801078e:	44a4      	add	ip, r4
 8010790:	80ef      	strh	r7, [r5, #6]
 8010792:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010796:	eb08 0503 	add.w	r5, r8, r3
 801079a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801079e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 80107a2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80107a6:	ea5e 0307 	orrs.w	r3, lr, r7
 80107aa:	d011      	beq.n	80107d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80107ac:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80107b0:	f1be 0f00 	cmp.w	lr, #0
 80107b4:	db0c      	blt.n	80107d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80107b6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80107b8:	45be      	cmp	lr, r7
 80107ba:	da09      	bge.n	80107d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80107bc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80107c0:	45be      	cmp	lr, r7
 80107c2:	bf3c      	itt	cc
 80107c4:	f10c 0708 	addcc.w	r7, ip, #8
 80107c8:	6107      	strcc	r7, [r0, #16]
 80107ca:	f10e 0701 	add.w	r7, lr, #1
 80107ce:	6087      	str	r7, [r0, #8]
 80107d0:	6907      	ldr	r7, [r0, #16]
 80107d2:	b213      	sxth	r3, r2
 80107d4:	4555      	cmp	r5, sl
 80107d6:	9310      	str	r3, [sp, #64]	; 0x40
 80107d8:	807b      	strh	r3, [r7, #2]
 80107da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80107dc:	803d      	strh	r5, [r7, #0]
 80107de:	80be      	strh	r6, [r7, #4]
 80107e0:	eb04 0c03 	add.w	ip, r4, r3
 80107e4:	80fe      	strh	r6, [r7, #6]
 80107e6:	d050      	beq.n	801088a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80107e8:	9b01      	ldr	r3, [sp, #4]
 80107ea:	eba3 070c 	sub.w	r7, r3, ip
 80107ee:	ebab 0301 	sub.w	r3, fp, r1
 80107f2:	443c      	add	r4, r7
 80107f4:	9309      	str	r3, [sp, #36]	; 0x24
 80107f6:	0164      	lsls	r4, r4, #5
 80107f8:	fb94 f8f1 	sdiv	r8, r4, r1
 80107fc:	fb01 4418 	mls	r4, r1, r8, r4
 8010800:	2c00      	cmp	r4, #0
 8010802:	bfbc      	itt	lt
 8010804:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010808:	1864      	addlt	r4, r4, r1
 801080a:	f108 0701 	add.w	r7, r8, #1
 801080e:	9711      	str	r7, [sp, #68]	; 0x44
 8010810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010812:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010816:	191b      	adds	r3, r3, r4
 8010818:	f8be b004 	ldrh.w	fp, [lr, #4]
 801081c:	bf54      	ite	pl
 801081e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8010820:	4647      	movmi	r7, r8
 8010822:	9309      	str	r3, [sp, #36]	; 0x24
 8010824:	bf58      	it	pl
 8010826:	1a5b      	subpl	r3, r3, r1
 8010828:	44bb      	add	fp, r7
 801082a:	44bc      	add	ip, r7
 801082c:	bf58      	it	pl
 801082e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8010830:	f8ae b004 	strh.w	fp, [lr, #4]
 8010834:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010838:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801083c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801083e:	f8ae b006 	strh.w	fp, [lr, #6]
 8010842:	443d      	add	r5, r7
 8010844:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010848:	f8be b006 	ldrh.w	fp, [lr, #6]
 801084c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010850:	ea5b 0307 	orrs.w	r3, fp, r7
 8010854:	d011      	beq.n	801087a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010856:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801085a:	f1bb 0f00 	cmp.w	fp, #0
 801085e:	db0c      	blt.n	801087a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010860:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8010862:	45bb      	cmp	fp, r7
 8010864:	da09      	bge.n	801087a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010866:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801086a:	45bb      	cmp	fp, r7
 801086c:	bf3c      	itt	cc
 801086e:	f10e 0708 	addcc.w	r7, lr, #8
 8010872:	6107      	strcc	r7, [r0, #16]
 8010874:	f10b 0701 	add.w	r7, fp, #1
 8010878:	6087      	str	r7, [r0, #8]
 801087a:	6907      	ldr	r7, [r0, #16]
 801087c:	4555      	cmp	r5, sl
 801087e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010880:	803d      	strh	r5, [r7, #0]
 8010882:	807b      	strh	r3, [r7, #2]
 8010884:	80be      	strh	r6, [r7, #4]
 8010886:	80fe      	strh	r6, [r7, #6]
 8010888:	d1c2      	bne.n	8010810 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801088a:	9b01      	ldr	r3, [sp, #4]
 801088c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801088e:	eba3 0c0c 	sub.w	ip, r3, ip
 8010892:	6903      	ldr	r3, [r0, #16]
 8010894:	3720      	adds	r7, #32
 8010896:	8899      	ldrh	r1, [r3, #4]
 8010898:	4461      	add	r1, ip
 801089a:	8099      	strh	r1, [r3, #4]
 801089c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801089e:	1a7f      	subs	r7, r7, r1
 80108a0:	88d9      	ldrh	r1, [r3, #6]
 80108a2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80108a6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80108aa:	e613      	b.n	80104d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80108ac:	f04f 34ff 	mov.w	r4, #4294967295
 80108b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108b2:	4249      	negs	r1, r1
 80108b4:	940d      	str	r4, [sp, #52]	; 0x34
 80108b6:	2400      	movs	r4, #0
 80108b8:	437b      	muls	r3, r7
 80108ba:	e758      	b.n	801076e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80108bc:	9905      	ldr	r1, [sp, #20]
 80108be:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80108c2:	f009 0c1f 	and.w	ip, r9, #31
 80108c6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80108ca:	f001 011f 	and.w	r1, r1, #31
 80108ce:	45f3      	cmp	fp, lr
 80108d0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80108d4:	9102      	str	r1, [sp, #8]
 80108d6:	9904      	ldr	r1, [sp, #16]
 80108d8:	eba1 0406 	sub.w	r4, r1, r6
 80108dc:	d108      	bne.n	80108f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80108de:	9b02      	ldr	r3, [sp, #8]
 80108e0:	44a0      	add	r8, r4
 80108e2:	449c      	add	ip, r3
 80108e4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80108e8:	fb04 a40c 	mla	r4, r4, ip, sl
 80108ec:	80fc      	strh	r4, [r7, #6]
 80108ee:	e461      	b.n	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80108f0:	9905      	ldr	r1, [sp, #20]
 80108f2:	ebb1 0109 	subs.w	r1, r1, r9
 80108f6:	bf51      	iteee	pl
 80108f8:	f1cc 0520 	rsbpl	r5, ip, #32
 80108fc:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010900:	4249      	negmi	r1, r1
 8010902:	2500      	movmi	r5, #0
 8010904:	bf5d      	ittte	pl
 8010906:	436c      	mulpl	r4, r5
 8010908:	2520      	movpl	r5, #32
 801090a:	f04f 0901 	movpl.w	r9, #1
 801090e:	f04f 39ff 	movmi.w	r9, #4294967295
 8010912:	9501      	str	r5, [sp, #4]
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	fb94 f5f1 	sdiv	r5, r4, r1
 801091a:	fb01 4415 	mls	r4, r1, r5, r4
 801091e:	449c      	add	ip, r3
 8010920:	eb0b 0309 	add.w	r3, fp, r9
 8010924:	2c00      	cmp	r4, #0
 8010926:	bfbc      	itt	lt
 8010928:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801092c:	1864      	addlt	r4, r4, r1
 801092e:	44a8      	add	r8, r5
 8010930:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010934:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010938:	f8a7 c006 	strh.w	ip, [r7, #6]
 801093c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010940:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010944:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010948:	ea58 0707 	orrs.w	r7, r8, r7
 801094c:	d011      	beq.n	8010972 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801094e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010952:	f1b8 0f00 	cmp.w	r8, #0
 8010956:	db0c      	blt.n	8010972 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010958:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801095a:	45b8      	cmp	r8, r7
 801095c:	da09      	bge.n	8010972 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801095e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8010962:	45b8      	cmp	r8, r7
 8010964:	bf3c      	itt	cc
 8010966:	f10c 0708 	addcc.w	r7, ip, #8
 801096a:	6107      	strcc	r7, [r0, #16]
 801096c:	f108 0701 	add.w	r7, r8, #1
 8010970:	6087      	str	r7, [r0, #8]
 8010972:	6907      	ldr	r7, [r0, #16]
 8010974:	f04f 0c00 	mov.w	ip, #0
 8010978:	b212      	sxth	r2, r2
 801097a:	459e      	cmp	lr, r3
 801097c:	803b      	strh	r3, [r7, #0]
 801097e:	442e      	add	r6, r5
 8010980:	807a      	strh	r2, [r7, #2]
 8010982:	f8a7 c004 	strh.w	ip, [r7, #4]
 8010986:	f8a7 c006 	strh.w	ip, [r7, #6]
 801098a:	d04b      	beq.n	8010a24 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801098c:	9f04      	ldr	r7, [sp, #16]
 801098e:	1a64      	subs	r4, r4, r1
 8010990:	f04f 0a00 	mov.w	sl, #0
 8010994:	1bbf      	subs	r7, r7, r6
 8010996:	443d      	add	r5, r7
 8010998:	016d      	lsls	r5, r5, #5
 801099a:	fb95 f8f1 	sdiv	r8, r5, r1
 801099e:	fb01 5518 	mls	r5, r1, r8, r5
 80109a2:	4565      	cmp	r5, ip
 80109a4:	bfbc      	itt	lt
 80109a6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80109aa:	186d      	addlt	r5, r5, r1
 80109ac:	f108 0701 	add.w	r7, r8, #1
 80109b0:	9703      	str	r7, [sp, #12]
 80109b2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80109b6:	1964      	adds	r4, r4, r5
 80109b8:	444b      	add	r3, r9
 80109ba:	bf54      	ite	pl
 80109bc:	9f03      	ldrpl	r7, [sp, #12]
 80109be:	4647      	movmi	r7, r8
 80109c0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80109c4:	bf58      	it	pl
 80109c6:	1a64      	subpl	r4, r4, r1
 80109c8:	443e      	add	r6, r7
 80109ca:	44bb      	add	fp, r7
 80109cc:	f8ac b004 	strh.w	fp, [ip, #4]
 80109d0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80109d4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80109d8:	f8ac b006 	strh.w	fp, [ip, #6]
 80109dc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80109e0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80109e4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80109e8:	ea5b 0707 	orrs.w	r7, fp, r7
 80109ec:	d011      	beq.n	8010a12 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80109ee:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80109f2:	f1bb 0f00 	cmp.w	fp, #0
 80109f6:	db0c      	blt.n	8010a12 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80109f8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80109fa:	45bb      	cmp	fp, r7
 80109fc:	da09      	bge.n	8010a12 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80109fe:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010a02:	45bb      	cmp	fp, r7
 8010a04:	bf3c      	itt	cc
 8010a06:	f10c 0708 	addcc.w	r7, ip, #8
 8010a0a:	6107      	strcc	r7, [r0, #16]
 8010a0c:	f10b 0701 	add.w	r7, fp, #1
 8010a10:	6087      	str	r7, [r0, #8]
 8010a12:	6907      	ldr	r7, [r0, #16]
 8010a14:	459e      	cmp	lr, r3
 8010a16:	803b      	strh	r3, [r7, #0]
 8010a18:	807a      	strh	r2, [r7, #2]
 8010a1a:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010a1e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010a22:	d1c6      	bne.n	80109b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8010a24:	9b04      	ldr	r3, [sp, #16]
 8010a26:	1b9e      	subs	r6, r3, r6
 8010a28:	6903      	ldr	r3, [r0, #16]
 8010a2a:	889a      	ldrh	r2, [r3, #4]
 8010a2c:	4432      	add	r2, r6
 8010a2e:	809a      	strh	r2, [r3, #4]
 8010a30:	9a02      	ldr	r2, [sp, #8]
 8010a32:	f102 0c20 	add.w	ip, r2, #32
 8010a36:	9a01      	ldr	r2, [sp, #4]
 8010a38:	ebac 0c02 	sub.w	ip, ip, r2
 8010a3c:	88da      	ldrh	r2, [r3, #6]
 8010a3e:	fb06 260c 	mla	r6, r6, ip, r2
 8010a42:	80de      	strh	r6, [r3, #6]
 8010a44:	f7ff bbb6 	b.w	80101b4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08010a48 <_ZN8touchgfx7Outline6lineToEii>:
 8010a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010a4a:	079b      	lsls	r3, r3, #30
 8010a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a4e:	460e      	mov	r6, r1
 8010a50:	4615      	mov	r5, r2
 8010a52:	d511      	bpl.n	8010a78 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010a54:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8010a58:	ea86 0701 	eor.w	r7, r6, r1
 8010a5c:	ea85 0302 	eor.w	r3, r5, r2
 8010a60:	433b      	orrs	r3, r7
 8010a62:	d009      	beq.n	8010a78 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010a64:	4633      	mov	r3, r6
 8010a66:	9500      	str	r5, [sp, #0]
 8010a68:	f7ff fb4c 	bl	8010104 <_ZN8touchgfx7Outline10renderLineEiiii>
 8010a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010a6e:	f043 0301 	orr.w	r3, r3, #1
 8010a72:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8010a76:	6243      	str	r3, [r0, #36]	; 0x24
 8010a78:	b003      	add	sp, #12
 8010a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a7c <_ZN8touchgfx7Outline6moveToEii>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010a80:	4615      	mov	r5, r2
 8010a82:	4604      	mov	r4, r0
 8010a84:	460e      	mov	r6, r1
 8010a86:	079a      	lsls	r2, r3, #30
 8010a88:	d401      	bmi.n	8010a8e <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010a8a:	f7ff fb07 	bl	801009c <_ZN8touchgfx7Outline5resetEv>
 8010a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a90:	07db      	lsls	r3, r3, #31
 8010a92:	d504      	bpl.n	8010a9e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8010a94:	4620      	mov	r0, r4
 8010a96:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010a9a:	f7ff ffd5 	bl	8010a48 <_ZN8touchgfx7Outline6lineToEii>
 8010a9e:	6923      	ldr	r3, [r4, #16]
 8010aa0:	1170      	asrs	r0, r6, #5
 8010aa2:	1169      	asrs	r1, r5, #5
 8010aa4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010aa8:	4290      	cmp	r0, r2
 8010aaa:	d103      	bne.n	8010ab4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010aac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010ab0:	4291      	cmp	r1, r2
 8010ab2:	d01a      	beq.n	8010aea <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8010ab4:	88df      	ldrh	r7, [r3, #6]
 8010ab6:	889a      	ldrh	r2, [r3, #4]
 8010ab8:	433a      	orrs	r2, r7
 8010aba:	d010      	beq.n	8010ade <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010abc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010ac0:	2a00      	cmp	r2, #0
 8010ac2:	db0c      	blt.n	8010ade <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010ac4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010ac6:	42ba      	cmp	r2, r7
 8010ac8:	da09      	bge.n	8010ade <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010aca:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010ace:	42ba      	cmp	r2, r7
 8010ad0:	f102 0201 	add.w	r2, r2, #1
 8010ad4:	bf38      	it	cc
 8010ad6:	3308      	addcc	r3, #8
 8010ad8:	60a2      	str	r2, [r4, #8]
 8010ada:	bf38      	it	cc
 8010adc:	6123      	strcc	r3, [r4, #16]
 8010ade:	6923      	ldr	r3, [r4, #16]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	8018      	strh	r0, [r3, #0]
 8010ae4:	8059      	strh	r1, [r3, #2]
 8010ae6:	809a      	strh	r2, [r3, #4]
 8010ae8:	80da      	strh	r2, [r3, #6]
 8010aea:	6166      	str	r6, [r4, #20]
 8010aec:	6225      	str	r5, [r4, #32]
 8010aee:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010af4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8010af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af8:	b0d0      	sub	sp, #320	; 0x140
 8010afa:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010afe:	466c      	mov	r4, sp
 8010b00:	4627      	mov	r7, r4
 8010b02:	1a0d      	subs	r5, r1, r0
 8010b04:	f100 0308 	add.w	r3, r0, #8
 8010b08:	2d48      	cmp	r5, #72	; 0x48
 8010b0a:	f340 80d5 	ble.w	8010cb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010b0e:	112d      	asrs	r5, r5, #4
 8010b10:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010b14:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010b18:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8010b1c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8010b20:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010b24:	6816      	ldr	r6, [r2, #0]
 8010b26:	6006      	str	r6, [r0, #0]
 8010b28:	6856      	ldr	r6, [r2, #4]
 8010b2a:	6046      	str	r6, [r0, #4]
 8010b2c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010b30:	f8a2 8002 	strh.w	r8, [r2, #2]
 8010b34:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010b38:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010b3c:	f1a1 0208 	sub.w	r2, r1, #8
 8010b40:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010b44:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8010b48:	4565      	cmp	r5, ip
 8010b4a:	db06      	blt.n	8010b5a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8010b4c:	d119      	bne.n	8010b82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010b4e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8010b52:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8010b56:	42ae      	cmp	r6, r5
 8010b58:	dd13      	ble.n	8010b82 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010b5a:	460e      	mov	r6, r1
 8010b5c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8010b60:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8010b64:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010b68:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8010b6c:	601d      	str	r5, [r3, #0]
 8010b6e:	6875      	ldr	r5, [r6, #4]
 8010b70:	605d      	str	r5, [r3, #4]
 8010b72:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010b76:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010b7a:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010b7e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010b82:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010b86:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010b8a:	42ae      	cmp	r6, r5
 8010b8c:	db06      	blt.n	8010b9c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010b8e:	d116      	bne.n	8010bbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010b90:	f9b0 c000 	ldrsh.w	ip, [r0]
 8010b94:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010b98:	45ac      	cmp	ip, r5
 8010b9a:	da10      	bge.n	8010bbe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010b9c:	681d      	ldr	r5, [r3, #0]
 8010b9e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010ba2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010ba6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010baa:	6005      	str	r5, [r0, #0]
 8010bac:	685d      	ldr	r5, [r3, #4]
 8010bae:	f8a0 8008 	strh.w	r8, [r0, #8]
 8010bb2:	6045      	str	r5, [r0, #4]
 8010bb4:	8146      	strh	r6, [r0, #10]
 8010bb6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8010bba:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8010bbe:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010bc2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010bc6:	4565      	cmp	r5, ip
 8010bc8:	db06      	blt.n	8010bd8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8010bca:	d119      	bne.n	8010c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010bcc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8010bd0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010bd4:	42ae      	cmp	r6, r5
 8010bd6:	da13      	bge.n	8010c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010bd8:	460e      	mov	r6, r1
 8010bda:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010bde:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8010be2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010be6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8010bea:	6005      	str	r5, [r0, #0]
 8010bec:	6875      	ldr	r5, [r6, #4]
 8010bee:	6045      	str	r5, [r0, #4]
 8010bf0:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010bf4:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010bf8:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010bfc:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010c00:	3308      	adds	r3, #8
 8010c02:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8010c06:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8010c0a:	45e6      	cmp	lr, ip
 8010c0c:	dbf8      	blt.n	8010c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010c0e:	d105      	bne.n	8010c1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010c10:	f9b3 6000 	ldrsh.w	r6, [r3]
 8010c14:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010c18:	42ae      	cmp	r6, r5
 8010c1a:	dbf1      	blt.n	8010c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010c1c:	4615      	mov	r5, r2
 8010c1e:	3a08      	subs	r2, #8
 8010c20:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8010c24:	45b4      	cmp	ip, r6
 8010c26:	dbf9      	blt.n	8010c1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010c28:	d105      	bne.n	8010c36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8010c2a:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010c2e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8010c32:	45b0      	cmp	r8, r6
 8010c34:	dbf2      	blt.n	8010c1c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8010c36:	4293      	cmp	r3, r2
 8010c38:	f1a5 0608 	sub.w	r6, r5, #8
 8010c3c:	d816      	bhi.n	8010c6c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8010c3e:	f8d6 c000 	ldr.w	ip, [r6]
 8010c42:	f9b3 a000 	ldrsh.w	sl, [r3]
 8010c46:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8010c4a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8010c4e:	f8c3 c000 	str.w	ip, [r3]
 8010c52:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8010c56:	f8c3 c004 	str.w	ip, [r3, #4]
 8010c5a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010c5e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8010c62:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010c66:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010c6a:	e7c9      	b.n	8010c00 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8010c6c:	f8d6 e000 	ldr.w	lr, [r6]
 8010c70:	f9b0 a000 	ldrsh.w	sl, [r0]
 8010c74:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8010c78:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8010c7c:	f8c0 e000 	str.w	lr, [r0]
 8010c80:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8010c84:	1a16      	subs	r6, r2, r0
 8010c86:	f8c0 e004 	str.w	lr, [r0, #4]
 8010c8a:	f825 ac08 	strh.w	sl, [r5, #-8]
 8010c8e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8010c92:	f825 9c04 	strh.w	r9, [r5, #-4]
 8010c96:	f825 8c02 	strh.w	r8, [r5, #-2]
 8010c9a:	1acd      	subs	r5, r1, r3
 8010c9c:	10ed      	asrs	r5, r5, #3
 8010c9e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8010ca2:	bfb5      	itete	lt
 8010ca4:	e9c4 0200 	strdlt	r0, r2, [r4]
 8010ca8:	e9c4 3100 	strdge	r3, r1, [r4]
 8010cac:	460a      	movlt	r2, r1
 8010cae:	4603      	movge	r3, r0
 8010cb0:	3408      	adds	r4, #8
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	4611      	mov	r1, r2
 8010cb6:	e724      	b.n	8010b02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010cb8:	4299      	cmp	r1, r3
 8010cba:	d927      	bls.n	8010d0c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8010cbc:	f1a3 0210 	sub.w	r2, r3, #16
 8010cc0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010cc4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8010cc8:	45ac      	cmp	ip, r5
 8010cca:	db06      	blt.n	8010cda <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8010ccc:	d11c      	bne.n	8010d08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010cce:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8010cd2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8010cd6:	42ae      	cmp	r6, r5
 8010cd8:	da16      	bge.n	8010d08 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8010cda:	4615      	mov	r5, r2
 8010cdc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8010ce0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8010ce4:	3a08      	subs	r2, #8
 8010ce6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8010cea:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8010cee:	6196      	str	r6, [r2, #24]
 8010cf0:	42a8      	cmp	r0, r5
 8010cf2:	686e      	ldr	r6, [r5, #4]
 8010cf4:	f8a2 9010 	strh.w	r9, [r2, #16]
 8010cf8:	61d6      	str	r6, [r2, #28]
 8010cfa:	f8a2 c012 	strh.w	ip, [r2, #18]
 8010cfe:	f8a2 8014 	strh.w	r8, [r2, #20]
 8010d02:	f8a2 e016 	strh.w	lr, [r2, #22]
 8010d06:	d1db      	bne.n	8010cc0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8010d08:	3308      	adds	r3, #8
 8010d0a:	e7d5      	b.n	8010cb8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010d0c:	42bc      	cmp	r4, r7
 8010d0e:	d903      	bls.n	8010d18 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8010d10:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8010d14:	3c08      	subs	r4, #8
 8010d16:	e6f4      	b.n	8010b02 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8010d18:	b050      	add	sp, #320	; 0x140
 8010d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010d1e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8010d1e:	b510      	push	{r4, lr}
 8010d20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010d22:	4604      	mov	r4, r0
 8010d24:	07da      	lsls	r2, r3, #31
 8010d26:	d507      	bpl.n	8010d38 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8010d28:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8010d2c:	f7ff fe8c 	bl	8010a48 <_ZN8touchgfx7Outline6lineToEii>
 8010d30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010d32:	f023 0301 	bic.w	r3, r3, #1
 8010d36:	6243      	str	r3, [r0, #36]	; 0x24
 8010d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d3a:	079b      	lsls	r3, r3, #30
 8010d3c:	d521      	bpl.n	8010d82 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8010d3e:	6923      	ldr	r3, [r4, #16]
 8010d40:	88d9      	ldrh	r1, [r3, #6]
 8010d42:	889a      	ldrh	r2, [r3, #4]
 8010d44:	430a      	orrs	r2, r1
 8010d46:	d010      	beq.n	8010d6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010d48:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010d4c:	2a00      	cmp	r2, #0
 8010d4e:	db0c      	blt.n	8010d6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010d50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010d52:	428a      	cmp	r2, r1
 8010d54:	da09      	bge.n	8010d6a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8010d56:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8010d5a:	4291      	cmp	r1, r2
 8010d5c:	f102 0201 	add.w	r2, r2, #1
 8010d60:	bf88      	it	hi
 8010d62:	3308      	addhi	r3, #8
 8010d64:	60a2      	str	r2, [r4, #8]
 8010d66:	bf88      	it	hi
 8010d68:	6123      	strhi	r3, [r4, #16]
 8010d6a:	68a1      	ldr	r1, [r4, #8]
 8010d6c:	b129      	cbz	r1, 8010d7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010d6e:	6863      	ldr	r3, [r4, #4]
 8010d70:	4299      	cmp	r1, r3
 8010d72:	d802      	bhi.n	8010d7a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8010d74:	68e0      	ldr	r0, [r4, #12]
 8010d76:	f7ff febd 	bl	8010af4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8010d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d7c:	f023 0302 	bic.w	r3, r3, #2
 8010d80:	6263      	str	r3, [r4, #36]	; 0x24
 8010d82:	68e0      	ldr	r0, [r4, #12]
 8010d84:	bd10      	pop	{r4, pc}
	...

08010d88 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8010d88:	4b02      	ldr	r3, [pc, #8]	; (8010d94 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8010d8a:	6018      	str	r0, [r3, #0]
 8010d8c:	4b02      	ldr	r3, [pc, #8]	; (8010d98 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8010d8e:	6019      	str	r1, [r3, #0]
 8010d90:	4770      	bx	lr
 8010d92:	bf00      	nop
 8010d94:	2400f598 	.word	0x2400f598
 8010d98:	2400f59c 	.word	0x2400f59c

08010d9c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	4a02      	ldr	r2, [pc, #8]	; (8010da8 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	4a02      	ldr	r2, [pc, #8]	; (8010dac <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8010da4:	6013      	str	r3, [r2, #0]
 8010da6:	4770      	bx	lr
 8010da8:	2400f598 	.word	0x2400f598
 8010dac:	2400f59c 	.word	0x2400f59c

08010db0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8010db0:	4b01      	ldr	r3, [pc, #4]	; (8010db8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8010db2:	6818      	ldr	r0, [r3, #0]
 8010db4:	4770      	bx	lr
 8010db6:	bf00      	nop
 8010db8:	2400f598 	.word	0x2400f598

08010dbc <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010dbc:	4b01      	ldr	r3, [pc, #4]	; (8010dc4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010dbe:	6818      	ldr	r0, [r3, #0]
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	2400f59c 	.word	0x2400f59c

08010dc8 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	6803      	ldr	r3, [r0, #0]
 8010dcc:	460c      	mov	r4, r1
 8010dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dd0:	4798      	blx	r3
 8010dd2:	1b03      	subs	r3, r0, r4
 8010dd4:	4258      	negs	r0, r3
 8010dd6:	4158      	adcs	r0, r3
 8010dd8:	bd10      	pop	{r4, pc}
	...

08010ddc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010ddc:	4b01      	ldr	r3, [pc, #4]	; (8010de4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010dde:	6019      	str	r1, [r3, #0]
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	2400f5a0 	.word	0x2400f5a0

08010de8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	4696      	mov	lr, r2
 8010dee:	b097      	sub	sp, #92	; 0x5c
 8010df0:	4605      	mov	r5, r0
 8010df2:	4614      	mov	r4, r2
 8010df4:	460e      	mov	r6, r1
 8010df6:	461f      	mov	r7, r3
 8010df8:	f10d 0c1c 	add.w	ip, sp, #28
 8010dfc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010e00:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8010e04:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010e08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e10:	f8de 3000 	ldr.w	r3, [lr]
 8010e14:	f104 0e14 	add.w	lr, r4, #20
 8010e18:	f8cc 3000 	str.w	r3, [ip]
 8010e1c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010e20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e28:	f8de 3000 	ldr.w	r3, [lr]
 8010e2c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010e30:	f8cc 3000 	str.w	r3, [ip]
 8010e34:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010e38:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e40:	f8de 3000 	ldr.w	r3, [lr]
 8010e44:	4631      	mov	r1, r6
 8010e46:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010e48:	4628      	mov	r0, r5
 8010e4a:	f8cc 3000 	str.w	r3, [ip]
 8010e4e:	682b      	ldr	r3, [r5, #0]
 8010e50:	9201      	str	r2, [sp, #4]
 8010e52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010e54:	f8cd 8008 	str.w	r8, [sp, #8]
 8010e58:	9200      	str	r2, [sp, #0]
 8010e5a:	aa07      	add	r2, sp, #28
 8010e5c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010e60:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8010e64:	463b      	mov	r3, r7
 8010e66:	47d8      	blx	fp
 8010e68:	46a6      	mov	lr, r4
 8010e6a:	f10d 0c1c 	add.w	ip, sp, #28
 8010e6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e76:	f8de 3000 	ldr.w	r3, [lr]
 8010e7a:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010e7e:	343c      	adds	r4, #60	; 0x3c
 8010e80:	f8cc 3000 	str.w	r3, [ip]
 8010e84:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010e88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e90:	f8de 3000 	ldr.w	r3, [lr]
 8010e94:	f8cc 3000 	str.w	r3, [ip]
 8010e98:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ea2:	6823      	ldr	r3, [r4, #0]
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4628      	mov	r0, r5
 8010ea8:	f8cc 3000 	str.w	r3, [ip]
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010eb2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010eb4:	f8cd 8008 	str.w	r8, [sp, #8]
 8010eb8:	9201      	str	r2, [sp, #4]
 8010eba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010ebc:	9200      	str	r2, [sp, #0]
 8010ebe:	aa07      	add	r2, sp, #28
 8010ec0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8010ec2:	463b      	mov	r3, r7
 8010ec4:	47a0      	blx	r4
 8010ec6:	b017      	add	sp, #92	; 0x5c
 8010ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010ecc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed0:	b08d      	sub	sp, #52	; 0x34
 8010ed2:	4688      	mov	r8, r1
 8010ed4:	f8d3 c000 	ldr.w	ip, [r3]
 8010ed8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010eda:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010ede:	680f      	ldr	r7, [r1, #0]
 8010ee0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010ee4:	eba7 070c 	sub.w	r7, r7, ip
 8010ee8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010eec:	edd3 6a07 	vldr	s13, [r3, #28]
 8010ef0:	42bc      	cmp	r4, r7
 8010ef2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010ef4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8010ef8:	bfa8      	it	ge
 8010efa:	463c      	movge	r4, r7
 8010efc:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010f00:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010f04:	ee07 4a90 	vmov	s15, r4
 8010f08:	eb09 0e0c 	add.w	lr, r9, ip
 8010f0c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010f10:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010f14:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8010f18:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8010f1c:	4571      	cmp	r1, lr
 8010f1e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010f22:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010f26:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010f2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010f2e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8010f32:	ee32 1a05 	vadd.f32	s2, s4, s10
 8010f36:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010f3a:	ee36 0a84 	vadd.f32	s0, s13, s8
 8010f3e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010f42:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010f46:	f340 808c 	ble.w	8011062 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8010f4a:	eba1 060e 	sub.w	r6, r1, lr
 8010f4e:	fb96 f5f4 	sdiv	r5, r6, r4
 8010f52:	ee07 5a10 	vmov	s14, r5
 8010f56:	2d00      	cmp	r5, #0
 8010f58:	fb04 6615 	mls	r6, r4, r5, r6
 8010f5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f60:	eea7 0a04 	vfma.f32	s0, s14, s8
 8010f64:	eee7 0a24 	vfma.f32	s1, s14, s9
 8010f68:	eea7 1a05 	vfma.f32	s2, s14, s10
 8010f6c:	dd12      	ble.n	8010f94 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8010f6e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8010f72:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8010f76:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010f7a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f82:	bf14      	ite	ne
 8010f84:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010f88:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010f8c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010f90:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010f94:	fb05 f204 	mul.w	r2, r5, r4
 8010f98:	1abf      	subs	r7, r7, r2
 8010f9a:	4494      	add	ip, r2
 8010f9c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010fa0:	4411      	add	r1, r2
 8010fa2:	eb09 020c 	add.w	r2, r9, ip
 8010fa6:	b209      	sxth	r1, r1
 8010fa8:	443a      	add	r2, r7
 8010faa:	428a      	cmp	r2, r1
 8010fac:	bfc4      	itt	gt
 8010fae:	eba1 0209 	subgt.w	r2, r1, r9
 8010fb2:	eba2 070c 	subgt.w	r7, r2, ip
 8010fb6:	2f00      	cmp	r7, #0
 8010fb8:	dd50      	ble.n	801105c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8010fba:	fb97 f1f4 	sdiv	r1, r7, r4
 8010fbe:	fb04 7211 	mls	r2, r4, r1, r7
 8010fc2:	b90a      	cbnz	r2, 8010fc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010fc4:	3901      	subs	r1, #1
 8010fc6:	4622      	mov	r2, r4
 8010fc8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010fcc:	6840      	ldr	r0, [r0, #4]
 8010fce:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8010fd2:	44b6      	add	lr, r6
 8010fd4:	f8d0 a000 	ldr.w	sl, [r0]
 8010fd8:	2900      	cmp	r1, #0
 8010fda:	bfcc      	ite	gt
 8010fdc:	46a1      	movgt	r9, r4
 8010fde:	4691      	movle	r9, r2
 8010fe0:	900b      	str	r0, [sp, #44]	; 0x2c
 8010fe2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010fe4:	fb04 e505 	mla	r5, r4, r5, lr
 8010fe8:	eef0 6a42 	vmov.f32	s13, s4
 8010fec:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010ff0:	9008      	str	r0, [sp, #32]
 8010ff2:	eeb0 7a61 	vmov.f32	s14, s3
 8010ff6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010ff8:	695b      	ldr	r3, [r3, #20]
 8010ffa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010ffe:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011002:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011006:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011008:	445b      	add	r3, fp
 801100a:	9307      	str	r3, [sp, #28]
 801100c:	ee16 3a90 	vmov	r3, s13
 8011010:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011014:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8011018:	ee21 3a23 	vmul.f32	s6, s2, s7
 801101c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011020:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011024:	ee17 7a90 	vmov	r7, s15
 8011028:	ee73 7a42 	vsub.f32	s15, s6, s4
 801102c:	fb97 f7f4 	sdiv	r7, r7, r4
 8011030:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011034:	ee17 ca90 	vmov	ip, s15
 8011038:	fb9c fcf4 	sdiv	ip, ip, r4
 801103c:	fb0c 3306 	mla	r3, ip, r6, r3
 8011040:	9302      	str	r3, [sp, #8]
 8011042:	ee17 3a10 	vmov	r3, s14
 8011046:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801104a:	fb07 3706 	mla	r7, r7, r6, r3
 801104e:	eba9 0306 	sub.w	r3, r9, r6
 8011052:	e9cd 4700 	strd	r4, r7, [sp]
 8011056:	f8da 4008 	ldr.w	r4, [sl, #8]
 801105a:	47a0      	blx	r4
 801105c:	b00d      	add	sp, #52	; 0x34
 801105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011062:	2500      	movs	r5, #0
 8011064:	462e      	mov	r6, r5
 8011066:	e799      	b.n	8010f9c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801106c:	b0db      	sub	sp, #364	; 0x16c
 801106e:	461d      	mov	r5, r3
 8011070:	4614      	mov	r4, r2
 8011072:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011076:	910f      	str	r1, [sp, #60]	; 0x3c
 8011078:	4629      	mov	r1, r5
 801107a:	930a      	str	r3, [sp, #40]	; 0x28
 801107c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8011080:	9009      	str	r0, [sp, #36]	; 0x24
 8011082:	930b      	str	r3, [sp, #44]	; 0x2c
 8011084:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011088:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801108c:	9310      	str	r3, [sp, #64]	; 0x40
 801108e:	6803      	ldr	r3, [r0, #0]
 8011090:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8011092:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011096:	47b8      	blx	r7
 8011098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801109a:	6058      	str	r0, [r3, #4]
 801109c:	2800      	cmp	r0, #0
 801109e:	f000 83a1 	beq.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80110a2:	682b      	ldr	r3, [r5, #0]
 80110a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80110a8:	ed94 7a02 	vldr	s14, [r4, #8]
 80110ac:	9314      	str	r3, [sp, #80]	; 0x50
 80110ae:	686b      	ldr	r3, [r5, #4]
 80110b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110b4:	9315      	str	r3, [sp, #84]	; 0x54
 80110b6:	4bc1      	ldr	r3, [pc, #772]	; (80113bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80110b8:	7819      	ldrb	r1, [r3, #0]
 80110ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80110be:	2900      	cmp	r1, #0
 80110c0:	bf16      	itet	ne
 80110c2:	4619      	movne	r1, r3
 80110c4:	4611      	moveq	r1, r2
 80110c6:	4613      	movne	r3, r2
 80110c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110cc:	9116      	str	r1, [sp, #88]	; 0x58
 80110ce:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80110d2:	f240 8387 	bls.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80110d6:	ed94 7a07 	vldr	s14, [r4, #28]
 80110da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e2:	f240 837f 	bls.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80110e6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80110ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80110ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110f2:	f240 8377 	bls.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80110f6:	6822      	ldr	r2, [r4, #0]
 80110f8:	4bb1      	ldr	r3, [pc, #708]	; (80113c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80110fa:	429a      	cmp	r2, r3
 80110fc:	f2c0 8372 	blt.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011100:	49b0      	ldr	r1, [pc, #704]	; (80113c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011102:	6963      	ldr	r3, [r4, #20]
 8011104:	428a      	cmp	r2, r1
 8011106:	f300 836d 	bgt.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801110a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801110e:	48ae      	ldr	r0, [pc, #696]	; (80113c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011110:	33ff      	adds	r3, #255	; 0xff
 8011112:	4283      	cmp	r3, r0
 8011114:	f200 8366 	bhi.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011118:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801111a:	4dac      	ldr	r5, [pc, #688]	; (80113cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801111c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8011120:	33ff      	adds	r3, #255	; 0xff
 8011122:	42ab      	cmp	r3, r5
 8011124:	f200 835e 	bhi.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011128:	6862      	ldr	r2, [r4, #4]
 801112a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801112e:	33ff      	adds	r3, #255	; 0xff
 8011130:	4283      	cmp	r3, r0
 8011132:	f200 8357 	bhi.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011136:	69a1      	ldr	r1, [r4, #24]
 8011138:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801113c:	33ff      	adds	r3, #255	; 0xff
 801113e:	4283      	cmp	r3, r0
 8011140:	f200 8350 	bhi.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011144:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011146:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801114a:	30ff      	adds	r0, #255	; 0xff
 801114c:	42a8      	cmp	r0, r5
 801114e:	f200 8349 	bhi.w	80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011152:	428a      	cmp	r2, r1
 8011154:	f280 8110 	bge.w	8011378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011158:	429a      	cmp	r2, r3
 801115a:	f300 8119 	bgt.w	8011390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801115e:	4299      	cmp	r1, r3
 8011160:	f280 811d 	bge.w	801139e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011164:	2502      	movs	r5, #2
 8011166:	2701      	movs	r7, #1
 8011168:	46a9      	mov	r9, r5
 801116a:	46b8      	mov	r8, r7
 801116c:	f04f 0a00 	mov.w	sl, #0
 8011170:	4621      	mov	r1, r4
 8011172:	a849      	add	r0, sp, #292	; 0x124
 8011174:	f003 fd2a 	bl	8014bcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011178:	4622      	mov	r2, r4
 801117a:	4653      	mov	r3, sl
 801117c:	a949      	add	r1, sp, #292	; 0x124
 801117e:	f8cd 9000 	str.w	r9, [sp]
 8011182:	a819      	add	r0, sp, #100	; 0x64
 8011184:	f003 fe52 	bl	8014e2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011188:	4622      	mov	r2, r4
 801118a:	4653      	mov	r3, sl
 801118c:	a949      	add	r1, sp, #292	; 0x124
 801118e:	f8cd 8000 	str.w	r8, [sp]
 8011192:	a829      	add	r0, sp, #164	; 0xa4
 8011194:	f003 fe4a 	bl	8014e2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011198:	4643      	mov	r3, r8
 801119a:	4622      	mov	r2, r4
 801119c:	a949      	add	r1, sp, #292	; 0x124
 801119e:	f8cd 9000 	str.w	r9, [sp]
 80111a2:	a839      	add	r0, sp, #228	; 0xe4
 80111a4:	f003 fe42 	bl	8014e2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80111a8:	42af      	cmp	r7, r5
 80111aa:	af12      	add	r7, sp, #72	; 0x48
 80111ac:	bfb7      	itett	lt
 80111ae:	2300      	movlt	r3, #0
 80111b0:	2301      	movge	r3, #1
 80111b2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80111b4:	ac19      	addlt	r4, sp, #100	; 0x64
 80111b6:	bfb1      	iteee	lt
 80111b8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80111ba:	ad19      	addge	r5, sp, #100	; 0x64
 80111bc:	930e      	strge	r3, [sp, #56]	; 0x38
 80111be:	ac29      	addge	r4, sp, #164	; 0xa4
 80111c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80111c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80111c6:	e887 0003 	stmia.w	r7, {r0, r1}
 80111ca:	b928      	cbnz	r0, 80111d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80111cc:	4b80      	ldr	r3, [pc, #512]	; (80113d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80111ce:	6818      	ldr	r0, [r3, #0]
 80111d0:	6803      	ldr	r3, [r0, #0]
 80111d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d4:	4798      	blx	r3
 80111d6:	6038      	str	r0, [r7, #0]
 80111d8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80111da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80111de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80111e2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80111e4:	930c      	str	r3, [sp, #48]	; 0x30
 80111e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80111e8:	6963      	ldr	r3, [r4, #20]
 80111ea:	440b      	add	r3, r1
 80111ec:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80111f0:	4408      	add	r0, r1
 80111f2:	b200      	sxth	r0, r0
 80111f4:	4283      	cmp	r3, r0
 80111f6:	900d      	str	r0, [sp, #52]	; 0x34
 80111f8:	f280 80dd 	bge.w	80113b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80111fc:	428b      	cmp	r3, r1
 80111fe:	da08      	bge.n	8011212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011200:	2a00      	cmp	r2, #0
 8011202:	dd06      	ble.n	8011212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011204:	1acb      	subs	r3, r1, r3
 8011206:	429a      	cmp	r2, r3
 8011208:	f2c0 80e4 	blt.w	80113d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801120c:	2b00      	cmp	r3, #0
 801120e:	f300 80e2 	bgt.w	80113d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011212:	6967      	ldr	r7, [r4, #20]
 8011214:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801121a:	443b      	add	r3, r7
 801121c:	461f      	mov	r7, r3
 801121e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011220:	1bdf      	subs	r7, r3, r7
 8011222:	4297      	cmp	r7, r2
 8011224:	bfa8      	it	ge
 8011226:	4617      	movge	r7, r2
 8011228:	2f00      	cmp	r7, #0
 801122a:	f340 8166 	ble.w	80114fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801122e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011230:	6829      	ldr	r1, [r5, #0]
 8011232:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011236:	f9bb 3000 	ldrsh.w	r3, [fp]
 801123a:	4411      	add	r1, r2
 801123c:	6820      	ldr	r0, [r4, #0]
 801123e:	4299      	cmp	r1, r3
 8011240:	dd1a      	ble.n	8011278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011242:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011246:	4402      	add	r2, r0
 8011248:	440b      	add	r3, r1
 801124a:	b21b      	sxth	r3, r3
 801124c:	429a      	cmp	r2, r3
 801124e:	dc13      	bgt.n	8011278 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011250:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011252:	a912      	add	r1, sp, #72	; 0x48
 8011254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	9206      	str	r2, [sp, #24]
 801125c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801125e:	9500      	str	r5, [sp, #0]
 8011260:	9205      	str	r2, [sp, #20]
 8011262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011264:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011268:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801126a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801126e:	aa49      	add	r2, sp, #292	; 0x124
 8011270:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8011274:	4623      	mov	r3, r4
 8011276:	47c8      	blx	r9
 8011278:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801127c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011280:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011284:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011288:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801128c:	68a1      	ldr	r1, [r4, #8]
 801128e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011292:	ed94 6a08 	vldr	s12, [r4, #32]
 8011296:	edd4 6a07 	vldr	s13, [r4, #28]
 801129a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801129e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80112a2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80112a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80112aa:	edc4 6a07 	vstr	s13, [r4, #28]
 80112ae:	441a      	add	r2, r3
 80112b0:	6963      	ldr	r3, [r4, #20]
 80112b2:	3301      	adds	r3, #1
 80112b4:	6022      	str	r2, [r4, #0]
 80112b6:	6163      	str	r3, [r4, #20]
 80112b8:	69a3      	ldr	r3, [r4, #24]
 80112ba:	3b01      	subs	r3, #1
 80112bc:	61a3      	str	r3, [r4, #24]
 80112be:	6923      	ldr	r3, [r4, #16]
 80112c0:	440b      	add	r3, r1
 80112c2:	68e1      	ldr	r1, [r4, #12]
 80112c4:	428b      	cmp	r3, r1
 80112c6:	6123      	str	r3, [r4, #16]
 80112c8:	db15      	blt.n	80112f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80112ca:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80112ce:	3201      	adds	r2, #1
 80112d0:	1a5b      	subs	r3, r3, r1
 80112d2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80112d6:	6022      	str	r2, [r4, #0]
 80112d8:	6123      	str	r3, [r4, #16]
 80112da:	edc4 6a07 	vstr	s13, [r4, #28]
 80112de:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80112e2:	ee36 7a87 	vadd.f32	s14, s13, s14
 80112e6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80112ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80112ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112f2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80112f6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80112fa:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80112fe:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011302:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011306:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801130a:	68a9      	ldr	r1, [r5, #8]
 801130c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011310:	ed95 6a08 	vldr	s12, [r5, #32]
 8011314:	edd5 6a07 	vldr	s13, [r5, #28]
 8011318:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801131c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011320:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011328:	edc5 6a07 	vstr	s13, [r5, #28]
 801132c:	441a      	add	r2, r3
 801132e:	696b      	ldr	r3, [r5, #20]
 8011330:	3301      	adds	r3, #1
 8011332:	602a      	str	r2, [r5, #0]
 8011334:	616b      	str	r3, [r5, #20]
 8011336:	69ab      	ldr	r3, [r5, #24]
 8011338:	3b01      	subs	r3, #1
 801133a:	61ab      	str	r3, [r5, #24]
 801133c:	692b      	ldr	r3, [r5, #16]
 801133e:	440b      	add	r3, r1
 8011340:	68e9      	ldr	r1, [r5, #12]
 8011342:	428b      	cmp	r3, r1
 8011344:	612b      	str	r3, [r5, #16]
 8011346:	db15      	blt.n	8011374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011348:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801134c:	3201      	adds	r2, #1
 801134e:	1a5b      	subs	r3, r3, r1
 8011350:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011354:	602a      	str	r2, [r5, #0]
 8011356:	612b      	str	r3, [r5, #16]
 8011358:	edc5 6a07 	vstr	s13, [r5, #28]
 801135c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011360:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011364:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011368:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011370:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011374:	3f01      	subs	r7, #1
 8011376:	e757      	b.n	8011228 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011378:	4299      	cmp	r1, r3
 801137a:	dc13      	bgt.n	80113a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801137c:	429a      	cmp	r2, r3
 801137e:	da14      	bge.n	80113aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011380:	2502      	movs	r5, #2
 8011382:	2703      	movs	r7, #3
 8011384:	f04f 0800 	mov.w	r8, #0
 8011388:	46a9      	mov	r9, r5
 801138a:	f04f 0a01 	mov.w	sl, #1
 801138e:	e6ef      	b.n	8011170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011390:	2501      	movs	r5, #1
 8011392:	2700      	movs	r7, #0
 8011394:	46a9      	mov	r9, r5
 8011396:	46b8      	mov	r8, r7
 8011398:	f04f 0a02 	mov.w	sl, #2
 801139c:	e6e8      	b.n	8011170 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801139e:	2501      	movs	r5, #1
 80113a0:	2702      	movs	r7, #2
 80113a2:	e6e1      	b.n	8011168 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80113a4:	2500      	movs	r5, #0
 80113a6:	2701      	movs	r7, #1
 80113a8:	e7f4      	b.n	8011394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80113aa:	2702      	movs	r7, #2
 80113ac:	2503      	movs	r5, #3
 80113ae:	f04f 0900 	mov.w	r9, #0
 80113b2:	46b8      	mov	r8, r7
 80113b4:	e7e9      	b.n	801138a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80113b6:	4613      	mov	r3, r2
 80113b8:	e728      	b.n	801120c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80113ba:	bf00      	nop
 80113bc:	2400f588 	.word	0x2400f588
 80113c0:	fffd8f01 	.word	0xfffd8f01
 80113c4:	00027100 	.word	0x00027100
 80113c8:	0004e1ff 	.word	0x0004e1ff
 80113cc:	0004e1fe 	.word	0x0004e1fe
 80113d0:	2400f590 	.word	0x2400f590
 80113d4:	4613      	mov	r3, r2
 80113d6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80113d8:	469e      	mov	lr, r3
 80113da:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80113dc:	469c      	mov	ip, r3
 80113de:	9111      	str	r1, [sp, #68]	; 0x44
 80113e0:	f04f 0900 	mov.w	r9, #0
 80113e4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80113e8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80113ec:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80113f0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80113f4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80113f8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80113fc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8011400:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8011404:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8011408:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801140c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8011410:	f1bc 0f00 	cmp.w	ip, #0
 8011414:	d147      	bne.n	80114a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011416:	eb03 0c07 	add.w	ip, r3, r7
 801141a:	1ad7      	subs	r7, r2, r3
 801141c:	f1b9 0f00 	cmp.w	r9, #0
 8011420:	d009      	beq.n	8011436 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011422:	9029      	str	r0, [sp, #164]	; 0xa4
 8011424:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8011428:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801142c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8011430:	912d      	str	r1, [sp, #180]	; 0xb4
 8011432:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8011436:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011438:	f04f 0800 	mov.w	r8, #0
 801143c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011440:	9111      	str	r1, [sp, #68]	; 0x44
 8011442:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011446:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801144a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801144e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011452:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011456:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801145a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801145e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011462:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011466:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801146a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801146e:	f1be 0f00 	cmp.w	lr, #0
 8011472:	d031      	beq.n	80114d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011474:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011476:	4450      	add	r0, sl
 8011478:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801147c:	4431      	add	r1, r6
 801147e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011482:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011486:	4549      	cmp	r1, r9
 8011488:	db08      	blt.n	801149c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801148a:	ee77 7a85 	vadd.f32	s15, s15, s10
 801148e:	3001      	adds	r0, #1
 8011490:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011494:	eba1 0109 	sub.w	r1, r1, r9
 8011498:	ee37 7a06 	vadd.f32	s14, s14, s12
 801149c:	f10e 3eff 	add.w	lr, lr, #4294967295
 80114a0:	f04f 0801 	mov.w	r8, #1
 80114a4:	e7e3      	b.n	801146e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80114a6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80114a8:	4450      	add	r0, sl
 80114aa:	ee37 7a24 	vadd.f32	s14, s14, s9
 80114ae:	4431      	add	r1, r6
 80114b0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80114b4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80114b8:	4541      	cmp	r1, r8
 80114ba:	db08      	blt.n	80114ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80114bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 80114c0:	3001      	adds	r0, #1
 80114c2:	ee37 7a25 	vadd.f32	s14, s14, s11
 80114c6:	eba1 0108 	sub.w	r1, r1, r8
 80114ca:	ee77 7a86 	vadd.f32	s15, s15, s12
 80114ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80114d2:	f04f 0901 	mov.w	r9, #1
 80114d6:	e79b      	b.n	8011410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80114d8:	449c      	add	ip, r3
 80114da:	1aff      	subs	r7, r7, r3
 80114dc:	f1b8 0f00 	cmp.w	r8, #0
 80114e0:	d009      	beq.n	80114f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80114e2:	9019      	str	r0, [sp, #100]	; 0x64
 80114e4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80114e8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80114ec:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80114f0:	911d      	str	r1, [sp, #116]	; 0x74
 80114f2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80114f6:	1ad2      	subs	r2, r2, r3
 80114f8:	e68b      	b.n	8011212 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80114fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114fc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f000 80d1 	beq.w	80116a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011504:	ad19      	add	r5, sp, #100	; 0x64
 8011506:	ac39      	add	r4, sp, #228	; 0xe4
 8011508:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801150a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801150e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011512:	930c      	str	r3, [sp, #48]	; 0x30
 8011514:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011516:	6963      	ldr	r3, [r4, #20]
 8011518:	440b      	add	r3, r1
 801151a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801151e:	4408      	add	r0, r1
 8011520:	b200      	sxth	r0, r0
 8011522:	4283      	cmp	r3, r0
 8011524:	900d      	str	r0, [sp, #52]	; 0x34
 8011526:	f280 80c1 	bge.w	80116ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801152a:	428b      	cmp	r3, r1
 801152c:	da08      	bge.n	8011540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801152e:	2a00      	cmp	r2, #0
 8011530:	dd06      	ble.n	8011540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011532:	1acb      	subs	r3, r1, r3
 8011534:	429a      	cmp	r2, r3
 8011536:	f2c0 80bb 	blt.w	80116b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801153a:	2b00      	cmp	r3, #0
 801153c:	f300 80b9 	bgt.w	80116b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011540:	6967      	ldr	r7, [r4, #20]
 8011542:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011548:	443b      	add	r3, r7
 801154a:	461f      	mov	r7, r3
 801154c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801154e:	1bdf      	subs	r7, r3, r7
 8011550:	4297      	cmp	r7, r2
 8011552:	bfa8      	it	ge
 8011554:	4617      	movge	r7, r2
 8011556:	2f00      	cmp	r7, #0
 8011558:	f340 813c 	ble.w	80117d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801155c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801155e:	6829      	ldr	r1, [r5, #0]
 8011560:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011564:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011568:	4411      	add	r1, r2
 801156a:	6820      	ldr	r0, [r4, #0]
 801156c:	4299      	cmp	r1, r3
 801156e:	dd1a      	ble.n	80115a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011570:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011574:	4402      	add	r2, r0
 8011576:	440b      	add	r3, r1
 8011578:	b21b      	sxth	r3, r3
 801157a:	429a      	cmp	r2, r3
 801157c:	dc13      	bgt.n	80115a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801157e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011580:	a912      	add	r1, sp, #72	; 0x48
 8011582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011584:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	9206      	str	r2, [sp, #24]
 801158a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801158c:	9500      	str	r5, [sp, #0]
 801158e:	9205      	str	r2, [sp, #20]
 8011590:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011592:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011596:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011598:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801159c:	aa49      	add	r2, sp, #292	; 0x124
 801159e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80115a2:	4623      	mov	r3, r4
 80115a4:	47c8      	blx	r9
 80115a6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80115aa:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80115ae:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80115b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80115b6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80115ba:	68a1      	ldr	r1, [r4, #8]
 80115bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80115c0:	ed94 6a08 	vldr	s12, [r4, #32]
 80115c4:	edd4 6a07 	vldr	s13, [r4, #28]
 80115c8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80115cc:	ee76 6a86 	vadd.f32	s13, s13, s12
 80115d0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80115d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80115d8:	edc4 6a07 	vstr	s13, [r4, #28]
 80115dc:	441a      	add	r2, r3
 80115de:	6963      	ldr	r3, [r4, #20]
 80115e0:	3301      	adds	r3, #1
 80115e2:	6022      	str	r2, [r4, #0]
 80115e4:	6163      	str	r3, [r4, #20]
 80115e6:	69a3      	ldr	r3, [r4, #24]
 80115e8:	3b01      	subs	r3, #1
 80115ea:	61a3      	str	r3, [r4, #24]
 80115ec:	6923      	ldr	r3, [r4, #16]
 80115ee:	440b      	add	r3, r1
 80115f0:	68e1      	ldr	r1, [r4, #12]
 80115f2:	428b      	cmp	r3, r1
 80115f4:	6123      	str	r3, [r4, #16]
 80115f6:	db15      	blt.n	8011624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80115f8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80115fc:	3201      	adds	r2, #1
 80115fe:	1a5b      	subs	r3, r3, r1
 8011600:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011604:	6022      	str	r2, [r4, #0]
 8011606:	6123      	str	r3, [r4, #16]
 8011608:	edc4 6a07 	vstr	s13, [r4, #28]
 801160c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011610:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011614:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011618:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801161c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011620:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011624:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011628:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801162c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011634:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011638:	68a9      	ldr	r1, [r5, #8]
 801163a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801163e:	ed95 6a08 	vldr	s12, [r5, #32]
 8011642:	edd5 6a07 	vldr	s13, [r5, #28]
 8011646:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801164a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801164e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011652:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011656:	edc5 6a07 	vstr	s13, [r5, #28]
 801165a:	441a      	add	r2, r3
 801165c:	696b      	ldr	r3, [r5, #20]
 801165e:	3301      	adds	r3, #1
 8011660:	602a      	str	r2, [r5, #0]
 8011662:	616b      	str	r3, [r5, #20]
 8011664:	69ab      	ldr	r3, [r5, #24]
 8011666:	3b01      	subs	r3, #1
 8011668:	61ab      	str	r3, [r5, #24]
 801166a:	692b      	ldr	r3, [r5, #16]
 801166c:	440b      	add	r3, r1
 801166e:	68e9      	ldr	r1, [r5, #12]
 8011670:	428b      	cmp	r3, r1
 8011672:	612b      	str	r3, [r5, #16]
 8011674:	db15      	blt.n	80116a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011676:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801167a:	3201      	adds	r2, #1
 801167c:	1a5b      	subs	r3, r3, r1
 801167e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011682:	602a      	str	r2, [r5, #0]
 8011684:	612b      	str	r3, [r5, #16]
 8011686:	edc5 6a07 	vstr	s13, [r5, #28]
 801168a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801168e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011692:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011696:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801169a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801169e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80116a2:	3f01      	subs	r7, #1
 80116a4:	e757      	b.n	8011556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80116a6:	ad39      	add	r5, sp, #228	; 0xe4
 80116a8:	ac19      	add	r4, sp, #100	; 0x64
 80116aa:	e72d      	b.n	8011508 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80116ac:	4613      	mov	r3, r2
 80116ae:	e744      	b.n	801153a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80116b0:	4613      	mov	r3, r2
 80116b2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80116b4:	469e      	mov	lr, r3
 80116b6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80116ba:	461f      	mov	r7, r3
 80116bc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80116c0:	f04f 0900 	mov.w	r9, #0
 80116c4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80116c8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80116cc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80116d0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80116d4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80116d8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80116da:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80116de:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80116e2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80116e6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80116ea:	960e      	str	r6, [sp, #56]	; 0x38
 80116ec:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80116f0:	2f00      	cmp	r7, #0
 80116f2:	d146      	bne.n	8011782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80116f4:	449c      	add	ip, r3
 80116f6:	1ad7      	subs	r7, r2, r3
 80116f8:	f1b9 0f00 	cmp.w	r9, #0
 80116fc:	d009      	beq.n	8011712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80116fe:	9039      	str	r0, [sp, #228]	; 0xe4
 8011700:	913d      	str	r1, [sp, #244]	; 0xf4
 8011702:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8011706:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801170a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801170e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8011712:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011714:	f04f 0800 	mov.w	r8, #0
 8011718:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801171c:	910e      	str	r1, [sp, #56]	; 0x38
 801171e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011722:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011726:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801172a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801172e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011732:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011736:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801173a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801173e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011742:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011746:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801174a:	f1be 0f00 	cmp.w	lr, #0
 801174e:	d030      	beq.n	80117b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011750:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011752:	4450      	add	r0, sl
 8011754:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011758:	4431      	add	r1, r6
 801175a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801175e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011762:	4549      	cmp	r1, r9
 8011764:	db08      	blt.n	8011778 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011766:	ee77 7a85 	vadd.f32	s15, s15, s10
 801176a:	3001      	adds	r0, #1
 801176c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011770:	eba1 0109 	sub.w	r1, r1, r9
 8011774:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011778:	f10e 3eff 	add.w	lr, lr, #4294967295
 801177c:	f04f 0801 	mov.w	r8, #1
 8011780:	e7e3      	b.n	801174a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011782:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011784:	4450      	add	r0, sl
 8011786:	ee37 7a24 	vadd.f32	s14, s14, s9
 801178a:	4431      	add	r1, r6
 801178c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011790:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011794:	4541      	cmp	r1, r8
 8011796:	db08      	blt.n	80117aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011798:	ee76 6a85 	vadd.f32	s13, s13, s10
 801179c:	3001      	adds	r0, #1
 801179e:	ee37 7a25 	vadd.f32	s14, s14, s11
 80117a2:	eba1 0108 	sub.w	r1, r1, r8
 80117a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80117aa:	3f01      	subs	r7, #1
 80117ac:	f04f 0901 	mov.w	r9, #1
 80117b0:	e79e      	b.n	80116f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80117b2:	449c      	add	ip, r3
 80117b4:	1aff      	subs	r7, r7, r3
 80117b6:	f1b8 0f00 	cmp.w	r8, #0
 80117ba:	d009      	beq.n	80117d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80117bc:	9019      	str	r0, [sp, #100]	; 0x64
 80117be:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80117c2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80117c6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80117ca:	911d      	str	r1, [sp, #116]	; 0x74
 80117cc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80117d0:	1ad2      	subs	r2, r2, r3
 80117d2:	e6b5      	b.n	8011540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80117d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	b923      	cbnz	r3, 80117e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117da:	4b04      	ldr	r3, [pc, #16]	; (80117ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80117dc:	6818      	ldr	r0, [r3, #0]
 80117de:	6803      	ldr	r3, [r0, #0]
 80117e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e2:	4798      	blx	r3
 80117e4:	b05b      	add	sp, #364	; 0x16c
 80117e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ea:	bf00      	nop
 80117ec:	2400f590 	.word	0x2400f590

080117f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80117f0:	b570      	push	{r4, r5, r6, lr}
 80117f2:	4604      	mov	r4, r0
 80117f4:	2500      	movs	r5, #0
 80117f6:	9805      	ldr	r0, [sp, #20]
 80117f8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80117fc:	6061      	str	r1, [r4, #4]
 80117fe:	8263      	strh	r3, [r4, #18]
 8011800:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8011804:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8011808:	8025      	strh	r5, [r4, #0]
 801180a:	7221      	strb	r1, [r4, #8]
 801180c:	7266      	strb	r6, [r4, #9]
 801180e:	60e0      	str	r0, [r4, #12]
 8011810:	8222      	strh	r2, [r4, #16]
 8011812:	82a3      	strh	r3, [r4, #20]
 8011814:	82e5      	strh	r5, [r4, #22]
 8011816:	8325      	strh	r5, [r4, #24]
 8011818:	8365      	strh	r5, [r4, #26]
 801181a:	83a5      	strh	r5, [r4, #28]
 801181c:	83e5      	strh	r5, [r4, #30]
 801181e:	8425      	strh	r5, [r4, #32]
 8011820:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8011824:	b32e      	cbz	r6, 8011872 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011826:	6803      	ldr	r3, [r0, #0]
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	4798      	blx	r3
 801182c:	4606      	mov	r6, r0
 801182e:	b300      	cbz	r0, 8011872 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011830:	68e0      	ldr	r0, [r4, #12]
 8011832:	4631      	mov	r1, r6
 8011834:	6803      	ldr	r3, [r0, #0]
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	4798      	blx	r3
 801183a:	4605      	mov	r5, r0
 801183c:	b1c8      	cbz	r0, 8011872 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801183e:	7b43      	ldrb	r3, [r0, #13]
 8011840:	7a82      	ldrb	r2, [r0, #10]
 8011842:	005b      	lsls	r3, r3, #1
 8011844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011848:	4313      	orrs	r3, r2
 801184a:	8423      	strh	r3, [r4, #32]
 801184c:	7a63      	ldrb	r3, [r4, #9]
 801184e:	2b06      	cmp	r3, #6
 8011850:	d10f      	bne.n	8011872 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8011852:	68e0      	ldr	r0, [r4, #12]
 8011854:	462a      	mov	r2, r5
 8011856:	4631      	mov	r1, r6
 8011858:	6803      	ldr	r3, [r0, #0]
 801185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801185c:	4798      	blx	r3
 801185e:	7b6b      	ldrb	r3, [r5, #13]
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011866:	7aab      	ldrb	r3, [r5, #10]
 8011868:	4313      	orrs	r3, r2
 801186a:	4418      	add	r0, r3
 801186c:	8c23      	ldrh	r3, [r4, #32]
 801186e:	4418      	add	r0, r3
 8011870:	8420      	strh	r0, [r4, #32]
 8011872:	4620      	mov	r0, r4
 8011874:	bd70      	pop	{r4, r5, r6, pc}

08011876 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011876:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	2400      	movs	r4, #0
 801187c:	b085      	sub	sp, #20
 801187e:	4681      	mov	r9, r0
 8011880:	4688      	mov	r8, r1
 8011882:	4692      	mov	sl, r2
 8011884:	469b      	mov	fp, r3
 8011886:	4627      	mov	r7, r4
 8011888:	4625      	mov	r5, r4
 801188a:	4626      	mov	r6, r4
 801188c:	4554      	cmp	r4, sl
 801188e:	da2a      	bge.n	80118e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8011890:	2300      	movs	r3, #0
 8011892:	9303      	str	r3, [sp, #12]
 8011894:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011898:	429d      	cmp	r5, r3
 801189a:	d004      	beq.n	80118a6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801189c:	f242 030b 	movw	r3, #8203	; 0x200b
 80118a0:	429d      	cmp	r5, r3
 80118a2:	bf18      	it	ne
 80118a4:	462f      	movne	r7, r5
 80118a6:	ab03      	add	r3, sp, #12
 80118a8:	4642      	mov	r2, r8
 80118aa:	4659      	mov	r1, fp
 80118ac:	4648      	mov	r0, r9
 80118ae:	f002 ffa3 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80118b2:	4605      	mov	r5, r0
 80118b4:	b1b8      	cbz	r0, 80118e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80118b6:	280a      	cmp	r0, #10
 80118b8:	d015      	beq.n	80118e6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80118ba:	9a03      	ldr	r2, [sp, #12]
 80118bc:	b18a      	cbz	r2, 80118e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80118be:	7b50      	ldrb	r0, [r2, #13]
 80118c0:	4639      	mov	r1, r7
 80118c2:	7a93      	ldrb	r3, [r2, #10]
 80118c4:	0040      	lsls	r0, r0, #1
 80118c6:	8895      	ldrh	r5, [r2, #4]
 80118c8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80118cc:	4303      	orrs	r3, r0
 80118ce:	4640      	mov	r0, r8
 80118d0:	9301      	str	r3, [sp, #4]
 80118d2:	f8d8 3000 	ldr.w	r3, [r8]
 80118d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118d8:	4798      	blx	r3
 80118da:	9b01      	ldr	r3, [sp, #4]
 80118dc:	4418      	add	r0, r3
 80118de:	4406      	add	r6, r0
 80118e0:	b2b6      	uxth	r6, r6
 80118e2:	3401      	adds	r4, #1
 80118e4:	e7d2      	b.n	801188c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80118e6:	4630      	mov	r0, r6
 80118e8:	b005      	add	sp, #20
 80118ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080118ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80118ee:	2a02      	cmp	r2, #2
 80118f0:	b530      	push	{r4, r5, lr}
 80118f2:	d011      	beq.n	8011918 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80118f4:	2a03      	cmp	r2, #3
 80118f6:	d01c      	beq.n	8011932 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80118f8:	2a01      	cmp	r2, #1
 80118fa:	d10c      	bne.n	8011916 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80118fc:	888b      	ldrh	r3, [r1, #4]
 80118fe:	8801      	ldrh	r1, [r0, #0]
 8011900:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011904:	1a5b      	subs	r3, r3, r1
 8011906:	8844      	ldrh	r4, [r0, #2]
 8011908:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801190c:	1a9b      	subs	r3, r3, r2
 801190e:	8004      	strh	r4, [r0, #0]
 8011910:	8081      	strh	r1, [r0, #4]
 8011912:	8043      	strh	r3, [r0, #2]
 8011914:	80c2      	strh	r2, [r0, #6]
 8011916:	bd30      	pop	{r4, r5, pc}
 8011918:	88cb      	ldrh	r3, [r1, #6]
 801191a:	8842      	ldrh	r2, [r0, #2]
 801191c:	1a9b      	subs	r3, r3, r2
 801191e:	88c2      	ldrh	r2, [r0, #6]
 8011920:	1a9b      	subs	r3, r3, r2
 8011922:	888a      	ldrh	r2, [r1, #4]
 8011924:	8801      	ldrh	r1, [r0, #0]
 8011926:	8043      	strh	r3, [r0, #2]
 8011928:	1a52      	subs	r2, r2, r1
 801192a:	8881      	ldrh	r1, [r0, #4]
 801192c:	1a52      	subs	r2, r2, r1
 801192e:	8002      	strh	r2, [r0, #0]
 8011930:	e7f1      	b.n	8011916 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011932:	88cb      	ldrh	r3, [r1, #6]
 8011934:	8841      	ldrh	r1, [r0, #2]
 8011936:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801193a:	1a5b      	subs	r3, r3, r1
 801193c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011940:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	8045      	strh	r5, [r0, #2]
 8011948:	8082      	strh	r2, [r0, #4]
 801194a:	8003      	strh	r3, [r0, #0]
 801194c:	80c4      	strh	r4, [r0, #6]
 801194e:	e7e2      	b.n	8011916 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08011950 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8011950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	b09f      	sub	sp, #124	; 0x7c
 8011956:	9116      	str	r1, [sp, #88]	; 0x58
 8011958:	9317      	str	r3, [sp, #92]	; 0x5c
 801195a:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801195c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801195e:	8809      	ldrh	r1, [r1, #0]
 8011960:	889b      	ldrh	r3, [r3, #4]
 8011962:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8011966:	440b      	add	r3, r1
 8011968:	9212      	str	r2, [sp, #72]	; 0x48
 801196a:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801196e:	b21b      	sxth	r3, r3
 8011970:	9011      	str	r0, [sp, #68]	; 0x44
 8011972:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8011976:	9310      	str	r3, [sp, #64]	; 0x40
 8011978:	f8d8 3000 	ldr.w	r3, [r8]
 801197c:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8011980:	7b19      	ldrb	r1, [r3, #12]
 8011982:	7adb      	ldrb	r3, [r3, #11]
 8011984:	9114      	str	r1, [sp, #80]	; 0x50
 8011986:	9315      	str	r3, [sp, #84]	; 0x54
 8011988:	2a00      	cmp	r2, #0
 801198a:	d06a      	beq.n	8011a62 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801198c:	f898 3010 	ldrb.w	r3, [r8, #16]
 8011990:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8011992:	2b06      	cmp	r3, #6
 8011994:	bf14      	ite	ne
 8011996:	2301      	movne	r3, #1
 8011998:	2302      	moveq	r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	f04f 0900 	mov.w	r9, #0
 80119a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80119a2:	464c      	mov	r4, r9
 80119a4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80119a8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80119ac:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80119b0:	4293      	cmp	r3, r2
 80119b2:	f280 808f 	bge.w	8011ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80119b6:	2300      	movs	r3, #0
 80119b8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80119bc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80119c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80119c4:	429c      	cmp	r4, r3
 80119c6:	d006      	beq.n	80119d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80119c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119ca:	f242 020b 	movw	r2, #8203	; 0x200b
 80119ce:	4294      	cmp	r4, r2
 80119d0:	bf18      	it	ne
 80119d2:	4623      	movne	r3, r4
 80119d4:	930d      	str	r3, [sp, #52]	; 0x34
 80119d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119d8:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80119da:	f8d8 2000 	ldr.w	r2, [r8]
 80119de:	428b      	cmp	r3, r1
 80119e0:	db41      	blt.n	8011a66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80119e2:	6813      	ldr	r3, [r2, #0]
 80119e4:	4610      	mov	r0, r2
 80119e6:	695b      	ldr	r3, [r3, #20]
 80119e8:	4798      	blx	r3
 80119ea:	4604      	mov	r4, r0
 80119ec:	f8d8 0000 	ldr.w	r0, [r8]
 80119f0:	aa1d      	add	r2, sp, #116	; 0x74
 80119f2:	4621      	mov	r1, r4
 80119f4:	6803      	ldr	r3, [r0, #0]
 80119f6:	689d      	ldr	r5, [r3, #8]
 80119f8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80119fc:	47a8      	blx	r5
 80119fe:	901c      	str	r0, [sp, #112]	; 0x70
 8011a00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011a04:	429c      	cmp	r4, r3
 8011a06:	f000 80ec 	beq.w	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011a0a:	f242 030b 	movw	r3, #8203	; 0x200b
 8011a0e:	429c      	cmp	r4, r3
 8011a10:	f000 80e7 	beq.w	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011a14:	2c00      	cmp	r4, #0
 8011a16:	f000 80f9 	beq.w	8011c0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8011a1a:	2c0a      	cmp	r4, #10
 8011a1c:	d060      	beq.n	8011ae0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8011a1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a20:	b36a      	cbz	r2, 8011a7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8011a22:	8894      	ldrh	r4, [r2, #4]
 8011a24:	f1bb 0f00 	cmp.w	fp, #0
 8011a28:	d03b      	beq.n	8011aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8011a2a:	f892 900d 	ldrb.w	r9, [r2, #13]
 8011a2e:	f1bb 0f01 	cmp.w	fp, #1
 8011a32:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8011a36:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8011a3a:	f892 900a 	ldrb.w	r9, [r2, #10]
 8011a3e:	ea49 0903 	orr.w	r9, r9, r3
 8011a42:	d134      	bne.n	8011aae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8011a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a46:	eba6 0609 	sub.w	r6, r6, r9
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d14f      	bne.n	8011aee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8011a4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a50:	eb09 0306 	add.w	r3, r9, r6
 8011a54:	4413      	add	r3, r2
 8011a56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011a58:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011a5c:	4293      	cmp	r3, r2
 8011a5e:	da51      	bge.n	8011b04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8011a60:	e038      	b.n	8011ad4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8011a62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011a64:	e79a      	b.n	801199c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8011a66:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011a6a:	4659      	mov	r1, fp
 8011a6c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011a6e:	9301      	str	r3, [sp, #4]
 8011a70:	ab1d      	add	r3, sp, #116	; 0x74
 8011a72:	9300      	str	r3, [sp, #0]
 8011a74:	ab1c      	add	r3, sp, #112	; 0x70
 8011a76:	f002 ff08 	bl	801488a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8011a7a:	4604      	mov	r4, r0
 8011a7c:	e7c0      	b.n	8011a00 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8011a7e:	f8d8 0000 	ldr.w	r0, [r8]
 8011a82:	6803      	ldr	r3, [r0, #0]
 8011a84:	691b      	ldr	r3, [r3, #16]
 8011a86:	4798      	blx	r3
 8011a88:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011a8c:	4298      	cmp	r0, r3
 8011a8e:	f000 80a8 	beq.w	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011a92:	f242 030b 	movw	r3, #8203	; 0x200b
 8011a96:	4298      	cmp	r0, r3
 8011a98:	f000 80a3 	beq.w	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011a9c:	f1bb 0f00 	cmp.w	fp, #0
 8011aa0:	d100      	bne.n	8011aa4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8011aa2:	444e      	add	r6, r9
 8011aa4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011aa6:	2a00      	cmp	r2, #0
 8011aa8:	d1bf      	bne.n	8011a2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8011aaa:	4691      	mov	r9, r2
 8011aac:	e099      	b.n	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f000 80ad 	beq.w	8011c10 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8011ab6:	f1bb 0f00 	cmp.w	fp, #0
 8011aba:	d118      	bne.n	8011aee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8011abc:	f8d8 0000 	ldr.w	r0, [r8]
 8011ac0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011ac2:	6803      	ldr	r3, [r0, #0]
 8011ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ac6:	4798      	blx	r3
 8011ac8:	4406      	add	r6, r0
 8011aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011acc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011ace:	1af3      	subs	r3, r6, r3
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	dd17      	ble.n	8011b04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8011ad4:	2c00      	cmp	r4, #0
 8011ad6:	f000 8099 	beq.w	8011c0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8011ada:	2c0a      	cmp	r4, #10
 8011adc:	f040 8087 	bne.w	8011bee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8011ae0:	240a      	movs	r4, #10
 8011ae2:	fab4 f084 	clz	r0, r4
 8011ae6:	0940      	lsrs	r0, r0, #5
 8011ae8:	b01f      	add	sp, #124	; 0x7c
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aee:	f8d8 0000 	ldr.w	r0, [r8]
 8011af2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011af4:	6803      	ldr	r3, [r0, #0]
 8011af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af8:	4798      	blx	r3
 8011afa:	f1bb 0f01 	cmp.w	fp, #1
 8011afe:	eba6 0600 	sub.w	r6, r6, r0
 8011b02:	d0a4      	beq.n	8011a4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8011b04:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011b06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011b08:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011b0c:	f9b3 7000 	ldrsh.w	r7, [r3]
 8011b10:	7b43      	ldrb	r3, [r0, #13]
 8011b12:	4431      	add	r1, r6
 8011b14:	015b      	lsls	r3, r3, #5
 8011b16:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011b1a:	7983      	ldrb	r3, [r0, #6]
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	440b      	add	r3, r1
 8011b20:	42bb      	cmp	r3, r7
 8011b22:	db5e      	blt.n	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011b24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b26:	4299      	cmp	r1, r3
 8011b28:	da5b      	bge.n	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011b2a:	f8d8 0000 	ldr.w	r0, [r8]
 8011b2e:	42b7      	cmp	r7, r6
 8011b30:	6803      	ldr	r3, [r0, #0]
 8011b32:	bfcc      	ite	gt
 8011b34:	1bbf      	subgt	r7, r7, r6
 8011b36:	2700      	movle	r7, #0
 8011b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b3a:	bfc8      	it	gt
 8011b3c:	b2bf      	uxthgt	r7, r7
 8011b3e:	4798      	blx	r3
 8011b40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011b42:	7b5a      	ldrb	r2, [r3, #13]
 8011b44:	00d1      	lsls	r1, r2, #3
 8011b46:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8011b4a:	7a19      	ldrb	r1, [r3, #8]
 8011b4c:	4329      	orrs	r1, r5
 8011b4e:	0655      	lsls	r5, r2, #25
 8011b50:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011b52:	bf48      	it	mi
 8011b54:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8011b58:	4405      	add	r5, r0
 8011b5a:	bf48      	it	mi
 8011b5c:	b209      	sxthmi	r1, r1
 8011b5e:	1a6d      	subs	r5, r5, r1
 8011b60:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8011b62:	b2ad      	uxth	r5, r5
 8011b64:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8011b68:	fa0f fa85 	sxth.w	sl, r5
 8011b6c:	4551      	cmp	r1, sl
 8011b6e:	dd3c      	ble.n	8011bea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8011b70:	0112      	lsls	r2, r2, #4
 8011b72:	79d8      	ldrb	r0, [r3, #7]
 8011b74:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011b78:	4302      	orrs	r2, r0
 8011b7a:	4492      	add	sl, r2
 8011b7c:	4551      	cmp	r1, sl
 8011b7e:	dc30      	bgt.n	8011be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8011b80:	1b4d      	subs	r5, r1, r5
 8011b82:	468a      	mov	sl, r1
 8011b84:	b22d      	sxth	r5, r5
 8011b86:	9319      	str	r3, [sp, #100]	; 0x64
 8011b88:	b2ad      	uxth	r5, r5
 8011b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b8c:	f8d8 0000 	ldr.w	r0, [r8]
 8011b90:	681a      	ldr	r2, [r3, #0]
 8011b92:	6801      	ldr	r1, [r0, #0]
 8011b94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8011b96:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011b98:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b9a:	9218      	str	r2, [sp, #96]	; 0x60
 8011b9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011b9e:	4788      	blx	r1
 8011ba0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ba6:	910b      	str	r1, [sp, #44]	; 0x2c
 8011ba8:	f898 100e 	ldrb.w	r1, [r8, #14]
 8011bac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011bae:	910a      	str	r1, [sp, #40]	; 0x28
 8011bb0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8011bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8011bb6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011bba:	9305      	str	r3, [sp, #20]
 8011bbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011bbe:	9206      	str	r2, [sp, #24]
 8011bc0:	9304      	str	r3, [sp, #16]
 8011bc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011bc4:	f8cd a004 	str.w	sl, [sp, #4]
 8011bc8:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8011bcc:	4437      	add	r7, r6
 8011bce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8011bd0:	b23f      	sxth	r7, r7
 8011bd2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011bd6:	9700      	str	r7, [sp, #0]
 8011bd8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011bde:	685b      	ldr	r3, [r3, #4]
 8011be0:	47a8      	blx	r5
 8011be2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011be4:	3301      	adds	r3, #1
 8011be6:	930e      	str	r3, [sp, #56]	; 0x38
 8011be8:	e6e0      	b.n	80119ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8011bea:	2500      	movs	r5, #0
 8011bec:	e7cb      	b.n	8011b86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8011bee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011bf0:	3501      	adds	r5, #1
 8011bf2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011bf4:	429d      	cmp	r5, r3
 8011bf6:	f6bf af74 	bge.w	8011ae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011bfa:	4659      	mov	r1, fp
 8011bfc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011bfe:	f7f1 f9bd 	bl	8002f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011c02:	4604      	mov	r4, r0
 8011c04:	b110      	cbz	r0, 8011c0c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8011c06:	280a      	cmp	r0, #10
 8011c08:	d1f2      	bne.n	8011bf0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8011c0a:	e769      	b.n	8011ae0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8011c0c:	2400      	movs	r4, #0
 8011c0e:	e768      	b.n	8011ae2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8011c10:	f1bb 0f00 	cmp.w	fp, #0
 8011c14:	f43f af59 	beq.w	8011aca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8011c18:	e774      	b.n	8011b04 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08011c1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8011c1a:	b530      	push	{r4, r5, lr}
 8011c1c:	8ac4      	ldrh	r4, [r0, #22]
 8011c1e:	8b45      	ldrh	r5, [r0, #26]
 8011c20:	8343      	strh	r3, [r0, #26]
 8011c22:	442c      	add	r4, r5
 8011c24:	1ae4      	subs	r4, r4, r3
 8011c26:	8b83      	ldrh	r3, [r0, #28]
 8011c28:	82c4      	strh	r4, [r0, #22]
 8011c2a:	8b04      	ldrh	r4, [r0, #24]
 8011c2c:	4422      	add	r2, r4
 8011c2e:	440c      	add	r4, r1
 8011c30:	1a59      	subs	r1, r3, r1
 8011c32:	83c2      	strh	r2, [r0, #30]
 8011c34:	8304      	strh	r4, [r0, #24]
 8011c36:	8381      	strh	r1, [r0, #28]
 8011c38:	bd30      	pop	{r4, r5, pc}

08011c3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8011c3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c3e:	4604      	mov	r4, r0
 8011c40:	8a47      	ldrh	r7, [r0, #18]
 8011c42:	68c0      	ldr	r0, [r0, #12]
 8011c44:	b085      	sub	sp, #20
 8011c46:	6803      	ldr	r3, [r0, #0]
 8011c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c4a:	4798      	blx	r3
 8011c4c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8011c50:	7a63      	ldrb	r3, [r4, #9]
 8011c52:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8011c56:	3b01      	subs	r3, #1
 8011c58:	42b7      	cmp	r7, r6
 8011c5a:	bfac      	ite	ge
 8011c5c:	f04f 0900 	movge.w	r9, #0
 8011c60:	f04f 0901 	movlt.w	r9, #1
 8011c64:	2b05      	cmp	r3, #5
 8011c66:	d804      	bhi.n	8011c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8011c68:	e8df f003 	tbb	[pc, r3]
 8011c6c:	470f0854 	.word	0x470f0854
 8011c70:	4c4c      	.short	0x4c4c
 8011c72:	2500      	movs	r5, #0
 8011c74:	46a9      	mov	r9, r5
 8011c76:	462e      	mov	r6, r5
 8011c78:	462f      	mov	r7, r5
 8011c7a:	e00e      	b.n	8011c9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011c7c:	42b7      	cmp	r7, r6
 8011c7e:	f04f 0500 	mov.w	r5, #0
 8011c82:	bfb4      	ite	lt
 8011c84:	2600      	movlt	r6, #0
 8011c86:	2601      	movge	r6, #1
 8011c88:	e7f6      	b.n	8011c78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011c8a:	42b7      	cmp	r7, r6
 8011c8c:	464d      	mov	r5, r9
 8011c8e:	f04f 0900 	mov.w	r9, #0
 8011c92:	bfb4      	ite	lt
 8011c94:	2600      	movlt	r6, #0
 8011c96:	2601      	movge	r6, #1
 8011c98:	464f      	mov	r7, r9
 8011c9a:	f04f 0800 	mov.w	r8, #0
 8011c9e:	f8a4 8016 	strh.w	r8, [r4, #22]
 8011ca2:	f8a4 8018 	strh.w	r8, [r4, #24]
 8011ca6:	f8cd 8004 	str.w	r8, [sp, #4]
 8011caa:	2300      	movs	r3, #0
 8011cac:	9303      	str	r3, [sp, #12]
 8011cae:	8823      	ldrh	r3, [r4, #0]
 8011cb0:	2b20      	cmp	r3, #32
 8011cb2:	d033      	beq.n	8011d1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8011cb4:	f242 010b 	movw	r1, #8203	; 0x200b
 8011cb8:	1a5a      	subs	r2, r3, r1
 8011cba:	f1d2 0a00 	rsbs	sl, r2, #0
 8011cbe:	eb4a 0a02 	adc.w	sl, sl, r2
 8011cc2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d008      	beq.n	8011cdc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011cca:	428b      	cmp	r3, r1
 8011ccc:	9a01      	ldr	r2, [sp, #4]
 8011cce:	bf0e      	itee	eq
 8011cd0:	f04f 0a01 	moveq.w	sl, #1
 8011cd4:	461a      	movne	r2, r3
 8011cd6:	f04f 0a00 	movne.w	sl, #0
 8011cda:	9201      	str	r2, [sp, #4]
 8011cdc:	ab03      	add	r3, sp, #12
 8011cde:	68e2      	ldr	r2, [r4, #12]
 8011ce0:	7a21      	ldrb	r1, [r4, #8]
 8011ce2:	6860      	ldr	r0, [r4, #4]
 8011ce4:	f002 fd88 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8011ce8:	8020      	strh	r0, [r4, #0]
 8011cea:	b9d8      	cbnz	r0, 8011d24 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8011cec:	8ba2      	ldrh	r2, [r4, #28]
 8011cee:	2300      	movs	r3, #0
 8011cf0:	4611      	mov	r1, r2
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f7ff ff91 	bl	8011c1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011cf8:	e06e      	b.n	8011dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011cfa:	2500      	movs	r5, #0
 8011cfc:	2701      	movs	r7, #1
 8011cfe:	46a9      	mov	r9, r5
 8011d00:	462e      	mov	r6, r5
 8011d02:	e7ca      	b.n	8011c9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011d04:	42b7      	cmp	r7, r6
 8011d06:	f04f 0500 	mov.w	r5, #0
 8011d0a:	bfb4      	ite	lt
 8011d0c:	2700      	movlt	r7, #0
 8011d0e:	2701      	movge	r7, #1
 8011d10:	462e      	mov	r6, r5
 8011d12:	e7c2      	b.n	8011c9a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8011d14:	2500      	movs	r5, #0
 8011d16:	2601      	movs	r6, #1
 8011d18:	46a9      	mov	r9, r5
 8011d1a:	e7ad      	b.n	8011c78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8011d1c:	9301      	str	r3, [sp, #4]
 8011d1e:	f04f 0a01 	mov.w	sl, #1
 8011d22:	e7db      	b.n	8011cdc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8011d24:	8b63      	ldrh	r3, [r4, #26]
 8011d26:	280a      	cmp	r0, #10
 8011d28:	f103 0301 	add.w	r3, r3, #1
 8011d2c:	8363      	strh	r3, [r4, #26]
 8011d2e:	d0dd      	beq.n	8011cec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8011d30:	9a03      	ldr	r2, [sp, #12]
 8011d32:	bb62      	cbnz	r2, 8011d8e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8011d34:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011d38:	4298      	cmp	r0, r3
 8011d3a:	d003      	beq.n	8011d44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011d3c:	f242 030b 	movw	r3, #8203	; 0x200b
 8011d40:	4298      	cmp	r0, r3
 8011d42:	d1b2      	bne.n	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011d44:	8823      	ldrh	r3, [r4, #0]
 8011d46:	8ba1      	ldrh	r1, [r4, #28]
 8011d48:	2b20      	cmp	r3, #32
 8011d4a:	d003      	beq.n	8011d54 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8011d4c:	f242 000b 	movw	r0, #8203	; 0x200b
 8011d50:	4283      	cmp	r3, r0
 8011d52:	d131      	bne.n	8011db8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8011d54:	f1ba 0f00 	cmp.w	sl, #0
 8011d58:	bf0a      	itet	eq
 8011d5a:	4688      	moveq	r8, r1
 8011d5c:	4650      	movne	r0, sl
 8011d5e:	2001      	moveq	r0, #1
 8011d60:	440a      	add	r2, r1
 8011d62:	8b23      	ldrh	r3, [r4, #24]
 8011d64:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8011d68:	b292      	uxth	r2, r2
 8011d6a:	83a2      	strh	r2, [r4, #28]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	f1b9 0f00 	cmp.w	r9, #0
 8011d72:	d102      	bne.n	8011d7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8011d74:	2d00      	cmp	r5, #0
 8011d76:	d042      	beq.n	8011dfe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8011d78:	b300      	cbz	r0, 8011dbc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8011d7a:	8c21      	ldrh	r1, [r4, #32]
 8011d7c:	4419      	add	r1, r3
 8011d7e:	458c      	cmp	ip, r1
 8011d80:	da37      	bge.n	8011df2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011d82:	8ae1      	ldrh	r1, [r4, #22]
 8011d84:	2900      	cmp	r1, #0
 8011d86:	d034      	beq.n	8011df2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8011d88:	4563      	cmp	r3, ip
 8011d8a:	dd8e      	ble.n	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011d8c:	e01d      	b.n	8011dca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8011d8e:	8893      	ldrh	r3, [r2, #4]
 8011d90:	9901      	ldr	r1, [sp, #4]
 8011d92:	8023      	strh	r3, [r4, #0]
 8011d94:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8011d98:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8011d9c:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8011da0:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8011da4:	ea4b 0b00 	orr.w	fp, fp, r0
 8011da8:	68e0      	ldr	r0, [r4, #12]
 8011daa:	6803      	ldr	r3, [r0, #0]
 8011dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dae:	4798      	blx	r3
 8011db0:	eb0b 0200 	add.w	r2, fp, r0
 8011db4:	b292      	uxth	r2, r2
 8011db6:	e7c5      	b.n	8011d44 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8011db8:	2000      	movs	r0, #0
 8011dba:	e7d1      	b.n	8011d60 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8011dbc:	4563      	cmp	r3, ip
 8011dbe:	f77f af74 	ble.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011dc2:	8ae3      	ldrh	r3, [r4, #22]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	f43f af70 	beq.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	8c22      	ldrh	r2, [r4, #32]
 8011dce:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8011dd2:	8be3      	ldrh	r3, [r4, #30]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	83e3      	strh	r3, [r4, #30]
 8011dd8:	68e0      	ldr	r0, [r4, #12]
 8011dda:	6803      	ldr	r3, [r0, #0]
 8011ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dde:	4798      	blx	r3
 8011de0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8011de4:	4418      	add	r0, r3
 8011de6:	8a63      	ldrh	r3, [r4, #18]
 8011de8:	1a18      	subs	r0, r3, r0
 8011dea:	8260      	strh	r0, [r4, #18]
 8011dec:	b005      	add	sp, #20
 8011dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011df2:	2300      	movs	r3, #0
 8011df4:	4611      	mov	r1, r2
 8011df6:	4620      	mov	r0, r4
 8011df8:	f7ff ff0f 	bl	8011c1a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8011dfc:	e755      	b.n	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011dfe:	4563      	cmp	r3, ip
 8011e00:	dd14      	ble.n	8011e2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8011e02:	b117      	cbz	r7, 8011e0a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8011e04:	2301      	movs	r3, #1
 8011e06:	460a      	mov	r2, r1
 8011e08:	e772      	b.n	8011cf0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8011e0a:	2e00      	cmp	r6, #0
 8011e0c:	f43f af4d 	beq.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011e10:	2800      	cmp	r0, #0
 8011e12:	f47f af4a 	bne.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011e16:	f1ba 0f00 	cmp.w	sl, #0
 8011e1a:	d002      	beq.n	8011e22 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	4642      	mov	r2, r8
 8011e20:	e767      	b.n	8011cf2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8011e22:	8ae3      	ldrh	r3, [r4, #22]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f43f af40 	beq.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011e2a:	e7d5      	b.n	8011dd8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8011e2c:	2800      	cmp	r0, #0
 8011e2e:	f47f af3c 	bne.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011e32:	f1ba 0f00 	cmp.w	sl, #0
 8011e36:	f43f af38 	beq.w	8011caa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8011e3a:	2301      	movs	r3, #1
 8011e3c:	4642      	mov	r2, r8
 8011e3e:	e7da      	b.n	8011df6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08011e40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8011e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e42:	4605      	mov	r5, r0
 8011e44:	b08f      	sub	sp, #60	; 0x3c
 8011e46:	4617      	mov	r7, r2
 8011e48:	461c      	mov	r4, r3
 8011e4a:	460e      	mov	r6, r1
 8011e4c:	b1d1      	cbz	r1, 8011e84 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	4620      	mov	r0, r4
 8011e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e54:	4798      	blx	r3
 8011e56:	4240      	negs	r0, r0
 8011e58:	9603      	str	r6, [sp, #12]
 8011e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e5e:	b200      	sxth	r0, r0
 8011e60:	9700      	str	r7, [sp, #0]
 8011e62:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8011e66:	4629      	mov	r1, r5
 8011e68:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8011e6c:	2401      	movs	r4, #1
 8011e6e:	a805      	add	r0, sp, #20
 8011e70:	f7ff fcbe 	bl	80117f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011e74:	a805      	add	r0, sp, #20
 8011e76:	f7ff fee0 	bl	8011c3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011e7a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011e7e:	b163      	cbz	r3, 8011e9a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8011e80:	3401      	adds	r4, #1
 8011e82:	e7f7      	b.n	8011e74 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8011e84:	2401      	movs	r4, #1
 8011e86:	f002 fd83 	bl	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e8a:	280a      	cmp	r0, #10
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	bf08      	it	eq
 8011e90:	3401      	addeq	r4, #1
 8011e92:	f002 fd7d 	bl	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d1f7      	bne.n	8011e8a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8011e9a:	b2a0      	uxth	r0, r4
 8011e9c:	b00f      	add	sp, #60	; 0x3c
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011ea0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ea4:	b0e3      	sub	sp, #396	; 0x18c
 8011ea6:	461c      	mov	r4, r3
 8011ea8:	4683      	mov	fp, r0
 8011eaa:	4688      	mov	r8, r1
 8011eac:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 810f 	beq.w	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f000 810b 	beq.w	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011ebc:	7ba3      	ldrb	r3, [r4, #14]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	f000 8107 	beq.w	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8011ec4:	ad0a      	add	r5, sp, #40	; 0x28
 8011ec6:	6810      	ldr	r0, [r2, #0]
 8011ec8:	6851      	ldr	r1, [r2, #4]
 8011eca:	462b      	mov	r3, r5
 8011ecc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8011ed0:	c303      	stmia	r3!, {r0, r1}
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8011ed8:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011edc:	4628      	mov	r0, r5
 8011ede:	910c      	str	r1, [sp, #48]	; 0x30
 8011ee0:	a90c      	add	r1, sp, #48	; 0x30
 8011ee2:	79a2      	ldrb	r2, [r4, #6]
 8011ee4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011ee8:	f7ff fd01 	bl	80118ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011eec:	a90c      	add	r1, sp, #48	; 0x30
 8011eee:	79a2      	ldrb	r2, [r4, #6]
 8011ef0:	4608      	mov	r0, r1
 8011ef2:	f7ff fcfc 	bl	80118ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011ef6:	a817      	add	r0, sp, #92	; 0x5c
 8011ef8:	f002 f936 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 8011efc:	6820      	ldr	r0, [r4, #0]
 8011efe:	6803      	ldr	r3, [r0, #0]
 8011f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f02:	4798      	blx	r3
 8011f04:	4606      	mov	r6, r0
 8011f06:	6820      	ldr	r0, [r4, #0]
 8011f08:	6803      	ldr	r3, [r0, #0]
 8011f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f0c:	4798      	blx	r3
 8011f0e:	4633      	mov	r3, r6
 8011f10:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8011f12:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8011f14:	9000      	str	r0, [sp, #0]
 8011f16:	a817      	add	r0, sp, #92	; 0x5c
 8011f18:	f002 f979 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011f1c:	6820      	ldr	r0, [r4, #0]
 8011f1e:	f894 a004 	ldrb.w	sl, [r4, #4]
 8011f22:	6803      	ldr	r3, [r0, #0]
 8011f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f26:	4798      	blx	r3
 8011f28:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8011f2c:	6823      	ldr	r3, [r4, #0]
 8011f2e:	4607      	mov	r7, r0
 8011f30:	4406      	add	r6, r0
 8011f32:	a830      	add	r0, sp, #192	; 0xc0
 8011f34:	f893 9009 	ldrb.w	r9, [r3, #9]
 8011f38:	f002 f916 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 8011f3c:	7c23      	ldrb	r3, [r4, #16]
 8011f3e:	b17b      	cbz	r3, 8011f60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8011f40:	6820      	ldr	r0, [r4, #0]
 8011f42:	6803      	ldr	r3, [r0, #0]
 8011f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f46:	4798      	blx	r3
 8011f48:	9009      	str	r0, [sp, #36]	; 0x24
 8011f4a:	6820      	ldr	r0, [r4, #0]
 8011f4c:	6802      	ldr	r2, [r0, #0]
 8011f4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8011f50:	4790      	blx	r2
 8011f52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f54:	9000      	str	r0, [sp, #0]
 8011f56:	a830      	add	r0, sp, #192	; 0xc0
 8011f58:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8011f5a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8011f5c:	f002 f957 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011f60:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8011f64:	a80e      	add	r0, sp, #56	; 0x38
 8011f66:	7be2      	ldrb	r2, [r4, #15]
 8011f68:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011f6c:	1a8a      	subs	r2, r1, r2
 8011f6e:	7c21      	ldrb	r1, [r4, #16]
 8011f70:	9103      	str	r1, [sp, #12]
 8011f72:	b292      	uxth	r2, r2
 8011f74:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8011f78:	9102      	str	r1, [sp, #8]
 8011f7a:	6821      	ldr	r1, [r4, #0]
 8011f7c:	9101      	str	r1, [sp, #4]
 8011f7e:	7961      	ldrb	r1, [r4, #5]
 8011f80:	9100      	str	r1, [sp, #0]
 8011f82:	a930      	add	r1, sp, #192	; 0xc0
 8011f84:	f7ff fc34 	bl	80117f0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8011f88:	2e00      	cmp	r6, #0
 8011f8a:	dc5b      	bgt.n	8012044 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8011f8c:	af17      	add	r7, sp, #92	; 0x5c
 8011f8e:	f04f 0900 	mov.w	r9, #0
 8011f92:	7c23      	ldrb	r3, [r4, #16]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	f000 80ae 	beq.w	80120f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011f9a:	a80e      	add	r0, sp, #56	; 0x38
 8011f9c:	f7ff fe4d 	bl	8011c3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8011fa0:	f1ba 0f00 	cmp.w	sl, #0
 8011fa4:	f000 80a2 	beq.w	80120ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8011fa8:	7c23      	ldrb	r3, [r4, #16]
 8011faa:	2264      	movs	r2, #100	; 0x64
 8011fac:	4639      	mov	r1, r7
 8011fae:	a849      	add	r0, sp, #292	; 0x124
 8011fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8011fb2:	f00d f995 	bl	801f2e0 <memcpy>
 8011fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 80a4 	beq.w	8012106 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8011fbe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8011fc2:	7922      	ldrb	r2, [r4, #4]
 8011fc4:	2a01      	cmp	r2, #1
 8011fc6:	f040 8087 	bne.w	80120d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011fca:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8011fce:	1ac0      	subs	r0, r0, r3
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	fb90 f0f3 	sdiv	r0, r0, r3
 8011fd6:	b200      	sxth	r0, r0
 8011fd8:	7c23      	ldrb	r3, [r4, #16]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	f000 8088 	beq.w	80120f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8011fe0:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8011fe4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8011fe8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8011fec:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8011ff0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8011ff4:	2100      	movs	r1, #0
 8011ff6:	4410      	add	r0, r2
 8011ff8:	4642      	mov	r2, r8
 8011ffa:	b200      	sxth	r0, r0
 8011ffc:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8012000:	9000      	str	r0, [sp, #0]
 8012002:	4658      	mov	r0, fp
 8012004:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8012008:	f7ff fca2 	bl	8011950 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801200c:	2800      	cmp	r0, #0
 801200e:	d160      	bne.n	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012010:	b2b2      	uxth	r2, r6
 8012012:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8012016:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801201a:	4413      	add	r3, r2
 801201c:	1a8a      	subs	r2, r1, r2
 801201e:	b21b      	sxth	r3, r3
 8012020:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8012024:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8012028:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801202c:	2a00      	cmp	r2, #0
 801202e:	d150      	bne.n	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012030:	6822      	ldr	r2, [r4, #0]
 8012032:	8869      	ldrh	r1, [r5, #2]
 8012034:	7a12      	ldrb	r2, [r2, #8]
 8012036:	1a9b      	subs	r3, r3, r2
 8012038:	88ea      	ldrh	r2, [r5, #6]
 801203a:	440a      	add	r2, r1
 801203c:	b212      	sxth	r2, r2
 801203e:	4293      	cmp	r3, r2
 8012040:	dda7      	ble.n	8011f92 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8012042:	e046      	b.n	80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012044:	7c23      	ldrb	r3, [r4, #16]
 8012046:	444f      	add	r7, r9
 8012048:	b1c3      	cbz	r3, 801207c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801204a:	f64f 79ff 	movw	r9, #65535	; 0xffff
 801204e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012052:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012056:	443b      	add	r3, r7
 8012058:	4293      	cmp	r3, r2
 801205a:	da97      	bge.n	8011f8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801205c:	a80e      	add	r0, sp, #56	; 0x38
 801205e:	f7ff fdec 	bl	8011c3a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012062:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8012066:	3b01      	subs	r3, #1
 8012068:	b29b      	uxth	r3, r3
 801206a:	454b      	cmp	r3, r9
 801206c:	9309      	str	r3, [sp, #36]	; 0x24
 801206e:	d021      	beq.n	80120b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8012070:	7961      	ldrb	r1, [r4, #5]
 8012072:	a817      	add	r0, sp, #92	; 0x5c
 8012074:	f7f0 ff82 	bl	8002f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8012078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801207a:	e7f4      	b.n	8012066 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801207c:	fa1f f986 	uxth.w	r9, r6
 8012080:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012084:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012088:	443b      	add	r3, r7
 801208a:	4293      	cmp	r3, r2
 801208c:	f6bf af7e 	bge.w	8011f8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8012090:	a817      	add	r0, sp, #92	; 0x5c
 8012092:	f002 fc7d 	bl	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012096:	b1e0      	cbz	r0, 80120d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8012098:	280a      	cmp	r0, #10
 801209a:	d1f1      	bne.n	8012080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801209c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80120a0:	444b      	add	r3, r9
 80120a2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80120a6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80120aa:	eba3 0309 	sub.w	r3, r3, r9
 80120ae:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80120b2:	e7e5      	b.n	8012080 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 80120b4:	b2b3      	uxth	r3, r6
 80120b6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80120ba:	441a      	add	r2, r3
 80120bc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80120c0:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 80120c4:	1ad3      	subs	r3, r2, r3
 80120c6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80120ca:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1bd      	bne.n	801204e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80120d2:	b063      	add	sp, #396	; 0x18c
 80120d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d8:	2a02      	cmp	r2, #2
 80120da:	d105      	bne.n	80120e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 80120dc:	7be2      	ldrb	r2, [r4, #15]
 80120de:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80120e2:	1a80      	subs	r0, r0, r2
 80120e4:	1ac0      	subs	r0, r0, r3
 80120e6:	e776      	b.n	8011fd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80120e8:	2000      	movs	r0, #0
 80120ea:	e775      	b.n	8011fd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80120ec:	7be0      	ldrb	r0, [r4, #15]
 80120ee:	e773      	b.n	8011fd8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80120f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80120f4:	e776      	b.n	8011fe4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80120f6:	f1ba 0f00 	cmp.w	sl, #0
 80120fa:	d0f7      	beq.n	80120ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 80120fc:	2264      	movs	r2, #100	; 0x64
 80120fe:	4639      	mov	r1, r7
 8012100:	a849      	add	r0, sp, #292	; 0x124
 8012102:	f00d f8ed 	bl	801f2e0 <memcpy>
 8012106:	2300      	movs	r3, #0
 8012108:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801210c:	6821      	ldr	r1, [r4, #0]
 801210e:	a849      	add	r0, sp, #292	; 0x124
 8012110:	f7ff fbb1 	bl	8011876 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012114:	b203      	sxth	r3, r0
 8012116:	e754      	b.n	8011fc2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08012118 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012118:	2b03      	cmp	r3, #3
 801211a:	d818      	bhi.n	801214e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801211c:	e8df f003 	tbb	[pc, r3]
 8012120:	130d0602 	.word	0x130d0602
 8012124:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012128:	1850      	adds	r0, r2, r1
 801212a:	4770      	bx	lr
 801212c:	8803      	ldrh	r3, [r0, #0]
 801212e:	8880      	ldrh	r0, [r0, #4]
 8012130:	4418      	add	r0, r3
 8012132:	b200      	sxth	r0, r0
 8012134:	1a80      	subs	r0, r0, r2
 8012136:	3801      	subs	r0, #1
 8012138:	4770      	bx	lr
 801213a:	8803      	ldrh	r3, [r0, #0]
 801213c:	8880      	ldrh	r0, [r0, #4]
 801213e:	4418      	add	r0, r3
 8012140:	b200      	sxth	r0, r0
 8012142:	1a40      	subs	r0, r0, r1
 8012144:	e7f7      	b.n	8012136 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012146:	f9b0 0000 	ldrsh.w	r0, [r0]
 801214a:	4410      	add	r0, r2
 801214c:	4770      	bx	lr
 801214e:	2000      	movs	r0, #0
 8012150:	4770      	bx	lr

08012152 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012152:	2b03      	cmp	r3, #3
 8012154:	d817      	bhi.n	8012186 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8012156:	e8df f003 	tbb	[pc, r3]
 801215a:	0602      	.short	0x0602
 801215c:	1009      	.short	0x1009
 801215e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012162:	1850      	adds	r0, r2, r1
 8012164:	4770      	bx	lr
 8012166:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801216a:	e7fa      	b.n	8012162 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801216c:	8843      	ldrh	r3, [r0, #2]
 801216e:	88c0      	ldrh	r0, [r0, #6]
 8012170:	4418      	add	r0, r3
 8012172:	b200      	sxth	r0, r0
 8012174:	1a80      	subs	r0, r0, r2
 8012176:	3801      	subs	r0, #1
 8012178:	4770      	bx	lr
 801217a:	8843      	ldrh	r3, [r0, #2]
 801217c:	88c0      	ldrh	r0, [r0, #6]
 801217e:	4418      	add	r0, r3
 8012180:	b200      	sxth	r0, r0
 8012182:	1a40      	subs	r0, r0, r1
 8012184:	e7f7      	b.n	8012176 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012186:	2000      	movs	r0, #0
 8012188:	4770      	bx	lr
	...

0801218c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801218c:	4b01      	ldr	r3, [pc, #4]	; (8012194 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801218e:	2200      	movs	r2, #0
 8012190:	601a      	str	r2, [r3, #0]
 8012192:	4770      	bx	lr
 8012194:	2400f5a0 	.word	0x2400f5a0

08012198 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012198:	4603      	mov	r3, r0
 801219a:	b1c8      	cbz	r0, 80121d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801219c:	0c02      	lsrs	r2, r0, #16
 801219e:	0412      	lsls	r2, r2, #16
 80121a0:	b9a2      	cbnz	r2, 80121cc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80121a2:	0403      	lsls	r3, r0, #16
 80121a4:	2010      	movs	r0, #16
 80121a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80121aa:	bf04      	itt	eq
 80121ac:	021b      	lsleq	r3, r3, #8
 80121ae:	3008      	addeq	r0, #8
 80121b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80121b4:	bf04      	itt	eq
 80121b6:	011b      	lsleq	r3, r3, #4
 80121b8:	3004      	addeq	r0, #4
 80121ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80121be:	bf04      	itt	eq
 80121c0:	009b      	lsleq	r3, r3, #2
 80121c2:	3002      	addeq	r0, #2
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	db04      	blt.n	80121d2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80121c8:	3001      	adds	r0, #1
 80121ca:	4770      	bx	lr
 80121cc:	2000      	movs	r0, #0
 80121ce:	e7ea      	b.n	80121a6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80121d0:	2020      	movs	r0, #32
 80121d2:	4770      	bx	lr

080121d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80121d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121d8:	b087      	sub	sp, #28
 80121da:	4681      	mov	r9, r0
 80121dc:	4698      	mov	r8, r3
 80121de:	4610      	mov	r0, r2
 80121e0:	460d      	mov	r5, r1
 80121e2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80121e6:	b981      	cbnz	r1, 801220a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80121e8:	b14b      	cbz	r3, 80121fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80121ea:	460b      	mov	r3, r1
 80121ec:	464a      	mov	r2, r9
 80121ee:	4641      	mov	r1, r8
 80121f0:	e9cd 4700 	strd	r4, r7, [sp]
 80121f4:	f7ff ffee 	bl	80121d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80121f8:	b007      	add	sp, #28
 80121fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012202:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8012206:	603b      	str	r3, [r7, #0]
 8012208:	e7f6      	b.n	80121f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801220a:	fa32 fa01 	lsrs.w	sl, r2, r1
 801220e:	d107      	bne.n	8012220 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8012210:	fb09 f602 	mul.w	r6, r9, r2
 8012214:	fbb6 f0f4 	udiv	r0, r6, r4
 8012218:	fb04 6610 	mls	r6, r4, r0, r6
 801221c:	603e      	str	r6, [r7, #0]
 801221e:	e7eb      	b.n	80121f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012220:	2601      	movs	r6, #1
 8012222:	fa09 fb01 	lsl.w	fp, r9, r1
 8012226:	408e      	lsls	r6, r1
 8012228:	fbbb f3f4 	udiv	r3, fp, r4
 801222c:	3e01      	subs	r6, #1
 801222e:	9302      	str	r3, [sp, #8]
 8012230:	fb0a f303 	mul.w	r3, sl, r3
 8012234:	4016      	ands	r6, r2
 8012236:	9303      	str	r3, [sp, #12]
 8012238:	4630      	mov	r0, r6
 801223a:	f7ff ffad 	bl	8012198 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801223e:	464a      	mov	r2, r9
 8012240:	460b      	mov	r3, r1
 8012242:	4601      	mov	r1, r0
 8012244:	4630      	mov	r0, r6
 8012246:	e9cd 4700 	strd	r4, r7, [sp]
 801224a:	f7ff ffc3 	bl	80121d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801224e:	9b02      	ldr	r3, [sp, #8]
 8012250:	4606      	mov	r6, r0
 8012252:	eb05 0108 	add.w	r1, r5, r8
 8012256:	fb04 bb13 	mls	fp, r4, r3, fp
 801225a:	4658      	mov	r0, fp
 801225c:	f7ff ff9c 	bl	8012198 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012260:	ab05      	add	r3, sp, #20
 8012262:	465a      	mov	r2, fp
 8012264:	e9cd 4300 	strd	r4, r3, [sp]
 8012268:	4603      	mov	r3, r0
 801226a:	4650      	mov	r0, sl
 801226c:	f7ff ffb2 	bl	80121d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012270:	6839      	ldr	r1, [r7, #0]
 8012272:	9a05      	ldr	r2, [sp, #20]
 8012274:	9b03      	ldr	r3, [sp, #12]
 8012276:	4411      	add	r1, r2
 8012278:	fbb1 f2f4 	udiv	r2, r1, r4
 801227c:	18d3      	adds	r3, r2, r3
 801227e:	fb04 1412 	mls	r4, r4, r2, r1
 8012282:	441e      	add	r6, r3
 8012284:	603c      	str	r4, [r7, #0]
 8012286:	4430      	add	r0, r6
 8012288:	e7b6      	b.n	80121f8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801228a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801228a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801228e:	b085      	sub	sp, #20
 8012290:	f1b0 0900 	subs.w	r9, r0, #0
 8012294:	461d      	mov	r5, r3
 8012296:	4617      	mov	r7, r2
 8012298:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801229a:	bfbb      	ittet	lt
 801229c:	f1c9 0900 	rsblt	r9, r9, #0
 80122a0:	f04f 36ff 	movlt.w	r6, #4294967295
 80122a4:	2601      	movge	r6, #1
 80122a6:	6823      	ldrlt	r3, [r4, #0]
 80122a8:	bfbc      	itt	lt
 80122aa:	425b      	neglt	r3, r3
 80122ac:	6023      	strlt	r3, [r4, #0]
 80122ae:	2a00      	cmp	r2, #0
 80122b0:	da04      	bge.n	80122bc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80122b2:	6823      	ldr	r3, [r4, #0]
 80122b4:	4257      	negs	r7, r2
 80122b6:	4276      	negs	r6, r6
 80122b8:	425b      	negs	r3, r3
 80122ba:	6023      	str	r3, [r4, #0]
 80122bc:	2d00      	cmp	r5, #0
 80122be:	4638      	mov	r0, r7
 80122c0:	bfba      	itte	lt
 80122c2:	426d      	neglt	r5, r5
 80122c4:	f04f 38ff 	movlt.w	r8, #4294967295
 80122c8:	f04f 0801 	movge.w	r8, #1
 80122cc:	f7ff ff64 	bl	8012198 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80122d0:	ab03      	add	r3, sp, #12
 80122d2:	463a      	mov	r2, r7
 80122d4:	e9cd 5300 	strd	r5, r3, [sp]
 80122d8:	4603      	mov	r3, r0
 80122da:	4648      	mov	r0, r9
 80122dc:	f7ff ff7a 	bl	80121d4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80122e0:	6823      	ldr	r3, [r4, #0]
 80122e2:	9a03      	ldr	r2, [sp, #12]
 80122e4:	4546      	cmp	r6, r8
 80122e6:	441a      	add	r2, r3
 80122e8:	fb92 f3f5 	sdiv	r3, r2, r5
 80122ec:	4418      	add	r0, r3
 80122ee:	fb05 2313 	mls	r3, r5, r3, r2
 80122f2:	bf18      	it	ne
 80122f4:	4240      	negne	r0, r0
 80122f6:	1c72      	adds	r2, r6, #1
 80122f8:	6023      	str	r3, [r4, #0]
 80122fa:	d105      	bne.n	8012308 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f1c3 0200 	rsb	r2, r3, #0
 8012302:	db0b      	blt.n	801231c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012304:	6022      	str	r2, [r4, #0]
 8012306:	e006      	b.n	8012316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012308:	2e01      	cmp	r6, #1
 801230a:	d104      	bne.n	8012316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801230c:	2b00      	cmp	r3, #0
 801230e:	da02      	bge.n	8012316 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012310:	442b      	add	r3, r5
 8012312:	3801      	subs	r0, #1
 8012314:	6023      	str	r3, [r4, #0]
 8012316:	b005      	add	sp, #20
 8012318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801231c:	3801      	subs	r0, #1
 801231e:	1b52      	subs	r2, r2, r5
 8012320:	e7f0      	b.n	8012304 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08012324 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012328:	4c1c      	ldr	r4, [pc, #112]	; (801239c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801232a:	4605      	mov	r5, r0
 801232c:	6807      	ldr	r7, [r0, #0]
 801232e:	69a3      	ldr	r3, [r4, #24]
 8012330:	b92b      	cbnz	r3, 801233e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012332:	6840      	ldr	r0, [r0, #4]
 8012334:	e9c5 7000 	strd	r7, r0, [r5]
 8012338:	b004      	add	sp, #16
 801233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801233e:	f04f 0802 	mov.w	r8, #2
 8012342:	68a2      	ldr	r2, [r4, #8]
 8012344:	ae04      	add	r6, sp, #16
 8012346:	6820      	ldr	r0, [r4, #0]
 8012348:	fb93 f1f8 	sdiv	r1, r3, r8
 801234c:	440a      	add	r2, r1
 801234e:	69e1      	ldr	r1, [r4, #28]
 8012350:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012354:	463a      	mov	r2, r7
 8012356:	9600      	str	r6, [sp, #0]
 8012358:	f7ff ff97 	bl	801228a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801235c:	69a3      	ldr	r3, [r4, #24]
 801235e:	4607      	mov	r7, r0
 8012360:	686a      	ldr	r2, [r5, #4]
 8012362:	6a21      	ldr	r1, [r4, #32]
 8012364:	9600      	str	r6, [sp, #0]
 8012366:	6860      	ldr	r0, [r4, #4]
 8012368:	f7ff ff8f 	bl	801228a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801236c:	69a3      	ldr	r3, [r4, #24]
 801236e:	6962      	ldr	r2, [r4, #20]
 8012370:	4407      	add	r7, r0
 8012372:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012374:	9600      	str	r6, [sp, #0]
 8012376:	68e0      	ldr	r0, [r4, #12]
 8012378:	fb93 f8f8 	sdiv	r8, r3, r8
 801237c:	4442      	add	r2, r8
 801237e:	9203      	str	r2, [sp, #12]
 8012380:	682a      	ldr	r2, [r5, #0]
 8012382:	f7ff ff82 	bl	801228a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012386:	4680      	mov	r8, r0
 8012388:	9600      	str	r6, [sp, #0]
 801238a:	69a3      	ldr	r3, [r4, #24]
 801238c:	686a      	ldr	r2, [r5, #4]
 801238e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012390:	6920      	ldr	r0, [r4, #16]
 8012392:	f7ff ff7a 	bl	801228a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012396:	4440      	add	r0, r8
 8012398:	e7cc      	b.n	8012334 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801239a:	bf00      	nop
 801239c:	2400f5a4 	.word	0x2400f5a4

080123a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80123a0:	4b07      	ldr	r3, [pc, #28]	; (80123c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d109      	bne.n	80123bc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80123a8:	f9b1 3000 	ldrsh.w	r3, [r1]
 80123ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80123b0:	8003      	strh	r3, [r0, #0]
 80123b2:	4b04      	ldr	r3, [pc, #16]	; (80123c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80123b4:	881b      	ldrh	r3, [r3, #0]
 80123b6:	3b01      	subs	r3, #1
 80123b8:	1a9b      	subs	r3, r3, r2
 80123ba:	800b      	strh	r3, [r1, #0]
 80123bc:	4770      	bx	lr
 80123be:	bf00      	nop
 80123c0:	2400f588 	.word	0x2400f588
 80123c4:	2400f584 	.word	0x2400f584

080123c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80123c8:	4b07      	ldr	r3, [pc, #28]	; (80123e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80123ca:	b510      	push	{r4, lr}
 80123cc:	781b      	ldrb	r3, [r3, #0]
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d108      	bne.n	80123e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80123d2:	4b06      	ldr	r3, [pc, #24]	; (80123ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80123d4:	880c      	ldrh	r4, [r1, #0]
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80123dc:	3b01      	subs	r3, #1
 80123de:	1b1b      	subs	r3, r3, r4
 80123e0:	8003      	strh	r3, [r0, #0]
 80123e2:	800a      	strh	r2, [r1, #0]
 80123e4:	bd10      	pop	{r4, pc}
 80123e6:	bf00      	nop
 80123e8:	2400f588 	.word	0x2400f588
 80123ec:	2400f584 	.word	0x2400f584

080123f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80123f0:	4b0a      	ldr	r3, [pc, #40]	; (801241c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80123f2:	b510      	push	{r4, lr}
 80123f4:	781b      	ldrb	r3, [r3, #0]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d10e      	bne.n	8012418 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80123fa:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80123fe:	8843      	ldrh	r3, [r0, #2]
 8012400:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012404:	18ca      	adds	r2, r1, r3
 8012406:	4b06      	ldr	r3, [pc, #24]	; (8012420 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012408:	8044      	strh	r4, [r0, #2]
 801240a:	881b      	ldrh	r3, [r3, #0]
 801240c:	1a9b      	subs	r3, r3, r2
 801240e:	8003      	strh	r3, [r0, #0]
 8012410:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012414:	8081      	strh	r1, [r0, #4]
 8012416:	80c3      	strh	r3, [r0, #6]
 8012418:	bd10      	pop	{r4, pc}
 801241a:	bf00      	nop
 801241c:	2400f588 	.word	0x2400f588
 8012420:	2400f584 	.word	0x2400f584

08012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012424:	4b08      	ldr	r3, [pc, #32]	; (8012448 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	2b01      	cmp	r3, #1
 801242a:	d10c      	bne.n	8012446 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801242c:	8803      	ldrh	r3, [r0, #0]
 801242e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012432:	8842      	ldrh	r2, [r0, #2]
 8012434:	8002      	strh	r2, [r0, #0]
 8012436:	185a      	adds	r2, r3, r1
 8012438:	4b04      	ldr	r3, [pc, #16]	; (801244c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801243a:	881b      	ldrh	r3, [r3, #0]
 801243c:	1a9b      	subs	r3, r3, r2
 801243e:	8043      	strh	r3, [r0, #2]
 8012440:	88c3      	ldrh	r3, [r0, #6]
 8012442:	80c1      	strh	r1, [r0, #6]
 8012444:	8083      	strh	r3, [r0, #4]
 8012446:	4770      	bx	lr
 8012448:	2400f588 	.word	0x2400f588
 801244c:	2400f584 	.word	0x2400f584

08012450 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012450:	4b07      	ldr	r3, [pc, #28]	; (8012470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012452:	b510      	push	{r4, lr}
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	2b01      	cmp	r3, #1
 8012458:	d108      	bne.n	801246c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801245a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801245e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012462:	8003      	strh	r3, [r0, #0]
 8012464:	8893      	ldrh	r3, [r2, #4]
 8012466:	3b01      	subs	r3, #1
 8012468:	1b1b      	subs	r3, r3, r4
 801246a:	800b      	strh	r3, [r1, #0]
 801246c:	bd10      	pop	{r4, pc}
 801246e:	bf00      	nop
 8012470:	2400f588 	.word	0x2400f588

08012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012474:	4b0a      	ldr	r3, [pc, #40]	; (80124a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012476:	460a      	mov	r2, r1
 8012478:	b510      	push	{r4, lr}
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b01      	cmp	r3, #1
 801247e:	d10d      	bne.n	801249c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012480:	8881      	ldrh	r1, [r0, #4]
 8012482:	8803      	ldrh	r3, [r0, #0]
 8012484:	440b      	add	r3, r1
 8012486:	4601      	mov	r1, r0
 8012488:	3b01      	subs	r3, #1
 801248a:	f821 3b02 	strh.w	r3, [r1], #2
 801248e:	f7ff ffdf 	bl	8012450 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012492:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012496:	88c2      	ldrh	r2, [r0, #6]
 8012498:	80c3      	strh	r3, [r0, #6]
 801249a:	8082      	strh	r2, [r0, #4]
 801249c:	bd10      	pop	{r4, pc}
 801249e:	bf00      	nop
 80124a0:	2400f588 	.word	0x2400f588

080124a4 <_ZN8touchgfx11Application13requestRedrawEv>:
 80124a4:	4b06      	ldr	r3, [pc, #24]	; (80124c0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80124a6:	2100      	movs	r1, #0
 80124a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124ac:	4b05      	ldr	r3, [pc, #20]	; (80124c4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80124ae:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80124b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124b6:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80124ba:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80124be:	4770      	bx	lr
 80124c0:	2400f584 	.word	0x2400f584
 80124c4:	2400f586 	.word	0x2400f586

080124c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80124c8:	4b03      	ldr	r3, [pc, #12]	; (80124d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80124ca:	6818      	ldr	r0, [r3, #0]
 80124cc:	b110      	cbz	r0, 80124d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80124ce:	6803      	ldr	r3, [r0, #0]
 80124d0:	699b      	ldr	r3, [r3, #24]
 80124d2:	4718      	bx	r3
 80124d4:	4770      	bx	lr
 80124d6:	bf00      	nop
 80124d8:	2400f5d4 	.word	0x2400f5d4

080124dc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80124dc:	4770      	bx	lr
	...

080124e0 <_ZN8touchgfx11Application4drawEv>:
 80124e0:	4b09      	ldr	r3, [pc, #36]	; (8012508 <_ZN8touchgfx11Application4drawEv+0x28>)
 80124e2:	b507      	push	{r0, r1, r2, lr}
 80124e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124e8:	2100      	movs	r1, #0
 80124ea:	4b08      	ldr	r3, [pc, #32]	; (801250c <_ZN8touchgfx11Application4drawEv+0x2c>)
 80124ec:	9100      	str	r1, [sp, #0]
 80124ee:	4669      	mov	r1, sp
 80124f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124f4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80124f8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80124fc:	6803      	ldr	r3, [r0, #0]
 80124fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012500:	4798      	blx	r3
 8012502:	b003      	add	sp, #12
 8012504:	f85d fb04 	ldr.w	pc, [sp], #4
 8012508:	2400f584 	.word	0x2400f584
 801250c:	2400f586 	.word	0x2400f586

08012510 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012510:	4b03      	ldr	r3, [pc, #12]	; (8012520 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012512:	6818      	ldr	r0, [r3, #0]
 8012514:	b110      	cbz	r0, 801251c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012516:	6803      	ldr	r3, [r0, #0]
 8012518:	69db      	ldr	r3, [r3, #28]
 801251a:	4718      	bx	r3
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	2400f5d4 	.word	0x2400f5d4

08012524 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012524:	4b03      	ldr	r3, [pc, #12]	; (8012534 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012526:	6818      	ldr	r0, [r3, #0]
 8012528:	b110      	cbz	r0, 8012530 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801252a:	6803      	ldr	r3, [r0, #0]
 801252c:	6a1b      	ldr	r3, [r3, #32]
 801252e:	4718      	bx	r3
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	2400f5d4 	.word	0x2400f5d4

08012538 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8012538:	2300      	movs	r3, #0
 801253a:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801253e:	4770      	bx	lr

08012540 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012540:	4b03      	ldr	r3, [pc, #12]	; (8012550 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012542:	6818      	ldr	r0, [r3, #0]
 8012544:	b110      	cbz	r0, 801254c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012546:	6803      	ldr	r3, [r0, #0]
 8012548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801254a:	4718      	bx	r3
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	2400f5d4 	.word	0x2400f5d4

08012554 <_ZN8touchgfx11ApplicationD1Ev>:
 8012554:	4770      	bx	lr

08012556 <_ZN8touchgfx11ApplicationD0Ev>:
 8012556:	b510      	push	{r4, lr}
 8012558:	4604      	mov	r4, r0
 801255a:	f44f 719e 	mov.w	r1, #316	; 0x13c
 801255e:	f00b fe2a 	bl	801e1b6 <_ZdlPvj>
 8012562:	4620      	mov	r0, r4
 8012564:	bd10      	pop	{r4, pc}

08012566 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012566:	b510      	push	{r4, lr}
 8012568:	f9b1 4000 	ldrsh.w	r4, [r1]
 801256c:	888a      	ldrh	r2, [r1, #4]
 801256e:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012572:	4422      	add	r2, r4
 8012574:	b212      	sxth	r2, r2
 8012576:	4293      	cmp	r3, r2
 8012578:	da15      	bge.n	80125a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801257a:	8882      	ldrh	r2, [r0, #4]
 801257c:	4413      	add	r3, r2
 801257e:	b21b      	sxth	r3, r3
 8012580:	429c      	cmp	r4, r3
 8012582:	da10      	bge.n	80125a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012584:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012588:	88c9      	ldrh	r1, [r1, #6]
 801258a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801258e:	4419      	add	r1, r3
 8012590:	b209      	sxth	r1, r1
 8012592:	428a      	cmp	r2, r1
 8012594:	da07      	bge.n	80125a6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012596:	88c0      	ldrh	r0, [r0, #6]
 8012598:	4410      	add	r0, r2
 801259a:	b200      	sxth	r0, r0
 801259c:	4283      	cmp	r3, r0
 801259e:	bfac      	ite	ge
 80125a0:	2000      	movge	r0, #0
 80125a2:	2001      	movlt	r0, #1
 80125a4:	bd10      	pop	{r4, pc}
 80125a6:	2000      	movs	r0, #0
 80125a8:	e7fc      	b.n	80125a4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080125aa <_ZN8touchgfx4Rect10restrictToEss>:
 80125aa:	f9b0 3000 	ldrsh.w	r3, [r0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	b510      	push	{r4, lr}
 80125b2:	da04      	bge.n	80125be <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80125b4:	8884      	ldrh	r4, [r0, #4]
 80125b6:	4423      	add	r3, r4
 80125b8:	8083      	strh	r3, [r0, #4]
 80125ba:	2300      	movs	r3, #0
 80125bc:	8003      	strh	r3, [r0, #0]
 80125be:	f9b0 4000 	ldrsh.w	r4, [r0]
 80125c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80125c6:	1b09      	subs	r1, r1, r4
 80125c8:	428b      	cmp	r3, r1
 80125ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80125ce:	bfc8      	it	gt
 80125d0:	8081      	strhgt	r1, [r0, #4]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	da04      	bge.n	80125e0 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80125d6:	88c1      	ldrh	r1, [r0, #6]
 80125d8:	440b      	add	r3, r1
 80125da:	80c3      	strh	r3, [r0, #6]
 80125dc:	2300      	movs	r3, #0
 80125de:	8043      	strh	r3, [r0, #2]
 80125e0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80125e4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80125e8:	1a52      	subs	r2, r2, r1
 80125ea:	4293      	cmp	r3, r2
 80125ec:	bfc8      	it	gt
 80125ee:	80c2      	strhgt	r2, [r0, #6]
 80125f0:	bd10      	pop	{r4, pc}
	...

080125f4 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80125f4:	4b10      	ldr	r3, [pc, #64]	; (8012638 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80125f6:	b510      	push	{r4, lr}
 80125f8:	460c      	mov	r4, r1
 80125fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80125fe:	4b0f      	ldr	r3, [pc, #60]	; (801263c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012600:	4620      	mov	r0, r4
 8012602:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012606:	f7ff ffd0 	bl	80125aa <_ZN8touchgfx4Rect10restrictToEss>
 801260a:	4b0d      	ldr	r3, [pc, #52]	; (8012640 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801260c:	6818      	ldr	r0, [r3, #0]
 801260e:	b190      	cbz	r0, 8012636 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012610:	6803      	ldr	r3, [r0, #0]
 8012612:	4621      	mov	r1, r4
 8012614:	689b      	ldr	r3, [r3, #8]
 8012616:	4798      	blx	r3
 8012618:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801261a:	6818      	ldr	r0, [r3, #0]
 801261c:	b118      	cbz	r0, 8012626 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801261e:	6803      	ldr	r3, [r0, #0]
 8012620:	4621      	mov	r1, r4
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	4798      	blx	r3
 8012626:	4b08      	ldr	r3, [pc, #32]	; (8012648 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012628:	4621      	mov	r1, r4
 801262a:	6818      	ldr	r0, [r3, #0]
 801262c:	6803      	ldr	r3, [r0, #0]
 801262e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012632:	69db      	ldr	r3, [r3, #28]
 8012634:	4718      	bx	r3
 8012636:	bd10      	pop	{r4, pc}
 8012638:	2400f586 	.word	0x2400f586
 801263c:	2400f584 	.word	0x2400f584
 8012640:	2400f5d4 	.word	0x2400f5d4
 8012644:	2400f5d0 	.word	0x2400f5d0
 8012648:	2400f590 	.word	0x2400f590

0801264c <_ZNK8touchgfx4Rect8includesERKS0_>:
 801264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801264e:	4606      	mov	r6, r0
 8012650:	4608      	mov	r0, r1
 8012652:	460f      	mov	r7, r1
 8012654:	f7fa fed1 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012658:	b9e8      	cbnz	r0, 8012696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801265a:	f9b7 5000 	ldrsh.w	r5, [r7]
 801265e:	f9b6 4000 	ldrsh.w	r4, [r6]
 8012662:	42a5      	cmp	r5, r4
 8012664:	db17      	blt.n	8012696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012666:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801266a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801266e:	429a      	cmp	r2, r3
 8012670:	db11      	blt.n	8012696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012672:	88b9      	ldrh	r1, [r7, #4]
 8012674:	440d      	add	r5, r1
 8012676:	88b1      	ldrh	r1, [r6, #4]
 8012678:	440c      	add	r4, r1
 801267a:	b22d      	sxth	r5, r5
 801267c:	b224      	sxth	r4, r4
 801267e:	42a5      	cmp	r5, r4
 8012680:	dc09      	bgt.n	8012696 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012682:	88f8      	ldrh	r0, [r7, #6]
 8012684:	4410      	add	r0, r2
 8012686:	88f2      	ldrh	r2, [r6, #6]
 8012688:	4413      	add	r3, r2
 801268a:	b200      	sxth	r0, r0
 801268c:	b21b      	sxth	r3, r3
 801268e:	4298      	cmp	r0, r3
 8012690:	bfcc      	ite	gt
 8012692:	2000      	movgt	r0, #0
 8012694:	2001      	movle	r0, #1
 8012696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012698 <_ZN8touchgfx11Application11getInstanceEv>:
 8012698:	4b01      	ldr	r3, [pc, #4]	; (80126a0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	4770      	bx	lr
 801269e:	bf00      	nop
 80126a0:	2400f5e4 	.word	0x2400f5e4

080126a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80126a4:	2300      	movs	r3, #0
 80126a6:	b510      	push	{r4, lr}
 80126a8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80126ac:	4604      	mov	r4, r0
 80126ae:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80126b2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80126b6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80126ba:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 80126be:	429a      	cmp	r2, r3
 80126c0:	d90e      	bls.n	80126e0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80126c2:	18e2      	adds	r2, r4, r3
 80126c4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 80126c8:	b122      	cbz	r2, 80126d4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80126ca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80126ce:	6803      	ldr	r3, [r0, #0]
 80126d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126d2:	4798      	blx	r3
 80126d4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80126d8:	3301      	adds	r3, #1
 80126da:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80126de:	e7ea      	b.n	80126b6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80126e0:	bd10      	pop	{r4, pc}

080126e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80126e2:	2300      	movs	r3, #0
 80126e4:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80126e8:	30a4      	adds	r0, #164	; 0xa4
 80126ea:	f820 3c24 	strh.w	r3, [r0, #-36]
 80126ee:	f802 3b01 	strb.w	r3, [r2], #1
 80126f2:	4282      	cmp	r2, r0
 80126f4:	d1fb      	bne.n	80126ee <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80126f6:	4770      	bx	lr

080126f8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80126f8:	b570      	push	{r4, r5, r6, lr}
 80126fa:	4c0b      	ldr	r4, [pc, #44]	; (8012728 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80126fc:	4605      	mov	r5, r0
 80126fe:	460e      	mov	r6, r1
 8012700:	6820      	ldr	r0, [r4, #0]
 8012702:	b110      	cbz	r0, 801270a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8012704:	6803      	ldr	r3, [r0, #0]
 8012706:	695b      	ldr	r3, [r3, #20]
 8012708:	4798      	blx	r3
 801270a:	1d28      	adds	r0, r5, #4
 801270c:	f7ff ffe9 	bl	80126e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012710:	6026      	str	r6, [r4, #0]
 8012712:	6833      	ldr	r3, [r6, #0]
 8012714:	4630      	mov	r0, r6
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	4798      	blx	r3
 801271a:	682b      	ldr	r3, [r5, #0]
 801271c:	4628      	mov	r0, r5
 801271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012724:	4718      	bx	r3
 8012726:	bf00      	nop
 8012728:	2400f5d4 	.word	0x2400f5d4

0801272c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801272c:	2300      	movs	r3, #0
 801272e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8012732:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8012736:	461a      	mov	r2, r3
 8012738:	b5f0      	push	{r4, r5, r6, r7, lr}
 801273a:	461c      	mov	r4, r3
 801273c:	461d      	mov	r5, r3
 801273e:	459c      	cmp	ip, r3
 8012740:	dd1a      	ble.n	8012778 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8012742:	18c6      	adds	r6, r0, r3
 8012744:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8012748:	b16e      	cbz	r6, 8012766 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801274a:	429a      	cmp	r2, r3
 801274c:	d008      	beq.n	8012760 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801274e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012752:	fa1f fe82 	uxth.w	lr, r2
 8012756:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801275a:	1887      	adds	r7, r0, r2
 801275c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8012760:	3201      	adds	r2, #1
 8012762:	3301      	adds	r3, #1
 8012764:	e7eb      	b.n	801273e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8012766:	4299      	cmp	r1, r3
 8012768:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 801276c:	bfa8      	it	ge
 801276e:	3501      	addge	r5, #1
 8012770:	429e      	cmp	r6, r3
 8012772:	bfc8      	it	gt
 8012774:	3401      	addgt	r4, #1
 8012776:	e7f4      	b.n	8012762 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8012778:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 801277c:	1b49      	subs	r1, r1, r5
 801277e:	1b1b      	subs	r3, r3, r4
 8012780:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8012784:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8012788:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 801278c:	4293      	cmp	r3, r2
 801278e:	dd03      	ble.n	8012798 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8012790:	3b01      	subs	r3, #1
 8012792:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8012796:	e7f7      	b.n	8012788 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801279c <_ZN8touchgfx11Application15handleTickEventEv>:
 801279c:	b570      	push	{r4, r5, r6, lr}
 801279e:	4d16      	ldr	r5, [pc, #88]	; (80127f8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80127a0:	4604      	mov	r4, r0
 80127a2:	6828      	ldr	r0, [r5, #0]
 80127a4:	b140      	cbz	r0, 80127b8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80127a6:	7a03      	ldrb	r3, [r0, #8]
 80127a8:	b933      	cbnz	r3, 80127b8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80127aa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80127ae:	6803      	ldr	r3, [r0, #0]
 80127b0:	689b      	ldr	r3, [r3, #8]
 80127b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127b6:	4718      	bx	r3
 80127b8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 80127bc:	4e0f      	ldr	r6, [pc, #60]	; (80127fc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80127be:	b973      	cbnz	r3, 80127de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80127c0:	b168      	cbz	r0, 80127de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80127c2:	7a03      	ldrb	r3, [r0, #8]
 80127c4:	b15b      	cbz	r3, 80127de <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 80127c6:	6830      	ldr	r0, [r6, #0]
 80127c8:	b110      	cbz	r0, 80127d0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	691b      	ldr	r3, [r3, #16]
 80127ce:	4798      	blx	r3
 80127d0:	6828      	ldr	r0, [r5, #0]
 80127d2:	6803      	ldr	r3, [r0, #0]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	4798      	blx	r3
 80127d8:	2301      	movs	r3, #1
 80127da:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80127de:	3404      	adds	r4, #4
 80127e0:	4620      	mov	r0, r4
 80127e2:	f7ff ff5f 	bl	80126a4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80127e6:	4620      	mov	r0, r4
 80127e8:	f7ff ffa0 	bl	801272c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80127ec:	6830      	ldr	r0, [r6, #0]
 80127ee:	b110      	cbz	r0, 80127f6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80127f0:	6803      	ldr	r3, [r0, #0]
 80127f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f4:	e7dd      	b.n	80127b2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80127f6:	bd70      	pop	{r4, r5, r6, pc}
 80127f8:	2400f5d8 	.word	0x2400f5d8
 80127fc:	2400f5d4 	.word	0x2400f5d4

08012800 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012800:	4603      	mov	r3, r0
 8012802:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8012806:	2200      	movs	r2, #0
 8012808:	801a      	strh	r2, [r3, #0]
 801280a:	3308      	adds	r3, #8
 801280c:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012810:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012814:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012818:	428b      	cmp	r3, r1
 801281a:	d1f5      	bne.n	8012808 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801281c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012820:	4770      	bx	lr
	...

08012824 <_ZN8touchgfx11ApplicationC1Ev>:
 8012824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012826:	4b1d      	ldr	r3, [pc, #116]	; (801289c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012828:	4606      	mov	r6, r0
 801282a:	4604      	mov	r4, r0
 801282c:	2500      	movs	r5, #0
 801282e:	f846 3b04 	str.w	r3, [r6], #4
 8012832:	22a8      	movs	r2, #168	; 0xa8
 8012834:	2100      	movs	r1, #0
 8012836:	4630      	mov	r0, r6
 8012838:	f00c fd60 	bl	801f2fc <memset>
 801283c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8012840:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8012844:	4f16      	ldr	r7, [pc, #88]	; (80128a0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012846:	f7ff ffdb 	bl	8012800 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801284a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801284e:	f7ff ffd7 	bl	8012800 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012852:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8012856:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801285a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801285e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8012862:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8012866:	490f      	ldr	r1, [pc, #60]	; (80128a4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012868:	480f      	ldr	r0, [pc, #60]	; (80128a8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801286a:	f00b f879 	bl	801d960 <CRC_Lock>
 801286e:	4b0f      	ldr	r3, [pc, #60]	; (80128ac <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012870:	b158      	cbz	r0, 801288a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012872:	801d      	strh	r5, [r3, #0]
 8012874:	2300      	movs	r3, #0
 8012876:	4a0e      	ldr	r2, [pc, #56]	; (80128b0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012878:	4630      	mov	r0, r6
 801287a:	6013      	str	r3, [r2, #0]
 801287c:	4a0d      	ldr	r2, [pc, #52]	; (80128b4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801287e:	603b      	str	r3, [r7, #0]
 8012880:	6013      	str	r3, [r2, #0]
 8012882:	f7ff ff2e 	bl	80126e2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012886:	4620      	mov	r0, r4
 8012888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801288a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801288e:	2002      	movs	r0, #2
 8012890:	801a      	strh	r2, [r3, #0]
 8012892:	6038      	str	r0, [r7, #0]
 8012894:	f001 faee 	bl	8013e74 <_ZN8touchgfx6Screen4drawEv>
 8012898:	e7ec      	b.n	8012874 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801289a:	bf00      	nop
 801289c:	0802310c 	.word	0x0802310c
 80128a0:	2400f5d4 	.word	0x2400f5d4
 80128a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80128a8:	f407a5c2 	.word	0xf407a5c2
 80128ac:	2400006c 	.word	0x2400006c
 80128b0:	2400f5e4 	.word	0x2400f5e4
 80128b4:	2400f5d8 	.word	0x2400f5d8

080128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80128b8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80128bc:	3b01      	subs	r3, #1
 80128be:	b29b      	uxth	r3, r3
 80128c0:	428b      	cmp	r3, r1
 80128c2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80128c6:	b510      	push	{r4, lr}
 80128c8:	d908      	bls.n	80128dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80128ca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80128ce:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80128d2:	681a      	ldr	r2, [r3, #0]
 80128d4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80128d8:	685a      	ldr	r2, [r3, #4]
 80128da:	6062      	str	r2, [r4, #4]
 80128dc:	bd10      	pop	{r4, pc}
	...

080128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 80128e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128e4:	b08f      	sub	sp, #60	; 0x3c
 80128e6:	4b8f      	ldr	r3, [pc, #572]	; (8012b24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 80128e8:	4683      	mov	fp, r0
 80128ea:	ac0a      	add	r4, sp, #40	; 0x28
 80128ec:	e884 0006 	stmia.w	r4, {r1, r2}
 80128f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80128f4:	4620      	mov	r0, r4
 80128f6:	4b8c      	ldr	r3, [pc, #560]	; (8012b28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80128f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 80128fc:	f7ff fe55 	bl	80125aa <_ZN8touchgfx4Rect10restrictToEss>
 8012900:	4620      	mov	r0, r4
 8012902:	f7fa fd7a 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012906:	2800      	cmp	r0, #0
 8012908:	d16a      	bne.n	80129e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801290a:	9403      	str	r4, [sp, #12]
 801290c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8012910:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8012914:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012918:	9301      	str	r3, [sp, #4]
 801291a:	35a4      	adds	r5, #164	; 0xa4
 801291c:	b15c      	cbz	r4, 8012936 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801291e:	4629      	mov	r1, r5
 8012920:	9803      	ldr	r0, [sp, #12]
 8012922:	f7ff fe93 	bl	801264c <_ZNK8touchgfx4Rect8includesERKS0_>
 8012926:	3c01      	subs	r4, #1
 8012928:	b118      	cbz	r0, 8012932 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801292a:	b2a1      	uxth	r1, r4
 801292c:	9801      	ldr	r0, [sp, #4]
 801292e:	f7ff ffc3 	bl	80128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012932:	3d08      	subs	r5, #8
 8012934:	e7f2      	b.n	801291c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8012936:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801293a:	f108 33ff 	add.w	r3, r8, #4294967295
 801293e:	f8cd 8010 	str.w	r8, [sp, #16]
 8012942:	9302      	str	r3, [sp, #8]
 8012944:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012948:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801294c:	9306      	str	r3, [sp, #24]
 801294e:	445c      	add	r4, fp
 8012950:	2500      	movs	r5, #0
 8012952:	4626      	mov	r6, r4
 8012954:	f8cd 8014 	str.w	r8, [sp, #20]
 8012958:	462f      	mov	r7, r5
 801295a:	9b05      	ldr	r3, [sp, #20]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d073      	beq.n	8012a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012960:	9903      	ldr	r1, [sp, #12]
 8012962:	4630      	mov	r0, r6
 8012964:	f7ff fdff 	bl	8012566 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012968:	b350      	cbz	r0, 80129c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801296a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801296e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012972:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8012976:	45e6      	cmp	lr, ip
 8012978:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801297c:	db33      	blt.n	80129e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801297e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8012982:	88b3      	ldrh	r3, [r6, #4]
 8012984:	4472      	add	r2, lr
 8012986:	4463      	add	r3, ip
 8012988:	b212      	sxth	r2, r2
 801298a:	b21b      	sxth	r3, r3
 801298c:	429a      	cmp	r2, r3
 801298e:	dc2a      	bgt.n	80129e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012990:	fa1f f289 	uxth.w	r2, r9
 8012994:	88f3      	ldrh	r3, [r6, #6]
 8012996:	45ca      	cmp	sl, r9
 8012998:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801299c:	4413      	add	r3, r2
 801299e:	fa1f fc8a 	uxth.w	ip, sl
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	fa0f fe83 	sxth.w	lr, r3
 80129a8:	db0f      	blt.n	80129ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80129aa:	eba3 030c 	sub.w	r3, r3, ip
 80129ae:	1ac9      	subs	r1, r1, r3
 80129b0:	b209      	sxth	r1, r1
 80129b2:	2900      	cmp	r1, #0
 80129b4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80129b8:	dd12      	ble.n	80129e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80129ba:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80129be:	4605      	mov	r5, r0
 80129c0:	9b05      	ldr	r3, [sp, #20]
 80129c2:	3e08      	subs	r6, #8
 80129c4:	3b01      	subs	r3, #1
 80129c6:	9305      	str	r3, [sp, #20]
 80129c8:	e7c7      	b.n	801295a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80129ca:	4461      	add	r1, ip
 80129cc:	b209      	sxth	r1, r1
 80129ce:	4571      	cmp	r1, lr
 80129d0:	dc38      	bgt.n	8012a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80129d2:	eba2 020c 	sub.w	r2, r2, ip
 80129d6:	b212      	sxth	r2, r2
 80129d8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80129dc:	2a00      	cmp	r2, #0
 80129de:	dcee      	bgt.n	80129be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80129e0:	b00f      	add	sp, #60	; 0x3c
 80129e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e6:	45ca      	cmp	sl, r9
 80129e8:	db2c      	blt.n	8012a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80129ea:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80129ee:	449a      	add	sl, r3
 80129f0:	88f3      	ldrh	r3, [r6, #6]
 80129f2:	4499      	add	r9, r3
 80129f4:	fa0f fa8a 	sxth.w	sl, sl
 80129f8:	fa0f f989 	sxth.w	r9, r9
 80129fc:	45ca      	cmp	sl, r9
 80129fe:	dc21      	bgt.n	8012a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012a00:	fa1f f28c 	uxth.w	r2, ip
 8012a04:	88b3      	ldrh	r3, [r6, #4]
 8012a06:	45e6      	cmp	lr, ip
 8012a08:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012a0c:	4413      	add	r3, r2
 8012a0e:	fa1f f98e 	uxth.w	r9, lr
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	fa0f fa83 	sxth.w	sl, r3
 8012a18:	db0a      	blt.n	8012a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012a1a:	eba3 0309 	sub.w	r3, r3, r9
 8012a1e:	1ac9      	subs	r1, r1, r3
 8012a20:	b209      	sxth	r1, r1
 8012a22:	2900      	cmp	r1, #0
 8012a24:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8012a28:	ddda      	ble.n	80129e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012a2a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8012a2e:	e7c6      	b.n	80129be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012a30:	4449      	add	r1, r9
 8012a32:	b209      	sxth	r1, r1
 8012a34:	4551      	cmp	r1, sl
 8012a36:	dc05      	bgt.n	8012a44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012a38:	eba2 0209 	sub.w	r2, r2, r9
 8012a3c:	b212      	sxth	r2, r2
 8012a3e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8012a42:	e7cb      	b.n	80129dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8012a44:	4607      	mov	r7, r0
 8012a46:	e7bb      	b.n	80129c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012a48:	2d00      	cmp	r5, #0
 8012a4a:	d181      	bne.n	8012950 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8012a4c:	2f00      	cmp	r7, #0
 8012a4e:	f000 81dd 	beq.w	8012e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012a52:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8012a56:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8012a5a:	b2b3      	uxth	r3, r6
 8012a5c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8012a60:	b2b9      	uxth	r1, r7
 8012a62:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8012a66:	441a      	add	r2, r3
 8012a68:	448a      	add	sl, r1
 8012a6a:	9105      	str	r1, [sp, #20]
 8012a6c:	b292      	uxth	r2, r2
 8012a6e:	fa1f fa8a 	uxth.w	sl, sl
 8012a72:	fa0f f882 	sxth.w	r8, r2
 8012a76:	fa0f f98a 	sxth.w	r9, sl
 8012a7a:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012a7e:	9b04      	ldr	r3, [sp, #16]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d053      	beq.n	8012b2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012a84:	9903      	ldr	r1, [sp, #12]
 8012a86:	4620      	mov	r0, r4
 8012a88:	f7ff fd6d 	bl	8012566 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012a8c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012a90:	b1c0      	cbz	r0, 8012ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012a92:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012a96:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012a9a:	4576      	cmp	r6, lr
 8012a9c:	dc23      	bgt.n	8012ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012a9e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012aa2:	44f4      	add	ip, lr
 8012aa4:	fa0f fc8c 	sxth.w	ip, ip
 8012aa8:	45e0      	cmp	r8, ip
 8012aaa:	db1c      	blt.n	8012ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012aac:	428f      	cmp	r7, r1
 8012aae:	fa1f fc81 	uxth.w	ip, r1
 8012ab2:	88e1      	ldrh	r1, [r4, #6]
 8012ab4:	dc0d      	bgt.n	8012ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8012ab6:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012aba:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012abe:	eba1 010c 	sub.w	r1, r1, ip
 8012ac2:	80e1      	strh	r1, [r4, #6]
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	9904      	ldr	r1, [sp, #16]
 8012ac8:	3c08      	subs	r4, #8
 8012aca:	4605      	mov	r5, r0
 8012acc:	3901      	subs	r1, #1
 8012ace:	9104      	str	r1, [sp, #16]
 8012ad0:	e7d3      	b.n	8012a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8012ad2:	4461      	add	r1, ip
 8012ad4:	b209      	sxth	r1, r1
 8012ad6:	4549      	cmp	r1, r9
 8012ad8:	dcf5      	bgt.n	8012ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012ada:	9905      	ldr	r1, [sp, #20]
 8012adc:	eba1 0c0c 	sub.w	ip, r1, ip
 8012ae0:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012ae4:	e7ee      	b.n	8012ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012ae6:	428f      	cmp	r7, r1
 8012ae8:	dced      	bgt.n	8012ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012aea:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012aee:	4461      	add	r1, ip
 8012af0:	b209      	sxth	r1, r1
 8012af2:	4589      	cmp	r9, r1
 8012af4:	dbe7      	blt.n	8012ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012af6:	4576      	cmp	r6, lr
 8012af8:	fa1f fc8e 	uxth.w	ip, lr
 8012afc:	88a1      	ldrh	r1, [r4, #4]
 8012afe:	dc07      	bgt.n	8012b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012b00:	eba2 0c0c 	sub.w	ip, r2, ip
 8012b04:	f8a4 8000 	strh.w	r8, [r4]
 8012b08:	eba1 010c 	sub.w	r1, r1, ip
 8012b0c:	80a1      	strh	r1, [r4, #4]
 8012b0e:	e7d9      	b.n	8012ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012b10:	4461      	add	r1, ip
 8012b12:	b209      	sxth	r1, r1
 8012b14:	4588      	cmp	r8, r1
 8012b16:	dbd6      	blt.n	8012ac6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012b18:	eba3 0c0c 	sub.w	ip, r3, ip
 8012b1c:	f8a4 c004 	strh.w	ip, [r4, #4]
 8012b20:	e7d0      	b.n	8012ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8012b22:	bf00      	nop
 8012b24:	2400f586 	.word	0x2400f586
 8012b28:	2400f584 	.word	0x2400f584
 8012b2c:	2d00      	cmp	r5, #0
 8012b2e:	f000 816d 	beq.w	8012e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012b32:	9b06      	ldr	r3, [sp, #24]
 8012b34:	445b      	add	r3, fp
 8012b36:	461c      	mov	r4, r3
 8012b38:	9b02      	ldr	r3, [sp, #8]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	f000 8166 	beq.w	8012e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8012b40:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8012b44:	9803      	ldr	r0, [sp, #12]
 8012b46:	4629      	mov	r1, r5
 8012b48:	f7ff fd80 	bl	801264c <_ZNK8touchgfx4Rect8includesERKS0_>
 8012b4c:	b120      	cbz	r0, 8012b58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8012b4e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8012b52:	9801      	ldr	r0, [sp, #4]
 8012b54:	f7ff feb0 	bl	80128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b58:	9903      	ldr	r1, [sp, #12]
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	f7ff fd03 	bl	8012566 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012b60:	2800      	cmp	r0, #0
 8012b62:	f000 809c 	beq.w	8012c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012b66:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8012b6a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8012b6e:	fa1f f189 	uxth.w	r1, r9
 8012b72:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012b76:	9309      	str	r3, [sp, #36]	; 0x24
 8012b78:	eb01 0c03 	add.w	ip, r1, r3
 8012b7c:	b283      	uxth	r3, r0
 8012b7e:	4548      	cmp	r0, r9
 8012b80:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8012b84:	fa1f fa8c 	uxth.w	sl, ip
 8012b88:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8012b8c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8012b90:	eb03 050c 	add.w	r5, r3, ip
 8012b94:	b2ad      	uxth	r5, r5
 8012b96:	9505      	str	r5, [sp, #20]
 8012b98:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012b9c:	9504      	str	r5, [sp, #16]
 8012b9e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8012ba2:	f340 8099 	ble.w	8012cd8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012ba6:	1a5b      	subs	r3, r3, r1
 8012ba8:	4596      	cmp	lr, r2
 8012baa:	fa0f f08a 	sxth.w	r0, sl
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	b21e      	sxth	r6, r3
 8012bb2:	dd2e      	ble.n	8012c12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012bb4:	9f02      	ldr	r7, [sp, #8]
 8012bb6:	fa1f fe8e 	uxth.w	lr, lr
 8012bba:	b292      	uxth	r2, r2
 8012bbc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8012bc0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012bc4:	9f04      	ldr	r7, [sp, #16]
 8012bc6:	ebae 0102 	sub.w	r1, lr, r2
 8012bca:	44a6      	add	lr, r4
 8012bcc:	1a3f      	subs	r7, r7, r0
 8012bce:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8012bd2:	b289      	uxth	r1, r1
 8012bd4:	4402      	add	r2, r0
 8012bd6:	fa0f fe8e 	sxth.w	lr, lr
 8012bda:	b20d      	sxth	r5, r1
 8012bdc:	b212      	sxth	r2, r2
 8012bde:	436f      	muls	r7, r5
 8012be0:	ebae 0202 	sub.w	r2, lr, r2
 8012be4:	4372      	muls	r2, r6
 8012be6:	4297      	cmp	r7, r2
 8012be8:	db09      	blt.n	8012bfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012bea:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8012bee:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8012bf2:	449c      	add	ip, r3
 8012bf4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012bf8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8012bfc:	e686      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012bfe:	4421      	add	r1, r4
 8012c00:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8012c04:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8012c08:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012c0c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012c10:	e67c      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012c12:	9f04      	ldr	r7, [sp, #16]
 8012c14:	42b8      	cmp	r0, r7
 8012c16:	da27      	bge.n	8012c68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8012c18:	9902      	ldr	r1, [sp, #8]
 8012c1a:	1a3f      	subs	r7, r7, r0
 8012c1c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8012c20:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8012c24:	eb05 010e 	add.w	r1, r5, lr
 8012c28:	fa1f f881 	uxth.w	r8, r1
 8012c2c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8012c30:	4411      	add	r1, r2
 8012c32:	fa0f f988 	sxth.w	r9, r8
 8012c36:	eba2 020e 	sub.w	r2, r2, lr
 8012c3a:	eba1 0108 	sub.w	r1, r1, r8
 8012c3e:	4372      	muls	r2, r6
 8012c40:	b289      	uxth	r1, r1
 8012c42:	fa0f f881 	sxth.w	r8, r1
 8012c46:	fb08 f707 	mul.w	r7, r8, r7
 8012c4a:	42ba      	cmp	r2, r7
 8012c4c:	dc06      	bgt.n	8012c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8012c4e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8012c52:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8012c56:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8012c5a:	e7ca      	b.n	8012bf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8012c5c:	4429      	add	r1, r5
 8012c5e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8012c62:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012c66:	e651      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012c68:	9805      	ldr	r0, [sp, #20]
 8012c6a:	2d06      	cmp	r5, #6
 8012c6c:	ebaa 0000 	sub.w	r0, sl, r0
 8012c70:	b280      	uxth	r0, r0
 8012c72:	fa0f fe80 	sxth.w	lr, r0
 8012c76:	d817      	bhi.n	8012ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012c78:	9b04      	ldr	r3, [sp, #16]
 8012c7a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8012c7e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8012c82:	1c6b      	adds	r3, r5, #1
 8012c84:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8012c88:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012c8c:	9b01      	ldr	r3, [sp, #4]
 8012c8e:	9801      	ldr	r0, [sp, #4]
 8012c90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c94:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012c98:	805a      	strh	r2, [r3, #2]
 8012c9a:	809e      	strh	r6, [r3, #4]
 8012c9c:	80d9      	strh	r1, [r3, #6]
 8012c9e:	9b02      	ldr	r3, [sp, #8]
 8012ca0:	3c08      	subs	r4, #8
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	9302      	str	r3, [sp, #8]
 8012ca6:	e747      	b.n	8012b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012ca8:	9a02      	ldr	r2, [sp, #8]
 8012caa:	45b6      	cmp	lr, r6
 8012cac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012cb0:	db0d      	blt.n	8012cce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012cb2:	449c      	add	ip, r3
 8012cb4:	445a      	add	r2, fp
 8012cb6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8012cba:	fa1f fc8c 	uxth.w	ip, ip
 8012cbe:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8012cc2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8012cc6:	448c      	add	ip, r1
 8012cc8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8012ccc:	e61e      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012cce:	445a      	add	r2, fp
 8012cd0:	4484      	add	ip, r0
 8012cd2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8012cd6:	e78f      	b.n	8012bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012cd8:	fa1f f18e 	uxth.w	r1, lr
 8012cdc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8012ce0:	b293      	uxth	r3, r2
 8012ce2:	4596      	cmp	lr, r2
 8012ce4:	eb01 0806 	add.w	r8, r1, r6
 8012ce8:	9306      	str	r3, [sp, #24]
 8012cea:	fa1f f888 	uxth.w	r8, r8
 8012cee:	9f06      	ldr	r7, [sp, #24]
 8012cf0:	fa0f f388 	sxth.w	r3, r8
 8012cf4:	9307      	str	r3, [sp, #28]
 8012cf6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8012cfa:	443b      	add	r3, r7
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	9308      	str	r3, [sp, #32]
 8012d00:	da24      	bge.n	8012d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012d02:	9905      	ldr	r1, [sp, #20]
 8012d04:	eba3 0308 	sub.w	r3, r3, r8
 8012d08:	eba2 020e 	sub.w	r2, r2, lr
 8012d0c:	eba9 0000 	sub.w	r0, r9, r0
 8012d10:	ebaa 0401 	sub.w	r4, sl, r1
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	b2a4      	uxth	r4, r4
 8012d18:	b219      	sxth	r1, r3
 8012d1a:	b225      	sxth	r5, r4
 8012d1c:	4348      	muls	r0, r1
 8012d1e:	436a      	muls	r2, r5
 8012d20:	4282      	cmp	r2, r0
 8012d22:	9a02      	ldr	r2, [sp, #8]
 8012d24:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012d28:	445a      	add	r2, fp
 8012d2a:	dc06      	bgt.n	8012d3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8012d2c:	9b07      	ldr	r3, [sp, #28]
 8012d2e:	44a4      	add	ip, r4
 8012d30:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8012d34:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8012d38:	e75e      	b.n	8012bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012d3a:	9904      	ldr	r1, [sp, #16]
 8012d3c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8012d40:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8012d44:	4433      	add	r3, r6
 8012d46:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8012d4a:	e5df      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012d4c:	9f06      	ldr	r7, [sp, #24]
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	1bc9      	subs	r1, r1, r7
 8012d52:	fa0f f78a 	sxth.w	r7, sl
 8012d56:	b289      	uxth	r1, r1
 8012d58:	429f      	cmp	r7, r3
 8012d5a:	fa0f fe81 	sxth.w	lr, r1
 8012d5e:	dd23      	ble.n	8012da8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012d60:	9a05      	ldr	r2, [sp, #20]
 8012d62:	eba9 0000 	sub.w	r0, r9, r0
 8012d66:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012d6a:	ebaa 0202 	sub.w	r2, sl, r2
 8012d6e:	9d07      	ldr	r5, [sp, #28]
 8012d70:	fb0e f000 	mul.w	r0, lr, r0
 8012d74:	b292      	uxth	r2, r2
 8012d76:	eba5 0a03 	sub.w	sl, r5, r3
 8012d7a:	9b02      	ldr	r3, [sp, #8]
 8012d7c:	b214      	sxth	r4, r2
 8012d7e:	00db      	lsls	r3, r3, #3
 8012d80:	fb04 fa0a 	mul.w	sl, r4, sl
 8012d84:	445b      	add	r3, fp
 8012d86:	4550      	cmp	r0, sl
 8012d88:	db03      	blt.n	8012d92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012d8a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8012d8e:	4494      	add	ip, r2
 8012d90:	e732      	b.n	8012bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012d92:	9a04      	ldr	r2, [sp, #16]
 8012d94:	4431      	add	r1, r6
 8012d96:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8012d9a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8012d9e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8012da2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8012da6:	e75c      	b.n	8012c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012da8:	9b08      	ldr	r3, [sp, #32]
 8012daa:	2d06      	cmp	r5, #6
 8012dac:	eba3 0308 	sub.w	r3, r3, r8
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	b218      	sxth	r0, r3
 8012db4:	d813      	bhi.n	8012dde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012db6:	9b07      	ldr	r3, [sp, #28]
 8012db8:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8012dbc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8012dc0:	1c6b      	adds	r3, r5, #1
 8012dc2:	9901      	ldr	r1, [sp, #4]
 8012dc4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8012dc8:	9b01      	ldr	r3, [sp, #4]
 8012dca:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012dce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012dd2:	805a      	strh	r2, [r3, #2]
 8012dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012dd6:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012dda:	809a      	strh	r2, [r3, #4]
 8012ddc:	e75f      	b.n	8012c9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012dde:	9c02      	ldr	r4, [sp, #8]
 8012de0:	4570      	cmp	r0, lr
 8012de2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012de6:	db0d      	blt.n	8012e04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012de8:	4431      	add	r1, r6
 8012dea:	9b06      	ldr	r3, [sp, #24]
 8012dec:	445c      	add	r4, fp
 8012dee:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8012df2:	b289      	uxth	r1, r1
 8012df4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8012df8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8012dfc:	4419      	add	r1, r3
 8012dfe:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8012e02:	e583      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e04:	445c      	add	r4, fp
 8012e06:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8012e0a:	e79b      	b.n	8012d44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012e0c:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8012e10:	2e07      	cmp	r6, #7
 8012e12:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012e16:	d812      	bhi.n	8012e3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8012e18:	1c75      	adds	r5, r6, #1
 8012e1a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8012e1e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8012e22:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8012e26:	9d01      	ldr	r5, [sp, #4]
 8012e28:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8012e2c:	442c      	add	r4, r5
 8012e2e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8012e32:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012e36:	8061      	strh	r1, [r4, #2]
 8012e38:	80a2      	strh	r2, [r4, #4]
 8012e3a:	80e3      	strh	r3, [r4, #6]
 8012e3c:	e5d0      	b.n	80129e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012e3e:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8012e42:	3e01      	subs	r6, #1
 8012e44:	445c      	add	r4, fp
 8012e46:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8012e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8012e4e:	2500      	movs	r5, #0
 8012e50:	9305      	str	r3, [sp, #20]
 8012e52:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8012e56:	1e72      	subs	r2, r6, #1
 8012e58:	9302      	str	r3, [sp, #8]
 8012e5a:	4691      	mov	r9, r2
 8012e5c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8012e60:	9304      	str	r3, [sp, #16]
 8012e62:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8012e66:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012e6a:	6818      	ldr	r0, [r3, #0]
 8012e6c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012e70:	9207      	str	r2, [sp, #28]
 8012e72:	bf16      	itet	ne
 8012e74:	9905      	ldrne	r1, [sp, #20]
 8012e76:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8012e7a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012e7e:	9306      	str	r3, [sp, #24]
 8012e80:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012e84:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8012e88:	fb18 f801 	smulbb	r8, r8, r1
 8012e8c:	6859      	ldr	r1, [r3, #4]
 8012e8e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012e92:	4671      	mov	r1, lr
 8012e94:	a80c      	add	r0, sp, #48	; 0x30
 8012e96:	f7fb fffc 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012e9a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012e9e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8012ea2:	f04f 0c08 	mov.w	ip, #8
 8012ea6:	9b04      	ldr	r3, [sp, #16]
 8012ea8:	9a02      	ldr	r2, [sp, #8]
 8012eaa:	fb10 f001 	smulbb	r0, r0, r1
 8012eae:	fb02 8803 	mla	r8, r2, r3, r8
 8012eb2:	eba0 0108 	sub.w	r1, r0, r8
 8012eb6:	fb90 f0fc 	sdiv	r0, r0, ip
 8012eba:	4288      	cmp	r0, r1
 8012ebc:	dc20      	bgt.n	8012f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012ebe:	4551      	cmp	r1, sl
 8012ec0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012ec4:	da03      	bge.n	8012ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 8012ec6:	b1d9      	cbz	r1, 8012f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8012ec8:	468a      	mov	sl, r1
 8012eca:	464f      	mov	r7, r9
 8012ecc:	4635      	mov	r5, r6
 8012ece:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ed2:	f119 0f02 	cmn.w	r9, #2
 8012ed6:	d1c6      	bne.n	8012e66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8012ed8:	4616      	mov	r6, r2
 8012eda:	3201      	adds	r2, #1
 8012edc:	f1a4 0408 	sub.w	r4, r4, #8
 8012ee0:	d1b7      	bne.n	8012e52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 8012ee2:	9b01      	ldr	r3, [sp, #4]
 8012ee4:	b2ac      	uxth	r4, r5
 8012ee6:	00ed      	lsls	r5, r5, #3
 8012ee8:	1958      	adds	r0, r3, r5
 8012eea:	1c7b      	adds	r3, r7, #1
 8012eec:	d10b      	bne.n	8012f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8012eee:	4601      	mov	r1, r0
 8012ef0:	9803      	ldr	r0, [sp, #12]
 8012ef2:	f7fb ffce 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	9801      	ldr	r0, [sp, #4]
 8012efa:	f7ff fcdd 	bl	80128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012efe:	e505      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012f00:	464f      	mov	r7, r9
 8012f02:	4635      	mov	r5, r6
 8012f04:	e7ed      	b.n	8012ee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 8012f06:	9b01      	ldr	r3, [sp, #4]
 8012f08:	00ff      	lsls	r7, r7, #3
 8012f0a:	445d      	add	r5, fp
 8012f0c:	19d9      	adds	r1, r3, r7
 8012f0e:	445f      	add	r7, fp
 8012f10:	f7fb ffbf 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012f14:	9b03      	ldr	r3, [sp, #12]
 8012f16:	cb03      	ldmia	r3!, {r0, r1}
 8012f18:	9b03      	ldr	r3, [sp, #12]
 8012f1a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8012f1e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8012f22:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012f26:	6869      	ldr	r1, [r5, #4]
 8012f28:	c303      	stmia	r3!, {r0, r1}
 8012f2a:	e7e4      	b.n	8012ef6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

08012f2c <_ZN8touchgfx11Application10invalidateEv>:
 8012f2c:	4b09      	ldr	r3, [pc, #36]	; (8012f54 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012f2e:	b082      	sub	sp, #8
 8012f30:	2100      	movs	r1, #0
 8012f32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f36:	4b08      	ldr	r3, [pc, #32]	; (8012f58 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012f38:	9100      	str	r1, [sp, #0]
 8012f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f3e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012f42:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012f46:	ab02      	add	r3, sp, #8
 8012f48:	e913 0006 	ldmdb	r3, {r1, r2}
 8012f4c:	b002      	add	sp, #8
 8012f4e:	f7ff bcc7 	b.w	80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012f52:	bf00      	nop
 8012f54:	2400f584 	.word	0x2400f584
 8012f58:	2400f586 	.word	0x2400f586

08012f5c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f60:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8012f64:	b09b      	sub	sp, #108	; 0x6c
 8012f66:	4604      	mov	r4, r0
 8012f68:	4630      	mov	r0, r6
 8012f6a:	f7fa fa46 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f6e:	4605      	mov	r5, r0
 8012f70:	b940      	cbnz	r0, 8012f84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8012f72:	4620      	mov	r0, r4
 8012f74:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012f78:	f7ff fcb2 	bl	80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012f7c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012f80:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8012f84:	4bc8      	ldr	r3, [pc, #800]	; (80132a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d03e      	beq.n	801300a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012f8c:	4dc7      	ldr	r5, [pc, #796]	; (80132ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012f8e:	4628      	mov	r0, r5
 8012f90:	f7fa fa33 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f94:	4606      	mov	r6, r0
 8012f96:	2800      	cmp	r0, #0
 8012f98:	d137      	bne.n	801300a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012f9a:	4628      	mov	r0, r5
 8012f9c:	f7ff fa28 	bl	80123f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012fa0:	6829      	ldr	r1, [r5, #0]
 8012fa2:	686a      	ldr	r2, [r5, #4]
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	f7ff fc9b 	bl	80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012faa:	802e      	strh	r6, [r5, #0]
 8012fac:	806e      	strh	r6, [r5, #2]
 8012fae:	80ae      	strh	r6, [r5, #4]
 8012fb0:	80ee      	strh	r6, [r5, #6]
 8012fb2:	ae09      	add	r6, sp, #36	; 0x24
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	f7ff fc23 	bl	8012800 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012fba:	4abd      	ldr	r2, [pc, #756]	; (80132b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012fbc:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8012fc0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8012fc4:	8815      	ldrh	r5, [r2, #0]
 8012fc6:	9202      	str	r2, [sp, #8]
 8012fc8:	462b      	mov	r3, r5
 8012fca:	429f      	cmp	r7, r3
 8012fcc:	d924      	bls.n	8013018 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8012fce:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8012fd2:	2907      	cmp	r1, #7
 8012fd4:	d816      	bhi.n	8013004 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8012fd6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012fda:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8012fde:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8012fe2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8012fe6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012fea:	1c4a      	adds	r2, r1, #1
 8012fec:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8012ff0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8012ff4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8012ff8:	f8a2 9002 	strh.w	r9, [r2, #2]
 8012ffc:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013000:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013004:	3301      	adds	r3, #1
 8013006:	b29b      	uxth	r3, r3
 8013008:	e7df      	b.n	8012fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801300a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1cf      	bne.n	8012fb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8013012:	b01b      	add	sp, #108	; 0x6c
 8013014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013018:	462f      	mov	r7, r5
 801301a:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 801301e:	42bb      	cmp	r3, r7
 8013020:	d90b      	bls.n	801303a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8013022:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013026:	3701      	adds	r7, #1
 8013028:	4620      	mov	r0, r4
 801302a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801302e:	b2bf      	uxth	r7, r7
 8013030:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8013034:	f7ff fc54 	bl	80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013038:	e7ef      	b.n	801301a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801303a:	4a9e      	ldr	r2, [pc, #632]	; (80132b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801303c:	6813      	ldr	r3, [r2, #0]
 801303e:	4690      	mov	r8, r2
 8013040:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013044:	2b01      	cmp	r3, #1
 8013046:	f040 80e4 	bne.w	8013212 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801304a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801304e:	4629      	mov	r1, r5
 8013050:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8013054:	2500      	movs	r5, #0
 8013056:	33ae      	adds	r3, #174	; 0xae
 8013058:	428f      	cmp	r7, r1
 801305a:	f103 0308 	add.w	r3, r3, #8
 801305e:	dd0a      	ble.n	8013076 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 8013060:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8013064:	3101      	adds	r1, #1
 8013066:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801306a:	4402      	add	r2, r0
 801306c:	b212      	sxth	r2, r2
 801306e:	4295      	cmp	r5, r2
 8013070:	bfb8      	it	lt
 8013072:	4615      	movlt	r5, r2
 8013074:	e7f0      	b.n	8013058 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 8013076:	4b90      	ldr	r3, [pc, #576]	; (80132b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8013078:	f8df b238 	ldr.w	fp, [pc, #568]	; 80132b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	46d8      	mov	r8, fp
 8013080:	2b0f      	cmp	r3, #15
 8013082:	bf8c      	ite	hi
 8013084:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8013088:	f04f 0a01 	movls.w	sl, #1
 801308c:	2300      	movs	r3, #0
 801308e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013092:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8013096:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801309a:	4438      	add	r0, r7
 801309c:	b207      	sxth	r7, r0
 801309e:	f8db 0000 	ldr.w	r0, [fp]
 80130a2:	42bd      	cmp	r5, r7
 80130a4:	6803      	ldr	r3, [r0, #0]
 80130a6:	f340 8084 	ble.w	80131b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80130aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80130ae:	4798      	blx	r3
 80130b0:	eb07 030a 	add.w	r3, r7, sl
 80130b4:	4298      	cmp	r0, r3
 80130b6:	da07      	bge.n	80130c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80130b8:	4285      	cmp	r5, r0
 80130ba:	dd05      	ble.n	80130c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 80130bc:	4287      	cmp	r7, r0
 80130be:	dd6d      	ble.n	801319c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80130c0:	2f00      	cmp	r7, #0
 80130c2:	dd6b      	ble.n	801319c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80130c4:	4628      	mov	r0, r5
 80130c6:	e004      	b.n	80130d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 80130c8:	4287      	cmp	r7, r0
 80130ca:	dcfb      	bgt.n	80130c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 80130cc:	42a8      	cmp	r0, r5
 80130ce:	bfa8      	it	ge
 80130d0:	4628      	movge	r0, r5
 80130d2:	4b7a      	ldr	r3, [pc, #488]	; (80132bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80130d4:	1bc0      	subs	r0, r0, r7
 80130d6:	2200      	movs	r2, #0
 80130d8:	f8ad 7016 	strh.w	r7, [sp, #22]
 80130dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80130e4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80130e8:	9b02      	ldr	r3, [sp, #8]
 80130ea:	f8ad 001a 	strh.w	r0, [sp, #26]
 80130ee:	881f      	ldrh	r7, [r3, #0]
 80130f0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80130f4:	42bb      	cmp	r3, r7
 80130f6:	d9cc      	bls.n	8013092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80130f8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80130fc:	ab07      	add	r3, sp, #28
 80130fe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013102:	6851      	ldr	r1, [r2, #4]
 8013104:	c303      	stmia	r3!, {r0, r1}
 8013106:	a905      	add	r1, sp, #20
 8013108:	a807      	add	r0, sp, #28
 801310a:	f7ff fa2c 	bl	8012566 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801310e:	2800      	cmp	r0, #0
 8013110:	d04c      	beq.n	80131ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8013112:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013116:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801311a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801311e:	4686      	mov	lr, r0
 8013120:	4290      	cmp	r0, r2
 8013122:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8013126:	4448      	add	r0, r9
 8013128:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801312c:	bfb8      	it	lt
 801312e:	4696      	movlt	lr, r2
 8013130:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013134:	444a      	add	r2, r9
 8013136:	b280      	uxth	r0, r0
 8013138:	4299      	cmp	r1, r3
 801313a:	468c      	mov	ip, r1
 801313c:	b292      	uxth	r2, r2
 801313e:	9303      	str	r3, [sp, #12]
 8013140:	bfb8      	it	lt
 8013142:	469c      	movlt	ip, r3
 8013144:	b203      	sxth	r3, r0
 8013146:	fa0f f982 	sxth.w	r9, r2
 801314a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801314e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8013152:	454b      	cmp	r3, r9
 8013154:	bfb8      	it	lt
 8013156:	4602      	movlt	r2, r0
 8013158:	9b03      	ldr	r3, [sp, #12]
 801315a:	eba2 020e 	sub.w	r2, r2, lr
 801315e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013162:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8013166:	4411      	add	r1, r2
 8013168:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801316c:	4413      	add	r3, r2
 801316e:	b289      	uxth	r1, r1
 8013170:	b29b      	uxth	r3, r3
 8013172:	b208      	sxth	r0, r1
 8013174:	b21a      	sxth	r2, r3
 8013176:	4290      	cmp	r0, r2
 8013178:	bfb8      	it	lt
 801317a:	460b      	movlt	r3, r1
 801317c:	eba3 030c 	sub.w	r3, r3, ip
 8013180:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013184:	a807      	add	r0, sp, #28
 8013186:	f7fa f938 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801318a:	b920      	cbnz	r0, 8013196 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801318c:	6823      	ldr	r3, [r4, #0]
 801318e:	a907      	add	r1, sp, #28
 8013190:	4620      	mov	r0, r4
 8013192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013194:	4798      	blx	r3
 8013196:	3701      	adds	r7, #1
 8013198:	b2bf      	uxth	r7, r7
 801319a:	e7a9      	b.n	80130f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801319c:	f8d8 0000 	ldr.w	r0, [r8]
 80131a0:	2101      	movs	r1, #1
 80131a2:	6803      	ldr	r3, [r0, #0]
 80131a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80131a8:	4798      	blx	r3
 80131aa:	e772      	b.n	8013092 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80131ac:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80131b0:	e7e8      	b.n	8013184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 80131b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b4:	4798      	blx	r3
 80131b6:	4b42      	ldr	r3, [pc, #264]	; (80132c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	f43f af29 	beq.w	8013012 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80131c0:	2300      	movs	r3, #0
 80131c2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80131c6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 80131ca:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 80131ce:	9b02      	ldr	r3, [sp, #8]
 80131d0:	881b      	ldrh	r3, [r3, #0]
 80131d2:	429d      	cmp	r5, r3
 80131d4:	f67f af1d 	bls.w	8013012 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 80131d8:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 80131dc:	2907      	cmp	r1, #7
 80131de:	d815      	bhi.n	801320c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 80131e0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 80131e4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 80131e8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80131ec:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80131f0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80131f4:	1c4a      	adds	r2, r1, #1
 80131f6:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 80131fa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80131fe:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8013202:	f8a2 e002 	strh.w	lr, [r2, #2]
 8013206:	f8a2 c004 	strh.w	ip, [r2, #4]
 801320a:	80d7      	strh	r7, [r2, #6]
 801320c:	3301      	adds	r3, #1
 801320e:	b29b      	uxth	r3, r3
 8013210:	e7df      	b.n	80131d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8013212:	2b02      	cmp	r3, #2
 8013214:	f040 8135 	bne.w	8013482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8013218:	4b2a      	ldr	r3, [pc, #168]	; (80132c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801321a:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	2b01      	cmp	r3, #1
 8013222:	f000 809c 	beq.w	801335e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013226:	9b02      	ldr	r3, [sp, #8]
 8013228:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 801322c:	f8b3 b000 	ldrh.w	fp, [r3]
 8013230:	f10b 0b01 	add.w	fp, fp, #1
 8013234:	fa1f fb8b 	uxth.w	fp, fp
 8013238:	2a00      	cmp	r2, #0
 801323a:	d0bc      	beq.n	80131b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801323c:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 8013240:	4659      	mov	r1, fp
 8013242:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8013246:	f04f 0800 	mov.w	r8, #0
 801324a:	441d      	add	r5, r3
 801324c:	b22d      	sxth	r5, r5
 801324e:	b28b      	uxth	r3, r1
 8013250:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8013254:	429a      	cmp	r2, r3
 8013256:	f240 80c0 	bls.w	80133da <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801325a:	4427      	add	r7, r4
 801325c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8013260:	4608      	mov	r0, r1
 8013262:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8013266:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 801326a:	4563      	cmp	r3, ip
 801326c:	f340 80a2 	ble.w	80133b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8013270:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 8013274:	4465      	add	r5, ip
 8013276:	b22d      	sxth	r5, r5
 8013278:	429d      	cmp	r5, r3
 801327a:	bfa8      	it	ge
 801327c:	461d      	movge	r5, r3
 801327e:	3101      	adds	r1, #1
 8013280:	4680      	mov	r8, r0
 8013282:	e7e4      	b.n	801324e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8013284:	d10b      	bne.n	801329e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8013286:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 801328a:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 801328e:	458c      	cmp	ip, r1
 8013290:	bfb4      	ite	lt
 8013292:	469c      	movlt	ip, r3
 8013294:	46bc      	movge	ip, r7
 8013296:	4572      	cmp	r2, lr
 8013298:	bfb8      	it	lt
 801329a:	4672      	movlt	r2, lr
 801329c:	e087      	b.n	80133ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801329e:	428a      	cmp	r2, r1
 80132a0:	46bc      	mov	ip, r7
 80132a2:	bfb8      	it	lt
 80132a4:	460a      	movlt	r2, r1
 80132a6:	e082      	b.n	80133ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80132a8:	2400f5d0 	.word	0x2400f5d0
 80132ac:	2400f5dc 	.word	0x2400f5dc
 80132b0:	2400006c 	.word	0x2400006c
 80132b4:	2400f590 	.word	0x2400f590
 80132b8:	2400f586 	.word	0x2400f586
 80132bc:	2400f584 	.word	0x2400f584
 80132c0:	2400f58e 	.word	0x2400f58e
 80132c4:	2400f588 	.word	0x2400f588
 80132c8:	1961      	adds	r1, r4, r5
 80132ca:	ab07      	add	r3, sp, #28
 80132cc:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80132d0:	6849      	ldr	r1, [r1, #4]
 80132d2:	c303      	stmia	r3!, {r0, r1}
 80132d4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80132d8:	a807      	add	r0, sp, #28
 80132da:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80132de:	2b13      	cmp	r3, #19
 80132e0:	440b      	add	r3, r1
 80132e2:	bfd8      	it	le
 80132e4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80132e8:	1a9b      	subs	r3, r3, r2
 80132ea:	f8ad 201c 	strh.w	r2, [sp, #28]
 80132ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80132f2:	f7ff f897 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80132f6:	a807      	add	r0, sp, #28
 80132f8:	f7fa f87f 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80132fc:	bb78      	cbnz	r0, 801335e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80132fe:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8013302:	4425      	add	r5, r4
 8013304:	f8d8 0000 	ldr.w	r0, [r8]
 8013308:	f1bc 0f14 	cmp.w	ip, #20
 801330c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013310:	f8d0 e000 	ldr.w	lr, [r0]
 8013314:	bfa8      	it	ge
 8013316:	f04f 0c14 	movge.w	ip, #20
 801331a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801331e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013322:	fa1f fc8c 	uxth.w	ip, ip
 8013326:	f8cd c000 	str.w	ip, [sp]
 801332a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801332e:	47d0      	blx	sl
 8013330:	4682      	mov	sl, r0
 8013332:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013336:	a807      	add	r0, sp, #28
 8013338:	f7ff f85a 	bl	80123f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	4620      	mov	r0, r4
 8013340:	a907      	add	r1, sp, #28
 8013342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013344:	4798      	blx	r3
 8013346:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 801334a:	eba0 000a 	sub.w	r0, r0, sl
 801334e:	b200      	sxth	r0, r0
 8013350:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 8013354:	b918      	cbnz	r0, 801335e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013356:	b2b9      	uxth	r1, r7
 8013358:	4648      	mov	r0, r9
 801335a:	f7ff faad 	bl	80128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801335e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8013362:	f1bb 0f00 	cmp.w	fp, #0
 8013366:	f43f af26 	beq.w	80131b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801336a:	9b02      	ldr	r3, [sp, #8]
 801336c:	2700      	movs	r7, #0
 801336e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8013372:	881b      	ldrh	r3, [r3, #0]
 8013374:	3301      	adds	r3, #1
 8013376:	b29b      	uxth	r3, r3
 8013378:	b299      	uxth	r1, r3
 801337a:	00fd      	lsls	r5, r7, #3
 801337c:	458b      	cmp	fp, r1
 801337e:	d9a3      	bls.n	80132c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8013380:	4425      	add	r5, r4
 8013382:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8013386:	469c      	mov	ip, r3
 8013388:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 801338c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8013390:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 8013394:	4408      	add	r0, r1
 8013396:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 801339a:	4471      	add	r1, lr
 801339c:	b200      	sxth	r0, r0
 801339e:	b209      	sxth	r1, r1
 80133a0:	4288      	cmp	r0, r1
 80133a2:	f6bf af6f 	bge.w	8013284 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 80133a6:	4586      	cmp	lr, r0
 80133a8:	4672      	mov	r2, lr
 80133aa:	bfb8      	it	lt
 80133ac:	4602      	movlt	r2, r0
 80133ae:	3301      	adds	r3, #1
 80133b0:	4667      	mov	r7, ip
 80133b2:	e7e1      	b.n	8013378 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 80133b4:	d10c      	bne.n	80133d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 80133b6:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 80133ba:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 80133be:	4287      	cmp	r7, r0
 80133c0:	bfb4      	ite	lt
 80133c2:	4608      	movlt	r0, r1
 80133c4:	4640      	movge	r0, r8
 80133c6:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 80133ca:	443b      	add	r3, r7
 80133cc:	b21b      	sxth	r3, r3
 80133ce:	e753      	b.n	8013278 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 80133d0:	4565      	cmp	r5, ip
 80133d2:	4640      	mov	r0, r8
 80133d4:	bfa8      	it	ge
 80133d6:	4665      	movge	r5, ip
 80133d8:	e751      	b.n	801327e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 80133da:	eb09 0007 	add.w	r0, r9, r7
 80133de:	4427      	add	r7, r4
 80133e0:	9203      	str	r2, [sp, #12]
 80133e2:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 80133e6:	f1ba 0f13 	cmp.w	sl, #19
 80133ea:	bfde      	ittt	le
 80133ec:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 80133f0:	4455      	addle	r5, sl
 80133f2:	b22d      	sxthle	r5, r5
 80133f4:	f7fa f801 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80133f8:	9a03      	ldr	r2, [sp, #12]
 80133fa:	2800      	cmp	r0, #0
 80133fc:	f47f af1c 	bne.w	8013238 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8013400:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8013404:	fa1f fa8a 	uxth.w	sl, sl
 8013408:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801340c:	1aad      	subs	r5, r5, r2
 801340e:	4829      	ldr	r0, [pc, #164]	; (80134b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8013410:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8013414:	2d14      	cmp	r5, #20
 8013416:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 801341a:	6800      	ldr	r0, [r0, #0]
 801341c:	bfa8      	it	ge
 801341e:	2514      	movge	r5, #20
 8013420:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013424:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013428:	b289      	uxth	r1, r1
 801342a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801342e:	b2ad      	uxth	r5, r5
 8013430:	f8d0 c000 	ldr.w	ip, [r0]
 8013434:	b292      	uxth	r2, r2
 8013436:	4555      	cmp	r5, sl
 8013438:	bf94      	ite	ls
 801343a:	9500      	strls	r5, [sp, #0]
 801343c:	f8cd a000 	strhi.w	sl, [sp]
 8013440:	b29b      	uxth	r3, r3
 8013442:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8013446:	47a8      	blx	r5
 8013448:	6823      	ldr	r3, [r4, #0]
 801344a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801344e:	a907      	add	r1, sp, #28
 8013450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013452:	4620      	mov	r0, r4
 8013454:	4798      	blx	r3
 8013456:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801345a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801345e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8013462:	1a5b      	subs	r3, r3, r1
 8013464:	440a      	add	r2, r1
 8013466:	b21b      	sxth	r3, r3
 8013468:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 801346c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8013470:	2b00      	cmp	r3, #0
 8013472:	f47f aed8 	bne.w	8013226 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8013476:	fa1f f188 	uxth.w	r1, r8
 801347a:	4648      	mov	r0, r9
 801347c:	f7ff fa1c 	bl	80128b8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013480:	e6d1      	b.n	8013226 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8013482:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8013486:	42ab      	cmp	r3, r5
 8013488:	f67f ae95 	bls.w	80131b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801348c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8013490:	ab07      	add	r3, sp, #28
 8013492:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013496:	6851      	ldr	r1, [r2, #4]
 8013498:	c303      	stmia	r3!, {r0, r1}
 801349a:	a807      	add	r0, sp, #28
 801349c:	f7f9 ffad 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80134a0:	b920      	cbnz	r0, 80134ac <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 80134a2:	6823      	ldr	r3, [r4, #0]
 80134a4:	a907      	add	r1, sp, #28
 80134a6:	4620      	mov	r0, r4
 80134a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134aa:	4798      	blx	r3
 80134ac:	3501      	adds	r5, #1
 80134ae:	b2ad      	uxth	r5, r5
 80134b0:	e7e7      	b.n	8013482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 80134b2:	bf00      	nop
 80134b4:	2400f590 	.word	0x2400f590

080134b8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80134b8:	4b03      	ldr	r3, [pc, #12]	; (80134c8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80134ba:	2200      	movs	r2, #0
 80134bc:	801a      	strh	r2, [r3, #0]
 80134be:	805a      	strh	r2, [r3, #2]
 80134c0:	809a      	strh	r2, [r3, #4]
 80134c2:	80da      	strh	r2, [r3, #6]
 80134c4:	4770      	bx	lr
 80134c6:	bf00      	nop
 80134c8:	2400f5dc 	.word	0x2400f5dc

080134cc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80134cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134d0:	b09d      	sub	sp, #116	; 0x74
 80134d2:	4606      	mov	r6, r0
 80134d4:	4614      	mov	r4, r2
 80134d6:	468a      	mov	sl, r1
 80134d8:	a803      	add	r0, sp, #12
 80134da:	461d      	mov	r5, r3
 80134dc:	f000 fe44 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 80134e0:	6833      	ldr	r3, [r6, #0]
 80134e2:	4630      	mov	r0, r6
 80134e4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 80134e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134ea:	4798      	blx	r3
 80134ec:	6833      	ldr	r3, [r6, #0]
 80134ee:	4607      	mov	r7, r0
 80134f0:	4630      	mov	r0, r6
 80134f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134f4:	4798      	blx	r3
 80134f6:	462a      	mov	r2, r5
 80134f8:	2500      	movs	r5, #0
 80134fa:	4621      	mov	r1, r4
 80134fc:	9000      	str	r0, [sp, #0]
 80134fe:	463b      	mov	r3, r7
 8013500:	462c      	mov	r4, r5
 8013502:	46a9      	mov	r9, r5
 8013504:	46a8      	mov	r8, r5
 8013506:	a803      	add	r0, sp, #12
 8013508:	f000 fe81 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801350c:	2300      	movs	r3, #0
 801350e:	9302      	str	r3, [sp, #8]
 8013510:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013514:	429c      	cmp	r4, r3
 8013516:	d002      	beq.n	801351e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013518:	455c      	cmp	r4, fp
 801351a:	bf18      	it	ne
 801351c:	4625      	movne	r5, r4
 801351e:	ab02      	add	r3, sp, #8
 8013520:	4632      	mov	r2, r6
 8013522:	4651      	mov	r1, sl
 8013524:	a803      	add	r0, sp, #12
 8013526:	f001 f967 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801352a:	4604      	mov	r4, r0
 801352c:	b108      	cbz	r0, 8013532 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801352e:	280a      	cmp	r0, #10
 8013530:	d10a      	bne.n	8013548 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013532:	45c1      	cmp	r9, r8
 8013534:	bf38      	it	cc
 8013536:	46c1      	movcc	r9, r8
 8013538:	f04f 0800 	mov.w	r8, #0
 801353c:	2c00      	cmp	r4, #0
 801353e:	d1e5      	bne.n	801350c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013540:	4648      	mov	r0, r9
 8013542:	b01d      	add	sp, #116	; 0x74
 8013544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013548:	9a02      	ldr	r2, [sp, #8]
 801354a:	2a00      	cmp	r2, #0
 801354c:	d0de      	beq.n	801350c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801354e:	7b57      	ldrb	r7, [r2, #13]
 8013550:	4629      	mov	r1, r5
 8013552:	6833      	ldr	r3, [r6, #0]
 8013554:	007f      	lsls	r7, r7, #1
 8013556:	8894      	ldrh	r4, [r2, #4]
 8013558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801355a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801355e:	7a97      	ldrb	r7, [r2, #10]
 8013560:	4307      	orrs	r7, r0
 8013562:	4630      	mov	r0, r6
 8013564:	4798      	blx	r3
 8013566:	4438      	add	r0, r7
 8013568:	4480      	add	r8, r0
 801356a:	fa1f f888 	uxth.w	r8, r8
 801356e:	e7e5      	b.n	801353c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013570 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013570:	b508      	push	{r3, lr}
 8013572:	6803      	ldr	r3, [r0, #0]
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	4798      	blx	r3
 8013578:	b128      	cbz	r0, 8013586 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801357a:	7b43      	ldrb	r3, [r0, #13]
 801357c:	7a80      	ldrb	r0, [r0, #10]
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013584:	4318      	orrs	r0, r3
 8013586:	bd08      	pop	{r3, pc}

08013588 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013588:	b40e      	push	{r1, r2, r3}
 801358a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801358c:	b09e      	sub	sp, #120	; 0x78
 801358e:	4605      	mov	r5, r0
 8013590:	ab23      	add	r3, sp, #140	; 0x8c
 8013592:	a805      	add	r0, sp, #20
 8013594:	f853 4b04 	ldr.w	r4, [r3], #4
 8013598:	9303      	str	r3, [sp, #12]
 801359a:	f000 fde5 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 801359e:	682b      	ldr	r3, [r5, #0]
 80135a0:	4628      	mov	r0, r5
 80135a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135a4:	4798      	blx	r3
 80135a6:	682b      	ldr	r3, [r5, #0]
 80135a8:	4606      	mov	r6, r0
 80135aa:	4628      	mov	r0, r5
 80135ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ae:	4798      	blx	r3
 80135b0:	4633      	mov	r3, r6
 80135b2:	4621      	mov	r1, r4
 80135b4:	ae1e      	add	r6, sp, #120	; 0x78
 80135b6:	2400      	movs	r4, #0
 80135b8:	9000      	str	r0, [sp, #0]
 80135ba:	9a03      	ldr	r2, [sp, #12]
 80135bc:	a805      	add	r0, sp, #20
 80135be:	f000 fe26 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80135c2:	f846 4d68 	str.w	r4, [r6, #-104]!
 80135c6:	462a      	mov	r2, r5
 80135c8:	4633      	mov	r3, r6
 80135ca:	4621      	mov	r1, r4
 80135cc:	a805      	add	r0, sp, #20
 80135ce:	f001 f913 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80135d2:	b300      	cbz	r0, 8013616 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80135d4:	280a      	cmp	r0, #10
 80135d6:	d01a      	beq.n	801360e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80135d8:	9f04      	ldr	r7, [sp, #16]
 80135da:	b1c7      	cbz	r7, 801360e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80135dc:	7b78      	ldrb	r0, [r7, #13]
 80135de:	7a3b      	ldrb	r3, [r7, #8]
 80135e0:	00c1      	lsls	r1, r0, #3
 80135e2:	88ea      	ldrh	r2, [r5, #6]
 80135e4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80135e8:	4319      	orrs	r1, r3
 80135ea:	0643      	lsls	r3, r0, #25
 80135ec:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80135f0:	bf48      	it	mi
 80135f2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 80135f6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80135fa:	bf48      	it	mi
 80135fc:	b219      	sxthmi	r1, r3
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	4303      	orrs	r3, r0
 8013602:	4413      	add	r3, r2
 8013604:	1a5b      	subs	r3, r3, r1
 8013606:	b21b      	sxth	r3, r3
 8013608:	429c      	cmp	r4, r3
 801360a:	bfb8      	it	lt
 801360c:	461c      	movlt	r4, r3
 801360e:	4633      	mov	r3, r6
 8013610:	462a      	mov	r2, r5
 8013612:	2100      	movs	r1, #0
 8013614:	e7da      	b.n	80135cc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013616:	b2a0      	uxth	r0, r4
 8013618:	b01e      	add	sp, #120	; 0x78
 801361a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801361e:	b003      	add	sp, #12
 8013620:	4770      	bx	lr

08013622 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8013622:	7a43      	ldrb	r3, [r0, #9]
 8013624:	8880      	ldrh	r0, [r0, #4]
 8013626:	4418      	add	r0, r3
 8013628:	b280      	uxth	r0, r0
 801362a:	4770      	bx	lr

0801362c <_ZNK8touchgfx4Font13getFontHeightEv>:
 801362c:	6803      	ldr	r3, [r0, #0]
 801362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013630:	4718      	bx	r3

08013632 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013632:	b40e      	push	{r1, r2, r3}
 8013634:	b570      	push	{r4, r5, r6, lr}
 8013636:	b09d      	sub	sp, #116	; 0x74
 8013638:	4604      	mov	r4, r0
 801363a:	ab21      	add	r3, sp, #132	; 0x84
 801363c:	a803      	add	r0, sp, #12
 801363e:	f853 5b04 	ldr.w	r5, [r3], #4
 8013642:	9302      	str	r3, [sp, #8]
 8013644:	f000 fd90 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 8013648:	6823      	ldr	r3, [r4, #0]
 801364a:	4620      	mov	r0, r4
 801364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801364e:	4798      	blx	r3
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	4606      	mov	r6, r0
 8013654:	4620      	mov	r0, r4
 8013656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013658:	2401      	movs	r4, #1
 801365a:	4798      	blx	r3
 801365c:	4633      	mov	r3, r6
 801365e:	9000      	str	r0, [sp, #0]
 8013660:	4629      	mov	r1, r5
 8013662:	9a02      	ldr	r2, [sp, #8]
 8013664:	a803      	add	r0, sp, #12
 8013666:	f000 fdd2 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801366a:	a803      	add	r0, sp, #12
 801366c:	f001 f990 	bl	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013670:	b2a3      	uxth	r3, r4
 8013672:	b138      	cbz	r0, 8013684 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013674:	280a      	cmp	r0, #10
 8013676:	a803      	add	r0, sp, #12
 8013678:	bf04      	itt	eq
 801367a:	3301      	addeq	r3, #1
 801367c:	b21c      	sxtheq	r4, r3
 801367e:	f001 f987 	bl	8014990 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013682:	e7f5      	b.n	8013670 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013684:	4618      	mov	r0, r3
 8013686:	b01d      	add	sp, #116	; 0x74
 8013688:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801368c:	b003      	add	sp, #12
 801368e:	4770      	bx	lr

08013690 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013690:	b40e      	push	{r1, r2, r3}
 8013692:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013694:	b09e      	sub	sp, #120	; 0x78
 8013696:	4604      	mov	r4, r0
 8013698:	ab23      	add	r3, sp, #140	; 0x8c
 801369a:	a805      	add	r0, sp, #20
 801369c:	f853 5b04 	ldr.w	r5, [r3], #4
 80136a0:	9303      	str	r3, [sp, #12]
 80136a2:	f000 fd61 	bl	8014168 <_ZN8touchgfx12TextProviderC1Ev>
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	4620      	mov	r0, r4
 80136aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136ac:	4798      	blx	r3
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	4606      	mov	r6, r0
 80136b2:	4620      	mov	r0, r4
 80136b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136b6:	4798      	blx	r3
 80136b8:	4633      	mov	r3, r6
 80136ba:	4629      	mov	r1, r5
 80136bc:	9000      	str	r0, [sp, #0]
 80136be:	9a03      	ldr	r2, [sp, #12]
 80136c0:	a805      	add	r0, sp, #20
 80136c2:	f000 fda4 	bl	801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80136c6:	ad1e      	add	r5, sp, #120	; 0x78
 80136c8:	2100      	movs	r1, #0
 80136ca:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80136ce:	4622      	mov	r2, r4
 80136d0:	a805      	add	r0, sp, #20
 80136d2:	f845 1d68 	str.w	r1, [r5, #-104]!
 80136d6:	462b      	mov	r3, r5
 80136d8:	f001 f88e 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80136dc:	b1d8      	cbz	r0, 8013716 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80136de:	280a      	cmp	r0, #10
 80136e0:	d012      	beq.n	8013708 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80136e2:	9804      	ldr	r0, [sp, #16]
 80136e4:	b180      	cbz	r0, 8013708 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80136e6:	7b47      	ldrb	r7, [r0, #13]
 80136e8:	88e2      	ldrh	r2, [r4, #6]
 80136ea:	00fb      	lsls	r3, r7, #3
 80136ec:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80136f0:	7a03      	ldrb	r3, [r0, #8]
 80136f2:	430b      	orrs	r3, r1
 80136f4:	0679      	lsls	r1, r7, #25
 80136f6:	bf44      	itt	mi
 80136f8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80136fc:	b21b      	sxthmi	r3, r3
 80136fe:	1ad3      	subs	r3, r2, r3
 8013700:	b21b      	sxth	r3, r3
 8013702:	429e      	cmp	r6, r3
 8013704:	bfa8      	it	ge
 8013706:	461e      	movge	r6, r3
 8013708:	462b      	mov	r3, r5
 801370a:	4622      	mov	r2, r4
 801370c:	2100      	movs	r1, #0
 801370e:	a805      	add	r0, sp, #20
 8013710:	f001 f872 	bl	80147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013714:	e7e2      	b.n	80136dc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8013716:	4630      	mov	r0, r6
 8013718:	b01e      	add	sp, #120	; 0x78
 801371a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801371e:	b003      	add	sp, #12
 8013720:	4770      	bx	lr

08013722 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013722:	b513      	push	{r0, r1, r4, lr}
 8013724:	6803      	ldr	r3, [r0, #0]
 8013726:	2400      	movs	r4, #0
 8013728:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801372c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013730:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013734:	4669      	mov	r1, sp
 8013736:	691b      	ldr	r3, [r3, #16]
 8013738:	9400      	str	r4, [sp, #0]
 801373a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801373e:	4798      	blx	r3
 8013740:	b002      	add	sp, #8
 8013742:	bd10      	pop	{r4, pc}

08013744 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013744:	b538      	push	{r3, r4, r5, lr}
 8013746:	680b      	ldr	r3, [r1, #0]
 8013748:	460c      	mov	r4, r1
 801374a:	4605      	mov	r5, r0
 801374c:	68db      	ldr	r3, [r3, #12]
 801374e:	4798      	blx	r3
 8013750:	6823      	ldr	r3, [r4, #0]
 8013752:	4620      	mov	r0, r4
 8013754:	4629      	mov	r1, r5
 8013756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013758:	4798      	blx	r3
 801375a:	4628      	mov	r0, r5
 801375c:	bd38      	pop	{r3, r4, r5, pc}

0801375e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801375e:	b410      	push	{r4}
 8013760:	880a      	ldrh	r2, [r1, #0]
 8013762:	8884      	ldrh	r4, [r0, #4]
 8013764:	4422      	add	r2, r4
 8013766:	800a      	strh	r2, [r1, #0]
 8013768:	884a      	ldrh	r2, [r1, #2]
 801376a:	88c4      	ldrh	r4, [r0, #6]
 801376c:	4422      	add	r2, r4
 801376e:	804a      	strh	r2, [r1, #2]
 8013770:	6940      	ldr	r0, [r0, #20]
 8013772:	b120      	cbz	r0, 801377e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013774:	6803      	ldr	r3, [r0, #0]
 8013776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801377c:	4718      	bx	r3
 801377e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013782:	4770      	bx	lr

08013784 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013784:	b570      	push	{r4, r5, r6, lr}
 8013786:	8882      	ldrh	r2, [r0, #4]
 8013788:	460c      	mov	r4, r1
 801378a:	880b      	ldrh	r3, [r1, #0]
 801378c:	4605      	mov	r5, r0
 801378e:	4413      	add	r3, r2
 8013790:	800b      	strh	r3, [r1, #0]
 8013792:	884b      	ldrh	r3, [r1, #2]
 8013794:	88c2      	ldrh	r2, [r0, #6]
 8013796:	4413      	add	r3, r2
 8013798:	804b      	strh	r3, [r1, #2]
 801379a:	1d01      	adds	r1, r0, #4
 801379c:	4620      	mov	r0, r4
 801379e:	f7f9 fde9 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 80137a2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	dd0b      	ble.n	80137c2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137aa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	dd07      	ble.n	80137c2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137b2:	6968      	ldr	r0, [r5, #20]
 80137b4:	b128      	cbz	r0, 80137c2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80137b6:	6803      	ldr	r3, [r0, #0]
 80137b8:	4621      	mov	r1, r4
 80137ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137c0:	4718      	bx	r3
 80137c2:	bd70      	pop	{r4, r5, r6, pc}

080137c4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80137c4:	b570      	push	{r4, r5, r6, lr}
 80137c6:	8882      	ldrh	r2, [r0, #4]
 80137c8:	460c      	mov	r4, r1
 80137ca:	880b      	ldrh	r3, [r1, #0]
 80137cc:	4605      	mov	r5, r0
 80137ce:	4413      	add	r3, r2
 80137d0:	800b      	strh	r3, [r1, #0]
 80137d2:	884b      	ldrh	r3, [r1, #2]
 80137d4:	88c2      	ldrh	r2, [r0, #6]
 80137d6:	4413      	add	r3, r2
 80137d8:	804b      	strh	r3, [r1, #2]
 80137da:	1d01      	adds	r1, r0, #4
 80137dc:	4620      	mov	r0, r4
 80137de:	f7f9 fdc9 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 80137e2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	dd18      	ble.n	801381c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80137ea:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	dd14      	ble.n	801381c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 80137f2:	6968      	ldr	r0, [r5, #20]
 80137f4:	b128      	cbz	r0, 8013802 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80137f6:	6803      	ldr	r3, [r0, #0]
 80137f8:	4621      	mov	r1, r4
 80137fa:	691b      	ldr	r3, [r3, #16]
 80137fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013800:	4718      	bx	r3
 8013802:	4b07      	ldr	r3, [pc, #28]	; (8013820 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	3304      	adds	r3, #4
 8013808:	429d      	cmp	r5, r3
 801380a:	d107      	bne.n	801381c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801380c:	f7fe ff44 	bl	8012698 <_ZN8touchgfx11Application11getInstanceEv>
 8013810:	6821      	ldr	r1, [r4, #0]
 8013812:	6862      	ldr	r2, [r4, #4]
 8013814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013818:	f7ff b862 	b.w	80128e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801381c:	bd70      	pop	{r4, r5, r6, pc}
 801381e:	bf00      	nop
 8013820:	2400f5d4 	.word	0x2400f5d4

08013824 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013824:	b570      	push	{r4, r5, r6, lr}
 8013826:	4604      	mov	r4, r0
 8013828:	4616      	mov	r6, r2
 801382a:	460d      	mov	r5, r1
 801382c:	b901      	cbnz	r1, 8013830 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801382e:	b192      	cbz	r2, 8013856 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013830:	6823      	ldr	r3, [r4, #0]
 8013832:	4620      	mov	r0, r4
 8013834:	699b      	ldr	r3, [r3, #24]
 8013836:	4798      	blx	r3
 8013838:	88e2      	ldrh	r2, [r4, #6]
 801383a:	88a1      	ldrh	r1, [r4, #4]
 801383c:	4620      	mov	r0, r4
 801383e:	4432      	add	r2, r6
 8013840:	4429      	add	r1, r5
 8013842:	b212      	sxth	r2, r2
 8013844:	b209      	sxth	r1, r1
 8013846:	f7ef f9f8 	bl	8002c3a <_ZN8touchgfx8Drawable5setXYEss>
 801384a:	6823      	ldr	r3, [r4, #0]
 801384c:	4620      	mov	r0, r4
 801384e:	699b      	ldr	r3, [r3, #24]
 8013850:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013854:	4718      	bx	r3
 8013856:	bd70      	pop	{r4, r5, r6, pc}

08013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013858:	b510      	push	{r4, lr}
 801385a:	2300      	movs	r3, #0
 801385c:	4604      	mov	r4, r0
 801385e:	4608      	mov	r0, r1
 8013860:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013864:	8023      	strh	r3, [r4, #0]
 8013866:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801386a:	8063      	strh	r3, [r4, #2]
 801386c:	6803      	ldr	r3, [r0, #0]
 801386e:	80a1      	strh	r1, [r4, #4]
 8013870:	4621      	mov	r1, r4
 8013872:	80e2      	strh	r2, [r4, #6]
 8013874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013876:	4798      	blx	r3
 8013878:	4620      	mov	r0, r4
 801387a:	bd10      	pop	{r4, pc}

0801387c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801387c:	b530      	push	{r4, r5, lr}
 801387e:	8083      	strh	r3, [r0, #4]
 8013880:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013884:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013888:	80c3      	strh	r3, [r0, #6]
 801388a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801388e:	6141      	str	r1, [r0, #20]
 8013890:	7203      	strb	r3, [r0, #8]
 8013892:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013896:	8302      	strh	r2, [r0, #24]
 8013898:	7243      	strb	r3, [r0, #9]
 801389a:	7a83      	ldrb	r3, [r0, #10]
 801389c:	f365 0306 	bfi	r3, r5, #0, #7
 80138a0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80138a4:	f365 13c7 	bfi	r3, r5, #7, #1
 80138a8:	7283      	strb	r3, [r0, #10]
 80138aa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80138ae:	72c3      	strb	r3, [r0, #11]
 80138b0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80138b4:	7303      	strb	r3, [r0, #12]
 80138b6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80138ba:	81c3      	strh	r3, [r0, #14]
 80138bc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80138c0:	8203      	strh	r3, [r0, #16]
 80138c2:	4b01      	ldr	r3, [pc, #4]	; (80138c8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80138c4:	6003      	str	r3, [r0, #0]
 80138c6:	bd30      	pop	{r4, r5, pc}
 80138c8:	080231c0 	.word	0x080231c0

080138cc <_ZNK8touchgfx9ConstFont4findEt>:
 80138cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ce:	6944      	ldr	r4, [r0, #20]
 80138d0:	b3bc      	cbz	r4, 8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80138d2:	88a3      	ldrh	r3, [r4, #4]
 80138d4:	8b02      	ldrh	r2, [r0, #24]
 80138d6:	1acb      	subs	r3, r1, r3
 80138d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80138dc:	d431      	bmi.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80138de:	4293      	cmp	r3, r2
 80138e0:	dd0c      	ble.n	80138fc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80138e2:	230e      	movs	r3, #14
 80138e4:	fb03 4302 	mla	r3, r3, r2, r4
 80138e8:	889b      	ldrh	r3, [r3, #4]
 80138ea:	1a5b      	subs	r3, r3, r1
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	429a      	cmp	r2, r3
 80138f0:	db27      	blt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	bfbc      	itt	lt
 80138f6:	2302      	movlt	r3, #2
 80138f8:	fb92 f3f3 	sdivlt	r3, r2, r3
 80138fc:	2500      	movs	r5, #0
 80138fe:	260e      	movs	r6, #14
 8013900:	4295      	cmp	r5, r2
 8013902:	dc1e      	bgt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013904:	fb06 4003 	mla	r0, r6, r3, r4
 8013908:	8887      	ldrh	r7, [r0, #4]
 801390a:	42b9      	cmp	r1, r7
 801390c:	d01a      	beq.n	8013944 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801390e:	d20d      	bcs.n	801392c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013910:	1e5a      	subs	r2, r3, #1
 8013912:	4295      	cmp	r5, r2
 8013914:	dc15      	bgt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013916:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801391a:	1a5b      	subs	r3, r3, r1
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	429a      	cmp	r2, r3
 8013920:	db0f      	blt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013922:	429d      	cmp	r5, r3
 8013924:	ddec      	ble.n	8013900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013926:	1953      	adds	r3, r2, r5
 8013928:	105b      	asrs	r3, r3, #1
 801392a:	e7e9      	b.n	8013900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801392c:	1c5d      	adds	r5, r3, #1
 801392e:	42aa      	cmp	r2, r5
 8013930:	db07      	blt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013932:	8a43      	ldrh	r3, [r0, #18]
 8013934:	1acb      	subs	r3, r1, r3
 8013936:	442b      	add	r3, r5
 8013938:	429d      	cmp	r5, r3
 801393a:	dc02      	bgt.n	8013942 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801393c:	429a      	cmp	r2, r3
 801393e:	dadf      	bge.n	8013900 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013940:	e7f1      	b.n	8013926 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013942:	2000      	movs	r0, #0
 8013944:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013946 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013948:	4604      	mov	r4, r0
 801394a:	4617      	mov	r7, r2
 801394c:	461e      	mov	r6, r3
 801394e:	b911      	cbnz	r1, 8013956 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013950:	2500      	movs	r5, #0
 8013952:	4628      	mov	r0, r5
 8013954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013956:	290a      	cmp	r1, #10
 8013958:	d0fa      	beq.n	8013950 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801395a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801395e:	4291      	cmp	r1, r2
 8013960:	d0f6      	beq.n	8013950 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013962:	f242 020b 	movw	r2, #8203	; 0x200b
 8013966:	4291      	cmp	r1, r2
 8013968:	d0f2      	beq.n	8013950 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801396a:	f7ff ffaf 	bl	80138cc <_ZNK8touchgfx9ConstFont4findEt>
 801396e:	4605      	mov	r5, r0
 8013970:	b950      	cbnz	r0, 8013988 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013972:	6823      	ldr	r3, [r4, #0]
 8013974:	4620      	mov	r0, r4
 8013976:	691b      	ldr	r3, [r3, #16]
 8013978:	4798      	blx	r3
 801397a:	4601      	mov	r1, r0
 801397c:	4620      	mov	r0, r4
 801397e:	f7ff ffa5 	bl	80138cc <_ZNK8touchgfx9ConstFont4findEt>
 8013982:	4605      	mov	r5, r0
 8013984:	2800      	cmp	r0, #0
 8013986:	d0e3      	beq.n	8013950 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013988:	6823      	ldr	r3, [r4, #0]
 801398a:	4629      	mov	r1, r5
 801398c:	4620      	mov	r0, r4
 801398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013990:	4798      	blx	r3
 8013992:	6038      	str	r0, [r7, #0]
 8013994:	6823      	ldr	r3, [r4, #0]
 8013996:	4620      	mov	r0, r4
 8013998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801399a:	4798      	blx	r3
 801399c:	7030      	strb	r0, [r6, #0]
 801399e:	e7d8      	b.n	8013952 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080139a0 <_ZN8touchgfx4clzuEm>:
 80139a0:	4603      	mov	r3, r0
 80139a2:	b1c8      	cbz	r0, 80139d8 <_ZN8touchgfx4clzuEm+0x38>
 80139a4:	0c02      	lsrs	r2, r0, #16
 80139a6:	0412      	lsls	r2, r2, #16
 80139a8:	b9a2      	cbnz	r2, 80139d4 <_ZN8touchgfx4clzuEm+0x34>
 80139aa:	0403      	lsls	r3, r0, #16
 80139ac:	2010      	movs	r0, #16
 80139ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80139b2:	bf04      	itt	eq
 80139b4:	021b      	lsleq	r3, r3, #8
 80139b6:	3008      	addeq	r0, #8
 80139b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80139bc:	bf04      	itt	eq
 80139be:	011b      	lsleq	r3, r3, #4
 80139c0:	3004      	addeq	r0, #4
 80139c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80139c6:	bf04      	itt	eq
 80139c8:	009b      	lsleq	r3, r3, #2
 80139ca:	3002      	addeq	r0, #2
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	db04      	blt.n	80139da <_ZN8touchgfx4clzuEm+0x3a>
 80139d0:	3001      	adds	r0, #1
 80139d2:	4770      	bx	lr
 80139d4:	2000      	movs	r0, #0
 80139d6:	e7ea      	b.n	80139ae <_ZN8touchgfx4clzuEm+0xe>
 80139d8:	2020      	movs	r0, #32
 80139da:	4770      	bx	lr

080139dc <_ZN8touchgfx7muldivuEmmmRm>:
 80139dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e0:	4680      	mov	r8, r0
 80139e2:	460f      	mov	r7, r1
 80139e4:	4615      	mov	r5, r2
 80139e6:	461e      	mov	r6, r3
 80139e8:	f7ff ffda 	bl	80139a0 <_ZN8touchgfx4clzuEm>
 80139ec:	b998      	cbnz	r0, 8013a16 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 80139ee:	4608      	mov	r0, r1
 80139f0:	f7ff ffd6 	bl	80139a0 <_ZN8touchgfx4clzuEm>
 80139f4:	2800      	cmp	r0, #0
 80139f6:	dd08      	ble.n	8013a0a <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 80139f8:	4633      	mov	r3, r6
 80139fa:	462a      	mov	r2, r5
 80139fc:	4641      	mov	r1, r8
 80139fe:	4638      	mov	r0, r7
 8013a00:	f7ff ffec 	bl	80139dc <_ZN8touchgfx7muldivuEmmmRm>
 8013a04:	b003      	add	sp, #12
 8013a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013a12:	6033      	str	r3, [r6, #0]
 8013a14:	e7f6      	b.n	8013a04 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8013a16:	fa31 f900 	lsrs.w	r9, r1, r0
 8013a1a:	fb01 f308 	mul.w	r3, r1, r8
 8013a1e:	d105      	bne.n	8013a2c <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8013a20:	fbb3 f0f5 	udiv	r0, r3, r5
 8013a24:	fb05 3510 	mls	r5, r5, r0, r3
 8013a28:	6035      	str	r5, [r6, #0]
 8013a2a:	e7eb      	b.n	8013a04 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	fa08 fb00 	lsl.w	fp, r8, r0
 8013a32:	462a      	mov	r2, r5
 8013a34:	4641      	mov	r1, r8
 8013a36:	fa03 f000 	lsl.w	r0, r3, r0
 8013a3a:	4633      	mov	r3, r6
 8013a3c:	fbbb faf5 	udiv	sl, fp, r5
 8013a40:	3801      	subs	r0, #1
 8013a42:	fb09 f40a 	mul.w	r4, r9, sl
 8013a46:	4038      	ands	r0, r7
 8013a48:	f7ff ffc8 	bl	80139dc <_ZN8touchgfx7muldivuEmmmRm>
 8013a4c:	462a      	mov	r2, r5
 8013a4e:	4607      	mov	r7, r0
 8013a50:	ab01      	add	r3, sp, #4
 8013a52:	fb05 b11a 	mls	r1, r5, sl, fp
 8013a56:	4648      	mov	r0, r9
 8013a58:	f7ff ffc0 	bl	80139dc <_ZN8touchgfx7muldivuEmmmRm>
 8013a5c:	9b01      	ldr	r3, [sp, #4]
 8013a5e:	6832      	ldr	r2, [r6, #0]
 8013a60:	441a      	add	r2, r3
 8013a62:	fbb2 f3f5 	udiv	r3, r2, r5
 8013a66:	441c      	add	r4, r3
 8013a68:	fb05 2513 	mls	r5, r5, r3, r2
 8013a6c:	443c      	add	r4, r7
 8013a6e:	4420      	add	r0, r4
 8013a70:	e7da      	b.n	8013a28 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08013a72 <_ZN8touchgfx6muldivElllRl>:
 8013a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a74:	2800      	cmp	r0, #0
 8013a76:	461e      	mov	r6, r3
 8013a78:	bfba      	itte	lt
 8013a7a:	4240      	neglt	r0, r0
 8013a7c:	f04f 34ff 	movlt.w	r4, #4294967295
 8013a80:	2401      	movge	r4, #1
 8013a82:	2900      	cmp	r1, #0
 8013a84:	bfbc      	itt	lt
 8013a86:	4249      	neglt	r1, r1
 8013a88:	4264      	neglt	r4, r4
 8013a8a:	2a00      	cmp	r2, #0
 8013a8c:	bfb6      	itet	lt
 8013a8e:	4265      	neglt	r5, r4
 8013a90:	4625      	movge	r5, r4
 8013a92:	4252      	neglt	r2, r2
 8013a94:	4288      	cmp	r0, r1
 8013a96:	bfc2      	ittt	gt
 8013a98:	4603      	movgt	r3, r0
 8013a9a:	4608      	movgt	r0, r1
 8013a9c:	4619      	movgt	r1, r3
 8013a9e:	ab01      	add	r3, sp, #4
 8013aa0:	f7ff ff9c 	bl	80139dc <_ZN8touchgfx7muldivuEmmmRm>
 8013aa4:	9b01      	ldr	r3, [sp, #4]
 8013aa6:	4368      	muls	r0, r5
 8013aa8:	435c      	muls	r4, r3
 8013aaa:	6034      	str	r4, [r6, #0]
 8013aac:	b002      	add	sp, #8
 8013aae:	bd70      	pop	{r4, r5, r6, pc}

08013ab0 <_ZN8touchgfx6muldivElll>:
 8013ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	ab01      	add	r3, sp, #4
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	4614      	mov	r4, r2
 8013aba:	f7ff ffda 	bl	8013a72 <_ZN8touchgfx6muldivElllRl>
 8013abe:	2e00      	cmp	r6, #0
 8013ac0:	db20      	blt.n	8013b04 <_ZN8touchgfx6muldivElll+0x54>
 8013ac2:	bf14      	ite	ne
 8013ac4:	2301      	movne	r3, #1
 8013ac6:	2300      	moveq	r3, #0
 8013ac8:	2d00      	cmp	r5, #0
 8013aca:	db1e      	blt.n	8013b0a <_ZN8touchgfx6muldivElll+0x5a>
 8013acc:	bf14      	ite	ne
 8013ace:	2201      	movne	r2, #1
 8013ad0:	2200      	moveq	r2, #0
 8013ad2:	2c00      	cmp	r4, #0
 8013ad4:	fb03 f202 	mul.w	r2, r3, r2
 8013ad8:	db1a      	blt.n	8013b10 <_ZN8touchgfx6muldivElll+0x60>
 8013ada:	bf14      	ite	ne
 8013adc:	2301      	movne	r3, #1
 8013ade:	2300      	moveq	r3, #0
 8013ae0:	4353      	muls	r3, r2
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d117      	bne.n	8013b16 <_ZN8touchgfx6muldivElll+0x66>
 8013ae6:	2c00      	cmp	r4, #0
 8013ae8:	9b01      	ldr	r3, [sp, #4]
 8013aea:	bfb8      	it	lt
 8013aec:	4264      	neglt	r4, r4
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f104 0401 	add.w	r4, r4, #1
 8013af4:	bfb8      	it	lt
 8013af6:	425b      	neglt	r3, r3
 8013af8:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8013afc:	db00      	blt.n	8013b00 <_ZN8touchgfx6muldivElll+0x50>
 8013afe:	3001      	adds	r0, #1
 8013b00:	b002      	add	sp, #8
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	f04f 33ff 	mov.w	r3, #4294967295
 8013b08:	e7de      	b.n	8013ac8 <_ZN8touchgfx6muldivElll+0x18>
 8013b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b0e:	e7e0      	b.n	8013ad2 <_ZN8touchgfx6muldivElll+0x22>
 8013b10:	f04f 33ff 	mov.w	r3, #4294967295
 8013b14:	e7e4      	b.n	8013ae0 <_ZN8touchgfx6muldivElll+0x30>
 8013b16:	3301      	adds	r3, #1
 8013b18:	d1f2      	bne.n	8013b00 <_ZN8touchgfx6muldivElll+0x50>
 8013b1a:	9b01      	ldr	r3, [sp, #4]
 8013b1c:	2c00      	cmp	r4, #0
 8013b1e:	bfb8      	it	lt
 8013b20:	4264      	neglt	r4, r4
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	bfb8      	it	lt
 8013b26:	425b      	neglt	r3, r3
 8013b28:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8013b2c:	bfc8      	it	gt
 8013b2e:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8013b32:	e7e5      	b.n	8013b00 <_ZN8touchgfx6muldivElll+0x50>

08013b34 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013b34:	2000      	movs	r0, #0
 8013b36:	4770      	bx	lr

08013b38 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013b38:	2001      	movs	r0, #1
 8013b3a:	4770      	bx	lr

08013b3c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013b3c:	2002      	movs	r0, #2
 8013b3e:	4770      	bx	lr

08013b40 <_ZN8touchgfx6ScreenD1Ev>:
 8013b40:	4770      	bx	lr

08013b42 <_ZN8touchgfx12GestureEventD1Ev>:
 8013b42:	4770      	bx	lr

08013b44 <_ZN8touchgfx9DragEventD1Ev>:
 8013b44:	4770      	bx	lr

08013b46 <_ZN8touchgfx10ClickEventD1Ev>:
 8013b46:	4770      	bx	lr

08013b48 <_ZN8touchgfx10ClickEventD0Ev>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	210c      	movs	r1, #12
 8013b4e:	f00a fb32 	bl	801e1b6 <_ZdlPvj>
 8013b52:	4620      	mov	r0, r4
 8013b54:	bd10      	pop	{r4, pc}

08013b56 <_ZN8touchgfx9DragEventD0Ev>:
 8013b56:	b510      	push	{r4, lr}
 8013b58:	4604      	mov	r4, r0
 8013b5a:	2110      	movs	r1, #16
 8013b5c:	f00a fb2b 	bl	801e1b6 <_ZdlPvj>
 8013b60:	4620      	mov	r0, r4
 8013b62:	bd10      	pop	{r4, pc}

08013b64 <_ZN8touchgfx12GestureEventD0Ev>:
 8013b64:	b510      	push	{r4, lr}
 8013b66:	4604      	mov	r4, r0
 8013b68:	210c      	movs	r1, #12
 8013b6a:	f00a fb24 	bl	801e1b6 <_ZdlPvj>
 8013b6e:	4620      	mov	r0, r4
 8013b70:	bd10      	pop	{r4, pc}

08013b72 <_ZN8touchgfx6ScreenD0Ev>:
 8013b72:	b510      	push	{r4, lr}
 8013b74:	4604      	mov	r4, r0
 8013b76:	213c      	movs	r1, #60	; 0x3c
 8013b78:	f00a fb1d 	bl	801e1b6 <_ZdlPvj>
 8013b7c:	4620      	mov	r0, r4
 8013b7e:	bd10      	pop	{r4, pc}

08013b80 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013b80:	b530      	push	{r4, r5, lr}
 8013b82:	460d      	mov	r5, r1
 8013b84:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013b86:	b087      	sub	sp, #28
 8013b88:	4604      	mov	r4, r0
 8013b8a:	b301      	cbz	r1, 8013bce <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013b8c:	a801      	add	r0, sp, #4
 8013b8e:	f7ff fe63 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013b92:	892a      	ldrh	r2, [r5, #8]
 8013b94:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013b98:	7928      	ldrb	r0, [r5, #4]
 8013b9a:	1ad2      	subs	r2, r2, r3
 8013b9c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013b9e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013ba2:	441a      	add	r2, r3
 8013ba4:	896b      	ldrh	r3, [r5, #10]
 8013ba6:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013baa:	f88d 0010 	strb.w	r0, [sp, #16]
 8013bae:	1b5b      	subs	r3, r3, r5
 8013bb0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8013bb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013bb4:	442b      	add	r3, r5
 8013bb6:	4d07      	ldr	r5, [pc, #28]	; (8013bd4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013bb8:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013bbc:	a903      	add	r1, sp, #12
 8013bbe:	9503      	str	r5, [sp, #12]
 8013bc0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013bc4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013bc8:	6803      	ldr	r3, [r0, #0]
 8013bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013bcc:	4798      	blx	r3
 8013bce:	b007      	add	sp, #28
 8013bd0:	bd30      	pop	{r4, r5, pc}
 8013bd2:	bf00      	nop
 8013bd4:	08023248 	.word	0x08023248

08013bd8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013bde:	b08a      	sub	sp, #40	; 0x28
 8013be0:	4604      	mov	r4, r0
 8013be2:	460d      	mov	r5, r1
 8013be4:	b113      	cbz	r3, 8013bec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013be6:	790b      	ldrb	r3, [r1, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d044      	beq.n	8013c76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013bec:	f104 0804 	add.w	r8, r4, #4
 8013bf0:	a803      	add	r0, sp, #12
 8013bf2:	4641      	mov	r1, r8
 8013bf4:	f7ff fe30 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013bf8:	792b      	ldrb	r3, [r5, #4]
 8013bfa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013bfe:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013c02:	b983      	cbnz	r3, 8013c26 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013c04:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8013c08:	892a      	ldrh	r2, [r5, #8]
 8013c0a:	88e9      	ldrh	r1, [r5, #6]
 8013c0c:	4640      	mov	r0, r8
 8013c0e:	1b92      	subs	r2, r2, r6
 8013c10:	9301      	str	r3, [sp, #4]
 8013c12:	1bc9      	subs	r1, r1, r7
 8013c14:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8013c18:	b212      	sxth	r2, r2
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	b209      	sxth	r1, r1
 8013c1e:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013c22:	f7f9 fac5 	bl	800d1b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013c26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013c28:	b329      	cbz	r1, 8013c76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013c2a:	a805      	add	r0, sp, #20
 8013c2c:	f7ff fe14 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c30:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013c34:	792b      	ldrb	r3, [r5, #4]
 8013c36:	a907      	add	r1, sp, #28
 8013c38:	1abf      	subs	r7, r7, r2
 8013c3a:	88ea      	ldrh	r2, [r5, #6]
 8013c3c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013c3e:	4417      	add	r7, r2
 8013c40:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8013c42:	f88d 3020 	strb.w	r3, [sp, #32]
 8013c46:	4417      	add	r7, r2
 8013c48:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013c4c:	1ab6      	subs	r6, r6, r2
 8013c4e:	892a      	ldrh	r2, [r5, #8]
 8013c50:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013c54:	4416      	add	r6, r2
 8013c56:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013c58:	4416      	add	r6, r2
 8013c5a:	4a08      	ldr	r2, [pc, #32]	; (8013c7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013c5c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8013c60:	2600      	movs	r6, #0
 8013c62:	9207      	str	r2, [sp, #28]
 8013c64:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8013c68:	6803      	ldr	r3, [r0, #0]
 8013c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c6c:	4798      	blx	r3
 8013c6e:	792b      	ldrb	r3, [r5, #4]
 8013c70:	b10b      	cbz	r3, 8013c76 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013c72:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8013c76:	b00a      	add	sp, #40	; 0x28
 8013c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c7c:	08023220 	.word	0x08023220

08013c80 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c84:	460c      	mov	r4, r1
 8013c86:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013c88:	b088      	sub	sp, #32
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	2900      	cmp	r1, #0
 8013c8e:	d06d      	beq.n	8013d6c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013c90:	4668      	mov	r0, sp
 8013c92:	f7ff fde1 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c96:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8013c98:	88e3      	ldrh	r3, [r4, #6]
 8013c9a:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013c9e:	440b      	add	r3, r1
 8013ca0:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013ca4:	b21b      	sxth	r3, r3
 8013ca6:	4543      	cmp	r3, r8
 8013ca8:	db31      	blt.n	8013d0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013caa:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013cae:	44c4      	add	ip, r8
 8013cb0:	fa0f fc8c 	sxth.w	ip, ip
 8013cb4:	4563      	cmp	r3, ip
 8013cb6:	da2a      	bge.n	8013d0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cb8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8013cba:	8926      	ldrh	r6, [r4, #8]
 8013cbc:	4416      	add	r6, r2
 8013cbe:	b236      	sxth	r6, r6
 8013cc0:	42be      	cmp	r6, r7
 8013cc2:	db24      	blt.n	8013d0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cc4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013cc8:	4438      	add	r0, r7
 8013cca:	b200      	sxth	r0, r0
 8013ccc:	4286      	cmp	r6, r0
 8013cce:	da1e      	bge.n	8013d0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cd0:	8963      	ldrh	r3, [r4, #10]
 8013cd2:	4419      	add	r1, r3
 8013cd4:	b209      	sxth	r1, r1
 8013cd6:	4541      	cmp	r1, r8
 8013cd8:	db08      	blt.n	8013cec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013cda:	4561      	cmp	r1, ip
 8013cdc:	da06      	bge.n	8013cec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013cde:	89a3      	ldrh	r3, [r4, #12]
 8013ce0:	441a      	add	r2, r3
 8013ce2:	b212      	sxth	r2, r2
 8013ce4:	42ba      	cmp	r2, r7
 8013ce6:	db01      	blt.n	8013cec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013ce8:	4282      	cmp	r2, r0
 8013cea:	db10      	blt.n	8013d0e <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013cec:	4b21      	ldr	r3, [pc, #132]	; (8013d74 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013cee:	a904      	add	r1, sp, #16
 8013cf0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013cf2:	9304      	str	r3, [sp, #16]
 8013cf4:	2302      	movs	r3, #2
 8013cf6:	f88d 3014 	strb.w	r3, [sp, #20]
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013d00:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013d04:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013d08:	6803      	ldr	r3, [r0, #0]
 8013d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d0c:	4798      	blx	r3
 8013d0e:	1d29      	adds	r1, r5, #4
 8013d10:	a802      	add	r0, sp, #8
 8013d12:	f7ff fda1 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013d16:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013d1a:	88e0      	ldrh	r0, [r4, #6]
 8013d1c:	eba3 0808 	sub.w	r8, r3, r8
 8013d20:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013d24:	7921      	ldrb	r1, [r4, #4]
 8013d26:	fa1f f888 	uxth.w	r8, r8
 8013d2a:	1bdf      	subs	r7, r3, r7
 8013d2c:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8013d30:	b2bb      	uxth	r3, r7
 8013d32:	4440      	add	r0, r8
 8013d34:	8922      	ldrh	r2, [r4, #8]
 8013d36:	8967      	ldrh	r7, [r4, #10]
 8013d38:	4460      	add	r0, ip
 8013d3a:	89a4      	ldrh	r4, [r4, #12]
 8013d3c:	441a      	add	r2, r3
 8013d3e:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013d40:	44b8      	add	r8, r7
 8013d42:	4423      	add	r3, r4
 8013d44:	f8ad 0016 	strh.w	r0, [sp, #22]
 8013d48:	4432      	add	r2, r6
 8013d4a:	44e0      	add	r8, ip
 8013d4c:	4433      	add	r3, r6
 8013d4e:	4c0a      	ldr	r4, [pc, #40]	; (8013d78 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013d50:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013d52:	f88d 1014 	strb.w	r1, [sp, #20]
 8013d56:	a904      	add	r1, sp, #16
 8013d58:	9404      	str	r4, [sp, #16]
 8013d5a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8013d5e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8013d62:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013d66:	6803      	ldr	r3, [r0, #0]
 8013d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d6a:	4798      	blx	r3
 8013d6c:	b008      	add	sp, #32
 8013d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d72:	bf00      	nop
 8013d74:	08023220 	.word	0x08023220
 8013d78:	08023234 	.word	0x08023234

08013d7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8013d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d7e:	4604      	mov	r4, r0
 8013d80:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8013d84:	3201      	adds	r2, #1
 8013d86:	d112      	bne.n	8013dae <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8013d88:	2500      	movs	r5, #0
 8013d8a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013d8e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013d92:	6803      	ldr	r3, [r0, #0]
 8013d94:	9500      	str	r5, [sp, #0]
 8013d96:	466d      	mov	r5, sp
 8013d98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013d9c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013da0:	4629      	mov	r1, r5
 8013da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da4:	4798      	blx	r3
 8013da6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013daa:	e884 0003 	stmia.w	r4, {r0, r1}
 8013dae:	4620      	mov	r0, r4
 8013db0:	b003      	add	sp, #12
 8013db2:	bd30      	pop	{r4, r5, pc}

08013db4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8013db4:	b513      	push	{r0, r1, r4, lr}
 8013db6:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8013dba:	4604      	mov	r4, r0
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	d109      	bne.n	8013dd4 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013dc0:	4601      	mov	r1, r0
 8013dc2:	4668      	mov	r0, sp
 8013dc4:	f7ff fd48 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013dc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8013dcc:	8423      	strh	r3, [r4, #32]
 8013dce:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013dd2:	8463      	strh	r3, [r4, #34]	; 0x22
 8013dd4:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8013dd8:	b002      	add	sp, #8
 8013dda:	bd10      	pop	{r4, pc}

08013ddc <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013ddc:	b513      	push	{r0, r1, r4, lr}
 8013dde:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8013de2:	4604      	mov	r4, r0
 8013de4:	3301      	adds	r3, #1
 8013de6:	d109      	bne.n	8013dfc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8013de8:	4601      	mov	r1, r0
 8013dea:	4668      	mov	r0, sp
 8013dec:	f7ff fd34 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013df0:	f8bd 3000 	ldrh.w	r3, [sp]
 8013df4:	8423      	strh	r3, [r4, #32]
 8013df6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013dfa:	8463      	strh	r3, [r4, #34]	; 0x22
 8013dfc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013e00:	b002      	add	sp, #8
 8013e02:	bd10      	pop	{r4, pc}

08013e04 <_ZN8touchgfx6ScreenC1Ev>:
 8013e04:	b570      	push	{r4, r5, r6, lr}
 8013e06:	4b17      	ldr	r3, [pc, #92]	; (8013e64 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8013e08:	4605      	mov	r5, r0
 8013e0a:	4a17      	ldr	r2, [pc, #92]	; (8013e68 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013e0c:	2101      	movs	r1, #1
 8013e0e:	f845 3b04 	str.w	r3, [r5], #4
 8013e12:	2300      	movs	r3, #0
 8013e14:	6042      	str	r2, [r0, #4]
 8013e16:	4604      	mov	r4, r0
 8013e18:	8103      	strh	r3, [r0, #8]
 8013e1a:	8143      	strh	r3, [r0, #10]
 8013e1c:	8183      	strh	r3, [r0, #12]
 8013e1e:	81c3      	strh	r3, [r0, #14]
 8013e20:	8203      	strh	r3, [r0, #16]
 8013e22:	8243      	strh	r3, [r0, #18]
 8013e24:	8283      	strh	r3, [r0, #20]
 8013e26:	82c3      	strh	r3, [r0, #22]
 8013e28:	6203      	str	r3, [r0, #32]
 8013e2a:	8483      	strh	r3, [r0, #36]	; 0x24
 8013e2c:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013e2e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8013e32:	6343      	str	r3, [r0, #52]	; 0x34
 8013e34:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8013e38:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013e3c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8013e40:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8013e44:	4b09      	ldr	r3, [pc, #36]	; (8013e6c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8013e46:	4628      	mov	r0, r5
 8013e48:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013e4c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013e4e:	4a08      	ldr	r2, [pc, #32]	; (8013e70 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013e50:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013e54:	4798      	blx	r3
 8013e56:	6863      	ldr	r3, [r4, #4]
 8013e58:	4628      	mov	r0, r5
 8013e5a:	4631      	mov	r1, r6
 8013e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e5e:	4798      	blx	r3
 8013e60:	4620      	mov	r0, r4
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	0802325c 	.word	0x0802325c
 8013e68:	08022b30 	.word	0x08022b30
 8013e6c:	2400f586 	.word	0x2400f586
 8013e70:	2400f584 	.word	0x2400f584

08013e74 <_ZN8touchgfx6Screen4drawEv>:
 8013e74:	4b09      	ldr	r3, [pc, #36]	; (8013e9c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8013e76:	b507      	push	{r0, r1, r2, lr}
 8013e78:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	4b08      	ldr	r3, [pc, #32]	; (8013ea0 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8013e80:	9100      	str	r1, [sp, #0]
 8013e82:	4669      	mov	r1, sp
 8013e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013e88:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013e8c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013e90:	6803      	ldr	r3, [r0, #0]
 8013e92:	689b      	ldr	r3, [r3, #8]
 8013e94:	4798      	blx	r3
 8013e96:	b003      	add	sp, #12
 8013e98:	f85d fb04 	ldr.w	pc, [sp], #4
 8013e9c:	2400f584 	.word	0x2400f584
 8013ea0:	2400f586 	.word	0x2400f586

08013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8013ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ea8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8013eac:	b089      	sub	sp, #36	; 0x24
 8013eae:	4680      	mov	r8, r0
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	4615      	mov	r5, r2
 8013eb6:	dd0e      	ble.n	8013ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013eb8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	dd0a      	ble.n	8013ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f7ff ff5b 	bl	8013d7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	f7fe fb4d 	bl	8012566 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ecc:	69eb      	ldr	r3, [r5, #28]
 8013ece:	b928      	cbnz	r0, 8013edc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013ed0:	461d      	mov	r5, r3
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d1f4      	bne.n	8013ec0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013ed6:	b009      	add	sp, #36	; 0x24
 8013ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013edc:	ae04      	add	r6, sp, #16
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f000 80b5 	beq.w	801404e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013ee4:	682b      	ldr	r3, [r5, #0]
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	a802      	add	r0, sp, #8
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	4798      	blx	r3
 8013eee:	4628      	mov	r0, r5
 8013ef0:	f7ff ff60 	bl	8013db4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013ef4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013ef8:	4407      	add	r7, r0
 8013efa:	4628      	mov	r0, r5
 8013efc:	f7ff ff6e 	bl	8013ddc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013f00:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013f04:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013f08:	b23f      	sxth	r7, r7
 8013f0a:	4418      	add	r0, r3
 8013f0c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013f10:	4621      	mov	r1, r4
 8013f12:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f16:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f20:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013f24:	f7f9 fa26 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8013f28:	4628      	mov	r0, r5
 8013f2a:	f7ff ff27 	bl	8013d7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013f2e:	ab06      	add	r3, sp, #24
 8013f30:	4602      	mov	r2, r0
 8013f32:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013f36:	e883 0003 	stmia.w	r3, {r0, r1}
 8013f3a:	4611      	mov	r1, r2
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f9 fa19 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8013f42:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013f46:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013f4a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8013f4e:	4299      	cmp	r1, r3
 8013f50:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8013f54:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8013f58:	d10b      	bne.n	8013f72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f5a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013f5e:	4552      	cmp	r2, sl
 8013f60:	d107      	bne.n	8013f72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f62:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013f66:	455a      	cmp	r2, fp
 8013f68:	d103      	bne.n	8013f72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013f6a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013f6e:	454a      	cmp	r2, r9
 8013f70:	d06d      	beq.n	801404e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013f72:	f1bb 0f00 	cmp.w	fp, #0
 8013f76:	dd65      	ble.n	8014044 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013f78:	f1b9 0f00 	cmp.w	r9, #0
 8013f7c:	dd62      	ble.n	8014044 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013f7e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013f82:	fa1f f08a 	uxth.w	r0, sl
 8013f86:	4552      	cmp	r2, sl
 8013f88:	9000      	str	r0, [sp, #0]
 8013f8a:	da12      	bge.n	8013fb2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8013f8c:	9301      	str	r3, [sp, #4]
 8013f8e:	9b00      	ldr	r3, [sp, #0]
 8013f90:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013f94:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013f98:	1a9a      	subs	r2, r3, r2
 8013f9a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013f9e:	4631      	mov	r1, r6
 8013fa0:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013fa4:	4640      	mov	r0, r8
 8013fa6:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013faa:	69ea      	ldr	r2, [r5, #28]
 8013fac:	f7ff ff7a 	bl	8013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013fb0:	9b01      	ldr	r3, [sp, #4]
 8013fb2:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013fb6:	b29f      	uxth	r7, r3
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	da0d      	bge.n	8013fd8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013fbc:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013fc0:	1aba      	subs	r2, r7, r2
 8013fc2:	f8ad a012 	strh.w	sl, [sp, #18]
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013fcc:	4640      	mov	r0, r8
 8013fce:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013fd2:	69ea      	ldr	r2, [r5, #28]
 8013fd4:	f7ff ff66 	bl	8013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013fd8:	8822      	ldrh	r2, [r4, #0]
 8013fda:	445f      	add	r7, fp
 8013fdc:	88a3      	ldrh	r3, [r4, #4]
 8013fde:	b2bf      	uxth	r7, r7
 8013fe0:	4413      	add	r3, r2
 8013fe2:	b23a      	sxth	r2, r7
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	b219      	sxth	r1, r3
 8013fe8:	4291      	cmp	r1, r2
 8013fea:	dd0d      	ble.n	8014008 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013fec:	1bdb      	subs	r3, r3, r7
 8013fee:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013ff2:	f8ad a012 	strh.w	sl, [sp, #18]
 8013ff6:	4631      	mov	r1, r6
 8013ff8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ffc:	4640      	mov	r0, r8
 8013ffe:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014002:	69ea      	ldr	r2, [r5, #28]
 8014004:	f7ff ff4e 	bl	8013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014008:	88e2      	ldrh	r2, [r4, #6]
 801400a:	8863      	ldrh	r3, [r4, #2]
 801400c:	4413      	add	r3, r2
 801400e:	9a00      	ldr	r2, [sp, #0]
 8014010:	444a      	add	r2, r9
 8014012:	b29b      	uxth	r3, r3
 8014014:	fa1f f982 	uxth.w	r9, r2
 8014018:	b219      	sxth	r1, r3
 801401a:	fa0f f289 	sxth.w	r2, r9
 801401e:	428a      	cmp	r2, r1
 8014020:	da15      	bge.n	801404e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014022:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014026:	eba3 0309 	sub.w	r3, r3, r9
 801402a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801402e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014032:	4631      	mov	r1, r6
 8014034:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014038:	f8ad 2012 	strh.w	r2, [sp, #18]
 801403c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014040:	69ea      	ldr	r2, [r5, #28]
 8014042:	e001      	b.n	8014048 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014044:	69ea      	ldr	r2, [r5, #28]
 8014046:	4621      	mov	r1, r4
 8014048:	4640      	mov	r0, r8
 801404a:	f7ff ff2b 	bl	8013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801404e:	4628      	mov	r0, r5
 8014050:	f7ff fe94 	bl	8013d7c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014054:	6861      	ldr	r1, [r4, #4]
 8014056:	4602      	mov	r2, r0
 8014058:	4633      	mov	r3, r6
 801405a:	6820      	ldr	r0, [r4, #0]
 801405c:	c303      	stmia	r3!, {r0, r1}
 801405e:	4611      	mov	r1, r2
 8014060:	4630      	mov	r0, r6
 8014062:	f7f9 f987 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8014066:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801406a:	2b00      	cmp	r3, #0
 801406c:	f77f af33 	ble.w	8013ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014070:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014074:	2b00      	cmp	r3, #0
 8014076:	f77f af2e 	ble.w	8013ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801407a:	4628      	mov	r0, r5
 801407c:	f7ff fe9a 	bl	8013db4 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014080:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014084:	1a18      	subs	r0, r3, r0
 8014086:	f8ad 0010 	strh.w	r0, [sp, #16]
 801408a:	4628      	mov	r0, r5
 801408c:	f7ff fea6 	bl	8013ddc <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014090:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014094:	4631      	mov	r1, r6
 8014096:	1a18      	subs	r0, r3, r0
 8014098:	f8ad 0012 	strh.w	r0, [sp, #18]
 801409c:	4628      	mov	r0, r5
 801409e:	682b      	ldr	r3, [r5, #0]
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	4798      	blx	r3
 80140a4:	e717      	b.n	8013ed6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080140a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80140a6:	b570      	push	{r4, r5, r6, lr}
 80140a8:	1d06      	adds	r6, r0, #4
 80140aa:	b086      	sub	sp, #24
 80140ac:	460c      	mov	r4, r1
 80140ae:	2300      	movs	r3, #0
 80140b0:	4631      	mov	r1, r6
 80140b2:	4605      	mov	r5, r0
 80140b4:	a802      	add	r0, sp, #8
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	f7ff fbce 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80140c0:	8822      	ldrh	r2, [r4, #0]
 80140c2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80140c6:	1ad2      	subs	r2, r2, r3
 80140c8:	8863      	ldrh	r3, [r4, #2]
 80140ca:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80140ce:	1a5b      	subs	r3, r3, r1
 80140d0:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80140d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80140d8:	aa01      	add	r2, sp, #4
 80140da:	f8ad 0014 	strh.w	r0, [sp, #20]
 80140de:	4630      	mov	r0, r6
 80140e0:	f8ad 1016 	strh.w	r1, [sp, #22]
 80140e4:	a904      	add	r1, sp, #16
 80140e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80140ea:	f7f9 fa1b 	bl	800d524 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80140ee:	9a01      	ldr	r2, [sp, #4]
 80140f0:	b11a      	cbz	r2, 80140fa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80140f2:	4621      	mov	r1, r4
 80140f4:	4628      	mov	r0, r5
 80140f6:	f7ff fed5 	bl	8013ea4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80140fa:	b006      	add	sp, #24
 80140fc:	bd70      	pop	{r4, r5, r6, pc}

080140fe <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80140fe:	4602      	mov	r2, r0
 8014100:	b530      	push	{r4, r5, lr}
 8014102:	4604      	mov	r4, r0
 8014104:	b085      	sub	sp, #20
 8014106:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801410a:	460d      	mov	r5, r1
 801410c:	466b      	mov	r3, sp
 801410e:	6851      	ldr	r1, [r2, #4]
 8014110:	c303      	stmia	r3!, {r0, r1}
 8014112:	4629      	mov	r1, r5
 8014114:	4668      	mov	r0, sp
 8014116:	f7f9 f92d 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 801411a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801411e:	b12b      	cbz	r3, 801412c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014120:	4669      	mov	r1, sp
 8014122:	4620      	mov	r0, r4
 8014124:	f7ff ffbf 	bl	80140a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014128:	b005      	add	sp, #20
 801412a:	bd30      	pop	{r4, r5, pc}
 801412c:	3404      	adds	r4, #4
 801412e:	a802      	add	r0, sp, #8
 8014130:	4621      	mov	r1, r4
 8014132:	f7ff fb91 	bl	8013858 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014136:	f8bd 3000 	ldrh.w	r3, [sp]
 801413a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801413e:	4669      	mov	r1, sp
 8014140:	4620      	mov	r0, r4
 8014142:	1a9b      	subs	r3, r3, r2
 8014144:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014148:	f8ad 3000 	strh.w	r3, [sp]
 801414c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014150:	1a9b      	subs	r3, r3, r2
 8014152:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014156:	f7f9 f9ac 	bl	800d4b2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801415a:	e7e5      	b.n	8014128 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801415c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801415c:	460b      	mov	r3, r1
 801415e:	680a      	ldr	r2, [r1, #0]
 8014160:	1d01      	adds	r1, r0, #4
 8014162:	6992      	ldr	r2, [r2, #24]
 8014164:	4618      	mov	r0, r3
 8014166:	4710      	bx	r2

08014168 <_ZN8touchgfx12TextProviderC1Ev>:
 8014168:	b538      	push	{r3, r4, r5, lr}
 801416a:	2500      	movs	r5, #0
 801416c:	2302      	movs	r3, #2
 801416e:	4604      	mov	r4, r0
 8014170:	220e      	movs	r2, #14
 8014172:	7403      	strb	r3, [r0, #16]
 8014174:	4629      	mov	r1, r5
 8014176:	6145      	str	r5, [r0, #20]
 8014178:	7605      	strb	r5, [r0, #24]
 801417a:	83c5      	strh	r5, [r0, #30]
 801417c:	8405      	strh	r5, [r0, #32]
 801417e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014180:	8705      	strh	r5, [r0, #56]	; 0x38
 8014182:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8014184:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8014188:	e9c0 5500 	strd	r5, r5, [r0]
 801418c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8014190:	304c      	adds	r0, #76	; 0x4c
 8014192:	f00b f8b3 	bl	801f2fc <memset>
 8014196:	2301      	movs	r3, #1
 8014198:	4620      	mov	r0, r4
 801419a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801419e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80141a2:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 80141a6:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80141aa:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 80141ae:	f7ee ff27 	bl	8003000 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 80141b2:	4620      	mov	r0, r4
 80141b4:	bd38      	pop	{r3, r4, r5, pc}

080141b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80141b6:	b530      	push	{r4, r5, lr}
 80141b8:	2500      	movs	r5, #0
 80141ba:	2401      	movs	r4, #1
 80141bc:	6843      	ldr	r3, [r0, #4]
 80141be:	b913      	cbnz	r3, 80141c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80141c0:	6803      	ldr	r3, [r0, #0]
 80141c2:	b313      	cbz	r3, 801420a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80141c4:	6043      	str	r3, [r0, #4]
 80141c6:	7e03      	ldrb	r3, [r0, #24]
 80141c8:	b143      	cbz	r3, 80141dc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80141ca:	6943      	ldr	r3, [r0, #20]
 80141cc:	b12b      	cbz	r3, 80141da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80141ce:	881a      	ldrh	r2, [r3, #0]
 80141d0:	b11a      	cbz	r2, 80141da <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80141d2:	1c9a      	adds	r2, r3, #2
 80141d4:	6142      	str	r2, [r0, #20]
 80141d6:	8818      	ldrh	r0, [r3, #0]
 80141d8:	bd30      	pop	{r4, r5, pc}
 80141da:	7605      	strb	r5, [r0, #24]
 80141dc:	6843      	ldr	r3, [r0, #4]
 80141de:	8819      	ldrh	r1, [r3, #0]
 80141e0:	b199      	cbz	r1, 801420a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80141e2:	1c9a      	adds	r2, r3, #2
 80141e4:	2902      	cmp	r1, #2
 80141e6:	6042      	str	r2, [r0, #4]
 80141e8:	d1f5      	bne.n	80141d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80141ea:	7c03      	ldrb	r3, [r0, #16]
 80141ec:	2b01      	cmp	r3, #1
 80141ee:	d8e5      	bhi.n	80141bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80141f0:	1c5a      	adds	r2, r3, #1
 80141f2:	3302      	adds	r3, #2
 80141f4:	7402      	strb	r2, [r0, #16]
 80141f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80141fa:	6143      	str	r3, [r0, #20]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d0dd      	beq.n	80141bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014200:	881b      	ldrh	r3, [r3, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d0da      	beq.n	80141bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014206:	7604      	strb	r4, [r0, #24]
 8014208:	e7d8      	b.n	80141bc <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801420a:	2000      	movs	r0, #0
 801420c:	e7e4      	b.n	80141d8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801420e <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801420e:	6001      	str	r1, [r0, #0]
 8014210:	2100      	movs	r1, #0
 8014212:	b430      	push	{r4, r5}
 8014214:	6041      	str	r1, [r0, #4]
 8014216:	6815      	ldr	r5, [r2, #0]
 8014218:	6085      	str	r5, [r0, #8]
 801421a:	6852      	ldr	r2, [r2, #4]
 801421c:	6443      	str	r3, [r0, #68]	; 0x44
 801421e:	9b02      	ldr	r3, [sp, #8]
 8014220:	60c2      	str	r2, [r0, #12]
 8014222:	7401      	strb	r1, [r0, #16]
 8014224:	6141      	str	r1, [r0, #20]
 8014226:	7601      	strb	r1, [r0, #24]
 8014228:	8701      	strh	r1, [r0, #56]	; 0x38
 801422a:	8401      	strh	r1, [r0, #32]
 801422c:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8014230:	6483      	str	r3, [r0, #72]	; 0x48
 8014232:	bc30      	pop	{r4, r5}
 8014234:	f7ee bee4 	b.w	8003000 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08014238 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8014238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801423a:	4605      	mov	r5, r0
 801423c:	4608      	mov	r0, r1
 801423e:	b1f1      	cbz	r1, 801427e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8014240:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8014244:	460b      	mov	r3, r1
 8014246:	f101 0708 	add.w	r7, r1, #8
 801424a:	4622      	mov	r2, r4
 801424c:	6818      	ldr	r0, [r3, #0]
 801424e:	3308      	adds	r3, #8
 8014250:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014254:	4626      	mov	r6, r4
 8014256:	42bb      	cmp	r3, r7
 8014258:	c603      	stmia	r6!, {r0, r1}
 801425a:	4634      	mov	r4, r6
 801425c:	d1f6      	bne.n	801424c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801425e:	6818      	ldr	r0, [r3, #0]
 8014260:	6030      	str	r0, [r6, #0]
 8014262:	4610      	mov	r0, r2
 8014264:	889b      	ldrh	r3, [r3, #4]
 8014266:	80b3      	strh	r3, [r6, #4]
 8014268:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801426c:	015b      	lsls	r3, r3, #5
 801426e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014272:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8014276:	430b      	orrs	r3, r1
 8014278:	425b      	negs	r3, r3
 801427a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801427e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014280 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8014280:	b538      	push	{r3, r4, r5, lr}
 8014282:	460c      	mov	r4, r1
 8014284:	6811      	ldr	r1, [r2, #0]
 8014286:	4610      	mov	r0, r2
 8014288:	68cd      	ldr	r5, [r1, #12]
 801428a:	4619      	mov	r1, r3
 801428c:	47a8      	blx	r5
 801428e:	2800      	cmp	r0, #0
 8014290:	bf08      	it	eq
 8014292:	4620      	moveq	r0, r4
 8014294:	bd38      	pop	{r3, r4, r5, pc}
	...

08014298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801429a:	4604      	mov	r4, r0
 801429c:	4615      	mov	r5, r2
 801429e:	4608      	mov	r0, r1
 80142a0:	b93a      	cbnz	r2, 80142b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80142a2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80142a6:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80142aa:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80142ae:	4628      	mov	r0, r5
 80142b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b2:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80142b6:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80142ba:	8893      	ldrh	r3, [r2, #4]
 80142bc:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80142c0:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80142c4:	79ee      	ldrb	r6, [r5, #7]
 80142c6:	4316      	orrs	r6, r2
 80142c8:	19da      	adds	r2, r3, r7
 80142ca:	b291      	uxth	r1, r2
 80142cc:	b2b7      	uxth	r7, r6
 80142ce:	291d      	cmp	r1, #29
 80142d0:	d87b      	bhi.n	80143ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80142d2:	2201      	movs	r2, #1
 80142d4:	10f6      	asrs	r6, r6, #3
 80142d6:	408a      	lsls	r2, r1
 80142d8:	4974      	ldr	r1, [pc, #464]	; (80144ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80142da:	420a      	tst	r2, r1
 80142dc:	d12e      	bne.n	801433c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80142de:	f412 7f60 	tst.w	r2, #896	; 0x380
 80142e2:	d072      	beq.n	80143ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80142e4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80142e8:	462b      	mov	r3, r5
 80142ea:	f105 0e08 	add.w	lr, r5, #8
 80142ee:	4615      	mov	r5, r2
 80142f0:	6818      	ldr	r0, [r3, #0]
 80142f2:	3308      	adds	r3, #8
 80142f4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80142f8:	4694      	mov	ip, r2
 80142fa:	4573      	cmp	r3, lr
 80142fc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014300:	4662      	mov	r2, ip
 8014302:	d1f5      	bne.n	80142f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014304:	6818      	ldr	r0, [r3, #0]
 8014306:	f8cc 0000 	str.w	r0, [ip]
 801430a:	889b      	ldrh	r3, [r3, #4]
 801430c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014310:	b2b3      	uxth	r3, r6
 8014312:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8014316:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801431a:	1aca      	subs	r2, r1, r3
 801431c:	1bcf      	subs	r7, r1, r7
 801431e:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8014322:	b292      	uxth	r2, r2
 8014324:	1afb      	subs	r3, r7, r3
 8014326:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801432a:	10d2      	asrs	r2, r2, #3
 801432c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8014330:	4302      	orrs	r2, r0
 8014332:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8014336:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801433a:	e7b8      	b.n	80142ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801433c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801433e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014342:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8014344:	f640 6333 	movw	r3, #3635	; 0xe33
 8014348:	4299      	cmp	r1, r3
 801434a:	d110      	bne.n	801436e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801434c:	6803      	ldr	r3, [r0, #0]
 801434e:	68db      	ldr	r3, [r3, #12]
 8014350:	4798      	blx	r3
 8014352:	7b41      	ldrb	r1, [r0, #13]
 8014354:	00cb      	lsls	r3, r1, #3
 8014356:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801435a:	7a03      	ldrb	r3, [r0, #8]
 801435c:	0648      	lsls	r0, r1, #25
 801435e:	ea43 0302 	orr.w	r3, r3, r2
 8014362:	bf44      	itt	mi
 8014364:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014368:	b21b      	sxthmi	r3, r3
 801436a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801436e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8014372:	462a      	mov	r2, r5
 8014374:	f105 0c08 	add.w	ip, r5, #8
 8014378:	443b      	add	r3, r7
 801437a:	4433      	add	r3, r6
 801437c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8014380:	b29b      	uxth	r3, r3
 8014382:	4635      	mov	r5, r6
 8014384:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014388:	6810      	ldr	r0, [r2, #0]
 801438a:	3208      	adds	r2, #8
 801438c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014390:	4637      	mov	r7, r6
 8014392:	4562      	cmp	r2, ip
 8014394:	c703      	stmia	r7!, {r0, r1}
 8014396:	463e      	mov	r6, r7
 8014398:	d1f6      	bne.n	8014388 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801439a:	6810      	ldr	r0, [r2, #0]
 801439c:	6038      	str	r0, [r7, #0]
 801439e:	8892      	ldrh	r2, [r2, #4]
 80143a0:	80ba      	strh	r2, [r7, #4]
 80143a2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80143a6:	10db      	asrs	r3, r3, #3
 80143a8:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80143ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80143b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80143b4:	4313      	orrs	r3, r2
 80143b6:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80143ba:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80143be:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80143c2:	1a9b      	subs	r3, r3, r2
 80143c4:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80143c8:	e771      	b.n	80142ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80143ca:	f023 0204 	bic.w	r2, r3, #4
 80143ce:	f640 611b 	movw	r1, #3611	; 0xe1b
 80143d2:	428a      	cmp	r2, r1
 80143d4:	d003      	beq.n	80143de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80143d6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80143da:	4293      	cmp	r3, r2
 80143dc:	d120      	bne.n	8014420 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80143de:	3b01      	subs	r3, #1
 80143e0:	4602      	mov	r2, r0
 80143e2:	4629      	mov	r1, r5
 80143e4:	4620      	mov	r0, r4
 80143e6:	b29b      	uxth	r3, r3
 80143e8:	f7ff ff4a 	bl	8014280 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80143ec:	7b41      	ldrb	r1, [r0, #13]
 80143ee:	00cb      	lsls	r3, r1, #3
 80143f0:	0649      	lsls	r1, r1, #25
 80143f2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80143f6:	7a03      	ldrb	r3, [r0, #8]
 80143f8:	ea43 0302 	orr.w	r3, r3, r2
 80143fc:	bf44      	itt	mi
 80143fe:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014402:	b21b      	sxthmi	r3, r3
 8014404:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014408:	7b6b      	ldrb	r3, [r5, #13]
 801440a:	7aaa      	ldrb	r2, [r5, #10]
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014412:	4313      	orrs	r3, r2
 8014414:	115a      	asrs	r2, r3, #5
 8014416:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801441a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801441e:	e035      	b.n	801448c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8014420:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8014424:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8014428:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801442c:	7a2a      	ldrb	r2, [r5, #8]
 801442e:	ea42 0201 	orr.w	r2, r2, r1
 8014432:	f640 6109 	movw	r1, #3593	; 0xe09
 8014436:	bf1c      	itt	ne
 8014438:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801443c:	b212      	sxthne	r2, r2
 801443e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8014442:	f023 0210 	bic.w	r2, r3, #16
 8014446:	428a      	cmp	r2, r1
 8014448:	d003      	beq.n	8014452 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801444a:	f640 6213 	movw	r2, #3603	; 0xe13
 801444e:	4293      	cmp	r3, r2
 8014450:	d129      	bne.n	80144a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8014452:	7b6e      	ldrb	r6, [r5, #13]
 8014454:	4629      	mov	r1, r5
 8014456:	0076      	lsls	r6, r6, #1
 8014458:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801445c:	7aae      	ldrb	r6, [r5, #10]
 801445e:	4316      	orrs	r6, r2
 8014460:	f640 6213 	movw	r2, #3603	; 0xe13
 8014464:	4293      	cmp	r3, r2
 8014466:	4602      	mov	r2, r0
 8014468:	4620      	mov	r0, r4
 801446a:	bf16      	itet	ne
 801446c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014470:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8014474:	b29b      	uxthne	r3, r3
 8014476:	f7ff ff03 	bl	8014280 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801447a:	7b43      	ldrb	r3, [r0, #13]
 801447c:	7a82      	ldrb	r2, [r0, #10]
 801447e:	005b      	lsls	r3, r3, #1
 8014480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014484:	4313      	orrs	r3, r2
 8014486:	1af6      	subs	r6, r6, r3
 8014488:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801448c:	7b69      	ldrb	r1, [r5, #13]
 801448e:	00cb      	lsls	r3, r1, #3
 8014490:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014494:	7a2b      	ldrb	r3, [r5, #8]
 8014496:	4313      	orrs	r3, r2
 8014498:	064a      	lsls	r2, r1, #25
 801449a:	bf44      	itt	mi
 801449c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80144a0:	b21b      	sxthmi	r3, r3
 80144a2:	1bdb      	subs	r3, r3, r7
 80144a4:	e747      	b.n	8014336 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80144a6:	2300      	movs	r3, #0
 80144a8:	e7b7      	b.n	801441a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80144aa:	bf00      	nop
 80144ac:	3fc00079 	.word	0x3fc00079

080144b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80144b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b4:	4604      	mov	r4, r0
 80144b6:	b942      	cbnz	r2, 80144ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80144b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144bc:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80144c0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80144c4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80144c8:	e047      	b.n	801455a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80144ca:	7b51      	ldrb	r1, [r2, #13]
 80144cc:	8893      	ldrh	r3, [r2, #4]
 80144ce:	010d      	lsls	r5, r1, #4
 80144d0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80144d4:	79d5      	ldrb	r5, [r2, #7]
 80144d6:	4305      	orrs	r5, r0
 80144d8:	2d04      	cmp	r5, #4
 80144da:	bfcc      	ite	gt
 80144dc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80144e0:	f04f 0e01 	movle.w	lr, #1
 80144e4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 80144e8:	f200 80ab 	bhi.w	8014642 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80144ec:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80144f0:	4283      	cmp	r3, r0
 80144f2:	d216      	bcs.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80144f4:	f240 605b 	movw	r0, #1627	; 0x65b
 80144f8:	4283      	cmp	r3, r0
 80144fa:	d859      	bhi.n	80145b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80144fc:	f240 6057 	movw	r0, #1623	; 0x657
 8014500:	4283      	cmp	r3, r0
 8014502:	d20e      	bcs.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014504:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014508:	d24a      	bcs.n	80145a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801450a:	f240 604e 	movw	r0, #1614	; 0x64e
 801450e:	4283      	cmp	r3, r0
 8014510:	d207      	bcs.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014512:	f240 601a 	movw	r0, #1562	; 0x61a
 8014516:	4283      	cmp	r3, r0
 8014518:	d02a      	beq.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801451a:	d821      	bhi.n	8014560 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801451c:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8014520:	d35b      	bcc.n	80145da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014522:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8014526:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801452a:	f040 80d0 	bne.w	80146ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801452e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8014532:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014536:	f040 80ca 	bne.w	80146ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801453a:	00cb      	lsls	r3, r1, #3
 801453c:	0649      	lsls	r1, r1, #25
 801453e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014542:	7a13      	ldrb	r3, [r2, #8]
 8014544:	ea43 0300 	orr.w	r3, r3, r0
 8014548:	bf44      	itt	mi
 801454a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801454e:	b21b      	sxthmi	r3, r3
 8014550:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014554:	1b5d      	subs	r5, r3, r5
 8014556:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801455a:	4610      	mov	r0, r2
 801455c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014560:	f240 604b 	movw	r0, #1611	; 0x64b
 8014564:	4283      	cmp	r3, r0
 8014566:	d338      	bcc.n	80145da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014568:	f240 604c 	movw	r0, #1612	; 0x64c
 801456c:	4283      	cmp	r3, r0
 801456e:	d9d8      	bls.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014570:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8014574:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8014578:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801457c:	f040 80f3 	bne.w	8014766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014580:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014584:	f040 80ef 	bne.w	8014766 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014588:	00cb      	lsls	r3, r1, #3
 801458a:	064e      	lsls	r6, r1, #25
 801458c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014590:	7a13      	ldrb	r3, [r2, #8]
 8014592:	ea43 0300 	orr.w	r3, r3, r0
 8014596:	bf44      	itt	mi
 8014598:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801459c:	b21b      	sxthmi	r3, r3
 801459e:	e7d9      	b.n	8014554 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80145a0:	f240 6054 	movw	r0, #1620	; 0x654
 80145a4:	4283      	cmp	r3, r0
 80145a6:	d8e3      	bhi.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80145a8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80145ac:	d9e0      	bls.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80145ae:	e7b8      	b.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80145b0:	f240 6074 	movw	r0, #1652	; 0x674
 80145b4:	4283      	cmp	r3, r0
 80145b6:	d0b4      	beq.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80145b8:	d82d      	bhi.n	8014616 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80145ba:	f240 605e 	movw	r0, #1630	; 0x65e
 80145be:	4283      	cmp	r3, r0
 80145c0:	d804      	bhi.n	80145cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80145c2:	f240 605d 	movw	r0, #1629	; 0x65d
 80145c6:	4283      	cmp	r3, r0
 80145c8:	d3d2      	bcc.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80145ca:	e7aa      	b.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80145cc:	f240 605f 	movw	r0, #1631	; 0x65f
 80145d0:	4283      	cmp	r3, r0
 80145d2:	d0cd      	beq.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80145d4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80145d8:	d0a3      	beq.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80145da:	00cb      	lsls	r3, r1, #3
 80145dc:	0649      	lsls	r1, r1, #25
 80145de:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80145e2:	7a13      	ldrb	r3, [r2, #8]
 80145e4:	ea43 0300 	orr.w	r3, r3, r0
 80145e8:	bf44      	itt	mi
 80145ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80145ee:	b21b      	sxthmi	r3, r3
 80145f0:	1b5d      	subs	r5, r3, r5
 80145f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80145f6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80145fa:	7b53      	ldrb	r3, [r2, #13]
 80145fc:	015b      	lsls	r3, r3, #5
 80145fe:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014602:	7993      	ldrb	r3, [r2, #6]
 8014604:	430b      	orrs	r3, r1
 8014606:	2105      	movs	r1, #5
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	fb93 f3f1 	sdiv	r3, r3, r1
 801460e:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014612:	440b      	add	r3, r1
 8014614:	e756      	b.n	80144c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014616:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801461a:	4283      	cmp	r3, r0
 801461c:	d809      	bhi.n	8014632 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801461e:	f240 60df 	movw	r0, #1759	; 0x6df
 8014622:	4283      	cmp	r3, r0
 8014624:	f4bf af7d 	bcs.w	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014628:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801462c:	2b05      	cmp	r3, #5
 801462e:	d8d4      	bhi.n	80145da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014630:	e777      	b.n	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014632:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8014636:	4283      	cmp	r3, r0
 8014638:	d09a      	beq.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801463a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801463e:	4283      	cmp	r3, r0
 8014640:	e7ca      	b.n	80145d8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014642:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8014646:	d22b      	bcs.n	80146a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014648:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801464c:	4283      	cmp	r3, r0
 801464e:	d28f      	bcs.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014650:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014654:	4283      	cmp	r3, r0
 8014656:	d816      	bhi.n	8014686 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014658:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801465c:	4283      	cmp	r3, r0
 801465e:	f4bf af60 	bcs.w	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014662:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014666:	4283      	cmp	r3, r0
 8014668:	d80a      	bhi.n	8014680 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801466a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801466e:	4283      	cmp	r3, r0
 8014670:	f4bf af57 	bcs.w	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014674:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014678:	4283      	cmp	r3, r0
 801467a:	f43f af79 	beq.w	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801467e:	e7ac      	b.n	80145da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014680:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014684:	e7f8      	b.n	8014678 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014686:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801468a:	4283      	cmp	r3, r0
 801468c:	d802      	bhi.n	8014694 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801468e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014692:	e798      	b.n	80145c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014694:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014698:	4283      	cmp	r3, r0
 801469a:	f47f af42 	bne.w	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801469e:	e767      	b.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146a0:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80146a4:	4283      	cmp	r3, r0
 80146a6:	f43f af63 	beq.w	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146aa:	d802      	bhi.n	80146b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80146ac:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80146b0:	e7f2      	b.n	8014698 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80146b2:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80146b6:	4283      	cmp	r3, r0
 80146b8:	d805      	bhi.n	80146c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80146ba:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80146be:	4283      	cmp	r3, r0
 80146c0:	f4ff af2f 	bcc.w	8014522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80146c4:	e754      	b.n	8014570 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80146c6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80146ca:	4283      	cmp	r3, r0
 80146cc:	e7af      	b.n	801462e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80146ce:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80146d2:	4617      	mov	r7, r2
 80146d4:	f102 0808 	add.w	r8, r2, #8
 80146d8:	4666      	mov	r6, ip
 80146da:	6838      	ldr	r0, [r7, #0]
 80146dc:	3708      	adds	r7, #8
 80146de:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80146e2:	46e6      	mov	lr, ip
 80146e4:	4547      	cmp	r7, r8
 80146e6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80146ea:	46f4      	mov	ip, lr
 80146ec:	d1f5      	bne.n	80146da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80146ee:	6838      	ldr	r0, [r7, #0]
 80146f0:	f8ce 0000 	str.w	r0, [lr]
 80146f4:	88b9      	ldrh	r1, [r7, #4]
 80146f6:	f8ae 1004 	strh.w	r1, [lr, #4]
 80146fa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80146fe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014702:	d009      	beq.n	8014718 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014704:	7b51      	ldrb	r1, [r2, #13]
 8014706:	7992      	ldrb	r2, [r2, #6]
 8014708:	0149      	lsls	r1, r1, #5
 801470a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801470e:	4311      	orrs	r1, r2
 8014710:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014714:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014718:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801471c:	b2ad      	uxth	r5, r5
 801471e:	d00d      	beq.n	801473c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014720:	442b      	add	r3, r5
 8014722:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014726:	b29b      	uxth	r3, r3
 8014728:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801472c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014730:	10db      	asrs	r3, r3, #3
 8014732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014736:	4313      	orrs	r3, r2
 8014738:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801473c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014740:	00cb      	lsls	r3, r1, #3
 8014742:	064f      	lsls	r7, r1, #25
 8014744:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014748:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801474c:	ea43 0302 	orr.w	r3, r3, r2
 8014750:	bf44      	itt	mi
 8014752:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014756:	b21b      	sxthmi	r3, r3
 8014758:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801475c:	1b5b      	subs	r3, r3, r5
 801475e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8014762:	4632      	mov	r2, r6
 8014764:	e6f9      	b.n	801455a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014766:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801476a:	4617      	mov	r7, r2
 801476c:	f102 0908 	add.w	r9, r2, #8
 8014770:	4666      	mov	r6, ip
 8014772:	6838      	ldr	r0, [r7, #0]
 8014774:	3708      	adds	r7, #8
 8014776:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801477a:	46e0      	mov	r8, ip
 801477c:	454f      	cmp	r7, r9
 801477e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014782:	46c4      	mov	ip, r8
 8014784:	d1f5      	bne.n	8014772 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014786:	6838      	ldr	r0, [r7, #0]
 8014788:	f8c8 0000 	str.w	r0, [r8]
 801478c:	88b9      	ldrh	r1, [r7, #4]
 801478e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014792:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014796:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801479a:	d009      	beq.n	80147b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801479c:	7b51      	ldrb	r1, [r2, #13]
 801479e:	7992      	ldrb	r2, [r2, #6]
 80147a0:	0149      	lsls	r1, r1, #5
 80147a2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80147a6:	4311      	orrs	r1, r2
 80147a8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80147ac:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80147b0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80147b4:	d00e      	beq.n	80147d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80147b6:	eba3 030e 	sub.w	r3, r3, lr
 80147ba:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80147be:	b29b      	uxth	r3, r3
 80147c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80147c4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80147c8:	10db      	asrs	r3, r3, #3
 80147ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80147ce:	4313      	orrs	r3, r2
 80147d0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80147d4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80147d8:	00cb      	lsls	r3, r1, #3
 80147da:	0648      	lsls	r0, r1, #25
 80147dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80147e0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80147e4:	ea43 0302 	orr.w	r3, r3, r2
 80147e8:	bf44      	itt	mi
 80147ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80147ee:	b21b      	sxthmi	r3, r3
 80147f0:	1b5d      	subs	r5, r3, r5
 80147f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80147f6:	e7b4      	b.n	8014762 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080147f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80147f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147fc:	461e      	mov	r6, r3
 80147fe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014800:	4604      	mov	r4, r0
 8014802:	4617      	mov	r7, r2
 8014804:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014808:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801480c:	f7ee fbb6 	bl	8002f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014810:	4605      	mov	r5, r0
 8014812:	b918      	cbnz	r0, 801481c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014814:	6030      	str	r0, [r6, #0]
 8014816:	4628      	mov	r0, r5
 8014818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	4601      	mov	r1, r0
 8014820:	4638      	mov	r0, r7
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	4798      	blx	r3
 8014826:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801482a:	4602      	mov	r2, r0
 801482c:	6030      	str	r0, [r6, #0]
 801482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014832:	d213      	bcs.n	801485c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014834:	4643      	mov	r3, r8
 8014836:	4639      	mov	r1, r7
 8014838:	4620      	mov	r0, r4
 801483a:	f7ff fe39 	bl	80144b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801483e:	6030      	str	r0, [r6, #0]
 8014840:	6833      	ldr	r3, [r6, #0]
 8014842:	b143      	cbz	r3, 8014856 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014844:	7b5a      	ldrb	r2, [r3, #13]
 8014846:	7a9b      	ldrb	r3, [r3, #10]
 8014848:	0052      	lsls	r2, r2, #1
 801484a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801484e:	4313      	orrs	r3, r2
 8014850:	bf0c      	ite	eq
 8014852:	2301      	moveq	r3, #1
 8014854:	2300      	movne	r3, #0
 8014856:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801485a:	e7dc      	b.n	8014816 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801485c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014860:	b29b      	uxth	r3, r3
 8014862:	2b7f      	cmp	r3, #127	; 0x7f
 8014864:	d804      	bhi.n	8014870 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014866:	4639      	mov	r1, r7
 8014868:	4620      	mov	r0, r4
 801486a:	f7ff fd15 	bl	8014298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801486e:	e7e6      	b.n	801483e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014870:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014874:	2b00      	cmp	r3, #0
 8014876:	d0e3      	beq.n	8014840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014878:	f640 1302 	movw	r3, #2306	; 0x902
 801487c:	429d      	cmp	r5, r3
 801487e:	d1df      	bne.n	8014840 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014880:	4601      	mov	r1, r0
 8014882:	4620      	mov	r0, r4
 8014884:	f7ff fcd8 	bl	8014238 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014888:	e7d9      	b.n	801483e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801488a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801488a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801488e:	461e      	mov	r6, r3
 8014890:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014892:	4604      	mov	r4, r0
 8014894:	4617      	mov	r7, r2
 8014896:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801489a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801489e:	f7ee fb6d 	bl	8002f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80148a2:	4605      	mov	r5, r0
 80148a4:	b918      	cbnz	r0, 80148ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80148a6:	6030      	str	r0, [r6, #0]
 80148a8:	4628      	mov	r0, r5
 80148aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	4601      	mov	r1, r0
 80148b2:	4638      	mov	r0, r7
 80148b4:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80148b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80148bc:	47c8      	blx	r9
 80148be:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80148c2:	4602      	mov	r2, r0
 80148c4:	6030      	str	r0, [r6, #0]
 80148c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80148ca:	d213      	bcs.n	80148f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80148cc:	4643      	mov	r3, r8
 80148ce:	4639      	mov	r1, r7
 80148d0:	4620      	mov	r0, r4
 80148d2:	f7ff fded 	bl	80144b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80148d6:	6030      	str	r0, [r6, #0]
 80148d8:	6833      	ldr	r3, [r6, #0]
 80148da:	b143      	cbz	r3, 80148ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80148dc:	7b5a      	ldrb	r2, [r3, #13]
 80148de:	7a9b      	ldrb	r3, [r3, #10]
 80148e0:	0052      	lsls	r2, r2, #1
 80148e2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80148e6:	4313      	orrs	r3, r2
 80148e8:	bf0c      	ite	eq
 80148ea:	2301      	moveq	r3, #1
 80148ec:	2300      	movne	r3, #0
 80148ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80148f2:	e7d9      	b.n	80148a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80148f4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80148f8:	b29b      	uxth	r3, r3
 80148fa:	2b7f      	cmp	r3, #127	; 0x7f
 80148fc:	d804      	bhi.n	8014908 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80148fe:	4639      	mov	r1, r7
 8014900:	4620      	mov	r0, r4
 8014902:	f7ff fcc9 	bl	8014298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014906:	e7e6      	b.n	80148d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8014908:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801490c:	2b00      	cmp	r3, #0
 801490e:	d0e3      	beq.n	80148d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8014910:	f640 1302 	movw	r3, #2306	; 0x902
 8014914:	429d      	cmp	r5, r3
 8014916:	d1df      	bne.n	80148d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8014918:	4601      	mov	r1, r0
 801491a:	4620      	mov	r0, r4
 801491c:	f7ff fc8c 	bl	8014238 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014920:	e7d9      	b.n	80148d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08014922 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014922:	b510      	push	{r4, lr}
 8014924:	4604      	mov	r4, r0
 8014926:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801492a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801492c:	b1e1      	cbz	r1, 8014968 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801492e:	2b0a      	cmp	r3, #10
 8014930:	d02d      	beq.n	801498e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014932:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8014934:	3901      	subs	r1, #1
 8014936:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801493a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801493c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8014940:	1c51      	adds	r1, r2, #1
 8014942:	b289      	uxth	r1, r1
 8014944:	2901      	cmp	r1, #1
 8014946:	bf8a      	itet	hi
 8014948:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801494c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801494e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8014950:	1c5a      	adds	r2, r3, #1
 8014952:	8722      	strh	r2, [r4, #56]	; 0x38
 8014954:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014956:	4413      	add	r3, r2
 8014958:	b29b      	uxth	r3, r3
 801495a:	2b09      	cmp	r3, #9
 801495c:	bf88      	it	hi
 801495e:	3b0a      	subhi	r3, #10
 8014960:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014964:	8458      	strh	r0, [r3, #34]	; 0x22
 8014966:	e7de      	b.n	8014926 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014968:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801496a:	2b0a      	cmp	r3, #10
 801496c:	d00f      	beq.n	801498e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801496e:	4620      	mov	r0, r4
 8014970:	f7ff fc21 	bl	80141b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014974:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014976:	1c5a      	adds	r2, r3, #1
 8014978:	8722      	strh	r2, [r4, #56]	; 0x38
 801497a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801497c:	4413      	add	r3, r2
 801497e:	b29b      	uxth	r3, r3
 8014980:	2b09      	cmp	r3, #9
 8014982:	bf88      	it	hi
 8014984:	3b0a      	subhi	r3, #10
 8014986:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801498a:	8458      	strh	r0, [r3, #34]	; 0x22
 801498c:	e7ec      	b.n	8014968 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801498e:	bd10      	pop	{r4, pc}

08014990 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014990:	b538      	push	{r3, r4, r5, lr}
 8014992:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014994:	4604      	mov	r4, r0
 8014996:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801499a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801499c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801499e:	3a01      	subs	r2, #1
 80149a0:	8702      	strh	r2, [r0, #56]	; 0x38
 80149a2:	1c5a      	adds	r2, r3, #1
 80149a4:	b292      	uxth	r2, r2
 80149a6:	2a09      	cmp	r2, #9
 80149a8:	bf8a      	itet	hi
 80149aa:	3b09      	subhi	r3, #9
 80149ac:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80149ae:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80149b0:	f7ff ffb7 	bl	8014922 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80149b4:	8c23      	ldrh	r3, [r4, #32]
 80149b6:	2b01      	cmp	r3, #1
 80149b8:	bf9c      	itt	ls
 80149ba:	3301      	addls	r3, #1
 80149bc:	8423      	strhls	r3, [r4, #32]
 80149be:	8be3      	ldrh	r3, [r4, #30]
 80149c0:	b90b      	cbnz	r3, 80149c6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80149c2:	2302      	movs	r3, #2
 80149c4:	83e3      	strh	r3, [r4, #30]
 80149c6:	8be3      	ldrh	r3, [r4, #30]
 80149c8:	4628      	mov	r0, r5
 80149ca:	3b01      	subs	r3, #1
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	83e3      	strh	r3, [r4, #30]
 80149d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80149d4:	8365      	strh	r5, [r4, #26]
 80149d6:	bd38      	pop	{r3, r4, r5, pc}

080149d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80149d8:	428a      	cmp	r2, r1
 80149da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149de:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80149e0:	d932      	bls.n	8014a48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80149e2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80149e4:	1a54      	subs	r4, r2, r1
 80149e6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80149ea:	19ee      	adds	r6, r5, r7
 80149ec:	fa1f fe84 	uxth.w	lr, r4
 80149f0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80149f4:	3e01      	subs	r6, #1
 80149f6:	b2b4      	uxth	r4, r6
 80149f8:	eba4 090e 	sub.w	r9, r4, lr
 80149fc:	fa1f f989 	uxth.w	r9, r9
 8014a00:	2c09      	cmp	r4, #9
 8014a02:	4626      	mov	r6, r4
 8014a04:	bf88      	it	hi
 8014a06:	f1a4 060a 	subhi.w	r6, r4, #10
 8014a0a:	f1bc 0f00 	cmp.w	ip, #0
 8014a0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014a12:	bf08      	it	eq
 8014a14:	f04f 0c02 	moveq.w	ip, #2
 8014a18:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014a1c:	b2a4      	uxth	r4, r4
 8014a1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014a22:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8014a26:	454c      	cmp	r4, r9
 8014a28:	fa1f fc8c 	uxth.w	ip, ip
 8014a2c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014a30:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8014a34:	d1e4      	bne.n	8014a00 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014a36:	eba5 050e 	sub.w	r5, r5, lr
 8014a3a:	eb0e 0408 	add.w	r4, lr, r8
 8014a3e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8014a42:	8705      	strh	r5, [r0, #56]	; 0x38
 8014a44:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8014a48:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8014a4a:	250a      	movs	r5, #10
 8014a4c:	1a64      	subs	r4, r4, r1
 8014a4e:	4439      	add	r1, r7
 8014a50:	b289      	uxth	r1, r1
 8014a52:	8704      	strh	r4, [r0, #56]	; 0x38
 8014a54:	2909      	cmp	r1, #9
 8014a56:	bf88      	it	hi
 8014a58:	390a      	subhi	r1, #10
 8014a5a:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014a5c:	b18a      	cbz	r2, 8014a82 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014a5e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8014a60:	3a01      	subs	r2, #1
 8014a62:	3101      	adds	r1, #1
 8014a64:	b292      	uxth	r2, r2
 8014a66:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014a6a:	8701      	strh	r1, [r0, #56]	; 0x38
 8014a6c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014a6e:	b901      	cbnz	r1, 8014a72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014a70:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014a72:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014a74:	3901      	subs	r1, #1
 8014a76:	b289      	uxth	r1, r1
 8014a78:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014a7a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014a7e:	844c      	strh	r4, [r1, #34]	; 0x22
 8014a80:	e7ec      	b.n	8014a5c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8014a82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a86:	f7ff bf4c 	b.w	8014922 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014a8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014a8a:	b570      	push	{r4, r5, r6, lr}
 8014a8c:	2500      	movs	r5, #0
 8014a8e:	4295      	cmp	r5, r2
 8014a90:	d011      	beq.n	8014ab6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014a92:	8bc4      	ldrh	r4, [r0, #30]
 8014a94:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014a98:	4414      	add	r4, r2
 8014a9a:	3c01      	subs	r4, #1
 8014a9c:	1b64      	subs	r4, r4, r5
 8014a9e:	b2a4      	uxth	r4, r4
 8014aa0:	2c01      	cmp	r4, #1
 8014aa2:	bf88      	it	hi
 8014aa4:	3c02      	subhi	r4, #2
 8014aa6:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014aaa:	8b64      	ldrh	r4, [r4, #26]
 8014aac:	42b4      	cmp	r4, r6
 8014aae:	d117      	bne.n	8014ae0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014ab0:	3501      	adds	r5, #1
 8014ab2:	b2ad      	uxth	r5, r5
 8014ab4:	e7eb      	b.n	8014a8e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014ab6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014aba:	2400      	movs	r4, #0
 8014abc:	4413      	add	r3, r2
 8014abe:	b2a2      	uxth	r2, r4
 8014ac0:	429a      	cmp	r2, r3
 8014ac2:	da0f      	bge.n	8014ae4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014ac4:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8014ac6:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014aca:	3401      	adds	r4, #1
 8014acc:	4432      	add	r2, r6
 8014ace:	b292      	uxth	r2, r2
 8014ad0:	2a09      	cmp	r2, #9
 8014ad2:	bf88      	it	hi
 8014ad4:	3a0a      	subhi	r2, #10
 8014ad6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014ada:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014adc:	42aa      	cmp	r2, r5
 8014ade:	d0ee      	beq.n	8014abe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014ae0:	2000      	movs	r0, #0
 8014ae2:	bd70      	pop	{r4, r5, r6, pc}
 8014ae4:	2001      	movs	r0, #1
 8014ae6:	e7fc      	b.n	8014ae2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014ae8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aec:	4605      	mov	r5, r0
 8014aee:	4616      	mov	r6, r2
 8014af0:	1c8c      	adds	r4, r1, #2
 8014af2:	8809      	ldrh	r1, [r1, #0]
 8014af4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014af8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014afc:	42b3      	cmp	r3, r6
 8014afe:	d124      	bne.n	8014b4a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014b00:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014b04:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014b08:	f001 070f 	and.w	r7, r1, #15
 8014b0c:	4652      	mov	r2, sl
 8014b0e:	f8cd 8000 	str.w	r8, [sp]
 8014b12:	464b      	mov	r3, r9
 8014b14:	4621      	mov	r1, r4
 8014b16:	4628      	mov	r0, r5
 8014b18:	f7ff ffb7 	bl	8014a8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014b1c:	4683      	mov	fp, r0
 8014b1e:	b168      	cbz	r0, 8014b3c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014b20:	eb0a 0109 	add.w	r1, sl, r9
 8014b24:	463a      	mov	r2, r7
 8014b26:	4628      	mov	r0, r5
 8014b28:	4441      	add	r1, r8
 8014b2a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014b2e:	4649      	mov	r1, r9
 8014b30:	f7ff ff52 	bl	80149d8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014b34:	4658      	mov	r0, fp
 8014b36:	b003      	add	sp, #12
 8014b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b3c:	eb07 010a 	add.w	r1, r7, sl
 8014b40:	4449      	add	r1, r9
 8014b42:	4441      	add	r1, r8
 8014b44:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014b48:	e7d2      	b.n	8014af0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014b4a:	f04f 0b00 	mov.w	fp, #0
 8014b4e:	e7f1      	b.n	8014b34 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014b50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014b50:	b570      	push	{r4, r5, r6, lr}
 8014b52:	8810      	ldrh	r0, [r2, #0]
 8014b54:	4298      	cmp	r0, r3
 8014b56:	d817      	bhi.n	8014b88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014b58:	1e48      	subs	r0, r1, #1
 8014b5a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014b5e:	4298      	cmp	r0, r3
 8014b60:	d312      	bcc.n	8014b88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014b62:	2400      	movs	r4, #0
 8014b64:	428c      	cmp	r4, r1
 8014b66:	d20f      	bcs.n	8014b88 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014b68:	1860      	adds	r0, r4, r1
 8014b6a:	1040      	asrs	r0, r0, #1
 8014b6c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014b70:	0085      	lsls	r5, r0, #2
 8014b72:	42b3      	cmp	r3, r6
 8014b74:	d902      	bls.n	8014b7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014b76:	3001      	adds	r0, #1
 8014b78:	b284      	uxth	r4, r0
 8014b7a:	e7f3      	b.n	8014b64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014b7c:	d201      	bcs.n	8014b82 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014b7e:	b281      	uxth	r1, r0
 8014b80:	e7f0      	b.n	8014b64 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014b82:	442a      	add	r2, r5
 8014b84:	8850      	ldrh	r0, [r2, #2]
 8014b86:	bd70      	pop	{r4, r5, r6, pc}
 8014b88:	2000      	movs	r0, #0
 8014b8a:	e7fc      	b.n	8014b86 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014b8c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b90:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8014b92:	4604      	mov	r4, r0
 8014b94:	260b      	movs	r6, #11
 8014b96:	886f      	ldrh	r7, [r5, #2]
 8014b98:	087f      	lsrs	r7, r7, #1
 8014b9a:	3e01      	subs	r6, #1
 8014b9c:	d013      	beq.n	8014bc6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014b9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	4639      	mov	r1, r7
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014baa:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014bae:	4643      	mov	r3, r8
 8014bb0:	f7ff ffce 	bl	8014b50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014bb4:	b138      	cbz	r0, 8014bc6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014bb6:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014bba:	4642      	mov	r2, r8
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f7ff ff93 	bl	8014ae8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	d1e9      	bne.n	8014b9a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014bcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	694a      	ldr	r2, [r1, #20]
 8014bd0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014bd2:	684b      	ldr	r3, [r1, #4]
 8014bd4:	1b54      	subs	r4, r2, r5
 8014bd6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8014bd8:	f000 8106 	beq.w	8014de8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014bdc:	1b9b      	subs	r3, r3, r6
 8014bde:	d003      	beq.n	8014be8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014be0:	4363      	muls	r3, r4
 8014be2:	2210      	movs	r2, #16
 8014be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8014be8:	680c      	ldr	r4, [r1, #0]
 8014bea:	698a      	ldr	r2, [r1, #24]
 8014bec:	1b65      	subs	r5, r4, r5
 8014bee:	f000 80fd 	beq.w	8014dec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014bf2:	1b92      	subs	r2, r2, r6
 8014bf4:	d003      	beq.n	8014bfe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014bf6:	436a      	muls	r2, r5
 8014bf8:	2410      	movs	r4, #16
 8014bfa:	fb92 f2f4 	sdiv	r2, r2, r4
 8014bfe:	1a9b      	subs	r3, r3, r2
 8014c00:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8014e28 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014c08:	460a      	mov	r2, r1
 8014c0a:	ee07 3a90 	vmov	s15, r3
 8014c0e:	f100 040c 	add.w	r4, r0, #12
 8014c12:	4603      	mov	r3, r0
 8014c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c18:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014c1c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014c20:	eeb1 6a43 	vneg.f32	s12, s6
 8014c24:	edd2 7a02 	vldr	s15, [r2, #8]
 8014c28:	3214      	adds	r2, #20
 8014c2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014c2e:	ece3 6a01 	vstmia	r3!, {s13}
 8014c32:	429c      	cmp	r4, r3
 8014c34:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014c38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c3c:	edc3 7a02 	vstr	s15, [r3, #8]
 8014c40:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014c44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014c48:	edc3 7a05 	vstr	s15, [r3, #20]
 8014c4c:	d1ea      	bne.n	8014c24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014c4e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014c50:	698b      	ldr	r3, [r1, #24]
 8014c52:	edd0 4a02 	vldr	s9, [r0, #8]
 8014c56:	1a9b      	subs	r3, r3, r2
 8014c58:	edd0 3a00 	vldr	s7, [r0]
 8014c5c:	edd0 6a01 	vldr	s13, [r0, #4]
 8014c60:	ee07 3a90 	vmov	s15, r3
 8014c64:	684b      	ldr	r3, [r1, #4]
 8014c66:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014c6a:	ed90 5a05 	vldr	s10, [r0, #20]
 8014c6e:	1a9b      	subs	r3, r3, r2
 8014c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c74:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014c78:	ed90 2a03 	vldr	s4, [r0, #12]
 8014c7c:	ee07 3a10 	vmov	s14, r3
 8014c80:	edd0 5a04 	vldr	s11, [r0, #16]
 8014c84:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014c88:	ed90 1a07 	vldr	s2, [r0, #28]
 8014c8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014c90:	edd0 2a06 	vldr	s5, [r0, #24]
 8014c94:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014c98:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014c9c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ca0:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014ca4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ca8:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014cac:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014cb0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014cb2:	694a      	ldr	r2, [r1, #20]
 8014cb4:	1b13      	subs	r3, r2, r4
 8014cb6:	ee07 3a10 	vmov	s14, r3
 8014cba:	680b      	ldr	r3, [r1, #0]
 8014cbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014cc0:	1b1b      	subs	r3, r3, r4
 8014cc2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014cc6:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014cca:	ee07 3a10 	vmov	s14, r3
 8014cce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014cd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014cd6:	eee6 4a87 	vfma.f32	s9, s13, s14
 8014cda:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014cde:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8014ce2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014ce4:	698b      	ldr	r3, [r1, #24]
 8014ce6:	1a9b      	subs	r3, r3, r2
 8014ce8:	ee06 3a90 	vmov	s13, r3
 8014cec:	684b      	ldr	r3, [r1, #4]
 8014cee:	1a9b      	subs	r3, r3, r2
 8014cf0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014cf4:	ee07 3a10 	vmov	s14, r3
 8014cf8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014cfc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d00:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014d04:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d08:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014d0c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014d10:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8014d14:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014d16:	694a      	ldr	r2, [r1, #20]
 8014d18:	1b13      	subs	r3, r2, r4
 8014d1a:	ee07 3a10 	vmov	s14, r3
 8014d1e:	680b      	ldr	r3, [r1, #0]
 8014d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d24:	1b1b      	subs	r3, r3, r4
 8014d26:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d2a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014d2e:	ee07 3a10 	vmov	s14, r3
 8014d32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d36:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d3a:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014d3e:	edd0 5a08 	vldr	s11, [r0, #32]
 8014d42:	ee31 1a65 	vsub.f32	s2, s2, s11
 8014d46:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8014d4a:	ee25 5a06 	vmul.f32	s10, s10, s12
 8014d4e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8014d52:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014d54:	698b      	ldr	r3, [r1, #24]
 8014d56:	1a9b      	subs	r3, r3, r2
 8014d58:	ee07 3a10 	vmov	s14, r3
 8014d5c:	684b      	ldr	r3, [r1, #4]
 8014d5e:	1a9b      	subs	r3, r3, r2
 8014d60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014d64:	ee01 3a90 	vmov	s3, r3
 8014d68:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014d6c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014d70:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8014d74:	ee61 1a84 	vmul.f32	s3, s3, s8
 8014d78:	eea1 7a21 	vfma.f32	s14, s2, s3
 8014d7c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8014d80:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014d84:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014d86:	694a      	ldr	r2, [r1, #20]
 8014d88:	1b13      	subs	r3, r2, r4
 8014d8a:	ee03 3a10 	vmov	s6, r3
 8014d8e:	680b      	ldr	r3, [r1, #0]
 8014d90:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014d94:	1b1b      	subs	r3, r3, r4
 8014d96:	ee23 3a04 	vmul.f32	s6, s6, s8
 8014d9a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014d9e:	ee03 3a10 	vmov	s6, r3
 8014da2:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014da6:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014daa:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014dae:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014db2:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014db6:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8014dba:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014dbe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc6:	dd13      	ble.n	8014df0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014dcc:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014dd0:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014dd2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dde:	dd15      	ble.n	8014e0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014de4:	6403      	str	r3, [r0, #64]	; 0x40
 8014de6:	bd70      	pop	{r4, r5, r6, pc}
 8014de8:	4623      	mov	r3, r4
 8014dea:	e6fd      	b.n	8014be8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014dec:	462a      	mov	r2, r5
 8014dee:	e706      	b.n	8014bfe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014df0:	d502      	bpl.n	8014df8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8014df2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014df6:	e7e9      	b.n	8014dcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014df8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014dfc:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014e00:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8014e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e08:	dade      	bge.n	8014dc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014e0a:	e7f2      	b.n	8014df2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014e0c:	d502      	bpl.n	8014e14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014e0e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014e12:	e7e7      	b.n	8014de4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8014e14:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014e18:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014e1c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e24:	dadc      	bge.n	8014de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8014e26:	e7f2      	b.n	8014e0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014e28:	3d800000 	.word	0x3d800000

08014e2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e30:	2714      	movs	r7, #20
 8014e32:	435f      	muls	r7, r3
 8014e34:	eb02 0c07 	add.w	ip, r2, r7
 8014e38:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014e3c:	f115 0e0f 	adds.w	lr, r5, #15
 8014e40:	f100 80a2 	bmi.w	8014f88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8014e44:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8014e48:	9c08      	ldr	r4, [sp, #32]
 8014e4a:	2614      	movs	r6, #20
 8014e4c:	f8c0 e014 	str.w	lr, [r0, #20]
 8014e50:	4366      	muls	r6, r4
 8014e52:	eb02 0806 	add.w	r8, r2, r6
 8014e56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014e5a:	f115 040f 	adds.w	r4, r5, #15
 8014e5e:	f100 809f 	bmi.w	8014fa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8014e62:	1124      	asrs	r4, r4, #4
 8014e64:	eba4 040e 	sub.w	r4, r4, lr
 8014e68:	6184      	str	r4, [r0, #24]
 8014e6a:	2c00      	cmp	r4, #0
 8014e6c:	f000 808a 	beq.w	8014f84 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8014e70:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8014e74:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014e78:	5995      	ldr	r5, [r2, r6]
 8014e7a:	eba4 0809 	sub.w	r8, r4, r9
 8014e7e:	59d4      	ldr	r4, [r2, r7]
 8014e80:	eba5 0a04 	sub.w	sl, r5, r4
 8014e84:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014e88:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014e8c:	fb0e fe05 	mul.w	lr, lr, r5
 8014e90:	fb0a ee19 	mls	lr, sl, r9, lr
 8014e94:	fb08 e404 	mla	r4, r8, r4, lr
 8014e98:	3c01      	subs	r4, #1
 8014e9a:	19a4      	adds	r4, r4, r6
 8014e9c:	f100 808c 	bmi.w	8014fb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8014ea0:	fb94 fef6 	sdiv	lr, r4, r6
 8014ea4:	fb06 441e 	mls	r4, r6, lr, r4
 8014ea8:	f8c0 e000 	str.w	lr, [r0]
 8014eac:	6104      	str	r4, [r0, #16]
 8014eae:	2d00      	cmp	r5, #0
 8014eb0:	f2c0 8095 	blt.w	8014fde <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8014eb4:	fb95 f4f6 	sdiv	r4, r5, r6
 8014eb8:	fb06 5514 	mls	r5, r6, r4, r5
 8014ebc:	6044      	str	r4, [r0, #4]
 8014ebe:	6085      	str	r5, [r0, #8]
 8014ec0:	60c6      	str	r6, [r0, #12]
 8014ec2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014ec6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014eca:	6945      	ldr	r5, [r0, #20]
 8014ecc:	59d2      	ldr	r2, [r2, r7]
 8014ece:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8014ed2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8015000 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8014ed6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014eda:	ee07 4a10 	vmov	s14, r4
 8014ede:	6804      	ldr	r4, [r0, #0]
 8014ee0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8014ee4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ee8:	ee07 2a90 	vmov	s15, r2
 8014eec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014ef8:	edd3 6a00 	vldr	s13, [r3]
 8014efc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014f00:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8014f04:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014f08:	edc0 6a07 	vstr	s13, [r0, #28]
 8014f0c:	edd0 6a01 	vldr	s13, [r0, #4]
 8014f10:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8014f14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014f18:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014f1c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014f20:	ed80 6a08 	vstr	s12, [r0, #32]
 8014f24:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8014f26:	6242      	str	r2, [r0, #36]	; 0x24
 8014f28:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8014f2c:	ed93 6a03 	vldr	s12, [r3, #12]
 8014f30:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014f34:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014f38:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014f3c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8014f40:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014f44:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8014f48:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014f4c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8014f50:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014f52:	6302      	str	r2, [r0, #48]	; 0x30
 8014f54:	ed93 6a06 	vldr	s12, [r3, #24]
 8014f58:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8014f5c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014f60:	eeb0 7a46 	vmov.f32	s14, s12
 8014f64:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8014f68:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014f6c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014f70:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8014f74:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8014f78:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014f7c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8014f80:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014f82:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f88:	2410      	movs	r4, #16
 8014f8a:	f1c5 0501 	rsb	r5, r5, #1
 8014f8e:	fb9e fef4 	sdiv	lr, lr, r4
 8014f92:	f015 050f 	ands.w	r5, r5, #15
 8014f96:	bf18      	it	ne
 8014f98:	2501      	movne	r5, #1
 8014f9a:	ebae 0e05 	sub.w	lr, lr, r5
 8014f9e:	e753      	b.n	8014e48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8014fa0:	f04f 0910 	mov.w	r9, #16
 8014fa4:	f1c5 0501 	rsb	r5, r5, #1
 8014fa8:	fb94 f4f9 	sdiv	r4, r4, r9
 8014fac:	f015 050f 	ands.w	r5, r5, #15
 8014fb0:	bf18      	it	ne
 8014fb2:	2501      	movne	r5, #1
 8014fb4:	1b64      	subs	r4, r4, r5
 8014fb6:	e755      	b.n	8014e64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8014fb8:	4264      	negs	r4, r4
 8014fba:	fb94 fef6 	sdiv	lr, r4, r6
 8014fbe:	f1ce 0800 	rsb	r8, lr, #0
 8014fc2:	fb06 441e 	mls	r4, r6, lr, r4
 8014fc6:	f8c0 8000 	str.w	r8, [r0]
 8014fca:	6104      	str	r4, [r0, #16]
 8014fcc:	2c00      	cmp	r4, #0
 8014fce:	f43f af6e 	beq.w	8014eae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8014fd2:	ea6f 0e0e 	mvn.w	lr, lr
 8014fd6:	1b34      	subs	r4, r6, r4
 8014fd8:	f8c0 e000 	str.w	lr, [r0]
 8014fdc:	e766      	b.n	8014eac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8014fde:	426d      	negs	r5, r5
 8014fe0:	fb95 f4f6 	sdiv	r4, r5, r6
 8014fe4:	f1c4 0e00 	rsb	lr, r4, #0
 8014fe8:	fb06 5514 	mls	r5, r6, r4, r5
 8014fec:	f8c0 e004 	str.w	lr, [r0, #4]
 8014ff0:	6085      	str	r5, [r0, #8]
 8014ff2:	2d00      	cmp	r5, #0
 8014ff4:	f43f af64 	beq.w	8014ec0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8014ff8:	43e4      	mvns	r4, r4
 8014ffa:	1b75      	subs	r5, r6, r5
 8014ffc:	6044      	str	r4, [r0, #4]
 8014ffe:	e75e      	b.n	8014ebe <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015000:	3d800000 	.word	0x3d800000

08015004 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8015004:	4602      	mov	r2, r0
 8015006:	b148      	cbz	r0, 801501c <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8015008:	2300      	movs	r3, #0
 801500a:	b298      	uxth	r0, r3
 801500c:	3301      	adds	r3, #1
 801500e:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8015012:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8015016:	2900      	cmp	r1, #0
 8015018:	d1f7      	bne.n	801500a <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801501a:	4770      	bx	lr
 801501c:	4770      	bx	lr

0801501e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801501e:	b530      	push	{r4, r5, lr}
 8015020:	4604      	mov	r4, r0
 8015022:	b159      	cbz	r1, 801503c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8015024:	b148      	cbz	r0, 801503a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8015026:	2300      	movs	r3, #0
 8015028:	b298      	uxth	r0, r3
 801502a:	4282      	cmp	r2, r0
 801502c:	d905      	bls.n	801503a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801502e:	5ccd      	ldrb	r5, [r1, r3]
 8015030:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8015034:	3301      	adds	r3, #1
 8015036:	2d00      	cmp	r5, #0
 8015038:	d1f6      	bne.n	8015028 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801503a:	bd30      	pop	{r4, r5, pc}
 801503c:	4608      	mov	r0, r1
 801503e:	e7fc      	b.n	801503a <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08015040 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8015040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015042:	468c      	mov	ip, r1
 8015044:	b08b      	sub	sp, #44	; 0x2c
 8015046:	2100      	movs	r1, #0
 8015048:	ae01      	add	r6, sp, #4
 801504a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801504e:	211f      	movs	r1, #31
 8015050:	fbb0 f7f3 	udiv	r7, r0, r3
 8015054:	fb03 0517 	mls	r5, r3, r7, r0
 8015058:	4638      	mov	r0, r7
 801505a:	b2ec      	uxtb	r4, r5
 801505c:	2d09      	cmp	r5, #9
 801505e:	bfd4      	ite	le
 8015060:	3430      	addle	r4, #48	; 0x30
 8015062:	3457      	addgt	r4, #87	; 0x57
 8015064:	b2e4      	uxtb	r4, r4
 8015066:	558c      	strb	r4, [r1, r6]
 8015068:	1e4c      	subs	r4, r1, #1
 801506a:	b92f      	cbnz	r7, 8015078 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801506c:	4431      	add	r1, r6
 801506e:	4660      	mov	r0, ip
 8015070:	f7ff ffd5 	bl	801501e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8015074:	b00b      	add	sp, #44	; 0x2c
 8015076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015078:	4621      	mov	r1, r4
 801507a:	e7e9      	b.n	8015050 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801507c <_ZN8touchgfx7Unicode4itoaElPtti>:
 801507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801507e:	4607      	mov	r7, r0
 8015080:	b08b      	sub	sp, #44	; 0x2c
 8015082:	4608      	mov	r0, r1
 8015084:	b341      	cbz	r1, 80150d8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8015086:	1e99      	subs	r1, r3, #2
 8015088:	2922      	cmp	r1, #34	; 0x22
 801508a:	d825      	bhi.n	80150d8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801508c:	2100      	movs	r1, #0
 801508e:	463c      	mov	r4, r7
 8015090:	261f      	movs	r6, #31
 8015092:	f10d 0c04 	add.w	ip, sp, #4
 8015096:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801509a:	1e71      	subs	r1, r6, #1
 801509c:	fb94 fef3 	sdiv	lr, r4, r3
 80150a0:	fb03 441e 	mls	r4, r3, lr, r4
 80150a4:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 80150a8:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 80150ac:	b2ec      	uxtb	r4, r5
 80150ae:	2d09      	cmp	r5, #9
 80150b0:	bfd4      	ite	le
 80150b2:	3430      	addle	r4, #48	; 0x30
 80150b4:	3457      	addgt	r4, #87	; 0x57
 80150b6:	b2e4      	uxtb	r4, r4
 80150b8:	f80c 4006 	strb.w	r4, [ip, r6]
 80150bc:	4674      	mov	r4, lr
 80150be:	b96c      	cbnz	r4, 80150dc <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 80150c0:	2f00      	cmp	r7, #0
 80150c2:	da05      	bge.n	80150d0 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 80150c4:	ab0a      	add	r3, sp, #40	; 0x28
 80150c6:	4419      	add	r1, r3
 80150c8:	232d      	movs	r3, #45	; 0x2d
 80150ca:	f801 3c24 	strb.w	r3, [r1, #-36]
 80150ce:	1eb1      	subs	r1, r6, #2
 80150d0:	3101      	adds	r1, #1
 80150d2:	4461      	add	r1, ip
 80150d4:	f7ff ffa3 	bl	801501e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80150d8:	b00b      	add	sp, #44	; 0x2c
 80150da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150dc:	460e      	mov	r6, r1
 80150de:	e7dc      	b.n	801509a <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

080150e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 80150e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	b085      	sub	sp, #20
 80150e6:	4691      	mov	r9, r2
 80150e8:	6802      	ldr	r2, [r0, #0]
 80150ea:	4688      	mov	r8, r1
 80150ec:	461c      	mov	r4, r3
 80150ee:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 80150f2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80150f6:	4683      	mov	fp, r0
 80150f8:	4610      	mov	r0, r2
 80150fa:	9103      	str	r1, [sp, #12]
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	9201      	str	r2, [sp, #4]
 8015100:	f7ff ff80 	bl	8015004 <_ZN8touchgfx7Unicode6strlenEPKt>
 8015104:	f1b8 0f00 	cmp.w	r8, #0
 8015108:	bf0c      	ite	eq
 801510a:	4684      	moveq	ip, r0
 801510c:	f100 0c01 	addne.w	ip, r0, #1
 8015110:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8015114:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8015118:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801511a:	fa1f fc8c 	uxth.w	ip, ip
 801511e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015120:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8015124:	9903      	ldr	r1, [sp, #12]
 8015126:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801512a:	d041      	beq.n	80151b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801512c:	d834      	bhi.n	8015198 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801512e:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8015132:	d059      	beq.n	80151e8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8015134:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8015138:	d03a      	beq.n	80151b0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801513a:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801513e:	d034      	beq.n	80151aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8015140:	2400      	movs	r4, #0
 8015142:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8015146:	3a01      	subs	r2, #1
 8015148:	b169      	cbz	r1, 8015166 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801514a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801514c:	458c      	cmp	ip, r1
 801514e:	da09      	bge.n	8015164 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8015150:	eba1 010c 	sub.w	r1, r1, ip
 8015154:	b289      	uxth	r1, r1
 8015156:	b933      	cbnz	r3, 8015166 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015158:	2e00      	cmp	r6, #0
 801515a:	d051      	beq.n	8015200 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801515c:	2800      	cmp	r0, #0
 801515e:	d04f      	beq.n	8015200 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8015160:	440c      	add	r4, r1
 8015162:	b2a4      	uxth	r4, r4
 8015164:	2100      	movs	r1, #0
 8015166:	682b      	ldr	r3, [r5, #0]
 8015168:	4293      	cmp	r3, r2
 801516a:	da07      	bge.n	801517c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801516c:	f1b8 0f00 	cmp.w	r8, #0
 8015170:	d004      	beq.n	801517c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8015172:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8015176:	682b      	ldr	r3, [r5, #0]
 8015178:	3301      	adds	r3, #1
 801517a:	602b      	str	r3, [r5, #0]
 801517c:	2730      	movs	r7, #48	; 0x30
 801517e:	2c00      	cmp	r4, #0
 8015180:	d04e      	beq.n	8015220 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015182:	682e      	ldr	r6, [r5, #0]
 8015184:	3c01      	subs	r4, #1
 8015186:	42b2      	cmp	r2, r6
 8015188:	b2a4      	uxth	r4, r4
 801518a:	dd49      	ble.n	8015220 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801518c:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8015190:	682b      	ldr	r3, [r5, #0]
 8015192:	3301      	adds	r3, #1
 8015194:	602b      	str	r3, [r5, #0]
 8015196:	e7f2      	b.n	801517e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8015198:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801519c:	d01d      	beq.n	80151da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801519e:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 80151a2:	d002      	beq.n	80151aa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 80151a4:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 80151a8:	e7c9      	b.n	801513e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 80151aa:	4684      	mov	ip, r0
 80151ac:	f04f 0800 	mov.w	r8, #0
 80151b0:	2c00      	cmp	r4, #0
 80151b2:	d0c6      	beq.n	8015142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80151b4:	b947      	cbnz	r7, 80151c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80151b6:	2801      	cmp	r0, #1
 80151b8:	d106      	bne.n	80151c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 80151ba:	8814      	ldrh	r4, [r2, #0]
 80151bc:	2c30      	cmp	r4, #48	; 0x30
 80151be:	bf02      	ittt	eq
 80151c0:	3202      	addeq	r2, #2
 80151c2:	4638      	moveq	r0, r7
 80151c4:	f8cb 2000 	streq.w	r2, [fp]
 80151c8:	45bc      	cmp	ip, r7
 80151ca:	da14      	bge.n	80151f6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 80151cc:	b2bf      	uxth	r7, r7
 80151ce:	eba7 040c 	sub.w	r4, r7, ip
 80151d2:	46bc      	mov	ip, r7
 80151d4:	b2a4      	uxth	r4, r4
 80151d6:	2600      	movs	r6, #0
 80151d8:	e7b3      	b.n	8015142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80151da:	4684      	mov	ip, r0
 80151dc:	b16c      	cbz	r4, 80151fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 80151de:	42b8      	cmp	r0, r7
 80151e0:	dd00      	ble.n	80151e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 80151e2:	b2b8      	uxth	r0, r7
 80151e4:	2400      	movs	r4, #0
 80151e6:	e003      	b.n	80151f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 80151e8:	f04f 0c01 	mov.w	ip, #1
 80151ec:	2400      	movs	r4, #0
 80151ee:	4660      	mov	r0, ip
 80151f0:	4626      	mov	r6, r4
 80151f2:	46a0      	mov	r8, r4
 80151f4:	e7a5      	b.n	8015142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 80151f6:	2400      	movs	r4, #0
 80151f8:	e7ed      	b.n	80151d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 80151fa:	4626      	mov	r6, r4
 80151fc:	46a0      	mov	r8, r4
 80151fe:	e7a0      	b.n	8015142 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8015200:	2900      	cmp	r1, #0
 8015202:	d0b0      	beq.n	8015166 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8015204:	2720      	movs	r7, #32
 8015206:	682e      	ldr	r6, [r5, #0]
 8015208:	2900      	cmp	r1, #0
 801520a:	d0ac      	beq.n	8015166 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801520c:	3901      	subs	r1, #1
 801520e:	4296      	cmp	r6, r2
 8015210:	b289      	uxth	r1, r1
 8015212:	daa7      	bge.n	8015164 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8015214:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8015218:	682b      	ldr	r3, [r5, #0]
 801521a:	3301      	adds	r3, #1
 801521c:	602b      	str	r3, [r5, #0]
 801521e:	e7f2      	b.n	8015206 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8015220:	b188      	cbz	r0, 8015246 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8015222:	682b      	ldr	r3, [r5, #0]
 8015224:	3801      	subs	r0, #1
 8015226:	429a      	cmp	r2, r3
 8015228:	b280      	uxth	r0, r0
 801522a:	dd0c      	ble.n	8015246 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801522c:	f8db 3000 	ldr.w	r3, [fp]
 8015230:	1c9c      	adds	r4, r3, #2
 8015232:	f8cb 4000 	str.w	r4, [fp]
 8015236:	881c      	ldrh	r4, [r3, #0]
 8015238:	682b      	ldr	r3, [r5, #0]
 801523a:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801523e:	682b      	ldr	r3, [r5, #0]
 8015240:	3301      	adds	r3, #1
 8015242:	602b      	str	r3, [r5, #0]
 8015244:	e7ec      	b.n	8015220 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8015246:	2620      	movs	r6, #32
 8015248:	b151      	cbz	r1, 8015260 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801524a:	6828      	ldr	r0, [r5, #0]
 801524c:	3901      	subs	r1, #1
 801524e:	4282      	cmp	r2, r0
 8015250:	b289      	uxth	r1, r1
 8015252:	dd05      	ble.n	8015260 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8015254:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8015258:	682b      	ldr	r3, [r5, #0]
 801525a:	3301      	adds	r3, #1
 801525c:	602b      	str	r3, [r5, #0]
 801525e:	e7f3      	b.n	8015248 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8015260:	b005      	add	sp, #20
 8015262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8015266:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801526a:	2400      	movs	r4, #0
 801526c:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8015270:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8015274:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8015278:	8014      	strh	r4, [r2, #0]
 801527a:	701c      	strb	r4, [r3, #0]
 801527c:	f888 4000 	strb.w	r4, [r8]
 8015280:	f88c 4000 	strb.w	r4, [ip]
 8015284:	f88e 4000 	strb.w	r4, [lr]
 8015288:	703c      	strb	r4, [r7, #0]
 801528a:	6804      	ldr	r4, [r0, #0]
 801528c:	b1a4      	cbz	r4, 80152b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801528e:	8824      	ldrh	r4, [r4, #0]
 8015290:	f04f 0901 	mov.w	r9, #1
 8015294:	b314      	cbz	r4, 80152dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8015296:	2c2b      	cmp	r4, #43	; 0x2b
 8015298:	d001      	beq.n	801529e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801529a:	2c20      	cmp	r4, #32
 801529c:	d110      	bne.n	80152c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801529e:	8014      	strh	r4, [r2, #0]
 80152a0:	6804      	ldr	r4, [r0, #0]
 80152a2:	b10c      	cbz	r4, 80152a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 80152a4:	3402      	adds	r4, #2
 80152a6:	6004      	str	r4, [r0, #0]
 80152a8:	680c      	ldr	r4, [r1, #0]
 80152aa:	b10c      	cbz	r4, 80152b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 80152ac:	3401      	adds	r4, #1
 80152ae:	600c      	str	r4, [r1, #0]
 80152b0:	6804      	ldr	r4, [r0, #0]
 80152b2:	b17c      	cbz	r4, 80152d4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 80152b4:	8824      	ldrh	r4, [r4, #0]
 80152b6:	e7ed      	b.n	8015294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80152b8:	680c      	ldr	r4, [r1, #0]
 80152ba:	b17c      	cbz	r4, 80152dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80152bc:	7824      	ldrb	r4, [r4, #0]
 80152be:	e7e7      	b.n	8015290 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 80152c0:	2c2d      	cmp	r4, #45	; 0x2d
 80152c2:	d102      	bne.n	80152ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80152c4:	f883 9000 	strb.w	r9, [r3]
 80152c8:	e7ea      	b.n	80152a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80152ca:	2c23      	cmp	r4, #35	; 0x23
 80152cc:	d107      	bne.n	80152de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80152ce:	f888 9000 	strb.w	r9, [r8]
 80152d2:	e7e5      	b.n	80152a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80152d4:	680c      	ldr	r4, [r1, #0]
 80152d6:	b10c      	cbz	r4, 80152dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80152d8:	7824      	ldrb	r4, [r4, #0]
 80152da:	e7db      	b.n	8015294 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80152dc:	2400      	movs	r4, #0
 80152de:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80152e2:	2b09      	cmp	r3, #9
 80152e4:	d901      	bls.n	80152ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80152e6:	2c2a      	cmp	r4, #42	; 0x2a
 80152e8:	d122      	bne.n	8015330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80152ea:	2301      	movs	r3, #1
 80152ec:	2c30      	cmp	r4, #48	; 0x30
 80152ee:	f88e 3000 	strb.w	r3, [lr]
 80152f2:	d10d      	bne.n	8015310 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80152f4:	f88c 3000 	strb.w	r3, [ip]
 80152f8:	6803      	ldr	r3, [r0, #0]
 80152fa:	b10b      	cbz	r3, 8015300 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80152fc:	3302      	adds	r3, #2
 80152fe:	6003      	str	r3, [r0, #0]
 8015300:	680b      	ldr	r3, [r1, #0]
 8015302:	b10b      	cbz	r3, 8015308 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8015304:	3301      	adds	r3, #1
 8015306:	600b      	str	r3, [r1, #0]
 8015308:	6803      	ldr	r3, [r0, #0]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d02f      	beq.n	801536e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801530e:	881c      	ldrh	r4, [r3, #0]
 8015310:	2c2a      	cmp	r4, #42	; 0x2a
 8015312:	d135      	bne.n	8015380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8015314:	f04f 33ff 	mov.w	r3, #4294967295
 8015318:	6033      	str	r3, [r6, #0]
 801531a:	6803      	ldr	r3, [r0, #0]
 801531c:	b10b      	cbz	r3, 8015322 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801531e:	3302      	adds	r3, #2
 8015320:	6003      	str	r3, [r0, #0]
 8015322:	680b      	ldr	r3, [r1, #0]
 8015324:	b10b      	cbz	r3, 801532a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8015326:	3301      	adds	r3, #1
 8015328:	600b      	str	r3, [r1, #0]
 801532a:	6803      	ldr	r3, [r0, #0]
 801532c:	b31b      	cbz	r3, 8015376 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801532e:	881c      	ldrh	r4, [r3, #0]
 8015330:	2c2e      	cmp	r4, #46	; 0x2e
 8015332:	d11a      	bne.n	801536a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015334:	2301      	movs	r3, #1
 8015336:	703b      	strb	r3, [r7, #0]
 8015338:	6803      	ldr	r3, [r0, #0]
 801533a:	b10b      	cbz	r3, 8015340 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801533c:	3302      	adds	r3, #2
 801533e:	6003      	str	r3, [r0, #0]
 8015340:	680b      	ldr	r3, [r1, #0]
 8015342:	b10b      	cbz	r3, 8015348 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8015344:	3301      	adds	r3, #1
 8015346:	600b      	str	r3, [r1, #0]
 8015348:	6803      	ldr	r3, [r0, #0]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d036      	beq.n	80153bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801534e:	881b      	ldrh	r3, [r3, #0]
 8015350:	2b2a      	cmp	r3, #42	; 0x2a
 8015352:	d137      	bne.n	80153c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8015354:	f04f 33ff 	mov.w	r3, #4294967295
 8015358:	602b      	str	r3, [r5, #0]
 801535a:	6803      	ldr	r3, [r0, #0]
 801535c:	b10b      	cbz	r3, 8015362 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801535e:	3302      	adds	r3, #2
 8015360:	6003      	str	r3, [r0, #0]
 8015362:	680b      	ldr	r3, [r1, #0]
 8015364:	b10b      	cbz	r3, 801536a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8015366:	3301      	adds	r3, #1
 8015368:	600b      	str	r3, [r1, #0]
 801536a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801536e:	680c      	ldr	r4, [r1, #0]
 8015370:	b134      	cbz	r4, 8015380 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8015372:	7824      	ldrb	r4, [r4, #0]
 8015374:	e7cc      	b.n	8015310 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8015376:	680b      	ldr	r3, [r1, #0]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d0f6      	beq.n	801536a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801537c:	781c      	ldrb	r4, [r3, #0]
 801537e:	e7d7      	b.n	8015330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8015380:	2300      	movs	r3, #0
 8015382:	220a      	movs	r2, #10
 8015384:	6033      	str	r3, [r6, #0]
 8015386:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801538a:	fa1f f38c 	uxth.w	r3, ip
 801538e:	2b09      	cmp	r3, #9
 8015390:	d8ce      	bhi.n	8015330 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8015392:	6833      	ldr	r3, [r6, #0]
 8015394:	fb02 c303 	mla	r3, r2, r3, ip
 8015398:	6033      	str	r3, [r6, #0]
 801539a:	6803      	ldr	r3, [r0, #0]
 801539c:	b10b      	cbz	r3, 80153a2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801539e:	3302      	adds	r3, #2
 80153a0:	6003      	str	r3, [r0, #0]
 80153a2:	680b      	ldr	r3, [r1, #0]
 80153a4:	b10b      	cbz	r3, 80153aa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 80153a6:	3301      	adds	r3, #1
 80153a8:	600b      	str	r3, [r1, #0]
 80153aa:	6803      	ldr	r3, [r0, #0]
 80153ac:	b10b      	cbz	r3, 80153b2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 80153ae:	881c      	ldrh	r4, [r3, #0]
 80153b0:	e7e9      	b.n	8015386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80153b2:	680c      	ldr	r4, [r1, #0]
 80153b4:	2c00      	cmp	r4, #0
 80153b6:	d0e6      	beq.n	8015386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80153b8:	7824      	ldrb	r4, [r4, #0]
 80153ba:	e7e4      	b.n	8015386 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 80153bc:	680b      	ldr	r3, [r1, #0]
 80153be:	b10b      	cbz	r3, 80153c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	e7c5      	b.n	8015350 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80153c4:	2200      	movs	r2, #0
 80153c6:	240a      	movs	r4, #10
 80153c8:	602a      	str	r2, [r5, #0]
 80153ca:	3b30      	subs	r3, #48	; 0x30
 80153cc:	682a      	ldr	r2, [r5, #0]
 80153ce:	b29e      	uxth	r6, r3
 80153d0:	2e09      	cmp	r6, #9
 80153d2:	d813      	bhi.n	80153fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80153d4:	fb04 3302 	mla	r3, r4, r2, r3
 80153d8:	602b      	str	r3, [r5, #0]
 80153da:	6803      	ldr	r3, [r0, #0]
 80153dc:	b10b      	cbz	r3, 80153e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80153de:	3302      	adds	r3, #2
 80153e0:	6003      	str	r3, [r0, #0]
 80153e2:	680b      	ldr	r3, [r1, #0]
 80153e4:	b10b      	cbz	r3, 80153ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80153e6:	3301      	adds	r3, #1
 80153e8:	600b      	str	r3, [r1, #0]
 80153ea:	6803      	ldr	r3, [r0, #0]
 80153ec:	b10b      	cbz	r3, 80153f2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80153ee:	881b      	ldrh	r3, [r3, #0]
 80153f0:	e7eb      	b.n	80153ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80153f2:	680b      	ldr	r3, [r1, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d0e8      	beq.n	80153ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	e7e6      	b.n	80153ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80153fc:	2a06      	cmp	r2, #6
 80153fe:	bfa8      	it	ge
 8015400:	2206      	movge	r2, #6
 8015402:	602a      	str	r2, [r5, #0]
 8015404:	e7b1      	b.n	801536a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08015406 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8015406:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801540a:	b0a3      	sub	sp, #140	; 0x8c
 801540c:	2600      	movs	r6, #0
 801540e:	4607      	mov	r7, r0
 8015410:	4688      	mov	r8, r1
 8015412:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015416:	4631      	mov	r1, r6
 8015418:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801541a:	4648      	mov	r0, r9
 801541c:	960d      	str	r6, [sp, #52]	; 0x34
 801541e:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8015422:	2242      	movs	r2, #66	; 0x42
 8015424:	f009 ff6a 	bl	801f2fc <memset>
 8015428:	b15f      	cbz	r7, 8015442 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801542a:	f108 3aff 	add.w	sl, r8, #4294967295
 801542e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015430:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015432:	b152      	cbz	r2, 801544a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8015434:	8812      	ldrh	r2, [r2, #0]
 8015436:	b10a      	cbz	r2, 801543c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8015438:	459a      	cmp	sl, r3
 801543a:	dc2e      	bgt.n	801549a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801543c:	2200      	movs	r2, #0
 801543e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8015442:	4638      	mov	r0, r7
 8015444:	b023      	add	sp, #140	; 0x8c
 8015446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801544a:	9a08      	ldr	r2, [sp, #32]
 801544c:	2a00      	cmp	r2, #0
 801544e:	d0f5      	beq.n	801543c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8015450:	7812      	ldrb	r2, [r2, #0]
 8015452:	e7f0      	b.n	8015436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8015454:	2d00      	cmp	r5, #0
 8015456:	d0ea      	beq.n	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015458:	782a      	ldrb	r2, [r5, #0]
 801545a:	b142      	cbz	r2, 801546e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801545c:	2a25      	cmp	r2, #37	; 0x25
 801545e:	d001      	beq.n	8015464 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8015460:	459a      	cmp	sl, r3
 8015462:	dc08      	bgt.n	8015476 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8015464:	f1bb 0f00 	cmp.w	fp, #0
 8015468:	d121      	bne.n	80154ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801546a:	2d00      	cmp	r5, #0
 801546c:	d0df      	beq.n	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801546e:	782a      	ldrb	r2, [r5, #0]
 8015470:	f04f 0b00 	mov.w	fp, #0
 8015474:	e01d      	b.n	80154b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8015476:	f1bb 0f00 	cmp.w	fp, #0
 801547a:	d077      	beq.n	801556c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801547c:	f8bb 2000 	ldrh.w	r2, [fp]
 8015480:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8015484:	f1bb 0f00 	cmp.w	fp, #0
 8015488:	d002      	beq.n	8015490 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801548a:	f10b 0202 	add.w	r2, fp, #2
 801548e:	9209      	str	r2, [sp, #36]	; 0x24
 8015490:	b10d      	cbz	r5, 8015496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8015492:	3501      	adds	r5, #1
 8015494:	9508      	str	r5, [sp, #32]
 8015496:	3301      	adds	r3, #1
 8015498:	930d      	str	r3, [sp, #52]	; 0x34
 801549a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801549c:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 80154a0:	f1bb 0f00 	cmp.w	fp, #0
 80154a4:	d0d6      	beq.n	8015454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 80154a6:	f8bb 2000 	ldrh.w	r2, [fp]
 80154aa:	2a00      	cmp	r2, #0
 80154ac:	d1d6      	bne.n	801545c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 80154ae:	f8bb 2000 	ldrh.w	r2, [fp]
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	d0bb      	beq.n	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80154b6:	459a      	cmp	sl, r3
 80154b8:	ddb9      	ble.n	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80154ba:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 80154be:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80154c2:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 80154c6:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 80154ca:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 80154ce:	960e      	str	r6, [sp, #56]	; 0x38
 80154d0:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 80154d4:	960f      	str	r6, [sp, #60]	; 0x3c
 80154d6:	f1bb 0f00 	cmp.w	fp, #0
 80154da:	d002      	beq.n	80154e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80154dc:	f10b 0302 	add.w	r3, fp, #2
 80154e0:	9309      	str	r3, [sp, #36]	; 0x24
 80154e2:	b10d      	cbz	r5, 80154e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80154e4:	1c6b      	adds	r3, r5, #1
 80154e6:	9308      	str	r3, [sp, #32]
 80154e8:	ab0f      	add	r3, sp, #60	; 0x3c
 80154ea:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80154ee:	a908      	add	r1, sp, #32
 80154f0:	a809      	add	r0, sp, #36	; 0x24
 80154f2:	9305      	str	r3, [sp, #20]
 80154f4:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 80154f8:	9304      	str	r3, [sp, #16]
 80154fa:	ab0e      	add	r3, sp, #56	; 0x38
 80154fc:	9303      	str	r3, [sp, #12]
 80154fe:	ab0c      	add	r3, sp, #48	; 0x30
 8015500:	9302      	str	r3, [sp, #8]
 8015502:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8015506:	9301      	str	r3, [sp, #4]
 8015508:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801550c:	9300      	str	r3, [sp, #0]
 801550e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8015512:	f7ff fea8 	bl	8015266 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8015516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015518:	2b00      	cmp	r3, #0
 801551a:	bfbf      	itttt	lt
 801551c:	6823      	ldrlt	r3, [r4, #0]
 801551e:	3404      	addlt	r4, #4
 8015520:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8015524:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015528:	2b00      	cmp	r3, #0
 801552a:	bfbe      	ittt	lt
 801552c:	6823      	ldrlt	r3, [r4, #0]
 801552e:	3404      	addlt	r4, #4
 8015530:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8015534:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8015538:	bfb8      	it	lt
 801553a:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801553c:	b1d9      	cbz	r1, 8015576 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801553e:	880b      	ldrh	r3, [r1, #0]
 8015540:	2b69      	cmp	r3, #105	; 0x69
 8015542:	d01f      	beq.n	8015584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015544:	d82f      	bhi.n	80155a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 8015546:	2b58      	cmp	r3, #88	; 0x58
 8015548:	d01c      	beq.n	8015584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801554a:	d818      	bhi.n	801557e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801554c:	2b25      	cmp	r3, #37	; 0x25
 801554e:	d034      	beq.n	80155ba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 8015550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015552:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8015556:	f1bb 0f00 	cmp.w	fp, #0
 801555a:	f000 80b7 	beq.w	80156cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801555e:	f8bb 5000 	ldrh.w	r5, [fp]
 8015562:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8015566:	3301      	adds	r3, #1
 8015568:	930d      	str	r3, [sp, #52]	; 0x34
 801556a:	e029      	b.n	80155c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801556c:	b10d      	cbz	r5, 8015572 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801556e:	782a      	ldrb	r2, [r5, #0]
 8015570:	e786      	b.n	8015480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8015572:	462a      	mov	r2, r5
 8015574:	e784      	b.n	8015480 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8015576:	2a00      	cmp	r2, #0
 8015578:	d0ea      	beq.n	8015550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801557a:	7813      	ldrb	r3, [r2, #0]
 801557c:	e7e0      	b.n	8015540 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801557e:	3b63      	subs	r3, #99	; 0x63
 8015580:	2b01      	cmp	r3, #1
 8015582:	d8e5      	bhi.n	8015550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015584:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8015588:	b329      	cbz	r1, 80155d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801558a:	880b      	ldrh	r3, [r1, #0]
 801558c:	2b69      	cmp	r3, #105	; 0x69
 801558e:	d063      	beq.n	8015658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8015590:	d825      	bhi.n	80155de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 8015592:	2b63      	cmp	r3, #99	; 0x63
 8015594:	d038      	beq.n	8015608 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8015596:	2b64      	cmp	r3, #100	; 0x64
 8015598:	d05e      	beq.n	8015658 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801559a:	2b58      	cmp	r3, #88	; 0x58
 801559c:	d07a      	beq.n	8015694 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801559e:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 80155a2:	4625      	mov	r5, r4
 80155a4:	e036      	b.n	8015614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80155a6:	2b73      	cmp	r3, #115	; 0x73
 80155a8:	d0ec      	beq.n	8015584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80155aa:	d802      	bhi.n	80155b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 80155ac:	2b6f      	cmp	r3, #111	; 0x6f
 80155ae:	d1cf      	bne.n	8015550 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80155b0:	e7e8      	b.n	8015584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80155b2:	2b75      	cmp	r3, #117	; 0x75
 80155b4:	d0e6      	beq.n	8015584 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80155b6:	2b78      	cmp	r3, #120	; 0x78
 80155b8:	e7f9      	b.n	80155ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 80155ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155bc:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 80155c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155c2:	b10b      	cbz	r3, 80155c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 80155c4:	3302      	adds	r3, #2
 80155c6:	9309      	str	r3, [sp, #36]	; 0x24
 80155c8:	9b08      	ldr	r3, [sp, #32]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	f43f af2f 	beq.w	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80155d0:	3301      	adds	r3, #1
 80155d2:	9308      	str	r3, [sp, #32]
 80155d4:	e72b      	b.n	801542e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	d0e1      	beq.n	801559e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80155da:	7813      	ldrb	r3, [r2, #0]
 80155dc:	e7d6      	b.n	801558c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 80155de:	2b73      	cmp	r3, #115	; 0x73
 80155e0:	d036      	beq.n	8015650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 80155e2:	d807      	bhi.n	80155f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 80155e4:	2b6f      	cmp	r3, #111	; 0x6f
 80155e6:	d1da      	bne.n	801559e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80155e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155ea:	1d25      	adds	r5, r4, #4
 80155ec:	2308      	movs	r3, #8
 80155ee:	eba8 0202 	sub.w	r2, r8, r2
 80155f2:	e049      	b.n	8015688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 80155f4:	2b75      	cmp	r3, #117	; 0x75
 80155f6:	d042      	beq.n	801567e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 80155f8:	2b78      	cmp	r3, #120	; 0x78
 80155fa:	d1d0      	bne.n	801559e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 80155fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155fe:	1d25      	adds	r5, r4, #4
 8015600:	2310      	movs	r3, #16
 8015602:	eba8 0202 	sub.w	r2, r8, r2
 8015606:	e03f      	b.n	8015688 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015608:	6823      	ldr	r3, [r4, #0]
 801560a:	1d25      	adds	r5, r4, #4
 801560c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8015610:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8015614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015616:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801561a:	2b00      	cmp	r3, #0
 801561c:	d051      	beq.n	80156c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801561e:	881a      	ldrh	r2, [r3, #0]
 8015620:	a80d      	add	r0, sp, #52	; 0x34
 8015622:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8015626:	462c      	mov	r4, r5
 8015628:	9005      	str	r0, [sp, #20]
 801562a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801562e:	9004      	str	r0, [sp, #16]
 8015630:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015632:	9003      	str	r0, [sp, #12]
 8015634:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8015638:	9002      	str	r0, [sp, #8]
 801563a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801563c:	9001      	str	r0, [sp, #4]
 801563e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 8015642:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8015646:	9000      	str	r0, [sp, #0]
 8015648:	a810      	add	r0, sp, #64	; 0x40
 801564a:	f7ff fd49 	bl	80150e0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801564e:	e7b7      	b.n	80155c0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 8015650:	1d25      	adds	r5, r4, #4
 8015652:	6823      	ldr	r3, [r4, #0]
 8015654:	9310      	str	r3, [sp, #64]	; 0x40
 8015656:	e7dd      	b.n	8015614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015658:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801565a:	230a      	movs	r3, #10
 801565c:	4649      	mov	r1, r9
 801565e:	6820      	ldr	r0, [r4, #0]
 8015660:	eba8 0202 	sub.w	r2, r8, r2
 8015664:	1d25      	adds	r5, r4, #4
 8015666:	b292      	uxth	r2, r2
 8015668:	f7ff fd08 	bl	801507c <_ZN8touchgfx7Unicode4itoaElPtti>
 801566c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015670:	2b2d      	cmp	r3, #45	; 0x2d
 8015672:	d1cf      	bne.n	8015614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015674:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801567a:	3302      	adds	r3, #2
 801567c:	e7ea      	b.n	8015654 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801567e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015680:	1d25      	adds	r5, r4, #4
 8015682:	230a      	movs	r3, #10
 8015684:	eba8 0202 	sub.w	r2, r8, r2
 8015688:	b292      	uxth	r2, r2
 801568a:	4649      	mov	r1, r9
 801568c:	6820      	ldr	r0, [r4, #0]
 801568e:	f7ff fcd7 	bl	8015040 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8015692:	e7bf      	b.n	8015614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015694:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015696:	2310      	movs	r3, #16
 8015698:	4649      	mov	r1, r9
 801569a:	6820      	ldr	r0, [r4, #0]
 801569c:	eba8 0202 	sub.w	r2, r8, r2
 80156a0:	1d25      	adds	r5, r4, #4
 80156a2:	b292      	uxth	r2, r2
 80156a4:	f7ff fccc 	bl	8015040 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 80156a8:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 80156ac:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d0af      	beq.n	8015614 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80156b4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80156b8:	2919      	cmp	r1, #25
 80156ba:	d8f7      	bhi.n	80156ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80156bc:	3b20      	subs	r3, #32
 80156be:	8013      	strh	r3, [r2, #0]
 80156c0:	e7f4      	b.n	80156ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 80156c2:	9a08      	ldr	r2, [sp, #32]
 80156c4:	2a00      	cmp	r2, #0
 80156c6:	d0ab      	beq.n	8015620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80156c8:	7812      	ldrb	r2, [r2, #0]
 80156ca:	e7a9      	b.n	8015620 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 80156cc:	2d00      	cmp	r5, #0
 80156ce:	f43f af48 	beq.w	8015562 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 80156d2:	782d      	ldrb	r5, [r5, #0]
 80156d4:	e745      	b.n	8015562 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

080156d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80156d6:	b507      	push	{r0, r1, r2, lr}
 80156d8:	9300      	str	r3, [sp, #0]
 80156da:	4613      	mov	r3, r2
 80156dc:	2200      	movs	r2, #0
 80156de:	f7ff fe92 	bl	8015406 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80156e2:	b003      	add	sp, #12
 80156e4:	f85d fb04 	ldr.w	pc, [sp], #4

080156e8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80156e8:	b40c      	push	{r2, r3}
 80156ea:	b507      	push	{r0, r1, r2, lr}
 80156ec:	ab04      	add	r3, sp, #16
 80156ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80156f2:	9301      	str	r3, [sp, #4]
 80156f4:	f7ff ffef 	bl	80156d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80156f8:	b003      	add	sp, #12
 80156fa:	f85d eb04 	ldr.w	lr, [sp], #4
 80156fe:	b002      	add	sp, #8
 8015700:	4770      	bx	lr
	...

08015704 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015704:	4b01      	ldr	r3, [pc, #4]	; (801570c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015706:	6018      	str	r0, [r3, #0]
 8015708:	4770      	bx	lr
 801570a:	bf00      	nop
 801570c:	2400f5f8 	.word	0x2400f5f8

08015710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015710:	4b06      	ldr	r3, [pc, #24]	; (801572c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015712:	881a      	ldrh	r2, [r3, #0]
 8015714:	4282      	cmp	r2, r0
 8015716:	d807      	bhi.n	8015728 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015718:	4b05      	ldr	r3, [pc, #20]	; (8015730 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801571a:	881b      	ldrh	r3, [r3, #0]
 801571c:	4413      	add	r3, r2
 801571e:	4298      	cmp	r0, r3
 8015720:	bfac      	ite	ge
 8015722:	2000      	movge	r0, #0
 8015724:	2001      	movlt	r0, #1
 8015726:	4770      	bx	lr
 8015728:	2000      	movs	r0, #0
 801572a:	4770      	bx	lr
 801572c:	2400f618 	.word	0x2400f618
 8015730:	2400f61c 	.word	0x2400f61c

08015734 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015734:	b508      	push	{r3, lr}
 8015736:	4601      	mov	r1, r0
 8015738:	f7ff ffea 	bl	8015710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801573c:	b118      	cbz	r0, 8015746 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801573e:	4b02      	ldr	r3, [pc, #8]	; (8015748 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015746:	bd08      	pop	{r3, pc}
 8015748:	2400f5fc 	.word	0x2400f5fc

0801574c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801574c:	b538      	push	{r3, r4, r5, lr}
 801574e:	4604      	mov	r4, r0
 8015750:	f7ff ffde 	bl	8015710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015754:	b188      	cbz	r0, 801577a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8015756:	4b09      	ldr	r3, [pc, #36]	; (801577c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8015758:	881a      	ldrh	r2, [r3, #0]
 801575a:	4b09      	ldr	r3, [pc, #36]	; (8015780 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801575c:	1aa4      	subs	r4, r4, r2
 801575e:	220e      	movs	r2, #14
 8015760:	681d      	ldr	r5, [r3, #0]
 8015762:	4362      	muls	r2, r4
 8015764:	18ac      	adds	r4, r5, r2
 8015766:	7b23      	ldrb	r3, [r4, #12]
 8015768:	f013 0320 	ands.w	r3, r3, #32
 801576c:	bf17      	itett	ne
 801576e:	680b      	ldrne	r3, [r1, #0]
 8015770:	4618      	moveq	r0, r3
 8015772:	50ab      	strne	r3, [r5, r2]
 8015774:	684b      	ldrne	r3, [r1, #4]
 8015776:	bf18      	it	ne
 8015778:	6063      	strne	r3, [r4, #4]
 801577a:	bd38      	pop	{r3, r4, r5, pc}
 801577c:	2400f618 	.word	0x2400f618
 8015780:	2400f600 	.word	0x2400f600

08015784 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8015784:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015788:	4606      	mov	r6, r0
 801578a:	460c      	mov	r4, r1
 801578c:	f7ff ffc0 	bl	8015710 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015790:	b918      	cbnz	r0, 801579a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8015792:	2000      	movs	r0, #0
 8015794:	b002      	add	sp, #8
 8015796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801579a:	4608      	mov	r0, r1
 801579c:	f7f7 fe2d 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d1f6      	bne.n	8015792 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80157a4:	4b3f      	ldr	r3, [pc, #252]	; (80158a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80157a6:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80158a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80157aa:	881d      	ldrh	r5, [r3, #0]
 80157ac:	f8d9 a000 	ldr.w	sl, [r9]
 80157b0:	46c8      	mov	r8, r9
 80157b2:	1b73      	subs	r3, r6, r5
 80157b4:	250e      	movs	r5, #14
 80157b6:	435d      	muls	r5, r3
 80157b8:	eb0a 0705 	add.w	r7, sl, r5
 80157bc:	7b3b      	ldrb	r3, [r7, #12]
 80157be:	f013 0f20 	tst.w	r3, #32
 80157c2:	d0e6      	beq.n	8015792 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80157c4:	4621      	mov	r1, r4
 80157c6:	4638      	mov	r0, r7
 80157c8:	f7fc ff40 	bl	801264c <_ZNK8touchgfx4Rect8includesERKS0_>
 80157cc:	2800      	cmp	r0, #0
 80157ce:	d1e1      	bne.n	8015794 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80157d0:	4639      	mov	r1, r7
 80157d2:	4620      	mov	r0, r4
 80157d4:	f7fc ff3a 	bl	801264c <_ZNK8touchgfx4Rect8includesERKS0_>
 80157d8:	b108      	cbz	r0, 80157de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80157da:	4621      	mov	r1, r4
 80157dc:	e020      	b.n	8015820 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80157de:	f9b4 2000 	ldrsh.w	r2, [r4]
 80157e2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d11e      	bne.n	8015828 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80157ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80157ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80157f2:	429a      	cmp	r2, r3
 80157f4:	d118      	bne.n	8015828 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80157f6:	6820      	ldr	r0, [r4, #0]
 80157f8:	466b      	mov	r3, sp
 80157fa:	6861      	ldr	r1, [r4, #4]
 80157fc:	c303      	stmia	r3!, {r0, r1}
 80157fe:	4639      	mov	r1, r7
 8015800:	4668      	mov	r0, sp
 8015802:	f7f9 fb46 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015806:	f8d9 3000 	ldr.w	r3, [r9]
 801580a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801580e:	442b      	add	r3, r5
 8015810:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015814:	4413      	add	r3, r2
 8015816:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801581a:	4293      	cmp	r3, r2
 801581c:	dc04      	bgt.n	8015828 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801581e:	4669      	mov	r1, sp
 8015820:	4630      	mov	r0, r6
 8015822:	f7ff ff93 	bl	801574c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8015826:	e7b5      	b.n	8015794 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015828:	f8d8 3000 	ldr.w	r3, [r8]
 801582c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015830:	442b      	add	r3, r5
 8015832:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015836:	4291      	cmp	r1, r2
 8015838:	d119      	bne.n	801586e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801583a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801583e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015842:	4291      	cmp	r1, r2
 8015844:	d113      	bne.n	801586e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8015846:	6820      	ldr	r0, [r4, #0]
 8015848:	466a      	mov	r2, sp
 801584a:	6861      	ldr	r1, [r4, #4]
 801584c:	c203      	stmia	r2!, {r0, r1}
 801584e:	4619      	mov	r1, r3
 8015850:	4668      	mov	r0, sp
 8015852:	f7f9 fb1e 	bl	800ee92 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015856:	f8d8 3000 	ldr.w	r3, [r8]
 801585a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801585e:	442b      	add	r3, r5
 8015860:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015864:	4413      	add	r3, r2
 8015866:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801586a:	4293      	cmp	r3, r2
 801586c:	ddd7      	ble.n	801581e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801586e:	4620      	mov	r0, r4
 8015870:	f7f7 fdc3 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 8015874:	b990      	cbnz	r0, 801589c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8015876:	88a7      	ldrh	r7, [r4, #4]
 8015878:	88e3      	ldrh	r3, [r4, #6]
 801587a:	fb17 f703 	smulbb	r7, r7, r3
 801587e:	f8d8 3000 	ldr.w	r3, [r8]
 8015882:	441d      	add	r5, r3
 8015884:	4628      	mov	r0, r5
 8015886:	f7f7 fdb8 	bl	800d3fa <_ZNK8touchgfx4Rect7isEmptyEv>
 801588a:	b948      	cbnz	r0, 80158a0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801588c:	88ab      	ldrh	r3, [r5, #4]
 801588e:	88ea      	ldrh	r2, [r5, #6]
 8015890:	fb13 f302 	smulbb	r3, r3, r2
 8015894:	42bb      	cmp	r3, r7
 8015896:	f6bf af7c 	bge.w	8015792 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801589a:	e79e      	b.n	80157da <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801589c:	2700      	movs	r7, #0
 801589e:	e7ee      	b.n	801587e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80158a0:	2300      	movs	r3, #0
 80158a2:	e7f7      	b.n	8015894 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80158a4:	2400f618 	.word	0x2400f618
 80158a8:	2400f600 	.word	0x2400f600

080158ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80158ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158ae:	4c24      	ldr	r4, [pc, #144]	; (8015940 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80158b0:	6823      	ldr	r3, [r4, #0]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d042      	beq.n	801593c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80158b6:	4a23      	ldr	r2, [pc, #140]	; (8015944 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80158b8:	4d23      	ldr	r5, [pc, #140]	; (8015948 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80158ba:	8811      	ldrh	r1, [r2, #0]
 80158bc:	f8b5 c000 	ldrh.w	ip, [r5]
 80158c0:	4822      	ldr	r0, [pc, #136]	; (801594c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80158c2:	4461      	add	r1, ip
 80158c4:	1c4a      	adds	r2, r1, #1
 80158c6:	008f      	lsls	r7, r1, #2
 80158c8:	f022 0201 	bic.w	r2, r2, #1
 80158cc:	19de      	adds	r6, r3, r7
 80158ce:	0412      	lsls	r2, r2, #16
 80158d0:	6006      	str	r6, [r0, #0]
 80158d2:	4e1f      	ldr	r6, [pc, #124]	; (8015950 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80158d4:	0c12      	lsrs	r2, r2, #16
 80158d6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80158da:	19da      	adds	r2, r3, r7
 80158dc:	6032      	str	r2, [r6, #0]
 80158de:	220e      	movs	r2, #14
 80158e0:	fb02 f20c 	mul.w	r2, r2, ip
 80158e4:	3203      	adds	r2, #3
 80158e6:	f022 0203 	bic.w	r2, r2, #3
 80158ea:	443a      	add	r2, r7
 80158ec:	4f19      	ldr	r7, [pc, #100]	; (8015954 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80158ee:	4413      	add	r3, r2
 80158f0:	603b      	str	r3, [r7, #0]
 80158f2:	2300      	movs	r3, #0
 80158f4:	4f18      	ldr	r7, [pc, #96]	; (8015958 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80158f6:	469c      	mov	ip, r3
 80158f8:	803b      	strh	r3, [r7, #0]
 80158fa:	4f18      	ldr	r7, [pc, #96]	; (801595c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80158fc:	683f      	ldr	r7, [r7, #0]
 80158fe:	1aba      	subs	r2, r7, r2
 8015900:	4f17      	ldr	r7, [pc, #92]	; (8015960 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015902:	603a      	str	r2, [r7, #0]
 8015904:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015908:	4a16      	ldr	r2, [pc, #88]	; (8015964 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801590a:	8013      	strh	r3, [r2, #0]
 801590c:	428b      	cmp	r3, r1
 801590e:	d10d      	bne.n	801592c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015910:	882d      	ldrh	r5, [r5, #0]
 8015912:	2300      	movs	r3, #0
 8015914:	6830      	ldr	r0, [r6, #0]
 8015916:	240e      	movs	r4, #14
 8015918:	429d      	cmp	r5, r3
 801591a:	d90f      	bls.n	801593c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801591c:	fb04 0203 	mla	r2, r4, r3, r0
 8015920:	3301      	adds	r3, #1
 8015922:	7b11      	ldrb	r1, [r2, #12]
 8015924:	f36f 1145 	bfc	r1, #5, #1
 8015928:	7311      	strb	r1, [r2, #12]
 801592a:	e7f5      	b.n	8015918 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801592c:	6822      	ldr	r2, [r4, #0]
 801592e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015932:	6802      	ldr	r2, [r0, #0]
 8015934:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015938:	3301      	adds	r3, #1
 801593a:	e7e7      	b.n	801590c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801593e:	bf00      	nop
 8015940:	2400f5fc 	.word	0x2400f5fc
 8015944:	2400f618 	.word	0x2400f618
 8015948:	2400f61c 	.word	0x2400f61c
 801594c:	2400f610 	.word	0x2400f610
 8015950:	2400f600 	.word	0x2400f600
 8015954:	2400f608 	.word	0x2400f608
 8015958:	2400f61a 	.word	0x2400f61a
 801595c:	2400f604 	.word	0x2400f604
 8015960:	2400f614 	.word	0x2400f614
 8015964:	2400f60c 	.word	0x2400f60c

08015968 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015968:	4b06      	ldr	r3, [pc, #24]	; (8015984 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	b943      	cbnz	r3, 8015980 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801596e:	b139      	cbz	r1, 8015980 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015970:	4b05      	ldr	r3, [pc, #20]	; (8015988 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015972:	801a      	strh	r2, [r3, #0]
 8015974:	4b05      	ldr	r3, [pc, #20]	; (801598c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015976:	6019      	str	r1, [r3, #0]
 8015978:	4b05      	ldr	r3, [pc, #20]	; (8015990 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801597a:	6018      	str	r0, [r3, #0]
 801597c:	f7ff bf96 	b.w	80158ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop
 8015984:	2400f608 	.word	0x2400f608
 8015988:	2400f61c 	.word	0x2400f61c
 801598c:	2400f604 	.word	0x2400f604
 8015990:	2400f5fc 	.word	0x2400f5fc

08015994 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015994:	b470      	push	{r4, r5, r6}
 8015996:	4c07      	ldr	r4, [pc, #28]	; (80159b4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015998:	4605      	mov	r5, r0
 801599a:	4610      	mov	r0, r2
 801599c:	9a03      	ldr	r2, [sp, #12]
 801599e:	6826      	ldr	r6, [r4, #0]
 80159a0:	b936      	cbnz	r6, 80159b0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80159a2:	6025      	str	r5, [r4, #0]
 80159a4:	4c04      	ldr	r4, [pc, #16]	; (80159b8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80159a6:	8021      	strh	r1, [r4, #0]
 80159a8:	4619      	mov	r1, r3
 80159aa:	bc70      	pop	{r4, r5, r6}
 80159ac:	f7ff bfdc 	b.w	8015968 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80159b0:	bc70      	pop	{r4, r5, r6}
 80159b2:	4770      	bx	lr
 80159b4:	2400f620 	.word	0x2400f620
 80159b8:	2400f618 	.word	0x2400f618

080159bc <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80159bc:	4a12      	ldr	r2, [pc, #72]	; (8015a08 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80159be:	8803      	ldrh	r3, [r0, #0]
 80159c0:	8812      	ldrh	r2, [r2, #0]
 80159c2:	4293      	cmp	r3, r2
 80159c4:	d207      	bcs.n	80159d6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80159c6:	4a11      	ldr	r2, [pc, #68]	; (8015a0c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80159c8:	2114      	movs	r1, #20
 80159ca:	6812      	ldr	r2, [r2, #0]
 80159cc:	fb01 2303 	mla	r3, r1, r3, r2
 80159d0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80159d4:	4770      	bx	lr
 80159d6:	490e      	ldr	r1, [pc, #56]	; (8015a10 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80159d8:	8809      	ldrh	r1, [r1, #0]
 80159da:	4411      	add	r1, r2
 80159dc:	428b      	cmp	r3, r1
 80159de:	da04      	bge.n	80159ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80159e0:	1a9b      	subs	r3, r3, r2
 80159e2:	4a0c      	ldr	r2, [pc, #48]	; (8015a14 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80159e4:	210e      	movs	r1, #14
 80159e6:	6812      	ldr	r2, [r2, #0]
 80159e8:	e7f0      	b.n	80159cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80159ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d108      	bne.n	8015a04 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80159f2:	4b09      	ldr	r3, [pc, #36]	; (8015a18 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	b91b      	cbnz	r3, 8015a00 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80159f8:	4b08      	ldr	r3, [pc, #32]	; (8015a1c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80159fa:	f9b3 0000 	ldrsh.w	r0, [r3]
 80159fe:	4770      	bx	lr
 8015a00:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015a02:	e7fa      	b.n	80159fa <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015a04:	2000      	movs	r0, #0
 8015a06:	4770      	bx	lr
 8015a08:	2400f618 	.word	0x2400f618
 8015a0c:	2400f620 	.word	0x2400f620
 8015a10:	2400f61c 	.word	0x2400f61c
 8015a14:	2400f600 	.word	0x2400f600
 8015a18:	2400f588 	.word	0x2400f588
 8015a1c:	2400f58a 	.word	0x2400f58a
 8015a20:	2400f58c 	.word	0x2400f58c

08015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015a24:	4a12      	ldr	r2, [pc, #72]	; (8015a70 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015a26:	8803      	ldrh	r3, [r0, #0]
 8015a28:	8812      	ldrh	r2, [r2, #0]
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	d207      	bcs.n	8015a3e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015a2e:	4a11      	ldr	r2, [pc, #68]	; (8015a74 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015a30:	2114      	movs	r1, #20
 8015a32:	6812      	ldr	r2, [r2, #0]
 8015a34:	fb01 2303 	mla	r3, r1, r3, r2
 8015a38:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015a3c:	4770      	bx	lr
 8015a3e:	490e      	ldr	r1, [pc, #56]	; (8015a78 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015a40:	8809      	ldrh	r1, [r1, #0]
 8015a42:	4411      	add	r1, r2
 8015a44:	428b      	cmp	r3, r1
 8015a46:	da04      	bge.n	8015a52 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015a48:	1a9b      	subs	r3, r3, r2
 8015a4a:	4a0c      	ldr	r2, [pc, #48]	; (8015a7c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015a4c:	210e      	movs	r1, #14
 8015a4e:	6812      	ldr	r2, [r2, #0]
 8015a50:	e7f0      	b.n	8015a34 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015a52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015a56:	4293      	cmp	r3, r2
 8015a58:	d108      	bne.n	8015a6c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015a5a:	4b09      	ldr	r3, [pc, #36]	; (8015a80 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	b91b      	cbnz	r3, 8015a68 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015a60:	4b08      	ldr	r3, [pc, #32]	; (8015a84 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015a62:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015a66:	4770      	bx	lr
 8015a68:	4b07      	ldr	r3, [pc, #28]	; (8015a88 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015a6a:	e7fa      	b.n	8015a62 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8015a6c:	2000      	movs	r0, #0
 8015a6e:	4770      	bx	lr
 8015a70:	2400f618 	.word	0x2400f618
 8015a74:	2400f620 	.word	0x2400f620
 8015a78:	2400f61c 	.word	0x2400f61c
 8015a7c:	2400f600 	.word	0x2400f600
 8015a80:	2400f588 	.word	0x2400f588
 8015a84:	2400f58c 	.word	0x2400f58c
 8015a88:	2400f58a 	.word	0x2400f58a

08015a8c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015a8c:	4a1f      	ldr	r2, [pc, #124]	; (8015b0c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8015a8e:	b510      	push	{r4, lr}
 8015a90:	880b      	ldrh	r3, [r1, #0]
 8015a92:	8812      	ldrh	r2, [r2, #0]
 8015a94:	4293      	cmp	r3, r2
 8015a96:	d213      	bcs.n	8015ac0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8015a98:	4a1d      	ldr	r2, [pc, #116]	; (8015b10 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8015a9a:	2114      	movs	r1, #20
 8015a9c:	6812      	ldr	r2, [r2, #0]
 8015a9e:	fb01 2303 	mla	r3, r1, r3, r2
 8015aa2:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8015aa6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8015aaa:	8a1a      	ldrh	r2, [r3, #16]
 8015aac:	8a5b      	ldrh	r3, [r3, #18]
 8015aae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8015ab2:	8004      	strh	r4, [r0, #0]
 8015ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ab8:	8041      	strh	r1, [r0, #2]
 8015aba:	8082      	strh	r2, [r0, #4]
 8015abc:	80c3      	strh	r3, [r0, #6]
 8015abe:	e00e      	b.n	8015ade <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015ac0:	4914      	ldr	r1, [pc, #80]	; (8015b14 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8015ac2:	8809      	ldrh	r1, [r1, #0]
 8015ac4:	4411      	add	r1, r2
 8015ac6:	428b      	cmp	r3, r1
 8015ac8:	da0a      	bge.n	8015ae0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8015aca:	1a9b      	subs	r3, r3, r2
 8015acc:	4a12      	ldr	r2, [pc, #72]	; (8015b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8015ace:	210e      	movs	r1, #14
 8015ad0:	6812      	ldr	r2, [r2, #0]
 8015ad2:	fb01 2303 	mla	r3, r1, r3, r2
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	6002      	str	r2, [r0, #0]
 8015ada:	685a      	ldr	r2, [r3, #4]
 8015adc:	6042      	str	r2, [r0, #4]
 8015ade:	bd10      	pop	{r4, pc}
 8015ae0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	d10b      	bne.n	8015b00 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8015ae8:	4b0c      	ldr	r3, [pc, #48]	; (8015b1c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015aea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015aee:	4b0c      	ldr	r3, [pc, #48]	; (8015b20 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8015af0:	8081      	strh	r1, [r0, #4]
 8015af2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015af6:	2300      	movs	r3, #0
 8015af8:	80c2      	strh	r2, [r0, #6]
 8015afa:	8003      	strh	r3, [r0, #0]
 8015afc:	8043      	strh	r3, [r0, #2]
 8015afe:	e7ee      	b.n	8015ade <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8015b00:	2300      	movs	r3, #0
 8015b02:	8003      	strh	r3, [r0, #0]
 8015b04:	8043      	strh	r3, [r0, #2]
 8015b06:	8083      	strh	r3, [r0, #4]
 8015b08:	e7d8      	b.n	8015abc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015b0a:	bf00      	nop
 8015b0c:	2400f618 	.word	0x2400f618
 8015b10:	2400f620 	.word	0x2400f620
 8015b14:	2400f61c 	.word	0x2400f61c
 8015b18:	2400f600 	.word	0x2400f600
 8015b1c:	2400f584 	.word	0x2400f584
 8015b20:	2400f586 	.word	0x2400f586

08015b24 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015b24:	4a12      	ldr	r2, [pc, #72]	; (8015b70 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015b26:	8803      	ldrh	r3, [r0, #0]
 8015b28:	8811      	ldrh	r1, [r2, #0]
 8015b2a:	428b      	cmp	r3, r1
 8015b2c:	d20b      	bcs.n	8015b46 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8015b2e:	4a11      	ldr	r2, [pc, #68]	; (8015b74 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015b30:	6812      	ldr	r2, [r2, #0]
 8015b32:	b112      	cbz	r2, 8015b3a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8015b34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015b38:	b9c0      	cbnz	r0, 8015b6c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015b3a:	4a0f      	ldr	r2, [pc, #60]	; (8015b78 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015b3c:	6811      	ldr	r1, [r2, #0]
 8015b3e:	2214      	movs	r2, #20
 8015b40:	4353      	muls	r3, r2
 8015b42:	58c8      	ldr	r0, [r1, r3]
 8015b44:	4770      	bx	lr
 8015b46:	4a0d      	ldr	r2, [pc, #52]	; (8015b7c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015b48:	8812      	ldrh	r2, [r2, #0]
 8015b4a:	440a      	add	r2, r1
 8015b4c:	4293      	cmp	r3, r2
 8015b4e:	da04      	bge.n	8015b5a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015b50:	4a08      	ldr	r2, [pc, #32]	; (8015b74 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015b52:	6812      	ldr	r2, [r2, #0]
 8015b54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015b58:	4770      	bx	lr
 8015b5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015b5e:	4293      	cmp	r3, r2
 8015b60:	d103      	bne.n	8015b6a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015b62:	4b07      	ldr	r3, [pc, #28]	; (8015b80 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015b68:	4770      	bx	lr
 8015b6a:	2000      	movs	r0, #0
 8015b6c:	4770      	bx	lr
 8015b6e:	bf00      	nop
 8015b70:	2400f618 	.word	0x2400f618
 8015b74:	2400f5fc 	.word	0x2400f5fc
 8015b78:	2400f620 	.word	0x2400f620
 8015b7c:	2400f61c 	.word	0x2400f61c
 8015b80:	2400f590 	.word	0x2400f590

08015b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015b84:	4b24      	ldr	r3, [pc, #144]	; (8015c18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8015b86:	8802      	ldrh	r2, [r0, #0]
 8015b88:	8818      	ldrh	r0, [r3, #0]
 8015b8a:	4282      	cmp	r2, r0
 8015b8c:	d221      	bcs.n	8015bd2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015b8e:	4b23      	ldr	r3, [pc, #140]	; (8015c1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015b90:	6819      	ldr	r1, [r3, #0]
 8015b92:	2314      	movs	r3, #20
 8015b94:	fb03 1302 	mla	r3, r3, r2, r1
 8015b98:	6858      	ldr	r0, [r3, #4]
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d03a      	beq.n	8015c14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015b9e:	4920      	ldr	r1, [pc, #128]	; (8015c20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015ba0:	6809      	ldr	r1, [r1, #0]
 8015ba2:	2900      	cmp	r1, #0
 8015ba4:	d036      	beq.n	8015c14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015ba6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015baa:	2900      	cmp	r1, #0
 8015bac:	d032      	beq.n	8015c14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015bae:	891a      	ldrh	r2, [r3, #8]
 8015bb0:	8958      	ldrh	r0, [r3, #10]
 8015bb2:	4350      	muls	r0, r2
 8015bb4:	7c5a      	ldrb	r2, [r3, #17]
 8015bb6:	7cdb      	ldrb	r3, [r3, #19]
 8015bb8:	0952      	lsrs	r2, r2, #5
 8015bba:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015bbe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8015bc2:	2b0b      	cmp	r3, #11
 8015bc4:	bf18      	it	ne
 8015bc6:	0040      	lslne	r0, r0, #1
 8015bc8:	3003      	adds	r0, #3
 8015bca:	f020 0003 	bic.w	r0, r0, #3
 8015bce:	4408      	add	r0, r1
 8015bd0:	4770      	bx	lr
 8015bd2:	4b14      	ldr	r3, [pc, #80]	; (8015c24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015bd4:	881b      	ldrh	r3, [r3, #0]
 8015bd6:	4403      	add	r3, r0
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	da1a      	bge.n	8015c12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015bdc:	4b12      	ldr	r3, [pc, #72]	; (8015c28 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015bde:	1a10      	subs	r0, r2, r0
 8015be0:	210e      	movs	r1, #14
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	fb01 3000 	mla	r0, r1, r0, r3
 8015be8:	7b03      	ldrb	r3, [r0, #12]
 8015bea:	f003 031f 	and.w	r3, r3, #31
 8015bee:	2b0b      	cmp	r3, #11
 8015bf0:	d10b      	bne.n	8015c0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8015bf2:	8903      	ldrh	r3, [r0, #8]
 8015bf4:	8940      	ldrh	r0, [r0, #10]
 8015bf6:	4358      	muls	r0, r3
 8015bf8:	4b09      	ldr	r3, [pc, #36]	; (8015c20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015bfa:	3003      	adds	r0, #3
 8015bfc:	6819      	ldr	r1, [r3, #0]
 8015bfe:	f020 0303 	bic.w	r3, r0, #3
 8015c02:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015c06:	4418      	add	r0, r3
 8015c08:	4770      	bx	lr
 8015c0a:	2b0d      	cmp	r3, #13
 8015c0c:	d101      	bne.n	8015c12 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015c0e:	300d      	adds	r0, #13
 8015c10:	4770      	bx	lr
 8015c12:	2000      	movs	r0, #0
 8015c14:	4770      	bx	lr
 8015c16:	bf00      	nop
 8015c18:	2400f618 	.word	0x2400f618
 8015c1c:	2400f620 	.word	0x2400f620
 8015c20:	2400f5fc 	.word	0x2400f5fc
 8015c24:	2400f61c 	.word	0x2400f61c
 8015c28:	2400f600 	.word	0x2400f600

08015c2c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015c2c:	4a17      	ldr	r2, [pc, #92]	; (8015c8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015c2e:	b510      	push	{r4, lr}
 8015c30:	8803      	ldrh	r3, [r0, #0]
 8015c32:	8812      	ldrh	r2, [r2, #0]
 8015c34:	4293      	cmp	r3, r2
 8015c36:	d20c      	bcs.n	8015c52 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015c38:	4a15      	ldr	r2, [pc, #84]	; (8015c90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015c3a:	2114      	movs	r1, #20
 8015c3c:	6812      	ldr	r2, [r2, #0]
 8015c3e:	fb01 2303 	mla	r3, r1, r3, r2
 8015c42:	7c58      	ldrb	r0, [r3, #17]
 8015c44:	0942      	lsrs	r2, r0, #5
 8015c46:	7cd8      	ldrb	r0, [r3, #19]
 8015c48:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015c4c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8015c50:	bd10      	pop	{r4, pc}
 8015c52:	4910      	ldr	r1, [pc, #64]	; (8015c94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015c54:	8809      	ldrh	r1, [r1, #0]
 8015c56:	4411      	add	r1, r2
 8015c58:	428b      	cmp	r3, r1
 8015c5a:	da09      	bge.n	8015c70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015c5c:	1a9b      	subs	r3, r3, r2
 8015c5e:	4a0e      	ldr	r2, [pc, #56]	; (8015c98 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015c60:	210e      	movs	r1, #14
 8015c62:	6812      	ldr	r2, [r2, #0]
 8015c64:	fb01 2303 	mla	r3, r1, r3, r2
 8015c68:	7b18      	ldrb	r0, [r3, #12]
 8015c6a:	f000 001f 	and.w	r0, r0, #31
 8015c6e:	e7ef      	b.n	8015c50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015c70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015c74:	4293      	cmp	r3, r2
 8015c76:	d106      	bne.n	8015c86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015c78:	f7f7 fe4c 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 8015c7c:	6803      	ldr	r3, [r0, #0]
 8015c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c84:	4718      	bx	r3
 8015c86:	2000      	movs	r0, #0
 8015c88:	e7e2      	b.n	8015c50 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015c8a:	bf00      	nop
 8015c8c:	2400f618 	.word	0x2400f618
 8015c90:	2400f620 	.word	0x2400f620
 8015c94:	2400f61c 	.word	0x2400f61c
 8015c98:	2400f600 	.word	0x2400f600

08015c9c <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015c9c:	2018      	movs	r0, #24
 8015c9e:	4770      	bx	lr

08015ca0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015ca0:	2001      	movs	r0, #1
 8015ca2:	4770      	bx	lr

08015ca4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015ca4:	4b02      	ldr	r3, [pc, #8]	; (8015cb0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015ca6:	8818      	ldrh	r0, [r3, #0]
 8015ca8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015cac:	b280      	uxth	r0, r0
 8015cae:	4770      	bx	lr
 8015cb0:	2400f58a 	.word	0x2400f58a

08015cb4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015cb4:	2bff      	cmp	r3, #255	; 0xff
 8015cb6:	d040      	beq.n	8015d3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015cb8:	2a2c      	cmp	r2, #44	; 0x2c
 8015cba:	d02a      	beq.n	8015d12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015cbc:	d80f      	bhi.n	8015cde <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015cbe:	2a08      	cmp	r2, #8
 8015cc0:	d037      	beq.n	8015d32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015cc2:	d805      	bhi.n	8015cd0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8015cc4:	2a04      	cmp	r2, #4
 8015cc6:	d032      	beq.n	8015d2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015cc8:	2a05      	cmp	r2, #5
 8015cca:	d02e      	beq.n	8015d2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015ccc:	2000      	movs	r0, #0
 8015cce:	4770      	bx	lr
 8015cd0:	2a0a      	cmp	r2, #10
 8015cd2:	d02e      	beq.n	8015d32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015cd4:	d301      	bcc.n	8015cda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8015cd6:	2a0b      	cmp	r2, #11
 8015cd8:	d1f8      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015cda:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015cdc:	4770      	bx	lr
 8015cde:	2a30      	cmp	r2, #48	; 0x30
 8015ce0:	d029      	beq.n	8015d36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015ce2:	d808      	bhi.n	8015cf6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015ce4:	2a2e      	cmp	r2, #46	; 0x2e
 8015ce6:	684b      	ldr	r3, [r1, #4]
 8015ce8:	d01a      	beq.n	8015d20 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015cea:	d90b      	bls.n	8015d04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015cec:	781b      	ldrb	r3, [r3, #0]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d1ec      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015cf2:	6a00      	ldr	r0, [r0, #32]
 8015cf4:	4770      	bx	lr
 8015cf6:	2a32      	cmp	r2, #50	; 0x32
 8015cf8:	d01d      	beq.n	8015d36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015cfa:	d301      	bcc.n	8015d00 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015cfc:	2a33      	cmp	r2, #51	; 0x33
 8015cfe:	d1e5      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d00:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015d02:	4770      	bx	lr
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d0f3      	beq.n	8015cf2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015d0a:	2b01      	cmp	r3, #1
 8015d0c:	d1de      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d0e:	6900      	ldr	r0, [r0, #16]
 8015d10:	4770      	bx	lr
 8015d12:	684b      	ldr	r3, [r1, #4]
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	b133      	cbz	r3, 8015d26 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d1d7      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d1c:	6880      	ldr	r0, [r0, #8]
 8015d1e:	4770      	bx	lr
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d1d2      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d26:	6980      	ldr	r0, [r0, #24]
 8015d28:	4770      	bx	lr
 8015d2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015d2c:	4770      	bx	lr
 8015d2e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015d30:	4770      	bx	lr
 8015d32:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015d34:	4770      	bx	lr
 8015d36:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015d38:	4770      	bx	lr
 8015d3a:	2a2c      	cmp	r2, #44	; 0x2c
 8015d3c:	d02a      	beq.n	8015d94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015d3e:	d80f      	bhi.n	8015d60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8015d40:	2a08      	cmp	r2, #8
 8015d42:	d035      	beq.n	8015db0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015d44:	d805      	bhi.n	8015d52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015d46:	2a04      	cmp	r2, #4
 8015d48:	d030      	beq.n	8015dac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8015d4a:	2a05      	cmp	r2, #5
 8015d4c:	d1be      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015d50:	4770      	bx	lr
 8015d52:	2a0a      	cmp	r2, #10
 8015d54:	d02c      	beq.n	8015db0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015d56:	d301      	bcc.n	8015d5c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8015d58:	2a0b      	cmp	r2, #11
 8015d5a:	d1b7      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d5c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015d5e:	4770      	bx	lr
 8015d60:	2a30      	cmp	r2, #48	; 0x30
 8015d62:	d027      	beq.n	8015db4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015d64:	d808      	bhi.n	8015d78 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015d66:	2a2e      	cmp	r2, #46	; 0x2e
 8015d68:	684b      	ldr	r3, [r1, #4]
 8015d6a:	d01a      	beq.n	8015da2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015d6c:	d90b      	bls.n	8015d86 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8015d6e:	781b      	ldrb	r3, [r3, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d1ab      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d74:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015d76:	4770      	bx	lr
 8015d78:	2a32      	cmp	r2, #50	; 0x32
 8015d7a:	d01b      	beq.n	8015db4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015d7c:	d301      	bcc.n	8015d82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015d7e:	2a33      	cmp	r2, #51	; 0x33
 8015d80:	d1a4      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d82:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015d84:	4770      	bx	lr
 8015d86:	781b      	ldrb	r3, [r3, #0]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d0f3      	beq.n	8015d74 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015d8c:	2b01      	cmp	r3, #1
 8015d8e:	d19d      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d90:	6940      	ldr	r0, [r0, #20]
 8015d92:	4770      	bx	lr
 8015d94:	684b      	ldr	r3, [r1, #4]
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	b133      	cbz	r3, 8015da8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015d9a:	2b01      	cmp	r3, #1
 8015d9c:	d196      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015d9e:	68c0      	ldr	r0, [r0, #12]
 8015da0:	4770      	bx	lr
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d191      	bne.n	8015ccc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015da8:	69c0      	ldr	r0, [r0, #28]
 8015daa:	4770      	bx	lr
 8015dac:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015dae:	4770      	bx	lr
 8015db0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8015db2:	4770      	bx	lr
 8015db4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015db6:	4770      	bx	lr

08015db8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dbc:	b085      	sub	sp, #20
 8015dbe:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015dc0:	9203      	str	r2, [sp, #12]
 8015dc2:	6870      	ldr	r0, [r6, #4]
 8015dc4:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015dc8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015dcc:	9101      	str	r1, [sp, #4]
 8015dce:	fa1f f885 	uxth.w	r8, r5
 8015dd2:	43ed      	mvns	r5, r5
 8015dd4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015dd8:	b2ed      	uxtb	r5, r5
 8015dda:	fb00 2404 	mla	r4, r0, r4, r2
 8015dde:	6832      	ldr	r2, [r6, #0]
 8015de0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015de4:	4414      	add	r4, r2
 8015de6:	f8dc 2000 	ldr.w	r2, [ip]
 8015dea:	9202      	str	r2, [sp, #8]
 8015dec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015df0:	f102 0e04 	add.w	lr, r2, #4
 8015df4:	9a01      	ldr	r2, [sp, #4]
 8015df6:	2a00      	cmp	r2, #0
 8015df8:	dc03      	bgt.n	8015e02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015dfa:	9a03      	ldr	r2, [sp, #12]
 8015dfc:	2a00      	cmp	r2, #0
 8015dfe:	f340 8116 	ble.w	801602e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015e02:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e04:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015e08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e0e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015e12:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	dd0e      	ble.n	8015e38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015e1a:	1406      	asrs	r6, r0, #16
 8015e1c:	d405      	bmi.n	8015e2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015e1e:	4556      	cmp	r6, sl
 8015e20:	da03      	bge.n	8015e2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015e22:	1416      	asrs	r6, r2, #16
 8015e24:	d401      	bmi.n	8015e2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015e26:	454e      	cmp	r6, r9
 8015e28:	db07      	blt.n	8015e3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015e2a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015e2c:	3b01      	subs	r3, #1
 8015e2e:	3403      	adds	r4, #3
 8015e30:	4430      	add	r0, r6
 8015e32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015e34:	4432      	add	r2, r6
 8015e36:	e7ee      	b.n	8015e16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015e38:	d063      	beq.n	8015f02 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015e3a:	1e5e      	subs	r6, r3, #1
 8015e3c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015e3e:	fb07 0706 	mla	r7, r7, r6, r0
 8015e42:	143f      	asrs	r7, r7, #16
 8015e44:	d454      	bmi.n	8015ef0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015e46:	4557      	cmp	r7, sl
 8015e48:	da52      	bge.n	8015ef0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015e4a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015e4c:	fb07 2606 	mla	r6, r7, r6, r2
 8015e50:	1436      	asrs	r6, r6, #16
 8015e52:	d44d      	bmi.n	8015ef0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015e54:	454e      	cmp	r6, r9
 8015e56:	da4b      	bge.n	8015ef0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015e58:	1ce6      	adds	r6, r4, #3
 8015e5a:	4699      	mov	r9, r3
 8015e5c:	f1b9 0f00 	cmp.w	r9, #0
 8015e60:	f106 0603 	add.w	r6, r6, #3
 8015e64:	dd48      	ble.n	8015ef8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015e66:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015e6a:	1417      	asrs	r7, r2, #16
 8015e6c:	9902      	ldr	r1, [sp, #8]
 8015e6e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015e72:	f109 39ff 	add.w	r9, r9, #4294967295
 8015e76:	fb0b 1707 	mla	r7, fp, r7, r1
 8015e7a:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015e7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e80:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015e84:	fb1b fb05 	smulbb	fp, fp, r5
 8015e88:	4408      	add	r0, r1
 8015e8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015e8c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015e90:	440a      	add	r2, r1
 8015e92:	eb0e 0a07 	add.w	sl, lr, r7
 8015e96:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015e9a:	fb07 b708 	mla	r7, r7, r8, fp
 8015e9e:	b2bf      	uxth	r7, r7
 8015ea0:	f107 0b01 	add.w	fp, r7, #1
 8015ea4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ea8:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015eac:	fb1b fb05 	smulbb	fp, fp, r5
 8015eb0:	123f      	asrs	r7, r7, #8
 8015eb2:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015eb6:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015eba:	fb07 b708 	mla	r7, r7, r8, fp
 8015ebe:	b2bf      	uxth	r7, r7
 8015ec0:	f107 0b01 	add.w	fp, r7, #1
 8015ec4:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ec8:	123f      	asrs	r7, r7, #8
 8015eca:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015ece:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015ed2:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015ed6:	fb1a fa05 	smulbb	sl, sl, r5
 8015eda:	fb07 a708 	mla	r7, r7, r8, sl
 8015ede:	b2bf      	uxth	r7, r7
 8015ee0:	f107 0a01 	add.w	sl, r7, #1
 8015ee4:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015ee8:	123f      	asrs	r7, r7, #8
 8015eea:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015eee:	e7b5      	b.n	8015e5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015ef0:	2700      	movs	r7, #0
 8015ef2:	1bde      	subs	r6, r3, r7
 8015ef4:	2e00      	cmp	r6, #0
 8015ef6:	dc42      	bgt.n	8015f7e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015ef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015efc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f00:	441c      	add	r4, r3
 8015f02:	9b01      	ldr	r3, [sp, #4]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f340 8092 	ble.w	801602e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f18:	eef0 6a62 	vmov.f32	s13, s5
 8015f1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015f20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f28:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015f2c:	eef0 6a43 	vmov.f32	s13, s6
 8015f30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015f34:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015f38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015f48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015f4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015f50:	ee12 2a90 	vmov	r2, s5
 8015f54:	eef0 2a47 	vmov.f32	s5, s14
 8015f58:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f5c:	ee13 2a10 	vmov	r2, s6
 8015f60:	9311      	str	r3, [sp, #68]	; 0x44
 8015f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f64:	eeb0 3a67 	vmov.f32	s6, s15
 8015f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8015f6c:	9312      	str	r3, [sp, #72]	; 0x48
 8015f6e:	9b01      	ldr	r3, [sp, #4]
 8015f70:	9a03      	ldr	r2, [sp, #12]
 8015f72:	3b01      	subs	r3, #1
 8015f74:	9301      	str	r3, [sp, #4]
 8015f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f78:	bf08      	it	eq
 8015f7a:	4613      	moveq	r3, r2
 8015f7c:	e73a      	b.n	8015df4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015f7e:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015f82:	d44e      	bmi.n	8016022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015f84:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015f88:	4556      	cmp	r6, sl
 8015f8a:	dd4a      	ble.n	8016022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015f8c:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015f90:	d447      	bmi.n	8016022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015f92:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015f96:	4559      	cmp	r1, fp
 8015f98:	dd43      	ble.n	8016022 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015f9a:	fa0f f986 	sxth.w	r9, r6
 8015f9e:	9902      	ldr	r1, [sp, #8]
 8015fa0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015fa4:	fb0b 1909 	mla	r9, fp, r9, r1
 8015fa8:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015fac:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015fb0:	fb1b fb05 	smulbb	fp, fp, r5
 8015fb4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015fb8:	eb0e 0a09 	add.w	sl, lr, r9
 8015fbc:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015fc0:	fb09 b908 	mla	r9, r9, r8, fp
 8015fc4:	fa1f f989 	uxth.w	r9, r9
 8015fc8:	f109 0b01 	add.w	fp, r9, #1
 8015fcc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015fd0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015fd4:	f804 9006 	strb.w	r9, [r4, r6]
 8015fd8:	4426      	add	r6, r4
 8015fda:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015fde:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015fe2:	fb1b fb05 	smulbb	fp, fp, r5
 8015fe6:	fb09 b908 	mla	r9, r9, r8, fp
 8015fea:	fa1f f989 	uxth.w	r9, r9
 8015fee:	f109 0b01 	add.w	fp, r9, #1
 8015ff2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015ff6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015ffa:	f886 9001 	strb.w	r9, [r6, #1]
 8015ffe:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016002:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016006:	fb1a fa05 	smulbb	sl, sl, r5
 801600a:	fb09 a908 	mla	r9, r9, r8, sl
 801600e:	fa1f f989 	uxth.w	r9, r9
 8016012:	f109 0a01 	add.w	sl, r9, #1
 8016016:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801601a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801601e:	f886 9002 	strb.w	r9, [r6, #2]
 8016022:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016024:	3701      	adds	r7, #1
 8016026:	4408      	add	r0, r1
 8016028:	9912      	ldr	r1, [sp, #72]	; 0x48
 801602a:	440a      	add	r2, r1
 801602c:	e761      	b.n	8015ef2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801602e:	b005      	add	sp, #20
 8016030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016034 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016038:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801603a:	4693      	mov	fp, r2
 801603c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801603e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016042:	6868      	ldr	r0, [r5, #4]
 8016044:	6877      	ldr	r7, [r6, #4]
 8016046:	9100      	str	r1, [sp, #0]
 8016048:	3704      	adds	r7, #4
 801604a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801604e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8016052:	fb00 2404 	mla	r4, r0, r4, r2
 8016056:	682a      	ldr	r2, [r5, #0]
 8016058:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801605c:	4414      	add	r4, r2
 801605e:	6832      	ldr	r2, [r6, #0]
 8016060:	9201      	str	r2, [sp, #4]
 8016062:	9a00      	ldr	r2, [sp, #0]
 8016064:	2a00      	cmp	r2, #0
 8016066:	dc03      	bgt.n	8016070 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016068:	f1bb 0f00 	cmp.w	fp, #0
 801606c:	f340 80bc 	ble.w	80161e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016072:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8016076:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801607a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801607c:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016080:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016084:	2b00      	cmp	r3, #0
 8016086:	dd0c      	ble.n	80160a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016088:	1405      	asrs	r5, r0, #16
 801608a:	d405      	bmi.n	8016098 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801608c:	4555      	cmp	r5, sl
 801608e:	da03      	bge.n	8016098 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016090:	1415      	asrs	r5, r2, #16
 8016092:	d401      	bmi.n	8016098 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016094:	454d      	cmp	r5, r9
 8016096:	db05      	blt.n	80160a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016098:	4440      	add	r0, r8
 801609a:	4472      	add	r2, lr
 801609c:	3b01      	subs	r3, #1
 801609e:	3403      	adds	r4, #3
 80160a0:	e7f0      	b.n	8016084 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80160a2:	d03f      	beq.n	8016124 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80160a4:	1e5d      	subs	r5, r3, #1
 80160a6:	fb08 0c05 	mla	ip, r8, r5, r0
 80160aa:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80160ae:	d42e      	bmi.n	801610e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80160b0:	45d4      	cmp	ip, sl
 80160b2:	da2c      	bge.n	801610e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80160b4:	fb0e 2505 	mla	r5, lr, r5, r2
 80160b8:	142d      	asrs	r5, r5, #16
 80160ba:	d428      	bmi.n	801610e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80160bc:	454d      	cmp	r5, r9
 80160be:	da26      	bge.n	801610e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80160c0:	1ce5      	adds	r5, r4, #3
 80160c2:	469c      	mov	ip, r3
 80160c4:	f1bc 0f00 	cmp.w	ip, #0
 80160c8:	f105 0503 	add.w	r5, r5, #3
 80160cc:	dd25      	ble.n	801611a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80160ce:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80160d2:	ea4f 4922 	mov.w	r9, r2, asr #16
 80160d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80160da:	4472      	add	r2, lr
 80160dc:	468a      	mov	sl, r1
 80160de:	9901      	ldr	r1, [sp, #4]
 80160e0:	fb0a 1909 	mla	r9, sl, r9, r1
 80160e4:	1401      	asrs	r1, r0, #16
 80160e6:	4440      	add	r0, r8
 80160e8:	f819 9001 	ldrb.w	r9, [r9, r1]
 80160ec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80160f0:	eb07 0a09 	add.w	sl, r7, r9
 80160f4:	f817 9009 	ldrb.w	r9, [r7, r9]
 80160f8:	f805 9c06 	strb.w	r9, [r5, #-6]
 80160fc:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016100:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016104:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016108:	f805 9c04 	strb.w	r9, [r5, #-4]
 801610c:	e7da      	b.n	80160c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801610e:	2500      	movs	r5, #0
 8016110:	eba3 0c05 	sub.w	ip, r3, r5
 8016114:	f1bc 0f00 	cmp.w	ip, #0
 8016118:	dc3b      	bgt.n	8016192 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801611a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801611e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016122:	441c      	add	r4, r3
 8016124:	9b00      	ldr	r3, [sp, #0]
 8016126:	2b00      	cmp	r3, #0
 8016128:	dd5e      	ble.n	80161e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801612a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801612e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016130:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016134:	eeb0 6a62 	vmov.f32	s12, s5
 8016138:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801613c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016140:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016144:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016148:	eeb0 6a43 	vmov.f32	s12, s6
 801614c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016150:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016154:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016158:	ee61 7a27 	vmul.f32	s15, s2, s15
 801615c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016160:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016164:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016168:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801616c:	ee12 2a90 	vmov	r2, s5
 8016170:	eef0 2a47 	vmov.f32	s5, s14
 8016174:	fb92 f8f3 	sdiv	r8, r2, r3
 8016178:	ee13 2a10 	vmov	r2, s6
 801617c:	eeb0 3a67 	vmov.f32	s6, s15
 8016180:	fb92 fef3 	sdiv	lr, r2, r3
 8016184:	9b00      	ldr	r3, [sp, #0]
 8016186:	3b01      	subs	r3, #1
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801618c:	bf08      	it	eq
 801618e:	465b      	moveq	r3, fp
 8016190:	e767      	b.n	8016062 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016192:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016196:	d423      	bmi.n	80161e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016198:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801619c:	45cc      	cmp	ip, r9
 801619e:	dd1f      	ble.n	80161e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80161a0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80161a4:	d41c      	bmi.n	80161e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80161a6:	68f1      	ldr	r1, [r6, #12]
 80161a8:	4551      	cmp	r1, sl
 80161aa:	dd19      	ble.n	80161e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 80161ac:	fa0f fc8c 	sxth.w	ip, ip
 80161b0:	9901      	ldr	r1, [sp, #4]
 80161b2:	fb0a 1c0c 	mla	ip, sl, ip, r1
 80161b6:	f81c c009 	ldrb.w	ip, [ip, r9]
 80161ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80161be:	f817 a00c 	ldrb.w	sl, [r7, ip]
 80161c2:	eb07 090c 	add.w	r9, r7, ip
 80161c6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80161ca:	f804 a00c 	strb.w	sl, [r4, ip]
 80161ce:	44a4      	add	ip, r4
 80161d0:	f899 a001 	ldrb.w	sl, [r9, #1]
 80161d4:	f88c a001 	strb.w	sl, [ip, #1]
 80161d8:	f899 9002 	ldrb.w	r9, [r9, #2]
 80161dc:	f88c 9002 	strb.w	r9, [ip, #2]
 80161e0:	4440      	add	r0, r8
 80161e2:	4472      	add	r2, lr
 80161e4:	3501      	adds	r5, #1
 80161e6:	e793      	b.n	8016110 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 80161e8:	b003      	add	sp, #12
 80161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80161ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f2:	b085      	sub	sp, #20
 80161f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80161f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80161fa:	9202      	str	r2, [sp, #8]
 80161fc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016200:	6860      	ldr	r0, [r4, #4]
 8016202:	9203      	str	r2, [sp, #12]
 8016204:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016208:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801620c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016210:	fb00 2505 	mla	r5, r0, r5, r2
 8016214:	6822      	ldr	r2, [r4, #0]
 8016216:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801621a:	4415      	add	r5, r2
 801621c:	f8dc 2000 	ldr.w	r2, [ip]
 8016220:	9200      	str	r2, [sp, #0]
 8016222:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016226:	3204      	adds	r2, #4
 8016228:	9201      	str	r2, [sp, #4]
 801622a:	2900      	cmp	r1, #0
 801622c:	dc03      	bgt.n	8016236 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801622e:	9a02      	ldr	r2, [sp, #8]
 8016230:	2a00      	cmp	r2, #0
 8016232:	f340 8127 	ble.w	8016484 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016238:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801623c:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016242:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016246:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801624a:	2b00      	cmp	r3, #0
 801624c:	dd0d      	ble.n	801626a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801624e:	1422      	asrs	r2, r4, #16
 8016250:	d405      	bmi.n	801625e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016252:	4542      	cmp	r2, r8
 8016254:	da03      	bge.n	801625e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016256:	1402      	asrs	r2, r0, #16
 8016258:	d401      	bmi.n	801625e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801625a:	42ba      	cmp	r2, r7
 801625c:	db06      	blt.n	801626c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801625e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016260:	4474      	add	r4, lr
 8016262:	3b01      	subs	r3, #1
 8016264:	3503      	adds	r5, #3
 8016266:	4410      	add	r0, r2
 8016268:	e7ef      	b.n	801624a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801626a:	d075      	beq.n	8016358 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801626c:	1e5a      	subs	r2, r3, #1
 801626e:	fb0e 4602 	mla	r6, lr, r2, r4
 8016272:	1436      	asrs	r6, r6, #16
 8016274:	d465      	bmi.n	8016342 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016276:	4546      	cmp	r6, r8
 8016278:	da63      	bge.n	8016342 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801627a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801627c:	fb06 0202 	mla	r2, r6, r2, r0
 8016280:	1412      	asrs	r2, r2, #16
 8016282:	d45e      	bmi.n	8016342 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016284:	42ba      	cmp	r2, r7
 8016286:	da5c      	bge.n	8016342 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016288:	1cef      	adds	r7, r5, #3
 801628a:	4699      	mov	r9, r3
 801628c:	f1b9 0f00 	cmp.w	r9, #0
 8016290:	dd5d      	ble.n	801634e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8016292:	1402      	asrs	r2, r0, #16
 8016294:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016298:	1426      	asrs	r6, r4, #16
 801629a:	4692      	mov	sl, r2
 801629c:	9a00      	ldr	r2, [sp, #0]
 801629e:	fb08 220a 	mla	r2, r8, sl, r2
 80162a2:	5d92      	ldrb	r2, [r2, r6]
 80162a4:	9e01      	ldr	r6, [sp, #4]
 80162a6:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80162aa:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80162ae:	d041      	beq.n	8016334 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80162b0:	9a03      	ldr	r2, [sp, #12]
 80162b2:	fa5f fb86 	uxtb.w	fp, r6
 80162b6:	fb02 f808 	mul.w	r8, r2, r8
 80162ba:	f108 0201 	add.w	r2, r8, #1
 80162be:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80162c2:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80162c6:	1212      	asrs	r2, r2, #8
 80162c8:	fa1f fa82 	uxth.w	sl, r2
 80162cc:	43d2      	mvns	r2, r2
 80162ce:	fb1b fb0a 	smulbb	fp, fp, sl
 80162d2:	b2d2      	uxtb	r2, r2
 80162d4:	fb08 b802 	mla	r8, r8, r2, fp
 80162d8:	fa1f f888 	uxth.w	r8, r8
 80162dc:	f108 0b01 	add.w	fp, r8, #1
 80162e0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80162e4:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80162e8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80162ec:	fb1b fb0a 	smulbb	fp, fp, sl
 80162f0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80162f4:	fb16 fa0a 	smulbb	sl, r6, sl
 80162f8:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80162fc:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016300:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016304:	fb06 aa02 	mla	sl, r6, r2, sl
 8016308:	fb08 b802 	mla	r8, r8, r2, fp
 801630c:	fa1f fa8a 	uxth.w	sl, sl
 8016310:	fa1f f888 	uxth.w	r8, r8
 8016314:	f10a 0601 	add.w	r6, sl, #1
 8016318:	f108 0b01 	add.w	fp, r8, #1
 801631c:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016320:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016324:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016328:	ea4f 2828 	mov.w	r8, r8, asr #8
 801632c:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016330:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016336:	4474      	add	r4, lr
 8016338:	3703      	adds	r7, #3
 801633a:	f109 39ff 	add.w	r9, r9, #4294967295
 801633e:	4410      	add	r0, r2
 8016340:	e7a4      	b.n	801628c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016342:	f04f 0800 	mov.w	r8, #0
 8016346:	eba3 0208 	sub.w	r2, r3, r8
 801634a:	2a00      	cmp	r2, #0
 801634c:	dc3b      	bgt.n	80163c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801634e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016352:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016356:	441d      	add	r5, r3
 8016358:	2900      	cmp	r1, #0
 801635a:	f340 8093 	ble.w	8016484 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801635e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016364:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016368:	3901      	subs	r1, #1
 801636a:	eeb0 6a62 	vmov.f32	s12, s5
 801636e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016372:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016376:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801637a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801637e:	eeb0 6a43 	vmov.f32	s12, s6
 8016382:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016386:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801638a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801638e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016392:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016396:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801639a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801639e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80163a2:	ee12 2a90 	vmov	r2, s5
 80163a6:	eef0 2a47 	vmov.f32	s5, s14
 80163aa:	fb92 fef3 	sdiv	lr, r2, r3
 80163ae:	ee13 2a10 	vmov	r2, s6
 80163b2:	eeb0 3a67 	vmov.f32	s6, s15
 80163b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80163ba:	9a02      	ldr	r2, [sp, #8]
 80163bc:	9312      	str	r3, [sp, #72]	; 0x48
 80163be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163c0:	bf08      	it	eq
 80163c2:	4613      	moveq	r3, r2
 80163c4:	e731      	b.n	801622a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80163c6:	1427      	asrs	r7, r4, #16
 80163c8:	d456      	bmi.n	8016478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80163ca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80163ce:	42be      	cmp	r6, r7
 80163d0:	dd52      	ble.n	8016478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80163d2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80163d6:	d44f      	bmi.n	8016478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80163d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80163dc:	454a      	cmp	r2, r9
 80163de:	dd4b      	ble.n	8016478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80163e0:	9a00      	ldr	r2, [sp, #0]
 80163e2:	b236      	sxth	r6, r6
 80163e4:	fb09 2606 	mla	r6, r9, r6, r2
 80163e8:	5df2      	ldrb	r2, [r6, r7]
 80163ea:	9e01      	ldr	r6, [sp, #4]
 80163ec:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 80163f0:	0e3a      	lsrs	r2, r7, #24
 80163f2:	d041      	beq.n	8016478 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80163f4:	9e03      	ldr	r6, [sp, #12]
 80163f6:	fa5f fb87 	uxtb.w	fp, r7
 80163fa:	4372      	muls	r2, r6
 80163fc:	1c56      	adds	r6, r2, #1
 80163fe:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016402:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016406:	1212      	asrs	r2, r2, #8
 8016408:	f815 9006 	ldrb.w	r9, [r5, r6]
 801640c:	fa1f fa82 	uxth.w	sl, r2
 8016410:	43d2      	mvns	r2, r2
 8016412:	fb1b fb0a 	smulbb	fp, fp, sl
 8016416:	b2d2      	uxtb	r2, r2
 8016418:	fb09 b902 	mla	r9, r9, r2, fp
 801641c:	fa1f f989 	uxth.w	r9, r9
 8016420:	f109 0b01 	add.w	fp, r9, #1
 8016424:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016428:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801642c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016430:	fb1b fb0a 	smulbb	fp, fp, sl
 8016434:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016438:	fb17 fa0a 	smulbb	sl, r7, sl
 801643c:	f805 9006 	strb.w	r9, [r5, r6]
 8016440:	442e      	add	r6, r5
 8016442:	78b7      	ldrb	r7, [r6, #2]
 8016444:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016448:	fb07 aa02 	mla	sl, r7, r2, sl
 801644c:	fb09 b902 	mla	r9, r9, r2, fp
 8016450:	fa1f fa8a 	uxth.w	sl, sl
 8016454:	fa1f f989 	uxth.w	r9, r9
 8016458:	f10a 0701 	add.w	r7, sl, #1
 801645c:	f109 0b01 	add.w	fp, r9, #1
 8016460:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016464:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016468:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801646c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016470:	f886 a002 	strb.w	sl, [r6, #2]
 8016474:	f886 9001 	strb.w	r9, [r6, #1]
 8016478:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801647a:	4474      	add	r4, lr
 801647c:	f108 0801 	add.w	r8, r8, #1
 8016480:	4410      	add	r0, r2
 8016482:	e760      	b.n	8016346 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8016484:	b005      	add	sp, #20
 8016486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801648a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801648a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801648e:	b085      	sub	sp, #20
 8016490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016494:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016496:	9203      	str	r2, [sp, #12]
 8016498:	6868      	ldr	r0, [r5, #4]
 801649a:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801649e:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80164a2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80164a6:	fb00 2404 	mla	r4, r0, r4, r2
 80164aa:	682a      	ldr	r2, [r5, #0]
 80164ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80164b0:	4414      	add	r4, r2
 80164b2:	f8dc 2000 	ldr.w	r2, [ip]
 80164b6:	9201      	str	r2, [sp, #4]
 80164b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80164bc:	3204      	adds	r2, #4
 80164be:	9202      	str	r2, [sp, #8]
 80164c0:	2900      	cmp	r1, #0
 80164c2:	dc03      	bgt.n	80164cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80164c4:	9a03      	ldr	r2, [sp, #12]
 80164c6:	2a00      	cmp	r2, #0
 80164c8:	f340 8137 	ble.w	801673a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80164cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164ce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80164d2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80164d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80164d8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80164dc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	dd0d      	ble.n	8016500 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80164e4:	1405      	asrs	r5, r0, #16
 80164e6:	d405      	bmi.n	80164f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80164e8:	4545      	cmp	r5, r8
 80164ea:	da03      	bge.n	80164f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80164ec:	1415      	asrs	r5, r2, #16
 80164ee:	d401      	bmi.n	80164f4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80164f0:	42bd      	cmp	r5, r7
 80164f2:	db06      	blt.n	8016502 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80164f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80164f6:	4470      	add	r0, lr
 80164f8:	3b01      	subs	r3, #1
 80164fa:	3403      	adds	r4, #3
 80164fc:	442a      	add	r2, r5
 80164fe:	e7ef      	b.n	80164e0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016500:	d070      	beq.n	80165e4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016502:	1e5d      	subs	r5, r3, #1
 8016504:	fb0e 0605 	mla	r6, lr, r5, r0
 8016508:	1436      	asrs	r6, r6, #16
 801650a:	d462      	bmi.n	80165d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801650c:	4546      	cmp	r6, r8
 801650e:	da60      	bge.n	80165d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016510:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016512:	fb06 2505 	mla	r5, r6, r5, r2
 8016516:	142d      	asrs	r5, r5, #16
 8016518:	d45b      	bmi.n	80165d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801651a:	42bd      	cmp	r5, r7
 801651c:	da59      	bge.n	80165d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801651e:	1ce5      	adds	r5, r4, #3
 8016520:	469a      	mov	sl, r3
 8016522:	f1ba 0f00 	cmp.w	sl, #0
 8016526:	dd58      	ble.n	80165da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8016528:	1416      	asrs	r6, r2, #16
 801652a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801652e:	1407      	asrs	r7, r0, #16
 8016530:	46b1      	mov	r9, r6
 8016532:	9e01      	ldr	r6, [sp, #4]
 8016534:	fb08 6609 	mla	r6, r8, r9, r6
 8016538:	5df6      	ldrb	r6, [r6, r7]
 801653a:	9f02      	ldr	r7, [sp, #8]
 801653c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8016540:	0e37      	lsrs	r7, r6, #24
 8016542:	2fff      	cmp	r7, #255	; 0xff
 8016544:	f000 80f0 	beq.w	8016728 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016548:	fa5f f887 	uxtb.w	r8, r7
 801654c:	b3d7      	cbz	r7, 80165c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801654e:	fa1f f788 	uxth.w	r7, r8
 8016552:	ea6f 0808 	mvn.w	r8, r8
 8016556:	fa5f fb86 	uxtb.w	fp, r6
 801655a:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801655e:	fa5f f888 	uxtb.w	r8, r8
 8016562:	fb1b fb07 	smulbb	fp, fp, r7
 8016566:	fb09 b908 	mla	r9, r9, r8, fp
 801656a:	fa1f f989 	uxth.w	r9, r9
 801656e:	f109 0b01 	add.w	fp, r9, #1
 8016572:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016576:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801657a:	fb1b fb08 	smulbb	fp, fp, r8
 801657e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016582:	f805 9c03 	strb.w	r9, [r5, #-3]
 8016586:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801658a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801658e:	fb09 b907 	mla	r9, r9, r7, fp
 8016592:	fa1f f989 	uxth.w	r9, r9
 8016596:	f109 0b01 	add.w	fp, r9, #1
 801659a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801659e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165a2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80165a6:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80165aa:	fb19 f808 	smulbb	r8, r9, r8
 80165ae:	fb06 8607 	mla	r6, r6, r7, r8
 80165b2:	b2b6      	uxth	r6, r6
 80165b4:	f106 0801 	add.w	r8, r6, #1
 80165b8:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80165bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80165c0:	f805 8c01 	strb.w	r8, [r5, #-1]
 80165c4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80165c6:	4470      	add	r0, lr
 80165c8:	3503      	adds	r5, #3
 80165ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80165ce:	4432      	add	r2, r6
 80165d0:	e7a7      	b.n	8016522 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80165d2:	2600      	movs	r6, #0
 80165d4:	1b9d      	subs	r5, r3, r6
 80165d6:	2d00      	cmp	r5, #0
 80165d8:	dc3b      	bgt.n	8016652 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80165da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80165e2:	441c      	add	r4, r3
 80165e4:	2900      	cmp	r1, #0
 80165e6:	f340 80a8 	ble.w	801673a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80165ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 80165ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80165f4:	3901      	subs	r1, #1
 80165f6:	eeb0 6a62 	vmov.f32	s12, s5
 80165fa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80165fe:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016602:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016606:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801660a:	eeb0 6a43 	vmov.f32	s12, s6
 801660e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016612:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016616:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801661a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801661e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016622:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016626:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801662a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801662e:	ee12 2a90 	vmov	r2, s5
 8016632:	eef0 2a47 	vmov.f32	s5, s14
 8016636:	fb92 fef3 	sdiv	lr, r2, r3
 801663a:	ee13 2a10 	vmov	r2, s6
 801663e:	eeb0 3a67 	vmov.f32	s6, s15
 8016642:	fb92 f3f3 	sdiv	r3, r2, r3
 8016646:	9a03      	ldr	r2, [sp, #12]
 8016648:	9312      	str	r3, [sp, #72]	; 0x48
 801664a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801664c:	bf08      	it	eq
 801664e:	4613      	moveq	r3, r2
 8016650:	e736      	b.n	80164c0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016652:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016656:	d457      	bmi.n	8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016658:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801665c:	4547      	cmp	r7, r8
 801665e:	dd53      	ble.n	8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016660:	ea5f 4922 	movs.w	r9, r2, asr #16
 8016664:	d450      	bmi.n	8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016666:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801666a:	454d      	cmp	r5, r9
 801666c:	dd4c      	ble.n	8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801666e:	9d01      	ldr	r5, [sp, #4]
 8016670:	b23f      	sxth	r7, r7
 8016672:	fb09 5707 	mla	r7, r9, r7, r5
 8016676:	f817 5008 	ldrb.w	r5, [r7, r8]
 801667a:	9f02      	ldr	r7, [sp, #8]
 801667c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8016680:	0e2f      	lsrs	r7, r5, #24
 8016682:	2fff      	cmp	r7, #255	; 0xff
 8016684:	d045      	beq.n	8016712 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8016686:	fa5f f987 	uxtb.w	r9, r7
 801668a:	b3ef      	cbz	r7, 8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801668c:	fa1f f889 	uxth.w	r8, r9
 8016690:	ea6f 0909 	mvn.w	r9, r9
 8016694:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016698:	fa5f fb85 	uxtb.w	fp, r5
 801669c:	f814 a007 	ldrb.w	sl, [r4, r7]
 80166a0:	fa5f f989 	uxtb.w	r9, r9
 80166a4:	fb1b fb08 	smulbb	fp, fp, r8
 80166a8:	fb0a ba09 	mla	sl, sl, r9, fp
 80166ac:	fa1f fa8a 	uxth.w	sl, sl
 80166b0:	f10a 0b01 	add.w	fp, sl, #1
 80166b4:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80166b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80166bc:	f804 a007 	strb.w	sl, [r4, r7]
 80166c0:	4427      	add	r7, r4
 80166c2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80166c6:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80166ca:	f897 b001 	ldrb.w	fp, [r7, #1]
 80166ce:	fb1b fb09 	smulbb	fp, fp, r9
 80166d2:	fb0a ba08 	mla	sl, sl, r8, fp
 80166d6:	fa1f fa8a 	uxth.w	sl, sl
 80166da:	f10a 0b01 	add.w	fp, sl, #1
 80166de:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80166e2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80166e6:	f887 a001 	strb.w	sl, [r7, #1]
 80166ea:	f897 a002 	ldrb.w	sl, [r7, #2]
 80166ee:	fb1a f909 	smulbb	r9, sl, r9
 80166f2:	fb05 9508 	mla	r5, r5, r8, r9
 80166f6:	b2ad      	uxth	r5, r5
 80166f8:	f105 0901 	add.w	r9, r5, #1
 80166fc:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016700:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016704:	f887 9002 	strb.w	r9, [r7, #2]
 8016708:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801670a:	4470      	add	r0, lr
 801670c:	3601      	adds	r6, #1
 801670e:	442a      	add	r2, r5
 8016710:	e760      	b.n	80165d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016712:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016716:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801671a:	55e5      	strb	r5, [r4, r7]
 801671c:	4427      	add	r7, r4
 801671e:	0c2d      	lsrs	r5, r5, #16
 8016720:	f887 8001 	strb.w	r8, [r7, #1]
 8016724:	70bd      	strb	r5, [r7, #2]
 8016726:	e7ef      	b.n	8016708 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016728:	0a37      	lsrs	r7, r6, #8
 801672a:	f805 6c03 	strb.w	r6, [r5, #-3]
 801672e:	0c36      	lsrs	r6, r6, #16
 8016730:	f805 7c02 	strb.w	r7, [r5, #-2]
 8016734:	f805 6c01 	strb.w	r6, [r5, #-1]
 8016738:	e744      	b.n	80165c4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801673a:	b005      	add	sp, #20
 801673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016740 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016744:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016746:	9201      	str	r2, [sp, #4]
 8016748:	6870      	ldr	r0, [r6, #4]
 801674a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801674e:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016752:	fa1f fe85 	uxth.w	lr, r5
 8016756:	43ed      	mvns	r5, r5
 8016758:	f8dc 8000 	ldr.w	r8, [ip]
 801675c:	b2ed      	uxtb	r5, r5
 801675e:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8016762:	fb00 2404 	mla	r4, r0, r4, r2
 8016766:	6832      	ldr	r2, [r6, #0]
 8016768:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801676c:	4414      	add	r4, r2
 801676e:	2900      	cmp	r1, #0
 8016770:	dc03      	bgt.n	801677a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016772:	9a01      	ldr	r2, [sp, #4]
 8016774:	2a00      	cmp	r2, #0
 8016776:	f340 810d 	ble.w	8016994 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801677a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801677c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016780:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016786:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801678a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801678e:	2b00      	cmp	r3, #0
 8016790:	dd0e      	ble.n	80167b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016792:	1406      	asrs	r6, r0, #16
 8016794:	d405      	bmi.n	80167a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8016796:	4556      	cmp	r6, sl
 8016798:	da03      	bge.n	80167a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801679a:	1416      	asrs	r6, r2, #16
 801679c:	d401      	bmi.n	80167a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801679e:	454e      	cmp	r6, r9
 80167a0:	db07      	blt.n	80167b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80167a2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80167a4:	3b01      	subs	r3, #1
 80167a6:	3403      	adds	r4, #3
 80167a8:	4430      	add	r0, r6
 80167aa:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80167ac:	4432      	add	r2, r6
 80167ae:	e7ee      	b.n	801678e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80167b0:	d060      	beq.n	8016874 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80167b2:	1e5e      	subs	r6, r3, #1
 80167b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80167b6:	fb07 0706 	mla	r7, r7, r6, r0
 80167ba:	143f      	asrs	r7, r7, #16
 80167bc:	d451      	bmi.n	8016862 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80167be:	4557      	cmp	r7, sl
 80167c0:	da4f      	bge.n	8016862 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80167c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80167c4:	fb07 2606 	mla	r6, r7, r6, r2
 80167c8:	1436      	asrs	r6, r6, #16
 80167ca:	d44a      	bmi.n	8016862 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80167cc:	454e      	cmp	r6, r9
 80167ce:	da48      	bge.n	8016862 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80167d0:	1ce6      	adds	r6, r4, #3
 80167d2:	4699      	mov	r9, r3
 80167d4:	f1b9 0f00 	cmp.w	r9, #0
 80167d8:	f106 0603 	add.w	r6, r6, #3
 80167dc:	dd45      	ble.n	801686a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80167de:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80167e2:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80167e6:	1417      	asrs	r7, r2, #16
 80167e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80167ec:	fb0b a707 	mla	r7, fp, r7, sl
 80167f0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80167f4:	fb1b fb05 	smulbb	fp, fp, r5
 80167f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80167fc:	eb08 0a07 	add.w	sl, r8, r7
 8016800:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016804:	fb07 b70e 	mla	r7, r7, lr, fp
 8016808:	b2bf      	uxth	r7, r7
 801680a:	f107 0b01 	add.w	fp, r7, #1
 801680e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016812:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016816:	fb1b fb05 	smulbb	fp, fp, r5
 801681a:	123f      	asrs	r7, r7, #8
 801681c:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016820:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016824:	fb07 b70e 	mla	r7, r7, lr, fp
 8016828:	b2bf      	uxth	r7, r7
 801682a:	f107 0b01 	add.w	fp, r7, #1
 801682e:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016832:	123f      	asrs	r7, r7, #8
 8016834:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016838:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801683c:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016840:	fb1a fa05 	smulbb	sl, sl, r5
 8016844:	fb07 a70e 	mla	r7, r7, lr, sl
 8016848:	b2bf      	uxth	r7, r7
 801684a:	f107 0a01 	add.w	sl, r7, #1
 801684e:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016852:	123f      	asrs	r7, r7, #8
 8016854:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016858:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801685a:	4438      	add	r0, r7
 801685c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801685e:	443a      	add	r2, r7
 8016860:	e7b8      	b.n	80167d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016862:	2700      	movs	r7, #0
 8016864:	1bde      	subs	r6, r3, r7
 8016866:	2e00      	cmp	r6, #0
 8016868:	dc3f      	bgt.n	80168ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801686a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801686e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016872:	441c      	add	r4, r3
 8016874:	2900      	cmp	r1, #0
 8016876:	f340 808d 	ble.w	8016994 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801687a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801687e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016880:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016884:	3901      	subs	r1, #1
 8016886:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801688a:	eef0 6a62 	vmov.f32	s13, s5
 801688e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016892:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016896:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801689a:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801689e:	eef0 6a43 	vmov.f32	s13, s6
 80168a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80168a6:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80168aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80168b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80168b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80168ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80168be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80168c2:	ee12 2a90 	vmov	r2, s5
 80168c6:	eef0 2a47 	vmov.f32	s5, s14
 80168ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80168ce:	ee13 2a10 	vmov	r2, s6
 80168d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80168d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168d6:	eeb0 3a67 	vmov.f32	s6, s15
 80168da:	fb92 f3f3 	sdiv	r3, r2, r3
 80168de:	9a01      	ldr	r2, [sp, #4]
 80168e0:	9310      	str	r3, [sp, #64]	; 0x40
 80168e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e4:	bf08      	it	eq
 80168e6:	4613      	moveq	r3, r2
 80168e8:	e741      	b.n	801676e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80168ea:	ea5f 4920 	movs.w	r9, r0, asr #16
 80168ee:	d44b      	bmi.n	8016988 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80168f0:	f8dc b008 	ldr.w	fp, [ip, #8]
 80168f4:	45cb      	cmp	fp, r9
 80168f6:	dd47      	ble.n	8016988 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80168f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80168fc:	d444      	bmi.n	8016988 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80168fe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016902:	4556      	cmp	r6, sl
 8016904:	dd40      	ble.n	8016988 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016906:	fa0f f68b 	sxth.w	r6, fp
 801690a:	fb0a 9906 	mla	r9, sl, r6, r9
 801690e:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016912:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016916:	f814 b006 	ldrb.w	fp, [r4, r6]
 801691a:	fb1b fb05 	smulbb	fp, fp, r5
 801691e:	eb08 0a09 	add.w	sl, r8, r9
 8016922:	f818 9009 	ldrb.w	r9, [r8, r9]
 8016926:	fb09 b90e 	mla	r9, r9, lr, fp
 801692a:	fa1f f989 	uxth.w	r9, r9
 801692e:	f109 0b01 	add.w	fp, r9, #1
 8016932:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016936:	ea4f 2929 	mov.w	r9, r9, asr #8
 801693a:	f804 9006 	strb.w	r9, [r4, r6]
 801693e:	4426      	add	r6, r4
 8016940:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016944:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016948:	fb1b fb05 	smulbb	fp, fp, r5
 801694c:	fb09 b90e 	mla	r9, r9, lr, fp
 8016950:	fa1f f989 	uxth.w	r9, r9
 8016954:	f109 0b01 	add.w	fp, r9, #1
 8016958:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801695c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016960:	f886 9001 	strb.w	r9, [r6, #1]
 8016964:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016968:	f896 a002 	ldrb.w	sl, [r6, #2]
 801696c:	fb1a fa05 	smulbb	sl, sl, r5
 8016970:	fb09 a90e 	mla	r9, r9, lr, sl
 8016974:	fa1f f989 	uxth.w	r9, r9
 8016978:	f109 0a01 	add.w	sl, r9, #1
 801697c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016980:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016984:	f886 9002 	strb.w	r9, [r6, #2]
 8016988:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801698a:	3701      	adds	r7, #1
 801698c:	4430      	add	r0, r6
 801698e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016990:	4432      	add	r2, r6
 8016992:	e767      	b.n	8016864 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8016994:	b003      	add	sp, #12
 8016996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801699a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801699a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80169a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80169a4:	9201      	str	r2, [sp, #4]
 80169a6:	6868      	ldr	r0, [r5, #4]
 80169a8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80169aa:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80169ae:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80169b2:	fb00 2404 	mla	r4, r0, r4, r2
 80169b6:	682a      	ldr	r2, [r5, #0]
 80169b8:	f8d7 8000 	ldr.w	r8, [r7]
 80169bc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80169c0:	4414      	add	r4, r2
 80169c2:	2900      	cmp	r1, #0
 80169c4:	dc03      	bgt.n	80169ce <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80169c6:	9a01      	ldr	r2, [sp, #4]
 80169c8:	2a00      	cmp	r2, #0
 80169ca:	f340 80af 	ble.w	8016b2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80169ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169d0:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80169d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80169d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169da:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80169de:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	dd0c      	ble.n	8016a00 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80169e6:	1405      	asrs	r5, r0, #16
 80169e8:	d405      	bmi.n	80169f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169ea:	4555      	cmp	r5, sl
 80169ec:	da03      	bge.n	80169f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169ee:	1415      	asrs	r5, r2, #16
 80169f0:	d401      	bmi.n	80169f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80169f2:	454d      	cmp	r5, r9
 80169f4:	db05      	blt.n	8016a02 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80169f6:	4470      	add	r0, lr
 80169f8:	4462      	add	r2, ip
 80169fa:	3b01      	subs	r3, #1
 80169fc:	3403      	adds	r4, #3
 80169fe:	e7f0      	b.n	80169e2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016a00:	d038      	beq.n	8016a74 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016a02:	1e5d      	subs	r5, r3, #1
 8016a04:	fb0e 0605 	mla	r6, lr, r5, r0
 8016a08:	1436      	asrs	r6, r6, #16
 8016a0a:	d42a      	bmi.n	8016a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a0c:	4556      	cmp	r6, sl
 8016a0e:	da28      	bge.n	8016a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a10:	fb0c 2505 	mla	r5, ip, r5, r2
 8016a14:	142d      	asrs	r5, r5, #16
 8016a16:	d424      	bmi.n	8016a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a18:	454d      	cmp	r5, r9
 8016a1a:	da22      	bge.n	8016a62 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016a1c:	1ce6      	adds	r6, r4, #3
 8016a1e:	4699      	mov	r9, r3
 8016a20:	f1b9 0f00 	cmp.w	r9, #0
 8016a24:	f106 0603 	add.w	r6, r6, #3
 8016a28:	dd1f      	ble.n	8016a6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016a2a:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016a2e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016a32:	1415      	asrs	r5, r2, #16
 8016a34:	4470      	add	r0, lr
 8016a36:	4462      	add	r2, ip
 8016a38:	f109 39ff 	add.w	r9, r9, #4294967295
 8016a3c:	fb0b a505 	mla	r5, fp, r5, sl
 8016a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a44:	eb08 0a05 	add.w	sl, r8, r5
 8016a48:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016a4c:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016a50:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016a54:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016a58:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016a5c:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016a60:	e7de      	b.n	8016a20 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016a62:	2600      	movs	r6, #0
 8016a64:	1b9d      	subs	r5, r3, r6
 8016a66:	2d00      	cmp	r5, #0
 8016a68:	dc38      	bgt.n	8016adc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a72:	441c      	add	r4, r3
 8016a74:	2900      	cmp	r1, #0
 8016a76:	dd59      	ble.n	8016b2c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016a78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a7e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016a82:	3901      	subs	r1, #1
 8016a84:	eeb0 6a62 	vmov.f32	s12, s5
 8016a88:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016a8c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016a90:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016a94:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016a98:	eeb0 6a43 	vmov.f32	s12, s6
 8016a9c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016aa0:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016aa4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016aa8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016aac:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016ab0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016ab4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016ab8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016abc:	ee12 2a90 	vmov	r2, s5
 8016ac0:	eef0 2a47 	vmov.f32	s5, s14
 8016ac4:	fb92 fef3 	sdiv	lr, r2, r3
 8016ac8:	ee13 2a10 	vmov	r2, s6
 8016acc:	eeb0 3a67 	vmov.f32	s6, s15
 8016ad0:	fb92 fcf3 	sdiv	ip, r2, r3
 8016ad4:	9a01      	ldr	r2, [sp, #4]
 8016ad6:	bf08      	it	eq
 8016ad8:	4613      	moveq	r3, r2
 8016ada:	e772      	b.n	80169c2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016adc:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016ae0:	d420      	bmi.n	8016b24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016ae2:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016ae6:	45cb      	cmp	fp, r9
 8016ae8:	dd1c      	ble.n	8016b24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016aea:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016aee:	d419      	bmi.n	8016b24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016af0:	68fd      	ldr	r5, [r7, #12]
 8016af2:	4555      	cmp	r5, sl
 8016af4:	dd16      	ble.n	8016b24 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016af6:	fa0f f58b 	sxth.w	r5, fp
 8016afa:	fb0a 9505 	mla	r5, sl, r5, r9
 8016afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b02:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016b06:	eb08 0b05 	add.w	fp, r8, r5
 8016b0a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016b0e:	f804 9005 	strb.w	r9, [r4, r5]
 8016b12:	4425      	add	r5, r4
 8016b14:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016b18:	f885 9001 	strb.w	r9, [r5, #1]
 8016b1c:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016b20:	f885 9002 	strb.w	r9, [r5, #2]
 8016b24:	4470      	add	r0, lr
 8016b26:	4462      	add	r2, ip
 8016b28:	3601      	adds	r6, #1
 8016b2a:	e79b      	b.n	8016a64 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016b2c:	b003      	add	sp, #12
 8016b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b32 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b36:	b085      	sub	sp, #20
 8016b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016b3e:	9202      	str	r2, [sp, #8]
 8016b40:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016b44:	6860      	ldr	r0, [r4, #4]
 8016b46:	9203      	str	r2, [sp, #12]
 8016b48:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016b4c:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016b50:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016b54:	fb00 2505 	mla	r5, r0, r5, r2
 8016b58:	6822      	ldr	r2, [r4, #0]
 8016b5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b5e:	4415      	add	r5, r2
 8016b60:	f8dc 2000 	ldr.w	r2, [ip]
 8016b64:	9201      	str	r2, [sp, #4]
 8016b66:	2900      	cmp	r1, #0
 8016b68:	dc03      	bgt.n	8016b72 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016b6a:	9a02      	ldr	r2, [sp, #8]
 8016b6c:	2a00      	cmp	r2, #0
 8016b6e:	f340 8122 	ble.w	8016db6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016b72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b74:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016b78:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b7e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016b82:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	dd0d      	ble.n	8016ba6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016b8a:	1422      	asrs	r2, r4, #16
 8016b8c:	d405      	bmi.n	8016b9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b8e:	4542      	cmp	r2, r8
 8016b90:	da03      	bge.n	8016b9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b92:	1402      	asrs	r2, r0, #16
 8016b94:	d401      	bmi.n	8016b9a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016b96:	42ba      	cmp	r2, r7
 8016b98:	db06      	blt.n	8016ba8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016b9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016b9c:	4474      	add	r4, lr
 8016b9e:	3b01      	subs	r3, #1
 8016ba0:	3503      	adds	r5, #3
 8016ba2:	4410      	add	r0, r2
 8016ba4:	e7ef      	b.n	8016b86 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016ba6:	d072      	beq.n	8016c8e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8016ba8:	1e5a      	subs	r2, r3, #1
 8016baa:	fb0e 4602 	mla	r6, lr, r2, r4
 8016bae:	1436      	asrs	r6, r6, #16
 8016bb0:	d462      	bmi.n	8016c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016bb2:	4546      	cmp	r6, r8
 8016bb4:	da60      	bge.n	8016c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016bb6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016bb8:	fb06 0202 	mla	r2, r6, r2, r0
 8016bbc:	1412      	asrs	r2, r2, #16
 8016bbe:	d45b      	bmi.n	8016c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016bc0:	42ba      	cmp	r2, r7
 8016bc2:	da59      	bge.n	8016c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016bc4:	1cef      	adds	r7, r5, #3
 8016bc6:	4699      	mov	r9, r3
 8016bc8:	f1b9 0f00 	cmp.w	r9, #0
 8016bcc:	dd5a      	ble.n	8016c84 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016bce:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016bd2:	1426      	asrs	r6, r4, #16
 8016bd4:	1402      	asrs	r2, r0, #16
 8016bd6:	fb08 6202 	mla	r2, r8, r2, r6
 8016bda:	9e01      	ldr	r6, [sp, #4]
 8016bdc:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016be0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016be4:	d041      	beq.n	8016c6a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016be6:	9a03      	ldr	r2, [sp, #12]
 8016be8:	fa5f fb86 	uxtb.w	fp, r6
 8016bec:	fb02 f808 	mul.w	r8, r2, r8
 8016bf0:	f108 0201 	add.w	r2, r8, #1
 8016bf4:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016bf8:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016bfc:	1212      	asrs	r2, r2, #8
 8016bfe:	fa1f fa82 	uxth.w	sl, r2
 8016c02:	43d2      	mvns	r2, r2
 8016c04:	fb1b fb0a 	smulbb	fp, fp, sl
 8016c08:	b2d2      	uxtb	r2, r2
 8016c0a:	fb08 b802 	mla	r8, r8, r2, fp
 8016c0e:	fa1f f888 	uxth.w	r8, r8
 8016c12:	f108 0b01 	add.w	fp, r8, #1
 8016c16:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016c1a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016c1e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016c22:	fb1b fb0a 	smulbb	fp, fp, sl
 8016c26:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c2a:	fb16 fa0a 	smulbb	sl, r6, sl
 8016c2e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016c32:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016c36:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016c3a:	fb06 aa02 	mla	sl, r6, r2, sl
 8016c3e:	fb08 b802 	mla	r8, r8, r2, fp
 8016c42:	fa1f fa8a 	uxth.w	sl, sl
 8016c46:	fa1f f888 	uxth.w	r8, r8
 8016c4a:	f10a 0601 	add.w	r6, sl, #1
 8016c4e:	f108 0b01 	add.w	fp, r8, #1
 8016c52:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016c56:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016c5a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016c5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c62:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016c66:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016c6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c6c:	4474      	add	r4, lr
 8016c6e:	3703      	adds	r7, #3
 8016c70:	f109 39ff 	add.w	r9, r9, #4294967295
 8016c74:	4410      	add	r0, r2
 8016c76:	e7a7      	b.n	8016bc8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016c78:	f04f 0800 	mov.w	r8, #0
 8016c7c:	eba3 0208 	sub.w	r2, r3, r8
 8016c80:	2a00      	cmp	r2, #0
 8016c82:	dc3b      	bgt.n	8016cfc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c8c:	441d      	add	r5, r3
 8016c8e:	2900      	cmp	r1, #0
 8016c90:	f340 8091 	ble.w	8016db6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016c94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c9e:	3901      	subs	r1, #1
 8016ca0:	eeb0 6a62 	vmov.f32	s12, s5
 8016ca4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016ca8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016cac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016cb0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016cb4:	eeb0 6a43 	vmov.f32	s12, s6
 8016cb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016cbc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016cc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016cc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016cc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016ccc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016cd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016cd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016cd8:	ee12 2a90 	vmov	r2, s5
 8016cdc:	eef0 2a47 	vmov.f32	s5, s14
 8016ce0:	fb92 fef3 	sdiv	lr, r2, r3
 8016ce4:	ee13 2a10 	vmov	r2, s6
 8016ce8:	eeb0 3a67 	vmov.f32	s6, s15
 8016cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8016cf0:	9a02      	ldr	r2, [sp, #8]
 8016cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8016cf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016cf6:	bf08      	it	eq
 8016cf8:	4613      	moveq	r3, r2
 8016cfa:	e734      	b.n	8016b66 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016cfc:	1427      	asrs	r7, r4, #16
 8016cfe:	d454      	bmi.n	8016daa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d00:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016d04:	42be      	cmp	r6, r7
 8016d06:	dd50      	ble.n	8016daa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d08:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016d0c:	d44d      	bmi.n	8016daa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016d12:	454a      	cmp	r2, r9
 8016d14:	dd49      	ble.n	8016daa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d16:	b236      	sxth	r6, r6
 8016d18:	9a01      	ldr	r2, [sp, #4]
 8016d1a:	fb09 7606 	mla	r6, r9, r6, r7
 8016d1e:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016d22:	0e3a      	lsrs	r2, r7, #24
 8016d24:	d041      	beq.n	8016daa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016d26:	9e03      	ldr	r6, [sp, #12]
 8016d28:	fa5f fb87 	uxtb.w	fp, r7
 8016d2c:	4372      	muls	r2, r6
 8016d2e:	1c56      	adds	r6, r2, #1
 8016d30:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016d34:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016d38:	1212      	asrs	r2, r2, #8
 8016d3a:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016d3e:	fa1f fa82 	uxth.w	sl, r2
 8016d42:	43d2      	mvns	r2, r2
 8016d44:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d48:	b2d2      	uxtb	r2, r2
 8016d4a:	fb09 b902 	mla	r9, r9, r2, fp
 8016d4e:	fa1f f989 	uxth.w	r9, r9
 8016d52:	f109 0b01 	add.w	fp, r9, #1
 8016d56:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016d5a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016d5e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016d62:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d66:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d6a:	fb17 fa0a 	smulbb	sl, r7, sl
 8016d6e:	f805 9006 	strb.w	r9, [r5, r6]
 8016d72:	442e      	add	r6, r5
 8016d74:	78b7      	ldrb	r7, [r6, #2]
 8016d76:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016d7a:	fb07 aa02 	mla	sl, r7, r2, sl
 8016d7e:	fb09 b902 	mla	r9, r9, r2, fp
 8016d82:	fa1f fa8a 	uxth.w	sl, sl
 8016d86:	fa1f f989 	uxth.w	r9, r9
 8016d8a:	f10a 0701 	add.w	r7, sl, #1
 8016d8e:	f109 0b01 	add.w	fp, r9, #1
 8016d92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016d96:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016d9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016da2:	f886 a002 	strb.w	sl, [r6, #2]
 8016da6:	f886 9001 	strb.w	r9, [r6, #1]
 8016daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016dac:	4474      	add	r4, lr
 8016dae:	f108 0801 	add.w	r8, r8, #1
 8016db2:	4410      	add	r0, r2
 8016db4:	e762      	b.n	8016c7c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016db6:	b005      	add	sp, #20
 8016db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dbc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016dc6:	9201      	str	r2, [sp, #4]
 8016dc8:	6860      	ldr	r0, [r4, #4]
 8016dca:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016dce:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8016dd2:	fb00 2505 	mla	r5, r0, r5, r2
 8016dd6:	6822      	ldr	r2, [r4, #0]
 8016dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ddc:	4415      	add	r5, r2
 8016dde:	f8dc 2000 	ldr.w	r2, [ip]
 8016de2:	9200      	str	r2, [sp, #0]
 8016de4:	2900      	cmp	r1, #0
 8016de6:	dc03      	bgt.n	8016df0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016de8:	9a01      	ldr	r2, [sp, #4]
 8016dea:	2a00      	cmp	r2, #0
 8016dec:	f340 812b 	ble.w	8017046 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016df2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016df6:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016dfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016dfc:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016e00:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	dd0e      	ble.n	8016e26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016e08:	1422      	asrs	r2, r4, #16
 8016e0a:	d405      	bmi.n	8016e18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e0c:	4572      	cmp	r2, lr
 8016e0e:	da03      	bge.n	8016e18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e10:	1402      	asrs	r2, r0, #16
 8016e12:	d401      	bmi.n	8016e18 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016e14:	42ba      	cmp	r2, r7
 8016e16:	db07      	blt.n	8016e28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e1a:	3b01      	subs	r3, #1
 8016e1c:	3503      	adds	r5, #3
 8016e1e:	4414      	add	r4, r2
 8016e20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e22:	4410      	add	r0, r2
 8016e24:	e7ee      	b.n	8016e04 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016e26:	d06f      	beq.n	8016f08 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016e28:	1e5a      	subs	r2, r3, #1
 8016e2a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016e2c:	fb06 4602 	mla	r6, r6, r2, r4
 8016e30:	1436      	asrs	r6, r6, #16
 8016e32:	d45e      	bmi.n	8016ef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016e34:	4576      	cmp	r6, lr
 8016e36:	da5c      	bge.n	8016ef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016e38:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016e3a:	fb06 0202 	mla	r2, r6, r2, r0
 8016e3e:	1412      	asrs	r2, r2, #16
 8016e40:	d457      	bmi.n	8016ef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016e42:	42ba      	cmp	r2, r7
 8016e44:	da55      	bge.n	8016ef2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016e46:	1cee      	adds	r6, r5, #3
 8016e48:	469a      	mov	sl, r3
 8016e4a:	f1ba 0f00 	cmp.w	sl, #0
 8016e4e:	dd56      	ble.n	8016efe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016e50:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016e54:	1427      	asrs	r7, r4, #16
 8016e56:	1402      	asrs	r2, r0, #16
 8016e58:	fb0e 7202 	mla	r2, lr, r2, r7
 8016e5c:	9f00      	ldr	r7, [sp, #0]
 8016e5e:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016e62:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016e66:	d03c      	beq.n	8016ee2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016e68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016e6c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016e70:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016e74:	fa5f f28e 	uxtb.w	r2, lr
 8016e78:	b2ff      	uxtb	r7, r7
 8016e7a:	f000 80dd 	beq.w	8017038 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016e7e:	fa1f f882 	uxth.w	r8, r2
 8016e82:	43d2      	mvns	r2, r2
 8016e84:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016e88:	fb17 f708 	smulbb	r7, r7, r8
 8016e8c:	b2d2      	uxtb	r2, r2
 8016e8e:	fb19 f908 	smulbb	r9, r9, r8
 8016e92:	fb0e 7702 	mla	r7, lr, r2, r7
 8016e96:	fb1b f808 	smulbb	r8, fp, r8
 8016e9a:	b2bf      	uxth	r7, r7
 8016e9c:	f107 0e01 	add.w	lr, r7, #1
 8016ea0:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016ea4:	123f      	asrs	r7, r7, #8
 8016ea6:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016eaa:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016eae:	fb07 9902 	mla	r9, r7, r2, r9
 8016eb2:	fa1f f989 	uxth.w	r9, r9
 8016eb6:	f109 0701 	add.w	r7, r9, #1
 8016eba:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016ebe:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016ec2:	fb07 8802 	mla	r8, r7, r2, r8
 8016ec6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016eca:	fa1f f888 	uxth.w	r8, r8
 8016ece:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016ed2:	f108 0201 	add.w	r2, r8, #1
 8016ed6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016eda:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016ede:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016ee2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016ee4:	3603      	adds	r6, #3
 8016ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016eea:	4414      	add	r4, r2
 8016eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016eee:	4410      	add	r0, r2
 8016ef0:	e7ab      	b.n	8016e4a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016ef2:	f04f 0e00 	mov.w	lr, #0
 8016ef6:	eba3 020e 	sub.w	r2, r3, lr
 8016efa:	2a00      	cmp	r2, #0
 8016efc:	dc3d      	bgt.n	8016f7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016efe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016f02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016f06:	441d      	add	r5, r3
 8016f08:	2900      	cmp	r1, #0
 8016f0a:	f340 809c 	ble.w	8017046 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f0e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016f18:	3901      	subs	r1, #1
 8016f1a:	eeb0 6a62 	vmov.f32	s12, s5
 8016f1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016f22:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f2a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016f2e:	eeb0 6a43 	vmov.f32	s12, s6
 8016f32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f36:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016f3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f42:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016f52:	ee12 2a90 	vmov	r2, s5
 8016f56:	eef0 2a47 	vmov.f32	s5, s14
 8016f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f5e:	ee13 2a10 	vmov	r2, s6
 8016f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f66:	eeb0 3a67 	vmov.f32	s6, s15
 8016f6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f6e:	9a01      	ldr	r2, [sp, #4]
 8016f70:	9310      	str	r3, [sp, #64]	; 0x40
 8016f72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f74:	bf08      	it	eq
 8016f76:	4613      	moveq	r3, r2
 8016f78:	e734      	b.n	8016de4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016f7a:	1427      	asrs	r7, r4, #16
 8016f7c:	d44d      	bmi.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016f7e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016f82:	42be      	cmp	r6, r7
 8016f84:	dd49      	ble.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016f86:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016f8a:	d446      	bmi.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016f8c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016f90:	4542      	cmp	r2, r8
 8016f92:	dd42      	ble.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016f94:	b236      	sxth	r6, r6
 8016f96:	9a00      	ldr	r2, [sp, #0]
 8016f98:	fb08 7606 	mla	r6, r8, r6, r7
 8016f9c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016fa0:	0e3a      	lsrs	r2, r7, #24
 8016fa2:	d03a      	beq.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016fa4:	2aff      	cmp	r2, #255	; 0xff
 8016fa6:	b2d6      	uxtb	r6, r2
 8016fa8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016fac:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016fb0:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016fb4:	b2ff      	uxtb	r7, r7
 8016fb6:	d037      	beq.n	8017028 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016fb8:	fa1f f986 	uxth.w	r9, r6
 8016fbc:	4472      	add	r2, lr
 8016fbe:	43f6      	mvns	r6, r6
 8016fc0:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016fc4:	fb17 f709 	smulbb	r7, r7, r9
 8016fc8:	fb1a fa09 	smulbb	sl, sl, r9
 8016fcc:	b2f6      	uxtb	r6, r6
 8016fce:	fb1b f909 	smulbb	r9, fp, r9
 8016fd2:	fb08 7706 	mla	r7, r8, r6, r7
 8016fd6:	b2bf      	uxth	r7, r7
 8016fd8:	f107 0801 	add.w	r8, r7, #1
 8016fdc:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016fe0:	123f      	asrs	r7, r7, #8
 8016fe2:	54af      	strb	r7, [r5, r2]
 8016fe4:	442a      	add	r2, r5
 8016fe6:	7857      	ldrb	r7, [r2, #1]
 8016fe8:	fb07 aa06 	mla	sl, r7, r6, sl
 8016fec:	fa1f fa8a 	uxth.w	sl, sl
 8016ff0:	f10a 0701 	add.w	r7, sl, #1
 8016ff4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016ff8:	7897      	ldrb	r7, [r2, #2]
 8016ffa:	fb07 9906 	mla	r9, r7, r6, r9
 8016ffe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017002:	fa1f f989 	uxth.w	r9, r9
 8017006:	f882 a001 	strb.w	sl, [r2, #1]
 801700a:	f109 0601 	add.w	r6, r9, #1
 801700e:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017012:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017016:	f882 9002 	strb.w	r9, [r2, #2]
 801701a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801701c:	f10e 0e01 	add.w	lr, lr, #1
 8017020:	4414      	add	r4, r2
 8017022:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017024:	4410      	add	r0, r2
 8017026:	e766      	b.n	8016ef6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017028:	4472      	add	r2, lr
 801702a:	54af      	strb	r7, [r5, r2]
 801702c:	442a      	add	r2, r5
 801702e:	f882 a001 	strb.w	sl, [r2, #1]
 8017032:	f882 b002 	strb.w	fp, [r2, #2]
 8017036:	e7f0      	b.n	801701a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017038:	f806 7c03 	strb.w	r7, [r6, #-3]
 801703c:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017040:	f806 bc01 	strb.w	fp, [r6, #-1]
 8017044:	e74d      	b.n	8016ee2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017046:	b003      	add	sp, #12
 8017048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801704c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017050:	b087      	sub	sp, #28
 8017052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017056:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017058:	9204      	str	r2, [sp, #16]
 801705a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801705e:	6860      	ldr	r0, [r4, #4]
 8017060:	9205      	str	r2, [sp, #20]
 8017062:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8017066:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801706a:	9101      	str	r1, [sp, #4]
 801706c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8017070:	fb00 2505 	mla	r5, r0, r5, r2
 8017074:	6822      	ldr	r2, [r4, #0]
 8017076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801707a:	4415      	add	r5, r2
 801707c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017080:	3201      	adds	r2, #1
 8017082:	f022 0201 	bic.w	r2, r2, #1
 8017086:	9202      	str	r2, [sp, #8]
 8017088:	f8dc 2000 	ldr.w	r2, [ip]
 801708c:	9203      	str	r2, [sp, #12]
 801708e:	9a01      	ldr	r2, [sp, #4]
 8017090:	2a00      	cmp	r2, #0
 8017092:	dc03      	bgt.n	801709c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017094:	9a04      	ldr	r2, [sp, #16]
 8017096:	2a00      	cmp	r2, #0
 8017098:	f340 8135 	ble.w	8017306 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801709c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801709e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80170a2:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80170a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80170a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80170ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	dd0d      	ble.n	80170d0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80170b4:	1422      	asrs	r2, r4, #16
 80170b6:	d405      	bmi.n	80170c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80170b8:	4542      	cmp	r2, r8
 80170ba:	da03      	bge.n	80170c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80170bc:	1402      	asrs	r2, r0, #16
 80170be:	d401      	bmi.n	80170c4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80170c0:	42ba      	cmp	r2, r7
 80170c2:	db06      	blt.n	80170d2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80170c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80170c6:	4474      	add	r4, lr
 80170c8:	3b01      	subs	r3, #1
 80170ca:	3503      	adds	r5, #3
 80170cc:	4410      	add	r0, r2
 80170ce:	e7ef      	b.n	80170b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80170d0:	d077      	beq.n	80171c2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80170d2:	1e5a      	subs	r2, r3, #1
 80170d4:	fb0e 4602 	mla	r6, lr, r2, r4
 80170d8:	1436      	asrs	r6, r6, #16
 80170da:	d469      	bmi.n	80171b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80170dc:	4546      	cmp	r6, r8
 80170de:	da67      	bge.n	80171b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80170e0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80170e2:	fb06 0202 	mla	r2, r6, r2, r0
 80170e6:	1412      	asrs	r2, r2, #16
 80170e8:	d462      	bmi.n	80171b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80170ea:	42ba      	cmp	r2, r7
 80170ec:	da60      	bge.n	80171b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80170ee:	1cee      	adds	r6, r5, #3
 80170f0:	4699      	mov	r9, r3
 80170f2:	f1b9 0f00 	cmp.w	r9, #0
 80170f6:	dd5f      	ble.n	80171b8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80170f8:	1422      	asrs	r2, r4, #16
 80170fa:	9902      	ldr	r1, [sp, #8]
 80170fc:	1407      	asrs	r7, r0, #16
 80170fe:	fb01 2707 	mla	r7, r1, r7, r2
 8017102:	9903      	ldr	r1, [sp, #12]
 8017104:	087a      	lsrs	r2, r7, #1
 8017106:	5c8a      	ldrb	r2, [r1, r2]
 8017108:	07f9      	lsls	r1, r7, #31
 801710a:	bf54      	ite	pl
 801710c:	f002 020f 	andpl.w	r2, r2, #15
 8017110:	1112      	asrmi	r2, r2, #4
 8017112:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017116:	b2d2      	uxtb	r2, r2
 8017118:	2a00      	cmp	r2, #0
 801711a:	d042      	beq.n	80171a2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801711c:	497b      	ldr	r1, [pc, #492]	; (801730c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801711e:	680f      	ldr	r7, [r1, #0]
 8017120:	9905      	ldr	r1, [sp, #20]
 8017122:	fa5f fb87 	uxtb.w	fp, r7
 8017126:	434a      	muls	r2, r1
 8017128:	f102 0801 	add.w	r8, r2, #1
 801712c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8017130:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8017134:	1212      	asrs	r2, r2, #8
 8017136:	fa1f fa82 	uxth.w	sl, r2
 801713a:	43d2      	mvns	r2, r2
 801713c:	fb1b fb0a 	smulbb	fp, fp, sl
 8017140:	b2d2      	uxtb	r2, r2
 8017142:	fb08 b802 	mla	r8, r8, r2, fp
 8017146:	fa1f f888 	uxth.w	r8, r8
 801714a:	f108 0b01 	add.w	fp, r8, #1
 801714e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017152:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017156:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801715a:	fb1b fb0a 	smulbb	fp, fp, sl
 801715e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017162:	fb17 fa0a 	smulbb	sl, r7, sl
 8017166:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801716a:	f806 8c03 	strb.w	r8, [r6, #-3]
 801716e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8017172:	fb07 aa02 	mla	sl, r7, r2, sl
 8017176:	fb08 b802 	mla	r8, r8, r2, fp
 801717a:	fa1f fa8a 	uxth.w	sl, sl
 801717e:	fa1f f888 	uxth.w	r8, r8
 8017182:	f10a 0701 	add.w	r7, sl, #1
 8017186:	f108 0b01 	add.w	fp, r8, #1
 801718a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801718e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017192:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017196:	ea4f 2828 	mov.w	r8, r8, asr #8
 801719a:	f806 ac01 	strb.w	sl, [r6, #-1]
 801719e:	f806 8c02 	strb.w	r8, [r6, #-2]
 80171a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80171a4:	4474      	add	r4, lr
 80171a6:	3603      	adds	r6, #3
 80171a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80171ac:	4410      	add	r0, r2
 80171ae:	e7a0      	b.n	80170f2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80171b0:	2700      	movs	r7, #0
 80171b2:	1bda      	subs	r2, r3, r7
 80171b4:	2a00      	cmp	r2, #0
 80171b6:	dc3e      	bgt.n	8017236 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80171b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80171bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80171c0:	441d      	add	r5, r3
 80171c2:	9b01      	ldr	r3, [sp, #4]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	f340 809e 	ble.w	8017306 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80171ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80171ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80171d4:	eeb0 6a62 	vmov.f32	s12, s5
 80171d8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80171dc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80171e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80171e8:	eeb0 6a43 	vmov.f32	s12, s6
 80171ec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171f0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80171f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80171f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80171fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017200:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017204:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017208:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801720c:	ee12 2a90 	vmov	r2, s5
 8017210:	eef0 2a47 	vmov.f32	s5, s14
 8017214:	fb92 fef3 	sdiv	lr, r2, r3
 8017218:	ee13 2a10 	vmov	r2, s6
 801721c:	eeb0 3a67 	vmov.f32	s6, s15
 8017220:	fb92 f3f3 	sdiv	r3, r2, r3
 8017224:	9314      	str	r3, [sp, #80]	; 0x50
 8017226:	9b01      	ldr	r3, [sp, #4]
 8017228:	9a04      	ldr	r2, [sp, #16]
 801722a:	3b01      	subs	r3, #1
 801722c:	9301      	str	r3, [sp, #4]
 801722e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017230:	bf08      	it	eq
 8017232:	4613      	moveq	r3, r2
 8017234:	e72b      	b.n	801708e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017236:	1426      	asrs	r6, r4, #16
 8017238:	d460      	bmi.n	80172fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801723a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801723e:	42b2      	cmp	r2, r6
 8017240:	dd5c      	ble.n	80172fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017242:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017246:	d459      	bmi.n	80172fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017248:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801724c:	4542      	cmp	r2, r8
 801724e:	dd55      	ble.n	80172fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017250:	9a02      	ldr	r2, [sp, #8]
 8017252:	9903      	ldr	r1, [sp, #12]
 8017254:	fb08 6602 	mla	r6, r8, r2, r6
 8017258:	0872      	lsrs	r2, r6, #1
 801725a:	07f6      	lsls	r6, r6, #31
 801725c:	5c8a      	ldrb	r2, [r1, r2]
 801725e:	bf54      	ite	pl
 8017260:	f002 020f 	andpl.w	r2, r2, #15
 8017264:	1112      	asrmi	r2, r2, #4
 8017266:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801726a:	b2d2      	uxtb	r2, r2
 801726c:	2a00      	cmp	r2, #0
 801726e:	d045      	beq.n	80172fc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017270:	4926      	ldr	r1, [pc, #152]	; (801730c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017272:	f8d1 8000 	ldr.w	r8, [r1]
 8017276:	9905      	ldr	r1, [sp, #20]
 8017278:	fa5f fb88 	uxtb.w	fp, r8
 801727c:	434a      	muls	r2, r1
 801727e:	1c56      	adds	r6, r2, #1
 8017280:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017284:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017288:	1212      	asrs	r2, r2, #8
 801728a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801728e:	fa1f fa82 	uxth.w	sl, r2
 8017292:	43d2      	mvns	r2, r2
 8017294:	fb1b fb0a 	smulbb	fp, fp, sl
 8017298:	b2d2      	uxtb	r2, r2
 801729a:	fb09 b902 	mla	r9, r9, r2, fp
 801729e:	fa1f f989 	uxth.w	r9, r9
 80172a2:	f109 0b01 	add.w	fp, r9, #1
 80172a6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80172aa:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80172ae:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80172b2:	fb1b fb0a 	smulbb	fp, fp, sl
 80172b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80172ba:	fb18 fa0a 	smulbb	sl, r8, sl
 80172be:	f805 9006 	strb.w	r9, [r5, r6]
 80172c2:	442e      	add	r6, r5
 80172c4:	f896 8002 	ldrb.w	r8, [r6, #2]
 80172c8:	f896 9001 	ldrb.w	r9, [r6, #1]
 80172cc:	fb08 aa02 	mla	sl, r8, r2, sl
 80172d0:	fb09 b902 	mla	r9, r9, r2, fp
 80172d4:	fa1f fa8a 	uxth.w	sl, sl
 80172d8:	fa1f f989 	uxth.w	r9, r9
 80172dc:	f10a 0801 	add.w	r8, sl, #1
 80172e0:	f109 0b01 	add.w	fp, r9, #1
 80172e4:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 80172e8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80172ec:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172f0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80172f4:	f886 a002 	strb.w	sl, [r6, #2]
 80172f8:	f886 9001 	strb.w	r9, [r6, #1]
 80172fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80172fe:	4474      	add	r4, lr
 8017300:	3701      	adds	r7, #1
 8017302:	4410      	add	r0, r2
 8017304:	e755      	b.n	80171b2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8017306:	b007      	add	sp, #28
 8017308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801730c:	2400f5a0 	.word	0x2400f5a0

08017310 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017314:	b085      	sub	sp, #20
 8017316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801731a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801731c:	9203      	str	r2, [sp, #12]
 801731e:	6860      	ldr	r0, [r4, #4]
 8017320:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8017324:	9100      	str	r1, [sp, #0]
 8017326:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801732a:	fb00 2606 	mla	r6, r0, r6, r2
 801732e:	6822      	ldr	r2, [r4, #0]
 8017330:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017334:	4416      	add	r6, r2
 8017336:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801733a:	3201      	adds	r2, #1
 801733c:	f022 0201 	bic.w	r2, r2, #1
 8017340:	9201      	str	r2, [sp, #4]
 8017342:	f8dc 2000 	ldr.w	r2, [ip]
 8017346:	9202      	str	r2, [sp, #8]
 8017348:	9a00      	ldr	r2, [sp, #0]
 801734a:	2a00      	cmp	r2, #0
 801734c:	dc03      	bgt.n	8017356 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801734e:	9a03      	ldr	r2, [sp, #12]
 8017350:	2a00      	cmp	r2, #0
 8017352:	f340 8140 	ble.w	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017358:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801735c:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8017360:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017362:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017366:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801736a:	2b00      	cmp	r3, #0
 801736c:	dd0e      	ble.n	801738c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801736e:	142a      	asrs	r2, r5, #16
 8017370:	d405      	bmi.n	801737e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017372:	4572      	cmp	r2, lr
 8017374:	da03      	bge.n	801737e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017376:	1422      	asrs	r2, r4, #16
 8017378:	d401      	bmi.n	801737e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801737a:	42ba      	cmp	r2, r7
 801737c:	db07      	blt.n	801738e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801737e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017380:	3b01      	subs	r3, #1
 8017382:	3603      	adds	r6, #3
 8017384:	4415      	add	r5, r2
 8017386:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017388:	4414      	add	r4, r2
 801738a:	e7ee      	b.n	801736a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801738c:	d072      	beq.n	8017474 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801738e:	1e5a      	subs	r2, r3, #1
 8017390:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017392:	fb00 5002 	mla	r0, r0, r2, r5
 8017396:	1400      	asrs	r0, r0, #16
 8017398:	d463      	bmi.n	8017462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801739a:	4570      	cmp	r0, lr
 801739c:	da61      	bge.n	8017462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801739e:	9812      	ldr	r0, [sp, #72]	; 0x48
 80173a0:	fb00 4202 	mla	r2, r0, r2, r4
 80173a4:	1412      	asrs	r2, r2, #16
 80173a6:	d45c      	bmi.n	8017462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80173a8:	42ba      	cmp	r2, r7
 80173aa:	da5a      	bge.n	8017462 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80173ac:	1cf0      	adds	r0, r6, #3
 80173ae:	469a      	mov	sl, r3
 80173b0:	f1ba 0f00 	cmp.w	sl, #0
 80173b4:	dd59      	ble.n	801746a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80173b6:	142a      	asrs	r2, r5, #16
 80173b8:	9901      	ldr	r1, [sp, #4]
 80173ba:	1427      	asrs	r7, r4, #16
 80173bc:	fb01 2707 	mla	r7, r1, r7, r2
 80173c0:	9902      	ldr	r1, [sp, #8]
 80173c2:	087a      	lsrs	r2, r7, #1
 80173c4:	5c8a      	ldrb	r2, [r1, r2]
 80173c6:	07f9      	lsls	r1, r7, #31
 80173c8:	bf54      	ite	pl
 80173ca:	f002 020f 	andpl.w	r2, r2, #15
 80173ce:	1112      	asrmi	r2, r2, #4
 80173d0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80173d4:	b2d2      	uxtb	r2, r2
 80173d6:	2a00      	cmp	r2, #0
 80173d8:	d03b      	beq.n	8017452 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80173da:	4980      	ldr	r1, [pc, #512]	; (80175dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80173dc:	2aff      	cmp	r2, #255	; 0xff
 80173de:	680f      	ldr	r7, [r1, #0]
 80173e0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80173e4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80173e8:	b2ff      	uxtb	r7, r7
 80173ea:	f000 80ed 	beq.w	80175c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 80173ee:	fa1f f882 	uxth.w	r8, r2
 80173f2:	43d2      	mvns	r2, r2
 80173f4:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80173f8:	fb17 f708 	smulbb	r7, r7, r8
 80173fc:	b2d2      	uxtb	r2, r2
 80173fe:	fb19 f908 	smulbb	r9, r9, r8
 8017402:	fb0e 7702 	mla	r7, lr, r2, r7
 8017406:	fb1b f808 	smulbb	r8, fp, r8
 801740a:	b2bf      	uxth	r7, r7
 801740c:	f107 0e01 	add.w	lr, r7, #1
 8017410:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017414:	123f      	asrs	r7, r7, #8
 8017416:	f800 7c03 	strb.w	r7, [r0, #-3]
 801741a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801741e:	fb07 9902 	mla	r9, r7, r2, r9
 8017422:	fa1f f989 	uxth.w	r9, r9
 8017426:	f109 0701 	add.w	r7, r9, #1
 801742a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801742e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017432:	fb07 8802 	mla	r8, r7, r2, r8
 8017436:	ea4f 2929 	mov.w	r9, r9, asr #8
 801743a:	fa1f f888 	uxth.w	r8, r8
 801743e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017442:	f108 0201 	add.w	r2, r8, #1
 8017446:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801744a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801744e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8017452:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017454:	3003      	adds	r0, #3
 8017456:	f10a 3aff 	add.w	sl, sl, #4294967295
 801745a:	4415      	add	r5, r2
 801745c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801745e:	4414      	add	r4, r2
 8017460:	e7a6      	b.n	80173b0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017462:	2700      	movs	r7, #0
 8017464:	1bda      	subs	r2, r3, r7
 8017466:	2a00      	cmp	r2, #0
 8017468:	dc40      	bgt.n	80174ec <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801746a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801746e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017472:	441e      	add	r6, r3
 8017474:	9b00      	ldr	r3, [sp, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	f340 80ad 	ble.w	80175d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801747c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017482:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017486:	eeb0 6a62 	vmov.f32	s12, s5
 801748a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801748e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017492:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017496:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801749a:	eeb0 6a43 	vmov.f32	s12, s6
 801749e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80174a2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80174a6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80174aa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80174ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80174b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80174b6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80174ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80174be:	ee12 2a90 	vmov	r2, s5
 80174c2:	eef0 2a47 	vmov.f32	s5, s14
 80174c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80174ca:	ee13 2a10 	vmov	r2, s6
 80174ce:	9311      	str	r3, [sp, #68]	; 0x44
 80174d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174d2:	eeb0 3a67 	vmov.f32	s6, s15
 80174d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80174da:	9312      	str	r3, [sp, #72]	; 0x48
 80174dc:	9b00      	ldr	r3, [sp, #0]
 80174de:	9a03      	ldr	r2, [sp, #12]
 80174e0:	3b01      	subs	r3, #1
 80174e2:	9300      	str	r3, [sp, #0]
 80174e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174e6:	bf08      	it	eq
 80174e8:	4613      	moveq	r3, r2
 80174ea:	e72d      	b.n	8017348 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80174ec:	1428      	asrs	r0, r5, #16
 80174ee:	d45c      	bmi.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80174f0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80174f4:	4282      	cmp	r2, r0
 80174f6:	dd58      	ble.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80174f8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80174fc:	d455      	bmi.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80174fe:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017502:	4572      	cmp	r2, lr
 8017504:	dd51      	ble.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017506:	9a01      	ldr	r2, [sp, #4]
 8017508:	9902      	ldr	r1, [sp, #8]
 801750a:	fb0e 0002 	mla	r0, lr, r2, r0
 801750e:	0842      	lsrs	r2, r0, #1
 8017510:	07c0      	lsls	r0, r0, #31
 8017512:	5c8a      	ldrb	r2, [r1, r2]
 8017514:	bf54      	ite	pl
 8017516:	f002 020f 	andpl.w	r2, r2, #15
 801751a:	1112      	asrmi	r2, r2, #4
 801751c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017520:	b2d2      	uxtb	r2, r2
 8017522:	2a00      	cmp	r2, #0
 8017524:	d041      	beq.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017526:	492d      	ldr	r1, [pc, #180]	; (80175dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017528:	2aff      	cmp	r2, #255	; 0xff
 801752a:	6808      	ldr	r0, [r1, #0]
 801752c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017530:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017534:	fa5f fe80 	uxtb.w	lr, r0
 8017538:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801753c:	d03b      	beq.n	80175b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801753e:	fa1f f982 	uxth.w	r9, r2
 8017542:	4438      	add	r0, r7
 8017544:	43d2      	mvns	r2, r2
 8017546:	f816 8000 	ldrb.w	r8, [r6, r0]
 801754a:	fb1e fe09 	smulbb	lr, lr, r9
 801754e:	fb1a fa09 	smulbb	sl, sl, r9
 8017552:	b2d2      	uxtb	r2, r2
 8017554:	fb1b f909 	smulbb	r9, fp, r9
 8017558:	fb08 ee02 	mla	lr, r8, r2, lr
 801755c:	fa1f fe8e 	uxth.w	lr, lr
 8017560:	f10e 0801 	add.w	r8, lr, #1
 8017564:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8017568:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801756c:	f806 e000 	strb.w	lr, [r6, r0]
 8017570:	4430      	add	r0, r6
 8017572:	f890 e001 	ldrb.w	lr, [r0, #1]
 8017576:	fb0e aa02 	mla	sl, lr, r2, sl
 801757a:	fa1f fa8a 	uxth.w	sl, sl
 801757e:	f10a 0e01 	add.w	lr, sl, #1
 8017582:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8017586:	f890 e002 	ldrb.w	lr, [r0, #2]
 801758a:	fb0e 9902 	mla	r9, lr, r2, r9
 801758e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017592:	fa1f f989 	uxth.w	r9, r9
 8017596:	f880 a001 	strb.w	sl, [r0, #1]
 801759a:	f109 0201 	add.w	r2, r9, #1
 801759e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80175a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80175a6:	f880 9002 	strb.w	r9, [r0, #2]
 80175aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80175ac:	3701      	adds	r7, #1
 80175ae:	4415      	add	r5, r2
 80175b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175b2:	4414      	add	r4, r2
 80175b4:	e756      	b.n	8017464 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80175b6:	4438      	add	r0, r7
 80175b8:	f806 e000 	strb.w	lr, [r6, r0]
 80175bc:	4430      	add	r0, r6
 80175be:	f880 a001 	strb.w	sl, [r0, #1]
 80175c2:	f880 b002 	strb.w	fp, [r0, #2]
 80175c6:	e7f0      	b.n	80175aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80175c8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80175cc:	f800 9c02 	strb.w	r9, [r0, #-2]
 80175d0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80175d4:	e73d      	b.n	8017452 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80175d6:	b005      	add	sp, #20
 80175d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175dc:	2400f5a0 	.word	0x2400f5a0

080175e0 <_ZN8touchgfx8LCD24bppD1Ev>:
 80175e0:	4770      	bx	lr

080175e2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80175e2:	4770      	bx	lr

080175e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80175e4:	4770      	bx	lr

080175e6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80175e6:	4770      	bx	lr

080175e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80175e8:	4770      	bx	lr

080175ea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80175ea:	4770      	bx	lr

080175ec <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80175ec:	4770      	bx	lr

080175ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80175ee:	4770      	bx	lr

080175f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80175f0:	4770      	bx	lr

080175f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80175f2:	4770      	bx	lr

080175f4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80175f4:	4770      	bx	lr

080175f6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80175f6:	4770      	bx	lr

080175f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 80175f8:	4770      	bx	lr

080175fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80175fa:	4770      	bx	lr

080175fc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80175fc:	4770      	bx	lr

080175fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80175fe:	4770      	bx	lr

08017600 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017600:	4770      	bx	lr

08017602 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8017602:	4770      	bx	lr

08017604 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8017604:	4770      	bx	lr

08017606 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8017606:	4770      	bx	lr

08017608 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017608:	4770      	bx	lr
	...

0801760c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801760c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801760e:	4606      	mov	r6, r0
 8017610:	b087      	sub	sp, #28
 8017612:	4615      	mov	r5, r2
 8017614:	461f      	mov	r7, r3
 8017616:	b353      	cbz	r3, 801766e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017618:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801761c:	2b00      	cmp	r3, #0
 801761e:	dd26      	ble.n	801766e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017620:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8017624:	2b00      	cmp	r3, #0
 8017626:	dd22      	ble.n	801766e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017628:	6808      	ldr	r0, [r1, #0]
 801762a:	aa04      	add	r2, sp, #16
 801762c:	6849      	ldr	r1, [r1, #4]
 801762e:	4c1b      	ldr	r4, [pc, #108]	; (801769c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017630:	c203      	stmia	r2!, {r0, r1}
 8017632:	a804      	add	r0, sp, #16
 8017634:	f7fa fef6 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017638:	6820      	ldr	r0, [r4, #0]
 801763a:	6803      	ldr	r3, [r0, #0]
 801763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801763e:	4798      	blx	r3
 8017640:	2fff      	cmp	r7, #255	; 0xff
 8017642:	d016      	beq.n	8017672 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8017644:	f010 0f08 	tst.w	r0, #8
 8017648:	6820      	ldr	r0, [r4, #0]
 801764a:	d015      	beq.n	8017678 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801764c:	2400      	movs	r4, #0
 801764e:	6801      	ldr	r1, [r0, #0]
 8017650:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8017654:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017658:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801765c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017660:	9401      	str	r4, [sp, #4]
 8017662:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8017666:	9400      	str	r4, [sp, #0]
 8017668:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801766a:	4629      	mov	r1, r5
 801766c:	47a0      	blx	r4
 801766e:	b007      	add	sp, #28
 8017670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017672:	f010 0f02 	tst.w	r0, #2
 8017676:	e7e7      	b.n	8017648 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8017678:	6803      	ldr	r3, [r0, #0]
 801767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801767c:	4798      	blx	r3
 801767e:	4b08      	ldr	r3, [pc, #32]	; (80176a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017680:	4601      	mov	r1, r0
 8017682:	4630      	mov	r0, r6
 8017684:	881a      	ldrh	r2, [r3, #0]
 8017686:	6833      	ldr	r3, [r6, #0]
 8017688:	e9cd 5700 	strd	r5, r7, [sp]
 801768c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801768e:	ab04      	add	r3, sp, #16
 8017690:	47a8      	blx	r5
 8017692:	6820      	ldr	r0, [r4, #0]
 8017694:	6803      	ldr	r3, [r0, #0]
 8017696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017698:	4798      	blx	r3
 801769a:	e7e8      	b.n	801766e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801769c:	2400f590 	.word	0x2400f590
 80176a0:	2400f58a 	.word	0x2400f58a

080176a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80176a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176a8:	b08b      	sub	sp, #44	; 0x2c
 80176aa:	460d      	mov	r5, r1
 80176ac:	4616      	mov	r6, r2
 80176ae:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80176b2:	f1b8 0f00 	cmp.w	r8, #0
 80176b6:	d047      	beq.n	8017748 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80176b8:	6810      	ldr	r0, [r2, #0]
 80176ba:	ac06      	add	r4, sp, #24
 80176bc:	6851      	ldr	r1, [r2, #4]
 80176be:	4f51      	ldr	r7, [pc, #324]	; (8017804 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80176c0:	c403      	stmia	r4!, {r0, r1}
 80176c2:	6818      	ldr	r0, [r3, #0]
 80176c4:	ac08      	add	r4, sp, #32
 80176c6:	6859      	ldr	r1, [r3, #4]
 80176c8:	c403      	stmia	r4!, {r0, r1}
 80176ca:	a806      	add	r0, sp, #24
 80176cc:	f7fa feaa 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176d0:	4631      	mov	r1, r6
 80176d2:	a808      	add	r0, sp, #32
 80176d4:	f7fa fece 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80176d8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80176dc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80176e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80176e4:	6838      	ldr	r0, [r7, #0]
 80176e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80176ea:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 80176ee:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 80176f2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80176f6:	440d      	add	r5, r1
 80176f8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80176fc:	440a      	add	r2, r1
 80176fe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017702:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017706:	4413      	add	r3, r2
 8017708:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801770c:	6803      	ldr	r3, [r0, #0]
 801770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017710:	4798      	blx	r3
 8017712:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017716:	d01a      	beq.n	801774e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017718:	f010 0f04 	tst.w	r0, #4
 801771c:	6838      	ldr	r0, [r7, #0]
 801771e:	d019      	beq.n	8017754 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017720:	2100      	movs	r1, #0
 8017722:	6807      	ldr	r7, [r0, #0]
 8017724:	b2a4      	uxth	r4, r4
 8017726:	f8cd 800c 	str.w	r8, [sp, #12]
 801772a:	b2b6      	uxth	r6, r6
 801772c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017730:	9401      	str	r4, [sp, #4]
 8017732:	9600      	str	r6, [sp, #0]
 8017734:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017738:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801773c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017740:	9102      	str	r1, [sp, #8]
 8017742:	4629      	mov	r1, r5
 8017744:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8017746:	47a0      	blx	r4
 8017748:	b00b      	add	sp, #44	; 0x2c
 801774a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801774e:	f010 0f01 	tst.w	r0, #1
 8017752:	e7e3      	b.n	801771c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8017754:	6803      	ldr	r3, [r0, #0]
 8017756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017758:	4798      	blx	r3
 801775a:	4a2b      	ldr	r2, [pc, #172]	; (8017808 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801775c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8017760:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8017764:	8813      	ldrh	r3, [r2, #0]
 8017766:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801776a:	fb03 f404 	mul.w	r4, r3, r4
 801776e:	fb03 c101 	mla	r1, r3, r1, ip
 8017772:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017776:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801777a:	4408      	add	r0, r1
 801777c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017780:	4404      	add	r4, r0
 8017782:	d02e      	beq.n	80177e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8017784:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8017788:	1b9b      	subs	r3, r3, r6
 801778a:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801778e:	1b96      	subs	r6, r2, r6
 8017790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017794:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017798:	42a0      	cmp	r0, r4
 801779a:	d22d      	bcs.n	80177f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801779c:	eb00 0e01 	add.w	lr, r0, r1
 80177a0:	4570      	cmp	r0, lr
 80177a2:	d210      	bcs.n	80177c6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80177a4:	f890 9000 	ldrb.w	r9, [r0]
 80177a8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80177ac:	fb19 f90c 	smulbb	r9, r9, ip
 80177b0:	fb02 9208 	mla	r2, r2, r8, r9
 80177b4:	b292      	uxth	r2, r2
 80177b6:	f102 0901 	add.w	r9, r2, #1
 80177ba:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80177be:	1212      	asrs	r2, r2, #8
 80177c0:	f800 2b01 	strb.w	r2, [r0], #1
 80177c4:	e7ec      	b.n	80177a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80177c6:	4418      	add	r0, r3
 80177c8:	4435      	add	r5, r6
 80177ca:	e7e5      	b.n	8017798 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80177cc:	8813      	ldrh	r3, [r2, #0]
 80177ce:	1b9b      	subs	r3, r3, r6
 80177d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177d4:	4418      	add	r0, r3
 80177d6:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80177da:	1b9b      	subs	r3, r3, r6
 80177dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177e0:	441d      	add	r5, r3
 80177e2:	42a0      	cmp	r0, r4
 80177e4:	d208      	bcs.n	80177f8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80177e6:	eb00 0c01 	add.w	ip, r0, r1
 80177ea:	4560      	cmp	r0, ip
 80177ec:	d2ee      	bcs.n	80177cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 80177ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177f2:	f800 3b01 	strb.w	r3, [r0], #1
 80177f6:	e7f8      	b.n	80177ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 80177f8:	6838      	ldr	r0, [r7, #0]
 80177fa:	6803      	ldr	r3, [r0, #0]
 80177fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177fe:	4798      	blx	r3
 8017800:	e7a2      	b.n	8017748 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8017802:	bf00      	nop
 8017804:	2400f590 	.word	0x2400f590
 8017808:	2400f58a 	.word	0x2400f58a

0801780c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801780c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801780e:	2300      	movs	r3, #0
 8017810:	b085      	sub	sp, #20
 8017812:	9300      	str	r3, [sp, #0]
 8017814:	4b41      	ldr	r3, [pc, #260]	; (801791c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d136      	bne.n	801788a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801781c:	4a40      	ldr	r2, [pc, #256]	; (8017920 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801781e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017822:	f8ad 2004 	strh.w	r2, [sp, #4]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d131      	bne.n	801788e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801782a:	4b3e      	ldr	r3, [pc, #248]	; (8017924 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801782c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017830:	ac02      	add	r4, sp, #8
 8017832:	6808      	ldr	r0, [r1, #0]
 8017834:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017838:	ab02      	add	r3, sp, #8
 801783a:	6849      	ldr	r1, [r1, #4]
 801783c:	4d3a      	ldr	r5, [pc, #232]	; (8017928 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801783e:	c303      	stmia	r3!, {r0, r1}
 8017840:	4669      	mov	r1, sp
 8017842:	4620      	mov	r0, r4
 8017844:	f7fa fe16 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017848:	4668      	mov	r0, sp
 801784a:	f7fa fdeb 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801784e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8017852:	f8bd 2000 	ldrh.w	r2, [sp]
 8017856:	462e      	mov	r6, r5
 8017858:	6828      	ldr	r0, [r5, #0]
 801785a:	4413      	add	r3, r2
 801785c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017860:	f8ad 3008 	strh.w	r3, [sp, #8]
 8017864:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017868:	4413      	add	r3, r2
 801786a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801786e:	6803      	ldr	r3, [r0, #0]
 8017870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017872:	4798      	blx	r3
 8017874:	f010 0f01 	tst.w	r0, #1
 8017878:	d00b      	beq.n	8017892 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801787a:	6828      	ldr	r0, [r5, #0]
 801787c:	6803      	ldr	r3, [r0, #0]
 801787e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017884:	4798      	blx	r3
 8017886:	b005      	add	sp, #20
 8017888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801788a:	4a26      	ldr	r2, [pc, #152]	; (8017924 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801788c:	e7c7      	b.n	801781e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801788e:	4b24      	ldr	r3, [pc, #144]	; (8017920 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017890:	e7cc      	b.n	801782c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017892:	6830      	ldr	r0, [r6, #0]
 8017894:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8017898:	6803      	ldr	r3, [r0, #0]
 801789a:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178a0:	4798      	blx	r3
 80178a2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80178a6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80178aa:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80178ae:	fb14 3402 	smlabb	r4, r4, r2, r3
 80178b2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80178b6:	4404      	add	r4, r0
 80178b8:	6830      	ldr	r0, [r6, #0]
 80178ba:	6803      	ldr	r3, [r0, #0]
 80178bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178be:	4798      	blx	r3
 80178c0:	4917      	ldr	r1, [pc, #92]	; (8017920 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80178c2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80178c6:	880b      	ldrh	r3, [r1, #0]
 80178c8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80178cc:	fb03 c202 	mla	r2, r3, r2, ip
 80178d0:	437b      	muls	r3, r7
 80178d2:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80178d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80178da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80178de:	4410      	add	r0, r2
 80178e0:	18c2      	adds	r2, r0, r3
 80178e2:	4290      	cmp	r0, r2
 80178e4:	d214      	bcs.n	8017910 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 80178e6:	eb00 0c07 	add.w	ip, r0, r7
 80178ea:	4560      	cmp	r0, ip
 80178ec:	d204      	bcs.n	80178f8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 80178ee:	f814 3b01 	ldrb.w	r3, [r4], #1
 80178f2:	f800 3b01 	strb.w	r3, [r0], #1
 80178f6:	e7f8      	b.n	80178ea <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 80178f8:	880b      	ldrh	r3, [r1, #0]
 80178fa:	1b5b      	subs	r3, r3, r5
 80178fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017900:	4418      	add	r0, r3
 8017902:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8017906:	1b5b      	subs	r3, r3, r5
 8017908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801790c:	441c      	add	r4, r3
 801790e:	e7e8      	b.n	80178e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017910:	6830      	ldr	r0, [r6, #0]
 8017912:	6803      	ldr	r3, [r0, #0]
 8017914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017916:	4798      	blx	r3
 8017918:	e7b5      	b.n	8017886 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801791a:	bf00      	nop
 801791c:	2400f588 	.word	0x2400f588
 8017920:	2400f58a 	.word	0x2400f58a
 8017924:	2400f58c 	.word	0x2400f58c
 8017928:	2400f590 	.word	0x2400f590

0801792c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017930:	b089      	sub	sp, #36	; 0x24
 8017932:	4607      	mov	r7, r0
 8017934:	4689      	mov	r9, r1
 8017936:	4692      	mov	sl, r2
 8017938:	ac08      	add	r4, sp, #32
 801793a:	461e      	mov	r6, r3
 801793c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017940:	4620      	mov	r0, r4
 8017942:	f7fe f8ef 	bl	8015b24 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	4605      	mov	r5, r0
 801794a:	4620      	mov	r0, r4
 801794c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017950:	f7fe f834 	bl	80159bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017954:	4683      	mov	fp, r0
 8017956:	4620      	mov	r0, r4
 8017958:	f7fe f864 	bl	8015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801795c:	4653      	mov	r3, sl
 801795e:	464a      	mov	r2, r9
 8017960:	4639      	mov	r1, r7
 8017962:	9500      	str	r5, [sp, #0]
 8017964:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017968:	a806      	add	r0, sp, #24
 801796a:	47c0      	blx	r8
 801796c:	a906      	add	r1, sp, #24
 801796e:	4630      	mov	r0, r6
 8017970:	f7fd ff08 	bl	8015784 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8017974:	4628      	mov	r0, r5
 8017976:	b009      	add	sp, #36	; 0x24
 8017978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801797c <_ZN8touchgfx8LCD24bppD0Ev>:
 801797c:	b510      	push	{r4, lr}
 801797e:	4604      	mov	r4, r0
 8017980:	2158      	movs	r1, #88	; 0x58
 8017982:	f006 fc18 	bl	801e1b6 <_ZdlPvj>
 8017986:	4620      	mov	r0, r4
 8017988:	bd10      	pop	{r4, pc}

0801798a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801798a:	b510      	push	{r4, lr}
 801798c:	4604      	mov	r4, r0
 801798e:	2104      	movs	r1, #4
 8017990:	f006 fc11 	bl	801e1b6 <_ZdlPvj>
 8017994:	4620      	mov	r0, r4
 8017996:	bd10      	pop	{r4, pc}

08017998 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017998:	b510      	push	{r4, lr}
 801799a:	4604      	mov	r4, r0
 801799c:	2104      	movs	r1, #4
 801799e:	f006 fc0a 	bl	801e1b6 <_ZdlPvj>
 80179a2:	4620      	mov	r0, r4
 80179a4:	bd10      	pop	{r4, pc}

080179a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80179a6:	b510      	push	{r4, lr}
 80179a8:	4604      	mov	r4, r0
 80179aa:	2104      	movs	r1, #4
 80179ac:	f006 fc03 	bl	801e1b6 <_ZdlPvj>
 80179b0:	4620      	mov	r0, r4
 80179b2:	bd10      	pop	{r4, pc}

080179b4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80179b4:	b510      	push	{r4, lr}
 80179b6:	4604      	mov	r4, r0
 80179b8:	2104      	movs	r1, #4
 80179ba:	f006 fbfc 	bl	801e1b6 <_ZdlPvj>
 80179be:	4620      	mov	r0, r4
 80179c0:	bd10      	pop	{r4, pc}

080179c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80179c2:	b510      	push	{r4, lr}
 80179c4:	4604      	mov	r4, r0
 80179c6:	2104      	movs	r1, #4
 80179c8:	f006 fbf5 	bl	801e1b6 <_ZdlPvj>
 80179cc:	4620      	mov	r0, r4
 80179ce:	bd10      	pop	{r4, pc}

080179d0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80179d0:	b510      	push	{r4, lr}
 80179d2:	4604      	mov	r4, r0
 80179d4:	2104      	movs	r1, #4
 80179d6:	f006 fbee 	bl	801e1b6 <_ZdlPvj>
 80179da:	4620      	mov	r0, r4
 80179dc:	bd10      	pop	{r4, pc}

080179de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80179de:	b510      	push	{r4, lr}
 80179e0:	4604      	mov	r4, r0
 80179e2:	2104      	movs	r1, #4
 80179e4:	f006 fbe7 	bl	801e1b6 <_ZdlPvj>
 80179e8:	4620      	mov	r0, r4
 80179ea:	bd10      	pop	{r4, pc}

080179ec <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80179ec:	b510      	push	{r4, lr}
 80179ee:	4604      	mov	r4, r0
 80179f0:	2104      	movs	r1, #4
 80179f2:	f006 fbe0 	bl	801e1b6 <_ZdlPvj>
 80179f6:	4620      	mov	r0, r4
 80179f8:	bd10      	pop	{r4, pc}

080179fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80179fa:	b510      	push	{r4, lr}
 80179fc:	4604      	mov	r4, r0
 80179fe:	2104      	movs	r1, #4
 8017a00:	f006 fbd9 	bl	801e1b6 <_ZdlPvj>
 8017a04:	4620      	mov	r0, r4
 8017a06:	bd10      	pop	{r4, pc}

08017a08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	2104      	movs	r1, #4
 8017a0e:	f006 fbd2 	bl	801e1b6 <_ZdlPvj>
 8017a12:	4620      	mov	r0, r4
 8017a14:	bd10      	pop	{r4, pc}

08017a16 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017a16:	b510      	push	{r4, lr}
 8017a18:	4604      	mov	r4, r0
 8017a1a:	2104      	movs	r1, #4
 8017a1c:	f006 fbcb 	bl	801e1b6 <_ZdlPvj>
 8017a20:	4620      	mov	r0, r4
 8017a22:	bd10      	pop	{r4, pc}

08017a24 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017a24:	b510      	push	{r4, lr}
 8017a26:	4604      	mov	r4, r0
 8017a28:	2104      	movs	r1, #4
 8017a2a:	f006 fbc4 	bl	801e1b6 <_ZdlPvj>
 8017a2e:	4620      	mov	r0, r4
 8017a30:	bd10      	pop	{r4, pc}

08017a32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017a32:	b510      	push	{r4, lr}
 8017a34:	4604      	mov	r4, r0
 8017a36:	2104      	movs	r1, #4
 8017a38:	f006 fbbd 	bl	801e1b6 <_ZdlPvj>
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	bd10      	pop	{r4, pc}

08017a40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017a40:	b510      	push	{r4, lr}
 8017a42:	4604      	mov	r4, r0
 8017a44:	2104      	movs	r1, #4
 8017a46:	f006 fbb6 	bl	801e1b6 <_ZdlPvj>
 8017a4a:	4620      	mov	r0, r4
 8017a4c:	bd10      	pop	{r4, pc}

08017a4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017a4e:	b510      	push	{r4, lr}
 8017a50:	4604      	mov	r4, r0
 8017a52:	2104      	movs	r1, #4
 8017a54:	f006 fbaf 	bl	801e1b6 <_ZdlPvj>
 8017a58:	4620      	mov	r0, r4
 8017a5a:	bd10      	pop	{r4, pc}

08017a5c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017a5c:	b510      	push	{r4, lr}
 8017a5e:	4604      	mov	r4, r0
 8017a60:	2104      	movs	r1, #4
 8017a62:	f006 fba8 	bl	801e1b6 <_ZdlPvj>
 8017a66:	4620      	mov	r0, r4
 8017a68:	bd10      	pop	{r4, pc}

08017a6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	4604      	mov	r4, r0
 8017a6e:	2104      	movs	r1, #4
 8017a70:	f006 fba1 	bl	801e1b6 <_ZdlPvj>
 8017a74:	4620      	mov	r0, r4
 8017a76:	bd10      	pop	{r4, pc}

08017a78 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017a78:	b510      	push	{r4, lr}
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	2104      	movs	r1, #4
 8017a7e:	f006 fb9a 	bl	801e1b6 <_ZdlPvj>
 8017a82:	4620      	mov	r0, r4
 8017a84:	bd10      	pop	{r4, pc}

08017a86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017a86:	b510      	push	{r4, lr}
 8017a88:	4604      	mov	r4, r0
 8017a8a:	2104      	movs	r1, #4
 8017a8c:	f006 fb93 	bl	801e1b6 <_ZdlPvj>
 8017a90:	4620      	mov	r0, r4
 8017a92:	bd10      	pop	{r4, pc}

08017a94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017a94:	b510      	push	{r4, lr}
 8017a96:	4604      	mov	r4, r0
 8017a98:	2104      	movs	r1, #4
 8017a9a:	f006 fb8c 	bl	801e1b6 <_ZdlPvj>
 8017a9e:	4620      	mov	r0, r4
 8017aa0:	bd10      	pop	{r4, pc}

08017aa2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8017aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aa6:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8017aaa:	9c06      	ldr	r4, [sp, #24]
 8017aac:	2800      	cmp	r0, #0
 8017aae:	d06e      	beq.n	8017b8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017ab0:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8017ab4:	2d00      	cmp	r5, #0
 8017ab6:	dd6a      	ble.n	8017b8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017ab8:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8017abc:	f1bc 0f00 	cmp.w	ip, #0
 8017ac0:	dd65      	ble.n	8017b8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017ac2:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8017ac6:	28ff      	cmp	r0, #255	; 0xff
 8017ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017acc:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017ad0:	fb02 3306 	mla	r3, r2, r6, r3
 8017ad4:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8017ad8:	b2e4      	uxtb	r4, r4
 8017ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ade:	4419      	add	r1, r3
 8017ae0:	fb02 f30c 	mul.w	r3, r2, ip
 8017ae4:	eba2 0205 	sub.w	r2, r2, r5
 8017ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017aec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017af4:	440b      	add	r3, r1
 8017af6:	d03e      	beq.n	8017b76 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8017af8:	fa1f fc80 	uxth.w	ip, r0
 8017afc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017b00:	fb06 f60c 	mul.w	r6, r6, ip
 8017b04:	b280      	uxth	r0, r0
 8017b06:	fb07 f70c 	mul.w	r7, r7, ip
 8017b0a:	fb04 f40c 	mul.w	r4, r4, ip
 8017b0e:	4299      	cmp	r1, r3
 8017b10:	d23d      	bcs.n	8017b8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017b12:	eb01 0c05 	add.w	ip, r1, r5
 8017b16:	458c      	cmp	ip, r1
 8017b18:	f101 0e03 	add.w	lr, r1, #3
 8017b1c:	d928      	bls.n	8017b70 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8017b1e:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017b22:	fb11 f100 	smulbb	r1, r1, r0
 8017b26:	4421      	add	r1, r4
 8017b28:	b289      	uxth	r1, r1
 8017b2a:	f101 0801 	add.w	r8, r1, #1
 8017b2e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017b32:	1209      	asrs	r1, r1, #8
 8017b34:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8017b38:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8017b3c:	fb11 f100 	smulbb	r1, r1, r0
 8017b40:	4439      	add	r1, r7
 8017b42:	b289      	uxth	r1, r1
 8017b44:	f101 0801 	add.w	r8, r1, #1
 8017b48:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017b4c:	1209      	asrs	r1, r1, #8
 8017b4e:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8017b52:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8017b56:	fb11 f100 	smulbb	r1, r1, r0
 8017b5a:	4431      	add	r1, r6
 8017b5c:	b289      	uxth	r1, r1
 8017b5e:	f101 0801 	add.w	r8, r1, #1
 8017b62:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017b66:	1209      	asrs	r1, r1, #8
 8017b68:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8017b6c:	4671      	mov	r1, lr
 8017b6e:	e7d2      	b.n	8017b16 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8017b70:	4411      	add	r1, r2
 8017b72:	e7cc      	b.n	8017b0e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8017b74:	4411      	add	r1, r2
 8017b76:	4299      	cmp	r1, r3
 8017b78:	d209      	bcs.n	8017b8e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017b7a:	1948      	adds	r0, r1, r5
 8017b7c:	4281      	cmp	r1, r0
 8017b7e:	d2f9      	bcs.n	8017b74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8017b80:	700c      	strb	r4, [r1, #0]
 8017b82:	3103      	adds	r1, #3
 8017b84:	f801 7c02 	strb.w	r7, [r1, #-2]
 8017b88:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017b8c:	e7f6      	b.n	8017b7c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8017b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017b94 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8017b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b98:	b093      	sub	sp, #76	; 0x4c
 8017b9a:	4699      	mov	r9, r3
 8017b9c:	4617      	mov	r7, r2
 8017b9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ba2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8017ba6:	4604      	mov	r4, r0
 8017ba8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017bac:	a80c      	add	r0, sp, #48	; 0x30
 8017bae:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8017bb2:	460d      	mov	r5, r1
 8017bb4:	4649      	mov	r1, r9
 8017bb6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017bba:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017bbe:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8017bc2:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8017bc6:	f7f5 fbd5 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8017bca:	4639      	mov	r1, r7
 8017bcc:	a80c      	add	r0, sp, #48	; 0x30
 8017bce:	f7f5 fbd1 	bl	800d374 <_ZN8touchgfx4RectaNERKS0_>
 8017bd2:	4b78      	ldr	r3, [pc, #480]	; (8017db4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8017bd4:	8818      	ldrh	r0, [r3, #0]
 8017bd6:	4b78      	ldr	r3, [pc, #480]	; (8017db8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8017bd8:	b202      	sxth	r2, r0
 8017bda:	8819      	ldrh	r1, [r3, #0]
 8017bdc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017be0:	b20f      	sxth	r7, r1
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	da07      	bge.n	8017bf6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8017be6:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8017bea:	4463      	add	r3, ip
 8017bec:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017bf6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017bfa:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8017bfe:	1ad2      	subs	r2, r2, r3
 8017c00:	4594      	cmp	ip, r2
 8017c02:	bfc4      	itt	gt
 8017c04:	1ac2      	subgt	r2, r0, r3
 8017c06:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8017c0a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017c0e:	2a00      	cmp	r2, #0
 8017c10:	da07      	bge.n	8017c22 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8017c12:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8017c16:	4462      	add	r2, ip
 8017c18:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017c22:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017c26:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8017c2a:	1abf      	subs	r7, r7, r2
 8017c2c:	45bc      	cmp	ip, r7
 8017c2e:	f8df c190 	ldr.w	ip, [pc, #400]	; 8017dc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8017c32:	bfc8      	it	gt
 8017c34:	1a8f      	subgt	r7, r1, r2
 8017c36:	f89c c000 	ldrb.w	ip, [ip]
 8017c3a:	bfc8      	it	gt
 8017c3c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8017c40:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8017c44:	f1bc 0f00 	cmp.w	ip, #0
 8017c48:	d176      	bne.n	8017d38 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8017c4a:	4287      	cmp	r7, r0
 8017c4c:	bf14      	ite	ne
 8017c4e:	2100      	movne	r1, #0
 8017c50:	2101      	moveq	r1, #1
 8017c52:	2f00      	cmp	r7, #0
 8017c54:	9107      	str	r1, [sp, #28]
 8017c56:	dd73      	ble.n	8017d40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017c58:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8017c5c:	2900      	cmp	r1, #0
 8017c5e:	9104      	str	r1, [sp, #16]
 8017c60:	dd6e      	ble.n	8017d40 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017c62:	f8b9 1000 	ldrh.w	r1, [r9]
 8017c66:	a80e      	add	r0, sp, #56	; 0x38
 8017c68:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8017c6c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8017c70:	1a5b      	subs	r3, r3, r1
 8017c72:	a910      	add	r1, sp, #64	; 0x40
 8017c74:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8017c78:	b21b      	sxth	r3, r3
 8017c7a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8017c7e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8017dc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017c82:	9305      	str	r3, [sp, #20]
 8017c84:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8017c88:	1ad2      	subs	r2, r2, r3
 8017c8a:	b213      	sxth	r3, r2
 8017c8c:	9306      	str	r3, [sp, #24]
 8017c8e:	9b05      	ldr	r3, [sp, #20]
 8017c90:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017c94:	9b06      	ldr	r3, [sp, #24]
 8017c96:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017c9a:	9b04      	ldr	r3, [sp, #16]
 8017c9c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8017ca4:	f7fa fbe6 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ca8:	4640      	mov	r0, r8
 8017caa:	f7fa fbbb 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017cae:	a810      	add	r0, sp, #64	; 0x40
 8017cb0:	f7fa fbb8 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017cb4:	4b41      	ldr	r3, [pc, #260]	; (8017dbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8017cb6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8017cba:	4628      	mov	r0, r5
 8017cbc:	881b      	ldrh	r3, [r3, #0]
 8017cbe:	9308      	str	r3, [sp, #32]
 8017cc0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017cc4:	b21b      	sxth	r3, r3
 8017cc6:	9303      	str	r3, [sp, #12]
 8017cc8:	682b      	ldr	r3, [r5, #0]
 8017cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ccc:	4798      	blx	r3
 8017cce:	9a03      	ldr	r2, [sp, #12]
 8017cd0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017cd4:	4681      	mov	r9, r0
 8017cd6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017cda:	fb13 f302 	smulbb	r3, r3, r2
 8017cde:	2203      	movs	r2, #3
 8017ce0:	f8da 0000 	ldr.w	r0, [sl]
 8017ce4:	fb15 3302 	smlabb	r3, r5, r2, r3
 8017ce8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017cea:	920b      	str	r2, [sp, #44]	; 0x2c
 8017cec:	441d      	add	r5, r3
 8017cee:	6803      	ldr	r3, [r0, #0]
 8017cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cf2:	4798      	blx	r3
 8017cf4:	9009      	str	r0, [sp, #36]	; 0x24
 8017cf6:	f8da 0000 	ldr.w	r0, [sl]
 8017cfa:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017cfe:	6803      	ldr	r3, [r0, #0]
 8017d00:	910a      	str	r1, [sp, #40]	; 0x28
 8017d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017d04:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017d08:	4798      	blx	r3
 8017d0a:	f010 0f01 	tst.w	r0, #1
 8017d0e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017d12:	d01e      	beq.n	8017d52 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8017d14:	f8da 0000 	ldr.w	r0, [sl]
 8017d18:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8017d1c:	6803      	ldr	r3, [r0, #0]
 8017d1e:	9200      	str	r2, [sp, #0]
 8017d20:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017d22:	462b      	mov	r3, r5
 8017d24:	e898 0006 	ldmia.w	r8, {r1, r2}
 8017d28:	47b0      	blx	r6
 8017d2a:	9b05      	ldr	r3, [sp, #20]
 8017d2c:	80a7      	strh	r7, [r4, #4]
 8017d2e:	8023      	strh	r3, [r4, #0]
 8017d30:	9b06      	ldr	r3, [sp, #24]
 8017d32:	8063      	strh	r3, [r4, #2]
 8017d34:	9b04      	ldr	r3, [sp, #16]
 8017d36:	e007      	b.n	8017d48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8017d38:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8017d3c:	4288      	cmp	r0, r1
 8017d3e:	e785      	b.n	8017c4c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8017d40:	2300      	movs	r3, #0
 8017d42:	8023      	strh	r3, [r4, #0]
 8017d44:	8063      	strh	r3, [r4, #2]
 8017d46:	80a3      	strh	r3, [r4, #4]
 8017d48:	4620      	mov	r0, r4
 8017d4a:	80e3      	strh	r3, [r4, #6]
 8017d4c:	b013      	add	sp, #76	; 0x4c
 8017d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d52:	fb09 f606 	mul.w	r6, r9, r6
 8017d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d58:	fb11 6602 	smlabb	r6, r1, r2, r6
 8017d5c:	9a07      	ldr	r2, [sp, #28]
 8017d5e:	4433      	add	r3, r6
 8017d60:	461e      	mov	r6, r3
 8017d62:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017d66:	b16a      	cbz	r2, 8017d84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017d68:	9a08      	ldr	r2, [sp, #32]
 8017d6a:	4593      	cmp	fp, r2
 8017d6c:	d10a      	bne.n	8017d84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017d6e:	f8da 0000 	ldr.w	r0, [sl]
 8017d72:	fb09 f303 	mul.w	r3, r9, r3
 8017d76:	4629      	mov	r1, r5
 8017d78:	6802      	ldr	r2, [r0, #0]
 8017d7a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017d7e:	4632      	mov	r2, r6
 8017d80:	47d0      	blx	sl
 8017d82:	e7d2      	b.n	8017d2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017d84:	9a03      	ldr	r2, [sp, #12]
 8017d86:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8017dc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017d8a:	fb02 5803 	mla	r8, r2, r3, r5
 8017d8e:	4545      	cmp	r5, r8
 8017d90:	d2cb      	bcs.n	8017d2a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017d92:	f8db 0000 	ldr.w	r0, [fp]
 8017d96:	4629      	mov	r1, r5
 8017d98:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017d9c:	6802      	ldr	r2, [r0, #0]
 8017d9e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017da2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017da6:	4632      	mov	r2, r6
 8017da8:	47d0      	blx	sl
 8017daa:	9b03      	ldr	r3, [sp, #12]
 8017dac:	444e      	add	r6, r9
 8017dae:	441d      	add	r5, r3
 8017db0:	e7ed      	b.n	8017d8e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8017db2:	bf00      	nop
 8017db4:	2400f584 	.word	0x2400f584
 8017db8:	2400f586 	.word	0x2400f586
 8017dbc:	2400f58a 	.word	0x2400f58a
 8017dc0:	2400f588 	.word	0x2400f588
 8017dc4:	2400f590 	.word	0x2400f590

08017dc8 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017dc8:	2200      	movs	r2, #0
 8017dca:	490c      	ldr	r1, [pc, #48]	; (8017dfc <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017dcc:	6042      	str	r2, [r0, #4]
 8017dce:	6001      	str	r1, [r0, #0]
 8017dd0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017dd4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017dd8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017ddc:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017de0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017de4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017de8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017dec:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017df0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017df4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017df8:	4770      	bx	lr
 8017dfa:	bf00      	nop
 8017dfc:	08023420 	.word	0x08023420

08017e00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e04:	b091      	sub	sp, #68	; 0x44
 8017e06:	4607      	mov	r7, r0
 8017e08:	4688      	mov	r8, r1
 8017e0a:	6810      	ldr	r0, [r2, #0]
 8017e0c:	6851      	ldr	r1, [r2, #4]
 8017e0e:	ac0c      	add	r4, sp, #48	; 0x30
 8017e10:	4616      	mov	r6, r2
 8017e12:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017e16:	4d64      	ldr	r5, [pc, #400]	; (8017fa8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017e18:	f8df a190 	ldr.w	sl, [pc, #400]	; 8017fac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8017e1c:	c403      	stmia	r4!, {r0, r1}
 8017e1e:	6818      	ldr	r0, [r3, #0]
 8017e20:	ac0e      	add	r4, sp, #56	; 0x38
 8017e22:	6859      	ldr	r1, [r3, #4]
 8017e24:	c403      	stmia	r4!, {r0, r1}
 8017e26:	a80c      	add	r0, sp, #48	; 0x30
 8017e28:	f7fa fafc 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e2c:	4631      	mov	r1, r6
 8017e2e:	a80e      	add	r0, sp, #56	; 0x38
 8017e30:	f7fa fb20 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e34:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017e38:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e3c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017e40:	6828      	ldr	r0, [r5, #0]
 8017e42:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017e46:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017e4a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017e4e:	440f      	add	r7, r1
 8017e50:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017e54:	440a      	add	r2, r1
 8017e56:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017e5a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017e5e:	4413      	add	r3, r2
 8017e60:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017e64:	6803      	ldr	r3, [r0, #0]
 8017e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e68:	4798      	blx	r3
 8017e6a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017e6e:	6828      	ldr	r0, [r5, #0]
 8017e70:	d01f      	beq.n	8017eb2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8017e72:	2201      	movs	r2, #1
 8017e74:	2500      	movs	r5, #0
 8017e76:	6801      	ldr	r1, [r0, #0]
 8017e78:	b2a4      	uxth	r4, r4
 8017e7a:	b2b6      	uxth	r6, r6
 8017e7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017e80:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8017e84:	250b      	movs	r5, #11
 8017e86:	9507      	str	r5, [sp, #28]
 8017e88:	f8ba 5000 	ldrh.w	r5, [sl]
 8017e8c:	f8cd 9010 	str.w	r9, [sp, #16]
 8017e90:	9602      	str	r6, [sp, #8]
 8017e92:	9401      	str	r4, [sp, #4]
 8017e94:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017e98:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017e9c:	9203      	str	r2, [sp, #12]
 8017e9e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017ea2:	9200      	str	r2, [sp, #0]
 8017ea4:	4642      	mov	r2, r8
 8017ea6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017ea8:	4639      	mov	r1, r7
 8017eaa:	47a0      	blx	r4
 8017eac:	b011      	add	sp, #68	; 0x44
 8017eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017eb2:	6803      	ldr	r3, [r0, #0]
 8017eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eb6:	4798      	blx	r3
 8017eb8:	f8ba 5000 	ldrh.w	r5, [sl]
 8017ebc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017ec0:	f04f 0e04 	mov.w	lr, #4
 8017ec4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017ec8:	436e      	muls	r6, r5
 8017eca:	fb05 2303 	mla	r3, r5, r3, r2
 8017ece:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017ed2:	1b2d      	subs	r5, r5, r4
 8017ed4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ed8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017edc:	4418      	add	r0, r3
 8017ede:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017ee2:	1982      	adds	r2, r0, r6
 8017ee4:	1b1b      	subs	r3, r3, r4
 8017ee6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8017eec:	4290      	cmp	r0, r2
 8017eee:	d254      	bcs.n	8017f9a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017ef0:	eb00 0a04 	add.w	sl, r0, r4
 8017ef4:	4550      	cmp	r0, sl
 8017ef6:	d24c      	bcs.n	8017f92 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8017ef8:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017efc:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017f00:	eb08 0c01 	add.w	ip, r8, r1
 8017f04:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017f08:	b173      	cbz	r3, 8017f28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017f0a:	2bff      	cmp	r3, #255	; 0xff
 8017f0c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017f10:	d10c      	bne.n	8017f2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017f12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017f16:	d109      	bne.n	8017f2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017f18:	f880 b000 	strb.w	fp, [r0]
 8017f1c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017f20:	7043      	strb	r3, [r0, #1]
 8017f22:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017f26:	7083      	strb	r3, [r0, #2]
 8017f28:	3003      	adds	r0, #3
 8017f2a:	e7e3      	b.n	8017ef4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8017f2c:	fb09 f103 	mul.w	r1, r9, r3
 8017f30:	1c4b      	adds	r3, r1, #1
 8017f32:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017f36:	7801      	ldrb	r1, [r0, #0]
 8017f38:	121b      	asrs	r3, r3, #8
 8017f3a:	b29e      	uxth	r6, r3
 8017f3c:	43db      	mvns	r3, r3
 8017f3e:	fb1b fb06 	smulbb	fp, fp, r6
 8017f42:	b2db      	uxtb	r3, r3
 8017f44:	fb01 b103 	mla	r1, r1, r3, fp
 8017f48:	b289      	uxth	r1, r1
 8017f4a:	f101 0b01 	add.w	fp, r1, #1
 8017f4e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017f52:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017f56:	fb1b fb03 	smulbb	fp, fp, r3
 8017f5a:	1209      	asrs	r1, r1, #8
 8017f5c:	7001      	strb	r1, [r0, #0]
 8017f5e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017f62:	fb01 b106 	mla	r1, r1, r6, fp
 8017f66:	b289      	uxth	r1, r1
 8017f68:	f101 0b01 	add.w	fp, r1, #1
 8017f6c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017f70:	1209      	asrs	r1, r1, #8
 8017f72:	7041      	strb	r1, [r0, #1]
 8017f74:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017f78:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017f7c:	fb1c f303 	smulbb	r3, ip, r3
 8017f80:	fb01 3606 	mla	r6, r1, r6, r3
 8017f84:	b2b6      	uxth	r6, r6
 8017f86:	1c73      	adds	r3, r6, #1
 8017f88:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017f8c:	1236      	asrs	r6, r6, #8
 8017f8e:	7086      	strb	r6, [r0, #2]
 8017f90:	e7ca      	b.n	8017f28 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f94:	4428      	add	r0, r5
 8017f96:	441f      	add	r7, r3
 8017f98:	e7a8      	b.n	8017eec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8017f9a:	4b03      	ldr	r3, [pc, #12]	; (8017fa8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017f9c:	6818      	ldr	r0, [r3, #0]
 8017f9e:	6803      	ldr	r3, [r0, #0]
 8017fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa2:	4798      	blx	r3
 8017fa4:	e782      	b.n	8017eac <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8017fa6:	bf00      	nop
 8017fa8:	2400f590 	.word	0x2400f590
 8017fac:	2400f58a 	.word	0x2400f58a

08017fb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb4:	b091      	sub	sp, #68	; 0x44
 8017fb6:	4680      	mov	r8, r0
 8017fb8:	460e      	mov	r6, r1
 8017fba:	6810      	ldr	r0, [r2, #0]
 8017fbc:	6851      	ldr	r1, [r2, #4]
 8017fbe:	ad0c      	add	r5, sp, #48	; 0x30
 8017fc0:	4614      	mov	r4, r2
 8017fc2:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017fc6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8018160 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8017fca:	f8df a198 	ldr.w	sl, [pc, #408]	; 8018164 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017fce:	c503      	stmia	r5!, {r0, r1}
 8017fd0:	6818      	ldr	r0, [r3, #0]
 8017fd2:	ad0e      	add	r5, sp, #56	; 0x38
 8017fd4:	6859      	ldr	r1, [r3, #4]
 8017fd6:	c503      	stmia	r5!, {r0, r1}
 8017fd8:	a80c      	add	r0, sp, #48	; 0x30
 8017fda:	f7fa fa23 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017fde:	4621      	mov	r1, r4
 8017fe0:	a80e      	add	r0, sp, #56	; 0x38
 8017fe2:	f7fa fa47 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017fe6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017fea:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017fee:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017ff2:	f8d9 0000 	ldr.w	r0, [r9]
 8017ff6:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017ffa:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017ffe:	eb08 0401 	add.w	r4, r8, r1
 8018002:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8018006:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801800a:	440a      	add	r2, r1
 801800c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8018010:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018014:	4413      	add	r3, r2
 8018016:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801801a:	6803      	ldr	r3, [r0, #0]
 801801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801801e:	4798      	blx	r3
 8018020:	f010 0f80 	tst.w	r0, #128	; 0x80
 8018024:	f8d9 0000 	ldr.w	r0, [r9]
 8018028:	d022      	beq.n	8018070 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801802a:	2200      	movs	r2, #0
 801802c:	f04f 0c01 	mov.w	ip, #1
 8018030:	6801      	ldr	r1, [r0, #0]
 8018032:	b2ad      	uxth	r5, r5
 8018034:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018038:	e9cd c208 	strd	ip, r2, [sp, #32]
 801803c:	f04f 0c0b 	mov.w	ip, #11
 8018040:	f8cd c01c 	str.w	ip, [sp, #28]
 8018044:	f8ba c000 	ldrh.w	ip, [sl]
 8018048:	9704      	str	r7, [sp, #16]
 801804a:	9502      	str	r5, [sp, #8]
 801804c:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8018050:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8018054:	9203      	str	r2, [sp, #12]
 8018056:	fa1f f288 	uxth.w	r2, r8
 801805a:	9201      	str	r2, [sp, #4]
 801805c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8018060:	9200      	str	r2, [sp, #0]
 8018062:	4632      	mov	r2, r6
 8018064:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8018066:	4621      	mov	r1, r4
 8018068:	47a8      	blx	r5
 801806a:	b011      	add	sp, #68	; 0x44
 801806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018070:	6803      	ldr	r3, [r0, #0]
 8018072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018074:	4798      	blx	r3
 8018076:	f8ba 2000 	ldrh.w	r2, [sl]
 801807a:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801807e:	f04f 0e03 	mov.w	lr, #3
 8018082:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8018086:	4355      	muls	r5, r2
 8018088:	fa1f fc87 	uxth.w	ip, r7
 801808c:	fb02 1303 	mla	r3, r2, r3, r1
 8018090:	eba2 0208 	sub.w	r2, r2, r8
 8018094:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801809c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80180a0:	4418      	add	r0, r3
 80180a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80180a4:	1943      	adds	r3, r0, r5
 80180a6:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80180aa:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80180ae:	eba2 0208 	sub.w	r2, r2, r8
 80180b2:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80180b6:	b2ad      	uxth	r5, r5
 80180b8:	4298      	cmp	r0, r3
 80180ba:	d24a      	bcs.n	8018152 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80180bc:	eb00 0908 	add.w	r9, r0, r8
 80180c0:	4621      	mov	r1, r4
 80180c2:	4548      	cmp	r0, r9
 80180c4:	460c      	mov	r4, r1
 80180c6:	d240      	bcs.n	801814a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80180c8:	f04f 0a04 	mov.w	sl, #4
 80180cc:	7824      	ldrb	r4, [r4, #0]
 80180ce:	2fff      	cmp	r7, #255	; 0xff
 80180d0:	f101 0101 	add.w	r1, r1, #1
 80180d4:	fb1e a404 	smlabb	r4, lr, r4, sl
 80180d8:	eb06 0a04 	add.w	sl, r6, r4
 80180dc:	f816 b004 	ldrb.w	fp, [r6, r4]
 80180e0:	d02b      	beq.n	801813a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80180e2:	7804      	ldrb	r4, [r0, #0]
 80180e4:	fb14 f405 	smulbb	r4, r4, r5
 80180e8:	fb0b 440c 	mla	r4, fp, ip, r4
 80180ec:	b2a4      	uxth	r4, r4
 80180ee:	f104 0b01 	add.w	fp, r4, #1
 80180f2:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80180f6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80180fa:	fb1b fb05 	smulbb	fp, fp, r5
 80180fe:	1224      	asrs	r4, r4, #8
 8018100:	7004      	strb	r4, [r0, #0]
 8018102:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018106:	fb04 b40c 	mla	r4, r4, ip, fp
 801810a:	b2a4      	uxth	r4, r4
 801810c:	f104 0b01 	add.w	fp, r4, #1
 8018110:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8018114:	1224      	asrs	r4, r4, #8
 8018116:	7044      	strb	r4, [r0, #1]
 8018118:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801811c:	f890 a002 	ldrb.w	sl, [r0, #2]
 8018120:	fb1a fa05 	smulbb	sl, sl, r5
 8018124:	fb04 a40c 	mla	r4, r4, ip, sl
 8018128:	b2a4      	uxth	r4, r4
 801812a:	f104 0a01 	add.w	sl, r4, #1
 801812e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8018132:	1224      	asrs	r4, r4, #8
 8018134:	7084      	strb	r4, [r0, #2]
 8018136:	3003      	adds	r0, #3
 8018138:	e7c3      	b.n	80180c2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801813a:	f880 b000 	strb.w	fp, [r0]
 801813e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8018142:	7044      	strb	r4, [r0, #1]
 8018144:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8018148:	e7f4      	b.n	8018134 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801814a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801814c:	4420      	add	r0, r4
 801814e:	188c      	adds	r4, r1, r2
 8018150:	e7b2      	b.n	80180b8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8018152:	4b03      	ldr	r3, [pc, #12]	; (8018160 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8018154:	6818      	ldr	r0, [r3, #0]
 8018156:	6803      	ldr	r3, [r0, #0]
 8018158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815a:	4798      	blx	r3
 801815c:	e785      	b.n	801806a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801815e:	bf00      	nop
 8018160:	2400f590 	.word	0x2400f590
 8018164:	2400f58a 	.word	0x2400f58a

08018168 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8018168:	b430      	push	{r4, r5}
 801816a:	780d      	ldrb	r5, [r1, #0]
 801816c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018170:	b11d      	cbz	r5, 801817a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8018172:	2d01      	cmp	r5, #1
 8018174:	d005      	beq.n	8018182 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8018176:	bc30      	pop	{r4, r5}
 8018178:	4770      	bx	lr
 801817a:	9402      	str	r4, [sp, #8]
 801817c:	bc30      	pop	{r4, r5}
 801817e:	f7ff be3f 	b.w	8017e00 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8018182:	9402      	str	r4, [sp, #8]
 8018184:	bc30      	pop	{r4, r5}
 8018186:	f7ff bf13 	b.w	8017fb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801818c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018190:	4605      	mov	r5, r0
 8018192:	b08f      	sub	sp, #60	; 0x3c
 8018194:	460c      	mov	r4, r1
 8018196:	461f      	mov	r7, r3
 8018198:	2b00      	cmp	r3, #0
 801819a:	d052      	beq.n	8018242 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801819c:	6808      	ldr	r0, [r1, #0]
 801819e:	ab0a      	add	r3, sp, #40	; 0x28
 80181a0:	6849      	ldr	r1, [r1, #4]
 80181a2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801836c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80181a6:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8018370 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80181aa:	c303      	stmia	r3!, {r0, r1}
 80181ac:	6810      	ldr	r0, [r2, #0]
 80181ae:	ab0c      	add	r3, sp, #48	; 0x30
 80181b0:	6851      	ldr	r1, [r2, #4]
 80181b2:	c303      	stmia	r3!, {r0, r1}
 80181b4:	a80a      	add	r0, sp, #40	; 0x28
 80181b6:	f7fa f935 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80181ba:	4621      	mov	r1, r4
 80181bc:	a80c      	add	r0, sp, #48	; 0x30
 80181be:	f7fa f959 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80181c2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80181c6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80181ca:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80181ce:	f8d8 0000 	ldr.w	r0, [r8]
 80181d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80181d6:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80181da:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 80181de:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80181e2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80181e6:	440a      	add	r2, r1
 80181e8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80181ec:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80181f0:	4413      	add	r3, r2
 80181f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80181f6:	6803      	ldr	r3, [r0, #0]
 80181f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80181fa:	4798      	blx	r3
 80181fc:	2fff      	cmp	r7, #255	; 0xff
 80181fe:	d023      	beq.n	8018248 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8018200:	f010 0f04 	tst.w	r0, #4
 8018204:	f8d8 0000 	ldr.w	r0, [r8]
 8018208:	d021      	beq.n	801824e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801820a:	2100      	movs	r1, #0
 801820c:	f04f 0e01 	mov.w	lr, #1
 8018210:	f8d0 c000 	ldr.w	ip, [r0]
 8018214:	b2a4      	uxth	r4, r4
 8018216:	9106      	str	r1, [sp, #24]
 8018218:	b2b6      	uxth	r6, r6
 801821a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801821e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018222:	e9cd e107 	strd	lr, r1, [sp, #28]
 8018226:	f8b9 e000 	ldrh.w	lr, [r9]
 801822a:	9703      	str	r7, [sp, #12]
 801822c:	9401      	str	r4, [sp, #4]
 801822e:	9600      	str	r6, [sp, #0]
 8018230:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8018234:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018238:	9102      	str	r1, [sp, #8]
 801823a:	4629      	mov	r1, r5
 801823c:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8018240:	47a0      	blx	r4
 8018242:	b00f      	add	sp, #60	; 0x3c
 8018244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018248:	f010 0f01 	tst.w	r0, #1
 801824c:	e7da      	b.n	8018204 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801824e:	6803      	ldr	r3, [r0, #0]
 8018250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018252:	4798      	blx	r3
 8018254:	f8b9 1000 	ldrh.w	r1, [r9]
 8018258:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801825c:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8018260:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8018264:	434c      	muls	r4, r1
 8018266:	2fff      	cmp	r7, #255	; 0xff
 8018268:	fb01 2303 	mla	r3, r1, r3, r2
 801826c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018270:	eba1 0106 	sub.w	r1, r1, r6
 8018274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018278:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801827c:	4418      	add	r0, r3
 801827e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8018282:	eba3 0606 	sub.w	r6, r3, r6
 8018286:	4404      	add	r4, r0
 8018288:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801828c:	d04a      	beq.n	8018324 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801828e:	43fa      	mvns	r2, r7
 8018290:	b2bb      	uxth	r3, r7
 8018292:	b2d7      	uxtb	r7, r2
 8018294:	42a0      	cmp	r0, r4
 8018296:	d263      	bcs.n	8018360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8018298:	eb00 0e0c 	add.w	lr, r0, ip
 801829c:	4586      	cmp	lr, r0
 801829e:	f100 0803 	add.w	r8, r0, #3
 80182a2:	d93a      	bls.n	801831a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80182a4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80182a8:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80182ac:	00d0      	lsls	r0, r2, #3
 80182ae:	fb19 f907 	smulbb	r9, r9, r7
 80182b2:	b2c0      	uxtb	r0, r0
 80182b4:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80182b8:	fb00 9003 	mla	r0, r0, r3, r9
 80182bc:	b280      	uxth	r0, r0
 80182be:	f100 0901 	add.w	r9, r0, #1
 80182c2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80182c6:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80182ca:	fb19 f907 	smulbb	r9, r9, r7
 80182ce:	1200      	asrs	r0, r0, #8
 80182d0:	f808 0c03 	strb.w	r0, [r8, #-3]
 80182d4:	10d0      	asrs	r0, r2, #3
 80182d6:	1212      	asrs	r2, r2, #8
 80182d8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80182dc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80182e0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80182e4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80182e8:	fb00 9003 	mla	r0, r0, r3, r9
 80182ec:	b280      	uxth	r0, r0
 80182ee:	f100 0901 	add.w	r9, r0, #1
 80182f2:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80182f6:	1200      	asrs	r0, r0, #8
 80182f8:	f808 0c02 	strb.w	r0, [r8, #-2]
 80182fc:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8018300:	fb10 f007 	smulbb	r0, r0, r7
 8018304:	fb02 0203 	mla	r2, r2, r3, r0
 8018308:	b292      	uxth	r2, r2
 801830a:	1c50      	adds	r0, r2, #1
 801830c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018310:	4640      	mov	r0, r8
 8018312:	1212      	asrs	r2, r2, #8
 8018314:	f808 2c01 	strb.w	r2, [r8, #-1]
 8018318:	e7c0      	b.n	801829c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801831a:	4408      	add	r0, r1
 801831c:	4435      	add	r5, r6
 801831e:	e7b9      	b.n	8018294 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8018320:	4408      	add	r0, r1
 8018322:	4435      	add	r5, r6
 8018324:	42a0      	cmp	r0, r4
 8018326:	d21b      	bcs.n	8018360 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8018328:	eb00 070c 	add.w	r7, r0, ip
 801832c:	42b8      	cmp	r0, r7
 801832e:	d2f7      	bcs.n	8018320 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8018330:	f835 3b02 	ldrh.w	r3, [r5], #2
 8018334:	3003      	adds	r0, #3
 8018336:	00da      	lsls	r2, r3, #3
 8018338:	b2d2      	uxtb	r2, r2
 801833a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801833e:	f800 2c03 	strb.w	r2, [r0, #-3]
 8018342:	10da      	asrs	r2, r3, #3
 8018344:	121b      	asrs	r3, r3, #8
 8018346:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801834a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801834e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8018352:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8018356:	f800 2c02 	strb.w	r2, [r0, #-2]
 801835a:	f800 3c01 	strb.w	r3, [r0, #-1]
 801835e:	e7e5      	b.n	801832c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8018360:	4b02      	ldr	r3, [pc, #8]	; (801836c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8018362:	6818      	ldr	r0, [r3, #0]
 8018364:	6803      	ldr	r3, [r0, #0]
 8018366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018368:	4798      	blx	r3
 801836a:	e76a      	b.n	8018242 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801836c:	2400f590 	.word	0x2400f590
 8018370:	2400f58a 	.word	0x2400f58a

08018374 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8018374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018378:	b08a      	sub	sp, #40	; 0x28
 801837a:	460d      	mov	r5, r1
 801837c:	4604      	mov	r4, r0
 801837e:	461e      	mov	r6, r3
 8018380:	6808      	ldr	r0, [r1, #0]
 8018382:	ab06      	add	r3, sp, #24
 8018384:	6849      	ldr	r1, [r1, #4]
 8018386:	4f5d      	ldr	r7, [pc, #372]	; (80184fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8018388:	c303      	stmia	r3!, {r0, r1}
 801838a:	6810      	ldr	r0, [r2, #0]
 801838c:	ab08      	add	r3, sp, #32
 801838e:	6851      	ldr	r1, [r2, #4]
 8018390:	c303      	stmia	r3!, {r0, r1}
 8018392:	a806      	add	r0, sp, #24
 8018394:	f7fa f846 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018398:	4629      	mov	r1, r5
 801839a:	a808      	add	r0, sp, #32
 801839c:	f7fa f86a 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80183a0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80183a4:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80183a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80183ac:	6838      	ldr	r0, [r7, #0]
 80183ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80183b2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80183b6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80183ba:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80183be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80183c2:	440a      	add	r2, r1
 80183c4:	f8ad 2020 	strh.w	r2, [sp, #32]
 80183c8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80183cc:	4413      	add	r3, r2
 80183ce:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80183d2:	6803      	ldr	r3, [r0, #0]
 80183d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183d6:	4798      	blx	r3
 80183d8:	2eff      	cmp	r6, #255	; 0xff
 80183da:	d119      	bne.n	8018410 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80183dc:	f010 0f20 	tst.w	r0, #32
 80183e0:	6838      	ldr	r0, [r7, #0]
 80183e2:	d018      	beq.n	8018416 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80183e4:	b2ad      	uxth	r5, r5
 80183e6:	2700      	movs	r7, #0
 80183e8:	6801      	ldr	r1, [r0, #0]
 80183ea:	9501      	str	r5, [sp, #4]
 80183ec:	fa1f f588 	uxth.w	r5, r8
 80183f0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80183f4:	9500      	str	r5, [sp, #0]
 80183f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80183fa:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80183fe:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8018402:	9602      	str	r6, [sp, #8]
 8018404:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8018406:	4621      	mov	r1, r4
 8018408:	47a8      	blx	r5
 801840a:	b00a      	add	sp, #40	; 0x28
 801840c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018414:	e7e4      	b.n	80183e0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8018416:	6803      	ldr	r3, [r0, #0]
 8018418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801841a:	4798      	blx	r3
 801841c:	4b38      	ldr	r3, [pc, #224]	; (8018500 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801841e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018422:	f8b3 c000 	ldrh.w	ip, [r3]
 8018426:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801842a:	fb0c f505 	mul.w	r5, ip, r5
 801842e:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8018432:	fb0c 2303 	mla	r3, ip, r3, r2
 8018436:	ebac 0c08 	sub.w	ip, ip, r8
 801843a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801843e:	ebae 0e08 	sub.w	lr, lr, r8
 8018442:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018446:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801844a:	4418      	add	r0, r3
 801844c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8018450:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018454:	4405      	add	r5, r0
 8018456:	42a8      	cmp	r0, r5
 8018458:	d24a      	bcs.n	80184f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801845a:	eb00 0803 	add.w	r8, r0, r3
 801845e:	4540      	cmp	r0, r8
 8018460:	d243      	bcs.n	80184ea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8018462:	78e2      	ldrb	r2, [r4, #3]
 8018464:	b15a      	cbz	r2, 801847e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8018466:	2aff      	cmp	r2, #255	; 0xff
 8018468:	f894 9000 	ldrb.w	r9, [r4]
 801846c:	d10a      	bne.n	8018484 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801846e:	2eff      	cmp	r6, #255	; 0xff
 8018470:	d108      	bne.n	8018484 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8018472:	f880 9000 	strb.w	r9, [r0]
 8018476:	7862      	ldrb	r2, [r4, #1]
 8018478:	7042      	strb	r2, [r0, #1]
 801847a:	78a2      	ldrb	r2, [r4, #2]
 801847c:	7082      	strb	r2, [r0, #2]
 801847e:	3003      	adds	r0, #3
 8018480:	3404      	adds	r4, #4
 8018482:	e7ec      	b.n	801845e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8018484:	4372      	muls	r2, r6
 8018486:	1c51      	adds	r1, r2, #1
 8018488:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801848c:	1209      	asrs	r1, r1, #8
 801848e:	fa1f fa81 	uxth.w	sl, r1
 8018492:	43c9      	mvns	r1, r1
 8018494:	fb19 f90a 	smulbb	r9, r9, sl
 8018498:	b2ca      	uxtb	r2, r1
 801849a:	7801      	ldrb	r1, [r0, #0]
 801849c:	fb01 9902 	mla	r9, r1, r2, r9
 80184a0:	fa1f f989 	uxth.w	r9, r9
 80184a4:	f109 0101 	add.w	r1, r9, #1
 80184a8:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80184ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80184b0:	f880 9000 	strb.w	r9, [r0]
 80184b4:	f890 9001 	ldrb.w	r9, [r0, #1]
 80184b8:	7861      	ldrb	r1, [r4, #1]
 80184ba:	fb19 f902 	smulbb	r9, r9, r2
 80184be:	fb01 910a 	mla	r1, r1, sl, r9
 80184c2:	b289      	uxth	r1, r1
 80184c4:	f101 0901 	add.w	r9, r1, #1
 80184c8:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80184cc:	1209      	asrs	r1, r1, #8
 80184ce:	7041      	strb	r1, [r0, #1]
 80184d0:	7881      	ldrb	r1, [r0, #2]
 80184d2:	f894 9002 	ldrb.w	r9, [r4, #2]
 80184d6:	fb11 f202 	smulbb	r2, r1, r2
 80184da:	fb09 220a 	mla	r2, r9, sl, r2
 80184de:	b292      	uxth	r2, r2
 80184e0:	1c51      	adds	r1, r2, #1
 80184e2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80184e6:	1212      	asrs	r2, r2, #8
 80184e8:	e7c8      	b.n	801847c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80184ea:	4460      	add	r0, ip
 80184ec:	4474      	add	r4, lr
 80184ee:	e7b2      	b.n	8018456 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80184f0:	6838      	ldr	r0, [r7, #0]
 80184f2:	6803      	ldr	r3, [r0, #0]
 80184f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184f6:	4798      	blx	r3
 80184f8:	e787      	b.n	801840a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80184fa:	bf00      	nop
 80184fc:	2400f590 	.word	0x2400f590
 8018500:	2400f58a 	.word	0x2400f58a

08018504 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018508:	b085      	sub	sp, #20
 801850a:	4606      	mov	r6, r0
 801850c:	460c      	mov	r4, r1
 801850e:	4691      	mov	r9, r2
 8018510:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8018514:	4698      	mov	r8, r3
 8018516:	b31d      	cbz	r5, 8018560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018518:	4608      	mov	r0, r1
 801851a:	f7fd fa4f 	bl	80159bc <_ZNK8touchgfx6Bitmap8getWidthEv>
 801851e:	4607      	mov	r7, r0
 8018520:	4620      	mov	r0, r4
 8018522:	f7fd fa7f 	bl	8015a24 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018526:	f8ad 000e 	strh.w	r0, [sp, #14]
 801852a:	4620      	mov	r0, r4
 801852c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8018530:	f8ad 800a 	strh.w	r8, [sp, #10]
 8018534:	f8ad 700c 	strh.w	r7, [sp, #12]
 8018538:	f7fd fb78 	bl	8015c2c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801853c:	280b      	cmp	r0, #11
 801853e:	d80f      	bhi.n	8018560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018540:	e8df f000 	tbb	[pc, r0]
 8018544:	0e062920 	.word	0x0e062920
 8018548:	0e0e0e0e 	.word	0x0e0e0e0e
 801854c:	110e0e0e 	.word	0x110e0e0e
 8018550:	4620      	mov	r0, r4
 8018552:	f7fd fae7 	bl	8015b24 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018556:	462b      	mov	r3, r5
 8018558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801855a:	a902      	add	r1, sp, #8
 801855c:	f7ff ff0a 	bl	8018374 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018560:	b005      	add	sp, #20
 8018562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018566:	4620      	mov	r0, r4
 8018568:	f7fd fadc 	bl	8015b24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801856c:	4606      	mov	r6, r0
 801856e:	4620      	mov	r0, r4
 8018570:	f7fd fb08 	bl	8015b84 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8018574:	9500      	str	r5, [sp, #0]
 8018576:	4601      	mov	r1, r0
 8018578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801857a:	aa02      	add	r2, sp, #8
 801857c:	4630      	mov	r0, r6
 801857e:	f7ff fdf3 	bl	8018168 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8018582:	e7ed      	b.n	8018560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018584:	4620      	mov	r0, r4
 8018586:	f7fd facd 	bl	8015b24 <_ZNK8touchgfx6Bitmap7getDataEv>
 801858a:	462b      	mov	r3, r5
 801858c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801858e:	a902      	add	r1, sp, #8
 8018590:	f7ff fdfc 	bl	801818c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8018594:	e7e4      	b.n	8018560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018596:	6833      	ldr	r3, [r6, #0]
 8018598:	4620      	mov	r0, r4
 801859a:	68df      	ldr	r7, [r3, #12]
 801859c:	f7fd fac2 	bl	8015b24 <_ZNK8touchgfx6Bitmap7getDataEv>
 80185a0:	2300      	movs	r3, #0
 80185a2:	4601      	mov	r1, r0
 80185a4:	aa02      	add	r2, sp, #8
 80185a6:	4630      	mov	r0, r6
 80185a8:	e9cd 5300 	strd	r5, r3, [sp]
 80185ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185ae:	47b8      	blx	r7
 80185b0:	e7d6      	b.n	8018560 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080185b2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80185b2:	b4f0      	push	{r4, r5, r6, r7}
 80185b4:	4616      	mov	r6, r2
 80185b6:	461c      	mov	r4, r3
 80185b8:	460d      	mov	r5, r1
 80185ba:	9a04      	ldr	r2, [sp, #16]
 80185bc:	2e01      	cmp	r6, #1
 80185be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80185c2:	d00e      	beq.n	80185e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80185c4:	d303      	bcc.n	80185ce <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80185c6:	2e02      	cmp	r6, #2
 80185c8:	d006      	beq.n	80185d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80185ca:	bcf0      	pop	{r4, r5, r6, r7}
 80185cc:	4770      	bx	lr
 80185ce:	4621      	mov	r1, r4
 80185d0:	4628      	mov	r0, r5
 80185d2:	bcf0      	pop	{r4, r5, r6, r7}
 80185d4:	f7ff bdda 	b.w	801818c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80185d8:	4621      	mov	r1, r4
 80185da:	4628      	mov	r0, r5
 80185dc:	bcf0      	pop	{r4, r5, r6, r7}
 80185de:	f7ff bec9 	b.w	8018374 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80185e2:	6805      	ldr	r5, [r0, #0]
 80185e4:	2600      	movs	r6, #0
 80185e6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80185ea:	68ed      	ldr	r5, [r5, #12]
 80185ec:	4613      	mov	r3, r2
 80185ee:	4622      	mov	r2, r4
 80185f0:	46ac      	mov	ip, r5
 80185f2:	bcf0      	pop	{r4, r5, r6, r7}
 80185f4:	4760      	bx	ip
	...

080185f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80185f8:	b160      	cbz	r0, 8018614 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80185fa:	2903      	cmp	r1, #3
 80185fc:	d818      	bhi.n	8018630 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80185fe:	e8df f001 	tbb	[pc, r1]
 8018602:	1902      	.short	0x1902
 8018604:	1b06      	.short	0x1b06
 8018606:	4b0e      	ldr	r3, [pc, #56]	; (8018640 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018608:	8818      	ldrh	r0, [r3, #0]
 801860a:	4240      	negs	r0, r0
 801860c:	4770      	bx	lr
 801860e:	4b0c      	ldr	r3, [pc, #48]	; (8018640 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018610:	8818      	ldrh	r0, [r3, #0]
 8018612:	4770      	bx	lr
 8018614:	2903      	cmp	r1, #3
 8018616:	d80b      	bhi.n	8018630 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8018618:	a301      	add	r3, pc, #4	; (adr r3, 8018620 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801861a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801861e:	bf00      	nop
 8018620:	08018635 	.word	0x08018635
 8018624:	0801860f 	.word	0x0801860f
 8018628:	08018639 	.word	0x08018639
 801862c:	08018607 	.word	0x08018607
 8018630:	2000      	movs	r0, #0
 8018632:	4770      	bx	lr
 8018634:	2001      	movs	r0, #1
 8018636:	4770      	bx	lr
 8018638:	f04f 30ff 	mov.w	r0, #4294967295
 801863c:	4770      	bx	lr
 801863e:	bf00      	nop
 8018640:	2400f58a 	.word	0x2400f58a

08018644 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8018644:	b160      	cbz	r0, 8018660 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8018646:	2903      	cmp	r1, #3
 8018648:	d818      	bhi.n	801867c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801864a:	e8df f001 	tbb	[pc, r1]
 801864e:	0219      	.short	0x0219
 8018650:	051b      	.short	0x051b
 8018652:	4b0e      	ldr	r3, [pc, #56]	; (801868c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8018654:	8818      	ldrh	r0, [r3, #0]
 8018656:	4770      	bx	lr
 8018658:	4b0c      	ldr	r3, [pc, #48]	; (801868c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801865a:	8818      	ldrh	r0, [r3, #0]
 801865c:	4240      	negs	r0, r0
 801865e:	4770      	bx	lr
 8018660:	2903      	cmp	r1, #3
 8018662:	d80b      	bhi.n	801867c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8018664:	a301      	add	r3, pc, #4	; (adr r3, 801866c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8018666:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801866a:	bf00      	nop
 801866c:	08018653 	.word	0x08018653
 8018670:	08018685 	.word	0x08018685
 8018674:	08018659 	.word	0x08018659
 8018678:	08018681 	.word	0x08018681
 801867c:	2000      	movs	r0, #0
 801867e:	4770      	bx	lr
 8018680:	2001      	movs	r0, #1
 8018682:	4770      	bx	lr
 8018684:	f04f 30ff 	mov.w	r0, #4294967295
 8018688:	4770      	bx	lr
 801868a:	bf00      	nop
 801868c:	2400f58a 	.word	0x2400f58a

08018690 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018694:	b097      	sub	sp, #92	; 0x5c
 8018696:	910b      	str	r1, [sp, #44]	; 0x2c
 8018698:	a912      	add	r1, sp, #72	; 0x48
 801869a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801869e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80186a2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80186a6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80186aa:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80186ae:	e881 000c 	stmia.w	r1, {r2, r3}
 80186b2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80186b6:	930a      	str	r3, [sp, #40]	; 0x28
 80186b8:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80186bc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80186c0:	9311      	str	r3, [sp, #68]	; 0x44
 80186c2:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80186c6:	798d      	ldrb	r5, [r1, #6]
 80186c8:	930c      	str	r3, [sp, #48]	; 0x30
 80186ca:	7b4b      	ldrb	r3, [r1, #13]
 80186cc:	0158      	lsls	r0, r3, #5
 80186ce:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80186d2:	4328      	orrs	r0, r5
 80186d4:	9009      	str	r0, [sp, #36]	; 0x24
 80186d6:	f000 817c 	beq.w	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80186da:	011b      	lsls	r3, r3, #4
 80186dc:	79c8      	ldrb	r0, [r1, #7]
 80186de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80186e2:	4303      	orrs	r3, r0
 80186e4:	930e      	str	r3, [sp, #56]	; 0x38
 80186e6:	f000 8174 	beq.w	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80186ea:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80186ee:	b29b      	uxth	r3, r3
 80186f0:	2f00      	cmp	r7, #0
 80186f2:	f000 8116 	beq.w	8018922 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80186f6:	1aff      	subs	r7, r7, r3
 80186f8:	b2bf      	uxth	r7, r7
 80186fa:	043b      	lsls	r3, r7, #16
 80186fc:	d502      	bpl.n	8018704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80186fe:	1bf6      	subs	r6, r6, r7
 8018700:	2700      	movs	r7, #0
 8018702:	b236      	sxth	r6, r6
 8018704:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018708:	a812      	add	r0, sp, #72	; 0x48
 801870a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801870e:	428e      	cmp	r6, r1
 8018710:	b28b      	uxth	r3, r1
 8018712:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8018716:	bfbf      	itttt	lt
 8018718:	18ff      	addlt	r7, r7, r3
 801871a:	1bbe      	sublt	r6, r7, r6
 801871c:	b2b7      	uxthlt	r7, r6
 801871e:	460e      	movlt	r6, r1
 8018720:	8891      	ldrh	r1, [r2, #4]
 8018722:	440b      	add	r3, r1
 8018724:	4631      	mov	r1, r6
 8018726:	b21b      	sxth	r3, r3
 8018728:	9310      	str	r3, [sp, #64]	; 0x40
 801872a:	88d3      	ldrh	r3, [r2, #6]
 801872c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801872e:	449a      	add	sl, r3
 8018730:	fa0f f38a 	sxth.w	r3, sl
 8018734:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8018738:	930f      	str	r3, [sp, #60]	; 0x3c
 801873a:	4bb5      	ldr	r3, [pc, #724]	; (8018a10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801873c:	f893 b000 	ldrb.w	fp, [r3]
 8018740:	f10b 3cff 	add.w	ip, fp, #4294967295
 8018744:	f1dc 0300 	rsbs	r3, ip, #0
 8018748:	eb43 030c 	adc.w	r3, r3, ip
 801874c:	930d      	str	r3, [sp, #52]	; 0x34
 801874e:	464b      	mov	r3, r9
 8018750:	f7f9 fce2 	bl	8012118 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8018754:	4631      	mov	r1, r6
 8018756:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801875a:	464b      	mov	r3, r9
 801875c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801875e:	a812      	add	r0, sp, #72	; 0x48
 8018760:	f7f9 fcf7 	bl	8012152 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8018764:	a916      	add	r1, sp, #88	; 0x58
 8018766:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801876a:	a815      	add	r0, sp, #84	; 0x54
 801876c:	f7f9 fe18 	bl	80123a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8018770:	f1b9 0f00 	cmp.w	r9, #0
 8018774:	f040 80d8 	bne.w	8018928 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8018778:	f1bb 0f01 	cmp.w	fp, #1
 801877c:	f040 80dc 	bne.w	8018938 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8018780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018782:	b153      	cbz	r3, 801879a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8018784:	2508      	movs	r5, #8
 8018786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018788:	fb95 f3f8 	sdiv	r3, r5, r8
 801878c:	1e5d      	subs	r5, r3, #1
 801878e:	4415      	add	r5, r2
 8018790:	fb95 f5f3 	sdiv	r5, r5, r3
 8018794:	fb15 f503 	smulbb	r5, r5, r3
 8018798:	b2ad      	uxth	r5, r5
 801879a:	b907      	cbnz	r7, 801879e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801879c:	b16c      	cbz	r4, 80187ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801879e:	fb04 7305 	mla	r3, r4, r5, r7
 80187a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80187a4:	ebaa 0a04 	sub.w	sl, sl, r4
 80187a8:	fb08 f303 	mul.w	r3, r8, r3
 80187ac:	fa1f fa8a 	uxth.w	sl, sl
 80187b0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80187b4:	f003 0407 	and.w	r4, r3, #7
 80187b8:	9226      	str	r2, [sp, #152]	; 0x98
 80187ba:	4649      	mov	r1, r9
 80187bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80187be:	f7ff ff1b 	bl	80185f8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80187c2:	4683      	mov	fp, r0
 80187c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80187c6:	f7ff ff3d 	bl	8018644 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 80187ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80187cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187ce:	4681      	mov	r9, r0
 80187d0:	1a9b      	subs	r3, r3, r2
 80187d2:	459a      	cmp	sl, r3
 80187d4:	bfa8      	it	ge
 80187d6:	469a      	movge	sl, r3
 80187d8:	f1ba 0f00 	cmp.w	sl, #0
 80187dc:	f340 80f9 	ble.w	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80187e0:	1bf6      	subs	r6, r6, r7
 80187e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80187e4:	1b9e      	subs	r6, r3, r6
 80187e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187e8:	429e      	cmp	r6, r3
 80187ea:	bfd4      	ite	le
 80187ec:	ebc7 0706 	rsble	r7, r7, r6
 80187f0:	ebc7 0703 	rsbgt	r7, r7, r3
 80187f4:	2f00      	cmp	r7, #0
 80187f6:	f340 80ec 	ble.w	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80187fa:	1bed      	subs	r5, r5, r7
 80187fc:	fb08 f305 	mul.w	r3, r8, r5
 8018800:	930d      	str	r3, [sp, #52]	; 0x34
 8018802:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018804:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8018808:	930e      	str	r3, [sp, #56]	; 0x38
 801880a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801880c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018810:	930f      	str	r3, [sp, #60]	; 0x3c
 8018812:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018814:	b2db      	uxtb	r3, r3
 8018816:	9310      	str	r3, [sp, #64]	; 0x40
 8018818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801881a:	2b00      	cmp	r3, #0
 801881c:	f040 80de 	bne.w	80189dc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8018820:	4b7c      	ldr	r3, [pc, #496]	; (8018a14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8018822:	6818      	ldr	r0, [r3, #0]
 8018824:	6803      	ldr	r3, [r0, #0]
 8018826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018828:	4798      	blx	r3
 801882a:	2301      	movs	r3, #1
 801882c:	4a7a      	ldr	r2, [pc, #488]	; (8018a18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801882e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8018832:	fb07 9b1b 	mls	fp, r7, fp, r9
 8018836:	fa03 f308 	lsl.w	r3, r3, r8
 801883a:	8811      	ldrh	r1, [r2, #0]
 801883c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8018840:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8018844:	3b01      	subs	r3, #1
 8018846:	fb06 bb07 	mla	fp, r6, r7, fp
 801884a:	b2db      	uxtb	r3, r3
 801884c:	930a      	str	r3, [sp, #40]	; 0x28
 801884e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8018852:	fb01 2303 	mla	r3, r1, r3, r2
 8018856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801885a:	18c3      	adds	r3, r0, r3
 801885c:	9309      	str	r3, [sp, #36]	; 0x24
 801885e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018860:	781a      	ldrb	r2, [r3, #0]
 8018862:	4122      	asrs	r2, r4
 8018864:	b2d2      	uxtb	r2, r2
 8018866:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801886a:	f0c0 80d7 	bcc.w	8018a1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801886e:	46be      	mov	lr, r7
 8018870:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018872:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8018876:	f0c0 80ba 	bcc.w	80189ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801887a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801887c:	4013      	ands	r3, r2
 801887e:	d041      	beq.n	8018904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018880:	20ff      	movs	r0, #255	; 0xff
 8018882:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018884:	fb90 f5f5 	sdiv	r5, r0, r5
 8018888:	436b      	muls	r3, r5
 801888a:	2bfe      	cmp	r3, #254	; 0xfe
 801888c:	dd03      	ble.n	8018896 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801888e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018890:	4285      	cmp	r5, r0
 8018892:	f000 80a5 	beq.w	80189e0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8018896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018898:	9810      	ldr	r0, [sp, #64]	; 0x40
 801889a:	fb15 f303 	smulbb	r3, r5, r3
 801889e:	b29b      	uxth	r3, r3
 80188a0:	1c5d      	adds	r5, r3, #1
 80188a2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80188a6:	780d      	ldrb	r5, [r1, #0]
 80188a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80188ac:	fa1f fc83 	uxth.w	ip, r3
 80188b0:	43db      	mvns	r3, r3
 80188b2:	fb10 f90c 	smulbb	r9, r0, ip
 80188b6:	b2db      	uxtb	r3, r3
 80188b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80188ba:	fb05 9503 	mla	r5, r5, r3, r9
 80188be:	b2ad      	uxth	r5, r5
 80188c0:	f105 0901 	add.w	r9, r5, #1
 80188c4:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80188c8:	fb10 f90c 	smulbb	r9, r0, ip
 80188cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80188ce:	122d      	asrs	r5, r5, #8
 80188d0:	fb10 fc0c 	smulbb	ip, r0, ip
 80188d4:	700d      	strb	r5, [r1, #0]
 80188d6:	784d      	ldrb	r5, [r1, #1]
 80188d8:	fb05 9503 	mla	r5, r5, r3, r9
 80188dc:	b2ad      	uxth	r5, r5
 80188de:	f105 0901 	add.w	r9, r5, #1
 80188e2:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 80188e6:	122d      	asrs	r5, r5, #8
 80188e8:	704d      	strb	r5, [r1, #1]
 80188ea:	788d      	ldrb	r5, [r1, #2]
 80188ec:	fb05 cc03 	mla	ip, r5, r3, ip
 80188f0:	fa1f fc8c 	uxth.w	ip, ip
 80188f4:	f10c 0301 	add.w	r3, ip, #1
 80188f8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80188fc:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018900:	f881 c002 	strb.w	ip, [r1, #2]
 8018904:	4444      	add	r4, r8
 8018906:	4431      	add	r1, r6
 8018908:	b2a4      	uxth	r4, r4
 801890a:	2c07      	cmp	r4, #7
 801890c:	bf89      	itett	hi
 801890e:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8018910:	fa42 f208 	asrls.w	r2, r2, r8
 8018914:	2400      	movhi	r4, #0
 8018916:	785a      	ldrbhi	r2, [r3, #1]
 8018918:	bf8a      	itet	hi
 801891a:	3301      	addhi	r3, #1
 801891c:	b2d2      	uxtbls	r2, r2
 801891e:	9326      	strhi	r3, [sp, #152]	; 0x98
 8018920:	e7a7      	b.n	8018872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8018922:	441e      	add	r6, r3
 8018924:	b236      	sxth	r6, r6
 8018926:	e6ed      	b.n	8018704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018928:	f1b9 0f01 	cmp.w	r9, #1
 801892c:	f47f af28 	bne.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018930:	f1bb 0f01 	cmp.w	fp, #1
 8018934:	f47f af24 	bne.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018938:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8018a14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801893c:	f8db 0000 	ldr.w	r0, [fp]
 8018940:	6803      	ldr	r3, [r0, #0]
 8018942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018944:	4798      	blx	r3
 8018946:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801894a:	465a      	mov	r2, fp
 801894c:	d006      	beq.n	801895c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801894e:	f1b8 0f04 	cmp.w	r8, #4
 8018952:	d141      	bne.n	80189d8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8018954:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018956:	3300      	adds	r3, #0
 8018958:	bf18      	it	ne
 801895a:	2301      	movne	r3, #1
 801895c:	0580      	lsls	r0, r0, #22
 801895e:	d566      	bpl.n	8018a2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8018960:	f1b8 0f08 	cmp.w	r8, #8
 8018964:	d163      	bne.n	8018a2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8018966:	2b00      	cmp	r3, #0
 8018968:	bf0c      	ite	eq
 801896a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801896e:	f44f 7180 	movne.w	r1, #256	; 0x100
 8018972:	2f00      	cmp	r7, #0
 8018974:	f47f af04 	bne.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018978:	2c00      	cmp	r4, #0
 801897a:	f47f af01 	bne.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801897e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018980:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018982:	18f3      	adds	r3, r6, r3
 8018984:	4283      	cmp	r3, r0
 8018986:	f73f aefb 	bgt.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801898a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801898c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801898e:	4403      	add	r3, r0
 8018990:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018992:	4283      	cmp	r3, r0
 8018994:	f73f aef4 	bgt.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018998:	f1b8 0f08 	cmp.w	r8, #8
 801899c:	6810      	ldr	r0, [r2, #0]
 801899e:	f04f 0600 	mov.w	r6, #0
 80189a2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80189a6:	bf18      	it	ne
 80189a8:	3501      	addne	r5, #1
 80189aa:	6804      	ldr	r4, [r0, #0]
 80189ac:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80189b0:	bf18      	it	ne
 80189b2:	f025 0501 	bicne.w	r5, r5, #1
 80189b6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80189ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80189bc:	bf18      	it	ne
 80189be:	b2ad      	uxthne	r5, r5
 80189c0:	9104      	str	r1, [sp, #16]
 80189c2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80189c4:	e9cd 5a00 	strd	r5, sl, [sp]
 80189c8:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80189cc:	9926      	ldr	r1, [sp, #152]	; 0x98
 80189ce:	6d64      	ldr	r4, [r4, #84]	; 0x54
 80189d0:	47a0      	blx	r4
 80189d2:	b017      	add	sp, #92	; 0x5c
 80189d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189d8:	2300      	movs	r3, #0
 80189da:	e7bf      	b.n	801895c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80189dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80189de:	e724      	b.n	801882a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 80189e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80189e2:	700b      	strb	r3, [r1, #0]
 80189e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80189e6:	704b      	strb	r3, [r1, #1]
 80189e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189ea:	708b      	strb	r3, [r1, #2]
 80189ec:	e78a      	b.n	8018904 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80189ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189f0:	b153      	cbz	r3, 8018a08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 80189f2:	441c      	add	r4, r3
 80189f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80189f6:	b2a4      	uxth	r4, r4
 80189f8:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80189fc:	f004 0407 	and.w	r4, r4, #7
 8018a00:	781a      	ldrb	r2, [r3, #0]
 8018a02:	9326      	str	r3, [sp, #152]	; 0x98
 8018a04:	4122      	asrs	r2, r4
 8018a06:	b2d2      	uxtb	r2, r2
 8018a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a0a:	445b      	add	r3, fp
 8018a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8018a0e:	e72a      	b.n	8018866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8018a10:	2400f588 	.word	0x2400f588
 8018a14:	2400f590 	.word	0x2400f590
 8018a18:	2400f58a 	.word	0x2400f58a
 8018a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d1d7      	bne.n	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018a22:	4b06      	ldr	r3, [pc, #24]	; (8018a3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8018a24:	6818      	ldr	r0, [r3, #0]
 8018a26:	6803      	ldr	r3, [r0, #0]
 8018a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a2a:	4798      	blx	r3
 8018a2c:	e7d1      	b.n	80189d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	f43f aea6 	beq.w	8018780 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018a38:	e79b      	b.n	8018972 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8018a3a:	bf00      	nop
 8018a3c:	2400f590 	.word	0x2400f590

08018a40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8018a40:	b538      	push	{r3, r4, r5, lr}
 8018a42:	4c15      	ldr	r4, [pc, #84]	; (8018a98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8018a44:	4605      	mov	r5, r0
 8018a46:	7823      	ldrb	r3, [r4, #0]
 8018a48:	f3bf 8f5b 	dmb	ish
 8018a4c:	07da      	lsls	r2, r3, #31
 8018a4e:	d40b      	bmi.n	8018a68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018a50:	4620      	mov	r0, r4
 8018a52:	f005 fbb2 	bl	801e1ba <__cxa_guard_acquire>
 8018a56:	b138      	cbz	r0, 8018a68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f005 fbba 	bl	801e1d2 <__cxa_guard_release>
 8018a5e:	4a0f      	ldr	r2, [pc, #60]	; (8018a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018a60:	490f      	ldr	r1, [pc, #60]	; (8018aa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8018a62:	4810      	ldr	r0, [pc, #64]	; (8018aa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018a64:	f005 fba2 	bl	801e1ac <__aeabi_atexit>
 8018a68:	4c0f      	ldr	r4, [pc, #60]	; (8018aa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8018a6a:	7823      	ldrb	r3, [r4, #0]
 8018a6c:	f3bf 8f5b 	dmb	ish
 8018a70:	07db      	lsls	r3, r3, #31
 8018a72:	d40b      	bmi.n	8018a8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018a74:	4620      	mov	r0, r4
 8018a76:	f005 fba0 	bl	801e1ba <__cxa_guard_acquire>
 8018a7a:	b138      	cbz	r0, 8018a8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018a7c:	4620      	mov	r0, r4
 8018a7e:	f005 fba8 	bl	801e1d2 <__cxa_guard_release>
 8018a82:	4a06      	ldr	r2, [pc, #24]	; (8018a9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018a84:	4909      	ldr	r1, [pc, #36]	; (8018aac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8018a86:	480a      	ldr	r0, [pc, #40]	; (8018ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018a88:	f005 fb90 	bl	801e1ac <__aeabi_atexit>
 8018a8c:	4b05      	ldr	r3, [pc, #20]	; (8018aa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018a8e:	612b      	str	r3, [r5, #16]
 8018a90:	4b07      	ldr	r3, [pc, #28]	; (8018ab0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018a92:	616b      	str	r3, [r5, #20]
 8018a94:	bd38      	pop	{r3, r4, r5, pc}
 8018a96:	bf00      	nop
 8018a98:	2400f664 	.word	0x2400f664
 8018a9c:	24000000 	.word	0x24000000
 8018aa0:	08017605 	.word	0x08017605
 8018aa4:	240000b0 	.word	0x240000b0
 8018aa8:	2400f668 	.word	0x2400f668
 8018aac:	08017603 	.word	0x08017603
 8018ab0:	240000b4 	.word	0x240000b4

08018ab4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8018ab4:	b538      	push	{r3, r4, r5, lr}
 8018ab6:	4c15      	ldr	r4, [pc, #84]	; (8018b0c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018ab8:	4605      	mov	r5, r0
 8018aba:	7823      	ldrb	r3, [r4, #0]
 8018abc:	f3bf 8f5b 	dmb	ish
 8018ac0:	07da      	lsls	r2, r3, #31
 8018ac2:	d40b      	bmi.n	8018adc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f005 fb78 	bl	801e1ba <__cxa_guard_acquire>
 8018aca:	b138      	cbz	r0, 8018adc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018acc:	4620      	mov	r0, r4
 8018ace:	f005 fb80 	bl	801e1d2 <__cxa_guard_release>
 8018ad2:	4a0f      	ldr	r2, [pc, #60]	; (8018b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018ad4:	490f      	ldr	r1, [pc, #60]	; (8018b14 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8018ad6:	4810      	ldr	r0, [pc, #64]	; (8018b18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018ad8:	f005 fb68 	bl	801e1ac <__aeabi_atexit>
 8018adc:	4c0f      	ldr	r4, [pc, #60]	; (8018b1c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018ade:	7823      	ldrb	r3, [r4, #0]
 8018ae0:	f3bf 8f5b 	dmb	ish
 8018ae4:	07db      	lsls	r3, r3, #31
 8018ae6:	d40b      	bmi.n	8018b00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018ae8:	4620      	mov	r0, r4
 8018aea:	f005 fb66 	bl	801e1ba <__cxa_guard_acquire>
 8018aee:	b138      	cbz	r0, 8018b00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018af0:	4620      	mov	r0, r4
 8018af2:	f005 fb6e 	bl	801e1d2 <__cxa_guard_release>
 8018af6:	4a06      	ldr	r2, [pc, #24]	; (8018b10 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018af8:	4909      	ldr	r1, [pc, #36]	; (8018b20 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018afa:	480a      	ldr	r0, [pc, #40]	; (8018b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018afc:	f005 fb56 	bl	801e1ac <__aeabi_atexit>
 8018b00:	4b05      	ldr	r3, [pc, #20]	; (8018b18 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018b02:	60ab      	str	r3, [r5, #8]
 8018b04:	4b07      	ldr	r3, [pc, #28]	; (8018b24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018b06:	60eb      	str	r3, [r5, #12]
 8018b08:	bd38      	pop	{r3, r4, r5, pc}
 8018b0a:	bf00      	nop
 8018b0c:	2400f644 	.word	0x2400f644
 8018b10:	24000000 	.word	0x24000000
 8018b14:	08017609 	.word	0x08017609
 8018b18:	24000090 	.word	0x24000090
 8018b1c:	2400f648 	.word	0x2400f648
 8018b20:	08017607 	.word	0x08017607
 8018b24:	24000094 	.word	0x24000094

08018b28 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8018b28:	b510      	push	{r4, lr}
 8018b2a:	4604      	mov	r4, r0
 8018b2c:	f7ff ff88 	bl	8018a40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8018b30:	4620      	mov	r0, r4
 8018b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b36:	f7ff bfbd 	b.w	8018ab4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08018b3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	4c15      	ldr	r4, [pc, #84]	; (8018b94 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8018b40:	4605      	mov	r5, r0
 8018b42:	7823      	ldrb	r3, [r4, #0]
 8018b44:	f3bf 8f5b 	dmb	ish
 8018b48:	07da      	lsls	r2, r3, #31
 8018b4a:	d40b      	bmi.n	8018b64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018b4c:	4620      	mov	r0, r4
 8018b4e:	f005 fb34 	bl	801e1ba <__cxa_guard_acquire>
 8018b52:	b138      	cbz	r0, 8018b64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018b54:	4620      	mov	r0, r4
 8018b56:	f005 fb3c 	bl	801e1d2 <__cxa_guard_release>
 8018b5a:	4a0f      	ldr	r2, [pc, #60]	; (8018b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018b5c:	490f      	ldr	r1, [pc, #60]	; (8018b9c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8018b5e:	4810      	ldr	r0, [pc, #64]	; (8018ba0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018b60:	f005 fb24 	bl	801e1ac <__aeabi_atexit>
 8018b64:	4c0f      	ldr	r4, [pc, #60]	; (8018ba4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8018b66:	7823      	ldrb	r3, [r4, #0]
 8018b68:	f3bf 8f5b 	dmb	ish
 8018b6c:	07db      	lsls	r3, r3, #31
 8018b6e:	d40b      	bmi.n	8018b88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018b70:	4620      	mov	r0, r4
 8018b72:	f005 fb22 	bl	801e1ba <__cxa_guard_acquire>
 8018b76:	b138      	cbz	r0, 8018b88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018b78:	4620      	mov	r0, r4
 8018b7a:	f005 fb2a 	bl	801e1d2 <__cxa_guard_release>
 8018b7e:	4a06      	ldr	r2, [pc, #24]	; (8018b98 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018b80:	4909      	ldr	r1, [pc, #36]	; (8018ba8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018b82:	480a      	ldr	r0, [pc, #40]	; (8018bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018b84:	f005 fb12 	bl	801e1ac <__aeabi_atexit>
 8018b88:	4b05      	ldr	r3, [pc, #20]	; (8018ba0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018b8a:	622b      	str	r3, [r5, #32]
 8018b8c:	4b07      	ldr	r3, [pc, #28]	; (8018bac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018b8e:	626b      	str	r3, [r5, #36]	; 0x24
 8018b90:	bd38      	pop	{r3, r4, r5, pc}
 8018b92:	bf00      	nop
 8018b94:	2400f66c 	.word	0x2400f66c
 8018b98:	24000000 	.word	0x24000000
 8018b9c:	080175fd 	.word	0x080175fd
 8018ba0:	240000b8 	.word	0x240000b8
 8018ba4:	2400f670 	.word	0x2400f670
 8018ba8:	080175fb 	.word	0x080175fb
 8018bac:	240000bc 	.word	0x240000bc

08018bb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018bb0:	b538      	push	{r3, r4, r5, lr}
 8018bb2:	4c15      	ldr	r4, [pc, #84]	; (8018c08 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018bb4:	4605      	mov	r5, r0
 8018bb6:	7823      	ldrb	r3, [r4, #0]
 8018bb8:	f3bf 8f5b 	dmb	ish
 8018bbc:	07da      	lsls	r2, r3, #31
 8018bbe:	d40b      	bmi.n	8018bd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	f005 fafa 	bl	801e1ba <__cxa_guard_acquire>
 8018bc6:	b138      	cbz	r0, 8018bd8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f005 fb02 	bl	801e1d2 <__cxa_guard_release>
 8018bce:	4a0f      	ldr	r2, [pc, #60]	; (8018c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018bd0:	490f      	ldr	r1, [pc, #60]	; (8018c10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018bd2:	4810      	ldr	r0, [pc, #64]	; (8018c14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018bd4:	f005 faea 	bl	801e1ac <__aeabi_atexit>
 8018bd8:	4c0f      	ldr	r4, [pc, #60]	; (8018c18 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018bda:	7823      	ldrb	r3, [r4, #0]
 8018bdc:	f3bf 8f5b 	dmb	ish
 8018be0:	07db      	lsls	r3, r3, #31
 8018be2:	d40b      	bmi.n	8018bfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018be4:	4620      	mov	r0, r4
 8018be6:	f005 fae8 	bl	801e1ba <__cxa_guard_acquire>
 8018bea:	b138      	cbz	r0, 8018bfc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018bec:	4620      	mov	r0, r4
 8018bee:	f005 faf0 	bl	801e1d2 <__cxa_guard_release>
 8018bf2:	4a06      	ldr	r2, [pc, #24]	; (8018c0c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018bf4:	4909      	ldr	r1, [pc, #36]	; (8018c1c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018bf6:	480a      	ldr	r0, [pc, #40]	; (8018c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018bf8:	f005 fad8 	bl	801e1ac <__aeabi_atexit>
 8018bfc:	4b05      	ldr	r3, [pc, #20]	; (8018c14 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018bfe:	61ab      	str	r3, [r5, #24]
 8018c00:	4b07      	ldr	r3, [pc, #28]	; (8018c20 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018c02:	61eb      	str	r3, [r5, #28]
 8018c04:	bd38      	pop	{r3, r4, r5, pc}
 8018c06:	bf00      	nop
 8018c08:	2400f64c 	.word	0x2400f64c
 8018c0c:	24000000 	.word	0x24000000
 8018c10:	08017601 	.word	0x08017601
 8018c14:	24000098 	.word	0x24000098
 8018c18:	2400f650 	.word	0x2400f650
 8018c1c:	080175ff 	.word	0x080175ff
 8018c20:	2400009c 	.word	0x2400009c

08018c24 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018c24:	b510      	push	{r4, lr}
 8018c26:	4604      	mov	r4, r0
 8018c28:	f7ff ff88 	bl	8018b3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c32:	f7ff bfbd 	b.w	8018bb0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018c38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8018c38:	b538      	push	{r3, r4, r5, lr}
 8018c3a:	4c15      	ldr	r4, [pc, #84]	; (8018c90 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8018c3c:	4605      	mov	r5, r0
 8018c3e:	7823      	ldrb	r3, [r4, #0]
 8018c40:	f3bf 8f5b 	dmb	ish
 8018c44:	07da      	lsls	r2, r3, #31
 8018c46:	d40b      	bmi.n	8018c60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018c48:	4620      	mov	r0, r4
 8018c4a:	f005 fab6 	bl	801e1ba <__cxa_guard_acquire>
 8018c4e:	b138      	cbz	r0, 8018c60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018c50:	4620      	mov	r0, r4
 8018c52:	f005 fabe 	bl	801e1d2 <__cxa_guard_release>
 8018c56:	4a0f      	ldr	r2, [pc, #60]	; (8018c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018c58:	490f      	ldr	r1, [pc, #60]	; (8018c98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8018c5a:	4810      	ldr	r0, [pc, #64]	; (8018c9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018c5c:	f005 faa6 	bl	801e1ac <__aeabi_atexit>
 8018c60:	4c0f      	ldr	r4, [pc, #60]	; (8018ca0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018c62:	7823      	ldrb	r3, [r4, #0]
 8018c64:	f3bf 8f5b 	dmb	ish
 8018c68:	07db      	lsls	r3, r3, #31
 8018c6a:	d40b      	bmi.n	8018c84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018c6c:	4620      	mov	r0, r4
 8018c6e:	f005 faa4 	bl	801e1ba <__cxa_guard_acquire>
 8018c72:	b138      	cbz	r0, 8018c84 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018c74:	4620      	mov	r0, r4
 8018c76:	f005 faac 	bl	801e1d2 <__cxa_guard_release>
 8018c7a:	4a06      	ldr	r2, [pc, #24]	; (8018c94 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018c7c:	4909      	ldr	r1, [pc, #36]	; (8018ca4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018c7e:	480a      	ldr	r0, [pc, #40]	; (8018ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018c80:	f005 fa94 	bl	801e1ac <__aeabi_atexit>
 8018c84:	4b05      	ldr	r3, [pc, #20]	; (8018c9c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018c86:	632b      	str	r3, [r5, #48]	; 0x30
 8018c88:	4b07      	ldr	r3, [pc, #28]	; (8018ca8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018c8a:	636b      	str	r3, [r5, #52]	; 0x34
 8018c8c:	bd38      	pop	{r3, r4, r5, pc}
 8018c8e:	bf00      	nop
 8018c90:	2400f654 	.word	0x2400f654
 8018c94:	24000000 	.word	0x24000000
 8018c98:	080175f5 	.word	0x080175f5
 8018c9c:	240000a0 	.word	0x240000a0
 8018ca0:	2400f658 	.word	0x2400f658
 8018ca4:	080175f3 	.word	0x080175f3
 8018ca8:	240000a4 	.word	0x240000a4

08018cac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018cac:	b538      	push	{r3, r4, r5, lr}
 8018cae:	4c15      	ldr	r4, [pc, #84]	; (8018d04 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018cb0:	4605      	mov	r5, r0
 8018cb2:	7823      	ldrb	r3, [r4, #0]
 8018cb4:	f3bf 8f5b 	dmb	ish
 8018cb8:	07da      	lsls	r2, r3, #31
 8018cba:	d40b      	bmi.n	8018cd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018cbc:	4620      	mov	r0, r4
 8018cbe:	f005 fa7c 	bl	801e1ba <__cxa_guard_acquire>
 8018cc2:	b138      	cbz	r0, 8018cd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018cc4:	4620      	mov	r0, r4
 8018cc6:	f005 fa84 	bl	801e1d2 <__cxa_guard_release>
 8018cca:	4a0f      	ldr	r2, [pc, #60]	; (8018d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018ccc:	490f      	ldr	r1, [pc, #60]	; (8018d0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018cce:	4810      	ldr	r0, [pc, #64]	; (8018d10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018cd0:	f005 fa6c 	bl	801e1ac <__aeabi_atexit>
 8018cd4:	4c0f      	ldr	r4, [pc, #60]	; (8018d14 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018cd6:	7823      	ldrb	r3, [r4, #0]
 8018cd8:	f3bf 8f5b 	dmb	ish
 8018cdc:	07db      	lsls	r3, r3, #31
 8018cde:	d40b      	bmi.n	8018cf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018ce0:	4620      	mov	r0, r4
 8018ce2:	f005 fa6a 	bl	801e1ba <__cxa_guard_acquire>
 8018ce6:	b138      	cbz	r0, 8018cf8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018ce8:	4620      	mov	r0, r4
 8018cea:	f005 fa72 	bl	801e1d2 <__cxa_guard_release>
 8018cee:	4a06      	ldr	r2, [pc, #24]	; (8018d08 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018cf0:	4909      	ldr	r1, [pc, #36]	; (8018d18 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018cf2:	480a      	ldr	r0, [pc, #40]	; (8018d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018cf4:	f005 fa5a 	bl	801e1ac <__aeabi_atexit>
 8018cf8:	4b05      	ldr	r3, [pc, #20]	; (8018d10 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018cfa:	62ab      	str	r3, [r5, #40]	; 0x28
 8018cfc:	4b07      	ldr	r3, [pc, #28]	; (8018d1c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018cfe:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018d00:	bd38      	pop	{r3, r4, r5, pc}
 8018d02:	bf00      	nop
 8018d04:	2400f62c 	.word	0x2400f62c
 8018d08:	24000000 	.word	0x24000000
 8018d0c:	080175f9 	.word	0x080175f9
 8018d10:	24000078 	.word	0x24000078
 8018d14:	2400f630 	.word	0x2400f630
 8018d18:	080175f7 	.word	0x080175f7
 8018d1c:	2400007c 	.word	0x2400007c

08018d20 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018d20:	b510      	push	{r4, lr}
 8018d22:	4604      	mov	r4, r0
 8018d24:	f7ff ff88 	bl	8018c38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018d28:	4620      	mov	r0, r4
 8018d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d2e:	f7ff bfbd 	b.w	8018cac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018d34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018d34:	b538      	push	{r3, r4, r5, lr}
 8018d36:	4c15      	ldr	r4, [pc, #84]	; (8018d8c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018d38:	4605      	mov	r5, r0
 8018d3a:	7823      	ldrb	r3, [r4, #0]
 8018d3c:	f3bf 8f5b 	dmb	ish
 8018d40:	07da      	lsls	r2, r3, #31
 8018d42:	d40b      	bmi.n	8018d5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018d44:	4620      	mov	r0, r4
 8018d46:	f005 fa38 	bl	801e1ba <__cxa_guard_acquire>
 8018d4a:	b138      	cbz	r0, 8018d5c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018d4c:	4620      	mov	r0, r4
 8018d4e:	f005 fa40 	bl	801e1d2 <__cxa_guard_release>
 8018d52:	4a0f      	ldr	r2, [pc, #60]	; (8018d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018d54:	490f      	ldr	r1, [pc, #60]	; (8018d94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018d56:	4810      	ldr	r0, [pc, #64]	; (8018d98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018d58:	f005 fa28 	bl	801e1ac <__aeabi_atexit>
 8018d5c:	4c0f      	ldr	r4, [pc, #60]	; (8018d9c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018d5e:	7823      	ldrb	r3, [r4, #0]
 8018d60:	f3bf 8f5b 	dmb	ish
 8018d64:	07db      	lsls	r3, r3, #31
 8018d66:	d40b      	bmi.n	8018d80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018d68:	4620      	mov	r0, r4
 8018d6a:	f005 fa26 	bl	801e1ba <__cxa_guard_acquire>
 8018d6e:	b138      	cbz	r0, 8018d80 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018d70:	4620      	mov	r0, r4
 8018d72:	f005 fa2e 	bl	801e1d2 <__cxa_guard_release>
 8018d76:	4a06      	ldr	r2, [pc, #24]	; (8018d90 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018d78:	4909      	ldr	r1, [pc, #36]	; (8018da0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018d7a:	480a      	ldr	r0, [pc, #40]	; (8018da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018d7c:	f005 fa16 	bl	801e1ac <__aeabi_atexit>
 8018d80:	4b05      	ldr	r3, [pc, #20]	; (8018d98 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018d82:	642b      	str	r3, [r5, #64]	; 0x40
 8018d84:	4b07      	ldr	r3, [pc, #28]	; (8018da4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018d86:	646b      	str	r3, [r5, #68]	; 0x44
 8018d88:	bd38      	pop	{r3, r4, r5, pc}
 8018d8a:	bf00      	nop
 8018d8c:	2400f65c 	.word	0x2400f65c
 8018d90:	24000000 	.word	0x24000000
 8018d94:	080175ed 	.word	0x080175ed
 8018d98:	240000a8 	.word	0x240000a8
 8018d9c:	2400f660 	.word	0x2400f660
 8018da0:	080175eb 	.word	0x080175eb
 8018da4:	240000ac 	.word	0x240000ac

08018da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	4c15      	ldr	r4, [pc, #84]	; (8018e00 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018dac:	4605      	mov	r5, r0
 8018dae:	7823      	ldrb	r3, [r4, #0]
 8018db0:	f3bf 8f5b 	dmb	ish
 8018db4:	07da      	lsls	r2, r3, #31
 8018db6:	d40b      	bmi.n	8018dd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018db8:	4620      	mov	r0, r4
 8018dba:	f005 f9fe 	bl	801e1ba <__cxa_guard_acquire>
 8018dbe:	b138      	cbz	r0, 8018dd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	f005 fa06 	bl	801e1d2 <__cxa_guard_release>
 8018dc6:	4a0f      	ldr	r2, [pc, #60]	; (8018e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018dc8:	490f      	ldr	r1, [pc, #60]	; (8018e08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018dca:	4810      	ldr	r0, [pc, #64]	; (8018e0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018dcc:	f005 f9ee 	bl	801e1ac <__aeabi_atexit>
 8018dd0:	4c0f      	ldr	r4, [pc, #60]	; (8018e10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018dd2:	7823      	ldrb	r3, [r4, #0]
 8018dd4:	f3bf 8f5b 	dmb	ish
 8018dd8:	07db      	lsls	r3, r3, #31
 8018dda:	d40b      	bmi.n	8018df4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018ddc:	4620      	mov	r0, r4
 8018dde:	f005 f9ec 	bl	801e1ba <__cxa_guard_acquire>
 8018de2:	b138      	cbz	r0, 8018df4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018de4:	4620      	mov	r0, r4
 8018de6:	f005 f9f4 	bl	801e1d2 <__cxa_guard_release>
 8018dea:	4a06      	ldr	r2, [pc, #24]	; (8018e04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018dec:	4909      	ldr	r1, [pc, #36]	; (8018e14 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018dee:	480a      	ldr	r0, [pc, #40]	; (8018e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018df0:	f005 f9dc 	bl	801e1ac <__aeabi_atexit>
 8018df4:	4b05      	ldr	r3, [pc, #20]	; (8018e0c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018df6:	63ab      	str	r3, [r5, #56]	; 0x38
 8018df8:	4b07      	ldr	r3, [pc, #28]	; (8018e18 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018dfa:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018dfc:	bd38      	pop	{r3, r4, r5, pc}
 8018dfe:	bf00      	nop
 8018e00:	2400f63c 	.word	0x2400f63c
 8018e04:	24000000 	.word	0x24000000
 8018e08:	080175f1 	.word	0x080175f1
 8018e0c:	24000088 	.word	0x24000088
 8018e10:	2400f640 	.word	0x2400f640
 8018e14:	080175ef 	.word	0x080175ef
 8018e18:	2400008c 	.word	0x2400008c

08018e1c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018e1c:	b510      	push	{r4, lr}
 8018e1e:	4604      	mov	r4, r0
 8018e20:	f7ff ff88 	bl	8018d34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018e24:	4620      	mov	r0, r4
 8018e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e2a:	f7ff bfbd 	b.w	8018da8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018e30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018e30:	b538      	push	{r3, r4, r5, lr}
 8018e32:	4c15      	ldr	r4, [pc, #84]	; (8018e88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018e34:	4605      	mov	r5, r0
 8018e36:	7823      	ldrb	r3, [r4, #0]
 8018e38:	f3bf 8f5b 	dmb	ish
 8018e3c:	07da      	lsls	r2, r3, #31
 8018e3e:	d40b      	bmi.n	8018e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018e40:	4620      	mov	r0, r4
 8018e42:	f005 f9ba 	bl	801e1ba <__cxa_guard_acquire>
 8018e46:	b138      	cbz	r0, 8018e58 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018e48:	4620      	mov	r0, r4
 8018e4a:	f005 f9c2 	bl	801e1d2 <__cxa_guard_release>
 8018e4e:	4a0f      	ldr	r2, [pc, #60]	; (8018e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018e50:	490f      	ldr	r1, [pc, #60]	; (8018e90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018e52:	4810      	ldr	r0, [pc, #64]	; (8018e94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018e54:	f005 f9aa 	bl	801e1ac <__aeabi_atexit>
 8018e58:	4c0f      	ldr	r4, [pc, #60]	; (8018e98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018e5a:	7823      	ldrb	r3, [r4, #0]
 8018e5c:	f3bf 8f5b 	dmb	ish
 8018e60:	07db      	lsls	r3, r3, #31
 8018e62:	d40b      	bmi.n	8018e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018e64:	4620      	mov	r0, r4
 8018e66:	f005 f9a8 	bl	801e1ba <__cxa_guard_acquire>
 8018e6a:	b138      	cbz	r0, 8018e7c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018e6c:	4620      	mov	r0, r4
 8018e6e:	f005 f9b0 	bl	801e1d2 <__cxa_guard_release>
 8018e72:	4a06      	ldr	r2, [pc, #24]	; (8018e8c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018e74:	4909      	ldr	r1, [pc, #36]	; (8018e9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018e76:	480a      	ldr	r0, [pc, #40]	; (8018ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018e78:	f005 f998 	bl	801e1ac <__aeabi_atexit>
 8018e7c:	4b05      	ldr	r3, [pc, #20]	; (8018e94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018e7e:	652b      	str	r3, [r5, #80]	; 0x50
 8018e80:	4b07      	ldr	r3, [pc, #28]	; (8018ea0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018e82:	656b      	str	r3, [r5, #84]	; 0x54
 8018e84:	bd38      	pop	{r3, r4, r5, pc}
 8018e86:	bf00      	nop
 8018e88:	2400f634 	.word	0x2400f634
 8018e8c:	24000000 	.word	0x24000000
 8018e90:	080175e5 	.word	0x080175e5
 8018e94:	24000080 	.word	0x24000080
 8018e98:	2400f638 	.word	0x2400f638
 8018e9c:	080175e3 	.word	0x080175e3
 8018ea0:	24000084 	.word	0x24000084

08018ea4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018ea4:	b538      	push	{r3, r4, r5, lr}
 8018ea6:	4c15      	ldr	r4, [pc, #84]	; (8018efc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018ea8:	4605      	mov	r5, r0
 8018eaa:	7823      	ldrb	r3, [r4, #0]
 8018eac:	f3bf 8f5b 	dmb	ish
 8018eb0:	07da      	lsls	r2, r3, #31
 8018eb2:	d40b      	bmi.n	8018ecc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f005 f980 	bl	801e1ba <__cxa_guard_acquire>
 8018eba:	b138      	cbz	r0, 8018ecc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018ebc:	4620      	mov	r0, r4
 8018ebe:	f005 f988 	bl	801e1d2 <__cxa_guard_release>
 8018ec2:	4a0f      	ldr	r2, [pc, #60]	; (8018f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018ec4:	490f      	ldr	r1, [pc, #60]	; (8018f04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018ec6:	4810      	ldr	r0, [pc, #64]	; (8018f08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018ec8:	f005 f970 	bl	801e1ac <__aeabi_atexit>
 8018ecc:	4c0f      	ldr	r4, [pc, #60]	; (8018f0c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018ece:	7823      	ldrb	r3, [r4, #0]
 8018ed0:	f3bf 8f5b 	dmb	ish
 8018ed4:	07db      	lsls	r3, r3, #31
 8018ed6:	d40b      	bmi.n	8018ef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018ed8:	4620      	mov	r0, r4
 8018eda:	f005 f96e 	bl	801e1ba <__cxa_guard_acquire>
 8018ede:	b138      	cbz	r0, 8018ef0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018ee0:	4620      	mov	r0, r4
 8018ee2:	f005 f976 	bl	801e1d2 <__cxa_guard_release>
 8018ee6:	4a06      	ldr	r2, [pc, #24]	; (8018f00 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018ee8:	4909      	ldr	r1, [pc, #36]	; (8018f10 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018eea:	480a      	ldr	r0, [pc, #40]	; (8018f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018eec:	f005 f95e 	bl	801e1ac <__aeabi_atexit>
 8018ef0:	4b05      	ldr	r3, [pc, #20]	; (8018f08 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018ef2:	64ab      	str	r3, [r5, #72]	; 0x48
 8018ef4:	4b07      	ldr	r3, [pc, #28]	; (8018f14 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018ef6:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018ef8:	bd38      	pop	{r3, r4, r5, pc}
 8018efa:	bf00      	nop
 8018efc:	2400f624 	.word	0x2400f624
 8018f00:	24000000 	.word	0x24000000
 8018f04:	080175e9 	.word	0x080175e9
 8018f08:	24000070 	.word	0x24000070
 8018f0c:	2400f628 	.word	0x2400f628
 8018f10:	080175e7 	.word	0x080175e7
 8018f14:	24000074 	.word	0x24000074

08018f18 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018f18:	b510      	push	{r4, lr}
 8018f1a:	4604      	mov	r4, r0
 8018f1c:	f7ff ff88 	bl	8018e30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018f20:	4620      	mov	r0, r4
 8018f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f26:	f7ff bfbd 	b.w	8018ea4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018f2a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018f2a:	b510      	push	{r4, lr}
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	f7ff fff3 	bl	8018f18 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018f32:	4620      	mov	r0, r4
 8018f34:	f7ff ff72 	bl	8018e1c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018f38:	4620      	mov	r0, r4
 8018f3a:	f7ff fe73 	bl	8018c24 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018f3e:	4620      	mov	r0, r4
 8018f40:	f7ff fdf2 	bl	8018b28 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018f44:	4620      	mov	r0, r4
 8018f46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f4a:	f7ff bee9 	b.w	8018d20 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08018f4e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f52:	b087      	sub	sp, #28
 8018f54:	788d      	ldrb	r5, [r1, #2]
 8018f56:	f891 9000 	ldrb.w	r9, [r1]
 8018f5a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8018f5e:	9501      	str	r5, [sp, #4]
 8018f60:	784d      	ldrb	r5, [r1, #1]
 8018f62:	9203      	str	r2, [sp, #12]
 8018f64:	9502      	str	r5, [sp, #8]
 8018f66:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8018f6a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8018f6e:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018f72:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8018f76:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8018f7a:	fb06 0708 	mla	r7, r6, r8, r0
 8018f7e:	2e00      	cmp	r6, #0
 8018f80:	eb02 0a07 	add.w	sl, r2, r7
 8018f84:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018f88:	9d01      	ldr	r5, [sp, #4]
 8018f8a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018f8e:	ea45 0509 	orr.w	r5, r5, r9
 8018f92:	9505      	str	r5, [sp, #20]
 8018f94:	f2c0 80b2 	blt.w	80190fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018f98:	45b3      	cmp	fp, r6
 8018f9a:	f340 80af 	ble.w	80190fc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	f2c0 80aa 	blt.w	80190f8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018fa4:	4580      	cmp	r8, r0
 8018fa6:	f340 80a7 	ble.w	80190f8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018faa:	9a03      	ldr	r2, [sp, #12]
 8018fac:	5dd7      	ldrb	r7, [r2, r7]
 8018fae:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018fb2:	441f      	add	r7, r3
 8018fb4:	1c42      	adds	r2, r0, #1
 8018fb6:	f100 80a4 	bmi.w	8019102 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018fba:	4590      	cmp	r8, r2
 8018fbc:	f340 80a1 	ble.w	8019102 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018fc0:	2c00      	cmp	r4, #0
 8018fc2:	f000 809e 	beq.w	8019102 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018fc6:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018fca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fce:	441d      	add	r5, r3
 8018fd0:	3601      	adds	r6, #1
 8018fd2:	f100 809a 	bmi.w	801910a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018fd6:	45b3      	cmp	fp, r6
 8018fd8:	f340 8097 	ble.w	801910a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018fdc:	f1bc 0f00 	cmp.w	ip, #0
 8018fe0:	f000 8093 	beq.w	801910a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	f2c0 808e 	blt.w	8019106 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018fea:	4580      	cmp	r8, r0
 8018fec:	f340 808b 	ble.w	8019106 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018ff0:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8018ff4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018ff8:	441e      	add	r6, r3
 8018ffa:	3001      	adds	r0, #1
 8018ffc:	f100 8088 	bmi.w	8019110 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019000:	4580      	cmp	r8, r0
 8019002:	f340 8085 	ble.w	8019110 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8019006:	2c00      	cmp	r4, #0
 8019008:	f000 8082 	beq.w	8019110 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801900c:	44d0      	add	r8, sl
 801900e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019012:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019016:	4413      	add	r3, r2
 8019018:	b2a4      	uxth	r4, r4
 801901a:	f895 a000 	ldrb.w	sl, [r5]
 801901e:	fa1f fc8c 	uxth.w	ip, ip
 8019022:	fb04 fb0c 	mul.w	fp, r4, ip
 8019026:	0124      	lsls	r4, r4, #4
 8019028:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801902c:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8019030:	eba4 040b 	sub.w	r4, r4, fp
 8019034:	fa1f f08c 	uxth.w	r0, ip
 8019038:	b2a2      	uxth	r2, r4
 801903a:	783c      	ldrb	r4, [r7, #0]
 801903c:	eba8 0800 	sub.w	r8, r8, r0
 8019040:	fa1f fc8e 	uxth.w	ip, lr
 8019044:	fb02 fa0a 	mul.w	sl, r2, sl
 8019048:	ea6f 0e0e 	mvn.w	lr, lr
 801904c:	fa1f f888 	uxth.w	r8, r8
 8019050:	fa5f fe8e 	uxtb.w	lr, lr
 8019054:	fb08 aa04 	mla	sl, r8, r4, sl
 8019058:	7834      	ldrb	r4, [r6, #0]
 801905a:	fb19 f90e 	smulbb	r9, r9, lr
 801905e:	fb00 aa04 	mla	sl, r0, r4, sl
 8019062:	781c      	ldrb	r4, [r3, #0]
 8019064:	fb0b a404 	mla	r4, fp, r4, sl
 8019068:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801906c:	fb04 990c 	mla	r9, r4, ip, r9
 8019070:	fa1f f989 	uxth.w	r9, r9
 8019074:	f109 0401 	add.w	r4, r9, #1
 8019078:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801907c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019080:	f881 9000 	strb.w	r9, [r1]
 8019084:	f895 9001 	ldrb.w	r9, [r5, #1]
 8019088:	787c      	ldrb	r4, [r7, #1]
 801908a:	fb02 f909 	mul.w	r9, r2, r9
 801908e:	fb08 9904 	mla	r9, r8, r4, r9
 8019092:	7874      	ldrb	r4, [r6, #1]
 8019094:	fb00 9904 	mla	r9, r0, r4, r9
 8019098:	785c      	ldrb	r4, [r3, #1]
 801909a:	fb0b 9404 	mla	r4, fp, r4, r9
 801909e:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80190a2:	9c02      	ldr	r4, [sp, #8]
 80190a4:	fb14 f90e 	smulbb	r9, r4, lr
 80190a8:	fb0a 940c 	mla	r4, sl, ip, r9
 80190ac:	b2a4      	uxth	r4, r4
 80190ae:	f104 0901 	add.w	r9, r4, #1
 80190b2:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80190b6:	1224      	asrs	r4, r4, #8
 80190b8:	704c      	strb	r4, [r1, #1]
 80190ba:	78ad      	ldrb	r5, [r5, #2]
 80190bc:	78bc      	ldrb	r4, [r7, #2]
 80190be:	436a      	muls	r2, r5
 80190c0:	789b      	ldrb	r3, [r3, #2]
 80190c2:	fb08 2204 	mla	r2, r8, r4, r2
 80190c6:	78b4      	ldrb	r4, [r6, #2]
 80190c8:	fb00 2004 	mla	r0, r0, r4, r2
 80190cc:	fb0b 0b03 	mla	fp, fp, r3, r0
 80190d0:	9b01      	ldr	r3, [sp, #4]
 80190d2:	fb13 fe0e 	smulbb	lr, r3, lr
 80190d6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80190da:	fb0b ec0c 	mla	ip, fp, ip, lr
 80190de:	fa1f fc8c 	uxth.w	ip, ip
 80190e2:	f10c 0e01 	add.w	lr, ip, #1
 80190e6:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80190ea:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80190ee:	f881 c002 	strb.w	ip, [r1, #2]
 80190f2:	b007      	add	sp, #28
 80190f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190f8:	af05      	add	r7, sp, #20
 80190fa:	e75b      	b.n	8018fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 80190fc:	ad05      	add	r5, sp, #20
 80190fe:	462f      	mov	r7, r5
 8019100:	e766      	b.n	8018fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8019102:	ad05      	add	r5, sp, #20
 8019104:	e764      	b.n	8018fd0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8019106:	ae05      	add	r6, sp, #20
 8019108:	e777      	b.n	8018ffa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801910a:	ab05      	add	r3, sp, #20
 801910c:	461e      	mov	r6, r3
 801910e:	e783      	b.n	8019018 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8019110:	ab05      	add	r3, sp, #20
 8019112:	e781      	b.n	8019018 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08019114 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019118:	b093      	sub	sp, #76	; 0x4c
 801911a:	9210      	str	r2, [sp, #64]	; 0x40
 801911c:	9309      	str	r3, [sp, #36]	; 0x24
 801911e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019120:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8019124:	9011      	str	r0, [sp, #68]	; 0x44
 8019126:	930e      	str	r3, [sp, #56]	; 0x38
 8019128:	6850      	ldr	r0, [r2, #4]
 801912a:	910d      	str	r1, [sp, #52]	; 0x34
 801912c:	6812      	ldr	r2, [r2, #0]
 801912e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8019132:	fb00 1303 	mla	r3, r0, r3, r1
 8019136:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801913a:	18d3      	adds	r3, r2, r3
 801913c:	930a      	str	r3, [sp, #40]	; 0x28
 801913e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	930c      	str	r3, [sp, #48]	; 0x30
 8019144:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019146:	685c      	ldr	r4, [r3, #4]
 8019148:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801914a:	3404      	adds	r4, #4
 801914c:	43db      	mvns	r3, r3
 801914e:	b2db      	uxtb	r3, r3
 8019150:	930b      	str	r3, [sp, #44]	; 0x2c
 8019152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019154:	2b00      	cmp	r3, #0
 8019156:	dc03      	bgt.n	8019160 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019158:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801915a:	2b00      	cmp	r3, #0
 801915c:	f340 8250 	ble.w	8019600 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8019160:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019162:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019166:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801916a:	1e48      	subs	r0, r1, #1
 801916c:	1e55      	subs	r5, r2, #1
 801916e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019170:	2b00      	cmp	r3, #0
 8019172:	f340 80ee 	ble.w	8019352 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8019176:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8019178:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801917a:	1436      	asrs	r6, r6, #16
 801917c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019180:	d406      	bmi.n	8019190 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019182:	4286      	cmp	r6, r0
 8019184:	da04      	bge.n	8019190 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8019186:	2b00      	cmp	r3, #0
 8019188:	db02      	blt.n	8019190 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801918a:	42ab      	cmp	r3, r5
 801918c:	f2c0 80e2 	blt.w	8019354 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8019190:	3601      	adds	r6, #1
 8019192:	f100 80cf 	bmi.w	8019334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8019196:	42b1      	cmp	r1, r6
 8019198:	f2c0 80cc 	blt.w	8019334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801919c:	3301      	adds	r3, #1
 801919e:	f100 80c9 	bmi.w	8019334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80191a2:	429a      	cmp	r2, r3
 80191a4:	f2c0 80c6 	blt.w	8019334 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80191a8:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80191ac:	f1bb 0f00 	cmp.w	fp, #0
 80191b0:	f340 80f1 	ble.w	8019396 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80191b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80191b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80191b8:	9824      	ldr	r0, [sp, #144]	; 0x90
 80191ba:	141d      	asrs	r5, r3, #16
 80191bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80191be:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80191c2:	68c7      	ldr	r7, [r0, #12]
 80191c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80191c6:	1418      	asrs	r0, r3, #16
 80191c8:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80191cc:	6892      	ldr	r2, [r2, #8]
 80191ce:	f100 8137 	bmi.w	8019440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80191d2:	f102 3cff 	add.w	ip, r2, #4294967295
 80191d6:	4560      	cmp	r0, ip
 80191d8:	f280 8132 	bge.w	8019440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80191dc:	2d00      	cmp	r5, #0
 80191de:	f2c0 812f 	blt.w	8019440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80191e2:	f107 3cff 	add.w	ip, r7, #4294967295
 80191e6:	4565      	cmp	r5, ip
 80191e8:	f280 812a 	bge.w	8019440 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80191ec:	b212      	sxth	r2, r2
 80191ee:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80191f0:	fb05 0002 	mla	r0, r5, r2, r0
 80191f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80191f6:	f817 c000 	ldrb.w	ip, [r7, r0]
 80191fa:	4405      	add	r5, r0
 80191fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019200:	eb04 0e0c 	add.w	lr, r4, ip
 8019204:	f1b8 0f00 	cmp.w	r8, #0
 8019208:	f000 810c 	beq.w	8019424 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801920c:	786f      	ldrb	r7, [r5, #1]
 801920e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019212:	4427      	add	r7, r4
 8019214:	2900      	cmp	r1, #0
 8019216:	f000 810d 	beq.w	8019434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801921a:	18a8      	adds	r0, r5, r2
 801921c:	5caa      	ldrb	r2, [r5, r2]
 801921e:	7840      	ldrb	r0, [r0, #1]
 8019220:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019224:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019228:	4422      	add	r2, r4
 801922a:	4420      	add	r0, r4
 801922c:	fa1f f388 	uxth.w	r3, r8
 8019230:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8019234:	b289      	uxth	r1, r1
 8019236:	f897 c000 	ldrb.w	ip, [r7]
 801923a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801923e:	fb03 f901 	mul.w	r9, r3, r1
 8019242:	011b      	lsls	r3, r3, #4
 8019244:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019248:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801924c:	eba3 0309 	sub.w	r3, r3, r9
 8019250:	b289      	uxth	r1, r1
 8019252:	b29b      	uxth	r3, r3
 8019254:	eba8 0801 	sub.w	r8, r8, r1
 8019258:	fb03 fc0c 	mul.w	ip, r3, ip
 801925c:	fa1f f888 	uxth.w	r8, r8
 8019260:	930f      	str	r3, [sp, #60]	; 0x3c
 8019262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019264:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019268:	f892 a000 	ldrb.w	sl, [r2]
 801926c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019270:	f890 a000 	ldrb.w	sl, [r0]
 8019274:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019278:	f896 a000 	ldrb.w	sl, [r6]
 801927c:	fb1a fa03 	smulbb	sl, sl, r3
 8019280:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019286:	fb0c ac05 	mla	ip, ip, r5, sl
 801928a:	fa1f fc8c 	uxth.w	ip, ip
 801928e:	f10c 0a01 	add.w	sl, ip, #1
 8019292:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019296:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801929a:	f886 a000 	strb.w	sl, [r6]
 801929e:	f897 c001 	ldrb.w	ip, [r7, #1]
 80192a2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80192a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80192aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192ac:	fb08 cc0a 	mla	ip, r8, sl, ip
 80192b0:	f892 a001 	ldrb.w	sl, [r2, #1]
 80192b4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80192b8:	f890 a001 	ldrb.w	sl, [r0, #1]
 80192bc:	fb09 cc0a 	mla	ip, r9, sl, ip
 80192c0:	f896 a001 	ldrb.w	sl, [r6, #1]
 80192c4:	fb1a fa03 	smulbb	sl, sl, r3
 80192c8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80192cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80192ce:	fb0c ac05 	mla	ip, ip, r5, sl
 80192d2:	fa1f fc8c 	uxth.w	ip, ip
 80192d6:	f10c 0a01 	add.w	sl, ip, #1
 80192da:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80192de:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80192e2:	f886 c001 	strb.w	ip, [r6, #1]
 80192e6:	78bf      	ldrb	r7, [r7, #2]
 80192e8:	f89e c002 	ldrb.w	ip, [lr, #2]
 80192ec:	437b      	muls	r3, r7
 80192ee:	fb08 330c 	mla	r3, r8, ip, r3
 80192f2:	f892 c002 	ldrb.w	ip, [r2, #2]
 80192f6:	7882      	ldrb	r2, [r0, #2]
 80192f8:	fb01 310c 	mla	r1, r1, ip, r3
 80192fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192fe:	fb09 1902 	mla	r9, r9, r2, r1
 8019302:	78b1      	ldrb	r1, [r6, #2]
 8019304:	fb11 f103 	smulbb	r1, r1, r3
 8019308:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801930c:	fb09 1505 	mla	r5, r9, r5, r1
 8019310:	b2ad      	uxth	r5, r5
 8019312:	1c6b      	adds	r3, r5, #1
 8019314:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019318:	122d      	asrs	r5, r5, #8
 801931a:	70b5      	strb	r5, [r6, #2]
 801931c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801931e:	3603      	adds	r6, #3
 8019320:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8019322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019326:	4413      	add	r3, r2
 8019328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801932a:	931d      	str	r3, [sp, #116]	; 0x74
 801932c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801932e:	4413      	add	r3, r2
 8019330:	931e      	str	r3, [sp, #120]	; 0x78
 8019332:	e73b      	b.n	80191ac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8019334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019336:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8019338:	4433      	add	r3, r6
 801933a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801933c:	931d      	str	r3, [sp, #116]	; 0x74
 801933e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019340:	4433      	add	r3, r6
 8019342:	931e      	str	r3, [sp, #120]	; 0x78
 8019344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019346:	3b01      	subs	r3, #1
 8019348:	9309      	str	r3, [sp, #36]	; 0x24
 801934a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801934c:	3303      	adds	r3, #3
 801934e:	930a      	str	r3, [sp, #40]	; 0x28
 8019350:	e70d      	b.n	801916e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019352:	d028      	beq.n	80193a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8019354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019356:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8019358:	3b01      	subs	r3, #1
 801935a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801935c:	fb00 5003 	mla	r0, r0, r3, r5
 8019360:	1400      	asrs	r0, r0, #16
 8019362:	f53f af21 	bmi.w	80191a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019366:	3901      	subs	r1, #1
 8019368:	4288      	cmp	r0, r1
 801936a:	f6bf af1d 	bge.w	80191a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801936e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8019370:	981e      	ldr	r0, [sp, #120]	; 0x78
 8019372:	fb01 0303 	mla	r3, r1, r3, r0
 8019376:	141b      	asrs	r3, r3, #16
 8019378:	f53f af16 	bmi.w	80191a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801937c:	3a01      	subs	r2, #1
 801937e:	4293      	cmp	r3, r2
 8019380:	f6bf af12 	bge.w	80191a8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019386:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801938a:	1cdf      	adds	r7, r3, #3
 801938c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8019390:	f1b9 0f00 	cmp.w	r9, #0
 8019394:	dc73      	bgt.n	801947e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8019396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801939a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801939e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80193a2:	441a      	add	r2, r3
 80193a4:	920a      	str	r2, [sp, #40]	; 0x28
 80193a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	f340 8129 	ble.w	8019600 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80193ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80193b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80193b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80193b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80193bc:	eef0 6a62 	vmov.f32	s13, s5
 80193c0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80193c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80193c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193cc:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80193d0:	eef0 6a43 	vmov.f32	s13, s6
 80193d4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80193d8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80193dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80193e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80193e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80193e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80193ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80193f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80193f4:	ee12 2a90 	vmov	r2, s5
 80193f8:	eef0 2a47 	vmov.f32	s5, s14
 80193fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019400:	ee13 2a10 	vmov	r2, s6
 8019404:	931f      	str	r3, [sp, #124]	; 0x7c
 8019406:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019408:	eeb0 3a67 	vmov.f32	s6, s15
 801940c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019410:	9320      	str	r3, [sp, #128]	; 0x80
 8019412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019416:	3b01      	subs	r3, #1
 8019418:	930d      	str	r3, [sp, #52]	; 0x34
 801941a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801941c:	bf08      	it	eq
 801941e:	4613      	moveq	r3, r2
 8019420:	9309      	str	r3, [sp, #36]	; 0x24
 8019422:	e696      	b.n	8019152 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019424:	b149      	cbz	r1, 801943a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8019426:	5caa      	ldrb	r2, [r5, r2]
 8019428:	4670      	mov	r0, lr
 801942a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801942e:	4422      	add	r2, r4
 8019430:	4677      	mov	r7, lr
 8019432:	e6fb      	b.n	801922c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8019434:	4670      	mov	r0, lr
 8019436:	4672      	mov	r2, lr
 8019438:	e6f8      	b.n	801922c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801943a:	4670      	mov	r0, lr
 801943c:	4672      	mov	r2, lr
 801943e:	e7f7      	b.n	8019430 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8019440:	f110 0c01 	adds.w	ip, r0, #1
 8019444:	f53f af6a 	bmi.w	801931c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019448:	4562      	cmp	r2, ip
 801944a:	f6ff af67 	blt.w	801931c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801944e:	f115 0c01 	adds.w	ip, r5, #1
 8019452:	f53f af63 	bmi.w	801931c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019456:	4567      	cmp	r7, ip
 8019458:	f6ff af60 	blt.w	801931c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801945c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801945e:	b23f      	sxth	r7, r7
 8019460:	b212      	sxth	r2, r2
 8019462:	9002      	str	r0, [sp, #8]
 8019464:	9701      	str	r7, [sp, #4]
 8019466:	9200      	str	r2, [sp, #0]
 8019468:	9811      	ldr	r0, [sp, #68]	; 0x44
 801946a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801946c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8019470:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8019474:	4623      	mov	r3, r4
 8019476:	4631      	mov	r1, r6
 8019478:	f7ff fd69 	bl	8018f4e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801947c:	e74e      	b.n	801931c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801947e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019480:	981e      	ldr	r0, [sp, #120]	; 0x78
 8019482:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019486:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019488:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801948a:	1400      	asrs	r0, r0, #16
 801948c:	142d      	asrs	r5, r5, #16
 801948e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019490:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019494:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019498:	fb02 5000 	mla	r0, r2, r0, r5
 801949c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801949e:	f815 e000 	ldrb.w	lr, [r5, r0]
 80194a2:	eb05 0c00 	add.w	ip, r5, r0
 80194a6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80194aa:	eb04 060e 	add.w	r6, r4, lr
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 8097 	beq.w	80195e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80194b4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80194b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194bc:	4425      	add	r5, r4
 80194be:	2900      	cmp	r1, #0
 80194c0:	f000 8098 	beq.w	80195f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80194c4:	eb0c 0002 	add.w	r0, ip, r2
 80194c8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80194cc:	7840      	ldrb	r0, [r0, #1]
 80194ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80194d6:	4422      	add	r2, r4
 80194d8:	4420      	add	r0, r4
 80194da:	b29b      	uxth	r3, r3
 80194dc:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80194e0:	b289      	uxth	r1, r1
 80194e2:	f895 e000 	ldrb.w	lr, [r5]
 80194e6:	3703      	adds	r7, #3
 80194e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80194ec:	fb03 f801 	mul.w	r8, r3, r1
 80194f0:	011b      	lsls	r3, r3, #4
 80194f2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80194f6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80194fa:	eba3 0308 	sub.w	r3, r3, r8
 80194fe:	b289      	uxth	r1, r1
 8019500:	b29b      	uxth	r3, r3
 8019502:	ebac 0c01 	sub.w	ip, ip, r1
 8019506:	fb03 fe0e 	mul.w	lr, r3, lr
 801950a:	fa1f fc8c 	uxth.w	ip, ip
 801950e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019512:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019516:	f892 b000 	ldrb.w	fp, [r2]
 801951a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801951e:	f890 b000 	ldrb.w	fp, [r0]
 8019522:	fb08 ee0b 	mla	lr, r8, fp, lr
 8019526:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801952a:	fb1b fb03 	smulbb	fp, fp, r3
 801952e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019534:	fb0e be0a 	mla	lr, lr, sl, fp
 8019538:	fa1f fe8e 	uxth.w	lr, lr
 801953c:	f10e 0b01 	add.w	fp, lr, #1
 8019540:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019544:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019548:	f807 ec06 	strb.w	lr, [r7, #-6]
 801954c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019550:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019554:	fb03 fe0e 	mul.w	lr, r3, lr
 8019558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801955a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801955e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019562:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019566:	f890 b001 	ldrb.w	fp, [r0, #1]
 801956a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801956e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8019572:	fb1b fb03 	smulbb	fp, fp, r3
 8019576:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801957a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801957c:	fb0e be0a 	mla	lr, lr, sl, fp
 8019580:	fa1f fe8e 	uxth.w	lr, lr
 8019584:	f10e 0b01 	add.w	fp, lr, #1
 8019588:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801958c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019590:	f807 ec05 	strb.w	lr, [r7, #-5]
 8019594:	78ad      	ldrb	r5, [r5, #2]
 8019596:	78b6      	ldrb	r6, [r6, #2]
 8019598:	436b      	muls	r3, r5
 801959a:	7895      	ldrb	r5, [r2, #2]
 801959c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801959e:	fb0c 3306 	mla	r3, ip, r6, r3
 80195a2:	fb01 3305 	mla	r3, r1, r5, r3
 80195a6:	7885      	ldrb	r5, [r0, #2]
 80195a8:	fb08 3805 	mla	r8, r8, r5, r3
 80195ac:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80195b0:	fb13 f302 	smulbb	r3, r3, r2
 80195b4:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80195b8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80195ba:	fb08 380a 	mla	r8, r8, sl, r3
 80195be:	fa1f f888 	uxth.w	r8, r8
 80195c2:	f108 0301 	add.w	r3, r8, #1
 80195c6:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80195ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80195cc:	4413      	add	r3, r2
 80195ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80195d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80195d4:	931d      	str	r3, [sp, #116]	; 0x74
 80195d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195d8:	f807 8c04 	strb.w	r8, [r7, #-4]
 80195dc:	4413      	add	r3, r2
 80195de:	931e      	str	r3, [sp, #120]	; 0x78
 80195e0:	e6d6      	b.n	8019390 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80195e2:	b151      	cbz	r1, 80195fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80195e4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80195e8:	4630      	mov	r0, r6
 80195ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80195ee:	4422      	add	r2, r4
 80195f0:	4635      	mov	r5, r6
 80195f2:	e772      	b.n	80194da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80195f4:	4630      	mov	r0, r6
 80195f6:	4632      	mov	r2, r6
 80195f8:	e76f      	b.n	80194da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80195fa:	4630      	mov	r0, r6
 80195fc:	4632      	mov	r2, r6
 80195fe:	e7f7      	b.n	80195f0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019600:	b013      	add	sp, #76	; 0x4c
 8019602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019606 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8019606:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801960a:	784c      	ldrb	r4, [r1, #1]
 801960c:	f891 a002 	ldrb.w	sl, [r1, #2]
 8019610:	0224      	lsls	r4, r4, #8
 8019612:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8019616:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801961a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801961e:	f891 a000 	ldrb.w	sl, [r1]
 8019622:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8019626:	ea44 040a 	orr.w	r4, r4, sl
 801962a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801962e:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8019632:	9401      	str	r4, [sp, #4]
 8019634:	fb05 c70e 	mla	r7, r5, lr, ip
 8019638:	2d00      	cmp	r5, #0
 801963a:	eb02 0807 	add.w	r8, r2, r7
 801963e:	db72      	blt.n	8019726 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8019640:	45a9      	cmp	r9, r5
 8019642:	dd70      	ble.n	8019726 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8019644:	f1bc 0f00 	cmp.w	ip, #0
 8019648:	db6b      	blt.n	8019722 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801964a:	45e6      	cmp	lr, ip
 801964c:	dd69      	ble.n	8019722 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801964e:	5dd7      	ldrb	r7, [r2, r7]
 8019650:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019654:	441f      	add	r7, r3
 8019656:	f11c 0201 	adds.w	r2, ip, #1
 801965a:	d467      	bmi.n	801972c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801965c:	4596      	cmp	lr, r2
 801965e:	dd65      	ble.n	801972c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8019660:	2800      	cmp	r0, #0
 8019662:	d063      	beq.n	801972c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8019664:	f898 4001 	ldrb.w	r4, [r8, #1]
 8019668:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801966c:	441c      	add	r4, r3
 801966e:	3501      	adds	r5, #1
 8019670:	d460      	bmi.n	8019734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8019672:	45a9      	cmp	r9, r5
 8019674:	dd5e      	ble.n	8019734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8019676:	2e00      	cmp	r6, #0
 8019678:	d05c      	beq.n	8019734 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801967a:	f1bc 0f00 	cmp.w	ip, #0
 801967e:	db57      	blt.n	8019730 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8019680:	45e6      	cmp	lr, ip
 8019682:	dd55      	ble.n	8019730 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8019684:	f818 500e 	ldrb.w	r5, [r8, lr]
 8019688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801968c:	441d      	add	r5, r3
 801968e:	f11c 0201 	adds.w	r2, ip, #1
 8019692:	d452      	bmi.n	801973a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8019694:	4596      	cmp	lr, r2
 8019696:	dd50      	ble.n	801973a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8019698:	2800      	cmp	r0, #0
 801969a:	d04e      	beq.n	801973a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801969c:	44c6      	add	lr, r8
 801969e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80196a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80196a6:	4413      	add	r3, r2
 80196a8:	b280      	uxth	r0, r0
 80196aa:	f897 8000 	ldrb.w	r8, [r7]
 80196ae:	b2b2      	uxth	r2, r6
 80196b0:	fb00 f602 	mul.w	r6, r0, r2
 80196b4:	0100      	lsls	r0, r0, #4
 80196b6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80196ba:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80196be:	1b80      	subs	r0, r0, r6
 80196c0:	fa1f fc82 	uxth.w	ip, r2
 80196c4:	b282      	uxth	r2, r0
 80196c6:	7820      	ldrb	r0, [r4, #0]
 80196c8:	ebae 0e0c 	sub.w	lr, lr, ip
 80196cc:	4350      	muls	r0, r2
 80196ce:	fa1f fe8e 	uxth.w	lr, lr
 80196d2:	fb0e 0808 	mla	r8, lr, r8, r0
 80196d6:	7828      	ldrb	r0, [r5, #0]
 80196d8:	fb0c 8800 	mla	r8, ip, r0, r8
 80196dc:	7818      	ldrb	r0, [r3, #0]
 80196de:	fb06 8000 	mla	r0, r6, r0, r8
 80196e2:	1200      	asrs	r0, r0, #8
 80196e4:	7008      	strb	r0, [r1, #0]
 80196e6:	7860      	ldrb	r0, [r4, #1]
 80196e8:	f897 8001 	ldrb.w	r8, [r7, #1]
 80196ec:	4350      	muls	r0, r2
 80196ee:	fb0e 0808 	mla	r8, lr, r8, r0
 80196f2:	7868      	ldrb	r0, [r5, #1]
 80196f4:	fb0c 8800 	mla	r8, ip, r0, r8
 80196f8:	7858      	ldrb	r0, [r3, #1]
 80196fa:	fb06 8000 	mla	r0, r6, r0, r8
 80196fe:	1200      	asrs	r0, r0, #8
 8019700:	7048      	strb	r0, [r1, #1]
 8019702:	78a0      	ldrb	r0, [r4, #2]
 8019704:	78bf      	ldrb	r7, [r7, #2]
 8019706:	4350      	muls	r0, r2
 8019708:	78aa      	ldrb	r2, [r5, #2]
 801970a:	fb0e 0007 	mla	r0, lr, r7, r0
 801970e:	fb0c 0c02 	mla	ip, ip, r2, r0
 8019712:	789a      	ldrb	r2, [r3, #2]
 8019714:	fb06 c202 	mla	r2, r6, r2, ip
 8019718:	1212      	asrs	r2, r2, #8
 801971a:	708a      	strb	r2, [r1, #2]
 801971c:	b002      	add	sp, #8
 801971e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019722:	af01      	add	r7, sp, #4
 8019724:	e797      	b.n	8019656 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8019726:	ac01      	add	r4, sp, #4
 8019728:	4627      	mov	r7, r4
 801972a:	e7a0      	b.n	801966e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801972c:	ac01      	add	r4, sp, #4
 801972e:	e79e      	b.n	801966e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8019730:	ad01      	add	r5, sp, #4
 8019732:	e7ac      	b.n	801968e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8019734:	ab01      	add	r3, sp, #4
 8019736:	461d      	mov	r5, r3
 8019738:	e7b6      	b.n	80196a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801973a:	ab01      	add	r3, sp, #4
 801973c:	e7b4      	b.n	80196a8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801973e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801973e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019742:	b08d      	sub	sp, #52	; 0x34
 8019744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019748:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801974c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801974e:	900b      	str	r0, [sp, #44]	; 0x2c
 8019750:	9306      	str	r3, [sp, #24]
 8019752:	6850      	ldr	r0, [r2, #4]
 8019754:	6812      	ldr	r2, [r2, #0]
 8019756:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019758:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801975c:	fb00 1303 	mla	r3, r0, r3, r1
 8019760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019764:	18d3      	adds	r3, r2, r3
 8019766:	9307      	str	r3, [sp, #28]
 8019768:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801976a:	681b      	ldr	r3, [r3, #0]
 801976c:	9308      	str	r3, [sp, #32]
 801976e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019770:	685d      	ldr	r5, [r3, #4]
 8019772:	3504      	adds	r5, #4
 8019774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019776:	2b00      	cmp	r3, #0
 8019778:	dc03      	bgt.n	8019782 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801977a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801977c:	2b00      	cmp	r3, #0
 801977e:	f340 81e6 	ble.w	8019b4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8019782:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019784:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019788:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801978c:	1e48      	subs	r0, r1, #1
 801978e:	1e56      	subs	r6, r2, #1
 8019790:	9b06      	ldr	r3, [sp, #24]
 8019792:	2b00      	cmp	r3, #0
 8019794:	f340 80bd 	ble.w	8019912 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8019798:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801979a:	1427      	asrs	r7, r4, #16
 801979c:	ea4f 4323 	mov.w	r3, r3, asr #16
 80197a0:	d406      	bmi.n	80197b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80197a2:	4287      	cmp	r7, r0
 80197a4:	da04      	bge.n	80197b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	db02      	blt.n	80197b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80197aa:	42b3      	cmp	r3, r6
 80197ac:	f2c0 80b2 	blt.w	8019914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80197b0:	3701      	adds	r7, #1
 80197b2:	f100 80a1 	bmi.w	80198f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80197b6:	42b9      	cmp	r1, r7
 80197b8:	f2c0 809e 	blt.w	80198f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80197bc:	3301      	adds	r3, #1
 80197be:	f100 809b 	bmi.w	80198f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80197c2:	429a      	cmp	r2, r3
 80197c4:	f2c0 8098 	blt.w	80198f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80197c8:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80197cc:	f1bb 0f00 	cmp.w	fp, #0
 80197d0:	f340 80bf 	ble.w	8019952 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80197d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80197d6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80197d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80197da:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80197de:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80197e2:	1420      	asrs	r0, r4, #16
 80197e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80197e6:	ea4f 4723 	mov.w	r7, r3, asr #16
 80197ea:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80197ee:	6892      	ldr	r2, [r2, #8]
 80197f0:	f100 8103 	bmi.w	80199fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80197f4:	f102 3eff 	add.w	lr, r2, #4294967295
 80197f8:	4570      	cmp	r0, lr
 80197fa:	f280 80fe 	bge.w	80199fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 80197fe:	2f00      	cmp	r7, #0
 8019800:	f2c0 80fb 	blt.w	80199fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019804:	f10c 3eff 	add.w	lr, ip, #4294967295
 8019808:	4577      	cmp	r7, lr
 801980a:	f280 80f6 	bge.w	80199fa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801980e:	b212      	sxth	r2, r2
 8019810:	fb07 0002 	mla	r0, r7, r2, r0
 8019814:	9f08      	ldr	r7, [sp, #32]
 8019816:	f817 8000 	ldrb.w	r8, [r7, r0]
 801981a:	eb07 0e00 	add.w	lr, r7, r0
 801981e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019822:	eb05 0c08 	add.w	ip, r5, r8
 8019826:	2b00      	cmp	r3, #0
 8019828:	f000 80d8 	beq.w	80199dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801982c:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8019830:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019834:	442f      	add	r7, r5
 8019836:	2900      	cmp	r1, #0
 8019838:	f000 80d9 	beq.w	80199ee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801983c:	eb0e 0002 	add.w	r0, lr, r2
 8019840:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8019844:	7840      	ldrb	r0, [r0, #1]
 8019846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801984a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801984e:	442a      	add	r2, r5
 8019850:	4428      	add	r0, r5
 8019852:	b29b      	uxth	r3, r3
 8019854:	f815 a008 	ldrb.w	sl, [r5, r8]
 8019858:	b289      	uxth	r1, r1
 801985a:	f897 8000 	ldrb.w	r8, [r7]
 801985e:	fb03 f901 	mul.w	r9, r3, r1
 8019862:	011b      	lsls	r3, r3, #4
 8019864:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019868:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801986c:	eba3 0309 	sub.w	r3, r3, r9
 8019870:	b289      	uxth	r1, r1
 8019872:	b29b      	uxth	r3, r3
 8019874:	ebae 0e01 	sub.w	lr, lr, r1
 8019878:	fb03 f808 	mul.w	r8, r3, r8
 801987c:	fa1f fe8e 	uxth.w	lr, lr
 8019880:	fb0e 880a 	mla	r8, lr, sl, r8
 8019884:	f892 a000 	ldrb.w	sl, [r2]
 8019888:	fb01 880a 	mla	r8, r1, sl, r8
 801988c:	f890 a000 	ldrb.w	sl, [r0]
 8019890:	fb09 880a 	mla	r8, r9, sl, r8
 8019894:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019898:	f886 8000 	strb.w	r8, [r6]
 801989c:	f897 8001 	ldrb.w	r8, [r7, #1]
 80198a0:	f89c a001 	ldrb.w	sl, [ip, #1]
 80198a4:	fb03 f808 	mul.w	r8, r3, r8
 80198a8:	fb0e 880a 	mla	r8, lr, sl, r8
 80198ac:	f892 a001 	ldrb.w	sl, [r2, #1]
 80198b0:	fb01 880a 	mla	r8, r1, sl, r8
 80198b4:	f890 a001 	ldrb.w	sl, [r0, #1]
 80198b8:	fb09 880a 	mla	r8, r9, sl, r8
 80198bc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80198c0:	f886 8001 	strb.w	r8, [r6, #1]
 80198c4:	78bf      	ldrb	r7, [r7, #2]
 80198c6:	f89c c002 	ldrb.w	ip, [ip, #2]
 80198ca:	437b      	muls	r3, r7
 80198cc:	7892      	ldrb	r2, [r2, #2]
 80198ce:	fb0e 330c 	mla	r3, lr, ip, r3
 80198d2:	fb01 3102 	mla	r1, r1, r2, r3
 80198d6:	7882      	ldrb	r2, [r0, #2]
 80198d8:	fb09 1902 	mla	r9, r9, r2, r1
 80198dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80198e0:	f886 9002 	strb.w	r9, [r6, #2]
 80198e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80198e6:	3603      	adds	r6, #3
 80198e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80198ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80198ee:	441c      	add	r4, r3
 80198f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80198f2:	4413      	add	r3, r2
 80198f4:	9318      	str	r3, [sp, #96]	; 0x60
 80198f6:	e769      	b.n	80197cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80198f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80198fa:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80198fc:	441c      	add	r4, r3
 80198fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019900:	443b      	add	r3, r7
 8019902:	9318      	str	r3, [sp, #96]	; 0x60
 8019904:	9b06      	ldr	r3, [sp, #24]
 8019906:	3b01      	subs	r3, #1
 8019908:	9306      	str	r3, [sp, #24]
 801990a:	9b07      	ldr	r3, [sp, #28]
 801990c:	3303      	adds	r3, #3
 801990e:	9307      	str	r3, [sp, #28]
 8019910:	e73e      	b.n	8019790 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019912:	d026      	beq.n	8019962 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8019914:	9b06      	ldr	r3, [sp, #24]
 8019916:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019918:	3b01      	subs	r3, #1
 801991a:	fb00 4003 	mla	r0, r0, r3, r4
 801991e:	1400      	asrs	r0, r0, #16
 8019920:	f53f af52 	bmi.w	80197c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019924:	3901      	subs	r1, #1
 8019926:	4288      	cmp	r0, r1
 8019928:	f6bf af4e 	bge.w	80197c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801992c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801992e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019930:	fb01 0303 	mla	r3, r1, r3, r0
 8019934:	141b      	asrs	r3, r3, #16
 8019936:	f53f af47 	bmi.w	80197c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801993a:	3a01      	subs	r2, #1
 801993c:	4293      	cmp	r3, r2
 801993e:	f6bf af43 	bge.w	80197c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019942:	9b07      	ldr	r3, [sp, #28]
 8019944:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019948:	f103 0803 	add.w	r8, r3, #3
 801994c:	f1ba 0f00 	cmp.w	sl, #0
 8019950:	dc71      	bgt.n	8019a36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8019952:	9b06      	ldr	r3, [sp, #24]
 8019954:	9a07      	ldr	r2, [sp, #28]
 8019956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801995a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801995e:	441a      	add	r2, r3
 8019960:	9207      	str	r2, [sp, #28]
 8019962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019964:	2b00      	cmp	r3, #0
 8019966:	f340 80f2 	ble.w	8019b4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801996a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801996e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019970:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019974:	eeb0 6a62 	vmov.f32	s12, s5
 8019978:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801997c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019980:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019984:	ee16 4a10 	vmov	r4, s12
 8019988:	eeb0 6a43 	vmov.f32	s12, s6
 801998c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019990:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8019994:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019998:	ee61 7a27 	vmul.f32	s15, s2, s15
 801999c:	ee77 2a62 	vsub.f32	s5, s14, s5
 80199a0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80199a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80199a8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80199ac:	ee12 2a90 	vmov	r2, s5
 80199b0:	eef0 2a47 	vmov.f32	s5, s14
 80199b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80199b8:	ee13 2a10 	vmov	r2, s6
 80199bc:	9319      	str	r3, [sp, #100]	; 0x64
 80199be:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80199c0:	eeb0 3a67 	vmov.f32	s6, s15
 80199c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80199c8:	931a      	str	r3, [sp, #104]	; 0x68
 80199ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199ce:	3b01      	subs	r3, #1
 80199d0:	9309      	str	r3, [sp, #36]	; 0x24
 80199d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80199d4:	bf08      	it	eq
 80199d6:	4613      	moveq	r3, r2
 80199d8:	9306      	str	r3, [sp, #24]
 80199da:	e6cb      	b.n	8019774 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80199dc:	b151      	cbz	r1, 80199f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80199de:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80199e2:	4660      	mov	r0, ip
 80199e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80199e8:	442a      	add	r2, r5
 80199ea:	4667      	mov	r7, ip
 80199ec:	e731      	b.n	8019852 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80199ee:	4660      	mov	r0, ip
 80199f0:	4662      	mov	r2, ip
 80199f2:	e72e      	b.n	8019852 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80199f4:	4660      	mov	r0, ip
 80199f6:	4662      	mov	r2, ip
 80199f8:	e7f7      	b.n	80199ea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 80199fa:	f110 0e01 	adds.w	lr, r0, #1
 80199fe:	f53f af71 	bmi.w	80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019a02:	4572      	cmp	r2, lr
 8019a04:	f6ff af6e 	blt.w	80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019a08:	f117 0e01 	adds.w	lr, r7, #1
 8019a0c:	f53f af6a 	bmi.w	80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019a10:	45f4      	cmp	ip, lr
 8019a12:	f6ff af67 	blt.w	80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019a16:	b212      	sxth	r2, r2
 8019a18:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019a1c:	fa0f f38c 	sxth.w	r3, ip
 8019a20:	9200      	str	r2, [sp, #0]
 8019a22:	4631      	mov	r1, r6
 8019a24:	9a08      	ldr	r2, [sp, #32]
 8019a26:	9301      	str	r3, [sp, #4]
 8019a28:	462b      	mov	r3, r5
 8019a2a:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8019a2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019a30:	f7ff fde9 	bl	8019606 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8019a34:	e756      	b.n	80198e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019a36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019a38:	1426      	asrs	r6, r4, #16
 8019a3a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019a3c:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019a40:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019a44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8019a46:	1400      	asrs	r0, r0, #16
 8019a48:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019a4c:	fb02 6000 	mla	r0, r2, r0, r6
 8019a50:	9e08      	ldr	r6, [sp, #32]
 8019a52:	f816 e000 	ldrb.w	lr, [r6, r0]
 8019a56:	eb06 0c00 	add.w	ip, r6, r0
 8019a5a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019a5e:	eb05 070e 	add.w	r7, r5, lr
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d064      	beq.n	8019b30 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8019a66:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8019a6a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019a6e:	442e      	add	r6, r5
 8019a70:	2900      	cmp	r1, #0
 8019a72:	d066      	beq.n	8019b42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8019a74:	eb0c 0002 	add.w	r0, ip, r2
 8019a78:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a7c:	7840      	ldrb	r0, [r0, #1]
 8019a7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019a82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019a86:	442a      	add	r2, r5
 8019a88:	4428      	add	r0, r5
 8019a8a:	b29b      	uxth	r3, r3
 8019a8c:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8019a90:	b289      	uxth	r1, r1
 8019a92:	f896 e000 	ldrb.w	lr, [r6]
 8019a96:	f108 0803 	add.w	r8, r8, #3
 8019a9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019a9e:	fb03 f901 	mul.w	r9, r3, r1
 8019aa2:	011b      	lsls	r3, r3, #4
 8019aa4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019aa8:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019aac:	eba3 0309 	sub.w	r3, r3, r9
 8019ab0:	b289      	uxth	r1, r1
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	ebac 0c01 	sub.w	ip, ip, r1
 8019ab8:	fb03 fe0e 	mul.w	lr, r3, lr
 8019abc:	fa1f fc8c 	uxth.w	ip, ip
 8019ac0:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019ac4:	f892 b000 	ldrb.w	fp, [r2]
 8019ac8:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019acc:	f890 b000 	ldrb.w	fp, [r0]
 8019ad0:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019ad4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019ad8:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019adc:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019ae0:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019ae4:	fb03 fe0e 	mul.w	lr, r3, lr
 8019ae8:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019aec:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019af0:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019af4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019af8:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019afc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019b00:	f808 ec05 	strb.w	lr, [r8, #-5]
 8019b04:	78b6      	ldrb	r6, [r6, #2]
 8019b06:	78bf      	ldrb	r7, [r7, #2]
 8019b08:	4373      	muls	r3, r6
 8019b0a:	7896      	ldrb	r6, [r2, #2]
 8019b0c:	7882      	ldrb	r2, [r0, #2]
 8019b0e:	fb0c 3307 	mla	r3, ip, r7, r3
 8019b12:	fb01 3306 	mla	r3, r1, r6, r3
 8019b16:	fb09 3902 	mla	r9, r9, r2, r3
 8019b1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019b1c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019b1e:	441c      	add	r4, r3
 8019b20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019b22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019b26:	4413      	add	r3, r2
 8019b28:	f808 9c04 	strb.w	r9, [r8, #-4]
 8019b2c:	9318      	str	r3, [sp, #96]	; 0x60
 8019b2e:	e70d      	b.n	801994c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019b30:	b151      	cbz	r1, 8019b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8019b32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019b36:	4638      	mov	r0, r7
 8019b38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019b3c:	442a      	add	r2, r5
 8019b3e:	463e      	mov	r6, r7
 8019b40:	e7a3      	b.n	8019a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019b42:	4638      	mov	r0, r7
 8019b44:	463a      	mov	r2, r7
 8019b46:	e7a0      	b.n	8019a8a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019b48:	4638      	mov	r0, r7
 8019b4a:	463a      	mov	r2, r7
 8019b4c:	e7f7      	b.n	8019b3e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8019b4e:	b00d      	add	sp, #52	; 0x34
 8019b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8019b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b58:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8019b5c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8019b60:	2d00      	cmp	r5, #0
 8019b62:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019b66:	fb05 700c 	mla	r0, r5, ip, r7
 8019b6a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8019b6e:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8019b72:	eb02 0800 	add.w	r8, r2, r0
 8019b76:	f2c0 8118 	blt.w	8019daa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019b7a:	45a9      	cmp	r9, r5
 8019b7c:	f340 8115 	ble.w	8019daa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8019b80:	2f00      	cmp	r7, #0
 8019b82:	f2c0 8110 	blt.w	8019da6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019b86:	45bc      	cmp	ip, r7
 8019b88:	f340 810d 	ble.w	8019da6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019b8c:	5c12      	ldrb	r2, [r2, r0]
 8019b8e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019b92:	1c7a      	adds	r2, r7, #1
 8019b94:	f100 810c 	bmi.w	8019db0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019b98:	4594      	cmp	ip, r2
 8019b9a:	f340 8109 	ble.w	8019db0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019b9e:	2c00      	cmp	r4, #0
 8019ba0:	f000 8108 	beq.w	8019db4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8019ba4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019ba8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019bac:	3501      	adds	r5, #1
 8019bae:	f100 8105 	bmi.w	8019dbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8019bb2:	45a9      	cmp	r9, r5
 8019bb4:	f340 8102 	ble.w	8019dbc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8019bb8:	f1be 0f00 	cmp.w	lr, #0
 8019bbc:	f000 8101 	beq.w	8019dc2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8019bc0:	2f00      	cmp	r7, #0
 8019bc2:	f2c0 80f9 	blt.w	8019db8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019bc6:	45bc      	cmp	ip, r7
 8019bc8:	f340 80f6 	ble.w	8019db8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019bcc:	f818 200c 	ldrb.w	r2, [r8, ip]
 8019bd0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019bd4:	3701      	adds	r7, #1
 8019bd6:	f100 80f7 	bmi.w	8019dc8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019bda:	45bc      	cmp	ip, r7
 8019bdc:	f340 80f4 	ble.w	8019dc8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019be0:	2c00      	cmp	r4, #0
 8019be2:	f000 80f3 	beq.w	8019dcc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8019be6:	44c4      	add	ip, r8
 8019be8:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019bec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019bf0:	fa1f fc84 	uxth.w	ip, r4
 8019bf4:	fa1f f48e 	uxth.w	r4, lr
 8019bf8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019bfc:	fb04 fe0c 	mul.w	lr, r4, ip
 8019c00:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8019c04:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019c08:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019c0c:	ebac 070e 	sub.w	r7, ip, lr
 8019c10:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019c14:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019c18:	b2a4      	uxth	r4, r4
 8019c1a:	b2bf      	uxth	r7, r7
 8019c1c:	1b1b      	subs	r3, r3, r4
 8019c1e:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019c22:	fb07 fc0a 	mul.w	ip, r7, sl
 8019c26:	b29b      	uxth	r3, r3
 8019c28:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019c2c:	9300      	str	r3, [sp, #0]
 8019c2e:	fb04 cc09 	mla	ip, r4, r9, ip
 8019c32:	fb0e cc08 	mla	ip, lr, r8, ip
 8019c36:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019c3a:	9301      	str	r3, [sp, #4]
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	f000 80af 	beq.w	8019da0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8019c42:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019c46:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019c4a:	fb0b fc0c 	mul.w	ip, fp, ip
 8019c4e:	fb0b f606 	mul.w	r6, fp, r6
 8019c52:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019c56:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019c5a:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019c5e:	44dc      	add	ip, fp
 8019c60:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8019c64:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019c68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019c6c:	fb0a fb0b 	mul.w	fp, sl, fp
 8019c70:	fb0a fa00 	mul.w	sl, sl, r0
 8019c74:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019c78:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019c7c:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019c80:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019c84:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019c88:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019c8c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019c90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c94:	0a36      	lsrs	r6, r6, #8
 8019c96:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019c9a:	44dc      	add	ip, fp
 8019c9c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019ca0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019ca4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019ca8:	fb09 fb0b 	mul.w	fp, r9, fp
 8019cac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019cb0:	fb09 f905 	mul.w	r9, r9, r5
 8019cb4:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019cb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019cbc:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019cc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019cc4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019cc8:	fb0c fc07 	mul.w	ip, ip, r7
 8019ccc:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019cd0:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019cd4:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019cd8:	4458      	add	r0, fp
 8019cda:	fb08 f505 	mul.w	r5, r8, r5
 8019cde:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019ce2:	fb08 f802 	mul.w	r8, r8, r2
 8019ce6:	0a00      	lsrs	r0, r0, #8
 8019ce8:	0a2a      	lsrs	r2, r5, #8
 8019cea:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019cee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019cf2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019cf6:	4415      	add	r5, r2
 8019cf8:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019cfc:	0a2d      	lsrs	r5, r5, #8
 8019cfe:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019d02:	9a00      	ldr	r2, [sp, #0]
 8019d04:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019d08:	fb03 cc02 	mla	ip, r3, r2, ip
 8019d0c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019d10:	9b01      	ldr	r3, [sp, #4]
 8019d12:	fb05 c50e 	mla	r5, r5, lr, ip
 8019d16:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019d1a:	fb00 5004 	mla	r0, r0, r4, r5
 8019d1e:	0a00      	lsrs	r0, r0, #8
 8019d20:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019d24:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019d28:	4378      	muls	r0, r7
 8019d2a:	fb02 0006 	mla	r0, r2, r6, r0
 8019d2e:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019d32:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019d36:	fb04 e000 	mla	r0, r4, r0, lr
 8019d3a:	0a00      	lsrs	r0, r0, #8
 8019d3c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019d40:	4328      	orrs	r0, r5
 8019d42:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019d46:	b2ad      	uxth	r5, r5
 8019d48:	b2c4      	uxtb	r4, r0
 8019d4a:	436b      	muls	r3, r5
 8019d4c:	fb14 f405 	smulbb	r4, r4, r5
 8019d50:	1c5a      	adds	r2, r3, #1
 8019d52:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019d56:	780b      	ldrb	r3, [r1, #0]
 8019d58:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019d5c:	b2d2      	uxtb	r2, r2
 8019d5e:	fb03 4302 	mla	r3, r3, r2, r4
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	1c5c      	adds	r4, r3, #1
 8019d66:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019d6a:	784c      	ldrb	r4, [r1, #1]
 8019d6c:	fb14 f402 	smulbb	r4, r4, r2
 8019d70:	121b      	asrs	r3, r3, #8
 8019d72:	700b      	strb	r3, [r1, #0]
 8019d74:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019d78:	fb03 4305 	mla	r3, r3, r5, r4
 8019d7c:	b29b      	uxth	r3, r3
 8019d7e:	1c5c      	adds	r4, r3, #1
 8019d80:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019d84:	0c04      	lsrs	r4, r0, #16
 8019d86:	7888      	ldrb	r0, [r1, #2]
 8019d88:	121b      	asrs	r3, r3, #8
 8019d8a:	fb10 f002 	smulbb	r0, r0, r2
 8019d8e:	704b      	strb	r3, [r1, #1]
 8019d90:	fb04 0005 	mla	r0, r4, r5, r0
 8019d94:	b280      	uxth	r0, r0
 8019d96:	1c43      	adds	r3, r0, #1
 8019d98:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019d9c:	1200      	asrs	r0, r0, #8
 8019d9e:	7088      	strb	r0, [r1, #2]
 8019da0:	b003      	add	sp, #12
 8019da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019da6:	2600      	movs	r6, #0
 8019da8:	e6f3      	b.n	8019b92 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8019daa:	2000      	movs	r0, #0
 8019dac:	4606      	mov	r6, r0
 8019dae:	e6fd      	b.n	8019bac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019db0:	2000      	movs	r0, #0
 8019db2:	e6fb      	b.n	8019bac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019db4:	4620      	mov	r0, r4
 8019db6:	e6f9      	b.n	8019bac <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019db8:	2500      	movs	r5, #0
 8019dba:	e70b      	b.n	8019bd4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8019dbc:	2200      	movs	r2, #0
 8019dbe:	4615      	mov	r5, r2
 8019dc0:	e716      	b.n	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019dc2:	4672      	mov	r2, lr
 8019dc4:	4675      	mov	r5, lr
 8019dc6:	e713      	b.n	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019dc8:	2200      	movs	r2, #0
 8019dca:	e711      	b.n	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019dcc:	4622      	mov	r2, r4
 8019dce:	e70f      	b.n	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08019dd0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd4:	b09f      	sub	sp, #124	; 0x7c
 8019dd6:	921b      	str	r2, [sp, #108]	; 0x6c
 8019dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8019dda:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019ddc:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019de0:	901d      	str	r0, [sp, #116]	; 0x74
 8019de2:	931c      	str	r3, [sp, #112]	; 0x70
 8019de4:	6850      	ldr	r0, [r2, #4]
 8019de6:	9119      	str	r1, [sp, #100]	; 0x64
 8019de8:	6812      	ldr	r2, [r2, #0]
 8019dea:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019dec:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019df0:	fb00 1303 	mla	r3, r0, r3, r1
 8019df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019df8:	18d3      	adds	r3, r2, r3
 8019dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8019dfc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	9312      	str	r3, [sp, #72]	; 0x48
 8019e02:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019e04:	685e      	ldr	r6, [r3, #4]
 8019e06:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019e0a:	3604      	adds	r6, #4
 8019e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8019e0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	dc03      	bgt.n	8019e1c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f340 8378 	ble.w	801a50c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019e1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019e1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019e22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019e26:	1e48      	subs	r0, r1, #1
 8019e28:	1e57      	subs	r7, r2, #1
 8019e2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	f340 818c 	ble.w	801a14a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019e32:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019e34:	142b      	asrs	r3, r5, #16
 8019e36:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019e3a:	d406      	bmi.n	8019e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019e3c:	4584      	cmp	ip, r0
 8019e3e:	da04      	bge.n	8019e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	db02      	blt.n	8019e4a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019e44:	42bb      	cmp	r3, r7
 8019e46:	f2c0 8181 	blt.w	801a14c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019e4a:	f11c 0c01 	adds.w	ip, ip, #1
 8019e4e:	f100 816f 	bmi.w	801a130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019e52:	4561      	cmp	r1, ip
 8019e54:	f2c0 816c 	blt.w	801a130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019e58:	3301      	adds	r3, #1
 8019e5a:	f100 8169 	bmi.w	801a130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	f2c0 8166 	blt.w	801a130 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e66:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019e68:	931a      	str	r3, [sp, #104]	; 0x68
 8019e6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	f340 818c 	ble.w	801a18a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8019e72:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e74:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019e78:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019e7c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019e80:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019e82:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019e86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019e88:	141b      	asrs	r3, r3, #16
 8019e8a:	f100 81d0 	bmi.w	801a22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019e8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8019e92:	4543      	cmp	r3, r8
 8019e94:	f280 81cb 	bge.w	801a22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019e98:	f1bc 0f00 	cmp.w	ip, #0
 8019e9c:	f2c0 81c7 	blt.w	801a22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019ea0:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019ea4:	45c4      	cmp	ip, r8
 8019ea6:	f280 81c2 	bge.w	801a22e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019eaa:	b200      	sxth	r0, r0
 8019eac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019eae:	fb0c 3300 	mla	r3, ip, r0, r3
 8019eb2:	eb04 0803 	add.w	r8, r4, r3
 8019eb6:	5ce3      	ldrb	r3, [r4, r3]
 8019eb8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019ebc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019ec0:	2a00      	cmp	r2, #0
 8019ec2:	f000 81a9 	beq.w	801a218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019ec6:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019eca:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019ece:	940e      	str	r4, [sp, #56]	; 0x38
 8019ed0:	0e24      	lsrs	r4, r4, #24
 8019ed2:	9415      	str	r4, [sp, #84]	; 0x54
 8019ed4:	b179      	cbz	r1, 8019ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019ed6:	eb08 0c00 	add.w	ip, r8, r0
 8019eda:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019ede:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019ee2:	900a      	str	r0, [sp, #40]	; 0x28
 8019ee4:	0e00      	lsrs	r0, r0, #24
 8019ee6:	9013      	str	r0, [sp, #76]	; 0x4c
 8019ee8:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019eec:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019ef0:	900f      	str	r0, [sp, #60]	; 0x3c
 8019ef2:	0e00      	lsrs	r0, r0, #24
 8019ef4:	9016      	str	r0, [sp, #88]	; 0x58
 8019ef6:	b292      	uxth	r2, r2
 8019ef8:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019efa:	b289      	uxth	r1, r1
 8019efc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019efe:	fb02 f901 	mul.w	r9, r2, r1
 8019f02:	0112      	lsls	r2, r2, #4
 8019f04:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019f08:	eba2 0809 	sub.w	r8, r2, r9
 8019f0c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019f10:	b289      	uxth	r1, r1
 8019f12:	fa1f f888 	uxth.w	r8, r8
 8019f16:	1a52      	subs	r2, r2, r1
 8019f18:	fb08 f000 	mul.w	r0, r8, r0
 8019f1c:	b292      	uxth	r2, r2
 8019f1e:	fb02 000e 	mla	r0, r2, lr, r0
 8019f22:	fb01 0004 	mla	r0, r1, r4, r0
 8019f26:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f28:	fb09 0004 	mla	r0, r9, r4, r0
 8019f2c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019f30:	2800      	cmp	r0, #0
 8019f32:	f000 80f2 	beq.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019f36:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019f3a:	d01b      	beq.n	8019f74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8019f3c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019f44:	fb0e fa0a 	mul.w	sl, lr, sl
 8019f48:	fb0e fe03 	mul.w	lr, lr, r3
 8019f4c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019f50:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019f54:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019f58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f5c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019f60:	4453      	add	r3, sl
 8019f62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f66:	0a1b      	lsrs	r3, r3, #8
 8019f68:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019f6c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019f70:	ea43 030c 	orr.w	r3, r3, ip
 8019f74:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f76:	2cff      	cmp	r4, #255	; 0xff
 8019f78:	d021      	beq.n	8019fbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019f7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f7c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f80:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f82:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f86:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019f88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f8c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019f8e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019f92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019f96:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f9e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019fa2:	44de      	add	lr, fp
 8019fa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019fa8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019fac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019fb0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fb4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019fb8:	ea4e 040a 	orr.w	r4, lr, sl
 8019fbc:	940e      	str	r4, [sp, #56]	; 0x38
 8019fbe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fc0:	2cff      	cmp	r4, #255	; 0xff
 8019fc2:	d021      	beq.n	801a008 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8019fc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019fc6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019fca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fcc:	fb04 fb0b 	mul.w	fp, r4, fp
 8019fd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019fd2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019fd6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019fd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019fdc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019fe0:	fb04 fa0a 	mul.w	sl, r4, sl
 8019fe4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fe8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019fec:	44de      	add	lr, fp
 8019fee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019ff2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019ff6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ffa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ffe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a002:	ea4e 040a 	orr.w	r4, lr, sl
 801a006:	940a      	str	r4, [sp, #40]	; 0x28
 801a008:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a00a:	2cff      	cmp	r4, #255	; 0xff
 801a00c:	d021      	beq.n	801a052 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a00e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a010:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a014:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a016:	fb04 fb0b 	mul.w	fp, r4, fp
 801a01a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a01c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a020:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801a022:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a026:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a02a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a02e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a032:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a036:	44de      	add	lr, fp
 801a038:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a03c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a040:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a044:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a048:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a04c:	ea4e 040a 	orr.w	r4, lr, sl
 801a050:	940f      	str	r4, [sp, #60]	; 0x3c
 801a052:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a054:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a058:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a05c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a062:	fb08 fc0c 	mul.w	ip, r8, ip
 801a066:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a06a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a06e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a070:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a074:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a078:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a07a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a07e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a082:	fb08 f80e 	mul.w	r8, r8, lr
 801a086:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a08a:	fb02 8303 	mla	r3, r2, r3, r8
 801a08e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a090:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a094:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a09a:	fb01 330a 	mla	r3, r1, sl, r3
 801a09e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801a0a2:	fb09 3901 	mla	r9, r9, r1, r3
 801a0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0a8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a0aa:	4343      	muls	r3, r0
 801a0ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a0b0:	1c58      	adds	r0, r3, #1
 801a0b2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a0b6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a0ba:	ea4c 0c09 	orr.w	ip, ip, r9
 801a0be:	783b      	ldrb	r3, [r7, #0]
 801a0c0:	fa5f f28c 	uxtb.w	r2, ip
 801a0c4:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a0c8:	fb12 f201 	smulbb	r2, r2, r1
 801a0cc:	b2c0      	uxtb	r0, r0
 801a0ce:	fb03 2300 	mla	r3, r3, r0, r2
 801a0d2:	b29b      	uxth	r3, r3
 801a0d4:	1c5a      	adds	r2, r3, #1
 801a0d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a0da:	787a      	ldrb	r2, [r7, #1]
 801a0dc:	fb12 f200 	smulbb	r2, r2, r0
 801a0e0:	121b      	asrs	r3, r3, #8
 801a0e2:	703b      	strb	r3, [r7, #0]
 801a0e4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a0e8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a0ec:	fb03 2301 	mla	r3, r3, r1, r2
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a0f8:	121b      	asrs	r3, r3, #8
 801a0fa:	707b      	strb	r3, [r7, #1]
 801a0fc:	78bb      	ldrb	r3, [r7, #2]
 801a0fe:	fb13 f000 	smulbb	r0, r3, r0
 801a102:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a106:	fa1f fc8c 	uxth.w	ip, ip
 801a10a:	f10c 0301 	add.w	r3, ip, #1
 801a10e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a112:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a116:	f887 c002 	strb.w	ip, [r7, #2]
 801a11a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a11c:	3703      	adds	r7, #3
 801a11e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a120:	441a      	add	r2, r3
 801a122:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a124:	441d      	add	r5, r3
 801a126:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a128:	9229      	str	r2, [sp, #164]	; 0xa4
 801a12a:	3b01      	subs	r3, #1
 801a12c:	931a      	str	r3, [sp, #104]	; 0x68
 801a12e:	e69c      	b.n	8019e6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801a130:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a132:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a134:	441c      	add	r4, r3
 801a136:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a138:	441d      	add	r5, r3
 801a13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a13c:	9429      	str	r4, [sp, #164]	; 0xa4
 801a13e:	3b01      	subs	r3, #1
 801a140:	9309      	str	r3, [sp, #36]	; 0x24
 801a142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a144:	3303      	adds	r3, #3
 801a146:	930c      	str	r3, [sp, #48]	; 0x30
 801a148:	e66f      	b.n	8019e2a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a14a:	d026      	beq.n	801a19a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a14e:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a150:	3b01      	subs	r3, #1
 801a152:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a154:	fb00 4003 	mla	r0, r0, r3, r4
 801a158:	1400      	asrs	r0, r0, #16
 801a15a:	f53f ae83 	bmi.w	8019e64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a15e:	3901      	subs	r1, #1
 801a160:	4288      	cmp	r0, r1
 801a162:	f6bf ae7f 	bge.w	8019e64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a166:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a168:	fb01 5303 	mla	r3, r1, r3, r5
 801a16c:	141b      	asrs	r3, r3, #16
 801a16e:	f53f ae79 	bmi.w	8019e64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a172:	3a01      	subs	r2, #1
 801a174:	4293      	cmp	r3, r2
 801a176:	f6bf ae75 	bge.w	8019e64 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a17a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a17c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a180:	f103 0e03 	add.w	lr, r3, #3
 801a184:	f1bb 0f00 	cmp.w	fp, #0
 801a188:	dc71      	bgt.n	801a26e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a18c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a192:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a196:	4423      	add	r3, r4
 801a198:	930c      	str	r3, [sp, #48]	; 0x30
 801a19a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	f340 81b5 	ble.w	801a50c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801a1a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a1a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a1a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a1ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a1b0:	eef0 6a62 	vmov.f32	s13, s5
 801a1b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a1b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a1bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a1c0:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801a1c4:	eef0 6a43 	vmov.f32	s13, s6
 801a1c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a1cc:	ee16 5a90 	vmov	r5, s13
 801a1d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a1d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a1d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a1dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a1e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a1e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a1e8:	ee12 2a90 	vmov	r2, s5
 801a1ec:	eef0 2a47 	vmov.f32	s5, s14
 801a1f0:	fb92 f3f3 	sdiv	r3, r2, r3
 801a1f4:	ee13 2a10 	vmov	r2, s6
 801a1f8:	932b      	str	r3, [sp, #172]	; 0xac
 801a1fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a1fc:	eeb0 3a67 	vmov.f32	s6, s15
 801a200:	fb92 f3f3 	sdiv	r3, r2, r3
 801a204:	932c      	str	r3, [sp, #176]	; 0xb0
 801a206:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a208:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a20a:	3b01      	subs	r3, #1
 801a20c:	9319      	str	r3, [sp, #100]	; 0x64
 801a20e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a210:	bf08      	it	eq
 801a212:	4613      	moveq	r3, r2
 801a214:	9309      	str	r3, [sp, #36]	; 0x24
 801a216:	e5fa      	b.n	8019e0e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a218:	2900      	cmp	r1, #0
 801a21a:	f43f ae6c 	beq.w	8019ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a21e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a222:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a226:	900a      	str	r0, [sp, #40]	; 0x28
 801a228:	0e00      	lsrs	r0, r0, #24
 801a22a:	9013      	str	r0, [sp, #76]	; 0x4c
 801a22c:	e663      	b.n	8019ef6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a22e:	f113 0801 	adds.w	r8, r3, #1
 801a232:	f53f af72 	bmi.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a236:	4540      	cmp	r0, r8
 801a238:	f6ff af6f 	blt.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a23c:	f11c 0801 	adds.w	r8, ip, #1
 801a240:	f53f af6b 	bmi.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a244:	45c6      	cmp	lr, r8
 801a246:	f6ff af68 	blt.w	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a24a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a24c:	b200      	sxth	r0, r0
 801a24e:	9302      	str	r3, [sp, #8]
 801a250:	fa0f f38e 	sxth.w	r3, lr
 801a254:	9000      	str	r0, [sp, #0]
 801a256:	9301      	str	r3, [sp, #4]
 801a258:	4633      	mov	r3, r6
 801a25a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a25c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a260:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a264:	4639      	mov	r1, r7
 801a266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a268:	f7ff fc74 	bl	8019b54 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801a26c:	e755      	b.n	801a11a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a26e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a270:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a274:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a276:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a27a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a27c:	1427      	asrs	r7, r4, #16
 801a27e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a280:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a284:	142b      	asrs	r3, r5, #16
 801a286:	fb01 7303 	mla	r3, r1, r3, r7
 801a28a:	18e7      	adds	r7, r4, r3
 801a28c:	5ce3      	ldrb	r3, [r4, r3]
 801a28e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a292:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a296:	2a00      	cmp	r2, #0
 801a298:	f000 812e 	beq.w	801a4f8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801a29c:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a2a0:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a2a4:	9410      	str	r4, [sp, #64]	; 0x40
 801a2a6:	0e24      	lsrs	r4, r4, #24
 801a2a8:	9417      	str	r4, [sp, #92]	; 0x5c
 801a2aa:	b170      	cbz	r0, 801a2ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a2ac:	eb07 0801 	add.w	r8, r7, r1
 801a2b0:	5c79      	ldrb	r1, [r7, r1]
 801a2b2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a2b6:	910b      	str	r1, [sp, #44]	; 0x2c
 801a2b8:	0e09      	lsrs	r1, r1, #24
 801a2ba:	9114      	str	r1, [sp, #80]	; 0x50
 801a2bc:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a2c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a2c4:	9111      	str	r1, [sp, #68]	; 0x44
 801a2c6:	0e09      	lsrs	r1, r1, #24
 801a2c8:	9118      	str	r1, [sp, #96]	; 0x60
 801a2ca:	b292      	uxth	r2, r2
 801a2cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a2ce:	b280      	uxth	r0, r0
 801a2d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2d2:	fb02 f900 	mul.w	r9, r2, r0
 801a2d6:	0112      	lsls	r2, r2, #4
 801a2d8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a2dc:	eba2 0809 	sub.w	r8, r2, r9
 801a2e0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a2e4:	b280      	uxth	r0, r0
 801a2e6:	fa1f f888 	uxth.w	r8, r8
 801a2ea:	1a12      	subs	r2, r2, r0
 801a2ec:	fb08 f101 	mul.w	r1, r8, r1
 801a2f0:	b292      	uxth	r2, r2
 801a2f2:	fb02 110c 	mla	r1, r2, ip, r1
 801a2f6:	fb00 1104 	mla	r1, r0, r4, r1
 801a2fa:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a2fc:	fb09 1104 	mla	r1, r9, r4, r1
 801a300:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a304:	2900      	cmp	r1, #0
 801a306:	f000 80ec 	beq.w	801a4e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801a30a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a30e:	d019      	beq.n	801a344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801a310:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a318:	fb0c fa0a 	mul.w	sl, ip, sl
 801a31c:	fb0c fc03 	mul.w	ip, ip, r3
 801a320:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a324:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a328:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a32c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a330:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a334:	4453      	add	r3, sl
 801a336:	0a3f      	lsrs	r7, r7, #8
 801a338:	0a1b      	lsrs	r3, r3, #8
 801a33a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a33e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a342:	433b      	orrs	r3, r7
 801a344:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a346:	2cff      	cmp	r4, #255	; 0xff
 801a348:	d020      	beq.n	801a38c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801a34a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a34c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a350:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a352:	4367      	muls	r7, r4
 801a354:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a356:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a35a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a35e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a360:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a364:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a368:	fb04 fa0a 	mul.w	sl, r4, sl
 801a36c:	44bc      	add	ip, r7
 801a36e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a372:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a376:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a37a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a37e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a382:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a386:	ea4c 040a 	orr.w	r4, ip, sl
 801a38a:	9410      	str	r4, [sp, #64]	; 0x40
 801a38c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a38e:	2cff      	cmp	r4, #255	; 0xff
 801a390:	d020      	beq.n	801a3d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801a392:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a394:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a398:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a39a:	4367      	muls	r7, r4
 801a39c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a39e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a3a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a3a6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a3a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a3ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3b0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a3b4:	44bc      	add	ip, r7
 801a3b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a3ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a3c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a3ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a3ce:	ea4c 040a 	orr.w	r4, ip, sl
 801a3d2:	940b      	str	r4, [sp, #44]	; 0x2c
 801a3d4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a3d6:	2cff      	cmp	r4, #255	; 0xff
 801a3d8:	d020      	beq.n	801a41c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801a3da:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3dc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a3e0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a3e2:	4367      	muls	r7, r4
 801a3e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3e6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a3ea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a3ee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a3f0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a3f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a3f8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a3fc:	44bc      	add	ip, r7
 801a3fe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a402:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a406:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a40a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a40e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a412:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a416:	ea4c 040a 	orr.w	r4, ip, sl
 801a41a:	9411      	str	r4, [sp, #68]	; 0x44
 801a41c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a41e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a426:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a42a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a42c:	fb08 f707 	mul.w	r7, r8, r7
 801a430:	fb02 770c 	mla	r7, r2, ip, r7
 801a434:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a438:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a43a:	fb00 770c 	mla	r7, r0, ip, r7
 801a43e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a442:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a444:	fb09 770c 	mla	r7, r9, ip, r7
 801a448:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a44c:	fb08 f80c 	mul.w	r8, r8, ip
 801a450:	0a3f      	lsrs	r7, r7, #8
 801a452:	fb02 8303 	mla	r3, r2, r3, r8
 801a456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a458:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a45c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a460:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a462:	fb00 330a 	mla	r3, r0, sl, r3
 801a466:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a46a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a46c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a472:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a476:	434b      	muls	r3, r1
 801a478:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a47c:	1c59      	adds	r1, r3, #1
 801a47e:	ea47 070c 	orr.w	r7, r7, ip
 801a482:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a486:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a48a:	b2fa      	uxtb	r2, r7
 801a48c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a490:	fb12 f200 	smulbb	r2, r2, r0
 801a494:	b2c9      	uxtb	r1, r1
 801a496:	fb03 2301 	mla	r3, r3, r1, r2
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	1c5a      	adds	r2, r3, #1
 801a49e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a4a2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a4a6:	fb12 f201 	smulbb	r2, r2, r1
 801a4aa:	121b      	asrs	r3, r3, #8
 801a4ac:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a4b0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a4b4:	0c3f      	lsrs	r7, r7, #16
 801a4b6:	fb03 2300 	mla	r3, r3, r0, r2
 801a4ba:	b29b      	uxth	r3, r3
 801a4bc:	1c5a      	adds	r2, r3, #1
 801a4be:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a4c2:	121b      	asrs	r3, r3, #8
 801a4c4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a4c8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a4cc:	fb13 f101 	smulbb	r1, r3, r1
 801a4d0:	fb07 1700 	mla	r7, r7, r0, r1
 801a4d4:	b2bf      	uxth	r7, r7
 801a4d6:	1c7b      	adds	r3, r7, #1
 801a4d8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a4dc:	123f      	asrs	r7, r7, #8
 801a4de:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a4e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a4e4:	f10e 0e03 	add.w	lr, lr, #3
 801a4e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a4ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a4ee:	441a      	add	r2, r3
 801a4f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a4f2:	9229      	str	r2, [sp, #164]	; 0xa4
 801a4f4:	441d      	add	r5, r3
 801a4f6:	e645      	b.n	801a184 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801a4f8:	2800      	cmp	r0, #0
 801a4fa:	f43f aee6 	beq.w	801a2ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a4fe:	5c79      	ldrb	r1, [r7, r1]
 801a500:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a504:	910b      	str	r1, [sp, #44]	; 0x2c
 801a506:	0e09      	lsrs	r1, r1, #24
 801a508:	9114      	str	r1, [sp, #80]	; 0x50
 801a50a:	e6de      	b.n	801a2ca <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a50c:	b01f      	add	sp, #124	; 0x7c
 801a50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a512 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a512:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a516:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801a51a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a51e:	2d00      	cmp	r5, #0
 801a520:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801a524:	fb05 700e 	mla	r0, r5, lr, r7
 801a528:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801a52c:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801a530:	eb02 0800 	add.w	r8, r2, r0
 801a534:	f2c0 8105 	blt.w	801a742 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a538:	45a9      	cmp	r9, r5
 801a53a:	f340 8102 	ble.w	801a742 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a53e:	2f00      	cmp	r7, #0
 801a540:	f2c0 80fd 	blt.w	801a73e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a544:	45be      	cmp	lr, r7
 801a546:	f340 80fa 	ble.w	801a73e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a54a:	5c12      	ldrb	r2, [r2, r0]
 801a54c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a550:	1c7a      	adds	r2, r7, #1
 801a552:	f100 80f9 	bmi.w	801a748 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a556:	4596      	cmp	lr, r2
 801a558:	f340 80f6 	ble.w	801a748 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a55c:	2c00      	cmp	r4, #0
 801a55e:	f000 80f5 	beq.w	801a74c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801a562:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a566:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a56a:	3501      	adds	r5, #1
 801a56c:	f100 80f2 	bmi.w	801a754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a570:	45a9      	cmp	r9, r5
 801a572:	f340 80ef 	ble.w	801a754 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a576:	f1bc 0f00 	cmp.w	ip, #0
 801a57a:	f000 80ee 	beq.w	801a75a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801a57e:	2f00      	cmp	r7, #0
 801a580:	f2c0 80e6 	blt.w	801a750 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a584:	45be      	cmp	lr, r7
 801a586:	f340 80e3 	ble.w	801a750 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a58a:	f818 200e 	ldrb.w	r2, [r8, lr]
 801a58e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a592:	3701      	adds	r7, #1
 801a594:	f100 80e4 	bmi.w	801a760 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a598:	45be      	cmp	lr, r7
 801a59a:	f340 80e1 	ble.w	801a760 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a59e:	2c00      	cmp	r4, #0
 801a5a0:	f000 80e0 	beq.w	801a764 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801a5a4:	44c6      	add	lr, r8
 801a5a6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a5aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a5ae:	b2a3      	uxth	r3, r4
 801a5b0:	fa1f fc8c 	uxth.w	ip, ip
 801a5b4:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801a5b8:	fb0c fe03 	mul.w	lr, ip, r3
 801a5bc:	011b      	lsls	r3, r3, #4
 801a5be:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801a5c2:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801a5c6:	eba3 070e 	sub.w	r7, r3, lr
 801a5ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801a5ce:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801a5d2:	fa1f f48c 	uxth.w	r4, ip
 801a5d6:	b2bf      	uxth	r7, r7
 801a5d8:	1b1b      	subs	r3, r3, r4
 801a5da:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a5de:	fb07 fc0a 	mul.w	ip, r7, sl
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	fb03 cc0b 	mla	ip, r3, fp, ip
 801a5e8:	9300      	str	r3, [sp, #0]
 801a5ea:	fb04 cc09 	mla	ip, r4, r9, ip
 801a5ee:	fb0e cc08 	mla	ip, lr, r8, ip
 801a5f2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a5f6:	9301      	str	r3, [sp, #4]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	f000 809d 	beq.w	801a738 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801a5fe:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801a602:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a606:	fb0b fc0c 	mul.w	ip, fp, ip
 801a60a:	fb0b f606 	mul.w	r6, fp, r6
 801a60e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801a612:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a616:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801a61a:	44dc      	add	ip, fp
 801a61c:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801a620:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a624:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a628:	fb0a fb0b 	mul.w	fp, sl, fp
 801a62c:	fb0a fa00 	mul.w	sl, sl, r0
 801a630:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801a634:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a638:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a63c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a640:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801a644:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a648:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a64c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a650:	0a36      	lsrs	r6, r6, #8
 801a652:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a656:	44dc      	add	ip, fp
 801a658:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a65c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a660:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a664:	fb09 fb0b 	mul.w	fp, r9, fp
 801a668:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a66c:	fb09 f905 	mul.w	r9, r9, r5
 801a670:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801a674:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a678:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801a67c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a680:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a684:	fb0c fc07 	mul.w	ip, ip, r7
 801a688:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801a68c:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801a690:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a694:	4458      	add	r0, fp
 801a696:	fb08 f505 	mul.w	r5, r8, r5
 801a69a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a69e:	fb08 f802 	mul.w	r8, r8, r2
 801a6a2:	0a00      	lsrs	r0, r0, #8
 801a6a4:	0a2a      	lsrs	r2, r5, #8
 801a6a6:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801a6aa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a6ae:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a6b2:	4415      	add	r5, r2
 801a6b4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801a6b8:	0a2d      	lsrs	r5, r5, #8
 801a6ba:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a6be:	9a00      	ldr	r2, [sp, #0]
 801a6c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a6c4:	fb03 cc02 	mla	ip, r3, r2, ip
 801a6c8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a6cc:	9b01      	ldr	r3, [sp, #4]
 801a6ce:	fb05 c50e 	mla	r5, r5, lr, ip
 801a6d2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a6d6:	43db      	mvns	r3, r3
 801a6d8:	fb00 5004 	mla	r0, r0, r4, r5
 801a6dc:	b2db      	uxtb	r3, r3
 801a6de:	0a00      	lsrs	r0, r0, #8
 801a6e0:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801a6e4:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801a6e8:	4378      	muls	r0, r7
 801a6ea:	fb02 0006 	mla	r0, r2, r6, r0
 801a6ee:	780a      	ldrb	r2, [r1, #0]
 801a6f0:	fb0e 0e08 	mla	lr, lr, r8, r0
 801a6f4:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801a6f8:	fb04 e000 	mla	r0, r4, r0, lr
 801a6fc:	fb02 f403 	mul.w	r4, r2, r3
 801a700:	0a00      	lsrs	r0, r0, #8
 801a702:	1c62      	adds	r2, r4, #1
 801a704:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a708:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a70c:	4328      	orrs	r0, r5
 801a70e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a712:	700a      	strb	r2, [r1, #0]
 801a714:	784a      	ldrb	r2, [r1, #1]
 801a716:	435a      	muls	r2, r3
 801a718:	1c54      	adds	r4, r2, #1
 801a71a:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801a71e:	0a02      	lsrs	r2, r0, #8
 801a720:	0c00      	lsrs	r0, r0, #16
 801a722:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a726:	704a      	strb	r2, [r1, #1]
 801a728:	788a      	ldrb	r2, [r1, #2]
 801a72a:	4353      	muls	r3, r2
 801a72c:	1c5a      	adds	r2, r3, #1
 801a72e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a732:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a736:	7088      	strb	r0, [r1, #2]
 801a738:	b003      	add	sp, #12
 801a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a73e:	2600      	movs	r6, #0
 801a740:	e706      	b.n	801a550 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801a742:	2000      	movs	r0, #0
 801a744:	4606      	mov	r6, r0
 801a746:	e710      	b.n	801a56a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a748:	2000      	movs	r0, #0
 801a74a:	e70e      	b.n	801a56a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a74c:	4620      	mov	r0, r4
 801a74e:	e70c      	b.n	801a56a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a750:	2500      	movs	r5, #0
 801a752:	e71e      	b.n	801a592 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801a754:	2200      	movs	r2, #0
 801a756:	4615      	mov	r5, r2
 801a758:	e729      	b.n	801a5ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a75a:	4662      	mov	r2, ip
 801a75c:	4665      	mov	r5, ip
 801a75e:	e726      	b.n	801a5ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a760:	2200      	movs	r2, #0
 801a762:	e724      	b.n	801a5ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a764:	4622      	mov	r2, r4
 801a766:	e722      	b.n	801a5ae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801a768 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a76c:	b09b      	sub	sp, #108	; 0x6c
 801a76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a772:	9218      	str	r2, [sp, #96]	; 0x60
 801a774:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a776:	9019      	str	r0, [sp, #100]	; 0x64
 801a778:	9116      	str	r1, [sp, #88]	; 0x58
 801a77a:	6850      	ldr	r0, [r2, #4]
 801a77c:	9307      	str	r3, [sp, #28]
 801a77e:	6812      	ldr	r2, [r2, #0]
 801a780:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801a782:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a786:	fb00 1303 	mla	r3, r0, r3, r1
 801a78a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a78e:	18d3      	adds	r3, r2, r3
 801a790:	930a      	str	r3, [sp, #40]	; 0x28
 801a792:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	930f      	str	r3, [sp, #60]	; 0x3c
 801a798:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a79a:	685e      	ldr	r6, [r3, #4]
 801a79c:	3604      	adds	r6, #4
 801a79e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	dc03      	bgt.n	801a7ac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a7a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	f340 834f 	ble.w	801ae4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a7ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a7ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a7b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a7b6:	1e48      	subs	r0, r1, #1
 801a7b8:	1e57      	subs	r7, r2, #1
 801a7ba:	9b07      	ldr	r3, [sp, #28]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	f340 8178 	ble.w	801aab2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a7c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a7c4:	142b      	asrs	r3, r5, #16
 801a7c6:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a7ca:	d406      	bmi.n	801a7da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7cc:	4584      	cmp	ip, r0
 801a7ce:	da04      	bge.n	801a7da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	db02      	blt.n	801a7da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a7d4:	42bb      	cmp	r3, r7
 801a7d6:	f2c0 816d 	blt.w	801aab4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801a7da:	f11c 0c01 	adds.w	ip, ip, #1
 801a7de:	f100 815b 	bmi.w	801aa98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a7e2:	4561      	cmp	r1, ip
 801a7e4:	f2c0 8158 	blt.w	801aa98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a7e8:	3301      	adds	r3, #1
 801a7ea:	f100 8155 	bmi.w	801aa98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a7ee:	429a      	cmp	r2, r3
 801a7f0:	f2c0 8152 	blt.w	801aa98 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a7f4:	9b07      	ldr	r3, [sp, #28]
 801a7f6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a7f8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	f340 8178 	ble.w	801aaf2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a802:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a804:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a808:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a80c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a810:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a812:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a816:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a818:	141b      	asrs	r3, r3, #16
 801a81a:	f100 81ba 	bmi.w	801ab92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a81e:	f101 38ff 	add.w	r8, r1, #4294967295
 801a822:	4543      	cmp	r3, r8
 801a824:	f280 81b5 	bge.w	801ab92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a828:	f1bc 0f00 	cmp.w	ip, #0
 801a82c:	f2c0 81b1 	blt.w	801ab92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a830:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a834:	45c4      	cmp	ip, r8
 801a836:	f280 81ac 	bge.w	801ab92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a83a:	b209      	sxth	r1, r1
 801a83c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a83e:	fb0c 3301 	mla	r3, ip, r1, r3
 801a842:	eb04 0803 	add.w	r8, r4, r3
 801a846:	5ce3      	ldrb	r3, [r4, r3]
 801a848:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a84c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a850:	2a00      	cmp	r2, #0
 801a852:	f000 8193 	beq.w	801ab7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801a856:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a85a:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a85e:	940b      	str	r4, [sp, #44]	; 0x2c
 801a860:	0e24      	lsrs	r4, r4, #24
 801a862:	9412      	str	r4, [sp, #72]	; 0x48
 801a864:	b178      	cbz	r0, 801a886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a866:	eb08 0c01 	add.w	ip, r8, r1
 801a86a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a86e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a872:	9108      	str	r1, [sp, #32]
 801a874:	0e09      	lsrs	r1, r1, #24
 801a876:	9110      	str	r1, [sp, #64]	; 0x40
 801a878:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a87c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a880:	910c      	str	r1, [sp, #48]	; 0x30
 801a882:	0e09      	lsrs	r1, r1, #24
 801a884:	9113      	str	r1, [sp, #76]	; 0x4c
 801a886:	b292      	uxth	r2, r2
 801a888:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a88a:	b280      	uxth	r0, r0
 801a88c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a88e:	fb02 f900 	mul.w	r9, r2, r0
 801a892:	0112      	lsls	r2, r2, #4
 801a894:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a898:	eba2 0809 	sub.w	r8, r2, r9
 801a89c:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a8a0:	b280      	uxth	r0, r0
 801a8a2:	fa1f f888 	uxth.w	r8, r8
 801a8a6:	1a12      	subs	r2, r2, r0
 801a8a8:	fb08 f101 	mul.w	r1, r8, r1
 801a8ac:	b292      	uxth	r2, r2
 801a8ae:	fb02 110e 	mla	r1, r2, lr, r1
 801a8b2:	fb00 1104 	mla	r1, r0, r4, r1
 801a8b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a8b8:	fb09 1104 	mla	r1, r9, r4, r1
 801a8bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a8c0:	2900      	cmp	r1, #0
 801a8c2:	f000 80de 	beq.w	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a8c6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a8ca:	d01b      	beq.n	801a904 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801a8cc:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a8d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a8d4:	fb0e fa0a 	mul.w	sl, lr, sl
 801a8d8:	fb0e fe03 	mul.w	lr, lr, r3
 801a8dc:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a8e0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a8e4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a8e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8ec:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a8f0:	4453      	add	r3, sl
 801a8f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8f6:	0a1b      	lsrs	r3, r3, #8
 801a8f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a8fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a900:	ea43 030c 	orr.w	r3, r3, ip
 801a904:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a906:	2cff      	cmp	r4, #255	; 0xff
 801a908:	d021      	beq.n	801a94e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a90a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a90c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a910:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a912:	fb04 fb0b 	mul.w	fp, r4, fp
 801a916:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a918:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a91c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a91e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a922:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a926:	fb04 fa0a 	mul.w	sl, r4, sl
 801a92a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a92e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a932:	44de      	add	lr, fp
 801a934:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a938:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a93c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a940:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a944:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a948:	ea4e 040a 	orr.w	r4, lr, sl
 801a94c:	940b      	str	r4, [sp, #44]	; 0x2c
 801a94e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a950:	2cff      	cmp	r4, #255	; 0xff
 801a952:	d021      	beq.n	801a998 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a954:	9c08      	ldr	r4, [sp, #32]
 801a956:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a95a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a95c:	fb04 fb0b 	mul.w	fp, r4, fp
 801a960:	9c08      	ldr	r4, [sp, #32]
 801a962:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a966:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a968:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a96c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a970:	fb04 fa0a 	mul.w	sl, r4, sl
 801a974:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a978:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a97c:	44de      	add	lr, fp
 801a97e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a982:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a986:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a98a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a98e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a992:	ea4e 040a 	orr.w	r4, lr, sl
 801a996:	9408      	str	r4, [sp, #32]
 801a998:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a99a:	2cff      	cmp	r4, #255	; 0xff
 801a99c:	d021      	beq.n	801a9e2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a99e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a9a0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a9a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9a6:	fb04 fb0b 	mul.w	fp, r4, fp
 801a9aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a9ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a9b0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a9b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a9b6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a9ba:	fb04 fa0a 	mul.w	sl, r4, sl
 801a9be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9c2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a9c6:	44de      	add	lr, fp
 801a9c8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a9cc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a9d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a9d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a9d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a9dc:	ea4e 040a 	orr.w	r4, lr, sl
 801a9e0:	940c      	str	r4, [sp, #48]	; 0x30
 801a9e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a9e4:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a9e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a9ec:	43c9      	mvns	r1, r1
 801a9ee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a9f2:	9c08      	ldr	r4, [sp, #32]
 801a9f4:	b2c9      	uxtb	r1, r1
 801a9f6:	fb08 fc0c 	mul.w	ip, r8, ip
 801a9fa:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a9fe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801aa02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801aa04:	fb00 cc0e 	mla	ip, r0, lr, ip
 801aa08:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801aa0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801aa0e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801aa12:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801aa16:	fb08 f80e 	mul.w	r8, r8, lr
 801aa1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801aa1e:	fb02 8303 	mla	r3, r2, r3, r8
 801aa22:	9a08      	ldr	r2, [sp, #32]
 801aa24:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aa28:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801aa2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa2e:	fb00 330a 	mla	r3, r0, sl, r3
 801aa32:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801aa36:	fb09 3900 	mla	r9, r9, r0, r3
 801aa3a:	783b      	ldrb	r3, [r7, #0]
 801aa3c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801aa40:	fb03 f201 	mul.w	r2, r3, r1
 801aa44:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801aa48:	1c53      	adds	r3, r2, #1
 801aa4a:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa4e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa52:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801aa56:	703b      	strb	r3, [r7, #0]
 801aa58:	787b      	ldrb	r3, [r7, #1]
 801aa5a:	434b      	muls	r3, r1
 801aa5c:	1c5a      	adds	r2, r3, #1
 801aa5e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aa62:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801aa66:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801aa6a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa6e:	707b      	strb	r3, [r7, #1]
 801aa70:	78bb      	ldrb	r3, [r7, #2]
 801aa72:	4359      	muls	r1, r3
 801aa74:	1c4b      	adds	r3, r1, #1
 801aa76:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801aa7a:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801aa7e:	f887 c002 	strb.w	ip, [r7, #2]
 801aa82:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aa84:	3703      	adds	r7, #3
 801aa86:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801aa88:	441a      	add	r2, r3
 801aa8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa8c:	441d      	add	r5, r3
 801aa8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa90:	9225      	str	r2, [sp, #148]	; 0x94
 801aa92:	3b01      	subs	r3, #1
 801aa94:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa96:	e6b0      	b.n	801a7fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801aa98:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aa9a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801aa9c:	441c      	add	r4, r3
 801aa9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aaa0:	441d      	add	r5, r3
 801aaa2:	9b07      	ldr	r3, [sp, #28]
 801aaa4:	9425      	str	r4, [sp, #148]	; 0x94
 801aaa6:	3b01      	subs	r3, #1
 801aaa8:	9307      	str	r3, [sp, #28]
 801aaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaac:	3303      	adds	r3, #3
 801aaae:	930a      	str	r3, [sp, #40]	; 0x28
 801aab0:	e683      	b.n	801a7ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801aab2:	d026      	beq.n	801ab02 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801aab4:	9b07      	ldr	r3, [sp, #28]
 801aab6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801aab8:	3b01      	subs	r3, #1
 801aaba:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801aabc:	fb00 4003 	mla	r0, r0, r3, r4
 801aac0:	1400      	asrs	r0, r0, #16
 801aac2:	f53f ae97 	bmi.w	801a7f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801aac6:	3901      	subs	r1, #1
 801aac8:	4288      	cmp	r0, r1
 801aaca:	f6bf ae93 	bge.w	801a7f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801aace:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801aad0:	fb01 5303 	mla	r3, r1, r3, r5
 801aad4:	141b      	asrs	r3, r3, #16
 801aad6:	f53f ae8d 	bmi.w	801a7f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801aada:	3a01      	subs	r2, #1
 801aadc:	4293      	cmp	r3, r2
 801aade:	f6bf ae89 	bge.w	801a7f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801aae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aae4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801aae8:	f103 0e03 	add.w	lr, r3, #3
 801aaec:	f1bb 0f00 	cmp.w	fp, #0
 801aaf0:	dc6d      	bgt.n	801abce <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801aaf2:	9b07      	ldr	r3, [sp, #28]
 801aaf4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aafa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aafe:	4423      	add	r3, r4
 801ab00:	930a      	str	r3, [sp, #40]	; 0x28
 801ab02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	f340 81a0 	ble.w	801ae4a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ab0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ab10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab14:	eeb0 6a62 	vmov.f32	s12, s5
 801ab18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ab1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab24:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801ab28:	eeb0 6a43 	vmov.f32	s12, s6
 801ab2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ab30:	ee16 5a10 	vmov	r5, s12
 801ab34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab4c:	ee12 2a90 	vmov	r2, s5
 801ab50:	eef0 2a47 	vmov.f32	s5, s14
 801ab54:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab58:	ee13 2a10 	vmov	r2, s6
 801ab5c:	9327      	str	r3, [sp, #156]	; 0x9c
 801ab5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ab60:	eeb0 3a67 	vmov.f32	s6, s15
 801ab64:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab68:	9328      	str	r3, [sp, #160]	; 0xa0
 801ab6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ab6c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab6e:	3b01      	subs	r3, #1
 801ab70:	9316      	str	r3, [sp, #88]	; 0x58
 801ab72:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ab74:	bf08      	it	eq
 801ab76:	4613      	moveq	r3, r2
 801ab78:	9307      	str	r3, [sp, #28]
 801ab7a:	e610      	b.n	801a79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801ab7c:	2800      	cmp	r0, #0
 801ab7e:	f43f ae82 	beq.w	801a886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ab82:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ab86:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ab8a:	9108      	str	r1, [sp, #32]
 801ab8c:	0e09      	lsrs	r1, r1, #24
 801ab8e:	9110      	str	r1, [sp, #64]	; 0x40
 801ab90:	e679      	b.n	801a886 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ab92:	f113 0801 	adds.w	r8, r3, #1
 801ab96:	f53f af74 	bmi.w	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ab9a:	4541      	cmp	r1, r8
 801ab9c:	f6ff af71 	blt.w	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801aba0:	f11c 0801 	adds.w	r8, ip, #1
 801aba4:	f53f af6d 	bmi.w	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801aba8:	45c6      	cmp	lr, r8
 801abaa:	f6ff af6a 	blt.w	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801abae:	b209      	sxth	r1, r1
 801abb0:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801abb4:	fa0f f38e 	sxth.w	r3, lr
 801abb8:	9100      	str	r1, [sp, #0]
 801abba:	4639      	mov	r1, r7
 801abbc:	9301      	str	r3, [sp, #4]
 801abbe:	4633      	mov	r3, r6
 801abc0:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801abc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801abc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 801abc8:	f7ff fca3 	bl	801a512 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801abcc:	e759      	b.n	801aa82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801abce:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801abd0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801abd4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801abd6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801abda:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801abdc:	1427      	asrs	r7, r4, #16
 801abde:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801abe0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801abe4:	142b      	asrs	r3, r5, #16
 801abe6:	fb01 7303 	mla	r3, r1, r3, r7
 801abea:	18e7      	adds	r7, r4, r3
 801abec:	5ce3      	ldrb	r3, [r4, r3]
 801abee:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801abf2:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801abf6:	2a00      	cmp	r2, #0
 801abf8:	f000 811d 	beq.w	801ae36 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801abfc:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ac00:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801ac04:	940d      	str	r4, [sp, #52]	; 0x34
 801ac06:	0e24      	lsrs	r4, r4, #24
 801ac08:	9414      	str	r4, [sp, #80]	; 0x50
 801ac0a:	b170      	cbz	r0, 801ac2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ac0c:	eb07 0801 	add.w	r8, r7, r1
 801ac10:	5c79      	ldrb	r1, [r7, r1]
 801ac12:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ac16:	9109      	str	r1, [sp, #36]	; 0x24
 801ac18:	0e09      	lsrs	r1, r1, #24
 801ac1a:	9111      	str	r1, [sp, #68]	; 0x44
 801ac1c:	f898 1001 	ldrb.w	r1, [r8, #1]
 801ac20:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ac24:	910e      	str	r1, [sp, #56]	; 0x38
 801ac26:	0e09      	lsrs	r1, r1, #24
 801ac28:	9115      	str	r1, [sp, #84]	; 0x54
 801ac2a:	b292      	uxth	r2, r2
 801ac2c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ac2e:	b280      	uxth	r0, r0
 801ac30:	fb02 f900 	mul.w	r9, r2, r0
 801ac34:	0112      	lsls	r2, r2, #4
 801ac36:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ac3a:	eba2 0809 	sub.w	r8, r2, r9
 801ac3e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ac42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac44:	b280      	uxth	r0, r0
 801ac46:	fa1f f888 	uxth.w	r8, r8
 801ac4a:	1a09      	subs	r1, r1, r0
 801ac4c:	fb08 f202 	mul.w	r2, r8, r2
 801ac50:	b289      	uxth	r1, r1
 801ac52:	fb01 220c 	mla	r2, r1, ip, r2
 801ac56:	fb00 2204 	mla	r2, r0, r4, r2
 801ac5a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ac5c:	fb09 2204 	mla	r2, r9, r4, r2
 801ac60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ac64:	2a00      	cmp	r2, #0
 801ac66:	f000 80db 	beq.w	801ae20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801ac6a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ac6e:	d019      	beq.n	801aca4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801ac70:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ac74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ac78:	fb0c fa0a 	mul.w	sl, ip, sl
 801ac7c:	fb0c fc03 	mul.w	ip, ip, r3
 801ac80:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ac84:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ac88:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ac8c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ac90:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ac94:	4453      	add	r3, sl
 801ac96:	0a3f      	lsrs	r7, r7, #8
 801ac98:	0a1b      	lsrs	r3, r3, #8
 801ac9a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ac9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aca2:	433b      	orrs	r3, r7
 801aca4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aca6:	2cff      	cmp	r4, #255	; 0xff
 801aca8:	d020      	beq.n	801acec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801acaa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801acac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801acb0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801acb2:	4367      	muls	r7, r4
 801acb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801acb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801acba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801acbe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801acc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801acc4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acc8:	fb04 fa0a 	mul.w	sl, r4, sl
 801accc:	44bc      	add	ip, r7
 801acce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801acd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801acd6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801acda:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acde:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ace2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ace6:	ea4c 040a 	orr.w	r4, ip, sl
 801acea:	940d      	str	r4, [sp, #52]	; 0x34
 801acec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acee:	2cff      	cmp	r4, #255	; 0xff
 801acf0:	d020      	beq.n	801ad34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801acf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acf4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801acf8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acfa:	4367      	muls	r7, r4
 801acfc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acfe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad02:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ad08:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad10:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad14:	44bc      	add	ip, r7
 801ad16:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad1a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad1e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad22:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad2e:	ea4c 040a 	orr.w	r4, ip, sl
 801ad32:	9409      	str	r4, [sp, #36]	; 0x24
 801ad34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad36:	2cff      	cmp	r4, #255	; 0xff
 801ad38:	d020      	beq.n	801ad7c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ad3a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad3c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad40:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad42:	4367      	muls	r7, r4
 801ad44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad46:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad4a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad4e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad50:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad58:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad5c:	44bc      	add	ip, r7
 801ad5e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad66:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad6e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad72:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad76:	ea4c 040a 	orr.w	r4, ip, sl
 801ad7a:	940e      	str	r4, [sp, #56]	; 0x38
 801ad7c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ad7e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ad82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ad86:	43d2      	mvns	r2, r2
 801ad88:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ad8e:	b2d2      	uxtb	r2, r2
 801ad90:	fb08 f707 	mul.w	r7, r8, r7
 801ad94:	fb01 770c 	mla	r7, r1, ip, r7
 801ad98:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ad9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad9e:	fb00 770c 	mla	r7, r0, ip, r7
 801ada2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ada6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ada8:	fb09 770c 	mla	r7, r9, ip, r7
 801adac:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801adb0:	fb08 f80c 	mul.w	r8, r8, ip
 801adb4:	0a3f      	lsrs	r7, r7, #8
 801adb6:	fb01 8303 	mla	r3, r1, r3, r8
 801adba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801adbc:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801adc0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801adc4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801adc6:	fb00 330a 	mla	r3, r0, sl, r3
 801adca:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801adce:	fb09 3c0c 	mla	ip, r9, ip, r3
 801add2:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801add6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801adda:	fb03 f102 	mul.w	r1, r3, r2
 801adde:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ade2:	1c4b      	adds	r3, r1, #1
 801ade4:	ea47 070c 	orr.w	r7, r7, ip
 801ade8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801adec:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801adf0:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801adf4:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801adf8:	4353      	muls	r3, r2
 801adfa:	1c59      	adds	r1, r3, #1
 801adfc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ae00:	0a3b      	lsrs	r3, r7, #8
 801ae02:	0c3f      	lsrs	r7, r7, #16
 801ae04:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ae08:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ae0c:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ae10:	435a      	muls	r2, r3
 801ae12:	1c53      	adds	r3, r2, #1
 801ae14:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ae18:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ae1c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ae20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ae22:	f10e 0e03 	add.w	lr, lr, #3
 801ae26:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ae28:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ae2c:	441a      	add	r2, r3
 801ae2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ae30:	9225      	str	r2, [sp, #148]	; 0x94
 801ae32:	441d      	add	r5, r3
 801ae34:	e65a      	b.n	801aaec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ae36:	2800      	cmp	r0, #0
 801ae38:	f43f aef7 	beq.w	801ac2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ae3c:	5c79      	ldrb	r1, [r7, r1]
 801ae3e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ae42:	9109      	str	r1, [sp, #36]	; 0x24
 801ae44:	0e09      	lsrs	r1, r1, #24
 801ae46:	9111      	str	r1, [sp, #68]	; 0x44
 801ae48:	e6ef      	b.n	801ac2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ae4a:	b01b      	add	sp, #108	; 0x6c
 801ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae54:	b08d      	sub	sp, #52	; 0x34
 801ae56:	468b      	mov	fp, r1
 801ae58:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801ae5c:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ae60:	fb0c 5703 	mla	r7, ip, r3, r5
 801ae64:	f1bc 0f00 	cmp.w	ip, #0
 801ae68:	910b      	str	r1, [sp, #44]	; 0x2c
 801ae6a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ae6e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ae72:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801ae76:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801ae7a:	eb02 0607 	add.w	r6, r2, r7
 801ae7e:	f89b 4000 	ldrb.w	r4, [fp]
 801ae82:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801ae86:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801ae8a:	f2c0 80c1 	blt.w	801b010 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ae8e:	45e6      	cmp	lr, ip
 801ae90:	f340 80be 	ble.w	801b010 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801ae94:	2d00      	cmp	r5, #0
 801ae96:	f2c0 80b7 	blt.w	801b008 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801ae9a:	42ab      	cmp	r3, r5
 801ae9c:	f340 80b4 	ble.w	801b008 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801aea0:	5dd2      	ldrb	r2, [r2, r7]
 801aea2:	9205      	str	r2, [sp, #20]
 801aea4:	7872      	ldrb	r2, [r6, #1]
 801aea6:	9206      	str	r2, [sp, #24]
 801aea8:	78b2      	ldrb	r2, [r6, #2]
 801aeaa:	9207      	str	r2, [sp, #28]
 801aeac:	1c6a      	adds	r2, r5, #1
 801aeae:	f100 80b6 	bmi.w	801b01e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	f340 80b3 	ble.w	801b01e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801aeb8:	f1b8 0f00 	cmp.w	r8, #0
 801aebc:	f000 80af 	beq.w	801b01e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801aec0:	78f2      	ldrb	r2, [r6, #3]
 801aec2:	9201      	str	r2, [sp, #4]
 801aec4:	7932      	ldrb	r2, [r6, #4]
 801aec6:	9202      	str	r2, [sp, #8]
 801aec8:	7972      	ldrb	r2, [r6, #5]
 801aeca:	9203      	str	r2, [sp, #12]
 801aecc:	f11c 0c01 	adds.w	ip, ip, #1
 801aed0:	f100 80ad 	bmi.w	801b02e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801aed4:	45e6      	cmp	lr, ip
 801aed6:	f340 80aa 	ble.w	801b02e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801aeda:	f1ba 0f00 	cmp.w	sl, #0
 801aede:	f000 80a6 	beq.w	801b02e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801aee2:	2d00      	cmp	r5, #0
 801aee4:	f2c0 809f 	blt.w	801b026 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801aee8:	42ab      	cmp	r3, r5
 801aeea:	f340 809c 	ble.w	801b026 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801aeee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801aef2:	f816 9002 	ldrb.w	r9, [r6, r2]
 801aef6:	2203      	movs	r2, #3
 801aef8:	fb03 6c02 	mla	ip, r3, r2, r6
 801aefc:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801af00:	f89c e002 	ldrb.w	lr, [ip, #2]
 801af04:	9704      	str	r7, [sp, #16]
 801af06:	3501      	adds	r5, #1
 801af08:	f100 8098 	bmi.w	801b03c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801af0c:	42ab      	cmp	r3, r5
 801af0e:	f340 8095 	ble.w	801b03c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801af12:	f1b8 0f00 	cmp.w	r8, #0
 801af16:	f000 8091 	beq.w	801b03c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801af1a:	f04f 0c03 	mov.w	ip, #3
 801af1e:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801af22:	5cb5      	ldrb	r5, [r6, r2]
 801af24:	fb03 620c 	mla	r2, r3, ip, r6
 801af28:	fb03 630c 	mla	r3, r3, ip, r6
 801af2c:	7912      	ldrb	r2, [r2, #4]
 801af2e:	795e      	ldrb	r6, [r3, #5]
 801af30:	fa1f f388 	uxth.w	r3, r8
 801af34:	fa1f fc8a 	uxth.w	ip, sl
 801af38:	fb03 f70c 	mul.w	r7, r3, ip
 801af3c:	011b      	lsls	r3, r3, #4
 801af3e:	9708      	str	r7, [sp, #32]
 801af40:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801af44:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801af48:	1bdb      	subs	r3, r3, r7
 801af4a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801af4e:	fa1f fc8c 	uxth.w	ip, ip
 801af52:	b29b      	uxth	r3, r3
 801af54:	9709      	str	r7, [sp, #36]	; 0x24
 801af56:	ebaa 0a0c 	sub.w	sl, sl, ip
 801af5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801af5c:	930a      	str	r3, [sp, #40]	; 0x28
 801af5e:	fa1f fa8a 	uxth.w	sl, sl
 801af62:	ea6f 0807 	mvn.w	r8, r7
 801af66:	9f01      	ldr	r7, [sp, #4]
 801af68:	435f      	muls	r7, r3
 801af6a:	9b05      	ldr	r3, [sp, #20]
 801af6c:	fa5f f888 	uxtb.w	r8, r8
 801af70:	fb0a 7703 	mla	r7, sl, r3, r7
 801af74:	9b08      	ldr	r3, [sp, #32]
 801af76:	fb14 f408 	smulbb	r4, r4, r8
 801af7a:	fb0c 7709 	mla	r7, ip, r9, r7
 801af7e:	fb10 f008 	smulbb	r0, r0, r8
 801af82:	fb11 f108 	smulbb	r1, r1, r8
 801af86:	fb03 7705 	mla	r7, r3, r5, r7
 801af8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af8c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801af90:	fb07 4703 	mla	r7, r7, r3, r4
 801af94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af96:	b2bf      	uxth	r7, r7
 801af98:	1c7c      	adds	r4, r7, #1
 801af9a:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801af9e:	1224      	asrs	r4, r4, #8
 801afa0:	f88b 4000 	strb.w	r4, [fp]
 801afa4:	9c02      	ldr	r4, [sp, #8]
 801afa6:	435c      	muls	r4, r3
 801afa8:	9b06      	ldr	r3, [sp, #24]
 801afaa:	fb0a 4403 	mla	r4, sl, r3, r4
 801afae:	9b04      	ldr	r3, [sp, #16]
 801afb0:	fb0c 4403 	mla	r4, ip, r3, r4
 801afb4:	9b08      	ldr	r3, [sp, #32]
 801afb6:	fb03 4402 	mla	r4, r3, r2, r4
 801afba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801afbe:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801afc2:	fb04 0403 	mla	r4, r4, r3, r0
 801afc6:	9b03      	ldr	r3, [sp, #12]
 801afc8:	435a      	muls	r2, r3
 801afca:	b2a4      	uxth	r4, r4
 801afcc:	4613      	mov	r3, r2
 801afce:	9a07      	ldr	r2, [sp, #28]
 801afd0:	1c60      	adds	r0, r4, #1
 801afd2:	fb0a 3a02 	mla	sl, sl, r2, r3
 801afd6:	9b08      	ldr	r3, [sp, #32]
 801afd8:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801afdc:	fb0c ac0e 	mla	ip, ip, lr, sl
 801afe0:	1224      	asrs	r4, r4, #8
 801afe2:	fb03 c606 	mla	r6, r3, r6, ip
 801afe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afe8:	f88b 4001 	strb.w	r4, [fp, #1]
 801afec:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801aff0:	fb06 1103 	mla	r1, r6, r3, r1
 801aff4:	b289      	uxth	r1, r1
 801aff6:	1c4e      	adds	r6, r1, #1
 801aff8:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801affc:	1209      	asrs	r1, r1, #8
 801affe:	f88b 1002 	strb.w	r1, [fp, #2]
 801b002:	b00d      	add	sp, #52	; 0x34
 801b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b008:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b00c:	9405      	str	r4, [sp, #20]
 801b00e:	e74d      	b.n	801aeac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801b010:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b014:	9401      	str	r4, [sp, #4]
 801b016:	9405      	str	r4, [sp, #20]
 801b018:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b01c:	e756      	b.n	801aecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801b01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b022:	9401      	str	r4, [sp, #4]
 801b024:	e752      	b.n	801aecc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801b026:	468e      	mov	lr, r1
 801b028:	9004      	str	r0, [sp, #16]
 801b02a:	46a1      	mov	r9, r4
 801b02c:	e76b      	b.n	801af06 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801b02e:	460e      	mov	r6, r1
 801b030:	4602      	mov	r2, r0
 801b032:	4625      	mov	r5, r4
 801b034:	468e      	mov	lr, r1
 801b036:	9004      	str	r0, [sp, #16]
 801b038:	46a1      	mov	r9, r4
 801b03a:	e779      	b.n	801af30 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801b03c:	460e      	mov	r6, r1
 801b03e:	4602      	mov	r2, r0
 801b040:	4625      	mov	r5, r4
 801b042:	e775      	b.n	801af30 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801b044 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b048:	b09f      	sub	sp, #124	; 0x7c
 801b04a:	920e      	str	r2, [sp, #56]	; 0x38
 801b04c:	9307      	str	r3, [sp, #28]
 801b04e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801b050:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801b054:	901d      	str	r0, [sp, #116]	; 0x74
 801b056:	930c      	str	r3, [sp, #48]	; 0x30
 801b058:	6850      	ldr	r0, [r2, #4]
 801b05a:	910b      	str	r1, [sp, #44]	; 0x2c
 801b05c:	6812      	ldr	r2, [r2, #0]
 801b05e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801b062:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801b066:	fb00 1303 	mla	r3, r0, r3, r1
 801b06a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b06e:	18d3      	adds	r3, r2, r3
 801b070:	9308      	str	r3, [sp, #32]
 801b072:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	930a      	str	r3, [sp, #40]	; 0x28
 801b078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b07a:	43db      	mvns	r3, r3
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	9309      	str	r3, [sp, #36]	; 0x24
 801b080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b082:	2b00      	cmp	r3, #0
 801b084:	dc03      	bgt.n	801b08e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b088:	2b00      	cmp	r3, #0
 801b08a:	f340 81f5 	ble.w	801b478 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801b08e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b090:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b094:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b098:	1e48      	subs	r0, r1, #1
 801b09a:	1e54      	subs	r4, r2, #1
 801b09c:	9b07      	ldr	r3, [sp, #28]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	f340 80d5 	ble.w	801b24e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801b0a4:	ea5f 452a 	movs.w	r5, sl, asr #16
 801b0a8:	ea4f 4328 	mov.w	r3, r8, asr #16
 801b0ac:	d406      	bmi.n	801b0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b0ae:	4285      	cmp	r5, r0
 801b0b0:	da04      	bge.n	801b0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	db02      	blt.n	801b0bc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b0b6:	42a3      	cmp	r3, r4
 801b0b8:	f2c0 80ca 	blt.w	801b250 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801b0bc:	3501      	adds	r5, #1
 801b0be:	f100 80bb 	bmi.w	801b238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b0c2:	42a9      	cmp	r1, r5
 801b0c4:	f2c0 80b8 	blt.w	801b238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	f100 80b5 	bmi.w	801b238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	f2c0 80b2 	blt.w	801b238 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801b0d4:	9b07      	ldr	r3, [sp, #28]
 801b0d6:	9d08      	ldr	r5, [sp, #32]
 801b0d8:	930d      	str	r3, [sp, #52]	; 0x34
 801b0da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	f340 80d6 	ble.w	801b28e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801b0e2:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801b0e4:	ea4f 4428 	mov.w	r4, r8, asr #16
 801b0e8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b0ea:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801b0ee:	68c6      	ldr	r6, [r0, #12]
 801b0f0:	ea5f 402a 	movs.w	r0, sl, asr #16
 801b0f4:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801b0f8:	689b      	ldr	r3, [r3, #8]
 801b0fa:	f100 810f 	bmi.w	801b31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801b0fe:	1e5f      	subs	r7, r3, #1
 801b100:	42b8      	cmp	r0, r7
 801b102:	f280 810b 	bge.w	801b31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801b106:	2c00      	cmp	r4, #0
 801b108:	f2c0 8108 	blt.w	801b31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801b10c:	1e77      	subs	r7, r6, #1
 801b10e:	42bc      	cmp	r4, r7
 801b110:	f280 8104 	bge.w	801b31c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801b114:	b21b      	sxth	r3, r3
 801b116:	fb04 0003 	mla	r0, r4, r3, r0
 801b11a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b11c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b120:	1826      	adds	r6, r4, r0
 801b122:	5c24      	ldrb	r4, [r4, r0]
 801b124:	78b7      	ldrb	r7, [r6, #2]
 801b126:	7870      	ldrb	r0, [r6, #1]
 801b128:	970f      	str	r7, [sp, #60]	; 0x3c
 801b12a:	7977      	ldrb	r7, [r6, #5]
 801b12c:	f896 e003 	ldrb.w	lr, [r6, #3]
 801b130:	f896 c004 	ldrb.w	ip, [r6, #4]
 801b134:	9710      	str	r7, [sp, #64]	; 0x40
 801b136:	b1c9      	cbz	r1, 801b16c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801b138:	f04f 0b03 	mov.w	fp, #3
 801b13c:	f06f 0904 	mvn.w	r9, #4
 801b140:	3605      	adds	r6, #5
 801b142:	fb13 930b 	smlabb	r3, r3, fp, r9
 801b146:	eb06 0b03 	add.w	fp, r6, r3
 801b14a:	5cf3      	ldrb	r3, [r6, r3]
 801b14c:	9311      	str	r3, [sp, #68]	; 0x44
 801b14e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b152:	9313      	str	r3, [sp, #76]	; 0x4c
 801b154:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b158:	9315      	str	r3, [sp, #84]	; 0x54
 801b15a:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801b15e:	9312      	str	r3, [sp, #72]	; 0x48
 801b160:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801b164:	9314      	str	r3, [sp, #80]	; 0x50
 801b166:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801b16a:	9316      	str	r3, [sp, #88]	; 0x58
 801b16c:	b292      	uxth	r2, r2
 801b16e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b170:	b289      	uxth	r1, r1
 801b172:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b176:	fb02 f601 	mul.w	r6, r2, r1
 801b17a:	0112      	lsls	r2, r2, #4
 801b17c:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801b180:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801b184:	1b92      	subs	r2, r2, r6
 801b186:	b289      	uxth	r1, r1
 801b188:	b292      	uxth	r2, r2
 801b18a:	eba9 0901 	sub.w	r9, r9, r1
 801b18e:	fb02 fe0e 	mul.w	lr, r2, lr
 801b192:	fa1f f989 	uxth.w	r9, r9
 801b196:	fb02 fc0c 	mul.w	ip, r2, ip
 801b19a:	fb09 e404 	mla	r4, r9, r4, lr
 801b19e:	f895 e000 	ldrb.w	lr, [r5]
 801b1a2:	fb09 c000 	mla	r0, r9, r0, ip
 801b1a6:	fb01 4407 	mla	r4, r1, r7, r4
 801b1aa:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b1ac:	fb06 4407 	mla	r4, r6, r7, r4
 801b1b0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b1b2:	fb1e fe07 	smulbb	lr, lr, r7
 801b1b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b1ba:	fb04 e403 	mla	r4, r4, r3, lr
 801b1be:	b2a4      	uxth	r4, r4
 801b1c0:	f104 0e01 	add.w	lr, r4, #1
 801b1c4:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801b1c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1ca:	fb01 0004 	mla	r0, r1, r4, r0
 801b1ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b1d0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b1d4:	fb06 0004 	mla	r0, r6, r4, r0
 801b1d8:	786c      	ldrb	r4, [r5, #1]
 801b1da:	f885 e000 	strb.w	lr, [r5]
 801b1de:	fb14 f407 	smulbb	r4, r4, r7
 801b1e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b1e6:	fb00 4003 	mla	r0, r0, r3, r4
 801b1ea:	b280      	uxth	r0, r0
 801b1ec:	1c44      	adds	r4, r0, #1
 801b1ee:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b1f2:	1200      	asrs	r0, r0, #8
 801b1f4:	7068      	strb	r0, [r5, #1]
 801b1f6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b1f8:	4342      	muls	r2, r0
 801b1fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b1fc:	fb09 2200 	mla	r2, r9, r0, r2
 801b200:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b202:	fb01 2100 	mla	r1, r1, r0, r2
 801b206:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b208:	fb06 1602 	mla	r6, r6, r2, r1
 801b20c:	78a9      	ldrb	r1, [r5, #2]
 801b20e:	fb11 f107 	smulbb	r1, r1, r7
 801b212:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b216:	fb06 1303 	mla	r3, r6, r3, r1
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	1c5e      	adds	r6, r3, #1
 801b21e:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b222:	121b      	asrs	r3, r3, #8
 801b224:	70ab      	strb	r3, [r5, #2]
 801b226:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b228:	3503      	adds	r5, #3
 801b22a:	449a      	add	sl, r3
 801b22c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b22e:	4498      	add	r8, r3
 801b230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b232:	3b01      	subs	r3, #1
 801b234:	930d      	str	r3, [sp, #52]	; 0x34
 801b236:	e750      	b.n	801b0da <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b238:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b23a:	449a      	add	sl, r3
 801b23c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b23e:	4498      	add	r8, r3
 801b240:	9b07      	ldr	r3, [sp, #28]
 801b242:	3b01      	subs	r3, #1
 801b244:	9307      	str	r3, [sp, #28]
 801b246:	9b08      	ldr	r3, [sp, #32]
 801b248:	3303      	adds	r3, #3
 801b24a:	9308      	str	r3, [sp, #32]
 801b24c:	e726      	b.n	801b09c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b24e:	d026      	beq.n	801b29e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801b250:	9b07      	ldr	r3, [sp, #28]
 801b252:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b254:	3b01      	subs	r3, #1
 801b256:	fb00 a003 	mla	r0, r0, r3, sl
 801b25a:	1400      	asrs	r0, r0, #16
 801b25c:	f53f af3a 	bmi.w	801b0d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b260:	3901      	subs	r1, #1
 801b262:	4288      	cmp	r0, r1
 801b264:	f6bf af36 	bge.w	801b0d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b268:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b26a:	fb01 8303 	mla	r3, r1, r3, r8
 801b26e:	141b      	asrs	r3, r3, #16
 801b270:	f53f af30 	bmi.w	801b0d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b274:	3a01      	subs	r2, #1
 801b276:	4293      	cmp	r3, r2
 801b278:	f6bf af2c 	bge.w	801b0d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b27c:	9b08      	ldr	r3, [sp, #32]
 801b27e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b282:	1cdd      	adds	r5, r3, #3
 801b284:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b288:	f1bc 0f00 	cmp.w	ip, #0
 801b28c:	dc5f      	bgt.n	801b34e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801b28e:	9b07      	ldr	r3, [sp, #28]
 801b290:	9a08      	ldr	r2, [sp, #32]
 801b292:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b29a:	441a      	add	r2, r3
 801b29c:	9208      	str	r2, [sp, #32]
 801b29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	f340 80e9 	ble.w	801b478 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801b2a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b2ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b2b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b2b4:	eef0 6a62 	vmov.f32	s13, s5
 801b2b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b2bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b2c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2c4:	ee16 aa90 	vmov	sl, s13
 801b2c8:	eef0 6a43 	vmov.f32	s13, s6
 801b2cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2d0:	ee16 8a90 	vmov	r8, s13
 801b2d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b2d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b2dc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b2e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b2e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b2e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b2ec:	ee12 2a90 	vmov	r2, s5
 801b2f0:	eef0 2a47 	vmov.f32	s5, s14
 801b2f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2f8:	ee13 2a10 	vmov	r2, s6
 801b2fc:	932b      	str	r3, [sp, #172]	; 0xac
 801b2fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b300:	eeb0 3a67 	vmov.f32	s6, s15
 801b304:	fb92 f3f3 	sdiv	r3, r2, r3
 801b308:	932c      	str	r3, [sp, #176]	; 0xb0
 801b30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b30c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b30e:	3b01      	subs	r3, #1
 801b310:	930b      	str	r3, [sp, #44]	; 0x2c
 801b312:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b314:	bf08      	it	eq
 801b316:	4613      	moveq	r3, r2
 801b318:	9307      	str	r3, [sp, #28]
 801b31a:	e6b1      	b.n	801b080 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b31c:	1c47      	adds	r7, r0, #1
 801b31e:	d482      	bmi.n	801b226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b320:	42bb      	cmp	r3, r7
 801b322:	db80      	blt.n	801b226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b324:	1c67      	adds	r7, r4, #1
 801b326:	f53f af7e 	bmi.w	801b226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b32a:	42be      	cmp	r6, r7
 801b32c:	f6ff af7b 	blt.w	801b226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b330:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b332:	b236      	sxth	r6, r6
 801b334:	9001      	str	r0, [sp, #4]
 801b336:	b21b      	sxth	r3, r3
 801b338:	9600      	str	r6, [sp, #0]
 801b33a:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b33c:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b340:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b344:	4629      	mov	r1, r5
 801b346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b348:	f7ff fd82 	bl	801ae50 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b34c:	e76b      	b.n	801b226 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b34e:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801b350:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b354:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b358:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b35c:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b360:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b364:	fb07 0101 	mla	r1, r7, r1, r0
 801b368:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b36a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b36e:	1844      	adds	r4, r0, r1
 801b370:	5c40      	ldrb	r0, [r0, r1]
 801b372:	78a6      	ldrb	r6, [r4, #2]
 801b374:	7861      	ldrb	r1, [r4, #1]
 801b376:	960f      	str	r6, [sp, #60]	; 0x3c
 801b378:	78e6      	ldrb	r6, [r4, #3]
 801b37a:	910d      	str	r1, [sp, #52]	; 0x34
 801b37c:	9610      	str	r6, [sp, #64]	; 0x40
 801b37e:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b382:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b386:	b192      	cbz	r2, 801b3ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801b388:	f06f 0604 	mvn.w	r6, #4
 801b38c:	2103      	movs	r1, #3
 801b38e:	3405      	adds	r4, #5
 801b390:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b394:	19e6      	adds	r6, r4, r7
 801b396:	5de4      	ldrb	r4, [r4, r7]
 801b398:	9417      	str	r4, [sp, #92]	; 0x5c
 801b39a:	7874      	ldrb	r4, [r6, #1]
 801b39c:	9419      	str	r4, [sp, #100]	; 0x64
 801b39e:	78b4      	ldrb	r4, [r6, #2]
 801b3a0:	941b      	str	r4, [sp, #108]	; 0x6c
 801b3a2:	78f4      	ldrb	r4, [r6, #3]
 801b3a4:	9418      	str	r4, [sp, #96]	; 0x60
 801b3a6:	7934      	ldrb	r4, [r6, #4]
 801b3a8:	941a      	str	r4, [sp, #104]	; 0x68
 801b3aa:	7974      	ldrb	r4, [r6, #5]
 801b3ac:	941c      	str	r4, [sp, #112]	; 0x70
 801b3ae:	b29b      	uxth	r3, r3
 801b3b0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b3b2:	b292      	uxth	r2, r2
 801b3b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b3b6:	3503      	adds	r5, #3
 801b3b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b3bc:	fb03 f402 	mul.w	r4, r3, r2
 801b3c0:	011b      	lsls	r3, r3, #4
 801b3c2:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b3c6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b3ca:	1b1b      	subs	r3, r3, r4
 801b3cc:	b292      	uxth	r2, r2
 801b3ce:	b29b      	uxth	r3, r3
 801b3d0:	1ab6      	subs	r6, r6, r2
 801b3d2:	435f      	muls	r7, r3
 801b3d4:	b2b6      	uxth	r6, r6
 801b3d6:	fb03 f909 	mul.w	r9, r3, r9
 801b3da:	fb03 fb0b 	mul.w	fp, r3, fp
 801b3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b3e0:	fb06 7000 	mla	r0, r6, r0, r7
 801b3e4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b3e6:	fb06 bb03 	mla	fp, r6, r3, fp
 801b3ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b3ec:	fb02 0007 	mla	r0, r2, r7, r0
 801b3f0:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b3f2:	fb02 bb03 	mla	fp, r2, r3, fp
 801b3f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b3f8:	fb04 0007 	mla	r0, r4, r7, r0
 801b3fc:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b400:	fb17 f701 	smulbb	r7, r7, r1
 801b404:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b408:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b40a:	fb00 700e 	mla	r0, r0, lr, r7
 801b40e:	fb06 9101 	mla	r1, r6, r1, r9
 801b412:	b280      	uxth	r0, r0
 801b414:	1c47      	adds	r7, r0, #1
 801b416:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b41a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b41c:	1200      	asrs	r0, r0, #8
 801b41e:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b422:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b424:	fb02 1100 	mla	r1, r2, r0, r1
 801b428:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b42a:	fb04 1100 	mla	r1, r4, r0, r1
 801b42e:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b432:	fb04 b403 	mla	r4, r4, r3, fp
 801b436:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b43a:	fb10 f007 	smulbb	r0, r0, r7
 801b43e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b442:	fb13 f307 	smulbb	r3, r3, r7
 801b446:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b44a:	fb01 010e 	mla	r1, r1, lr, r0
 801b44e:	fb04 340e 	mla	r4, r4, lr, r3
 801b452:	b289      	uxth	r1, r1
 801b454:	b2a4      	uxth	r4, r4
 801b456:	1c48      	adds	r0, r1, #1
 801b458:	1c63      	adds	r3, r4, #1
 801b45a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b45e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b462:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b464:	1209      	asrs	r1, r1, #8
 801b466:	1224      	asrs	r4, r4, #8
 801b468:	449a      	add	sl, r3
 801b46a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b46c:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b470:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b474:	4498      	add	r8, r3
 801b476:	e707      	b.n	801b288 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801b478:	b01f      	add	sp, #124	; 0x7c
 801b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b47e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b47e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b482:	b087      	sub	sp, #28
 801b484:	780d      	ldrb	r5, [r1, #0]
 801b486:	784c      	ldrb	r4, [r1, #1]
 801b488:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801b48c:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801b490:	9004      	str	r0, [sp, #16]
 801b492:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801b496:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801b49a:	9005      	str	r0, [sp, #20]
 801b49c:	fb06 bc03 	mla	ip, r6, r3, fp
 801b4a0:	2e00      	cmp	r6, #0
 801b4a2:	7888      	ldrb	r0, [r1, #2]
 801b4a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b4a8:	eb02 090c 	add.w	r9, r2, ip
 801b4ac:	f2c0 8084 	blt.w	801b5b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b4b0:	42b7      	cmp	r7, r6
 801b4b2:	f340 8081 	ble.w	801b5b8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b4b6:	f1bb 0f00 	cmp.w	fp, #0
 801b4ba:	db79      	blt.n	801b5b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b4bc:	455b      	cmp	r3, fp
 801b4be:	dd77      	ble.n	801b5b0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b4c0:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b4c4:	9201      	str	r2, [sp, #4]
 801b4c6:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b4ca:	9202      	str	r2, [sp, #8]
 801b4cc:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b4d0:	9203      	str	r2, [sp, #12]
 801b4d2:	f11b 0201 	adds.w	r2, fp, #1
 801b4d6:	d476      	bmi.n	801b5c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	dd74      	ble.n	801b5c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b4dc:	9a04      	ldr	r2, [sp, #16]
 801b4de:	2a00      	cmp	r2, #0
 801b4e0:	d071      	beq.n	801b5c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b4e2:	f899 8003 	ldrb.w	r8, [r9, #3]
 801b4e6:	f899 c004 	ldrb.w	ip, [r9, #4]
 801b4ea:	f899 a005 	ldrb.w	sl, [r9, #5]
 801b4ee:	3601      	adds	r6, #1
 801b4f0:	d471      	bmi.n	801b5d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b4f2:	42b7      	cmp	r7, r6
 801b4f4:	dd6f      	ble.n	801b5d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b4f6:	9a05      	ldr	r2, [sp, #20]
 801b4f8:	2a00      	cmp	r2, #0
 801b4fa:	d06c      	beq.n	801b5d6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b4fc:	f1bb 0f00 	cmp.w	fp, #0
 801b500:	db65      	blt.n	801b5ce <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b502:	455b      	cmp	r3, fp
 801b504:	dd63      	ble.n	801b5ce <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b506:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b50a:	f819 e002 	ldrb.w	lr, [r9, r2]
 801b50e:	2203      	movs	r2, #3
 801b510:	fb03 9602 	mla	r6, r3, r2, r9
 801b514:	7877      	ldrb	r7, [r6, #1]
 801b516:	78b6      	ldrb	r6, [r6, #2]
 801b518:	f11b 0b01 	adds.w	fp, fp, #1
 801b51c:	d40c      	bmi.n	801b538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b51e:	455b      	cmp	r3, fp
 801b520:	dd0a      	ble.n	801b538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b522:	9a04      	ldr	r2, [sp, #16]
 801b524:	b142      	cbz	r2, 801b538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b526:	2203      	movs	r2, #3
 801b528:	fb13 2002 	smlabb	r0, r3, r2, r2
 801b52c:	f819 5000 	ldrb.w	r5, [r9, r0]
 801b530:	fb03 9002 	mla	r0, r3, r2, r9
 801b534:	7904      	ldrb	r4, [r0, #4]
 801b536:	7940      	ldrb	r0, [r0, #5]
 801b538:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b53c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b540:	fb03 fb02 	mul.w	fp, r3, r2
 801b544:	011b      	lsls	r3, r3, #4
 801b546:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801b54a:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801b54e:	eba3 030b 	sub.w	r3, r3, fp
 801b552:	b292      	uxth	r2, r2
 801b554:	b29b      	uxth	r3, r3
 801b556:	eba9 0902 	sub.w	r9, r9, r2
 801b55a:	9304      	str	r3, [sp, #16]
 801b55c:	fa1f f989 	uxth.w	r9, r9
 801b560:	fb03 f808 	mul.w	r8, r3, r8
 801b564:	9b01      	ldr	r3, [sp, #4]
 801b566:	fb09 8803 	mla	r8, r9, r3, r8
 801b56a:	9b04      	ldr	r3, [sp, #16]
 801b56c:	fb03 fc0c 	mul.w	ip, r3, ip
 801b570:	9b02      	ldr	r3, [sp, #8]
 801b572:	fb02 880e 	mla	r8, r2, lr, r8
 801b576:	fb09 cc03 	mla	ip, r9, r3, ip
 801b57a:	9b04      	ldr	r3, [sp, #16]
 801b57c:	fb0b 8805 	mla	r8, fp, r5, r8
 801b580:	fb02 c707 	mla	r7, r2, r7, ip
 801b584:	fb03 f30a 	mul.w	r3, r3, sl
 801b588:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b58c:	fb0b 7404 	mla	r4, fp, r4, r7
 801b590:	f881 8000 	strb.w	r8, [r1]
 801b594:	1224      	asrs	r4, r4, #8
 801b596:	704c      	strb	r4, [r1, #1]
 801b598:	9c03      	ldr	r4, [sp, #12]
 801b59a:	fb09 3904 	mla	r9, r9, r4, r3
 801b59e:	fb02 9206 	mla	r2, r2, r6, r9
 801b5a2:	fb0b 2000 	mla	r0, fp, r0, r2
 801b5a6:	1200      	asrs	r0, r0, #8
 801b5a8:	7088      	strb	r0, [r1, #2]
 801b5aa:	b007      	add	sp, #28
 801b5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5b0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b5b4:	9501      	str	r5, [sp, #4]
 801b5b6:	e78c      	b.n	801b4d2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801b5b8:	4682      	mov	sl, r0
 801b5ba:	46a4      	mov	ip, r4
 801b5bc:	46a8      	mov	r8, r5
 801b5be:	9501      	str	r5, [sp, #4]
 801b5c0:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b5c4:	e793      	b.n	801b4ee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b5c6:	4682      	mov	sl, r0
 801b5c8:	46a4      	mov	ip, r4
 801b5ca:	46a8      	mov	r8, r5
 801b5cc:	e78f      	b.n	801b4ee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b5ce:	4606      	mov	r6, r0
 801b5d0:	4627      	mov	r7, r4
 801b5d2:	46ae      	mov	lr, r5
 801b5d4:	e7a0      	b.n	801b518 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b5d6:	4606      	mov	r6, r0
 801b5d8:	4627      	mov	r7, r4
 801b5da:	46ae      	mov	lr, r5
 801b5dc:	e7ac      	b.n	801b538 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801b5de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5e2:	b09b      	sub	sp, #108	; 0x6c
 801b5e4:	920b      	str	r2, [sp, #44]	; 0x2c
 801b5e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b5e8:	9019      	str	r0, [sp, #100]	; 0x64
 801b5ea:	9109      	str	r1, [sp, #36]	; 0x24
 801b5ec:	6850      	ldr	r0, [r2, #4]
 801b5ee:	9306      	str	r3, [sp, #24]
 801b5f0:	6812      	ldr	r2, [r2, #0]
 801b5f2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b5f6:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801b5fa:	fb00 1303 	mla	r3, r0, r3, r1
 801b5fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b602:	18d3      	adds	r3, r2, r3
 801b604:	9307      	str	r3, [sp, #28]
 801b606:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	9308      	str	r3, [sp, #32]
 801b60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b60e:	2b00      	cmp	r3, #0
 801b610:	dc03      	bgt.n	801b61a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b614:	2b00      	cmp	r3, #0
 801b616:	f340 81ab 	ble.w	801b970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b61a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b61c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b620:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b624:	1e48      	subs	r0, r1, #1
 801b626:	1e55      	subs	r5, r2, #1
 801b628:	9b06      	ldr	r3, [sp, #24]
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	f340 80b1 	ble.w	801b792 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b630:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b634:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b638:	d406      	bmi.n	801b648 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b63a:	4286      	cmp	r6, r0
 801b63c:	da04      	bge.n	801b648 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b63e:	2b00      	cmp	r3, #0
 801b640:	db02      	blt.n	801b648 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b642:	42ab      	cmp	r3, r5
 801b644:	f2c0 80a6 	blt.w	801b794 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801b648:	3601      	adds	r6, #1
 801b64a:	f100 8097 	bmi.w	801b77c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b64e:	42b1      	cmp	r1, r6
 801b650:	f2c0 8094 	blt.w	801b77c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b654:	3301      	adds	r3, #1
 801b656:	f100 8091 	bmi.w	801b77c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b65a:	429a      	cmp	r2, r3
 801b65c:	f2c0 808e 	blt.w	801b77c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b660:	9b06      	ldr	r3, [sp, #24]
 801b662:	9e07      	ldr	r6, [sp, #28]
 801b664:	930a      	str	r3, [sp, #40]	; 0x28
 801b666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b668:	2b00      	cmp	r3, #0
 801b66a:	f340 80b0 	ble.w	801b7ce <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b66e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b670:	1425      	asrs	r5, r4, #16
 801b672:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b674:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b678:	68c7      	ldr	r7, [r0, #12]
 801b67a:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b67e:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b682:	689b      	ldr	r3, [r3, #8]
 801b684:	f100 80ea 	bmi.w	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b688:	f103 3cff 	add.w	ip, r3, #4294967295
 801b68c:	4560      	cmp	r0, ip
 801b68e:	f280 80e5 	bge.w	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b692:	2d00      	cmp	r5, #0
 801b694:	f2c0 80e2 	blt.w	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b698:	f107 3cff 	add.w	ip, r7, #4294967295
 801b69c:	4565      	cmp	r5, ip
 801b69e:	f280 80dd 	bge.w	801b85c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b6a2:	b21b      	sxth	r3, r3
 801b6a4:	fb05 0003 	mla	r0, r5, r3, r0
 801b6a8:	9d08      	ldr	r5, [sp, #32]
 801b6aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b6ae:	182f      	adds	r7, r5, r0
 801b6b0:	5c2d      	ldrb	r5, [r5, r0]
 801b6b2:	7878      	ldrb	r0, [r7, #1]
 801b6b4:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b6b8:	900c      	str	r0, [sp, #48]	; 0x30
 801b6ba:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b6be:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b6c2:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b6c6:	b1c9      	cbz	r1, 801b6fc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b6c8:	f04f 0c03 	mov.w	ip, #3
 801b6cc:	f06f 0004 	mvn.w	r0, #4
 801b6d0:	3705      	adds	r7, #5
 801b6d2:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b6d6:	eb07 0c03 	add.w	ip, r7, r3
 801b6da:	5cfb      	ldrb	r3, [r7, r3]
 801b6dc:	930d      	str	r3, [sp, #52]	; 0x34
 801b6de:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b6e2:	930f      	str	r3, [sp, #60]	; 0x3c
 801b6e4:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b6e8:	9311      	str	r3, [sp, #68]	; 0x44
 801b6ea:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b6ee:	930e      	str	r3, [sp, #56]	; 0x38
 801b6f0:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b6f4:	9310      	str	r3, [sp, #64]	; 0x40
 801b6f6:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b6fa:	9312      	str	r3, [sp, #72]	; 0x48
 801b6fc:	b292      	uxth	r2, r2
 801b6fe:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b700:	b289      	uxth	r1, r1
 801b702:	fb02 f301 	mul.w	r3, r2, r1
 801b706:	0112      	lsls	r2, r2, #4
 801b708:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b70c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b710:	1ad2      	subs	r2, r2, r3
 801b712:	b289      	uxth	r1, r1
 801b714:	b292      	uxth	r2, r2
 801b716:	1a7f      	subs	r7, r7, r1
 801b718:	fb02 f909 	mul.w	r9, r2, r9
 801b71c:	b2bf      	uxth	r7, r7
 801b71e:	fb02 f808 	mul.w	r8, r2, r8
 801b722:	fb02 fa0a 	mul.w	sl, r2, sl
 801b726:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b728:	fb07 9905 	mla	r9, r7, r5, r9
 801b72c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b72e:	fb07 8800 	mla	r8, r7, r0, r8
 801b732:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b734:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b738:	fb01 9905 	mla	r9, r1, r5, r9
 801b73c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b73e:	fb01 8800 	mla	r8, r1, r0, r8
 801b742:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b744:	fb01 a102 	mla	r1, r1, r2, sl
 801b748:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b74a:	fb03 9905 	mla	r9, r3, r5, r9
 801b74e:	fb03 8800 	mla	r8, r3, r0, r8
 801b752:	fb03 1302 	mla	r3, r3, r2, r1
 801b756:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b75a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b75e:	121b      	asrs	r3, r3, #8
 801b760:	f886 9000 	strb.w	r9, [r6]
 801b764:	f886 8001 	strb.w	r8, [r6, #1]
 801b768:	70b3      	strb	r3, [r6, #2]
 801b76a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b76c:	3603      	adds	r6, #3
 801b76e:	449b      	add	fp, r3
 801b770:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b772:	441c      	add	r4, r3
 801b774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b776:	3b01      	subs	r3, #1
 801b778:	930a      	str	r3, [sp, #40]	; 0x28
 801b77a:	e774      	b.n	801b666 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b77c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b77e:	449b      	add	fp, r3
 801b780:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b782:	441c      	add	r4, r3
 801b784:	9b06      	ldr	r3, [sp, #24]
 801b786:	3b01      	subs	r3, #1
 801b788:	9306      	str	r3, [sp, #24]
 801b78a:	9b07      	ldr	r3, [sp, #28]
 801b78c:	3303      	adds	r3, #3
 801b78e:	9307      	str	r3, [sp, #28]
 801b790:	e74a      	b.n	801b628 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b792:	d024      	beq.n	801b7de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b794:	9b06      	ldr	r3, [sp, #24]
 801b796:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b798:	3b01      	subs	r3, #1
 801b79a:	fb00 b003 	mla	r0, r0, r3, fp
 801b79e:	1400      	asrs	r0, r0, #16
 801b7a0:	f53f af5e 	bmi.w	801b660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b7a4:	3901      	subs	r1, #1
 801b7a6:	4288      	cmp	r0, r1
 801b7a8:	f6bf af5a 	bge.w	801b660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b7ac:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b7ae:	fb01 4303 	mla	r3, r1, r3, r4
 801b7b2:	141b      	asrs	r3, r3, #16
 801b7b4:	f53f af54 	bmi.w	801b660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b7b8:	3a01      	subs	r2, #1
 801b7ba:	4293      	cmp	r3, r2
 801b7bc:	f6bf af50 	bge.w	801b660 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b7c0:	9b07      	ldr	r3, [sp, #28]
 801b7c2:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b7c6:	1cde      	adds	r6, r3, #3
 801b7c8:	f1be 0f00 	cmp.w	lr, #0
 801b7cc:	dc5f      	bgt.n	801b88e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b7ce:	9b06      	ldr	r3, [sp, #24]
 801b7d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7d4:	9b07      	ldr	r3, [sp, #28]
 801b7d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7da:	4423      	add	r3, r4
 801b7dc:	9307      	str	r3, [sp, #28]
 801b7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	f340 80c5 	ble.w	801b970 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b7e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b7ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b7ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7f4:	eef0 6a62 	vmov.f32	s13, s5
 801b7f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b7fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b804:	ee16 ba90 	vmov	fp, s13
 801b808:	eef0 6a43 	vmov.f32	s13, s6
 801b80c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b810:	ee16 4a90 	vmov	r4, s13
 801b814:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b818:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b81c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b820:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b824:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b828:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b82c:	ee12 2a90 	vmov	r2, s5
 801b830:	eef0 2a47 	vmov.f32	s5, s14
 801b834:	fb92 f3f3 	sdiv	r3, r2, r3
 801b838:	ee13 2a10 	vmov	r2, s6
 801b83c:	9327      	str	r3, [sp, #156]	; 0x9c
 801b83e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b840:	eeb0 3a67 	vmov.f32	s6, s15
 801b844:	fb92 f3f3 	sdiv	r3, r2, r3
 801b848:	9328      	str	r3, [sp, #160]	; 0xa0
 801b84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b84e:	3b01      	subs	r3, #1
 801b850:	9309      	str	r3, [sp, #36]	; 0x24
 801b852:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b854:	bf08      	it	eq
 801b856:	4613      	moveq	r3, r2
 801b858:	9306      	str	r3, [sp, #24]
 801b85a:	e6d7      	b.n	801b60c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b85c:	f110 0c01 	adds.w	ip, r0, #1
 801b860:	d483      	bmi.n	801b76a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b862:	4563      	cmp	r3, ip
 801b864:	db81      	blt.n	801b76a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b866:	f115 0c01 	adds.w	ip, r5, #1
 801b86a:	f53f af7e 	bmi.w	801b76a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b86e:	4567      	cmp	r7, ip
 801b870:	f6ff af7b 	blt.w	801b76a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b874:	b23f      	sxth	r7, r7
 801b876:	b21b      	sxth	r3, r3
 801b878:	9700      	str	r7, [sp, #0]
 801b87a:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801b87e:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801b882:	9a08      	ldr	r2, [sp, #32]
 801b884:	4631      	mov	r1, r6
 801b886:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b888:	f7ff fdf9 	bl	801b47e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b88c:	e76d      	b.n	801b76a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b88e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b890:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b894:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b898:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b89c:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b8a0:	1421      	asrs	r1, r4, #16
 801b8a2:	930a      	str	r3, [sp, #40]	; 0x28
 801b8a4:	fb0c 0101 	mla	r1, ip, r1, r0
 801b8a8:	9808      	ldr	r0, [sp, #32]
 801b8aa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b8ae:	1845      	adds	r5, r0, r1
 801b8b0:	5c40      	ldrb	r0, [r0, r1]
 801b8b2:	796f      	ldrb	r7, [r5, #5]
 801b8b4:	7869      	ldrb	r1, [r5, #1]
 801b8b6:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b8ba:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b8be:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b8c2:	970c      	str	r7, [sp, #48]	; 0x30
 801b8c4:	b1a2      	cbz	r2, 801b8f0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801b8c6:	2703      	movs	r7, #3
 801b8c8:	f06f 0304 	mvn.w	r3, #4
 801b8cc:	3505      	adds	r5, #5
 801b8ce:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b8d2:	eb05 070c 	add.w	r7, r5, ip
 801b8d6:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b8da:	9513      	str	r5, [sp, #76]	; 0x4c
 801b8dc:	787d      	ldrb	r5, [r7, #1]
 801b8de:	9515      	str	r5, [sp, #84]	; 0x54
 801b8e0:	78bd      	ldrb	r5, [r7, #2]
 801b8e2:	9517      	str	r5, [sp, #92]	; 0x5c
 801b8e4:	78fd      	ldrb	r5, [r7, #3]
 801b8e6:	9514      	str	r5, [sp, #80]	; 0x50
 801b8e8:	793d      	ldrb	r5, [r7, #4]
 801b8ea:	9516      	str	r5, [sp, #88]	; 0x58
 801b8ec:	797d      	ldrb	r5, [r7, #5]
 801b8ee:	9518      	str	r5, [sp, #96]	; 0x60
 801b8f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b8f4:	b292      	uxth	r2, r2
 801b8f6:	3603      	adds	r6, #3
 801b8f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b8fc:	fb03 f502 	mul.w	r5, r3, r2
 801b900:	011b      	lsls	r3, r3, #4
 801b902:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b906:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b90a:	1b5b      	subs	r3, r3, r5
 801b90c:	b292      	uxth	r2, r2
 801b90e:	b29b      	uxth	r3, r3
 801b910:	1abf      	subs	r7, r7, r2
 801b912:	fb03 f909 	mul.w	r9, r3, r9
 801b916:	b2bf      	uxth	r7, r7
 801b918:	fb03 fa0a 	mul.w	sl, r3, sl
 801b91c:	fb07 9901 	mla	r9, r7, r1, r9
 801b920:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b922:	fb07 aa00 	mla	sl, r7, r0, sl
 801b926:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b928:	fb02 9901 	mla	r9, r2, r1, r9
 801b92c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b92e:	fb02 aa00 	mla	sl, r2, r0, sl
 801b932:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b934:	fb05 9901 	mla	r9, r5, r1, r9
 801b938:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b93a:	fb05 aa00 	mla	sl, r5, r0, sl
 801b93e:	434b      	muls	r3, r1
 801b940:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b942:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b946:	fb07 3308 	mla	r3, r7, r8, r3
 801b94a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b94e:	f806 ac06 	strb.w	sl, [r6, #-6]
 801b952:	fb02 3201 	mla	r2, r2, r1, r3
 801b956:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b958:	f806 9c05 	strb.w	r9, [r6, #-5]
 801b95c:	fb05 2503 	mla	r5, r5, r3, r2
 801b960:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b962:	122d      	asrs	r5, r5, #8
 801b964:	449b      	add	fp, r3
 801b966:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b968:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b96c:	441c      	add	r4, r3
 801b96e:	e72b      	b.n	801b7c8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b970:	b01b      	add	sp, #108	; 0x6c
 801b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b976 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b976:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b97a:	b087      	sub	sp, #28
 801b97c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b980:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b984:	fb05 7003 	mla	r0, r5, r3, r7
 801b988:	2d00      	cmp	r5, #0
 801b98a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b98e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b992:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b996:	f2c0 811f 	blt.w	801bbd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b99a:	45a8      	cmp	r8, r5
 801b99c:	f340 811c 	ble.w	801bbd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b9a0:	2f00      	cmp	r7, #0
 801b9a2:	f2c0 8117 	blt.w	801bbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b9a6:	42bb      	cmp	r3, r7
 801b9a8:	f340 8114 	ble.w	801bbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b9ac:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b9b0:	1c7a      	adds	r2, r7, #1
 801b9b2:	f100 8114 	bmi.w	801bbde <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	f340 8111 	ble.w	801bbde <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b9bc:	2c00      	cmp	r4, #0
 801b9be:	f000 8110 	beq.w	801bbe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801b9c2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b9c6:	3501      	adds	r5, #1
 801b9c8:	f100 810f 	bmi.w	801bbea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b9cc:	45a8      	cmp	r8, r5
 801b9ce:	f340 810c 	ble.w	801bbea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b9d2:	f1be 0f00 	cmp.w	lr, #0
 801b9d6:	f000 810b 	beq.w	801bbf0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801b9da:	2f00      	cmp	r7, #0
 801b9dc:	f2c0 8103 	blt.w	801bbe6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b9e0:	42bb      	cmp	r3, r7
 801b9e2:	f340 8100 	ble.w	801bbe6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b9e6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b9ea:	3701      	adds	r7, #1
 801b9ec:	f100 8103 	bmi.w	801bbf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b9f0:	42bb      	cmp	r3, r7
 801b9f2:	f340 8100 	ble.w	801bbf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b9f6:	2c00      	cmp	r4, #0
 801b9f8:	f000 80ff 	beq.w	801bbfa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ba02:	fa1f fc84 	uxth.w	ip, r4
 801ba06:	fa1f fe8e 	uxth.w	lr, lr
 801ba0a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ba0e:	fb0c f90e 	mul.w	r9, ip, lr
 801ba12:	0e13      	lsrs	r3, r2, #24
 801ba14:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ba18:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ba1c:	9302      	str	r3, [sp, #8]
 801ba1e:	ebac 0709 	sub.w	r7, ip, r9
 801ba22:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ba26:	fa1f f48e 	uxth.w	r4, lr
 801ba2a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ba2e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ba32:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ba36:	fb0a fe0e 	mul.w	lr, sl, lr
 801ba3a:	1b1b      	subs	r3, r3, r4
 801ba3c:	fb0a f606 	mul.w	r6, sl, r6
 801ba40:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ba44:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ba48:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ba4c:	b29b      	uxth	r3, r3
 801ba4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ba52:	b2bf      	uxth	r7, r7
 801ba54:	9301      	str	r3, [sp, #4]
 801ba56:	44e6      	add	lr, ip
 801ba58:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ba5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ba60:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ba64:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ba68:	9303      	str	r3, [sp, #12]
 801ba6a:	0a33      	lsrs	r3, r6, #8
 801ba6c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ba70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ba74:	9304      	str	r3, [sp, #16]
 801ba76:	fb0b f606 	mul.w	r6, fp, r6
 801ba7a:	fb0b f000 	mul.w	r0, fp, r0
 801ba7e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ba82:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ba86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ba8a:	44b6      	add	lr, r6
 801ba8c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801ba90:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ba94:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801ba98:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801ba9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801baa0:	fb08 f606 	mul.w	r6, r8, r6
 801baa4:	0a03      	lsrs	r3, r0, #8
 801baa6:	fb08 f505 	mul.w	r5, r8, r5
 801baaa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801baae:	0a30      	lsrs	r0, r6, #8
 801bab0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bab4:	9305      	str	r3, [sp, #20]
 801bab6:	0e13      	lsrs	r3, r2, #24
 801bab8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801babc:	fb0e fe07 	mul.w	lr, lr, r7
 801bac0:	4430      	add	r0, r6
 801bac2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801bac6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801baca:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801bace:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bad2:	0a00      	lsrs	r0, r0, #8
 801bad4:	435e      	muls	r6, r3
 801bad6:	0a2d      	lsrs	r5, r5, #8
 801bad8:	435a      	muls	r2, r3
 801bada:	9b03      	ldr	r3, [sp, #12]
 801badc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801bae0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bae4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bae8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801baec:	44b4      	add	ip, r6
 801baee:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801baf2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801baf6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801bafa:	9e01      	ldr	r6, [sp, #4]
 801bafc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb00:	fb03 ee06 	mla	lr, r3, r6, lr
 801bb04:	9b04      	ldr	r3, [sp, #16]
 801bb06:	0a12      	lsrs	r2, r2, #8
 801bb08:	fb0c ee09 	mla	lr, ip, r9, lr
 801bb0c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801bb10:	9b05      	ldr	r3, [sp, #20]
 801bb12:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bb16:	fb00 ee04 	mla	lr, r0, r4, lr
 801bb1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb1e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801bb22:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801bb26:	9b01      	ldr	r3, [sp, #4]
 801bb28:	fb07 fe0e 	mul.w	lr, r7, lr
 801bb2c:	fb07 f70b 	mul.w	r7, r7, fp
 801bb30:	fb03 ee06 	mla	lr, r3, r6, lr
 801bb34:	fb03 730a 	mla	r3, r3, sl, r7
 801bb38:	fb09 e202 	mla	r2, r9, r2, lr
 801bb3c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801bb40:	fb04 2e0e 	mla	lr, r4, lr, r2
 801bb44:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801bb48:	fb04 3408 	mla	r4, r4, r8, r3
 801bb4c:	9b02      	ldr	r3, [sp, #8]
 801bb4e:	b292      	uxth	r2, r2
 801bb50:	fb09 4903 	mla	r9, r9, r3, r4
 801bb54:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb58:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801bb5c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bb60:	fb09 f902 	mul.w	r9, r9, r2
 801bb64:	ea40 0e0e 	orr.w	lr, r0, lr
 801bb68:	f109 0301 	add.w	r3, r9, #1
 801bb6c:	fa5f f08e 	uxtb.w	r0, lr
 801bb70:	fb10 f002 	smulbb	r0, r0, r2
 801bb74:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801bb78:	780b      	ldrb	r3, [r1, #0]
 801bb7a:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801bb7e:	fa5f f989 	uxtb.w	r9, r9
 801bb82:	fb03 0309 	mla	r3, r3, r9, r0
 801bb86:	b29b      	uxth	r3, r3
 801bb88:	1c58      	adds	r0, r3, #1
 801bb8a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801bb8e:	7848      	ldrb	r0, [r1, #1]
 801bb90:	fb10 f009 	smulbb	r0, r0, r9
 801bb94:	121b      	asrs	r3, r3, #8
 801bb96:	700b      	strb	r3, [r1, #0]
 801bb98:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801bb9c:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801bba0:	fb03 0302 	mla	r3, r3, r2, r0
 801bba4:	b29b      	uxth	r3, r3
 801bba6:	1c58      	adds	r0, r3, #1
 801bba8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801bbac:	121b      	asrs	r3, r3, #8
 801bbae:	704b      	strb	r3, [r1, #1]
 801bbb0:	788b      	ldrb	r3, [r1, #2]
 801bbb2:	fb13 f909 	smulbb	r9, r3, r9
 801bbb6:	fb0e 9e02 	mla	lr, lr, r2, r9
 801bbba:	fa1f fe8e 	uxth.w	lr, lr
 801bbbe:	f10e 0301 	add.w	r3, lr, #1
 801bbc2:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801bbc6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bbca:	f881 e002 	strb.w	lr, [r1, #2]
 801bbce:	b007      	add	sp, #28
 801bbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbd4:	2600      	movs	r6, #0
 801bbd6:	e6eb      	b.n	801b9b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801bbd8:	2000      	movs	r0, #0
 801bbda:	4606      	mov	r6, r0
 801bbdc:	e6f3      	b.n	801b9c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801bbde:	2000      	movs	r0, #0
 801bbe0:	e6f1      	b.n	801b9c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801bbe2:	4620      	mov	r0, r4
 801bbe4:	e6ef      	b.n	801b9c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801bbe6:	2500      	movs	r5, #0
 801bbe8:	e6ff      	b.n	801b9ea <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801bbea:	2200      	movs	r2, #0
 801bbec:	4615      	mov	r5, r2
 801bbee:	e708      	b.n	801ba02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801bbf0:	4672      	mov	r2, lr
 801bbf2:	4675      	mov	r5, lr
 801bbf4:	e705      	b.n	801ba02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801bbf6:	2200      	movs	r2, #0
 801bbf8:	e703      	b.n	801ba02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801bbfa:	4622      	mov	r2, r4
 801bbfc:	e701      	b.n	801ba02 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801bbfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bbfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc02:	b09d      	sub	sp, #116	; 0x74
 801bc04:	9219      	str	r2, [sp, #100]	; 0x64
 801bc06:	9307      	str	r3, [sp, #28]
 801bc08:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801bc0a:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801bc0e:	901b      	str	r0, [sp, #108]	; 0x6c
 801bc10:	931a      	str	r3, [sp, #104]	; 0x68
 801bc12:	6850      	ldr	r0, [r2, #4]
 801bc14:	9117      	str	r1, [sp, #92]	; 0x5c
 801bc16:	6812      	ldr	r2, [r2, #0]
 801bc18:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801bc1c:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801bc20:	fb00 1303 	mla	r3, r0, r3, r1
 801bc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bc28:	18d3      	adds	r3, r2, r3
 801bc2a:	930a      	str	r3, [sp, #40]	; 0x28
 801bc2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	9310      	str	r3, [sp, #64]	; 0x40
 801bc32:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bc36:	930b      	str	r3, [sp, #44]	; 0x2c
 801bc38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	dc03      	bgt.n	801bc46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801bc3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f340 8368 	ble.w	801c316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801bc46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bc48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bc4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bc50:	1e48      	subs	r0, r1, #1
 801bc52:	1e57      	subs	r7, r2, #1
 801bc54:	9b07      	ldr	r3, [sp, #28]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	f340 8187 	ble.w	801bf6a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801bc5c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bc60:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bc64:	d406      	bmi.n	801bc74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc66:	4584      	cmp	ip, r0
 801bc68:	da04      	bge.n	801bc74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	db02      	blt.n	801bc74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801bc6e:	42bb      	cmp	r3, r7
 801bc70:	f2c0 817c 	blt.w	801bf6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801bc74:	f11c 0c01 	adds.w	ip, ip, #1
 801bc78:	f100 816c 	bmi.w	801bf54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bc7c:	4561      	cmp	r1, ip
 801bc7e:	f2c0 8169 	blt.w	801bf54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bc82:	3301      	adds	r3, #1
 801bc84:	f100 8166 	bmi.w	801bf54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bc88:	429a      	cmp	r2, r3
 801bc8a:	f2c0 8163 	blt.w	801bf54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bc8e:	9b07      	ldr	r3, [sp, #28]
 801bc90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bc92:	9318      	str	r3, [sp, #96]	; 0x60
 801bc94:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	f340 8186 	ble.w	801bfa8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801bc9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bc9e:	142a      	asrs	r2, r5, #16
 801bca0:	ea4f 4026 	mov.w	r0, r6, asr #16
 801bca4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bca8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801bcac:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801bcb0:	f100 81cb 	bmi.w	801c04a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bcb4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bcb8:	4542      	cmp	r2, r8
 801bcba:	f280 81c6 	bge.w	801c04a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bcbe:	2800      	cmp	r0, #0
 801bcc0:	f2c0 81c3 	blt.w	801c04a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bcc4:	f103 38ff 	add.w	r8, r3, #4294967295
 801bcc8:	4540      	cmp	r0, r8
 801bcca:	f280 81be 	bge.w	801c04a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bcce:	fa0f f38e 	sxth.w	r3, lr
 801bcd2:	fb00 2203 	mla	r2, r0, r3, r2
 801bcd6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bcd8:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801bcdc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801bce0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bce4:	2900      	cmp	r1, #0
 801bce6:	f000 81a6 	beq.w	801c036 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801bcea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bcee:	900c      	str	r0, [sp, #48]	; 0x30
 801bcf0:	0e00      	lsrs	r0, r0, #24
 801bcf2:	9013      	str	r0, [sp, #76]	; 0x4c
 801bcf4:	f1bc 0f00 	cmp.w	ip, #0
 801bcf8:	d00f      	beq.n	801bd1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bcfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bcfe:	3b01      	subs	r3, #1
 801bd00:	009b      	lsls	r3, r3, #2
 801bd02:	3304      	adds	r3, #4
 801bd04:	eb08 0003 	add.w	r0, r8, r3
 801bd08:	f858 3003 	ldr.w	r3, [r8, r3]
 801bd0c:	9308      	str	r3, [sp, #32]
 801bd0e:	0e1b      	lsrs	r3, r3, #24
 801bd10:	9311      	str	r3, [sp, #68]	; 0x44
 801bd12:	6843      	ldr	r3, [r0, #4]
 801bd14:	930d      	str	r3, [sp, #52]	; 0x34
 801bd16:	0e1b      	lsrs	r3, r3, #24
 801bd18:	9314      	str	r3, [sp, #80]	; 0x50
 801bd1a:	b289      	uxth	r1, r1
 801bd1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bd1e:	fa1f fc8c 	uxth.w	ip, ip
 801bd22:	0108      	lsls	r0, r1, #4
 801bd24:	fb01 f90c 	mul.w	r9, r1, ip
 801bd28:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bd2c:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801bd30:	eba0 0809 	sub.w	r8, r0, r9
 801bd34:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bd36:	fa1f f18c 	uxth.w	r1, ip
 801bd3a:	fa1f f888 	uxth.w	r8, r8
 801bd3e:	1a5b      	subs	r3, r3, r1
 801bd40:	fb08 f000 	mul.w	r0, r8, r0
 801bd44:	b29b      	uxth	r3, r3
 801bd46:	fb03 000e 	mla	r0, r3, lr, r0
 801bd4a:	fb01 0004 	mla	r0, r1, r4, r0
 801bd4e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bd50:	fb09 0004 	mla	r0, r9, r4, r0
 801bd54:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bd58:	2800      	cmp	r0, #0
 801bd5a:	f000 80f2 	beq.w	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bd5e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801bd62:	d01b      	beq.n	801bd9c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801bd64:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801bd68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bd6c:	fb0e fa0a 	mul.w	sl, lr, sl
 801bd70:	fb0e fe02 	mul.w	lr, lr, r2
 801bd74:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801bd78:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bd7c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bd80:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bd84:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bd88:	4452      	add	r2, sl
 801bd8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd8e:	0a12      	lsrs	r2, r2, #8
 801bd90:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bd94:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bd98:	ea42 020c 	orr.w	r2, r2, ip
 801bd9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bd9e:	2cff      	cmp	r4, #255	; 0xff
 801bda0:	d021      	beq.n	801bde6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bda2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bda4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bda8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bdaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801bdae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bdb0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bdb4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bdb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bdba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bdbe:	fb04 fa0a 	mul.w	sl, r4, sl
 801bdc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bdc6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bdca:	44de      	add	lr, fp
 801bdcc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bdd0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bdd4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bdd8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bddc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bde0:	ea4e 040a 	orr.w	r4, lr, sl
 801bde4:	940c      	str	r4, [sp, #48]	; 0x30
 801bde6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bde8:	2cff      	cmp	r4, #255	; 0xff
 801bdea:	d021      	beq.n	801be30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bdec:	9c08      	ldr	r4, [sp, #32]
 801bdee:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bdf2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bdf4:	fb04 fb0b 	mul.w	fp, r4, fp
 801bdf8:	9c08      	ldr	r4, [sp, #32]
 801bdfa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bdfe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801be00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801be04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801be08:	fb04 fa0a 	mul.w	sl, r4, sl
 801be0c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be10:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801be14:	44de      	add	lr, fp
 801be16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801be1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801be22:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be26:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801be2a:	ea4e 040a 	orr.w	r4, lr, sl
 801be2e:	9408      	str	r4, [sp, #32]
 801be30:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be32:	2cff      	cmp	r4, #255	; 0xff
 801be34:	d021      	beq.n	801be7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801be36:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801be38:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801be3c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be3e:	fb04 fb0b 	mul.w	fp, r4, fp
 801be42:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801be44:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801be48:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be4a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801be4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801be52:	fb04 fa0a 	mul.w	sl, r4, sl
 801be56:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be5a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801be5e:	44de      	add	lr, fp
 801be60:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801be64:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be68:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801be6c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be70:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801be74:	ea4e 040a 	orr.w	r4, lr, sl
 801be78:	940d      	str	r4, [sp, #52]	; 0x34
 801be7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801be7c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801be80:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801be84:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801be88:	9c08      	ldr	r4, [sp, #32]
 801be8a:	fb08 fc0c 	mul.w	ip, r8, ip
 801be8e:	fb03 cc0e 	mla	ip, r3, lr, ip
 801be92:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801be96:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801be98:	fb01 cc0e 	mla	ip, r1, lr, ip
 801be9c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bea0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bea2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bea6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801beaa:	fb08 f80e 	mul.w	r8, r8, lr
 801beae:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801beb2:	fb03 8202 	mla	r2, r3, r2, r8
 801beb6:	9b08      	ldr	r3, [sp, #32]
 801beb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bebc:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801bec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bec2:	fb01 220a 	mla	r2, r1, sl, r2
 801bec6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801beca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801becc:	fb09 2901 	mla	r9, r9, r1, r2
 801bed0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bed2:	4343      	muls	r3, r0
 801bed4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bed8:	1c58      	adds	r0, r3, #1
 801beda:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bede:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bee2:	783b      	ldrb	r3, [r7, #0]
 801bee4:	ea4c 0c09 	orr.w	ip, ip, r9
 801bee8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801beec:	fa5f f28c 	uxtb.w	r2, ip
 801bef0:	b2c0      	uxtb	r0, r0
 801bef2:	fb12 f201 	smulbb	r2, r2, r1
 801bef6:	fb03 2300 	mla	r3, r3, r0, r2
 801befa:	b29b      	uxth	r3, r3
 801befc:	1c5a      	adds	r2, r3, #1
 801befe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bf02:	787a      	ldrb	r2, [r7, #1]
 801bf04:	fb12 f200 	smulbb	r2, r2, r0
 801bf08:	121b      	asrs	r3, r3, #8
 801bf0a:	703b      	strb	r3, [r7, #0]
 801bf0c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bf10:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bf14:	fb03 2301 	mla	r3, r3, r1, r2
 801bf18:	b29b      	uxth	r3, r3
 801bf1a:	1c5a      	adds	r2, r3, #1
 801bf1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bf20:	121b      	asrs	r3, r3, #8
 801bf22:	707b      	strb	r3, [r7, #1]
 801bf24:	78bb      	ldrb	r3, [r7, #2]
 801bf26:	fb13 f000 	smulbb	r0, r3, r0
 801bf2a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801bf2e:	fa1f fc8c 	uxth.w	ip, ip
 801bf32:	f10c 0301 	add.w	r3, ip, #1
 801bf36:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bf3a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bf3e:	f887 c002 	strb.w	ip, [r7, #2]
 801bf42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bf44:	3703      	adds	r7, #3
 801bf46:	441d      	add	r5, r3
 801bf48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bf4a:	441e      	add	r6, r3
 801bf4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bf4e:	3b01      	subs	r3, #1
 801bf50:	9318      	str	r3, [sp, #96]	; 0x60
 801bf52:	e69f      	b.n	801bc94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bf54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bf56:	441d      	add	r5, r3
 801bf58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bf5a:	441e      	add	r6, r3
 801bf5c:	9b07      	ldr	r3, [sp, #28]
 801bf5e:	3b01      	subs	r3, #1
 801bf60:	9307      	str	r3, [sp, #28]
 801bf62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf64:	3303      	adds	r3, #3
 801bf66:	930a      	str	r3, [sp, #40]	; 0x28
 801bf68:	e674      	b.n	801bc54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bf6a:	d025      	beq.n	801bfb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801bf6c:	9b07      	ldr	r3, [sp, #28]
 801bf6e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801bf70:	3b01      	subs	r3, #1
 801bf72:	fb00 5003 	mla	r0, r0, r3, r5
 801bf76:	1400      	asrs	r0, r0, #16
 801bf78:	f53f ae89 	bmi.w	801bc8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bf7c:	3901      	subs	r1, #1
 801bf7e:	4288      	cmp	r0, r1
 801bf80:	f6bf ae85 	bge.w	801bc8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bf84:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bf86:	fb01 6303 	mla	r3, r1, r3, r6
 801bf8a:	141b      	asrs	r3, r3, #16
 801bf8c:	f53f ae7f 	bmi.w	801bc8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bf90:	3a01      	subs	r2, #1
 801bf92:	4293      	cmp	r3, r2
 801bf94:	f6bf ae7b 	bge.w	801bc8e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf9a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bf9e:	f103 0e03 	add.w	lr, r3, #3
 801bfa2:	f1bb 0f00 	cmp.w	fp, #0
 801bfa6:	dc6e      	bgt.n	801c086 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801bfa8:	9b07      	ldr	r3, [sp, #28]
 801bfaa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfb0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bfb4:	4423      	add	r3, r4
 801bfb6:	930a      	str	r3, [sp, #40]	; 0x28
 801bfb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	f340 81ab 	ble.w	801c316 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801bfc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bfc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bfc6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bfca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bfce:	eef0 6a62 	vmov.f32	s13, s5
 801bfd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bfd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bfda:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfde:	ee16 5a90 	vmov	r5, s13
 801bfe2:	eef0 6a43 	vmov.f32	s13, s6
 801bfe6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bfea:	ee16 6a90 	vmov	r6, s13
 801bfee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bff2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bff6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bffa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c002:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c006:	ee12 2a90 	vmov	r2, s5
 801c00a:	eef0 2a47 	vmov.f32	s5, s14
 801c00e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c012:	ee13 2a10 	vmov	r2, s6
 801c016:	9329      	str	r3, [sp, #164]	; 0xa4
 801c018:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c01a:	eeb0 3a67 	vmov.f32	s6, s15
 801c01e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c022:	932a      	str	r3, [sp, #168]	; 0xa8
 801c024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c026:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c028:	3b01      	subs	r3, #1
 801c02a:	9317      	str	r3, [sp, #92]	; 0x5c
 801c02c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c02e:	bf08      	it	eq
 801c030:	4613      	moveq	r3, r2
 801c032:	9307      	str	r3, [sp, #28]
 801c034:	e600      	b.n	801bc38 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801c036:	f1bc 0f00 	cmp.w	ip, #0
 801c03a:	f43f ae6e 	beq.w	801bd1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c03e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c042:	9308      	str	r3, [sp, #32]
 801c044:	0e1b      	lsrs	r3, r3, #24
 801c046:	9311      	str	r3, [sp, #68]	; 0x44
 801c048:	e667      	b.n	801bd1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801c04a:	f112 0801 	adds.w	r8, r2, #1
 801c04e:	f53f af78 	bmi.w	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c052:	45c6      	cmp	lr, r8
 801c054:	f6ff af75 	blt.w	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c058:	f110 0801 	adds.w	r8, r0, #1
 801c05c:	f53f af71 	bmi.w	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c060:	4543      	cmp	r3, r8
 801c062:	f6ff af6e 	blt.w	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c066:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c068:	b21b      	sxth	r3, r3
 801c06a:	9201      	str	r2, [sp, #4]
 801c06c:	9300      	str	r3, [sp, #0]
 801c06e:	fa0f f38e 	sxth.w	r3, lr
 801c072:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c078:	e9cd c404 	strd	ip, r4, [sp, #16]
 801c07c:	4639      	mov	r1, r7
 801c07e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c080:	f7ff fc79 	bl	801b976 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801c084:	e75d      	b.n	801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801c086:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c088:	142f      	asrs	r7, r5, #16
 801c08a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c08c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c090:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c094:	1433      	asrs	r3, r6, #16
 801c096:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c09a:	fb02 7303 	mla	r3, r2, r3, r7
 801c09e:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801c0a2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c0a6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c0aa:	2900      	cmp	r1, #0
 801c0ac:	f000 812a 	beq.w	801c304 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801c0b0:	687c      	ldr	r4, [r7, #4]
 801c0b2:	940e      	str	r4, [sp, #56]	; 0x38
 801c0b4:	0e24      	lsrs	r4, r4, #24
 801c0b6:	9415      	str	r4, [sp, #84]	; 0x54
 801c0b8:	b178      	cbz	r0, 801c0da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c0ba:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801c0be:	3a01      	subs	r2, #1
 801c0c0:	0092      	lsls	r2, r2, #2
 801c0c2:	3204      	adds	r2, #4
 801c0c4:	eb07 0802 	add.w	r8, r7, r2
 801c0c8:	58ba      	ldr	r2, [r7, r2]
 801c0ca:	9209      	str	r2, [sp, #36]	; 0x24
 801c0cc:	0e12      	lsrs	r2, r2, #24
 801c0ce:	9212      	str	r2, [sp, #72]	; 0x48
 801c0d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c0d4:	920f      	str	r2, [sp, #60]	; 0x3c
 801c0d6:	0e12      	lsrs	r2, r2, #24
 801c0d8:	9216      	str	r2, [sp, #88]	; 0x58
 801c0da:	b289      	uxth	r1, r1
 801c0dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c0de:	b280      	uxth	r0, r0
 801c0e0:	fb01 f900 	mul.w	r9, r1, r0
 801c0e4:	0109      	lsls	r1, r1, #4
 801c0e6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c0ea:	eba1 0809 	sub.w	r8, r1, r9
 801c0ee:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c0f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c0f4:	b280      	uxth	r0, r0
 801c0f6:	fa1f f888 	uxth.w	r8, r8
 801c0fa:	1a12      	subs	r2, r2, r0
 801c0fc:	fb08 f101 	mul.w	r1, r8, r1
 801c100:	b292      	uxth	r2, r2
 801c102:	fb02 110c 	mla	r1, r2, ip, r1
 801c106:	fb00 1104 	mla	r1, r0, r4, r1
 801c10a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c10c:	fb09 1104 	mla	r1, r9, r4, r1
 801c110:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c114:	2900      	cmp	r1, #0
 801c116:	f000 80ec 	beq.w	801c2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801c11a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c11e:	d019      	beq.n	801c154 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801c120:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c124:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c128:	fb0c fa0a 	mul.w	sl, ip, sl
 801c12c:	fb0c fc03 	mul.w	ip, ip, r3
 801c130:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c134:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c138:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c13c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c140:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c144:	4453      	add	r3, sl
 801c146:	0a3f      	lsrs	r7, r7, #8
 801c148:	0a1b      	lsrs	r3, r3, #8
 801c14a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c14e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c152:	433b      	orrs	r3, r7
 801c154:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c156:	2cff      	cmp	r4, #255	; 0xff
 801c158:	d020      	beq.n	801c19c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801c15a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c15c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c160:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c162:	4367      	muls	r7, r4
 801c164:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c166:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c16a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c16e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c170:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c174:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c178:	fb04 fa0a 	mul.w	sl, r4, sl
 801c17c:	44bc      	add	ip, r7
 801c17e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c182:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c186:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c18a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c18e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c192:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c196:	ea4c 040a 	orr.w	r4, ip, sl
 801c19a:	940e      	str	r4, [sp, #56]	; 0x38
 801c19c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c19e:	2cff      	cmp	r4, #255	; 0xff
 801c1a0:	d020      	beq.n	801c1e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801c1a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c1a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c1a8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1aa:	4367      	muls	r7, r4
 801c1ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c1ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c1b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c1b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c1bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c1c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801c1c4:	44bc      	add	ip, r7
 801c1c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c1ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c1d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c1d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c1da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c1de:	ea4c 040a 	orr.w	r4, ip, sl
 801c1e2:	9409      	str	r4, [sp, #36]	; 0x24
 801c1e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c1e6:	2cff      	cmp	r4, #255	; 0xff
 801c1e8:	d020      	beq.n	801c22c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801c1ea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c1ec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c1f0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c1f2:	4367      	muls	r7, r4
 801c1f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c1f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c1fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c1fe:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c200:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c204:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c208:	fb04 fa0a 	mul.w	sl, r4, sl
 801c20c:	44bc      	add	ip, r7
 801c20e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c212:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c216:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c21a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c21e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c222:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c226:	ea4c 040a 	orr.w	r4, ip, sl
 801c22a:	940f      	str	r4, [sp, #60]	; 0x3c
 801c22c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c22e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c232:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c236:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c23a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c23c:	fb08 f707 	mul.w	r7, r8, r7
 801c240:	fb02 770c 	mla	r7, r2, ip, r7
 801c244:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c248:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c24a:	fb00 770c 	mla	r7, r0, ip, r7
 801c24e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c252:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c254:	fb09 770c 	mla	r7, r9, ip, r7
 801c258:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c25c:	fb08 f80c 	mul.w	r8, r8, ip
 801c260:	0a3f      	lsrs	r7, r7, #8
 801c262:	fb02 8303 	mla	r3, r2, r3, r8
 801c266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c268:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c26c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c270:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c272:	fb00 330a 	mla	r3, r0, sl, r3
 801c276:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c27a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c27c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c282:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c286:	434b      	muls	r3, r1
 801c288:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c28c:	1c59      	adds	r1, r3, #1
 801c28e:	ea47 070c 	orr.w	r7, r7, ip
 801c292:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c296:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c29a:	b2fa      	uxtb	r2, r7
 801c29c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c2a0:	fb12 f200 	smulbb	r2, r2, r0
 801c2a4:	b2c9      	uxtb	r1, r1
 801c2a6:	fb03 2301 	mla	r3, r3, r1, r2
 801c2aa:	b29b      	uxth	r3, r3
 801c2ac:	1c5a      	adds	r2, r3, #1
 801c2ae:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c2b2:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c2b6:	fb12 f201 	smulbb	r2, r2, r1
 801c2ba:	121b      	asrs	r3, r3, #8
 801c2bc:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c2c0:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c2c4:	0c3f      	lsrs	r7, r7, #16
 801c2c6:	fb03 2300 	mla	r3, r3, r0, r2
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	1c5a      	adds	r2, r3, #1
 801c2ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c2d2:	121b      	asrs	r3, r3, #8
 801c2d4:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c2d8:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c2dc:	fb13 f101 	smulbb	r1, r3, r1
 801c2e0:	fb07 1700 	mla	r7, r7, r0, r1
 801c2e4:	b2bf      	uxth	r7, r7
 801c2e6:	1c79      	adds	r1, r7, #1
 801c2e8:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c2ec:	123f      	asrs	r7, r7, #8
 801c2ee:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c2f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c2f4:	f10e 0e03 	add.w	lr, lr, #3
 801c2f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c2fc:	441d      	add	r5, r3
 801c2fe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c300:	441e      	add	r6, r3
 801c302:	e64e      	b.n	801bfa2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801c304:	2800      	cmp	r0, #0
 801c306:	f43f aee8 	beq.w	801c0da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c30a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c30e:	9209      	str	r2, [sp, #36]	; 0x24
 801c310:	0e12      	lsrs	r2, r2, #24
 801c312:	9212      	str	r2, [sp, #72]	; 0x48
 801c314:	e6e1      	b.n	801c0da <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c316:	b01d      	add	sp, #116	; 0x74
 801c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c31c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c320:	b087      	sub	sp, #28
 801c322:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801c326:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c32a:	fb05 7003 	mla	r0, r5, r3, r7
 801c32e:	2d00      	cmp	r5, #0
 801c330:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c334:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801c338:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c33c:	f2c0 810a 	blt.w	801c554 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c340:	45a8      	cmp	r8, r5
 801c342:	f340 8107 	ble.w	801c554 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c346:	2f00      	cmp	r7, #0
 801c348:	f2c0 8102 	blt.w	801c550 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c34c:	42bb      	cmp	r3, r7
 801c34e:	f340 80ff 	ble.w	801c550 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c352:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c356:	1c7a      	adds	r2, r7, #1
 801c358:	f100 80ff 	bmi.w	801c55a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c35c:	4293      	cmp	r3, r2
 801c35e:	f340 80fc 	ble.w	801c55a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c362:	2c00      	cmp	r4, #0
 801c364:	f000 80fb 	beq.w	801c55e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801c368:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c36c:	3501      	adds	r5, #1
 801c36e:	f100 80fa 	bmi.w	801c566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c372:	45a8      	cmp	r8, r5
 801c374:	f340 80f7 	ble.w	801c566 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c378:	f1be 0f00 	cmp.w	lr, #0
 801c37c:	f000 80f6 	beq.w	801c56c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801c380:	2f00      	cmp	r7, #0
 801c382:	f2c0 80ee 	blt.w	801c562 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c386:	42bb      	cmp	r3, r7
 801c388:	f340 80eb 	ble.w	801c562 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c38c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c390:	3701      	adds	r7, #1
 801c392:	f100 80ee 	bmi.w	801c572 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c396:	42bb      	cmp	r3, r7
 801c398:	f340 80eb 	ble.w	801c572 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c39c:	2c00      	cmp	r4, #0
 801c39e:	f000 80ea 	beq.w	801c576 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801c3a2:	3301      	adds	r3, #1
 801c3a4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c3a8:	fa1f fc84 	uxth.w	ip, r4
 801c3ac:	fa1f fe8e 	uxth.w	lr, lr
 801c3b0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c3b4:	fb0c f90e 	mul.w	r9, ip, lr
 801c3b8:	0e13      	lsrs	r3, r2, #24
 801c3ba:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c3be:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801c3c2:	9302      	str	r3, [sp, #8]
 801c3c4:	ebac 0709 	sub.w	r7, ip, r9
 801c3c8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c3cc:	fa1f f48e 	uxth.w	r4, lr
 801c3d0:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801c3d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c3d8:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801c3dc:	fb0a fe0e 	mul.w	lr, sl, lr
 801c3e0:	1b1b      	subs	r3, r3, r4
 801c3e2:	fb0a f606 	mul.w	r6, sl, r6
 801c3e6:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c3ea:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c3ee:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c3f2:	b29b      	uxth	r3, r3
 801c3f4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c3f8:	b2bf      	uxth	r7, r7
 801c3fa:	9301      	str	r3, [sp, #4]
 801c3fc:	44e6      	add	lr, ip
 801c3fe:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c402:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c406:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c40a:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801c40e:	9303      	str	r3, [sp, #12]
 801c410:	0a33      	lsrs	r3, r6, #8
 801c412:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801c416:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c41a:	9304      	str	r3, [sp, #16]
 801c41c:	fb0b f606 	mul.w	r6, fp, r6
 801c420:	fb0b f000 	mul.w	r0, fp, r0
 801c424:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801c428:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c42c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c430:	44b6      	add	lr, r6
 801c432:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801c436:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c43a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c43e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c442:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c446:	fb08 f606 	mul.w	r6, r8, r6
 801c44a:	0a03      	lsrs	r3, r0, #8
 801c44c:	fb08 f505 	mul.w	r5, r8, r5
 801c450:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c454:	0a30      	lsrs	r0, r6, #8
 801c456:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c45a:	9305      	str	r3, [sp, #20]
 801c45c:	0e13      	lsrs	r3, r2, #24
 801c45e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c462:	fb0e fe07 	mul.w	lr, lr, r7
 801c466:	4430      	add	r0, r6
 801c468:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c46c:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c470:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801c474:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c478:	0a00      	lsrs	r0, r0, #8
 801c47a:	435e      	muls	r6, r3
 801c47c:	0a2d      	lsrs	r5, r5, #8
 801c47e:	435a      	muls	r2, r3
 801c480:	9b03      	ldr	r3, [sp, #12]
 801c482:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801c486:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c48a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c48e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c492:	44b4      	add	ip, r6
 801c494:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801c498:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c49c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c4a0:	9e01      	ldr	r6, [sp, #4]
 801c4a2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c4a6:	fb03 ee06 	mla	lr, r3, r6, lr
 801c4aa:	9b04      	ldr	r3, [sp, #16]
 801c4ac:	0a12      	lsrs	r2, r2, #8
 801c4ae:	fb0c ee09 	mla	lr, ip, r9, lr
 801c4b2:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801c4b6:	9b05      	ldr	r3, [sp, #20]
 801c4b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c4bc:	fb00 ee04 	mla	lr, r0, r4, lr
 801c4c0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4c4:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801c4c8:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801c4cc:	9b01      	ldr	r3, [sp, #4]
 801c4ce:	fb07 fe0e 	mul.w	lr, r7, lr
 801c4d2:	fb07 f70b 	mul.w	r7, r7, fp
 801c4d6:	fb03 ee06 	mla	lr, r3, r6, lr
 801c4da:	fb03 730a 	mla	r3, r3, sl, r7
 801c4de:	fb09 e202 	mla	r2, r9, r2, lr
 801c4e2:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c4e6:	fb04 2e0e 	mla	lr, r4, lr, r2
 801c4ea:	fb04 3408 	mla	r4, r4, r8, r3
 801c4ee:	9b02      	ldr	r3, [sp, #8]
 801c4f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4f4:	fb09 4903 	mla	r9, r9, r3, r4
 801c4f8:	780b      	ldrb	r3, [r1, #0]
 801c4fa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c4fe:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801c502:	ea40 0e0e 	orr.w	lr, r0, lr
 801c506:	fa5f f989 	uxtb.w	r9, r9
 801c50a:	fb03 f209 	mul.w	r2, r3, r9
 801c50e:	1c53      	adds	r3, r2, #1
 801c510:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c514:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801c518:	700b      	strb	r3, [r1, #0]
 801c51a:	784b      	ldrb	r3, [r1, #1]
 801c51c:	fb03 f309 	mul.w	r3, r3, r9
 801c520:	1c5a      	adds	r2, r3, #1
 801c522:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c526:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801c52a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c52e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c532:	704b      	strb	r3, [r1, #1]
 801c534:	788b      	ldrb	r3, [r1, #2]
 801c536:	fb03 f909 	mul.w	r9, r3, r9
 801c53a:	f109 0301 	add.w	r3, r9, #1
 801c53e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c542:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801c546:	f881 e002 	strb.w	lr, [r1, #2]
 801c54a:	b007      	add	sp, #28
 801c54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c550:	2600      	movs	r6, #0
 801c552:	e700      	b.n	801c356 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801c554:	2000      	movs	r0, #0
 801c556:	4606      	mov	r6, r0
 801c558:	e708      	b.n	801c36c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c55a:	2000      	movs	r0, #0
 801c55c:	e706      	b.n	801c36c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c55e:	4620      	mov	r0, r4
 801c560:	e704      	b.n	801c36c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c562:	2500      	movs	r5, #0
 801c564:	e714      	b.n	801c390 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801c566:	2200      	movs	r2, #0
 801c568:	4615      	mov	r5, r2
 801c56a:	e71d      	b.n	801c3a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c56c:	4672      	mov	r2, lr
 801c56e:	4675      	mov	r5, lr
 801c570:	e71a      	b.n	801c3a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c572:	2200      	movs	r2, #0
 801c574:	e718      	b.n	801c3a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c576:	4622      	mov	r2, r4
 801c578:	e716      	b.n	801c3a8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801c57a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c57a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57e:	b099      	sub	sp, #100	; 0x64
 801c580:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c584:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c586:	9017      	str	r0, [sp, #92]	; 0x5c
 801c588:	9306      	str	r3, [sp, #24]
 801c58a:	6850      	ldr	r0, [r2, #4]
 801c58c:	6812      	ldr	r2, [r2, #0]
 801c58e:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c592:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801c596:	fb00 1303 	mla	r3, r0, r3, r1
 801c59a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c59e:	18d3      	adds	r3, r2, r3
 801c5a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c5a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c5a4:	681b      	ldr	r3, [r3, #0]
 801c5a6:	930e      	str	r3, [sp, #56]	; 0x38
 801c5a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c5aa:	2b00      	cmp	r3, #0
 801c5ac:	dc03      	bgt.n	801c5b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c5ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	f340 8360 	ble.w	801cc76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c5b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c5b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c5bc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c5c0:	1e48      	subs	r0, r1, #1
 801c5c2:	1e57      	subs	r7, r2, #1
 801c5c4:	9b06      	ldr	r3, [sp, #24]
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	f340 817b 	ble.w	801c8c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801c5cc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c5d0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c5d4:	d406      	bmi.n	801c5e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c5d6:	4584      	cmp	ip, r0
 801c5d8:	da04      	bge.n	801c5e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	db02      	blt.n	801c5e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c5de:	42bb      	cmp	r3, r7
 801c5e0:	f2c0 8170 	blt.w	801c8c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c5e4:	f11c 0c01 	adds.w	ip, ip, #1
 801c5e8:	f100 8160 	bmi.w	801c8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c5ec:	4561      	cmp	r1, ip
 801c5ee:	f2c0 815d 	blt.w	801c8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c5f2:	3301      	adds	r3, #1
 801c5f4:	f100 815a 	bmi.w	801c8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	f2c0 8157 	blt.w	801c8ac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c5fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c602:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c604:	f1b8 0f00 	cmp.w	r8, #0
 801c608:	f340 8179 	ble.w	801c8fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c60c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c60e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c612:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c614:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c618:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c61c:	142a      	asrs	r2, r5, #16
 801c61e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c622:	689b      	ldr	r3, [r3, #8]
 801c624:	f100 81be 	bmi.w	801c9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c628:	f103 39ff 	add.w	r9, r3, #4294967295
 801c62c:	454a      	cmp	r2, r9
 801c62e:	f280 81b9 	bge.w	801c9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c632:	f1bc 0f00 	cmp.w	ip, #0
 801c636:	f2c0 81b5 	blt.w	801c9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c63a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c63e:	45cc      	cmp	ip, r9
 801c640:	f280 81b0 	bge.w	801c9a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c644:	b21b      	sxth	r3, r3
 801c646:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c648:	fb0c 2203 	mla	r2, ip, r3, r2
 801c64c:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c650:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c654:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c658:	2900      	cmp	r1, #0
 801c65a:	f000 8197 	beq.w	801c98c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801c65e:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c662:	940a      	str	r4, [sp, #40]	; 0x28
 801c664:	0e24      	lsrs	r4, r4, #24
 801c666:	9411      	str	r4, [sp, #68]	; 0x44
 801c668:	b180      	cbz	r0, 801c68c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c66a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c66e:	3b01      	subs	r3, #1
 801c670:	009b      	lsls	r3, r3, #2
 801c672:	3304      	adds	r3, #4
 801c674:	eb09 0c03 	add.w	ip, r9, r3
 801c678:	f859 3003 	ldr.w	r3, [r9, r3]
 801c67c:	9307      	str	r3, [sp, #28]
 801c67e:	0e1b      	lsrs	r3, r3, #24
 801c680:	930f      	str	r3, [sp, #60]	; 0x3c
 801c682:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c686:	930b      	str	r3, [sp, #44]	; 0x2c
 801c688:	0e1b      	lsrs	r3, r3, #24
 801c68a:	9312      	str	r3, [sp, #72]	; 0x48
 801c68c:	b289      	uxth	r1, r1
 801c68e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c690:	b280      	uxth	r0, r0
 801c692:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c694:	fb01 fa00 	mul.w	sl, r1, r0
 801c698:	0109      	lsls	r1, r1, #4
 801c69a:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c69e:	eba1 090a 	sub.w	r9, r1, sl
 801c6a2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c6a6:	b280      	uxth	r0, r0
 801c6a8:	fa1f f989 	uxth.w	r9, r9
 801c6ac:	1a09      	subs	r1, r1, r0
 801c6ae:	fb09 f303 	mul.w	r3, r9, r3
 801c6b2:	b289      	uxth	r1, r1
 801c6b4:	fb01 330e 	mla	r3, r1, lr, r3
 801c6b8:	fb00 3304 	mla	r3, r0, r4, r3
 801c6bc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c6be:	fb0a 3304 	mla	r3, sl, r4, r3
 801c6c2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f000 80e8 	beq.w	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c6cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c6d0:	d01b      	beq.n	801c70a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801c6d2:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c6d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c6da:	fb0e fb0b 	mul.w	fp, lr, fp
 801c6de:	fb0e fe02 	mul.w	lr, lr, r2
 801c6e2:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c6e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c6ea:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c6ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c6f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c6f6:	445a      	add	r2, fp
 801c6f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c6fc:	0a12      	lsrs	r2, r2, #8
 801c6fe:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c702:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c706:	ea42 020c 	orr.w	r2, r2, ip
 801c70a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c70c:	2cff      	cmp	r4, #255	; 0xff
 801c70e:	d021      	beq.n	801c754 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c710:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c712:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c716:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c718:	fb04 fc0c 	mul.w	ip, r4, ip
 801c71c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c71e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c722:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c726:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c728:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c72c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c730:	fb04 fb0b 	mul.w	fp, r4, fp
 801c734:	44e6      	add	lr, ip
 801c736:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c73a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c73e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c742:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c746:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c74a:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c74e:	ea4e 040b 	orr.w	r4, lr, fp
 801c752:	940a      	str	r4, [sp, #40]	; 0x28
 801c754:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c756:	2cff      	cmp	r4, #255	; 0xff
 801c758:	d021      	beq.n	801c79e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c75a:	9c07      	ldr	r4, [sp, #28]
 801c75c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c760:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c762:	fb04 fc0c 	mul.w	ip, r4, ip
 801c766:	9c07      	ldr	r4, [sp, #28]
 801c768:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c76c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c770:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c772:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c776:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c77a:	fb04 fb0b 	mul.w	fp, r4, fp
 801c77e:	44e6      	add	lr, ip
 801c780:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c784:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c788:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c78c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c790:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c794:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c798:	ea4e 040b 	orr.w	r4, lr, fp
 801c79c:	9407      	str	r4, [sp, #28]
 801c79e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c7a0:	2cff      	cmp	r4, #255	; 0xff
 801c7a2:	d021      	beq.n	801c7e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c7a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c7a6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c7aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c7ac:	fb04 fc0c 	mul.w	ip, r4, ip
 801c7b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c7b2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c7b6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c7ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c7bc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c7c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7c4:	fb04 fb0b 	mul.w	fp, r4, fp
 801c7c8:	44e6      	add	lr, ip
 801c7ca:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c7ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c7d2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c7d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c7da:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c7de:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c7e2:	ea4e 040b 	orr.w	r4, lr, fp
 801c7e6:	940b      	str	r4, [sp, #44]	; 0x2c
 801c7e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c7ea:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c7ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c7f2:	2bff      	cmp	r3, #255	; 0xff
 801c7f4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c7f8:	9c07      	ldr	r4, [sp, #28]
 801c7fa:	fb09 fc0c 	mul.w	ip, r9, ip
 801c7fe:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c802:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c806:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c808:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c80c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c810:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c812:	fb0a cc0e 	mla	ip, sl, lr, ip
 801c816:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c81a:	fb09 f90e 	mul.w	r9, r9, lr
 801c81e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c822:	fb01 9202 	mla	r2, r1, r2, r9
 801c826:	9907      	ldr	r1, [sp, #28]
 801c828:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c82c:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801c830:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c832:	fb00 220b 	mla	r2, r0, fp, r2
 801c836:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c83a:	fb0a 2a00 	mla	sl, sl, r0, r2
 801c83e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c842:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c846:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c84a:	fa5f f08c 	uxtb.w	r0, ip
 801c84e:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c852:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c856:	f000 80a2 	beq.w	801c99e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801c85a:	43db      	mvns	r3, r3
 801c85c:	783a      	ldrb	r2, [r7, #0]
 801c85e:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c862:	b2db      	uxtb	r3, r3
 801c864:	fb02 fe03 	mul.w	lr, r2, r3
 801c868:	fb0a fa03 	mul.w	sl, sl, r3
 801c86c:	f10e 0201 	add.w	r2, lr, #1
 801c870:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c874:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c878:	703a      	strb	r2, [r7, #0]
 801c87a:	787a      	ldrb	r2, [r7, #1]
 801c87c:	fb02 f003 	mul.w	r0, r2, r3
 801c880:	f10a 0301 	add.w	r3, sl, #1
 801c884:	1c42      	adds	r2, r0, #1
 801c886:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c88a:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c88e:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c892:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c896:	707a      	strb	r2, [r7, #1]
 801c898:	f887 c002 	strb.w	ip, [r7, #2]
 801c89c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c89e:	3703      	adds	r7, #3
 801c8a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c8a4:	441d      	add	r5, r3
 801c8a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8a8:	441e      	add	r6, r3
 801c8aa:	e6ab      	b.n	801c604 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c8ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c8ae:	441d      	add	r5, r3
 801c8b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c8b2:	441e      	add	r6, r3
 801c8b4:	9b06      	ldr	r3, [sp, #24]
 801c8b6:	3b01      	subs	r3, #1
 801c8b8:	9306      	str	r3, [sp, #24]
 801c8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8bc:	3303      	adds	r3, #3
 801c8be:	9309      	str	r3, [sp, #36]	; 0x24
 801c8c0:	e680      	b.n	801c5c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c8c2:	d024      	beq.n	801c90e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801c8c4:	9b06      	ldr	r3, [sp, #24]
 801c8c6:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c8c8:	3b01      	subs	r3, #1
 801c8ca:	fb00 5003 	mla	r0, r0, r3, r5
 801c8ce:	1400      	asrs	r0, r0, #16
 801c8d0:	f53f ae95 	bmi.w	801c5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8d4:	3901      	subs	r1, #1
 801c8d6:	4288      	cmp	r0, r1
 801c8d8:	f6bf ae91 	bge.w	801c5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8dc:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c8de:	fb01 6303 	mla	r3, r1, r3, r6
 801c8e2:	141b      	asrs	r3, r3, #16
 801c8e4:	f53f ae8b 	bmi.w	801c5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8e8:	3a01      	subs	r2, #1
 801c8ea:	4293      	cmp	r3, r2
 801c8ec:	f6bf ae87 	bge.w	801c5fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8f2:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c8f6:	1cdf      	adds	r7, r3, #3
 801c8f8:	f1bb 0f00 	cmp.w	fp, #0
 801c8fc:	dc6e      	bgt.n	801c9dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801c8fe:	9b06      	ldr	r3, [sp, #24]
 801c900:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c906:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c90a:	4423      	add	r3, r4
 801c90c:	9309      	str	r3, [sp, #36]	; 0x24
 801c90e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c910:	2b00      	cmp	r3, #0
 801c912:	f340 81b0 	ble.w	801cc76 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c91a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c91c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c920:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c924:	eef0 6a62 	vmov.f32	s13, s5
 801c928:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c92c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c930:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c934:	ee16 5a90 	vmov	r5, s13
 801c938:	eef0 6a43 	vmov.f32	s13, s6
 801c93c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c940:	ee16 6a90 	vmov	r6, s13
 801c944:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c948:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c94c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c950:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c954:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c958:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c95c:	ee12 2a90 	vmov	r2, s5
 801c960:	eef0 2a47 	vmov.f32	s5, s14
 801c964:	fb92 f3f3 	sdiv	r3, r2, r3
 801c968:	ee13 2a10 	vmov	r2, s6
 801c96c:	9325      	str	r3, [sp, #148]	; 0x94
 801c96e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c970:	eeb0 3a67 	vmov.f32	s6, s15
 801c974:	fb92 f3f3 	sdiv	r3, r2, r3
 801c978:	9326      	str	r3, [sp, #152]	; 0x98
 801c97a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c97c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c97e:	3b01      	subs	r3, #1
 801c980:	9315      	str	r3, [sp, #84]	; 0x54
 801c982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c984:	bf08      	it	eq
 801c986:	4613      	moveq	r3, r2
 801c988:	9306      	str	r3, [sp, #24]
 801c98a:	e60d      	b.n	801c5a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c98c:	2800      	cmp	r0, #0
 801c98e:	f43f ae7d 	beq.w	801c68c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c992:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c996:	9307      	str	r3, [sp, #28]
 801c998:	0e1b      	lsrs	r3, r3, #24
 801c99a:	930f      	str	r3, [sp, #60]	; 0x3c
 801c99c:	e676      	b.n	801c68c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c99e:	7038      	strb	r0, [r7, #0]
 801c9a0:	7079      	strb	r1, [r7, #1]
 801c9a2:	e779      	b.n	801c898 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c9a4:	f112 0901 	adds.w	r9, r2, #1
 801c9a8:	f53f af78 	bmi.w	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c9ac:	454b      	cmp	r3, r9
 801c9ae:	f6ff af75 	blt.w	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c9b2:	f11c 0901 	adds.w	r9, ip, #1
 801c9b6:	f53f af71 	bmi.w	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c9ba:	45ce      	cmp	lr, r9
 801c9bc:	f6ff af6e 	blt.w	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c9c0:	b21b      	sxth	r3, r3
 801c9c2:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c9c6:	fa0f f28e 	sxth.w	r2, lr
 801c9ca:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c9ce:	9200      	str	r2, [sp, #0]
 801c9d0:	4639      	mov	r1, r7
 801c9d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c9d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c9d6:	f7ff fca1 	bl	801c31c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c9da:	e75f      	b.n	801c89c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c9dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c9de:	1429      	asrs	r1, r5, #16
 801c9e0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c9e2:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c9e6:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801c9ea:	1433      	asrs	r3, r6, #16
 801c9ec:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c9f0:	fb0c 1303 	mla	r3, ip, r3, r1
 801c9f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c9f6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c9fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c9fe:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ca02:	2a00      	cmp	r2, #0
 801ca04:	f000 8129 	beq.w	801cc5a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801ca08:	684c      	ldr	r4, [r1, #4]
 801ca0a:	940c      	str	r4, [sp, #48]	; 0x30
 801ca0c:	0e24      	lsrs	r4, r4, #24
 801ca0e:	9413      	str	r4, [sp, #76]	; 0x4c
 801ca10:	b198      	cbz	r0, 801ca3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801ca12:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801ca16:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ca1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801ca1e:	f10c 0c04 	add.w	ip, ip, #4
 801ca22:	eb01 080c 	add.w	r8, r1, ip
 801ca26:	f851 100c 	ldr.w	r1, [r1, ip]
 801ca2a:	9108      	str	r1, [sp, #32]
 801ca2c:	0e09      	lsrs	r1, r1, #24
 801ca2e:	9110      	str	r1, [sp, #64]	; 0x40
 801ca30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ca34:	910d      	str	r1, [sp, #52]	; 0x34
 801ca36:	0e09      	lsrs	r1, r1, #24
 801ca38:	9114      	str	r1, [sp, #80]	; 0x50
 801ca3a:	b292      	uxth	r2, r2
 801ca3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ca3e:	b280      	uxth	r0, r0
 801ca40:	fb02 f900 	mul.w	r9, r2, r0
 801ca44:	0112      	lsls	r2, r2, #4
 801ca46:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ca4a:	eba2 0809 	sub.w	r8, r2, r9
 801ca4e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ca52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ca54:	b280      	uxth	r0, r0
 801ca56:	fa1f f888 	uxth.w	r8, r8
 801ca5a:	1a09      	subs	r1, r1, r0
 801ca5c:	fb08 f202 	mul.w	r2, r8, r2
 801ca60:	b289      	uxth	r1, r1
 801ca62:	fb01 220e 	mla	r2, r1, lr, r2
 801ca66:	fb00 2204 	mla	r2, r0, r4, r2
 801ca6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ca6c:	fb09 2204 	mla	r2, r9, r4, r2
 801ca70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ca74:	2a00      	cmp	r2, #0
 801ca76:	f000 80e8 	beq.w	801cc4a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801ca7a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ca7e:	d01b      	beq.n	801cab8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801ca80:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ca84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca88:	fb0e fa0a 	mul.w	sl, lr, sl
 801ca8c:	fb0e fe03 	mul.w	lr, lr, r3
 801ca90:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ca94:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ca98:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ca9c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801caa0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801caa4:	4453      	add	r3, sl
 801caa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801caaa:	0a1b      	lsrs	r3, r3, #8
 801caac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cab0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cab4:	ea43 030c 	orr.w	r3, r3, ip
 801cab8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801caba:	2cff      	cmp	r4, #255	; 0xff
 801cabc:	d021      	beq.n	801cb02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801cabe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cac0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cac4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cac6:	fb04 fc0c 	mul.w	ip, r4, ip
 801caca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cacc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cad0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cad4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cad6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cada:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cade:	fb04 fa0a 	mul.w	sl, r4, sl
 801cae2:	44e6      	add	lr, ip
 801cae4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cae8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801caec:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801caf0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801caf4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801caf8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cafc:	ea4e 040a 	orr.w	r4, lr, sl
 801cb00:	940c      	str	r4, [sp, #48]	; 0x30
 801cb02:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb04:	2cff      	cmp	r4, #255	; 0xff
 801cb06:	d021      	beq.n	801cb4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801cb08:	9c08      	ldr	r4, [sp, #32]
 801cb0a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cb0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb10:	fb04 fc0c 	mul.w	ip, r4, ip
 801cb14:	9c08      	ldr	r4, [sp, #32]
 801cb16:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cb1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb1c:	fb04 fa0e 	mul.w	sl, r4, lr
 801cb20:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cb24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cb28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb2c:	44e6      	add	lr, ip
 801cb2e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cb32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cb36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb46:	ea4e 040a 	orr.w	r4, lr, sl
 801cb4a:	9408      	str	r4, [sp, #32]
 801cb4c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb4e:	2cff      	cmp	r4, #255	; 0xff
 801cb50:	d021      	beq.n	801cb96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801cb52:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cb54:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cb58:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb5a:	fb04 fc0c 	mul.w	ip, r4, ip
 801cb5e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cb60:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cb64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cb68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb6a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cb6e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb72:	fb04 fa0a 	mul.w	sl, r4, sl
 801cb76:	44e6      	add	lr, ip
 801cb78:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cb7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cb80:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cb84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cb88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cb8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cb90:	ea4e 040a 	orr.w	r4, lr, sl
 801cb94:	940d      	str	r4, [sp, #52]	; 0x34
 801cb96:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cb98:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801cb9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cba0:	2aff      	cmp	r2, #255	; 0xff
 801cba2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cba6:	9c08      	ldr	r4, [sp, #32]
 801cba8:	fb08 fc0c 	mul.w	ip, r8, ip
 801cbac:	fb01 cc0e 	mla	ip, r1, lr, ip
 801cbb0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cbb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cbb6:	fb00 cc0e 	mla	ip, r0, lr, ip
 801cbba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801cbbe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cbc0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cbc4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cbc8:	fb08 f80e 	mul.w	r8, r8, lr
 801cbcc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbd0:	fb01 8303 	mla	r3, r1, r3, r8
 801cbd4:	9908      	ldr	r1, [sp, #32]
 801cbd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cbda:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801cbde:	990d      	ldr	r1, [sp, #52]	; 0x34
 801cbe0:	fb00 330a 	mla	r3, r0, sl, r3
 801cbe4:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801cbe8:	fb09 3e0e 	mla	lr, r9, lr, r3
 801cbec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cbf0:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cbf4:	ea4c 0c0e 	orr.w	ip, ip, lr
 801cbf8:	fa5f f08c 	uxtb.w	r0, ip
 801cbfc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cc00:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cc04:	d032      	beq.n	801cc6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801cc06:	43d2      	mvns	r2, r2
 801cc08:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801cc0c:	b2d2      	uxtb	r2, r2
 801cc0e:	fb0e fe02 	mul.w	lr, lr, r2
 801cc12:	f10e 0301 	add.w	r3, lr, #1
 801cc16:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801cc1a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cc1e:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801cc22:	4350      	muls	r0, r2
 801cc24:	f807 3c03 	strb.w	r3, [r7, #-3]
 801cc28:	1c43      	adds	r3, r0, #1
 801cc2a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cc2e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cc32:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801cc36:	4353      	muls	r3, r2
 801cc38:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cc3c:	1c5a      	adds	r2, r3, #1
 801cc3e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cc42:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801cc46:	f807 cc01 	strb.w	ip, [r7, #-1]
 801cc4a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cc4c:	3703      	adds	r7, #3
 801cc4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc52:	441d      	add	r5, r3
 801cc54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cc56:	441e      	add	r6, r3
 801cc58:	e64e      	b.n	801c8f8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801cc5a:	2800      	cmp	r0, #0
 801cc5c:	f43f aeed 	beq.w	801ca3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801cc60:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801cc64:	9108      	str	r1, [sp, #32]
 801cc66:	0e09      	lsrs	r1, r1, #24
 801cc68:	9110      	str	r1, [sp, #64]	; 0x40
 801cc6a:	e6e6      	b.n	801ca3a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801cc6c:	f807 0c03 	strb.w	r0, [r7, #-3]
 801cc70:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cc74:	e7e7      	b.n	801cc46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801cc76:	b019      	add	sp, #100	; 0x64
 801cc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cc7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc80:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801cc84:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cc88:	2c00      	cmp	r4, #0
 801cc8a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801cc8e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801cc92:	fb00 4e03 	mla	lr, r0, r3, r4
 801cc96:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801cc9a:	f2c0 80b8 	blt.w	801ce0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cc9e:	45a1      	cmp	r9, r4
 801cca0:	f340 80b5 	ble.w	801ce0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cca4:	2800      	cmp	r0, #0
 801cca6:	f2c0 80b2 	blt.w	801ce0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ccaa:	4580      	cmp	r8, r0
 801ccac:	f340 80af 	ble.w	801ce0e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801ccb0:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801ccb4:	f01e 0f01 	tst.w	lr, #1
 801ccb8:	5d56      	ldrb	r6, [r2, r5]
 801ccba:	bf0c      	ite	eq
 801ccbc:	f006 060f 	andeq.w	r6, r6, #15
 801ccc0:	1136      	asrne	r6, r6, #4
 801ccc2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801ccc6:	b2f6      	uxtb	r6, r6
 801ccc8:	f114 0a01 	adds.w	sl, r4, #1
 801cccc:	f100 80a1 	bmi.w	801ce12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ccd0:	45d1      	cmp	r9, sl
 801ccd2:	f340 809e 	ble.w	801ce12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	f2c0 809b 	blt.w	801ce12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801ccdc:	4580      	cmp	r8, r0
 801ccde:	f340 8098 	ble.w	801ce12 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801cce2:	2f00      	cmp	r7, #0
 801cce4:	f000 8097 	beq.w	801ce16 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801cce8:	f10e 0b01 	add.w	fp, lr, #1
 801ccec:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801ccf0:	f01b 0f01 	tst.w	fp, #1
 801ccf4:	5d55      	ldrb	r5, [r2, r5]
 801ccf6:	bf0c      	ite	eq
 801ccf8:	f005 050f 	andeq.w	r5, r5, #15
 801ccfc:	112d      	asrne	r5, r5, #4
 801ccfe:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801cd02:	b2ed      	uxtb	r5, r5
 801cd04:	f1bc 0f00 	cmp.w	ip, #0
 801cd08:	f000 8089 	beq.w	801ce1e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801cd0c:	2c00      	cmp	r4, #0
 801cd0e:	f100 0001 	add.w	r0, r0, #1
 801cd12:	f2c0 8082 	blt.w	801ce1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cd16:	45a1      	cmp	r9, r4
 801cd18:	dd7f      	ble.n	801ce1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	db7d      	blt.n	801ce1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cd1e:	4580      	cmp	r8, r0
 801cd20:	dd7b      	ble.n	801ce1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cd22:	eb03 0b0e 	add.w	fp, r3, lr
 801cd26:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801cd2a:	f01b 0f01 	tst.w	fp, #1
 801cd2e:	5d14      	ldrb	r4, [r2, r4]
 801cd30:	bf0c      	ite	eq
 801cd32:	f004 040f 	andeq.w	r4, r4, #15
 801cd36:	1124      	asrne	r4, r4, #4
 801cd38:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cd3c:	b2e4      	uxtb	r4, r4
 801cd3e:	f1ba 0f00 	cmp.w	sl, #0
 801cd42:	db6f      	blt.n	801ce24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cd44:	45d1      	cmp	r9, sl
 801cd46:	dd6d      	ble.n	801ce24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cd48:	2800      	cmp	r0, #0
 801cd4a:	db6b      	blt.n	801ce24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cd4c:	4580      	cmp	r8, r0
 801cd4e:	dd69      	ble.n	801ce24 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cd50:	2f00      	cmp	r7, #0
 801cd52:	d069      	beq.n	801ce28 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801cd54:	3301      	adds	r3, #1
 801cd56:	449e      	add	lr, r3
 801cd58:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cd5c:	f01e 0f01 	tst.w	lr, #1
 801cd60:	5cd0      	ldrb	r0, [r2, r3]
 801cd62:	bf0c      	ite	eq
 801cd64:	f000 000f 	andeq.w	r0, r0, #15
 801cd68:	1100      	asrne	r0, r0, #4
 801cd6a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cd6e:	b2c3      	uxtb	r3, r0
 801cd70:	b2ba      	uxth	r2, r7
 801cd72:	fa1f fc8c 	uxth.w	ip, ip
 801cd76:	fb02 f00c 	mul.w	r0, r2, ip
 801cd7a:	0112      	lsls	r2, r2, #4
 801cd7c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801cd80:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801cd84:	1a12      	subs	r2, r2, r0
 801cd86:	fa1f fc8c 	uxth.w	ip, ip
 801cd8a:	b292      	uxth	r2, r2
 801cd8c:	eba7 070c 	sub.w	r7, r7, ip
 801cd90:	436a      	muls	r2, r5
 801cd92:	b2bf      	uxth	r7, r7
 801cd94:	fb06 2207 	mla	r2, r6, r7, r2
 801cd98:	fb0c 2404 	mla	r4, ip, r4, r2
 801cd9c:	fb00 4303 	mla	r3, r0, r3, r4
 801cda0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cda4:	b38b      	cbz	r3, 801ce0a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801cda6:	4a21      	ldr	r2, [pc, #132]	; (801ce2c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801cda8:	6814      	ldr	r4, [r2, #0]
 801cdaa:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801cdae:	b2e5      	uxtb	r5, r4
 801cdb0:	4353      	muls	r3, r2
 801cdb2:	1c5a      	adds	r2, r3, #1
 801cdb4:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cdb8:	1212      	asrs	r2, r2, #8
 801cdba:	b290      	uxth	r0, r2
 801cdbc:	43d2      	mvns	r2, r2
 801cdbe:	fb15 f500 	smulbb	r5, r5, r0
 801cdc2:	b2d3      	uxtb	r3, r2
 801cdc4:	780a      	ldrb	r2, [r1, #0]
 801cdc6:	fb02 5203 	mla	r2, r2, r3, r5
 801cdca:	b292      	uxth	r2, r2
 801cdcc:	1c55      	adds	r5, r2, #1
 801cdce:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cdd2:	784d      	ldrb	r5, [r1, #1]
 801cdd4:	fb15 f503 	smulbb	r5, r5, r3
 801cdd8:	1212      	asrs	r2, r2, #8
 801cdda:	700a      	strb	r2, [r1, #0]
 801cddc:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801cde0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cde4:	fb02 5200 	mla	r2, r2, r0, r5
 801cde8:	b292      	uxth	r2, r2
 801cdea:	1c55      	adds	r5, r2, #1
 801cdec:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cdf0:	1212      	asrs	r2, r2, #8
 801cdf2:	704a      	strb	r2, [r1, #1]
 801cdf4:	788a      	ldrb	r2, [r1, #2]
 801cdf6:	fb12 f303 	smulbb	r3, r2, r3
 801cdfa:	fb04 3300 	mla	r3, r4, r0, r3
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	1c5a      	adds	r2, r3, #1
 801ce02:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce06:	121b      	asrs	r3, r3, #8
 801ce08:	708b      	strb	r3, [r1, #2]
 801ce0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce0e:	2600      	movs	r6, #0
 801ce10:	e75a      	b.n	801ccc8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801ce12:	2500      	movs	r5, #0
 801ce14:	e776      	b.n	801cd04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ce16:	463d      	mov	r5, r7
 801ce18:	e774      	b.n	801cd04 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801ce1a:	2400      	movs	r4, #0
 801ce1c:	e78f      	b.n	801cd3e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801ce1e:	4663      	mov	r3, ip
 801ce20:	4664      	mov	r4, ip
 801ce22:	e7a5      	b.n	801cd70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ce24:	2300      	movs	r3, #0
 801ce26:	e7a3      	b.n	801cd70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ce28:	463b      	mov	r3, r7
 801ce2a:	e7a1      	b.n	801cd70 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801ce2c:	2400f5a0 	.word	0x2400f5a0

0801ce30 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce34:	b097      	sub	sp, #92	; 0x5c
 801ce36:	9214      	str	r2, [sp, #80]	; 0x50
 801ce38:	9309      	str	r3, [sp, #36]	; 0x24
 801ce3a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ce3c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ce40:	9015      	str	r0, [sp, #84]	; 0x54
 801ce42:	910c      	str	r1, [sp, #48]	; 0x30
 801ce44:	6850      	ldr	r0, [r2, #4]
 801ce46:	930e      	str	r3, [sp, #56]	; 0x38
 801ce48:	6812      	ldr	r2, [r2, #0]
 801ce4a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801ce4e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801ce52:	fb00 1303 	mla	r3, r0, r3, r1
 801ce56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce5a:	eb02 0a03 	add.w	sl, r2, r3
 801ce5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce60:	689b      	ldr	r3, [r3, #8]
 801ce62:	3301      	adds	r3, #1
 801ce64:	f023 0301 	bic.w	r3, r3, #1
 801ce68:	930f      	str	r3, [sp, #60]	; 0x3c
 801ce6a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce6c:	681f      	ldr	r7, [r3, #0]
 801ce6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	dc03      	bgt.n	801ce7c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ce74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	f340 8247 	ble.w	801d30a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ce7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ce7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ce82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ce86:	1e48      	subs	r0, r1, #1
 801ce88:	f102 3cff 	add.w	ip, r2, #4294967295
 801ce8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	f340 80e5 	ble.w	801d05e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ce94:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801ce98:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ce9c:	d406      	bmi.n	801ceac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ce9e:	4586      	cmp	lr, r0
 801cea0:	da04      	bge.n	801ceac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	db02      	blt.n	801ceac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801cea6:	4563      	cmp	r3, ip
 801cea8:	f2c0 80da 	blt.w	801d060 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ceac:	f11e 0e01 	adds.w	lr, lr, #1
 801ceb0:	f100 80cb 	bmi.w	801d04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ceb4:	4571      	cmp	r1, lr
 801ceb6:	f2c0 80c8 	blt.w	801d04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ceba:	3301      	adds	r3, #1
 801cebc:	f100 80c5 	bmi.w	801d04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cec0:	429a      	cmp	r2, r3
 801cec2:	f2c0 80c2 	blt.w	801d04a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801cec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cec8:	46d0      	mov	r8, sl
 801ceca:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801cece:	930d      	str	r3, [sp, #52]	; 0x34
 801ced0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	f340 80e3 	ble.w	801d09e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ced8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ceda:	1430      	asrs	r0, r6, #16
 801cedc:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cee0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cee4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801cee8:	142b      	asrs	r3, r5, #16
 801ceea:	f100 812e 	bmi.w	801d14a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ceee:	f10c 3bff 	add.w	fp, ip, #4294967295
 801cef2:	455b      	cmp	r3, fp
 801cef4:	f280 8129 	bge.w	801d14a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cef8:	2800      	cmp	r0, #0
 801cefa:	f2c0 8126 	blt.w	801d14a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cefe:	f10e 3bff 	add.w	fp, lr, #4294967295
 801cf02:	4558      	cmp	r0, fp
 801cf04:	f280 8121 	bge.w	801d14a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cf08:	fb00 3309 	mla	r3, r0, r9, r3
 801cf0c:	0858      	lsrs	r0, r3, #1
 801cf0e:	07dc      	lsls	r4, r3, #31
 801cf10:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cf14:	bf54      	ite	pl
 801cf16:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cf1a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cf1e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cf22:	fa5f fc8c 	uxtb.w	ip, ip
 801cf26:	2a00      	cmp	r2, #0
 801cf28:	f000 80fe 	beq.w	801d128 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801cf2c:	1c58      	adds	r0, r3, #1
 801cf2e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801cf32:	07c0      	lsls	r0, r0, #31
 801cf34:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cf38:	bf54      	ite	pl
 801cf3a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801cf3e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801cf42:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801cf46:	fa5f f08e 	uxtb.w	r0, lr
 801cf4a:	9010      	str	r0, [sp, #64]	; 0x40
 801cf4c:	b1d9      	cbz	r1, 801cf86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf4e:	444b      	add	r3, r9
 801cf50:	0858      	lsrs	r0, r3, #1
 801cf52:	07dc      	lsls	r4, r3, #31
 801cf54:	f103 0301 	add.w	r3, r3, #1
 801cf58:	5c38      	ldrb	r0, [r7, r0]
 801cf5a:	bf54      	ite	pl
 801cf5c:	f000 000f 	andpl.w	r0, r0, #15
 801cf60:	1100      	asrmi	r0, r0, #4
 801cf62:	07dc      	lsls	r4, r3, #31
 801cf64:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cf68:	b2c0      	uxtb	r0, r0
 801cf6a:	900a      	str	r0, [sp, #40]	; 0x28
 801cf6c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801cf70:	f817 e000 	ldrb.w	lr, [r7, r0]
 801cf74:	bf54      	ite	pl
 801cf76:	f00e 030f 	andpl.w	r3, lr, #15
 801cf7a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801cf7e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cf82:	b2db      	uxtb	r3, r3
 801cf84:	9311      	str	r3, [sp, #68]	; 0x44
 801cf86:	b292      	uxth	r2, r2
 801cf88:	b289      	uxth	r1, r1
 801cf8a:	0113      	lsls	r3, r2, #4
 801cf8c:	fb02 f001 	mul.w	r0, r2, r1
 801cf90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cf92:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cf96:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801cf9a:	1a1b      	subs	r3, r3, r0
 801cf9c:	b289      	uxth	r1, r1
 801cf9e:	b29b      	uxth	r3, r3
 801cfa0:	ebae 0e01 	sub.w	lr, lr, r1
 801cfa4:	4353      	muls	r3, r2
 801cfa6:	fa1f fe8e 	uxth.w	lr, lr
 801cfaa:	fb0c 320e 	mla	r2, ip, lr, r3
 801cfae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfb0:	fb01 2203 	mla	r2, r1, r3, r2
 801cfb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cfb6:	fb00 2203 	mla	r2, r0, r3, r2
 801cfba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cfbe:	2a00      	cmp	r2, #0
 801cfc0:	d039      	beq.n	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cfc2:	4bc7      	ldr	r3, [pc, #796]	; (801d2e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801cfc4:	6819      	ldr	r1, [r3, #0]
 801cfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfc8:	fa5f fc81 	uxtb.w	ip, r1
 801cfcc:	435a      	muls	r2, r3
 801cfce:	1c53      	adds	r3, r2, #1
 801cfd0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cfd4:	1212      	asrs	r2, r2, #8
 801cfd6:	b290      	uxth	r0, r2
 801cfd8:	43d2      	mvns	r2, r2
 801cfda:	fb1c fc00 	smulbb	ip, ip, r0
 801cfde:	b2d3      	uxtb	r3, r2
 801cfe0:	f898 2000 	ldrb.w	r2, [r8]
 801cfe4:	fb02 c203 	mla	r2, r2, r3, ip
 801cfe8:	b292      	uxth	r2, r2
 801cfea:	f102 0c01 	add.w	ip, r2, #1
 801cfee:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cff2:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cff6:	fb1c fc03 	smulbb	ip, ip, r3
 801cffa:	1212      	asrs	r2, r2, #8
 801cffc:	f888 2000 	strb.w	r2, [r8]
 801d000:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801d004:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801d008:	fb02 c200 	mla	r2, r2, r0, ip
 801d00c:	b292      	uxth	r2, r2
 801d00e:	f102 0c01 	add.w	ip, r2, #1
 801d012:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d016:	1212      	asrs	r2, r2, #8
 801d018:	f888 2001 	strb.w	r2, [r8, #1]
 801d01c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d020:	fb12 f303 	smulbb	r3, r2, r3
 801d024:	fb01 3300 	mla	r3, r1, r0, r3
 801d028:	b29b      	uxth	r3, r3
 801d02a:	1c5a      	adds	r2, r3, #1
 801d02c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d030:	121b      	asrs	r3, r3, #8
 801d032:	f888 3002 	strb.w	r3, [r8, #2]
 801d036:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d038:	f108 0803 	add.w	r8, r8, #3
 801d03c:	441d      	add	r5, r3
 801d03e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d040:	441e      	add	r6, r3
 801d042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d044:	3b01      	subs	r3, #1
 801d046:	930d      	str	r3, [sp, #52]	; 0x34
 801d048:	e742      	b.n	801ced0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d04a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d04c:	f10a 0a03 	add.w	sl, sl, #3
 801d050:	441d      	add	r5, r3
 801d052:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d054:	441e      	add	r6, r3
 801d056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d058:	3b01      	subs	r3, #1
 801d05a:	9309      	str	r3, [sp, #36]	; 0x24
 801d05c:	e716      	b.n	801ce8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d05e:	d024      	beq.n	801d0aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801d060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d062:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801d064:	3b01      	subs	r3, #1
 801d066:	fb00 5003 	mla	r0, r0, r3, r5
 801d06a:	1400      	asrs	r0, r0, #16
 801d06c:	f53f af2b 	bmi.w	801cec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d070:	3901      	subs	r1, #1
 801d072:	4288      	cmp	r0, r1
 801d074:	f6bf af27 	bge.w	801cec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d078:	9924      	ldr	r1, [sp, #144]	; 0x90
 801d07a:	fb01 6303 	mla	r3, r1, r3, r6
 801d07e:	141b      	asrs	r3, r3, #16
 801d080:	f53f af21 	bmi.w	801cec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d084:	3a01      	subs	r2, #1
 801d086:	4293      	cmp	r3, r2
 801d088:	f6bf af1d 	bge.w	801cec6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d08c:	f10a 0e03 	add.w	lr, sl, #3
 801d090:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801d094:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d098:	f1b8 0f00 	cmp.w	r8, #0
 801d09c:	dc76      	bgt.n	801d18c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801d09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0a0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d0a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d0a8:	44a2      	add	sl, r4
 801d0aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f340 812c 	ble.w	801d30a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801d0b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d0b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d0b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d0bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d0c0:	eef0 6a62 	vmov.f32	s13, s5
 801d0c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d0c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d0cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0d0:	ee16 5a90 	vmov	r5, s13
 801d0d4:	eef0 6a43 	vmov.f32	s13, s6
 801d0d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d0dc:	ee16 6a90 	vmov	r6, s13
 801d0e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d0e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d0e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d0ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d0f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d0f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d0f8:	ee12 2a90 	vmov	r2, s5
 801d0fc:	eef0 2a47 	vmov.f32	s5, s14
 801d100:	fb92 f3f3 	sdiv	r3, r2, r3
 801d104:	ee13 2a10 	vmov	r2, s6
 801d108:	9323      	str	r3, [sp, #140]	; 0x8c
 801d10a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d10c:	eeb0 3a67 	vmov.f32	s6, s15
 801d110:	fb92 f3f3 	sdiv	r3, r2, r3
 801d114:	9324      	str	r3, [sp, #144]	; 0x90
 801d116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d11a:	3b01      	subs	r3, #1
 801d11c:	930c      	str	r3, [sp, #48]	; 0x30
 801d11e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d120:	bf08      	it	eq
 801d122:	4613      	moveq	r3, r2
 801d124:	9309      	str	r3, [sp, #36]	; 0x24
 801d126:	e6a2      	b.n	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d128:	2900      	cmp	r1, #0
 801d12a:	f43f af2c 	beq.w	801cf86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d12e:	eb09 0003 	add.w	r0, r9, r3
 801d132:	0843      	lsrs	r3, r0, #1
 801d134:	07c0      	lsls	r0, r0, #31
 801d136:	5cfb      	ldrb	r3, [r7, r3]
 801d138:	bf54      	ite	pl
 801d13a:	f003 030f 	andpl.w	r3, r3, #15
 801d13e:	111b      	asrmi	r3, r3, #4
 801d140:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d144:	b2db      	uxtb	r3, r3
 801d146:	930a      	str	r3, [sp, #40]	; 0x28
 801d148:	e71d      	b.n	801cf86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d14a:	f113 0b01 	adds.w	fp, r3, #1
 801d14e:	f53f af72 	bmi.w	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d152:	45dc      	cmp	ip, fp
 801d154:	f6ff af6f 	blt.w	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d158:	f110 0b01 	adds.w	fp, r0, #1
 801d15c:	f53f af6b 	bmi.w	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d160:	45de      	cmp	lr, fp
 801d162:	f6ff af68 	blt.w	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d166:	9302      	str	r3, [sp, #8]
 801d168:	fa0f f38e 	sxth.w	r3, lr
 801d16c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d16e:	9301      	str	r3, [sp, #4]
 801d170:	fa0f f38c 	sxth.w	r3, ip
 801d174:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d178:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d17c:	9300      	str	r3, [sp, #0]
 801d17e:	463a      	mov	r2, r7
 801d180:	464b      	mov	r3, r9
 801d182:	4641      	mov	r1, r8
 801d184:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d186:	f7ff fd79 	bl	801cc7c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801d18a:	e754      	b.n	801d036 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801d18c:	142a      	asrs	r2, r5, #16
 801d18e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d192:	1433      	asrs	r3, r6, #16
 801d194:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d198:	fb09 2303 	mla	r3, r9, r3, r2
 801d19c:	085a      	lsrs	r2, r3, #1
 801d19e:	07dc      	lsls	r4, r3, #31
 801d1a0:	5cba      	ldrb	r2, [r7, r2]
 801d1a2:	bf54      	ite	pl
 801d1a4:	f002 020f 	andpl.w	r2, r2, #15
 801d1a8:	1112      	asrmi	r2, r2, #4
 801d1aa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d1ae:	b2d2      	uxtb	r2, r2
 801d1b0:	2900      	cmp	r1, #0
 801d1b2:	f000 8097 	beq.w	801d2e4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801d1b6:	f103 0b01 	add.w	fp, r3, #1
 801d1ba:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801d1be:	f01b 0f01 	tst.w	fp, #1
 801d1c2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d1c6:	bf0c      	ite	eq
 801d1c8:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d1cc:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d1d0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d1d4:	fa5f f48c 	uxtb.w	r4, ip
 801d1d8:	9412      	str	r4, [sp, #72]	; 0x48
 801d1da:	b300      	cbz	r0, 801d21e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d1dc:	444b      	add	r3, r9
 801d1de:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d1e2:	07dc      	lsls	r4, r3, #31
 801d1e4:	f103 0301 	add.w	r3, r3, #1
 801d1e8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d1ec:	bf54      	ite	pl
 801d1ee:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d1f2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d1f6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d1fa:	fa5f f48c 	uxtb.w	r4, ip
 801d1fe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d202:	940b      	str	r4, [sp, #44]	; 0x2c
 801d204:	07dc      	lsls	r4, r3, #31
 801d206:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d20a:	bf54      	ite	pl
 801d20c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d210:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d214:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d218:	fa5f f38c 	uxtb.w	r3, ip
 801d21c:	9313      	str	r3, [sp, #76]	; 0x4c
 801d21e:	b289      	uxth	r1, r1
 801d220:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d222:	b280      	uxth	r0, r0
 801d224:	fb01 f300 	mul.w	r3, r1, r0
 801d228:	0109      	lsls	r1, r1, #4
 801d22a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d22e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d232:	1ac9      	subs	r1, r1, r3
 801d234:	b280      	uxth	r0, r0
 801d236:	b289      	uxth	r1, r1
 801d238:	ebac 0c00 	sub.w	ip, ip, r0
 801d23c:	4361      	muls	r1, r4
 801d23e:	fa1f fc8c 	uxth.w	ip, ip
 801d242:	fb02 120c 	mla	r2, r2, ip, r1
 801d246:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d248:	fb00 2001 	mla	r0, r0, r1, r2
 801d24c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d24e:	fb03 0302 	mla	r3, r3, r2, r0
 801d252:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d256:	2b00      	cmp	r3, #0
 801d258:	d039      	beq.n	801d2ce <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d25a:	4a21      	ldr	r2, [pc, #132]	; (801d2e0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801d25c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d260:	6810      	ldr	r0, [r2, #0]
 801d262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d264:	fa5f fc80 	uxtb.w	ip, r0
 801d268:	4353      	muls	r3, r2
 801d26a:	1c5a      	adds	r2, r3, #1
 801d26c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d270:	121b      	asrs	r3, r3, #8
 801d272:	b29a      	uxth	r2, r3
 801d274:	43db      	mvns	r3, r3
 801d276:	fb1c fc02 	smulbb	ip, ip, r2
 801d27a:	b2db      	uxtb	r3, r3
 801d27c:	fb01 c103 	mla	r1, r1, r3, ip
 801d280:	b289      	uxth	r1, r1
 801d282:	f101 0c01 	add.w	ip, r1, #1
 801d286:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d28a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d28e:	fb1c fc03 	smulbb	ip, ip, r3
 801d292:	1209      	asrs	r1, r1, #8
 801d294:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d298:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d29c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d2a0:	fb01 c102 	mla	r1, r1, r2, ip
 801d2a4:	b289      	uxth	r1, r1
 801d2a6:	f101 0c01 	add.w	ip, r1, #1
 801d2aa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d2ae:	1209      	asrs	r1, r1, #8
 801d2b0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d2b4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d2b8:	fb11 f303 	smulbb	r3, r1, r3
 801d2bc:	fb00 3002 	mla	r0, r0, r2, r3
 801d2c0:	b280      	uxth	r0, r0
 801d2c2:	1c42      	adds	r2, r0, #1
 801d2c4:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d2c8:	1200      	asrs	r0, r0, #8
 801d2ca:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d2ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d2d0:	f10e 0e03 	add.w	lr, lr, #3
 801d2d4:	f108 38ff 	add.w	r8, r8, #4294967295
 801d2d8:	441d      	add	r5, r3
 801d2da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d2dc:	441e      	add	r6, r3
 801d2de:	e6db      	b.n	801d098 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801d2e0:	2400f5a0 	.word	0x2400f5a0
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	d09a      	beq.n	801d21e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d2e8:	444b      	add	r3, r9
 801d2ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d2ee:	07db      	lsls	r3, r3, #31
 801d2f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d2f4:	bf54      	ite	pl
 801d2f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d2fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d2fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d302:	fa5f f38c 	uxtb.w	r3, ip
 801d306:	930b      	str	r3, [sp, #44]	; 0x2c
 801d308:	e789      	b.n	801d21e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d30a:	b017      	add	sp, #92	; 0x5c
 801d30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d310 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d314:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801d318:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d31c:	2d00      	cmp	r5, #0
 801d31e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d322:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801d326:	fb04 5e03 	mla	lr, r4, r3, r5
 801d32a:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801d32e:	f2c0 80b1 	blt.w	801d494 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d332:	45a9      	cmp	r9, r5
 801d334:	f340 80ae 	ble.w	801d494 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d338:	2c00      	cmp	r4, #0
 801d33a:	f2c0 80ab 	blt.w	801d494 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d33e:	45a0      	cmp	r8, r4
 801d340:	f340 80a8 	ble.w	801d494 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d344:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801d348:	f01e 0f01 	tst.w	lr, #1
 801d34c:	5d97      	ldrb	r7, [r2, r6]
 801d34e:	bf0c      	ite	eq
 801d350:	f007 070f 	andeq.w	r7, r7, #15
 801d354:	113f      	asrne	r7, r7, #4
 801d356:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801d35a:	b2ff      	uxtb	r7, r7
 801d35c:	f115 0a01 	adds.w	sl, r5, #1
 801d360:	f100 809a 	bmi.w	801d498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d364:	45d1      	cmp	r9, sl
 801d366:	f340 8097 	ble.w	801d498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d36a:	2c00      	cmp	r4, #0
 801d36c:	f2c0 8094 	blt.w	801d498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d370:	45a0      	cmp	r8, r4
 801d372:	f340 8091 	ble.w	801d498 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d376:	2800      	cmp	r0, #0
 801d378:	f000 8090 	beq.w	801d49c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801d37c:	f10e 0b01 	add.w	fp, lr, #1
 801d380:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801d384:	f01b 0f01 	tst.w	fp, #1
 801d388:	5d96      	ldrb	r6, [r2, r6]
 801d38a:	bf0c      	ite	eq
 801d38c:	f006 060f 	andeq.w	r6, r6, #15
 801d390:	1136      	asrne	r6, r6, #4
 801d392:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d396:	b2f6      	uxtb	r6, r6
 801d398:	f1bc 0f00 	cmp.w	ip, #0
 801d39c:	f000 8082 	beq.w	801d4a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801d3a0:	2d00      	cmp	r5, #0
 801d3a2:	f104 0401 	add.w	r4, r4, #1
 801d3a6:	db7b      	blt.n	801d4a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d3a8:	45a9      	cmp	r9, r5
 801d3aa:	dd79      	ble.n	801d4a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d3ac:	2c00      	cmp	r4, #0
 801d3ae:	db77      	blt.n	801d4a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d3b0:	45a0      	cmp	r8, r4
 801d3b2:	dd75      	ble.n	801d4a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d3b4:	eb03 0b0e 	add.w	fp, r3, lr
 801d3b8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801d3bc:	f01b 0f01 	tst.w	fp, #1
 801d3c0:	5d55      	ldrb	r5, [r2, r5]
 801d3c2:	bf0c      	ite	eq
 801d3c4:	f005 050f 	andeq.w	r5, r5, #15
 801d3c8:	112d      	asrne	r5, r5, #4
 801d3ca:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801d3ce:	b2ed      	uxtb	r5, r5
 801d3d0:	f1ba 0f00 	cmp.w	sl, #0
 801d3d4:	db69      	blt.n	801d4aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d3d6:	45d1      	cmp	r9, sl
 801d3d8:	dd67      	ble.n	801d4aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d3da:	2c00      	cmp	r4, #0
 801d3dc:	db65      	blt.n	801d4aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d3de:	45a0      	cmp	r8, r4
 801d3e0:	dd63      	ble.n	801d4aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d3e2:	2800      	cmp	r0, #0
 801d3e4:	d063      	beq.n	801d4ae <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801d3e6:	3301      	adds	r3, #1
 801d3e8:	449e      	add	lr, r3
 801d3ea:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d3ee:	f01e 0f01 	tst.w	lr, #1
 801d3f2:	5cd4      	ldrb	r4, [r2, r3]
 801d3f4:	bf0c      	ite	eq
 801d3f6:	f004 040f 	andeq.w	r4, r4, #15
 801d3fa:	1124      	asrne	r4, r4, #4
 801d3fc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d400:	b2e3      	uxtb	r3, r4
 801d402:	b282      	uxth	r2, r0
 801d404:	fa1f fc8c 	uxth.w	ip, ip
 801d408:	fb02 f40c 	mul.w	r4, r2, ip
 801d40c:	0112      	lsls	r2, r2, #4
 801d40e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801d412:	fa1f f08c 	uxth.w	r0, ip
 801d416:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d41a:	1b12      	subs	r2, r2, r4
 801d41c:	ebac 0c00 	sub.w	ip, ip, r0
 801d420:	b292      	uxth	r2, r2
 801d422:	fa1f fc8c 	uxth.w	ip, ip
 801d426:	4372      	muls	r2, r6
 801d428:	fb07 220c 	mla	r2, r7, ip, r2
 801d42c:	fb00 2005 	mla	r0, r0, r5, r2
 801d430:	fb04 0303 	mla	r3, r4, r3, r0
 801d434:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d438:	b353      	cbz	r3, 801d490 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801d43a:	4a1e      	ldr	r2, [pc, #120]	; (801d4b4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801d43c:	7808      	ldrb	r0, [r1, #0]
 801d43e:	6814      	ldr	r4, [r2, #0]
 801d440:	b29a      	uxth	r2, r3
 801d442:	43db      	mvns	r3, r3
 801d444:	b2e5      	uxtb	r5, r4
 801d446:	b2db      	uxtb	r3, r3
 801d448:	fb15 f502 	smulbb	r5, r5, r2
 801d44c:	fb00 5003 	mla	r0, r0, r3, r5
 801d450:	b280      	uxth	r0, r0
 801d452:	1c45      	adds	r5, r0, #1
 801d454:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d458:	784d      	ldrb	r5, [r1, #1]
 801d45a:	fb15 f503 	smulbb	r5, r5, r3
 801d45e:	1200      	asrs	r0, r0, #8
 801d460:	7008      	strb	r0, [r1, #0]
 801d462:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d466:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d46a:	fb00 5002 	mla	r0, r0, r2, r5
 801d46e:	b280      	uxth	r0, r0
 801d470:	1c45      	adds	r5, r0, #1
 801d472:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d476:	1200      	asrs	r0, r0, #8
 801d478:	7048      	strb	r0, [r1, #1]
 801d47a:	7888      	ldrb	r0, [r1, #2]
 801d47c:	fb10 f303 	smulbb	r3, r0, r3
 801d480:	fb04 3202 	mla	r2, r4, r2, r3
 801d484:	b292      	uxth	r2, r2
 801d486:	1c53      	adds	r3, r2, #1
 801d488:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d48c:	1212      	asrs	r2, r2, #8
 801d48e:	708a      	strb	r2, [r1, #2]
 801d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d494:	2700      	movs	r7, #0
 801d496:	e761      	b.n	801d35c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801d498:	2600      	movs	r6, #0
 801d49a:	e77d      	b.n	801d398 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d49c:	4606      	mov	r6, r0
 801d49e:	e77b      	b.n	801d398 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d4a0:	2500      	movs	r5, #0
 801d4a2:	e795      	b.n	801d3d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801d4a4:	4663      	mov	r3, ip
 801d4a6:	4665      	mov	r5, ip
 801d4a8:	e7ab      	b.n	801d402 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	e7a9      	b.n	801d402 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d4ae:	4603      	mov	r3, r0
 801d4b0:	e7a7      	b.n	801d402 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d4b2:	bf00      	nop
 801d4b4:	2400f5a0 	.word	0x2400f5a0

0801d4b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4bc:	b093      	sub	sp, #76	; 0x4c
 801d4be:	461c      	mov	r4, r3
 801d4c0:	920c      	str	r2, [sp, #48]	; 0x30
 801d4c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d4c4:	9011      	str	r0, [sp, #68]	; 0x44
 801d4c6:	9107      	str	r1, [sp, #28]
 801d4c8:	6850      	ldr	r0, [r2, #4]
 801d4ca:	6812      	ldr	r2, [r2, #0]
 801d4cc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801d4d0:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801d4d4:	fb00 1303 	mla	r3, r0, r3, r1
 801d4d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d4dc:	eb02 0b03 	add.w	fp, r2, r3
 801d4e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4e2:	689b      	ldr	r3, [r3, #8]
 801d4e4:	3301      	adds	r3, #1
 801d4e6:	f023 0301 	bic.w	r3, r3, #1
 801d4ea:	9309      	str	r3, [sp, #36]	; 0x24
 801d4ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4ee:	f8d3 8000 	ldr.w	r8, [r3]
 801d4f2:	9b07      	ldr	r3, [sp, #28]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	dc03      	bgt.n	801d500 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d4f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	f340 822b 	ble.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d500:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d502:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d506:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d50a:	1e48      	subs	r0, r1, #1
 801d50c:	1e57      	subs	r7, r2, #1
 801d50e:	2c00      	cmp	r4, #0
 801d510:	f340 80d7 	ble.w	801d6c2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d514:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d518:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d51c:	d406      	bmi.n	801d52c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d51e:	4584      	cmp	ip, r0
 801d520:	da04      	bge.n	801d52c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d522:	2b00      	cmp	r3, #0
 801d524:	db02      	blt.n	801d52c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d526:	42bb      	cmp	r3, r7
 801d528:	f2c0 80cc 	blt.w	801d6c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d52c:	f11c 0c01 	adds.w	ip, ip, #1
 801d530:	f100 80bf 	bmi.w	801d6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d534:	4561      	cmp	r1, ip
 801d536:	f2c0 80bc 	blt.w	801d6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d53a:	3301      	adds	r3, #1
 801d53c:	f100 80b9 	bmi.w	801d6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d540:	429a      	cmp	r2, r3
 801d542:	f2c0 80b6 	blt.w	801d6b2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d546:	46a2      	mov	sl, r4
 801d548:	465f      	mov	r7, fp
 801d54a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d54e:	f1ba 0f00 	cmp.w	sl, #0
 801d552:	f340 80d4 	ble.w	801d6fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801d556:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d55a:	1430      	asrs	r0, r6, #16
 801d55c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d560:	9308      	str	r3, [sp, #32]
 801d562:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d564:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d568:	142b      	asrs	r3, r5, #16
 801d56a:	f100 8124 	bmi.w	801d7b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d56e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d572:	4293      	cmp	r3, r2
 801d574:	f280 811f 	bge.w	801d7b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d578:	2800      	cmp	r0, #0
 801d57a:	f2c0 811c 	blt.w	801d7b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d57e:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d582:	4290      	cmp	r0, r2
 801d584:	f280 8117 	bge.w	801d7b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d588:	fb00 3309 	mla	r3, r0, r9, r3
 801d58c:	0858      	lsrs	r0, r3, #1
 801d58e:	07da      	lsls	r2, r3, #31
 801d590:	9a08      	ldr	r2, [sp, #32]
 801d592:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d596:	bf54      	ite	pl
 801d598:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d59c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d5a0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d5a4:	fa5f fc8c 	uxtb.w	ip, ip
 801d5a8:	2a00      	cmp	r2, #0
 801d5aa:	f000 80ed 	beq.w	801d788 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801d5ae:	1c58      	adds	r0, r3, #1
 801d5b0:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d5b4:	07c0      	lsls	r0, r0, #31
 801d5b6:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d5ba:	bf54      	ite	pl
 801d5bc:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d5c0:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d5c4:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d5c8:	fa5f fe8e 	uxtb.w	lr, lr
 801d5cc:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d5d0:	b1c9      	cbz	r1, 801d606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5d2:	444b      	add	r3, r9
 801d5d4:	0858      	lsrs	r0, r3, #1
 801d5d6:	07da      	lsls	r2, r3, #31
 801d5d8:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d5dc:	bf54      	ite	pl
 801d5de:	f000 000f 	andpl.w	r0, r0, #15
 801d5e2:	1100      	asrmi	r0, r0, #4
 801d5e4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d5e8:	b2c0      	uxtb	r0, r0
 801d5ea:	900a      	str	r0, [sp, #40]	; 0x28
 801d5ec:	1c58      	adds	r0, r3, #1
 801d5ee:	0843      	lsrs	r3, r0, #1
 801d5f0:	07c2      	lsls	r2, r0, #31
 801d5f2:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d5f6:	bf54      	ite	pl
 801d5f8:	f003 030f 	andpl.w	r3, r3, #15
 801d5fc:	111b      	asrmi	r3, r3, #4
 801d5fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d602:	b2db      	uxtb	r3, r3
 801d604:	930e      	str	r3, [sp, #56]	; 0x38
 801d606:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d60a:	b289      	uxth	r1, r1
 801d60c:	fb02 f301 	mul.w	r3, r2, r1
 801d610:	0112      	lsls	r2, r2, #4
 801d612:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d616:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d61a:	1ad2      	subs	r2, r2, r3
 801d61c:	b289      	uxth	r1, r1
 801d61e:	b292      	uxth	r2, r2
 801d620:	1a40      	subs	r0, r0, r1
 801d622:	fa1f fe80 	uxth.w	lr, r0
 801d626:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d628:	4342      	muls	r2, r0
 801d62a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d62e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d630:	fb01 c102 	mla	r1, r1, r2, ip
 801d634:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d636:	fb03 1302 	mla	r3, r3, r2, r1
 801d63a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d63e:	b383      	cbz	r3, 801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d640:	4ac6      	ldr	r2, [pc, #792]	; (801d95c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d642:	2bff      	cmp	r3, #255	; 0xff
 801d644:	6812      	ldr	r2, [r2, #0]
 801d646:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d64a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d64e:	b2d2      	uxtb	r2, r2
 801d650:	f000 80ac 	beq.w	801d7ac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d654:	b299      	uxth	r1, r3
 801d656:	43db      	mvns	r3, r3
 801d658:	f897 c000 	ldrb.w	ip, [r7]
 801d65c:	fb12 f201 	smulbb	r2, r2, r1
 801d660:	b2db      	uxtb	r3, r3
 801d662:	fb10 f001 	smulbb	r0, r0, r1
 801d666:	fb0c 2203 	mla	r2, ip, r3, r2
 801d66a:	fb1e f101 	smulbb	r1, lr, r1
 801d66e:	b292      	uxth	r2, r2
 801d670:	f102 0c01 	add.w	ip, r2, #1
 801d674:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d678:	1212      	asrs	r2, r2, #8
 801d67a:	703a      	strb	r2, [r7, #0]
 801d67c:	787a      	ldrb	r2, [r7, #1]
 801d67e:	fb02 0003 	mla	r0, r2, r3, r0
 801d682:	b280      	uxth	r0, r0
 801d684:	1c42      	adds	r2, r0, #1
 801d686:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d68a:	78ba      	ldrb	r2, [r7, #2]
 801d68c:	fb02 1303 	mla	r3, r2, r3, r1
 801d690:	1200      	asrs	r0, r0, #8
 801d692:	b29b      	uxth	r3, r3
 801d694:	7078      	strb	r0, [r7, #1]
 801d696:	f103 0e01 	add.w	lr, r3, #1
 801d69a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d69e:	121b      	asrs	r3, r3, #8
 801d6a0:	70bb      	strb	r3, [r7, #2]
 801d6a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d6a4:	3703      	adds	r7, #3
 801d6a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d6aa:	441d      	add	r5, r3
 801d6ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d6ae:	441e      	add	r6, r3
 801d6b0:	e74d      	b.n	801d54e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d6b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d6b4:	3c01      	subs	r4, #1
 801d6b6:	f10b 0b03 	add.w	fp, fp, #3
 801d6ba:	441d      	add	r5, r3
 801d6bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d6be:	441e      	add	r6, r3
 801d6c0:	e725      	b.n	801d50e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d6c2:	d021      	beq.n	801d708 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d6c4:	1e63      	subs	r3, r4, #1
 801d6c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d6c8:	fb00 5003 	mla	r0, r0, r3, r5
 801d6cc:	1400      	asrs	r0, r0, #16
 801d6ce:	f53f af3a 	bmi.w	801d546 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6d2:	3901      	subs	r1, #1
 801d6d4:	4288      	cmp	r0, r1
 801d6d6:	f6bf af36 	bge.w	801d546 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6da:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d6dc:	fb01 6303 	mla	r3, r1, r3, r6
 801d6e0:	141b      	asrs	r3, r3, #16
 801d6e2:	f53f af30 	bmi.w	801d546 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6e6:	3a01      	subs	r2, #1
 801d6e8:	4293      	cmp	r3, r2
 801d6ea:	f6bf af2c 	bge.w	801d546 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d6ee:	f10b 0c03 	add.w	ip, fp, #3
 801d6f2:	46a6      	mov	lr, r4
 801d6f4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d6f8:	f1be 0f00 	cmp.w	lr, #0
 801d6fc:	dc79      	bgt.n	801d7f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801d6fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d702:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d706:	44a3      	add	fp, r4
 801d708:	9b07      	ldr	r3, [sp, #28]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	f340 8123 	ble.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d714:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d716:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d71a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d71e:	eef0 6a62 	vmov.f32	s13, s5
 801d722:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d726:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d72a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d72e:	ee16 5a90 	vmov	r5, s13
 801d732:	eef0 6a43 	vmov.f32	s13, s6
 801d736:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d73a:	ee16 6a90 	vmov	r6, s13
 801d73e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d742:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d746:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d74a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d74e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d752:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d756:	ee12 2a90 	vmov	r2, s5
 801d75a:	eef0 2a47 	vmov.f32	s5, s14
 801d75e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d762:	ee13 2a10 	vmov	r2, s6
 801d766:	931f      	str	r3, [sp, #124]	; 0x7c
 801d768:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d76a:	eeb0 3a67 	vmov.f32	s6, s15
 801d76e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d772:	9320      	str	r3, [sp, #128]	; 0x80
 801d774:	9b07      	ldr	r3, [sp, #28]
 801d776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d778:	3b01      	subs	r3, #1
 801d77a:	9307      	str	r3, [sp, #28]
 801d77c:	bf08      	it	eq
 801d77e:	4614      	moveq	r4, r2
 801d780:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d782:	bf18      	it	ne
 801d784:	461c      	movne	r4, r3
 801d786:	e6b4      	b.n	801d4f2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d788:	2900      	cmp	r1, #0
 801d78a:	f43f af3c 	beq.w	801d606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d78e:	eb09 0003 	add.w	r0, r9, r3
 801d792:	0843      	lsrs	r3, r0, #1
 801d794:	07c0      	lsls	r0, r0, #31
 801d796:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d79a:	bf54      	ite	pl
 801d79c:	f003 030f 	andpl.w	r3, r3, #15
 801d7a0:	111b      	asrmi	r3, r3, #4
 801d7a2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d7a6:	b2db      	uxtb	r3, r3
 801d7a8:	930a      	str	r3, [sp, #40]	; 0x28
 801d7aa:	e72c      	b.n	801d606 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d7ac:	703a      	strb	r2, [r7, #0]
 801d7ae:	7078      	strb	r0, [r7, #1]
 801d7b0:	f887 e002 	strb.w	lr, [r7, #2]
 801d7b4:	e775      	b.n	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7b6:	1c5a      	adds	r2, r3, #1
 801d7b8:	f53f af73 	bmi.w	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7bc:	4594      	cmp	ip, r2
 801d7be:	f6ff af70 	blt.w	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7c2:	1c42      	adds	r2, r0, #1
 801d7c4:	f53f af6d 	bmi.w	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7c8:	4596      	cmp	lr, r2
 801d7ca:	f6ff af6a 	blt.w	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7ce:	9302      	str	r3, [sp, #8]
 801d7d0:	fa0f f38e 	sxth.w	r3, lr
 801d7d4:	9a08      	ldr	r2, [sp, #32]
 801d7d6:	9301      	str	r3, [sp, #4]
 801d7d8:	fa0f f38c 	sxth.w	r3, ip
 801d7dc:	9105      	str	r1, [sp, #20]
 801d7de:	4639      	mov	r1, r7
 801d7e0:	9300      	str	r3, [sp, #0]
 801d7e2:	464b      	mov	r3, r9
 801d7e4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d7e8:	4642      	mov	r2, r8
 801d7ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d7ec:	f7ff fd90 	bl	801d310 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d7f0:	e757      	b.n	801d6a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d7f2:	142a      	asrs	r2, r5, #16
 801d7f4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d7f8:	1433      	asrs	r3, r6, #16
 801d7fa:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801d7fe:	fb09 2303 	mla	r3, r9, r3, r2
 801d802:	085a      	lsrs	r2, r3, #1
 801d804:	07d9      	lsls	r1, r3, #31
 801d806:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d80a:	bf54      	ite	pl
 801d80c:	f002 020f 	andpl.w	r2, r2, #15
 801d810:	1112      	asrmi	r2, r2, #4
 801d812:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d816:	b2d2      	uxtb	r2, r2
 801d818:	2800      	cmp	r0, #0
 801d81a:	f000 8085 	beq.w	801d928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801d81e:	f103 0a01 	add.w	sl, r3, #1
 801d822:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801d826:	f01a 0f01 	tst.w	sl, #1
 801d82a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d82e:	bf0c      	ite	eq
 801d830:	f001 010f 	andeq.w	r1, r1, #15
 801d834:	1109      	asrne	r1, r1, #4
 801d836:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d83a:	b2c9      	uxtb	r1, r1
 801d83c:	910f      	str	r1, [sp, #60]	; 0x3c
 801d83e:	b1df      	cbz	r7, 801d878 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d840:	444b      	add	r3, r9
 801d842:	0859      	lsrs	r1, r3, #1
 801d844:	f013 0f01 	tst.w	r3, #1
 801d848:	f103 0301 	add.w	r3, r3, #1
 801d84c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d850:	bf0c      	ite	eq
 801d852:	f001 010f 	andeq.w	r1, r1, #15
 801d856:	1109      	asrne	r1, r1, #4
 801d858:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d85c:	b2c9      	uxtb	r1, r1
 801d85e:	910b      	str	r1, [sp, #44]	; 0x2c
 801d860:	0859      	lsrs	r1, r3, #1
 801d862:	07db      	lsls	r3, r3, #31
 801d864:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d868:	bf54      	ite	pl
 801d86a:	f001 010f 	andpl.w	r1, r1, #15
 801d86e:	1109      	asrmi	r1, r1, #4
 801d870:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d874:	b2c9      	uxtb	r1, r1
 801d876:	9110      	str	r1, [sp, #64]	; 0x40
 801d878:	b280      	uxth	r0, r0
 801d87a:	b2bf      	uxth	r7, r7
 801d87c:	fb00 f307 	mul.w	r3, r0, r7
 801d880:	0100      	lsls	r0, r0, #4
 801d882:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801d886:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d88a:	1ac0      	subs	r0, r0, r3
 801d88c:	b2bf      	uxth	r7, r7
 801d88e:	b280      	uxth	r0, r0
 801d890:	1bc9      	subs	r1, r1, r7
 801d892:	fa1f fa81 	uxth.w	sl, r1
 801d896:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d898:	4348      	muls	r0, r1
 801d89a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d89c:	fb02 020a 	mla	r2, r2, sl, r0
 801d8a0:	fb07 2701 	mla	r7, r7, r1, r2
 801d8a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d8a6:	fb03 7302 	mla	r3, r3, r2, r7
 801d8aa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d8ae:	b393      	cbz	r3, 801d916 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d8b0:	4a2a      	ldr	r2, [pc, #168]	; (801d95c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d8b2:	2bff      	cmp	r3, #255	; 0xff
 801d8b4:	6811      	ldr	r1, [r2, #0]
 801d8b6:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801d8ba:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801d8be:	b2c9      	uxtb	r1, r1
 801d8c0:	d042      	beq.n	801d948 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d8c2:	b298      	uxth	r0, r3
 801d8c4:	43db      	mvns	r3, r3
 801d8c6:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801d8ca:	fb11 f100 	smulbb	r1, r1, r0
 801d8ce:	b2db      	uxtb	r3, r3
 801d8d0:	fb17 f700 	smulbb	r7, r7, r0
 801d8d4:	fb02 1103 	mla	r1, r2, r3, r1
 801d8d8:	fb1a f000 	smulbb	r0, sl, r0
 801d8dc:	b289      	uxth	r1, r1
 801d8de:	1c4a      	adds	r2, r1, #1
 801d8e0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d8e4:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801d8e8:	fb02 7703 	mla	r7, r2, r3, r7
 801d8ec:	1209      	asrs	r1, r1, #8
 801d8ee:	b2bf      	uxth	r7, r7
 801d8f0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d8f4:	1c7a      	adds	r2, r7, #1
 801d8f6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d8fa:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801d8fe:	fb02 0303 	mla	r3, r2, r3, r0
 801d902:	123f      	asrs	r7, r7, #8
 801d904:	b29b      	uxth	r3, r3
 801d906:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d90a:	1c5a      	adds	r2, r3, #1
 801d90c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d910:	121b      	asrs	r3, r3, #8
 801d912:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801d916:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d918:	f10c 0c03 	add.w	ip, ip, #3
 801d91c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d920:	441d      	add	r5, r3
 801d922:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d924:	441e      	add	r6, r3
 801d926:	e6e7      	b.n	801d6f8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d928:	2f00      	cmp	r7, #0
 801d92a:	d0a5      	beq.n	801d878 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d92c:	444b      	add	r3, r9
 801d92e:	0859      	lsrs	r1, r3, #1
 801d930:	07db      	lsls	r3, r3, #31
 801d932:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d936:	bf54      	ite	pl
 801d938:	f001 010f 	andpl.w	r1, r1, #15
 801d93c:	1109      	asrmi	r1, r1, #4
 801d93e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d942:	b2c9      	uxtb	r1, r1
 801d944:	910b      	str	r1, [sp, #44]	; 0x2c
 801d946:	e797      	b.n	801d878 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d948:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d94c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d950:	f80c ac01 	strb.w	sl, [ip, #-1]
 801d954:	e7df      	b.n	801d916 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d956:	b013      	add	sp, #76	; 0x4c
 801d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d95c:	2400f5a0 	.word	0x2400f5a0

0801d960 <CRC_Lock>:
 801d960:	4a20      	ldr	r2, [pc, #128]	; (801d9e4 <CRC_Lock+0x84>)
 801d962:	b530      	push	{r4, r5, lr}
 801d964:	6813      	ldr	r3, [r2, #0]
 801d966:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d96a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d96e:	f023 0301 	bic.w	r3, r3, #1
 801d972:	6013      	str	r3, [r2, #0]
 801d974:	4b1c      	ldr	r3, [pc, #112]	; (801d9e8 <CRC_Lock+0x88>)
 801d976:	681a      	ldr	r2, [r3, #0]
 801d978:	4022      	ands	r2, r4
 801d97a:	42aa      	cmp	r2, r5
 801d97c:	d005      	beq.n	801d98a <CRC_Lock+0x2a>
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d984:	4023      	ands	r3, r4
 801d986:	4293      	cmp	r3, r2
 801d988:	d124      	bne.n	801d9d4 <CRC_Lock+0x74>
 801d98a:	4b18      	ldr	r3, [pc, #96]	; (801d9ec <CRC_Lock+0x8c>)
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	bb0b      	cbnz	r3, 801d9d4 <CRC_Lock+0x74>
 801d990:	4b17      	ldr	r3, [pc, #92]	; (801d9f0 <CRC_Lock+0x90>)
 801d992:	681a      	ldr	r2, [r3, #0]
 801d994:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d998:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d99c:	d00d      	beq.n	801d9ba <CRC_Lock+0x5a>
 801d99e:	681a      	ldr	r2, [r3, #0]
 801d9a0:	f240 4483 	movw	r4, #1155	; 0x483
 801d9a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d9a8:	42a2      	cmp	r2, r4
 801d9aa:	d006      	beq.n	801d9ba <CRC_Lock+0x5a>
 801d9ac:	681b      	ldr	r3, [r3, #0]
 801d9ae:	f240 4285 	movw	r2, #1157	; 0x485
 801d9b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d9b6:	4293      	cmp	r3, r2
 801d9b8:	d10c      	bne.n	801d9d4 <CRC_Lock+0x74>
 801d9ba:	4b0e      	ldr	r3, [pc, #56]	; (801d9f4 <CRC_Lock+0x94>)
 801d9bc:	2201      	movs	r2, #1
 801d9be:	601a      	str	r2, [r3, #0]
 801d9c0:	681a      	ldr	r2, [r3, #0]
 801d9c2:	2a00      	cmp	r2, #0
 801d9c4:	d1fc      	bne.n	801d9c0 <CRC_Lock+0x60>
 801d9c6:	4b0c      	ldr	r3, [pc, #48]	; (801d9f8 <CRC_Lock+0x98>)
 801d9c8:	6018      	str	r0, [r3, #0]
 801d9ca:	6818      	ldr	r0, [r3, #0]
 801d9cc:	1a43      	subs	r3, r0, r1
 801d9ce:	4258      	negs	r0, r3
 801d9d0:	4158      	adcs	r0, r3
 801d9d2:	bd30      	pop	{r4, r5, pc}
 801d9d4:	4b09      	ldr	r3, [pc, #36]	; (801d9fc <CRC_Lock+0x9c>)
 801d9d6:	2201      	movs	r2, #1
 801d9d8:	601a      	str	r2, [r3, #0]
 801d9da:	681a      	ldr	r2, [r3, #0]
 801d9dc:	2a00      	cmp	r2, #0
 801d9de:	d1fc      	bne.n	801d9da <CRC_Lock+0x7a>
 801d9e0:	4b07      	ldr	r3, [pc, #28]	; (801da00 <CRC_Lock+0xa0>)
 801d9e2:	e7f1      	b.n	801d9c8 <CRC_Lock+0x68>
 801d9e4:	e0002000 	.word	0xe0002000
 801d9e8:	e000ed00 	.word	0xe000ed00
 801d9ec:	e0042000 	.word	0xe0042000
 801d9f0:	5c001000 	.word	0x5c001000
 801d9f4:	58024c08 	.word	0x58024c08
 801d9f8:	58024c00 	.word	0x58024c00
 801d9fc:	40023008 	.word	0x40023008
 801da00:	40023000 	.word	0x40023000

0801da04 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801da04:	6101      	str	r1, [r0, #16]
 801da06:	4770      	bx	lr

0801da08 <_ZN8touchgfx8Gestures4tickEv>:
 801da08:	7b83      	ldrb	r3, [r0, #14]
 801da0a:	b14b      	cbz	r3, 801da20 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801da0c:	8903      	ldrh	r3, [r0, #8]
 801da0e:	3301      	adds	r3, #1
 801da10:	b29b      	uxth	r3, r3
 801da12:	2b07      	cmp	r3, #7
 801da14:	8103      	strh	r3, [r0, #8]
 801da16:	bf81      	itttt	hi
 801da18:	2300      	movhi	r3, #0
 801da1a:	8143      	strhhi	r3, [r0, #10]
 801da1c:	8183      	strhhi	r3, [r0, #12]
 801da1e:	7383      	strbhi	r3, [r0, #14]
 801da20:	4770      	bx	lr
	...

0801da24 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801da24:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801da28:	4698      	mov	r8, r3
 801da2a:	8883      	ldrh	r3, [r0, #4]
 801da2c:	4604      	mov	r4, r0
 801da2e:	4617      	mov	r7, r2
 801da30:	f8ad 3006 	strh.w	r3, [sp, #6]
 801da34:	eba8 0303 	sub.w	r3, r8, r3
 801da38:	4a19      	ldr	r2, [pc, #100]	; (801daa0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801da3a:	460e      	mov	r6, r1
 801da3c:	b21b      	sxth	r3, r3
 801da3e:	88c1      	ldrh	r1, [r0, #6]
 801da40:	9200      	str	r2, [sp, #0]
 801da42:	2000      	movs	r0, #0
 801da44:	2b00      	cmp	r3, #0
 801da46:	8aa2      	ldrh	r2, [r4, #20]
 801da48:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801da4c:	bfb8      	it	lt
 801da4e:	425b      	neglt	r3, r3
 801da50:	f88d 0004 	strb.w	r0, [sp, #4]
 801da54:	f8ad 1008 	strh.w	r1, [sp, #8]
 801da58:	b21b      	sxth	r3, r3
 801da5a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801da5e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801da62:	4293      	cmp	r3, r2
 801da64:	dc07      	bgt.n	801da76 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801da66:	1a69      	subs	r1, r5, r1
 801da68:	b209      	sxth	r1, r1
 801da6a:	2900      	cmp	r1, #0
 801da6c:	bfb8      	it	lt
 801da6e:	4249      	neglt	r1, r1
 801da70:	b209      	sxth	r1, r1
 801da72:	428a      	cmp	r2, r1
 801da74:	da10      	bge.n	801da98 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801da76:	6920      	ldr	r0, [r4, #16]
 801da78:	4669      	mov	r1, sp
 801da7a:	eba8 0606 	sub.w	r6, r8, r6
 801da7e:	1bef      	subs	r7, r5, r7
 801da80:	6803      	ldr	r3, [r0, #0]
 801da82:	685b      	ldr	r3, [r3, #4]
 801da84:	4798      	blx	r3
 801da86:	2300      	movs	r3, #0
 801da88:	2001      	movs	r0, #1
 801da8a:	8166      	strh	r6, [r4, #10]
 801da8c:	8123      	strh	r3, [r4, #8]
 801da8e:	81a7      	strh	r7, [r4, #12]
 801da90:	f8a4 8004 	strh.w	r8, [r4, #4]
 801da94:	80e5      	strh	r5, [r4, #6]
 801da96:	73a0      	strb	r0, [r4, #14]
 801da98:	b004      	add	sp, #16
 801da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da9e:	bf00      	nop
 801daa0:	08023234 	.word	0x08023234

0801daa4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801daa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801daa6:	461e      	mov	r6, r3
 801daa8:	1e4b      	subs	r3, r1, #1
 801daaa:	b085      	sub	sp, #20
 801daac:	4604      	mov	r4, r0
 801daae:	2b01      	cmp	r3, #1
 801dab0:	460d      	mov	r5, r1
 801dab2:	4617      	mov	r7, r2
 801dab4:	d84b      	bhi.n	801db4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801dab6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801daba:	1cd3      	adds	r3, r2, #3
 801dabc:	b29b      	uxth	r3, r3
 801dabe:	2b06      	cmp	r3, #6
 801dac0:	d916      	bls.n	801daf0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801dac2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801db64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801dac6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801daca:	f8cd c004 	str.w	ip, [sp, #4]
 801dace:	f04f 0c00 	mov.w	ip, #0
 801dad2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dad6:	6900      	ldr	r0, [r0, #16]
 801dad8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801dadc:	a901      	add	r1, sp, #4
 801dade:	f88d c008 	strb.w	ip, [sp, #8]
 801dae2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dae6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801daea:	6803      	ldr	r3, [r0, #0]
 801daec:	689b      	ldr	r3, [r3, #8]
 801daee:	4798      	blx	r3
 801daf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801daf4:	1cd3      	adds	r3, r2, #3
 801daf6:	b29b      	uxth	r3, r3
 801daf8:	2b06      	cmp	r3, #6
 801dafa:	d916      	bls.n	801db2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dafc:	f8df c064 	ldr.w	ip, [pc, #100]	; 801db64 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801db00:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801db04:	f8cd c004 	str.w	ip, [sp, #4]
 801db08:	f04f 0c01 	mov.w	ip, #1
 801db0c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801db10:	6920      	ldr	r0, [r4, #16]
 801db12:	f8ad 100c 	strh.w	r1, [sp, #12]
 801db16:	a901      	add	r1, sp, #4
 801db18:	f88d c008 	strb.w	ip, [sp, #8]
 801db1c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801db20:	f8ad 300e 	strh.w	r3, [sp, #14]
 801db24:	6803      	ldr	r3, [r0, #0]
 801db26:	689b      	ldr	r3, [r3, #8]
 801db28:	4798      	blx	r3
 801db2a:	4b0d      	ldr	r3, [pc, #52]	; (801db60 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801db2c:	a901      	add	r1, sp, #4
 801db2e:	6920      	ldr	r0, [r4, #16]
 801db30:	9301      	str	r3, [sp, #4]
 801db32:	2300      	movs	r3, #0
 801db34:	f88d 5008 	strb.w	r5, [sp, #8]
 801db38:	f8ad 700a 	strh.w	r7, [sp, #10]
 801db3c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801db40:	f8ad 300e 	strh.w	r3, [sp, #14]
 801db44:	6803      	ldr	r3, [r0, #0]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	4798      	blx	r3
 801db4a:	b005      	add	sp, #20
 801db4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db4e:	2900      	cmp	r1, #0
 801db50:	d1eb      	bne.n	801db2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801db52:	80a2      	strh	r2, [r4, #4]
 801db54:	80c6      	strh	r6, [r0, #6]
 801db56:	60a1      	str	r1, [r4, #8]
 801db58:	81a1      	strh	r1, [r4, #12]
 801db5a:	73a1      	strb	r1, [r4, #14]
 801db5c:	e7e5      	b.n	801db2a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801db5e:	bf00      	nop
 801db60:	08023220 	.word	0x08023220
 801db64:	08023248 	.word	0x08023248

0801db68 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 801db68:	10c9      	asrs	r1, r1, #3
 801db6a:	2900      	cmp	r1, #0
 801db6c:	bfb8      	it	lt
 801db6e:	4249      	neglt	r1, r1
 801db70:	2801      	cmp	r0, #1
 801db72:	d108      	bne.n	801db86 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801db74:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801db78:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801db7c:	4601      	mov	r1, r0
 801db7e:	dd02      	ble.n	801db86 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 801db80:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801db84:	4770      	bx	lr
 801db86:	29ff      	cmp	r1, #255	; 0xff
 801db88:	bfa8      	it	ge
 801db8a:	21ff      	movge	r1, #255	; 0xff
 801db8c:	4608      	mov	r0, r1
 801db8e:	4770      	bx	lr

0801db90 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801db90:	b410      	push	{r4}
 801db92:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801db96:	429c      	cmp	r4, r3
 801db98:	d803      	bhi.n	801dba2 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801db9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db9e:	f7f2 bf53 	b.w	8010a48 <_ZN8touchgfx7Outline6lineToEii>
 801dba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dba6:	4770      	bx	lr

0801dba8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbac:	b08b      	sub	sp, #44	; 0x2c
 801dbae:	4606      	mov	r6, r0
 801dbb0:	468a      	mov	sl, r1
 801dbb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801dbb6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801dbba:	9308      	str	r3, [sp, #32]
 801dbbc:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801dbc0:	9309      	str	r3, [sp, #36]	; 0x24
 801dbc2:	f7f3 f8ac 	bl	8010d1e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801dbc6:	68b5      	ldr	r5, [r6, #8]
 801dbc8:	4604      	mov	r4, r0
 801dbca:	2d00      	cmp	r5, #0
 801dbcc:	d044      	beq.n	801dc58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801dbce:	6873      	ldr	r3, [r6, #4]
 801dbd0:	42ab      	cmp	r3, r5
 801dbd2:	d33d      	bcc.n	801dc50 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801dbd4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801dbd8:	f04f 0800 	mov.w	r8, #0
 801dbdc:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 801dbe0:	eb02 0b03 	add.w	fp, r2, r3
 801dbe4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801dbe8:	fb02 1203 	mla	r2, r2, r3, r1
 801dbec:	9205      	str	r2, [sp, #20]
 801dbee:	1e6a      	subs	r2, r5, #1
 801dbf0:	9204      	str	r2, [sp, #16]
 801dbf2:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801dbf6:	f9b4 7000 	ldrsh.w	r7, [r4]
 801dbfa:	454b      	cmp	r3, r9
 801dbfc:	463a      	mov	r2, r7
 801dbfe:	d008      	beq.n	801dc12 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801dc00:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 801dc04:	eb03 0b09 	add.w	fp, r3, r9
 801dc08:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801dc0c:	fb03 1309 	mla	r3, r3, r9, r1
 801dc10:	9305      	str	r3, [sp, #20]
 801dc12:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801dc16:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801dc1a:	4498      	add	r8, r3
 801dc1c:	9b04      	ldr	r3, [sp, #16]
 801dc1e:	3b01      	subs	r3, #1
 801dc20:	9304      	str	r3, [sp, #16]
 801dc22:	9b04      	ldr	r3, [sp, #16]
 801dc24:	3301      	adds	r3, #1
 801dc26:	d015      	beq.n	801dc54 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801dc28:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801dc2c:	42bb      	cmp	r3, r7
 801dc2e:	d117      	bne.n	801dc60 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801dc30:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801dc34:	9b04      	ldr	r3, [sp, #16]
 801dc36:	4548      	cmp	r0, r9
 801dc38:	f103 33ff 	add.w	r3, r3, #4294967295
 801dc3c:	d17d      	bne.n	801dd3a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801dc3e:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801dc42:	4401      	add	r1, r0
 801dc44:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801dc48:	4480      	add	r8, r0
 801dc4a:	e7e9      	b.n	801dc20 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801dc4c:	461f      	mov	r7, r3
 801dc4e:	e042      	b.n	801dcd6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801dc50:	2000      	movs	r0, #0
 801dc52:	e002      	b.n	801dc5a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801dc54:	2900      	cmp	r1, #0
 801dc56:	d16d      	bne.n	801dd34 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801dc58:	2001      	movs	r0, #1
 801dc5a:	b00b      	add	sp, #44	; 0x2c
 801dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc60:	b379      	cbz	r1, 801dcc2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801dc62:	2f00      	cmp	r7, #0
 801dc64:	db29      	blt.n	801dcba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801dc66:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801dc6a:	42bb      	cmp	r3, r7
 801dc6c:	dd25      	ble.n	801dcba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801dc6e:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801dc72:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801dc76:	f7ff ff77 	bl	801db68 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801dc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc7c:	fb10 f003 	smulbb	r0, r0, r3
 801dc80:	b280      	uxth	r0, r0
 801dc82:	1c41      	adds	r1, r0, #1
 801dc84:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801dc88:	1209      	asrs	r1, r1, #8
 801dc8a:	f011 0fff 	tst.w	r1, #255	; 0xff
 801dc8e:	d014      	beq.n	801dcba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801dc90:	b2c9      	uxtb	r1, r1
 801dc92:	9808      	ldr	r0, [sp, #32]
 801dc94:	b2ba      	uxth	r2, r7
 801dc96:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801dc98:	9102      	str	r1, [sp, #8]
 801dc9a:	2101      	movs	r1, #1
 801dc9c:	4413      	add	r3, r2
 801dc9e:	4402      	add	r2, r0
 801dca0:	9101      	str	r1, [sp, #4]
 801dca2:	fa0f f18b 	sxth.w	r1, fp
 801dca6:	f8da 0000 	ldr.w	r0, [sl]
 801dcaa:	b21b      	sxth	r3, r3
 801dcac:	9100      	str	r1, [sp, #0]
 801dcae:	b212      	sxth	r2, r2
 801dcb0:	6941      	ldr	r1, [r0, #20]
 801dcb2:	4650      	mov	r0, sl
 801dcb4:	460d      	mov	r5, r1
 801dcb6:	9905      	ldr	r1, [sp, #20]
 801dcb8:	47a8      	blx	r5
 801dcba:	9b04      	ldr	r3, [sp, #16]
 801dcbc:	1c7a      	adds	r2, r7, #1
 801dcbe:	3301      	adds	r3, #1
 801dcc0:	d0ca      	beq.n	801dc58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801dcc2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801dcc6:	1abb      	subs	r3, r7, r2
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	dd31      	ble.n	801dd30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dccc:	2a00      	cmp	r2, #0
 801dcce:	dabd      	bge.n	801dc4c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801dcd0:	2f00      	cmp	r7, #0
 801dcd2:	dd2d      	ble.n	801dd30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 801dcda:	19d1      	adds	r1, r2, r7
 801dcdc:	4299      	cmp	r1, r3
 801dcde:	db02      	blt.n	801dce6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801dce0:	1a9f      	subs	r7, r3, r2
 801dce2:	2f00      	cmp	r7, #0
 801dce4:	dd24      	ble.n	801dd30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dce6:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801dcea:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 801dcee:	f7ff ff3b 	bl	801db68 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 801dcf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcf4:	fb10 f003 	smulbb	r0, r0, r3
 801dcf8:	b280      	uxth	r0, r0
 801dcfa:	1c41      	adds	r1, r0, #1
 801dcfc:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801dd00:	1209      	asrs	r1, r1, #8
 801dd02:	f011 0fff 	tst.w	r1, #255	; 0xff
 801dd06:	d013      	beq.n	801dd30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dd08:	b292      	uxth	r2, r2
 801dd0a:	9808      	ldr	r0, [sp, #32]
 801dd0c:	b2c9      	uxtb	r1, r1
 801dd0e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 801dd10:	b23f      	sxth	r7, r7
 801dd12:	4413      	add	r3, r2
 801dd14:	9102      	str	r1, [sp, #8]
 801dd16:	4402      	add	r2, r0
 801dd18:	fa0f f18b 	sxth.w	r1, fp
 801dd1c:	f8da 0000 	ldr.w	r0, [sl]
 801dd20:	b21b      	sxth	r3, r3
 801dd22:	9100      	str	r1, [sp, #0]
 801dd24:	b212      	sxth	r2, r2
 801dd26:	9701      	str	r7, [sp, #4]
 801dd28:	9905      	ldr	r1, [sp, #20]
 801dd2a:	6947      	ldr	r7, [r0, #20]
 801dd2c:	4650      	mov	r0, sl
 801dd2e:	47b8      	blx	r7
 801dd30:	464b      	mov	r3, r9
 801dd32:	e75e      	b.n	801dbf2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801dd34:	2f00      	cmp	r7, #0
 801dd36:	da96      	bge.n	801dc66 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801dd38:	e78e      	b.n	801dc58 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801dd3a:	2900      	cmp	r1, #0
 801dd3c:	d0f8      	beq.n	801dd30 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801dd3e:	e790      	b.n	801dc62 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801dd40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801dd40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801dd44:	4b4a      	ldr	r3, [pc, #296]	; (801de70 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 801dd46:	2500      	movs	r5, #0
 801dd48:	f100 0620 	add.w	r6, r0, #32
 801dd4c:	4604      	mov	r4, r0
 801dd4e:	4690      	mov	r8, r2
 801dd50:	f100 0718 	add.w	r7, r0, #24
 801dd54:	e9c0 3100 	strd	r3, r1, [r0]
 801dd58:	e9c0 5502 	strd	r5, r5, [r0, #8]
 801dd5c:	e9c0 5504 	strd	r5, r5, [r0, #16]
 801dd60:	e9c0 5506 	strd	r5, r5, [r0, #24]
 801dd64:	4630      	mov	r0, r6
 801dd66:	f7f2 f9b5 	bl	80100d4 <_ZN8touchgfx7OutlineC1Ev>
 801dd6a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 801dd6e:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 801dd72:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 801dd76:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 801dd7a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 801dd7e:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 801dd82:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 801dd86:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801dd8a:	9500      	str	r5, [sp, #0]
 801dd8c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 801dd90:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 801dd94:	f9b8 2000 	ldrsh.w	r2, [r8]
 801dd98:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801dd9c:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801dda0:	4410      	add	r0, r2
 801dda2:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801dda6:	b280      	uxth	r0, r0
 801dda8:	fa0f fa80 	sxth.w	sl, r0
 801ddac:	45aa      	cmp	sl, r5
 801ddae:	dd5c      	ble.n	801de6a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801ddb0:	4591      	cmp	r9, r2
 801ddb2:	dd5a      	ble.n	801de6a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801ddb4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801ddb8:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801ddbc:	440b      	add	r3, r1
 801ddbe:	b29b      	uxth	r3, r3
 801ddc0:	b21d      	sxth	r5, r3
 801ddc2:	2d00      	cmp	r5, #0
 801ddc4:	dd51      	ble.n	801de6a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801ddc6:	458e      	cmp	lr, r1
 801ddc8:	dd4f      	ble.n	801de6a <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 801ddca:	45d1      	cmp	r9, sl
 801ddcc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801ddd0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801ddd4:	bfb8      	it	lt
 801ddd6:	fa1f f089 	uxthlt.w	r0, r9
 801ddda:	45ae      	cmp	lr, r5
 801dddc:	f8ad 2000 	strh.w	r2, [sp]
 801dde0:	bfb8      	it	lt
 801dde2:	fa1f f38e 	uxthlt.w	r3, lr
 801dde6:	1a80      	subs	r0, r0, r2
 801dde8:	f8ad 1002 	strh.w	r1, [sp, #2]
 801ddec:	1a5b      	subs	r3, r3, r1
 801ddee:	f8ad 0004 	strh.w	r0, [sp, #4]
 801ddf2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ddf6:	466d      	mov	r5, sp
 801ddf8:	e895 0003 	ldmia.w	r5, {r0, r1}
 801ddfc:	e887 0003 	stmia.w	r7, {r0, r1}
 801de00:	f8dc 3000 	ldr.w	r3, [ip]
 801de04:	4660      	mov	r0, ip
 801de06:	4639      	mov	r1, r7
 801de08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de0a:	4798      	blx	r3
 801de0c:	6861      	ldr	r1, [r4, #4]
 801de0e:	4628      	mov	r0, r5
 801de10:	3104      	adds	r1, #4
 801de12:	f7f4 fb2f 	bl	8012474 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801de16:	4638      	mov	r0, r7
 801de18:	f7f4 fb04 	bl	8012424 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801de1c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801de20:	f8bd 2000 	ldrh.w	r2, [sp]
 801de24:	4630      	mov	r0, r6
 801de26:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801de2a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801de2e:	f7f2 f935 	bl	801009c <_ZN8touchgfx7Outline5resetEv>
 801de32:	f9bd 3000 	ldrsh.w	r3, [sp]
 801de36:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 801de3a:	4620      	mov	r0, r4
 801de3c:	015b      	lsls	r3, r3, #5
 801de3e:	60a3      	str	r3, [r4, #8]
 801de40:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801de44:	015b      	lsls	r3, r3, #5
 801de46:	60e3      	str	r3, [r4, #12]
 801de48:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801de4c:	015b      	lsls	r3, r3, #5
 801de4e:	6123      	str	r3, [r4, #16]
 801de50:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801de54:	015b      	lsls	r3, r3, #5
 801de56:	6163      	str	r3, [r4, #20]
 801de58:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 801de5c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 801de60:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 801de64:	b002      	add	sp, #8
 801de66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de6a:	2300      	movs	r3, #0
 801de6c:	9301      	str	r3, [sp, #4]
 801de6e:	e7c2      	b.n	801ddf6 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 801de70:	08023478 	.word	0x08023478

0801de74 <_ZN8touchgfx6Canvas5closeEv>:
 801de74:	b538      	push	{r3, r4, r5, lr}
 801de76:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801de7a:	4604      	mov	r4, r0
 801de7c:	b193      	cbz	r3, 801dea4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801de7e:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 801de82:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 801de86:	4213      	tst	r3, r2
 801de88:	d10c      	bne.n	801dea4 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801de8a:	f100 0520 	add.w	r5, r0, #32
 801de8e:	b123      	cbz	r3, 801de9a <_ZN8touchgfx6Canvas5closeEv+0x26>
 801de90:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 801de94:	4628      	mov	r0, r5
 801de96:	f7ff fe7b 	bl	801db90 <_ZN8touchgfx10Rasterizer6lineToEii>
 801de9a:	4628      	mov	r0, r5
 801de9c:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 801dea0:	f7ff fe76 	bl	801db90 <_ZN8touchgfx10Rasterizer6lineToEii>
 801dea4:	2300      	movs	r3, #0
 801dea6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801deaa:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 801deae:	4298      	cmp	r0, r3
 801deb0:	bf34      	ite	cc
 801deb2:	2000      	movcc	r0, #0
 801deb4:	2001      	movcs	r0, #1
 801deb6:	bd38      	pop	{r3, r4, r5, pc}

0801deb8 <_ZN8touchgfx6Canvas6renderEh>:
 801deb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801debc:	4604      	mov	r4, r0
 801debe:	6840      	ldr	r0, [r0, #4]
 801dec0:	460d      	mov	r5, r1
 801dec2:	6803      	ldr	r3, [r0, #0]
 801dec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801dec6:	4798      	blx	r3
 801dec8:	fb10 f105 	smulbb	r1, r0, r5
 801decc:	b289      	uxth	r1, r1
 801dece:	1c4d      	adds	r5, r1, #1
 801ded0:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801ded4:	122d      	asrs	r5, r5, #8
 801ded6:	f000 8097 	beq.w	801e008 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801deda:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801dede:	2b00      	cmp	r3, #0
 801dee0:	f000 8092 	beq.w	801e008 <_ZN8touchgfx6Canvas6renderEh+0x150>
 801dee4:	4620      	mov	r0, r4
 801dee6:	f7ff ffc5 	bl	801de74 <_ZN8touchgfx6Canvas5closeEv>
 801deea:	4607      	mov	r7, r0
 801deec:	2800      	cmp	r0, #0
 801deee:	d043      	beq.n	801df78 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801def0:	6863      	ldr	r3, [r4, #4]
 801def2:	4e46      	ldr	r6, [pc, #280]	; (801e00c <_ZN8touchgfx6Canvas6renderEh+0x154>)
 801def4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801def6:	6837      	ldr	r7, [r6, #0]
 801def8:	6803      	ldr	r3, [r0, #0]
 801defa:	689b      	ldr	r3, [r3, #8]
 801defc:	4798      	blx	r3
 801defe:	4601      	mov	r1, r0
 801df00:	4638      	mov	r0, r7
 801df02:	f7f0 f943 	bl	800e18c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801df06:	4607      	mov	r7, r0
 801df08:	f7ef fd04 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 801df0c:	6803      	ldr	r3, [r0, #0]
 801df0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df10:	4798      	blx	r3
 801df12:	4680      	mov	r8, r0
 801df14:	f7ef fcfe 	bl	800d914 <_ZN8touchgfx3HAL3lcdEv>
 801df18:	6803      	ldr	r3, [r0, #0]
 801df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df1c:	4798      	blx	r3
 801df1e:	280b      	cmp	r0, #11
 801df20:	d857      	bhi.n	801dfd2 <_ZN8touchgfx6Canvas6renderEh+0x11a>
 801df22:	e8df f000 	tbb	[pc, r0]
 801df26:	584d      	.short	0x584d
 801df28:	2d560668 	.word	0x2d560668
 801df2c:	6161613d 	.word	0x6161613d
 801df30:	6161      	.short	0x6161
 801df32:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801df36:	2208      	movs	r2, #8
 801df38:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801df3c:	fb91 f2f2 	sdiv	r2, r1, r2
 801df40:	fb08 2303 	mla	r3, r8, r3, r2
 801df44:	441f      	add	r7, r3
 801df46:	424b      	negs	r3, r1
 801df48:	f001 0107 	and.w	r1, r1, #7
 801df4c:	f003 0307 	and.w	r3, r3, #7
 801df50:	bf58      	it	pl
 801df52:	4259      	negpl	r1, r3
 801df54:	b2c9      	uxtb	r1, r1
 801df56:	6860      	ldr	r0, [r4, #4]
 801df58:	b2ed      	uxtb	r5, r5
 801df5a:	fa0f f388 	sxth.w	r3, r8
 801df5e:	463a      	mov	r2, r7
 801df60:	e9cd 1500 	strd	r1, r5, [sp]
 801df64:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801df66:	f104 0020 	add.w	r0, r4, #32
 801df6a:	f7ff fe1d 	bl	801dba8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801df6e:	4607      	mov	r7, r0
 801df70:	6830      	ldr	r0, [r6, #0]
 801df72:	6803      	ldr	r3, [r0, #0]
 801df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df76:	4798      	blx	r3
 801df78:	4638      	mov	r0, r7
 801df7a:	b002      	add	sp, #8
 801df7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df80:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801df84:	2204      	movs	r2, #4
 801df86:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801df8a:	fb91 f2f2 	sdiv	r2, r1, r2
 801df8e:	fb08 2303 	mla	r3, r8, r3, r2
 801df92:	441f      	add	r7, r3
 801df94:	424b      	negs	r3, r1
 801df96:	f001 0103 	and.w	r1, r1, #3
 801df9a:	f003 0303 	and.w	r3, r3, #3
 801df9e:	e7d7      	b.n	801df50 <_ZN8touchgfx6Canvas6renderEh+0x98>
 801dfa0:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 801dfa4:	2202      	movs	r2, #2
 801dfa6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dfaa:	2900      	cmp	r1, #0
 801dfac:	fb91 f2f2 	sdiv	r2, r1, r2
 801dfb0:	f001 0101 	and.w	r1, r1, #1
 801dfb4:	fb08 2303 	mla	r3, r8, r3, r2
 801dfb8:	bfb8      	it	lt
 801dfba:	4249      	neglt	r1, r1
 801dfbc:	441f      	add	r7, r3
 801dfbe:	e7c9      	b.n	801df54 <_ZN8touchgfx6Canvas6renderEh+0x9c>
 801dfc0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dfc4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dfc8:	fb08 f303 	mul.w	r3, r8, r3
 801dfcc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801dfd0:	441f      	add	r7, r3
 801dfd2:	2100      	movs	r1, #0
 801dfd4:	e7bf      	b.n	801df56 <_ZN8touchgfx6Canvas6renderEh+0x9e>
 801dfd6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dfda:	2103      	movs	r1, #3
 801dfdc:	fb08 f203 	mul.w	r2, r8, r3
 801dfe0:	8b23      	ldrh	r3, [r4, #24]
 801dfe2:	fb13 2301 	smlabb	r3, r3, r1, r2
 801dfe6:	e7f3      	b.n	801dfd0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801dfe8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dfec:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dff0:	fb08 2303 	mla	r3, r8, r3, r2
 801dff4:	e7ec      	b.n	801dfd0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801dff6:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 801dffa:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 801dffe:	fb08 f303 	mul.w	r3, r8, r3
 801e002:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e006:	e7e3      	b.n	801dfd0 <_ZN8touchgfx6Canvas6renderEh+0x118>
 801e008:	2701      	movs	r7, #1
 801e00a:	e7b5      	b.n	801df78 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 801e00c:	2400f590 	.word	0x2400f590

0801e010 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801e010:	4b07      	ldr	r3, [pc, #28]	; (801e030 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801e012:	b510      	push	{r4, lr}
 801e014:	781b      	ldrb	r3, [r3, #0]
 801e016:	2b01      	cmp	r3, #1
 801e018:	d108      	bne.n	801e02c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801e01a:	6843      	ldr	r3, [r0, #4]
 801e01c:	6814      	ldr	r4, [r2, #0]
 801e01e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e022:	680b      	ldr	r3, [r1, #0]
 801e024:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801e028:	6013      	str	r3, [r2, #0]
 801e02a:	600c      	str	r4, [r1, #0]
 801e02c:	bd10      	pop	{r4, pc}
 801e02e:	bf00      	nop
 801e030:	2400f588 	.word	0x2400f588

0801e034 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801e034:	b513      	push	{r0, r1, r4, lr}
 801e036:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 801e03a:	4604      	mov	r4, r0
 801e03c:	e9cd 2100 	strd	r2, r1, [sp]
 801e040:	b9a3      	cbnz	r3, 801e06c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801e042:	466a      	mov	r2, sp
 801e044:	a901      	add	r1, sp, #4
 801e046:	4620      	mov	r0, r4
 801e048:	f7ff ffe2 	bl	801e010 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e04c:	68a3      	ldr	r3, [r4, #8]
 801e04e:	9901      	ldr	r1, [sp, #4]
 801e050:	9a00      	ldr	r2, [sp, #0]
 801e052:	1ac9      	subs	r1, r1, r3
 801e054:	68e3      	ldr	r3, [r4, #12]
 801e056:	1ad2      	subs	r2, r2, r3
 801e058:	9101      	str	r1, [sp, #4]
 801e05a:	2a00      	cmp	r2, #0
 801e05c:	9200      	str	r2, [sp, #0]
 801e05e:	da0b      	bge.n	801e078 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801e060:	2301      	movs	r3, #1
 801e062:	2900      	cmp	r1, #0
 801e064:	da0e      	bge.n	801e084 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801e066:	f043 0304 	orr.w	r3, r3, #4
 801e06a:	e013      	b.n	801e094 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801e06c:	f7ff ff02 	bl	801de74 <_ZN8touchgfx6Canvas5closeEv>
 801e070:	2800      	cmp	r0, #0
 801e072:	d1e6      	bne.n	801e042 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801e074:	b002      	add	sp, #8
 801e076:	bd10      	pop	{r4, pc}
 801e078:	6963      	ldr	r3, [r4, #20]
 801e07a:	429a      	cmp	r2, r3
 801e07c:	bfac      	ite	ge
 801e07e:	2302      	movge	r3, #2
 801e080:	2300      	movlt	r3, #0
 801e082:	e7ee      	b.n	801e062 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801e084:	6920      	ldr	r0, [r4, #16]
 801e086:	4281      	cmp	r1, r0
 801e088:	bfac      	ite	ge
 801e08a:	2008      	movge	r0, #8
 801e08c:	2000      	movlt	r0, #0
 801e08e:	4318      	orrs	r0, r3
 801e090:	b2c3      	uxtb	r3, r0
 801e092:	b158      	cbz	r0, 801e0ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801e094:	2200      	movs	r2, #0
 801e096:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 801e09a:	9901      	ldr	r1, [sp, #4]
 801e09c:	9a00      	ldr	r2, [sp, #0]
 801e09e:	66a1      	str	r1, [r4, #104]	; 0x68
 801e0a0:	66e2      	str	r2, [r4, #108]	; 0x6c
 801e0a2:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 801e0a6:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 801e0aa:	e7e3      	b.n	801e074 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801e0ac:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801e0b0:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801e0b4:	4298      	cmp	r0, r3
 801e0b6:	d803      	bhi.n	801e0c0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801e0b8:	f104 0020 	add.w	r0, r4, #32
 801e0bc:	f7f2 fcde 	bl	8010a7c <_ZN8touchgfx7Outline6moveToEii>
 801e0c0:	2301      	movs	r3, #1
 801e0c2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801e0c6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	e7e5      	b.n	801e09a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801e0ce <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801e0ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e0d0:	ab02      	add	r3, sp, #8
 801e0d2:	4604      	mov	r4, r0
 801e0d4:	9101      	str	r1, [sp, #4]
 801e0d6:	a901      	add	r1, sp, #4
 801e0d8:	f843 2d08 	str.w	r2, [r3, #-8]!
 801e0dc:	461a      	mov	r2, r3
 801e0de:	f7ff ff97 	bl	801e010 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e0e2:	68a3      	ldr	r3, [r4, #8]
 801e0e4:	9901      	ldr	r1, [sp, #4]
 801e0e6:	9a00      	ldr	r2, [sp, #0]
 801e0e8:	1ac9      	subs	r1, r1, r3
 801e0ea:	68e3      	ldr	r3, [r4, #12]
 801e0ec:	1ad2      	subs	r2, r2, r3
 801e0ee:	9101      	str	r1, [sp, #4]
 801e0f0:	2a00      	cmp	r2, #0
 801e0f2:	9200      	str	r2, [sp, #0]
 801e0f4:	db1c      	blt.n	801e130 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801e0f6:	6963      	ldr	r3, [r4, #20]
 801e0f8:	429a      	cmp	r2, r3
 801e0fa:	bfac      	ite	ge
 801e0fc:	2002      	movge	r0, #2
 801e0fe:	2000      	movlt	r0, #0
 801e100:	2900      	cmp	r1, #0
 801e102:	db17      	blt.n	801e134 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801e104:	6923      	ldr	r3, [r4, #16]
 801e106:	4299      	cmp	r1, r3
 801e108:	bfac      	ite	ge
 801e10a:	2308      	movge	r3, #8
 801e10c:	2300      	movlt	r3, #0
 801e10e:	4303      	orrs	r3, r0
 801e110:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 801e114:	b2dd      	uxtb	r5, r3
 801e116:	b978      	cbnz	r0, 801e138 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801e118:	f104 0020 	add.w	r0, r4, #32
 801e11c:	f7ff fd38 	bl	801db90 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e120:	9b01      	ldr	r3, [sp, #4]
 801e122:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 801e126:	65e3      	str	r3, [r4, #92]	; 0x5c
 801e128:	9b00      	ldr	r3, [sp, #0]
 801e12a:	6623      	str	r3, [r4, #96]	; 0x60
 801e12c:	b002      	add	sp, #8
 801e12e:	bd70      	pop	{r4, r5, r6, pc}
 801e130:	2001      	movs	r0, #1
 801e132:	e7e5      	b.n	801e100 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801e134:	2304      	movs	r3, #4
 801e136:	e7ea      	b.n	801e10e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801e138:	b113      	cbz	r3, 801e140 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801e13a:	ea10 0305 	ands.w	r3, r0, r5
 801e13e:	d11c      	bne.n	801e17a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801e140:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 801e144:	f104 0620 	add.w	r6, r4, #32
 801e148:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 801e14c:	b98b      	cbnz	r3, 801e172 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801e14e:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 801e152:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 801e156:	4298      	cmp	r0, r3
 801e158:	d802      	bhi.n	801e160 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801e15a:	4630      	mov	r0, r6
 801e15c:	f7f2 fc8e 	bl	8010a7c <_ZN8touchgfx7Outline6moveToEii>
 801e160:	2301      	movs	r3, #1
 801e162:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 801e166:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801e16a:	4630      	mov	r0, r6
 801e16c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801e170:	e7d4      	b.n	801e11c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801e172:	4630      	mov	r0, r6
 801e174:	f7ff fd0c 	bl	801db90 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e178:	e7f7      	b.n	801e16a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801e17a:	461d      	mov	r5, r3
 801e17c:	e7d0      	b.n	801e120 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801e180 <_ZN8touchgfx6CanvasD1Ev>:
 801e180:	4b04      	ldr	r3, [pc, #16]	; (801e194 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801e182:	b510      	push	{r4, lr}
 801e184:	4604      	mov	r4, r0
 801e186:	f840 3b20 	str.w	r3, [r0], #32
 801e18a:	f7f1 ff7f 	bl	801008c <_ZN8touchgfx7OutlineD1Ev>
 801e18e:	4620      	mov	r0, r4
 801e190:	bd10      	pop	{r4, pc}
 801e192:	bf00      	nop
 801e194:	08023478 	.word	0x08023478

0801e198 <_ZN8touchgfx6CanvasD0Ev>:
 801e198:	b510      	push	{r4, lr}
 801e19a:	4604      	mov	r4, r0
 801e19c:	f7ff fff0 	bl	801e180 <_ZN8touchgfx6CanvasD1Ev>
 801e1a0:	2170      	movs	r1, #112	; 0x70
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f000 f807 	bl	801e1b6 <_ZdlPvj>
 801e1a8:	4620      	mov	r0, r4
 801e1aa:	bd10      	pop	{r4, pc}

0801e1ac <__aeabi_atexit>:
 801e1ac:	460b      	mov	r3, r1
 801e1ae:	4601      	mov	r1, r0
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	f000 be4b 	b.w	801ee4c <__cxa_atexit>

0801e1b6 <_ZdlPvj>:
 801e1b6:	f000 b812 	b.w	801e1de <_ZdlPv>

0801e1ba <__cxa_guard_acquire>:
 801e1ba:	6803      	ldr	r3, [r0, #0]
 801e1bc:	07db      	lsls	r3, r3, #31
 801e1be:	d406      	bmi.n	801e1ce <__cxa_guard_acquire+0x14>
 801e1c0:	7843      	ldrb	r3, [r0, #1]
 801e1c2:	b103      	cbz	r3, 801e1c6 <__cxa_guard_acquire+0xc>
 801e1c4:	deff      	udf	#255	; 0xff
 801e1c6:	2301      	movs	r3, #1
 801e1c8:	7043      	strb	r3, [r0, #1]
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	4770      	bx	lr
 801e1ce:	2000      	movs	r0, #0
 801e1d0:	4770      	bx	lr

0801e1d2 <__cxa_guard_release>:
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	6003      	str	r3, [r0, #0]
 801e1d6:	4770      	bx	lr

0801e1d8 <__cxa_pure_virtual>:
 801e1d8:	b508      	push	{r3, lr}
 801e1da:	f000 f80f 	bl	801e1fc <_ZSt9terminatev>

0801e1de <_ZdlPv>:
 801e1de:	f001 b877 	b.w	801f2d0 <free>

0801e1e2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e1e2:	b508      	push	{r3, lr}
 801e1e4:	4780      	blx	r0
 801e1e6:	f000 fe05 	bl	801edf4 <abort>
	...

0801e1ec <_ZSt13get_terminatev>:
 801e1ec:	4b02      	ldr	r3, [pc, #8]	; (801e1f8 <_ZSt13get_terminatev+0xc>)
 801e1ee:	6818      	ldr	r0, [r3, #0]
 801e1f0:	f3bf 8f5b 	dmb	ish
 801e1f4:	4770      	bx	lr
 801e1f6:	bf00      	nop
 801e1f8:	240000c0 	.word	0x240000c0

0801e1fc <_ZSt9terminatev>:
 801e1fc:	b508      	push	{r3, lr}
 801e1fe:	f7ff fff5 	bl	801e1ec <_ZSt13get_terminatev>
 801e202:	f7ff ffee 	bl	801e1e2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801e208 <cos>:
 801e208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e20a:	eeb0 7b40 	vmov.f64	d7, d0
 801e20e:	ee17 3a90 	vmov	r3, s15
 801e212:	4a21      	ldr	r2, [pc, #132]	; (801e298 <cos+0x90>)
 801e214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e218:	4293      	cmp	r3, r2
 801e21a:	dc06      	bgt.n	801e22a <cos+0x22>
 801e21c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801e290 <cos+0x88>
 801e220:	b005      	add	sp, #20
 801e222:	f85d eb04 	ldr.w	lr, [sp], #4
 801e226:	f000 b97f 	b.w	801e528 <__kernel_cos>
 801e22a:	4a1c      	ldr	r2, [pc, #112]	; (801e29c <cos+0x94>)
 801e22c:	4293      	cmp	r3, r2
 801e22e:	dd04      	ble.n	801e23a <cos+0x32>
 801e230:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e234:	b005      	add	sp, #20
 801e236:	f85d fb04 	ldr.w	pc, [sp], #4
 801e23a:	4668      	mov	r0, sp
 801e23c:	f000 f830 	bl	801e2a0 <__ieee754_rem_pio2>
 801e240:	f000 0003 	and.w	r0, r0, #3
 801e244:	2801      	cmp	r0, #1
 801e246:	d009      	beq.n	801e25c <cos+0x54>
 801e248:	2802      	cmp	r0, #2
 801e24a:	d010      	beq.n	801e26e <cos+0x66>
 801e24c:	b9b0      	cbnz	r0, 801e27c <cos+0x74>
 801e24e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e252:	ed9d 0b00 	vldr	d0, [sp]
 801e256:	f000 f967 	bl	801e528 <__kernel_cos>
 801e25a:	e7eb      	b.n	801e234 <cos+0x2c>
 801e25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e260:	ed9d 0b00 	vldr	d0, [sp]
 801e264:	f000 fc64 	bl	801eb30 <__kernel_sin>
 801e268:	eeb1 0b40 	vneg.f64	d0, d0
 801e26c:	e7e2      	b.n	801e234 <cos+0x2c>
 801e26e:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e272:	ed9d 0b00 	vldr	d0, [sp]
 801e276:	f000 f957 	bl	801e528 <__kernel_cos>
 801e27a:	e7f5      	b.n	801e268 <cos+0x60>
 801e27c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e280:	ed9d 0b00 	vldr	d0, [sp]
 801e284:	2001      	movs	r0, #1
 801e286:	f000 fc53 	bl	801eb30 <__kernel_sin>
 801e28a:	e7d3      	b.n	801e234 <cos+0x2c>
 801e28c:	f3af 8000 	nop.w
	...
 801e298:	3fe921fb 	.word	0x3fe921fb
 801e29c:	7fefffff 	.word	0x7fefffff

0801e2a0 <__ieee754_rem_pio2>:
 801e2a0:	b570      	push	{r4, r5, r6, lr}
 801e2a2:	eeb0 7b40 	vmov.f64	d7, d0
 801e2a6:	ee17 5a90 	vmov	r5, s15
 801e2aa:	4b99      	ldr	r3, [pc, #612]	; (801e510 <__ieee754_rem_pio2+0x270>)
 801e2ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e2b0:	429e      	cmp	r6, r3
 801e2b2:	b088      	sub	sp, #32
 801e2b4:	4604      	mov	r4, r0
 801e2b6:	dc07      	bgt.n	801e2c8 <__ieee754_rem_pio2+0x28>
 801e2b8:	2200      	movs	r2, #0
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	ed84 0b00 	vstr	d0, [r4]
 801e2c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e2c4:	2000      	movs	r0, #0
 801e2c6:	e01b      	b.n	801e300 <__ieee754_rem_pio2+0x60>
 801e2c8:	4b92      	ldr	r3, [pc, #584]	; (801e514 <__ieee754_rem_pio2+0x274>)
 801e2ca:	429e      	cmp	r6, r3
 801e2cc:	dc3b      	bgt.n	801e346 <__ieee754_rem_pio2+0xa6>
 801e2ce:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e2d2:	2d00      	cmp	r5, #0
 801e2d4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801e4d0 <__ieee754_rem_pio2+0x230>
 801e2d8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e2dc:	dd19      	ble.n	801e312 <__ieee754_rem_pio2+0x72>
 801e2de:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e2e2:	429e      	cmp	r6, r3
 801e2e4:	d00e      	beq.n	801e304 <__ieee754_rem_pio2+0x64>
 801e2e6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801e4d8 <__ieee754_rem_pio2+0x238>
 801e2ea:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e2ee:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e2f2:	ed84 5b00 	vstr	d5, [r4]
 801e2f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e2fa:	ed84 7b02 	vstr	d7, [r4, #8]
 801e2fe:	2001      	movs	r0, #1
 801e300:	b008      	add	sp, #32
 801e302:	bd70      	pop	{r4, r5, r6, pc}
 801e304:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e4e0 <__ieee754_rem_pio2+0x240>
 801e308:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e30c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e4e8 <__ieee754_rem_pio2+0x248>
 801e310:	e7eb      	b.n	801e2ea <__ieee754_rem_pio2+0x4a>
 801e312:	429e      	cmp	r6, r3
 801e314:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e318:	d00e      	beq.n	801e338 <__ieee754_rem_pio2+0x98>
 801e31a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801e4d8 <__ieee754_rem_pio2+0x238>
 801e31e:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e322:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e326:	ed84 5b00 	vstr	d5, [r4]
 801e32a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e32e:	f04f 30ff 	mov.w	r0, #4294967295
 801e332:	ed84 7b02 	vstr	d7, [r4, #8]
 801e336:	e7e3      	b.n	801e300 <__ieee754_rem_pio2+0x60>
 801e338:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e4e0 <__ieee754_rem_pio2+0x240>
 801e33c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e340:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e4e8 <__ieee754_rem_pio2+0x248>
 801e344:	e7eb      	b.n	801e31e <__ieee754_rem_pio2+0x7e>
 801e346:	4b74      	ldr	r3, [pc, #464]	; (801e518 <__ieee754_rem_pio2+0x278>)
 801e348:	429e      	cmp	r6, r3
 801e34a:	dc70      	bgt.n	801e42e <__ieee754_rem_pio2+0x18e>
 801e34c:	f000 fc48 	bl	801ebe0 <fabs>
 801e350:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e354:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801e4f0 <__ieee754_rem_pio2+0x250>
 801e358:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e35c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e360:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801e364:	ee17 0a90 	vmov	r0, s15
 801e368:	eeb1 4b45 	vneg.f64	d4, d5
 801e36c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e4d0 <__ieee754_rem_pio2+0x230>
 801e370:	eea5 0b47 	vfms.f64	d0, d5, d7
 801e374:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e4d8 <__ieee754_rem_pio2+0x238>
 801e378:	281f      	cmp	r0, #31
 801e37a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e37e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e382:	dc08      	bgt.n	801e396 <__ieee754_rem_pio2+0xf6>
 801e384:	4b65      	ldr	r3, [pc, #404]	; (801e51c <__ieee754_rem_pio2+0x27c>)
 801e386:	1e42      	subs	r2, r0, #1
 801e388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e38c:	42b3      	cmp	r3, r6
 801e38e:	d002      	beq.n	801e396 <__ieee754_rem_pio2+0xf6>
 801e390:	ed84 6b00 	vstr	d6, [r4]
 801e394:	e026      	b.n	801e3e4 <__ieee754_rem_pio2+0x144>
 801e396:	ee16 3a90 	vmov	r3, s13
 801e39a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e39e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801e3a2:	2b10      	cmp	r3, #16
 801e3a4:	ea4f 5226 	mov.w	r2, r6, asr #20
 801e3a8:	ddf2      	ble.n	801e390 <__ieee754_rem_pio2+0xf0>
 801e3aa:	eeb0 6b40 	vmov.f64	d6, d0
 801e3ae:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801e4e0 <__ieee754_rem_pio2+0x240>
 801e3b2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801e4e8 <__ieee754_rem_pio2+0x248>
 801e3b6:	eea4 6b07 	vfma.f64	d6, d4, d7
 801e3ba:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e3be:	eea4 0b07 	vfma.f64	d0, d4, d7
 801e3c2:	eeb0 7b40 	vmov.f64	d7, d0
 801e3c6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801e3ca:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e3ce:	ee13 3a90 	vmov	r3, s7
 801e3d2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e3d6:	1ad3      	subs	r3, r2, r3
 801e3d8:	2b31      	cmp	r3, #49	; 0x31
 801e3da:	dc17      	bgt.n	801e40c <__ieee754_rem_pio2+0x16c>
 801e3dc:	eeb0 0b46 	vmov.f64	d0, d6
 801e3e0:	ed84 3b00 	vstr	d3, [r4]
 801e3e4:	ed94 6b00 	vldr	d6, [r4]
 801e3e8:	2d00      	cmp	r5, #0
 801e3ea:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e3ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e3f2:	ed84 0b02 	vstr	d0, [r4, #8]
 801e3f6:	da83      	bge.n	801e300 <__ieee754_rem_pio2+0x60>
 801e3f8:	eeb1 6b46 	vneg.f64	d6, d6
 801e3fc:	eeb1 0b40 	vneg.f64	d0, d0
 801e400:	ed84 6b00 	vstr	d6, [r4]
 801e404:	ed84 0b02 	vstr	d0, [r4, #8]
 801e408:	4240      	negs	r0, r0
 801e40a:	e779      	b.n	801e300 <__ieee754_rem_pio2+0x60>
 801e40c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801e4f8 <__ieee754_rem_pio2+0x258>
 801e410:	eeb0 0b46 	vmov.f64	d0, d6
 801e414:	eea4 0b03 	vfma.f64	d0, d4, d3
 801e418:	ee36 7b40 	vsub.f64	d7, d6, d0
 801e41c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801e500 <__ieee754_rem_pio2+0x260>
 801e420:	eea4 7b03 	vfma.f64	d7, d4, d3
 801e424:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801e428:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e42c:	e7b0      	b.n	801e390 <__ieee754_rem_pio2+0xf0>
 801e42e:	4b3c      	ldr	r3, [pc, #240]	; (801e520 <__ieee754_rem_pio2+0x280>)
 801e430:	429e      	cmp	r6, r3
 801e432:	dd06      	ble.n	801e442 <__ieee754_rem_pio2+0x1a2>
 801e434:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e438:	ed80 7b02 	vstr	d7, [r0, #8]
 801e43c:	ed80 7b00 	vstr	d7, [r0]
 801e440:	e740      	b.n	801e2c4 <__ieee754_rem_pio2+0x24>
 801e442:	1532      	asrs	r2, r6, #20
 801e444:	ee10 0a10 	vmov	r0, s0
 801e448:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801e44c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e450:	ec41 0b17 	vmov	d7, r0, r1
 801e454:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e458:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801e508 <__ieee754_rem_pio2+0x268>
 801e45c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e460:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e464:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e468:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e46c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e470:	a902      	add	r1, sp, #8
 801e472:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e476:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e47a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e47e:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e482:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e486:	2603      	movs	r6, #3
 801e488:	4608      	mov	r0, r1
 801e48a:	ed91 7b04 	vldr	d7, [r1, #16]
 801e48e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e496:	4633      	mov	r3, r6
 801e498:	f1a1 0108 	sub.w	r1, r1, #8
 801e49c:	f106 36ff 	add.w	r6, r6, #4294967295
 801e4a0:	d0f3      	beq.n	801e48a <__ieee754_rem_pio2+0x1ea>
 801e4a2:	4920      	ldr	r1, [pc, #128]	; (801e524 <__ieee754_rem_pio2+0x284>)
 801e4a4:	9101      	str	r1, [sp, #4]
 801e4a6:	2102      	movs	r1, #2
 801e4a8:	9100      	str	r1, [sp, #0]
 801e4aa:	4621      	mov	r1, r4
 801e4ac:	f000 f8a8 	bl	801e600 <__kernel_rem_pio2>
 801e4b0:	2d00      	cmp	r5, #0
 801e4b2:	f6bf af25 	bge.w	801e300 <__ieee754_rem_pio2+0x60>
 801e4b6:	ed94 7b00 	vldr	d7, [r4]
 801e4ba:	eeb1 7b47 	vneg.f64	d7, d7
 801e4be:	ed84 7b00 	vstr	d7, [r4]
 801e4c2:	ed94 7b02 	vldr	d7, [r4, #8]
 801e4c6:	eeb1 7b47 	vneg.f64	d7, d7
 801e4ca:	ed84 7b02 	vstr	d7, [r4, #8]
 801e4ce:	e79b      	b.n	801e408 <__ieee754_rem_pio2+0x168>
 801e4d0:	54400000 	.word	0x54400000
 801e4d4:	3ff921fb 	.word	0x3ff921fb
 801e4d8:	1a626331 	.word	0x1a626331
 801e4dc:	3dd0b461 	.word	0x3dd0b461
 801e4e0:	1a600000 	.word	0x1a600000
 801e4e4:	3dd0b461 	.word	0x3dd0b461
 801e4e8:	2e037073 	.word	0x2e037073
 801e4ec:	3ba3198a 	.word	0x3ba3198a
 801e4f0:	6dc9c883 	.word	0x6dc9c883
 801e4f4:	3fe45f30 	.word	0x3fe45f30
 801e4f8:	2e000000 	.word	0x2e000000
 801e4fc:	3ba3198a 	.word	0x3ba3198a
 801e500:	252049c1 	.word	0x252049c1
 801e504:	397b839a 	.word	0x397b839a
 801e508:	00000000 	.word	0x00000000
 801e50c:	41700000 	.word	0x41700000
 801e510:	3fe921fb 	.word	0x3fe921fb
 801e514:	4002d97b 	.word	0x4002d97b
 801e518:	413921fb 	.word	0x413921fb
 801e51c:	08023484 	.word	0x08023484
 801e520:	7fefffff 	.word	0x7fefffff
 801e524:	08023504 	.word	0x08023504

0801e528 <__kernel_cos>:
 801e528:	ee10 1a90 	vmov	r1, s1
 801e52c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801e534:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801e538:	da05      	bge.n	801e546 <__kernel_cos+0x1e>
 801e53a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801e53e:	ee17 3a90 	vmov	r3, s15
 801e542:	2b00      	cmp	r3, #0
 801e544:	d03d      	beq.n	801e5c2 <__kernel_cos+0x9a>
 801e546:	ee20 3b00 	vmul.f64	d3, d0, d0
 801e54a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801e5c8 <__kernel_cos+0xa0>
 801e54e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801e5d0 <__kernel_cos+0xa8>
 801e552:	eea3 6b07 	vfma.f64	d6, d3, d7
 801e556:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801e5d8 <__kernel_cos+0xb0>
 801e55a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e55e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801e5e0 <__kernel_cos+0xb8>
 801e562:	eea7 6b03 	vfma.f64	d6, d7, d3
 801e566:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801e5e8 <__kernel_cos+0xc0>
 801e56a:	4b23      	ldr	r3, [pc, #140]	; (801e5f8 <__kernel_cos+0xd0>)
 801e56c:	eea6 7b03 	vfma.f64	d7, d6, d3
 801e570:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 801e5f0 <__kernel_cos+0xc8>
 801e574:	4299      	cmp	r1, r3
 801e576:	eea7 6b03 	vfma.f64	d6, d7, d3
 801e57a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e57e:	ee26 5b03 	vmul.f64	d5, d6, d3
 801e582:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e586:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801e58a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801e58e:	dc04      	bgt.n	801e59a <__kernel_cos+0x72>
 801e590:	ee37 6b46 	vsub.f64	d6, d7, d6
 801e594:	ee34 0b46 	vsub.f64	d0, d4, d6
 801e598:	4770      	bx	lr
 801e59a:	4b18      	ldr	r3, [pc, #96]	; (801e5fc <__kernel_cos+0xd4>)
 801e59c:	4299      	cmp	r1, r3
 801e59e:	dc0d      	bgt.n	801e5bc <__kernel_cos+0x94>
 801e5a0:	2200      	movs	r2, #0
 801e5a2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801e5a6:	ec43 2b15 	vmov	d5, r2, r3
 801e5aa:	ee34 0b45 	vsub.f64	d0, d4, d5
 801e5ae:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e5b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5b6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e5ba:	4770      	bx	lr
 801e5bc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801e5c0:	e7f3      	b.n	801e5aa <__kernel_cos+0x82>
 801e5c2:	eeb0 0b44 	vmov.f64	d0, d4
 801e5c6:	4770      	bx	lr
 801e5c8:	be8838d4 	.word	0xbe8838d4
 801e5cc:	bda8fae9 	.word	0xbda8fae9
 801e5d0:	bdb4b1c4 	.word	0xbdb4b1c4
 801e5d4:	3e21ee9e 	.word	0x3e21ee9e
 801e5d8:	809c52ad 	.word	0x809c52ad
 801e5dc:	be927e4f 	.word	0xbe927e4f
 801e5e0:	19cb1590 	.word	0x19cb1590
 801e5e4:	3efa01a0 	.word	0x3efa01a0
 801e5e8:	16c15177 	.word	0x16c15177
 801e5ec:	bf56c16c 	.word	0xbf56c16c
 801e5f0:	5555554c 	.word	0x5555554c
 801e5f4:	3fa55555 	.word	0x3fa55555
 801e5f8:	3fd33332 	.word	0x3fd33332
 801e5fc:	3fe90000 	.word	0x3fe90000

0801e600 <__kernel_rem_pio2>:
 801e600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e604:	ed2d 8b06 	vpush	{d8-d10}
 801e608:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801e60c:	460f      	mov	r7, r1
 801e60e:	9002      	str	r0, [sp, #8]
 801e610:	49c5      	ldr	r1, [pc, #788]	; (801e928 <__kernel_rem_pio2+0x328>)
 801e612:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801e614:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801e618:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801e61c:	9301      	str	r3, [sp, #4]
 801e61e:	f112 0f14 	cmn.w	r2, #20
 801e622:	bfa8      	it	ge
 801e624:	2018      	movge	r0, #24
 801e626:	f103 31ff 	add.w	r1, r3, #4294967295
 801e62a:	bfb8      	it	lt
 801e62c:	2000      	movlt	r0, #0
 801e62e:	f06f 0417 	mvn.w	r4, #23
 801e632:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801e910 <__kernel_rem_pio2+0x310>
 801e636:	bfa4      	itt	ge
 801e638:	f1a2 0a03 	subge.w	sl, r2, #3
 801e63c:	fb9a f0f0 	sdivge	r0, sl, r0
 801e640:	fb00 4404 	mla	r4, r0, r4, r4
 801e644:	1a46      	subs	r6, r0, r1
 801e646:	4414      	add	r4, r2
 801e648:	eb09 0c01 	add.w	ip, r9, r1
 801e64c:	ad1a      	add	r5, sp, #104	; 0x68
 801e64e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801e652:	2200      	movs	r2, #0
 801e654:	4562      	cmp	r2, ip
 801e656:	dd10      	ble.n	801e67a <__kernel_rem_pio2+0x7a>
 801e658:	9a01      	ldr	r2, [sp, #4]
 801e65a:	ab1a      	add	r3, sp, #104	; 0x68
 801e65c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e660:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801e664:	f04f 0c00 	mov.w	ip, #0
 801e668:	45cc      	cmp	ip, r9
 801e66a:	dc26      	bgt.n	801e6ba <__kernel_rem_pio2+0xba>
 801e66c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801e910 <__kernel_rem_pio2+0x310>
 801e670:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e674:	4616      	mov	r6, r2
 801e676:	2500      	movs	r5, #0
 801e678:	e015      	b.n	801e6a6 <__kernel_rem_pio2+0xa6>
 801e67a:	42d6      	cmn	r6, r2
 801e67c:	d409      	bmi.n	801e692 <__kernel_rem_pio2+0x92>
 801e67e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801e682:	ee07 3a90 	vmov	s15, r3
 801e686:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e68a:	eca5 7b02 	vstmia	r5!, {d7}
 801e68e:	3201      	adds	r2, #1
 801e690:	e7e0      	b.n	801e654 <__kernel_rem_pio2+0x54>
 801e692:	eeb0 7b46 	vmov.f64	d7, d6
 801e696:	e7f8      	b.n	801e68a <__kernel_rem_pio2+0x8a>
 801e698:	ecb8 5b02 	vldmia	r8!, {d5}
 801e69c:	ed96 6b00 	vldr	d6, [r6]
 801e6a0:	3501      	adds	r5, #1
 801e6a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e6a6:	428d      	cmp	r5, r1
 801e6a8:	f1a6 0608 	sub.w	r6, r6, #8
 801e6ac:	ddf4      	ble.n	801e698 <__kernel_rem_pio2+0x98>
 801e6ae:	ecaa 7b02 	vstmia	sl!, {d7}
 801e6b2:	f10c 0c01 	add.w	ip, ip, #1
 801e6b6:	3208      	adds	r2, #8
 801e6b8:	e7d6      	b.n	801e668 <__kernel_rem_pio2+0x68>
 801e6ba:	ab06      	add	r3, sp, #24
 801e6bc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801e918 <__kernel_rem_pio2+0x318>
 801e6c0:	ed9f ab97 	vldr	d10, [pc, #604]	; 801e920 <__kernel_rem_pio2+0x320>
 801e6c4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801e6c8:	9303      	str	r3, [sp, #12]
 801e6ca:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801e6ce:	464d      	mov	r5, r9
 801e6d0:	00eb      	lsls	r3, r5, #3
 801e6d2:	9304      	str	r3, [sp, #16]
 801e6d4:	ab92      	add	r3, sp, #584	; 0x248
 801e6d6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e6da:	f10d 0b18 	add.w	fp, sp, #24
 801e6de:	ab6a      	add	r3, sp, #424	; 0x1a8
 801e6e0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801e6e4:	465e      	mov	r6, fp
 801e6e6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e6ea:	4628      	mov	r0, r5
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	f1a2 0208 	sub.w	r2, r2, #8
 801e6f2:	dc4c      	bgt.n	801e78e <__kernel_rem_pio2+0x18e>
 801e6f4:	4620      	mov	r0, r4
 801e6f6:	9105      	str	r1, [sp, #20]
 801e6f8:	f000 faf2 	bl	801ece0 <scalbn>
 801e6fc:	eeb0 8b40 	vmov.f64	d8, d0
 801e700:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801e704:	ee28 0b00 	vmul.f64	d0, d8, d0
 801e708:	f000 fa76 	bl	801ebf8 <floor>
 801e70c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801e710:	eea0 8b47 	vfms.f64	d8, d0, d7
 801e714:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801e718:	2c00      	cmp	r4, #0
 801e71a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801e71e:	ee17 8a90 	vmov	r8, s15
 801e722:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e726:	9905      	ldr	r1, [sp, #20]
 801e728:	dd43      	ble.n	801e7b2 <__kernel_rem_pio2+0x1b2>
 801e72a:	1e68      	subs	r0, r5, #1
 801e72c:	ab06      	add	r3, sp, #24
 801e72e:	f1c4 0c18 	rsb	ip, r4, #24
 801e732:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801e736:	fa46 f20c 	asr.w	r2, r6, ip
 801e73a:	4490      	add	r8, r2
 801e73c:	fa02 f20c 	lsl.w	r2, r2, ip
 801e740:	1ab6      	subs	r6, r6, r2
 801e742:	f1c4 0217 	rsb	r2, r4, #23
 801e746:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801e74a:	4116      	asrs	r6, r2
 801e74c:	2e00      	cmp	r6, #0
 801e74e:	dd3f      	ble.n	801e7d0 <__kernel_rem_pio2+0x1d0>
 801e750:	f04f 0c00 	mov.w	ip, #0
 801e754:	f108 0801 	add.w	r8, r8, #1
 801e758:	4660      	mov	r0, ip
 801e75a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801e75e:	4565      	cmp	r5, ip
 801e760:	dc6e      	bgt.n	801e840 <__kernel_rem_pio2+0x240>
 801e762:	2c00      	cmp	r4, #0
 801e764:	dd04      	ble.n	801e770 <__kernel_rem_pio2+0x170>
 801e766:	2c01      	cmp	r4, #1
 801e768:	d07f      	beq.n	801e86a <__kernel_rem_pio2+0x26a>
 801e76a:	2c02      	cmp	r4, #2
 801e76c:	f000 8087 	beq.w	801e87e <__kernel_rem_pio2+0x27e>
 801e770:	2e02      	cmp	r6, #2
 801e772:	d12d      	bne.n	801e7d0 <__kernel_rem_pio2+0x1d0>
 801e774:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e778:	ee30 8b48 	vsub.f64	d8, d0, d8
 801e77c:	b340      	cbz	r0, 801e7d0 <__kernel_rem_pio2+0x1d0>
 801e77e:	4620      	mov	r0, r4
 801e780:	9105      	str	r1, [sp, #20]
 801e782:	f000 faad 	bl	801ece0 <scalbn>
 801e786:	9905      	ldr	r1, [sp, #20]
 801e788:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e78c:	e020      	b.n	801e7d0 <__kernel_rem_pio2+0x1d0>
 801e78e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801e792:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e796:	3801      	subs	r0, #1
 801e798:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801e79c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801e7a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e7a4:	eca6 0a01 	vstmia	r6!, {s0}
 801e7a8:	ed92 0b00 	vldr	d0, [r2]
 801e7ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 801e7b0:	e79c      	b.n	801e6ec <__kernel_rem_pio2+0xec>
 801e7b2:	d105      	bne.n	801e7c0 <__kernel_rem_pio2+0x1c0>
 801e7b4:	1e6a      	subs	r2, r5, #1
 801e7b6:	ab06      	add	r3, sp, #24
 801e7b8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e7bc:	15f6      	asrs	r6, r6, #23
 801e7be:	e7c5      	b.n	801e74c <__kernel_rem_pio2+0x14c>
 801e7c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e7c4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7cc:	da36      	bge.n	801e83c <__kernel_rem_pio2+0x23c>
 801e7ce:	2600      	movs	r6, #0
 801e7d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7d8:	f040 80aa 	bne.w	801e930 <__kernel_rem_pio2+0x330>
 801e7dc:	f105 3bff 	add.w	fp, r5, #4294967295
 801e7e0:	4658      	mov	r0, fp
 801e7e2:	2200      	movs	r2, #0
 801e7e4:	4548      	cmp	r0, r9
 801e7e6:	da52      	bge.n	801e88e <__kernel_rem_pio2+0x28e>
 801e7e8:	2a00      	cmp	r2, #0
 801e7ea:	f000 8081 	beq.w	801e8f0 <__kernel_rem_pio2+0x2f0>
 801e7ee:	ab06      	add	r3, sp, #24
 801e7f0:	3c18      	subs	r4, #24
 801e7f2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	f000 8087 	beq.w	801e90a <__kernel_rem_pio2+0x30a>
 801e7fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e800:	4620      	mov	r0, r4
 801e802:	f000 fa6d 	bl	801ece0 <scalbn>
 801e806:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801e80a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801e918 <__kernel_rem_pio2+0x318>
 801e80e:	a96a      	add	r1, sp, #424	; 0x1a8
 801e810:	f103 0208 	add.w	r2, r3, #8
 801e814:	1888      	adds	r0, r1, r2
 801e816:	4659      	mov	r1, fp
 801e818:	2900      	cmp	r1, #0
 801e81a:	f280 80b7 	bge.w	801e98c <__kernel_rem_pio2+0x38c>
 801e81e:	4659      	mov	r1, fp
 801e820:	2900      	cmp	r1, #0
 801e822:	f2c0 80d5 	blt.w	801e9d0 <__kernel_rem_pio2+0x3d0>
 801e826:	a86a      	add	r0, sp, #424	; 0x1a8
 801e828:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801e82c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801e910 <__kernel_rem_pio2+0x310>
 801e830:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801e92c <__kernel_rem_pio2+0x32c>
 801e834:	2400      	movs	r4, #0
 801e836:	ebab 0001 	sub.w	r0, fp, r1
 801e83a:	e0be      	b.n	801e9ba <__kernel_rem_pio2+0x3ba>
 801e83c:	2602      	movs	r6, #2
 801e83e:	e787      	b.n	801e750 <__kernel_rem_pio2+0x150>
 801e840:	f8db 2000 	ldr.w	r2, [fp]
 801e844:	b958      	cbnz	r0, 801e85e <__kernel_rem_pio2+0x25e>
 801e846:	b122      	cbz	r2, 801e852 <__kernel_rem_pio2+0x252>
 801e848:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801e84c:	f8cb 2000 	str.w	r2, [fp]
 801e850:	2201      	movs	r2, #1
 801e852:	f10c 0c01 	add.w	ip, ip, #1
 801e856:	f10b 0b04 	add.w	fp, fp, #4
 801e85a:	4610      	mov	r0, r2
 801e85c:	e77f      	b.n	801e75e <__kernel_rem_pio2+0x15e>
 801e85e:	ebae 0202 	sub.w	r2, lr, r2
 801e862:	f8cb 2000 	str.w	r2, [fp]
 801e866:	4602      	mov	r2, r0
 801e868:	e7f3      	b.n	801e852 <__kernel_rem_pio2+0x252>
 801e86a:	f105 3cff 	add.w	ip, r5, #4294967295
 801e86e:	ab06      	add	r3, sp, #24
 801e870:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e874:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801e878:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801e87c:	e778      	b.n	801e770 <__kernel_rem_pio2+0x170>
 801e87e:	f105 3cff 	add.w	ip, r5, #4294967295
 801e882:	ab06      	add	r3, sp, #24
 801e884:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e888:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801e88c:	e7f4      	b.n	801e878 <__kernel_rem_pio2+0x278>
 801e88e:	ab06      	add	r3, sp, #24
 801e890:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801e894:	3801      	subs	r0, #1
 801e896:	431a      	orrs	r2, r3
 801e898:	e7a4      	b.n	801e7e4 <__kernel_rem_pio2+0x1e4>
 801e89a:	f10c 0c01 	add.w	ip, ip, #1
 801e89e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801e8a2:	2800      	cmp	r0, #0
 801e8a4:	d0f9      	beq.n	801e89a <__kernel_rem_pio2+0x29a>
 801e8a6:	9b04      	ldr	r3, [sp, #16]
 801e8a8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801e8ac:	eb0d 0203 	add.w	r2, sp, r3
 801e8b0:	9b01      	ldr	r3, [sp, #4]
 801e8b2:	18e8      	adds	r0, r5, r3
 801e8b4:	ab1a      	add	r3, sp, #104	; 0x68
 801e8b6:	1c6e      	adds	r6, r5, #1
 801e8b8:	3a98      	subs	r2, #152	; 0x98
 801e8ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801e8be:	4465      	add	r5, ip
 801e8c0:	42b5      	cmp	r5, r6
 801e8c2:	f6ff af05 	blt.w	801e6d0 <__kernel_rem_pio2+0xd0>
 801e8c6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801e8ca:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e8ce:	ee07 3a90 	vmov	s15, r3
 801e8d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e8d6:	f04f 0c00 	mov.w	ip, #0
 801e8da:	eca0 7b02 	vstmia	r0!, {d7}
 801e8de:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801e910 <__kernel_rem_pio2+0x310>
 801e8e2:	4680      	mov	r8, r0
 801e8e4:	458c      	cmp	ip, r1
 801e8e6:	dd07      	ble.n	801e8f8 <__kernel_rem_pio2+0x2f8>
 801e8e8:	eca2 7b02 	vstmia	r2!, {d7}
 801e8ec:	3601      	adds	r6, #1
 801e8ee:	e7e7      	b.n	801e8c0 <__kernel_rem_pio2+0x2c0>
 801e8f0:	9a03      	ldr	r2, [sp, #12]
 801e8f2:	f04f 0c01 	mov.w	ip, #1
 801e8f6:	e7d2      	b.n	801e89e <__kernel_rem_pio2+0x29e>
 801e8f8:	ecbe 5b02 	vldmia	lr!, {d5}
 801e8fc:	ed38 6b02 	vldmdb	r8!, {d6}
 801e900:	f10c 0c01 	add.w	ip, ip, #1
 801e904:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e908:	e7ec      	b.n	801e8e4 <__kernel_rem_pio2+0x2e4>
 801e90a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e90e:	e76e      	b.n	801e7ee <__kernel_rem_pio2+0x1ee>
	...
 801e91c:	3e700000 	.word	0x3e700000
 801e920:	00000000 	.word	0x00000000
 801e924:	41700000 	.word	0x41700000
 801e928:	08023650 	.word	0x08023650
 801e92c:	08023610 	.word	0x08023610
 801e930:	4260      	negs	r0, r4
 801e932:	eeb0 0b48 	vmov.f64	d0, d8
 801e936:	f000 f9d3 	bl	801ece0 <scalbn>
 801e93a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801eb18 <__kernel_rem_pio2+0x518>
 801e93e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e946:	db18      	blt.n	801e97a <__kernel_rem_pio2+0x37a>
 801e948:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801eb20 <__kernel_rem_pio2+0x520>
 801e94c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e950:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e954:	aa06      	add	r2, sp, #24
 801e956:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801e95a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801e95e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e962:	f105 0b01 	add.w	fp, r5, #1
 801e966:	ee10 3a10 	vmov	r3, s0
 801e96a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801e96e:	ee17 3a10 	vmov	r3, s14
 801e972:	3418      	adds	r4, #24
 801e974:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801e978:	e740      	b.n	801e7fc <__kernel_rem_pio2+0x1fc>
 801e97a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e97e:	aa06      	add	r2, sp, #24
 801e980:	ee10 3a10 	vmov	r3, s0
 801e984:	46ab      	mov	fp, r5
 801e986:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801e98a:	e737      	b.n	801e7fc <__kernel_rem_pio2+0x1fc>
 801e98c:	ac06      	add	r4, sp, #24
 801e98e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801e992:	9401      	str	r4, [sp, #4]
 801e994:	ee07 4a90 	vmov	s15, r4
 801e998:	3901      	subs	r1, #1
 801e99a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e99e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801e9a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 801e9a6:	ed20 7b02 	vstmdb	r0!, {d7}
 801e9aa:	e735      	b.n	801e818 <__kernel_rem_pio2+0x218>
 801e9ac:	ecbc 5b02 	vldmia	ip!, {d5}
 801e9b0:	ecb5 6b02 	vldmia	r5!, {d6}
 801e9b4:	3401      	adds	r4, #1
 801e9b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e9ba:	454c      	cmp	r4, r9
 801e9bc:	dc01      	bgt.n	801e9c2 <__kernel_rem_pio2+0x3c2>
 801e9be:	4284      	cmp	r4, r0
 801e9c0:	ddf4      	ble.n	801e9ac <__kernel_rem_pio2+0x3ac>
 801e9c2:	ac42      	add	r4, sp, #264	; 0x108
 801e9c4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801e9c8:	ed80 7b00 	vstr	d7, [r0]
 801e9cc:	3901      	subs	r1, #1
 801e9ce:	e727      	b.n	801e820 <__kernel_rem_pio2+0x220>
 801e9d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801e9d2:	2902      	cmp	r1, #2
 801e9d4:	dc0a      	bgt.n	801e9ec <__kernel_rem_pio2+0x3ec>
 801e9d6:	2900      	cmp	r1, #0
 801e9d8:	dc2c      	bgt.n	801ea34 <__kernel_rem_pio2+0x434>
 801e9da:	d045      	beq.n	801ea68 <__kernel_rem_pio2+0x468>
 801e9dc:	f008 0007 	and.w	r0, r8, #7
 801e9e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801e9e4:	ecbd 8b06 	vpop	{d8-d10}
 801e9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801e9ee:	2a03      	cmp	r2, #3
 801e9f0:	d1f4      	bne.n	801e9dc <__kernel_rem_pio2+0x3dc>
 801e9f2:	aa42      	add	r2, sp, #264	; 0x108
 801e9f4:	4413      	add	r3, r2
 801e9f6:	461a      	mov	r2, r3
 801e9f8:	4619      	mov	r1, r3
 801e9fa:	4658      	mov	r0, fp
 801e9fc:	2800      	cmp	r0, #0
 801e9fe:	f1a1 0108 	sub.w	r1, r1, #8
 801ea02:	dc54      	bgt.n	801eaae <__kernel_rem_pio2+0x4ae>
 801ea04:	4659      	mov	r1, fp
 801ea06:	2901      	cmp	r1, #1
 801ea08:	f1a2 0208 	sub.w	r2, r2, #8
 801ea0c:	dc5f      	bgt.n	801eace <__kernel_rem_pio2+0x4ce>
 801ea0e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801eb28 <__kernel_rem_pio2+0x528>
 801ea12:	3308      	adds	r3, #8
 801ea14:	f1bb 0f01 	cmp.w	fp, #1
 801ea18:	dc69      	bgt.n	801eaee <__kernel_rem_pio2+0x4ee>
 801ea1a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801ea1e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801ea22:	2e00      	cmp	r6, #0
 801ea24:	d16a      	bne.n	801eafc <__kernel_rem_pio2+0x4fc>
 801ea26:	ed87 5b00 	vstr	d5, [r7]
 801ea2a:	ed87 6b02 	vstr	d6, [r7, #8]
 801ea2e:	ed87 7b04 	vstr	d7, [r7, #16]
 801ea32:	e7d3      	b.n	801e9dc <__kernel_rem_pio2+0x3dc>
 801ea34:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801eb28 <__kernel_rem_pio2+0x528>
 801ea38:	ab42      	add	r3, sp, #264	; 0x108
 801ea3a:	441a      	add	r2, r3
 801ea3c:	465b      	mov	r3, fp
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	da26      	bge.n	801ea90 <__kernel_rem_pio2+0x490>
 801ea42:	b35e      	cbz	r6, 801ea9c <__kernel_rem_pio2+0x49c>
 801ea44:	eeb1 7b46 	vneg.f64	d7, d6
 801ea48:	ed87 7b00 	vstr	d7, [r7]
 801ea4c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801ea50:	aa44      	add	r2, sp, #272	; 0x110
 801ea52:	2301      	movs	r3, #1
 801ea54:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ea58:	459b      	cmp	fp, r3
 801ea5a:	da22      	bge.n	801eaa2 <__kernel_rem_pio2+0x4a2>
 801ea5c:	b10e      	cbz	r6, 801ea62 <__kernel_rem_pio2+0x462>
 801ea5e:	eeb1 7b47 	vneg.f64	d7, d7
 801ea62:	ed87 7b02 	vstr	d7, [r7, #8]
 801ea66:	e7b9      	b.n	801e9dc <__kernel_rem_pio2+0x3dc>
 801ea68:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801eb28 <__kernel_rem_pio2+0x528>
 801ea6c:	ab42      	add	r3, sp, #264	; 0x108
 801ea6e:	441a      	add	r2, r3
 801ea70:	f1bb 0f00 	cmp.w	fp, #0
 801ea74:	da05      	bge.n	801ea82 <__kernel_rem_pio2+0x482>
 801ea76:	b10e      	cbz	r6, 801ea7c <__kernel_rem_pio2+0x47c>
 801ea78:	eeb1 7b47 	vneg.f64	d7, d7
 801ea7c:	ed87 7b00 	vstr	d7, [r7]
 801ea80:	e7ac      	b.n	801e9dc <__kernel_rem_pio2+0x3dc>
 801ea82:	ed32 6b02 	vldmdb	r2!, {d6}
 801ea86:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ea8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ea8e:	e7ef      	b.n	801ea70 <__kernel_rem_pio2+0x470>
 801ea90:	ed32 7b02 	vldmdb	r2!, {d7}
 801ea94:	3b01      	subs	r3, #1
 801ea96:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ea9a:	e7d0      	b.n	801ea3e <__kernel_rem_pio2+0x43e>
 801ea9c:	eeb0 7b46 	vmov.f64	d7, d6
 801eaa0:	e7d2      	b.n	801ea48 <__kernel_rem_pio2+0x448>
 801eaa2:	ecb2 6b02 	vldmia	r2!, {d6}
 801eaa6:	3301      	adds	r3, #1
 801eaa8:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eaac:	e7d4      	b.n	801ea58 <__kernel_rem_pio2+0x458>
 801eaae:	ed91 7b00 	vldr	d7, [r1]
 801eab2:	ed91 5b02 	vldr	d5, [r1, #8]
 801eab6:	3801      	subs	r0, #1
 801eab8:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eabc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eac0:	ed81 6b00 	vstr	d6, [r1]
 801eac4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eac8:	ed81 7b02 	vstr	d7, [r1, #8]
 801eacc:	e796      	b.n	801e9fc <__kernel_rem_pio2+0x3fc>
 801eace:	ed92 7b00 	vldr	d7, [r2]
 801ead2:	ed92 5b02 	vldr	d5, [r2, #8]
 801ead6:	3901      	subs	r1, #1
 801ead8:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eadc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eae0:	ed82 6b00 	vstr	d6, [r2]
 801eae4:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eae8:	ed82 7b02 	vstr	d7, [r2, #8]
 801eaec:	e78b      	b.n	801ea06 <__kernel_rem_pio2+0x406>
 801eaee:	ed33 6b02 	vldmdb	r3!, {d6}
 801eaf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eaf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eafa:	e78b      	b.n	801ea14 <__kernel_rem_pio2+0x414>
 801eafc:	eeb1 5b45 	vneg.f64	d5, d5
 801eb00:	eeb1 6b46 	vneg.f64	d6, d6
 801eb04:	ed87 5b00 	vstr	d5, [r7]
 801eb08:	eeb1 7b47 	vneg.f64	d7, d7
 801eb0c:	ed87 6b02 	vstr	d6, [r7, #8]
 801eb10:	e78d      	b.n	801ea2e <__kernel_rem_pio2+0x42e>
 801eb12:	bf00      	nop
 801eb14:	f3af 8000 	nop.w
 801eb18:	00000000 	.word	0x00000000
 801eb1c:	41700000 	.word	0x41700000
 801eb20:	00000000 	.word	0x00000000
 801eb24:	3e700000 	.word	0x3e700000
	...

0801eb30 <__kernel_sin>:
 801eb30:	ee10 3a90 	vmov	r3, s1
 801eb34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801eb38:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801eb3c:	da04      	bge.n	801eb48 <__kernel_sin+0x18>
 801eb3e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801eb42:	ee17 3a90 	vmov	r3, s15
 801eb46:	b35b      	cbz	r3, 801eba0 <__kernel_sin+0x70>
 801eb48:	ee20 6b00 	vmul.f64	d6, d0, d0
 801eb4c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801eb50:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801eba8 <__kernel_sin+0x78>
 801eb54:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ebb0 <__kernel_sin+0x80>
 801eb58:	eea6 4b07 	vfma.f64	d4, d6, d7
 801eb5c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ebb8 <__kernel_sin+0x88>
 801eb60:	eea4 7b06 	vfma.f64	d7, d4, d6
 801eb64:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ebc0 <__kernel_sin+0x90>
 801eb68:	eea7 4b06 	vfma.f64	d4, d7, d6
 801eb6c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ebc8 <__kernel_sin+0x98>
 801eb70:	eea4 7b06 	vfma.f64	d7, d4, d6
 801eb74:	b930      	cbnz	r0, 801eb84 <__kernel_sin+0x54>
 801eb76:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ebd0 <__kernel_sin+0xa0>
 801eb7a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801eb7e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801eb82:	4770      	bx	lr
 801eb84:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801eb88:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801eb8c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801eb90:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801eb94:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ebd8 <__kernel_sin+0xa8>
 801eb98:	eea5 1b07 	vfma.f64	d1, d5, d7
 801eb9c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801eba0:	4770      	bx	lr
 801eba2:	bf00      	nop
 801eba4:	f3af 8000 	nop.w
 801eba8:	5acfd57c 	.word	0x5acfd57c
 801ebac:	3de5d93a 	.word	0x3de5d93a
 801ebb0:	8a2b9ceb 	.word	0x8a2b9ceb
 801ebb4:	be5ae5e6 	.word	0xbe5ae5e6
 801ebb8:	57b1fe7d 	.word	0x57b1fe7d
 801ebbc:	3ec71de3 	.word	0x3ec71de3
 801ebc0:	19c161d5 	.word	0x19c161d5
 801ebc4:	bf2a01a0 	.word	0xbf2a01a0
 801ebc8:	1110f8a6 	.word	0x1110f8a6
 801ebcc:	3f811111 	.word	0x3f811111
 801ebd0:	55555549 	.word	0x55555549
 801ebd4:	bfc55555 	.word	0xbfc55555
 801ebd8:	55555549 	.word	0x55555549
 801ebdc:	3fc55555 	.word	0x3fc55555

0801ebe0 <fabs>:
 801ebe0:	ec51 0b10 	vmov	r0, r1, d0
 801ebe4:	ee10 2a10 	vmov	r2, s0
 801ebe8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ebec:	ec43 2b10 	vmov	d0, r2, r3
 801ebf0:	4770      	bx	lr
 801ebf2:	0000      	movs	r0, r0
 801ebf4:	0000      	movs	r0, r0
	...

0801ebf8 <floor>:
 801ebf8:	ee10 1a90 	vmov	r1, s1
 801ebfc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ec00:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801ec04:	2b13      	cmp	r3, #19
 801ec06:	b530      	push	{r4, r5, lr}
 801ec08:	ee10 0a10 	vmov	r0, s0
 801ec0c:	ee10 5a10 	vmov	r5, s0
 801ec10:	dc31      	bgt.n	801ec76 <floor+0x7e>
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	da15      	bge.n	801ec42 <floor+0x4a>
 801ec16:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ecd0 <floor+0xd8>
 801ec1a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ec1e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec26:	dd07      	ble.n	801ec38 <floor+0x40>
 801ec28:	2900      	cmp	r1, #0
 801ec2a:	da4e      	bge.n	801ecca <floor+0xd2>
 801ec2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ec30:	4318      	orrs	r0, r3
 801ec32:	d001      	beq.n	801ec38 <floor+0x40>
 801ec34:	4928      	ldr	r1, [pc, #160]	; (801ecd8 <floor+0xe0>)
 801ec36:	2000      	movs	r0, #0
 801ec38:	460b      	mov	r3, r1
 801ec3a:	4602      	mov	r2, r0
 801ec3c:	ec43 2b10 	vmov	d0, r2, r3
 801ec40:	e020      	b.n	801ec84 <floor+0x8c>
 801ec42:	4a26      	ldr	r2, [pc, #152]	; (801ecdc <floor+0xe4>)
 801ec44:	411a      	asrs	r2, r3
 801ec46:	ea01 0402 	and.w	r4, r1, r2
 801ec4a:	4304      	orrs	r4, r0
 801ec4c:	d01a      	beq.n	801ec84 <floor+0x8c>
 801ec4e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801ecd0 <floor+0xd8>
 801ec52:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ec56:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec5e:	ddeb      	ble.n	801ec38 <floor+0x40>
 801ec60:	2900      	cmp	r1, #0
 801ec62:	bfbe      	ittt	lt
 801ec64:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801ec68:	fa40 f303 	asrlt.w	r3, r0, r3
 801ec6c:	18c9      	addlt	r1, r1, r3
 801ec6e:	ea21 0102 	bic.w	r1, r1, r2
 801ec72:	2000      	movs	r0, #0
 801ec74:	e7e0      	b.n	801ec38 <floor+0x40>
 801ec76:	2b33      	cmp	r3, #51	; 0x33
 801ec78:	dd05      	ble.n	801ec86 <floor+0x8e>
 801ec7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ec7e:	d101      	bne.n	801ec84 <floor+0x8c>
 801ec80:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ec84:	bd30      	pop	{r4, r5, pc}
 801ec86:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801ec8a:	f04f 32ff 	mov.w	r2, #4294967295
 801ec8e:	40e2      	lsrs	r2, r4
 801ec90:	4202      	tst	r2, r0
 801ec92:	d0f7      	beq.n	801ec84 <floor+0x8c>
 801ec94:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801ecd0 <floor+0xd8>
 801ec98:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ec9c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801eca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eca4:	ddc8      	ble.n	801ec38 <floor+0x40>
 801eca6:	2900      	cmp	r1, #0
 801eca8:	da02      	bge.n	801ecb0 <floor+0xb8>
 801ecaa:	2b14      	cmp	r3, #20
 801ecac:	d103      	bne.n	801ecb6 <floor+0xbe>
 801ecae:	3101      	adds	r1, #1
 801ecb0:	ea20 0002 	bic.w	r0, r0, r2
 801ecb4:	e7c0      	b.n	801ec38 <floor+0x40>
 801ecb6:	2401      	movs	r4, #1
 801ecb8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ecbc:	fa04 f303 	lsl.w	r3, r4, r3
 801ecc0:	4418      	add	r0, r3
 801ecc2:	42a8      	cmp	r0, r5
 801ecc4:	bf38      	it	cc
 801ecc6:	1909      	addcc	r1, r1, r4
 801ecc8:	e7f2      	b.n	801ecb0 <floor+0xb8>
 801ecca:	2000      	movs	r0, #0
 801eccc:	4601      	mov	r1, r0
 801ecce:	e7b3      	b.n	801ec38 <floor+0x40>
 801ecd0:	8800759c 	.word	0x8800759c
 801ecd4:	7e37e43c 	.word	0x7e37e43c
 801ecd8:	bff00000 	.word	0xbff00000
 801ecdc:	000fffff 	.word	0x000fffff

0801ece0 <scalbn>:
 801ece0:	ee10 1a90 	vmov	r1, s1
 801ece4:	b510      	push	{r4, lr}
 801ece6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ecea:	b98c      	cbnz	r4, 801ed10 <scalbn+0x30>
 801ecec:	ee10 3a10 	vmov	r3, s0
 801ecf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ecf4:	430b      	orrs	r3, r1
 801ecf6:	d011      	beq.n	801ed1c <scalbn+0x3c>
 801ecf8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801edc0 <scalbn+0xe0>
 801ecfc:	4b3c      	ldr	r3, [pc, #240]	; (801edf0 <scalbn+0x110>)
 801ecfe:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ed02:	4298      	cmp	r0, r3
 801ed04:	da0b      	bge.n	801ed1e <scalbn+0x3e>
 801ed06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801edc8 <scalbn+0xe8>
 801ed0a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ed0e:	e005      	b.n	801ed1c <scalbn+0x3c>
 801ed10:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ed14:	429c      	cmp	r4, r3
 801ed16:	d107      	bne.n	801ed28 <scalbn+0x48>
 801ed18:	ee30 0b00 	vadd.f64	d0, d0, d0
 801ed1c:	bd10      	pop	{r4, pc}
 801ed1e:	ee10 1a90 	vmov	r1, s1
 801ed22:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801ed26:	3c36      	subs	r4, #54	; 0x36
 801ed28:	4404      	add	r4, r0
 801ed2a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801ed2e:	429c      	cmp	r4, r3
 801ed30:	dd0d      	ble.n	801ed4e <scalbn+0x6e>
 801ed32:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801edd0 <scalbn+0xf0>
 801ed36:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801edd8 <scalbn+0xf8>
 801ed3a:	eeb0 6b47 	vmov.f64	d6, d7
 801ed3e:	ee10 3a90 	vmov	r3, s1
 801ed42:	2b00      	cmp	r3, #0
 801ed44:	fe27 7b05 	vselge.f64	d7, d7, d5
 801ed48:	ee27 0b06 	vmul.f64	d0, d7, d6
 801ed4c:	e7e6      	b.n	801ed1c <scalbn+0x3c>
 801ed4e:	2c00      	cmp	r4, #0
 801ed50:	dd0a      	ble.n	801ed68 <scalbn+0x88>
 801ed52:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801ed56:	ec53 2b10 	vmov	r2, r3, d0
 801ed5a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801ed5e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801ed62:	ec43 2b10 	vmov	d0, r2, r3
 801ed66:	e7d9      	b.n	801ed1c <scalbn+0x3c>
 801ed68:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801ed6c:	da19      	bge.n	801eda2 <scalbn+0xc2>
 801ed6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ed72:	4298      	cmp	r0, r3
 801ed74:	ee10 3a90 	vmov	r3, s1
 801ed78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ed7c:	dd09      	ble.n	801ed92 <scalbn+0xb2>
 801ed7e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801edd0 <scalbn+0xf0>
 801ed82:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801edd8 <scalbn+0xf8>
 801ed86:	eeb0 7b40 	vmov.f64	d7, d0
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801ed90:	e7bb      	b.n	801ed0a <scalbn+0x2a>
 801ed92:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801edc8 <scalbn+0xe8>
 801ed96:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801ede0 <scalbn+0x100>
 801ed9a:	eeb0 7b40 	vmov.f64	d7, d0
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	e7f4      	b.n	801ed8c <scalbn+0xac>
 801eda2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801eda6:	ec53 2b10 	vmov	r2, r3, d0
 801edaa:	3436      	adds	r4, #54	; 0x36
 801edac:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801edb0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801edb4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801ede8 <scalbn+0x108>
 801edb8:	ec43 2b10 	vmov	d0, r2, r3
 801edbc:	e7a5      	b.n	801ed0a <scalbn+0x2a>
 801edbe:	bf00      	nop
 801edc0:	00000000 	.word	0x00000000
 801edc4:	43500000 	.word	0x43500000
 801edc8:	c2f8f359 	.word	0xc2f8f359
 801edcc:	01a56e1f 	.word	0x01a56e1f
 801edd0:	8800759c 	.word	0x8800759c
 801edd4:	7e37e43c 	.word	0x7e37e43c
 801edd8:	8800759c 	.word	0x8800759c
 801eddc:	fe37e43c 	.word	0xfe37e43c
 801ede0:	c2f8f359 	.word	0xc2f8f359
 801ede4:	81a56e1f 	.word	0x81a56e1f
 801ede8:	00000000 	.word	0x00000000
 801edec:	3c900000 	.word	0x3c900000
 801edf0:	ffff3cb0 	.word	0xffff3cb0

0801edf4 <abort>:
 801edf4:	b508      	push	{r3, lr}
 801edf6:	2006      	movs	r0, #6
 801edf8:	f000 fef8 	bl	801fbec <raise>
 801edfc:	2001      	movs	r0, #1
 801edfe:	f7e2 fbef 	bl	80015e0 <_exit>
	...

0801ee04 <__assert_func>:
 801ee04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ee06:	4614      	mov	r4, r2
 801ee08:	461a      	mov	r2, r3
 801ee0a:	4b09      	ldr	r3, [pc, #36]	; (801ee30 <__assert_func+0x2c>)
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	4605      	mov	r5, r0
 801ee10:	68d8      	ldr	r0, [r3, #12]
 801ee12:	b14c      	cbz	r4, 801ee28 <__assert_func+0x24>
 801ee14:	4b07      	ldr	r3, [pc, #28]	; (801ee34 <__assert_func+0x30>)
 801ee16:	9100      	str	r1, [sp, #0]
 801ee18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ee1c:	4906      	ldr	r1, [pc, #24]	; (801ee38 <__assert_func+0x34>)
 801ee1e:	462b      	mov	r3, r5
 801ee20:	f000 f8fe 	bl	801f020 <fiprintf>
 801ee24:	f7ff ffe6 	bl	801edf4 <abort>
 801ee28:	4b04      	ldr	r3, [pc, #16]	; (801ee3c <__assert_func+0x38>)
 801ee2a:	461c      	mov	r4, r3
 801ee2c:	e7f3      	b.n	801ee16 <__assert_func+0x12>
 801ee2e:	bf00      	nop
 801ee30:	240000c4 	.word	0x240000c4
 801ee34:	08023660 	.word	0x08023660
 801ee38:	0802366d 	.word	0x0802366d
 801ee3c:	0802369b 	.word	0x0802369b

0801ee40 <atexit>:
 801ee40:	2300      	movs	r3, #0
 801ee42:	4601      	mov	r1, r0
 801ee44:	461a      	mov	r2, r3
 801ee46:	4618      	mov	r0, r3
 801ee48:	f001 ba40 	b.w	80202cc <__register_exitproc>

0801ee4c <__cxa_atexit>:
 801ee4c:	b510      	push	{r4, lr}
 801ee4e:	4c05      	ldr	r4, [pc, #20]	; (801ee64 <__cxa_atexit+0x18>)
 801ee50:	4613      	mov	r3, r2
 801ee52:	b12c      	cbz	r4, 801ee60 <__cxa_atexit+0x14>
 801ee54:	460a      	mov	r2, r1
 801ee56:	4601      	mov	r1, r0
 801ee58:	2002      	movs	r0, #2
 801ee5a:	f001 fa37 	bl	80202cc <__register_exitproc>
 801ee5e:	bd10      	pop	{r4, pc}
 801ee60:	4620      	mov	r0, r4
 801ee62:	e7fc      	b.n	801ee5e <__cxa_atexit+0x12>
 801ee64:	080202cd 	.word	0x080202cd

0801ee68 <__errno>:
 801ee68:	4b01      	ldr	r3, [pc, #4]	; (801ee70 <__errno+0x8>)
 801ee6a:	6818      	ldr	r0, [r3, #0]
 801ee6c:	4770      	bx	lr
 801ee6e:	bf00      	nop
 801ee70:	240000c4 	.word	0x240000c4

0801ee74 <std>:
 801ee74:	2300      	movs	r3, #0
 801ee76:	b510      	push	{r4, lr}
 801ee78:	4604      	mov	r4, r0
 801ee7a:	e9c0 3300 	strd	r3, r3, [r0]
 801ee7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ee82:	6083      	str	r3, [r0, #8]
 801ee84:	8181      	strh	r1, [r0, #12]
 801ee86:	6643      	str	r3, [r0, #100]	; 0x64
 801ee88:	81c2      	strh	r2, [r0, #14]
 801ee8a:	6183      	str	r3, [r0, #24]
 801ee8c:	4619      	mov	r1, r3
 801ee8e:	2208      	movs	r2, #8
 801ee90:	305c      	adds	r0, #92	; 0x5c
 801ee92:	f000 fa33 	bl	801f2fc <memset>
 801ee96:	4b05      	ldr	r3, [pc, #20]	; (801eeac <std+0x38>)
 801ee98:	6263      	str	r3, [r4, #36]	; 0x24
 801ee9a:	4b05      	ldr	r3, [pc, #20]	; (801eeb0 <std+0x3c>)
 801ee9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ee9e:	4b05      	ldr	r3, [pc, #20]	; (801eeb4 <std+0x40>)
 801eea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801eea2:	4b05      	ldr	r3, [pc, #20]	; (801eeb8 <std+0x44>)
 801eea4:	6224      	str	r4, [r4, #32]
 801eea6:	6323      	str	r3, [r4, #48]	; 0x30
 801eea8:	bd10      	pop	{r4, pc}
 801eeaa:	bf00      	nop
 801eeac:	0801fc25 	.word	0x0801fc25
 801eeb0:	0801fc4b 	.word	0x0801fc4b
 801eeb4:	0801fc83 	.word	0x0801fc83
 801eeb8:	0801fca7 	.word	0x0801fca7

0801eebc <_cleanup_r>:
 801eebc:	4901      	ldr	r1, [pc, #4]	; (801eec4 <_cleanup_r+0x8>)
 801eebe:	f000 b8c1 	b.w	801f044 <_fwalk_reent>
 801eec2:	bf00      	nop
 801eec4:	080204bd 	.word	0x080204bd

0801eec8 <__sfmoreglue>:
 801eec8:	b570      	push	{r4, r5, r6, lr}
 801eeca:	2268      	movs	r2, #104	; 0x68
 801eecc:	1e4d      	subs	r5, r1, #1
 801eece:	4355      	muls	r5, r2
 801eed0:	460e      	mov	r6, r1
 801eed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801eed6:	f000 fa85 	bl	801f3e4 <_malloc_r>
 801eeda:	4604      	mov	r4, r0
 801eedc:	b140      	cbz	r0, 801eef0 <__sfmoreglue+0x28>
 801eede:	2100      	movs	r1, #0
 801eee0:	e9c0 1600 	strd	r1, r6, [r0]
 801eee4:	300c      	adds	r0, #12
 801eee6:	60a0      	str	r0, [r4, #8]
 801eee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801eeec:	f000 fa06 	bl	801f2fc <memset>
 801eef0:	4620      	mov	r0, r4
 801eef2:	bd70      	pop	{r4, r5, r6, pc}

0801eef4 <__sfp_lock_acquire>:
 801eef4:	4801      	ldr	r0, [pc, #4]	; (801eefc <__sfp_lock_acquire+0x8>)
 801eef6:	f000 b9df 	b.w	801f2b8 <__retarget_lock_acquire_recursive>
 801eefa:	bf00      	nop
 801eefc:	2400f677 	.word	0x2400f677

0801ef00 <__sfp_lock_release>:
 801ef00:	4801      	ldr	r0, [pc, #4]	; (801ef08 <__sfp_lock_release+0x8>)
 801ef02:	f000 b9db 	b.w	801f2bc <__retarget_lock_release_recursive>
 801ef06:	bf00      	nop
 801ef08:	2400f677 	.word	0x2400f677

0801ef0c <__sinit_lock_acquire>:
 801ef0c:	4801      	ldr	r0, [pc, #4]	; (801ef14 <__sinit_lock_acquire+0x8>)
 801ef0e:	f000 b9d3 	b.w	801f2b8 <__retarget_lock_acquire_recursive>
 801ef12:	bf00      	nop
 801ef14:	2400f678 	.word	0x2400f678

0801ef18 <__sinit_lock_release>:
 801ef18:	4801      	ldr	r0, [pc, #4]	; (801ef20 <__sinit_lock_release+0x8>)
 801ef1a:	f000 b9cf 	b.w	801f2bc <__retarget_lock_release_recursive>
 801ef1e:	bf00      	nop
 801ef20:	2400f678 	.word	0x2400f678

0801ef24 <__sinit>:
 801ef24:	b510      	push	{r4, lr}
 801ef26:	4604      	mov	r4, r0
 801ef28:	f7ff fff0 	bl	801ef0c <__sinit_lock_acquire>
 801ef2c:	69a3      	ldr	r3, [r4, #24]
 801ef2e:	b11b      	cbz	r3, 801ef38 <__sinit+0x14>
 801ef30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef34:	f7ff bff0 	b.w	801ef18 <__sinit_lock_release>
 801ef38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ef3c:	6523      	str	r3, [r4, #80]	; 0x50
 801ef3e:	4b13      	ldr	r3, [pc, #76]	; (801ef8c <__sinit+0x68>)
 801ef40:	4a13      	ldr	r2, [pc, #76]	; (801ef90 <__sinit+0x6c>)
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	62a2      	str	r2, [r4, #40]	; 0x28
 801ef46:	42a3      	cmp	r3, r4
 801ef48:	bf04      	itt	eq
 801ef4a:	2301      	moveq	r3, #1
 801ef4c:	61a3      	streq	r3, [r4, #24]
 801ef4e:	4620      	mov	r0, r4
 801ef50:	f000 f820 	bl	801ef94 <__sfp>
 801ef54:	6060      	str	r0, [r4, #4]
 801ef56:	4620      	mov	r0, r4
 801ef58:	f000 f81c 	bl	801ef94 <__sfp>
 801ef5c:	60a0      	str	r0, [r4, #8]
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f000 f818 	bl	801ef94 <__sfp>
 801ef64:	2200      	movs	r2, #0
 801ef66:	60e0      	str	r0, [r4, #12]
 801ef68:	2104      	movs	r1, #4
 801ef6a:	6860      	ldr	r0, [r4, #4]
 801ef6c:	f7ff ff82 	bl	801ee74 <std>
 801ef70:	68a0      	ldr	r0, [r4, #8]
 801ef72:	2201      	movs	r2, #1
 801ef74:	2109      	movs	r1, #9
 801ef76:	f7ff ff7d 	bl	801ee74 <std>
 801ef7a:	68e0      	ldr	r0, [r4, #12]
 801ef7c:	2202      	movs	r2, #2
 801ef7e:	2112      	movs	r1, #18
 801ef80:	f7ff ff78 	bl	801ee74 <std>
 801ef84:	2301      	movs	r3, #1
 801ef86:	61a3      	str	r3, [r4, #24]
 801ef88:	e7d2      	b.n	801ef30 <__sinit+0xc>
 801ef8a:	bf00      	nop
 801ef8c:	080236fc 	.word	0x080236fc
 801ef90:	0801eebd 	.word	0x0801eebd

0801ef94 <__sfp>:
 801ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef96:	4607      	mov	r7, r0
 801ef98:	f7ff ffac 	bl	801eef4 <__sfp_lock_acquire>
 801ef9c:	4b1e      	ldr	r3, [pc, #120]	; (801f018 <__sfp+0x84>)
 801ef9e:	681e      	ldr	r6, [r3, #0]
 801efa0:	69b3      	ldr	r3, [r6, #24]
 801efa2:	b913      	cbnz	r3, 801efaa <__sfp+0x16>
 801efa4:	4630      	mov	r0, r6
 801efa6:	f7ff ffbd 	bl	801ef24 <__sinit>
 801efaa:	3648      	adds	r6, #72	; 0x48
 801efac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801efb0:	3b01      	subs	r3, #1
 801efb2:	d503      	bpl.n	801efbc <__sfp+0x28>
 801efb4:	6833      	ldr	r3, [r6, #0]
 801efb6:	b30b      	cbz	r3, 801effc <__sfp+0x68>
 801efb8:	6836      	ldr	r6, [r6, #0]
 801efba:	e7f7      	b.n	801efac <__sfp+0x18>
 801efbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801efc0:	b9d5      	cbnz	r5, 801eff8 <__sfp+0x64>
 801efc2:	4b16      	ldr	r3, [pc, #88]	; (801f01c <__sfp+0x88>)
 801efc4:	60e3      	str	r3, [r4, #12]
 801efc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801efca:	6665      	str	r5, [r4, #100]	; 0x64
 801efcc:	f000 f972 	bl	801f2b4 <__retarget_lock_init_recursive>
 801efd0:	f7ff ff96 	bl	801ef00 <__sfp_lock_release>
 801efd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801efd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801efdc:	6025      	str	r5, [r4, #0]
 801efde:	61a5      	str	r5, [r4, #24]
 801efe0:	2208      	movs	r2, #8
 801efe2:	4629      	mov	r1, r5
 801efe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801efe8:	f000 f988 	bl	801f2fc <memset>
 801efec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801eff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801eff4:	4620      	mov	r0, r4
 801eff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eff8:	3468      	adds	r4, #104	; 0x68
 801effa:	e7d9      	b.n	801efb0 <__sfp+0x1c>
 801effc:	2104      	movs	r1, #4
 801effe:	4638      	mov	r0, r7
 801f000:	f7ff ff62 	bl	801eec8 <__sfmoreglue>
 801f004:	4604      	mov	r4, r0
 801f006:	6030      	str	r0, [r6, #0]
 801f008:	2800      	cmp	r0, #0
 801f00a:	d1d5      	bne.n	801efb8 <__sfp+0x24>
 801f00c:	f7ff ff78 	bl	801ef00 <__sfp_lock_release>
 801f010:	230c      	movs	r3, #12
 801f012:	603b      	str	r3, [r7, #0]
 801f014:	e7ee      	b.n	801eff4 <__sfp+0x60>
 801f016:	bf00      	nop
 801f018:	080236fc 	.word	0x080236fc
 801f01c:	ffff0001 	.word	0xffff0001

0801f020 <fiprintf>:
 801f020:	b40e      	push	{r1, r2, r3}
 801f022:	b503      	push	{r0, r1, lr}
 801f024:	4601      	mov	r1, r0
 801f026:	ab03      	add	r3, sp, #12
 801f028:	4805      	ldr	r0, [pc, #20]	; (801f040 <fiprintf+0x20>)
 801f02a:	f853 2b04 	ldr.w	r2, [r3], #4
 801f02e:	6800      	ldr	r0, [r0, #0]
 801f030:	9301      	str	r3, [sp, #4]
 801f032:	f000 fa75 	bl	801f520 <_vfiprintf_r>
 801f036:	b002      	add	sp, #8
 801f038:	f85d eb04 	ldr.w	lr, [sp], #4
 801f03c:	b003      	add	sp, #12
 801f03e:	4770      	bx	lr
 801f040:	240000c4 	.word	0x240000c4

0801f044 <_fwalk_reent>:
 801f044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f048:	4606      	mov	r6, r0
 801f04a:	4688      	mov	r8, r1
 801f04c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f050:	2700      	movs	r7, #0
 801f052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f056:	f1b9 0901 	subs.w	r9, r9, #1
 801f05a:	d505      	bpl.n	801f068 <_fwalk_reent+0x24>
 801f05c:	6824      	ldr	r4, [r4, #0]
 801f05e:	2c00      	cmp	r4, #0
 801f060:	d1f7      	bne.n	801f052 <_fwalk_reent+0xe>
 801f062:	4638      	mov	r0, r7
 801f064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f068:	89ab      	ldrh	r3, [r5, #12]
 801f06a:	2b01      	cmp	r3, #1
 801f06c:	d907      	bls.n	801f07e <_fwalk_reent+0x3a>
 801f06e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f072:	3301      	adds	r3, #1
 801f074:	d003      	beq.n	801f07e <_fwalk_reent+0x3a>
 801f076:	4629      	mov	r1, r5
 801f078:	4630      	mov	r0, r6
 801f07a:	47c0      	blx	r8
 801f07c:	4307      	orrs	r7, r0
 801f07e:	3568      	adds	r5, #104	; 0x68
 801f080:	e7e9      	b.n	801f056 <_fwalk_reent+0x12>
	...

0801f084 <__libc_init_array>:
 801f084:	b570      	push	{r4, r5, r6, lr}
 801f086:	4d0d      	ldr	r5, [pc, #52]	; (801f0bc <__libc_init_array+0x38>)
 801f088:	4c0d      	ldr	r4, [pc, #52]	; (801f0c0 <__libc_init_array+0x3c>)
 801f08a:	1b64      	subs	r4, r4, r5
 801f08c:	10a4      	asrs	r4, r4, #2
 801f08e:	2600      	movs	r6, #0
 801f090:	42a6      	cmp	r6, r4
 801f092:	d109      	bne.n	801f0a8 <__libc_init_array+0x24>
 801f094:	4d0b      	ldr	r5, [pc, #44]	; (801f0c4 <__libc_init_array+0x40>)
 801f096:	4c0c      	ldr	r4, [pc, #48]	; (801f0c8 <__libc_init_array+0x44>)
 801f098:	f002 f91c 	bl	80212d4 <_init>
 801f09c:	1b64      	subs	r4, r4, r5
 801f09e:	10a4      	asrs	r4, r4, #2
 801f0a0:	2600      	movs	r6, #0
 801f0a2:	42a6      	cmp	r6, r4
 801f0a4:	d105      	bne.n	801f0b2 <__libc_init_array+0x2e>
 801f0a6:	bd70      	pop	{r4, r5, r6, pc}
 801f0a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0ac:	4798      	blx	r3
 801f0ae:	3601      	adds	r6, #1
 801f0b0:	e7ee      	b.n	801f090 <__libc_init_array+0xc>
 801f0b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801f0b6:	4798      	blx	r3
 801f0b8:	3601      	adds	r6, #1
 801f0ba:	e7f2      	b.n	801f0a2 <__libc_init_array+0x1e>
 801f0bc:	080265a0 	.word	0x080265a0
 801f0c0:	080265a0 	.word	0x080265a0
 801f0c4:	080265a0 	.word	0x080265a0
 801f0c8:	080265b8 	.word	0x080265b8

0801f0cc <localtime_r>:
 801f0cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f0d0:	4680      	mov	r8, r0
 801f0d2:	9101      	str	r1, [sp, #4]
 801f0d4:	f001 fa72 	bl	80205bc <__gettzinfo>
 801f0d8:	9901      	ldr	r1, [sp, #4]
 801f0da:	4605      	mov	r5, r0
 801f0dc:	4640      	mov	r0, r8
 801f0de:	f001 fa71 	bl	80205c4 <gmtime_r>
 801f0e2:	6943      	ldr	r3, [r0, #20]
 801f0e4:	0799      	lsls	r1, r3, #30
 801f0e6:	4604      	mov	r4, r0
 801f0e8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 801f0ec:	d105      	bne.n	801f0fa <localtime_r+0x2e>
 801f0ee:	2264      	movs	r2, #100	; 0x64
 801f0f0:	fb97 f3f2 	sdiv	r3, r7, r2
 801f0f4:	fb02 7313 	mls	r3, r2, r3, r7
 801f0f8:	bb73      	cbnz	r3, 801f158 <localtime_r+0x8c>
 801f0fa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f0fe:	fb97 f6f3 	sdiv	r6, r7, r3
 801f102:	fb03 7616 	mls	r6, r3, r6, r7
 801f106:	fab6 f386 	clz	r3, r6
 801f10a:	095b      	lsrs	r3, r3, #5
 801f10c:	4e67      	ldr	r6, [pc, #412]	; (801f2ac <localtime_r+0x1e0>)
 801f10e:	2230      	movs	r2, #48	; 0x30
 801f110:	fb02 6603 	mla	r6, r2, r3, r6
 801f114:	f000 fe76 	bl	801fe04 <__tz_lock>
 801f118:	f000 fe80 	bl	801fe1c <_tzset_unlocked>
 801f11c:	4b64      	ldr	r3, [pc, #400]	; (801f2b0 <localtime_r+0x1e4>)
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	b34b      	cbz	r3, 801f176 <localtime_r+0xaa>
 801f122:	686b      	ldr	r3, [r5, #4]
 801f124:	42bb      	cmp	r3, r7
 801f126:	d119      	bne.n	801f15c <localtime_r+0x90>
 801f128:	682f      	ldr	r7, [r5, #0]
 801f12a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801f12e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801f132:	b9df      	cbnz	r7, 801f16c <localtime_r+0xa0>
 801f134:	4282      	cmp	r2, r0
 801f136:	eb73 0101 	sbcs.w	r1, r3, r1
 801f13a:	da23      	bge.n	801f184 <localtime_r+0xb8>
 801f13c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801f140:	4282      	cmp	r2, r0
 801f142:	eb73 0701 	sbcs.w	r7, r3, r1
 801f146:	bfb4      	ite	lt
 801f148:	2701      	movlt	r7, #1
 801f14a:	2700      	movge	r7, #0
 801f14c:	4282      	cmp	r2, r0
 801f14e:	418b      	sbcs	r3, r1
 801f150:	6227      	str	r7, [r4, #32]
 801f152:	db19      	blt.n	801f188 <localtime_r+0xbc>
 801f154:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801f156:	e018      	b.n	801f18a <localtime_r+0xbe>
 801f158:	2301      	movs	r3, #1
 801f15a:	e7d7      	b.n	801f10c <localtime_r+0x40>
 801f15c:	4638      	mov	r0, r7
 801f15e:	f000 fda7 	bl	801fcb0 <__tzcalc_limits>
 801f162:	2800      	cmp	r0, #0
 801f164:	d1e0      	bne.n	801f128 <localtime_r+0x5c>
 801f166:	f04f 33ff 	mov.w	r3, #4294967295
 801f16a:	e004      	b.n	801f176 <localtime_r+0xaa>
 801f16c:	4282      	cmp	r2, r0
 801f16e:	eb73 0101 	sbcs.w	r1, r3, r1
 801f172:	da02      	bge.n	801f17a <localtime_r+0xae>
 801f174:	2300      	movs	r3, #0
 801f176:	6223      	str	r3, [r4, #32]
 801f178:	e7ec      	b.n	801f154 <localtime_r+0x88>
 801f17a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801f17e:	4282      	cmp	r2, r0
 801f180:	418b      	sbcs	r3, r1
 801f182:	daf7      	bge.n	801f174 <localtime_r+0xa8>
 801f184:	2301      	movs	r3, #1
 801f186:	6223      	str	r3, [r4, #32]
 801f188:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801f18a:	6861      	ldr	r1, [r4, #4]
 801f18c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801f190:	203c      	movs	r0, #60	; 0x3c
 801f192:	fb93 f5f2 	sdiv	r5, r3, r2
 801f196:	fb02 3315 	mls	r3, r2, r5, r3
 801f19a:	fb93 f2f0 	sdiv	r2, r3, r0
 801f19e:	fb00 3012 	mls	r0, r0, r2, r3
 801f1a2:	6823      	ldr	r3, [r4, #0]
 801f1a4:	1a89      	subs	r1, r1, r2
 801f1a6:	68a2      	ldr	r2, [r4, #8]
 801f1a8:	6061      	str	r1, [r4, #4]
 801f1aa:	1a1b      	subs	r3, r3, r0
 801f1ac:	1b52      	subs	r2, r2, r5
 801f1ae:	2b3b      	cmp	r3, #59	; 0x3b
 801f1b0:	6023      	str	r3, [r4, #0]
 801f1b2:	60a2      	str	r2, [r4, #8]
 801f1b4:	dd35      	ble.n	801f222 <localtime_r+0x156>
 801f1b6:	3101      	adds	r1, #1
 801f1b8:	6061      	str	r1, [r4, #4]
 801f1ba:	3b3c      	subs	r3, #60	; 0x3c
 801f1bc:	6023      	str	r3, [r4, #0]
 801f1be:	6863      	ldr	r3, [r4, #4]
 801f1c0:	2b3b      	cmp	r3, #59	; 0x3b
 801f1c2:	dd34      	ble.n	801f22e <localtime_r+0x162>
 801f1c4:	3201      	adds	r2, #1
 801f1c6:	60a2      	str	r2, [r4, #8]
 801f1c8:	3b3c      	subs	r3, #60	; 0x3c
 801f1ca:	6063      	str	r3, [r4, #4]
 801f1cc:	68a3      	ldr	r3, [r4, #8]
 801f1ce:	2b17      	cmp	r3, #23
 801f1d0:	dd33      	ble.n	801f23a <localtime_r+0x16e>
 801f1d2:	69e2      	ldr	r2, [r4, #28]
 801f1d4:	3201      	adds	r2, #1
 801f1d6:	61e2      	str	r2, [r4, #28]
 801f1d8:	69a2      	ldr	r2, [r4, #24]
 801f1da:	3201      	adds	r2, #1
 801f1dc:	2a06      	cmp	r2, #6
 801f1de:	bfc8      	it	gt
 801f1e0:	2200      	movgt	r2, #0
 801f1e2:	61a2      	str	r2, [r4, #24]
 801f1e4:	68e2      	ldr	r2, [r4, #12]
 801f1e6:	3b18      	subs	r3, #24
 801f1e8:	3201      	adds	r2, #1
 801f1ea:	60a3      	str	r3, [r4, #8]
 801f1ec:	6923      	ldr	r3, [r4, #16]
 801f1ee:	60e2      	str	r2, [r4, #12]
 801f1f0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 801f1f4:	428a      	cmp	r2, r1
 801f1f6:	dd0e      	ble.n	801f216 <localtime_r+0x14a>
 801f1f8:	2b0b      	cmp	r3, #11
 801f1fa:	eba2 0201 	sub.w	r2, r2, r1
 801f1fe:	60e2      	str	r2, [r4, #12]
 801f200:	f103 0201 	add.w	r2, r3, #1
 801f204:	bf09      	itett	eq
 801f206:	6963      	ldreq	r3, [r4, #20]
 801f208:	6122      	strne	r2, [r4, #16]
 801f20a:	2200      	moveq	r2, #0
 801f20c:	3301      	addeq	r3, #1
 801f20e:	bf02      	ittt	eq
 801f210:	6122      	streq	r2, [r4, #16]
 801f212:	6163      	streq	r3, [r4, #20]
 801f214:	61e2      	streq	r2, [r4, #28]
 801f216:	f000 fdfb 	bl	801fe10 <__tz_unlock>
 801f21a:	4620      	mov	r0, r4
 801f21c:	b002      	add	sp, #8
 801f21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f222:	2b00      	cmp	r3, #0
 801f224:	dacb      	bge.n	801f1be <localtime_r+0xf2>
 801f226:	3901      	subs	r1, #1
 801f228:	6061      	str	r1, [r4, #4]
 801f22a:	333c      	adds	r3, #60	; 0x3c
 801f22c:	e7c6      	b.n	801f1bc <localtime_r+0xf0>
 801f22e:	2b00      	cmp	r3, #0
 801f230:	dacc      	bge.n	801f1cc <localtime_r+0x100>
 801f232:	3a01      	subs	r2, #1
 801f234:	60a2      	str	r2, [r4, #8]
 801f236:	333c      	adds	r3, #60	; 0x3c
 801f238:	e7c7      	b.n	801f1ca <localtime_r+0xfe>
 801f23a:	2b00      	cmp	r3, #0
 801f23c:	daeb      	bge.n	801f216 <localtime_r+0x14a>
 801f23e:	69e2      	ldr	r2, [r4, #28]
 801f240:	3a01      	subs	r2, #1
 801f242:	61e2      	str	r2, [r4, #28]
 801f244:	69a2      	ldr	r2, [r4, #24]
 801f246:	3a01      	subs	r2, #1
 801f248:	bf48      	it	mi
 801f24a:	2206      	movmi	r2, #6
 801f24c:	61a2      	str	r2, [r4, #24]
 801f24e:	68e2      	ldr	r2, [r4, #12]
 801f250:	3318      	adds	r3, #24
 801f252:	3a01      	subs	r2, #1
 801f254:	60e2      	str	r2, [r4, #12]
 801f256:	60a3      	str	r3, [r4, #8]
 801f258:	2a00      	cmp	r2, #0
 801f25a:	d1dc      	bne.n	801f216 <localtime_r+0x14a>
 801f25c:	6923      	ldr	r3, [r4, #16]
 801f25e:	3b01      	subs	r3, #1
 801f260:	d405      	bmi.n	801f26e <localtime_r+0x1a2>
 801f262:	6123      	str	r3, [r4, #16]
 801f264:	6923      	ldr	r3, [r4, #16]
 801f266:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f26a:	60e3      	str	r3, [r4, #12]
 801f26c:	e7d3      	b.n	801f216 <localtime_r+0x14a>
 801f26e:	230b      	movs	r3, #11
 801f270:	6123      	str	r3, [r4, #16]
 801f272:	6963      	ldr	r3, [r4, #20]
 801f274:	1e5a      	subs	r2, r3, #1
 801f276:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801f27a:	6162      	str	r2, [r4, #20]
 801f27c:	079a      	lsls	r2, r3, #30
 801f27e:	d105      	bne.n	801f28c <localtime_r+0x1c0>
 801f280:	2164      	movs	r1, #100	; 0x64
 801f282:	fb93 f2f1 	sdiv	r2, r3, r1
 801f286:	fb01 3212 	mls	r2, r1, r2, r3
 801f28a:	b962      	cbnz	r2, 801f2a6 <localtime_r+0x1da>
 801f28c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801f290:	fb93 f1f2 	sdiv	r1, r3, r2
 801f294:	fb02 3311 	mls	r3, r2, r1, r3
 801f298:	fab3 f383 	clz	r3, r3
 801f29c:	095b      	lsrs	r3, r3, #5
 801f29e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801f2a2:	61e3      	str	r3, [r4, #28]
 801f2a4:	e7de      	b.n	801f264 <localtime_r+0x198>
 801f2a6:	2301      	movs	r3, #1
 801f2a8:	e7f9      	b.n	801f29e <localtime_r+0x1d2>
 801f2aa:	bf00      	nop
 801f2ac:	08023700 	.word	0x08023700
 801f2b0:	2400f7ac 	.word	0x2400f7ac

0801f2b4 <__retarget_lock_init_recursive>:
 801f2b4:	4770      	bx	lr

0801f2b6 <__retarget_lock_acquire>:
 801f2b6:	4770      	bx	lr

0801f2b8 <__retarget_lock_acquire_recursive>:
 801f2b8:	4770      	bx	lr

0801f2ba <__retarget_lock_release>:
 801f2ba:	4770      	bx	lr

0801f2bc <__retarget_lock_release_recursive>:
 801f2bc:	4770      	bx	lr
	...

0801f2c0 <malloc>:
 801f2c0:	4b02      	ldr	r3, [pc, #8]	; (801f2cc <malloc+0xc>)
 801f2c2:	4601      	mov	r1, r0
 801f2c4:	6818      	ldr	r0, [r3, #0]
 801f2c6:	f000 b88d 	b.w	801f3e4 <_malloc_r>
 801f2ca:	bf00      	nop
 801f2cc:	240000c4 	.word	0x240000c4

0801f2d0 <free>:
 801f2d0:	4b02      	ldr	r3, [pc, #8]	; (801f2dc <free+0xc>)
 801f2d2:	4601      	mov	r1, r0
 801f2d4:	6818      	ldr	r0, [r3, #0]
 801f2d6:	f000 b819 	b.w	801f30c <_free_r>
 801f2da:	bf00      	nop
 801f2dc:	240000c4 	.word	0x240000c4

0801f2e0 <memcpy>:
 801f2e0:	440a      	add	r2, r1
 801f2e2:	4291      	cmp	r1, r2
 801f2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 801f2e8:	d100      	bne.n	801f2ec <memcpy+0xc>
 801f2ea:	4770      	bx	lr
 801f2ec:	b510      	push	{r4, lr}
 801f2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f2f6:	4291      	cmp	r1, r2
 801f2f8:	d1f9      	bne.n	801f2ee <memcpy+0xe>
 801f2fa:	bd10      	pop	{r4, pc}

0801f2fc <memset>:
 801f2fc:	4402      	add	r2, r0
 801f2fe:	4603      	mov	r3, r0
 801f300:	4293      	cmp	r3, r2
 801f302:	d100      	bne.n	801f306 <memset+0xa>
 801f304:	4770      	bx	lr
 801f306:	f803 1b01 	strb.w	r1, [r3], #1
 801f30a:	e7f9      	b.n	801f300 <memset+0x4>

0801f30c <_free_r>:
 801f30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f30e:	2900      	cmp	r1, #0
 801f310:	d044      	beq.n	801f39c <_free_r+0x90>
 801f312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f316:	9001      	str	r0, [sp, #4]
 801f318:	2b00      	cmp	r3, #0
 801f31a:	f1a1 0404 	sub.w	r4, r1, #4
 801f31e:	bfb8      	it	lt
 801f320:	18e4      	addlt	r4, r4, r3
 801f322:	f001 fa73 	bl	802080c <__malloc_lock>
 801f326:	4a1e      	ldr	r2, [pc, #120]	; (801f3a0 <_free_r+0x94>)
 801f328:	9801      	ldr	r0, [sp, #4]
 801f32a:	6813      	ldr	r3, [r2, #0]
 801f32c:	b933      	cbnz	r3, 801f33c <_free_r+0x30>
 801f32e:	6063      	str	r3, [r4, #4]
 801f330:	6014      	str	r4, [r2, #0]
 801f332:	b003      	add	sp, #12
 801f334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f338:	f001 ba6e 	b.w	8020818 <__malloc_unlock>
 801f33c:	42a3      	cmp	r3, r4
 801f33e:	d908      	bls.n	801f352 <_free_r+0x46>
 801f340:	6825      	ldr	r5, [r4, #0]
 801f342:	1961      	adds	r1, r4, r5
 801f344:	428b      	cmp	r3, r1
 801f346:	bf01      	itttt	eq
 801f348:	6819      	ldreq	r1, [r3, #0]
 801f34a:	685b      	ldreq	r3, [r3, #4]
 801f34c:	1949      	addeq	r1, r1, r5
 801f34e:	6021      	streq	r1, [r4, #0]
 801f350:	e7ed      	b.n	801f32e <_free_r+0x22>
 801f352:	461a      	mov	r2, r3
 801f354:	685b      	ldr	r3, [r3, #4]
 801f356:	b10b      	cbz	r3, 801f35c <_free_r+0x50>
 801f358:	42a3      	cmp	r3, r4
 801f35a:	d9fa      	bls.n	801f352 <_free_r+0x46>
 801f35c:	6811      	ldr	r1, [r2, #0]
 801f35e:	1855      	adds	r5, r2, r1
 801f360:	42a5      	cmp	r5, r4
 801f362:	d10b      	bne.n	801f37c <_free_r+0x70>
 801f364:	6824      	ldr	r4, [r4, #0]
 801f366:	4421      	add	r1, r4
 801f368:	1854      	adds	r4, r2, r1
 801f36a:	42a3      	cmp	r3, r4
 801f36c:	6011      	str	r1, [r2, #0]
 801f36e:	d1e0      	bne.n	801f332 <_free_r+0x26>
 801f370:	681c      	ldr	r4, [r3, #0]
 801f372:	685b      	ldr	r3, [r3, #4]
 801f374:	6053      	str	r3, [r2, #4]
 801f376:	4421      	add	r1, r4
 801f378:	6011      	str	r1, [r2, #0]
 801f37a:	e7da      	b.n	801f332 <_free_r+0x26>
 801f37c:	d902      	bls.n	801f384 <_free_r+0x78>
 801f37e:	230c      	movs	r3, #12
 801f380:	6003      	str	r3, [r0, #0]
 801f382:	e7d6      	b.n	801f332 <_free_r+0x26>
 801f384:	6825      	ldr	r5, [r4, #0]
 801f386:	1961      	adds	r1, r4, r5
 801f388:	428b      	cmp	r3, r1
 801f38a:	bf04      	itt	eq
 801f38c:	6819      	ldreq	r1, [r3, #0]
 801f38e:	685b      	ldreq	r3, [r3, #4]
 801f390:	6063      	str	r3, [r4, #4]
 801f392:	bf04      	itt	eq
 801f394:	1949      	addeq	r1, r1, r5
 801f396:	6021      	streq	r1, [r4, #0]
 801f398:	6054      	str	r4, [r2, #4]
 801f39a:	e7ca      	b.n	801f332 <_free_r+0x26>
 801f39c:	b003      	add	sp, #12
 801f39e:	bd30      	pop	{r4, r5, pc}
 801f3a0:	2400f67c 	.word	0x2400f67c

0801f3a4 <sbrk_aligned>:
 801f3a4:	b570      	push	{r4, r5, r6, lr}
 801f3a6:	4e0e      	ldr	r6, [pc, #56]	; (801f3e0 <sbrk_aligned+0x3c>)
 801f3a8:	460c      	mov	r4, r1
 801f3aa:	6831      	ldr	r1, [r6, #0]
 801f3ac:	4605      	mov	r5, r0
 801f3ae:	b911      	cbnz	r1, 801f3b6 <sbrk_aligned+0x12>
 801f3b0:	f000 fbe4 	bl	801fb7c <_sbrk_r>
 801f3b4:	6030      	str	r0, [r6, #0]
 801f3b6:	4621      	mov	r1, r4
 801f3b8:	4628      	mov	r0, r5
 801f3ba:	f000 fbdf 	bl	801fb7c <_sbrk_r>
 801f3be:	1c43      	adds	r3, r0, #1
 801f3c0:	d00a      	beq.n	801f3d8 <sbrk_aligned+0x34>
 801f3c2:	1cc4      	adds	r4, r0, #3
 801f3c4:	f024 0403 	bic.w	r4, r4, #3
 801f3c8:	42a0      	cmp	r0, r4
 801f3ca:	d007      	beq.n	801f3dc <sbrk_aligned+0x38>
 801f3cc:	1a21      	subs	r1, r4, r0
 801f3ce:	4628      	mov	r0, r5
 801f3d0:	f000 fbd4 	bl	801fb7c <_sbrk_r>
 801f3d4:	3001      	adds	r0, #1
 801f3d6:	d101      	bne.n	801f3dc <sbrk_aligned+0x38>
 801f3d8:	f04f 34ff 	mov.w	r4, #4294967295
 801f3dc:	4620      	mov	r0, r4
 801f3de:	bd70      	pop	{r4, r5, r6, pc}
 801f3e0:	2400f680 	.word	0x2400f680

0801f3e4 <_malloc_r>:
 801f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3e8:	1ccd      	adds	r5, r1, #3
 801f3ea:	f025 0503 	bic.w	r5, r5, #3
 801f3ee:	3508      	adds	r5, #8
 801f3f0:	2d0c      	cmp	r5, #12
 801f3f2:	bf38      	it	cc
 801f3f4:	250c      	movcc	r5, #12
 801f3f6:	2d00      	cmp	r5, #0
 801f3f8:	4607      	mov	r7, r0
 801f3fa:	db01      	blt.n	801f400 <_malloc_r+0x1c>
 801f3fc:	42a9      	cmp	r1, r5
 801f3fe:	d905      	bls.n	801f40c <_malloc_r+0x28>
 801f400:	230c      	movs	r3, #12
 801f402:	603b      	str	r3, [r7, #0]
 801f404:	2600      	movs	r6, #0
 801f406:	4630      	mov	r0, r6
 801f408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f40c:	4e2e      	ldr	r6, [pc, #184]	; (801f4c8 <_malloc_r+0xe4>)
 801f40e:	f001 f9fd 	bl	802080c <__malloc_lock>
 801f412:	6833      	ldr	r3, [r6, #0]
 801f414:	461c      	mov	r4, r3
 801f416:	bb34      	cbnz	r4, 801f466 <_malloc_r+0x82>
 801f418:	4629      	mov	r1, r5
 801f41a:	4638      	mov	r0, r7
 801f41c:	f7ff ffc2 	bl	801f3a4 <sbrk_aligned>
 801f420:	1c43      	adds	r3, r0, #1
 801f422:	4604      	mov	r4, r0
 801f424:	d14d      	bne.n	801f4c2 <_malloc_r+0xde>
 801f426:	6834      	ldr	r4, [r6, #0]
 801f428:	4626      	mov	r6, r4
 801f42a:	2e00      	cmp	r6, #0
 801f42c:	d140      	bne.n	801f4b0 <_malloc_r+0xcc>
 801f42e:	6823      	ldr	r3, [r4, #0]
 801f430:	4631      	mov	r1, r6
 801f432:	4638      	mov	r0, r7
 801f434:	eb04 0803 	add.w	r8, r4, r3
 801f438:	f000 fba0 	bl	801fb7c <_sbrk_r>
 801f43c:	4580      	cmp	r8, r0
 801f43e:	d13a      	bne.n	801f4b6 <_malloc_r+0xd2>
 801f440:	6821      	ldr	r1, [r4, #0]
 801f442:	3503      	adds	r5, #3
 801f444:	1a6d      	subs	r5, r5, r1
 801f446:	f025 0503 	bic.w	r5, r5, #3
 801f44a:	3508      	adds	r5, #8
 801f44c:	2d0c      	cmp	r5, #12
 801f44e:	bf38      	it	cc
 801f450:	250c      	movcc	r5, #12
 801f452:	4629      	mov	r1, r5
 801f454:	4638      	mov	r0, r7
 801f456:	f7ff ffa5 	bl	801f3a4 <sbrk_aligned>
 801f45a:	3001      	adds	r0, #1
 801f45c:	d02b      	beq.n	801f4b6 <_malloc_r+0xd2>
 801f45e:	6823      	ldr	r3, [r4, #0]
 801f460:	442b      	add	r3, r5
 801f462:	6023      	str	r3, [r4, #0]
 801f464:	e00e      	b.n	801f484 <_malloc_r+0xa0>
 801f466:	6822      	ldr	r2, [r4, #0]
 801f468:	1b52      	subs	r2, r2, r5
 801f46a:	d41e      	bmi.n	801f4aa <_malloc_r+0xc6>
 801f46c:	2a0b      	cmp	r2, #11
 801f46e:	d916      	bls.n	801f49e <_malloc_r+0xba>
 801f470:	1961      	adds	r1, r4, r5
 801f472:	42a3      	cmp	r3, r4
 801f474:	6025      	str	r5, [r4, #0]
 801f476:	bf18      	it	ne
 801f478:	6059      	strne	r1, [r3, #4]
 801f47a:	6863      	ldr	r3, [r4, #4]
 801f47c:	bf08      	it	eq
 801f47e:	6031      	streq	r1, [r6, #0]
 801f480:	5162      	str	r2, [r4, r5]
 801f482:	604b      	str	r3, [r1, #4]
 801f484:	4638      	mov	r0, r7
 801f486:	f104 060b 	add.w	r6, r4, #11
 801f48a:	f001 f9c5 	bl	8020818 <__malloc_unlock>
 801f48e:	f026 0607 	bic.w	r6, r6, #7
 801f492:	1d23      	adds	r3, r4, #4
 801f494:	1af2      	subs	r2, r6, r3
 801f496:	d0b6      	beq.n	801f406 <_malloc_r+0x22>
 801f498:	1b9b      	subs	r3, r3, r6
 801f49a:	50a3      	str	r3, [r4, r2]
 801f49c:	e7b3      	b.n	801f406 <_malloc_r+0x22>
 801f49e:	6862      	ldr	r2, [r4, #4]
 801f4a0:	42a3      	cmp	r3, r4
 801f4a2:	bf0c      	ite	eq
 801f4a4:	6032      	streq	r2, [r6, #0]
 801f4a6:	605a      	strne	r2, [r3, #4]
 801f4a8:	e7ec      	b.n	801f484 <_malloc_r+0xa0>
 801f4aa:	4623      	mov	r3, r4
 801f4ac:	6864      	ldr	r4, [r4, #4]
 801f4ae:	e7b2      	b.n	801f416 <_malloc_r+0x32>
 801f4b0:	4634      	mov	r4, r6
 801f4b2:	6876      	ldr	r6, [r6, #4]
 801f4b4:	e7b9      	b.n	801f42a <_malloc_r+0x46>
 801f4b6:	230c      	movs	r3, #12
 801f4b8:	603b      	str	r3, [r7, #0]
 801f4ba:	4638      	mov	r0, r7
 801f4bc:	f001 f9ac 	bl	8020818 <__malloc_unlock>
 801f4c0:	e7a1      	b.n	801f406 <_malloc_r+0x22>
 801f4c2:	6025      	str	r5, [r4, #0]
 801f4c4:	e7de      	b.n	801f484 <_malloc_r+0xa0>
 801f4c6:	bf00      	nop
 801f4c8:	2400f67c 	.word	0x2400f67c

0801f4cc <__sfputc_r>:
 801f4cc:	6893      	ldr	r3, [r2, #8]
 801f4ce:	3b01      	subs	r3, #1
 801f4d0:	2b00      	cmp	r3, #0
 801f4d2:	b410      	push	{r4}
 801f4d4:	6093      	str	r3, [r2, #8]
 801f4d6:	da08      	bge.n	801f4ea <__sfputc_r+0x1e>
 801f4d8:	6994      	ldr	r4, [r2, #24]
 801f4da:	42a3      	cmp	r3, r4
 801f4dc:	db01      	blt.n	801f4e2 <__sfputc_r+0x16>
 801f4de:	290a      	cmp	r1, #10
 801f4e0:	d103      	bne.n	801f4ea <__sfputc_r+0x1e>
 801f4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4e6:	f000 be1f 	b.w	8020128 <__swbuf_r>
 801f4ea:	6813      	ldr	r3, [r2, #0]
 801f4ec:	1c58      	adds	r0, r3, #1
 801f4ee:	6010      	str	r0, [r2, #0]
 801f4f0:	7019      	strb	r1, [r3, #0]
 801f4f2:	4608      	mov	r0, r1
 801f4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f4f8:	4770      	bx	lr

0801f4fa <__sfputs_r>:
 801f4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4fc:	4606      	mov	r6, r0
 801f4fe:	460f      	mov	r7, r1
 801f500:	4614      	mov	r4, r2
 801f502:	18d5      	adds	r5, r2, r3
 801f504:	42ac      	cmp	r4, r5
 801f506:	d101      	bne.n	801f50c <__sfputs_r+0x12>
 801f508:	2000      	movs	r0, #0
 801f50a:	e007      	b.n	801f51c <__sfputs_r+0x22>
 801f50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f510:	463a      	mov	r2, r7
 801f512:	4630      	mov	r0, r6
 801f514:	f7ff ffda 	bl	801f4cc <__sfputc_r>
 801f518:	1c43      	adds	r3, r0, #1
 801f51a:	d1f3      	bne.n	801f504 <__sfputs_r+0xa>
 801f51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f520 <_vfiprintf_r>:
 801f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f524:	460d      	mov	r5, r1
 801f526:	b09d      	sub	sp, #116	; 0x74
 801f528:	4614      	mov	r4, r2
 801f52a:	4698      	mov	r8, r3
 801f52c:	4606      	mov	r6, r0
 801f52e:	b118      	cbz	r0, 801f538 <_vfiprintf_r+0x18>
 801f530:	6983      	ldr	r3, [r0, #24]
 801f532:	b90b      	cbnz	r3, 801f538 <_vfiprintf_r+0x18>
 801f534:	f7ff fcf6 	bl	801ef24 <__sinit>
 801f538:	4b89      	ldr	r3, [pc, #548]	; (801f760 <_vfiprintf_r+0x240>)
 801f53a:	429d      	cmp	r5, r3
 801f53c:	d11b      	bne.n	801f576 <_vfiprintf_r+0x56>
 801f53e:	6875      	ldr	r5, [r6, #4]
 801f540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f542:	07d9      	lsls	r1, r3, #31
 801f544:	d405      	bmi.n	801f552 <_vfiprintf_r+0x32>
 801f546:	89ab      	ldrh	r3, [r5, #12]
 801f548:	059a      	lsls	r2, r3, #22
 801f54a:	d402      	bmi.n	801f552 <_vfiprintf_r+0x32>
 801f54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f54e:	f7ff feb3 	bl	801f2b8 <__retarget_lock_acquire_recursive>
 801f552:	89ab      	ldrh	r3, [r5, #12]
 801f554:	071b      	lsls	r3, r3, #28
 801f556:	d501      	bpl.n	801f55c <_vfiprintf_r+0x3c>
 801f558:	692b      	ldr	r3, [r5, #16]
 801f55a:	b9eb      	cbnz	r3, 801f598 <_vfiprintf_r+0x78>
 801f55c:	4629      	mov	r1, r5
 801f55e:	4630      	mov	r0, r6
 801f560:	f000 fe46 	bl	80201f0 <__swsetup_r>
 801f564:	b1c0      	cbz	r0, 801f598 <_vfiprintf_r+0x78>
 801f566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f568:	07dc      	lsls	r4, r3, #31
 801f56a:	d50e      	bpl.n	801f58a <_vfiprintf_r+0x6a>
 801f56c:	f04f 30ff 	mov.w	r0, #4294967295
 801f570:	b01d      	add	sp, #116	; 0x74
 801f572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f576:	4b7b      	ldr	r3, [pc, #492]	; (801f764 <_vfiprintf_r+0x244>)
 801f578:	429d      	cmp	r5, r3
 801f57a:	d101      	bne.n	801f580 <_vfiprintf_r+0x60>
 801f57c:	68b5      	ldr	r5, [r6, #8]
 801f57e:	e7df      	b.n	801f540 <_vfiprintf_r+0x20>
 801f580:	4b79      	ldr	r3, [pc, #484]	; (801f768 <_vfiprintf_r+0x248>)
 801f582:	429d      	cmp	r5, r3
 801f584:	bf08      	it	eq
 801f586:	68f5      	ldreq	r5, [r6, #12]
 801f588:	e7da      	b.n	801f540 <_vfiprintf_r+0x20>
 801f58a:	89ab      	ldrh	r3, [r5, #12]
 801f58c:	0598      	lsls	r0, r3, #22
 801f58e:	d4ed      	bmi.n	801f56c <_vfiprintf_r+0x4c>
 801f590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f592:	f7ff fe93 	bl	801f2bc <__retarget_lock_release_recursive>
 801f596:	e7e9      	b.n	801f56c <_vfiprintf_r+0x4c>
 801f598:	2300      	movs	r3, #0
 801f59a:	9309      	str	r3, [sp, #36]	; 0x24
 801f59c:	2320      	movs	r3, #32
 801f59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f5a2:	f8cd 800c 	str.w	r8, [sp, #12]
 801f5a6:	2330      	movs	r3, #48	; 0x30
 801f5a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f76c <_vfiprintf_r+0x24c>
 801f5ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f5b0:	f04f 0901 	mov.w	r9, #1
 801f5b4:	4623      	mov	r3, r4
 801f5b6:	469a      	mov	sl, r3
 801f5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f5bc:	b10a      	cbz	r2, 801f5c2 <_vfiprintf_r+0xa2>
 801f5be:	2a25      	cmp	r2, #37	; 0x25
 801f5c0:	d1f9      	bne.n	801f5b6 <_vfiprintf_r+0x96>
 801f5c2:	ebba 0b04 	subs.w	fp, sl, r4
 801f5c6:	d00b      	beq.n	801f5e0 <_vfiprintf_r+0xc0>
 801f5c8:	465b      	mov	r3, fp
 801f5ca:	4622      	mov	r2, r4
 801f5cc:	4629      	mov	r1, r5
 801f5ce:	4630      	mov	r0, r6
 801f5d0:	f7ff ff93 	bl	801f4fa <__sfputs_r>
 801f5d4:	3001      	adds	r0, #1
 801f5d6:	f000 80aa 	beq.w	801f72e <_vfiprintf_r+0x20e>
 801f5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f5dc:	445a      	add	r2, fp
 801f5de:	9209      	str	r2, [sp, #36]	; 0x24
 801f5e0:	f89a 3000 	ldrb.w	r3, [sl]
 801f5e4:	2b00      	cmp	r3, #0
 801f5e6:	f000 80a2 	beq.w	801f72e <_vfiprintf_r+0x20e>
 801f5ea:	2300      	movs	r3, #0
 801f5ec:	f04f 32ff 	mov.w	r2, #4294967295
 801f5f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f5f4:	f10a 0a01 	add.w	sl, sl, #1
 801f5f8:	9304      	str	r3, [sp, #16]
 801f5fa:	9307      	str	r3, [sp, #28]
 801f5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f600:	931a      	str	r3, [sp, #104]	; 0x68
 801f602:	4654      	mov	r4, sl
 801f604:	2205      	movs	r2, #5
 801f606:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f60a:	4858      	ldr	r0, [pc, #352]	; (801f76c <_vfiprintf_r+0x24c>)
 801f60c:	f7e0 fe68 	bl	80002e0 <memchr>
 801f610:	9a04      	ldr	r2, [sp, #16]
 801f612:	b9d8      	cbnz	r0, 801f64c <_vfiprintf_r+0x12c>
 801f614:	06d1      	lsls	r1, r2, #27
 801f616:	bf44      	itt	mi
 801f618:	2320      	movmi	r3, #32
 801f61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f61e:	0713      	lsls	r3, r2, #28
 801f620:	bf44      	itt	mi
 801f622:	232b      	movmi	r3, #43	; 0x2b
 801f624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f628:	f89a 3000 	ldrb.w	r3, [sl]
 801f62c:	2b2a      	cmp	r3, #42	; 0x2a
 801f62e:	d015      	beq.n	801f65c <_vfiprintf_r+0x13c>
 801f630:	9a07      	ldr	r2, [sp, #28]
 801f632:	4654      	mov	r4, sl
 801f634:	2000      	movs	r0, #0
 801f636:	f04f 0c0a 	mov.w	ip, #10
 801f63a:	4621      	mov	r1, r4
 801f63c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f640:	3b30      	subs	r3, #48	; 0x30
 801f642:	2b09      	cmp	r3, #9
 801f644:	d94e      	bls.n	801f6e4 <_vfiprintf_r+0x1c4>
 801f646:	b1b0      	cbz	r0, 801f676 <_vfiprintf_r+0x156>
 801f648:	9207      	str	r2, [sp, #28]
 801f64a:	e014      	b.n	801f676 <_vfiprintf_r+0x156>
 801f64c:	eba0 0308 	sub.w	r3, r0, r8
 801f650:	fa09 f303 	lsl.w	r3, r9, r3
 801f654:	4313      	orrs	r3, r2
 801f656:	9304      	str	r3, [sp, #16]
 801f658:	46a2      	mov	sl, r4
 801f65a:	e7d2      	b.n	801f602 <_vfiprintf_r+0xe2>
 801f65c:	9b03      	ldr	r3, [sp, #12]
 801f65e:	1d19      	adds	r1, r3, #4
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	9103      	str	r1, [sp, #12]
 801f664:	2b00      	cmp	r3, #0
 801f666:	bfbb      	ittet	lt
 801f668:	425b      	neglt	r3, r3
 801f66a:	f042 0202 	orrlt.w	r2, r2, #2
 801f66e:	9307      	strge	r3, [sp, #28]
 801f670:	9307      	strlt	r3, [sp, #28]
 801f672:	bfb8      	it	lt
 801f674:	9204      	strlt	r2, [sp, #16]
 801f676:	7823      	ldrb	r3, [r4, #0]
 801f678:	2b2e      	cmp	r3, #46	; 0x2e
 801f67a:	d10c      	bne.n	801f696 <_vfiprintf_r+0x176>
 801f67c:	7863      	ldrb	r3, [r4, #1]
 801f67e:	2b2a      	cmp	r3, #42	; 0x2a
 801f680:	d135      	bne.n	801f6ee <_vfiprintf_r+0x1ce>
 801f682:	9b03      	ldr	r3, [sp, #12]
 801f684:	1d1a      	adds	r2, r3, #4
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	9203      	str	r2, [sp, #12]
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	bfb8      	it	lt
 801f68e:	f04f 33ff 	movlt.w	r3, #4294967295
 801f692:	3402      	adds	r4, #2
 801f694:	9305      	str	r3, [sp, #20]
 801f696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f77c <_vfiprintf_r+0x25c>
 801f69a:	7821      	ldrb	r1, [r4, #0]
 801f69c:	2203      	movs	r2, #3
 801f69e:	4650      	mov	r0, sl
 801f6a0:	f7e0 fe1e 	bl	80002e0 <memchr>
 801f6a4:	b140      	cbz	r0, 801f6b8 <_vfiprintf_r+0x198>
 801f6a6:	2340      	movs	r3, #64	; 0x40
 801f6a8:	eba0 000a 	sub.w	r0, r0, sl
 801f6ac:	fa03 f000 	lsl.w	r0, r3, r0
 801f6b0:	9b04      	ldr	r3, [sp, #16]
 801f6b2:	4303      	orrs	r3, r0
 801f6b4:	3401      	adds	r4, #1
 801f6b6:	9304      	str	r3, [sp, #16]
 801f6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f6bc:	482c      	ldr	r0, [pc, #176]	; (801f770 <_vfiprintf_r+0x250>)
 801f6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f6c2:	2206      	movs	r2, #6
 801f6c4:	f7e0 fe0c 	bl	80002e0 <memchr>
 801f6c8:	2800      	cmp	r0, #0
 801f6ca:	d03f      	beq.n	801f74c <_vfiprintf_r+0x22c>
 801f6cc:	4b29      	ldr	r3, [pc, #164]	; (801f774 <_vfiprintf_r+0x254>)
 801f6ce:	bb1b      	cbnz	r3, 801f718 <_vfiprintf_r+0x1f8>
 801f6d0:	9b03      	ldr	r3, [sp, #12]
 801f6d2:	3307      	adds	r3, #7
 801f6d4:	f023 0307 	bic.w	r3, r3, #7
 801f6d8:	3308      	adds	r3, #8
 801f6da:	9303      	str	r3, [sp, #12]
 801f6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6de:	443b      	add	r3, r7
 801f6e0:	9309      	str	r3, [sp, #36]	; 0x24
 801f6e2:	e767      	b.n	801f5b4 <_vfiprintf_r+0x94>
 801f6e4:	fb0c 3202 	mla	r2, ip, r2, r3
 801f6e8:	460c      	mov	r4, r1
 801f6ea:	2001      	movs	r0, #1
 801f6ec:	e7a5      	b.n	801f63a <_vfiprintf_r+0x11a>
 801f6ee:	2300      	movs	r3, #0
 801f6f0:	3401      	adds	r4, #1
 801f6f2:	9305      	str	r3, [sp, #20]
 801f6f4:	4619      	mov	r1, r3
 801f6f6:	f04f 0c0a 	mov.w	ip, #10
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f700:	3a30      	subs	r2, #48	; 0x30
 801f702:	2a09      	cmp	r2, #9
 801f704:	d903      	bls.n	801f70e <_vfiprintf_r+0x1ee>
 801f706:	2b00      	cmp	r3, #0
 801f708:	d0c5      	beq.n	801f696 <_vfiprintf_r+0x176>
 801f70a:	9105      	str	r1, [sp, #20]
 801f70c:	e7c3      	b.n	801f696 <_vfiprintf_r+0x176>
 801f70e:	fb0c 2101 	mla	r1, ip, r1, r2
 801f712:	4604      	mov	r4, r0
 801f714:	2301      	movs	r3, #1
 801f716:	e7f0      	b.n	801f6fa <_vfiprintf_r+0x1da>
 801f718:	ab03      	add	r3, sp, #12
 801f71a:	9300      	str	r3, [sp, #0]
 801f71c:	462a      	mov	r2, r5
 801f71e:	4b16      	ldr	r3, [pc, #88]	; (801f778 <_vfiprintf_r+0x258>)
 801f720:	a904      	add	r1, sp, #16
 801f722:	4630      	mov	r0, r6
 801f724:	f3af 8000 	nop.w
 801f728:	4607      	mov	r7, r0
 801f72a:	1c78      	adds	r0, r7, #1
 801f72c:	d1d6      	bne.n	801f6dc <_vfiprintf_r+0x1bc>
 801f72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f730:	07d9      	lsls	r1, r3, #31
 801f732:	d405      	bmi.n	801f740 <_vfiprintf_r+0x220>
 801f734:	89ab      	ldrh	r3, [r5, #12]
 801f736:	059a      	lsls	r2, r3, #22
 801f738:	d402      	bmi.n	801f740 <_vfiprintf_r+0x220>
 801f73a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f73c:	f7ff fdbe 	bl	801f2bc <__retarget_lock_release_recursive>
 801f740:	89ab      	ldrh	r3, [r5, #12]
 801f742:	065b      	lsls	r3, r3, #25
 801f744:	f53f af12 	bmi.w	801f56c <_vfiprintf_r+0x4c>
 801f748:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f74a:	e711      	b.n	801f570 <_vfiprintf_r+0x50>
 801f74c:	ab03      	add	r3, sp, #12
 801f74e:	9300      	str	r3, [sp, #0]
 801f750:	462a      	mov	r2, r5
 801f752:	4b09      	ldr	r3, [pc, #36]	; (801f778 <_vfiprintf_r+0x258>)
 801f754:	a904      	add	r1, sp, #16
 801f756:	4630      	mov	r0, r6
 801f758:	f000 f880 	bl	801f85c <_printf_i>
 801f75c:	e7e4      	b.n	801f728 <_vfiprintf_r+0x208>
 801f75e:	bf00      	nop
 801f760:	080236bc 	.word	0x080236bc
 801f764:	080236dc 	.word	0x080236dc
 801f768:	0802369c 	.word	0x0802369c
 801f76c:	08023760 	.word	0x08023760
 801f770:	0802376a 	.word	0x0802376a
 801f774:	00000000 	.word	0x00000000
 801f778:	0801f4fb 	.word	0x0801f4fb
 801f77c:	08023766 	.word	0x08023766

0801f780 <_printf_common>:
 801f780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f784:	4616      	mov	r6, r2
 801f786:	4699      	mov	r9, r3
 801f788:	688a      	ldr	r2, [r1, #8]
 801f78a:	690b      	ldr	r3, [r1, #16]
 801f78c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f790:	4293      	cmp	r3, r2
 801f792:	bfb8      	it	lt
 801f794:	4613      	movlt	r3, r2
 801f796:	6033      	str	r3, [r6, #0]
 801f798:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f79c:	4607      	mov	r7, r0
 801f79e:	460c      	mov	r4, r1
 801f7a0:	b10a      	cbz	r2, 801f7a6 <_printf_common+0x26>
 801f7a2:	3301      	adds	r3, #1
 801f7a4:	6033      	str	r3, [r6, #0]
 801f7a6:	6823      	ldr	r3, [r4, #0]
 801f7a8:	0699      	lsls	r1, r3, #26
 801f7aa:	bf42      	ittt	mi
 801f7ac:	6833      	ldrmi	r3, [r6, #0]
 801f7ae:	3302      	addmi	r3, #2
 801f7b0:	6033      	strmi	r3, [r6, #0]
 801f7b2:	6825      	ldr	r5, [r4, #0]
 801f7b4:	f015 0506 	ands.w	r5, r5, #6
 801f7b8:	d106      	bne.n	801f7c8 <_printf_common+0x48>
 801f7ba:	f104 0a19 	add.w	sl, r4, #25
 801f7be:	68e3      	ldr	r3, [r4, #12]
 801f7c0:	6832      	ldr	r2, [r6, #0]
 801f7c2:	1a9b      	subs	r3, r3, r2
 801f7c4:	42ab      	cmp	r3, r5
 801f7c6:	dc26      	bgt.n	801f816 <_printf_common+0x96>
 801f7c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f7cc:	1e13      	subs	r3, r2, #0
 801f7ce:	6822      	ldr	r2, [r4, #0]
 801f7d0:	bf18      	it	ne
 801f7d2:	2301      	movne	r3, #1
 801f7d4:	0692      	lsls	r2, r2, #26
 801f7d6:	d42b      	bmi.n	801f830 <_printf_common+0xb0>
 801f7d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f7dc:	4649      	mov	r1, r9
 801f7de:	4638      	mov	r0, r7
 801f7e0:	47c0      	blx	r8
 801f7e2:	3001      	adds	r0, #1
 801f7e4:	d01e      	beq.n	801f824 <_printf_common+0xa4>
 801f7e6:	6823      	ldr	r3, [r4, #0]
 801f7e8:	68e5      	ldr	r5, [r4, #12]
 801f7ea:	6832      	ldr	r2, [r6, #0]
 801f7ec:	f003 0306 	and.w	r3, r3, #6
 801f7f0:	2b04      	cmp	r3, #4
 801f7f2:	bf08      	it	eq
 801f7f4:	1aad      	subeq	r5, r5, r2
 801f7f6:	68a3      	ldr	r3, [r4, #8]
 801f7f8:	6922      	ldr	r2, [r4, #16]
 801f7fa:	bf0c      	ite	eq
 801f7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f800:	2500      	movne	r5, #0
 801f802:	4293      	cmp	r3, r2
 801f804:	bfc4      	itt	gt
 801f806:	1a9b      	subgt	r3, r3, r2
 801f808:	18ed      	addgt	r5, r5, r3
 801f80a:	2600      	movs	r6, #0
 801f80c:	341a      	adds	r4, #26
 801f80e:	42b5      	cmp	r5, r6
 801f810:	d11a      	bne.n	801f848 <_printf_common+0xc8>
 801f812:	2000      	movs	r0, #0
 801f814:	e008      	b.n	801f828 <_printf_common+0xa8>
 801f816:	2301      	movs	r3, #1
 801f818:	4652      	mov	r2, sl
 801f81a:	4649      	mov	r1, r9
 801f81c:	4638      	mov	r0, r7
 801f81e:	47c0      	blx	r8
 801f820:	3001      	adds	r0, #1
 801f822:	d103      	bne.n	801f82c <_printf_common+0xac>
 801f824:	f04f 30ff 	mov.w	r0, #4294967295
 801f828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f82c:	3501      	adds	r5, #1
 801f82e:	e7c6      	b.n	801f7be <_printf_common+0x3e>
 801f830:	18e1      	adds	r1, r4, r3
 801f832:	1c5a      	adds	r2, r3, #1
 801f834:	2030      	movs	r0, #48	; 0x30
 801f836:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f83a:	4422      	add	r2, r4
 801f83c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f840:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f844:	3302      	adds	r3, #2
 801f846:	e7c7      	b.n	801f7d8 <_printf_common+0x58>
 801f848:	2301      	movs	r3, #1
 801f84a:	4622      	mov	r2, r4
 801f84c:	4649      	mov	r1, r9
 801f84e:	4638      	mov	r0, r7
 801f850:	47c0      	blx	r8
 801f852:	3001      	adds	r0, #1
 801f854:	d0e6      	beq.n	801f824 <_printf_common+0xa4>
 801f856:	3601      	adds	r6, #1
 801f858:	e7d9      	b.n	801f80e <_printf_common+0x8e>
	...

0801f85c <_printf_i>:
 801f85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f860:	7e0f      	ldrb	r7, [r1, #24]
 801f862:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f864:	2f78      	cmp	r7, #120	; 0x78
 801f866:	4691      	mov	r9, r2
 801f868:	4680      	mov	r8, r0
 801f86a:	460c      	mov	r4, r1
 801f86c:	469a      	mov	sl, r3
 801f86e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f872:	d807      	bhi.n	801f884 <_printf_i+0x28>
 801f874:	2f62      	cmp	r7, #98	; 0x62
 801f876:	d80a      	bhi.n	801f88e <_printf_i+0x32>
 801f878:	2f00      	cmp	r7, #0
 801f87a:	f000 80d8 	beq.w	801fa2e <_printf_i+0x1d2>
 801f87e:	2f58      	cmp	r7, #88	; 0x58
 801f880:	f000 80a3 	beq.w	801f9ca <_printf_i+0x16e>
 801f884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f888:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f88c:	e03a      	b.n	801f904 <_printf_i+0xa8>
 801f88e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f892:	2b15      	cmp	r3, #21
 801f894:	d8f6      	bhi.n	801f884 <_printf_i+0x28>
 801f896:	a101      	add	r1, pc, #4	; (adr r1, 801f89c <_printf_i+0x40>)
 801f898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f89c:	0801f8f5 	.word	0x0801f8f5
 801f8a0:	0801f909 	.word	0x0801f909
 801f8a4:	0801f885 	.word	0x0801f885
 801f8a8:	0801f885 	.word	0x0801f885
 801f8ac:	0801f885 	.word	0x0801f885
 801f8b0:	0801f885 	.word	0x0801f885
 801f8b4:	0801f909 	.word	0x0801f909
 801f8b8:	0801f885 	.word	0x0801f885
 801f8bc:	0801f885 	.word	0x0801f885
 801f8c0:	0801f885 	.word	0x0801f885
 801f8c4:	0801f885 	.word	0x0801f885
 801f8c8:	0801fa15 	.word	0x0801fa15
 801f8cc:	0801f939 	.word	0x0801f939
 801f8d0:	0801f9f7 	.word	0x0801f9f7
 801f8d4:	0801f885 	.word	0x0801f885
 801f8d8:	0801f885 	.word	0x0801f885
 801f8dc:	0801fa37 	.word	0x0801fa37
 801f8e0:	0801f885 	.word	0x0801f885
 801f8e4:	0801f939 	.word	0x0801f939
 801f8e8:	0801f885 	.word	0x0801f885
 801f8ec:	0801f885 	.word	0x0801f885
 801f8f0:	0801f9ff 	.word	0x0801f9ff
 801f8f4:	682b      	ldr	r3, [r5, #0]
 801f8f6:	1d1a      	adds	r2, r3, #4
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	602a      	str	r2, [r5, #0]
 801f8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f904:	2301      	movs	r3, #1
 801f906:	e0a3      	b.n	801fa50 <_printf_i+0x1f4>
 801f908:	6820      	ldr	r0, [r4, #0]
 801f90a:	6829      	ldr	r1, [r5, #0]
 801f90c:	0606      	lsls	r6, r0, #24
 801f90e:	f101 0304 	add.w	r3, r1, #4
 801f912:	d50a      	bpl.n	801f92a <_printf_i+0xce>
 801f914:	680e      	ldr	r6, [r1, #0]
 801f916:	602b      	str	r3, [r5, #0]
 801f918:	2e00      	cmp	r6, #0
 801f91a:	da03      	bge.n	801f924 <_printf_i+0xc8>
 801f91c:	232d      	movs	r3, #45	; 0x2d
 801f91e:	4276      	negs	r6, r6
 801f920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f924:	485e      	ldr	r0, [pc, #376]	; (801faa0 <_printf_i+0x244>)
 801f926:	230a      	movs	r3, #10
 801f928:	e019      	b.n	801f95e <_printf_i+0x102>
 801f92a:	680e      	ldr	r6, [r1, #0]
 801f92c:	602b      	str	r3, [r5, #0]
 801f92e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f932:	bf18      	it	ne
 801f934:	b236      	sxthne	r6, r6
 801f936:	e7ef      	b.n	801f918 <_printf_i+0xbc>
 801f938:	682b      	ldr	r3, [r5, #0]
 801f93a:	6820      	ldr	r0, [r4, #0]
 801f93c:	1d19      	adds	r1, r3, #4
 801f93e:	6029      	str	r1, [r5, #0]
 801f940:	0601      	lsls	r1, r0, #24
 801f942:	d501      	bpl.n	801f948 <_printf_i+0xec>
 801f944:	681e      	ldr	r6, [r3, #0]
 801f946:	e002      	b.n	801f94e <_printf_i+0xf2>
 801f948:	0646      	lsls	r6, r0, #25
 801f94a:	d5fb      	bpl.n	801f944 <_printf_i+0xe8>
 801f94c:	881e      	ldrh	r6, [r3, #0]
 801f94e:	4854      	ldr	r0, [pc, #336]	; (801faa0 <_printf_i+0x244>)
 801f950:	2f6f      	cmp	r7, #111	; 0x6f
 801f952:	bf0c      	ite	eq
 801f954:	2308      	moveq	r3, #8
 801f956:	230a      	movne	r3, #10
 801f958:	2100      	movs	r1, #0
 801f95a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f95e:	6865      	ldr	r5, [r4, #4]
 801f960:	60a5      	str	r5, [r4, #8]
 801f962:	2d00      	cmp	r5, #0
 801f964:	bfa2      	ittt	ge
 801f966:	6821      	ldrge	r1, [r4, #0]
 801f968:	f021 0104 	bicge.w	r1, r1, #4
 801f96c:	6021      	strge	r1, [r4, #0]
 801f96e:	b90e      	cbnz	r6, 801f974 <_printf_i+0x118>
 801f970:	2d00      	cmp	r5, #0
 801f972:	d04d      	beq.n	801fa10 <_printf_i+0x1b4>
 801f974:	4615      	mov	r5, r2
 801f976:	fbb6 f1f3 	udiv	r1, r6, r3
 801f97a:	fb03 6711 	mls	r7, r3, r1, r6
 801f97e:	5dc7      	ldrb	r7, [r0, r7]
 801f980:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f984:	4637      	mov	r7, r6
 801f986:	42bb      	cmp	r3, r7
 801f988:	460e      	mov	r6, r1
 801f98a:	d9f4      	bls.n	801f976 <_printf_i+0x11a>
 801f98c:	2b08      	cmp	r3, #8
 801f98e:	d10b      	bne.n	801f9a8 <_printf_i+0x14c>
 801f990:	6823      	ldr	r3, [r4, #0]
 801f992:	07de      	lsls	r6, r3, #31
 801f994:	d508      	bpl.n	801f9a8 <_printf_i+0x14c>
 801f996:	6923      	ldr	r3, [r4, #16]
 801f998:	6861      	ldr	r1, [r4, #4]
 801f99a:	4299      	cmp	r1, r3
 801f99c:	bfde      	ittt	le
 801f99e:	2330      	movle	r3, #48	; 0x30
 801f9a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f9a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f9a8:	1b52      	subs	r2, r2, r5
 801f9aa:	6122      	str	r2, [r4, #16]
 801f9ac:	f8cd a000 	str.w	sl, [sp]
 801f9b0:	464b      	mov	r3, r9
 801f9b2:	aa03      	add	r2, sp, #12
 801f9b4:	4621      	mov	r1, r4
 801f9b6:	4640      	mov	r0, r8
 801f9b8:	f7ff fee2 	bl	801f780 <_printf_common>
 801f9bc:	3001      	adds	r0, #1
 801f9be:	d14c      	bne.n	801fa5a <_printf_i+0x1fe>
 801f9c0:	f04f 30ff 	mov.w	r0, #4294967295
 801f9c4:	b004      	add	sp, #16
 801f9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f9ca:	4835      	ldr	r0, [pc, #212]	; (801faa0 <_printf_i+0x244>)
 801f9cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f9d0:	6829      	ldr	r1, [r5, #0]
 801f9d2:	6823      	ldr	r3, [r4, #0]
 801f9d4:	f851 6b04 	ldr.w	r6, [r1], #4
 801f9d8:	6029      	str	r1, [r5, #0]
 801f9da:	061d      	lsls	r5, r3, #24
 801f9dc:	d514      	bpl.n	801fa08 <_printf_i+0x1ac>
 801f9de:	07df      	lsls	r7, r3, #31
 801f9e0:	bf44      	itt	mi
 801f9e2:	f043 0320 	orrmi.w	r3, r3, #32
 801f9e6:	6023      	strmi	r3, [r4, #0]
 801f9e8:	b91e      	cbnz	r6, 801f9f2 <_printf_i+0x196>
 801f9ea:	6823      	ldr	r3, [r4, #0]
 801f9ec:	f023 0320 	bic.w	r3, r3, #32
 801f9f0:	6023      	str	r3, [r4, #0]
 801f9f2:	2310      	movs	r3, #16
 801f9f4:	e7b0      	b.n	801f958 <_printf_i+0xfc>
 801f9f6:	6823      	ldr	r3, [r4, #0]
 801f9f8:	f043 0320 	orr.w	r3, r3, #32
 801f9fc:	6023      	str	r3, [r4, #0]
 801f9fe:	2378      	movs	r3, #120	; 0x78
 801fa00:	4828      	ldr	r0, [pc, #160]	; (801faa4 <_printf_i+0x248>)
 801fa02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fa06:	e7e3      	b.n	801f9d0 <_printf_i+0x174>
 801fa08:	0659      	lsls	r1, r3, #25
 801fa0a:	bf48      	it	mi
 801fa0c:	b2b6      	uxthmi	r6, r6
 801fa0e:	e7e6      	b.n	801f9de <_printf_i+0x182>
 801fa10:	4615      	mov	r5, r2
 801fa12:	e7bb      	b.n	801f98c <_printf_i+0x130>
 801fa14:	682b      	ldr	r3, [r5, #0]
 801fa16:	6826      	ldr	r6, [r4, #0]
 801fa18:	6961      	ldr	r1, [r4, #20]
 801fa1a:	1d18      	adds	r0, r3, #4
 801fa1c:	6028      	str	r0, [r5, #0]
 801fa1e:	0635      	lsls	r5, r6, #24
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	d501      	bpl.n	801fa28 <_printf_i+0x1cc>
 801fa24:	6019      	str	r1, [r3, #0]
 801fa26:	e002      	b.n	801fa2e <_printf_i+0x1d2>
 801fa28:	0670      	lsls	r0, r6, #25
 801fa2a:	d5fb      	bpl.n	801fa24 <_printf_i+0x1c8>
 801fa2c:	8019      	strh	r1, [r3, #0]
 801fa2e:	2300      	movs	r3, #0
 801fa30:	6123      	str	r3, [r4, #16]
 801fa32:	4615      	mov	r5, r2
 801fa34:	e7ba      	b.n	801f9ac <_printf_i+0x150>
 801fa36:	682b      	ldr	r3, [r5, #0]
 801fa38:	1d1a      	adds	r2, r3, #4
 801fa3a:	602a      	str	r2, [r5, #0]
 801fa3c:	681d      	ldr	r5, [r3, #0]
 801fa3e:	6862      	ldr	r2, [r4, #4]
 801fa40:	2100      	movs	r1, #0
 801fa42:	4628      	mov	r0, r5
 801fa44:	f7e0 fc4c 	bl	80002e0 <memchr>
 801fa48:	b108      	cbz	r0, 801fa4e <_printf_i+0x1f2>
 801fa4a:	1b40      	subs	r0, r0, r5
 801fa4c:	6060      	str	r0, [r4, #4]
 801fa4e:	6863      	ldr	r3, [r4, #4]
 801fa50:	6123      	str	r3, [r4, #16]
 801fa52:	2300      	movs	r3, #0
 801fa54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa58:	e7a8      	b.n	801f9ac <_printf_i+0x150>
 801fa5a:	6923      	ldr	r3, [r4, #16]
 801fa5c:	462a      	mov	r2, r5
 801fa5e:	4649      	mov	r1, r9
 801fa60:	4640      	mov	r0, r8
 801fa62:	47d0      	blx	sl
 801fa64:	3001      	adds	r0, #1
 801fa66:	d0ab      	beq.n	801f9c0 <_printf_i+0x164>
 801fa68:	6823      	ldr	r3, [r4, #0]
 801fa6a:	079b      	lsls	r3, r3, #30
 801fa6c:	d413      	bmi.n	801fa96 <_printf_i+0x23a>
 801fa6e:	68e0      	ldr	r0, [r4, #12]
 801fa70:	9b03      	ldr	r3, [sp, #12]
 801fa72:	4298      	cmp	r0, r3
 801fa74:	bfb8      	it	lt
 801fa76:	4618      	movlt	r0, r3
 801fa78:	e7a4      	b.n	801f9c4 <_printf_i+0x168>
 801fa7a:	2301      	movs	r3, #1
 801fa7c:	4632      	mov	r2, r6
 801fa7e:	4649      	mov	r1, r9
 801fa80:	4640      	mov	r0, r8
 801fa82:	47d0      	blx	sl
 801fa84:	3001      	adds	r0, #1
 801fa86:	d09b      	beq.n	801f9c0 <_printf_i+0x164>
 801fa88:	3501      	adds	r5, #1
 801fa8a:	68e3      	ldr	r3, [r4, #12]
 801fa8c:	9903      	ldr	r1, [sp, #12]
 801fa8e:	1a5b      	subs	r3, r3, r1
 801fa90:	42ab      	cmp	r3, r5
 801fa92:	dcf2      	bgt.n	801fa7a <_printf_i+0x21e>
 801fa94:	e7eb      	b.n	801fa6e <_printf_i+0x212>
 801fa96:	2500      	movs	r5, #0
 801fa98:	f104 0619 	add.w	r6, r4, #25
 801fa9c:	e7f5      	b.n	801fa8a <_printf_i+0x22e>
 801fa9e:	bf00      	nop
 801faa0:	08023771 	.word	0x08023771
 801faa4:	08023782 	.word	0x08023782

0801faa8 <cleanup_glue>:
 801faa8:	b538      	push	{r3, r4, r5, lr}
 801faaa:	460c      	mov	r4, r1
 801faac:	6809      	ldr	r1, [r1, #0]
 801faae:	4605      	mov	r5, r0
 801fab0:	b109      	cbz	r1, 801fab6 <cleanup_glue+0xe>
 801fab2:	f7ff fff9 	bl	801faa8 <cleanup_glue>
 801fab6:	4621      	mov	r1, r4
 801fab8:	4628      	mov	r0, r5
 801faba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fabe:	f7ff bc25 	b.w	801f30c <_free_r>
	...

0801fac4 <_reclaim_reent>:
 801fac4:	4b2c      	ldr	r3, [pc, #176]	; (801fb78 <_reclaim_reent+0xb4>)
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	4283      	cmp	r3, r0
 801faca:	b570      	push	{r4, r5, r6, lr}
 801facc:	4604      	mov	r4, r0
 801face:	d051      	beq.n	801fb74 <_reclaim_reent+0xb0>
 801fad0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801fad2:	b143      	cbz	r3, 801fae6 <_reclaim_reent+0x22>
 801fad4:	68db      	ldr	r3, [r3, #12]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d14a      	bne.n	801fb70 <_reclaim_reent+0xac>
 801fada:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fadc:	6819      	ldr	r1, [r3, #0]
 801fade:	b111      	cbz	r1, 801fae6 <_reclaim_reent+0x22>
 801fae0:	4620      	mov	r0, r4
 801fae2:	f7ff fc13 	bl	801f30c <_free_r>
 801fae6:	6961      	ldr	r1, [r4, #20]
 801fae8:	b111      	cbz	r1, 801faf0 <_reclaim_reent+0x2c>
 801faea:	4620      	mov	r0, r4
 801faec:	f7ff fc0e 	bl	801f30c <_free_r>
 801faf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801faf2:	b111      	cbz	r1, 801fafa <_reclaim_reent+0x36>
 801faf4:	4620      	mov	r0, r4
 801faf6:	f7ff fc09 	bl	801f30c <_free_r>
 801fafa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801fafc:	b111      	cbz	r1, 801fb04 <_reclaim_reent+0x40>
 801fafe:	4620      	mov	r0, r4
 801fb00:	f7ff fc04 	bl	801f30c <_free_r>
 801fb04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801fb06:	b111      	cbz	r1, 801fb0e <_reclaim_reent+0x4a>
 801fb08:	4620      	mov	r0, r4
 801fb0a:	f7ff fbff 	bl	801f30c <_free_r>
 801fb0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801fb10:	b111      	cbz	r1, 801fb18 <_reclaim_reent+0x54>
 801fb12:	4620      	mov	r0, r4
 801fb14:	f7ff fbfa 	bl	801f30c <_free_r>
 801fb18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801fb1a:	b111      	cbz	r1, 801fb22 <_reclaim_reent+0x5e>
 801fb1c:	4620      	mov	r0, r4
 801fb1e:	f7ff fbf5 	bl	801f30c <_free_r>
 801fb22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801fb24:	b111      	cbz	r1, 801fb2c <_reclaim_reent+0x68>
 801fb26:	4620      	mov	r0, r4
 801fb28:	f7ff fbf0 	bl	801f30c <_free_r>
 801fb2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb2e:	b111      	cbz	r1, 801fb36 <_reclaim_reent+0x72>
 801fb30:	4620      	mov	r0, r4
 801fb32:	f7ff fbeb 	bl	801f30c <_free_r>
 801fb36:	69a3      	ldr	r3, [r4, #24]
 801fb38:	b1e3      	cbz	r3, 801fb74 <_reclaim_reent+0xb0>
 801fb3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801fb3c:	4620      	mov	r0, r4
 801fb3e:	4798      	blx	r3
 801fb40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801fb42:	b1b9      	cbz	r1, 801fb74 <_reclaim_reent+0xb0>
 801fb44:	4620      	mov	r0, r4
 801fb46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb4a:	f7ff bfad 	b.w	801faa8 <cleanup_glue>
 801fb4e:	5949      	ldr	r1, [r1, r5]
 801fb50:	b941      	cbnz	r1, 801fb64 <_reclaim_reent+0xa0>
 801fb52:	3504      	adds	r5, #4
 801fb54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb56:	2d80      	cmp	r5, #128	; 0x80
 801fb58:	68d9      	ldr	r1, [r3, #12]
 801fb5a:	d1f8      	bne.n	801fb4e <_reclaim_reent+0x8a>
 801fb5c:	4620      	mov	r0, r4
 801fb5e:	f7ff fbd5 	bl	801f30c <_free_r>
 801fb62:	e7ba      	b.n	801fada <_reclaim_reent+0x16>
 801fb64:	680e      	ldr	r6, [r1, #0]
 801fb66:	4620      	mov	r0, r4
 801fb68:	f7ff fbd0 	bl	801f30c <_free_r>
 801fb6c:	4631      	mov	r1, r6
 801fb6e:	e7ef      	b.n	801fb50 <_reclaim_reent+0x8c>
 801fb70:	2500      	movs	r5, #0
 801fb72:	e7ef      	b.n	801fb54 <_reclaim_reent+0x90>
 801fb74:	bd70      	pop	{r4, r5, r6, pc}
 801fb76:	bf00      	nop
 801fb78:	240000c4 	.word	0x240000c4

0801fb7c <_sbrk_r>:
 801fb7c:	b538      	push	{r3, r4, r5, lr}
 801fb7e:	4d06      	ldr	r5, [pc, #24]	; (801fb98 <_sbrk_r+0x1c>)
 801fb80:	2300      	movs	r3, #0
 801fb82:	4604      	mov	r4, r0
 801fb84:	4608      	mov	r0, r1
 801fb86:	602b      	str	r3, [r5, #0]
 801fb88:	f7e1 fd58 	bl	800163c <_sbrk>
 801fb8c:	1c43      	adds	r3, r0, #1
 801fb8e:	d102      	bne.n	801fb96 <_sbrk_r+0x1a>
 801fb90:	682b      	ldr	r3, [r5, #0]
 801fb92:	b103      	cbz	r3, 801fb96 <_sbrk_r+0x1a>
 801fb94:	6023      	str	r3, [r4, #0]
 801fb96:	bd38      	pop	{r3, r4, r5, pc}
 801fb98:	2400f78c 	.word	0x2400f78c

0801fb9c <_raise_r>:
 801fb9c:	291f      	cmp	r1, #31
 801fb9e:	b538      	push	{r3, r4, r5, lr}
 801fba0:	4604      	mov	r4, r0
 801fba2:	460d      	mov	r5, r1
 801fba4:	d904      	bls.n	801fbb0 <_raise_r+0x14>
 801fba6:	2316      	movs	r3, #22
 801fba8:	6003      	str	r3, [r0, #0]
 801fbaa:	f04f 30ff 	mov.w	r0, #4294967295
 801fbae:	bd38      	pop	{r3, r4, r5, pc}
 801fbb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801fbb2:	b112      	cbz	r2, 801fbba <_raise_r+0x1e>
 801fbb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fbb8:	b94b      	cbnz	r3, 801fbce <_raise_r+0x32>
 801fbba:	4620      	mov	r0, r4
 801fbbc:	f000 f830 	bl	801fc20 <_getpid_r>
 801fbc0:	462a      	mov	r2, r5
 801fbc2:	4601      	mov	r1, r0
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fbca:	f000 b817 	b.w	801fbfc <_kill_r>
 801fbce:	2b01      	cmp	r3, #1
 801fbd0:	d00a      	beq.n	801fbe8 <_raise_r+0x4c>
 801fbd2:	1c59      	adds	r1, r3, #1
 801fbd4:	d103      	bne.n	801fbde <_raise_r+0x42>
 801fbd6:	2316      	movs	r3, #22
 801fbd8:	6003      	str	r3, [r0, #0]
 801fbda:	2001      	movs	r0, #1
 801fbdc:	e7e7      	b.n	801fbae <_raise_r+0x12>
 801fbde:	2400      	movs	r4, #0
 801fbe0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fbe4:	4628      	mov	r0, r5
 801fbe6:	4798      	blx	r3
 801fbe8:	2000      	movs	r0, #0
 801fbea:	e7e0      	b.n	801fbae <_raise_r+0x12>

0801fbec <raise>:
 801fbec:	4b02      	ldr	r3, [pc, #8]	; (801fbf8 <raise+0xc>)
 801fbee:	4601      	mov	r1, r0
 801fbf0:	6818      	ldr	r0, [r3, #0]
 801fbf2:	f7ff bfd3 	b.w	801fb9c <_raise_r>
 801fbf6:	bf00      	nop
 801fbf8:	240000c4 	.word	0x240000c4

0801fbfc <_kill_r>:
 801fbfc:	b538      	push	{r3, r4, r5, lr}
 801fbfe:	4d07      	ldr	r5, [pc, #28]	; (801fc1c <_kill_r+0x20>)
 801fc00:	2300      	movs	r3, #0
 801fc02:	4604      	mov	r4, r0
 801fc04:	4608      	mov	r0, r1
 801fc06:	4611      	mov	r1, r2
 801fc08:	602b      	str	r3, [r5, #0]
 801fc0a:	f7e1 fce1 	bl	80015d0 <_kill>
 801fc0e:	1c43      	adds	r3, r0, #1
 801fc10:	d102      	bne.n	801fc18 <_kill_r+0x1c>
 801fc12:	682b      	ldr	r3, [r5, #0]
 801fc14:	b103      	cbz	r3, 801fc18 <_kill_r+0x1c>
 801fc16:	6023      	str	r3, [r4, #0]
 801fc18:	bd38      	pop	{r3, r4, r5, pc}
 801fc1a:	bf00      	nop
 801fc1c:	2400f78c 	.word	0x2400f78c

0801fc20 <_getpid_r>:
 801fc20:	f7e1 bcd4 	b.w	80015cc <_getpid>

0801fc24 <__sread>:
 801fc24:	b510      	push	{r4, lr}
 801fc26:	460c      	mov	r4, r1
 801fc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc2c:	f000 fe2a 	bl	8020884 <_read_r>
 801fc30:	2800      	cmp	r0, #0
 801fc32:	bfab      	itete	ge
 801fc34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801fc36:	89a3      	ldrhlt	r3, [r4, #12]
 801fc38:	181b      	addge	r3, r3, r0
 801fc3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801fc3e:	bfac      	ite	ge
 801fc40:	6563      	strge	r3, [r4, #84]	; 0x54
 801fc42:	81a3      	strhlt	r3, [r4, #12]
 801fc44:	bd10      	pop	{r4, pc}

0801fc46 <__seofread>:
 801fc46:	2000      	movs	r0, #0
 801fc48:	4770      	bx	lr

0801fc4a <__swrite>:
 801fc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc4e:	461f      	mov	r7, r3
 801fc50:	898b      	ldrh	r3, [r1, #12]
 801fc52:	05db      	lsls	r3, r3, #23
 801fc54:	4605      	mov	r5, r0
 801fc56:	460c      	mov	r4, r1
 801fc58:	4616      	mov	r6, r2
 801fc5a:	d505      	bpl.n	801fc68 <__swrite+0x1e>
 801fc5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc60:	2302      	movs	r3, #2
 801fc62:	2200      	movs	r2, #0
 801fc64:	f000 fd5a 	bl	802071c <_lseek_r>
 801fc68:	89a3      	ldrh	r3, [r4, #12]
 801fc6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fc6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fc72:	81a3      	strh	r3, [r4, #12]
 801fc74:	4632      	mov	r2, r6
 801fc76:	463b      	mov	r3, r7
 801fc78:	4628      	mov	r0, r5
 801fc7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fc7e:	f000 baa5 	b.w	80201cc <_write_r>

0801fc82 <__sseek>:
 801fc82:	b510      	push	{r4, lr}
 801fc84:	460c      	mov	r4, r1
 801fc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fc8a:	f000 fd47 	bl	802071c <_lseek_r>
 801fc8e:	1c43      	adds	r3, r0, #1
 801fc90:	89a3      	ldrh	r3, [r4, #12]
 801fc92:	bf15      	itete	ne
 801fc94:	6560      	strne	r0, [r4, #84]	; 0x54
 801fc96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fc9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fc9e:	81a3      	strheq	r3, [r4, #12]
 801fca0:	bf18      	it	ne
 801fca2:	81a3      	strhne	r3, [r4, #12]
 801fca4:	bd10      	pop	{r4, pc}

0801fca6 <__sclose>:
 801fca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fcaa:	f000 bb71 	b.w	8020390 <_close_r>
	...

0801fcb0 <__tzcalc_limits>:
 801fcb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcb4:	4605      	mov	r5, r0
 801fcb6:	f000 fc81 	bl	80205bc <__gettzinfo>
 801fcba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801fcbe:	429d      	cmp	r5, r3
 801fcc0:	f340 8099 	ble.w	801fdf6 <__tzcalc_limits+0x146>
 801fcc4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 801fcc8:	18ac      	adds	r4, r5, r2
 801fcca:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 801fcce:	f240 126d 	movw	r2, #365	; 0x16d
 801fcd2:	10a4      	asrs	r4, r4, #2
 801fcd4:	fb02 4403 	mla	r4, r2, r3, r4
 801fcd8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801fcdc:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 801fce0:	fb93 f3f2 	sdiv	r3, r3, r2
 801fce4:	441c      	add	r4, r3
 801fce6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fcea:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 801fcee:	fb95 fcf3 	sdiv	ip, r5, r3
 801fcf2:	fb03 5c1c 	mls	ip, r3, ip, r5
 801fcf6:	186a      	adds	r2, r5, r1
 801fcf8:	fabc f68c 	clz	r6, ip
 801fcfc:	fbb2 f2f3 	udiv	r2, r2, r3
 801fd00:	f005 0303 	and.w	r3, r5, #3
 801fd04:	4414      	add	r4, r2
 801fd06:	2264      	movs	r2, #100	; 0x64
 801fd08:	6045      	str	r5, [r0, #4]
 801fd0a:	fb95 f7f2 	sdiv	r7, r5, r2
 801fd0e:	0976      	lsrs	r6, r6, #5
 801fd10:	fb02 5717 	mls	r7, r2, r7, r5
 801fd14:	4601      	mov	r1, r0
 801fd16:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801fd1a:	9300      	str	r3, [sp, #0]
 801fd1c:	f04f 0a07 	mov.w	sl, #7
 801fd20:	7a0d      	ldrb	r5, [r1, #8]
 801fd22:	694b      	ldr	r3, [r1, #20]
 801fd24:	2d4a      	cmp	r5, #74	; 0x4a
 801fd26:	d12d      	bne.n	801fd84 <__tzcalc_limits+0xd4>
 801fd28:	9a00      	ldr	r2, [sp, #0]
 801fd2a:	eb04 0e03 	add.w	lr, r4, r3
 801fd2e:	b902      	cbnz	r2, 801fd32 <__tzcalc_limits+0x82>
 801fd30:	b917      	cbnz	r7, 801fd38 <__tzcalc_limits+0x88>
 801fd32:	f1bc 0f00 	cmp.w	ip, #0
 801fd36:	d123      	bne.n	801fd80 <__tzcalc_limits+0xd0>
 801fd38:	2b3b      	cmp	r3, #59	; 0x3b
 801fd3a:	bfd4      	ite	le
 801fd3c:	2300      	movle	r3, #0
 801fd3e:	2301      	movgt	r3, #1
 801fd40:	4473      	add	r3, lr
 801fd42:	3b01      	subs	r3, #1
 801fd44:	698d      	ldr	r5, [r1, #24]
 801fd46:	4a2d      	ldr	r2, [pc, #180]	; (801fdfc <__tzcalc_limits+0x14c>)
 801fd48:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 801fd4c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 801fd50:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 801fd52:	18ed      	adds	r5, r5, r3
 801fd54:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 801fd58:	e9c1 5308 	strd	r5, r3, [r1, #32]
 801fd5c:	3128      	adds	r1, #40	; 0x28
 801fd5e:	458b      	cmp	fp, r1
 801fd60:	d1de      	bne.n	801fd20 <__tzcalc_limits+0x70>
 801fd62:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801fd66:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801fd6a:	428c      	cmp	r4, r1
 801fd6c:	eb72 0303 	sbcs.w	r3, r2, r3
 801fd70:	bfb4      	ite	lt
 801fd72:	2301      	movlt	r3, #1
 801fd74:	2300      	movge	r3, #0
 801fd76:	6003      	str	r3, [r0, #0]
 801fd78:	2001      	movs	r0, #1
 801fd7a:	b003      	add	sp, #12
 801fd7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd80:	2300      	movs	r3, #0
 801fd82:	e7dd      	b.n	801fd40 <__tzcalc_limits+0x90>
 801fd84:	2d44      	cmp	r5, #68	; 0x44
 801fd86:	d101      	bne.n	801fd8c <__tzcalc_limits+0xdc>
 801fd88:	4423      	add	r3, r4
 801fd8a:	e7db      	b.n	801fd44 <__tzcalc_limits+0x94>
 801fd8c:	9a00      	ldr	r2, [sp, #0]
 801fd8e:	bb62      	cbnz	r2, 801fdea <__tzcalc_limits+0x13a>
 801fd90:	2f00      	cmp	r7, #0
 801fd92:	bf0c      	ite	eq
 801fd94:	4635      	moveq	r5, r6
 801fd96:	2501      	movne	r5, #1
 801fd98:	68ca      	ldr	r2, [r1, #12]
 801fd9a:	9201      	str	r2, [sp, #4]
 801fd9c:	4a18      	ldr	r2, [pc, #96]	; (801fe00 <__tzcalc_limits+0x150>)
 801fd9e:	f04f 0930 	mov.w	r9, #48	; 0x30
 801fda2:	fb09 2505 	mla	r5, r9, r5, r2
 801fda6:	46a6      	mov	lr, r4
 801fda8:	f04f 0800 	mov.w	r8, #0
 801fdac:	3d04      	subs	r5, #4
 801fdae:	9a01      	ldr	r2, [sp, #4]
 801fdb0:	f108 0801 	add.w	r8, r8, #1
 801fdb4:	4542      	cmp	r2, r8
 801fdb6:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801fdba:	dc18      	bgt.n	801fdee <__tzcalc_limits+0x13e>
 801fdbc:	f10e 0504 	add.w	r5, lr, #4
 801fdc0:	fb95 f8fa 	sdiv	r8, r5, sl
 801fdc4:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 801fdc8:	eba5 0808 	sub.w	r8, r5, r8
 801fdcc:	ebb3 0808 	subs.w	r8, r3, r8
 801fdd0:	690b      	ldr	r3, [r1, #16]
 801fdd2:	f103 33ff 	add.w	r3, r3, #4294967295
 801fdd6:	bf48      	it	mi
 801fdd8:	f108 0807 	addmi.w	r8, r8, #7
 801fddc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801fde0:	4443      	add	r3, r8
 801fde2:	454b      	cmp	r3, r9
 801fde4:	da05      	bge.n	801fdf2 <__tzcalc_limits+0x142>
 801fde6:	4473      	add	r3, lr
 801fde8:	e7ac      	b.n	801fd44 <__tzcalc_limits+0x94>
 801fdea:	4635      	mov	r5, r6
 801fdec:	e7d4      	b.n	801fd98 <__tzcalc_limits+0xe8>
 801fdee:	44ce      	add	lr, r9
 801fdf0:	e7dd      	b.n	801fdae <__tzcalc_limits+0xfe>
 801fdf2:	3b07      	subs	r3, #7
 801fdf4:	e7f5      	b.n	801fde2 <__tzcalc_limits+0x132>
 801fdf6:	2000      	movs	r0, #0
 801fdf8:	e7bf      	b.n	801fd7a <__tzcalc_limits+0xca>
 801fdfa:	bf00      	nop
 801fdfc:	00015180 	.word	0x00015180
 801fe00:	08023700 	.word	0x08023700

0801fe04 <__tz_lock>:
 801fe04:	4801      	ldr	r0, [pc, #4]	; (801fe0c <__tz_lock+0x8>)
 801fe06:	f7ff ba56 	b.w	801f2b6 <__retarget_lock_acquire>
 801fe0a:	bf00      	nop
 801fe0c:	2400f679 	.word	0x2400f679

0801fe10 <__tz_unlock>:
 801fe10:	4801      	ldr	r0, [pc, #4]	; (801fe18 <__tz_unlock+0x8>)
 801fe12:	f7ff ba52 	b.w	801f2ba <__retarget_lock_release>
 801fe16:	bf00      	nop
 801fe18:	2400f679 	.word	0x2400f679

0801fe1c <_tzset_unlocked>:
 801fe1c:	4b01      	ldr	r3, [pc, #4]	; (801fe24 <_tzset_unlocked+0x8>)
 801fe1e:	6818      	ldr	r0, [r3, #0]
 801fe20:	f000 b802 	b.w	801fe28 <_tzset_unlocked_r>
 801fe24:	240000c4 	.word	0x240000c4

0801fe28 <_tzset_unlocked_r>:
 801fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe2c:	b08d      	sub	sp, #52	; 0x34
 801fe2e:	4607      	mov	r7, r0
 801fe30:	f000 fbc4 	bl	80205bc <__gettzinfo>
 801fe34:	49b0      	ldr	r1, [pc, #704]	; (80200f8 <_tzset_unlocked_r+0x2d0>)
 801fe36:	4eb1      	ldr	r6, [pc, #708]	; (80200fc <_tzset_unlocked_r+0x2d4>)
 801fe38:	4605      	mov	r5, r0
 801fe3a:	4638      	mov	r0, r7
 801fe3c:	f000 fbb6 	bl	80205ac <_getenv_r>
 801fe40:	4604      	mov	r4, r0
 801fe42:	b970      	cbnz	r0, 801fe62 <_tzset_unlocked_r+0x3a>
 801fe44:	4bae      	ldr	r3, [pc, #696]	; (8020100 <_tzset_unlocked_r+0x2d8>)
 801fe46:	4aaf      	ldr	r2, [pc, #700]	; (8020104 <_tzset_unlocked_r+0x2dc>)
 801fe48:	6018      	str	r0, [r3, #0]
 801fe4a:	4baf      	ldr	r3, [pc, #700]	; (8020108 <_tzset_unlocked_r+0x2e0>)
 801fe4c:	6018      	str	r0, [r3, #0]
 801fe4e:	4baf      	ldr	r3, [pc, #700]	; (802010c <_tzset_unlocked_r+0x2e4>)
 801fe50:	6830      	ldr	r0, [r6, #0]
 801fe52:	e9c3 2200 	strd	r2, r2, [r3]
 801fe56:	f7ff fa3b 	bl	801f2d0 <free>
 801fe5a:	6034      	str	r4, [r6, #0]
 801fe5c:	b00d      	add	sp, #52	; 0x34
 801fe5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe62:	6831      	ldr	r1, [r6, #0]
 801fe64:	2900      	cmp	r1, #0
 801fe66:	d162      	bne.n	801ff2e <_tzset_unlocked_r+0x106>
 801fe68:	6830      	ldr	r0, [r6, #0]
 801fe6a:	f7ff fa31 	bl	801f2d0 <free>
 801fe6e:	4620      	mov	r0, r4
 801fe70:	f7e0 fa90 	bl	8000394 <strlen>
 801fe74:	1c41      	adds	r1, r0, #1
 801fe76:	4638      	mov	r0, r7
 801fe78:	f7ff fab4 	bl	801f3e4 <_malloc_r>
 801fe7c:	6030      	str	r0, [r6, #0]
 801fe7e:	2800      	cmp	r0, #0
 801fe80:	d15a      	bne.n	801ff38 <_tzset_unlocked_r+0x110>
 801fe82:	7823      	ldrb	r3, [r4, #0]
 801fe84:	4aa2      	ldr	r2, [pc, #648]	; (8020110 <_tzset_unlocked_r+0x2e8>)
 801fe86:	49a3      	ldr	r1, [pc, #652]	; (8020114 <_tzset_unlocked_r+0x2ec>)
 801fe88:	2b3a      	cmp	r3, #58	; 0x3a
 801fe8a:	bf08      	it	eq
 801fe8c:	3401      	addeq	r4, #1
 801fe8e:	ae0a      	add	r6, sp, #40	; 0x28
 801fe90:	4633      	mov	r3, r6
 801fe92:	4620      	mov	r0, r4
 801fe94:	f000 fd08 	bl	80208a8 <siscanf>
 801fe98:	2800      	cmp	r0, #0
 801fe9a:	dddf      	ble.n	801fe5c <_tzset_unlocked_r+0x34>
 801fe9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fe9e:	18e7      	adds	r7, r4, r3
 801fea0:	5ce3      	ldrb	r3, [r4, r3]
 801fea2:	2b2d      	cmp	r3, #45	; 0x2d
 801fea4:	d14c      	bne.n	801ff40 <_tzset_unlocked_r+0x118>
 801fea6:	3701      	adds	r7, #1
 801fea8:	f04f 38ff 	mov.w	r8, #4294967295
 801feac:	f10d 0a20 	add.w	sl, sp, #32
 801feb0:	f10d 0b1e 	add.w	fp, sp, #30
 801feb4:	2400      	movs	r4, #0
 801feb6:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801feba:	4997      	ldr	r1, [pc, #604]	; (8020118 <_tzset_unlocked_r+0x2f0>)
 801febc:	9603      	str	r6, [sp, #12]
 801febe:	f8cd b000 	str.w	fp, [sp]
 801fec2:	4633      	mov	r3, r6
 801fec4:	aa07      	add	r2, sp, #28
 801fec6:	4638      	mov	r0, r7
 801fec8:	f8ad 401e 	strh.w	r4, [sp, #30]
 801fecc:	f8ad 4020 	strh.w	r4, [sp, #32]
 801fed0:	f000 fcea 	bl	80208a8 <siscanf>
 801fed4:	42a0      	cmp	r0, r4
 801fed6:	ddc1      	ble.n	801fe5c <_tzset_unlocked_r+0x34>
 801fed8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801fedc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801fee0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8020124 <_tzset_unlocked_r+0x2fc>
 801fee4:	213c      	movs	r1, #60	; 0x3c
 801fee6:	fb01 3302 	mla	r3, r1, r2, r3
 801feea:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801feee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801fef2:	fb01 3302 	mla	r3, r1, r2, r3
 801fef6:	fb08 f303 	mul.w	r3, r8, r3
 801fefa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 802010c <_tzset_unlocked_r+0x2e4>
 801fefe:	62ab      	str	r3, [r5, #40]	; 0x28
 801ff00:	4b83      	ldr	r3, [pc, #524]	; (8020110 <_tzset_unlocked_r+0x2e8>)
 801ff02:	f8c8 3000 	str.w	r3, [r8]
 801ff06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff08:	4982      	ldr	r1, [pc, #520]	; (8020114 <_tzset_unlocked_r+0x2ec>)
 801ff0a:	441f      	add	r7, r3
 801ff0c:	464a      	mov	r2, r9
 801ff0e:	4633      	mov	r3, r6
 801ff10:	4638      	mov	r0, r7
 801ff12:	f000 fcc9 	bl	80208a8 <siscanf>
 801ff16:	42a0      	cmp	r0, r4
 801ff18:	dc18      	bgt.n	801ff4c <_tzset_unlocked_r+0x124>
 801ff1a:	f8d8 3000 	ldr.w	r3, [r8]
 801ff1e:	f8c8 3004 	str.w	r3, [r8, #4]
 801ff22:	4b77      	ldr	r3, [pc, #476]	; (8020100 <_tzset_unlocked_r+0x2d8>)
 801ff24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ff26:	601a      	str	r2, [r3, #0]
 801ff28:	4b77      	ldr	r3, [pc, #476]	; (8020108 <_tzset_unlocked_r+0x2e0>)
 801ff2a:	601c      	str	r4, [r3, #0]
 801ff2c:	e796      	b.n	801fe5c <_tzset_unlocked_r+0x34>
 801ff2e:	f7e0 fa27 	bl	8000380 <strcmp>
 801ff32:	2800      	cmp	r0, #0
 801ff34:	d198      	bne.n	801fe68 <_tzset_unlocked_r+0x40>
 801ff36:	e791      	b.n	801fe5c <_tzset_unlocked_r+0x34>
 801ff38:	4621      	mov	r1, r4
 801ff3a:	f000 fce1 	bl	8020900 <strcpy>
 801ff3e:	e7a0      	b.n	801fe82 <_tzset_unlocked_r+0x5a>
 801ff40:	2b2b      	cmp	r3, #43	; 0x2b
 801ff42:	bf08      	it	eq
 801ff44:	3701      	addeq	r7, #1
 801ff46:	f04f 0801 	mov.w	r8, #1
 801ff4a:	e7af      	b.n	801feac <_tzset_unlocked_r+0x84>
 801ff4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff4e:	f8c8 9004 	str.w	r9, [r8, #4]
 801ff52:	18fc      	adds	r4, r7, r3
 801ff54:	5cfb      	ldrb	r3, [r7, r3]
 801ff56:	2b2d      	cmp	r3, #45	; 0x2d
 801ff58:	f040 808b 	bne.w	8020072 <_tzset_unlocked_r+0x24a>
 801ff5c:	3401      	adds	r4, #1
 801ff5e:	f04f 37ff 	mov.w	r7, #4294967295
 801ff62:	2300      	movs	r3, #0
 801ff64:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ff68:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ff6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ff70:	930a      	str	r3, [sp, #40]	; 0x28
 801ff72:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ff76:	e9cd b600 	strd	fp, r6, [sp]
 801ff7a:	4967      	ldr	r1, [pc, #412]	; (8020118 <_tzset_unlocked_r+0x2f0>)
 801ff7c:	4633      	mov	r3, r6
 801ff7e:	aa07      	add	r2, sp, #28
 801ff80:	4620      	mov	r0, r4
 801ff82:	f000 fc91 	bl	80208a8 <siscanf>
 801ff86:	2800      	cmp	r0, #0
 801ff88:	dc78      	bgt.n	802007c <_tzset_unlocked_r+0x254>
 801ff8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801ff8c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801ff90:	652b      	str	r3, [r5, #80]	; 0x50
 801ff92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff94:	462f      	mov	r7, r5
 801ff96:	441c      	add	r4, r3
 801ff98:	f04f 0900 	mov.w	r9, #0
 801ff9c:	7823      	ldrb	r3, [r4, #0]
 801ff9e:	2b2c      	cmp	r3, #44	; 0x2c
 801ffa0:	bf08      	it	eq
 801ffa2:	3401      	addeq	r4, #1
 801ffa4:	f894 8000 	ldrb.w	r8, [r4]
 801ffa8:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801ffac:	d178      	bne.n	80200a0 <_tzset_unlocked_r+0x278>
 801ffae:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801ffb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ffb6:	ab09      	add	r3, sp, #36	; 0x24
 801ffb8:	9300      	str	r3, [sp, #0]
 801ffba:	4958      	ldr	r1, [pc, #352]	; (802011c <_tzset_unlocked_r+0x2f4>)
 801ffbc:	9603      	str	r6, [sp, #12]
 801ffbe:	4633      	mov	r3, r6
 801ffc0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ffc4:	4620      	mov	r0, r4
 801ffc6:	f000 fc6f 	bl	80208a8 <siscanf>
 801ffca:	2803      	cmp	r0, #3
 801ffcc:	f47f af46 	bne.w	801fe5c <_tzset_unlocked_r+0x34>
 801ffd0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ffd4:	1e4b      	subs	r3, r1, #1
 801ffd6:	2b0b      	cmp	r3, #11
 801ffd8:	f63f af40 	bhi.w	801fe5c <_tzset_unlocked_r+0x34>
 801ffdc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801ffe0:	1e53      	subs	r3, r2, #1
 801ffe2:	2b04      	cmp	r3, #4
 801ffe4:	f63f af3a 	bhi.w	801fe5c <_tzset_unlocked_r+0x34>
 801ffe8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801ffec:	2b06      	cmp	r3, #6
 801ffee:	f63f af35 	bhi.w	801fe5c <_tzset_unlocked_r+0x34>
 801fff2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801fff6:	f887 8008 	strb.w	r8, [r7, #8]
 801fffa:	617b      	str	r3, [r7, #20]
 801fffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fffe:	eb04 0803 	add.w	r8, r4, r3
 8020002:	2302      	movs	r3, #2
 8020004:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020008:	2300      	movs	r3, #0
 802000a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802000e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020012:	930a      	str	r3, [sp, #40]	; 0x28
 8020014:	f898 3000 	ldrb.w	r3, [r8]
 8020018:	2b2f      	cmp	r3, #47	; 0x2f
 802001a:	d109      	bne.n	8020030 <_tzset_unlocked_r+0x208>
 802001c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8020020:	e9cd b600 	strd	fp, r6, [sp]
 8020024:	493e      	ldr	r1, [pc, #248]	; (8020120 <_tzset_unlocked_r+0x2f8>)
 8020026:	4633      	mov	r3, r6
 8020028:	aa07      	add	r2, sp, #28
 802002a:	4640      	mov	r0, r8
 802002c:	f000 fc3c 	bl	80208a8 <siscanf>
 8020030:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8020034:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020038:	213c      	movs	r1, #60	; 0x3c
 802003a:	fb01 3302 	mla	r3, r1, r2, r3
 802003e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8020042:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020046:	fb01 3302 	mla	r3, r1, r2, r3
 802004a:	61bb      	str	r3, [r7, #24]
 802004c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802004e:	3728      	adds	r7, #40	; 0x28
 8020050:	4444      	add	r4, r8
 8020052:	f1b9 0f00 	cmp.w	r9, #0
 8020056:	d020      	beq.n	802009a <_tzset_unlocked_r+0x272>
 8020058:	6868      	ldr	r0, [r5, #4]
 802005a:	f7ff fe29 	bl	801fcb0 <__tzcalc_limits>
 802005e:	4b28      	ldr	r3, [pc, #160]	; (8020100 <_tzset_unlocked_r+0x2d8>)
 8020060:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8020062:	601a      	str	r2, [r3, #0]
 8020064:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8020066:	1a9b      	subs	r3, r3, r2
 8020068:	4a27      	ldr	r2, [pc, #156]	; (8020108 <_tzset_unlocked_r+0x2e0>)
 802006a:	bf18      	it	ne
 802006c:	2301      	movne	r3, #1
 802006e:	6013      	str	r3, [r2, #0]
 8020070:	e6f4      	b.n	801fe5c <_tzset_unlocked_r+0x34>
 8020072:	2b2b      	cmp	r3, #43	; 0x2b
 8020074:	bf08      	it	eq
 8020076:	3401      	addeq	r4, #1
 8020078:	2701      	movs	r7, #1
 802007a:	e772      	b.n	801ff62 <_tzset_unlocked_r+0x13a>
 802007c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8020080:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020084:	213c      	movs	r1, #60	; 0x3c
 8020086:	fb01 3302 	mla	r3, r1, r2, r3
 802008a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802008e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020092:	fb01 3302 	mla	r3, r1, r2, r3
 8020096:	437b      	muls	r3, r7
 8020098:	e77a      	b.n	801ff90 <_tzset_unlocked_r+0x168>
 802009a:	f04f 0901 	mov.w	r9, #1
 802009e:	e77d      	b.n	801ff9c <_tzset_unlocked_r+0x174>
 80200a0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80200a4:	bf06      	itte	eq
 80200a6:	3401      	addeq	r4, #1
 80200a8:	4643      	moveq	r3, r8
 80200aa:	2344      	movne	r3, #68	; 0x44
 80200ac:	220a      	movs	r2, #10
 80200ae:	a90b      	add	r1, sp, #44	; 0x2c
 80200b0:	4620      	mov	r0, r4
 80200b2:	9305      	str	r3, [sp, #20]
 80200b4:	f000 fcb4 	bl	8020a20 <strtoul>
 80200b8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80200bc:	9b05      	ldr	r3, [sp, #20]
 80200be:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80200c2:	45a0      	cmp	r8, r4
 80200c4:	d114      	bne.n	80200f0 <_tzset_unlocked_r+0x2c8>
 80200c6:	234d      	movs	r3, #77	; 0x4d
 80200c8:	f1b9 0f00 	cmp.w	r9, #0
 80200cc:	d107      	bne.n	80200de <_tzset_unlocked_r+0x2b6>
 80200ce:	722b      	strb	r3, [r5, #8]
 80200d0:	2103      	movs	r1, #3
 80200d2:	2302      	movs	r3, #2
 80200d4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80200d8:	f8c5 9014 	str.w	r9, [r5, #20]
 80200dc:	e791      	b.n	8020002 <_tzset_unlocked_r+0x1da>
 80200de:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80200e2:	220b      	movs	r2, #11
 80200e4:	2301      	movs	r3, #1
 80200e6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80200ea:	2300      	movs	r3, #0
 80200ec:	63eb      	str	r3, [r5, #60]	; 0x3c
 80200ee:	e788      	b.n	8020002 <_tzset_unlocked_r+0x1da>
 80200f0:	b280      	uxth	r0, r0
 80200f2:	723b      	strb	r3, [r7, #8]
 80200f4:	6178      	str	r0, [r7, #20]
 80200f6:	e784      	b.n	8020002 <_tzset_unlocked_r+0x1da>
 80200f8:	08023798 	.word	0x08023798
 80200fc:	2400f7a8 	.word	0x2400f7a8
 8020100:	2400f7b0 	.word	0x2400f7b0
 8020104:	0802379b 	.word	0x0802379b
 8020108:	2400f7ac 	.word	0x2400f7ac
 802010c:	24000128 	.word	0x24000128
 8020110:	2400f79b 	.word	0x2400f79b
 8020114:	0802379f 	.word	0x0802379f
 8020118:	080237c2 	.word	0x080237c2
 802011c:	080237ae 	.word	0x080237ae
 8020120:	080237c1 	.word	0x080237c1
 8020124:	2400f790 	.word	0x2400f790

08020128 <__swbuf_r>:
 8020128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802012a:	460e      	mov	r6, r1
 802012c:	4614      	mov	r4, r2
 802012e:	4605      	mov	r5, r0
 8020130:	b118      	cbz	r0, 802013a <__swbuf_r+0x12>
 8020132:	6983      	ldr	r3, [r0, #24]
 8020134:	b90b      	cbnz	r3, 802013a <__swbuf_r+0x12>
 8020136:	f7fe fef5 	bl	801ef24 <__sinit>
 802013a:	4b21      	ldr	r3, [pc, #132]	; (80201c0 <__swbuf_r+0x98>)
 802013c:	429c      	cmp	r4, r3
 802013e:	d12b      	bne.n	8020198 <__swbuf_r+0x70>
 8020140:	686c      	ldr	r4, [r5, #4]
 8020142:	69a3      	ldr	r3, [r4, #24]
 8020144:	60a3      	str	r3, [r4, #8]
 8020146:	89a3      	ldrh	r3, [r4, #12]
 8020148:	071a      	lsls	r2, r3, #28
 802014a:	d52f      	bpl.n	80201ac <__swbuf_r+0x84>
 802014c:	6923      	ldr	r3, [r4, #16]
 802014e:	b36b      	cbz	r3, 80201ac <__swbuf_r+0x84>
 8020150:	6923      	ldr	r3, [r4, #16]
 8020152:	6820      	ldr	r0, [r4, #0]
 8020154:	1ac0      	subs	r0, r0, r3
 8020156:	6963      	ldr	r3, [r4, #20]
 8020158:	b2f6      	uxtb	r6, r6
 802015a:	4283      	cmp	r3, r0
 802015c:	4637      	mov	r7, r6
 802015e:	dc04      	bgt.n	802016a <__swbuf_r+0x42>
 8020160:	4621      	mov	r1, r4
 8020162:	4628      	mov	r0, r5
 8020164:	f000 f9aa 	bl	80204bc <_fflush_r>
 8020168:	bb30      	cbnz	r0, 80201b8 <__swbuf_r+0x90>
 802016a:	68a3      	ldr	r3, [r4, #8]
 802016c:	3b01      	subs	r3, #1
 802016e:	60a3      	str	r3, [r4, #8]
 8020170:	6823      	ldr	r3, [r4, #0]
 8020172:	1c5a      	adds	r2, r3, #1
 8020174:	6022      	str	r2, [r4, #0]
 8020176:	701e      	strb	r6, [r3, #0]
 8020178:	6963      	ldr	r3, [r4, #20]
 802017a:	3001      	adds	r0, #1
 802017c:	4283      	cmp	r3, r0
 802017e:	d004      	beq.n	802018a <__swbuf_r+0x62>
 8020180:	89a3      	ldrh	r3, [r4, #12]
 8020182:	07db      	lsls	r3, r3, #31
 8020184:	d506      	bpl.n	8020194 <__swbuf_r+0x6c>
 8020186:	2e0a      	cmp	r6, #10
 8020188:	d104      	bne.n	8020194 <__swbuf_r+0x6c>
 802018a:	4621      	mov	r1, r4
 802018c:	4628      	mov	r0, r5
 802018e:	f000 f995 	bl	80204bc <_fflush_r>
 8020192:	b988      	cbnz	r0, 80201b8 <__swbuf_r+0x90>
 8020194:	4638      	mov	r0, r7
 8020196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020198:	4b0a      	ldr	r3, [pc, #40]	; (80201c4 <__swbuf_r+0x9c>)
 802019a:	429c      	cmp	r4, r3
 802019c:	d101      	bne.n	80201a2 <__swbuf_r+0x7a>
 802019e:	68ac      	ldr	r4, [r5, #8]
 80201a0:	e7cf      	b.n	8020142 <__swbuf_r+0x1a>
 80201a2:	4b09      	ldr	r3, [pc, #36]	; (80201c8 <__swbuf_r+0xa0>)
 80201a4:	429c      	cmp	r4, r3
 80201a6:	bf08      	it	eq
 80201a8:	68ec      	ldreq	r4, [r5, #12]
 80201aa:	e7ca      	b.n	8020142 <__swbuf_r+0x1a>
 80201ac:	4621      	mov	r1, r4
 80201ae:	4628      	mov	r0, r5
 80201b0:	f000 f81e 	bl	80201f0 <__swsetup_r>
 80201b4:	2800      	cmp	r0, #0
 80201b6:	d0cb      	beq.n	8020150 <__swbuf_r+0x28>
 80201b8:	f04f 37ff 	mov.w	r7, #4294967295
 80201bc:	e7ea      	b.n	8020194 <__swbuf_r+0x6c>
 80201be:	bf00      	nop
 80201c0:	080236bc 	.word	0x080236bc
 80201c4:	080236dc 	.word	0x080236dc
 80201c8:	0802369c 	.word	0x0802369c

080201cc <_write_r>:
 80201cc:	b538      	push	{r3, r4, r5, lr}
 80201ce:	4d07      	ldr	r5, [pc, #28]	; (80201ec <_write_r+0x20>)
 80201d0:	4604      	mov	r4, r0
 80201d2:	4608      	mov	r0, r1
 80201d4:	4611      	mov	r1, r2
 80201d6:	2200      	movs	r2, #0
 80201d8:	602a      	str	r2, [r5, #0]
 80201da:	461a      	mov	r2, r3
 80201dc:	f7e1 fa14 	bl	8001608 <_write>
 80201e0:	1c43      	adds	r3, r0, #1
 80201e2:	d102      	bne.n	80201ea <_write_r+0x1e>
 80201e4:	682b      	ldr	r3, [r5, #0]
 80201e6:	b103      	cbz	r3, 80201ea <_write_r+0x1e>
 80201e8:	6023      	str	r3, [r4, #0]
 80201ea:	bd38      	pop	{r3, r4, r5, pc}
 80201ec:	2400f78c 	.word	0x2400f78c

080201f0 <__swsetup_r>:
 80201f0:	4b32      	ldr	r3, [pc, #200]	; (80202bc <__swsetup_r+0xcc>)
 80201f2:	b570      	push	{r4, r5, r6, lr}
 80201f4:	681d      	ldr	r5, [r3, #0]
 80201f6:	4606      	mov	r6, r0
 80201f8:	460c      	mov	r4, r1
 80201fa:	b125      	cbz	r5, 8020206 <__swsetup_r+0x16>
 80201fc:	69ab      	ldr	r3, [r5, #24]
 80201fe:	b913      	cbnz	r3, 8020206 <__swsetup_r+0x16>
 8020200:	4628      	mov	r0, r5
 8020202:	f7fe fe8f 	bl	801ef24 <__sinit>
 8020206:	4b2e      	ldr	r3, [pc, #184]	; (80202c0 <__swsetup_r+0xd0>)
 8020208:	429c      	cmp	r4, r3
 802020a:	d10f      	bne.n	802022c <__swsetup_r+0x3c>
 802020c:	686c      	ldr	r4, [r5, #4]
 802020e:	89a3      	ldrh	r3, [r4, #12]
 8020210:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020214:	0719      	lsls	r1, r3, #28
 8020216:	d42c      	bmi.n	8020272 <__swsetup_r+0x82>
 8020218:	06dd      	lsls	r5, r3, #27
 802021a:	d411      	bmi.n	8020240 <__swsetup_r+0x50>
 802021c:	2309      	movs	r3, #9
 802021e:	6033      	str	r3, [r6, #0]
 8020220:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020224:	81a3      	strh	r3, [r4, #12]
 8020226:	f04f 30ff 	mov.w	r0, #4294967295
 802022a:	e03e      	b.n	80202aa <__swsetup_r+0xba>
 802022c:	4b25      	ldr	r3, [pc, #148]	; (80202c4 <__swsetup_r+0xd4>)
 802022e:	429c      	cmp	r4, r3
 8020230:	d101      	bne.n	8020236 <__swsetup_r+0x46>
 8020232:	68ac      	ldr	r4, [r5, #8]
 8020234:	e7eb      	b.n	802020e <__swsetup_r+0x1e>
 8020236:	4b24      	ldr	r3, [pc, #144]	; (80202c8 <__swsetup_r+0xd8>)
 8020238:	429c      	cmp	r4, r3
 802023a:	bf08      	it	eq
 802023c:	68ec      	ldreq	r4, [r5, #12]
 802023e:	e7e6      	b.n	802020e <__swsetup_r+0x1e>
 8020240:	0758      	lsls	r0, r3, #29
 8020242:	d512      	bpl.n	802026a <__swsetup_r+0x7a>
 8020244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020246:	b141      	cbz	r1, 802025a <__swsetup_r+0x6a>
 8020248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802024c:	4299      	cmp	r1, r3
 802024e:	d002      	beq.n	8020256 <__swsetup_r+0x66>
 8020250:	4630      	mov	r0, r6
 8020252:	f7ff f85b 	bl	801f30c <_free_r>
 8020256:	2300      	movs	r3, #0
 8020258:	6363      	str	r3, [r4, #52]	; 0x34
 802025a:	89a3      	ldrh	r3, [r4, #12]
 802025c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020260:	81a3      	strh	r3, [r4, #12]
 8020262:	2300      	movs	r3, #0
 8020264:	6063      	str	r3, [r4, #4]
 8020266:	6923      	ldr	r3, [r4, #16]
 8020268:	6023      	str	r3, [r4, #0]
 802026a:	89a3      	ldrh	r3, [r4, #12]
 802026c:	f043 0308 	orr.w	r3, r3, #8
 8020270:	81a3      	strh	r3, [r4, #12]
 8020272:	6923      	ldr	r3, [r4, #16]
 8020274:	b94b      	cbnz	r3, 802028a <__swsetup_r+0x9a>
 8020276:	89a3      	ldrh	r3, [r4, #12]
 8020278:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802027c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020280:	d003      	beq.n	802028a <__swsetup_r+0x9a>
 8020282:	4621      	mov	r1, r4
 8020284:	4630      	mov	r0, r6
 8020286:	f000 fa81 	bl	802078c <__smakebuf_r>
 802028a:	89a0      	ldrh	r0, [r4, #12]
 802028c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020290:	f010 0301 	ands.w	r3, r0, #1
 8020294:	d00a      	beq.n	80202ac <__swsetup_r+0xbc>
 8020296:	2300      	movs	r3, #0
 8020298:	60a3      	str	r3, [r4, #8]
 802029a:	6963      	ldr	r3, [r4, #20]
 802029c:	425b      	negs	r3, r3
 802029e:	61a3      	str	r3, [r4, #24]
 80202a0:	6923      	ldr	r3, [r4, #16]
 80202a2:	b943      	cbnz	r3, 80202b6 <__swsetup_r+0xc6>
 80202a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80202a8:	d1ba      	bne.n	8020220 <__swsetup_r+0x30>
 80202aa:	bd70      	pop	{r4, r5, r6, pc}
 80202ac:	0781      	lsls	r1, r0, #30
 80202ae:	bf58      	it	pl
 80202b0:	6963      	ldrpl	r3, [r4, #20]
 80202b2:	60a3      	str	r3, [r4, #8]
 80202b4:	e7f4      	b.n	80202a0 <__swsetup_r+0xb0>
 80202b6:	2000      	movs	r0, #0
 80202b8:	e7f7      	b.n	80202aa <__swsetup_r+0xba>
 80202ba:	bf00      	nop
 80202bc:	240000c4 	.word	0x240000c4
 80202c0:	080236bc 	.word	0x080236bc
 80202c4:	080236dc 	.word	0x080236dc
 80202c8:	0802369c 	.word	0x0802369c

080202cc <__register_exitproc>:
 80202cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80202d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802038c <__register_exitproc+0xc0>
 80202d4:	4606      	mov	r6, r0
 80202d6:	f8d8 0000 	ldr.w	r0, [r8]
 80202da:	461f      	mov	r7, r3
 80202dc:	460d      	mov	r5, r1
 80202de:	4691      	mov	r9, r2
 80202e0:	f7fe ffea 	bl	801f2b8 <__retarget_lock_acquire_recursive>
 80202e4:	4b25      	ldr	r3, [pc, #148]	; (802037c <__register_exitproc+0xb0>)
 80202e6:	681c      	ldr	r4, [r3, #0]
 80202e8:	b934      	cbnz	r4, 80202f8 <__register_exitproc+0x2c>
 80202ea:	4c25      	ldr	r4, [pc, #148]	; (8020380 <__register_exitproc+0xb4>)
 80202ec:	601c      	str	r4, [r3, #0]
 80202ee:	4b25      	ldr	r3, [pc, #148]	; (8020384 <__register_exitproc+0xb8>)
 80202f0:	b113      	cbz	r3, 80202f8 <__register_exitproc+0x2c>
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80202f8:	6863      	ldr	r3, [r4, #4]
 80202fa:	2b1f      	cmp	r3, #31
 80202fc:	dd07      	ble.n	802030e <__register_exitproc+0x42>
 80202fe:	f8d8 0000 	ldr.w	r0, [r8]
 8020302:	f7fe ffdb 	bl	801f2bc <__retarget_lock_release_recursive>
 8020306:	f04f 30ff 	mov.w	r0, #4294967295
 802030a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802030e:	b34e      	cbz	r6, 8020364 <__register_exitproc+0x98>
 8020310:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020314:	b988      	cbnz	r0, 802033a <__register_exitproc+0x6e>
 8020316:	4b1c      	ldr	r3, [pc, #112]	; (8020388 <__register_exitproc+0xbc>)
 8020318:	b923      	cbnz	r3, 8020324 <__register_exitproc+0x58>
 802031a:	f8d8 0000 	ldr.w	r0, [r8]
 802031e:	f7fe ffcc 	bl	801f2ba <__retarget_lock_release>
 8020322:	e7f0      	b.n	8020306 <__register_exitproc+0x3a>
 8020324:	f44f 7084 	mov.w	r0, #264	; 0x108
 8020328:	f7fe ffca 	bl	801f2c0 <malloc>
 802032c:	2800      	cmp	r0, #0
 802032e:	d0f4      	beq.n	802031a <__register_exitproc+0x4e>
 8020330:	2300      	movs	r3, #0
 8020332:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8020336:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802033a:	6863      	ldr	r3, [r4, #4]
 802033c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020340:	2201      	movs	r2, #1
 8020342:	409a      	lsls	r2, r3
 8020344:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020348:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802034c:	4313      	orrs	r3, r2
 802034e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8020352:	2e02      	cmp	r6, #2
 8020354:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8020358:	bf02      	ittt	eq
 802035a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802035e:	4313      	orreq	r3, r2
 8020360:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8020364:	6863      	ldr	r3, [r4, #4]
 8020366:	f8d8 0000 	ldr.w	r0, [r8]
 802036a:	1c5a      	adds	r2, r3, #1
 802036c:	3302      	adds	r3, #2
 802036e:	6062      	str	r2, [r4, #4]
 8020370:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8020374:	f7fe ffa2 	bl	801f2bc <__retarget_lock_release_recursive>
 8020378:	2000      	movs	r0, #0
 802037a:	e7c6      	b.n	802030a <__register_exitproc+0x3e>
 802037c:	2400f840 	.word	0x2400f840
 8020380:	2400f7b4 	.word	0x2400f7b4
 8020384:	08023794 	.word	0x08023794
 8020388:	0801f2c1 	.word	0x0801f2c1
 802038c:	24000130 	.word	0x24000130

08020390 <_close_r>:
 8020390:	b538      	push	{r3, r4, r5, lr}
 8020392:	4d06      	ldr	r5, [pc, #24]	; (80203ac <_close_r+0x1c>)
 8020394:	2300      	movs	r3, #0
 8020396:	4604      	mov	r4, r0
 8020398:	4608      	mov	r0, r1
 802039a:	602b      	str	r3, [r5, #0]
 802039c:	f7e1 f942 	bl	8001624 <_close>
 80203a0:	1c43      	adds	r3, r0, #1
 80203a2:	d102      	bne.n	80203aa <_close_r+0x1a>
 80203a4:	682b      	ldr	r3, [r5, #0]
 80203a6:	b103      	cbz	r3, 80203aa <_close_r+0x1a>
 80203a8:	6023      	str	r3, [r4, #0]
 80203aa:	bd38      	pop	{r3, r4, r5, pc}
 80203ac:	2400f78c 	.word	0x2400f78c

080203b0 <__sflush_r>:
 80203b0:	898a      	ldrh	r2, [r1, #12]
 80203b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203b6:	4605      	mov	r5, r0
 80203b8:	0710      	lsls	r0, r2, #28
 80203ba:	460c      	mov	r4, r1
 80203bc:	d458      	bmi.n	8020470 <__sflush_r+0xc0>
 80203be:	684b      	ldr	r3, [r1, #4]
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	dc05      	bgt.n	80203d0 <__sflush_r+0x20>
 80203c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	dc02      	bgt.n	80203d0 <__sflush_r+0x20>
 80203ca:	2000      	movs	r0, #0
 80203cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80203d2:	2e00      	cmp	r6, #0
 80203d4:	d0f9      	beq.n	80203ca <__sflush_r+0x1a>
 80203d6:	2300      	movs	r3, #0
 80203d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80203dc:	682f      	ldr	r7, [r5, #0]
 80203de:	602b      	str	r3, [r5, #0]
 80203e0:	d032      	beq.n	8020448 <__sflush_r+0x98>
 80203e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80203e4:	89a3      	ldrh	r3, [r4, #12]
 80203e6:	075a      	lsls	r2, r3, #29
 80203e8:	d505      	bpl.n	80203f6 <__sflush_r+0x46>
 80203ea:	6863      	ldr	r3, [r4, #4]
 80203ec:	1ac0      	subs	r0, r0, r3
 80203ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80203f0:	b10b      	cbz	r3, 80203f6 <__sflush_r+0x46>
 80203f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80203f4:	1ac0      	subs	r0, r0, r3
 80203f6:	2300      	movs	r3, #0
 80203f8:	4602      	mov	r2, r0
 80203fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80203fc:	6a21      	ldr	r1, [r4, #32]
 80203fe:	4628      	mov	r0, r5
 8020400:	47b0      	blx	r6
 8020402:	1c43      	adds	r3, r0, #1
 8020404:	89a3      	ldrh	r3, [r4, #12]
 8020406:	d106      	bne.n	8020416 <__sflush_r+0x66>
 8020408:	6829      	ldr	r1, [r5, #0]
 802040a:	291d      	cmp	r1, #29
 802040c:	d82c      	bhi.n	8020468 <__sflush_r+0xb8>
 802040e:	4a2a      	ldr	r2, [pc, #168]	; (80204b8 <__sflush_r+0x108>)
 8020410:	40ca      	lsrs	r2, r1
 8020412:	07d6      	lsls	r6, r2, #31
 8020414:	d528      	bpl.n	8020468 <__sflush_r+0xb8>
 8020416:	2200      	movs	r2, #0
 8020418:	6062      	str	r2, [r4, #4]
 802041a:	04d9      	lsls	r1, r3, #19
 802041c:	6922      	ldr	r2, [r4, #16]
 802041e:	6022      	str	r2, [r4, #0]
 8020420:	d504      	bpl.n	802042c <__sflush_r+0x7c>
 8020422:	1c42      	adds	r2, r0, #1
 8020424:	d101      	bne.n	802042a <__sflush_r+0x7a>
 8020426:	682b      	ldr	r3, [r5, #0]
 8020428:	b903      	cbnz	r3, 802042c <__sflush_r+0x7c>
 802042a:	6560      	str	r0, [r4, #84]	; 0x54
 802042c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802042e:	602f      	str	r7, [r5, #0]
 8020430:	2900      	cmp	r1, #0
 8020432:	d0ca      	beq.n	80203ca <__sflush_r+0x1a>
 8020434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020438:	4299      	cmp	r1, r3
 802043a:	d002      	beq.n	8020442 <__sflush_r+0x92>
 802043c:	4628      	mov	r0, r5
 802043e:	f7fe ff65 	bl	801f30c <_free_r>
 8020442:	2000      	movs	r0, #0
 8020444:	6360      	str	r0, [r4, #52]	; 0x34
 8020446:	e7c1      	b.n	80203cc <__sflush_r+0x1c>
 8020448:	6a21      	ldr	r1, [r4, #32]
 802044a:	2301      	movs	r3, #1
 802044c:	4628      	mov	r0, r5
 802044e:	47b0      	blx	r6
 8020450:	1c41      	adds	r1, r0, #1
 8020452:	d1c7      	bne.n	80203e4 <__sflush_r+0x34>
 8020454:	682b      	ldr	r3, [r5, #0]
 8020456:	2b00      	cmp	r3, #0
 8020458:	d0c4      	beq.n	80203e4 <__sflush_r+0x34>
 802045a:	2b1d      	cmp	r3, #29
 802045c:	d001      	beq.n	8020462 <__sflush_r+0xb2>
 802045e:	2b16      	cmp	r3, #22
 8020460:	d101      	bne.n	8020466 <__sflush_r+0xb6>
 8020462:	602f      	str	r7, [r5, #0]
 8020464:	e7b1      	b.n	80203ca <__sflush_r+0x1a>
 8020466:	89a3      	ldrh	r3, [r4, #12]
 8020468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802046c:	81a3      	strh	r3, [r4, #12]
 802046e:	e7ad      	b.n	80203cc <__sflush_r+0x1c>
 8020470:	690f      	ldr	r7, [r1, #16]
 8020472:	2f00      	cmp	r7, #0
 8020474:	d0a9      	beq.n	80203ca <__sflush_r+0x1a>
 8020476:	0793      	lsls	r3, r2, #30
 8020478:	680e      	ldr	r6, [r1, #0]
 802047a:	bf08      	it	eq
 802047c:	694b      	ldreq	r3, [r1, #20]
 802047e:	600f      	str	r7, [r1, #0]
 8020480:	bf18      	it	ne
 8020482:	2300      	movne	r3, #0
 8020484:	eba6 0807 	sub.w	r8, r6, r7
 8020488:	608b      	str	r3, [r1, #8]
 802048a:	f1b8 0f00 	cmp.w	r8, #0
 802048e:	dd9c      	ble.n	80203ca <__sflush_r+0x1a>
 8020490:	6a21      	ldr	r1, [r4, #32]
 8020492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020494:	4643      	mov	r3, r8
 8020496:	463a      	mov	r2, r7
 8020498:	4628      	mov	r0, r5
 802049a:	47b0      	blx	r6
 802049c:	2800      	cmp	r0, #0
 802049e:	dc06      	bgt.n	80204ae <__sflush_r+0xfe>
 80204a0:	89a3      	ldrh	r3, [r4, #12]
 80204a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204a6:	81a3      	strh	r3, [r4, #12]
 80204a8:	f04f 30ff 	mov.w	r0, #4294967295
 80204ac:	e78e      	b.n	80203cc <__sflush_r+0x1c>
 80204ae:	4407      	add	r7, r0
 80204b0:	eba8 0800 	sub.w	r8, r8, r0
 80204b4:	e7e9      	b.n	802048a <__sflush_r+0xda>
 80204b6:	bf00      	nop
 80204b8:	20400001 	.word	0x20400001

080204bc <_fflush_r>:
 80204bc:	b538      	push	{r3, r4, r5, lr}
 80204be:	690b      	ldr	r3, [r1, #16]
 80204c0:	4605      	mov	r5, r0
 80204c2:	460c      	mov	r4, r1
 80204c4:	b913      	cbnz	r3, 80204cc <_fflush_r+0x10>
 80204c6:	2500      	movs	r5, #0
 80204c8:	4628      	mov	r0, r5
 80204ca:	bd38      	pop	{r3, r4, r5, pc}
 80204cc:	b118      	cbz	r0, 80204d6 <_fflush_r+0x1a>
 80204ce:	6983      	ldr	r3, [r0, #24]
 80204d0:	b90b      	cbnz	r3, 80204d6 <_fflush_r+0x1a>
 80204d2:	f7fe fd27 	bl	801ef24 <__sinit>
 80204d6:	4b14      	ldr	r3, [pc, #80]	; (8020528 <_fflush_r+0x6c>)
 80204d8:	429c      	cmp	r4, r3
 80204da:	d11b      	bne.n	8020514 <_fflush_r+0x58>
 80204dc:	686c      	ldr	r4, [r5, #4]
 80204de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d0ef      	beq.n	80204c6 <_fflush_r+0xa>
 80204e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80204e8:	07d0      	lsls	r0, r2, #31
 80204ea:	d404      	bmi.n	80204f6 <_fflush_r+0x3a>
 80204ec:	0599      	lsls	r1, r3, #22
 80204ee:	d402      	bmi.n	80204f6 <_fflush_r+0x3a>
 80204f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80204f2:	f7fe fee1 	bl	801f2b8 <__retarget_lock_acquire_recursive>
 80204f6:	4628      	mov	r0, r5
 80204f8:	4621      	mov	r1, r4
 80204fa:	f7ff ff59 	bl	80203b0 <__sflush_r>
 80204fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020500:	07da      	lsls	r2, r3, #31
 8020502:	4605      	mov	r5, r0
 8020504:	d4e0      	bmi.n	80204c8 <_fflush_r+0xc>
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	059b      	lsls	r3, r3, #22
 802050a:	d4dd      	bmi.n	80204c8 <_fflush_r+0xc>
 802050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802050e:	f7fe fed5 	bl	801f2bc <__retarget_lock_release_recursive>
 8020512:	e7d9      	b.n	80204c8 <_fflush_r+0xc>
 8020514:	4b05      	ldr	r3, [pc, #20]	; (802052c <_fflush_r+0x70>)
 8020516:	429c      	cmp	r4, r3
 8020518:	d101      	bne.n	802051e <_fflush_r+0x62>
 802051a:	68ac      	ldr	r4, [r5, #8]
 802051c:	e7df      	b.n	80204de <_fflush_r+0x22>
 802051e:	4b04      	ldr	r3, [pc, #16]	; (8020530 <_fflush_r+0x74>)
 8020520:	429c      	cmp	r4, r3
 8020522:	bf08      	it	eq
 8020524:	68ec      	ldreq	r4, [r5, #12]
 8020526:	e7da      	b.n	80204de <_fflush_r+0x22>
 8020528:	080236bc 	.word	0x080236bc
 802052c:	080236dc 	.word	0x080236dc
 8020530:	0802369c 	.word	0x0802369c

08020534 <_findenv_r>:
 8020534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020538:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80205a8 <_findenv_r+0x74>
 802053c:	4607      	mov	r7, r0
 802053e:	4689      	mov	r9, r1
 8020540:	4616      	mov	r6, r2
 8020542:	f000 fa77 	bl	8020a34 <__env_lock>
 8020546:	f8da 4000 	ldr.w	r4, [sl]
 802054a:	b134      	cbz	r4, 802055a <_findenv_r+0x26>
 802054c:	464b      	mov	r3, r9
 802054e:	4698      	mov	r8, r3
 8020550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020554:	b13a      	cbz	r2, 8020566 <_findenv_r+0x32>
 8020556:	2a3d      	cmp	r2, #61	; 0x3d
 8020558:	d1f9      	bne.n	802054e <_findenv_r+0x1a>
 802055a:	4638      	mov	r0, r7
 802055c:	f000 fa70 	bl	8020a40 <__env_unlock>
 8020560:	2000      	movs	r0, #0
 8020562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020566:	eba8 0809 	sub.w	r8, r8, r9
 802056a:	46a3      	mov	fp, r4
 802056c:	f854 0b04 	ldr.w	r0, [r4], #4
 8020570:	2800      	cmp	r0, #0
 8020572:	d0f2      	beq.n	802055a <_findenv_r+0x26>
 8020574:	4642      	mov	r2, r8
 8020576:	4649      	mov	r1, r9
 8020578:	f000 f9ca 	bl	8020910 <strncmp>
 802057c:	2800      	cmp	r0, #0
 802057e:	d1f4      	bne.n	802056a <_findenv_r+0x36>
 8020580:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020584:	eb03 0508 	add.w	r5, r3, r8
 8020588:	f813 3008 	ldrb.w	r3, [r3, r8]
 802058c:	2b3d      	cmp	r3, #61	; 0x3d
 802058e:	d1ec      	bne.n	802056a <_findenv_r+0x36>
 8020590:	f8da 3000 	ldr.w	r3, [sl]
 8020594:	ebab 0303 	sub.w	r3, fp, r3
 8020598:	109b      	asrs	r3, r3, #2
 802059a:	4638      	mov	r0, r7
 802059c:	6033      	str	r3, [r6, #0]
 802059e:	f000 fa4f 	bl	8020a40 <__env_unlock>
 80205a2:	1c68      	adds	r0, r5, #1
 80205a4:	e7dd      	b.n	8020562 <_findenv_r+0x2e>
 80205a6:	bf00      	nop
 80205a8:	24000004 	.word	0x24000004

080205ac <_getenv_r>:
 80205ac:	b507      	push	{r0, r1, r2, lr}
 80205ae:	aa01      	add	r2, sp, #4
 80205b0:	f7ff ffc0 	bl	8020534 <_findenv_r>
 80205b4:	b003      	add	sp, #12
 80205b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080205bc <__gettzinfo>:
 80205bc:	4800      	ldr	r0, [pc, #0]	; (80205c0 <__gettzinfo+0x4>)
 80205be:	4770      	bx	lr
 80205c0:	24000138 	.word	0x24000138

080205c4 <gmtime_r>:
 80205c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80205c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80205cc:	460c      	mov	r4, r1
 80205ce:	4a4f      	ldr	r2, [pc, #316]	; (802070c <gmtime_r+0x148>)
 80205d0:	2300      	movs	r3, #0
 80205d2:	4630      	mov	r0, r6
 80205d4:	4639      	mov	r1, r7
 80205d6:	f7df fee5 	bl	80003a4 <__aeabi_ldivmod>
 80205da:	4639      	mov	r1, r7
 80205dc:	4605      	mov	r5, r0
 80205de:	4a4b      	ldr	r2, [pc, #300]	; (802070c <gmtime_r+0x148>)
 80205e0:	4630      	mov	r0, r6
 80205e2:	2300      	movs	r3, #0
 80205e4:	f7df fede 	bl	80003a4 <__aeabi_ldivmod>
 80205e8:	2a00      	cmp	r2, #0
 80205ea:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80205ee:	bfb7      	itett	lt
 80205f0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80205f4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80205f8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80205fc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020600:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8020604:	fbb2 f1f0 	udiv	r1, r2, r0
 8020608:	fb00 2211 	mls	r2, r0, r1, r2
 802060c:	203c      	movs	r0, #60	; 0x3c
 802060e:	60a1      	str	r1, [r4, #8]
 8020610:	fbb2 f1f0 	udiv	r1, r2, r0
 8020614:	fb00 2211 	mls	r2, r0, r1, r2
 8020618:	6061      	str	r1, [r4, #4]
 802061a:	6022      	str	r2, [r4, #0]
 802061c:	2107      	movs	r1, #7
 802061e:	1cda      	adds	r2, r3, #3
 8020620:	fb92 f1f1 	sdiv	r1, r2, r1
 8020624:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8020628:	1a52      	subs	r2, r2, r1
 802062a:	bf48      	it	mi
 802062c:	3207      	addmi	r2, #7
 802062e:	4d38      	ldr	r5, [pc, #224]	; (8020710 <gmtime_r+0x14c>)
 8020630:	4838      	ldr	r0, [pc, #224]	; (8020714 <gmtime_r+0x150>)
 8020632:	61a2      	str	r2, [r4, #24]
 8020634:	2b00      	cmp	r3, #0
 8020636:	bfb7      	itett	lt
 8020638:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 802063c:	fb93 f5f5 	sdivge	r5, r3, r5
 8020640:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8020644:	fb92 f5f5 	sdivlt	r5, r2, r5
 8020648:	fb00 3005 	mla	r0, r0, r5, r3
 802064c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8020650:	fbb0 f2f2 	udiv	r2, r0, r2
 8020654:	4402      	add	r2, r0
 8020656:	f240 53b4 	movw	r3, #1460	; 0x5b4
 802065a:	fbb0 f1f3 	udiv	r1, r0, r3
 802065e:	1a52      	subs	r2, r2, r1
 8020660:	f240 1c6d 	movw	ip, #365	; 0x16d
 8020664:	492c      	ldr	r1, [pc, #176]	; (8020718 <gmtime_r+0x154>)
 8020666:	fbb0 f1f1 	udiv	r1, r0, r1
 802066a:	2764      	movs	r7, #100	; 0x64
 802066c:	1a52      	subs	r2, r2, r1
 802066e:	fbb2 f1fc 	udiv	r1, r2, ip
 8020672:	fbb2 f3f3 	udiv	r3, r2, r3
 8020676:	fbb1 f6f7 	udiv	r6, r1, r7
 802067a:	1af3      	subs	r3, r6, r3
 802067c:	4403      	add	r3, r0
 802067e:	fb0c 3311 	mls	r3, ip, r1, r3
 8020682:	2299      	movs	r2, #153	; 0x99
 8020684:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8020688:	f10e 0e02 	add.w	lr, lr, #2
 802068c:	f103 0c01 	add.w	ip, r3, #1
 8020690:	fbbe f0f2 	udiv	r0, lr, r2
 8020694:	4342      	muls	r2, r0
 8020696:	3202      	adds	r2, #2
 8020698:	f04f 0805 	mov.w	r8, #5
 802069c:	fbb2 f2f8 	udiv	r2, r2, r8
 80206a0:	ebac 0c02 	sub.w	ip, ip, r2
 80206a4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80206a8:	4596      	cmp	lr, r2
 80206aa:	bf94      	ite	ls
 80206ac:	2202      	movls	r2, #2
 80206ae:	f06f 0209 	mvnhi.w	r2, #9
 80206b2:	4410      	add	r0, r2
 80206b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80206b8:	fb02 1505 	mla	r5, r2, r5, r1
 80206bc:	2801      	cmp	r0, #1
 80206be:	bf98      	it	ls
 80206c0:	3501      	addls	r5, #1
 80206c2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80206c6:	d30d      	bcc.n	80206e4 <gmtime_r+0x120>
 80206c8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80206cc:	61e3      	str	r3, [r4, #28]
 80206ce:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80206d2:	2300      	movs	r3, #0
 80206d4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80206d8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80206dc:	6223      	str	r3, [r4, #32]
 80206de:	4620      	mov	r0, r4
 80206e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206e4:	078a      	lsls	r2, r1, #30
 80206e6:	d102      	bne.n	80206ee <gmtime_r+0x12a>
 80206e8:	fb07 1616 	mls	r6, r7, r6, r1
 80206ec:	b95e      	cbnz	r6, 8020706 <gmtime_r+0x142>
 80206ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80206f2:	fbb1 f6f2 	udiv	r6, r1, r2
 80206f6:	fb02 1216 	mls	r2, r2, r6, r1
 80206fa:	fab2 f282 	clz	r2, r2
 80206fe:	0952      	lsrs	r2, r2, #5
 8020700:	333b      	adds	r3, #59	; 0x3b
 8020702:	4413      	add	r3, r2
 8020704:	e7e2      	b.n	80206cc <gmtime_r+0x108>
 8020706:	2201      	movs	r2, #1
 8020708:	e7fa      	b.n	8020700 <gmtime_r+0x13c>
 802070a:	bf00      	nop
 802070c:	00015180 	.word	0x00015180
 8020710:	00023ab1 	.word	0x00023ab1
 8020714:	fffdc54f 	.word	0xfffdc54f
 8020718:	00023ab0 	.word	0x00023ab0

0802071c <_lseek_r>:
 802071c:	b538      	push	{r3, r4, r5, lr}
 802071e:	4d07      	ldr	r5, [pc, #28]	; (802073c <_lseek_r+0x20>)
 8020720:	4604      	mov	r4, r0
 8020722:	4608      	mov	r0, r1
 8020724:	4611      	mov	r1, r2
 8020726:	2200      	movs	r2, #0
 8020728:	602a      	str	r2, [r5, #0]
 802072a:	461a      	mov	r2, r3
 802072c:	f7e0 ff84 	bl	8001638 <_lseek>
 8020730:	1c43      	adds	r3, r0, #1
 8020732:	d102      	bne.n	802073a <_lseek_r+0x1e>
 8020734:	682b      	ldr	r3, [r5, #0]
 8020736:	b103      	cbz	r3, 802073a <_lseek_r+0x1e>
 8020738:	6023      	str	r3, [r4, #0]
 802073a:	bd38      	pop	{r3, r4, r5, pc}
 802073c:	2400f78c 	.word	0x2400f78c

08020740 <__swhatbuf_r>:
 8020740:	b570      	push	{r4, r5, r6, lr}
 8020742:	460e      	mov	r6, r1
 8020744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020748:	2900      	cmp	r1, #0
 802074a:	b096      	sub	sp, #88	; 0x58
 802074c:	4614      	mov	r4, r2
 802074e:	461d      	mov	r5, r3
 8020750:	da08      	bge.n	8020764 <__swhatbuf_r+0x24>
 8020752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020756:	2200      	movs	r2, #0
 8020758:	602a      	str	r2, [r5, #0]
 802075a:	061a      	lsls	r2, r3, #24
 802075c:	d410      	bmi.n	8020780 <__swhatbuf_r+0x40>
 802075e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020762:	e00e      	b.n	8020782 <__swhatbuf_r+0x42>
 8020764:	466a      	mov	r2, sp
 8020766:	f000 f971 	bl	8020a4c <_fstat_r>
 802076a:	2800      	cmp	r0, #0
 802076c:	dbf1      	blt.n	8020752 <__swhatbuf_r+0x12>
 802076e:	9a01      	ldr	r2, [sp, #4]
 8020770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020778:	425a      	negs	r2, r3
 802077a:	415a      	adcs	r2, r3
 802077c:	602a      	str	r2, [r5, #0]
 802077e:	e7ee      	b.n	802075e <__swhatbuf_r+0x1e>
 8020780:	2340      	movs	r3, #64	; 0x40
 8020782:	2000      	movs	r0, #0
 8020784:	6023      	str	r3, [r4, #0]
 8020786:	b016      	add	sp, #88	; 0x58
 8020788:	bd70      	pop	{r4, r5, r6, pc}
	...

0802078c <__smakebuf_r>:
 802078c:	898b      	ldrh	r3, [r1, #12]
 802078e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020790:	079d      	lsls	r5, r3, #30
 8020792:	4606      	mov	r6, r0
 8020794:	460c      	mov	r4, r1
 8020796:	d507      	bpl.n	80207a8 <__smakebuf_r+0x1c>
 8020798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802079c:	6023      	str	r3, [r4, #0]
 802079e:	6123      	str	r3, [r4, #16]
 80207a0:	2301      	movs	r3, #1
 80207a2:	6163      	str	r3, [r4, #20]
 80207a4:	b002      	add	sp, #8
 80207a6:	bd70      	pop	{r4, r5, r6, pc}
 80207a8:	ab01      	add	r3, sp, #4
 80207aa:	466a      	mov	r2, sp
 80207ac:	f7ff ffc8 	bl	8020740 <__swhatbuf_r>
 80207b0:	9900      	ldr	r1, [sp, #0]
 80207b2:	4605      	mov	r5, r0
 80207b4:	4630      	mov	r0, r6
 80207b6:	f7fe fe15 	bl	801f3e4 <_malloc_r>
 80207ba:	b948      	cbnz	r0, 80207d0 <__smakebuf_r+0x44>
 80207bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207c0:	059a      	lsls	r2, r3, #22
 80207c2:	d4ef      	bmi.n	80207a4 <__smakebuf_r+0x18>
 80207c4:	f023 0303 	bic.w	r3, r3, #3
 80207c8:	f043 0302 	orr.w	r3, r3, #2
 80207cc:	81a3      	strh	r3, [r4, #12]
 80207ce:	e7e3      	b.n	8020798 <__smakebuf_r+0xc>
 80207d0:	4b0d      	ldr	r3, [pc, #52]	; (8020808 <__smakebuf_r+0x7c>)
 80207d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80207d4:	89a3      	ldrh	r3, [r4, #12]
 80207d6:	6020      	str	r0, [r4, #0]
 80207d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80207dc:	81a3      	strh	r3, [r4, #12]
 80207de:	9b00      	ldr	r3, [sp, #0]
 80207e0:	6163      	str	r3, [r4, #20]
 80207e2:	9b01      	ldr	r3, [sp, #4]
 80207e4:	6120      	str	r0, [r4, #16]
 80207e6:	b15b      	cbz	r3, 8020800 <__smakebuf_r+0x74>
 80207e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80207ec:	4630      	mov	r0, r6
 80207ee:	f000 f93f 	bl	8020a70 <_isatty_r>
 80207f2:	b128      	cbz	r0, 8020800 <__smakebuf_r+0x74>
 80207f4:	89a3      	ldrh	r3, [r4, #12]
 80207f6:	f023 0303 	bic.w	r3, r3, #3
 80207fa:	f043 0301 	orr.w	r3, r3, #1
 80207fe:	81a3      	strh	r3, [r4, #12]
 8020800:	89a0      	ldrh	r0, [r4, #12]
 8020802:	4305      	orrs	r5, r0
 8020804:	81a5      	strh	r5, [r4, #12]
 8020806:	e7cd      	b.n	80207a4 <__smakebuf_r+0x18>
 8020808:	0801eebd 	.word	0x0801eebd

0802080c <__malloc_lock>:
 802080c:	4801      	ldr	r0, [pc, #4]	; (8020814 <__malloc_lock+0x8>)
 802080e:	f7fe bd53 	b.w	801f2b8 <__retarget_lock_acquire_recursive>
 8020812:	bf00      	nop
 8020814:	2400f676 	.word	0x2400f676

08020818 <__malloc_unlock>:
 8020818:	4801      	ldr	r0, [pc, #4]	; (8020820 <__malloc_unlock+0x8>)
 802081a:	f7fe bd4f 	b.w	801f2bc <__retarget_lock_release_recursive>
 802081e:	bf00      	nop
 8020820:	2400f676 	.word	0x2400f676

08020824 <_realloc_r>:
 8020824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020828:	4680      	mov	r8, r0
 802082a:	4614      	mov	r4, r2
 802082c:	460e      	mov	r6, r1
 802082e:	b921      	cbnz	r1, 802083a <_realloc_r+0x16>
 8020830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020834:	4611      	mov	r1, r2
 8020836:	f7fe bdd5 	b.w	801f3e4 <_malloc_r>
 802083a:	b92a      	cbnz	r2, 8020848 <_realloc_r+0x24>
 802083c:	f7fe fd66 	bl	801f30c <_free_r>
 8020840:	4625      	mov	r5, r4
 8020842:	4628      	mov	r0, r5
 8020844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020848:	f000 f922 	bl	8020a90 <_malloc_usable_size_r>
 802084c:	4284      	cmp	r4, r0
 802084e:	4607      	mov	r7, r0
 8020850:	d802      	bhi.n	8020858 <_realloc_r+0x34>
 8020852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8020856:	d812      	bhi.n	802087e <_realloc_r+0x5a>
 8020858:	4621      	mov	r1, r4
 802085a:	4640      	mov	r0, r8
 802085c:	f7fe fdc2 	bl	801f3e4 <_malloc_r>
 8020860:	4605      	mov	r5, r0
 8020862:	2800      	cmp	r0, #0
 8020864:	d0ed      	beq.n	8020842 <_realloc_r+0x1e>
 8020866:	42bc      	cmp	r4, r7
 8020868:	4622      	mov	r2, r4
 802086a:	4631      	mov	r1, r6
 802086c:	bf28      	it	cs
 802086e:	463a      	movcs	r2, r7
 8020870:	f7fe fd36 	bl	801f2e0 <memcpy>
 8020874:	4631      	mov	r1, r6
 8020876:	4640      	mov	r0, r8
 8020878:	f7fe fd48 	bl	801f30c <_free_r>
 802087c:	e7e1      	b.n	8020842 <_realloc_r+0x1e>
 802087e:	4635      	mov	r5, r6
 8020880:	e7df      	b.n	8020842 <_realloc_r+0x1e>
	...

08020884 <_read_r>:
 8020884:	b538      	push	{r3, r4, r5, lr}
 8020886:	4d07      	ldr	r5, [pc, #28]	; (80208a4 <_read_r+0x20>)
 8020888:	4604      	mov	r4, r0
 802088a:	4608      	mov	r0, r1
 802088c:	4611      	mov	r1, r2
 802088e:	2200      	movs	r2, #0
 8020890:	602a      	str	r2, [r5, #0]
 8020892:	461a      	mov	r2, r3
 8020894:	f7e0 feaa 	bl	80015ec <_read>
 8020898:	1c43      	adds	r3, r0, #1
 802089a:	d102      	bne.n	80208a2 <_read_r+0x1e>
 802089c:	682b      	ldr	r3, [r5, #0]
 802089e:	b103      	cbz	r3, 80208a2 <_read_r+0x1e>
 80208a0:	6023      	str	r3, [r4, #0]
 80208a2:	bd38      	pop	{r3, r4, r5, pc}
 80208a4:	2400f78c 	.word	0x2400f78c

080208a8 <siscanf>:
 80208a8:	b40e      	push	{r1, r2, r3}
 80208aa:	b510      	push	{r4, lr}
 80208ac:	b09f      	sub	sp, #124	; 0x7c
 80208ae:	ac21      	add	r4, sp, #132	; 0x84
 80208b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80208b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80208b8:	9201      	str	r2, [sp, #4]
 80208ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80208be:	9004      	str	r0, [sp, #16]
 80208c0:	9008      	str	r0, [sp, #32]
 80208c2:	f7df fd67 	bl	8000394 <strlen>
 80208c6:	4b0c      	ldr	r3, [pc, #48]	; (80208f8 <siscanf+0x50>)
 80208c8:	9005      	str	r0, [sp, #20]
 80208ca:	9009      	str	r0, [sp, #36]	; 0x24
 80208cc:	930d      	str	r3, [sp, #52]	; 0x34
 80208ce:	480b      	ldr	r0, [pc, #44]	; (80208fc <siscanf+0x54>)
 80208d0:	9a01      	ldr	r2, [sp, #4]
 80208d2:	6800      	ldr	r0, [r0, #0]
 80208d4:	9403      	str	r4, [sp, #12]
 80208d6:	2300      	movs	r3, #0
 80208d8:	9311      	str	r3, [sp, #68]	; 0x44
 80208da:	9316      	str	r3, [sp, #88]	; 0x58
 80208dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80208e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80208e4:	a904      	add	r1, sp, #16
 80208e6:	4623      	mov	r3, r4
 80208e8:	f000 f934 	bl	8020b54 <__ssvfiscanf_r>
 80208ec:	b01f      	add	sp, #124	; 0x7c
 80208ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80208f2:	b003      	add	sp, #12
 80208f4:	4770      	bx	lr
 80208f6:	bf00      	nop
 80208f8:	0801fc47 	.word	0x0801fc47
 80208fc:	240000c4 	.word	0x240000c4

08020900 <strcpy>:
 8020900:	4603      	mov	r3, r0
 8020902:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020906:	f803 2b01 	strb.w	r2, [r3], #1
 802090a:	2a00      	cmp	r2, #0
 802090c:	d1f9      	bne.n	8020902 <strcpy+0x2>
 802090e:	4770      	bx	lr

08020910 <strncmp>:
 8020910:	b510      	push	{r4, lr}
 8020912:	b17a      	cbz	r2, 8020934 <strncmp+0x24>
 8020914:	4603      	mov	r3, r0
 8020916:	3901      	subs	r1, #1
 8020918:	1884      	adds	r4, r0, r2
 802091a:	f813 0b01 	ldrb.w	r0, [r3], #1
 802091e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020922:	4290      	cmp	r0, r2
 8020924:	d101      	bne.n	802092a <strncmp+0x1a>
 8020926:	42a3      	cmp	r3, r4
 8020928:	d101      	bne.n	802092e <strncmp+0x1e>
 802092a:	1a80      	subs	r0, r0, r2
 802092c:	bd10      	pop	{r4, pc}
 802092e:	2800      	cmp	r0, #0
 8020930:	d1f3      	bne.n	802091a <strncmp+0xa>
 8020932:	e7fa      	b.n	802092a <strncmp+0x1a>
 8020934:	4610      	mov	r0, r2
 8020936:	e7f9      	b.n	802092c <strncmp+0x1c>

08020938 <_strtoul_l.constprop.0>:
 8020938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802093c:	4f36      	ldr	r7, [pc, #216]	; (8020a18 <_strtoul_l.constprop.0+0xe0>)
 802093e:	4686      	mov	lr, r0
 8020940:	460d      	mov	r5, r1
 8020942:	4628      	mov	r0, r5
 8020944:	f815 4b01 	ldrb.w	r4, [r5], #1
 8020948:	5de6      	ldrb	r6, [r4, r7]
 802094a:	f016 0608 	ands.w	r6, r6, #8
 802094e:	d1f8      	bne.n	8020942 <_strtoul_l.constprop.0+0xa>
 8020950:	2c2d      	cmp	r4, #45	; 0x2d
 8020952:	d12f      	bne.n	80209b4 <_strtoul_l.constprop.0+0x7c>
 8020954:	782c      	ldrb	r4, [r5, #0]
 8020956:	2601      	movs	r6, #1
 8020958:	1c85      	adds	r5, r0, #2
 802095a:	2b00      	cmp	r3, #0
 802095c:	d057      	beq.n	8020a0e <_strtoul_l.constprop.0+0xd6>
 802095e:	2b10      	cmp	r3, #16
 8020960:	d109      	bne.n	8020976 <_strtoul_l.constprop.0+0x3e>
 8020962:	2c30      	cmp	r4, #48	; 0x30
 8020964:	d107      	bne.n	8020976 <_strtoul_l.constprop.0+0x3e>
 8020966:	7828      	ldrb	r0, [r5, #0]
 8020968:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802096c:	2858      	cmp	r0, #88	; 0x58
 802096e:	d149      	bne.n	8020a04 <_strtoul_l.constprop.0+0xcc>
 8020970:	786c      	ldrb	r4, [r5, #1]
 8020972:	2310      	movs	r3, #16
 8020974:	3502      	adds	r5, #2
 8020976:	f04f 38ff 	mov.w	r8, #4294967295
 802097a:	2700      	movs	r7, #0
 802097c:	fbb8 f8f3 	udiv	r8, r8, r3
 8020980:	fb03 f908 	mul.w	r9, r3, r8
 8020984:	ea6f 0909 	mvn.w	r9, r9
 8020988:	4638      	mov	r0, r7
 802098a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802098e:	f1bc 0f09 	cmp.w	ip, #9
 8020992:	d814      	bhi.n	80209be <_strtoul_l.constprop.0+0x86>
 8020994:	4664      	mov	r4, ip
 8020996:	42a3      	cmp	r3, r4
 8020998:	dd22      	ble.n	80209e0 <_strtoul_l.constprop.0+0xa8>
 802099a:	2f00      	cmp	r7, #0
 802099c:	db1d      	blt.n	80209da <_strtoul_l.constprop.0+0xa2>
 802099e:	4580      	cmp	r8, r0
 80209a0:	d31b      	bcc.n	80209da <_strtoul_l.constprop.0+0xa2>
 80209a2:	d101      	bne.n	80209a8 <_strtoul_l.constprop.0+0x70>
 80209a4:	45a1      	cmp	r9, r4
 80209a6:	db18      	blt.n	80209da <_strtoul_l.constprop.0+0xa2>
 80209a8:	fb00 4003 	mla	r0, r0, r3, r4
 80209ac:	2701      	movs	r7, #1
 80209ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80209b2:	e7ea      	b.n	802098a <_strtoul_l.constprop.0+0x52>
 80209b4:	2c2b      	cmp	r4, #43	; 0x2b
 80209b6:	bf04      	itt	eq
 80209b8:	782c      	ldrbeq	r4, [r5, #0]
 80209ba:	1c85      	addeq	r5, r0, #2
 80209bc:	e7cd      	b.n	802095a <_strtoul_l.constprop.0+0x22>
 80209be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80209c2:	f1bc 0f19 	cmp.w	ip, #25
 80209c6:	d801      	bhi.n	80209cc <_strtoul_l.constprop.0+0x94>
 80209c8:	3c37      	subs	r4, #55	; 0x37
 80209ca:	e7e4      	b.n	8020996 <_strtoul_l.constprop.0+0x5e>
 80209cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80209d0:	f1bc 0f19 	cmp.w	ip, #25
 80209d4:	d804      	bhi.n	80209e0 <_strtoul_l.constprop.0+0xa8>
 80209d6:	3c57      	subs	r4, #87	; 0x57
 80209d8:	e7dd      	b.n	8020996 <_strtoul_l.constprop.0+0x5e>
 80209da:	f04f 37ff 	mov.w	r7, #4294967295
 80209de:	e7e6      	b.n	80209ae <_strtoul_l.constprop.0+0x76>
 80209e0:	2f00      	cmp	r7, #0
 80209e2:	da07      	bge.n	80209f4 <_strtoul_l.constprop.0+0xbc>
 80209e4:	2322      	movs	r3, #34	; 0x22
 80209e6:	f8ce 3000 	str.w	r3, [lr]
 80209ea:	f04f 30ff 	mov.w	r0, #4294967295
 80209ee:	b932      	cbnz	r2, 80209fe <_strtoul_l.constprop.0+0xc6>
 80209f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80209f4:	b106      	cbz	r6, 80209f8 <_strtoul_l.constprop.0+0xc0>
 80209f6:	4240      	negs	r0, r0
 80209f8:	2a00      	cmp	r2, #0
 80209fa:	d0f9      	beq.n	80209f0 <_strtoul_l.constprop.0+0xb8>
 80209fc:	b107      	cbz	r7, 8020a00 <_strtoul_l.constprop.0+0xc8>
 80209fe:	1e69      	subs	r1, r5, #1
 8020a00:	6011      	str	r1, [r2, #0]
 8020a02:	e7f5      	b.n	80209f0 <_strtoul_l.constprop.0+0xb8>
 8020a04:	2430      	movs	r4, #48	; 0x30
 8020a06:	2b00      	cmp	r3, #0
 8020a08:	d1b5      	bne.n	8020976 <_strtoul_l.constprop.0+0x3e>
 8020a0a:	2308      	movs	r3, #8
 8020a0c:	e7b3      	b.n	8020976 <_strtoul_l.constprop.0+0x3e>
 8020a0e:	2c30      	cmp	r4, #48	; 0x30
 8020a10:	d0a9      	beq.n	8020966 <_strtoul_l.constprop.0+0x2e>
 8020a12:	230a      	movs	r3, #10
 8020a14:	e7af      	b.n	8020976 <_strtoul_l.constprop.0+0x3e>
 8020a16:	bf00      	nop
 8020a18:	080237d5 	.word	0x080237d5

08020a1c <_strtoul_r>:
 8020a1c:	f7ff bf8c 	b.w	8020938 <_strtoul_l.constprop.0>

08020a20 <strtoul>:
 8020a20:	4613      	mov	r3, r2
 8020a22:	460a      	mov	r2, r1
 8020a24:	4601      	mov	r1, r0
 8020a26:	4802      	ldr	r0, [pc, #8]	; (8020a30 <strtoul+0x10>)
 8020a28:	6800      	ldr	r0, [r0, #0]
 8020a2a:	f7ff bf85 	b.w	8020938 <_strtoul_l.constprop.0>
 8020a2e:	bf00      	nop
 8020a30:	240000c4 	.word	0x240000c4

08020a34 <__env_lock>:
 8020a34:	4801      	ldr	r0, [pc, #4]	; (8020a3c <__env_lock+0x8>)
 8020a36:	f7fe bc3f 	b.w	801f2b8 <__retarget_lock_acquire_recursive>
 8020a3a:	bf00      	nop
 8020a3c:	2400f675 	.word	0x2400f675

08020a40 <__env_unlock>:
 8020a40:	4801      	ldr	r0, [pc, #4]	; (8020a48 <__env_unlock+0x8>)
 8020a42:	f7fe bc3b 	b.w	801f2bc <__retarget_lock_release_recursive>
 8020a46:	bf00      	nop
 8020a48:	2400f675 	.word	0x2400f675

08020a4c <_fstat_r>:
 8020a4c:	b538      	push	{r3, r4, r5, lr}
 8020a4e:	4d07      	ldr	r5, [pc, #28]	; (8020a6c <_fstat_r+0x20>)
 8020a50:	2300      	movs	r3, #0
 8020a52:	4604      	mov	r4, r0
 8020a54:	4608      	mov	r0, r1
 8020a56:	4611      	mov	r1, r2
 8020a58:	602b      	str	r3, [r5, #0]
 8020a5a:	f7e0 fde6 	bl	800162a <_fstat>
 8020a5e:	1c43      	adds	r3, r0, #1
 8020a60:	d102      	bne.n	8020a68 <_fstat_r+0x1c>
 8020a62:	682b      	ldr	r3, [r5, #0]
 8020a64:	b103      	cbz	r3, 8020a68 <_fstat_r+0x1c>
 8020a66:	6023      	str	r3, [r4, #0]
 8020a68:	bd38      	pop	{r3, r4, r5, pc}
 8020a6a:	bf00      	nop
 8020a6c:	2400f78c 	.word	0x2400f78c

08020a70 <_isatty_r>:
 8020a70:	b538      	push	{r3, r4, r5, lr}
 8020a72:	4d06      	ldr	r5, [pc, #24]	; (8020a8c <_isatty_r+0x1c>)
 8020a74:	2300      	movs	r3, #0
 8020a76:	4604      	mov	r4, r0
 8020a78:	4608      	mov	r0, r1
 8020a7a:	602b      	str	r3, [r5, #0]
 8020a7c:	f7e0 fdda 	bl	8001634 <_isatty>
 8020a80:	1c43      	adds	r3, r0, #1
 8020a82:	d102      	bne.n	8020a8a <_isatty_r+0x1a>
 8020a84:	682b      	ldr	r3, [r5, #0]
 8020a86:	b103      	cbz	r3, 8020a8a <_isatty_r+0x1a>
 8020a88:	6023      	str	r3, [r4, #0]
 8020a8a:	bd38      	pop	{r3, r4, r5, pc}
 8020a8c:	2400f78c 	.word	0x2400f78c

08020a90 <_malloc_usable_size_r>:
 8020a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020a94:	1f18      	subs	r0, r3, #4
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	bfbc      	itt	lt
 8020a9a:	580b      	ldrlt	r3, [r1, r0]
 8020a9c:	18c0      	addlt	r0, r0, r3
 8020a9e:	4770      	bx	lr

08020aa0 <_sungetc_r>:
 8020aa0:	b538      	push	{r3, r4, r5, lr}
 8020aa2:	1c4b      	adds	r3, r1, #1
 8020aa4:	4614      	mov	r4, r2
 8020aa6:	d103      	bne.n	8020ab0 <_sungetc_r+0x10>
 8020aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8020aac:	4628      	mov	r0, r5
 8020aae:	bd38      	pop	{r3, r4, r5, pc}
 8020ab0:	8993      	ldrh	r3, [r2, #12]
 8020ab2:	f023 0320 	bic.w	r3, r3, #32
 8020ab6:	8193      	strh	r3, [r2, #12]
 8020ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020aba:	6852      	ldr	r2, [r2, #4]
 8020abc:	b2cd      	uxtb	r5, r1
 8020abe:	b18b      	cbz	r3, 8020ae4 <_sungetc_r+0x44>
 8020ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020ac2:	4293      	cmp	r3, r2
 8020ac4:	dd08      	ble.n	8020ad8 <_sungetc_r+0x38>
 8020ac6:	6823      	ldr	r3, [r4, #0]
 8020ac8:	1e5a      	subs	r2, r3, #1
 8020aca:	6022      	str	r2, [r4, #0]
 8020acc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020ad0:	6863      	ldr	r3, [r4, #4]
 8020ad2:	3301      	adds	r3, #1
 8020ad4:	6063      	str	r3, [r4, #4]
 8020ad6:	e7e9      	b.n	8020aac <_sungetc_r+0xc>
 8020ad8:	4621      	mov	r1, r4
 8020ada:	f000 fbc1 	bl	8021260 <__submore>
 8020ade:	2800      	cmp	r0, #0
 8020ae0:	d0f1      	beq.n	8020ac6 <_sungetc_r+0x26>
 8020ae2:	e7e1      	b.n	8020aa8 <_sungetc_r+0x8>
 8020ae4:	6921      	ldr	r1, [r4, #16]
 8020ae6:	6823      	ldr	r3, [r4, #0]
 8020ae8:	b151      	cbz	r1, 8020b00 <_sungetc_r+0x60>
 8020aea:	4299      	cmp	r1, r3
 8020aec:	d208      	bcs.n	8020b00 <_sungetc_r+0x60>
 8020aee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8020af2:	42a9      	cmp	r1, r5
 8020af4:	d104      	bne.n	8020b00 <_sungetc_r+0x60>
 8020af6:	3b01      	subs	r3, #1
 8020af8:	3201      	adds	r2, #1
 8020afa:	6023      	str	r3, [r4, #0]
 8020afc:	6062      	str	r2, [r4, #4]
 8020afe:	e7d5      	b.n	8020aac <_sungetc_r+0xc>
 8020b00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8020b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b08:	6363      	str	r3, [r4, #52]	; 0x34
 8020b0a:	2303      	movs	r3, #3
 8020b0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8020b0e:	4623      	mov	r3, r4
 8020b10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8020b14:	6023      	str	r3, [r4, #0]
 8020b16:	2301      	movs	r3, #1
 8020b18:	e7dc      	b.n	8020ad4 <_sungetc_r+0x34>

08020b1a <__ssrefill_r>:
 8020b1a:	b510      	push	{r4, lr}
 8020b1c:	460c      	mov	r4, r1
 8020b1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020b20:	b169      	cbz	r1, 8020b3e <__ssrefill_r+0x24>
 8020b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020b26:	4299      	cmp	r1, r3
 8020b28:	d001      	beq.n	8020b2e <__ssrefill_r+0x14>
 8020b2a:	f7fe fbef 	bl	801f30c <_free_r>
 8020b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020b30:	6063      	str	r3, [r4, #4]
 8020b32:	2000      	movs	r0, #0
 8020b34:	6360      	str	r0, [r4, #52]	; 0x34
 8020b36:	b113      	cbz	r3, 8020b3e <__ssrefill_r+0x24>
 8020b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8020b3a:	6023      	str	r3, [r4, #0]
 8020b3c:	bd10      	pop	{r4, pc}
 8020b3e:	6923      	ldr	r3, [r4, #16]
 8020b40:	6023      	str	r3, [r4, #0]
 8020b42:	2300      	movs	r3, #0
 8020b44:	6063      	str	r3, [r4, #4]
 8020b46:	89a3      	ldrh	r3, [r4, #12]
 8020b48:	f043 0320 	orr.w	r3, r3, #32
 8020b4c:	81a3      	strh	r3, [r4, #12]
 8020b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8020b52:	e7f3      	b.n	8020b3c <__ssrefill_r+0x22>

08020b54 <__ssvfiscanf_r>:
 8020b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020b58:	460c      	mov	r4, r1
 8020b5a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8020b5e:	2100      	movs	r1, #0
 8020b60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020b64:	49a6      	ldr	r1, [pc, #664]	; (8020e00 <__ssvfiscanf_r+0x2ac>)
 8020b66:	91a0      	str	r1, [sp, #640]	; 0x280
 8020b68:	f10d 0804 	add.w	r8, sp, #4
 8020b6c:	49a5      	ldr	r1, [pc, #660]	; (8020e04 <__ssvfiscanf_r+0x2b0>)
 8020b6e:	4fa6      	ldr	r7, [pc, #664]	; (8020e08 <__ssvfiscanf_r+0x2b4>)
 8020b70:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8020e0c <__ssvfiscanf_r+0x2b8>
 8020b74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020b78:	4606      	mov	r6, r0
 8020b7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8020b7c:	9300      	str	r3, [sp, #0]
 8020b7e:	7813      	ldrb	r3, [r2, #0]
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	f000 815a 	beq.w	8020e3a <__ssvfiscanf_r+0x2e6>
 8020b86:	5dd9      	ldrb	r1, [r3, r7]
 8020b88:	f011 0108 	ands.w	r1, r1, #8
 8020b8c:	f102 0501 	add.w	r5, r2, #1
 8020b90:	d019      	beq.n	8020bc6 <__ssvfiscanf_r+0x72>
 8020b92:	6863      	ldr	r3, [r4, #4]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	dd0f      	ble.n	8020bb8 <__ssvfiscanf_r+0x64>
 8020b98:	6823      	ldr	r3, [r4, #0]
 8020b9a:	781a      	ldrb	r2, [r3, #0]
 8020b9c:	5cba      	ldrb	r2, [r7, r2]
 8020b9e:	0712      	lsls	r2, r2, #28
 8020ba0:	d401      	bmi.n	8020ba6 <__ssvfiscanf_r+0x52>
 8020ba2:	462a      	mov	r2, r5
 8020ba4:	e7eb      	b.n	8020b7e <__ssvfiscanf_r+0x2a>
 8020ba6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020ba8:	3201      	adds	r2, #1
 8020baa:	9245      	str	r2, [sp, #276]	; 0x114
 8020bac:	6862      	ldr	r2, [r4, #4]
 8020bae:	3301      	adds	r3, #1
 8020bb0:	3a01      	subs	r2, #1
 8020bb2:	6062      	str	r2, [r4, #4]
 8020bb4:	6023      	str	r3, [r4, #0]
 8020bb6:	e7ec      	b.n	8020b92 <__ssvfiscanf_r+0x3e>
 8020bb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020bba:	4621      	mov	r1, r4
 8020bbc:	4630      	mov	r0, r6
 8020bbe:	4798      	blx	r3
 8020bc0:	2800      	cmp	r0, #0
 8020bc2:	d0e9      	beq.n	8020b98 <__ssvfiscanf_r+0x44>
 8020bc4:	e7ed      	b.n	8020ba2 <__ssvfiscanf_r+0x4e>
 8020bc6:	2b25      	cmp	r3, #37	; 0x25
 8020bc8:	d012      	beq.n	8020bf0 <__ssvfiscanf_r+0x9c>
 8020bca:	469a      	mov	sl, r3
 8020bcc:	6863      	ldr	r3, [r4, #4]
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	f340 8091 	ble.w	8020cf6 <__ssvfiscanf_r+0x1a2>
 8020bd4:	6822      	ldr	r2, [r4, #0]
 8020bd6:	7813      	ldrb	r3, [r2, #0]
 8020bd8:	4553      	cmp	r3, sl
 8020bda:	f040 812e 	bne.w	8020e3a <__ssvfiscanf_r+0x2e6>
 8020bde:	6863      	ldr	r3, [r4, #4]
 8020be0:	3b01      	subs	r3, #1
 8020be2:	6063      	str	r3, [r4, #4]
 8020be4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8020be6:	3201      	adds	r2, #1
 8020be8:	3301      	adds	r3, #1
 8020bea:	6022      	str	r2, [r4, #0]
 8020bec:	9345      	str	r3, [sp, #276]	; 0x114
 8020bee:	e7d8      	b.n	8020ba2 <__ssvfiscanf_r+0x4e>
 8020bf0:	9141      	str	r1, [sp, #260]	; 0x104
 8020bf2:	9143      	str	r1, [sp, #268]	; 0x10c
 8020bf4:	7853      	ldrb	r3, [r2, #1]
 8020bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8020bf8:	bf02      	ittt	eq
 8020bfa:	2310      	moveq	r3, #16
 8020bfc:	1c95      	addeq	r5, r2, #2
 8020bfe:	9341      	streq	r3, [sp, #260]	; 0x104
 8020c00:	220a      	movs	r2, #10
 8020c02:	46aa      	mov	sl, r5
 8020c04:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8020c08:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8020c0c:	2b09      	cmp	r3, #9
 8020c0e:	d91d      	bls.n	8020c4c <__ssvfiscanf_r+0xf8>
 8020c10:	487e      	ldr	r0, [pc, #504]	; (8020e0c <__ssvfiscanf_r+0x2b8>)
 8020c12:	2203      	movs	r2, #3
 8020c14:	f7df fb64 	bl	80002e0 <memchr>
 8020c18:	b140      	cbz	r0, 8020c2c <__ssvfiscanf_r+0xd8>
 8020c1a:	2301      	movs	r3, #1
 8020c1c:	eba0 0009 	sub.w	r0, r0, r9
 8020c20:	fa03 f000 	lsl.w	r0, r3, r0
 8020c24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020c26:	4318      	orrs	r0, r3
 8020c28:	9041      	str	r0, [sp, #260]	; 0x104
 8020c2a:	4655      	mov	r5, sl
 8020c2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020c30:	2b78      	cmp	r3, #120	; 0x78
 8020c32:	d806      	bhi.n	8020c42 <__ssvfiscanf_r+0xee>
 8020c34:	2b57      	cmp	r3, #87	; 0x57
 8020c36:	d810      	bhi.n	8020c5a <__ssvfiscanf_r+0x106>
 8020c38:	2b25      	cmp	r3, #37	; 0x25
 8020c3a:	d0c6      	beq.n	8020bca <__ssvfiscanf_r+0x76>
 8020c3c:	d856      	bhi.n	8020cec <__ssvfiscanf_r+0x198>
 8020c3e:	2b00      	cmp	r3, #0
 8020c40:	d064      	beq.n	8020d0c <__ssvfiscanf_r+0x1b8>
 8020c42:	2303      	movs	r3, #3
 8020c44:	9347      	str	r3, [sp, #284]	; 0x11c
 8020c46:	230a      	movs	r3, #10
 8020c48:	9342      	str	r3, [sp, #264]	; 0x108
 8020c4a:	e071      	b.n	8020d30 <__ssvfiscanf_r+0x1dc>
 8020c4c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8020c4e:	fb02 1103 	mla	r1, r2, r3, r1
 8020c52:	3930      	subs	r1, #48	; 0x30
 8020c54:	9143      	str	r1, [sp, #268]	; 0x10c
 8020c56:	4655      	mov	r5, sl
 8020c58:	e7d3      	b.n	8020c02 <__ssvfiscanf_r+0xae>
 8020c5a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8020c5e:	2a20      	cmp	r2, #32
 8020c60:	d8ef      	bhi.n	8020c42 <__ssvfiscanf_r+0xee>
 8020c62:	a101      	add	r1, pc, #4	; (adr r1, 8020c68 <__ssvfiscanf_r+0x114>)
 8020c64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8020c68:	08020d1b 	.word	0x08020d1b
 8020c6c:	08020c43 	.word	0x08020c43
 8020c70:	08020c43 	.word	0x08020c43
 8020c74:	08020d79 	.word	0x08020d79
 8020c78:	08020c43 	.word	0x08020c43
 8020c7c:	08020c43 	.word	0x08020c43
 8020c80:	08020c43 	.word	0x08020c43
 8020c84:	08020c43 	.word	0x08020c43
 8020c88:	08020c43 	.word	0x08020c43
 8020c8c:	08020c43 	.word	0x08020c43
 8020c90:	08020c43 	.word	0x08020c43
 8020c94:	08020d8f 	.word	0x08020d8f
 8020c98:	08020d65 	.word	0x08020d65
 8020c9c:	08020cf3 	.word	0x08020cf3
 8020ca0:	08020cf3 	.word	0x08020cf3
 8020ca4:	08020cf3 	.word	0x08020cf3
 8020ca8:	08020c43 	.word	0x08020c43
 8020cac:	08020d69 	.word	0x08020d69
 8020cb0:	08020c43 	.word	0x08020c43
 8020cb4:	08020c43 	.word	0x08020c43
 8020cb8:	08020c43 	.word	0x08020c43
 8020cbc:	08020c43 	.word	0x08020c43
 8020cc0:	08020d9f 	.word	0x08020d9f
 8020cc4:	08020d71 	.word	0x08020d71
 8020cc8:	08020d13 	.word	0x08020d13
 8020ccc:	08020c43 	.word	0x08020c43
 8020cd0:	08020c43 	.word	0x08020c43
 8020cd4:	08020d9b 	.word	0x08020d9b
 8020cd8:	08020c43 	.word	0x08020c43
 8020cdc:	08020d65 	.word	0x08020d65
 8020ce0:	08020c43 	.word	0x08020c43
 8020ce4:	08020c43 	.word	0x08020c43
 8020ce8:	08020d1b 	.word	0x08020d1b
 8020cec:	3b45      	subs	r3, #69	; 0x45
 8020cee:	2b02      	cmp	r3, #2
 8020cf0:	d8a7      	bhi.n	8020c42 <__ssvfiscanf_r+0xee>
 8020cf2:	2305      	movs	r3, #5
 8020cf4:	e01b      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020cf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020cf8:	4621      	mov	r1, r4
 8020cfa:	4630      	mov	r0, r6
 8020cfc:	4798      	blx	r3
 8020cfe:	2800      	cmp	r0, #0
 8020d00:	f43f af68 	beq.w	8020bd4 <__ssvfiscanf_r+0x80>
 8020d04:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020d06:	2800      	cmp	r0, #0
 8020d08:	f040 808d 	bne.w	8020e26 <__ssvfiscanf_r+0x2d2>
 8020d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d10:	e08f      	b.n	8020e32 <__ssvfiscanf_r+0x2de>
 8020d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020d14:	f042 0220 	orr.w	r2, r2, #32
 8020d18:	9241      	str	r2, [sp, #260]	; 0x104
 8020d1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8020d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020d20:	9241      	str	r2, [sp, #260]	; 0x104
 8020d22:	2210      	movs	r2, #16
 8020d24:	2b6f      	cmp	r3, #111	; 0x6f
 8020d26:	9242      	str	r2, [sp, #264]	; 0x108
 8020d28:	bf34      	ite	cc
 8020d2a:	2303      	movcc	r3, #3
 8020d2c:	2304      	movcs	r3, #4
 8020d2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8020d30:	6863      	ldr	r3, [r4, #4]
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	dd42      	ble.n	8020dbc <__ssvfiscanf_r+0x268>
 8020d36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d38:	0659      	lsls	r1, r3, #25
 8020d3a:	d404      	bmi.n	8020d46 <__ssvfiscanf_r+0x1f2>
 8020d3c:	6823      	ldr	r3, [r4, #0]
 8020d3e:	781a      	ldrb	r2, [r3, #0]
 8020d40:	5cba      	ldrb	r2, [r7, r2]
 8020d42:	0712      	lsls	r2, r2, #28
 8020d44:	d441      	bmi.n	8020dca <__ssvfiscanf_r+0x276>
 8020d46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8020d48:	2b02      	cmp	r3, #2
 8020d4a:	dc50      	bgt.n	8020dee <__ssvfiscanf_r+0x29a>
 8020d4c:	466b      	mov	r3, sp
 8020d4e:	4622      	mov	r2, r4
 8020d50:	a941      	add	r1, sp, #260	; 0x104
 8020d52:	4630      	mov	r0, r6
 8020d54:	f000 f876 	bl	8020e44 <_scanf_chars>
 8020d58:	2801      	cmp	r0, #1
 8020d5a:	d06e      	beq.n	8020e3a <__ssvfiscanf_r+0x2e6>
 8020d5c:	2802      	cmp	r0, #2
 8020d5e:	f47f af20 	bne.w	8020ba2 <__ssvfiscanf_r+0x4e>
 8020d62:	e7cf      	b.n	8020d04 <__ssvfiscanf_r+0x1b0>
 8020d64:	220a      	movs	r2, #10
 8020d66:	e7dd      	b.n	8020d24 <__ssvfiscanf_r+0x1d0>
 8020d68:	2300      	movs	r3, #0
 8020d6a:	9342      	str	r3, [sp, #264]	; 0x108
 8020d6c:	2303      	movs	r3, #3
 8020d6e:	e7de      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020d70:	2308      	movs	r3, #8
 8020d72:	9342      	str	r3, [sp, #264]	; 0x108
 8020d74:	2304      	movs	r3, #4
 8020d76:	e7da      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020d78:	4629      	mov	r1, r5
 8020d7a:	4640      	mov	r0, r8
 8020d7c:	f000 f9b4 	bl	80210e8 <__sccl>
 8020d80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d86:	9341      	str	r3, [sp, #260]	; 0x104
 8020d88:	4605      	mov	r5, r0
 8020d8a:	2301      	movs	r3, #1
 8020d8c:	e7cf      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020d8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d94:	9341      	str	r3, [sp, #260]	; 0x104
 8020d96:	2300      	movs	r3, #0
 8020d98:	e7c9      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020d9a:	2302      	movs	r3, #2
 8020d9c:	e7c7      	b.n	8020d2e <__ssvfiscanf_r+0x1da>
 8020d9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020da0:	06c3      	lsls	r3, r0, #27
 8020da2:	f53f aefe 	bmi.w	8020ba2 <__ssvfiscanf_r+0x4e>
 8020da6:	9b00      	ldr	r3, [sp, #0]
 8020da8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020daa:	1d19      	adds	r1, r3, #4
 8020dac:	9100      	str	r1, [sp, #0]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	f010 0f01 	tst.w	r0, #1
 8020db4:	bf14      	ite	ne
 8020db6:	801a      	strhne	r2, [r3, #0]
 8020db8:	601a      	streq	r2, [r3, #0]
 8020dba:	e6f2      	b.n	8020ba2 <__ssvfiscanf_r+0x4e>
 8020dbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020dbe:	4621      	mov	r1, r4
 8020dc0:	4630      	mov	r0, r6
 8020dc2:	4798      	blx	r3
 8020dc4:	2800      	cmp	r0, #0
 8020dc6:	d0b6      	beq.n	8020d36 <__ssvfiscanf_r+0x1e2>
 8020dc8:	e79c      	b.n	8020d04 <__ssvfiscanf_r+0x1b0>
 8020dca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8020dcc:	3201      	adds	r2, #1
 8020dce:	9245      	str	r2, [sp, #276]	; 0x114
 8020dd0:	6862      	ldr	r2, [r4, #4]
 8020dd2:	3a01      	subs	r2, #1
 8020dd4:	2a00      	cmp	r2, #0
 8020dd6:	6062      	str	r2, [r4, #4]
 8020dd8:	dd02      	ble.n	8020de0 <__ssvfiscanf_r+0x28c>
 8020dda:	3301      	adds	r3, #1
 8020ddc:	6023      	str	r3, [r4, #0]
 8020dde:	e7ad      	b.n	8020d3c <__ssvfiscanf_r+0x1e8>
 8020de0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020de2:	4621      	mov	r1, r4
 8020de4:	4630      	mov	r0, r6
 8020de6:	4798      	blx	r3
 8020de8:	2800      	cmp	r0, #0
 8020dea:	d0a7      	beq.n	8020d3c <__ssvfiscanf_r+0x1e8>
 8020dec:	e78a      	b.n	8020d04 <__ssvfiscanf_r+0x1b0>
 8020dee:	2b04      	cmp	r3, #4
 8020df0:	dc0e      	bgt.n	8020e10 <__ssvfiscanf_r+0x2bc>
 8020df2:	466b      	mov	r3, sp
 8020df4:	4622      	mov	r2, r4
 8020df6:	a941      	add	r1, sp, #260	; 0x104
 8020df8:	4630      	mov	r0, r6
 8020dfa:	f000 f87d 	bl	8020ef8 <_scanf_i>
 8020dfe:	e7ab      	b.n	8020d58 <__ssvfiscanf_r+0x204>
 8020e00:	08020aa1 	.word	0x08020aa1
 8020e04:	08020b1b 	.word	0x08020b1b
 8020e08:	080237d5 	.word	0x080237d5
 8020e0c:	08023766 	.word	0x08023766
 8020e10:	4b0b      	ldr	r3, [pc, #44]	; (8020e40 <__ssvfiscanf_r+0x2ec>)
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	f43f aec5 	beq.w	8020ba2 <__ssvfiscanf_r+0x4e>
 8020e18:	466b      	mov	r3, sp
 8020e1a:	4622      	mov	r2, r4
 8020e1c:	a941      	add	r1, sp, #260	; 0x104
 8020e1e:	4630      	mov	r0, r6
 8020e20:	f3af 8000 	nop.w
 8020e24:	e798      	b.n	8020d58 <__ssvfiscanf_r+0x204>
 8020e26:	89a3      	ldrh	r3, [r4, #12]
 8020e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8020e2c:	bf18      	it	ne
 8020e2e:	f04f 30ff 	movne.w	r0, #4294967295
 8020e32:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8020e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e3a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8020e3c:	e7f9      	b.n	8020e32 <__ssvfiscanf_r+0x2de>
 8020e3e:	bf00      	nop
 8020e40:	00000000 	.word	0x00000000

08020e44 <_scanf_chars>:
 8020e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e48:	4615      	mov	r5, r2
 8020e4a:	688a      	ldr	r2, [r1, #8]
 8020e4c:	4680      	mov	r8, r0
 8020e4e:	460c      	mov	r4, r1
 8020e50:	b932      	cbnz	r2, 8020e60 <_scanf_chars+0x1c>
 8020e52:	698a      	ldr	r2, [r1, #24]
 8020e54:	2a00      	cmp	r2, #0
 8020e56:	bf0c      	ite	eq
 8020e58:	2201      	moveq	r2, #1
 8020e5a:	f04f 32ff 	movne.w	r2, #4294967295
 8020e5e:	608a      	str	r2, [r1, #8]
 8020e60:	6822      	ldr	r2, [r4, #0]
 8020e62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8020ef4 <_scanf_chars+0xb0>
 8020e66:	06d1      	lsls	r1, r2, #27
 8020e68:	bf5f      	itttt	pl
 8020e6a:	681a      	ldrpl	r2, [r3, #0]
 8020e6c:	1d11      	addpl	r1, r2, #4
 8020e6e:	6019      	strpl	r1, [r3, #0]
 8020e70:	6816      	ldrpl	r6, [r2, #0]
 8020e72:	2700      	movs	r7, #0
 8020e74:	69a0      	ldr	r0, [r4, #24]
 8020e76:	b188      	cbz	r0, 8020e9c <_scanf_chars+0x58>
 8020e78:	2801      	cmp	r0, #1
 8020e7a:	d107      	bne.n	8020e8c <_scanf_chars+0x48>
 8020e7c:	682a      	ldr	r2, [r5, #0]
 8020e7e:	7811      	ldrb	r1, [r2, #0]
 8020e80:	6962      	ldr	r2, [r4, #20]
 8020e82:	5c52      	ldrb	r2, [r2, r1]
 8020e84:	b952      	cbnz	r2, 8020e9c <_scanf_chars+0x58>
 8020e86:	2f00      	cmp	r7, #0
 8020e88:	d031      	beq.n	8020eee <_scanf_chars+0xaa>
 8020e8a:	e022      	b.n	8020ed2 <_scanf_chars+0x8e>
 8020e8c:	2802      	cmp	r0, #2
 8020e8e:	d120      	bne.n	8020ed2 <_scanf_chars+0x8e>
 8020e90:	682b      	ldr	r3, [r5, #0]
 8020e92:	781b      	ldrb	r3, [r3, #0]
 8020e94:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020e98:	071b      	lsls	r3, r3, #28
 8020e9a:	d41a      	bmi.n	8020ed2 <_scanf_chars+0x8e>
 8020e9c:	6823      	ldr	r3, [r4, #0]
 8020e9e:	06da      	lsls	r2, r3, #27
 8020ea0:	bf5e      	ittt	pl
 8020ea2:	682b      	ldrpl	r3, [r5, #0]
 8020ea4:	781b      	ldrbpl	r3, [r3, #0]
 8020ea6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8020eaa:	682a      	ldr	r2, [r5, #0]
 8020eac:	686b      	ldr	r3, [r5, #4]
 8020eae:	3201      	adds	r2, #1
 8020eb0:	602a      	str	r2, [r5, #0]
 8020eb2:	68a2      	ldr	r2, [r4, #8]
 8020eb4:	3b01      	subs	r3, #1
 8020eb6:	3a01      	subs	r2, #1
 8020eb8:	606b      	str	r3, [r5, #4]
 8020eba:	3701      	adds	r7, #1
 8020ebc:	60a2      	str	r2, [r4, #8]
 8020ebe:	b142      	cbz	r2, 8020ed2 <_scanf_chars+0x8e>
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	dcd7      	bgt.n	8020e74 <_scanf_chars+0x30>
 8020ec4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020ec8:	4629      	mov	r1, r5
 8020eca:	4640      	mov	r0, r8
 8020ecc:	4798      	blx	r3
 8020ece:	2800      	cmp	r0, #0
 8020ed0:	d0d0      	beq.n	8020e74 <_scanf_chars+0x30>
 8020ed2:	6823      	ldr	r3, [r4, #0]
 8020ed4:	f013 0310 	ands.w	r3, r3, #16
 8020ed8:	d105      	bne.n	8020ee6 <_scanf_chars+0xa2>
 8020eda:	68e2      	ldr	r2, [r4, #12]
 8020edc:	3201      	adds	r2, #1
 8020ede:	60e2      	str	r2, [r4, #12]
 8020ee0:	69a2      	ldr	r2, [r4, #24]
 8020ee2:	b102      	cbz	r2, 8020ee6 <_scanf_chars+0xa2>
 8020ee4:	7033      	strb	r3, [r6, #0]
 8020ee6:	6923      	ldr	r3, [r4, #16]
 8020ee8:	443b      	add	r3, r7
 8020eea:	6123      	str	r3, [r4, #16]
 8020eec:	2000      	movs	r0, #0
 8020eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020ef2:	bf00      	nop
 8020ef4:	080237d5 	.word	0x080237d5

08020ef8 <_scanf_i>:
 8020ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020efc:	4698      	mov	r8, r3
 8020efe:	4b76      	ldr	r3, [pc, #472]	; (80210d8 <_scanf_i+0x1e0>)
 8020f00:	460c      	mov	r4, r1
 8020f02:	4682      	mov	sl, r0
 8020f04:	4616      	mov	r6, r2
 8020f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8020f0a:	b087      	sub	sp, #28
 8020f0c:	ab03      	add	r3, sp, #12
 8020f0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8020f12:	4b72      	ldr	r3, [pc, #456]	; (80210dc <_scanf_i+0x1e4>)
 8020f14:	69a1      	ldr	r1, [r4, #24]
 8020f16:	4a72      	ldr	r2, [pc, #456]	; (80210e0 <_scanf_i+0x1e8>)
 8020f18:	2903      	cmp	r1, #3
 8020f1a:	bf18      	it	ne
 8020f1c:	461a      	movne	r2, r3
 8020f1e:	68a3      	ldr	r3, [r4, #8]
 8020f20:	9201      	str	r2, [sp, #4]
 8020f22:	1e5a      	subs	r2, r3, #1
 8020f24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8020f28:	bf88      	it	hi
 8020f2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8020f2e:	4627      	mov	r7, r4
 8020f30:	bf82      	ittt	hi
 8020f32:	eb03 0905 	addhi.w	r9, r3, r5
 8020f36:	f240 135d 	movwhi	r3, #349	; 0x15d
 8020f3a:	60a3      	strhi	r3, [r4, #8]
 8020f3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8020f40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8020f44:	bf98      	it	ls
 8020f46:	f04f 0900 	movls.w	r9, #0
 8020f4a:	6023      	str	r3, [r4, #0]
 8020f4c:	463d      	mov	r5, r7
 8020f4e:	f04f 0b00 	mov.w	fp, #0
 8020f52:	6831      	ldr	r1, [r6, #0]
 8020f54:	ab03      	add	r3, sp, #12
 8020f56:	7809      	ldrb	r1, [r1, #0]
 8020f58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020f5c:	2202      	movs	r2, #2
 8020f5e:	f7df f9bf 	bl	80002e0 <memchr>
 8020f62:	b328      	cbz	r0, 8020fb0 <_scanf_i+0xb8>
 8020f64:	f1bb 0f01 	cmp.w	fp, #1
 8020f68:	d159      	bne.n	802101e <_scanf_i+0x126>
 8020f6a:	6862      	ldr	r2, [r4, #4]
 8020f6c:	b92a      	cbnz	r2, 8020f7a <_scanf_i+0x82>
 8020f6e:	6822      	ldr	r2, [r4, #0]
 8020f70:	2308      	movs	r3, #8
 8020f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020f76:	6063      	str	r3, [r4, #4]
 8020f78:	6022      	str	r2, [r4, #0]
 8020f7a:	6822      	ldr	r2, [r4, #0]
 8020f7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8020f80:	6022      	str	r2, [r4, #0]
 8020f82:	68a2      	ldr	r2, [r4, #8]
 8020f84:	1e51      	subs	r1, r2, #1
 8020f86:	60a1      	str	r1, [r4, #8]
 8020f88:	b192      	cbz	r2, 8020fb0 <_scanf_i+0xb8>
 8020f8a:	6832      	ldr	r2, [r6, #0]
 8020f8c:	1c51      	adds	r1, r2, #1
 8020f8e:	6031      	str	r1, [r6, #0]
 8020f90:	7812      	ldrb	r2, [r2, #0]
 8020f92:	f805 2b01 	strb.w	r2, [r5], #1
 8020f96:	6872      	ldr	r2, [r6, #4]
 8020f98:	3a01      	subs	r2, #1
 8020f9a:	2a00      	cmp	r2, #0
 8020f9c:	6072      	str	r2, [r6, #4]
 8020f9e:	dc07      	bgt.n	8020fb0 <_scanf_i+0xb8>
 8020fa0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020fa4:	4631      	mov	r1, r6
 8020fa6:	4650      	mov	r0, sl
 8020fa8:	4790      	blx	r2
 8020faa:	2800      	cmp	r0, #0
 8020fac:	f040 8085 	bne.w	80210ba <_scanf_i+0x1c2>
 8020fb0:	f10b 0b01 	add.w	fp, fp, #1
 8020fb4:	f1bb 0f03 	cmp.w	fp, #3
 8020fb8:	d1cb      	bne.n	8020f52 <_scanf_i+0x5a>
 8020fba:	6863      	ldr	r3, [r4, #4]
 8020fbc:	b90b      	cbnz	r3, 8020fc2 <_scanf_i+0xca>
 8020fbe:	230a      	movs	r3, #10
 8020fc0:	6063      	str	r3, [r4, #4]
 8020fc2:	6863      	ldr	r3, [r4, #4]
 8020fc4:	4947      	ldr	r1, [pc, #284]	; (80210e4 <_scanf_i+0x1ec>)
 8020fc6:	6960      	ldr	r0, [r4, #20]
 8020fc8:	1ac9      	subs	r1, r1, r3
 8020fca:	f000 f88d 	bl	80210e8 <__sccl>
 8020fce:	f04f 0b00 	mov.w	fp, #0
 8020fd2:	68a3      	ldr	r3, [r4, #8]
 8020fd4:	6822      	ldr	r2, [r4, #0]
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d03d      	beq.n	8021056 <_scanf_i+0x15e>
 8020fda:	6831      	ldr	r1, [r6, #0]
 8020fdc:	6960      	ldr	r0, [r4, #20]
 8020fde:	f891 c000 	ldrb.w	ip, [r1]
 8020fe2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020fe6:	2800      	cmp	r0, #0
 8020fe8:	d035      	beq.n	8021056 <_scanf_i+0x15e>
 8020fea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8020fee:	d124      	bne.n	802103a <_scanf_i+0x142>
 8020ff0:	0510      	lsls	r0, r2, #20
 8020ff2:	d522      	bpl.n	802103a <_scanf_i+0x142>
 8020ff4:	f10b 0b01 	add.w	fp, fp, #1
 8020ff8:	f1b9 0f00 	cmp.w	r9, #0
 8020ffc:	d003      	beq.n	8021006 <_scanf_i+0x10e>
 8020ffe:	3301      	adds	r3, #1
 8021000:	f109 39ff 	add.w	r9, r9, #4294967295
 8021004:	60a3      	str	r3, [r4, #8]
 8021006:	6873      	ldr	r3, [r6, #4]
 8021008:	3b01      	subs	r3, #1
 802100a:	2b00      	cmp	r3, #0
 802100c:	6073      	str	r3, [r6, #4]
 802100e:	dd1b      	ble.n	8021048 <_scanf_i+0x150>
 8021010:	6833      	ldr	r3, [r6, #0]
 8021012:	3301      	adds	r3, #1
 8021014:	6033      	str	r3, [r6, #0]
 8021016:	68a3      	ldr	r3, [r4, #8]
 8021018:	3b01      	subs	r3, #1
 802101a:	60a3      	str	r3, [r4, #8]
 802101c:	e7d9      	b.n	8020fd2 <_scanf_i+0xda>
 802101e:	f1bb 0f02 	cmp.w	fp, #2
 8021022:	d1ae      	bne.n	8020f82 <_scanf_i+0x8a>
 8021024:	6822      	ldr	r2, [r4, #0]
 8021026:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802102a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802102e:	d1bf      	bne.n	8020fb0 <_scanf_i+0xb8>
 8021030:	2310      	movs	r3, #16
 8021032:	6063      	str	r3, [r4, #4]
 8021034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021038:	e7a2      	b.n	8020f80 <_scanf_i+0x88>
 802103a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802103e:	6022      	str	r2, [r4, #0]
 8021040:	780b      	ldrb	r3, [r1, #0]
 8021042:	f805 3b01 	strb.w	r3, [r5], #1
 8021046:	e7de      	b.n	8021006 <_scanf_i+0x10e>
 8021048:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802104c:	4631      	mov	r1, r6
 802104e:	4650      	mov	r0, sl
 8021050:	4798      	blx	r3
 8021052:	2800      	cmp	r0, #0
 8021054:	d0df      	beq.n	8021016 <_scanf_i+0x11e>
 8021056:	6823      	ldr	r3, [r4, #0]
 8021058:	05db      	lsls	r3, r3, #23
 802105a:	d50d      	bpl.n	8021078 <_scanf_i+0x180>
 802105c:	42bd      	cmp	r5, r7
 802105e:	d909      	bls.n	8021074 <_scanf_i+0x17c>
 8021060:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021068:	4632      	mov	r2, r6
 802106a:	4650      	mov	r0, sl
 802106c:	4798      	blx	r3
 802106e:	f105 39ff 	add.w	r9, r5, #4294967295
 8021072:	464d      	mov	r5, r9
 8021074:	42bd      	cmp	r5, r7
 8021076:	d02d      	beq.n	80210d4 <_scanf_i+0x1dc>
 8021078:	6822      	ldr	r2, [r4, #0]
 802107a:	f012 0210 	ands.w	r2, r2, #16
 802107e:	d113      	bne.n	80210a8 <_scanf_i+0x1b0>
 8021080:	702a      	strb	r2, [r5, #0]
 8021082:	6863      	ldr	r3, [r4, #4]
 8021084:	9e01      	ldr	r6, [sp, #4]
 8021086:	4639      	mov	r1, r7
 8021088:	4650      	mov	r0, sl
 802108a:	47b0      	blx	r6
 802108c:	6821      	ldr	r1, [r4, #0]
 802108e:	f8d8 3000 	ldr.w	r3, [r8]
 8021092:	f011 0f20 	tst.w	r1, #32
 8021096:	d013      	beq.n	80210c0 <_scanf_i+0x1c8>
 8021098:	1d1a      	adds	r2, r3, #4
 802109a:	f8c8 2000 	str.w	r2, [r8]
 802109e:	681b      	ldr	r3, [r3, #0]
 80210a0:	6018      	str	r0, [r3, #0]
 80210a2:	68e3      	ldr	r3, [r4, #12]
 80210a4:	3301      	adds	r3, #1
 80210a6:	60e3      	str	r3, [r4, #12]
 80210a8:	1bed      	subs	r5, r5, r7
 80210aa:	44ab      	add	fp, r5
 80210ac:	6925      	ldr	r5, [r4, #16]
 80210ae:	445d      	add	r5, fp
 80210b0:	6125      	str	r5, [r4, #16]
 80210b2:	2000      	movs	r0, #0
 80210b4:	b007      	add	sp, #28
 80210b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210ba:	f04f 0b00 	mov.w	fp, #0
 80210be:	e7ca      	b.n	8021056 <_scanf_i+0x15e>
 80210c0:	1d1a      	adds	r2, r3, #4
 80210c2:	f8c8 2000 	str.w	r2, [r8]
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	f011 0f01 	tst.w	r1, #1
 80210cc:	bf14      	ite	ne
 80210ce:	8018      	strhne	r0, [r3, #0]
 80210d0:	6018      	streq	r0, [r3, #0]
 80210d2:	e7e6      	b.n	80210a2 <_scanf_i+0x1aa>
 80210d4:	2001      	movs	r0, #1
 80210d6:	e7ed      	b.n	80210b4 <_scanf_i+0x1bc>
 80210d8:	08021330 	.word	0x08021330
 80210dc:	08020a1d 	.word	0x08020a1d
 80210e0:	0802125d 	.word	0x0802125d
 80210e4:	080238ee 	.word	0x080238ee

080210e8 <__sccl>:
 80210e8:	b570      	push	{r4, r5, r6, lr}
 80210ea:	780b      	ldrb	r3, [r1, #0]
 80210ec:	4604      	mov	r4, r0
 80210ee:	2b5e      	cmp	r3, #94	; 0x5e
 80210f0:	bf0b      	itete	eq
 80210f2:	784b      	ldrbeq	r3, [r1, #1]
 80210f4:	1c48      	addne	r0, r1, #1
 80210f6:	1c88      	addeq	r0, r1, #2
 80210f8:	2200      	movne	r2, #0
 80210fa:	bf08      	it	eq
 80210fc:	2201      	moveq	r2, #1
 80210fe:	1e61      	subs	r1, r4, #1
 8021100:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021104:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021108:	42a9      	cmp	r1, r5
 802110a:	d1fb      	bne.n	8021104 <__sccl+0x1c>
 802110c:	b90b      	cbnz	r3, 8021112 <__sccl+0x2a>
 802110e:	3801      	subs	r0, #1
 8021110:	bd70      	pop	{r4, r5, r6, pc}
 8021112:	f082 0201 	eor.w	r2, r2, #1
 8021116:	54e2      	strb	r2, [r4, r3]
 8021118:	4605      	mov	r5, r0
 802111a:	4628      	mov	r0, r5
 802111c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8021120:	292d      	cmp	r1, #45	; 0x2d
 8021122:	d006      	beq.n	8021132 <__sccl+0x4a>
 8021124:	295d      	cmp	r1, #93	; 0x5d
 8021126:	d0f3      	beq.n	8021110 <__sccl+0x28>
 8021128:	b909      	cbnz	r1, 802112e <__sccl+0x46>
 802112a:	4628      	mov	r0, r5
 802112c:	e7f0      	b.n	8021110 <__sccl+0x28>
 802112e:	460b      	mov	r3, r1
 8021130:	e7f1      	b.n	8021116 <__sccl+0x2e>
 8021132:	786e      	ldrb	r6, [r5, #1]
 8021134:	2e5d      	cmp	r6, #93	; 0x5d
 8021136:	d0fa      	beq.n	802112e <__sccl+0x46>
 8021138:	42b3      	cmp	r3, r6
 802113a:	dcf8      	bgt.n	802112e <__sccl+0x46>
 802113c:	3502      	adds	r5, #2
 802113e:	4619      	mov	r1, r3
 8021140:	3101      	adds	r1, #1
 8021142:	428e      	cmp	r6, r1
 8021144:	5462      	strb	r2, [r4, r1]
 8021146:	dcfb      	bgt.n	8021140 <__sccl+0x58>
 8021148:	1af1      	subs	r1, r6, r3
 802114a:	3901      	subs	r1, #1
 802114c:	1c58      	adds	r0, r3, #1
 802114e:	42b3      	cmp	r3, r6
 8021150:	bfa8      	it	ge
 8021152:	2100      	movge	r1, #0
 8021154:	1843      	adds	r3, r0, r1
 8021156:	e7e0      	b.n	802111a <__sccl+0x32>

08021158 <_strtol_l.constprop.0>:
 8021158:	2b01      	cmp	r3, #1
 802115a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802115e:	d001      	beq.n	8021164 <_strtol_l.constprop.0+0xc>
 8021160:	2b24      	cmp	r3, #36	; 0x24
 8021162:	d906      	bls.n	8021172 <_strtol_l.constprop.0+0x1a>
 8021164:	f7fd fe80 	bl	801ee68 <__errno>
 8021168:	2316      	movs	r3, #22
 802116a:	6003      	str	r3, [r0, #0]
 802116c:	2000      	movs	r0, #0
 802116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021172:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8021258 <_strtol_l.constprop.0+0x100>
 8021176:	460d      	mov	r5, r1
 8021178:	462e      	mov	r6, r5
 802117a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802117e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8021182:	f017 0708 	ands.w	r7, r7, #8
 8021186:	d1f7      	bne.n	8021178 <_strtol_l.constprop.0+0x20>
 8021188:	2c2d      	cmp	r4, #45	; 0x2d
 802118a:	d132      	bne.n	80211f2 <_strtol_l.constprop.0+0x9a>
 802118c:	782c      	ldrb	r4, [r5, #0]
 802118e:	2701      	movs	r7, #1
 8021190:	1cb5      	adds	r5, r6, #2
 8021192:	2b00      	cmp	r3, #0
 8021194:	d05b      	beq.n	802124e <_strtol_l.constprop.0+0xf6>
 8021196:	2b10      	cmp	r3, #16
 8021198:	d109      	bne.n	80211ae <_strtol_l.constprop.0+0x56>
 802119a:	2c30      	cmp	r4, #48	; 0x30
 802119c:	d107      	bne.n	80211ae <_strtol_l.constprop.0+0x56>
 802119e:	782c      	ldrb	r4, [r5, #0]
 80211a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80211a4:	2c58      	cmp	r4, #88	; 0x58
 80211a6:	d14d      	bne.n	8021244 <_strtol_l.constprop.0+0xec>
 80211a8:	786c      	ldrb	r4, [r5, #1]
 80211aa:	2310      	movs	r3, #16
 80211ac:	3502      	adds	r5, #2
 80211ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80211b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80211b6:	f04f 0c00 	mov.w	ip, #0
 80211ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80211be:	4666      	mov	r6, ip
 80211c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80211c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80211c8:	f1be 0f09 	cmp.w	lr, #9
 80211cc:	d816      	bhi.n	80211fc <_strtol_l.constprop.0+0xa4>
 80211ce:	4674      	mov	r4, lr
 80211d0:	42a3      	cmp	r3, r4
 80211d2:	dd24      	ble.n	802121e <_strtol_l.constprop.0+0xc6>
 80211d4:	f1bc 0f00 	cmp.w	ip, #0
 80211d8:	db1e      	blt.n	8021218 <_strtol_l.constprop.0+0xc0>
 80211da:	45b1      	cmp	r9, r6
 80211dc:	d31c      	bcc.n	8021218 <_strtol_l.constprop.0+0xc0>
 80211de:	d101      	bne.n	80211e4 <_strtol_l.constprop.0+0x8c>
 80211e0:	45a2      	cmp	sl, r4
 80211e2:	db19      	blt.n	8021218 <_strtol_l.constprop.0+0xc0>
 80211e4:	fb06 4603 	mla	r6, r6, r3, r4
 80211e8:	f04f 0c01 	mov.w	ip, #1
 80211ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80211f0:	e7e8      	b.n	80211c4 <_strtol_l.constprop.0+0x6c>
 80211f2:	2c2b      	cmp	r4, #43	; 0x2b
 80211f4:	bf04      	itt	eq
 80211f6:	782c      	ldrbeq	r4, [r5, #0]
 80211f8:	1cb5      	addeq	r5, r6, #2
 80211fa:	e7ca      	b.n	8021192 <_strtol_l.constprop.0+0x3a>
 80211fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8021200:	f1be 0f19 	cmp.w	lr, #25
 8021204:	d801      	bhi.n	802120a <_strtol_l.constprop.0+0xb2>
 8021206:	3c37      	subs	r4, #55	; 0x37
 8021208:	e7e2      	b.n	80211d0 <_strtol_l.constprop.0+0x78>
 802120a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802120e:	f1be 0f19 	cmp.w	lr, #25
 8021212:	d804      	bhi.n	802121e <_strtol_l.constprop.0+0xc6>
 8021214:	3c57      	subs	r4, #87	; 0x57
 8021216:	e7db      	b.n	80211d0 <_strtol_l.constprop.0+0x78>
 8021218:	f04f 3cff 	mov.w	ip, #4294967295
 802121c:	e7e6      	b.n	80211ec <_strtol_l.constprop.0+0x94>
 802121e:	f1bc 0f00 	cmp.w	ip, #0
 8021222:	da05      	bge.n	8021230 <_strtol_l.constprop.0+0xd8>
 8021224:	2322      	movs	r3, #34	; 0x22
 8021226:	6003      	str	r3, [r0, #0]
 8021228:	4646      	mov	r6, r8
 802122a:	b942      	cbnz	r2, 802123e <_strtol_l.constprop.0+0xe6>
 802122c:	4630      	mov	r0, r6
 802122e:	e79e      	b.n	802116e <_strtol_l.constprop.0+0x16>
 8021230:	b107      	cbz	r7, 8021234 <_strtol_l.constprop.0+0xdc>
 8021232:	4276      	negs	r6, r6
 8021234:	2a00      	cmp	r2, #0
 8021236:	d0f9      	beq.n	802122c <_strtol_l.constprop.0+0xd4>
 8021238:	f1bc 0f00 	cmp.w	ip, #0
 802123c:	d000      	beq.n	8021240 <_strtol_l.constprop.0+0xe8>
 802123e:	1e69      	subs	r1, r5, #1
 8021240:	6011      	str	r1, [r2, #0]
 8021242:	e7f3      	b.n	802122c <_strtol_l.constprop.0+0xd4>
 8021244:	2430      	movs	r4, #48	; 0x30
 8021246:	2b00      	cmp	r3, #0
 8021248:	d1b1      	bne.n	80211ae <_strtol_l.constprop.0+0x56>
 802124a:	2308      	movs	r3, #8
 802124c:	e7af      	b.n	80211ae <_strtol_l.constprop.0+0x56>
 802124e:	2c30      	cmp	r4, #48	; 0x30
 8021250:	d0a5      	beq.n	802119e <_strtol_l.constprop.0+0x46>
 8021252:	230a      	movs	r3, #10
 8021254:	e7ab      	b.n	80211ae <_strtol_l.constprop.0+0x56>
 8021256:	bf00      	nop
 8021258:	080237d5 	.word	0x080237d5

0802125c <_strtol_r>:
 802125c:	f7ff bf7c 	b.w	8021158 <_strtol_l.constprop.0>

08021260 <__submore>:
 8021260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021264:	460c      	mov	r4, r1
 8021266:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802126c:	4299      	cmp	r1, r3
 802126e:	d11d      	bne.n	80212ac <__submore+0x4c>
 8021270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021274:	f7fe f8b6 	bl	801f3e4 <_malloc_r>
 8021278:	b918      	cbnz	r0, 8021282 <__submore+0x22>
 802127a:	f04f 30ff 	mov.w	r0, #4294967295
 802127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021286:	63a3      	str	r3, [r4, #56]	; 0x38
 8021288:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802128c:	6360      	str	r0, [r4, #52]	; 0x34
 802128e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021292:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021296:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802129a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802129e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80212a2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80212a6:	6020      	str	r0, [r4, #0]
 80212a8:	2000      	movs	r0, #0
 80212aa:	e7e8      	b.n	802127e <__submore+0x1e>
 80212ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80212ae:	0077      	lsls	r7, r6, #1
 80212b0:	463a      	mov	r2, r7
 80212b2:	f7ff fab7 	bl	8020824 <_realloc_r>
 80212b6:	4605      	mov	r5, r0
 80212b8:	2800      	cmp	r0, #0
 80212ba:	d0de      	beq.n	802127a <__submore+0x1a>
 80212bc:	eb00 0806 	add.w	r8, r0, r6
 80212c0:	4601      	mov	r1, r0
 80212c2:	4632      	mov	r2, r6
 80212c4:	4640      	mov	r0, r8
 80212c6:	f7fe f80b 	bl	801f2e0 <memcpy>
 80212ca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80212ce:	f8c4 8000 	str.w	r8, [r4]
 80212d2:	e7e9      	b.n	80212a8 <__submore+0x48>

080212d4 <_init>:
 80212d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212d6:	bf00      	nop
 80212d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212da:	bc08      	pop	{r3}
 80212dc:	469e      	mov	lr, r3
 80212de:	4770      	bx	lr

080212e0 <_fini>:
 80212e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212e2:	bf00      	nop
 80212e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212e6:	bc08      	pop	{r3}
 80212e8:	469e      	mov	lr, r3
 80212ea:	4770      	bx	lr
