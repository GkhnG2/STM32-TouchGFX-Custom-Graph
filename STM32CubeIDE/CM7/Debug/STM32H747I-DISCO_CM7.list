
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000257cc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bb4  08025a70  08025a70  00035a70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00000a34  08028624  08028624  00038624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000074  08029058  08029058  00039058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00177000  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000180  90177000  90177000  001c7000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080290cc  080290cc  001c7180  2**0
                  CONTENTS
  8 .ARM          00000000  080290cc  080290cc  001c7180  2**0
                  CONTENTS
  9 .preinit_array 00000000  080290cc  080290cc  001c7180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  080290cc  080290cc  000390cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080290e4  080290e4  000390e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000011c  24000000  080290ec  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000101d0  2400011c  08029208  0004011c  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  240102ec  08029208  000402ec  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001c7180  2**0
                  CONTENTS, READONLY
 16 .debug_info   0013b0b8  00000000  00000000  001c71ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017c0e  00000000  00000000  00302266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003a60  00000000  00000000  00319e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00012cf0  00000000  00000000  0031d8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000515cb  00000000  00000000  003305c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0007278a  00000000  00000000  00381b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001e0010  00000000  00000000  003f431d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  005d432d  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ab10  00000000  00000000  005d43fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    0006662e  00000000  00000000  005def0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400011c 	.word	0x2400011c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08025a54 	.word	0x08025a54

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000120 	.word	0x24000120
 80002dc:	08025a54 	.word	0x08025a54

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	; (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f011 bb24 	b.w	8011d48 <vTaskSetApplicationTaskTag>
 8000700:	08001e29 	.word	0x08001e29

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	; 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	; 0x24
 800070e:	f024 f93f 	bl	8024990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f024 f93a 	bl	8024990 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f00d fd6b 	bl	800e1f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <SystemClock_Config+0xcc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800075a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000760:	f023 0303 	bic.w	r3, r3, #3
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800076e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2301      	movs	r3, #1
 8000778:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000784:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800078c:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000790:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000792:	f00e f81f 	bl	800e7d4 <HAL_RCC_OscConfig>
 8000796:	b108      	cbz	r0, 800079c <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079a:	e7fe      	b.n	800079a <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b6:	f00e fbaf 	bl	800ef18 <HAL_RCC_ClockConfig>
 80007ba:	4601      	mov	r1, r0
 80007bc:	b108      	cbz	r0, 80007c2 <SystemClock_Config+0xbe>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007c2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c6:	f00e fab9 	bl	800ed3c <HAL_RCC_MCOConfig>
}
 80007ca:	b01d      	add	sp, #116	; 0x74
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	58000400 	.word	0x58000400
 80007d4:	58024800 	.word	0x58024800
 80007d8:	58024400 	.word	0x58024400

080007dc <main>:
{
 80007dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007e0:	b0ba      	sub	sp, #232	; 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e2:	2210      	movs	r2, #16
 80007e4:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e6:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e8:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007ea:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ec:	f024 f8d0 	bl	8024990 <memset>
  HAL_MPU_Disable();
 80007f0:	f00b ff9e 	bl	800c730 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007f4:	f04f 4110 	mov.w	r1, #2415919104	; 0x90000000
 80007f8:	4bb7      	ldr	r3, [pc, #732]	; (8000ad8 <main+0x2fc>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fc:	f8ad 40b4 	strh.w	r4, [sp, #180]	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000800:	9430      	str	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000802:	e9cd 132e 	strd	r1, r3, [sp, #184]	; 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000806:	f00b ffb1 	bl	800c76c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800080a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800080c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800080e:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000812:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000816:	f00b ffa9 	bl	800c76c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800081a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800081e:	f88d 40c2 	strb.w	r4, [sp, #194]	; 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000822:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000826:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800082a:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800082c:	2318      	movs	r3, #24
 800082e:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000832:	f00b ff9b 	bl	800c76c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000836:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000838:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800083a:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 800083e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000842:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000844:	2312      	movs	r3, #18
 8000846:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	f88d 30c0 	strb.w	r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000850:	f00b ff8c 	bl	800c76c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000854:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800085a:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 800085e:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000860:	2311      	movs	r3, #17
 8000862:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	f00b ff81 	bl	800c76c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800086a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	a82d      	add	r0, sp, #180	; 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800086e:	f88d 40c0 	strb.w	r4, [sp, #192]	; 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000872:	f88d 30b5 	strb.w	r3, [sp, #181]	; 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <main+0x300>)
 8000878:	932e      	str	r3, [sp, #184]	; 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800087a:	230e      	movs	r3, #14
 800087c:	f88d 30bc 	strb.w	r3, [sp, #188]	; 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000880:	f00b ff74 	bl	800c76c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000884:	4628      	mov	r0, r5
 8000886:	f00b ff61 	bl	800c74c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800088a:	4b95      	ldr	r3, [pc, #596]	; (8000ae0 <main+0x304>)
 800088c:	695a      	ldr	r2, [r3, #20]
 800088e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000892:	d111      	bne.n	80008b8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000898:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800089c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ae:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b8:	4a89      	ldr	r2, [pc, #548]	; (8000ae0 <main+0x304>)
 80008ba:	6953      	ldr	r3, [r2, #20]
 80008bc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008c0:	d123      	bne.n	800090a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ca:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008d6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008da:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008dc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008e0:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008e6:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e8:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80008ec:	d2f9      	bcs.n	80008e2 <main+0x106>
    } while(sets-- != 0U);
 80008ee:	3b20      	subs	r3, #32
 80008f0:	f113 0f20 	cmn.w	r3, #32
 80008f4:	d1f2      	bne.n	80008dc <main+0x100>
 80008f6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008fa:	6953      	ldr	r3, [r2, #20]
 80008fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000906:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800090a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090e:	4d75      	ldr	r5, [pc, #468]	; (8000ae4 <main+0x308>)
 8000910:	682c      	ldr	r4, [r5, #0]
 8000912:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000916:	f000 82b0 	beq.w	8000e7a <main+0x69e>
 800091a:	3b01      	subs	r3, #1
 800091c:	d1f8      	bne.n	8000910 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x144>
 8000922:	b672      	cpsid	i
 8000924:	e7fe      	b.n	8000924 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000926:	f00b fb93 	bl	800c050 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800092a:	4640      	mov	r0, r8
 800092c:	f00b fbde 	bl	800c0ec <BSP_SDRAM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	b108      	cbz	r0, 8000938 <main+0x15c>
 8000934:	b672      	cpsid	i
  while (1)
 8000936:	e7fe      	b.n	8000936 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000938:	486b      	ldr	r0, [pc, #428]	; (8000ae8 <main+0x30c>)
 800093a:	4a6c      	ldr	r2, [pc, #432]	; (8000aec <main+0x310>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800093c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800093e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000940:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000944:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000948:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800094c:	f00d fd68 	bl	800e420 <HAL_QSPI_Init>
 8000950:	b108      	cbz	r0, 8000956 <main+0x17a>
 8000952:	b672      	cpsid	i
  while (1)
 8000954:	e7fe      	b.n	8000954 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000956:	a92d      	add	r1, sp, #180	; 0xb4
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000958:	f88d 70b4 	strb.w	r7, [sp, #180]	; 0xb4
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800095c:	f88d 40b5 	strb.w	r4, [sp, #181]	; 0xb5
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000960:	f88d 50b6 	strb.w	r5, [sp, #182]	; 0xb6
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000964:	f00b f9ba 	bl	800bcdc <BSP_QSPI_Init>
 8000968:	b108      	cbz	r0, 800096e <main+0x192>
 800096a:	b672      	cpsid	i
  while (1)
 800096c:	e7fe      	b.n	800096c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800096e:	f00b f961 	bl	800bc34 <BSP_QSPI_EnableMemoryMappedMode>
 8000972:	4603      	mov	r3, r0
 8000974:	b108      	cbz	r0, 800097a <main+0x19e>
 8000976:	b672      	cpsid	i
  while (1)
 8000978:	e7fe      	b.n	8000978 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800097a:	485d      	ldr	r0, [pc, #372]	; (8000af0 <main+0x314>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800097c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000980:	f8df e178 	ldr.w	lr, [pc, #376]	; 8000afc <main+0x320>
  hdma2d.Init.OutputOffset = 0;
 8000984:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000988:	e9c0 e200 	strd	lr, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800098c:	f00b ff7a 	bl	800c884 <HAL_DMA2D_Init>
 8000990:	4605      	mov	r5, r0
 8000992:	b108      	cbz	r0, 8000998 <main+0x1bc>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x1ba>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000998:	4602      	mov	r2, r0
 800099a:	4631      	mov	r1, r6
 800099c:	4855      	ldr	r0, [pc, #340]	; (8000af4 <main+0x318>)
 800099e:	f00c fe1d 	bl	800d5dc <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009a2:	2014      	movs	r0, #20
 80009a4:	f00b fe46 	bl	800c634 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009a8:	4631      	mov	r1, r6
 80009aa:	4622      	mov	r2, r4
 80009ac:	4851      	ldr	r0, [pc, #324]	; (8000af4 <main+0x318>)
 80009ae:	f00c fe15 	bl	800d5dc <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009b2:	200a      	movs	r0, #10
 80009b4:	f00b fe3e 	bl	800c634 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009b8:	2224      	movs	r2, #36	; 0x24
 80009ba:	4629      	mov	r1, r5
 80009bc:	a817      	add	r0, sp, #92	; 0x5c
  DSI_PLLInitTypeDef PLLInit = {0};
 80009be:	9510      	str	r5, [sp, #64]	; 0x40
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009c0:	f023 ffe6 	bl	8024990 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009c4:	2218      	movs	r2, #24
 80009c6:	4629      	mov	r1, r5
 80009c8:	a811      	add	r0, sp, #68	; 0x44
  hdsi.Instance = DSI;
 80009ca:	4e4b      	ldr	r6, [pc, #300]	; (8000af8 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009cc:	f023 ffe0 	bl	8024990 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009d0:	2234      	movs	r2, #52	; 0x34
 80009d2:	4629      	mov	r1, r5
 80009d4:	a82d      	add	r0, sp, #180	; 0xb4
 80009d6:	f023 ffdb 	bl	8024990 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009da:	4629      	mov	r1, r5
 80009dc:	222c      	movs	r2, #44	; 0x2c
 80009de:	a820      	add	r0, sp, #128	; 0x80
 80009e0:	f023 ffd6 	bl	8024990 <memset>
  hdsi.Instance = DSI;
 80009e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009e8:	f04f 0c63 	mov.w	ip, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009ec:	a90e      	add	r1, sp, #56	; 0x38
 80009ee:	4630      	mov	r0, r6
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009f0:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 80009f4:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009f6:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 80009fa:	2305      	movs	r3, #5
 80009fc:	e9cd c30e 	strd	ip, r3, [sp, #56]	; 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a00:	f00c f88c 	bl	800cb1c <HAL_DSI_Init>
 8000a04:	b108      	cbz	r0, 8000a0a <main+0x22e>
 8000a06:	b672      	cpsid	i
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <main+0x22c>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a0a:	e9cd 4017 	strd	r4, r0, [sp, #92]	; 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a0e:	e9cd 0019 	strd	r0, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a12:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a16:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.BTATimeout = 0;
 8000a1a:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a1c:	a917      	add	r1, sp, #92	; 0x5c
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f00c faa8 	bl	800cf74 <HAL_DSI_ConfigHostTimeouts>
 8000a24:	b108      	cbz	r0, 8000a2a <main+0x24e>
 8000a26:	b672      	cpsid	i
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <main+0x24c>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a2a:	2321      	movs	r3, #33	; 0x21
 8000a2c:	261c      	movs	r6, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a2e:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a30:	a911      	add	r1, sp, #68	; 0x44
 8000a32:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a34:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a38:	2319      	movs	r3, #25
 8000a3a:	e9cd 7313 	strd	r7, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a3e:	2300      	movs	r3, #0
  PhyTimings.StopWaitTime = 0;
 8000a40:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a44:	f00c fa59 	bl	800cefa <HAL_DSI_ConfigPhyTimer>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x272>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x270>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4829      	ldr	r0, [pc, #164]	; (8000af8 <main+0x31c>)
 8000a52:	f00c fa41 	bl	800ced8 <HAL_DSI_ConfigFlowControl>
 8000a56:	b108      	cbz	r0, 8000a5c <main+0x280>
 8000a58:	b672      	cpsid	i
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <main+0x27e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a5c:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <main+0x31c>)
 8000a62:	f00c fc11 	bl	800d288 <HAL_DSI_SetLowPowerRXFilter>
 8000a66:	4601      	mov	r1, r0
 8000a68:	b108      	cbz	r0, 8000a6e <main+0x292>
 8000a6a:	b672      	cpsid	i
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <main+0x290>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a6e:	4822      	ldr	r0, [pc, #136]	; (8000af8 <main+0x31c>)
 8000a70:	f00b fff2 	bl	800ca58 <HAL_DSI_ConfigErrorMonitor>
 8000a74:	b108      	cbz	r0, 8000a7a <main+0x29e>
 8000a76:	b672      	cpsid	i
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <main+0x29c>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a7a:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8e:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a9e:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000aa2:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000aaa:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aae:	e9cd 1331 	strd	r1, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ab6:	a92d      	add	r1, sp, #180	; 0xb4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ab8:	e9cd 0333 	strd	r0, r3, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000abc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <main+0x31c>)
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ac2:	e9cd 4335 	strd	r4, r3, [sp, #212]	; 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ac6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aca:	e9cd 5337 	strd	r5, r3, [sp, #220]	; 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000ace:	f00c f9cf 	bl	800ce70 <HAL_DSI_ConfigCommand>
 8000ad2:	b1a8      	cbz	r0, 8000b00 <main+0x324>
 8000ad4:	b672      	cpsid	i
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x2fa>
 8000ad8:	0300001b 	.word	0x0300001b
 8000adc:	10040000 	.word	0x10040000
 8000ae0:	e000ed00 	.word	0xe000ed00
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	240002bc 	.word	0x240002bc
 8000aec:	52005000 	.word	0x52005000
 8000af0:	24000190 	.word	0x24000190
 8000af4:	58021800 	.word	0x58021800
 8000af8:	240001f8 	.word	0x240001f8
 8000afc:	52001000 	.word	0x52001000
  CmdCfg.CommandSize = 400;
 8000b00:	2305      	movs	r3, #5
 8000b02:	f44f 77c8 	mov.w	r7, #400	; 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b06:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000b08:	9020      	str	r0, [sp, #128]	; 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b0a:	9027      	str	r0, [sp, #156]	; 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b0c:	962a      	str	r6, [sp, #168]	; 0xa8
  CmdCfg.CommandSize = 400;
 8000b0e:	e9cd 3721 	strd	r3, r7, [sp, #132]	; 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b12:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b14:	e9cd 3023 	strd	r3, r0, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b18:	2380      	movs	r3, #128	; 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b1a:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b1e:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b22:	e9cd 3028 	strd	r3, r0, [sp, #160]	; 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b26:	4851      	ldr	r0, [pc, #324]	; (8000c6c <main+0x490>)
 8000b28:	f00c f930 	bl	800cd8c <HAL_DSI_ConfigAdaptedCommandMode>
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	b108      	cbz	r0, 8000b34 <main+0x358>
 8000b30:	b672      	cpsid	i
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <main+0x356>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b34:	484d      	ldr	r0, [pc, #308]	; (8000c6c <main+0x490>)
 8000b36:	f00c f918 	bl	800cd6a <HAL_DSI_SetGenericVCID>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	b108      	cbz	r0, 8000b42 <main+0x366>
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x364>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b42:	4601      	mov	r1, r0
 8000b44:	2234      	movs	r2, #52	; 0x34
 8000b46:	a820      	add	r0, sp, #128	; 0x80
  hltdc.Instance = LTDC;
 8000b48:	4d49      	ldr	r5, [pc, #292]	; (8000c70 <main+0x494>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b4a:	f023 ff21 	bl	8024990 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b4e:	4849      	ldr	r0, [pc, #292]	; (8000c74 <main+0x498>)
 8000b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b54:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.TotalHeigh = 483;
 8000b58:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.Backcolor.Blue = 0;
 8000b5c:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 2;
 8000b5e:	f8c5 8020 	str.w	r8, [r5, #32]
  hltdc.Init.Backcolor.Red = 0;
 8000b62:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b66:	e9c5 0300 	strd	r0, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6e:	4628      	mov	r0, r5
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b70:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b74:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8000b78:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b7c:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b80:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.AccumulatedHBP = 2;
 8000b84:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.TotalHeigh = 483;
 8000b88:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b8c:	f00d f970 	bl	800de70 <HAL_LTDC_Init>
 8000b90:	b108      	cbz	r0, 8000b96 <main+0x3ba>
 8000b92:	b672      	cpsid	i
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <main+0x3b8>
  pLayerCfg.Alpha = 255;
 8000b96:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000b9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000ba0:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000ba2:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000ba6:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
  pLayerCfg.ImageHeight = 480;
 8000baa:	932b      	str	r3, [sp, #172]	; 0xac
  pLayerCfg.Alpha0 = 0;
 8000bac:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	e9cd 1227 	strd	r1, r2, [sp, #156]	; 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bb6:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bba:	a920      	add	r1, sp, #128	; 0x80
  pLayerCfg.WindowX1 = 400;
 8000bbc:	e9cd 0720 	strd	r0, r7, [sp, #128]	; 0x80
  pLayerCfg.ImageWidth = 400;
 8000bc0:	e9cd 2729 	strd	r2, r7, [sp, #164]	; 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4628      	mov	r0, r5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000bc8:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bcc:	f00d fa1c 	bl	800e008 <HAL_LTDC_ConfigLayer>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	b108      	cbz	r0, 8000bd8 <main+0x3fc>
 8000bd4:	b672      	cpsid	i
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x3fa>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bd8:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bda:	4824      	ldr	r0, [pc, #144]	; (8000c6c <main+0x490>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bdc:	6993      	ldr	r3, [r2, #24]
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000be4:	f00c fa2c 	bl	800d040 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000be8:	4923      	ldr	r1, [pc, #140]	; (8000c78 <main+0x49c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <main+0x4a0>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bec:	4824      	ldr	r0, [pc, #144]	; (8000c80 <main+0x4a4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bee:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <main+0x4a8>)
  IOCtx.Address     = 0;
 8000bf2:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bf4:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <main+0x4ac>)
 8000bf8:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bfa:	f00a fe0f 	bl	800b81c <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bfe:	4632      	mov	r2, r6
 8000c00:	4621      	mov	r1, r4
 8000c02:	481f      	ldr	r0, [pc, #124]	; (8000c80 <main+0x4a4>)
 8000c04:	f00a fa66 	bl	800b0d4 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c08:	2328      	movs	r3, #40	; 0x28
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <main+0x490>)
 8000c10:	9400      	str	r4, [sp, #0]
 8000c12:	f00c fa48 	bl	800d0a6 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c16:	a92d      	add	r1, sp, #180	; 0xb4
 8000c18:	4814      	ldr	r0, [pc, #80]	; (8000c6c <main+0x490>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c1a:	9437      	str	r4, [sp, #220]	; 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c1c:	e9cd 442d 	strd	r4, r4, [sp, #180]	; 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c20:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c24:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c28:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c2c:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c30:	f00c f91e 	bl	800ce70 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c38:	4622      	mov	r2, r4
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f00d fa12 	bl	800e064 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c40:	682a      	ldr	r2, [r5, #0]
 8000c42:	6993      	ldr	r3, [r2, #24]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c4a:	f000 fcbd 	bl	80015c8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c4e:	f000 fcba 	bl	80015c6 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c52:	f00f fbf5 	bl	8010440 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <main+0x4b0>)
 8000c58:	4621      	mov	r1, r4
 8000c5a:	480d      	ldr	r0, [pc, #52]	; (8000c90 <main+0x4b4>)
 8000c5c:	f00f fc1c 	bl	8010498 <osThreadNew>
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <main+0x4b8>)
 8000c62:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c64:	f00f fbfe 	bl	8010464 <osKernelStart>
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <main+0x48c>
 8000c6a:	bf00      	nop
 8000c6c:	240001f8 	.word	0x240001f8
 8000c70:	24000214 	.word	0x24000214
 8000c74:	50001000 	.word	0x50001000
 8000c78:	24000138 	.word	0x24000138
 8000c7c:	0800bc05 	.word	0x0800bc05
 8000c80:	24000148 	.word	0x24000148
 8000c84:	08001b5d 	.word	0x08001b5d
 8000c88:	08001b95 	.word	0x08001b95
 8000c8c:	08025ac0 	.word	0x08025ac0
 8000c90:	080015d7 	.word	0x080015d7
 8000c94:	24000168 	.word	0x24000168
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2214      	movs	r2, #20
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	a82d      	add	r0, sp, #180	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f023 fe76 	bl	8024990 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ca4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000cb2:	4883      	ldr	r0, [pc, #524]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	f44f 7880 	mov.w	r8, #256	; 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cba:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cbe:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ccc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	9305      	str	r3, [sp, #20]
 8000ce2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ce8:	f043 0310 	orr.w	r3, r3, #16
 8000cec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000cf0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000cf4:	f003 0310 	and.w	r3, r3, #16
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d10:	9307      	str	r3, [sp, #28]
 8000d12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	9308      	str	r3, [sp, #32]
 8000d2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d40:	9309      	str	r3, [sp, #36]	; 0x24
 8000d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	930a      	str	r3, [sp, #40]	; 0x28
 8000d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d84:	f003 0320 	and.w	r3, r3, #32
 8000d88:	930c      	str	r3, [sp, #48]	; 0x30
 8000d8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	930d      	str	r3, [sp, #52]	; 0x34
 8000da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8000da6:	f00c fc19 	bl	800d5dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2108      	movs	r1, #8
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <main+0x6e8>)
 8000db0:	f00c fc14 	bl	800d5dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dba:	4843      	ldr	r0, [pc, #268]	; (8000ec8 <main+0x6ec>)
 8000dbc:	f00c fc0e 	bl	800d5dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOJ, FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 7142 	mov.w	r1, #776	; 0x308
 8000dc6:	483e      	ldr	r0, [pc, #248]	; (8000ec0 <main+0x6e4>)
 8000dc8:	f00c fc08 	bl	800d5dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	f241 3308 	movw	r3, #4872	; 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dd0:	a92d      	add	r1, sp, #180	; 0xb4
 8000dd2:	483b      	ldr	r0, [pc, #236]	; (8000ec0 <main+0x6e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	e9cd 342d 	strd	r3, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ddc:	f00c fa6a 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	a92d      	add	r1, sp, #180	; 0xb4
 8000de4:	4839      	ldr	r0, [pc, #228]	; (8000ecc <main+0x6f0>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000de6:	9531      	str	r5, [sp, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	e9cd 832d 	strd	r8, r3, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	e9cd 552f 	strd	r5, r5, [sp, #188]	; 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f00c fa60 	bl	800d2b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000df4:	a92d      	add	r1, sp, #180	; 0xb4
 8000df6:	4833      	ldr	r0, [pc, #204]	; (8000ec4 <main+0x6e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	e9cd 642d 	strd	r6, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	e9cd 472f 	strd	r4, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f00c fa58 	bl	800d2b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a92d      	add	r1, sp, #180	; 0xb4
 8000e06:	4830      	ldr	r0, [pc, #192]	; (8000ec8 <main+0x6ec>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	e9cd 842d 	strd	r8, r4, [sp, #180]	; 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	e9cd 572f 	strd	r5, r7, [sp, #188]	; 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f00c fa50 	bl	800d2b4 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <main+0x6f4>)
 8000e16:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <main+0x6f8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e18:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000e1a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e1c:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e1e:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e22:	f00b fccf 	bl	800c7c4 <HAL_CRC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	f47f ad7a 	bne.w	8000922 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e2e:	492a      	ldr	r1, [pc, #168]	; (8000ed8 <main+0x6fc>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e30:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e32:	482a      	ldr	r0, [pc, #168]	; (8000edc <main+0x700>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e34:	680a      	ldr	r2, [r1, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e3c:	a92d      	add	r1, sp, #180	; 0xb4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e3e:	4a28      	ldr	r2, [pc, #160]	; (8000ee0 <main+0x704>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e40:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e42:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e46:	2220      	movs	r2, #32
 8000e48:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e4c:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000e4e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e52:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e56:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000e5a:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000e5c:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
  SdramTiming.RowCycleDelay = 16;
 8000e60:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RPDelay = 16;
 8000e64:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RCDDelay = 16;
 8000e68:	9333      	str	r3, [sp, #204]	; 0xcc
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e6a:	f00f f80d 	bl	800fe88 <HAL_SDRAM_Init>
 8000e6e:	4680      	mov	r8, r0
 8000e70:	2800      	cmp	r0, #0
 8000e72:	f43f ad58 	beq.w	8000926 <main+0x14a>
 8000e76:	b672      	cpsid	i
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <main+0x69c>
  HAL_Init();
 8000e7a:	f00b fb9b 	bl	800c5b4 <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff fc41 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e82:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e86:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000e90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	9303      	str	r3, [sp, #12]
 8000e9a:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000e9c:	f00c fbac 	bl	800d5f8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f00c fbb6 	bl	800d614 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000ea8:	4c0e      	ldr	r4, [pc, #56]	; (8000ee4 <main+0x708>)
 8000eaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eae:	6822      	ldr	r2, [r4, #0]
 8000eb0:	0412      	lsls	r2, r2, #16
 8000eb2:	f53f aef1 	bmi.w	8000c98 <main+0x4bc>
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	d1f9      	bne.n	8000eae <main+0x6d2>
 8000eba:	b672      	cpsid	i
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <main+0x6e0>
 8000ebe:	bf00      	nop
 8000ec0:	58022400 	.word	0x58022400
 8000ec4:	58021800 	.word	0x58021800
 8000ec8:	58021400 	.word	0x58021400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	2400016c 	.word	0x2400016c
 8000ed4:	58024c00 	.word	0x58024c00
 8000ed8:	52004000 	.word	0x52004000
 8000edc:	24000308 	.word	0x24000308
 8000ee0:	52004140 	.word	0x52004140
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d101      	bne.n	8000ef4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000ef0:	f00b bb8e 	b.w	800c610 <HAL_IncTick>
}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
 8000efc:	b672      	cpsid	i
  while (1)
 8000efe:	e7fe      	b.n	8000efe <Error_Handler+0x2>

08000f00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_MspInit+0x2c>)
{
 8000f02:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f04:	210f      	movs	r1, #15
 8000f06:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f24:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f26:	f00b bbaf 	b.w	800c688 <HAL_NVIC_SetPriority>
 8000f2a:	bf00      	nop
 8000f2c:	58024400 	.word	0x58024400

08000f30 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f30:	6802      	ldr	r2, [r0, #0]
{
 8000f32:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_CRC_MspInit+0x2c>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d10d      	bne.n	8000f56 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f56:	b002      	add	sp, #8
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	58024c00 	.word	0x58024c00

08000f60 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_DMA2D_MspInit+0x40>)
{
 8000f62:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d117      	bne.n	8000f9a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f70:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000f74:	f042 0210 	orr.w	r2, r2, #16
 8000f78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f7c:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f7e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f82:	f003 0310 	and.w	r3, r3, #16
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000f8a:	f00b fb7d 	bl	800c688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f8e:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f90:	b003      	add	sp, #12
 8000f92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f96:	f00b bba9 	b.w	800c6ec <HAL_NVIC_EnableIRQ>
}
 8000f9a:	b003      	add	sp, #12
 8000f9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fa0:	52001000 	.word	0x52001000
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000fa8:	b510      	push	{r4, lr}
 8000faa:	b0ba      	sub	sp, #232	; 0xe8
 8000fac:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	a803      	add	r0, sp, #12
 8000fb4:	f023 fcec 	bl	8024990 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	22c8      	movs	r2, #200	; 0xc8
 8000fba:	2100      	movs	r1, #0
 8000fbc:	a808      	add	r0, sp, #32
 8000fbe:	f023 fce7 	bl	8024990 <memset>
  if(hdsi->Instance==DSI)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fc8:	d138      	bne.n	800103c <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fce:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8000fd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f00e fa25 	bl	800f424 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	b108      	cbz	r0, 8000fe0 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8000fdc:	f7ff ff8e 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe0:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000fe4:	a903      	add	r1, sp, #12
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8000fe8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000fec:	f042 0210 	orr.w	r2, r2, #16
 8000ff0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000ff4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000ff8:	f002 0210 	and.w	r2, r2, #16
 8000ffc:	9201      	str	r2, [sp, #4]
 8000ffe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001008:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001020:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001026:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001028:	f00c f944 	bl	800d2b4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 800102c:	207b      	movs	r0, #123	; 0x7b
 800102e:	4622      	mov	r2, r4
 8001030:	2107      	movs	r1, #7
 8001032:	f00b fb29 	bl	800c688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001036:	207b      	movs	r0, #123	; 0x7b
 8001038:	f00b fb58 	bl	800c6ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800103c:	b03a      	add	sp, #232	; 0xe8
 800103e:	bd10      	pop	{r4, pc}
 8001040:	58024400 	.word	0x58024400
 8001044:	58022400 	.word	0x58022400

08001048 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001048:	b510      	push	{r4, lr}
 800104a:	b0b4      	sub	sp, #208	; 0xd0
 800104c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104e:	22c8      	movs	r2, #200	; 0xc8
 8001050:	2100      	movs	r1, #0
 8001052:	a802      	add	r0, sp, #8
 8001054:	f023 fc9c 	bl	8024990 <memset>
  if(hltdc->Instance==LTDC)
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_LTDC_MspInit+0x74>)
 800105c:	429a      	cmp	r2, r3
 800105e:	d12b      	bne.n	80010b8 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001060:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001064:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001066:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800106e:	23a1      	movs	r3, #161	; 0xa1
 8001070:	2205      	movs	r2, #5
 8001072:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001076:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001078:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800107c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001080:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f00e f9ce 	bl	800f424 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	b108      	cbz	r0, 800108e <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800108a:	f7ff ff37 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001090:	2058      	movs	r0, #88	; 0x58
 8001092:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001094:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001098:	f042 0208 	orr.w	r2, r2, #8
 800109c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010a0:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80010ae:	f00b faeb 	bl	800c688 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010b2:	2058      	movs	r0, #88	; 0x58
 80010b4:	f00b fb1a 	bl	800c6ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80010b8:	b034      	add	sp, #208	; 0xd0
 80010ba:	bd10      	pop	{r4, pc}
 80010bc:	50001000 	.word	0x50001000
 80010c0:	58024400 	.word	0x58024400

080010c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c6:	b0bf      	sub	sp, #252	; 0xfc
 80010c8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	2214      	movs	r2, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	a807      	add	r0, sp, #28
 80010d0:	f023 fc5e 	bl	8024990 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	22c8      	movs	r2, #200	; 0xc8
 80010d6:	2100      	movs	r1, #0
 80010d8:	a80c      	add	r0, sp, #48	; 0x30
 80010da:	f023 fc59 	bl	8024990 <memset>
  if(hqspi->Instance==QUADSPI)
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_QSPI_MspInit+0x16c>)
 80010e2:	429a      	cmp	r2, r3
 80010e4:	f040 80a1 	bne.w	800122a <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010ec:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ee:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80010f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f4:	f00e f996 	bl	800f424 <HAL_RCCEx_PeriphCLKConfig>
 80010f8:	b108      	cbz	r0, 80010fe <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80010fa:	f7ff feff 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001104:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001106:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	a907      	add	r1, sp, #28
 800110c:	484a      	ldr	r0, [pc, #296]	; (8001238 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800110e:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001114:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001118:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800111c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001124:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800112c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001130:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001134:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001138:	9202      	str	r2, [sp, #8]
 800113a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001140:	f042 0220 	orr.w	r2, r2, #32
 8001144:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001148:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800114c:	f002 0220 	and.w	r2, r2, #32
 8001150:	9203      	str	r2, [sp, #12]
 8001152:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001154:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001158:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001160:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001164:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001168:	9204      	str	r2, [sp, #16]
 800116a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001170:	f042 0202 	orr.w	r2, r2, #2
 8001174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001178:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800117c:	f002 0202 	and.w	r2, r2, #2
 8001180:	9205      	str	r2, [sp, #20]
 8001182:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001184:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	9306      	str	r3, [sp, #24]
 800119a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80011a0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011a8:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011aa:	f00c f883 	bl	800d2b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011ae:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b0:	a907      	add	r1, sp, #28
 80011b2:	4821      	ldr	r0, [pc, #132]	; (8001238 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011b4:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011be:	f00c f879 	bl	800d2b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c4:	a907      	add	r1, sp, #28
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011c8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d2:	f00c f86f 	bl	800d2b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011da:	a907      	add	r1, sp, #28
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011de:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011e8:	f00c f864 	bl	800d2b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011ec:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ee:	a907      	add	r1, sp, #28
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011f2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011fc:	f00c f85a 	bl	800d2b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	a907      	add	r1, sp, #28
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001206:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f00c f850 	bl	800d2b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001214:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	a907      	add	r1, sp, #28
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f00c f845 	bl	800d2b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800122a:	b03f      	add	sp, #252	; 0xfc
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	bf00      	nop
 8001230:	52005000 	.word	0x52005000
 8001234:	58024400 	.word	0x58024400
 8001238:	58021800 	.word	0x58021800
 800123c:	58021400 	.word	0x58021400
 8001240:	58021c00 	.word	0x58021c00
 8001244:	58020400 	.word	0x58020400
 8001248:	58020c00 	.word	0x58020c00

0800124c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800124c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001250:	2100      	movs	r1, #0
 8001252:	2214      	movs	r2, #20
 8001254:	a801      	add	r0, sp, #4
 8001256:	f023 fb9b 	bl	8024990 <memset>
  if (FMC_Initialized) {
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_SDRAM_MspInit+0xf8>)
 800125c:	6819      	ldr	r1, [r3, #0]
 800125e:	2900      	cmp	r1, #0
 8001260:	d16d      	bne.n	800133e <HAL_SDRAM_MspInit+0xf2>
  FMC_Initialized = 1;
 8001262:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 8001266:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001268:	22c0      	movs	r2, #192	; 0xc0
 800126a:	f023 fb91 	bl	8024990 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800126e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001272:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001274:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001276:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127a:	f00e f8d3 	bl	800f424 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	b108      	cbz	r0, 8001284 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001280:	f7ff fe3c 	bl	8000efc <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001284:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SDRAM_MspInit+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2600      	movs	r6, #0
 800128a:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800128c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001290:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001292:	a901      	add	r1, sp, #4
 8001294:	482d      	ldr	r0, [pc, #180]	; (800134c <HAL_SDRAM_MspInit+0x100>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001296:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800129a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800129e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a2:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80012a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012b8:	f00b fffc 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 80012bc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c0:	a901      	add	r1, sp, #4
 80012c2:	4823      	ldr	r0, [pc, #140]	; (8001350 <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ce:	f00b fff1 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 80012d2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012d6:	a901      	add	r1, sp, #4
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012da:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012e4:	f00b ffe6 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80012e8:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ec:	a901      	add	r1, sp, #4
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012fa:	f00b ffdb 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80012fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	a901      	add	r1, sp, #4
 8001304:	4815      	ldr	r0, [pc, #84]	; (800135c <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001306:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001310:	f00b ffd0 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001314:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001318:	a901      	add	r1, sp, #4
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800131c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f00b ffc5 	bl	800d2b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800132a:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	a901      	add	r1, sp, #4
 800132e:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f00b ffbb 	bl	800d2b4 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800133e:	b039      	add	sp, #228	; 0xe4
 8001340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001342:	bf00      	nop
 8001344:	24000340 	.word	0x24000340
 8001348:	58024400 	.word	0x58024400
 800134c:	58022000 	.word	0x58022000
 8001350:	58021000 	.word	0x58021000
 8001354:	58021c00 	.word	0x58021c00
 8001358:	58021800 	.word	0x58021800
 800135c:	58020c00 	.word	0x58020c00
 8001360:	58021400 	.word	0x58021400
 8001364:	58020800 	.word	0x58020800

08001368 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001368:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_SDRAM_MspDeInit+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	bb62      	cbnz	r2, 80013ca <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001370:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001372:	f240 61ff 	movw	r1, #1791	; 0x6ff
 8001376:	4816      	ldr	r0, [pc, #88]	; (80013d0 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001378:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <HAL_SDRAM_MspDeInit+0x6c>)
 800137c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001384:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001388:	f00c f880 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800138c:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <HAL_SDRAM_MspDeInit+0x70>)
 8001392:	f00c f87b 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001396:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800139a:	4810      	ldr	r0, [pc, #64]	; (80013dc <HAL_SDRAM_MspDeInit+0x74>)
 800139c:	f00c f876 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013a0:	f248 1131 	movw	r1, #33073	; 0x8131
 80013a4:	480e      	ldr	r0, [pc, #56]	; (80013e0 <HAL_SDRAM_MspDeInit+0x78>)
 80013a6:	f00c f871 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013aa:	f24c 7103 	movw	r1, #50947	; 0xc703
 80013ae:	480d      	ldr	r0, [pc, #52]	; (80013e4 <HAL_SDRAM_MspDeInit+0x7c>)
 80013b0:	f00c f86c 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013b4:	f64f 013f 	movw	r1, #63551	; 0xf83f
 80013b8:	480b      	ldr	r0, [pc, #44]	; (80013e8 <HAL_SDRAM_MspDeInit+0x80>)
 80013ba:	f00c f867 	bl	800d48c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013be:	210d      	movs	r1, #13
 80013c0:	480a      	ldr	r0, [pc, #40]	; (80013ec <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 80013c6:	f00c b861 	b.w	800d48c <HAL_GPIO_DeInit>
}
 80013ca:	bd08      	pop	{r3, pc}
 80013cc:	2400033c 	.word	0x2400033c
 80013d0:	58022000 	.word	0x58022000
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58021000 	.word	0x58021000
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58020c00 	.word	0x58020c00
 80013e8:	58021400 	.word	0x58021400
 80013ec:	58020800 	.word	0x58020800

080013f0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f0:	280f      	cmp	r0, #15
{
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	d902      	bls.n	8001400 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80013fa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80013fc:	b00a      	add	sp, #40	; 0x28
 80013fe:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001400:	4601      	mov	r1, r0
 8001402:	2200      	movs	r2, #0
 8001404:	2036      	movs	r0, #54	; 0x36
 8001406:	f00b f93f 	bl	800c688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800140a:	2036      	movs	r0, #54	; 0x36
 800140c:	f00b f96e 	bl	800c6ec <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001412:	4669      	mov	r1, sp
 8001414:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001416:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_InitTick+0x88>)
 800141a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001432:	f00d fedd 	bl	800f1f0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001436:	9b07      	ldr	r3, [sp, #28]
 8001438:	b9c3      	cbnz	r3, 800146c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f00d feb5 	bl	800f1a8 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800143e:	4c0f      	ldr	r4, [pc, #60]	; (800147c <HAL_InitTick+0x8c>)
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_InitTick+0x90>)
 8001442:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001444:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001448:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_InitTick+0x94>)
 800144c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001450:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001452:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001454:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001456:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001458:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800145c:	f00e ff14 	bl	8010288 <HAL_TIM_Base_Init>
 8001460:	2800      	cmp	r0, #0
 8001462:	d1ca      	bne.n	80013fa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001464:	4620      	mov	r0, r4
 8001466:	f00e fdb7 	bl	800ffd8 <HAL_TIM_Base_Start_IT>
 800146a:	e7c7      	b.n	80013fc <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146c:	f00d fe9c 	bl	800f1a8 <HAL_RCC_GetPCLK1Freq>
 8001470:	0040      	lsls	r0, r0, #1
 8001472:	e7e4      	b.n	800143e <HAL_InitTick+0x4e>
 8001474:	24000054 	.word	0x24000054
 8001478:	58024400 	.word	0x58024400
 800147c:	24000344 	.word	0x24000344
 8001480:	40001000 	.word	0x40001000
 8001484:	000f4240 	.word	0x000f4240

08001488 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler>

0800148a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler>

0800148c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler>

0800148e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <BusFault_Handler>

08001490 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler>

08001492 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	4770      	bx	lr

08001494 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001494:	4801      	ldr	r0, [pc, #4]	; (800149c <TIM6_DAC_IRQHandler+0x8>)
 8001496:	f00e bde1 	b.w	801005c <HAL_TIM_IRQHandler>
 800149a:	bf00      	nop
 800149c:	24000344 	.word	0x24000344

080014a0 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014a0:	4801      	ldr	r0, [pc, #4]	; (80014a8 <LTDC_IRQHandler+0x8>)
 80014a2:	f00c bd54 	b.w	800df4e <HAL_LTDC_IRQHandler>
 80014a6:	bf00      	nop
 80014a8:	24000214 	.word	0x24000214

080014ac <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014ac:	4801      	ldr	r0, [pc, #4]	; (80014b4 <DMA2D_IRQHandler+0x8>)
 80014ae:	f00b ba28 	b.w	800c902 <HAL_DMA2D_IRQHandler>
 80014b2:	bf00      	nop
 80014b4:	24000190 	.word	0x24000190

080014b8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <DSI_IRQHandler+0x8>)
 80014ba:	f00b bbe4 	b.w	800cc86 <HAL_DSI_IRQHandler>
 80014be:	bf00      	nop
 80014c0:	240001f8 	.word	0x240001f8

080014c4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014c4:	2001      	movs	r0, #1
 80014c6:	4770      	bx	lr

080014c8 <_kill>:

int _kill(int pid, int sig)
{
 80014c8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ca:	f023 fa07 	bl	80248dc <__errno>
 80014ce:	2316      	movs	r3, #22
 80014d0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	bd08      	pop	{r3, pc}

080014d8 <_exit>:

void _exit (int status)
{
 80014d8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014da:	f023 f9ff 	bl	80248dc <__errno>
 80014de:	2316      	movs	r3, #22
 80014e0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014e2:	e7fe      	b.n	80014e2 <_exit+0xa>

080014e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	460d      	mov	r5, r1
 80014e8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	460e      	mov	r6, r1
 80014ec:	1b73      	subs	r3, r6, r5
 80014ee:	429c      	cmp	r4, r3
 80014f0:	dc01      	bgt.n	80014f6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80014f2:	4620      	mov	r0, r4
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	e7f5      	b.n	80014ec <_read+0x8>

08001500 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	460d      	mov	r5, r1
 8001504:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	460e      	mov	r6, r1
 8001508:	1b73      	subs	r3, r6, r5
 800150a:	429c      	cmp	r4, r3
 800150c:	dc01      	bgt.n	8001512 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800150e:	4620      	mov	r0, r4
 8001510:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001512:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	e7f5      	b.n	8001508 <_write+0x8>

0800151c <_close>:

int _close(int file)
{
	return -1;
}
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001526:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001528:	604b      	str	r3, [r1, #4]
}
 800152a:	4770      	bx	lr

0800152c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800152c:	2001      	movs	r0, #1
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001530:	2000      	movs	r0, #0
 8001532:	4770      	bx	lr

08001534 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <_sbrk+0x30>)
{
 8001536:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001538:	6811      	ldr	r1, [r2, #0]
{
 800153a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800153c:	b909      	cbnz	r1, 8001542 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153e:	490a      	ldr	r1, [pc, #40]	; (8001568 <_sbrk+0x34>)
 8001540:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	6810      	ldr	r0, [r2, #0]
 8001544:	4909      	ldr	r1, [pc, #36]	; (800156c <_sbrk+0x38>)
 8001546:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <_sbrk+0x3c>)
 8001548:	4403      	add	r3, r0
 800154a:	1b09      	subs	r1, r1, r4
 800154c:	428b      	cmp	r3, r1
 800154e:	d906      	bls.n	800155e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001550:	f023 f9c4 	bl	80248dc <__errno>
 8001554:	230c      	movs	r3, #12
 8001556:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001558:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800155c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001560:	e7fc      	b.n	800155c <_sbrk+0x28>
 8001562:	bf00      	nop
 8001564:	24000390 	.word	0x24000390
 8001568:	240102f0 	.word	0x240102f0
 800156c:	24080000 	.word	0x24080000
 8001570:	00001000 	.word	0x00001000

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001578:	f00a ffac 	bl	800c4d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800158c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a2:	f023 f9b3 	bl	802490c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff f919 	bl	80007dc <main>
  bx  lr
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015b4:	2400011c 	.word	0x2400011c
  ldr r2, =_sidata
 80015b8:	080290ec 	.word	0x080290ec
  ldr r2, =_sbss
 80015bc:	2400011c 	.word	0x2400011c
  ldr r4, =_ebss
 80015c0:	240102ec 	.word	0x240102ec

080015c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC3_IRQHandler>

080015c6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015c6:	4770      	bx	lr

080015c8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80015c8:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 80015ca:	f000 ff6d 	bl	80024a8 <touchgfx_components_init>
  touchgfx_init();
}
 80015ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
 80015d2:	f000 bef5 	b.w	80023c0 <touchgfx_init>

080015d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015d6:	f000 bf69 	b.w	80024ac <touchgfx_taskEntry>

080015da <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015da:	6840      	ldr	r0, [r0, #4]
    }
 80015dc:	4770      	bx	lr

080015de <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015de:	6041      	str	r1, [r0, #4]
    }
 80015e0:	4770      	bx	lr

080015e2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80015e2:	1a51      	subs	r1, r2, r1
 80015e4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80015e8:	fbb1 f0f3 	udiv	r0, r1, r3
 80015ec:	4770      	bx	lr
	...

080015f0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80015f2:	68c0      	ldr	r0, [r0, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80015f8:	4358      	muls	r0, r3
 80015fa:	4770      	bx	lr
 80015fc:	24000394 	.word	0x24000394

08001600 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001600:	4770      	bx	lr
	...

08001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001604:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001606:	4a1e      	ldr	r2, [pc, #120]	; (8001680 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001608:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 800160c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 800160e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001612:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800161e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800162c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001630:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001636:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001638:	2101      	movs	r1, #1
 800163a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 800163c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	2210      	movs	r2, #16
 8001640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001644:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001648:	fab2 f282 	clz	r2, r2
 800164c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	b983      	cbnz	r3, 8001676 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001654:	f00d fd86 	bl	800f164 <HAL_RCC_GetHCLKFreq>
 8001658:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800165a:	f00d fbbd 	bl	800edd8 <HAL_RCC_GetSysClockFreq>
 800165e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001662:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001664:	4807      	ldr	r0, [pc, #28]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001666:	f00e fe0f 	bl	8010288 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800166a:	4806      	ldr	r0, [pc, #24]	; (8001684 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 800166c:	b003      	add	sp, #12
 800166e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001672:	f00e bc77 	b.w	800ff64 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001676:	f00d fd97 	bl	800f1a8 <HAL_RCC_GetPCLK1Freq>
 800167a:	0044      	lsls	r4, r0, #1
 800167c:	e7ed      	b.n	800165a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800167e:	bf00      	nop
 8001680:	58024400 	.word	0x58024400
 8001684:	24000394 	.word	0x24000394
 8001688:	08027614 	.word	0x08027614

0800168c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 800168c:	b510      	push	{r4, lr}
 800168e:	4604      	mov	r4, r0
 8001690:	2110      	movs	r1, #16
 8001692:	f022 ffe4 	bl	802465e <_ZdlPvj>
 8001696:	4620      	mov	r0, r4
 8001698:	bd10      	pop	{r4, pc}

0800169a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800169a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 800169c:	6803      	ldr	r3, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 80016a0:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 80016a2:	b131      	cbz	r1, 80016b2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 80016a4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 80016a6:	4790      	blx	r2
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	1b5b      	subs	r3, r3, r5
 80016ac:	4418      	add	r0, r3
 80016ae:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 80016b2:	4790      	blx	r2
 80016b4:	60a0      	str	r0, [r4, #8]
}
 80016b6:	e7fb      	b.n	80016b0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

080016b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80016b8:	4770      	bx	lr

080016ba <_ZN20STM32TouchControllerD0Ev>:
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	2104      	movs	r1, #4
 80016c0:	f022 ffcd 	bl	802465e <_ZdlPvj>
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}

080016c8 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 80016c8:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80016cc:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 80016d0:	2000      	movs	r0, #0
    hTS->Width = 800;
 80016d2:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80016d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016d8:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80016dc:	230c      	movs	r3, #12
 80016de:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80016e2:	f00a fe03 	bl	800c2ec <BSP_TS_Init>
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <_ZN20STM32TouchController4initEv+0x40>)
 80016e8:	b910      	cbnz	r0, 80016f0 <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80016ee:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1fb      	bne.n	80016ee <_ZN20STM32TouchController4initEv+0x26>
 80016f6:	4b05      	ldr	r3, [pc, #20]	; (800170c <_ZN20STM32TouchController4initEv+0x44>)
 80016f8:	212e      	movs	r1, #46	; 0x2e
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <_ZN20STM32TouchController4initEv+0x48>)
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <_ZN20STM32TouchController4initEv+0x4c>)
 80016fe:	f023 f8bb 	bl	8024878 <__assert_func>
 8001702:	bf00      	nop
 8001704:	240003f0 	.word	0x240003f0
 8001708:	240003ec 	.word	0x240003ec
 800170c:	08025b0c 	.word	0x08025b0c
 8001710:	08025b1f 	.word	0x08025b1f
 8001714:	08025b49 	.word	0x08025b49

08001718 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 800171c:	460f      	mov	r7, r1
 800171e:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001720:	781d      	ldrb	r5, [r3, #0]
 8001722:	b915      	cbnz	r5, 800172a <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001724:	2500      	movs	r5, #0
}
 8001726:	4628      	mov	r0, r5
 8001728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 800172a:	4c07      	ldr	r4, [pc, #28]	; (8001748 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 800172c:	2000      	movs	r0, #0
 800172e:	4621      	mov	r1, r4
 8001730:	f00a fe70 	bl	800c414 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f4      	beq.n	8001724 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 800173e:	68a3      	ldr	r3, [r4, #8]
 8001740:	6033      	str	r3, [r6, #0]
            return true;
 8001742:	e7f0      	b.n	8001726 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001744:	240003ec 	.word	0x240003ec
 8001748:	240003e0 	.word	0x240003e0

0800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 800174c:	2803      	cmp	r0, #3
 800174e:	d825      	bhi.n	800179c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001750:	e8df f000 	tbb	[pc, r0]
 8001754:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800175a:	2108      	movs	r1, #8
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	fab2 f282 	clz	r2, r2
 8001762:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001764:	480f      	ldr	r0, [pc, #60]	; (80017a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001766:	f00b bf39 	b.w	800d5dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	fab2 f282 	clz	r2, r2
 8001776:	0952      	lsrs	r2, r2, #5
 8001778:	e7f4      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800177c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	fab2 f282 	clz	r2, r2
 8001786:	0952      	lsrs	r2, r2, #5
 8001788:	e7ec      	b.n	8001764 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	fab2 f282 	clz	r2, r2
 8001798:	0952      	lsrs	r2, r2, #5
 800179a:	e7e4      	b.n	8001766 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	240003f4 	.word	0x240003f4
 80017a4:	58022400 	.word	0x58022400
 80017a8:	58021400 	.word	0x58021400

080017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 80017ac:	2803      	cmp	r0, #3
 80017ae:	d825      	bhi.n	80017fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 80017b0:	e8df f000 	tbb	[pc, r0]
 80017b4:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ba:	2108      	movs	r1, #8
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	3a00      	subs	r2, #0
 80017c0:	bf18      	it	ne
 80017c2:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017c6:	f00b bf09 	b.w	800d5dc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	3a00      	subs	r2, #0
 80017d4:	bf18      	it	ne
 80017d6:	2201      	movne	r2, #1
 80017d8:	e7f4      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e0:	689a      	ldr	r2, [r3, #8]
 80017e2:	3a00      	subs	r2, #0
 80017e4:	bf18      	it	ne
 80017e6:	2201      	movne	r2, #1
 80017e8:	e7ec      	b.n	80017c4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	3a00      	subs	r2, #0
 80017f6:	bf18      	it	ne
 80017f8:	2201      	movne	r2, #1
 80017fa:	e7e4      	b.n	80017c6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	240003f4 	.word	0x240003f4
 8001804:	58022400 	.word	0x58022400
 8001808:	58021400 	.word	0x58021400

0800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800180c:	2803      	cmp	r0, #3
 800180e:	d811      	bhi.n	8001834 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001810:	e8df f000 	tbb	[pc, r0]
 8001814:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001818:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800181c:	f00b bee3 	b.w	800d5e6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001824:	e7f9      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800182a:	e7f6      	b.n	800181a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800182c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001832:	e7f3      	b.n	800181c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	58022400 	.word	0x58022400
 800183c:	58021400 	.word	0x58021400

08001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001840:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001842:	2803      	cmp	r0, #3
 8001844:	d815      	bhi.n	8001872 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001846:	e8df f000 	tbb	[pc, r0]
 800184a:	0a02      	.short	0x0a02
 800184c:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800184e:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001850:	4809      	ldr	r0, [pc, #36]	; (8001878 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001852:	f00b febd 	bl	800d5d0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001856:	1e43      	subs	r3, r0, #1
 8001858:	4258      	negs	r0, r3
 800185a:	4158      	adcs	r0, r3
 800185c:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800185e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001862:	e7f5      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001868:	e7f2      	b.n	8001850 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800186a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800186e:	4803      	ldr	r0, [pc, #12]	; (800187c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001870:	e7ef      	b.n	8001852 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001872:	2000      	movs	r0, #0
 8001874:	e7ef      	b.n	8001856 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001876:	bf00      	nop
 8001878:	58022400 	.word	0x58022400
 800187c:	58021400 	.word	0x58021400

08001880 <_ZN8touchgfx4GPIO4initEv>:
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	4d08      	ldr	r5, [pc, #32]	; (80018a4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001884:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001886:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001888:	b2e0      	uxtb	r0, r4
 800188a:	f7ff ffd9 	bl	8001840 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 800188e:	b118      	cbz	r0, 8001898 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001894:	bf18      	it	ne
 8001896:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001898:	3401      	adds	r4, #1
 800189a:	3504      	adds	r5, #4
 800189c:	2c05      	cmp	r4, #5
 800189e:	d1f3      	bne.n	8001888 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80018a0:	bd70      	pop	{r4, r5, r6, pc}
 80018a2:	bf00      	nop
 80018a4:	240003f4 	.word	0x240003f4

080018a8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80018a8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80018aa:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 80018ae:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 80018b2:	4770      	bx	lr

080018b4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80018b8:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80018ba:	3900      	subs	r1, #0
 80018bc:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80018be:	bf18      	it	ne
 80018c0:	2101      	movne	r1, #1
 80018c2:	7019      	strb	r1, [r3, #0]
    }
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2401005f 	.word	0x2401005f

080018cc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 80018cc:	2000      	movs	r0, #0
 80018ce:	4770      	bx	lr

080018d0 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 80018d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80018d2:	b10b      	cbz	r3, 80018d8 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 80018d4:	4608      	mov	r0, r1
 80018d6:	4718      	bx	r3
        }
    }
 80018d8:	4770      	bx	lr

080018da <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80018da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018de:	4770      	bx	lr

080018e0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80018e0:	6840      	ldr	r0, [r0, #4]
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	4718      	bx	r3

080018e8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	24000404 	.word	0x24000404

080018f4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80018f4:	4770      	bx	lr

080018f6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80018f6:	f000 be75 	b.w	80025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

080018fa <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 80018fa:	f000 be53 	b.w	80025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

080018fe <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 80018fe:	f000 beb1 	b.w	8002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001902 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001902:	f000 bea3 	b.w	800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001906 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001906:	f000 be55 	b.w	80025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800190a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800190a:	b510      	push	{r4, lr}
 800190c:	4604      	mov	r4, r0
        swapFrameBuffers();
 800190e:	f011 fed3 	bl	80136b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	4620      	mov	r0, r4
 8001916:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 800191a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 800191e:	4718      	bx	r3

08001920 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001920:	f011 b930 	b.w	8012b84 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001924 <_ZN11TouchGFXHALD0Ev>:
 8001924:	b510      	push	{r4, lr}
 8001926:	4604      	mov	r4, r0
 8001928:	217c      	movs	r1, #124	; 0x7c
 800192a:	f022 fe98 	bl	802465e <_ZdlPvj>
 800192e:	4620      	mov	r0, r4
 8001930:	bd10      	pop	{r4, pc}
	...

08001934 <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 8001934:	4b02      	ldr	r3, [pc, #8]	; (8001940 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800193a:	f011 b95f 	b.w	8012bfc <_ZN8touchgfx3HAL10beginFrameEv>
 800193e:	bf00      	nop
 8001940:	2400000c 	.word	0x2400000c

08001944 <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
    HAL::endFrame();
 8001948:	f011 f964 	bl	8012c14 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 800194c:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8001950:	b113      	cbz	r3, 8001958 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001952:	4b02      	ldr	r3, [pc, #8]	; (800195c <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001954:	2201      	movs	r2, #1
 8001956:	701a      	strb	r2, [r3, #0]
    }
}
 8001958:	bd10      	pop	{r4, pc}
 800195a:	bf00      	nop
 800195c:	2400000c 	.word	0x2400000c

08001960 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001960:	b538      	push	{r3, r4, r5, lr}
 8001962:	4604      	mov	r4, r0
    GPIO::init();
 8001964:	f7ff ff8c 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 8001968:	4d07      	ldr	r5, [pc, #28]	; (8001988 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fe23 	bl	80025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001970:	2300      	movs	r3, #0
    mcuInstr.init();
 8001972:	4628      	mov	r0, r5
 8001974:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001978:	f7ff fe44 	bl	8001604 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800197c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800197e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001980:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 8001984:	bd38      	pop	{r3, r4, r5, pc}
 8001986:	bf00      	nop
 8001988:	2400040c 	.word	0x2400040c

0800198c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800198c:	6803      	ldr	r3, [r0, #0]
{
 800198e:	4604      	mov	r4, r0
 8001990:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001996:	4798      	blx	r3
    enableInterrupts();
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	4620      	mov	r0, r4
 800199c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800199e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 80019a0:	f000 faa6 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	4620      	mov	r0, r4
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 80019ac:	2100      	movs	r1, #0
 80019ae:	2329      	movs	r3, #41	; 0x29
 80019b0:	2215      	movs	r2, #21
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80019b4:	9100      	str	r1, [sp, #0]
 80019b6:	f00b fb76 	bl	800d0a6 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80019ba:	f000 fa99 	bl	8001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	4620      	mov	r0, r4
 80019c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c4:	4798      	blx	r3
    for (;;)
 80019c6:	e7f8      	b.n	80019ba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80019c8:	240001f8 	.word	0x240001f8

080019cc <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 80019cc:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 80019d0:	b11b      	cbz	r3, 80019da <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 80019d2:	6840      	ldr	r0, [r0, #4]
 80019d4:	6803      	ldr	r3, [r0, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4718      	bx	r3
    }
 80019da:	4618      	mov	r0, r3
 80019dc:	4770      	bx	lr
	...

080019e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80019e0:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80019e6:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80019e8:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 80019ec:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80019ee:	428c      	cmp	r4, r1
 80019f0:	d009      	beq.n	8001a06 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80019f2:	b93a      	cbnz	r2, 8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f4:	490a      	ldr	r1, [pc, #40]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019f8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019fa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80019fc:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80019fe:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a00:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001a02:	701a      	strb	r2, [r3, #0]
        }
    }
 8001a04:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	d0fc      	beq.n	8001a04 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0a:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a0e:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001a10:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001a12:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001a14:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001a16:	2200      	movs	r2, #0
 8001a18:	e7f3      	b.n	8001a02 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001a1a:	bf00      	nop
 8001a1c:	24010058 	.word	0x24010058
 8001a20:	24010056 	.word	0x24010056
 8001a24:	24010054 	.word	0x24010054

08001a28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a28:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	d803      	bhi.n	8001a3a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d905      	bls.n	8001a46 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a3c:	219e      	movs	r1, #158	; 0x9e
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a42:	f022 ff19 	bl	8024878 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a48:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a4c:	801a      	strh	r2, [r3, #0]
    }
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	24010054 	.word	0x24010054
 8001a54:	24010056 	.word	0x24010056
 8001a58:	08025bb0 	.word	0x08025bb0
 8001a5c:	08025c13 	.word	0x08025c13
 8001a60:	08025c56 	.word	0x08025c56
 8001a64:	2401005a 	.word	0x2401005a
 8001a68:	2401005c 	.word	0x2401005c

08001a6c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001a6c:	b570      	push	{r4, r5, r6, lr}
 8001a6e:	460d      	mov	r5, r1
 8001a70:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001a74:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001a76:	b935      	cbnz	r5, 8001a86 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001a7a:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001a82:	f022 fef9 	bl	8024878 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001a86:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001a8a:	3a00      	subs	r2, #0
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001a8e:	bf18      	it	ne
 8001a90:	2201      	movne	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001a94:	6803      	ldr	r3, [r0, #0]
}
 8001a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9e:	4718      	bx	r3
 8001aa0:	24000404 	.word	0x24000404
 8001aa4:	08025ca9 	.word	0x08025ca9
 8001aa8:	08025ce1 	.word	0x08025ce1
 8001aac:	08025c56 	.word	0x08025c56
 8001ab0:	2401005e 	.word	0x2401005e

08001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001ab4:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001ab8:	60c3      	str	r3, [r0, #12]
 8001aba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001ac6:	8503      	strh	r3, [r0, #40]	; 0x28
 8001ac8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001acc:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001ace:	8603      	strh	r3, [r0, #48]	; 0x30
 8001ad0:	6603      	str	r3, [r0, #96]	; 0x60
 8001ad2:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001ad6:	6703      	str	r3, [r0, #112]	; 0x70
 8001ad8:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001adc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae0:	6742      	str	r2, [r0, #116]	; 0x74
 8001ae2:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001aea:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001aee:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001af2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001af6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001afa:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001afe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001b02:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001b06:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001b0a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b0e:	42b5      	cmp	r5, r6
        instance = this;
 8001b10:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001b12:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001b16:	8015      	strh	r5, [r2, #0]
 8001b18:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001b1a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b1c:	bf28      	it	cs
 8001b1e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b22:	bf38      	it	cc
 8001b24:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b26:	8016      	strh	r6, [r2, #0]
 8001b28:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001b2a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001b2e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001b30:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001b32:	7013      	strb	r3, [r2, #0]
                           height)
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001b36:	6003      	str	r3, [r0, #0]
}
 8001b38:	bd70      	pop	{r4, r5, r6, pc}
 8001b3a:	bf00      	nop
 8001b3c:	01000001 	.word	0x01000001
 8001b40:	24010060 	.word	0x24010060
 8001b44:	24010054 	.word	0x24010054
 8001b48:	2401005a 	.word	0x2401005a
 8001b4c:	24010056 	.word	0x24010056
 8001b50:	2401005c 	.word	0x2401005c
 8001b54:	24010058 	.word	0x24010058
 8001b58:	08025d38 	.word	0x08025d38

08001b5c <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001b5c:	2b01      	cmp	r3, #1
    {
 8001b5e:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001b60:	d80e      	bhi.n	8001b80 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
 8001b64:	2215      	movs	r2, #21
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b6e:	f00b fa9a 	bl	800d0a6 <HAL_DSI_ShortWrite>
 8001b72:	b118      	cbz	r0, 8001b7c <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001b74:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e7fb      	b.n	8001b78 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001b80:	e9cd 1200 	strd	r1, r2, [sp]
 8001b84:	4601      	mov	r1, r0
 8001b86:	2239      	movs	r2, #57	; 0x39
 8001b88:	4801      	ldr	r0, [pc, #4]	; (8001b90 <DSI_IO_Write+0x34>)
 8001b8a:	f00b fa9d 	bl	800d0c8 <HAL_DSI_LongWrite>
 8001b8e:	e7f0      	b.n	8001b72 <DSI_IO_Write+0x16>
 8001b90:	240001f8 	.word	0x240001f8

08001b94 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001b96:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	9100      	str	r1, [sp, #0]
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <DSI_IO_Read+0x24>)
 8001ba2:	f00b faf2 	bl	800d18a <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001ba6:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001ba8:	bf14      	ite	ne
 8001baa:	f06f 0007 	mvnne.w	r0, #7
 8001bae:	2000      	moveq	r0, #0
 8001bb0:	b005      	add	sp, #20
 8001bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb6:	bf00      	nop
 8001bb8:	240001f8 	.word	0x240001f8

08001bbc <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc0:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001bc2:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001bc4:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bc6:	aa03      	add	r2, sp, #12
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001bcc:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001bd4:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001bd8:	9200      	str	r2, [sp, #0]
 8001bda:	2239      	movs	r2, #57	; 0x39
 8001bdc:	f00b fa74 	bl	800d0c8 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2335      	movs	r3, #53	; 0x35
 8001be4:	462a      	mov	r2, r5
 8001be6:	4620      	mov	r0, r4
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	f00b fa5c 	bl	800d0a6 <HAL_DSI_ShortWrite>
    }
 8001bee:	b005      	add	sp, #20
 8001bf0:	bd30      	pop	{r4, r5, pc}
 8001bf2:	bf00      	nop
 8001bf4:	240001f8 	.word	0x240001f8

08001bf8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001bf8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001bfa:	f7ff ffdf 	bl	8001bbc <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001c0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001c1a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001c1e:	f042 0202 	orr.w	r2, r2, #2
 8001c22:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001c26:	2203      	movs	r2, #3
 8001c28:	4b02      	ldr	r3, [pc, #8]	; (8001c34 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c2c:	bd08      	pop	{r3, pc}
 8001c2e:	bf00      	nop
 8001c30:	240001f8 	.word	0x240001f8
 8001c34:	50001000 	.word	0x50001000

08001c38 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <LCD_ReqEnable+0x20>)
    {
 8001c3a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001c3c:	7819      	ldrb	r1, [r3, #0]
 8001c3e:	b939      	cbnz	r1, 8001c50 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001c40:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001c44:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001c46:	2329      	movs	r3, #41	; 0x29
 8001c48:	2215      	movs	r2, #21
 8001c4a:	9100      	str	r1, [sp, #0]
 8001c4c:	f00b fa2b 	bl	800d0a6 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001c50:	b003      	add	sp, #12
 8001c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c56:	bf00      	nop
 8001c58:	2400041c 	.word	0x2400041c
 8001c5c:	240001f8 	.word	0x240001f8

08001c60 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001c62:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	232a      	movs	r3, #42	; 0x2a
 8001c68:	2239      	movs	r2, #57	; 0x39
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2304      	movs	r3, #4
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <LCD_SetUpdateRegionLeft+0x20>)
 8001c72:	f00b fa29 	bl	800d0c8 <HAL_DSI_LongWrite>
    }
 8001c76:	b003      	add	sp, #12
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7c:	24000004 	.word	0x24000004
 8001c80:	240001f8 	.word	0x240001f8

08001c84 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001c86:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	232a      	movs	r3, #42	; 0x2a
 8001c8c:	2239      	movs	r2, #57	; 0x39
 8001c8e:	2100      	movs	r1, #0
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2304      	movs	r3, #4
 8001c94:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <LCD_SetUpdateRegionRight+0x20>)
 8001c96:	f00b fa17 	bl	800d0c8 <HAL_DSI_LongWrite>
    }
 8001c9a:	b003      	add	sp, #12
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ca0:	24000008 	.word	0x24000008
 8001ca4:	240001f8 	.word	0x240001f8

08001ca8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001ca8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001caa:	4d14      	ldr	r5, [pc, #80]	; (8001cfc <HAL_DSI_TearingEffectCallback+0x54>)
 8001cac:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fd4c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001cb4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001cb6:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001cc0:	f000 f90a 	bl	8001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001cc6:	682a      	ldr	r2, [r5, #0]
 8001cc8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001cd0:	b173      	cbz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
 8001cd2:	4d0c      	ldr	r5, [pc, #48]	; (8001d04 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001cd4:	782b      	ldrb	r3, [r5, #0]
 8001cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cda:	b94b      	cbnz	r3, 8001cf0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_DSI_TearingEffectCallback+0x60>)
 8001cde:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001ce0:	f7ff ffbe 	bl	8001c60 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f00b f9ce 	bl	800d086 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001cea:	2301      	movs	r3, #1
 8001cec:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf0:	2000      	movs	r0, #0
    }
 8001cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001cf6:	f7ff bd59 	b.w	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001cfa:	bf00      	nop
 8001cfc:	24010060 	.word	0x24010060
 8001d00:	2400000c 	.word	0x2400000c
 8001d04:	2400041d 	.word	0x2400041d
 8001d08:	24000408 	.word	0x24000408

08001d0c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001d10:	4e3f      	ldr	r6, [pc, #252]	; (8001e10 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001d12:	b085      	sub	sp, #20
 8001d14:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001d16:	7833      	ldrb	r3, [r6, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d076      	beq.n	8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001d1c:	4d3d      	ldr	r5, [pc, #244]	; (8001e14 <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001d1e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001e24 <HAL_DSI_EndOfRefreshCallback+0x118>
 8001d22:	f8d5 9000 	ldr.w	r9, [r5]
 8001d26:	4f3c      	ldr	r7, [pc, #240]	; (8001e18 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001d28:	f1b9 0f00 	cmp.w	r9, #0
 8001d2c:	d139      	bne.n	8001da2 <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f00a fc80 	bl	800c634 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	f8cd 9000 	str.w	r9, [sp]
 8001d3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d3e:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d42:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d46:	6838      	ldr	r0, [r7, #0]
 8001d48:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d4c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d50:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d54:	f002 0208 	and.w	r2, r2, #8
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001d5c:	4a2f      	ldr	r2, [pc, #188]	; (8001e1c <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001d5e:	8812      	ldrh	r2, [r2, #0]
 8001d60:	0852      	lsrs	r2, r2, #1
 8001d62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d66:	4402      	add	r2, r0
 8001d68:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d6a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d72:	f8cd 9004 	str.w	r9, [sp, #4]
 8001d76:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001d8e:	f7ff ff79 	bl	8001c84 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001d92:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001d94:	4620      	mov	r0, r4
                updateRegion = 1;
 8001d96:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001d98:	b005      	add	sp, #20
 8001d9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001d9e:	f00b b972 	b.w	800d086 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001da6:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001da8:	9502      	str	r5, [sp, #8]
 8001daa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001db6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8001dc6:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dca:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001dcc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001dce:	f041 0101 	orr.w	r1, r1, #1
 8001dd2:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001dd4:	9503      	str	r5, [sp, #12]
 8001dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001de2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001de6:	f003 0308 	and.w	r3, r3, #8
 8001dea:	9303      	str	r3, [sp, #12]
 8001dec:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001dee:	f7ff fcdd 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001df2:	f7ff ff21 	bl	8001c38 <LCD_ReqEnable>
        return instance;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001df8:	7035      	strb	r5, [r6, #0]
 8001dfa:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001dfc:	b128      	cbz	r0, 8001e0a <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
    }
 8001e02:	b005      	add	sp, #20
 8001e04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e08:	4718      	bx	r3
 8001e0a:	b005      	add	sp, #20
 8001e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e10:	2400041d 	.word	0x2400041d
 8001e14:	24000408 	.word	0x24000408
 8001e18:	24000404 	.word	0x24000404
 8001e1c:	2401005a 	.word	0x2401005a
 8001e20:	24010060 	.word	0x24010060
 8001e24:	24000214 	.word	0x24000214

08001e28 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001e28:	4601      	mov	r1, r0
 8001e2a:	b508      	push	{r3, lr}
        return instance;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <IdleTaskHook+0x14>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001e30:	b101      	cbz	r1, 8001e34 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001e32:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001e34:	f011 fc5a 	bl	80136ec <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001e38:	2001      	movs	r0, #1
 8001e3a:	bd08      	pop	{r3, pc}
 8001e3c:	24010060 	.word	0x24010060

08001e40 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	4a02      	ldr	r2, [pc, #8]	; (8001e54 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001e4a:	601a      	str	r2, [r3, #0]

}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2400040c 	.word	0x2400040c
 8001e54:	08025aec 	.word	0x08025aec

08001e58 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2200      	movs	r2, #0
{
 8001e5c:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001e5e:	4608      	mov	r0, r1
 8001e60:	f00e fb63 	bl	801052a <osSemaphoreNew>
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001e66:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001e68:	b928      	cbnz	r0, 8001e76 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001e6c:	2128      	movs	r1, #40	; 0x28
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e70:	480a      	ldr	r0, [pc, #40]	; (8001e9c <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001e72:	f022 fd01 	bl	8024878 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f00e fbf2 	bl	8010664 <osMessageQueueNew>
 8001e80:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001e82:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001e84:	b918      	cbnz	r0, 8001e8e <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001e88:	212c      	movs	r1, #44	; 0x2c
 8001e8a:	4a03      	ldr	r2, [pc, #12]	; (8001e98 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001e8c:	e7f0      	b.n	8001e70 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001e8e:	bd08      	pop	{r3, pc}
 8001e90:	24000424 	.word	0x24000424
 8001e94:	08025e08 	.word	0x08025e08
 8001e98:	08025e51 	.word	0x08025e51
 8001e9c:	08025e80 	.word	0x08025e80
 8001ea0:	24000420 	.word	0x24000420
 8001ea4:	08025ecf 	.word	0x08025ecf

08001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f00e bb85 	b.w	80105be <osSemaphoreAcquire>
 8001eb4:	24000424 	.word	0x24000424

08001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001eb8:	4b01      	ldr	r3, [pc, #4]	; (8001ec0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	f00e bbaa 	b.w	8010614 <osSemaphoreRelease>
 8001ec0:	24000424 	.word	0x24000424

08001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	f00e bb78 	b.w	80105be <osSemaphoreAcquire>
 8001ece:	bf00      	nop
 8001ed0:	24000424 	.word	0x24000424

08001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001ed4:	f7ff bff0 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001ed8 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4803      	ldr	r0, [pc, #12]	; (8001ee8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6800      	ldr	r0, [r0, #0]
 8001ee2:	f00e bbfa 	b.w	80106da <osMessageQueuePut>
 8001ee6:	bf00      	nop
 8001ee8:	24000420 	.word	0x24000420
 8001eec:	24000010 	.word	0x24000010

08001ef0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001ef0:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4c07      	ldr	r4, [pc, #28]	; (8001f14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001ef6:	a901      	add	r1, sp, #4
 8001ef8:	461a      	mov	r2, r3
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f00e fc1d 	bl	801073a <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	2200      	movs	r2, #0
 8001f06:	a901      	add	r1, sp, #4
 8001f08:	6820      	ldr	r0, [r4, #0]
 8001f0a:	f00e fc16 	bl	801073a <osMessageQueueGet>
}
 8001f0e:	b002      	add	sp, #8
 8001f10:	bd10      	pop	{r4, pc}
 8001f12:	bf00      	nop
 8001f14:	24000420 	.word	0x24000420

08001f18 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	4718      	bx	r3

08001f1e <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001f1e:	2001      	movs	r0, #1
 8001f20:	4770      	bx	lr

08001f22 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001f22:	6803      	ldr	r3, [r0, #0]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4718      	bx	r3

08001f28 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001f28:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001f2c:	4770      	bx	lr
	...

08001f30 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <_ZN8STM32DMAD1Ev+0x1c>)
 8001f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f42:	f3bf 8f6f 	isb	sy
}
 8001f46:	4770      	bx	lr
 8001f48:	08026070 	.word	0x08026070
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
}
 8001f54:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001f58:	f7ff ffea 	bl	8001f30 <_ZN8STM32DMAD1Ev>
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f022 fb7e 	bl	802465e <_ZdlPvj>
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f68:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001f6a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f6c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f70:	f042 0210 	orr.w	r2, r2, #16
 8001f74:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001f78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001f7c:	f002 0210 	and.w	r2, r2, #16
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001f84:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f86:	f042 0210 	orr.w	r2, r2, #16
 8001f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001f8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <_ZN8STM32DMA10initializeEv+0x44>)
 8001f96:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f98:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001f9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa0:	609a      	str	r2, [r3, #8]
}
 8001fa2:	b002      	add	sp, #8
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	24000190 	.word	0x24000190
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <DMA2D_XferCpltCallback>:
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <DMA2D_XferCpltCallback+0xc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4718      	bx	r3
 8001fc4:	24010060 	.word	0x24010060

08001fc8 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN8STM32DMAC1Ev+0x30>)
 8001fce:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001fd0:	2600      	movs	r6, #0
 8001fd2:	4625      	mov	r5, r4
 8001fd4:	2260      	movs	r2, #96	; 0x60
 8001fd6:	6060      	str	r0, [r4, #4]
 8001fd8:	7226      	strb	r6, [r4, #8]
 8001fda:	7266      	strb	r6, [r4, #9]
 8001fdc:	f845 3b20 	str.w	r3, [r5], #32
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	f011 fcd7 	bl	8013994 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001fe6:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001fea:	60ee      	str	r6, [r5, #12]
 8001fec:	3524      	adds	r5, #36	; 0x24
 8001fee:	42ab      	cmp	r3, r5
 8001ff0:	d1fb      	bne.n	8001fea <_ZN8STM32DMAC1Ev+0x22>
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	bf00      	nop
 8001ff8:	08026070 	.word	0x08026070

08001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001ffc:	b508      	push	{r3, lr}
    switch (format)
 8001ffe:	290b      	cmp	r1, #11
 8002000:	d80b      	bhi.n	800201a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8002002:	e8df f001 	tbb	[pc, r1]
 8002006:	0612      	.short	0x0612
 8002008:	0a0a0a10 	.word	0x0a0a0a10
 800200c:	0808080a 	.word	0x0808080a
 8002010:	0808      	.short	0x0808
 8002012:	2001      	movs	r0, #1
}
 8002014:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002016:	2005      	movs	r0, #5
        break;
 8002018:	e7fc      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800201c:	2166      	movs	r1, #102	; 0x66
 800201e:	4a05      	ldr	r2, [pc, #20]	; (8002034 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8002022:	f022 fc29 	bl	8024878 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002026:	2000      	movs	r0, #0
 8002028:	e7f4      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800202a:	2002      	movs	r0, #2
    return dma2dColorMode;
 800202c:	e7f2      	b.n	8002014 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800202e:	bf00      	nop
 8002030:	08025f11 	.word	0x08025f11
 8002034:	08025f2c 	.word	0x08025f2c
 8002038:	08025f76 	.word	0x08025f76

0800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 800203c:	b508      	push	{r3, lr}
    switch (format)
 800203e:	290a      	cmp	r1, #10
 8002040:	d809      	bhi.n	8002056 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8002042:	e8df f001 	tbb	[pc, r1]
 8002046:	0610      	.short	0x0610
 8002048:	0808080e 	.word	0x0808080e
 800204c:	06060608 	.word	0x06060608
 8002050:	06          	.byte	0x06
 8002051:	00          	.byte	0x00
 8002052:	2001      	movs	r0, #1
}
 8002054:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002056:	4b05      	ldr	r3, [pc, #20]	; (800206c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8002058:	2187      	movs	r1, #135	; 0x87
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 800205e:	f022 fc0b 	bl	8024878 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002062:	2000      	movs	r0, #0
 8002064:	e7f6      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002066:	2002      	movs	r0, #2
    return dma2dColorMode;
 8002068:	e7f4      	b.n	8002054 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 800206a:	bf00      	nop
 800206c:	08025f11 	.word	0x08025f11
 8002070:	08025fc3 	.word	0x08025fc3
 8002074:	08025f76 	.word	0x08025f76

08002078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800207c:	7f4f      	ldrb	r7, [r1, #29]
{
 800207e:	460c      	mov	r4, r1
 8002080:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002082:	4639      	mov	r1, r7
 8002084:	f7ff ffba 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002088:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800208c:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800208e:	4648      	mov	r0, r9
 8002090:	4641      	mov	r1, r8
 8002092:	f7ff ffb3 	bl	8001ffc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002096:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002098:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800209a:	4648      	mov	r0, r9
 800209c:	f7ff ffce 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020a0:	8aa1      	ldrh	r1, [r4, #20]
 80020a2:	8b62      	ldrh	r2, [r4, #26]
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020a6:	1a52      	subs	r2, r2, r1
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80020aa:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80020ac:	8b22      	ldrh	r2, [r4, #24]
 80020ae:	1a52      	subs	r2, r2, r1
 80020b0:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80020b4:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020ba:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020be:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80020c0:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80020c2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80020c4:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020c6:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 80020ca:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020cc:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 80020d0:	d026      	beq.n	8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80020d2:	d810      	bhi.n	80020f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 80020d4:	2920      	cmp	r1, #32
 80020d6:	ea45 0402 	orr.w	r4, r5, r2
 80020da:	d062      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020dc:	2940      	cmp	r1, #64	; 0x40
 80020de:	d060      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 80020e0:	2904      	cmp	r1, #4
 80020e2:	d05e      	beq.n	80021a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020e4:	432a      	orrs	r2, r5
 80020e6:	4b32      	ldr	r3, [pc, #200]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020e8:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80020ea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020ee:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80020f0:	d05b      	beq.n	80021aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 80020f4:	e040      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80020f6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80020fa:	d007      	beq.n	800210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 80020fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002100:	d1f0      	bne.n	80020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002102:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002106:	f042 0209 	orr.w	r2, r2, #9
 800210a:	e003      	b.n	8002114 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002110:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002114:	61da      	str	r2, [r3, #28]
        return color;
 8002116:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002118:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800211a:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800211c:	6158      	str	r0, [r3, #20]
 800211e:	e02a      	b.n	8002176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002120:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002122:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002124:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002128:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800212a:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800212c:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800212e:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002132:	7822      	ldrb	r2, [r4, #0]
 8002134:	b142      	cbz	r2, 8002148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002136:	2a01      	cmp	r2, #1
 8002138:	d021      	beq.n	800217e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800213a:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 800213c:	f240 1101 	movw	r1, #257	; 0x101
 8002140:	4a1e      	ldr	r2, [pc, #120]	; (80021bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002142:	481f      	ldr	r0, [pc, #124]	; (80021c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002144:	f022 fb98 	bl	8024878 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002148:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 800214a:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800214c:	8861      	ldrh	r1, [r4, #2]
 800214e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002152:	3901      	subs	r1, #1
 8002154:	f022 0210 	bic.w	r2, r2, #16
 8002158:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800215c:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8002160:	69da      	ldr	r2, [r3, #28]
 8002162:	f042 0220 	orr.w	r2, r2, #32
 8002166:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	0692      	lsls	r2, r2, #26
 800216c:	d4fc      	bmi.n	8002168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
            if(blend)
 8002172:	2800      	cmp	r0, #0
 8002174:	d0bd      	beq.n	80020f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002178:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 800217a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800217e:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8002180:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002184:	69d9      	ldr	r1, [r3, #28]
 8002186:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 800218a:	bf18      	it	ne
 800218c:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800218e:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8002192:	f022 0210 	bic.w	r2, r2, #16
 8002196:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800219a:	f042 0210 	orr.w	r2, r2, #16
 800219e:	61da      	str	r2, [r3, #28]
                break;
 80021a0:	e7dd      	b.n	800215e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80021a2:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80021a6:	61dc      	str	r4, [r3, #28]
 80021a8:	e7b7      	b.n	800211a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80021aa:	f240 2201 	movw	r2, #513	; 0x201
 80021ae:	e7e3      	b.n	8002178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80021b0:	52001000 	.word	0x52001000
 80021b4:	00010201 	.word	0x00010201
 80021b8:	0802600e 	.word	0x0802600e
 80021bc:	08026028 	.word	0x08026028
 80021c0:	08025f76 	.word	0x08025f76
 80021c4:	00020201 	.word	0x00020201

080021c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80021c8:	b570      	push	{r4, r5, r6, lr}
 80021ca:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80021cc:	7f89      	ldrb	r1, [r1, #30]
 80021ce:	f7ff ff35 	bl	800203c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021d4:	8aa5      	ldrh	r5, [r4, #20]
 80021d6:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021d8:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80021de:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e0:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80021e2:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80021e4:	6921      	ldr	r1, [r4, #16]
 80021e6:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80021ea:	6826      	ldr	r6, [r4, #0]
 80021ec:	68e5      	ldr	r5, [r4, #12]
 80021ee:	2e08      	cmp	r6, #8
 80021f0:	d10d      	bne.n	800220e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f2:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80021f4:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80021f6:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80021f8:	4a09      	ldr	r2, [pc, #36]	; (8002220 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80021fa:	7f20      	ldrb	r0, [r4, #28]
 80021fc:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002200:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002204:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002206:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002208:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800220a:	601a      	str	r2, [r3, #0]
    }
}
 800220c:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800220e:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002210:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002212:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002214:	4a04      	ldr	r2, [pc, #16]	; (8002228 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002216:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002218:	e7f7      	b.n	800220a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800221a:	bf00      	nop
 800221c:	52001000 	.word	0x52001000
 8002220:	00010009 	.word	0x00010009
 8002224:	00020201 	.word	0x00020201
 8002228:	00030201 	.word	0x00030201

0800222c <_ZN8touchgfx5paint8tearDownEv>:
* @brief Waits until previous DMA drawing operation has finished
*/
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	07d2      	lsls	r2, r2, #31
 8002232:	d4fc      	bmi.n	800222e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002234:	2223      	movs	r2, #35	; 0x23
 8002236:	609a      	str	r2, [r3, #8]
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	52001000 	.word	0x52001000

08002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
*
* @brief Renders Canvas Widget chunks using DMA.
* This functions will not generate an interrupt, and will not affect the DMA queue.
*/
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002240:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002242:	4c10      	ldr	r4, [pc, #64]	; (8002284 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002244:	6825      	ldr	r5, [r4, #0]
 8002246:	07ed      	lsls	r5, r5, #31
 8002248:	d4fc      	bmi.n	8002244 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800224a:	2523      	movs	r5, #35	; 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800224c:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800224e:	2bff      	cmp	r3, #255	; 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002250:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002252:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002256:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800225a:	6365      	str	r5, [r4, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800225c:	6461      	str	r1, [r4, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800225e:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (alpha < 0xFF)
 8002260:	d00c      	beq.n	800227c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002262:	4909      	ldr	r1, [pc, #36]	; (8002288 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002264:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002268:	6265      	str	r5, [r4, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800226a:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800226e:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002272:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002274:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002276:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002278:	6023      	str	r3, [r4, #0]
    }
}
 800227a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800227c:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002280:	63a2      	str	r2, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002282:	e7f9      	b.n	8002278 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002284:	52001000 	.word	0x52001000
 8002288:	00010009 	.word	0x00010009
 800228c:	00020001 	.word	0x00020001
 8002290:	00030001 	.word	0x00030001

08002294 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002294:	2001      	movs	r0, #1
 8002296:	4770      	bx	lr

08002298 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002298:	200c      	movs	r0, #12
 800229a:	4770      	bx	lr

0800229c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800229c:	230c      	movs	r3, #12
 800229e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022a2:	3008      	adds	r0, #8
 80022a4:	4770      	bx	lr

080022a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80022a6:	230c      	movs	r3, #12
 80022a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ac:	3008      	adds	r0, #8
 80022ae:	4770      	bx	lr

080022b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022b0:	2001      	movs	r0, #1
 80022b2:	4770      	bx	lr

080022b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022b4:	f245 10c4 	movw	r0, #20932	; 0x51c4
 80022b8:	4770      	bx	lr

080022ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022ba:	f245 13c4 	movw	r3, #20932	; 0x51c4
 80022be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022c2:	3008      	adds	r0, #8
 80022c4:	4770      	bx	lr

080022c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022c6:	f245 13c4 	movw	r3, #20932	; 0x51c4
 80022ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80022ce:	3008      	adds	r0, #8
 80022d0:	4770      	bx	lr

080022d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80022d2:	2001      	movs	r0, #1
 80022d4:	4770      	bx	lr

080022d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80022d6:	2010      	movs	r0, #16
 80022d8:	4770      	bx	lr

080022da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022de:	3008      	adds	r0, #8
 80022e0:	4770      	bx	lr

080022e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80022e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80022e6:	3008      	adds	r0, #8
 80022e8:	4770      	bx	lr

080022ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80022ea:	4608      	mov	r0, r1
 80022ec:	f000 bb8a 	b.w	8002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80022f2:	b510      	push	{r4, lr}
 80022f4:	4604      	mov	r4, r0
 80022f6:	6003      	str	r3, [r0, #0]
 80022f8:	f010 f99d 	bl	8012636 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80022fc:	4620      	mov	r0, r4
 80022fe:	bd10      	pop	{r4, pc}
 8002300:	08026128 	.word	0x08026128

08002304 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
 8002308:	f7ff fff2 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800230c:	2114      	movs	r1, #20
 800230e:	4620      	mov	r0, r4
 8002310:	f022 f9a5 	bl	802465e <_ZdlPvj>
 8002314:	4620      	mov	r0, r4
 8002316:	bd10      	pop	{r4, pc}

08002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	6003      	str	r3, [r0, #0]
 8002320:	f010 f989 	bl	8012636 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002324:	4620      	mov	r0, r4
 8002326:	bd10      	pop	{r4, pc}
 8002328:	080260f4 	.word	0x080260f4

0800232c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800232c:	b510      	push	{r4, lr}
 800232e:	4604      	mov	r4, r0
 8002330:	f7ff fff2 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002334:	f245 11cc 	movw	r1, #20940	; 0x51cc
 8002338:	4620      	mov	r0, r4
 800233a:	f022 f990 	bl	802465e <_ZdlPvj>
 800233e:	4620      	mov	r0, r4
 8002340:	bd10      	pop	{r4, pc}
	...

08002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002346:	b510      	push	{r4, lr}
 8002348:	4604      	mov	r4, r0
 800234a:	6003      	str	r3, [r0, #0]
 800234c:	f010 f973 	bl	8012636 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002350:	4620      	mov	r0, r4
 8002352:	bd10      	pop	{r4, pc}
 8002354:	080260c0 	.word	0x080260c0

08002358 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002358:	b510      	push	{r4, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	f7ff fff2 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002360:	2118      	movs	r1, #24
 8002362:	4620      	mov	r0, r4
 8002364:	f022 f97b 	bl	802465e <_ZdlPvj>
 8002368:	4620      	mov	r0, r4
 800236a:	bd10      	pop	{r4, pc}

0800236c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <_ZN12FrontendHeapD1Ev+0x28>)
 800236e:	b510      	push	{r4, lr}
 8002370:	4604      	mov	r4, r0
 8002372:	6003      	str	r3, [r0, #0]
 8002374:	f500 40a3 	add.w	r0, r0, #20864	; 0x5180
 8002378:	3078      	adds	r0, #120	; 0x78
 800237a:	f7ff ffb9 	bl	80022f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800237e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002382:	f7ff ffc9 	bl	8002318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002386:	f104 0014 	add.w	r0, r4, #20
 800238a:	f7ff ffdb 	bl	8002344 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800238e:	4620      	mov	r0, r4
 8002390:	bd10      	pop	{r4, pc}
 8002392:	bf00      	nop
 8002394:	0802615c 	.word	0x0802615c

08002398 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002398:	b508      	push	{r3, lr}
 800239a:	4802      	ldr	r0, [pc, #8]	; (80023a4 <__tcf_0+0xc>)
 800239c:	f7ff ffe6 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023a0:	bd08      	pop	{r3, pc}
 80023a2:	bf00      	nop
 80023a4:	2400042c 	.word	0x2400042c

080023a8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4604      	mov	r4, r0
 80023ac:	f7ff ffde 	bl	800236c <_ZN12FrontendHeapD1Ev>
 80023b0:	f245 316c 	movw	r1, #21356	; 0x536c
 80023b4:	4620      	mov	r0, r4
 80023b6:	f022 f952 	bl	802465e <_ZdlPvj>
 80023ba:	4620      	mov	r0, r4
 80023bc:	bd10      	pop	{r4, pc}
	...

080023c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80023c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80023c4:	f000 f9aa 	bl	800271c <_ZN14BitmapDatabase11getInstanceEv>
 80023c8:	2400      	movs	r4, #0
 80023ca:	4605      	mov	r5, r0
 80023cc:	f000 f9aa 	bl	8002724 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80023d0:	4623      	mov	r3, r4
 80023d2:	4601      	mov	r1, r0
 80023d4:	4622      	mov	r2, r4
 80023d6:	4628      	mov	r0, r5
 80023d8:	9400      	str	r4, [sp, #0]
 80023da:	f019 fd2f 	bl	801be3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <touchgfx_init+0xb8>)
 80023e0:	4a26      	ldr	r2, [pc, #152]	; (800247c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80023e2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80023e4:	4d26      	ldr	r5, [pc, #152]	; (8002480 <touchgfx_init+0xc0>)
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f005 f84a 	bl	8007480 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80023ec:	4825      	ldr	r0, [pc, #148]	; (8002484 <touchgfx_init+0xc4>)
 80023ee:	f019 fbdd 	bl	801bbac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80023f2:	782b      	ldrb	r3, [r5, #0]
 80023f4:	f3bf 8f5b 	dmb	ish
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	d436      	bmi.n	800246a <touchgfx_init+0xaa>
 80023fc:	4628      	mov	r0, r5
 80023fe:	f022 f930 	bl	8024662 <__cxa_guard_acquire>
 8002402:	b390      	cbz	r0, 800246a <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002404:	4c20      	ldr	r4, [pc, #128]	; (8002488 <touchgfx_init+0xc8>)
 8002406:	4f21      	ldr	r7, [pc, #132]	; (800248c <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002408:	4b21      	ldr	r3, [pc, #132]	; (8002490 <touchgfx_init+0xd0>)
 800240a:	f104 0014 	add.w	r0, r4, #20
 800240e:	f107 0618 	add.w	r6, r7, #24
 8002412:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002416:	6023      	str	r3, [r4, #0]
 8002418:	6060      	str	r0, [r4, #4]
 800241a:	f8c4 8008 	str.w	r8, [r4, #8]
 800241e:	60e7      	str	r7, [r4, #12]
 8002420:	6126      	str	r6, [r4, #16]
 8002422:	f010 f909 	bl	8012638 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <touchgfx_init+0xd4>)
 8002428:	4640      	mov	r0, r8
 800242a:	6163      	str	r3, [r4, #20]
 800242c:	f010 f904 	bl	8012638 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <touchgfx_init+0xd8>)
 8002432:	4638      	mov	r0, r7
 8002434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002436:	f010 f8ff 	bl	8012638 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800243a:	f504 43a0 	add.w	r3, r4, #20480	; 0x5000
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <touchgfx_init+0xdc>)
 8002440:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 8002444:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 8002448:	f007 fe88 	bl	800a15c <_ZN5ModelC1Ev>
 800244c:	4622      	mov	r2, r4
 800244e:	f107 0114 	add.w	r1, r7, #20
 8002452:	4630      	mov	r0, r6
 8002454:	f007 fe78 	bl	800a148 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002458:	4630      	mov	r0, r6
 800245a:	f000 fad3 	bl	8002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800245e:	4810      	ldr	r0, [pc, #64]	; (80024a0 <touchgfx_init+0xe0>)
 8002460:	f022 fa28 	bl	80248b4 <atexit>
 8002464:	4628      	mov	r0, r5
 8002466:	f022 f908 	bl	802467a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800246a:	480e      	ldr	r0, [pc, #56]	; (80024a4 <touchgfx_init+0xe4>)
}
 800246c:	b002      	add	sp, #8
 800246e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002472:	f7ff ba75 	b.w	8001960 <_ZN11TouchGFXHAL10initializeEv>
 8002476:	bf00      	nop
 8002478:	240100c4 	.word	0x240100c4
 800247c:	240065b8 	.word	0x240065b8
 8002480:	24000428 	.word	0x24000428
 8002484:	24000014 	.word	0x24000014
 8002488:	2400042c 	.word	0x2400042c
 800248c:	24005624 	.word	0x24005624
 8002490:	0802615c 	.word	0x0802615c
 8002494:	080260c0 	.word	0x080260c0
 8002498:	080260f4 	.word	0x080260f4
 800249c:	08026128 	.word	0x08026128
 80024a0:	08002399 	.word	0x08002399
 80024a4:	2400653c 	.word	0x2400653c

080024a8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80024a8:	4770      	bx	lr
	...

080024ac <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80024ac:	4801      	ldr	r0, [pc, #4]	; (80024b4 <touchgfx_taskEntry+0x8>)
 80024ae:	f7ff ba6d 	b.w	800198c <_ZN11TouchGFXHAL9taskEntryEv>
 80024b2:	bf00      	nop
 80024b4:	2400653c 	.word	0x2400653c

080024b8 <_GLOBAL__sub_I_touchgfx_init>:
}
 80024b8:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80024ba:	490c      	ldr	r1, [pc, #48]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80024be:	4c0d      	ldr	r4, [pc, #52]	; (80024f4 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80024c0:	4608      	mov	r0, r1
 80024c2:	6023      	str	r3, [r4, #0]
 80024c4:	f7ff fd80 	bl	8001fc8 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024ca:	4610      	mov	r0, r2
 80024cc:	f01b fed0 	bl	801e270 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80024d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80024d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80024da:	4808      	ldr	r0, [pc, #32]	; (80024fc <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80024dc:	e9cd 3200 	strd	r3, r2, [sp]
 80024e0:	4623      	mov	r3, r4
 80024e2:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80024e4:	f7ff fae6 	bl	8001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80024e8:	b002      	add	sp, #8
 80024ea:	bd10      	pop	{r4, pc}
 80024ec:	2400579c 	.word	0x2400579c
 80024f0:	08025ba0 	.word	0x08025ba0
 80024f4:	24005798 	.word	0x24005798
 80024f8:	240065bc 	.word	0x240065bc
 80024fc:	2400653c 	.word	0x2400653c

08002500 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002500:	4801      	ldr	r0, [pc, #4]	; (8002508 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002502:	f7ff bd15 	b.w	8001f30 <_ZN8STM32DMAD1Ev>
 8002506:	bf00      	nop
 8002508:	2400579c 	.word	0x2400579c

0800250c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800250c:	2000      	movs	r0, #0
 800250e:	4770      	bx	lr

08002510 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002510:	8081      	strh	r1, [r0, #4]
    }
 8002512:	4770      	bx	lr

08002514 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002514:	80c1      	strh	r1, [r0, #6]
    }
 8002516:	4770      	bx	lr

08002518 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002518:	8101      	strh	r1, [r0, #8]
    }
 800251a:	4770      	bx	lr

0800251c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800251c:	8141      	strh	r1, [r0, #10]
    }
 800251e:	4770      	bx	lr

08002520 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002520:	4770      	bx	lr

08002522 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002522:	4770      	bx	lr

08002524 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002524:	4770      	bx	lr

08002526 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002526:	4770      	bx	lr

08002528 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002528:	4770      	bx	lr

0800252a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800252a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800252c:	88c4      	ldrh	r4, [r0, #6]
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	1b12      	subs	r2, r2, r4
 8002532:	8884      	ldrh	r4, [r0, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002536:	1b09      	subs	r1, r1, r4
 8002538:	b212      	sxth	r2, r2
    }
 800253a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800253e:	b209      	sxth	r1, r1
 8002540:	4718      	bx	r3

08002542 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800254e:	6813      	ldr	r3, [r2, #0]
 8002550:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002552:	6010      	str	r0, [r2, #0]
    }
 8002554:	4770      	bx	lr

08002556 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002556:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800255a:	b11a      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800255c:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002560:	b102      	cbz	r2, 8002564 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002562:	6018      	str	r0, [r3, #0]
        }
    }
 8002564:	4770      	bx	lr

08002566 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8002566:	2000      	movs	r0, #0
 8002568:	4770      	bx	lr

0800256a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800256a:	888b      	ldrh	r3, [r1, #4]
 800256c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800256e:	2001      	movs	r0, #1
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8002572:	4770      	bx	lr

08002574 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002574:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 8002578:	4770      	bx	lr

0800257a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800257a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800257e:	4770      	bx	lr

08002580 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002580:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8002582:	b510      	push	{r4, lr}
        return rect.width;
 8002584:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8002588:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800258c:	8002      	strh	r2, [r0, #0]
 800258e:	8042      	strh	r2, [r0, #2]
 8002590:	8084      	strh	r4, [r0, #4]
 8002592:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8002594:	bd10      	pop	{r4, pc}

08002596 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002596:	2200      	movs	r2, #0
 8002598:	8002      	strh	r2, [r0, #0]
 800259a:	8042      	strh	r2, [r0, #2]
 800259c:	8082      	strh	r2, [r0, #4]
 800259e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80025a0:	4770      	bx	lr
	...

080025a4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80025a6:	2290      	movs	r2, #144	; 0x90
 80025a8:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e100 	.word	0xe000e100

080025b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80025b4:	4770      	bx	lr

080025b6 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	4604      	mov	r4, r0
    HAL::initialize();
 80025ba:	f010 fb38 	bl	8012c2e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80025c2:	f016 faa5 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
 80025c6:	4601      	mov	r1, r0
 80025c8:	4620      	mov	r0, r4
 80025ca:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	4620      	mov	r0, r4
 80025d0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80025d4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80025d8:	2300      	movs	r3, #0
 80025da:	46ac      	mov	ip, r5
 80025dc:	461a      	mov	r2, r3
}
 80025de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 80025e2:	4760      	bx	ip

080025e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80025e4:	f010 bad4 	b.w	8012b90 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080025e8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80025e8:	f010 bc2f 	b.w	8012e4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80025ec:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80025f0:	b112      	cbz	r2, 80025f8 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80025f2:	6803      	ldr	r3, [r0, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4718      	bx	r3
    }
 80025f8:	4770      	bx	lr
	...

080025fc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80025fe:	6953      	ldr	r3, [r2, #20]
 8002600:	03db      	lsls	r3, r3, #15
{
 8002602:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002604:	d51e      	bpl.n	8002644 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002606:	2300      	movs	r3, #0
 8002608:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800260c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002610:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002614:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002618:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800261c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002620:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002622:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002626:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002628:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800262c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800262e:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002632:	d2f9      	bcs.n	8002628 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8002634:	3b20      	subs	r3, #32
 8002636:	f113 0f20 	cmn.w	r3, #32
 800263a:	d1f2      	bne.n	8002622 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800263c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002640:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
 8002646:	bf00      	nop
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 800264e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002656:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800265a:	f3bf 8f6f 	isb	sy
}
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100

08002664 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8002666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	e000e100 	.word	0xe000e100

08002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8002674:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8002676:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002678:	4e12      	ldr	r6, [pc, #72]	; (80026c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800267a:	4604      	mov	r4, r0
 800267c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8002680:	6003      	str	r3, [r0, #0]
 8002682:	6833      	ldr	r3, [r6, #0]
 8002684:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8002688:	b10a      	cbz	r2, 800268e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800268a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800268c:	b900      	cbnz	r0, 8002690 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 800268e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	4798      	blx	r3
 8002696:	1e43      	subs	r3, r0, #1
 8002698:	425d      	negs	r5, r3
 800269a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80026a0:	b130      	cbz	r0, 80026b0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4798      	blx	r3
 80026a8:	2801      	cmp	r0, #1
 80026aa:	bf08      	it	eq
 80026ac:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80026b0:	b92d      	cbnz	r5, 80026be <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80026b2:	4b06      	ldr	r3, [pc, #24]	; (80026cc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80026b4:	2127      	movs	r1, #39	; 0x27
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80026b8:	4806      	ldr	r0, [pc, #24]	; (80026d4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80026ba:	f022 f8dd 	bl	8024878 <__assert_func>
    }
 80026be:	4620      	mov	r0, r4
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	bf00      	nop
 80026c4:	24010060 	.word	0x24010060
 80026c8:	08026278 	.word	0x08026278
 80026cc:	08026168 	.word	0x08026168
 80026d0:	080261c6 	.word	0x080261c6
 80026d4:	080261ff 	.word	0x080261ff

080026d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;         // verdana_10_4bpp
    static const touchgfx::FontId TYPOGRAPHY_00 = 3; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80026d8:	4770      	bx	lr

080026da <_ZN23ApplicationFontProviderD0Ev>:
 80026da:	b510      	push	{r4, lr}
 80026dc:	4604      	mov	r4, r0
 80026de:	2104      	movs	r1, #4
 80026e0:	f021 ffbd 	bl	802465e <_ZdlPvj>
 80026e4:	4620      	mov	r0, r4
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80026e8:	b508      	push	{r3, lr}
    switch (typography)
 80026ea:	2903      	cmp	r1, #3
 80026ec:	d813      	bhi.n	8002716 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 80026ee:	e8df f001 	tbb	[pc, r1]
 80026f2:	0602      	.short	0x0602
 80026f4:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80026f6:	f004 ff0f 	bl	8007518 <_ZN17TypedTextDatabase8getFontsEv>
 80026fa:	6800      	ldr	r0, [r0, #0]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 80026fc:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80026fe:	f004 ff0b 	bl	8007518 <_ZN17TypedTextDatabase8getFontsEv>
 8002702:	6840      	ldr	r0, [r0, #4]
 8002704:	e7fa      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002706:	f004 ff07 	bl	8007518 <_ZN17TypedTextDatabase8getFontsEv>
 800270a:	6880      	ldr	r0, [r0, #8]
 800270c:	e7f6      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800270e:	f004 ff03 	bl	8007518 <_ZN17TypedTextDatabase8getFontsEv>
 8002712:	68c0      	ldr	r0, [r0, #12]
 8002714:	e7f2      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 8002716:	2000      	movs	r0, #0
 8002718:	e7f0      	b.n	80026fc <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

0800271c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 800271c:	4800      	ldr	r0, [pc, #0]	; (8002720 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 800271e:	4770      	bx	lr
 8002720:	080262a4 	.word	0x080262a4

08002724 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002724:	2001      	movs	r0, #1
 8002726:	4770      	bx	lr

08002728 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002728:	b513      	push	{r0, r1, r4, lr}
 800272a:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 800272c:	b151      	cbz	r1, 8002744 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800272e:	6803      	ldr	r3, [r0, #0]
 8002730:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002732:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002734:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002738:	689c      	ldr	r4, [r3, #8]
 800273a:	f10d 0303 	add.w	r3, sp, #3
 800273e:	47a0      	blx	r4
        return glyph;
    }
 8002740:	b002      	add	sp, #8
 8002742:	bd10      	pop	{r4, pc}
            return 0;
 8002744:	4608      	mov	r0, r1
 8002746:	e7fb      	b.n	8002740 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002748 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002748:	89c0      	ldrh	r0, [r0, #14]
 800274a:	4770      	bx	lr

0800274c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800274c:	8a00      	ldrh	r0, [r0, #16]
 800274e:	4770      	bx	lr

08002750 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8002750:	88c0      	ldrh	r0, [r0, #6]
 8002752:	4770      	bx	lr

08002754 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8002754:	8880      	ldrh	r0, [r0, #4]
 8002756:	4770      	bx	lr

08002758 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002758:	7a80      	ldrb	r0, [r0, #10]
    }
 800275a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800275e:	4770      	bx	lr

08002760 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8002760:	7a80      	ldrb	r0, [r0, #10]
    }
 8002762:	09c0      	lsrs	r0, r0, #7
 8002764:	4770      	bx	lr

08002766 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002766:	4770      	bx	lr

08002768 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002768:	b510      	push	{r4, lr}
 800276a:	4604      	mov	r4, r0
    }
 800276c:	2108      	movs	r1, #8
 800276e:	f021 ff76 	bl	802465e <_ZdlPvj>
 8002772:	4620      	mov	r0, r4
 8002774:	bd10      	pop	{r4, pc}

08002776 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002776:	4770      	bx	lr

08002778 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002778:	4770      	bx	lr

0800277a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800277a:	f500 7398 	add.w	r3, r0, #304	; 0x130
 800277e:	6808      	ldr	r0, [r1, #0]
 8002780:	6849      	ldr	r1, [r1, #4]
 8002782:	c303      	stmia	r3!, {r0, r1}
    }
 8002784:	4770      	bx	lr

08002786 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002786:	4770      	bx	lr

08002788 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002788:	4770      	bx	lr

0800278a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800278a:	6041      	str	r1, [r0, #4]
    }
 800278c:	4770      	bx	lr

0800278e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800278e:	4770      	bx	lr

08002790 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002792:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002796:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 800279a:	2300      	movs	r3, #0
 800279c:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80027a0:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 80027a4:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	08002851 	.word	0x08002851

080027b0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80027b0:	2301      	movs	r3, #1
 80027b2:	7203      	strb	r3, [r0, #8]
    }
 80027b4:	4770      	bx	lr

080027b6 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80027b6:	4770      	bx	lr

080027b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80027b8:	4770      	bx	lr

080027ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80027ba:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80027bc:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80027be:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80027c0:	68c2      	ldr	r2, [r0, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	1054      	asrs	r4, r2, #1
 80027c6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80027ca:	07d2      	lsls	r2, r2, #31
 80027cc:	bf48      	it	mi
 80027ce:	590a      	ldrmi	r2, [r1, r4]
    }
 80027d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80027d4:	bf48      	it	mi
 80027d6:	58d3      	ldrmi	r3, [r2, r3]
 80027d8:	4718      	bx	r3

080027da <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 80027da:	6843      	ldr	r3, [r0, #4]
 80027dc:	b12b      	cbz	r3, 80027ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80027de:	6883      	ldr	r3, [r0, #8]
 80027e0:	b92b      	cbnz	r3, 80027ee <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80027e2:	68c0      	ldr	r0, [r0, #12]
 80027e4:	f000 0001 	and.w	r0, r0, #1
 80027e8:	4770      	bx	lr
 80027ea:	4618      	mov	r0, r3
 80027ec:	4770      	bx	lr
 80027ee:	2001      	movs	r0, #1
    }
 80027f0:	4770      	bx	lr

080027f2 <_ZN8touchgfx12NoTransitionD0Ev>:
 80027f2:	b510      	push	{r4, lr}
 80027f4:	4604      	mov	r4, r0
 80027f6:	210c      	movs	r1, #12
 80027f8:	f021 ff31 	bl	802465e <_ZdlPvj>
 80027fc:	4620      	mov	r0, r4
 80027fe:	bd10      	pop	{r4, pc}

08002800 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002800:	b510      	push	{r4, lr}
 8002802:	4604      	mov	r4, r0
 8002804:	2110      	movs	r1, #16
 8002806:	f021 ff2a 	bl	802465e <_ZdlPvj>
 800280a:	4620      	mov	r0, r4
 800280c:	bd10      	pop	{r4, pc}

0800280e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800280e:	b510      	push	{r4, lr}
 8002810:	4604      	mov	r4, r0
 8002812:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8002816:	f021 ff22 	bl	802465e <_ZdlPvj>
 800281a:	4620      	mov	r0, r4
 800281c:	bd10      	pop	{r4, pc}

0800281e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800281e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002820:	f016 f976 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002824:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002828:	f016 bdbc 	b.w	80193a4 <_ZN8touchgfx11Application10invalidateEv>

0800282c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002830:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 8002834:	b158      	cbz	r0, 800284e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002836:	6803      	ldr	r3, [r0, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4798      	blx	r3
 800283c:	b138      	cbz	r0, 800284e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800283e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
 800284e:	bd10      	pop	{r4, pc}

08002850 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002850:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002854:	e9d0 5a55 	ldrd	r5, sl, [r0, #340]	; 0x154
{
 8002858:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800285a:	68a8      	ldr	r0, [r5, #8]
 800285c:	6803      	ldr	r3, [r0, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4798      	blx	r3
 8002862:	f245 13c3 	movw	r3, #20931	; 0x51c3
 8002866:	4298      	cmp	r0, r3
 8002868:	d805      	bhi.n	8002876 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800286c:	21a3      	movs	r1, #163	; 0xa3
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002870:	4846      	ldr	r0, [pc, #280]	; (800298c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002872:	f022 f801 	bl	8024878 <__assert_func>
 8002876:	6868      	ldr	r0, [r5, #4]
 8002878:	6803      	ldr	r3, [r0, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4798      	blx	r3
 800287e:	280f      	cmp	r0, #15
 8002880:	d803      	bhi.n	800288a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002884:	21a4      	movs	r1, #164	; 0xa4
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002888:	e7f2      	b.n	8002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800288a:	68e8      	ldr	r0, [r5, #12]
 800288c:	6803      	ldr	r3, [r0, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4798      	blx	r3
 8002892:	280b      	cmp	r0, #11
 8002894:	d803      	bhi.n	800289e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002898:	21a5      	movs	r1, #165	; 0xa5
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800289c:	e7e8      	b.n	8002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 800289e:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800299c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
    Application::getInstance()->clearAllTimerWidgets();
 80028a2:	f016 f935 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 80028a6:	3004      	adds	r0, #4
 80028a8:	f016 f957 	bl	8018b5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 80028ac:	f8d9 0000 	ldr.w	r0, [r9]
 80028b0:	b110      	cbz	r0, 80028b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 80028b2:	6803      	ldr	r3, [r0, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4798      	blx	r3
    if (*currentTrans)
 80028b8:	f8d9 0000 	ldr.w	r0, [r9]
 80028bc:	b110      	cbz	r0, 80028c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 80028be:	6803      	ldr	r3, [r0, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4798      	blx	r3
    if (*currentScreen)
 80028c4:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80029a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
 80028c8:	f8d8 0000 	ldr.w	r0, [r8]
 80028cc:	b110      	cbz	r0, 80028d4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 80028ce:	6803      	ldr	r3, [r0, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4798      	blx	r3
    if (*currentPresenter)
 80028d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028d8:	b110      	cbz	r0, 80028e0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4798      	blx	r3
    if (*currentScreen)
 80028e0:	f8d8 0000 	ldr.w	r0, [r8]
 80028e4:	b110      	cbz	r0, 80028ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4798      	blx	r3
    if (*currentPresenter)
 80028ec:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80028f0:	b110      	cbz	r0, 80028f8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 80028f2:	6803      	ldr	r3, [r0, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80028f8:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80028fa:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80028fc:	f04f 0b00 	mov.w	fp, #0
 8002900:	6803      	ldr	r3, [r0, #0]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	4798      	blx	r3
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>)
 8002908:	4604      	mov	r4, r0
 800290a:	f8c0 b004 	str.w	fp, [r0, #4]
 800290e:	6003      	str	r3, [r0, #0]
 8002910:	4659      	mov	r1, fp
 8002912:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002916:	68a8      	ldr	r0, [r5, #8]
 8002918:	6803      	ldr	r3, [r0, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	4798      	blx	r3
 800291e:	4606      	mov	r6, r0
 8002920:	f007 fcc8 	bl	800a2b4 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002924:	6868      	ldr	r0, [r5, #4]
 8002926:	4659      	mov	r1, fp
 8002928:	6803      	ldr	r3, [r0, #0]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	4798      	blx	r3
 800292e:	4605      	mov	r5, r0
 8002930:	4631      	mov	r1, r6
 8002932:	f007 fc25 	bl	800a180 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002936:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 800293a:	f8c7 513c 	str.w	r5, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
 800293e:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 8002942:	b1e5      	cbz	r5, 800297e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12e>
 8002944:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002946:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 800294a:	4630      	mov	r0, r6
 800294c:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 800294e:	f8c5 a008 	str.w	sl, [r5, #8]
 8002952:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002954:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002956:	4798      	blx	r3
    newPresenter->activate();
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	4628      	mov	r0, r5
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002960:	4621      	mov	r1, r4
 8002962:	4630      	mov	r0, r6
 8002964:	f017 fe36 	bl	801a5d4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	4620      	mov	r0, r4
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	4798      	blx	r3
    newTransition->invalidate();
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	4620      	mov	r0, r4
 8002974:	695b      	ldr	r3, [r3, #20]
}
 8002976:	b001      	add	sp, #4
 8002978:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297c:	4718      	bx	r3
    model->bind(newPresenter);
 800297e:	462b      	mov	r3, r5
 8002980:	e7e1      	b.n	8002946 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf6>
 8002982:	bf00      	nop
 8002984:	080262c8 	.word	0x080262c8
 8002988:	08026356 	.word	0x08026356
 800298c:	0802645a 	.word	0x0802645a
 8002990:	080264af 	.word	0x080264af
 8002994:	08026552 	.word	0x08026552
 8002998:	08026664 	.word	0x08026664
 800299c:	240100a8 	.word	0x240100a8
 80029a0:	240100a4 	.word	0x240100a4

080029a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	4604      	mov	r4, r0
 80029a8:	4617      	mov	r7, r2
 80029aa:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80029ac:	f016 f976 	bl	8018c9c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80029b0:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80029b2:	2500      	movs	r5, #0
        instance = this;
 80029b4:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029b6:	4629      	mov	r1, r5
      model(m)
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80029ba:	e9c4 7655 	strd	r7, r6, [r4, #340]	; 0x154
        return instance;
 80029be:	4e0f      	ldr	r6, [pc, #60]	; (80029fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80029c0:	6023      	str	r3, [r4, #0]
 80029c2:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80029c6:	e9c4 5553 	strd	r5, r5, [r4, #332]	; 0x14c
 80029ca:	e9c4 3551 	strd	r3, r5, [r4, #324]	; 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80029ce:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80029d0:	e9c4 554f 	strd	r5, r5, [r4, #316]	; 0x13c
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80029d8:	4628      	mov	r0, r5
 80029da:	f004 fd51 	bl	8007480 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80029de:	6833      	ldr	r3, [r6, #0]
 80029e0:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80029e4:	b10a      	cbz	r2, 80029ea <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80029e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80029e8:	b900      	cbnz	r0, 80029ec <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80029ea:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80029ec:	f01c fcf1 	bl	801f3d2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 80029f0:	4620      	mov	r0, r4
 80029f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f4:	240100b4 	.word	0x240100b4
 80029f8:	08026618 	.word	0x08026618
 80029fc:	24010060 	.word	0x24010060
 8002a00:	08026600 	.word	0x08026600

08002a04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8002a06:	f8c0 0148 	str.w	r0, [r0, #328]	; 0x148
 8002a0a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002a14:	f500 73a2 	add.w	r3, r0, #324	; 0x144
 8002a18:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
}
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	08002851 	.word	0x08002851

08002a24 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002a24:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002a26:	4770      	bx	lr

08002a28 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002a28:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002a2a:	4770      	bx	lr

08002a2c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002a2c:	4770      	bx	lr

08002a2e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002a2e:	888b      	ldrh	r3, [r1, #4]
 8002a30:	69c0      	ldr	r0, [r0, #28]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	680a      	ldr	r2, [r1, #0]
 8002a36:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002a3a:	4410      	add	r0, r2
 8002a3c:	4770      	bx	lr

08002a3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002a3e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002a40:	b1c2      	cbz	r2, 8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002a42:	7b13      	ldrb	r3, [r2, #12]
 8002a44:	b1b3      	cbz	r3, 8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002a46:	7b54      	ldrb	r4, [r2, #13]
 8002a48:	7ad2      	ldrb	r2, [r2, #11]
 8002a4a:	0224      	lsls	r4, r4, #8
 8002a4c:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a50:	4314      	orrs	r4, r2
 8002a52:	6a02      	ldr	r2, [r0, #32]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a54:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002a56:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002a5a:	8813      	ldrh	r3, [r2, #0]
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d102      	bne.n	8002a66 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002a60:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8002a64:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002a66:	d805      	bhi.n	8002a74 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002a68:	3801      	subs	r0, #1
 8002a6a:	3204      	adds	r2, #4
 8002a6c:	b280      	uxth	r0, r0
 8002a6e:	2800      	cmp	r0, #0
 8002a70:	d1f3      	bne.n	8002a5a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002a72:	e7f7      	b.n	8002a64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002a74:	2000      	movs	r0, #0
 8002a76:	e7f5      	b.n	8002a64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002a78 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	f021 fdee 	bl	802465e <_ZdlPvj>
 8002a82:	4620      	mov	r0, r4
 8002a84:	bd10      	pop	{r4, pc}
	...

08002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002a88:	b530      	push	{r4, r5, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002a8e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
 8002a92:	9508      	str	r5, [sp, #32]
 8002a94:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
 8002a98:	9507      	str	r5, [sp, #28]
 8002a9a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8002a9e:	9506      	str	r5, [sp, #24]
 8002aa0:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8002aa4:	9505      	str	r5, [sp, #20]
 8002aa6:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8002aaa:	9504      	str	r5, [sp, #16]
 8002aac:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8002ab0:	9503      	str	r5, [sp, #12]
 8002ab2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8002ab6:	9502      	str	r5, [sp, #8]
 8002ab8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8002abc:	9501      	str	r5, [sp, #4]
 8002abe:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8002ac2:	9500      	str	r5, [sp, #0]
 8002ac4:	f017 f916 	bl	8019cf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8002aca:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8002acc:	6023      	str	r3, [r4, #0]
 8002ace:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ad0:	61e3      	str	r3, [r4, #28]
 8002ad2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002ad4:	6223      	str	r3, [r4, #32]
 8002ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ad8:	6263      	str	r3, [r4, #36]	; 0x24
 8002ada:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002adc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002ade:	b00b      	add	sp, #44	; 0x2c
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop
 8002ae4:	08026688 	.word	0x08026688

08002ae8 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002ae8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002aea:	4770      	bx	lr

08002aec <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002aec:	4770      	bx	lr

08002aee <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002aee:	4770      	bx	lr

08002af0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002af0:	4770      	bx	lr

08002af2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002af2:	4770      	bx	lr

08002af4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002af4:	4770      	bx	lr

08002af6 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 8002af6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002af8:	4770      	bx	lr

08002afa <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 8002afa:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002afc:	4770      	bx	lr

08002afe <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002afe:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002b02:	4770      	bx	lr

08002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002b04:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b06:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002b08:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002b0e:	4362      	muls	r2, r4
 8002b10:	4361      	muls	r1, r4
    }
 8002b12:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002b16:	4718      	bx	r3

08002b18 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * (float)scale;
 8002b18:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b1c:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002b1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * (float)scale;
 8002b26:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002b2a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	db17      	blt.n	8002b64 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return (int)(fs + 0.5f);
 8002b34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b38:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002b3c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b40:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002b44:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002b48:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b50:	db1c      	blt.n	8002b8c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return (int)(fs + 0.5f);
 8002b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002b56:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002b5a:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b5e:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002b62:	4718      	bx	r3
        }
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002b64:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002b68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002b6c:	ee17 2a10 	vmov	r2, s14
 8002b70:	1e51      	subs	r1, r2, #1
 8002b72:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002b76:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002b7a:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002b7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002b82:	ee10 2a10 	vmov	r2, s0
 8002b86:	440a      	add	r2, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	e7db      	b.n	8002b44 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002b8c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b94:	ee17 2a90 	vmov	r2, s15
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002b9e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ba2:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002ba6:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002baa:	ee10 ca90 	vmov	ip, s1
 8002bae:	4494      	add	ip, r2
 8002bb0:	4662      	mov	r2, ip
 8002bb2:	e7d6      	b.n	8002b62 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002bb4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002bb4:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bb6:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002bb8:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bbe:	4362      	muls	r2, r4
    }
 8002bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002bc4:	4718      	bx	r3

08002bc6 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * (float)scale;
 8002bc6:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bca:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * (float)scale;
 8002bd4:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002bd8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	db08      	blt.n	8002bf4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002be2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002be6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002bea:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bee:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002bf2:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002bf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfc:	ee17 2a90 	vmov	r2, s15
 8002c00:	3a01      	subs	r2, #1
 8002c02:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002c06:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002c0a:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c0e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c12:	ee10 ca10 	vmov	ip, s0
 8002c16:	4494      	add	ip, r2
 8002c18:	4662      	mov	r2, ip
 8002c1a:	e7ea      	b.n	8002bf2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002c1c:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c1e:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002c20:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c26:	4362      	muls	r2, r4
 8002c28:	4361      	muls	r1, r4
    }
 8002c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002c2e:	4718      	bx	r3

08002c30 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * (float)scale;
 8002c30:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c34:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * (float)scale;
 8002c3e:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002c42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	db17      	blt.n	8002c7c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return (int)(fs + 0.5f);
 8002c4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c50:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002c54:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c58:	ee17 1a10 	vmov	r1, s14
        const float fs = f * (float)scale;
 8002c5c:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002c60:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	db1c      	blt.n	8002ca4 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return (int)(fs + 0.5f);
 8002c6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002c6e:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002c72:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002c76:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002c7a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002c7c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002c80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002c84:	ee17 2a10 	vmov	r2, s14
 8002c88:	1e51      	subs	r1, r2, #1
 8002c8a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002c8e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002c92:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002c96:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002c9a:	ee10 2a10 	vmov	r2, s0
 8002c9e:	440a      	add	r2, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	e7db      	b.n	8002c5c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002ca4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cac:	ee17 2a90 	vmov	r2, s15
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002cb6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002cba:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002cbe:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002cc2:	ee10 ca90 	vmov	ip, s1
 8002cc6:	4494      	add	ip, r2
 8002cc8:	4662      	mov	r2, ip
 8002cca:	e7d6      	b.n	8002c7a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002ccc <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002ccc:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cce:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002cd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cd6:	4362      	muls	r2, r4
    }
 8002cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002cdc:	4718      	bx	r3

08002cde <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * (float)scale;
 8002cde:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002ce2:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002ce8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * (float)scale;
 8002cec:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002cf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	db08      	blt.n	8002d0c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return (int)(fs + 0.5f);
 8002cfa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002cfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002d02:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d06:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8002d0a:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002d0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d14:	ee17 2a90 	vmov	r2, s15
 8002d18:	3a01      	subs	r2, #1
 8002d1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002d1e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002d22:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002d26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002d2a:	ee10 ca10 	vmov	ip, s0
 8002d2e:	4494      	add	ip, r2
 8002d30:	4662      	mov	r2, ip
 8002d32:	e7ea      	b.n	8002d0a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8002d34:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8002d38:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db07      	blt.n	8002d4e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d3e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d42:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d4a:	1040      	asrs	r0, r0, #1
 8002d4c:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d4e:	f06f 0001 	mvn.w	r0, #1
 8002d52:	fb00 2003 	mla	r0, r0, r3, r2
 8002d56:	3801      	subs	r0, #1
 8002d58:	fb90 f0f2 	sdiv	r0, r0, r2
 8002d5c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d60:	1040      	asrs	r0, r0, #1
 8002d62:	4240      	negs	r0, r0
    }
 8002d64:	4770      	bx	lr

08002d66 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8002d66:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8002d6a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002d6e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002d76:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002d7a:	4770      	bx	lr

08002d7c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 8002d7c:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 8002d80:	4770      	bx	lr

08002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 8002d82:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 8002d86:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db07      	blt.n	8002d9c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002d8c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002d90:	fb93 f0f2 	sdiv	r0, r3, r2
 8002d94:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002d98:	1040      	asrs	r0, r0, #1
 8002d9a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002d9c:	f06f 0001 	mvn.w	r0, #1
 8002da0:	fb00 2003 	mla	r0, r0, r3, r2
 8002da4:	3801      	subs	r0, #1
 8002da6:	fb90 f0f2 	sdiv	r0, r0, r2
 8002daa:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dae:	1040      	asrs	r0, r0, #1
 8002db0:	4240      	negs	r0, r0
    }
 8002db2:	4770      	bx	lr

08002db4 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002db4:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 8002db8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002dbc:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002dc4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002dc8:	4770      	bx	lr

08002dca <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 8002dca:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 8002dce:	4770      	bx	lr

08002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 8002dd0:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8002dd4:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	db07      	blt.n	8002dea <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002dda:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002dde:	fb93 f0f2 	sdiv	r0, r3, r2
 8002de2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002de6:	1040      	asrs	r0, r0, #1
 8002de8:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002dea:	f06f 0001 	mvn.w	r0, #1
 8002dee:	fb00 2003 	mla	r0, r0, r3, r2
 8002df2:	3801      	subs	r0, #1
 8002df4:	fb90 f0f2 	sdiv	r0, r0, r2
 8002df8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002dfc:	1040      	asrs	r0, r0, #1
 8002dfe:	4240      	negs	r0, r0
    }
 8002e00:	4770      	bx	lr

08002e02 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8002e02:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8002e06:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e0a:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e12:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e16:	4770      	bx	lr

08002e18 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8002e18:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 8002e1c:	4770      	bx	lr

08002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 8002e1e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8002e22:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db07      	blt.n	8002e38 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8002e28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002e2c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002e30:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e34:	1040      	asrs	r0, r0, #1
 8002e36:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002e38:	f06f 0001 	mvn.w	r0, #1
 8002e3c:	fb00 2003 	mla	r0, r0, r3, r2
 8002e40:	3801      	subs	r0, #1
 8002e42:	fb90 f0f2 	sdiv	r0, r0, r2
 8002e46:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002e4a:	1040      	asrs	r0, r0, #1
 8002e4c:	4240      	negs	r0, r0
    }
 8002e4e:	4770      	bx	lr

08002e50 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 8002e50:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8002e54:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002e58:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002e60:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002e64:	4770      	bx	lr

08002e66 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8002e66:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8002e6a:	4770      	bx	lr

08002e6c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
    {
        setScaleX(scale, updateData);
 8002e6c:	6803      	ldr	r3, [r0, #0]
    virtual void setScale(int scale, bool updateData = false)
 8002e6e:	b570      	push	{r4, r5, r6, lr}
 8002e70:	4604      	mov	r4, r0
        setScaleX(scale, updateData);
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    virtual void setScale(int scale, bool updateData = false)
 8002e76:	460d      	mov	r5, r1
 8002e78:	4616      	mov	r6, r2
        setScaleX(scale, updateData);
 8002e7a:	4798      	blx	r3
        setScaleY(scale, updateData);
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	4632      	mov	r2, r6
 8002e80:	4629      	mov	r1, r5
 8002e82:	4620      	mov	r0, r4
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    }
 8002e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setScaleY(scale, updateData);
 8002e8c:	4718      	bx	r3

08002e8e <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @see setScale
     */
    virtual int getScale() const
    {
        return getScaleY();
 8002e8e:	6803      	ldr	r3, [r0, #0]
 8002e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e94:	4718      	bx	r3

08002e96 <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
    {
        return getGraphRangeXMinScaled();
 8002e96:	6803      	ldr	r3, [r0, #0]
 8002e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002e9c:	4718      	bx	r3

08002e9e <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
    {
        return getGraphRangeXMaxScaled();
 8002e9e:	6803      	ldr	r3, [r0, #0]
 8002ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea4:	4718      	bx	r3

08002ea6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002ea6:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 8002ea8:	2a00      	cmp	r2, #0
    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 8002eaa:	b410      	push	{r4}
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        return scaled2int(i, xScale);
 8002eb0:	6b04      	ldr	r4, [r0, #48]	; 0x30
        if (i >= 0)
 8002eb2:	db0e      	blt.n	8002ed2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x2c>
            return ((i * 2 + scale) / scale) / 2;
 8002eb4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002eb8:	fb92 f1f4 	sdiv	r1, r2, r4
 8002ebc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ec0:	1049      	asrs	r1, r1, #1
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002ec2:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
    }
 8002ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	440a      	add	r2, r1
 8002ece:	4249      	negs	r1, r1
 8002ed0:	4718      	bx	r3
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002ed2:	f06f 0101 	mvn.w	r1, #1
 8002ed6:	fb01 4102 	mla	r1, r1, r2, r4
 8002eda:	3901      	subs	r1, #1
 8002edc:	fb91 f1f4 	sdiv	r1, r1, r4
 8002ee0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002ee4:	1049      	asrs	r1, r1, #1
 8002ee6:	4249      	negs	r1, r1
 8002ee8:	e7eb      	b.n	8002ec2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x1c>

08002eea <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
    {
        setXAxisFactor(scale);
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002ef0:	4718      	bx	r3

08002ef2 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
        return i * scale;
 8002ef2:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
    {
        setXAxisFactorScaled(int2scaledX(factor));
 8002ef4:	6803      	ldr	r3, [r0, #0]
 8002ef6:	4351      	muls	r1, r2
 8002ef8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002efc:	4718      	bx	r3

08002efe <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:
    }

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
    {
        setXAxisFactor(scale);
 8002efe:	6803      	ldr	r3, [r0, #0]
 8002f00:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002f04:	4718      	bx	r3

08002f06 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:
        const float fs = f * (float)scale;
 8002f06:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8002f0a:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002f0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f10:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
        const float fs = f * (float)scale;
 8002f14:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002f18:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f20:	db08      	blt.n	8002f34 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2e>
            return (int)(fs + 0.5f);
 8002f22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f26:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f2e:	ee17 1a90 	vmov	r1, s15
        setXAxisFactorScaled(float2scaledX(factor));
 8002f32:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8002f34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f3c:	ee17 2a90 	vmov	r2, s15
 8002f40:	1e51      	subs	r1, r2, #1
 8002f42:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f46:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f4a:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f52:	ee10 2a10 	vmov	r2, s0
 8002f56:	440a      	add	r2, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	e7ea      	b.n	8002f32 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x2c>

08002f5c <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
    {
        xAxisFactor = factor;
 8002f5c:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
    }
 8002f60:	4770      	bx	lr

08002f62 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
    {
        return getXAxisFactorAsInt();
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8002f68:	4718      	bx	r3

08002f6a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
    {
        return scaled2intX(getXAxisFactorScaled());
 8002f6a:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisFactorAsInt() const
 8002f6c:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisFactorScaled());
 8002f6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual int getXAxisFactorAsInt() const
 8002f72:	4604      	mov	r4, r0
        return scaled2intX(getXAxisFactorScaled());
 8002f74:	4798      	blx	r3
        if (i >= 0)
 8002f76:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 8002f78:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 8002f7a:	db07      	blt.n	8002f8c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 8002f7c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002f80:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f84:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f88:	1040      	asrs	r0, r0, #1
    }
 8002f8a:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	fb02 3000 	mla	r0, r2, r0, r3
 8002f94:	3801      	subs	r0, #1
 8002f96:	fb90 f0f3 	sdiv	r0, r0, r3
 8002f9a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002f9e:	1040      	asrs	r0, r0, #1
 8002fa0:	4240      	negs	r0, r0
        return scaled2intX(getXAxisFactorScaled());
 8002fa2:	e7f2      	b.n	8002f8a <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x20>

08002fa4 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
    {
        return getXAxisFactorAsFloat();
 8002fa4:	6803      	ldr	r3, [r0, #0]
 8002fa6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002faa:	4718      	bx	r3

08002fac <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:
    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
    {
        return scaled2floatX(getXAxisFactorScaled());
 8002fac:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisFactorAsFloat() const
 8002fae:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisFactorScaled());
 8002fb0:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
    virtual float getXAxisFactorAsFloat() const
 8002fb4:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisFactorScaled());
 8002fb6:	4798      	blx	r3
        return (float)i / (float)scale;
 8002fb8:	ee07 0a90 	vmov	s15, r0
 8002fbc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8002fc0:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8002fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8002fc8:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8002fcc:	bd10      	pop	{r4, pc}

08002fce <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
    {
        return xAxisFactor;
    }
 8002fce:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002fd2:	4770      	bx	lr

08002fd4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
        return i * scale;
 8002fd4:	6b02      	ldr	r2, [r0, #48]	; 0x30
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8002fd6:	6803      	ldr	r3, [r0, #0]
 8002fd8:	4351      	muls	r1, r2
 8002fda:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002fde:	4718      	bx	r3

08002fe0 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:
        const float fs = f * (float)scale;
 8002fe0:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
    }

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fe4:	6803      	ldr	r3, [r0, #0]
        const float fs = f * (float)scale;
 8002fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 8002fea:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
        const float fs = f * (float)scale;
 8002fee:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002ff2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	db08      	blt.n	800300e <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2e>
            return (int)(fs + 0.5f);
 8002ffc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003000:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003004:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003008:	ee17 1a90 	vmov	r1, s15
        setXAxisOffsetScaled(float2scaledX(offset));
 800300c:	4718      	bx	r3
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800300e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003016:	ee17 2a90 	vmov	r2, s15
 800301a:	1e51      	subs	r1, r2, #1
 800301c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003020:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003024:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003028:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800302c:	ee10 2a10 	vmov	r2, s0
 8003030:	440a      	add	r2, r1
 8003032:	4611      	mov	r1, r2
 8003034:	e7ea      	b.n	800300c <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x2c>

08003036 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
    {
        xAxisOffset = offset;
 8003036:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    }
 800303a:	4770      	bx	lr

0800303c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
    {
        return scaled2intX(getXAxisOffsetScaled());
 800303c:	6803      	ldr	r3, [r0, #0]
    virtual int getXAxisOffsetAsInt() const
 800303e:	b510      	push	{r4, lr}
        return scaled2intX(getXAxisOffsetScaled());
 8003040:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual int getXAxisOffsetAsInt() const
 8003044:	4604      	mov	r4, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003046:	4798      	blx	r3
        if (i >= 0)
 8003048:	2800      	cmp	r0, #0
        return scaled2int(i, xScale);
 800304a:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (i >= 0)
 800304c:	db07      	blt.n	800305e <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x22>
            return ((i * 2 + scale) / scale) / 2;
 800304e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003052:	fb90 f0f3 	sdiv	r0, r0, r3
 8003056:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800305a:	1040      	asrs	r0, r0, #1
    }
 800305c:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800305e:	f06f 0201 	mvn.w	r2, #1
 8003062:	fb02 3000 	mla	r0, r2, r0, r3
 8003066:	3801      	subs	r0, #1
 8003068:	fb90 f0f3 	sdiv	r0, r0, r3
 800306c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003070:	1040      	asrs	r0, r0, #1
 8003072:	4240      	negs	r0, r0
        return scaled2intX(getXAxisOffsetScaled());
 8003074:	e7f2      	b.n	800305c <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x20>

08003076 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8003076:	6803      	ldr	r3, [r0, #0]
    virtual float getXAxisOffsetAsFloat() const
 8003078:	b510      	push	{r4, lr}
        return scaled2floatX(getXAxisOffsetScaled());
 800307a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
    virtual float getXAxisOffsetAsFloat() const
 800307e:	4604      	mov	r4, r0
        return scaled2floatX(getXAxisOffsetScaled());
 8003080:	4798      	blx	r3
        return (float)i / (float)scale;
 8003082:	ee07 0a90 	vmov	s15, r0
 8003086:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800308a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800308e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003092:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003096:	bd10      	pop	{r4, pc}

08003098 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
    {
        return xAxisOffset;
    }
 8003098:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
 800309c:	4770      	bx	lr

0800309e <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 800309e:	6803      	ldr	r3, [r0, #0]
        if (i >= 0)
 80030a0:	2900      	cmp	r1, #0
        return scaled2int(i, xScale);
 80030a2:	6b02      	ldr	r2, [r0, #48]	; 0x30
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030a4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 80030a8:	b510      	push	{r4, lr}
 80030aa:	4604      	mov	r4, r0
        if (i >= 0)
 80030ac:	db0e      	blt.n	80030cc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x2e>
            return ((i * 2 + scale) / scale) / 2;
 80030ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80030b2:	fb91 f1f2 	sdiv	r1, r1, r2
 80030b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030ba:	1049      	asrs	r1, r1, #1
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 80030bc:	b209      	sxth	r1, r1
 80030be:	4620      	mov	r0, r4
 80030c0:	4798      	blx	r3
 80030c2:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 80030c6:	fb02 3000 	mla	r0, r2, r0, r3
 80030ca:	bd10      	pop	{r4, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80030cc:	f06f 0001 	mvn.w	r0, #1
 80030d0:	fb00 2101 	mla	r1, r0, r1, r2
 80030d4:	3901      	subs	r1, #1
 80030d6:	fb91 f1f2 	sdiv	r1, r1, r2
 80030da:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80030de:	1049      	asrs	r1, r1, #1
 80030e0:	4249      	negs	r1, r1
 80030e2:	e7eb      	b.n	80030bc <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x1e>

080030e4 <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:
    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
    {
        return AbstractDataGraph::getScaleX();
    }
 80030e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80030e6:	4770      	bx	lr

080030e8 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:
    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
    {
        return AbstractDataGraph::getScaleY();
    }
 80030e8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80030ea:	4770      	bx	lr

080030ec <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
    {
        setXAxisFactorScaled(scale);
 80030ec:	6803      	ldr	r3, [r0, #0]
 80030ee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80030f2:	4718      	bx	r3

080030f4 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:
    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
    {
        return getXAxisFactorScaled();
 80030f4:	6803      	ldr	r3, [r0, #0]
 80030f6:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80030fa:	4718      	bx	r3

080030fc <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:
        return i * scale;
 80030fc:	6b02      	ldr	r2, [r0, #48]	; 0x30

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(int2scaledX(index));
 80030fe:	6803      	ldr	r3, [r0, #0]
 8003100:	4351      	muls	r1, r2
 8003102:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003106:	4718      	bx	r3

08003108 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003108:	6803      	ldr	r3, [r0, #0]
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 800310a:	b570      	push	{r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 800310c:	f8d3 5118 	ldr.w	r5, [r3, #280]	; 0x118
    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8003110:	4604      	mov	r4, r0
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003112:	f8d0 6144 	ldr.w	r6, [r0, #324]	; 0x144
 8003116:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800311a:	4798      	blx	r3
 800311c:	462b      	mov	r3, r5
 800311e:	f856 1020 	ldr.w	r1, [r6, r0, lsl #2]
 8003122:	4620      	mov	r0, r4
    }
 8003124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8003128:	4718      	bx	r3

0800312a <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 800312a:	4610      	mov	r0, r2
 800312c:	4770      	bx	lr

0800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 800312e:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8003132:	6803      	ldr	r3, [r0, #0]
 8003134:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003138:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800313c:	4718      	bx	r3

0800313e <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 800313e:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 8003142:	6803      	ldr	r3, [r0, #0]
 8003144:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8003148:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800314c:	4718      	bx	r3

0800314e <_ZNK8touchgfx15GraphScrollData9dataIndexEs>:

    virtual int16_t addValue(int value);

    virtual int16_t dataIndex(int16_t screenIndex) const
    {
        return usedCapacity < maxCapacity ? screenIndex : (screenIndex + current) % maxCapacity;
 800314e:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 8003152:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003156:	4293      	cmp	r3, r2
 8003158:	db07      	blt.n	800316a <_ZNK8touchgfx15GraphScrollData9dataIndexEs+0x1c>
 800315a:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	; 0x14c
 800315e:	4419      	add	r1, r3
 8003160:	fb91 f0f2 	sdiv	r0, r1, r2
 8003164:	fb02 1110 	mls	r1, r2, r0, r1
 8003168:	b209      	sxth	r1, r1
    }
 800316a:	4608      	mov	r0, r1
 800316c:	4770      	bx	lr

0800316e <_ZNK8touchgfx15GraphScrollData10indexToXQ5Es>:

private:
    virtual CWRUtil::Q5 indexToXQ5(int16_t index) const
    {
        return CWRUtil::toQ5(index);
    }
 800316e:	0148      	lsls	r0, r1, #5
 8003170:	4770      	bx	lr

08003172 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 8003172:	62c1      	str	r1, [r0, #44]	; 0x2c
    }
 8003174:	4770      	bx	lr

08003176 <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 8003176:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8003178:	4770      	bx	lr

0800317a <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 800317a:	2001      	movs	r0, #1
 800317c:	4770      	bx	lr

0800317e <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
    {
    }
 800317e:	4770      	bx	lr

08003180 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 8003180:	4770      	bx	lr

08003182 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 8003182:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8003184:	b118      	cbz	r0, 800318e <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318c:	4718      	bx	r3
    }
 800318e:	4770      	bx	lr

08003190 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003190:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003194:	b530      	push	{r4, r5, lr}
        return topPadding;
 8003196:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 800319a:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800319e:	4421      	add	r1, r4
 80031a0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80031a4:	8044      	strh	r4, [r0, #2]
 80031a6:	1a52      	subs	r2, r2, r1
 80031a8:	2100      	movs	r1, #0
 80031aa:	8085      	strh	r5, [r0, #4]
 80031ac:	8001      	strh	r1, [r0, #0]
 80031ae:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 80031b0:	bd30      	pop	{r4, r5, pc}

080031b2 <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 80031b2:	b510      	push	{r4, lr}
 80031b4:	8042      	strh	r2, [r0, #2]
 80031b6:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80031ba:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80031be:	8004      	strh	r4, [r0, #0]
 80031c0:	8082      	strh	r2, [r0, #4]
 80031c2:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 80031c4:	bd10      	pop	{r4, pc}

080031c6 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 80031c6:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80031c8:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 80031ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80031ce:	4718      	bx	r3

080031d0 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 80031d0:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80031d2:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031d8:	4718      	bx	r3

080031da <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80031da:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80031de:	4770      	bx	lr

080031e0 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80031e0:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80031e4:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80031e8:	4403      	add	r3, r0
 80031ea:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80031ee:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80031f0:	b200      	sxth	r0, r0
 80031f2:	4770      	bx	lr

080031f4 <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80031f4:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80031f8:	4770      	bx	lr

080031fa <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80031fa:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80031fe:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003202:	4403      	add	r3, r0
 8003204:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003208:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 800320a:	b200      	sxth	r0, r0
 800320c:	4770      	bx	lr

0800320e <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 800320e:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003210:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 8003212:	4611      	mov	r1, r2
 8003214:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003218:	4718      	bx	r3

0800321a <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 800321a:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 800321e:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8003220:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003224:	186c      	adds	r4, r5, r1
 8003226:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 800322a:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 800322e:	1b09      	subs	r1, r1, r4
 8003230:	2400      	movs	r4, #0
 8003232:	8005      	strh	r5, [r0, #0]
 8003234:	8044      	strh	r4, [r0, #2]
 8003236:	8081      	strh	r1, [r0, #4]
 8003238:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 800323a:	bd30      	pop	{r4, r5, pc}

0800323c <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 800323c:	8002      	strh	r2, [r0, #0]
 800323e:	8083      	strh	r3, [r0, #4]
 8003240:	f9bd 2000 	ldrsh.w	r2, [sp]
 8003244:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003248:	8042      	strh	r2, [r0, #2]
 800324a:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 800324c:	4770      	bx	lr

0800324e <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 800324e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003250:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 8003252:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003256:	4718      	bx	r3

08003258 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 8003258:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800325a:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 800325c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003260:	4718      	bx	r3

08003262 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 8003262:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003266:	4770      	bx	lr

08003268 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003268:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 800326c:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 8003270:	4403      	add	r3, r0
 8003272:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003276:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003278:	b200      	sxth	r0, r0
 800327a:	4770      	bx	lr

0800327c <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 800327c:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003280:	4770      	bx	lr

08003282 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003282:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 8003286:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 800328a:	4403      	add	r3, r0
 800328c:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003290:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003292:	b200      	sxth	r0, r0
 8003294:	4770      	bx	lr

08003296 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 8003296:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003298:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 800329a:	4611      	mov	r1, r2
 800329c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80032a0:	4718      	bx	r3

080032a2 <_ZN15Screen1ViewBase13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void graph2Dragged(AbstractDataGraph::GraphDragEvent value)
 80032a2:	b082      	sub	sp, #8
 80032a4:	ab02      	add	r3, sp, #8
 80032a6:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in Screen1
    }
 80032aa:	b002      	add	sp, #8
 80032ac:	4770      	bx	lr

080032ae <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80032ae:	4770      	bx	lr

080032b0 <_ZN8touchgfx5GraphILs100EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 80032b0:	4770      	bx	lr

080032b2 <_ZN8touchgfx11GraphScrollILs100EED1Ev>:
 * the new values added to the graph.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class GraphScroll : public GraphScrollData
 80032b2:	4770      	bx	lr

080032b4 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80032b4:	4770      	bx	lr

080032b6 <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 80032b6:	4770      	bx	lr

080032b8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80032b8:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80032ba:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80032bc:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80032be:	68c4      	ldr	r4, [r0, #12]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	1066      	asrs	r6, r4, #1
 80032c4:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80032c8:	07e4      	lsls	r4, r4, #31
 80032ca:	bf44      	itt	mi
 80032cc:	59ac      	ldrmi	r4, [r5, r6]
 80032ce:	58e3      	ldrmi	r3, [r4, r3]
    }
 80032d0:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80032d2:	4718      	bx	r3

080032d4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 80032d4:	6843      	ldr	r3, [r0, #4]
 80032d6:	b12b      	cbz	r3, 80032e4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 80032d8:	6883      	ldr	r3, [r0, #8]
 80032da:	b92b      	cbnz	r3, 80032e8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 80032dc:	68c0      	ldr	r0, [r0, #12]
 80032de:	f000 0001 	and.w	r0, r0, #1
 80032e2:	4770      	bx	lr
 80032e4:	4618      	mov	r0, r3
 80032e6:	4770      	bx	lr
 80032e8:	2001      	movs	r0, #1
    }
 80032ea:	4770      	bx	lr

080032ec <_ZN8touchgfx17GraphElementGridXD0Ev>:
 80032ec:	b510      	push	{r4, lr}
 80032ee:	4604      	mov	r4, r0
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	f021 f9b4 	bl	802465e <_ZdlPvj>
 80032f6:	4620      	mov	r0, r4
 80032f8:	bd10      	pop	{r4, pc}

080032fa <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 80032fa:	b510      	push	{r4, lr}
 80032fc:	4604      	mov	r4, r0
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	f021 f9ad 	bl	802465e <_ZdlPvj>
 8003304:	4620      	mov	r0, r4
 8003306:	bd10      	pop	{r4, pc}

08003308 <_ZN8touchgfx11GraphScrollILs100EED0Ev>:
 8003308:	b510      	push	{r4, lr}
 800330a:	4604      	mov	r4, r0
 800330c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8003310:	f021 f9a5 	bl	802465e <_ZdlPvj>
 8003314:	4620      	mov	r0, r4
 8003316:	bd10      	pop	{r4, pc}

08003318 <_ZN8touchgfx5GraphILs100EED0Ev>:
 8003318:	b510      	push	{r4, lr}
 800331a:	4604      	mov	r4, r0
 800331c:	f240 4164 	movw	r1, #1124	; 0x464
 8003320:	f021 f99d 	bl	802465e <_ZdlPvj>
 8003324:	4620      	mov	r0, r4
 8003326:	bd10      	pop	{r4, pc}

08003328 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003328:	b510      	push	{r4, lr}
 800332a:	4604      	mov	r4, r0
 800332c:	2110      	movs	r1, #16
 800332e:	f021 f996 	bl	802465e <_ZdlPvj>
 8003332:	4620      	mov	r0, r4
 8003334:	bd10      	pop	{r4, pc}

08003336 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8003336:	b513      	push	{r0, r1, r4, lr}
 8003338:	4603      	mov	r3, r0
 800333a:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800333c:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003340:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003342:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	4798      	blx	r3
 800334a:	9901      	ldr	r1, [sp, #4]
 800334c:	4602      	mov	r2, r0
 800334e:	4620      	mov	r0, r4
    }
 8003350:	b002      	add	sp, #8
 8003352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003356:	f011 b949 	b.w	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800335a <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800335a:	b513      	push	{r0, r1, r4, lr}
 800335c:	4603      	mov	r3, r0
 800335e:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003360:	e9d3 140c 	ldrd	r1, r4, [r3, #48]	; 0x30
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003364:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 8003366:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336c:	4798      	blx	r3
 800336e:	9901      	ldr	r1, [sp, #4]
 8003370:	4602      	mov	r2, r0
 8003372:	4620      	mov	r0, r4
    }
 8003374:	b002      	add	sp, #8
 8003376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 800337a:	f011 b937 	b.w	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800337e <_ZN15Screen1ViewBase11setupScreenEv>:
    touchgfx::CanvasWidgetRenderer::resetBuffer();
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 800337e:	f500 600f 	add.w	r0, r0, #2288	; 0x8f0
 8003382:	f007 b84f 	b.w	800a424 <_ZN11customGraph10initializeEv>

08003386 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
    virtual void invalidateContent() const
 8003386:	b508      	push	{r3, lr}
        if (alpha > 0)
 8003388:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800338c:	b10b      	cbz	r3, 8003392 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xc>
            Container::invalidateContent();
 800338e:	f7ff f92d 	bl	80025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 8003392:	bd08      	pop	{r3, pc}

08003394 <_ZN15Screen1ViewBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:
}

void Screen1ViewBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 8003394:	b410      	push	{r4}
    if (&src == &graph2)
 8003396:	f500 54e9 	add.w	r4, r0, #7456	; 0x1d20
 800339a:	341c      	adds	r4, #28
 800339c:	42a1      	cmp	r1, r4
 800339e:	d105      	bne.n	80033ac <_ZN15Screen1ViewBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction2
        //When graph2 dragged call virtual function
        //Call graph2Dragged
        graph2Dragged(value);
 80033a0:	6803      	ldr	r3, [r0, #0]
    }
}
 80033a2:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph2Dragged(value);
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	ca06      	ldmia	r2, {r1, r2}
 80033aa:	4718      	bx	r3
}
 80033ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80033b4:	1e0a      	subs	r2, r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80033b6:	b510      	push	{r4, lr}
        assert(index >= 0 && index < usedCapacity);
 80033b8:	db03      	blt.n	80033c2 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0xe>
 80033ba:	f9b0 411e 	ldrsh.w	r4, [r0, #286]	; 0x11e
 80033be:	4294      	cmp	r4, r2
 80033c0:	dc06      	bgt.n	80033d0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x1c>
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>)
 80033c4:	f240 6139 	movw	r1, #1593	; 0x639
 80033c8:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x34>)
 80033ca:	4808      	ldr	r0, [pc, #32]	; (80033ec <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x38>)
 80033cc:	f021 fa54 	bl	8024878 <__assert_func>
        return yValues[dataIndex(index)];
 80033d0:	6803      	ldr	r3, [r0, #0]
 80033d2:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
 80033d6:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80033da:	4798      	blx	r3
    }
 80033dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80033e0:	bd10      	pop	{r4, pc}
 80033e2:	bf00      	nop
 80033e4:	080266e0 	.word	0x080266e0
 80033e8:	08026703 	.word	0x08026703
 80033ec:	08026752 	.word	0x08026752

080033f0 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80033f0:	1e0b      	subs	r3, r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 80033f2:	b510      	push	{r4, lr}
 80033f4:	4604      	mov	r4, r0
        assert(index >= 0 && index < usedCapacity);
 80033f6:	db03      	blt.n	8003400 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x10>
 80033f8:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80033fc:	429a      	cmp	r2, r3
 80033fe:	dc06      	bgt.n	800340e <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x1e>
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>)
 8003402:	f240 6133 	movw	r1, #1587	; 0x633
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x34>)
 8003408:	4807      	ldr	r0, [pc, #28]	; (8003428 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x38>)
 800340a:	f021 fa35 	bl	8024878 <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 800340e:	6803      	ldr	r3, [r0, #0]
 8003410:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003414:	4798      	blx	r3
 8003416:	e9d4 234f 	ldrd	r2, r3, [r4, #316]	; 0x13c
    }
 800341a:	fb02 3000 	mla	r0, r2, r0, r3
 800341e:	bd10      	pop	{r4, pc}
 8003420:	080266e0 	.word	0x080266e0
 8003424:	080267bd 	.word	0x080267bd
 8003428:	08026752 	.word	0x08026752

0800342c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 800342c:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 800342e:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003430:	db03      	blt.n	800343a <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 8003432:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003436:	428b      	cmp	r3, r1
 8003438:	dc06      	bgt.n	8003448 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 800343c:	f240 61f5 	movw	r1, #1781	; 0x6f5
 8003440:	4a05      	ldr	r2, [pc, #20]	; (8003458 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 8003442:	4806      	ldr	r0, [pc, #24]	; (800345c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 8003444:	f021 fa18 	bl	8024878 <__assert_func>
        return yValues[index];
 8003448:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 800344c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003450:	bd08      	pop	{r3, pc}
 8003452:	bf00      	nop
 8003454:	080266e0 	.word	0x080266e0
 8003458:	0802680c 	.word	0x0802680c
 800345c:	08026752 	.word	0x08026752

08003460 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003460:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8003462:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003464:	db03      	blt.n	800346e <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 8003466:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800346a:	428b      	cmp	r3, r1
 800346c:	dc06      	bgt.n	800347c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 8003470:	f240 61e5 	movw	r1, #1765	; 0x6e5
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 8003476:	4806      	ldr	r0, [pc, #24]	; (8003490 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003478:	f021 f9fe 	bl	8024878 <__assert_func>
        return xValues[index];
 800347c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 8003480:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003484:	bd08      	pop	{r3, pc}
 8003486:	bf00      	nop
 8003488:	080266e0 	.word	0x080266e0
 800348c:	0802685a 	.word	0x0802685a
 8003490:	08026752 	.word	0x08026752

08003494 <_ZN15Screen1ViewBaseD1Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <_ZN15Screen1ViewBaseD1Ev+0x20>)
 8003496:	b510      	push	{r4, lr}
 8003498:	6003      	str	r3, [r0, #0]
 800349a:	4604      	mov	r4, r0
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 800349c:	f013 feba 	bl	8017214 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <_ZN15Screen1ViewBaseD1Ev+0x24>)
 80034a2:	f504 600f 	add.w	r0, r4, #2288	; 0x8f0
 80034a6:	f8c4 38f0 	str.w	r3, [r4, #2288]	; 0x8f0
 80034aa:	f004 f89c 	bl	80075e6 <_ZN15customGraphBaseD1Ev>
}
 80034ae:	4620      	mov	r0, r4
 80034b0:	bd10      	pop	{r4, pc}
 80034b2:	bf00      	nop
 80034b4:	08026d78 	.word	0x08026d78
 80034b8:	08027430 	.word	0x08027430

080034bc <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80034bc:	b510      	push	{r4, lr}
 80034be:	4604      	mov	r4, r0
}
 80034c0:	f7ff ffe8 	bl	8003494 <_ZN15Screen1ViewBaseD1Ev>
 80034c4:	f245 11b4 	movw	r1, #20916	; 0x51b4
 80034c8:	4620      	mov	r0, r4
 80034ca:	f021 f8c8 	bl	802465e <_ZdlPvj>
 80034ce:	4620      	mov	r0, r4
 80034d0:	bd10      	pop	{r4, pc}

080034d2 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80034d2:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	4604      	mov	r4, r0
        setX(x);
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 80034da:	4615      	mov	r5, r2
        setX(x);
 80034dc:	4798      	blx	r3
        setY(y);
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	4620      	mov	r0, r4
 80034e2:	4629      	mov	r1, r5
 80034e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 80034e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80034ea:	4718      	bx	r3

080034ec <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80034ec:	b570      	push	{r4, r5, r6, lr}
 80034ee:	4604      	mov	r4, r0
 80034f0:	461d      	mov	r5, r3
 80034f2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80034f6:	f7ff ffec 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	4629      	mov	r1, r5
 80034fe:	4620      	mov	r0, r4
 8003500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003502:	4798      	blx	r3
        setHeight(height);
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	4631      	mov	r1, r6
 8003508:	4620      	mov	r0, r4
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 800350c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003510:	4718      	bx	r3
	...

08003514 <_ZN8touchgfx6WidgetC1Ev>:
        : x(0), y(0), width(0), height(0)
 8003514:	2200      	movs	r2, #0
 8003516:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800351a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          visible(true)
 800351e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003522:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800352a:	8482      	strh	r2, [r0, #36]	; 0x24
class Widget : public Drawable
 800352c:	4a01      	ldr	r2, [pc, #4]	; (8003534 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800352e:	6002      	str	r2, [r0, #0]
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	080268b0 	.word	0x080268b0

08003538 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8003538:	b510      	push	{r4, lr}
 800353a:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 800353c:	2226      	movs	r2, #38	; 0x26
 800353e:	2100      	movs	r1, #0
 8003540:	f021 fa26 	bl	8024990 <memset>
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff ffe5 	bl	8003514 <_ZN8touchgfx6WidgetC1Ev>
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <_ZN8touchgfx3BoxC1Ev+0x24>)
    {
    }
 800354c:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	23ff      	movs	r3, #255	; 0xff
 8003552:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
        : color(col)
 8003556:	2300      	movs	r3, #0
 8003558:	62a3      	str	r3, [r4, #40]	; 0x28
    }
 800355a:	bd10      	pop	{r4, pc}
 800355c:	08027ed4 	.word	0x08027ed4

08003560 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8003560:	b510      	push	{r4, lr}
 8003562:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003564:	2226      	movs	r2, #38	; 0x26
 8003566:	2100      	movs	r1, #0
 8003568:	f021 fa12 	bl	8024990 <memset>
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff ffd1 	bl	8003514 <_ZN8touchgfx6WidgetC1Ev>
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8003574:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    {
    }
 8003578:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800357a:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 800357c:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800357e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003584:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003586:	2300      	movs	r3, #0
 8003588:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	8723      	strh	r3, [r4, #56]	; 0x38
 8003592:	63e3      	str	r3, [r4, #60]	; 0x3c
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8003594:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	08027e44 	.word	0x08027e44
 80035a0:	080262c0 	.word	0x080262c0

080035a4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80035a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80035a6:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 80035a8:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 80035aa:	f016 fc9e 	bl	8019eea <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 80035ae:	2800      	cmp	r0, #0
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035b0:	462a      	mov	r2, r5
 80035b2:	9901      	ldr	r1, [sp, #4]
 80035b4:	ea4f 1440 	mov.w	r4, r0, lsl #5
 80035b8:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 80035bc:	db04      	blt.n	80035c8 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035be:	f016 fcb3 	bl	8019f28 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 80035c2:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 80035c4:	b003      	add	sp, #12
 80035c6:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 80035c8:	f016 fcae 	bl	8019f28 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 80035cc:	1a20      	subs	r0, r4, r0
 80035ce:	e7f9      	b.n	80035c4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

080035d0 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80035d0:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80035d2:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80035d6:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80035d8:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 80035dc:	1963      	adds	r3, r4, r5
 80035de:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 80035e2:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 80035e4:	b22d      	sxth	r5, r5
 80035e6:	442c      	add	r4, r5
 80035e8:	1e69      	subs	r1, r5, #1
 80035ea:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 80035ee:	3c01      	subs	r4, #1
 80035f0:	1ad2      	subs	r2, r2, r3
 80035f2:	1af0      	subs	r0, r6, r3
 80035f4:	f7ff ffd6 	bl	80035a4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 80035f8:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80035fc:	bd70      	pop	{r4, r5, r6, pc}

080035fe <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 80035fe:	b538      	push	{r3, r4, r5, lr}
 8003600:	4604      	mov	r4, r0
 8003602:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003604:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 8003608:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 800360c:	440b      	add	r3, r1
 800360e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8003612:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8003614:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 8003618:	b209      	sxth	r1, r1
 800361a:	1b52      	subs	r2, r2, r5
 800361c:	1b40      	subs	r0, r0, r5
 800361e:	3901      	subs	r1, #1
 8003620:	f7ff ffc0 	bl	80035a4 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 8003624:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 8003628:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800362c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003630 <_ZN8touchgfx15GraphLabelsBaseC1Ev>:
 * @see GraphLabelsX, GraphLabelsY
 */
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
 8003630:	b510      	push	{r4, lr}
 8003632:	4604      	mov	r4, r0
        : CanvasWidget()
 8003634:	f010 fa8c 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x34>)
        : color(col)
 800363a:	2300      	movs	r3, #0
    {
    }
 800363c:	4620      	mov	r0, r4
          dataScale(1), labelInterval(0), labelTypedText(TYPED_TEXT_INVALID), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 800363e:	6022      	str	r2, [r4, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003644:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003648:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 800364c:	64a3      	str	r3, [r4, #72]	; 0x48
 800364e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8003652:	4a05      	ldr	r2, [pc, #20]	; (8003668 <_ZN8touchgfx15GraphLabelsBaseC1Ev+0x38>)
 8003654:	63a2      	str	r2, [r4, #56]	; 0x38
 8003656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800365a:	87a2      	strh	r2, [r4, #60]	; 0x3c
 800365c:	222e      	movs	r2, #46	; 0x2e
 800365e:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    }
 8003662:	bd10      	pop	{r4, pc}
 8003664:	08027da4 	.word	0x08027da4
 8003668:	080262c0 	.word	0x080262c0

0800366c <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	4604      	mov	r4, r0
        : presenter(0)
 8003672:	2700      	movs	r7, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003674:	f64f 75ff 	movw	r5, #65535	; 0xffff
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003678:	46a3      	mov	fp, r4
 800367a:	f104 096c 	add.w	r9, r4, #108	; 0x6c
 800367e:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 8003682:	f204 564c 	addw	r6, r4, #1356	; 0x54c
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 8003686:	f504 5880 	add.w	r8, r4, #4096	; 0x1000
Screen1ViewBase::Screen1ViewBase() :
 800368a:	ed2d 8b10 	vpush	{d8-d15}
 800368e:	b095      	sub	sp, #84	; 0x54
 8003690:	f016 fdf4 	bl	801a27c <_ZN8touchgfx6ScreenC1Ev>
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003694:	4beb      	ldr	r3, [pc, #940]	; (8003a44 <_ZN15Screen1ViewBaseC1Ev+0x3d8>)
 8003696:	63e7      	str	r7, [r4, #60]	; 0x3c
 8003698:	f84b 3b40 	str.w	r3, [fp], #64
 800369c:	4658      	mov	r0, fp
 800369e:	f7ff ff4b 	bl	8003538 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 80036a2:	2226      	movs	r2, #38	; 0x26
 80036a4:	4639      	mov	r1, r7
 80036a6:	4648      	mov	r0, r9
 80036a8:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
 80036ac:	f021 f970 	bl	8024990 <memset>
 80036b0:	4648      	mov	r0, r9
 80036b2:	f7ff ff2f 	bl	8003514 <_ZN8touchgfx6WidgetC1Ev>
 80036b6:	4be4      	ldr	r3, [pc, #912]	; (8003a48 <_ZN15Screen1ViewBaseC1Ev+0x3dc>)
    {
        Image::setBitmap(bmp);
 80036b8:	a912      	add	r1, sp, #72	; 0x48
 80036ba:	4648      	mov	r0, r9
        : Widget(), bitmap(bmp), alpha(255)
 80036bc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80036be:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80036c2:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 80036c6:	f04f 0501 	mov.w	r5, #1
 80036ca:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
        Image::setBitmap(bmp);
 80036ce:	f012 fe9b 	bl	8016408 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80036d2:	4650      	mov	r0, sl
 80036d4:	f7ff ff44 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80036d8:	f104 03e0 	add.w	r3, r4, #224	; 0xe0
 80036dc:	4618      	mov	r0, r3
 80036de:	ee08 3a90 	vmov	s17, r3
 80036e2:	f7ff ff3d 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80036e6:	f504 7394 	add.w	r3, r4, #296	; 0x128
 80036ea:	4618      	mov	r0, r3
 80036ec:	ee09 3a10 	vmov	s18, r3
 80036f0:	f7ff ff36 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80036f4:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 80036f8:	4618      	mov	r0, r3
 80036fa:	ee09 3a90 	vmov	s19, r3
 80036fe:	f7ff ff2f 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003702:	f504 73dc 	add.w	r3, r4, #440	; 0x1b8
 8003706:	4618      	mov	r0, r3
 8003708:	ee0a 3a10 	vmov	s20, r3
 800370c:	f7ff ff28 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003710:	f504 7300 	add.w	r3, r4, #512	; 0x200
 8003714:	4618      	mov	r0, r3
 8003716:	ee0a 3a90 	vmov	s21, r3
 800371a:	f7ff ff21 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 800371e:	f504 7312 	add.w	r3, r4, #584	; 0x248
 8003722:	4618      	mov	r0, r3
 8003724:	ee0b 3a10 	vmov	s22, r3
 8003728:	f7ff ff1a 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 800372c:	f504 7324 	add.w	r3, r4, #656	; 0x290
 8003730:	4618      	mov	r0, r3
 8003732:	ee0b 3a90 	vmov	s23, r3
 8003736:	f7ff ff13 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 800373a:	f504 7336 	add.w	r3, r4, #728	; 0x2d8
 800373e:	4618      	mov	r0, r3
 8003740:	ee0c 3a10 	vmov	s24, r3
 8003744:	f7ff ff0c 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003748:	f504 7348 	add.w	r3, r4, #800	; 0x320
 800374c:	4618      	mov	r0, r3
 800374e:	ee0c 3a90 	vmov	s25, r3
 8003752:	f7ff ff05 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003756:	f504 735a 	add.w	r3, r4, #872	; 0x368
 800375a:	4618      	mov	r0, r3
 800375c:	ee0d 3a10 	vmov	s26, r3
 8003760:	f7ff fefe 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003764:	f504 736c 	add.w	r3, r4, #944	; 0x3b0
 8003768:	4618      	mov	r0, r3
 800376a:	ee0d 3a90 	vmov	s27, r3
 800376e:	f7ff fef7 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003772:	f504 737e 	add.w	r3, r4, #1016	; 0x3f8
 8003776:	4618      	mov	r0, r3
 8003778:	ee0e 3a10 	vmov	s28, r3
 800377c:	f7ff fef0 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003780:	f504 6388 	add.w	r3, r4, #1088	; 0x440
 8003784:	4618      	mov	r0, r3
 8003786:	ee0e 3a90 	vmov	s29, r3
 800378a:	f7ff fee9 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 800378e:	f504 6391 	add.w	r3, r4, #1160	; 0x488
 8003792:	4618      	mov	r0, r3
 8003794:	ee0f 3a10 	vmov	s30, r3
 8003798:	f7ff fee2 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 800379c:	f504 639a 	add.w	r3, r4, #1232	; 0x4d0
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 80037a0:	4618      	mov	r0, r3
 80037a2:	9307      	str	r3, [sp, #28]
 80037a4:	f7ff fec8 	bl	8003538 <_ZN8touchgfx3BoxC1Ev>
 80037a8:	4ba8      	ldr	r3, [pc, #672]	; (8003a4c <_ZN15Screen1ViewBaseC1Ev+0x3e0>)
 80037aa:	f8c4 74fc 	str.w	r7, [r4, #1276]	; 0x4fc
 80037ae:	f8c4 34d0 	str.w	r3, [r4, #1232]	; 0x4d0
 80037b2:	f204 5304 	addw	r3, r4, #1284	; 0x504
 80037b6:	f8a4 7500 	strh.w	r7, [r4, #1280]	; 0x500
 80037ba:	4618      	mov	r0, r3
 80037bc:	ee0f 3a90 	vmov	s31, r3
 80037c0:	f7ff fece 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037c4:	2164      	movs	r1, #100	; 0x64
 80037c6:	4630      	mov	r0, r6
 80037c8:	f010 feac 	bl	8014524 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80037cc:	4ba0      	ldr	r3, [pc, #640]	; (8003a50 <_ZN15Screen1ViewBaseC1Ev+0x3e4>)
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037ce:	4639      	mov	r1, r7
 80037d0:	2263      	movs	r2, #99	; 0x63
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037d2:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 80037d6:	2301      	movs	r3, #1
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037d8:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 80037da:	f8c4 768c 	str.w	r7, [r4, #1676]	; 0x68c
 80037de:	f8c4 3688 	str.w	r3, [r4, #1672]	; 0x688
{
public:
    GraphScroll()
        : GraphScrollData(CAPACITY, y)
 80037e2:	f204 639c 	addw	r3, r4, #1692	; 0x69c
 80037e6:	f8c4 7694 	str.w	r7, [r4, #1684]	; 0x694
 80037ea:	f8c4 3690 	str.w	r3, [r4, #1680]	; 0x690
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 80037ee:	f7ff f989 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80037f2:	4b98      	ldr	r3, [pc, #608]	; (8003a54 <_ZN15Screen1ViewBaseC1Ev+0x3e8>)
        : DynamicDataGraph(capacity, values), current(0)
 80037f4:	f8a4 7698 	strh.w	r7, [r4, #1688]	; 0x698
        : GraphScrollData(CAPACITY, y)
 80037f8:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
 80037fc:	f604 032c 	addw	r3, r4, #2092	; 0x82c
        : CanvasWidget()
 8003800:	4618      	mov	r0, r3
 8003802:	930a      	str	r3, [sp, #40]	; 0x28
 8003804:	f010 f9a4 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003808:	2301      	movs	r3, #1
 800380a:	f8c4 7858 	str.w	r7, [r4, #2136]	; 0x858
 800380e:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
 8003812:	230a      	movs	r3, #10
 8003814:	f884 5864 	strb.w	r5, [r4, #2148]	; 0x864
 8003818:	f8c4 3860 	str.w	r3, [r4, #2144]	; 0x860
class GraphElementGridX : public GraphElementGridBase
 800381c:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <_ZN15Screen1ViewBaseC1Ev+0x3ec>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800381e:	f8c4 7868 	str.w	r7, [r4, #2152]	; 0x868
class GraphElementGridX : public GraphElementGridBase
 8003822:	f8c4 382c 	str.w	r3, [r4, #2092]	; 0x82c
 8003826:	f604 036c 	addw	r3, r4, #2156	; 0x86c
        : CanvasWidget()
 800382a:	4618      	mov	r0, r3
 800382c:	930b      	str	r3, [sp, #44]	; 0x2c
 800382e:	f010 f98f 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003832:	2301      	movs	r3, #1
 8003834:	f8c4 7898 	str.w	r7, [r4, #2200]	; 0x898
 8003838:	f8c4 389c 	str.w	r3, [r4, #2204]	; 0x89c
 800383c:	230a      	movs	r3, #10
 800383e:	f884 58a4 	strb.w	r5, [r4, #2212]	; 0x8a4
 8003842:	f504 55e9 	add.w	r5, r4, #7456	; 0x1d20
 8003846:	f8c4 38a0 	str.w	r3, [r4, #2208]	; 0x8a0
class GraphElementGridY : public GraphElementGridBase
 800384a:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <_ZN15Screen1ViewBaseC1Ev+0x3f0>)
 800384c:	351c      	adds	r5, #28
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800384e:	f8c4 78a8 	str.w	r7, [r4, #2216]	; 0x8a8
class GraphElementGridY : public GraphElementGridBase
 8003852:	f8c4 386c 	str.w	r3, [r4, #2156]	; 0x86c
 8003856:	f604 03ac 	addw	r3, r4, #2220	; 0x8ac
        : CanvasWidget()
 800385a:	4618      	mov	r0, r3
 800385c:	930c      	str	r3, [sp, #48]	; 0x30
 800385e:	f010 f977 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003862:	f04f 0202 	mov.w	r2, #2
 8003866:	4b7e      	ldr	r3, [pc, #504]	; (8003a60 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
 8003868:	f884 28d8 	strb.w	r2, [r4, #2264]	; 0x8d8
 800386c:	f604 02dc 	addw	r2, r4, #2268	; 0x8dc
 8003870:	f8c4 38ac 	str.w	r3, [r4, #2220]	; 0x8ac
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003874:	4610      	mov	r0, r2
 8003876:	920d      	str	r2, [sp, #52]	; 0x34
 8003878:	f7fe fefc 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
 800387e:	f504 610f 	add.w	r1, r4, #2288	; 0x8f0
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003882:	f8c4 78e8 	str.w	r7, [r4, #2280]	; 0x8e8
 8003886:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800388a:	f8c4 38dc 	str.w	r3, [r4, #2268]	; 0x8dc
 800388e:	4608      	mov	r0, r1
 8003890:	9108      	str	r1, [sp, #32]
 8003892:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
 8003896:	f006 fdad 	bl	800a3f4 <_ZN11customGraphC1Ev>
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 800389a:	2164      	movs	r1, #100	; 0x64
 800389c:	4628      	mov	r0, r5
 800389e:	f010 fe41 	bl	8014524 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80038a2:	4a71      	ldr	r2, [pc, #452]	; (8003a68 <_ZN15Screen1ViewBaseC1Ev+0x3fc>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80038a4:	4639      	mov	r1, r7
 80038a6:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80038a8:	f8c8 2d3c 	str.w	r2, [r8, #3388]	; 0xd3c
{
public:
    Graph()
        : GraphData(CAPACITY, x, y)
 80038ac:	f504 52f4 	add.w	r2, r4, #7808	; 0x1e80
 80038b0:	f8c8 2e78 	str.w	r2, [r8, #3704]	; 0xe78
 80038b4:	f505 7235 	add.w	r2, r5, #724	; 0x2d4
 80038b8:	f8c8 2e7c 	str.w	r2, [r8, #3708]	; 0xe7c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80038bc:	2263      	movs	r2, #99	; 0x63
 80038be:	f7ff f921 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80038c2:	f504 5106 	add.w	r1, r4, #8576	; 0x2180
 80038c6:	4a69      	ldr	r2, [pc, #420]	; (8003a6c <_ZN15Screen1ViewBaseC1Ev+0x400>)
 80038c8:	3120      	adds	r1, #32
 80038ca:	f8c8 2d3c 	str.w	r2, [r8, #3388]	; 0xd3c

/**
 * GraphLabelsX will draw labels along the X axis at given intervals. By combining two
 * GraphLabelsX it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsX : public GraphLabelsBase
 80038ce:	f504 5800 	add.w	r8, r4, #8192	; 0x2000
 80038d2:	4608      	mov	r0, r1
 80038d4:	9103      	str	r1, [sp, #12]
 80038d6:	f7ff feab 	bl	8003630 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80038da:	f504 5107 	add.w	r1, r4, #8640	; 0x21c0
 80038de:	4a64      	ldr	r2, [pc, #400]	; (8003a70 <_ZN15Screen1ViewBaseC1Ev+0x404>)
 80038e0:	312c      	adds	r1, #44	; 0x2c
 80038e2:	f8c8 21a0 	str.w	r2, [r8, #416]	; 0x1a0

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 80038e6:	4608      	mov	r0, r1
 80038e8:	9104      	str	r1, [sp, #16]
 80038ea:	f7ff fea1 	bl	8003630 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 80038ee:	f504 5108 	add.w	r1, r4, #8704	; 0x2200
 80038f2:	4a60      	ldr	r2, [pc, #384]	; (8003a74 <_ZN15Screen1ViewBaseC1Ev+0x408>)
 80038f4:	3138      	adds	r1, #56	; 0x38
 80038f6:	f8c8 21ec 	str.w	r2, [r8, #492]	; 0x1ec
        : CanvasWidget()
 80038fa:	4608      	mov	r0, r1
 80038fc:	9105      	str	r1, [sp, #20]
 80038fe:	f010 f927 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8003902:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <_ZN15Screen1ViewBaseC1Ev+0x3f4>)
 8003904:	f8c8 3238 	str.w	r3, [r8, #568]	; 0x238
 8003908:	f04f 0302 	mov.w	r3, #2
 800390c:	f888 3264 	strb.w	r3, [r8, #612]	; 0x264
 8003910:	f504 5309 	add.w	r3, r4, #8768	; 0x2240
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	4618      	mov	r0, r3
 8003918:	9306      	str	r3, [sp, #24]
 800391a:	f7fe feab 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <_ZN15Screen1ViewBaseC1Ev+0x3f8>)
 8003920:	f8c8 7274 	str.w	r7, [r8, #628]	; 0x274
 8003924:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003928:	f8c8 3268 	str.w	r3, [r8, #616]	; 0x268
 800392c:	f504 5309 	add.w	r3, r4, #8768	; 0x2240
 8003930:	f8c8 2270 	str.w	r2, [r8, #624]	; 0x270
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003934:	f104 0804 	add.w	r8, r4, #4
 8003938:	333c      	adds	r3, #60	; 0x3c
 800393a:	4618      	mov	r0, r3
 800393c:	ee08 3a10 	vmov	s16, r3
 8003940:	f7ff fe0e 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 8003944:	f504 43a3 	add.w	r3, r4, #20864	; 0x5180
        : pobject(pObject), pmemfun(pmemfun_2)
 8003948:	4a4b      	ldr	r2, [pc, #300]	; (8003a78 <_ZN15Screen1ViewBaseC1Ev+0x40c>)
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800394a:	f504 500b 	add.w	r0, r4, #8896	; 0x22c0
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 800394e:	3324      	adds	r3, #36	; 0x24
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003950:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8003954:	3004      	adds	r0, #4
    graphDraggedCallback(this, &Screen1ViewBase::graphDraggedCallbackHandler)
 8003956:	9309      	str	r3, [sp, #36]	; 0x24
 8003958:	f504 43a0 	add.w	r3, r4, #20480	; 0x5000
 800395c:	e9c3 2469 	strd	r2, r4, [r3, #420]	; 0x1a4
 8003960:	4a46      	ldr	r2, [pc, #280]	; (8003a7c <_ZN15Screen1ViewBaseC1Ev+0x410>)
 8003962:	e9c3 276b 	strd	r2, r7, [r3, #428]	; 0x1ac
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8003966:	f013 fc4b 	bl	8017200 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    __background.setPosition(0, 0, 800, 480);
 800396a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800396e:	463a      	mov	r2, r7
 8003970:	4639      	mov	r1, r7
 8003972:	4658      	mov	r0, fp
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f44f 7348 	mov.w	r3, #800	; 0x320
 800397a:	f7ff fdb7 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 800397e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003982:	4659      	mov	r1, fp
 8003984:	4640      	mov	r0, r8
 8003986:	66a3      	str	r3, [r4, #104]	; 0x68
 8003988:	f00e fe68 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setXY(0, 0);
 800398c:	463a      	mov	r2, r7
 800398e:	4639      	mov	r1, r7
 8003990:	4648      	mov	r0, r9
 8003992:	f7ff fd9e 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_SHATTERED_RAIN_DARK_ID));
 8003996:	4648      	mov	r0, r9
 8003998:	a912      	add	r1, sp, #72	; 0x48
 800399a:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 800399e:	f012 fd33 	bl	8016408 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80039a2:	4649      	mov	r1, r9
 80039a4:	4640      	mov	r0, r8
        boundingArea = calculateBoundingArea();
 80039a6:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80039aa:	f00e fe57 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(443, 3);
 80039ae:	2203      	movs	r2, #3
 80039b0:	4650      	mov	r0, sl
 80039b2:	f240 11bb 	movw	r1, #443	; 0x1bb
 80039b6:	f7ff fd8c 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 80039be:	4651      	mov	r1, sl
 80039c0:	4648      	mov	r0, r9
        color = newColor;
 80039c2:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
        linespace = space;
 80039c6:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 80039ca:	f012 f919 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 80039ce:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 80039d2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003a80 <_ZN15Screen1ViewBaseC1Ev+0x414>
 80039d6:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 80039da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80039de:	231c      	movs	r3, #28
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HRIB));
 80039e0:	4650      	mov	r0, sl
 80039e2:	a912      	add	r1, sp, #72	; 0x48
 80039e4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 80039e8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80039ec:	f012 fbb0 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80039f0:	4651      	mov	r1, sl
 80039f2:	4640      	mov	r0, r8
        color = newColor;
 80039f4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8003a84 <_ZN15Screen1ViewBaseC1Ev+0x418>
 80039f8:	f00e fe30 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2.setXY(308, 242);
 80039fc:	22f2      	movs	r2, #242	; 0xf2
 80039fe:	f44f 719a 	mov.w	r1, #308	; 0x134
 8003a02:	ee18 0a90 	vmov	r0, s17
 8003a06:	f7ff fd64 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8003a0a:	4648      	mov	r0, r9
 8003a0c:	ee18 1a90 	vmov	r1, s17
        color = newColor;
 8003a10:	f8c4 a110 	str.w	sl, [r4, #272]	; 0x110
        linespace = space;
 8003a14:	f8a4 7114 	strh.w	r7, [r4, #276]	; 0x114
        boundingArea = calculateBoundingArea();
 8003a18:	f012 f8f2 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003a1c:	f504 738e 	add.w	r3, r4, #284	; 0x11c
 8003a20:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003a24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003a28:	231b      	movs	r3, #27
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AXIG));
 8003a2a:	a912      	add	r1, sp, #72	; 0x48
 8003a2c:	ee18 0a90 	vmov	r0, s17
 8003a30:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003a34:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003a38:	f012 fb8a 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003a3c:	ee18 1a90 	vmov	r1, s17
 8003a40:	4640      	mov	r0, r8
 8003a42:	e021      	b.n	8003a88 <_ZN15Screen1ViewBaseC1Ev+0x41c>
 8003a44:	08026d78 	.word	0x08026d78
 8003a48:	08027fa4 	.word	0x08027fa4
 8003a4c:	08027f3c 	.word	0x08027f3c
 8003a50:	08027920 	.word	0x08027920
 8003a54:	08026a88 	.word	0x08026a88
 8003a58:	08026918 	.word	0x08026918
 8003a5c:	080269d0 	.word	0x080269d0
 8003a60:	08027be8 	.word	0x08027be8
 8003a64:	08027734 	.word	0x08027734
 8003a68:	080277e4 	.word	0x080277e4
 8003a6c:	08026c24 	.word	0x08026c24
 8003a70:	08027c64 	.word	0x08027c64
 8003a74:	08027d04 	.word	0x08027d04
 8003a78:	08026d60 	.word	0x08026d60
 8003a7c:	08003395 	.word	0x08003395
 8003a80:	080262c0 	.word	0x080262c0
 8003a84:	fffcfcfc 	.word	0xfffcfcfc
 8003a88:	f00e fde8 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2.setXY(509, 82);
 8003a8c:	2252      	movs	r2, #82	; 0x52
 8003a8e:	f240 11fd 	movw	r1, #509	; 0x1fd
 8003a92:	ee19 0a10 	vmov	r0, s18
 8003a96:	f7ff fd1c 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 8003a9a:	4648      	mov	r0, r9
 8003a9c:	ee19 1a10 	vmov	r1, s18
        color = newColor;
 8003aa0:	f8c4 a158 	str.w	sl, [r4, #344]	; 0x158
        linespace = space;
 8003aa4:	f8a4 715c 	strh.w	r7, [r4, #348]	; 0x15c
 8003aa8:	f04f 0a16 	mov.w	sl, #22
        boundingArea = calculateBoundingArea();
 8003aac:	f012 f8a8 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ab0:	f504 73b2 	add.w	r3, r4, #356	; 0x164
 8003ab4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003ab8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003abc:	2310      	movs	r3, #16
    textArea2_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T87L));
 8003abe:	a912      	add	r1, sp, #72	; 0x48
 8003ac0:	ee19 0a10 	vmov	r0, s18
 8003ac4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ac8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003acc:	f012 fb40 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ad0:	ee19 1a10 	vmov	r1, s18
 8003ad4:	4640      	mov	r0, r8
 8003ad6:	f00e fdc1 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1.setXY(125, 2);
 8003ada:	2202      	movs	r2, #2
 8003adc:	217d      	movs	r1, #125	; 0x7d
 8003ade:	ee19 0a90 	vmov	r0, s19
 8003ae2:	f7ff fcf6 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003aea:	4648      	mov	r0, r9
 8003aec:	ee19 1a90 	vmov	r1, s19
        color = newColor;
 8003af0:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
        linespace = space;
 8003af4:	f8a4 71a4 	strh.w	r7, [r4, #420]	; 0x1a4
        boundingArea = calculateBoundingArea();
 8003af8:	f012 f882 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003afc:	f504 73d6 	add.w	r3, r4, #428	; 0x1ac
 8003b00:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003b04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b08:	231a      	movs	r3, #26
    textArea2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9869));
 8003b0a:	a912      	add	r1, sp, #72	; 0x48
 8003b0c:	ee19 0a90 	vmov	r0, s19
 8003b10:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003b14:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003b18:	f012 fb1a 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b1c:	ee19 1a90 	vmov	r1, s19
 8003b20:	4640      	mov	r0, r8
 8003b22:	f00e fd9b 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_3.setXY(2, 109);
 8003b26:	226d      	movs	r2, #109	; 0x6d
 8003b28:	2102      	movs	r1, #2
 8003b2a:	ee1a 0a10 	vmov	r0, s20
 8003b2e:	f7ff fcd0 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b32:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b36:	4648      	mov	r0, r9
 8003b38:	ee1a 1a10 	vmov	r1, s20
        color = newColor;
 8003b3c:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
        linespace = space;
 8003b40:	f8a4 71ec 	strh.w	r7, [r4, #492]	; 0x1ec
        boundingArea = calculateBoundingArea();
 8003b44:	f012 f85c 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b48:	f504 73fa 	add.w	r3, r4, #500	; 0x1f4
 8003b4c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b54:	230d      	movs	r3, #13
    textArea2_1_3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5N1M));
 8003b56:	a912      	add	r1, sp, #72	; 0x48
 8003b58:	ee1a 0a10 	vmov	r0, s20
 8003b5c:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003b60:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003b64:	f012 faf4 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003b68:	ee1a 1a10 	vmov	r1, s20
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	f00e fd75 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_2.setXY(102, 101);
 8003b72:	2265      	movs	r2, #101	; 0x65
 8003b74:	2166      	movs	r1, #102	; 0x66
 8003b76:	ee1a 0a90 	vmov	r0, s21
 8003b7a:	f7ff fcaa 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003b7e:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003b82:	4648      	mov	r0, r9
 8003b84:	ee1a 1a90 	vmov	r1, s21
        color = newColor;
 8003b88:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
        linespace = space;
 8003b8c:	f8a4 7234 	strh.w	r7, [r4, #564]	; 0x234
        boundingArea = calculateBoundingArea();
 8003b90:	f012 f836 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003b94:	f504 730f 	add.w	r3, r4, #572	; 0x23c
 8003b98:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ba0:	230e      	movs	r3, #14
    textArea2_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8RMH));
 8003ba2:	a912      	add	r1, sp, #72	; 0x48
 8003ba4:	ee1a 0a90 	vmov	r0, s21
 8003ba8:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003bac:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003bb0:	f012 face 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003bb4:	ee1a 1a90 	vmov	r1, s21
 8003bb8:	4640      	mov	r0, r8
 8003bba:	f00e fd4f 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1.setXY(179, 222);
 8003bbe:	22de      	movs	r2, #222	; 0xde
 8003bc0:	21b3      	movs	r1, #179	; 0xb3
 8003bc2:	ee1b 0a10 	vmov	r0, s22
 8003bc6:	f7ff fc84 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003bca:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003bce:	4648      	mov	r0, r9
 8003bd0:	ee1b 1a10 	vmov	r1, s22
        color = newColor;
 8003bd4:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
        linespace = space;
 8003bd8:	f8a4 727c 	strh.w	r7, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 8003bdc:	f012 f810 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003be0:	f504 7321 	add.w	r3, r4, #644	; 0x284
 8003be4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003be8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003bec:	2319      	movs	r3, #25
    textArea2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UM8B));
 8003bee:	a912      	add	r1, sp, #72	; 0x48
 8003bf0:	ee1b 0a10 	vmov	r0, s22
 8003bf4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003bf8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003bfc:	f012 faa8 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c00:	ee1b 1a10 	vmov	r1, s22
 8003c04:	4640      	mov	r0, r8
 8003c06:	f00e fd29 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1.setXY(154, 171);
 8003c0a:	22ab      	movs	r2, #171	; 0xab
 8003c0c:	219a      	movs	r1, #154	; 0x9a
 8003c0e:	ee1b 0a90 	vmov	r0, s23
 8003c12:	f7ff fc5e 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c16:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003c1a:	4648      	mov	r0, r9
 8003c1c:	ee1b 1a90 	vmov	r1, s23
        color = newColor;
 8003c20:	f8c4 32c0 	str.w	r3, [r4, #704]	; 0x2c0
        linespace = space;
 8003c24:	f8a4 72c4 	strh.w	r7, [r4, #708]	; 0x2c4
        boundingArea = calculateBoundingArea();
 8003c28:	f011 ffea 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c2c:	f504 7333 	add.w	r3, r4, #716	; 0x2cc
 8003c30:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c38:	2318      	movs	r3, #24
    textArea2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MTUS));
 8003c3a:	a912      	add	r1, sp, #72	; 0x48
 8003c3c:	ee1b 0a90 	vmov	r0, s23
 8003c40:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003c44:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003c48:	f012 fa82 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c4c:	ee1b 1a90 	vmov	r1, s23
 8003c50:	4640      	mov	r0, r8
 8003c52:	f00e fd03 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2.setXY(263, 222);
 8003c56:	22de      	movs	r2, #222	; 0xde
 8003c58:	f240 1107 	movw	r1, #263	; 0x107
 8003c5c:	ee1c 0a10 	vmov	r0, s24
 8003c60:	f7ff fc37 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003c64:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003c68:	4648      	mov	r0, r9
 8003c6a:	ee1c 1a10 	vmov	r1, s24
        color = newColor;
 8003c6e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        linespace = space;
 8003c72:	f8a4 730c 	strh.w	r7, [r4, #780]	; 0x30c
        boundingArea = calculateBoundingArea();
 8003c76:	f011 ffc3 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003c7a:	f504 7345 	add.w	r3, r4, #788	; 0x314
 8003c7e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003c82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003c86:	2314      	movs	r3, #20
    textArea2_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LSWL));
 8003c88:	a912      	add	r1, sp, #72	; 0x48
 8003c8a:	ee1c 0a10 	vmov	r0, s24
 8003c8e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003c92:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003c96:	f012 fa5b 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003c9a:	ee1c 1a10 	vmov	r1, s24
 8003c9e:	4640      	mov	r0, r8
 8003ca0:	f00e fcdc 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1.setXY(340, 222);
 8003ca4:	22de      	movs	r2, #222	; 0xde
 8003ca6:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8003caa:	ee1c 0a90 	vmov	r0, s25
 8003cae:	f7ff fc10 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003cb6:	4648      	mov	r0, r9
 8003cb8:	ee1c 1a90 	vmov	r1, s25
        color = newColor;
 8003cbc:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
        linespace = space;
 8003cc0:	f8a4 7354 	strh.w	r7, [r4, #852]	; 0x354
        boundingArea = calculateBoundingArea();
 8003cc4:	f011 ff9c 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003cc8:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8003ccc:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003cd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003cd4:	2313      	movs	r3, #19
    textArea2_1_1_1_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q0BQ));
 8003cd6:	a912      	add	r1, sp, #72	; 0x48
 8003cd8:	ee1c 0a90 	vmov	r0, s25
 8003cdc:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ce0:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003ce4:	f012 fa34 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ce8:	ee1c 1a90 	vmov	r1, s25
 8003cec:	4640      	mov	r0, r8
 8003cee:	f00e fcb5 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1.setXY(417, 222);
 8003cf2:	22de      	movs	r2, #222	; 0xde
 8003cf4:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003cf8:	ee1d 0a10 	vmov	r0, s26
 8003cfc:	f7ff fbe9 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d04:	4648      	mov	r0, r9
 8003d06:	ee1d 1a10 	vmov	r1, s26
        color = newColor;
 8003d0a:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
        linespace = space;
 8003d0e:	f8a4 739c 	strh.w	r7, [r4, #924]	; 0x39c
        boundingArea = calculateBoundingArea();
 8003d12:	f011 ff75 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003d16:	f504 7369 	add.w	r3, r4, #932	; 0x3a4
 8003d1a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003d1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d22:	2312      	movs	r3, #18
    textArea2_1_1_1_2_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N3JM));
 8003d24:	a912      	add	r1, sp, #72	; 0x48
 8003d26:	ee1d 0a10 	vmov	r0, s26
 8003d2a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003d2e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003d32:	f012 fa0d 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003d36:	ee1d 1a10 	vmov	r1, s26
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	f00e fc8e 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_2_1_1_1.setXY(492, 222);
 8003d40:	22de      	movs	r2, #222	; 0xde
 8003d42:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003d46:	ee1d 0a90 	vmov	r0, s27
 8003d4a:	f7ff fbc2 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d52:	4648      	mov	r0, r9
 8003d54:	ee1d 1a90 	vmov	r1, s27
        color = newColor;
 8003d58:	f8c4 33e0 	str.w	r3, [r4, #992]	; 0x3e0
        linespace = space;
 8003d5c:	f8a4 73e4 	strh.w	r7, [r4, #996]	; 0x3e4
        boundingArea = calculateBoundingArea();
 8003d60:	f011 ff4e 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003d64:	f504 737b 	add.w	r3, r4, #1004	; 0x3ec
 8003d68:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003d6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d70:	2311      	movs	r3, #17
    textArea2_1_1_1_2_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F0NS));
 8003d72:	a912      	add	r1, sp, #72	; 0x48
 8003d74:	ee1d 0a90 	vmov	r0, s27
 8003d78:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003d7c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003d80:	f012 f9e6 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003d84:	ee1d 1a90 	vmov	r1, s27
 8003d88:	4640      	mov	r0, r8
 8003d8a:	f00e fc67 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1.setXY(154, 133);
 8003d8e:	2285      	movs	r2, #133	; 0x85
 8003d90:	219a      	movs	r1, #154	; 0x9a
 8003d92:	ee1e 0a10 	vmov	r0, s28
 8003d96:	f7ff fb9c 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003d9e:	4648      	mov	r0, r9
 8003da0:	ee1e 1a10 	vmov	r1, s28
        color = newColor;
 8003da4:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
        linespace = space;
 8003da8:	f8a4 742c 	strh.w	r7, [r4, #1068]	; 0x42c
        boundingArea = calculateBoundingArea();
 8003dac:	f011 ff28 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003db0:	f204 4334 	addw	r3, r4, #1076	; 0x434
 8003db4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003db8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003dbc:	2317      	movs	r3, #23
    textArea2_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0NS1));
 8003dbe:	a912      	add	r1, sp, #72	; 0x48
 8003dc0:	ee1e 0a10 	vmov	r0, s28
 8003dc4:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003dc8:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003dcc:	f012 f9c0 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003dd0:	ee1e 1a10 	vmov	r1, s28
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	f00e fc41 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1.setXY(154, 92);
 8003dda:	225c      	movs	r2, #92	; 0x5c
 8003ddc:	219a      	movs	r1, #154	; 0x9a
 8003dde:	ee1e 0a90 	vmov	r0, s29
 8003de2:	f7ff fb76 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003de6:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003dea:	4648      	mov	r0, r9
 8003dec:	ee1e 1a90 	vmov	r1, s29
        color = newColor;
 8003df0:	f8c4 3470 	str.w	r3, [r4, #1136]	; 0x470
        linespace = space;
 8003df4:	f8a4 7474 	strh.w	r7, [r4, #1140]	; 0x474
        boundingArea = calculateBoundingArea();
 8003df8:	f011 ff02 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003dfc:	f204 437c 	addw	r3, r4, #1148	; 0x47c
 8003e00:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003e04:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Z325));
 8003e08:	a912      	add	r1, sp, #72	; 0x48
 8003e0a:	ee1e 0a90 	vmov	r0, s29
 8003e0e:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003e12:	f8ad a04c 	strh.w	sl, [sp, #76]	; 0x4c
 8003e16:	f012 f99b 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e1a:	ee1e 1a90 	vmov	r1, s29
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f00e fc1c 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_1_1_1_1_1_1.setXY(154, 52);
 8003e24:	2234      	movs	r2, #52	; 0x34
 8003e26:	219a      	movs	r1, #154	; 0x9a
 8003e28:	ee1f 0a10 	vmov	r0, s30
 8003e2c:	f7ff fb51 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003e30:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
 8003e34:	4648      	mov	r0, r9
 8003e36:	ee1f 1a10 	vmov	r1, s30
        color = newColor;
 8003e3a:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
        linespace = space;
 8003e3e:	f8a4 74bc 	strh.w	r7, [r4, #1212]	; 0x4bc
        boundingArea = calculateBoundingArea();
 8003e42:	f011 fedd 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003e46:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8003e4a:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003e4e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003e52:	2315      	movs	r3, #21
    textArea2_1_1_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_OXJT));
 8003e54:	a912      	add	r1, sp, #72	; 0x48
 8003e56:	ee1f 0a10 	vmov	r0, s30
 8003e5a:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003e5e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003e62:	f012 f975 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003e66:	ee1f 1a10 	vmov	r1, s30
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f00e fbf6 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    boxWithBorder1.setPosition(533, 103, 48, 30);
 8003e70:	231e      	movs	r3, #30
 8003e72:	2267      	movs	r2, #103	; 0x67
 8003e74:	f240 2115 	movw	r1, #533	; 0x215
 8003e78:	9807      	ldr	r0, [sp, #28]
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2330      	movs	r3, #48	; 0x30
 8003e7e:	f7ff fb35 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8003e82:	f04f 33ff 	mov.w	r3, #4294967295
 8003e86:	9907      	ldr	r1, [sp, #28]
 8003e88:	4640      	mov	r0, r8
 8003e8a:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 8003e8e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003e92:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8003e96:	f04f 0302 	mov.w	r3, #2
 8003e9a:	f8a4 3500 	strh.w	r3, [r4, #1280]	; 0x500
 8003e9e:	f00e fbdd 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea2_2_1.setXY(552, 108);
 8003ea2:	226c      	movs	r2, #108	; 0x6c
 8003ea4:	f44f 710a 	mov.w	r1, #552	; 0x228
 8003ea8:	ee1f 0a90 	vmov	r0, s31
 8003eac:	f7ff fb11 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8003eb0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003eb4:	4648      	mov	r0, r9
 8003eb6:	ee1f 1a90 	vmov	r1, s31
        color = newColor;
 8003eba:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
        linespace = space;
 8003ebe:	f8a4 7538 	strh.w	r7, [r4, #1336]	; 0x538
        boundingArea = calculateBoundingArea();
 8003ec2:	f011 fe9d 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8003ec6:	f504 63a8 	add.w	r3, r4, #1344	; 0x540
 8003eca:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ed2:	230f      	movs	r3, #15
    textArea2_2_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UAP4));
 8003ed4:	a912      	add	r1, sp, #72	; 0x48
 8003ed6:	ee1f 0a90 	vmov	r0, s31
 8003eda:	f8cd b048 	str.w	fp, [sp, #72]	; 0x48
 8003ede:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8003ee2:	f012 f935 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003ee6:	ee1f 1a90 	vmov	r1, s31
 8003eea:	4640      	mov	r0, r8
 8003eec:	f00e fbb6 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    dynamicGraph1.setPosition(190, 22, 310, 200);
 8003ef0:	23c8      	movs	r3, #200	; 0xc8
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	21be      	movs	r1, #190	; 0xbe
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	f44f 739b 	mov.w	r3, #310	; 0x136
        setIntervalScaled(abs(interval) * dataScale);
 8003efe:	f04f 0b0a 	mov.w	fp, #10
 8003f02:	f7ff faf3 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(1);
 8003f06:	463a      	mov	r2, r7
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7fe ffae 	bl	8002e6c <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8003f10:	463b      	mov	r3, r7
 8003f12:	463a      	mov	r2, r7
 8003f14:	4639      	mov	r1, r7
 8003f16:	4630      	mov	r0, r6
 8003f18:	9700      	str	r7, [sp, #0]
 8003f1a:	f010 fab5 	bl	8014488 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8003f1e:	463b      	mov	r3, r7
 8003f20:	463a      	mov	r2, r7
 8003f22:	4639      	mov	r1, r7
 8003f24:	4630      	mov	r0, r6
 8003f26:	9700      	str	r7, [sp, #0]
 8003f28:	f010 f992 	bl	8014250 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 100);
 8003f2c:	4639      	mov	r1, r7
 8003f2e:	2264      	movs	r2, #100	; 0x64
 8003f30:	4630      	mov	r0, r6
 8003f32:	f7fe fe73 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 8003f36:	f8d4 185c 	ldr.w	r1, [r4, #2140]	; 0x85c
        color = newColor;
 8003f3a:	4ff3      	ldr	r7, [pc, #972]	; (8004308 <_ZN15Screen1ViewBaseC1Ev+0xc9c>)
        lineWidth = width;
 8003f3c:	f04f 0901 	mov.w	r9, #1
        setIntervalScaled(abs(interval) * dataScale);
 8003f40:	fb0b f001 	mul.w	r0, fp, r1
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f44:	2201      	movs	r2, #1
        color = newColor;
 8003f46:	f8c4 7858 	str.w	r7, [r4, #2136]	; 0x858
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8003f4a:	2800      	cmp	r0, #0
        lineWidth = width;
 8003f4c:	f884 9864 	strb.w	r9, [r4, #2148]	; 0x864
 8003f50:	bfb8      	it	lt
 8003f52:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003f54:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f58:	f010 fb48 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003f5c:	2301      	movs	r3, #1
    dynamicGraph1.addGraphElement(dynamicGraph1MajorXAxisGrid);
 8003f5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003f60:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f64:	f8c4 0860 	str.w	r0, [r4, #2144]	; 0x860
 8003f68:	4630      	mov	r0, r6
 8003f6a:	f010 f97c 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(abs(interval) * dataScale);
 8003f6e:	f8d4 189c 	ldr.w	r1, [r4, #2204]	; 0x89c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f72:	2201      	movs	r2, #1
        color = newColor;
 8003f74:	f8c4 7898 	str.w	r7, [r4, #2200]	; 0x898
        setIntervalScaled(abs(interval) * dataScale);
 8003f78:	fb0b f001 	mul.w	r0, fp, r1
        lineWidth = width;
 8003f7c:	f884 98a4 	strb.w	r9, [r4, #2212]	; 0x8a4
 8003f80:	2800      	cmp	r0, #0
 8003f82:	bfb8      	it	lt
 8003f84:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8003f86:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f8a:	f010 fb2f 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        dataScale = scale;
 8003f8e:	2301      	movs	r3, #1
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8003f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8003f92:	f8c4 08a0 	str.w	r0, [r4, #2208]	; 0x8a0
 8003f96:	4630      	mov	r0, r6
        dataScale = scale;
 8003f98:	f8c4 389c 	str.w	r3, [r4, #2204]	; 0x89c
 8003f9c:	f010 f963 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 8003fa0:	4bda      	ldr	r3, [pc, #872]	; (800430c <_ZN15Screen1ViewBaseC1Ev+0xca0>)
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8003fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f8c4 38e8 	str.w	r3, [r4, #2280]	; 0x8e8
    }

    virtual void setColor(colortype color)
    {
        AbstractPainterColor::setColor(color);
        painterRed = Color::getRed(color);
 8003faa:	f64b 13c4 	movw	r3, #47556	; 0xb9c4
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003fae:	f884 a8ee 	strb.w	sl, [r4, #2286]	; 0x8ee
        painterRed = Color::getRed(color);
 8003fb2:	f8a4 38ec 	strh.w	r3, [r4, #2284]	; 0x8ec
        canvasPainter = &painter;
 8003fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fb8:	f8c4 38d4 	str.w	r3, [r4, #2260]	; 0x8d4
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f884 38d8 	strb.w	r3, [r4, #2264]	; 0x8d8
 8003fc2:	f010 f950 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        const float fs = f * (float)scale;
 8003fc6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8003fca:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8004310 <_ZN15Screen1ViewBaseC1Ev+0xca4>
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8003fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	f2c2 80ad 	blt.w	8006140 <_ZN15Screen1ViewBaseC1Ev+0x2ad4>
            return (int)(fs + 0.5f);
 8003fe6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ff2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	f010 fb8f 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8003ffc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004000:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8004314 <_ZN15Screen1ViewBaseC1Ev+0xca8>
 8004004:	ee07 3a90 	vmov	s15, r3
 8004008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004018:	f2c2 80a7 	blt.w	800616a <_ZN15Screen1ViewBaseC1Ev+0x2afe>
            return (int)(fs + 0.5f);
 800401c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004028:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800402c:	4630      	mov	r0, r6
 800402e:	f010 fb74 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004032:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004036:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8004318 <_ZN15Screen1ViewBaseC1Ev+0xcac>
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004042:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	f2c2 80a1 	blt.w	8006194 <_ZN15Screen1ViewBaseC1Ev+0x2b28>
            return (int)(fs + 0.5f);
 8004052:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004056:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800405e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004062:	4630      	mov	r0, r6
 8004064:	f010 fb59 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004068:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800406c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800431c <_ZN15Screen1ViewBaseC1Ev+0xcb0>
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004078:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800407c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004084:	f2c2 809b 	blt.w	80061be <_ZN15Screen1ViewBaseC1Ev+0x2b52>
            return (int)(fs + 0.5f);
 8004088:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800408c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004090:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004094:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004098:	4630      	mov	r0, r6
 800409a:	f010 fb3e 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800409e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80040a2:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004320 <_ZN15Screen1ViewBaseC1Ev+0xcb4>
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ae:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ba:	f2c2 8095 	blt.w	80061e8 <_ZN15Screen1ViewBaseC1Ev+0x2b7c>
            return (int)(fs + 0.5f);
 80040be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040ca:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80040ce:	4630      	mov	r0, r6
 80040d0:	f010 fb23 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80040d4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80040d8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8004324 <_ZN15Screen1ViewBaseC1Ev+0xcb8>
 80040dc:	ee07 3a90 	vmov	s15, r3
 80040e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80040e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f0:	f2c2 808f 	blt.w	8006212 <_ZN15Screen1ViewBaseC1Ev+0x2ba6>
            return (int)(fs + 0.5f);
 80040f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80040f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004100:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004104:	4630      	mov	r0, r6
 8004106:	f010 fb08 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800410a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800410e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8004328 <_ZN15Screen1ViewBaseC1Ev+0xcbc>
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800411e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	f2c2 8089 	blt.w	800623c <_ZN15Screen1ViewBaseC1Ev+0x2bd0>
            return (int)(fs + 0.5f);
 800412a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800412e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004136:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800413a:	4630      	mov	r0, r6
 800413c:	f010 faed 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004140:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004144:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800432c <_ZN15Screen1ViewBaseC1Ev+0xcc0>
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004150:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004154:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	f2c2 8083 	blt.w	8006266 <_ZN15Screen1ViewBaseC1Ev+0x2bfa>
            return (int)(fs + 0.5f);
 8004160:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004170:	4630      	mov	r0, r6
 8004172:	f010 fad2 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004176:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800417a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004330 <_ZN15Screen1ViewBaseC1Ev+0xcc4>
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004186:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800418a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	f2c2 807d 	blt.w	8006290 <_ZN15Screen1ViewBaseC1Ev+0x2c24>
            return (int)(fs + 0.5f);
 8004196:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800419a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800419e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041a2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041a6:	4630      	mov	r0, r6
 80041a8:	f010 fab7 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041ac:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041b0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004334 <_ZN15Screen1ViewBaseC1Ev+0xcc8>
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041bc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c8:	f2c2 8077 	blt.w	80062ba <_ZN15Screen1ViewBaseC1Ev+0x2c4e>
            return (int)(fs + 0.5f);
 80041cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80041d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80041dc:	4630      	mov	r0, r6
 80041de:	f010 fa9c 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80041e2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80041e6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004338 <_ZN15Screen1ViewBaseC1Ev+0xccc>
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80041f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fe:	f2c2 8071 	blt.w	80062e4 <_ZN15Screen1ViewBaseC1Ev+0x2c78>
            return (int)(fs + 0.5f);
 8004202:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800420a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800420e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004212:	4630      	mov	r0, r6
 8004214:	f010 fa81 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004218:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800421c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800433c <_ZN15Screen1ViewBaseC1Ev+0xcd0>
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004228:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800422c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	f2c2 806b 	blt.w	800630e <_ZN15Screen1ViewBaseC1Ev+0x2ca2>
            return (int)(fs + 0.5f);
 8004238:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800423c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004248:	4630      	mov	r0, r6
 800424a:	f010 fa66 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800424e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004252:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004340 <_ZN15Screen1ViewBaseC1Ev+0xcd4>
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800425e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004262:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426a:	f2c2 8065 	blt.w	8006338 <_ZN15Screen1ViewBaseC1Ev+0x2ccc>
            return (int)(fs + 0.5f);
 800426e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800427a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800427e:	4630      	mov	r0, r6
 8004280:	f010 fa4b 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004284:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004288:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004344 <_ZN15Screen1ViewBaseC1Ev+0xcd8>
 800428c:	ee07 3a90 	vmov	s15, r3
 8004290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004294:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a0:	f2c2 805f 	blt.w	8006362 <_ZN15Screen1ViewBaseC1Ev+0x2cf6>
            return (int)(fs + 0.5f);
 80042a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042b4:	4630      	mov	r0, r6
 80042b6:	f010 fa30 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042ba:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042be:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004348 <_ZN15Screen1ViewBaseC1Ev+0xcdc>
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80042ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	f2c2 8059 	blt.w	800638c <_ZN15Screen1ViewBaseC1Ev+0x2d20>
            return (int)(fs + 0.5f);
 80042da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80042de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042e6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80042ea:	4630      	mov	r0, r6
 80042ec:	f010 fa15 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80042f0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80042f4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800434c <_ZN15Screen1ViewBaseC1Ev+0xce0>
 80042f8:	ee07 3a90 	vmov	s15, r3
 80042fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004304:	e048      	b.n	8004398 <_ZN15Screen1ViewBaseC1Ev+0xd2c>
 8004306:	bf00      	nop
 8004308:	ff1497c5 	.word	0xff1497c5
 800430c:	ffc4b916 	.word	0xffc4b916
 8004310:	40fdf751 	.word	0x40fdf751
 8004314:	3fcfeea2 	.word	0x3fcfeea2
 8004318:	40160496 	.word	0x40160496
 800431c:	411aa4d3 	.word	0x411aa4d3
 8004320:	41adf368 	.word	0x41adf368
 8004324:	420f197d 	.word	0x420f197d
 8004328:	4242b180 	.word	0x4242b180
 800432c:	42674305 	.word	0x42674305
 8004330:	4276a3b8 	.word	0x4276a3b8
 8004334:	42706398 	.word	0x42706398
 8004338:	4259c671 	.word	0x4259c671
 800433c:	423c53c6 	.word	0x423c53c6
 8004340:	422358c3 	.word	0x422358c3
 8004344:	4218fa27 	.word	0x4218fa27
 8004348:	42238f61 	.word	0x42238f61
 800434c:	4243ee46 	.word	0x4243ee46
 8004350:	427513c3 	.word	0x427513c3
 8004354:	4296a021 	.word	0x4296a021
 8004358:	42b021ad 	.word	0x42b021ad
 800435c:	42c133eb 	.word	0x42c133eb
 8004360:	42c5a4c8 	.word	0x42c5a4c8
 8004364:	42bbf1d7 	.word	0x42bbf1d7
 8004368:	42a5ab40 	.word	0x42a5ab40
 800436c:	42871a0d 	.word	0x42871a0d
 8004370:	424c7f02 	.word	0x424c7f02
 8004374:	4212d7a0 	.word	0x4212d7a0
 8004378:	41d7103e 	.word	0x41d7103e
 800437c:	41b84d36 	.word	0x41b84d36
 8004380:	41c8c04f 	.word	0x41c8c04f
 8004384:	41fc6dac 	.word	0x41fc6dac
 8004388:	421fa1f2 	.word	0x421fa1f2
 800438c:	423d28aa 	.word	0x423d28aa
 8004390:	424cd2bd 	.word	0x424cd2bd
 8004394:	4248b54f 	.word	0x4248b54f
        if (fs >= 0)
 8004398:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	f2c2 8009 	blt.w	80063b6 <_ZN15Screen1ViewBaseC1Ev+0x2d4a>
            return (int)(fs + 0.5f);
 80043a4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043b4:	4630      	mov	r0, r6
 80043b6:	f010 f9b0 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043ba:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043be:	ed1f 7a1c 	vldr	s14, [pc, #-112]	; 8004350 <_ZN15Screen1ViewBaseC1Ev+0xce4>
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ca:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80043ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	f2c2 8003 	blt.w	80063e0 <_ZN15Screen1ViewBaseC1Ev+0x2d74>
            return (int)(fs + 0.5f);
 80043da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043e6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80043ea:	4630      	mov	r0, r6
 80043ec:	f010 f995 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80043f0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80043f4:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 8004354 <_ZN15Screen1ViewBaseC1Ev+0xce8>
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004400:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	f2c1 87fd 	blt.w	800640a <_ZN15Screen1ViewBaseC1Ev+0x2d9e>
            return (int)(fs + 0.5f);
 8004410:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800441c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004420:	4630      	mov	r0, r6
 8004422:	f010 f97a 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004426:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800442a:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8004358 <_ZN15Screen1ViewBaseC1Ev+0xcec>
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004436:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800443a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	f2c1 87f7 	blt.w	8006434 <_ZN15Screen1ViewBaseC1Ev+0x2dc8>
            return (int)(fs + 0.5f);
 8004446:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800444a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800444e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004452:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004456:	4630      	mov	r0, r6
 8004458:	f010 f95f 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800445c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004460:	ed1f 7a42 	vldr	s14, [pc, #-264]	; 800435c <_ZN15Screen1ViewBaseC1Ev+0xcf0>
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800446c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	f2c1 87f1 	blt.w	800645e <_ZN15Screen1ViewBaseC1Ev+0x2df2>
            return (int)(fs + 0.5f);
 800447c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004488:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800448c:	4630      	mov	r0, r6
 800448e:	f010 f944 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004492:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004496:	ed1f 7a4e 	vldr	s14, [pc, #-312]	; 8004360 <_ZN15Screen1ViewBaseC1Ev+0xcf4>
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044a2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	f2c1 87eb 	blt.w	8006488 <_ZN15Screen1ViewBaseC1Ev+0x2e1c>
            return (int)(fs + 0.5f);
 80044b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044be:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044c2:	4630      	mov	r0, r6
 80044c4:	f010 f929 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044c8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80044cc:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 8004364 <_ZN15Screen1ViewBaseC1Ev+0xcf8>
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80044dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e4:	f2c1 87e5 	blt.w	80064b2 <_ZN15Screen1ViewBaseC1Ev+0x2e46>
            return (int)(fs + 0.5f);
 80044e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80044f8:	4630      	mov	r0, r6
 80044fa:	f010 f90e 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80044fe:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004502:	ed1f 7a67 	vldr	s14, [pc, #-412]	; 8004368 <_ZN15Screen1ViewBaseC1Ev+0xcfc>
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004512:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451a:	f2c1 87df 	blt.w	80064dc <_ZN15Screen1ViewBaseC1Ev+0x2e70>
            return (int)(fs + 0.5f);
 800451e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800452a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800452e:	4630      	mov	r0, r6
 8004530:	f010 f8f3 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004534:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004538:	ed1f 7a74 	vldr	s14, [pc, #-464]	; 800436c <_ZN15Screen1ViewBaseC1Ev+0xd00>
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004544:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004548:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	f2c1 87dc 	blt.w	800650c <_ZN15Screen1ViewBaseC1Ev+0x2ea0>
            return (int)(fs + 0.5f);
 8004554:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800455c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004560:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004564:	4630      	mov	r0, r6
 8004566:	f010 f8d8 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800456a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800456e:	ed1f 7a80 	vldr	s14, [pc, #-512]	; 8004370 <_ZN15Screen1ViewBaseC1Ev+0xd04>
 8004572:	ee07 3a90 	vmov	s15, r3
 8004576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800457e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004586:	f2c1 87d6 	blt.w	8006536 <_ZN15Screen1ViewBaseC1Ev+0x2eca>
            return (int)(fs + 0.5f);
 800458a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800458e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004592:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004596:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800459a:	4630      	mov	r0, r6
 800459c:	f010 f8bd 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045a0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045a4:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8004374 <_ZN15Screen1ViewBaseC1Ev+0xd08>
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045b0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045bc:	f2c1 87d0 	blt.w	8006560 <_ZN15Screen1ViewBaseC1Ev+0x2ef4>
            return (int)(fs + 0.5f);
 80045c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045cc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80045d0:	4630      	mov	r0, r6
 80045d2:	f010 f8a2 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80045d6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80045da:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 8004378 <_ZN15Screen1ViewBaseC1Ev+0xd0c>
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80045ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	f2c1 87ca 	blt.w	800658a <_ZN15Screen1ViewBaseC1Ev+0x2f1e>
            return (int)(fs + 0.5f);
 80045f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004602:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004606:	4630      	mov	r0, r6
 8004608:	f010 f887 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800460c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004610:	ed1f 7aa6 	vldr	s14, [pc, #-664]	; 800437c <_ZN15Screen1ViewBaseC1Ev+0xd10>
 8004614:	ee07 3a90 	vmov	s15, r3
 8004618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800461c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	f2c1 87c4 	blt.w	80065b4 <_ZN15Screen1ViewBaseC1Ev+0x2f48>
            return (int)(fs + 0.5f);
 800462c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004630:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004638:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800463c:	4630      	mov	r0, r6
 800463e:	f010 f86c 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004642:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004646:	ed1f 7ab2 	vldr	s14, [pc, #-712]	; 8004380 <_ZN15Screen1ViewBaseC1Ev+0xd14>
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004652:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465e:	f2c1 87be 	blt.w	80065de <_ZN15Screen1ViewBaseC1Ev+0x2f72>
            return (int)(fs + 0.5f);
 8004662:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004666:	ee77 7a87 	vadd.f32	s15, s15, s14
 800466a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004672:	4630      	mov	r0, r6
 8004674:	f010 f851 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004678:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800467c:	ed1f 7abf 	vldr	s14, [pc, #-764]	; 8004384 <_ZN15Screen1ViewBaseC1Ev+0xd18>
 8004680:	ee07 3a90 	vmov	s15, r3
 8004684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004688:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800468c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004694:	f2c1 87b8 	blt.w	8006608 <_ZN15Screen1ViewBaseC1Ev+0x2f9c>
            return (int)(fs + 0.5f);
 8004698:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800469c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046a4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046a8:	4630      	mov	r0, r6
 80046aa:	f010 f836 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046ae:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046b2:	ed1f 7acb 	vldr	s14, [pc, #-812]	; 8004388 <_ZN15Screen1ViewBaseC1Ev+0xd1c>
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046be:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ca:	f2c1 87b2 	blt.w	8006632 <_ZN15Screen1ViewBaseC1Ev+0x2fc6>
            return (int)(fs + 0.5f);
 80046ce:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80046d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046da:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80046de:	4630      	mov	r0, r6
 80046e0:	f010 f81b 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80046e4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80046e8:	ed1f 7ad8 	vldr	s14, [pc, #-864]	; 800438c <_ZN15Screen1ViewBaseC1Ev+0xd20>
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046f4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80046f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	f2c1 87ac 	blt.w	800665c <_ZN15Screen1ViewBaseC1Ev+0x2ff0>
            return (int)(fs + 0.5f);
 8004704:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004708:	ee77 7a87 	vadd.f32	s15, s15, s14
 800470c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004710:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004714:	4630      	mov	r0, r6
 8004716:	f010 f800 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800471a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800471e:	ed1f 7ae4 	vldr	s14, [pc, #-912]	; 8004390 <_ZN15Screen1ViewBaseC1Ev+0xd24>
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800472a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800472e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	f2c1 87a6 	blt.w	8006686 <_ZN15Screen1ViewBaseC1Ev+0x301a>
            return (int)(fs + 0.5f);
 800473a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800473e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004746:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800474a:	4630      	mov	r0, r6
 800474c:	f00f ffe5 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004750:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004754:	ed1f 7af1 	vldr	s14, [pc, #-964]	; 8004394 <_ZN15Screen1ViewBaseC1Ev+0xd28>
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004760:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004764:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	f2c1 87a0 	blt.w	80066b0 <_ZN15Screen1ViewBaseC1Ev+0x3044>
            return (int)(fs + 0.5f);
 8004770:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004774:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800477c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004780:	4630      	mov	r0, r6
 8004782:	f00f ffca 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004786:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800478a:	ed9f 7af5 	vldr	s14, [pc, #980]	; 8004b60 <_ZN15Screen1ViewBaseC1Ev+0x14f4>
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004796:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800479a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800479e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a2:	f2c1 879a 	blt.w	80066da <_ZN15Screen1ViewBaseC1Ev+0x306e>
            return (int)(fs + 0.5f);
 80047a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047b2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047b6:	4630      	mov	r0, r6
 80047b8:	f00f ffaf 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047bc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047c0:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 8004b64 <_ZN15Screen1ViewBaseC1Ev+0x14f8>
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047cc:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80047d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80047d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d8:	f2c1 8794 	blt.w	8006704 <_ZN15Screen1ViewBaseC1Ev+0x3098>
            return (int)(fs + 0.5f);
 80047dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80047e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047e8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80047ec:	4630      	mov	r0, r6
 80047ee:	f00f ff94 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80047f2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80047f6:	ed9f 7adc 	vldr	s14, [pc, #880]	; 8004b68 <_ZN15Screen1ViewBaseC1Ev+0x14fc>
 80047fa:	ee07 3a90 	vmov	s15, r3
 80047fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004802:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800480a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480e:	f2c1 878e 	blt.w	800672e <_ZN15Screen1ViewBaseC1Ev+0x30c2>
            return (int)(fs + 0.5f);
 8004812:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800481a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800481e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004822:	4630      	mov	r0, r6
 8004824:	f00f ff79 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004828:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800482c:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8004b6c <_ZN15Screen1ViewBaseC1Ev+0x1500>
 8004830:	ee07 3a90 	vmov	s15, r3
 8004834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004838:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800483c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	f2c1 8788 	blt.w	8006758 <_ZN15Screen1ViewBaseC1Ev+0x30ec>
            return (int)(fs + 0.5f);
 8004848:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800484c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004854:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004858:	4630      	mov	r0, r6
 800485a:	f00f ff5e 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800485e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004862:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8004b70 <_ZN15Screen1ViewBaseC1Ev+0x1504>
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800486e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487a:	f2c1 8782 	blt.w	8006782 <_ZN15Screen1ViewBaseC1Ev+0x3116>
            return (int)(fs + 0.5f);
 800487e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004882:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800488a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800488e:	4630      	mov	r0, r6
 8004890:	f00f ff43 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004894:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004898:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8004b74 <_ZN15Screen1ViewBaseC1Ev+0x1508>
 800489c:	ee07 3a90 	vmov	s15, r3
 80048a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048a4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	f2c1 877c 	blt.w	80067ac <_ZN15Screen1ViewBaseC1Ev+0x3140>
            return (int)(fs + 0.5f);
 80048b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048c4:	4630      	mov	r0, r6
 80048c6:	f00f ff28 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80048ca:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80048ce:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004b78 <_ZN15Screen1ViewBaseC1Ev+0x150c>
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048da:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80048de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e6:	f2c1 8776 	blt.w	80067d6 <_ZN15Screen1ViewBaseC1Ev+0x316a>
            return (int)(fs + 0.5f);
 80048ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80048ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80048fa:	4630      	mov	r0, r6
 80048fc:	f00f ff0d 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004900:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004904:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8004b7c <_ZN15Screen1ViewBaseC1Ev+0x1510>
 8004908:	ee07 3a90 	vmov	s15, r3
 800490c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004910:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	f2c1 8770 	blt.w	8006800 <_ZN15Screen1ViewBaseC1Ev+0x3194>
            return (int)(fs + 0.5f);
 8004920:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004924:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800492c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004930:	4630      	mov	r0, r6
 8004932:	f00f fef2 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004936:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800493a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8004b80 <_ZN15Screen1ViewBaseC1Ev+0x1514>
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004946:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800494a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	f2c1 876a 	blt.w	800682a <_ZN15Screen1ViewBaseC1Ev+0x31be>
            return (int)(fs + 0.5f);
 8004956:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800495a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800495e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004962:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004966:	4630      	mov	r0, r6
 8004968:	f00f fed7 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800496c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004970:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004b84 <_ZN15Screen1ViewBaseC1Ev+0x1518>
 8004974:	ee07 3a90 	vmov	s15, r3
 8004978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004980:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	f2c1 8764 	blt.w	8006854 <_ZN15Screen1ViewBaseC1Ev+0x31e8>
            return (int)(fs + 0.5f);
 800498c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004990:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004998:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800499c:	4630      	mov	r0, r6
 800499e:	f00f febc 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049a2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80049a6:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004b88 <_ZN15Screen1ViewBaseC1Ev+0x151c>
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049b2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	f2c1 875e 	blt.w	800687e <_ZN15Screen1ViewBaseC1Ev+0x3212>
            return (int)(fs + 0.5f);
 80049c2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ce:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80049d2:	4630      	mov	r0, r6
 80049d4:	f00f fea1 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80049d8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80049dc:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8004b8c <_ZN15Screen1ViewBaseC1Ev+0x1520>
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049e8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80049ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	f2c1 8758 	blt.w	80068a8 <_ZN15Screen1ViewBaseC1Ev+0x323c>
            return (int)(fs + 0.5f);
 80049f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80049fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a04:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f00f fe86 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a0e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a12:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8004b90 <_ZN15Screen1ViewBaseC1Ev+0x1524>
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2a:	f2c1 8752 	blt.w	80068d2 <_ZN15Screen1ViewBaseC1Ev+0x3266>
            return (int)(fs + 0.5f);
 8004a2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a3e:	4630      	mov	r0, r6
 8004a40:	f00f fe6b 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a44:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a48:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004b94 <_ZN15Screen1ViewBaseC1Ev+0x1528>
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a54:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a60:	f2c1 874c 	blt.w	80068fc <_ZN15Screen1ViewBaseC1Ev+0x3290>
            return (int)(fs + 0.5f);
 8004a64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a70:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004a74:	4630      	mov	r0, r6
 8004a76:	f00f fe50 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004a7a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004a7e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004b98 <_ZN15Screen1ViewBaseC1Ev+0x152c>
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a96:	f2c1 8746 	blt.w	8006926 <_ZN15Screen1ViewBaseC1Ev+0x32ba>
            return (int)(fs + 0.5f);
 8004a9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004aa6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f00f fe35 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ab0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ab4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004b9c <_ZN15Screen1ViewBaseC1Ev+0x1530>
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004acc:	f2c1 8740 	blt.w	8006950 <_ZN15Screen1ViewBaseC1Ev+0x32e4>
            return (int)(fs + 0.5f);
 8004ad0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004adc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f00f fe1a 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ae6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004aea:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004ba0 <_ZN15Screen1ViewBaseC1Ev+0x1534>
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004af6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b02:	f2c1 873a 	blt.w	800697a <_ZN15Screen1ViewBaseC1Ev+0x330e>
            return (int)(fs + 0.5f);
 8004b06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b12:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b16:	4630      	mov	r0, r6
 8004b18:	f00f fdff 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b1c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b20:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8004ba4 <_ZN15Screen1ViewBaseC1Ev+0x1538>
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	f2c1 8734 	blt.w	80069a4 <_ZN15Screen1ViewBaseC1Ev+0x3338>
            return (int)(fs + 0.5f);
 8004b3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004b40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b48:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	f00f fde4 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004b52:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004b56:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004ba8 <_ZN15Screen1ViewBaseC1Ev+0x153c>
 8004b5a:	ee07 3a90 	vmov	s15, r3
 8004b5e:	e049      	b.n	8004bf4 <_ZN15Screen1ViewBaseC1Ev+0x1588>
 8004b60:	42307b0b 	.word	0x42307b0b
 8004b64:	420986bd 	.word	0x420986bd
 8004b68:	41bb4e8a 	.word	0x41bb4e8a
 8004b6c:	4162b886 	.word	0x4162b886
 8004b70:	4115feb0 	.word	0x4115feb0
 8004b74:	412d5677 	.word	0x412d5677
 8004b78:	4197c0dc 	.word	0x4197c0dc
 8004b7c:	4202bd8b 	.word	0x4202bd8b
 8004b80:	424665b4 	.word	0x424665b4
 8004b84:	42852d25 	.word	0x42852d25
 8004b88:	42a10577 	.word	0x42a10577
 8004b8c:	42b1dfb4 	.word	0x42b1dfb4
 8004b90:	42b56873 	.word	0x42b56873
 8004b94:	42ac5462 	.word	0x42ac5462
 8004b98:	429a2405 	.word	0x429a2405
 8004b9c:	42843b27 	.word	0x42843b27
 8004ba0:	42610aed 	.word	0x42610aed
 8004ba4:	4247fb84 	.word	0x4247fb84
 8004ba8:	4242e892 	.word	0x4242e892
 8004bac:	4251c1f2 	.word	0x4251c1f2
 8004bb0:	426ed828 	.word	0x426ed828
 8004bb4:	42882ad4 	.word	0x42882ad4
 8004bb8:	42956170 	.word	0x42956170
 8004bbc:	4299fb29 	.word	0x4299fb29
 8004bc0:	4292db9d 	.word	0x4292db9d
 8004bc4:	427f6be9 	.word	0x427f6be9
 8004bc8:	4246694a 	.word	0x4246694a
 8004bcc:	4204cdd3 	.word	0x4204cdd3
 8004bd0:	418e5d1f 	.word	0x418e5d1f
 8004bd4:	40cd3001 	.word	0x40cd3001
 8004bd8:	3f9f7cee 	.word	0x3f9f7cee
 8004bdc:	404972c5 	.word	0x404972c5
 8004be0:	4136e61d 	.word	0x4136e61d
 8004be4:	41c068c7 	.word	0x41c068c7
 8004be8:	42186a82 	.word	0x42186a82
 8004bec:	424a2037 	.word	0x424a2037
 8004bf0:	426b6aa4 	.word	0x426b6aa4
 8004bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004bfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	f2c1 86e3 	blt.w	80069ce <_ZN15Screen1ViewBaseC1Ev+0x3362>
            return (int)(fs + 0.5f);
 8004c08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c14:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f00f fd7e 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c1e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c22:	ed1f 7a1e 	vldr	s14, [pc, #-120]	; 8004bac <_ZN15Screen1ViewBaseC1Ev+0x1540>
 8004c26:	ee07 3a90 	vmov	s15, r3
 8004c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	f2c1 86dd 	blt.w	80069f8 <_ZN15Screen1ViewBaseC1Ev+0x338c>
            return (int)(fs + 0.5f);
 8004c3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c4a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c4e:	4630      	mov	r0, r6
 8004c50:	f00f fd63 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c54:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c58:	ed1f 7a2b 	vldr	s14, [pc, #-172]	; 8004bb0 <_ZN15Screen1ViewBaseC1Ev+0x1544>
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c64:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	f2c1 86d7 	blt.w	8006a22 <_ZN15Screen1ViewBaseC1Ev+0x33b6>
            return (int)(fs + 0.5f);
 8004c74:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c80:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004c84:	4630      	mov	r0, r6
 8004c86:	f00f fd48 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004c8a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004c8e:	ed1f 7a37 	vldr	s14, [pc, #-220]	; 8004bb4 <_ZN15Screen1ViewBaseC1Ev+0x1548>
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca6:	f2c1 86d1 	blt.w	8006a4c <_ZN15Screen1ViewBaseC1Ev+0x33e0>
            return (int)(fs + 0.5f);
 8004caa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004cae:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cb6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f00f fd2d 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cc0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cc4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8004bb8 <_ZN15Screen1ViewBaseC1Ev+0x154c>
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004cd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cdc:	f2c1 86cb 	blt.w	8006a76 <_ZN15Screen1ViewBaseC1Ev+0x340a>
            return (int)(fs + 0.5f);
 8004ce0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cec:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f00f fd12 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004cf6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004cfa:	ed1f 7a50 	vldr	s14, [pc, #-320]	; 8004bbc <_ZN15Screen1ViewBaseC1Ev+0x1550>
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d06:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d12:	f2c1 86c5 	blt.w	8006aa0 <_ZN15Screen1ViewBaseC1Ev+0x3434>
            return (int)(fs + 0.5f);
 8004d16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d22:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d26:	4630      	mov	r0, r6
 8004d28:	f00f fcf7 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d2c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d30:	ed1f 7a5d 	vldr	s14, [pc, #-372]	; 8004bc0 <_ZN15Screen1ViewBaseC1Ev+0x1554>
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d48:	f2c1 86bf 	blt.w	8006aca <_ZN15Screen1ViewBaseC1Ev+0x345e>
            return (int)(fs + 0.5f);
 8004d4c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d58:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f00f fcdc 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d62:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d66:	ed1f 7a69 	vldr	s14, [pc, #-420]	; 8004bc4 <_ZN15Screen1ViewBaseC1Ev+0x1558>
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d72:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7e:	f2c1 86b9 	blt.w	8006af4 <_ZN15Screen1ViewBaseC1Ev+0x3488>
            return (int)(fs + 0.5f);
 8004d82:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d8e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004d92:	4630      	mov	r0, r6
 8004d94:	f00f fcc1 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004d98:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004d9c:	ed1f 7a76 	vldr	s14, [pc, #-472]	; 8004bc8 <_ZN15Screen1ViewBaseC1Ev+0x155c>
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004da8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db4:	f2c1 86b3 	blt.w	8006b1e <_ZN15Screen1ViewBaseC1Ev+0x34b2>
            return (int)(fs + 0.5f);
 8004db8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dc4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dc8:	4630      	mov	r0, r6
 8004dca:	f00f fca6 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004dce:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004dd2:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8004bcc <_ZN15Screen1ViewBaseC1Ev+0x1560>
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dde:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	f2c1 86ad 	blt.w	8006b48 <_ZN15Screen1ViewBaseC1Ev+0x34dc>
            return (int)(fs + 0.5f);
 8004dee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f00f fc8b 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e04:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e08:	ed1f 7a8f 	vldr	s14, [pc, #-572]	; 8004bd0 <_ZN15Screen1ViewBaseC1Ev+0x1564>
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e14:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	f2c1 86a7 	blt.w	8006b72 <_ZN15Screen1ViewBaseC1Ev+0x3506>
            return (int)(fs + 0.5f);
 8004e24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e30:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e34:	4630      	mov	r0, r6
 8004e36:	f00f fc70 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e3a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e3e:	ed1f 7a9b 	vldr	s14, [pc, #-620]	; 8004bd4 <_ZN15Screen1ViewBaseC1Ev+0x1568>
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e56:	f2c1 86a1 	blt.w	8006b9c <_ZN15Screen1ViewBaseC1Ev+0x3530>
            return (int)(fs + 0.5f);
 8004e5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e66:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	f00f fc55 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004e70:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004e74:	ed1f 7aa8 	vldr	s14, [pc, #-672]	; 8004bd8 <_ZN15Screen1ViewBaseC1Ev+0x156c>
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e80:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8c:	f2c1 869b 	blt.w	8006bc6 <_ZN15Screen1ViewBaseC1Ev+0x355a>
            return (int)(fs + 0.5f);
 8004e90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f00f fc3a 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004ea6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004eaa:	ed1f 7ab4 	vldr	s14, [pc, #-720]	; 8004bdc <_ZN15Screen1ViewBaseC1Ev+0x1570>
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	f2c1 8695 	blt.w	8006bf0 <_ZN15Screen1ViewBaseC1Ev+0x3584>
            return (int)(fs + 0.5f);
 8004ec6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ed2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f00f fc1f 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004edc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004ee0:	ed1f 7ac1 	vldr	s14, [pc, #-772]	; 8004be0 <_ZN15Screen1ViewBaseC1Ev+0x1574>
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004eec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	f2c1 868f 	blt.w	8006c1a <_ZN15Screen1ViewBaseC1Ev+0x35ae>
            return (int)(fs + 0.5f);
 8004efc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f08:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f00f fc04 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f12:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f16:	ed1f 7acd 	vldr	s14, [pc, #-820]	; 8004be4 <_ZN15Screen1ViewBaseC1Ev+0x1578>
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f22:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2e:	f2c1 8689 	blt.w	8006c44 <_ZN15Screen1ViewBaseC1Ev+0x35d8>
            return (int)(fs + 0.5f);
 8004f32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f42:	4630      	mov	r0, r6
 8004f44:	f00f fbe9 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f48:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f4c:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 8004be8 <_ZN15Screen1ViewBaseC1Ev+0x157c>
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f58:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f64:	f2c1 8683 	blt.w	8006c6e <_ZN15Screen1ViewBaseC1Ev+0x3602>
            return (int)(fs + 0.5f);
 8004f68:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f74:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004f78:	4630      	mov	r0, r6
 8004f7a:	f00f fbce 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004f7e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004f82:	ed1f 7ae6 	vldr	s14, [pc, #-920]	; 8004bec <_ZN15Screen1ViewBaseC1Ev+0x1580>
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	f2c1 867d 	blt.w	8006c98 <_ZN15Screen1ViewBaseC1Ev+0x362c>
            return (int)(fs + 0.5f);
 8004f9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004faa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fae:	4630      	mov	r0, r6
 8004fb0:	f00f fbb3 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fb4:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fb8:	ed1f 7af3 	vldr	s14, [pc, #-972]	; 8004bf0 <_ZN15Screen1ViewBaseC1Ev+0x1584>
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004fc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd0:	f2c1 8677 	blt.w	8006cc2 <_ZN15Screen1ViewBaseC1Ev+0x3656>
            return (int)(fs + 0.5f);
 8004fd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fe0:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f00f fb98 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8004fea:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8004fee:	ed9f 7af5 	vldr	s14, [pc, #980]	; 80053c4 <_ZN15Screen1ViewBaseC1Ev+0x1d58>
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005006:	f2c1 8671 	blt.w	8006cec <_ZN15Screen1ViewBaseC1Ev+0x3680>
            return (int)(fs + 0.5f);
 800500a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800500e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005016:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800501a:	4630      	mov	r0, r6
 800501c:	f00f fb7d 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005020:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005024:	ed9f 7ae8 	vldr	s14, [pc, #928]	; 80053c8 <_ZN15Screen1ViewBaseC1Ev+0x1d5c>
 8005028:	ee07 3a90 	vmov	s15, r3
 800502c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005030:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503c:	f2c1 866b 	blt.w	8006d16 <_ZN15Screen1ViewBaseC1Ev+0x36aa>
            return (int)(fs + 0.5f);
 8005040:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800504c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005050:	4630      	mov	r0, r6
 8005052:	f00f fb62 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005056:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800505a:	ed9f 7adc 	vldr	s14, [pc, #880]	; 80053cc <_ZN15Screen1ViewBaseC1Ev+0x1d60>
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005066:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800506a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	f2c1 8665 	blt.w	8006d40 <_ZN15Screen1ViewBaseC1Ev+0x36d4>
            return (int)(fs + 0.5f);
 8005076:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800507a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800507e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005082:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005086:	4630      	mov	r0, r6
 8005088:	f00f fb47 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800508c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005090:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80053d0 <_ZN15Screen1ViewBaseC1Ev+0x1d64>
 8005094:	ee07 3a90 	vmov	s15, r3
 8005098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800509c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a8:	f2c1 865f 	blt.w	8006d6a <_ZN15Screen1ViewBaseC1Ev+0x36fe>
            return (int)(fs + 0.5f);
 80050ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b8:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050bc:	4630      	mov	r0, r6
 80050be:	f00f fb2c 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050c2:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050c6:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 80053d4 <_ZN15Screen1ViewBaseC1Ev+0x1d68>
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050d2:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80050d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	f2c1 8659 	blt.w	8006d94 <_ZN15Screen1ViewBaseC1Ev+0x3728>
            return (int)(fs + 0.5f);
 80050e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80050e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050ee:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80050f2:	4630      	mov	r0, r6
 80050f4:	f00f fb11 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80050f8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80050fc:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80053d8 <_ZN15Screen1ViewBaseC1Ev+0x1d6c>
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005108:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800510c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	f2c1 8653 	blt.w	8006dbe <_ZN15Screen1ViewBaseC1Ev+0x3752>
            return (int)(fs + 0.5f);
 8005118:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800511c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005124:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005128:	4630      	mov	r0, r6
 800512a:	f00f faf6 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800512e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005132:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80053dc <_ZN15Screen1ViewBaseC1Ev+0x1d70>
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800513e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005142:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800514a:	f2c1 864d 	blt.w	8006de8 <_ZN15Screen1ViewBaseC1Ev+0x377c>
            return (int)(fs + 0.5f);
 800514e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005152:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800515a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800515e:	4630      	mov	r0, r6
 8005160:	f00f fadb 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005164:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005168:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80053e0 <_ZN15Screen1ViewBaseC1Ev+0x1d74>
 800516c:	ee07 3a90 	vmov	s15, r3
 8005170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005174:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005180:	f2c1 8647 	blt.w	8006e12 <_ZN15Screen1ViewBaseC1Ev+0x37a6>
            return (int)(fs + 0.5f);
 8005184:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800518c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005190:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005194:	4630      	mov	r0, r6
 8005196:	f00f fac0 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800519a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800519e:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80053e4 <_ZN15Screen1ViewBaseC1Ev+0x1d78>
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051aa:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b6:	f2c1 8641 	blt.w	8006e3c <_ZN15Screen1ViewBaseC1Ev+0x37d0>
            return (int)(fs + 0.5f);
 80051ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051c6:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80051ca:	4630      	mov	r0, r6
 80051cc:	f00f faa5 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80051d0:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80051d4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80053e8 <_ZN15Screen1ViewBaseC1Ev+0x1d7c>
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051e0:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80051e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	f2c1 863b 	blt.w	8006e66 <_ZN15Screen1ViewBaseC1Ev+0x37fa>
            return (int)(fs + 0.5f);
 80051f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80051f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051fc:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005200:	4630      	mov	r0, r6
 8005202:	f00f fa8a 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005206:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800520a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80053ec <_ZN15Screen1ViewBaseC1Ev+0x1d80>
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005216:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800521a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	f2c1 8635 	blt.w	8006e90 <_ZN15Screen1ViewBaseC1Ev+0x3824>
            return (int)(fs + 0.5f);
 8005226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800522a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800522e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005232:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005236:	4630      	mov	r0, r6
 8005238:	f00f fa6f 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800523c:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005240:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80053f0 <_ZN15Screen1ViewBaseC1Ev+0x1d84>
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800524c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005250:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	f2c1 862f 	blt.w	8006eba <_ZN15Screen1ViewBaseC1Ev+0x384e>
            return (int)(fs + 0.5f);
 800525c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005260:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005268:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800526c:	4630      	mov	r0, r6
 800526e:	f00f fa54 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005272:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005276:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80053f4 <_ZN15Screen1ViewBaseC1Ev+0x1d88>
 800527a:	ee07 3a90 	vmov	s15, r3
 800527e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005282:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528e:	f2c1 8629 	blt.w	8006ee4 <_ZN15Screen1ViewBaseC1Ev+0x3878>
            return (int)(fs + 0.5f);
 8005292:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800529a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800529e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052a2:	4630      	mov	r0, r6
 80052a4:	f00f fa39 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052a8:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052ac:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80053f8 <_ZN15Screen1ViewBaseC1Ev+0x1d8c>
 80052b0:	ee07 3a90 	vmov	s15, r3
 80052b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052b8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052c4:	f2c1 8623 	blt.w	8006f0e <_ZN15Screen1ViewBaseC1Ev+0x38a2>
            return (int)(fs + 0.5f);
 80052c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80052cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052d4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80052d8:	4630      	mov	r0, r6
 80052da:	f00f fa1e 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80052de:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80052e2:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80053fc <_ZN15Screen1ViewBaseC1Ev+0x1d90>
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052ee:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80052f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fa:	f2c1 861d 	blt.w	8006f38 <_ZN15Screen1ViewBaseC1Ev+0x38cc>
            return (int)(fs + 0.5f);
 80052fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005306:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530a:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800530e:	4630      	mov	r0, r6
 8005310:	f00f fa03 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005314:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005318:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8005400 <_ZN15Screen1ViewBaseC1Ev+0x1d94>
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005324:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800532c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005330:	f2c1 8617 	blt.w	8006f62 <_ZN15Screen1ViewBaseC1Ev+0x38f6>
            return (int)(fs + 0.5f);
 8005334:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800533c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005340:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005344:	4630      	mov	r0, r6
 8005346:	f00f f9e8 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800534a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800534e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005404 <_ZN15Screen1ViewBaseC1Ev+0x1d98>
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800535a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800535e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	f2c1 8611 	blt.w	8006f8c <_ZN15Screen1ViewBaseC1Ev+0x3920>
            return (int)(fs + 0.5f);
 800536a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800536e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005376:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800537a:	4630      	mov	r0, r6
 800537c:	f00f f9cd 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005380:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005384:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005408 <_ZN15Screen1ViewBaseC1Ev+0x1d9c>
 8005388:	ee07 3a90 	vmov	s15, r3
 800538c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005390:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539c:	f2c1 860b 	blt.w	8006fb6 <_ZN15Screen1ViewBaseC1Ev+0x394a>
            return (int)(fs + 0.5f);
 80053a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80053a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ac:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80053b0:	4630      	mov	r0, r6
 80053b2:	f00f f9b2 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80053b6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80053ba:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800540c <_ZN15Screen1ViewBaseC1Ev+0x1da0>
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	e039      	b.n	8005438 <_ZN15Screen1ViewBaseC1Ev+0x1dcc>
 80053c4:	42770644 	.word	0x42770644
 80053c8:	426d8366 	.word	0x426d8366
 80053cc:	42550015 	.word	0x42550015
 80053d0:	42378204 	.word	0x42378204
 80053d4:	42205953 	.word	0x42205953
 80053d8:	421931ba 	.word	0x421931ba
 80053dc:	42278b9a 	.word	0x42278b9a
 80053e0:	424b3cd6 	.word	0x424b3cd6
 80053e4:	427e5902 	.word	0x427e5902
 80053e8:	429b43f0 	.word	0x429b43f0
 80053ec:	42b3bbd9 	.word	0x42b3bbd9
 80053f0:	42c2e952 	.word	0x42c2e952
 80053f4:	42c4ff5a 	.word	0x42c4ff5a
 80053f8:	42b8fdf1 	.word	0x42b8fdf1
 80053fc:	42a0f5c4 	.word	0x42a0f5c4
 8005400:	42818fa4 	.word	0x42818fa4
 8005404:	4241ea06 	.word	0x4241ea06
 8005408:	420aba88 	.word	0x420aba88
 800540c:	41ce68b7 	.word	0x41ce68b7
 8005410:	41b7f63b 	.word	0x41b7f63b
 8005414:	41cf726c 	.word	0x41cf726c
 8005418:	42039d1a 	.word	0x42039d1a
 800541c:	42252ce4 	.word	0x42252ce4
 8005420:	4240fc41 	.word	0x4240fc41
 8005424:	424d990c 	.word	0x424d990c
 8005428:	4245f650 	.word	0x4245f650
 800542c:	422abce3 	.word	0x422abce3
 8005430:	42022e5b 	.word	0x42022e5b
 8005434:	41ad425b 	.word	0x41ad425b
 8005438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800543c:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005448:	f2c1 85ca 	blt.w	8006fe0 <_ZN15Screen1ViewBaseC1Ev+0x3974>
            return (int)(fs + 0.5f);
 800544c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005450:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005458:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800545c:	4630      	mov	r0, r6
 800545e:	f00f f95c 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005462:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005466:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8005410 <_ZN15Screen1ViewBaseC1Ev+0x1da4>
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005472:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005476:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800547a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547e:	f2c1 85c4 	blt.w	800700a <_ZN15Screen1ViewBaseC1Ev+0x399e>
            return (int)(fs + 0.5f);
 8005482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005486:	ee77 7a87 	vadd.f32	s15, s15, s14
 800548a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800548e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005492:	4630      	mov	r0, r6
 8005494:	f00f f941 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005498:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800549c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8005414 <_ZN15Screen1ViewBaseC1Ev+0x1da8>
 80054a0:	ee07 3a90 	vmov	s15, r3
 80054a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054a8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b4:	f2c1 85be 	blt.w	8007034 <_ZN15Screen1ViewBaseC1Ev+0x39c8>
            return (int)(fs + 0.5f);
 80054b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c4:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054c8:	4630      	mov	r0, r6
 80054ca:	f00f f926 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80054ce:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80054d2:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 8005418 <_ZN15Screen1ViewBaseC1Ev+0x1dac>
 80054d6:	ee07 3a90 	vmov	s15, r3
 80054da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054de:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80054e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ea:	f2c1 85b8 	blt.w	800705e <_ZN15Screen1ViewBaseC1Ev+0x39f2>
            return (int)(fs + 0.5f);
 80054ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80054f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054fa:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80054fe:	4630      	mov	r0, r6
 8005500:	f00f f90b 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005504:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005508:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800541c <_ZN15Screen1ViewBaseC1Ev+0x1db0>
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005514:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	f2c1 85b2 	blt.w	8007088 <_ZN15Screen1ViewBaseC1Ev+0x3a1c>
            return (int)(fs + 0.5f);
 8005524:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005528:	ee77 7a87 	vadd.f32	s15, s15, s14
 800552c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005530:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005534:	4630      	mov	r0, r6
 8005536:	f00f f8f0 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 800553a:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800553e:	ed1f 7a48 	vldr	s14, [pc, #-288]	; 8005420 <_ZN15Screen1ViewBaseC1Ev+0x1db4>
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800554a:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800554e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005556:	f2c1 85ac 	blt.w	80070b2 <_ZN15Screen1ViewBaseC1Ev+0x3a46>
            return (int)(fs + 0.5f);
 800555a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800555e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005566:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800556a:	4630      	mov	r0, r6
 800556c:	f00f f8d5 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005570:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005574:	ed1f 7a55 	vldr	s14, [pc, #-340]	; 8005424 <_ZN15Screen1ViewBaseC1Ev+0x1db8>
 8005578:	ee07 3a90 	vmov	s15, r3
 800557c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005580:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800558c:	f2c1 85a6 	blt.w	80070dc <_ZN15Screen1ViewBaseC1Ev+0x3a70>
            return (int)(fs + 0.5f);
 8005590:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800559c:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055a0:	4630      	mov	r0, r6
 80055a2:	f00f f8ba 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055a6:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80055aa:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8005428 <_ZN15Screen1ViewBaseC1Ev+0x1dbc>
 80055ae:	ee07 3a90 	vmov	s15, r3
 80055b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055b6:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055c2:	f2c1 85a0 	blt.w	8007106 <_ZN15Screen1ViewBaseC1Ev+0x3a9a>
            return (int)(fs + 0.5f);
 80055c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80055ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80055ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055d2:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 80055d6:	4630      	mov	r0, r6
 80055d8:	f00f f89f 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 80055dc:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 80055e0:	ed1f 7a6e 	vldr	s14, [pc, #-440]	; 800542c <_ZN15Screen1ViewBaseC1Ev+0x1dc0>
 80055e4:	ee07 3a90 	vmov	s15, r3
 80055e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ec:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 80055f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	f2c1 859a 	blt.w	8007130 <_ZN15Screen1ViewBaseC1Ev+0x3ac4>
            return (int)(fs + 0.5f);
 80055fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005600:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005608:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 800560c:	4630      	mov	r0, r6
 800560e:	f00f f884 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005612:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 8005616:	ed1f 7a7a 	vldr	s14, [pc, #-488]	; 8005430 <_ZN15Screen1ViewBaseC1Ev+0x1dc4>
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005622:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8005626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800562a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562e:	f2c1 8594 	blt.w	800715a <_ZN15Screen1ViewBaseC1Ev+0x3aee>
            return (int)(fs + 0.5f);
 8005632:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005636:	ee77 7a87 	vadd.f32	s15, s15, s14
 800563a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800563e:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005642:	4630      	mov	r0, r6
 8005644:	f00f f869 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
        const float fs = f * (float)scale;
 8005648:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
 800564c:	ed1f 7a87 	vldr	s14, [pc, #-540]	; 8005434 <_ZN15Screen1ViewBaseC1Ev+0x1dc8>
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005658:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800565c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005664:	f2c1 858e 	blt.w	8007184 <_ZN15Screen1ViewBaseC1Ev+0x3b18>
            return (int)(fs + 0.5f);
 8005668:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800566c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005674:	ee17 1a90 	vmov	r1, s15
        return addDataPointScaled(float2scaledY(y));
 8005678:	4630      	mov	r0, r6
    graph2.setGraphAreaPadding(0, 0, 0, 0);
 800567a:	f04f 0b00 	mov.w	fp, #0
 800567e:	f00f f84c 	bl	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8005682:	4631      	mov	r1, r6
 8005684:	4640      	mov	r0, r8
        dragAction = &callback;
 8005686:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 800568a:	f00c ffe7 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    customGraph1.setXY(480, 254);
 800568e:	22fe      	movs	r2, #254	; 0xfe
 8005690:	9808      	ldr	r0, [sp, #32]
 8005692:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8005696:	f7fd ff1c 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 800569a:	9908      	ldr	r1, [sp, #32]
 800569c:	4640      	mov	r0, r8
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800569e:	f504 5700 	add.w	r7, r4, #8192	; 0x2000
 80056a2:	f00c ffdb 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph2.setPosition(21, 312, 266, 148);
 80056a6:	2394      	movs	r3, #148	; 0x94
 80056a8:	4628      	mov	r0, r5
 80056aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2115      	movs	r1, #21
 80056b2:	f44f 7385 	mov.w	r3, #266	; 0x10a
        color = newColor;
 80056b6:	f8df 94c0 	ldr.w	r9, [pc, #1216]	; 8005b78 <_ZN15Screen1ViewBaseC1Ev+0x250c>
 80056ba:	f7fd ff17 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
    graph2.setScaleX(1);
 80056be:	4628      	mov	r0, r5
 80056c0:	2200      	movs	r2, #0
 80056c2:	2101      	movs	r1, #1
 80056c4:	f00e ffeb 	bl	801469e <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph2.setScaleY(1);
 80056c8:	4628      	mov	r0, r5
 80056ca:	2200      	movs	r2, #0
 80056cc:	2101      	movs	r1, #1
 80056ce:	f00f f805 	bl	80146dc <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph2.setGraphAreaMargin(12, 32, 0, 20);
 80056d2:	2314      	movs	r3, #20
 80056d4:	4628      	mov	r0, r5
 80056d6:	2220      	movs	r2, #32
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	210c      	movs	r1, #12
 80056dc:	2300      	movs	r3, #0
        dataScale = scale;
 80056de:	f04f 0a01 	mov.w	sl, #1
 80056e2:	f00e fed1 	bl	8014488 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph2.setGraphAreaPadding(0, 0, 0, 0);
 80056e6:	465b      	mov	r3, fp
 80056e8:	465a      	mov	r2, fp
 80056ea:	4659      	mov	r1, fp
 80056ec:	4628      	mov	r0, r5
 80056ee:	f8cd b000 	str.w	fp, [sp]
 80056f2:	f00e fdad 	bl	8014250 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph2.setGraphRangeX(-100, 100);
 80056f6:	4628      	mov	r0, r5
 80056f8:	2264      	movs	r2, #100	; 0x64
 80056fa:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80056fe:	f7fd fa01 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph2.setGraphRangeY(-100, 100);
 8005702:	4628      	mov	r0, r5
 8005704:	2264      	movs	r2, #100	; 0x64
 8005706:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800570a:	f7fd fa87 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
 800570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8005710:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
class TypedText
 8005714:	f04f 020c 	mov.w	r2, #12
 8005718:	f8c6 3e64 	str.w	r3, [r6, #3684]	; 0xe64
        return i * scale;
 800571c:	231e      	movs	r3, #30
 800571e:	f8a7 21dc 	strh.w	r2, [r7, #476]	; 0x1dc
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005722:	2201      	movs	r2, #1
 8005724:	fb03 f001 	mul.w	r0, r3, r1
 8005728:	f8c7 91cc 	str.w	r9, [r7, #460]	; 0x1cc
 800572c:	2800      	cmp	r0, #0
 800572e:	bfb8      	it	lt
 8005730:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8005732:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8005736:	f00e ff59 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph2.addBottomElement(graph2MajorXAxisLabel);
 800573a:	9903      	ldr	r1, [sp, #12]
 800573c:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
 8005740:	4628      	mov	r0, r5
        dataScale = scale;
 8005742:	f8c7 a1d0 	str.w	sl, [r7, #464]	; 0x1d0
 8005746:	f00e fdb2 	bl	80142ae <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 800574a:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800574e:	2228      	movs	r2, #40	; 0x28
 8005750:	230b      	movs	r3, #11
 8005752:	f8c7 9218 	str.w	r9, [r7, #536]	; 0x218
 8005756:	f06f 0931 	mvn.w	r9, #49	; 0x31
 800575a:	fb02 f001 	mul.w	r0, r2, r1
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800575e:	4652      	mov	r2, sl
 8005760:	f8a7 3228 	strh.w	r3, [r7, #552]	; 0x228
 8005764:	2800      	cmp	r0, #0
 8005766:	bfb8      	it	lt
 8005768:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 800576a:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 800576e:	f00e ff3d 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph2.addLeftElement(graph2MajorYAxisLabel);
 8005772:	9904      	ldr	r1, [sp, #16]
        dataScale = scale;
 8005774:	e9c7 a087 	strd	sl, r0, [r7, #540]	; 0x21c
 8005778:	4628      	mov	r0, r5
 800577a:	f00e fd86 	bl	801428a <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 800577e:	4bfd      	ldr	r3, [pc, #1012]	; (8005b74 <_ZN15Screen1ViewBaseC1Ev+0x2508>)
        painterBlue = Color::getBlue(color);
 8005780:	f04f 0116 	mov.w	r1, #22
    graph2.addGraphElement(graph2Line1);
 8005784:	4628      	mov	r0, r5
 8005786:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
        painterRed = Color::getRed(color);
 800578a:	f24c 4316 	movw	r3, #50198	; 0xc416
        painterBlue = Color::getBlue(color);
 800578e:	f887 127a 	strb.w	r1, [r7, #634]	; 0x27a
        painterRed = Color::getRed(color);
 8005792:	f8a7 3278 	strh.w	r3, [r7, #632]	; 0x278
 8005796:	9b06      	ldr	r3, [sp, #24]
 8005798:	9905      	ldr	r1, [sp, #20]
 800579a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
        lineWidth = width;
 800579e:	2302      	movs	r3, #2
 80057a0:	f887 3264 	strb.w	r3, [r7, #612]	; 0x264
 80057a4:	f00e fd5f 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
 80057a8:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80057ac:	f06f 012d 	mvn.w	r1, #45	; 0x2d
        return i * scale;
 80057b0:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057b4:	4628      	mov	r0, r5
 80057b6:	434a      	muls	r2, r1
 80057b8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80057bc:	4359      	muls	r1, r3
 80057be:	f00e ffc0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80057c2:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 80057c6:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80057ca:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80057ce:	f06f 0061 	mvn.w	r0, #97	; 0x61
 80057d2:	435a      	muls	r2, r3
 80057d4:	4341      	muls	r1, r0
 80057d6:	4628      	mov	r0, r5
 80057d8:	f00e ffb3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80057dc:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 80057e0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80057e4:	f06f 015f 	mvn.w	r1, #95	; 0x5f
 80057e8:	4628      	mov	r0, r5
 80057ea:	fb09 f202 	mul.w	r2, r9, r2
 80057ee:	4359      	muls	r1, r3
 80057f0:	f00e ffa7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80057f4:	f8d6 3d70 	ldr.w	r3, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80057f8:	f06f 0224 	mvn.w	r2, #36	; 0x24
        return i * scale;
 80057fc:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005800:	4628      	mov	r0, r5
 8005802:	435a      	muls	r2, r3
 8005804:	f06f 035d 	mvn.w	r3, #93	; 0x5d
 8005808:	4359      	muls	r1, r3
 800580a:	f00e ff9a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800580e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005812:	f06f 0113 	mvn.w	r1, #19
        return i * scale;
 8005816:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800581a:	4628      	mov	r0, r5
 800581c:	434a      	muls	r2, r1
 800581e:	f06f 015b 	mvn.w	r1, #91	; 0x5b
 8005822:	4359      	muls	r1, r3
 8005824:	f00e ff8d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005828:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800582c:	f06f 0104 	mvn.w	r1, #4
        return i * scale;
 8005830:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005834:	4628      	mov	r0, r5
 8005836:	434a      	muls	r2, r1
 8005838:	f06f 0159 	mvn.w	r1, #89	; 0x59
 800583c:	4359      	muls	r1, r3
 800583e:	f00e ff80 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005842:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 8005846:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800584a:	f06f 0157 	mvn.w	r1, #87	; 0x57
 800584e:	4628      	mov	r0, r5
 8005850:	fa02 f20a 	lsl.w	r2, r2, sl
 8005854:	4359      	muls	r1, r3
 8005856:	f00e ff74 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800585a:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800585e:	f06f 0155 	mvn.w	r1, #85	; 0x55
 8005862:	465a      	mov	r2, fp
 8005864:	4628      	mov	r0, r5
        return i * scale;
 8005866:	f06f 0a4d 	mvn.w	sl, #77	; 0x4d
        return addValue(int2scaledX(x), int2scaledY(y));
 800586a:	4359      	muls	r1, r3
 800586c:	f00e ff69 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005870:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 8005874:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005878:	f06f 000b 	mvn.w	r0, #11
 800587c:	f06f 0153 	mvn.w	r1, #83	; 0x53
 8005880:	4342      	muls	r2, r0
 8005882:	4628      	mov	r0, r5
 8005884:	4359      	muls	r1, r3
 8005886:	f00e ff5c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800588a:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 800588e:	f06f 031f 	mvn.w	r3, #31
 8005892:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005896:	4628      	mov	r0, r5
 8005898:	435a      	muls	r2, r3
 800589a:	f06f 0351 	mvn.w	r3, #81	; 0x51
 800589e:	4359      	muls	r1, r3
 80058a0:	f00e ff4f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058a4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80058a8:	f06f 0034 	mvn.w	r0, #52	; 0x34
        return i * scale;
 80058ac:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058b0:	4342      	muls	r2, r0
 80058b2:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 80058b6:	4341      	muls	r1, r0
 80058b8:	4628      	mov	r0, r5
 80058ba:	f00e ff42 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058be:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 80058c2:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058c6:	f06f 0047 	mvn.w	r0, #71	; 0x47
 80058ca:	fb0a f101 	mul.w	r1, sl, r1
 80058ce:	4342      	muls	r2, r0
 80058d0:	4628      	mov	r0, r5
 80058d2:	f00e ff36 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80058d6:	f06f 034b 	mvn.w	r3, #75	; 0x4b
        return i * scale;
 80058da:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80058de:	f06f 0050 	mvn.w	r0, #80	; 0x50
        return i * scale;
 80058e2:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058e6:	4342      	muls	r2, r0
 80058e8:	4628      	mov	r0, r5
 80058ea:	4359      	muls	r1, r3
 80058ec:	f00e ff29 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80058f0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 80058f4:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80058f8:	f06f 0049 	mvn.w	r0, #73	; 0x49
 80058fc:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 8005900:	f06f 0a3d 	mvn.w	sl, #61	; 0x3d
        return addValue(int2scaledX(x), int2scaledY(y));
 8005904:	4341      	muls	r1, r0
 8005906:	4628      	mov	r0, r5
 8005908:	f00e ff1b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800590c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005910:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005914:	f06f 0047 	mvn.w	r0, #71	; 0x47
 8005918:	fb0a f202 	mul.w	r2, sl, r2
 800591c:	4341      	muls	r1, r0
 800591e:	4628      	mov	r0, r5
 8005920:	f00e ff0f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005924:	f06f 0321 	mvn.w	r3, #33	; 0x21
        return i * scale;
 8005928:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800592c:	f06f 0045 	mvn.w	r0, #69	; 0x45
        return i * scale;
 8005930:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005934:	435a      	muls	r2, r3
 8005936:	4341      	muls	r1, r0
 8005938:	4628      	mov	r0, r5
 800593a:	f00e ff02 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800593e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005942:	f06f 0043 	mvn.w	r0, #67	; 0x43
 8005946:	465a      	mov	r2, fp
 8005948:	4341      	muls	r1, r0
 800594a:	4628      	mov	r0, r5
 800594c:	f00e fef9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005950:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005954:	2022      	movs	r0, #34	; 0x22
        return i * scale;
 8005956:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800595a:	4342      	muls	r2, r0
 800595c:	f06f 0041 	mvn.w	r0, #65	; 0x41
 8005960:	4341      	muls	r1, r0
 8005962:	4628      	mov	r0, r5
 8005964:	f00e feed 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005968:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800596c:	203d      	movs	r0, #61	; 0x3d
        return i * scale;
 800596e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005972:	4342      	muls	r2, r0
 8005974:	f06f 003f 	mvn.w	r0, #63	; 0x3f
 8005978:	4341      	muls	r1, r0
 800597a:	4628      	mov	r0, r5
 800597c:	f00e fee1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005980:	234e      	movs	r3, #78	; 0x4e
        return i * scale;
 8005982:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005986:	4628      	mov	r0, r5
        return i * scale;
 8005988:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800598c:	435a      	muls	r2, r3
 800598e:	fb0a f101 	mul.w	r1, sl, r1
        return i * scale;
 8005992:	f06f 0a0f 	mvn.w	sl, #15
        return addValue(int2scaledX(x), int2scaledY(y));
 8005996:	f00e fed4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800599a:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800599e:	2051      	movs	r0, #81	; 0x51
        return i * scale;
 80059a0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059a4:	4342      	muls	r2, r0
 80059a6:	f06f 003b 	mvn.w	r0, #59	; 0x3b
 80059aa:	4341      	muls	r1, r0
 80059ac:	4628      	mov	r0, r5
 80059ae:	f00e fec8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80059b2:	2348      	movs	r3, #72	; 0x48
        return i * scale;
 80059b4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80059b8:	f06f 0039 	mvn.w	r0, #57	; 0x39
        return i * scale;
 80059bc:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059c0:	435a      	muls	r2, r3
 80059c2:	4341      	muls	r1, r0
 80059c4:	4628      	mov	r0, r5
 80059c6:	f00e febc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80059ca:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80059ce:	2036      	movs	r0, #54	; 0x36
        return i * scale;
 80059d0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059d4:	4342      	muls	r2, r0
 80059d6:	f06f 0037 	mvn.w	r0, #55	; 0x37
 80059da:	4341      	muls	r1, r0
 80059dc:	4628      	mov	r0, r5
 80059de:	f00e feb0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80059e2:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 80059e6:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80059ea:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80059ee:	0152      	lsls	r2, r2, #5
 80059f0:	4628      	mov	r0, r5
 80059f2:	4359      	muls	r1, r3
 80059f4:	f00e fea5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80059f8:	230c      	movs	r3, #12
        return i * scale;
 80059fa:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80059fe:	f06f 0033 	mvn.w	r0, #51	; 0x33
        return i * scale;
 8005a02:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a06:	435a      	muls	r2, r3
 8005a08:	4341      	muls	r1, r0
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f00e fe99 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a10:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a14:	465a      	mov	r2, fp
 8005a16:	4628      	mov	r0, r5
 8005a18:	fb09 f101 	mul.w	r1, r9, r1
        return i * scale;
 8005a1c:	f04f 0912 	mov.w	r9, #18
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a20:	f00e fe8f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a24:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005a28:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a2c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8005a30:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005a34:	4341      	muls	r1, r0
 8005a36:	4628      	mov	r0, r5
 8005a38:	f00e fe83 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a3c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005a40:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a44:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 8005a48:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a4c:	4341      	muls	r1, r0
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f00e fe77 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a54:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a58:	2014      	movs	r0, #20
        return i * scale;
 8005a5a:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a5e:	4342      	muls	r2, r0
 8005a60:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8005a64:	4341      	muls	r1, r0
 8005a66:	4628      	mov	r0, r5
 8005a68:	f00e fe6b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005a6c:	2324      	movs	r3, #36	; 0x24
        return i * scale;
 8005a6e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a72:	f06f 0029 	mvn.w	r0, #41	; 0x29
        return i * scale;
 8005a76:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a7a:	435a      	muls	r2, r3
 8005a7c:	4341      	muls	r1, r0
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f00e fe5f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a84:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a88:	2032      	movs	r0, #50	; 0x32
        return i * scale;
 8005a8a:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005a8e:	4342      	muls	r2, r0
 8005a90:	f06f 0027 	mvn.w	r0, #39	; 0x27
 8005a94:	4341      	muls	r1, r0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f00e fe53 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005a9c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005aa0:	2036      	movs	r0, #54	; 0x36
        return i * scale;
 8005aa2:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005aa6:	4342      	muls	r2, r0
 8005aa8:	f06f 0025 	mvn.w	r0, #37	; 0x25
 8005aac:	4341      	muls	r1, r0
 8005aae:	4628      	mov	r0, r5
 8005ab0:	f00e fe47 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ab4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ab8:	202f      	movs	r0, #47	; 0x2f
        return i * scale;
 8005aba:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005abe:	4342      	muls	r2, r0
 8005ac0:	f06f 0023 	mvn.w	r0, #35	; 0x23
 8005ac4:	4341      	muls	r1, r0
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f00e fe3b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005acc:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005ad0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ad4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8005ad8:	201b      	movs	r0, #27
 8005ada:	4359      	muls	r1, r3
 8005adc:	4342      	muls	r2, r0
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f00e fe2f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ae4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005ae8:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005aec:	f06f 031f 	mvn.w	r3, #31
 8005af0:	4252      	negs	r2, r2
 8005af2:	4628      	mov	r0, r5
 8005af4:	4359      	muls	r1, r3
 8005af6:	f00e fe24 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005afa:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005afe:	f06f 0121 	mvn.w	r1, #33	; 0x21
        return i * scale;
 8005b02:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b06:	4628      	mov	r0, r5
 8005b08:	434a      	muls	r2, r1
 8005b0a:	f06f 011d 	mvn.w	r1, #29
 8005b0e:	4359      	muls	r1, r3
 8005b10:	f00e fe17 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b14:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b18:	f06f 0140 	mvn.w	r1, #64	; 0x40
        return i * scale;
 8005b1c:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b20:	4628      	mov	r0, r5
 8005b22:	434a      	muls	r2, r1
 8005b24:	f06f 011b 	mvn.w	r1, #27
 8005b28:	4359      	muls	r1, r3
 8005b2a:	f00e fe0a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b2e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b32:	f06f 0156 	mvn.w	r1, #86	; 0x56
        return i * scale;
 8005b36:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	434a      	muls	r2, r1
 8005b3e:	f06f 0119 	mvn.w	r1, #25
 8005b42:	4359      	muls	r1, r3
 8005b44:	f00e fdfd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b48:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b4c:	f06f 0161 	mvn.w	r1, #97	; 0x61
        return i * scale;
 8005b50:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b54:	4628      	mov	r0, r5
 8005b56:	434a      	muls	r2, r1
 8005b58:	f06f 0117 	mvn.w	r1, #23
 8005b5c:	4359      	muls	r1, r3
 8005b5e:	f00e fdf0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b62:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b66:	f06f 015d 	mvn.w	r1, #93	; 0x5d
        return i * scale;
 8005b6a:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b6e:	4628      	mov	r0, r5
 8005b70:	e004      	b.n	8005b7c <_ZN15Screen1ViewBaseC1Ev+0x2510>
 8005b72:	bf00      	nop
 8005b74:	ff16c416 	.word	0xff16c416
 8005b78:	ff1497c5 	.word	0xff1497c5
 8005b7c:	434a      	muls	r2, r1
 8005b7e:	f06f 0115 	mvn.w	r1, #21
 8005b82:	4359      	muls	r1, r3
 8005b84:	f00e fddd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005b88:	f8d6 3d70 	ldr.w	r3, [r6, #3440]	; 0xd70
 8005b8c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005b90:	f06f 0013 	mvn.w	r0, #19
 8005b94:	f06f 024c 	mvn.w	r2, #76	; 0x4c
 8005b98:	4341      	muls	r1, r0
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	435a      	muls	r2, r3
 8005b9e:	f00e fdd0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ba2:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ba6:	f06f 0132 	mvn.w	r1, #50	; 0x32
        return i * scale;
 8005baa:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bae:	4628      	mov	r0, r5
 8005bb0:	434a      	muls	r2, r1
 8005bb2:	f06f 0111 	mvn.w	r1, #17
 8005bb6:	4359      	muls	r1, r3
 8005bb8:	f00e fdc3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bbc:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005bc0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bc4:	f06f 0316 	mvn.w	r3, #22
 8005bc8:	4628      	mov	r0, r5
 8005bca:	435a      	muls	r2, r3
 8005bcc:	fb0a f101 	mul.w	r1, sl, r1
 8005bd0:	f00e fdb7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005bd4:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bd8:	f06f 010d 	mvn.w	r1, #13
 8005bdc:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005be0:	4628      	mov	r0, r5
 8005be2:	4359      	muls	r1, r3
 8005be4:	f00e fdad 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005be8:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005bec:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005bf0:	f06f 030b 	mvn.w	r3, #11
 8005bf4:	fb09 f202 	mul.w	r2, r9, r2
 8005bf8:	4628      	mov	r0, r5
 8005bfa:	4359      	muls	r1, r3
 8005bfc:	f00e fda1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c00:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c04:	2118      	movs	r1, #24
        return i * scale;
 8005c06:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	434a      	muls	r2, r1
 8005c0e:	f06f 0109 	mvn.w	r1, #9
 8005c12:	4359      	muls	r1, r3
 8005c14:	f00e fd95 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c18:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005c1c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
 8005c20:	f06f 0307 	mvn.w	r3, #7
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c24:	2013      	movs	r0, #19
 8005c26:	4359      	muls	r1, r3
 8005c28:	4342      	muls	r2, r0
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f00e fd89 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c30:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005c34:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c38:	2306      	movs	r3, #6
 8005c3a:	f06f 0005 	mvn.w	r0, #5
 8005c3e:	435a      	muls	r2, r3
 8005c40:	4341      	muls	r1, r0
 8005c42:	4628      	mov	r0, r5
 8005c44:	f00e fd7d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c48:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c4c:	f06f 0307 	mvn.w	r3, #7
        return i * scale;
 8005c50:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c54:	4628      	mov	r0, r5
 8005c56:	435a      	muls	r2, r3
 8005c58:	f06f 0303 	mvn.w	r3, #3
 8005c5c:	4359      	muls	r1, r3
 8005c5e:	f00e fd70 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c62:	f06f 0301 	mvn.w	r3, #1
 8005c66:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c6a:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 8005c6e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c72:	4342      	muls	r2, r0
 8005c74:	4628      	mov	r0, r5
 8005c76:	4359      	muls	r1, r3
 8005c78:	f00e fd63 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c7c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c80:	f06f 0116 	mvn.w	r1, #22
 8005c84:	4628      	mov	r0, r5
 8005c86:	434a      	muls	r2, r1
 8005c88:	4659      	mov	r1, fp
 8005c8a:	f00e fd5a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005c8e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005c92:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005c96:	4628      	mov	r0, r5
 8005c98:	fb0a f202 	mul.w	r2, sl, r2
        return i * scale;
 8005c9c:	f04f 0a38 	mov.w	sl, #56	; 0x38
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ca0:	0049      	lsls	r1, r1, #1
 8005ca2:	f00e fd4e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ca6:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005caa:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cae:	4628      	mov	r0, r5
 8005cb0:	0052      	lsls	r2, r2, #1
 8005cb2:	0089      	lsls	r1, r1, #2
 8005cb4:	f00e fd45 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005cb8:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cbc:	201c      	movs	r0, #28
        return i * scale;
 8005cbe:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cc2:	4342      	muls	r2, r0
 8005cc4:	2006      	movs	r0, #6
 8005cc6:	4341      	muls	r1, r0
 8005cc8:	4628      	mov	r0, r5
 8005cca:	f00e fd3a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005cce:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005cd2:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	fb0a f202 	mul.w	r2, sl, r2
 8005cdc:	00c9      	lsls	r1, r1, #3
 8005cde:	f00e fd30 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ce2:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005ce6:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cea:	230a      	movs	r3, #10
 8005cec:	2050      	movs	r0, #80	; 0x50
 8005cee:	4359      	muls	r1, r3
 8005cf0:	4342      	muls	r2, r0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f00e fd25 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005cf8:	230c      	movs	r3, #12
        return i * scale;
 8005cfa:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005cfe:	205f      	movs	r0, #95	; 0x5f
        return i * scale;
 8005d00:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d04:	4342      	muls	r2, r0
 8005d06:	4628      	mov	r0, r5
 8005d08:	4359      	muls	r1, r3
 8005d0a:	f00e fd1a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d0e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d12:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 8005d14:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d18:	4342      	muls	r2, r0
 8005d1a:	200e      	movs	r0, #14
 8005d1c:	4341      	muls	r1, r0
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f00e fd0f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d24:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005d28:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d2c:	2055      	movs	r0, #85	; 0x55
 8005d2e:	0109      	lsls	r1, r1, #4
 8005d30:	4342      	muls	r2, r0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f00e fd05 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d38:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005d3c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d40:	203d      	movs	r0, #61	; 0x3d
 8005d42:	fb09 f101 	mul.w	r1, r9, r1
        return i * scale;
 8005d46:	f04f 092c 	mov.w	r9, #44	; 0x2c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d4a:	4342      	muls	r2, r0
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f00e fcf8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d52:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d56:	201d      	movs	r0, #29
        return i * scale;
 8005d58:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d5c:	4342      	muls	r2, r0
 8005d5e:	2014      	movs	r0, #20
 8005d60:	4341      	muls	r1, r0
 8005d62:	4628      	mov	r0, r5
 8005d64:	f00e fced 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d68:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005d6c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d70:	2016      	movs	r0, #22
 8005d72:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005d76:	4341      	muls	r1, r0
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f00e fce2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005d7e:	2318      	movs	r3, #24
        return i * scale;
 8005d80:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d84:	4628      	mov	r0, r5
        return i * scale;
 8005d86:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d8a:	eba2 1242 	sub.w	r2, r2, r2, lsl #5
 8005d8e:	4359      	muls	r1, r3
 8005d90:	f00e fcd7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005d94:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005d98:	f06f 0030 	mvn.w	r0, #48	; 0x30
        return i * scale;
 8005d9c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005da0:	4342      	muls	r2, r0
 8005da2:	201a      	movs	r0, #26
 8005da4:	4341      	muls	r1, r0
 8005da6:	4628      	mov	r0, r5
 8005da8:	f00e fccb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005dac:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005db0:	f06f 0335 	mvn.w	r3, #53	; 0x35
        return i * scale;
 8005db4:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005db8:	4628      	mov	r0, r5
 8005dba:	435a      	muls	r2, r3
 8005dbc:	231c      	movs	r3, #28
 8005dbe:	4359      	muls	r1, r3
 8005dc0:	f00e fcbf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005dc4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dc8:	f06f 032f 	mvn.w	r3, #47	; 0x2f
        return i * scale;
 8005dcc:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	435a      	muls	r2, r3
 8005dd4:	231e      	movs	r3, #30
 8005dd6:	4359      	muls	r1, r3
 8005dd8:	f00e fcb3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005ddc:	f06f 0321 	mvn.w	r3, #33	; 0x21
        return i * scale;
 8005de0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005de4:	4628      	mov	r0, r5
        return i * scale;
 8005de6:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dea:	435a      	muls	r2, r3
 8005dec:	0149      	lsls	r1, r1, #5
 8005dee:	f00e fca8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005df2:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005df6:	f06f 0010 	mvn.w	r0, #16
        return i * scale;
 8005dfa:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005dfe:	4342      	muls	r2, r0
 8005e00:	2022      	movs	r0, #34	; 0x22
 8005e02:	4341      	muls	r1, r0
 8005e04:	4628      	mov	r0, r5
 8005e06:	f00e fc9c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005e0a:	2324      	movs	r3, #36	; 0x24
        return i * scale;
 8005e0c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e10:	4628      	mov	r0, r5
        return i * scale;
 8005e12:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e16:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8005e1a:	4359      	muls	r1, r3
 8005e1c:	f00e fc91 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e20:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005e24:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e28:	2026      	movs	r0, #38	; 0x26
 8005e2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005e2e:	4341      	muls	r1, r0
 8005e30:	4628      	mov	r0, r5
 8005e32:	f00e fc86 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005e36:	2328      	movs	r3, #40	; 0x28
        return i * scale;
 8005e38:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e3c:	4628      	mov	r0, r5
        return i * scale;
 8005e3e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e42:	4252      	negs	r2, r2
 8005e44:	4359      	muls	r1, r3
 8005e46:	f00e fc7c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e4a:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005e4e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e52:	202a      	movs	r0, #42	; 0x2a
 8005e54:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8005e58:	4341      	muls	r1, r0
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f00e fc71 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e60:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005e64:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e68:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8005e6c:	fb09 f101 	mul.w	r1, r9, r1
 8005e70:	4342      	muls	r2, r0
 8005e72:	4628      	mov	r0, r5
 8005e74:	f00e fc65 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e78:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e7c:	f06f 0038 	mvn.w	r0, #56	; 0x38
        return i * scale;
 8005e80:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e84:	4342      	muls	r2, r0
 8005e86:	202e      	movs	r0, #46	; 0x2e
 8005e88:	4341      	muls	r1, r0
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f00e fc59 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005e90:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e94:	f06f 0049 	mvn.w	r0, #73	; 0x49
        return i * scale;
 8005e98:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005e9c:	4342      	muls	r2, r0
 8005e9e:	2030      	movs	r0, #48	; 0x30
 8005ea0:	4341      	muls	r1, r0
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f00e fc4d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ea8:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005eac:	f06f 0351 	mvn.w	r3, #81	; 0x51
        return i * scale;
 8005eb0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	435a      	muls	r2, r3
 8005eb8:	2332      	movs	r3, #50	; 0x32
 8005eba:	4359      	muls	r1, r3
 8005ebc:	f00e fc41 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005ec0:	f06f 034b 	mvn.w	r3, #75	; 0x4b
        return i * scale;
 8005ec4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ec8:	2034      	movs	r0, #52	; 0x34
        return i * scale;
 8005eca:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ece:	435a      	muls	r2, r3
 8005ed0:	4341      	muls	r1, r0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f00e fc35 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ed8:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005edc:	f06f 0039 	mvn.w	r0, #57	; 0x39
        return i * scale;
 8005ee0:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ee4:	4342      	muls	r2, r0
 8005ee6:	2036      	movs	r0, #54	; 0x36
 8005ee8:	4341      	muls	r1, r0
 8005eea:	4628      	mov	r0, r5
 8005eec:	f00e fc29 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ef0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005ef4:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ef8:	f06f 001c 	mvn.w	r0, #28
 8005efc:	fb0a f101 	mul.w	r1, sl, r1
        return i * scale;
 8005f00:	f04f 0a27 	mov.w	sl, #39	; 0x27
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f04:	4342      	muls	r2, r0
 8005f06:	4628      	mov	r0, r5
 8005f08:	f00e fc1b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8005f0c:	2306      	movs	r3, #6
        return i * scale;
 8005f0e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f12:	203a      	movs	r0, #58	; 0x3a
        return i * scale;
 8005f14:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f18:	435a      	muls	r2, r3
 8005f1a:	4341      	muls	r1, r0
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f00e fc10 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f22:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005f26:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f2a:	203c      	movs	r0, #60	; 0x3c
 8005f2c:	fb0a f202 	mul.w	r2, sl, r2
 8005f30:	4341      	muls	r1, r0
 8005f32:	4628      	mov	r0, r5
 8005f34:	f00e fc05 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f38:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005f3c:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f40:	203e      	movs	r0, #62	; 0x3e
 8005f42:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8005f46:	4341      	muls	r1, r0
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f00e fbfa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f4e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005f52:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f56:	2050      	movs	r0, #80	; 0x50
 8005f58:	0189      	lsls	r1, r1, #6
 8005f5a:	4342      	muls	r2, r0
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f00e fbf0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f62:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f66:	2051      	movs	r0, #81	; 0x51
        return i * scale;
 8005f68:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f6c:	4342      	muls	r2, r0
 8005f6e:	2042      	movs	r0, #66	; 0x42
 8005f70:	4341      	muls	r1, r0
 8005f72:	4628      	mov	r0, r5
 8005f74:	f00e fbe5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f78:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f7c:	2046      	movs	r0, #70	; 0x46
        return i * scale;
 8005f7e:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f82:	4342      	muls	r2, r0
 8005f84:	2044      	movs	r0, #68	; 0x44
 8005f86:	4341      	muls	r1, r0
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f00e fbda 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005f8e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8005f92:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005f96:	2332      	movs	r3, #50	; 0x32
 8005f98:	2046      	movs	r0, #70	; 0x46
 8005f9a:	435a      	muls	r2, r3
 8005f9c:	4341      	muls	r1, r0
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f00e fbcf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fa4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fa8:	231c      	movs	r3, #28
        return i * scale;
 8005faa:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fae:	4628      	mov	r0, r5
 8005fb0:	435a      	muls	r2, r3
 8005fb2:	2348      	movs	r3, #72	; 0x48
 8005fb4:	4359      	muls	r1, r3
 8005fb6:	f00e fbc4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fba:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fbe:	210a      	movs	r1, #10
        return i * scale;
 8005fc0:	f8d6 0d6c 	ldr.w	r0, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fc4:	434a      	muls	r2, r1
 8005fc6:	214a      	movs	r1, #74	; 0x4a
 8005fc8:	4341      	muls	r1, r0
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f00e fbb9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fd0:	f8d6 0d6c 	ldr.w	r0, [r6, #3436]	; 0xd6c
 8005fd4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fd8:	214c      	movs	r1, #76	; 0x4c
 8005fda:	4252      	negs	r2, r2
 8005fdc:	4341      	muls	r1, r0
 8005fde:	4628      	mov	r0, r5
 8005fe0:	f00e fbaf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005fe4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8005fe8:	f06f 0301 	mvn.w	r3, #1
        return i * scale;
 8005fec:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	435a      	muls	r2, r3
 8005ff4:	234e      	movs	r3, #78	; 0x4e
 8005ff6:	4359      	muls	r1, r3
 8005ff8:	f00e fba3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8005ffc:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
 8006000:	f8d6 1d6c 	ldr.w	r1, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006004:	2350      	movs	r3, #80	; 0x50
 8006006:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800600a:	4628      	mov	r0, r5
 800600c:	4359      	muls	r1, r3
 800600e:	f00e fb98 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006012:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8006016:	2116      	movs	r1, #22
        return i * scale;
 8006018:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800601c:	4628      	mov	r0, r5
 800601e:	434a      	muls	r2, r1
 8006020:	2152      	movs	r1, #82	; 0x52
 8006022:	4359      	muls	r1, r3
 8006024:	f00e fb8d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006028:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 800602c:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8006030:	2154      	movs	r1, #84	; 0x54
 8006032:	4628      	mov	r0, r5
 8006034:	fb0a f202 	mul.w	r2, sl, r2
 8006038:	4359      	muls	r1, r3
 800603a:	f00e fb82 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800603e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8006042:	2133      	movs	r1, #51	; 0x33
        return i * scale;
 8006044:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 8006048:	4628      	mov	r0, r5
 800604a:	434a      	muls	r2, r1
 800604c:	2156      	movs	r1, #86	; 0x56
 800604e:	4359      	muls	r1, r3
 8006050:	f00e fb77 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006054:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 8006058:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800605c:	2036      	movs	r0, #54	; 0x36
 800605e:	2158      	movs	r1, #88	; 0x58
 8006060:	4342      	muls	r2, r0
 8006062:	4628      	mov	r0, r5
 8006064:	4359      	muls	r1, r3
 8006066:	f00e fb6c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800606a:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 800606e:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8006072:	215a      	movs	r1, #90	; 0x5a
 8006074:	4628      	mov	r0, r5
 8006076:	fb09 f202 	mul.w	r2, r9, r2
 800607a:	4359      	muls	r1, r3
 800607c:	f00e fb61 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006080:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 8006084:	2117      	movs	r1, #23
        return i * scale;
 8006086:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 800608a:	4628      	mov	r0, r5
 800608c:	434a      	muls	r2, r1
 800608e:	215c      	movs	r1, #92	; 0x5c
 8006090:	4359      	muls	r1, r3
 8006092:	f00e fb56 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8006096:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 800609a:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 800609e:	215e      	movs	r1, #94	; 0x5e
 80060a0:	4628      	mov	r0, r5
 80060a2:	4359      	muls	r1, r3
 80060a4:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 80060a8:	f00e fb4b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80060ac:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
 80060b0:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80060b4:	f06f 0027 	mvn.w	r0, #39	; 0x27
 80060b8:	2160      	movs	r1, #96	; 0x60
 80060ba:	4342      	muls	r2, r0
 80060bc:	4628      	mov	r0, r5
 80060be:	4359      	muls	r1, r3
 80060c0:	f00e fb3f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80060c4:	f8d6 2d70 	ldr.w	r2, [r6, #3440]	; 0xd70
        return addValue(int2scaledX(x), int2scaledY(y));
 80060c8:	f06f 0144 	mvn.w	r1, #68	; 0x44
        return i * scale;
 80060cc:	f8d6 3d6c 	ldr.w	r3, [r6, #3436]	; 0xd6c
        return addValue(int2scaledX(x), int2scaledY(y));
 80060d0:	4628      	mov	r0, r5
 80060d2:	434a      	muls	r2, r1
 80060d4:	2162      	movs	r1, #98	; 0x62
 80060d6:	4359      	muls	r1, r3
 80060d8:	f00e fb33 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80060dc:	4629      	mov	r1, r5
 80060de:	4640      	mov	r0, r8
 80060e0:	ad0e      	add	r5, sp, #56	; 0x38
 80060e2:	f00c fabb 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea3.setXY(0, 0);
 80060e6:	465a      	mov	r2, fp
 80060e8:	4659      	mov	r1, fp
 80060ea:	ee18 0a10 	vmov	r0, s16
 80060ee:	f7fd f9f0 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 80060f2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 80060f6:	ee18 1a10 	vmov	r1, s16
 80060fa:	4628      	mov	r0, r5
        color = newColor;
 80060fc:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
        linespace = space;
 8006100:	f8a7 b2b0 	strh.w	fp, [r7, #688]	; 0x2b0
        boundingArea = calculateBoundingArea();
 8006104:	f00f fd7c 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8006108:	ee18 3a10 	vmov	r3, s16
 800610c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006110:	333c      	adds	r3, #60	; 0x3c
 8006112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        : typedTextId(id)
 8006116:	4bfc      	ldr	r3, [pc, #1008]	; (8006508 <_ZN15Screen1ViewBaseC1Ev+0x2e9c>)
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_UJ0C));
 8006118:	a912      	add	r1, sp, #72	; 0x48
 800611a:	ee18 0a10 	vmov	r0, s16
 800611e:	9312      	str	r3, [sp, #72]	; 0x48
 8006120:	2308      	movs	r3, #8
 8006122:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 8006126:	f010 f813 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800612a:	4640      	mov	r0, r8
 800612c:	ee18 1a10 	vmov	r1, s16
 8006130:	f00c fa94 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8006134:	4620      	mov	r0, r4
 8006136:	b015      	add	sp, #84	; 0x54
 8006138:	ecbd 8b10 	vpop	{d8-d15}
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8006140:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006144:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006148:	ee17 3a10 	vmov	r3, s14
 800614c:	1e59      	subs	r1, r3, #1
 800614e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006152:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800615e:	ee17 3a90 	vmov	r3, s15
 8006162:	440b      	add	r3, r1
 8006164:	4619      	mov	r1, r3
 8006166:	f7fd bf46 	b.w	8003ff6 <_ZN15Screen1ViewBaseC1Ev+0x98a>
 800616a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800616e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006172:	ee17 3a10 	vmov	r3, s14
 8006176:	1e59      	subs	r1, r3, #1
 8006178:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800617c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006188:	ee17 3a90 	vmov	r3, s15
 800618c:	440b      	add	r3, r1
 800618e:	4619      	mov	r1, r3
 8006190:	f7fd bf4c 	b.w	800402c <_ZN15Screen1ViewBaseC1Ev+0x9c0>
 8006194:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006198:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800619c:	ee17 3a10 	vmov	r3, s14
 80061a0:	1e59      	subs	r1, r3, #1
 80061a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061a6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061b2:	ee17 3a90 	vmov	r3, s15
 80061b6:	440b      	add	r3, r1
 80061b8:	4619      	mov	r1, r3
 80061ba:	f7fd bf52 	b.w	8004062 <_ZN15Screen1ViewBaseC1Ev+0x9f6>
 80061be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061c6:	ee17 3a10 	vmov	r3, s14
 80061ca:	1e59      	subs	r1, r3, #1
 80061cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061d0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061dc:	ee17 3a90 	vmov	r3, s15
 80061e0:	440b      	add	r3, r1
 80061e2:	4619      	mov	r1, r3
 80061e4:	f7fd bf58 	b.w	8004098 <_ZN15Screen1ViewBaseC1Ev+0xa2c>
 80061e8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80061ec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80061f0:	ee17 3a10 	vmov	r3, s14
 80061f4:	1e59      	subs	r1, r3, #1
 80061f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061fa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80061fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006206:	ee17 3a90 	vmov	r3, s15
 800620a:	440b      	add	r3, r1
 800620c:	4619      	mov	r1, r3
 800620e:	f7fd bf5e 	b.w	80040ce <_ZN15Screen1ViewBaseC1Ev+0xa62>
 8006212:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006216:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800621a:	ee17 3a10 	vmov	r3, s14
 800621e:	1e59      	subs	r1, r3, #1
 8006220:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006224:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006230:	ee17 3a90 	vmov	r3, s15
 8006234:	440b      	add	r3, r1
 8006236:	4619      	mov	r1, r3
 8006238:	f7fd bf64 	b.w	8004104 <_ZN15Screen1ViewBaseC1Ev+0xa98>
 800623c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006240:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006244:	ee17 3a10 	vmov	r3, s14
 8006248:	1e59      	subs	r1, r3, #1
 800624a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800624e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006256:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800625a:	ee17 3a90 	vmov	r3, s15
 800625e:	440b      	add	r3, r1
 8006260:	4619      	mov	r1, r3
 8006262:	f7fd bf6a 	b.w	800413a <_ZN15Screen1ViewBaseC1Ev+0xace>
 8006266:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800626a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800626e:	ee17 3a10 	vmov	r3, s14
 8006272:	1e59      	subs	r1, r3, #1
 8006274:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006278:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800627c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006284:	ee17 3a90 	vmov	r3, s15
 8006288:	440b      	add	r3, r1
 800628a:	4619      	mov	r1, r3
 800628c:	f7fd bf70 	b.w	8004170 <_ZN15Screen1ViewBaseC1Ev+0xb04>
 8006290:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006294:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006298:	ee17 3a10 	vmov	r3, s14
 800629c:	1e59      	subs	r1, r3, #1
 800629e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062a2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ae:	ee17 3a90 	vmov	r3, s15
 80062b2:	440b      	add	r3, r1
 80062b4:	4619      	mov	r1, r3
 80062b6:	f7fd bf76 	b.w	80041a6 <_ZN15Screen1ViewBaseC1Ev+0xb3a>
 80062ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062be:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062c2:	ee17 3a10 	vmov	r3, s14
 80062c6:	1e59      	subs	r1, r3, #1
 80062c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062cc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062d8:	ee17 3a90 	vmov	r3, s15
 80062dc:	440b      	add	r3, r1
 80062de:	4619      	mov	r1, r3
 80062e0:	f7fd bf7c 	b.w	80041dc <_ZN15Screen1ViewBaseC1Ev+0xb70>
 80062e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80062e8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80062ec:	ee17 3a10 	vmov	r3, s14
 80062f0:	1e59      	subs	r1, r3, #1
 80062f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062f6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006302:	ee17 3a90 	vmov	r3, s15
 8006306:	440b      	add	r3, r1
 8006308:	4619      	mov	r1, r3
 800630a:	f7fd bf82 	b.w	8004212 <_ZN15Screen1ViewBaseC1Ev+0xba6>
 800630e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006312:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006316:	ee17 3a10 	vmov	r3, s14
 800631a:	1e59      	subs	r1, r3, #1
 800631c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006320:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800632c:	ee17 3a90 	vmov	r3, s15
 8006330:	440b      	add	r3, r1
 8006332:	4619      	mov	r1, r3
 8006334:	f7fd bf88 	b.w	8004248 <_ZN15Screen1ViewBaseC1Ev+0xbdc>
 8006338:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800633c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006340:	ee17 3a10 	vmov	r3, s14
 8006344:	1e59      	subs	r1, r3, #1
 8006346:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800634a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006356:	ee17 3a90 	vmov	r3, s15
 800635a:	440b      	add	r3, r1
 800635c:	4619      	mov	r1, r3
 800635e:	f7fd bf8e 	b.w	800427e <_ZN15Screen1ViewBaseC1Ev+0xc12>
 8006362:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006366:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800636a:	ee17 3a10 	vmov	r3, s14
 800636e:	1e59      	subs	r1, r3, #1
 8006370:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006374:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006380:	ee17 3a90 	vmov	r3, s15
 8006384:	440b      	add	r3, r1
 8006386:	4619      	mov	r1, r3
 8006388:	f7fd bf94 	b.w	80042b4 <_ZN15Screen1ViewBaseC1Ev+0xc48>
 800638c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006390:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006394:	ee17 3a10 	vmov	r3, s14
 8006398:	1e59      	subs	r1, r3, #1
 800639a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800639e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063aa:	ee17 3a90 	vmov	r3, s15
 80063ae:	440b      	add	r3, r1
 80063b0:	4619      	mov	r1, r3
 80063b2:	f7fd bf9a 	b.w	80042ea <_ZN15Screen1ViewBaseC1Ev+0xc7e>
 80063b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063ba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063be:	ee17 3a10 	vmov	r3, s14
 80063c2:	1e59      	subs	r1, r3, #1
 80063c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063c8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d4:	ee17 3a90 	vmov	r3, s15
 80063d8:	440b      	add	r3, r1
 80063da:	4619      	mov	r1, r3
 80063dc:	f7fd bfea 	b.w	80043b4 <_ZN15Screen1ViewBaseC1Ev+0xd48>
 80063e0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80063e4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80063e8:	ee17 3a10 	vmov	r3, s14
 80063ec:	1e59      	subs	r1, r3, #1
 80063ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063f2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80063f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063fe:	ee17 3a90 	vmov	r3, s15
 8006402:	440b      	add	r3, r1
 8006404:	4619      	mov	r1, r3
 8006406:	f7fd bff0 	b.w	80043ea <_ZN15Screen1ViewBaseC1Ev+0xd7e>
 800640a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800640e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006412:	ee17 3a10 	vmov	r3, s14
 8006416:	1e59      	subs	r1, r3, #1
 8006418:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800641c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006428:	ee17 3a90 	vmov	r3, s15
 800642c:	440b      	add	r3, r1
 800642e:	4619      	mov	r1, r3
 8006430:	f7fd bff6 	b.w	8004420 <_ZN15Screen1ViewBaseC1Ev+0xdb4>
 8006434:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006438:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800643c:	ee17 3a10 	vmov	r3, s14
 8006440:	1e59      	subs	r1, r3, #1
 8006442:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006446:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006452:	ee17 3a90 	vmov	r3, s15
 8006456:	440b      	add	r3, r1
 8006458:	4619      	mov	r1, r3
 800645a:	f7fd bffc 	b.w	8004456 <_ZN15Screen1ViewBaseC1Ev+0xdea>
 800645e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006462:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006466:	ee17 3a10 	vmov	r3, s14
 800646a:	1e59      	subs	r1, r3, #1
 800646c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006470:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800647c:	ee17 3a90 	vmov	r3, s15
 8006480:	440b      	add	r3, r1
 8006482:	4619      	mov	r1, r3
 8006484:	f7fe b802 	b.w	800448c <_ZN15Screen1ViewBaseC1Ev+0xe20>
 8006488:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800648c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006490:	ee17 3a10 	vmov	r3, s14
 8006494:	1e59      	subs	r1, r3, #1
 8006496:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800649a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064a6:	ee17 3a90 	vmov	r3, s15
 80064aa:	440b      	add	r3, r1
 80064ac:	4619      	mov	r1, r3
 80064ae:	f7fe b808 	b.w	80044c2 <_ZN15Screen1ViewBaseC1Ev+0xe56>
 80064b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064ba:	ee17 3a10 	vmov	r3, s14
 80064be:	1e59      	subs	r1, r3, #1
 80064c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064c4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064d0:	ee17 3a90 	vmov	r3, s15
 80064d4:	440b      	add	r3, r1
 80064d6:	4619      	mov	r1, r3
 80064d8:	f7fe b80e 	b.w	80044f8 <_ZN15Screen1ViewBaseC1Ev+0xe8c>
 80064dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80064e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80064e4:	ee17 3a10 	vmov	r3, s14
 80064e8:	1e59      	subs	r1, r3, #1
 80064ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80064f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064fa:	ee17 3a90 	vmov	r3, s15
 80064fe:	440b      	add	r3, r1
 8006500:	4619      	mov	r1, r3
 8006502:	f7fe b814 	b.w	800452e <_ZN15Screen1ViewBaseC1Ev+0xec2>
 8006506:	bf00      	nop
 8006508:	080262c0 	.word	0x080262c0
 800650c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006510:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006514:	ee17 3a10 	vmov	r3, s14
 8006518:	1e59      	subs	r1, r3, #1
 800651a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800651e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006526:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800652a:	ee17 3a90 	vmov	r3, s15
 800652e:	440b      	add	r3, r1
 8006530:	4619      	mov	r1, r3
 8006532:	f7fe b817 	b.w	8004564 <_ZN15Screen1ViewBaseC1Ev+0xef8>
 8006536:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800653a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800653e:	ee17 3a10 	vmov	r3, s14
 8006542:	1e59      	subs	r1, r3, #1
 8006544:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006548:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800654c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006554:	ee17 3a90 	vmov	r3, s15
 8006558:	440b      	add	r3, r1
 800655a:	4619      	mov	r1, r3
 800655c:	f7fe b81d 	b.w	800459a <_ZN15Screen1ViewBaseC1Ev+0xf2e>
 8006560:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006564:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006568:	ee17 3a10 	vmov	r3, s14
 800656c:	1e59      	subs	r1, r3, #1
 800656e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006572:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800657a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800657e:	ee17 3a90 	vmov	r3, s15
 8006582:	440b      	add	r3, r1
 8006584:	4619      	mov	r1, r3
 8006586:	f7fe b823 	b.w	80045d0 <_ZN15Screen1ViewBaseC1Ev+0xf64>
 800658a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800658e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006592:	ee17 3a10 	vmov	r3, s14
 8006596:	1e59      	subs	r1, r3, #1
 8006598:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800659c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80065a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065a8:	ee17 3a90 	vmov	r3, s15
 80065ac:	440b      	add	r3, r1
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7fe b829 	b.w	8004606 <_ZN15Screen1ViewBaseC1Ev+0xf9a>
 80065b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80065b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80065bc:	ee17 3a10 	vmov	r3, s14
 80065c0:	1e59      	subs	r1, r3, #1
 80065c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065c6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80065ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d2:	ee17 3a90 	vmov	r3, s15
 80065d6:	440b      	add	r3, r1
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fe b82f 	b.w	800463c <_ZN15Screen1ViewBaseC1Ev+0xfd0>
 80065de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80065e2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80065e6:	ee17 3a10 	vmov	r3, s14
 80065ea:	1e59      	subs	r1, r3, #1
 80065ec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065f0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80065f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065fc:	ee17 3a90 	vmov	r3, s15
 8006600:	440b      	add	r3, r1
 8006602:	4619      	mov	r1, r3
 8006604:	f7fe b835 	b.w	8004672 <_ZN15Screen1ViewBaseC1Ev+0x1006>
 8006608:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800660c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006610:	ee17 3a10 	vmov	r3, s14
 8006614:	1e59      	subs	r1, r3, #1
 8006616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800661a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800661e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006626:	ee17 3a90 	vmov	r3, s15
 800662a:	440b      	add	r3, r1
 800662c:	4619      	mov	r1, r3
 800662e:	f7fe b83b 	b.w	80046a8 <_ZN15Screen1ViewBaseC1Ev+0x103c>
 8006632:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006636:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800663a:	ee17 3a10 	vmov	r3, s14
 800663e:	1e59      	subs	r1, r3, #1
 8006640:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006644:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800664c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006650:	ee17 3a90 	vmov	r3, s15
 8006654:	440b      	add	r3, r1
 8006656:	4619      	mov	r1, r3
 8006658:	f7fe b841 	b.w	80046de <_ZN15Screen1ViewBaseC1Ev+0x1072>
 800665c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006660:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006664:	ee17 3a10 	vmov	r3, s14
 8006668:	1e59      	subs	r1, r3, #1
 800666a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800666e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800667a:	ee17 3a90 	vmov	r3, s15
 800667e:	440b      	add	r3, r1
 8006680:	4619      	mov	r1, r3
 8006682:	f7fe b847 	b.w	8004714 <_ZN15Screen1ViewBaseC1Ev+0x10a8>
 8006686:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800668a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800668e:	ee17 3a10 	vmov	r3, s14
 8006692:	1e59      	subs	r1, r3, #1
 8006694:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006698:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800669c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066a4:	ee17 3a90 	vmov	r3, s15
 80066a8:	440b      	add	r3, r1
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7fe b84d 	b.w	800474a <_ZN15Screen1ViewBaseC1Ev+0x10de>
 80066b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066b4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80066b8:	ee17 3a10 	vmov	r3, s14
 80066bc:	1e59      	subs	r1, r3, #1
 80066be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066c2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80066c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066ce:	ee17 3a90 	vmov	r3, s15
 80066d2:	440b      	add	r3, r1
 80066d4:	4619      	mov	r1, r3
 80066d6:	f7fe b853 	b.w	8004780 <_ZN15Screen1ViewBaseC1Ev+0x1114>
 80066da:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80066de:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80066e2:	ee17 3a10 	vmov	r3, s14
 80066e6:	1e59      	subs	r1, r3, #1
 80066e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80066ec:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80066f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066f8:	ee17 3a90 	vmov	r3, s15
 80066fc:	440b      	add	r3, r1
 80066fe:	4619      	mov	r1, r3
 8006700:	f7fe b859 	b.w	80047b6 <_ZN15Screen1ViewBaseC1Ev+0x114a>
 8006704:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006708:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800670c:	ee17 3a10 	vmov	r3, s14
 8006710:	1e59      	subs	r1, r3, #1
 8006712:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006716:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800671a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800671e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006722:	ee17 3a90 	vmov	r3, s15
 8006726:	440b      	add	r3, r1
 8006728:	4619      	mov	r1, r3
 800672a:	f7fe b85f 	b.w	80047ec <_ZN15Screen1ViewBaseC1Ev+0x1180>
 800672e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006732:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006736:	ee17 3a10 	vmov	r3, s14
 800673a:	1e59      	subs	r1, r3, #1
 800673c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006740:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800674c:	ee17 3a90 	vmov	r3, s15
 8006750:	440b      	add	r3, r1
 8006752:	4619      	mov	r1, r3
 8006754:	f7fe b865 	b.w	8004822 <_ZN15Screen1ViewBaseC1Ev+0x11b6>
 8006758:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800675c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006760:	ee17 3a10 	vmov	r3, s14
 8006764:	1e59      	subs	r1, r3, #1
 8006766:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800676a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006776:	ee17 3a90 	vmov	r3, s15
 800677a:	440b      	add	r3, r1
 800677c:	4619      	mov	r1, r3
 800677e:	f7fe b86b 	b.w	8004858 <_ZN15Screen1ViewBaseC1Ev+0x11ec>
 8006782:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006786:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800678a:	ee17 3a10 	vmov	r3, s14
 800678e:	1e59      	subs	r1, r3, #1
 8006790:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006794:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800679c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067a0:	ee17 3a90 	vmov	r3, s15
 80067a4:	440b      	add	r3, r1
 80067a6:	4619      	mov	r1, r3
 80067a8:	f7fe b871 	b.w	800488e <_ZN15Screen1ViewBaseC1Ev+0x1222>
 80067ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067b0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067b4:	ee17 3a10 	vmov	r3, s14
 80067b8:	1e59      	subs	r1, r3, #1
 80067ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067be:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80067c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067ca:	ee17 3a90 	vmov	r3, s15
 80067ce:	440b      	add	r3, r1
 80067d0:	4619      	mov	r1, r3
 80067d2:	f7fe b877 	b.w	80048c4 <_ZN15Screen1ViewBaseC1Ev+0x1258>
 80067d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067da:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80067de:	ee17 3a10 	vmov	r3, s14
 80067e2:	1e59      	subs	r1, r3, #1
 80067e4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067e8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80067ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067f4:	ee17 3a90 	vmov	r3, s15
 80067f8:	440b      	add	r3, r1
 80067fa:	4619      	mov	r1, r3
 80067fc:	f7fe b87d 	b.w	80048fa <_ZN15Screen1ViewBaseC1Ev+0x128e>
 8006800:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006804:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006808:	ee17 3a10 	vmov	r3, s14
 800680c:	1e59      	subs	r1, r3, #1
 800680e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006812:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800681a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800681e:	ee17 3a90 	vmov	r3, s15
 8006822:	440b      	add	r3, r1
 8006824:	4619      	mov	r1, r3
 8006826:	f7fe b883 	b.w	8004930 <_ZN15Screen1ViewBaseC1Ev+0x12c4>
 800682a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800682e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006832:	ee17 3a10 	vmov	r3, s14
 8006836:	1e59      	subs	r1, r3, #1
 8006838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800683c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006848:	ee17 3a90 	vmov	r3, s15
 800684c:	440b      	add	r3, r1
 800684e:	4619      	mov	r1, r3
 8006850:	f7fe b889 	b.w	8004966 <_ZN15Screen1ViewBaseC1Ev+0x12fa>
 8006854:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006858:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800685c:	ee17 3a10 	vmov	r3, s14
 8006860:	1e59      	subs	r1, r3, #1
 8006862:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006866:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800686a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006872:	ee17 3a90 	vmov	r3, s15
 8006876:	440b      	add	r3, r1
 8006878:	4619      	mov	r1, r3
 800687a:	f7fe b88f 	b.w	800499c <_ZN15Screen1ViewBaseC1Ev+0x1330>
 800687e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006882:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006886:	ee17 3a10 	vmov	r3, s14
 800688a:	1e59      	subs	r1, r3, #1
 800688c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006890:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006894:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800689c:	ee17 3a90 	vmov	r3, s15
 80068a0:	440b      	add	r3, r1
 80068a2:	4619      	mov	r1, r3
 80068a4:	f7fe b895 	b.w	80049d2 <_ZN15Screen1ViewBaseC1Ev+0x1366>
 80068a8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068ac:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068b0:	ee17 3a10 	vmov	r3, s14
 80068b4:	1e59      	subs	r1, r3, #1
 80068b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068ba:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80068be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068c6:	ee17 3a90 	vmov	r3, s15
 80068ca:	440b      	add	r3, r1
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7fe b89b 	b.w	8004a08 <_ZN15Screen1ViewBaseC1Ev+0x139c>
 80068d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068d6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80068da:	ee17 3a10 	vmov	r3, s14
 80068de:	1e59      	subs	r1, r3, #1
 80068e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80068e4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80068e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068f0:	ee17 3a90 	vmov	r3, s15
 80068f4:	440b      	add	r3, r1
 80068f6:	4619      	mov	r1, r3
 80068f8:	f7fe b8a1 	b.w	8004a3e <_ZN15Screen1ViewBaseC1Ev+0x13d2>
 80068fc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006900:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006904:	ee17 3a10 	vmov	r3, s14
 8006908:	1e59      	subs	r1, r3, #1
 800690a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800690e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800691a:	ee17 3a90 	vmov	r3, s15
 800691e:	440b      	add	r3, r1
 8006920:	4619      	mov	r1, r3
 8006922:	f7fe b8a7 	b.w	8004a74 <_ZN15Screen1ViewBaseC1Ev+0x1408>
 8006926:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800692a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800692e:	ee17 3a10 	vmov	r3, s14
 8006932:	1e59      	subs	r1, r3, #1
 8006934:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006938:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800693c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006944:	ee17 3a90 	vmov	r3, s15
 8006948:	440b      	add	r3, r1
 800694a:	4619      	mov	r1, r3
 800694c:	f7fe b8ad 	b.w	8004aaa <_ZN15Screen1ViewBaseC1Ev+0x143e>
 8006950:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006954:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006958:	ee17 3a10 	vmov	r3, s14
 800695c:	1e59      	subs	r1, r3, #1
 800695e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006962:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800696a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800696e:	ee17 3a90 	vmov	r3, s15
 8006972:	440b      	add	r3, r1
 8006974:	4619      	mov	r1, r3
 8006976:	f7fe b8b3 	b.w	8004ae0 <_ZN15Screen1ViewBaseC1Ev+0x1474>
 800697a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800697e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006982:	ee17 3a10 	vmov	r3, s14
 8006986:	1e59      	subs	r1, r3, #1
 8006988:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800698c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006998:	ee17 3a90 	vmov	r3, s15
 800699c:	440b      	add	r3, r1
 800699e:	4619      	mov	r1, r3
 80069a0:	f7fe b8b9 	b.w	8004b16 <_ZN15Screen1ViewBaseC1Ev+0x14aa>
 80069a4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069a8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069ac:	ee17 3a10 	vmov	r3, s14
 80069b0:	1e59      	subs	r1, r3, #1
 80069b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069b6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80069ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069c2:	ee17 3a90 	vmov	r3, s15
 80069c6:	440b      	add	r3, r1
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7fe b8bf 	b.w	8004b4c <_ZN15Screen1ViewBaseC1Ev+0x14e0>
 80069ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069d2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80069d6:	ee17 3a10 	vmov	r3, s14
 80069da:	1e59      	subs	r1, r3, #1
 80069dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069e0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80069e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ec:	ee17 3a90 	vmov	r3, s15
 80069f0:	440b      	add	r3, r1
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7fe b910 	b.w	8004c18 <_ZN15Screen1ViewBaseC1Ev+0x15ac>
 80069f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069fc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a00:	ee17 3a10 	vmov	r3, s14
 8006a04:	1e59      	subs	r1, r3, #1
 8006a06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a0a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a16:	ee17 3a90 	vmov	r3, s15
 8006a1a:	440b      	add	r3, r1
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f7fe b916 	b.w	8004c4e <_ZN15Screen1ViewBaseC1Ev+0x15e2>
 8006a22:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a26:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a2a:	ee17 3a10 	vmov	r3, s14
 8006a2e:	1e59      	subs	r1, r3, #1
 8006a30:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a34:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a40:	ee17 3a90 	vmov	r3, s15
 8006a44:	440b      	add	r3, r1
 8006a46:	4619      	mov	r1, r3
 8006a48:	f7fe b91c 	b.w	8004c84 <_ZN15Screen1ViewBaseC1Ev+0x1618>
 8006a4c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a50:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a54:	ee17 3a10 	vmov	r3, s14
 8006a58:	1e59      	subs	r1, r3, #1
 8006a5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a5e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a6a:	ee17 3a90 	vmov	r3, s15
 8006a6e:	440b      	add	r3, r1
 8006a70:	4619      	mov	r1, r3
 8006a72:	f7fe b922 	b.w	8004cba <_ZN15Screen1ViewBaseC1Ev+0x164e>
 8006a76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006a7a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006a7e:	ee17 3a10 	vmov	r3, s14
 8006a82:	1e59      	subs	r1, r3, #1
 8006a84:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006a88:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a94:	ee17 3a90 	vmov	r3, s15
 8006a98:	440b      	add	r3, r1
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f7fe b928 	b.w	8004cf0 <_ZN15Screen1ViewBaseC1Ev+0x1684>
 8006aa0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006aa4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006aa8:	ee17 3a10 	vmov	r3, s14
 8006aac:	1e59      	subs	r1, r3, #1
 8006aae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ab2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006abe:	ee17 3a90 	vmov	r3, s15
 8006ac2:	440b      	add	r3, r1
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f7fe b92e 	b.w	8004d26 <_ZN15Screen1ViewBaseC1Ev+0x16ba>
 8006aca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ace:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ad2:	ee17 3a10 	vmov	r3, s14
 8006ad6:	1e59      	subs	r1, r3, #1
 8006ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006adc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ae8:	ee17 3a90 	vmov	r3, s15
 8006aec:	440b      	add	r3, r1
 8006aee:	4619      	mov	r1, r3
 8006af0:	f7fe b934 	b.w	8004d5c <_ZN15Screen1ViewBaseC1Ev+0x16f0>
 8006af4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006af8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006afc:	ee17 3a10 	vmov	r3, s14
 8006b00:	1e59      	subs	r1, r3, #1
 8006b02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b06:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b12:	ee17 3a90 	vmov	r3, s15
 8006b16:	440b      	add	r3, r1
 8006b18:	4619      	mov	r1, r3
 8006b1a:	f7fe b93a 	b.w	8004d92 <_ZN15Screen1ViewBaseC1Ev+0x1726>
 8006b1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b22:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b26:	ee17 3a10 	vmov	r3, s14
 8006b2a:	1e59      	subs	r1, r3, #1
 8006b2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b30:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3c:	ee17 3a90 	vmov	r3, s15
 8006b40:	440b      	add	r3, r1
 8006b42:	4619      	mov	r1, r3
 8006b44:	f7fe b940 	b.w	8004dc8 <_ZN15Screen1ViewBaseC1Ev+0x175c>
 8006b48:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b4c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b50:	ee17 3a10 	vmov	r3, s14
 8006b54:	1e59      	subs	r1, r3, #1
 8006b56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b5a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b66:	ee17 3a90 	vmov	r3, s15
 8006b6a:	440b      	add	r3, r1
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	f7fe b946 	b.w	8004dfe <_ZN15Screen1ViewBaseC1Ev+0x1792>
 8006b72:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006b76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006b7a:	ee17 3a10 	vmov	r3, s14
 8006b7e:	1e59      	subs	r1, r3, #1
 8006b80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b84:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b90:	ee17 3a90 	vmov	r3, s15
 8006b94:	440b      	add	r3, r1
 8006b96:	4619      	mov	r1, r3
 8006b98:	f7fe b94c 	b.w	8004e34 <_ZN15Screen1ViewBaseC1Ev+0x17c8>
 8006b9c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ba0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ba4:	ee17 3a10 	vmov	r3, s14
 8006ba8:	1e59      	subs	r1, r3, #1
 8006baa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bae:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bba:	ee17 3a90 	vmov	r3, s15
 8006bbe:	440b      	add	r3, r1
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	f7fe b952 	b.w	8004e6a <_ZN15Screen1ViewBaseC1Ev+0x17fe>
 8006bc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bca:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bce:	ee17 3a10 	vmov	r3, s14
 8006bd2:	1e59      	subs	r1, r3, #1
 8006bd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006bd8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006bdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006be4:	ee17 3a90 	vmov	r3, s15
 8006be8:	440b      	add	r3, r1
 8006bea:	4619      	mov	r1, r3
 8006bec:	f7fe b958 	b.w	8004ea0 <_ZN15Screen1ViewBaseC1Ev+0x1834>
 8006bf0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006bf4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006bf8:	ee17 3a10 	vmov	r3, s14
 8006bfc:	1e59      	subs	r1, r3, #1
 8006bfe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c02:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c0e:	ee17 3a90 	vmov	r3, s15
 8006c12:	440b      	add	r3, r1
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7fe b95e 	b.w	8004ed6 <_ZN15Screen1ViewBaseC1Ev+0x186a>
 8006c1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c1e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c22:	ee17 3a10 	vmov	r3, s14
 8006c26:	1e59      	subs	r1, r3, #1
 8006c28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c2c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c38:	ee17 3a90 	vmov	r3, s15
 8006c3c:	440b      	add	r3, r1
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f7fe b964 	b.w	8004f0c <_ZN15Screen1ViewBaseC1Ev+0x18a0>
 8006c44:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c48:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c4c:	ee17 3a10 	vmov	r3, s14
 8006c50:	1e59      	subs	r1, r3, #1
 8006c52:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c56:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c62:	ee17 3a90 	vmov	r3, s15
 8006c66:	440b      	add	r3, r1
 8006c68:	4619      	mov	r1, r3
 8006c6a:	f7fe b96a 	b.w	8004f42 <_ZN15Screen1ViewBaseC1Ev+0x18d6>
 8006c6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c72:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006c76:	ee17 3a10 	vmov	r3, s14
 8006c7a:	1e59      	subs	r1, r3, #1
 8006c7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006c80:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c8c:	ee17 3a90 	vmov	r3, s15
 8006c90:	440b      	add	r3, r1
 8006c92:	4619      	mov	r1, r3
 8006c94:	f7fe b970 	b.w	8004f78 <_ZN15Screen1ViewBaseC1Ev+0x190c>
 8006c98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006c9c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ca0:	ee17 3a10 	vmov	r3, s14
 8006ca4:	1e59      	subs	r1, r3, #1
 8006ca6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006caa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cb6:	ee17 3a90 	vmov	r3, s15
 8006cba:	440b      	add	r3, r1
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f7fe b976 	b.w	8004fae <_ZN15Screen1ViewBaseC1Ev+0x1942>
 8006cc2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cc6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cca:	ee17 3a10 	vmov	r3, s14
 8006cce:	1e59      	subs	r1, r3, #1
 8006cd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cd4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ce0:	ee17 3a90 	vmov	r3, s15
 8006ce4:	440b      	add	r3, r1
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7fe b97c 	b.w	8004fe4 <_ZN15Screen1ViewBaseC1Ev+0x1978>
 8006cec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006cf0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006cf4:	ee17 3a10 	vmov	r3, s14
 8006cf8:	1e59      	subs	r1, r3, #1
 8006cfa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006cfe:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d0a:	ee17 3a90 	vmov	r3, s15
 8006d0e:	440b      	add	r3, r1
 8006d10:	4619      	mov	r1, r3
 8006d12:	f7fe b982 	b.w	800501a <_ZN15Screen1ViewBaseC1Ev+0x19ae>
 8006d16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d1a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d1e:	ee17 3a10 	vmov	r3, s14
 8006d22:	1e59      	subs	r1, r3, #1
 8006d24:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d28:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d34:	ee17 3a90 	vmov	r3, s15
 8006d38:	440b      	add	r3, r1
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	f7fe b988 	b.w	8005050 <_ZN15Screen1ViewBaseC1Ev+0x19e4>
 8006d40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d44:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d48:	ee17 3a10 	vmov	r3, s14
 8006d4c:	1e59      	subs	r1, r3, #1
 8006d4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d52:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d5e:	ee17 3a90 	vmov	r3, s15
 8006d62:	440b      	add	r3, r1
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7fe b98e 	b.w	8005086 <_ZN15Screen1ViewBaseC1Ev+0x1a1a>
 8006d6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d6e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d72:	ee17 3a10 	vmov	r3, s14
 8006d76:	1e59      	subs	r1, r3, #1
 8006d78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d7c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006d80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d88:	ee17 3a90 	vmov	r3, s15
 8006d8c:	440b      	add	r3, r1
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f7fe b994 	b.w	80050bc <_ZN15Screen1ViewBaseC1Ev+0x1a50>
 8006d94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006d98:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006d9c:	ee17 3a10 	vmov	r3, s14
 8006da0:	1e59      	subs	r1, r3, #1
 8006da2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006da6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db2:	ee17 3a90 	vmov	r3, s15
 8006db6:	440b      	add	r3, r1
 8006db8:	4619      	mov	r1, r3
 8006dba:	f7fe b99a 	b.w	80050f2 <_ZN15Screen1ViewBaseC1Ev+0x1a86>
 8006dbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dc2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006dc6:	ee17 3a10 	vmov	r3, s14
 8006dca:	1e59      	subs	r1, r3, #1
 8006dcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dd0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ddc:	ee17 3a90 	vmov	r3, s15
 8006de0:	440b      	add	r3, r1
 8006de2:	4619      	mov	r1, r3
 8006de4:	f7fe b9a0 	b.w	8005128 <_ZN15Screen1ViewBaseC1Ev+0x1abc>
 8006de8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006dec:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006df0:	ee17 3a10 	vmov	r3, s14
 8006df4:	1e59      	subs	r1, r3, #1
 8006df6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006dfa:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e06:	ee17 3a90 	vmov	r3, s15
 8006e0a:	440b      	add	r3, r1
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fe b9a6 	b.w	800515e <_ZN15Screen1ViewBaseC1Ev+0x1af2>
 8006e12:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e16:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e1a:	ee17 3a10 	vmov	r3, s14
 8006e1e:	1e59      	subs	r1, r3, #1
 8006e20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e24:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e30:	ee17 3a90 	vmov	r3, s15
 8006e34:	440b      	add	r3, r1
 8006e36:	4619      	mov	r1, r3
 8006e38:	f7fe b9ac 	b.w	8005194 <_ZN15Screen1ViewBaseC1Ev+0x1b28>
 8006e3c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e44:	ee17 3a10 	vmov	r3, s14
 8006e48:	1e59      	subs	r1, r3, #1
 8006e4a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e4e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e5a:	ee17 3a90 	vmov	r3, s15
 8006e5e:	440b      	add	r3, r1
 8006e60:	4619      	mov	r1, r3
 8006e62:	f7fe b9b2 	b.w	80051ca <_ZN15Screen1ViewBaseC1Ev+0x1b5e>
 8006e66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e6a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e6e:	ee17 3a10 	vmov	r3, s14
 8006e72:	1e59      	subs	r1, r3, #1
 8006e74:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006e78:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e84:	ee17 3a90 	vmov	r3, s15
 8006e88:	440b      	add	r3, r1
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	f7fe b9b8 	b.w	8005200 <_ZN15Screen1ViewBaseC1Ev+0x1b94>
 8006e90:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006e94:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006e98:	ee17 3a10 	vmov	r3, s14
 8006e9c:	1e59      	subs	r1, r3, #1
 8006e9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ea2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eae:	ee17 3a90 	vmov	r3, s15
 8006eb2:	440b      	add	r3, r1
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f7fe b9be 	b.w	8005236 <_ZN15Screen1ViewBaseC1Ev+0x1bca>
 8006eba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ebe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006ec2:	ee17 3a10 	vmov	r3, s14
 8006ec6:	1e59      	subs	r1, r3, #1
 8006ec8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ecc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed8:	ee17 3a90 	vmov	r3, s15
 8006edc:	440b      	add	r3, r1
 8006ede:	4619      	mov	r1, r3
 8006ee0:	f7fe b9c4 	b.w	800526c <_ZN15Screen1ViewBaseC1Ev+0x1c00>
 8006ee4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006ee8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006eec:	ee17 3a10 	vmov	r3, s14
 8006ef0:	1e59      	subs	r1, r3, #1
 8006ef2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ef6:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f02:	ee17 3a90 	vmov	r3, s15
 8006f06:	440b      	add	r3, r1
 8006f08:	4619      	mov	r1, r3
 8006f0a:	f7fe b9ca 	b.w	80052a2 <_ZN15Screen1ViewBaseC1Ev+0x1c36>
 8006f0e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f12:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f16:	ee17 3a10 	vmov	r3, s14
 8006f1a:	1e59      	subs	r1, r3, #1
 8006f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f20:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2c:	ee17 3a90 	vmov	r3, s15
 8006f30:	440b      	add	r3, r1
 8006f32:	4619      	mov	r1, r3
 8006f34:	f7fe b9d0 	b.w	80052d8 <_ZN15Screen1ViewBaseC1Ev+0x1c6c>
 8006f38:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f3c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f40:	ee17 3a10 	vmov	r3, s14
 8006f44:	1e59      	subs	r1, r3, #1
 8006f46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f4a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f56:	ee17 3a90 	vmov	r3, s15
 8006f5a:	440b      	add	r3, r1
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	f7fe b9d6 	b.w	800530e <_ZN15Screen1ViewBaseC1Ev+0x1ca2>
 8006f62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f66:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f6a:	ee17 3a10 	vmov	r3, s14
 8006f6e:	1e59      	subs	r1, r3, #1
 8006f70:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f74:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f80:	ee17 3a90 	vmov	r3, s15
 8006f84:	440b      	add	r3, r1
 8006f86:	4619      	mov	r1, r3
 8006f88:	f7fe b9dc 	b.w	8005344 <_ZN15Screen1ViewBaseC1Ev+0x1cd8>
 8006f8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006f90:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006f94:	ee17 3a10 	vmov	r3, s14
 8006f98:	1e59      	subs	r1, r3, #1
 8006f9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f9e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006faa:	ee17 3a90 	vmov	r3, s15
 8006fae:	440b      	add	r3, r1
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f7fe b9e2 	b.w	800537a <_ZN15Screen1ViewBaseC1Ev+0x1d0e>
 8006fb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fba:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fbe:	ee17 3a10 	vmov	r3, s14
 8006fc2:	1e59      	subs	r1, r3, #1
 8006fc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fc8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fd4:	ee17 3a90 	vmov	r3, s15
 8006fd8:	440b      	add	r3, r1
 8006fda:	4619      	mov	r1, r3
 8006fdc:	f7fe b9e8 	b.w	80053b0 <_ZN15Screen1ViewBaseC1Ev+0x1d44>
 8006fe0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006fe4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8006fe8:	ee17 3a10 	vmov	r3, s14
 8006fec:	1e59      	subs	r1, r3, #1
 8006fee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ff2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ffe:	ee17 3a90 	vmov	r3, s15
 8007002:	440b      	add	r3, r1
 8007004:	4619      	mov	r1, r3
 8007006:	f7fe ba29 	b.w	800545c <_ZN15Screen1ViewBaseC1Ev+0x1df0>
 800700a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800700e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007012:	ee17 3a10 	vmov	r3, s14
 8007016:	1e59      	subs	r1, r3, #1
 8007018:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800701c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007020:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007028:	ee17 3a90 	vmov	r3, s15
 800702c:	440b      	add	r3, r1
 800702e:	4619      	mov	r1, r3
 8007030:	f7fe ba2f 	b.w	8005492 <_ZN15Screen1ViewBaseC1Ev+0x1e26>
 8007034:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007038:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800703c:	ee17 3a10 	vmov	r3, s14
 8007040:	1e59      	subs	r1, r3, #1
 8007042:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007046:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800704a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800704e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007052:	ee17 3a90 	vmov	r3, s15
 8007056:	440b      	add	r3, r1
 8007058:	4619      	mov	r1, r3
 800705a:	f7fe ba35 	b.w	80054c8 <_ZN15Screen1ViewBaseC1Ev+0x1e5c>
 800705e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007062:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007066:	ee17 3a10 	vmov	r3, s14
 800706a:	1e59      	subs	r1, r3, #1
 800706c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007070:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800707c:	ee17 3a90 	vmov	r3, s15
 8007080:	440b      	add	r3, r1
 8007082:	4619      	mov	r1, r3
 8007084:	f7fe ba3b 	b.w	80054fe <_ZN15Screen1ViewBaseC1Ev+0x1e92>
 8007088:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800708c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007090:	ee17 3a10 	vmov	r3, s14
 8007094:	1e59      	subs	r1, r3, #1
 8007096:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800709a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070a6:	ee17 3a90 	vmov	r3, s15
 80070aa:	440b      	add	r3, r1
 80070ac:	4619      	mov	r1, r3
 80070ae:	f7fe ba41 	b.w	8005534 <_ZN15Screen1ViewBaseC1Ev+0x1ec8>
 80070b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070b6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070ba:	ee17 3a10 	vmov	r3, s14
 80070be:	1e59      	subs	r1, r3, #1
 80070c0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070c4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070d0:	ee17 3a90 	vmov	r3, s15
 80070d4:	440b      	add	r3, r1
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7fe ba47 	b.w	800556a <_ZN15Screen1ViewBaseC1Ev+0x1efe>
 80070dc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80070e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80070e4:	ee17 3a10 	vmov	r3, s14
 80070e8:	1e59      	subs	r1, r3, #1
 80070ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070ee:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 80070f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070fa:	ee17 3a90 	vmov	r3, s15
 80070fe:	440b      	add	r3, r1
 8007100:	4619      	mov	r1, r3
 8007102:	f7fe ba4d 	b.w	80055a0 <_ZN15Screen1ViewBaseC1Ev+0x1f34>
 8007106:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800710a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800710e:	ee17 3a10 	vmov	r3, s14
 8007112:	1e59      	subs	r1, r3, #1
 8007114:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007118:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800711c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007124:	ee17 3a90 	vmov	r3, s15
 8007128:	440b      	add	r3, r1
 800712a:	4619      	mov	r1, r3
 800712c:	f7fe ba53 	b.w	80055d6 <_ZN15Screen1ViewBaseC1Ev+0x1f6a>
 8007130:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007134:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007138:	ee17 3a10 	vmov	r3, s14
 800713c:	1e59      	subs	r1, r3, #1
 800713e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007142:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800714e:	ee17 3a90 	vmov	r3, s15
 8007152:	440b      	add	r3, r1
 8007154:	4619      	mov	r1, r3
 8007156:	f7fe ba59 	b.w	800560c <_ZN15Screen1ViewBaseC1Ev+0x1fa0>
 800715a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800715e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8007162:	ee17 3a10 	vmov	r3, s14
 8007166:	1e59      	subs	r1, r3, #1
 8007168:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800716c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8007170:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007178:	ee17 3a90 	vmov	r3, s15
 800717c:	440b      	add	r3, r1
 800717e:	4619      	mov	r1, r3
 8007180:	f7fe ba5f 	b.w	8005642 <_ZN15Screen1ViewBaseC1Ev+0x1fd6>
 8007184:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007188:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800718c:	ee17 3a10 	vmov	r3, s14
 8007190:	1e59      	subs	r1, r3, #1
 8007192:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007196:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800719a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800719e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a2:	ee17 3a90 	vmov	r3, s15
 80071a6:	440b      	add	r3, r1
 80071a8:	4619      	mov	r1, r3
 80071aa:	f7fe ba65 	b.w	8005678 <_ZN15Screen1ViewBaseC1Ev+0x200c>
 80071ae:	bf00      	nop

080071b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071b0:	4770      	bx	lr
	...

080071b4 <_Z23getFont_verdana_10_4bppv>:
{
 80071b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071b6:	4d16      	ldr	r5, [pc, #88]	; (8007210 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80071b8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80071ba:	782c      	ldrb	r4, [r5, #0]
 80071bc:	f3bf 8f5b 	dmb	ish
 80071c0:	f014 0401 	ands.w	r4, r4, #1
 80071c4:	d120      	bne.n	8007208 <_Z23getFont_verdana_10_4bppv+0x54>
 80071c6:	4628      	mov	r0, r5
 80071c8:	f01d fa4b 	bl	8024662 <__cxa_guard_acquire>
 80071cc:	b1e0      	cbz	r0, 8007208 <_Z23getFont_verdana_10_4bppv+0x54>
 80071ce:	233f      	movs	r3, #63	; 0x3f
 80071d0:	2201      	movs	r2, #1
 80071d2:	4910      	ldr	r1, [pc, #64]	; (8007214 <_Z23getFont_verdana_10_4bppv+0x60>)
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <_Z23getFont_verdana_10_4bppv+0x64>)
 80071d8:	4810      	ldr	r0, [pc, #64]	; (800721c <_Z23getFont_verdana_10_4bppv+0x68>)
 80071da:	9308      	str	r3, [sp, #32]
 80071dc:	4b10      	ldr	r3, [pc, #64]	; (8007220 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80071de:	940a      	str	r4, [sp, #40]	; 0x28
 80071e0:	9405      	str	r4, [sp, #20]
 80071e2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80071e6:	2304      	movs	r3, #4
 80071e8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80071ec:	230a      	movs	r3, #10
 80071ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80071f8:	f7fb fc46 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80071fc:	4809      	ldr	r0, [pc, #36]	; (8007224 <_Z23getFont_verdana_10_4bppv+0x70>)
 80071fe:	f01d fb59 	bl	80248b4 <atexit>
 8007202:	4628      	mov	r0, r5
 8007204:	f01d fa39 	bl	802467a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8007208:	4804      	ldr	r0, [pc, #16]	; (800721c <_Z23getFont_verdana_10_4bppv+0x68>)
 800720a:	b00f      	add	sp, #60	; 0x3c
 800720c:	bd30      	pop	{r4, r5, pc}
 800720e:	bf00      	nop
 8007210:	24006614 	.word	0x24006614
 8007214:	08028e08 	.word	0x08028e08
 8007218:	08029058 	.word	0x08029058
 800721c:	24006618 	.word	0x24006618
 8007220:	080290bc 	.word	0x080290bc
 8007224:	080071b1 	.word	0x080071b1

08007228 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8007228:	4770      	bx	lr
	...

0800722c <_Z23getFont_verdana_16_4bppv>:
{
 800722c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 800722e:	4d17      	ldr	r5, [pc, #92]	; (800728c <_Z23getFont_verdana_16_4bppv+0x60>)
{
 8007230:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 38, 19, 16, 0, 0, 4, 1, 0, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 63, 0, 0, 0);
 8007232:	782c      	ldrb	r4, [r5, #0]
 8007234:	f3bf 8f5b 	dmb	ish
 8007238:	f014 0401 	ands.w	r4, r4, #1
 800723c:	d122      	bne.n	8007284 <_Z23getFont_verdana_16_4bppv+0x58>
 800723e:	4628      	mov	r0, r5
 8007240:	f01d fa0f 	bl	8024662 <__cxa_guard_acquire>
 8007244:	b1f0      	cbz	r0, 8007284 <_Z23getFont_verdana_16_4bppv+0x58>
 8007246:	233f      	movs	r3, #63	; 0x3f
 8007248:	2226      	movs	r2, #38	; 0x26
 800724a:	4911      	ldr	r1, [pc, #68]	; (8007290 <_Z23getFont_verdana_16_4bppv+0x64>)
 800724c:	9309      	str	r3, [sp, #36]	; 0x24
 800724e:	4b11      	ldr	r3, [pc, #68]	; (8007294 <_Z23getFont_verdana_16_4bppv+0x68>)
 8007250:	4811      	ldr	r0, [pc, #68]	; (8007298 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8007252:	9308      	str	r3, [sp, #32]
 8007254:	4b11      	ldr	r3, [pc, #68]	; (800729c <_Z23getFont_verdana_16_4bppv+0x70>)
 8007256:	940a      	str	r4, [sp, #40]	; 0x28
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	2301      	movs	r3, #1
 800725c:	9401      	str	r4, [sp, #4]
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8007264:	2304      	movs	r3, #4
 8007266:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800726a:	2310      	movs	r3, #16
 800726c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	2313      	movs	r3, #19
 8007274:	f7fb fc08 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8007278:	4809      	ldr	r0, [pc, #36]	; (80072a0 <_Z23getFont_verdana_16_4bppv+0x74>)
 800727a:	f01d fb1b 	bl	80248b4 <atexit>
 800727e:	4628      	mov	r0, r5
 8007280:	f01d f9fb 	bl	802467a <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8007284:	4804      	ldr	r0, [pc, #16]	; (8007298 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8007286:	b00f      	add	sp, #60	; 0x3c
 8007288:	bd30      	pop	{r4, r5, pc}
 800728a:	bf00      	nop
 800728c:	24006644 	.word	0x24006644
 8007290:	08028e18 	.word	0x08028e18
 8007294:	0802905c 	.word	0x0802905c
 8007298:	24006648 	.word	0x24006648
 800729c:	080290c0 	.word	0x080290c0
 80072a0:	08007229 	.word	0x08007229

080072a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80072a4:	4770      	bx	lr
	...

080072a8 <_Z23getFont_verdana_20_4bppv>:
{
 80072a8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80072aa:	4d16      	ldr	r5, [pc, #88]	; (8007304 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 80072ac:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80072ae:	782c      	ldrb	r4, [r5, #0]
 80072b0:	f3bf 8f5b 	dmb	ish
 80072b4:	f014 0401 	ands.w	r4, r4, #1
 80072b8:	d120      	bne.n	80072fc <_Z23getFont_verdana_20_4bppv+0x54>
 80072ba:	4628      	mov	r0, r5
 80072bc:	f01d f9d1 	bl	8024662 <__cxa_guard_acquire>
 80072c0:	b1e0      	cbz	r0, 80072fc <_Z23getFont_verdana_20_4bppv+0x54>
 80072c2:	233f      	movs	r3, #63	; 0x3f
 80072c4:	2201      	movs	r2, #1
 80072c6:	4910      	ldr	r1, [pc, #64]	; (8007308 <_Z23getFont_verdana_20_4bppv+0x60>)
 80072c8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <_Z23getFont_verdana_20_4bppv+0x64>)
 80072cc:	4810      	ldr	r0, [pc, #64]	; (8007310 <_Z23getFont_verdana_20_4bppv+0x68>)
 80072ce:	9308      	str	r3, [sp, #32]
 80072d0:	4b10      	ldr	r3, [pc, #64]	; (8007314 <_Z23getFont_verdana_20_4bppv+0x6c>)
 80072d2:	940a      	str	r4, [sp, #40]	; 0x28
 80072d4:	9405      	str	r4, [sp, #20]
 80072d6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80072da:	2304      	movs	r3, #4
 80072dc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80072e0:	2314      	movs	r3, #20
 80072e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80072ec:	f7fb fbcc 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <_Z23getFont_verdana_20_4bppv+0x70>)
 80072f2:	f01d fadf 	bl	80248b4 <atexit>
 80072f6:	4628      	mov	r0, r5
 80072f8:	f01d f9bf 	bl	802467a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 80072fc:	4804      	ldr	r0, [pc, #16]	; (8007310 <_Z23getFont_verdana_20_4bppv+0x68>)
 80072fe:	b00f      	add	sp, #60	; 0x3c
 8007300:	bd30      	pop	{r4, r5, pc}
 8007302:	bf00      	nop
 8007304:	24006674 	.word	0x24006674
 8007308:	0802902c 	.word	0x0802902c
 800730c:	080290b4 	.word	0x080290b4
 8007310:	24006678 	.word	0x24006678
 8007314:	080290c4 	.word	0x080290c4
 8007318:	080072a5 	.word	0x080072a5

0800731c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800731c:	4770      	bx	lr
	...

08007320 <_Z23getFont_verdana_40_4bppv>:
{
 8007320:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007322:	4d16      	ldr	r5, [pc, #88]	; (800737c <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8007324:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 2, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8007326:	782c      	ldrb	r4, [r5, #0]
 8007328:	f3bf 8f5b 	dmb	ish
 800732c:	f014 0401 	ands.w	r4, r4, #1
 8007330:	d121      	bne.n	8007376 <_Z23getFont_verdana_40_4bppv+0x56>
 8007332:	4628      	mov	r0, r5
 8007334:	f01d f995 	bl	8024662 <__cxa_guard_acquire>
 8007338:	b1e8      	cbz	r0, 8007376 <_Z23getFont_verdana_40_4bppv+0x56>
 800733a:	233f      	movs	r3, #63	; 0x3f
 800733c:	2201      	movs	r2, #1
 800733e:	4910      	ldr	r1, [pc, #64]	; (8007380 <_Z23getFont_verdana_40_4bppv+0x60>)
 8007340:	9309      	str	r3, [sp, #36]	; 0x24
 8007342:	4b10      	ldr	r3, [pc, #64]	; (8007384 <_Z23getFont_verdana_40_4bppv+0x64>)
 8007344:	4810      	ldr	r0, [pc, #64]	; (8007388 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	4b10      	ldr	r3, [pc, #64]	; (800738c <_Z23getFont_verdana_40_4bppv+0x6c>)
 800734a:	940a      	str	r4, [sp, #40]	; 0x28
 800734c:	9405      	str	r4, [sp, #20]
 800734e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8007352:	2304      	movs	r3, #4
 8007354:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8007358:	2328      	movs	r3, #40	; 0x28
 800735a:	2202      	movs	r2, #2
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007362:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8007366:	f7fb fb8f 	bl	8002a88 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800736a:	4809      	ldr	r0, [pc, #36]	; (8007390 <_Z23getFont_verdana_40_4bppv+0x70>)
 800736c:	f01d faa2 	bl	80248b4 <atexit>
 8007370:	4628      	mov	r0, r5
 8007372:	f01d f982 	bl	802467a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8007376:	4804      	ldr	r0, [pc, #16]	; (8007388 <_Z23getFont_verdana_40_4bppv+0x68>)
 8007378:	b00f      	add	sp, #60	; 0x3c
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	240066a4 	.word	0x240066a4
 8007380:	0802903c 	.word	0x0802903c
 8007384:	080290b8 	.word	0x080290b8
 8007388:	240066a8 	.word	0x240066a8
 800738c:	080290c8 	.word	0x080290c8
 8007390:	0800731d 	.word	0x0800731d

08007394 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8007394:	2000      	movs	r0, #0
 8007396:	4770      	bx	lr

08007398 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8007398:	2000      	movs	r0, #0
 800739a:	4770      	bx	lr

0800739c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800739c:	b40e      	push	{r1, r2, r3}
 800739e:	b503      	push	{r0, r1, lr}
 80073a0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80073a2:	2100      	movs	r1, #0
{
 80073a4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80073a8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 80073aa:	f012 facb 	bl	8019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80073ae:	b002      	add	sp, #8
 80073b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b4:	b003      	add	sp, #12
 80073b6:	4770      	bx	lr

080073b8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80073b8:	b40c      	push	{r2, r3}
 80073ba:	b507      	push	{r0, r1, r2, lr}
 80073bc:	ab04      	add	r3, sp, #16
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80073c2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80073c4:	f012 fabe 	bl	8019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80073c8:	b003      	add	sp, #12
 80073ca:	f85d eb04 	ldr.w	lr, [sp], #4
 80073ce:	b002      	add	sp, #8
 80073d0:	4770      	bx	lr
	...

080073d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 80073d4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80073d6:	b510      	push	{r4, lr}
 80073d8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 80073da:	b373      	cbz	r3, 800743a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80073dc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80073de:	b92b      	cbnz	r3, 80073ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 80073e2:	21c5      	movs	r1, #197	; 0xc5
 80073e4:	4a18      	ldr	r2, [pc, #96]	; (8007448 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80073e6:	4819      	ldr	r0, [pc, #100]	; (800744c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80073e8:	f01d fa46 	bl	8024878 <__assert_func>
            return buffer[pos];
 80073ec:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80073ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80073f2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80073f4:	b30b      	cbz	r3, 800743a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 80073f6:	f013 fe1d 	bl	801b034 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 80073fa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d803      	bhi.n	8007408 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8007400:	4b13      	ldr	r3, [pc, #76]	; (8007450 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8007402:	21cb      	movs	r1, #203	; 0xcb
 8007404:	4a13      	ldr	r2, [pc, #76]	; (8007454 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8007406:	e7ee      	b.n	80073e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8007408:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800740a:	f640 103f 	movw	r0, #2367	; 0x93f
 800740e:	1c53      	adds	r3, r2, #1
 8007410:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8007412:	2b09      	cmp	r3, #9
 8007414:	4619      	mov	r1, r3
 8007416:	bf88      	it	hi
 8007418:	f1a3 010a 	subhi.w	r1, r3, #10
 800741c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8007420:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8007422:	4281      	cmp	r1, r0
 8007424:	d109      	bne.n	800743a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8007426:	2b0a      	cmp	r3, #10
 8007428:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800742c:	bf28      	it	cs
 800742e:	2300      	movcs	r3, #0
            return buffer[pos];
 8007430:	8c50      	ldrh	r0, [r2, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8007432:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8007436:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8007438:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 800743a:	4620      	mov	r0, r4
}
 800743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8007440:	f013 bcfa 	b.w	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8007444:	08026da8 	.word	0x08026da8
 8007448:	08026db1 	.word	0x08026db1
 800744c:	08026e5c 	.word	0x08026e5c
 8007450:	08026eb4 	.word	0x08026eb4
 8007454:	08026ec2 	.word	0x08026ec2

08007458 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8007458:	f013 bcb7 	b.w	801adca <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800745c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800745c:	b510      	push	{r4, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	ac02      	add	r4, sp, #8
 8007462:	e884 0006 	stmia.w	r4, {r1, r2}
 8007466:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8007468:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800746a:	4621      	mov	r1, r4
    va_start(pArg, format);
 800746c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	f010 ff4f 	bl	8018318 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800747a:	b006      	add	sp, #24
 800747c:	bd10      	pop	{r4, pc}
	...

08007480 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8007480:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8007482:	bb18      	cbnz	r0, 80074cc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8007484:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8007486:	4813      	ldr	r0, [pc, #76]	; (80074d4 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4913      	ldr	r1, [pc, #76]	; (80074d8 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800748c:	b1b3      	cbz	r3, 80074bc <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800748e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007490:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007492:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8007494:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8007496:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	441a      	add	r2, r3
 800749c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800749e:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80074a4:	f000 f838 	bl	8007518 <_ZN17TypedTextDatabase8getFontsEv>
 80074a8:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80074aa:	f000 f833 	bl	8007514 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80074ae:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80074b0:	601c      	str	r4, [r3, #0]
        fonts = f;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80074b4:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80074b6:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80074b8:	8018      	strh	r0, [r3, #0]
    }
}
 80074ba:	e007      	b.n	80074cc <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80074bc:	4b0b      	ldr	r3, [pc, #44]	; (80074ec <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80074be:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80074c2:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80074c4:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80074c6:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80074c8:	2c00      	cmp	r4, #0
 80074ca:	d1e8      	bne.n	800749e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	bf00      	nop
 80074d0:	240066d4 	.word	0x240066d4
 80074d4:	240066d8 	.word	0x240066d8
 80074d8:	240066dc 	.word	0x240066dc
 80074dc:	240066e0 	.word	0x240066e0
 80074e0:	240100b8 	.word	0x240100b8
 80074e4:	240100c0 	.word	0x240100c0
 80074e8:	240100bc 	.word	0x240100bc
 80074ec:	90177074 	.word	0x90177074
 80074f0:	90177000 	.word	0x90177000
 80074f4:	9017717c 	.word	0x9017717c

080074f8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8007502:	681b      	ldr	r3, [r3, #0]
}
 8007504:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	240066dc 	.word	0x240066dc
 8007510:	240066d8 	.word	0x240066d8

08007514 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8007514:	201d      	movs	r0, #29
 8007516:	4770      	bx	lr

08007518 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8007518:	4800      	ldr	r0, [pc, #0]	; (800751c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800751a:	4770      	bx	lr
 800751c:	240066e4 	.word	0x240066e4

08007520 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8007520:	b510      	push	{r4, lr}
};
 8007522:	4c07      	ldr	r4, [pc, #28]	; (8007540 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 8007524:	f7ff fe82 	bl	800722c <_Z23getFont_verdana_16_4bppv>
};
 8007528:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800752a:	f7ff fef9 	bl	8007320 <_Z23getFont_verdana_40_4bppv>
};
 800752e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8007530:	f7ff fe40 	bl	80071b4 <_Z23getFont_verdana_10_4bppv>
};
 8007534:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_20_4bpp())
 8007536:	f7ff feb7 	bl	80072a8 <_Z23getFont_verdana_20_4bppv>
};
 800753a:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 800753c:	bd10      	pop	{r4, pc}
 800753e:	bf00      	nop
 8007540:	240066e4 	.word	0x240066e4

08007544 <_ZN8touchgfx8TextArea8setWidthEs>:
    virtual void setWidth(int16_t width)
 8007544:	b530      	push	{r4, r5, lr}
 8007546:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8007548:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 800754a:	4604      	mov	r4, r0
        rect.width = width;
 800754c:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 800754e:	466d      	mov	r5, sp
 8007550:	4601      	mov	r1, r0
 8007552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007556:	343c      	adds	r4, #60	; 0x3c
 8007558:	4628      	mov	r0, r5
 800755a:	4798      	blx	r3
 800755c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8007564:	b005      	add	sp, #20
 8007566:	bd30      	pop	{r4, r5, pc}

08007568 <_ZN8touchgfx8TextArea9setHeightEs>:
    virtual void setHeight(int16_t height)
 8007568:	b530      	push	{r4, r5, lr}
 800756a:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 800756c:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 800756e:	4604      	mov	r4, r0
        rect.height = height;
 8007570:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8007572:	466d      	mov	r5, sp
 8007574:	4601      	mov	r1, r0
 8007576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757a:	343c      	adds	r4, #60	; 0x3c
 800757c:	4628      	mov	r0, r5
 800757e:	4798      	blx	r3
 8007580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8007588:	b005      	add	sp, #20
 800758a:	bd30      	pop	{r4, r5, pc}

0800758c <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800758c:	2200      	movs	r2, #0
 800758e:	8002      	strh	r2, [r0, #0]
 8007590:	8042      	strh	r2, [r0, #2]
 8007592:	8082      	strh	r2, [r0, #4]
 8007594:	80c2      	strh	r2, [r0, #6]
    }
 8007596:	4770      	bx	lr

08007598 <_ZN8touchgfx8TextArea8setAlphaEh>:
        alpha = newAlpha;
 8007598:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 800759c:	4770      	bx	lr

0800759e <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
 800759e:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80075a0:	b570      	push	{r4, r5, r6, lr}
 80075a2:	4604      	mov	r4, r0
        setX(x);
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 80075a6:	4615      	mov	r5, r2
        setX(x);
 80075a8:	4798      	blx	r3
        setBaselineY(baselineY);
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 80075b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 80075b6:	4718      	bx	r3

080075b8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
    }
 80075b8:	2000      	movs	r0, #0
 80075ba:	4770      	bx	lr

080075bc <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80075bc:	2200      	movs	r2, #0
 80075be:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80075c2:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80075c4:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
 80075c8:	4770      	bx	lr

080075ca <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 80075ca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80075cc:	4770      	bx	lr

080075ce <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 80075ce:	b082      	sub	sp, #8
 80075d0:	ab02      	add	r3, sp, #8
 80075d2:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 80075d6:	b002      	add	sp, #8
 80075d8:	4770      	bx	lr

080075da <_ZN15customGraphBase13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
    virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 80075da:	b082      	sub	sp, #8
 80075dc:	ab02      	add	r3, sp, #8
 80075de:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 80075e2:	b002      	add	sp, #8
 80075e4:	4770      	bx	lr

080075e6 <_ZN15customGraphBaseD1Ev>:
}

customGraphBase::~customGraphBase()
{

}
 80075e6:	4770      	bx	lr

080075e8 <_ZN15customGraphBase10initializeEv>:

void customGraphBase::initialize()
{

}
 80075e8:	4770      	bx	lr

080075ea <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 80075ea:	4770      	bx	lr

080075ec <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
 80075ec:	4770      	bx	lr

080075ee <_ZN8touchgfx5GraphILs500EED1Ev>:
class Graph : public GraphData
 80075ee:	4770      	bx	lr

080075f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80075f0:	4770      	bx	lr

080075f2 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80075f2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 80075f4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80075f6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 80075f8:	68c4      	ldr	r4, [r0, #12]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	1066      	asrs	r6, r4, #1
 80075fe:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8007602:	07e4      	lsls	r4, r4, #31
 8007604:	bf44      	itt	mi
 8007606:	59ac      	ldrmi	r4, [r5, r6]
 8007608:	58e3      	ldrmi	r3, [r4, r3]
    }
 800760a:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 800760c:	4718      	bx	r3

0800760e <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 800760e:	6843      	ldr	r3, [r0, #4]
 8007610:	b12b      	cbz	r3, 800761e <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x10>
 8007612:	6883      	ldr	r3, [r0, #8]
 8007614:	b92b      	cbnz	r3, 8007622 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x14>
 8007616:	68c0      	ldr	r0, [r0, #12]
 8007618:	f000 0001 	and.w	r0, r0, #1
 800761c:	4770      	bx	lr
 800761e:	4618      	mov	r0, r3
 8007620:	4770      	bx	lr
 8007622:	2001      	movs	r0, #1
    }
 8007624:	4770      	bx	lr

08007626 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 8007626:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8007628:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 800762a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
 800762c:	68c4      	ldr	r4, [r0, #12]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	1066      	asrs	r6, r4, #1
 8007632:	eb05 0064 	add.w	r0, r5, r4, asr #1
 8007636:	07e4      	lsls	r4, r4, #31
 8007638:	bf44      	itt	mi
 800763a:	59ac      	ldrmi	r4, [r5, r6]
 800763c:	58e3      	ldrmi	r3, [r4, r3]
    }
 800763e:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun)(t1, t2);
 8007640:	4718      	bx	r3

08007642 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
 8007642:	6843      	ldr	r3, [r0, #4]
 8007644:	b12b      	cbz	r3, 8007652 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 8007646:	6883      	ldr	r3, [r0, #8]
 8007648:	b92b      	cbnz	r3, 8007656 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 800764a:	68c0      	ldr	r0, [r0, #12]
 800764c:	f000 0001 	and.w	r0, r0, #1
 8007650:	4770      	bx	lr
 8007652:	4618      	mov	r0, r3
 8007654:	4770      	bx	lr
 8007656:	2001      	movs	r0, #1
    }
 8007658:	4770      	bx	lr

0800765a <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800765a:	b510      	push	{r4, lr}
 800765c:	4604      	mov	r4, r0
 800765e:	214c      	movs	r1, #76	; 0x4c
 8007660:	f01c fffd 	bl	802465e <_ZdlPvj>
 8007664:	4620      	mov	r0, r4
 8007666:	bd10      	pop	{r4, pc}

08007668 <_ZN8touchgfx5GraphILs500EED0Ev>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	f241 01e4 	movw	r1, #4324	; 0x10e4
 8007670:	f01c fff5 	bl	802465e <_ZdlPvj>
 8007674:	4620      	mov	r0, r4
 8007676:	bd10      	pop	{r4, pc}

08007678 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8007678:	b510      	push	{r4, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	2110      	movs	r1, #16
 800767e:	f01c ffee 	bl	802465e <_ZdlPvj>
 8007682:	4620      	mov	r0, r4
 8007684:	bd10      	pop	{r4, pc}

08007686 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	2110      	movs	r1, #16
 800768c:	f01c ffe7 	bl	802465e <_ZdlPvj>
 8007690:	4620      	mov	r0, r4
 8007692:	bd10      	pop	{r4, pc}

08007694 <_ZN15customGraphBaseD0Ev>:
customGraphBase::~customGraphBase()
 8007694:	b510      	push	{r4, lr}
 8007696:	4604      	mov	r4, r0
}
 8007698:	f241 4138 	movw	r1, #5176	; 0x1438
 800769c:	f01c ffdf 	bl	802465e <_ZdlPvj>
 80076a0:	4620      	mov	r0, r4
 80076a2:	bd10      	pop	{r4, pc}

080076a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80076a4:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80076a6:	f7fa ffa1 	bl	80025ec <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80076aa:	bd08      	pop	{r3, pc}

080076ac <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 80076ac:	b410      	push	{r4}
    if (&src == &graph1)
 80076ae:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80076b2:	428c      	cmp	r4, r1
 80076b4:	d106      	bne.n	80076c4 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 80076b6:	6803      	ldr	r3, [r0, #0]
    }
}
 80076b8:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 80076bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076c0:	ca06      	ldmia	r2, {r1, r2}
 80076c2:	4718      	bx	r3
}
 80076c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void customGraphBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 80076ca:	b410      	push	{r4}
    if (&src == &graph1)
 80076cc:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80076d0:	428c      	cmp	r4, r1
 80076d2:	d106      	bne.n	80076e2 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x18>
    {
        //Interaction2
        //When graph1 clicked call virtual function
        //Call graph1clicked
        graph1clicked(value);
 80076d4:	6803      	ldr	r3, [r0, #0]
    }
}
 80076d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1clicked(value);
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	ca06      	ldmia	r2, {r1, r2}
 80076e0:	4718      	bx	r3
}
 80076e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80076e8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80076ea:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80076ec:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 80076ee:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80076f2:	b28d      	uxth	r5, r1
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b92b      	cbnz	r3, 8007704 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80076f8:	4b10      	ldr	r3, [pc, #64]	; (800773c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80076fa:	216c      	movs	r1, #108	; 0x6c
 80076fc:	4a10      	ldr	r2, [pc, #64]	; (8007740 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80076fe:	4811      	ldr	r0, [pc, #68]	; (8007744 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8007700:	f01d f8ba 	bl	8024878 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8007704:	4910      	ldr	r1, [pc, #64]	; (8007748 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8007706:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8007708:	8809      	ldrh	r1, [r1, #0]
 800770a:	4291      	cmp	r1, r2
 800770c:	d803      	bhi.n	8007716 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8007710:	216d      	movs	r1, #109	; 0x6d
 8007712:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8007714:	e7f3      	b.n	80076fe <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8007716:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800771a:	4b0d      	ldr	r3, [pc, #52]	; (8007750 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007722:	6803      	ldr	r3, [r0, #0]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	4798      	blx	r3
 8007728:	1a28      	subs	r0, r5, r0
 800772a:	4633      	mov	r3, r6
 800772c:	b201      	sxth	r1, r0
 800772e:	4620      	mov	r0, r4
    }
 8007730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8007734:	4718      	bx	r3
 8007736:	bf00      	nop
 8007738:	240100b8 	.word	0x240100b8
 800773c:	08026f94 	.word	0x08026f94
 8007740:	08026fd6 	.word	0x08026fd6
 8007744:	08027011 	.word	0x08027011
 8007748:	240100bc 	.word	0x240100bc
 800774c:	08027066 	.word	0x08027066
 8007750:	240100c0 	.word	0x240100c0

08007754 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 8007754:	4a07      	ldr	r2, [pc, #28]	; (8007774 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8007756:	6002      	str	r2, [r0, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 800775e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8007762:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8007766:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800776a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800776e:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	0802806c 	.word	0x0802806c

08007778 <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 8007778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800777c:	4604      	mov	r4, r0
          firstChild(0)
 800777e:	f04f 0b00 	mov.w	fp, #0
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007782:	2601      	movs	r6, #1
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 8007784:	4627      	mov	r7, r4
 8007786:	f104 0558 	add.w	r5, r4, #88	; 0x58
        : color(col)
 800778a:	f504 5a80 	add.w	sl, r4, #4096	; 0x1000
 800778e:	f504 598d 	add.w	r9, r4, #4512	; 0x11a0
 8007792:	f504 5890 	add.w	r8, r4, #4608	; 0x1200
 8007796:	f109 091c 	add.w	r9, r9, #28
 800779a:	f108 0808 	add.w	r8, r8, #8
customGraphBase::customGraphBase() :
 800779e:	ed2d 8b06 	vpush	{d8-d10}
 80077a2:	b08d      	sub	sp, #52	; 0x34
 80077a4:	f7ff ffd6 	bl	8007754 <_ZN8touchgfx8DrawableC1Ev>
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 80077a8:	4bea      	ldr	r3, [pc, #936]	; (8007b54 <_ZN15customGraphBaseC1Ev+0x3dc>)
        : Widget(), alpha(255), color(0)
 80077aa:	2226      	movs	r2, #38	; 0x26
 80077ac:	4659      	mov	r1, fp
 80077ae:	f8c4 b028 	str.w	fp, [r4, #40]	; 0x28
 80077b2:	f847 3b2c 	str.w	r3, [r7], #44
 80077b6:	4638      	mov	r0, r7
 80077b8:	f01d f8ea 	bl	8024990 <memset>
 80077bc:	4638      	mov	r0, r7
 80077be:	f7ff ffc9 	bl	8007754 <_ZN8touchgfx8DrawableC1Ev>
 80077c2:	4be5      	ldr	r3, [pc, #916]	; (8007b58 <_ZN15customGraphBaseC1Ev+0x3e0>)
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80077c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80077c8:	4628      	mov	r0, r5
 80077ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077cc:	23ff      	movs	r3, #255	; 0xff
 80077ce:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 80077d2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 80077d6:	f00c fea5 	bl	8014524 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80077da:	4be0      	ldr	r3, [pc, #896]	; (8007b5c <_ZN15customGraphBaseC1Ev+0x3e4>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80077dc:	f240 12f3 	movw	r2, #499	; 0x1f3
 80077e0:	4659      	mov	r1, fp
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80077e2:	65a3      	str	r3, [r4, #88]	; 0x58
        : GraphData(CAPACITY, x, y)
 80077e4:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80077e8:	4628      	mov	r0, r5
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80077ea:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
 80077ee:	f604 136c 	addw	r3, r4, #2412	; 0x96c
 80077f2:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80077f6:	f7fb f985 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80077fa:	4bd9      	ldr	r3, [pc, #868]	; (8007b60 <_ZN15customGraphBaseC1Ev+0x3e8>)
 80077fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80077fe:	f504 5389 	add.w	r3, r4, #4384	; 0x1120
 8007802:	331c      	adds	r3, #28
        : CanvasWidget()
 8007804:	4618      	mov	r0, r3
 8007806:	9302      	str	r3, [sp, #8]
 8007808:	f00c f9a2 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800780c:	230a      	movs	r3, #10
 800780e:	f88a 6174 	strb.w	r6, [sl, #372]	; 0x174
 8007812:	f8ca b168 	str.w	fp, [sl, #360]	; 0x168
 8007816:	f8ca b178 	str.w	fp, [sl, #376]	; 0x178
 800781a:	e9ca 635b 	strd	r6, r3, [sl, #364]	; 0x16c
class GraphElementGridX : public GraphElementGridBase
 800781e:	4bd1      	ldr	r3, [pc, #836]	; (8007b64 <_ZN15customGraphBaseC1Ev+0x3ec>)
 8007820:	f8ca 313c 	str.w	r3, [sl, #316]	; 0x13c
 8007824:	f504 538b 	add.w	r3, r4, #4448	; 0x1160
 8007828:	331c      	adds	r3, #28
        : CanvasWidget()
 800782a:	4618      	mov	r0, r3
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	f00c f98f 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007832:	230a      	movs	r3, #10
class GraphLabelsX : public GraphLabelsBase
 8007834:	4648      	mov	r0, r9
 8007836:	f88a 61b4 	strb.w	r6, [sl, #436]	; 0x1b4
 800783a:	f8ca 31b0 	str.w	r3, [sl, #432]	; 0x1b0
class GraphElementGridY : public GraphElementGridBase
 800783e:	4bca      	ldr	r3, [pc, #808]	; (8007b68 <_ZN15customGraphBaseC1Ev+0x3f0>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007840:	f8ca b1b8 	str.w	fp, [sl, #440]	; 0x1b8
class GraphElementGridY : public GraphElementGridBase
 8007844:	f8ca 317c 	str.w	r3, [sl, #380]	; 0x17c
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8007848:	e9ca b66a 	strd	fp, r6, [sl, #424]	; 0x1a8
 800784c:	f7fb fef0 	bl	8003630 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 8007850:	4bc6      	ldr	r3, [pc, #792]	; (8007b6c <_ZN15customGraphBaseC1Ev+0x3f4>)
class GraphLabelsY : public GraphLabelsBase
 8007852:	4640      	mov	r0, r8
class GraphLabelsX : public GraphLabelsBase
 8007854:	f8ca 31bc 	str.w	r3, [sl, #444]	; 0x1bc
class GraphLabelsY : public GraphLabelsBase
 8007858:	f7fb feea 	bl	8003630 <_ZN8touchgfx15GraphLabelsBaseC1Ev>
 800785c:	4bc4      	ldr	r3, [pc, #784]	; (8007b70 <_ZN15customGraphBaseC1Ev+0x3f8>)
 800785e:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
 8007862:	f504 5392 	add.w	r3, r4, #4672	; 0x1240
 8007866:	3314      	adds	r3, #20
        : CanvasWidget()
 8007868:	4618      	mov	r0, r3
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	f00c f970 	bl	8013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8007870:	4bc0      	ldr	r3, [pc, #768]	; (8007b74 <_ZN15customGraphBaseC1Ev+0x3fc>)
 8007872:	f8ca 3254 	str.w	r3, [sl, #596]	; 0x254
 8007876:	2302      	movs	r3, #2
 8007878:	f88a 3280 	strb.w	r3, [sl, #640]	; 0x280
 800787c:	f504 5394 	add.w	r3, r4, #4736	; 0x1280
 8007880:	3304      	adds	r3, #4
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8007882:	4618      	mov	r0, r3
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	f7fa fef5 	bl	8002674 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800788a:	4bbb      	ldr	r3, [pc, #748]	; (8007b78 <_ZN15customGraphBaseC1Ev+0x400>)
 800788c:	f8ca b290 	str.w	fp, [sl, #656]	; 0x290
 8007890:	f8ca 3284 	str.w	r3, [sl, #644]	; 0x284
 8007894:	3324      	adds	r3, #36	; 0x24
 8007896:	f8ca 328c 	str.w	r3, [sl, #652]	; 0x28c
 800789a:	f504 5394 	add.w	r3, r4, #4736	; 0x1280
 800789e:	3318      	adds	r3, #24
        : TextArea()
 80078a0:	4618      	mov	r0, r3
 80078a2:	ee0a 3a10 	vmov	s20, r3
 80078a6:	f7fb fe5b 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 80078aa:	4bb4      	ldr	r3, [pc, #720]	; (8007b7c <_ZN15customGraphBaseC1Ev+0x404>)
 80078ac:	f8ca b2e0 	str.w	fp, [sl, #736]	; 0x2e0
 80078b0:	f8ca 3298 	str.w	r3, [sl, #664]	; 0x298
 80078b4:	f504 5397 	add.w	r3, r4, #4832	; 0x12e0
 80078b8:	3304      	adds	r3, #4
 80078ba:	4618      	mov	r0, r3
 80078bc:	ee08 3a10 	vmov	s16, r3
 80078c0:	f7fb fe4e 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80078c4:	f504 5399 	add.w	r3, r4, #4896	; 0x1320
 80078c8:	330c      	adds	r3, #12
 80078ca:	4618      	mov	r0, r3
 80078cc:	ee08 3a90 	vmov	s17, r3
 80078d0:	f7fb fe46 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80078d4:	f504 539b 	add.w	r3, r4, #4960	; 0x1360
 80078d8:	3314      	adds	r3, #20
 80078da:	4618      	mov	r0, r3
 80078dc:	ee09 3a10 	vmov	s18, r3
 80078e0:	f7fb fe3e 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
 80078e4:	f504 539d 	add.w	r3, r4, #5024	; 0x13a0
 80078e8:	331c      	adds	r3, #28
 80078ea:	4618      	mov	r0, r3
 80078ec:	ee09 3a90 	vmov	s19, r3
 80078f0:	f7fb fe36 	bl	8003560 <_ZN8touchgfx8TextAreaC1Ev>
        : pobject(pObject), pmemfun(pmemfun_2)
 80078f4:	4ba2      	ldr	r3, [pc, #648]	; (8007b80 <_ZN15customGraphBaseC1Ev+0x408>)
 80078f6:	f8ca 441c 	str.w	r4, [sl, #1052]	; 0x41c
    box1.setPosition(0, 0, 310, 200);
 80078fa:	465a      	mov	r2, fp
 80078fc:	f8ca 3418 	str.w	r3, [sl, #1048]	; 0x418
 8007900:	4638      	mov	r0, r7
 8007902:	4ba0      	ldr	r3, [pc, #640]	; (8007b84 <_ZN15customGraphBaseC1Ev+0x40c>)
 8007904:	4659      	mov	r1, fp
 8007906:	f8ca b424 	str.w	fp, [sl, #1060]	; 0x424
 800790a:	f8ca 3420 	str.w	r3, [sl, #1056]	; 0x420
 800790e:	4b9e      	ldr	r3, [pc, #632]	; (8007b88 <_ZN15customGraphBaseC1Ev+0x410>)
 8007910:	f8ca 442c 	str.w	r4, [sl, #1068]	; 0x42c
 8007914:	f8ca 3428 	str.w	r3, [sl, #1064]	; 0x428
 8007918:	4b9c      	ldr	r3, [pc, #624]	; (8007b8c <_ZN15customGraphBaseC1Ev+0x414>)
 800791a:	f8ca b434 	str.w	fp, [sl, #1076]	; 0x434
 800791e:	f8ca 3430 	str.w	r3, [sl, #1072]	; 0x430
        rect.width = width;
 8007922:	4b9b      	ldr	r3, [pc, #620]	; (8007b90 <_ZN15customGraphBaseC1Ev+0x418>)
 8007924:	60a3      	str	r3, [r4, #8]
 8007926:	23c8      	movs	r3, #200	; 0xc8
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	f44f 739b 	mov.w	r3, #310	; 0x136
 800792e:	f7fb fddd 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8007932:	f04f 33ff 	mov.w	r3, #4294967295
    add(box1);
 8007936:	4639      	mov	r1, r7
 8007938:	4620      	mov	r0, r4
 800793a:	6563      	str	r3, [r4, #84]	; 0x54
        setIntervalScaled(abs(interval) * dataScale);
 800793c:	2719      	movs	r7, #25
 800793e:	f00a fe8d 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    graph1.setPosition(0, 0, 310, 200);
 8007942:	23c8      	movs	r3, #200	; 0xc8
 8007944:	4628      	mov	r0, r5
 8007946:	465a      	mov	r2, fp
 8007948:	4659      	mov	r1, fp
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	f44f 739b 	mov.w	r3, #310	; 0x136
 8007950:	f7fb fdcc 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setScaleX(1);
 8007954:	4631      	mov	r1, r6
 8007956:	4628      	mov	r0, r5
 8007958:	465a      	mov	r2, fp
 800795a:	f00c fea0 	bl	801469e <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(1);
 800795e:	4631      	mov	r1, r6
 8007960:	4628      	mov	r0, r5
 8007962:	465a      	mov	r2, fp
 8007964:	f00c feba 	bl	80146dc <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setGraphAreaMargin(25, 45, 5, 35);
 8007968:	2323      	movs	r3, #35	; 0x23
 800796a:	4628      	mov	r0, r5
 800796c:	222d      	movs	r2, #45	; 0x2d
 800796e:	2119      	movs	r1, #25
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	2305      	movs	r3, #5
 8007974:	f00c fd88 	bl	8014488 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 8007978:	465b      	mov	r3, fp
 800797a:	4628      	mov	r0, r5
 800797c:	465a      	mov	r2, fp
 800797e:	4659      	mov	r1, fp
 8007980:	f8cd b000 	str.w	fp, [sp]
 8007984:	f00c fc64 	bl	8014250 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(0, 500);
 8007988:	4628      	mov	r0, r5
 800798a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800798e:	4659      	mov	r1, fp
 8007990:	f7fb f8b8 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(-100, 100);
 8007994:	4628      	mov	r0, r5
 8007996:	2264      	movs	r2, #100	; 0x64
 8007998:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800799c:	f7fb f93e 	bl	8002c1c <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    graphClickedCallback(this, &customGraphBase::graphClickedCallbackHandler)
 80079a0:	f504 53a0 	add.w	r3, r4, #5120	; 0x1400
 80079a4:	f8da 116c 	ldr.w	r1, [sl, #364]	; 0x16c
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80079a8:	4632      	mov	r2, r6
 80079aa:	3318      	adds	r3, #24
        setIntervalScaled(abs(interval) * dataScale);
 80079ac:	fb07 f001 	mul.w	r0, r7, r1
        dragAction = &callback;
 80079b0:	f8c4 3180 	str.w	r3, [r4, #384]	; 0x180
 80079b4:	f504 53a1 	add.w	r3, r4, #5152	; 0x1420
 80079b8:	2800      	cmp	r0, #0
 80079ba:	f103 0308 	add.w	r3, r3, #8
 80079be:	bfb8      	it	lt
 80079c0:	4240      	neglt	r0, r0
        clickAction = &callback;
 80079c2:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
        color = newColor;
 80079c6:	4b73      	ldr	r3, [pc, #460]	; (8007b94 <_ZN15customGraphBaseC1Ev+0x41c>)
        lineWidth = width;
 80079c8:	f88a 6174 	strb.w	r6, [sl, #372]	; 0x174
        color = newColor;
 80079cc:	f8ca 3168 	str.w	r3, [sl, #360]	; 0x168
        gridInterval = abs(interval);
 80079d0:	f8ca 0170 	str.w	r0, [sl, #368]	; 0x170
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80079d4:	f00c fe0a 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorXAxisGrid);
 80079d8:	9902      	ldr	r1, [sp, #8]
        dataScale = scale;
 80079da:	e9ca 605b 	strd	r6, r0, [sl, #364]	; 0x16c
 80079de:	4628      	mov	r0, r5
 80079e0:	f00c fc41 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        color = newColor;
 80079e4:	4b6b      	ldr	r3, [pc, #428]	; (8007b94 <_ZN15customGraphBaseC1Ev+0x41c>)
        setIntervalScaled(abs(interval) * dataScale);
 80079e6:	f8da 11ac 	ldr.w	r1, [sl, #428]	; 0x1ac
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80079ea:	4632      	mov	r2, r6
        color = newColor;
 80079ec:	f8ca 31a8 	str.w	r3, [sl, #424]	; 0x1a8
        setIntervalScaled(abs(interval) * dataScale);
 80079f0:	2314      	movs	r3, #20
        lineWidth = width;
 80079f2:	f88a 61b4 	strb.w	r6, [sl, #436]	; 0x1b4
        setIntervalScaled(abs(interval) * dataScale);
 80079f6:	fb03 f001 	mul.w	r0, r3, r1
 80079fa:	2800      	cmp	r0, #0
 80079fc:	bfb8      	it	lt
 80079fe:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 8007a00:	f8ca 01b0 	str.w	r0, [sl, #432]	; 0x1b0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8007a04:	f00c fdf2 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addGraphElement(graph1MajorYAxisGrid);
 8007a08:	9903      	ldr	r1, [sp, #12]
        dataScale = scale;
 8007a0a:	e9ca 606b 	strd	r6, r0, [sl, #428]	; 0x1ac
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f00c fc29 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8007a14:	f8da 11ec 	ldr.w	r1, [sl, #492]	; 0x1ec
        color = newColor;
 8007a18:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
class TypedText
 8007a1c:	f04f 0206 	mov.w	r2, #6
        return i * scale;
 8007a20:	fb07 f001 	mul.w	r0, r7, r1
        return addValue(int2scaledX(x), int2scaledY(y));
 8007a24:	f06f 073c 	mvn.w	r7, #60	; 0x3c
 8007a28:	f8ca 31e8 	str.w	r3, [sl, #488]	; 0x1e8
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f8aa 21f8 	strh.w	r2, [sl, #504]	; 0x1f8
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007a32:	4632      	mov	r2, r6
 8007a34:	bfb8      	it	lt
 8007a36:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8007a38:	f8ca 01f0 	str.w	r0, [sl, #496]	; 0x1f0
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007a3c:	f00c fdd6 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addBottomElement(graph1MajorXAxisLabel);
 8007a40:	4649      	mov	r1, r9
        return i * scale;
 8007a42:	f04f 0928 	mov.w	r9, #40	; 0x28
        dataScale = scale;
 8007a46:	e9ca 607b 	strd	r6, r0, [sl, #492]	; 0x1ec
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f00c fc2f 	bl	80142ae <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>
        setIntervalScaled(AbstractDataGraph::int2scaled(interval, dataScale));
 8007a50:	f8da 1238 	ldr.w	r1, [sl, #568]	; 0x238
 8007a54:	f04f 020a 	mov.w	r2, #10
 8007a58:	fb09 f001 	mul.w	r0, r9, r1
 8007a5c:	f8aa 2244 	strh.w	r2, [sl, #580]	; 0x244
 8007a60:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f8ca 2234 	str.w	r2, [sl, #564]	; 0x234
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007a6a:	4632      	mov	r2, r6
 8007a6c:	bfb8      	it	lt
 8007a6e:	4240      	neglt	r0, r0
        labelInterval = abs(interval);
 8007a70:	f8ca 023c 	str.w	r0, [sl, #572]	; 0x23c
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8007a74:	f00c fdba 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
    graph1.addLeftElement(graph1MajorYAxisLabel);
 8007a78:	4641      	mov	r1, r8
 8007a7a:	f04f 083b 	mov.w	r8, #59	; 0x3b
        dataScale = scale;
 8007a7e:	e9ca 608e 	strd	r6, r0, [sl, #568]	; 0x238
 8007a82:	4628      	mov	r0, r5
        painterBlue = Color::getBlue(color);
 8007a84:	2637      	movs	r6, #55	; 0x37
 8007a86:	f00c fc00 	bl	801428a <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
 8007a8a:	4b43      	ldr	r3, [pc, #268]	; (8007b98 <_ZN15customGraphBaseC1Ev+0x420>)
 8007a8c:	9a05      	ldr	r2, [sp, #20]
    graph1.addGraphElement(graph1Line1);
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f8ca 3290 	str.w	r3, [sl, #656]	; 0x290
        painterRed = Color::getRed(color);
 8007a94:	f24c 2332 	movw	r3, #49714	; 0xc232
 8007a98:	9904      	ldr	r1, [sp, #16]
 8007a9a:	f8aa 3294 	strh.w	r3, [sl, #660]	; 0x294
        lineWidth = width;
 8007a9e:	2304      	movs	r3, #4
        painterBlue = Color::getBlue(color);
 8007aa0:	f88a 6296 	strb.w	r6, [sl, #662]	; 0x296
 8007aa4:	f8ca 227c 	str.w	r2, [sl, #636]	; 0x27c
 8007aa8:	f88a 3280 	strb.w	r3, [sl, #640]	; 0x280
 8007aac:	f00c fbdb 	bl	8014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ab0:	f06f 034f 	mvn.w	r3, #79	; 0x4f
        return i * scale;
 8007ab4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ab8:	4659      	mov	r1, fp
 8007aba:	4628      	mov	r0, r5
 8007abc:	435a      	muls	r2, r3
 8007abe:	f00c fe40 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ac2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ac6:	f06f 014b 	mvn.w	r1, #75	; 0x4b
 8007aca:	4628      	mov	r0, r5
 8007acc:	434a      	muls	r2, r1
 8007ace:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007ad2:	f00c fe36 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ad6:	f06f 0246 	mvn.w	r2, #70	; 0x46
 8007ada:	4628      	mov	r0, r5
        return i * scale;
 8007adc:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ae0:	435a      	muls	r2, r3
 8007ae2:	0049      	lsls	r1, r1, #1
 8007ae4:	f00c fe2d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ae8:	f06f 0041 	mvn.w	r0, #65	; 0x41
        return i * scale;
 8007aec:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007af0:	4342      	muls	r2, r0
 8007af2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007af6:	4628      	mov	r0, r5
 8007af8:	f00c fe23 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007afc:	4628      	mov	r0, r5
        return i * scale;
 8007afe:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b02:	437a      	muls	r2, r7
 8007b04:	0089      	lsls	r1, r1, #2
 8007b06:	f00c fe1c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007b0a:	f06f 0237 	mvn.w	r2, #55	; 0x37
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f06f 0731 	mvn.w	r7, #49	; 0x31
        return i * scale;
 8007b14:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b18:	435a      	muls	r2, r3
 8007b1a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8007b1e:	f00c fe10 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007b22:	4628      	mov	r0, r5
        return i * scale;
 8007b24:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b28:	437a      	muls	r2, r7
 8007b2a:	2706      	movs	r7, #6
 8007b2c:	4379      	muls	r1, r7
 8007b2e:	f00c fe08 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007b32:	f06f 002c 	mvn.w	r0, #44	; 0x2c
        return i * scale;
 8007b36:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b3a:	4342      	muls	r2, r0
 8007b3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007b40:	4628      	mov	r0, r5
 8007b42:	f00c fdfe 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007b46:	f06f 0226 	mvn.w	r2, #38	; 0x26
 8007b4a:	4628      	mov	r0, r5
        return i * scale;
 8007b4c:	e9d4 1322 	ldrd	r1, r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007b50:	435a      	muls	r2, r3
 8007b52:	e023      	b.n	8007b9c <_ZN15customGraphBaseC1Ev+0x424>
 8007b54:	080272e4 	.word	0x080272e4
 8007b58:	08027ed4 	.word	0x08027ed4
 8007b5c:	080277e4 	.word	0x080277e4
 8007b60:	08027178 	.word	0x08027178
 8007b64:	08026918 	.word	0x08026918
 8007b68:	080269d0 	.word	0x080269d0
 8007b6c:	08027c64 	.word	0x08027c64
 8007b70:	08027d04 	.word	0x08027d04
 8007b74:	08027be8 	.word	0x08027be8
 8007b78:	08027734 	.word	0x08027734
 8007b7c:	080270e8 	.word	0x080270e8
 8007b80:	080272b4 	.word	0x080272b4
 8007b84:	080076ad 	.word	0x080076ad
 8007b88:	080272cc 	.word	0x080272cc
 8007b8c:	080076cb 	.word	0x080076cb
 8007b90:	00c80136 	.word	0x00c80136
 8007b94:	ff1497c5 	.word	0xff1497c5
 8007b98:	ff32c237 	.word	0xff32c237
 8007b9c:	00c9      	lsls	r1, r1, #3
 8007b9e:	f00c fdd0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007ba2:	f06f 0320 	mvn.w	r3, #32
 8007ba6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8007baa:	4628      	mov	r0, r5
        return i * scale;
 8007bac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bb0:	435a      	muls	r2, r3
 8007bb2:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8007bb6:	f00c fdc4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007bba:	f06f 031b 	mvn.w	r3, #27
 8007bbe:	200a      	movs	r0, #10
        return i * scale;
 8007bc0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bc4:	435a      	muls	r2, r3
 8007bc6:	4341      	muls	r1, r0
 8007bc8:	4628      	mov	r0, r5
 8007bca:	f00c fdba 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007bce:	230b      	movs	r3, #11
 8007bd0:	f06f 0015 	mvn.w	r0, #21
        return i * scale;
 8007bd4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bd8:	4342      	muls	r2, r0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	4359      	muls	r1, r3
 8007bde:	f00c fdb0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007be2:	f06f 0310 	mvn.w	r3, #16
 8007be6:	200c      	movs	r0, #12
        return i * scale;
 8007be8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bec:	435a      	muls	r2, r3
 8007bee:	4341      	muls	r1, r0
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f00c fda6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007bf6:	f06f 000b 	mvn.w	r0, #11
        return i * scale;
 8007bfa:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007bfe:	4342      	muls	r2, r0
 8007c00:	200d      	movs	r0, #13
 8007c02:	4341      	muls	r1, r0
 8007c04:	4628      	mov	r0, r5
 8007c06:	f00c fd9c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c0a:	230e      	movs	r3, #14
 8007c0c:	4628      	mov	r0, r5
        return i * scale;
 8007c0e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c12:	4359      	muls	r1, r3
 8007c14:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 8007c18:	f00c fd93 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c1c:	f06f 0301 	mvn.w	r3, #1
 8007c20:	4628      	mov	r0, r5
        return i * scale;
 8007c22:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c26:	435a      	muls	r2, r3
 8007c28:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8007c2c:	f00c fd89 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c30:	4628      	mov	r0, r5
        return i * scale;
 8007c32:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c36:	0052      	lsls	r2, r2, #1
 8007c38:	0109      	lsls	r1, r1, #4
 8007c3a:	f00c fd82 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c3e:	4628      	mov	r0, r5
        return i * scale;
 8007c40:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c44:	437a      	muls	r2, r7
 8007c46:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8007c4a:	f00c fd7a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c4e:	270a      	movs	r7, #10
 8007c50:	4628      	mov	r0, r5
        return i * scale;
 8007c52:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c56:	437a      	muls	r2, r7
 8007c58:	2712      	movs	r7, #18
 8007c5a:	4379      	muls	r1, r7
 8007c5c:	2713      	movs	r7, #19
 8007c5e:	f00c fd70 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c62:	200d      	movs	r0, #13
        return i * scale;
 8007c64:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c68:	4342      	muls	r2, r0
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	4379      	muls	r1, r7
 8007c6e:	2714      	movs	r7, #20
 8007c70:	f00c fd67 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c74:	4628      	mov	r0, r5
        return i * scale;
 8007c76:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c7a:	4379      	muls	r1, r7
 8007c7c:	0112      	lsls	r2, r2, #4
 8007c7e:	f00c fd60 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c82:	2315      	movs	r3, #21
 8007c84:	2012      	movs	r0, #18
        return i * scale;
 8007c86:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c8a:	4359      	muls	r1, r3
 8007c8c:	4342      	muls	r2, r0
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f00c fd57 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007c94:	4628      	mov	r0, r5
        return i * scale;
 8007c96:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007c9a:	437a      	muls	r2, r7
 8007c9c:	2716      	movs	r7, #22
 8007c9e:	4379      	muls	r1, r7
 8007ca0:	f00c fd4f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ca4:	4628      	mov	r0, r5
        return i * scale;
 8007ca6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007caa:	437a      	muls	r2, r7
 8007cac:	2717      	movs	r7, #23
 8007cae:	4379      	muls	r1, r7
 8007cb0:	f00c fd47 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007cb4:	2318      	movs	r3, #24
 8007cb6:	4628      	mov	r0, r5
        return i * scale;
 8007cb8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cbc:	4359      	muls	r1, r3
 8007cbe:	437a      	muls	r2, r7
 8007cc0:	f00c fd3f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007cc4:	2118      	movs	r1, #24
        return i * scale;
 8007cc6:	e9d4 0222 	ldrd	r0, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cca:	434a      	muls	r2, r1
 8007ccc:	211a      	movs	r1, #26
 8007cce:	4341      	muls	r1, r0
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	f00c fd36 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007cd6:	231b      	movs	r3, #27
 8007cd8:	4628      	mov	r0, r5
        return i * scale;
 8007cda:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cde:	4359      	muls	r1, r3
 8007ce0:	437a      	muls	r2, r7
 8007ce2:	2715      	movs	r7, #21
 8007ce4:	f00c fd2d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ce8:	4628      	mov	r0, r5
        return i * scale;
 8007cea:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007cee:	437a      	muls	r2, r7
 8007cf0:	271d      	movs	r7, #29
 8007cf2:	4379      	muls	r1, r7
 8007cf4:	271e      	movs	r7, #30
 8007cf6:	f00c fd24 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007cfa:	2014      	movs	r0, #20
        return i * scale;
 8007cfc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d00:	4342      	muls	r2, r0
 8007d02:	4628      	mov	r0, r5
 8007d04:	4379      	muls	r1, r7
 8007d06:	270e      	movs	r7, #14
 8007d08:	f00c fd1b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d0c:	2012      	movs	r0, #18
        return i * scale;
 8007d0e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d12:	4342      	muls	r2, r0
 8007d14:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f00c fd12 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d1e:	4628      	mov	r0, r5
        return i * scale;
 8007d20:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d24:	0112      	lsls	r2, r2, #4
 8007d26:	0149      	lsls	r1, r1, #5
 8007d28:	f00c fd0b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d2c:	4628      	mov	r0, r5
        return i * scale;
 8007d2e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d32:	437a      	muls	r2, r7
 8007d34:	eb01 1141 	add.w	r1, r1, r1, lsl #5
 8007d38:	f00c fd03 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007d3c:	2722      	movs	r7, #34	; 0x22
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d3e:	230b      	movs	r3, #11
 8007d40:	4628      	mov	r0, r5
        return i * scale;
 8007d42:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d46:	435a      	muls	r2, r3
 8007d48:	4379      	muls	r1, r7
 8007d4a:	f00c fcfa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d4e:	2323      	movs	r3, #35	; 0x23
 8007d50:	4628      	mov	r0, r5
        return i * scale;
 8007d52:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d56:	4359      	muls	r1, r3
 8007d58:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8007d5c:	f00c fcf1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d60:	2324      	movs	r3, #36	; 0x24
 8007d62:	2006      	movs	r0, #6
        return i * scale;
 8007d64:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d68:	4342      	muls	r2, r0
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	4359      	muls	r1, r3
 8007d6e:	f00c fce8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d72:	2325      	movs	r3, #37	; 0x25
 8007d74:	4628      	mov	r0, r5
        return i * scale;
 8007d76:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d7a:	4359      	muls	r1, r3
 8007d7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007d80:	f00c fcdf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007d84:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d88:	2026      	movs	r0, #38	; 0x26
 8007d8a:	465a      	mov	r2, fp
 8007d8c:	4341      	muls	r1, r0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f00c fcd7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007d94:	2027      	movs	r0, #39	; 0x27
        return i * scale;
 8007d96:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007d9a:	4341      	muls	r1, r0
 8007d9c:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8007da0:	4628      	mov	r0, r5
 8007da2:	f00c fcce 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007da6:	464b      	mov	r3, r9
 8007da8:	f06f 0005 	mvn.w	r0, #5
        return i * scale;
 8007dac:	f04f 0943 	mov.w	r9, #67	; 0x43
 8007db0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007db4:	4342      	muls	r2, r0
 8007db6:	4628      	mov	r0, r5
 8007db8:	4359      	muls	r1, r3
 8007dba:	f00c fcc2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007dbe:	f06f 0308 	mvn.w	r3, #8
 8007dc2:	4628      	mov	r0, r5
        return i * scale;
 8007dc4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dc8:	435a      	muls	r2, r3
 8007dca:	2329      	movs	r3, #41	; 0x29
 8007dcc:	4359      	muls	r1, r3
 8007dce:	f00c fcb8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007dd2:	f06f 030b 	mvn.w	r3, #11
 8007dd6:	202a      	movs	r0, #42	; 0x2a
        return i * scale;
 8007dd8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ddc:	435a      	muls	r2, r3
 8007dde:	4341      	muls	r1, r0
 8007de0:	4628      	mov	r0, r5
 8007de2:	f00c fcae 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007de6:	f06f 000d 	mvn.w	r0, #13
        return i * scale;
 8007dea:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007dee:	4342      	muls	r2, r0
 8007df0:	202b      	movs	r0, #43	; 0x2b
 8007df2:	4341      	muls	r1, r0
 8007df4:	4628      	mov	r0, r5
 8007df6:	f00c fca4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007dfa:	f06f 0310 	mvn.w	r3, #16
 8007dfe:	4628      	mov	r0, r5
        return i * scale;
 8007e00:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e04:	435a      	muls	r2, r3
 8007e06:	232c      	movs	r3, #44	; 0x2c
 8007e08:	4359      	muls	r1, r3
 8007e0a:	f00c fc9a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e0e:	f06f 0012 	mvn.w	r0, #18
        return i * scale;
 8007e12:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e16:	4342      	muls	r2, r0
 8007e18:	202d      	movs	r0, #45	; 0x2d
 8007e1a:	4341      	muls	r1, r0
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f00c fc90 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e22:	232e      	movs	r3, #46	; 0x2e
 8007e24:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 8007e28:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e2c:	4342      	muls	r2, r0
 8007e2e:	4628      	mov	r0, r5
 8007e30:	4359      	muls	r1, r3
 8007e32:	f00c fc86 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e36:	232f      	movs	r3, #47	; 0x2f
 8007e38:	f06f 0015 	mvn.w	r0, #21
        return i * scale;
 8007e3c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e40:	4342      	muls	r2, r0
 8007e42:	4628      	mov	r0, r5
 8007e44:	4359      	muls	r1, r3
 8007e46:	f00c fc7c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e4a:	2330      	movs	r3, #48	; 0x30
 8007e4c:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 8007e50:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e54:	4342      	muls	r2, r0
 8007e56:	4628      	mov	r0, r5
 8007e58:	4359      	muls	r1, r3
 8007e5a:	f00c fc72 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e5e:	2332      	movs	r3, #50	; 0x32
 8007e60:	f06f 0017 	mvn.w	r0, #23
        return i * scale;
 8007e64:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e68:	4342      	muls	r2, r0
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4359      	muls	r1, r3
 8007e6e:	f00c fc68 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e72:	2333      	movs	r3, #51	; 0x33
 8007e74:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 8007e78:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e7c:	4342      	muls	r2, r0
 8007e7e:	4628      	mov	r0, r5
 8007e80:	4359      	muls	r1, r3
 8007e82:	f00c fc5e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e86:	f06f 0315 	mvn.w	r3, #21
 8007e8a:	4628      	mov	r0, r5
        return i * scale;
 8007e8c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007e90:	435a      	muls	r2, r3
 8007e92:	2335      	movs	r3, #53	; 0x35
 8007e94:	4359      	muls	r1, r3
 8007e96:	f00c fc54 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007e9a:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 8007e9e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ea2:	4342      	muls	r2, r0
 8007ea4:	2036      	movs	r0, #54	; 0x36
 8007ea6:	4341      	muls	r1, r0
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f00c fc4a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007eae:	f06f 0311 	mvn.w	r3, #17
 8007eb2:	4628      	mov	r0, r5
        return i * scale;
 8007eb4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007eb8:	435a      	muls	r2, r3
 8007eba:	4371      	muls	r1, r6
 8007ebc:	2638      	movs	r6, #56	; 0x38
 8007ebe:	f00c fc40 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ec2:	4628      	mov	r0, r5
        return i * scale;
 8007ec4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ec8:	4371      	muls	r1, r6
 8007eca:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8007ece:	f00c fc38 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ed2:	f06f 060c 	mvn.w	r6, #12
 8007ed6:	4628      	mov	r0, r5
        return i * scale;
 8007ed8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007edc:	4372      	muls	r2, r6
 8007ede:	2639      	movs	r6, #57	; 0x39
 8007ee0:	4371      	muls	r1, r6
 8007ee2:	f06f 0608 	mvn.w	r6, #8
 8007ee6:	f00c fc2c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007eea:	4628      	mov	r0, r5
        return i * scale;
 8007eec:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ef0:	4372      	muls	r2, r6
 8007ef2:	263a      	movs	r6, #58	; 0x3a
 8007ef4:	4371      	muls	r1, r6
 8007ef6:	f06f 0605 	mvn.w	r6, #5
 8007efa:	f00c fc22 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007efe:	4628      	mov	r0, r5
        return i * scale;
 8007f00:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f04:	4372      	muls	r2, r6
 8007f06:	f06f 0601 	mvn.w	r6, #1
 8007f0a:	fb08 f101 	mul.w	r1, r8, r1
 8007f0e:	f00c fc18 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f12:	4628      	mov	r0, r5
        return i * scale;
 8007f14:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f18:	4372      	muls	r2, r6
 8007f1a:	263c      	movs	r6, #60	; 0x3c
 8007f1c:	4371      	muls	r1, r6
 8007f1e:	263d      	movs	r6, #61	; 0x3d
 8007f20:	f00c fc0f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f24:	4628      	mov	r0, r5
        return i * scale;
 8007f26:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f2a:	4371      	muls	r1, r6
 8007f2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8007f30:	f00c fc07 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8007f34:	263e      	movs	r6, #62	; 0x3e
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f36:	4628      	mov	r0, r5
        return i * scale;
 8007f38:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f3c:	4371      	muls	r1, r6
 8007f3e:	00d2      	lsls	r2, r2, #3
 8007f40:	f00c fbff 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f44:	200d      	movs	r0, #13
        return i * scale;
 8007f46:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f4a:	4342      	muls	r2, r0
 8007f4c:	ebc1 1181 	rsb	r1, r1, r1, lsl #6
 8007f50:	4628      	mov	r0, r5
 8007f52:	f00c fbf6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f56:	2012      	movs	r0, #18
        return i * scale;
 8007f58:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f5c:	4342      	muls	r2, r0
 8007f5e:	0189      	lsls	r1, r1, #6
 8007f60:	4628      	mov	r0, r5
 8007f62:	f00c fbee 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f66:	2317      	movs	r3, #23
 8007f68:	4628      	mov	r0, r5
        return i * scale;
 8007f6a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f6e:	435a      	muls	r2, r3
 8007f70:	eb01 1181 	add.w	r1, r1, r1, lsl #6
 8007f74:	f00c fbe5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f78:	201d      	movs	r0, #29
        return i * scale;
 8007f7a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f7e:	4342      	muls	r2, r0
 8007f80:	2042      	movs	r0, #66	; 0x42
 8007f82:	4341      	muls	r1, r0
 8007f84:	4628      	mov	r0, r5
 8007f86:	f00c fbdc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f8a:	4628      	mov	r0, r5
        return i * scale;
 8007f8c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007f90:	437a      	muls	r2, r7
 8007f92:	fb09 f101 	mul.w	r1, r9, r1
 8007f96:	f00c fbd4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007f9a:	2128      	movs	r1, #40	; 0x28
        return i * scale;
 8007f9c:	e9d4 0222 	ldrd	r0, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fa0:	434a      	muls	r2, r1
 8007fa2:	2144      	movs	r1, #68	; 0x44
 8007fa4:	4341      	muls	r1, r0
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f00c fbcb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007fac:	202e      	movs	r0, #46	; 0x2e
        return i * scale;
 8007fae:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fb2:	4342      	muls	r2, r0
 8007fb4:	2045      	movs	r0, #69	; 0x45
 8007fb6:	4341      	muls	r1, r0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f00c fbc2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007fbe:	2033      	movs	r0, #51	; 0x33
        return i * scale;
 8007fc0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fc4:	4342      	muls	r2, r0
 8007fc6:	2046      	movs	r0, #70	; 0x46
 8007fc8:	4341      	muls	r1, r0
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f00c fbb9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007fd0:	2039      	movs	r0, #57	; 0x39
        return i * scale;
 8007fd2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fd6:	4342      	muls	r2, r0
 8007fd8:	2047      	movs	r0, #71	; 0x47
 8007fda:	4341      	muls	r1, r0
 8007fdc:	4628      	mov	r0, r5
 8007fde:	f00c fbb0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007fe2:	2348      	movs	r3, #72	; 0x48
 8007fe4:	4628      	mov	r0, r5
        return i * scale;
 8007fe6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007fea:	4372      	muls	r2, r6
 8007fec:	4359      	muls	r1, r3
 8007fee:	f00c fba8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8007ff2:	2349      	movs	r3, #73	; 0x49
 8007ff4:	4628      	mov	r0, r5
        return i * scale;
 8007ff6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8007ffa:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 8007ffe:	f06f 0904 	mvn.w	r9, #4
        return addValue(int2scaledX(x), int2scaledY(y));
 8008002:	4359      	muls	r1, r3
 8008004:	f00c fb9d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008008:	2348      	movs	r3, #72	; 0x48
 800800a:	204a      	movs	r0, #74	; 0x4a
        return i * scale;
 800800c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008010:	435a      	muls	r2, r3
 8008012:	4341      	muls	r1, r0
 8008014:	4628      	mov	r0, r5
 8008016:	f00c fb94 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800801a:	204d      	movs	r0, #77	; 0x4d
        return i * scale;
 800801c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008020:	4342      	muls	r2, r0
 8008022:	204b      	movs	r0, #75	; 0x4b
 8008024:	4341      	muls	r1, r0
 8008026:	4628      	mov	r0, r5
 8008028:	f00c fb8b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800802c:	2051      	movs	r0, #81	; 0x51
        return i * scale;
 800802e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008032:	4342      	muls	r2, r0
 8008034:	204c      	movs	r0, #76	; 0x4c
 8008036:	4341      	muls	r1, r0
 8008038:	4628      	mov	r0, r5
 800803a:	f00c fb82 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800803e:	2355      	movs	r3, #85	; 0x55
 8008040:	4628      	mov	r0, r5
        return i * scale;
 8008042:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008046:	435a      	muls	r2, r3
 8008048:	234d      	movs	r3, #77	; 0x4d
 800804a:	4359      	muls	r1, r3
 800804c:	f00c fb79 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008050:	2358      	movs	r3, #88	; 0x58
 8008052:	4628      	mov	r0, r5
        return i * scale;
 8008054:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008058:	435a      	muls	r2, r3
 800805a:	234e      	movs	r3, #78	; 0x4e
 800805c:	4359      	muls	r1, r3
 800805e:	f00c fb70 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008062:	234f      	movs	r3, #79	; 0x4f
 8008064:	205b      	movs	r0, #91	; 0x5b
        return i * scale;
 8008066:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800806a:	4342      	muls	r2, r0
 800806c:	4628      	mov	r0, r5
 800806e:	4359      	muls	r1, r3
 8008070:	f00c fb67 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008074:	2350      	movs	r3, #80	; 0x50
 8008076:	205d      	movs	r0, #93	; 0x5d
        return i * scale;
 8008078:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800807c:	4359      	muls	r1, r3
 800807e:	4342      	muls	r2, r0
 8008080:	4628      	mov	r0, r5
 8008082:	f00c fb5e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008086:	205f      	movs	r0, #95	; 0x5f
        return i * scale;
 8008088:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800808c:	4342      	muls	r2, r0
 800808e:	2051      	movs	r0, #81	; 0x51
 8008090:	4341      	muls	r1, r0
 8008092:	4628      	mov	r0, r5
 8008094:	f00c fb55 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008098:	2352      	movs	r3, #82	; 0x52
 800809a:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 800809c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080a0:	4342      	muls	r2, r0
 80080a2:	4628      	mov	r0, r5
 80080a4:	4359      	muls	r1, r3
 80080a6:	f00c fb4c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80080aa:	2362      	movs	r3, #98	; 0x62
 80080ac:	2053      	movs	r0, #83	; 0x53
        return i * scale;
 80080ae:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080b2:	435a      	muls	r2, r3
 80080b4:	4341      	muls	r1, r0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f00c fb43 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80080bc:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 80080be:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080c2:	4342      	muls	r2, r0
 80080c4:	2056      	movs	r0, #86	; 0x56
 80080c6:	4341      	muls	r1, r0
 80080c8:	4628      	mov	r0, r5
 80080ca:	f00c fb3a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80080ce:	235f      	movs	r3, #95	; 0x5f
 80080d0:	2057      	movs	r0, #87	; 0x57
        return i * scale;
 80080d2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080d6:	435a      	muls	r2, r3
 80080d8:	4341      	muls	r1, r0
 80080da:	4628      	mov	r0, r5
 80080dc:	f00c fb31 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80080e0:	2358      	movs	r3, #88	; 0x58
 80080e2:	205d      	movs	r0, #93	; 0x5d
        return i * scale;
 80080e4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080e8:	4359      	muls	r1, r3
 80080ea:	4342      	muls	r2, r0
 80080ec:	4628      	mov	r0, r5
 80080ee:	f00c fb28 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80080f2:	205b      	movs	r0, #91	; 0x5b
        return i * scale;
 80080f4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80080f8:	4342      	muls	r2, r0
 80080fa:	2059      	movs	r0, #89	; 0x59
 80080fc:	4341      	muls	r1, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f00c fb1f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008104:	2358      	movs	r3, #88	; 0x58
 8008106:	205a      	movs	r0, #90	; 0x5a
        return i * scale;
 8008108:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800810c:	435a      	muls	r2, r3
 800810e:	4341      	muls	r1, r0
 8008110:	4628      	mov	r0, r5
 8008112:	f00c fb16 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008116:	2054      	movs	r0, #84	; 0x54
        return i * scale;
 8008118:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800811c:	4342      	muls	r2, r0
 800811e:	205b      	movs	r0, #91	; 0x5b
 8008120:	4341      	muls	r1, r0
 8008122:	4628      	mov	r0, r5
 8008124:	f00c fb0d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008128:	2350      	movs	r3, #80	; 0x50
 800812a:	205c      	movs	r0, #92	; 0x5c
        return i * scale;
 800812c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008130:	435a      	muls	r2, r3
 8008132:	4341      	muls	r1, r0
 8008134:	4628      	mov	r0, r5
 8008136:	f00c fb04 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800813a:	234b      	movs	r3, #75	; 0x4b
 800813c:	4628      	mov	r0, r5
        return i * scale;
 800813e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008142:	435a      	muls	r2, r3
 8008144:	235d      	movs	r3, #93	; 0x5d
 8008146:	4359      	muls	r1, r3
 8008148:	f00c fafb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800814c:	2046      	movs	r0, #70	; 0x46
        return i * scale;
 800814e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008152:	4342      	muls	r2, r0
 8008154:	205e      	movs	r0, #94	; 0x5e
 8008156:	4341      	muls	r1, r0
 8008158:	4628      	mov	r0, r5
 800815a:	f00c faf2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800815e:	235f      	movs	r3, #95	; 0x5f
 8008160:	4628      	mov	r0, r5
        return i * scale;
 8008162:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008166:	4359      	muls	r1, r3
 8008168:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 800816c:	f00c fae9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008170:	2360      	movs	r3, #96	; 0x60
 8008172:	4628      	mov	r0, r5
        return i * scale;
 8008174:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008178:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 800817c:	f06f 081f 	mvn.w	r8, #31
        return addValue(int2scaledX(x), int2scaledY(y));
 8008180:	4359      	muls	r1, r3
 8008182:	f00c fade 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008186:	2335      	movs	r3, #53	; 0x35
 8008188:	2061      	movs	r0, #97	; 0x61
        return i * scale;
 800818a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800818e:	435a      	muls	r2, r3
 8008190:	4341      	muls	r1, r0
 8008192:	4628      	mov	r0, r5
 8008194:	f00c fad5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008198:	232f      	movs	r3, #47	; 0x2f
 800819a:	4628      	mov	r0, r5
        return i * scale;
 800819c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081a0:	435a      	muls	r2, r3
 80081a2:	2362      	movs	r3, #98	; 0x62
 80081a4:	4359      	muls	r1, r3
 80081a6:	f00c facc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80081aa:	2329      	movs	r3, #41	; 0x29
 80081ac:	2063      	movs	r0, #99	; 0x63
        return i * scale;
 80081ae:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081b2:	435a      	muls	r2, r3
 80081b4:	4341      	muls	r1, r0
 80081b6:	4628      	mov	r0, r5
 80081b8:	f00c fac3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80081bc:	2064      	movs	r0, #100	; 0x64
        return i * scale;
 80081be:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081c2:	437a      	muls	r2, r7
 80081c4:	4341      	muls	r1, r0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f00c fabb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80081cc:	231c      	movs	r3, #28
 80081ce:	2065      	movs	r0, #101	; 0x65
        return i * scale;
 80081d0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081d4:	435a      	muls	r2, r3
 80081d6:	4341      	muls	r1, r0
 80081d8:	4628      	mov	r0, r5
 80081da:	f00c fab2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80081de:	2315      	movs	r3, #21
 80081e0:	2066      	movs	r0, #102	; 0x66
        return i * scale;
 80081e2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081e6:	435a      	muls	r2, r3
 80081e8:	4341      	muls	r1, r0
 80081ea:	4628      	mov	r0, r5
 80081ec:	f00c faa9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80081f0:	200e      	movs	r0, #14
        return i * scale;
 80081f2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80081f6:	4342      	muls	r2, r0
 80081f8:	2067      	movs	r0, #103	; 0x67
 80081fa:	4341      	muls	r1, r0
 80081fc:	4628      	mov	r0, r5
 80081fe:	f00c faa0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008202:	2068      	movs	r0, #104	; 0x68
        return i * scale;
 8008204:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008208:	4341      	muls	r1, r0
 800820a:	00d2      	lsls	r2, r2, #3
 800820c:	4628      	mov	r0, r5
 800820e:	f00c fa98 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008212:	2069      	movs	r0, #105	; 0x69
 8008214:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
 8008218:	4341      	muls	r1, r0
 800821a:	4628      	mov	r0, r5
 800821c:	f00c fa91 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008220:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008224:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008228:	206a      	movs	r0, #106	; 0x6a
 800822a:	fb09 f202 	mul.w	r2, r9, r2
 800822e:	4341      	muls	r1, r0
 8008230:	4628      	mov	r0, r5
 8008232:	f00c fa86 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008236:	f06f 030a 	mvn.w	r3, #10
 800823a:	206b      	movs	r0, #107	; 0x6b
        return i * scale;
 800823c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008240:	435a      	muls	r2, r3
 8008242:	4341      	muls	r1, r0
 8008244:	4628      	mov	r0, r5
 8008246:	f00c fa7c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800824a:	f06f 0010 	mvn.w	r0, #16
        return i * scale;
 800824e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008252:	4342      	muls	r2, r0
 8008254:	206c      	movs	r0, #108	; 0x6c
 8008256:	4341      	muls	r1, r0
 8008258:	4628      	mov	r0, r5
 800825a:	f00c fa72 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800825e:	f06f 0315 	mvn.w	r3, #21
 8008262:	206d      	movs	r0, #109	; 0x6d
        return i * scale;
 8008264:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008268:	435a      	muls	r2, r3
 800826a:	4341      	muls	r1, r0
 800826c:	4628      	mov	r0, r5
 800826e:	f00c fa68 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008272:	f06f 031a 	mvn.w	r3, #26
 8008276:	206e      	movs	r0, #110	; 0x6e
        return i * scale;
 8008278:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800827c:	435a      	muls	r2, r3
 800827e:	4341      	muls	r1, r0
 8008280:	4628      	mov	r0, r5
 8008282:	f00c fa5e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008286:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800828a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800828e:	206f      	movs	r0, #111	; 0x6f
 8008290:	fb08 f202 	mul.w	r2, r8, r2
 8008294:	4341      	muls	r1, r0
 8008296:	4628      	mov	r0, r5
 8008298:	f00c fa53 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800829c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80082a0:	2070      	movs	r0, #112	; 0x70
        return i * scale;
 80082a2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80082a6:	435a      	muls	r2, r3
 80082a8:	4341      	muls	r1, r0
 80082aa:	4628      	mov	r0, r5
 80082ac:	f00c fa49 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80082b0:	f06f 0027 	mvn.w	r0, #39	; 0x27
        return i * scale;
 80082b4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80082b8:	4342      	muls	r2, r0
 80082ba:	2071      	movs	r0, #113	; 0x71
 80082bc:	4341      	muls	r1, r0
 80082be:	4628      	mov	r0, r5
 80082c0:	f00c fa3f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80082c4:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 80082c8:	2072      	movs	r0, #114	; 0x72
        return i * scale;
 80082ca:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80082ce:	435a      	muls	r2, r3
 80082d0:	4341      	muls	r1, r0
 80082d2:	4628      	mov	r0, r5
 80082d4:	f00c fa35 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80082d8:	f06f 032e 	mvn.w	r3, #46	; 0x2e
 80082dc:	2073      	movs	r0, #115	; 0x73
        return i * scale;
 80082de:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80082e2:	435a      	muls	r2, r3
 80082e4:	4341      	muls	r1, r0
 80082e6:	4628      	mov	r0, r5
 80082e8:	f00c fa2b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80082ec:	f06f 0330 	mvn.w	r3, #48	; 0x30
 80082f0:	2074      	movs	r0, #116	; 0x74
        return i * scale;
 80082f2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80082f6:	435a      	muls	r2, r3
 80082f8:	4341      	muls	r1, r0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f00c fa21 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008300:	f06f 0332 	mvn.w	r3, #50	; 0x32
 8008304:	2075      	movs	r0, #117	; 0x75
        return i * scale;
 8008306:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800830a:	435a      	muls	r2, r3
 800830c:	4341      	muls	r1, r0
 800830e:	4628      	mov	r0, r5
 8008310:	f00c fa17 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008314:	f06f 0033 	mvn.w	r0, #51	; 0x33
        return i * scale;
 8008318:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800831c:	4342      	muls	r2, r0
 800831e:	2076      	movs	r0, #118	; 0x76
 8008320:	4341      	muls	r1, r0
 8008322:	4628      	mov	r0, r5
 8008324:	f00c fa0d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008328:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800832c:	2077      	movs	r0, #119	; 0x77
        return i * scale;
 800832e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008332:	435a      	muls	r2, r3
 8008334:	4341      	muls	r1, r0
 8008336:	4628      	mov	r0, r5
 8008338:	f00c fa03 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800833c:	f06f 0035 	mvn.w	r0, #53	; 0x35
        return i * scale;
 8008340:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008344:	4342      	muls	r2, r0
 8008346:	2078      	movs	r0, #120	; 0x78
 8008348:	4341      	muls	r1, r0
 800834a:	4628      	mov	r0, r5
 800834c:	f00c f9f9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008350:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8008354:	207b      	movs	r0, #123	; 0x7b
        return i * scale;
 8008356:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800835a:	435a      	muls	r2, r3
 800835c:	4341      	muls	r1, r0
 800835e:	4628      	mov	r0, r5
 8008360:	f00c f9ef 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008364:	f06f 0332 	mvn.w	r3, #50	; 0x32
 8008368:	207c      	movs	r0, #124	; 0x7c
        return i * scale;
 800836a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800836e:	435a      	muls	r2, r3
 8008370:	4341      	muls	r1, r0
 8008372:	4628      	mov	r0, r5
 8008374:	f00c f9e5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008378:	f06f 0031 	mvn.w	r0, #49	; 0x31
        return i * scale;
 800837c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008380:	4342      	muls	r2, r0
 8008382:	207d      	movs	r0, #125	; 0x7d
 8008384:	4341      	muls	r1, r0
 8008386:	4628      	mov	r0, r5
 8008388:	f00c f9db 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800838c:	f06f 002f 	mvn.w	r0, #47	; 0x2f
        return i * scale;
 8008390:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008394:	4342      	muls	r2, r0
 8008396:	207e      	movs	r0, #126	; 0x7e
 8008398:	4341      	muls	r1, r0
 800839a:	4628      	mov	r0, r5
 800839c:	f00c f9d1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80083a0:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 80083a4:	4628      	mov	r0, r5
        return i * scale;
 80083a6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80083aa:	435a      	muls	r2, r3
 80083ac:	ebc1 11c1 	rsb	r1, r1, r1, lsl #7
 80083b0:	f00c f9c7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80083b4:	f06f 0029 	mvn.w	r0, #41	; 0x29
        return i * scale;
 80083b8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80083bc:	4342      	muls	r2, r0
 80083be:	01c9      	lsls	r1, r1, #7
 80083c0:	4628      	mov	r0, r5
 80083c2:	f00c f9be 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80083c6:	f06f 0027 	mvn.w	r0, #39	; 0x27
        return i * scale;
 80083ca:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80083ce:	4342      	muls	r2, r0
 80083d0:	eb01 11c1 	add.w	r1, r1, r1, lsl #7
 80083d4:	4628      	mov	r0, r5
 80083d6:	f00c f9b4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80083da:	f06f 0324 	mvn.w	r3, #36	; 0x24
 80083de:	2082      	movs	r0, #130	; 0x82
        return i * scale;
 80083e0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80083e4:	435a      	muls	r2, r3
 80083e6:	4341      	muls	r1, r0
 80083e8:	4628      	mov	r0, r5
 80083ea:	f00c f9aa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80083ee:	f06f 0320 	mvn.w	r3, #32
 80083f2:	2083      	movs	r0, #131	; 0x83
        return i * scale;
 80083f4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80083f8:	435a      	muls	r2, r3
 80083fa:	4341      	muls	r1, r0
 80083fc:	4628      	mov	r0, r5
 80083fe:	f00c f9a0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008402:	f06f 031d 	mvn.w	r3, #29
 8008406:	2084      	movs	r0, #132	; 0x84
        return i * scale;
 8008408:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800840c:	435a      	muls	r2, r3
 800840e:	4341      	muls	r1, r0
 8008410:	4628      	mov	r0, r5
 8008412:	f00c f996 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008416:	f06f 031a 	mvn.w	r3, #26
 800841a:	2085      	movs	r0, #133	; 0x85
        return i * scale;
 800841c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008420:	435a      	muls	r2, r3
 8008422:	4341      	muls	r1, r0
 8008424:	4628      	mov	r0, r5
 8008426:	f00c f98c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800842a:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 800842e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008432:	4342      	muls	r2, r0
 8008434:	2086      	movs	r0, #134	; 0x86
 8008436:	4341      	muls	r1, r0
 8008438:	4628      	mov	r0, r5
 800843a:	f00c f982 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800843e:	f06f 0013 	mvn.w	r0, #19
        return i * scale;
 8008442:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008446:	4342      	muls	r2, r0
 8008448:	2087      	movs	r0, #135	; 0x87
 800844a:	4341      	muls	r1, r0
 800844c:	4628      	mov	r0, r5
 800844e:	f00c f978 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008452:	f06f 0010 	mvn.w	r0, #16
        return i * scale;
 8008456:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800845a:	4342      	muls	r2, r0
 800845c:	2088      	movs	r0, #136	; 0x88
 800845e:	4341      	muls	r1, r0
 8008460:	4628      	mov	r0, r5
 8008462:	f00c f96e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008466:	f06f 030c 	mvn.w	r3, #12
 800846a:	2089      	movs	r0, #137	; 0x89
        return i * scale;
 800846c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008470:	435a      	muls	r2, r3
 8008472:	4341      	muls	r1, r0
 8008474:	4628      	mov	r0, r5
 8008476:	f00c f964 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800847a:	f06f 0009 	mvn.w	r0, #9
        return i * scale;
 800847e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008482:	4342      	muls	r2, r0
 8008484:	208a      	movs	r0, #138	; 0x8a
 8008486:	4341      	muls	r1, r0
 8008488:	4628      	mov	r0, r5
 800848a:	f00c f95a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800848e:	f06f 0007 	mvn.w	r0, #7
        return i * scale;
 8008492:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008496:	4342      	muls	r2, r0
 8008498:	208b      	movs	r0, #139	; 0x8b
 800849a:	4341      	muls	r1, r0
 800849c:	4628      	mov	r0, r5
 800849e:	f00c f950 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084a2:	208c      	movs	r0, #140	; 0x8c
        return i * scale;
 80084a4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80084a8:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 80084ac:	f06f 094a 	mvn.w	r9, #74	; 0x4a
        return addValue(int2scaledX(x), int2scaledY(y));
 80084b0:	4341      	muls	r1, r0
 80084b2:	4628      	mov	r0, r5
 80084b4:	f00c f945 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084b8:	208d      	movs	r0, #141	; 0x8d
        return i * scale;
 80084ba:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80084be:	4341      	muls	r1, r0
 80084c0:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 80084c4:	4628      	mov	r0, r5
 80084c6:	f00c f93c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084ca:	208e      	movs	r0, #142	; 0x8e
        return i * scale;
 80084cc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80084d0:	4341      	muls	r1, r0
 80084d2:	4252      	negs	r2, r2
 80084d4:	4628      	mov	r0, r5
 80084d6:	f00c f934 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084da:	208f      	movs	r0, #143	; 0x8f
 80084dc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
 80084e0:	4341      	muls	r1, r0
 80084e2:	4628      	mov	r0, r5
 80084e4:	f00c f92d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084e8:	2090      	movs	r0, #144	; 0x90
        return i * scale;
 80084ea:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80084ee:	4341      	muls	r1, r0
 80084f0:	0052      	lsls	r2, r2, #1
 80084f2:	4628      	mov	r0, r5
 80084f4:	f00c f925 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80084f8:	2092      	movs	r0, #146	; 0x92
        return i * scale;
 80084fa:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80084fe:	4341      	muls	r1, r0
 8008500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008504:	4628      	mov	r0, r5
 8008506:	f00c f91c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800850a:	2094      	movs	r0, #148	; 0x94
        return i * scale;
 800850c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008510:	4341      	muls	r1, r0
 8008512:	0052      	lsls	r2, r2, #1
 8008514:	4628      	mov	r0, r5
 8008516:	f00c f914 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800851a:	2095      	movs	r0, #149	; 0x95
 800851c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
 8008520:	4341      	muls	r1, r0
 8008522:	4628      	mov	r0, r5
 8008524:	f00c f90d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008528:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800852c:	2096      	movs	r0, #150	; 0x96
 800852e:	465a      	mov	r2, fp
 8008530:	4341      	muls	r1, r0
 8008532:	4628      	mov	r0, r5
 8008534:	f00c f905 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008538:	f06f 0301 	mvn.w	r3, #1
 800853c:	2097      	movs	r0, #151	; 0x97
        return i * scale;
 800853e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008542:	435a      	muls	r2, r3
 8008544:	4341      	muls	r1, r0
 8008546:	4628      	mov	r0, r5
 8008548:	f00c f8fb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800854c:	f06f 0303 	mvn.w	r3, #3
 8008550:	2098      	movs	r0, #152	; 0x98
        return i * scale;
 8008552:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008556:	435a      	muls	r2, r3
 8008558:	4341      	muls	r1, r0
 800855a:	4628      	mov	r0, r5
 800855c:	f00c f8f1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008560:	f06f 0305 	mvn.w	r3, #5
 8008564:	2099      	movs	r0, #153	; 0x99
        return i * scale;
 8008566:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800856a:	435a      	muls	r2, r3
 800856c:	4341      	muls	r1, r0
 800856e:	4628      	mov	r0, r5
 8008570:	f00c f8e7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008574:	f06f 0308 	mvn.w	r3, #8
 8008578:	209a      	movs	r0, #154	; 0x9a
        return i * scale;
 800857a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800857e:	435a      	muls	r2, r3
 8008580:	4341      	muls	r1, r0
 8008582:	4628      	mov	r0, r5
 8008584:	f00c f8dd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008588:	f06f 030b 	mvn.w	r3, #11
 800858c:	209b      	movs	r0, #155	; 0x9b
        return i * scale;
 800858e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008592:	435a      	muls	r2, r3
 8008594:	4341      	muls	r1, r0
 8008596:	4628      	mov	r0, r5
 8008598:	f00c f8d3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800859c:	f06f 030f 	mvn.w	r3, #15
 80085a0:	209c      	movs	r0, #156	; 0x9c
        return i * scale;
 80085a2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80085a6:	435a      	muls	r2, r3
 80085a8:	4341      	muls	r1, r0
 80085aa:	4628      	mov	r0, r5
 80085ac:	f00c f8c9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80085b0:	f06f 0312 	mvn.w	r3, #18
 80085b4:	209d      	movs	r0, #157	; 0x9d
        return i * scale;
 80085b6:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80085ba:	435a      	muls	r2, r3
 80085bc:	4341      	muls	r1, r0
 80085be:	4628      	mov	r0, r5
 80085c0:	f00c f8bf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80085c4:	f06f 0016 	mvn.w	r0, #22
        return i * scale;
 80085c8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80085cc:	4342      	muls	r2, r0
 80085ce:	209e      	movs	r0, #158	; 0x9e
 80085d0:	4341      	muls	r1, r0
 80085d2:	4628      	mov	r0, r5
 80085d4:	f00c f8b5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80085d8:	f06f 031a 	mvn.w	r3, #26
 80085dc:	209f      	movs	r0, #159	; 0x9f
        return i * scale;
 80085de:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80085e2:	435a      	muls	r2, r3
 80085e4:	4341      	muls	r1, r0
 80085e6:	4628      	mov	r0, r5
 80085e8:	f00c f8ab 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80085ec:	20a0      	movs	r0, #160	; 0xa0
        return i * scale;
 80085ee:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80085f2:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 80085f6:	f06f 0828 	mvn.w	r8, #40	; 0x28
        return addValue(int2scaledX(x), int2scaledY(y));
 80085fa:	4341      	muls	r1, r0
 80085fc:	4628      	mov	r0, r5
 80085fe:	f00c f8a0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008602:	f06f 0023 	mvn.w	r0, #35	; 0x23
        return i * scale;
 8008606:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800860a:	4342      	muls	r2, r0
 800860c:	20a1      	movs	r0, #161	; 0xa1
 800860e:	4341      	muls	r1, r0
 8008610:	4628      	mov	r0, r5
 8008612:	f00c f896 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008616:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800861a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800861e:	20a2      	movs	r0, #162	; 0xa2
 8008620:	fb08 f202 	mul.w	r2, r8, r2
 8008624:	4341      	muls	r1, r0
 8008626:	4628      	mov	r0, r5
 8008628:	f00c f88b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800862c:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8008630:	20a3      	movs	r0, #163	; 0xa3
        return i * scale;
 8008632:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008636:	435a      	muls	r2, r3
 8008638:	4341      	muls	r1, r0
 800863a:	4628      	mov	r0, r5
 800863c:	f00c f881 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008640:	f06f 0330 	mvn.w	r3, #48	; 0x30
 8008644:	20a4      	movs	r0, #164	; 0xa4
        return i * scale;
 8008646:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800864a:	435a      	muls	r2, r3
 800864c:	4341      	muls	r1, r0
 800864e:	4628      	mov	r0, r5
 8008650:	f00c f877 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008654:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008658:	20a5      	movs	r0, #165	; 0xa5
        return i * scale;
 800865a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800865e:	435a      	muls	r2, r3
 8008660:	4341      	muls	r1, r0
 8008662:	4628      	mov	r0, r5
 8008664:	f00c f86d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008668:	f06f 0039 	mvn.w	r0, #57	; 0x39
        return i * scale;
 800866c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008670:	4342      	muls	r2, r0
 8008672:	20a6      	movs	r0, #166	; 0xa6
 8008674:	4341      	muls	r1, r0
 8008676:	4628      	mov	r0, r5
 8008678:	f00c f863 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800867c:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 8008680:	20a7      	movs	r0, #167	; 0xa7
        return i * scale;
 8008682:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008686:	435a      	muls	r2, r3
 8008688:	4341      	muls	r1, r0
 800868a:	4628      	mov	r0, r5
 800868c:	f00c f859 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008690:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8008694:	20a8      	movs	r0, #168	; 0xa8
        return i * scale;
 8008696:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800869a:	435a      	muls	r2, r3
 800869c:	4341      	muls	r1, r0
 800869e:	4628      	mov	r0, r5
 80086a0:	f00c f84f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80086a4:	f06f 0044 	mvn.w	r0, #68	; 0x44
        return i * scale;
 80086a8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80086ac:	4342      	muls	r2, r0
 80086ae:	20a9      	movs	r0, #169	; 0xa9
 80086b0:	4341      	muls	r1, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f00c f845 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80086b8:	f06f 0347 	mvn.w	r3, #71	; 0x47
 80086bc:	20aa      	movs	r0, #170	; 0xaa
        return i * scale;
 80086be:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80086c2:	435a      	muls	r2, r3
 80086c4:	4341      	muls	r1, r0
 80086c6:	4628      	mov	r0, r5
 80086c8:	f00c f83b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80086cc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80086d0:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80086d4:	20ab      	movs	r0, #171	; 0xab
 80086d6:	fb09 f202 	mul.w	r2, r9, r2
 80086da:	4341      	muls	r1, r0
 80086dc:	4628      	mov	r0, r5
 80086de:	f00c f830 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80086e2:	f06f 034c 	mvn.w	r3, #76	; 0x4c
 80086e6:	20ac      	movs	r0, #172	; 0xac
        return i * scale;
 80086e8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80086ec:	435a      	muls	r2, r3
 80086ee:	4341      	muls	r1, r0
 80086f0:	4628      	mov	r0, r5
 80086f2:	f00c f826 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80086f6:	f06f 034e 	mvn.w	r3, #78	; 0x4e
 80086fa:	20ad      	movs	r0, #173	; 0xad
        return i * scale;
 80086fc:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008700:	435a      	muls	r2, r3
 8008702:	4341      	muls	r1, r0
 8008704:	4628      	mov	r0, r5
 8008706:	f00c f81c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800870a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800870e:	20ae      	movs	r0, #174	; 0xae
        return i * scale;
 8008710:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008714:	435a      	muls	r2, r3
 8008716:	4341      	muls	r1, r0
 8008718:	4628      	mov	r0, r5
 800871a:	f00c f812 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800871e:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8008722:	20af      	movs	r0, #175	; 0xaf
        return i * scale;
 8008724:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008728:	435a      	muls	r2, r3
 800872a:	4341      	muls	r1, r0
 800872c:	4628      	mov	r0, r5
 800872e:	f00c f808 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008732:	f06f 0051 	mvn.w	r0, #81	; 0x51
        return i * scale;
 8008736:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800873a:	4342      	muls	r2, r0
 800873c:	20b0      	movs	r0, #176	; 0xb0
 800873e:	4341      	muls	r1, r0
 8008740:	4628      	mov	r0, r5
 8008742:	f00b fffe 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008746:	f06f 0350 	mvn.w	r3, #80	; 0x50
 800874a:	20b2      	movs	r0, #178	; 0xb2
        return i * scale;
 800874c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008750:	435a      	muls	r2, r3
 8008752:	4341      	muls	r1, r0
 8008754:	4628      	mov	r0, r5
 8008756:	f00b fff4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800875a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800875e:	20b3      	movs	r0, #179	; 0xb3
        return i * scale;
 8008760:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008764:	435a      	muls	r2, r3
 8008766:	4341      	muls	r1, r0
 8008768:	4628      	mov	r0, r5
 800876a:	f00b ffea 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800876e:	f06f 004d 	mvn.w	r0, #77	; 0x4d
        return i * scale;
 8008772:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008776:	4342      	muls	r2, r0
 8008778:	20b4      	movs	r0, #180	; 0xb4
 800877a:	4341      	muls	r1, r0
 800877c:	4628      	mov	r0, r5
 800877e:	f00b ffe0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008782:	f06f 004b 	mvn.w	r0, #75	; 0x4b
        return i * scale;
 8008786:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800878a:	4342      	muls	r2, r0
 800878c:	20b5      	movs	r0, #181	; 0xb5
 800878e:	4341      	muls	r1, r0
 8008790:	4628      	mov	r0, r5
 8008792:	f00b ffd6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008796:	f06f 0348 	mvn.w	r3, #72	; 0x48
 800879a:	20b6      	movs	r0, #182	; 0xb6
        return i * scale;
 800879c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80087a0:	435a      	muls	r2, r3
 80087a2:	4341      	muls	r1, r0
 80087a4:	4628      	mov	r0, r5
 80087a6:	f00b ffcc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80087aa:	f06f 0345 	mvn.w	r3, #69	; 0x45
 80087ae:	20b7      	movs	r0, #183	; 0xb7
        return i * scale;
 80087b0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80087b4:	435a      	muls	r2, r3
 80087b6:	4341      	muls	r1, r0
 80087b8:	4628      	mov	r0, r5
 80087ba:	f00b ffc2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80087be:	f06f 0341 	mvn.w	r3, #65	; 0x41
 80087c2:	20b8      	movs	r0, #184	; 0xb8
        return i * scale;
 80087c4:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80087c8:	435a      	muls	r2, r3
 80087ca:	4341      	muls	r1, r0
 80087cc:	4628      	mov	r0, r5
 80087ce:	f00b ffb8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80087d2:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 80087d6:	20b9      	movs	r0, #185	; 0xb9
        return i * scale;
 80087d8:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80087dc:	435a      	muls	r2, r3
 80087de:	4341      	muls	r1, r0
 80087e0:	4628      	mov	r0, r5
 80087e2:	f00b ffae 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80087e6:	f06f 0338 	mvn.w	r3, #56	; 0x38
 80087ea:	20ba      	movs	r0, #186	; 0xba
        return i * scale;
 80087ec:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80087f0:	435a      	muls	r2, r3
 80087f2:	4341      	muls	r1, r0
 80087f4:	4628      	mov	r0, r5
 80087f6:	f00b ffa4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80087fa:	f06f 0333 	mvn.w	r3, #51	; 0x33
 80087fe:	20bb      	movs	r0, #187	; 0xbb
        return i * scale;
 8008800:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008804:	435a      	muls	r2, r3
 8008806:	4341      	muls	r1, r0
 8008808:	4628      	mov	r0, r5
 800880a:	f00b ff9a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800880e:	f06f 002d 	mvn.w	r0, #45	; 0x2d
        return i * scale;
 8008812:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008816:	4342      	muls	r2, r0
 8008818:	20bc      	movs	r0, #188	; 0xbc
 800881a:	4341      	muls	r1, r0
 800881c:	4628      	mov	r0, r5
 800881e:	f00b ff90 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008822:	f06f 0027 	mvn.w	r0, #39	; 0x27
        return i * scale;
 8008826:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800882a:	4342      	muls	r2, r0
 800882c:	20bd      	movs	r0, #189	; 0xbd
 800882e:	4341      	muls	r1, r0
 8008830:	4628      	mov	r0, r5
 8008832:	f00b ff86 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008836:	f06f 0021 	mvn.w	r0, #33	; 0x21
        return i * scale;
 800883a:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800883e:	4342      	muls	r2, r0
 8008840:	20be      	movs	r0, #190	; 0xbe
 8008842:	4341      	muls	r1, r0
 8008844:	4628      	mov	r0, r5
 8008846:	f00b ff7c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800884a:	f06f 031a 	mvn.w	r3, #26
 800884e:	20bf      	movs	r0, #191	; 0xbf
        return i * scale;
 8008850:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008854:	435a      	muls	r2, r3
 8008856:	4341      	muls	r1, r0
 8008858:	4628      	mov	r0, r5
 800885a:	f00b ff72 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800885e:	f06f 0314 	mvn.w	r3, #20
 8008862:	20c0      	movs	r0, #192	; 0xc0
        return i * scale;
 8008864:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008868:	435a      	muls	r2, r3
 800886a:	4341      	muls	r1, r0
 800886c:	4628      	mov	r0, r5
 800886e:	f00b ff68 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008872:	f06f 030d 	mvn.w	r3, #13
 8008876:	20c1      	movs	r0, #193	; 0xc1
        return i * scale;
 8008878:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800887c:	435a      	muls	r2, r3
 800887e:	4341      	muls	r1, r0
 8008880:	4628      	mov	r0, r5
 8008882:	f00b ff5e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008886:	20c2      	movs	r0, #194	; 0xc2
        return i * scale;
 8008888:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800888c:	4341      	muls	r1, r0
 800888e:	eba2 02c2 	sub.w	r2, r2, r2, lsl #3
 8008892:	4628      	mov	r0, r5
 8008894:	f00b ff55 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008898:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800889c:	20c3      	movs	r0, #195	; 0xc3
 800889e:	465a      	mov	r2, fp
 80088a0:	4341      	muls	r1, r0
 80088a2:	4628      	mov	r0, r5
 80088a4:	f00b ff4d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80088a8:	20c4      	movs	r0, #196	; 0xc4
        return i * scale;
 80088aa:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80088ae:	4341      	muls	r1, r0
 80088b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80088b4:	4628      	mov	r0, r5
 80088b6:	f00b ff44 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80088ba:	230e      	movs	r3, #14
 80088bc:	20c5      	movs	r0, #197	; 0xc5
        return i * scale;
 80088be:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80088c2:	435a      	muls	r2, r3
 80088c4:	4341      	muls	r1, r0
 80088c6:	4628      	mov	r0, r5
 80088c8:	f00b ff3b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80088cc:	2315      	movs	r3, #21
 80088ce:	20c6      	movs	r0, #198	; 0xc6
        return i * scale;
 80088d0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80088d4:	435a      	muls	r2, r3
 80088d6:	4341      	muls	r1, r0
 80088d8:	4628      	mov	r0, r5
 80088da:	f00b ff32 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80088de:	231b      	movs	r3, #27
 80088e0:	20c7      	movs	r0, #199	; 0xc7
        return i * scale;
 80088e2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80088e6:	435a      	muls	r2, r3
 80088e8:	4341      	muls	r1, r0
 80088ea:	4628      	mov	r0, r5
 80088ec:	f00b ff29 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80088f0:	4628      	mov	r0, r5
        return i * scale;
 80088f2:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80088f6:	437a      	muls	r2, r7
 80088f8:	27c8      	movs	r7, #200	; 0xc8
 80088fa:	4379      	muls	r1, r7
 80088fc:	2728      	movs	r7, #40	; 0x28
 80088fe:	f00b ff20 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008902:	20c9      	movs	r0, #201	; 0xc9
        return i * scale;
 8008904:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008908:	437a      	muls	r2, r7
 800890a:	272e      	movs	r7, #46	; 0x2e
 800890c:	4341      	muls	r1, r0
 800890e:	4628      	mov	r0, r5
 8008910:	f00b ff17 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008914:	20ca      	movs	r0, #202	; 0xca
        return i * scale;
 8008916:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800891a:	437a      	muls	r2, r7
        return i * scale;
 800891c:	2734      	movs	r7, #52	; 0x34
        return addValue(int2scaledX(x), int2scaledY(y));
 800891e:	4341      	muls	r1, r0
 8008920:	4628      	mov	r0, r5
 8008922:	f00b ff0e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008926:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800892a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800892e:	20cb      	movs	r0, #203	; 0xcb
 8008930:	437a      	muls	r2, r7
 8008932:	4341      	muls	r1, r0
 8008934:	4628      	mov	r0, r5
 8008936:	f00b ff04 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800893a:	2039      	movs	r0, #57	; 0x39
        return i * scale;
 800893c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008940:	4342      	muls	r2, r0
 8008942:	20cc      	movs	r0, #204	; 0xcc
 8008944:	4341      	muls	r1, r0
 8008946:	4628      	mov	r0, r5
 8008948:	f00b fefb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800894c:	20cd      	movs	r0, #205	; 0xcd
        return i * scale;
 800894e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008952:	4372      	muls	r2, r6
 8008954:	4341      	muls	r1, r0
 8008956:	4628      	mov	r0, r5
 8008958:	f00b fef3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800895c:	2342      	movs	r3, #66	; 0x42
 800895e:	20ce      	movs	r0, #206	; 0xce
        return i * scale;
 8008960:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008964:	435a      	muls	r2, r3
 8008966:	4341      	muls	r1, r0
 8008968:	4628      	mov	r0, r5
 800896a:	f00b feea 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800896e:	23cf      	movs	r3, #207	; 0xcf
 8008970:	2046      	movs	r0, #70	; 0x46
        return i * scale;
 8008972:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008976:	4342      	muls	r2, r0
 8008978:	4628      	mov	r0, r5
 800897a:	4359      	muls	r1, r3
 800897c:	f00b fee1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008980:	2149      	movs	r1, #73	; 0x49
 8008982:	4628      	mov	r0, r5
        return i * scale;
 8008984:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008988:	434a      	muls	r2, r1
 800898a:	21d0      	movs	r1, #208	; 0xd0
 800898c:	4359      	muls	r1, r3
 800898e:	f00b fed8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008992:	214c      	movs	r1, #76	; 0x4c
 8008994:	4628      	mov	r0, r5
        return i * scale;
 8008996:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800899a:	434a      	muls	r2, r1
 800899c:	21d1      	movs	r1, #209	; 0xd1
 800899e:	4359      	muls	r1, r3
 80089a0:	f00b fecf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089a4:	214e      	movs	r1, #78	; 0x4e
 80089a6:	4628      	mov	r0, r5
        return i * scale;
 80089a8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80089ac:	434a      	muls	r2, r1
 80089ae:	21d2      	movs	r1, #210	; 0xd2
 80089b0:	4359      	muls	r1, r3
 80089b2:	f00b fec6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089b6:	2150      	movs	r1, #80	; 0x50
 80089b8:	4628      	mov	r0, r5
        return i * scale;
 80089ba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80089be:	434a      	muls	r2, r1
 80089c0:	21d3      	movs	r1, #211	; 0xd3
 80089c2:	4359      	muls	r1, r3
 80089c4:	f00b febd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089c8:	2151      	movs	r1, #81	; 0x51
 80089ca:	4628      	mov	r0, r5
        return i * scale;
 80089cc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80089d0:	434a      	muls	r2, r1
 80089d2:	21d4      	movs	r1, #212	; 0xd4
 80089d4:	4359      	muls	r1, r3
 80089d6:	f00b feb4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089da:	2152      	movs	r1, #82	; 0x52
 80089dc:	4628      	mov	r0, r5
        return i * scale;
 80089de:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80089e2:	434a      	muls	r2, r1
 80089e4:	21d5      	movs	r1, #213	; 0xd5
 80089e6:	4359      	muls	r1, r3
 80089e8:	f00b feab 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089ec:	2151      	movs	r1, #81	; 0x51
 80089ee:	4628      	mov	r0, r5
        return i * scale;
 80089f0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80089f4:	434a      	muls	r2, r1
 80089f6:	21d7      	movs	r1, #215	; 0xd7
 80089f8:	4359      	muls	r1, r3
 80089fa:	f00b fea2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80089fe:	2150      	movs	r1, #80	; 0x50
 8008a00:	4628      	mov	r0, r5
        return i * scale;
 8008a02:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a06:	434a      	muls	r2, r1
 8008a08:	21d8      	movs	r1, #216	; 0xd8
 8008a0a:	4359      	muls	r1, r3
 8008a0c:	f00b fe99 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a10:	214f      	movs	r1, #79	; 0x4f
 8008a12:	4628      	mov	r0, r5
        return i * scale;
 8008a14:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a18:	434a      	muls	r2, r1
 8008a1a:	21d9      	movs	r1, #217	; 0xd9
 8008a1c:	4359      	muls	r1, r3
 8008a1e:	f00b fe90 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a22:	214d      	movs	r1, #77	; 0x4d
 8008a24:	4628      	mov	r0, r5
        return i * scale;
 8008a26:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a2a:	434a      	muls	r2, r1
 8008a2c:	21da      	movs	r1, #218	; 0xda
 8008a2e:	4359      	muls	r1, r3
 8008a30:	f00b fe87 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a34:	214b      	movs	r1, #75	; 0x4b
 8008a36:	4628      	mov	r0, r5
        return i * scale;
 8008a38:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a3c:	434a      	muls	r2, r1
 8008a3e:	21db      	movs	r1, #219	; 0xdb
 8008a40:	4359      	muls	r1, r3
 8008a42:	f00b fe7e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a46:	2148      	movs	r1, #72	; 0x48
 8008a48:	4628      	mov	r0, r5
        return i * scale;
 8008a4a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a4e:	434a      	muls	r2, r1
 8008a50:	21dc      	movs	r1, #220	; 0xdc
 8008a52:	4359      	muls	r1, r3
 8008a54:	f00b fe75 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a58:	2145      	movs	r1, #69	; 0x45
 8008a5a:	4628      	mov	r0, r5
        return i * scale;
 8008a5c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a60:	434a      	muls	r2, r1
 8008a62:	21dd      	movs	r1, #221	; 0xdd
 8008a64:	4359      	muls	r1, r3
 8008a66:	f00b fe6c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a6a:	21de      	movs	r1, #222	; 0xde
 8008a6c:	4628      	mov	r0, r5
        return i * scale;
 8008a6e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a72:	4359      	muls	r1, r3
 8008a74:	eb02 1282 	add.w	r2, r2, r2, lsl #6
 8008a78:	f00b fe63 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a7c:	21df      	movs	r1, #223	; 0xdf
 8008a7e:	4628      	mov	r0, r5
        return i * scale;
 8008a80:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a84:	4372      	muls	r2, r6
 8008a86:	263a      	movs	r6, #58	; 0x3a
 8008a88:	4359      	muls	r1, r3
 8008a8a:	f00b fe5a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008a8e:	21e0      	movs	r1, #224	; 0xe0
 8008a90:	4628      	mov	r0, r5
        return i * scale;
 8008a92:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008a96:	4372      	muls	r2, r6
 8008a98:	2636      	movs	r6, #54	; 0x36
 8008a9a:	4359      	muls	r1, r3
 8008a9c:	f00b fe51 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008aa0:	21e1      	movs	r1, #225	; 0xe1
 8008aa2:	4628      	mov	r0, r5
        return i * scale;
 8008aa4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008aa8:	4372      	muls	r2, r6
        return i * scale;
 8008aaa:	2631      	movs	r6, #49	; 0x31
        return addValue(int2scaledX(x), int2scaledY(y));
 8008aac:	4359      	muls	r1, r3
 8008aae:	f00b fe48 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008ab2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8008ab6:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8008aba:	21e2      	movs	r1, #226	; 0xe2
 8008abc:	4628      	mov	r0, r5
 8008abe:	4372      	muls	r2, r6
 8008ac0:	4359      	muls	r1, r3
 8008ac2:	f00b fe3e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ac6:	212d      	movs	r1, #45	; 0x2d
 8008ac8:	4628      	mov	r0, r5
        return i * scale;
 8008aca:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ace:	434a      	muls	r2, r1
 8008ad0:	21e3      	movs	r1, #227	; 0xe3
 8008ad2:	4359      	muls	r1, r3
 8008ad4:	f00b fe35 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ad8:	2129      	movs	r1, #41	; 0x29
 8008ada:	4628      	mov	r0, r5
        return i * scale;
 8008adc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ae0:	434a      	muls	r2, r1
 8008ae2:	21e4      	movs	r1, #228	; 0xe4
 8008ae4:	4359      	muls	r1, r3
 8008ae6:	f00b fe2c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008aea:	2124      	movs	r1, #36	; 0x24
 8008aec:	4628      	mov	r0, r5
        return i * scale;
 8008aee:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008af2:	434a      	muls	r2, r1
 8008af4:	21e5      	movs	r1, #229	; 0xe5
 8008af6:	4359      	muls	r1, r3
 8008af8:	f00b fe23 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008afc:	21e6      	movs	r1, #230	; 0xe6
 8008afe:	4628      	mov	r0, r5
        return i * scale;
 8008b00:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b04:	4359      	muls	r1, r3
 8008b06:	0152      	lsls	r2, r2, #5
 8008b08:	f00b fe1b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b0c:	211b      	movs	r1, #27
 8008b0e:	4628      	mov	r0, r5
        return i * scale;
 8008b10:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b14:	434a      	muls	r2, r1
 8008b16:	21e7      	movs	r1, #231	; 0xe7
 8008b18:	4359      	muls	r1, r3
 8008b1a:	f00b fe12 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b1e:	2117      	movs	r1, #23
 8008b20:	4628      	mov	r0, r5
        return i * scale;
 8008b22:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b26:	434a      	muls	r2, r1
 8008b28:	21e8      	movs	r1, #232	; 0xe8
 8008b2a:	4359      	muls	r1, r3
 8008b2c:	f00b fe09 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b30:	2113      	movs	r1, #19
 8008b32:	4628      	mov	r0, r5
        return i * scale;
 8008b34:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b38:	434a      	muls	r2, r1
 8008b3a:	21e9      	movs	r1, #233	; 0xe9
 8008b3c:	4359      	muls	r1, r3
 8008b3e:	f00b fe00 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b42:	21ea      	movs	r1, #234	; 0xea
 8008b44:	4628      	mov	r0, r5
        return i * scale;
 8008b46:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b4a:	4359      	muls	r1, r3
 8008b4c:	0112      	lsls	r2, r2, #4
 8008b4e:	f00b fdf8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b52:	210c      	movs	r1, #12
 8008b54:	4628      	mov	r0, r5
        return i * scale;
 8008b56:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b5a:	434a      	muls	r2, r1
 8008b5c:	21eb      	movs	r1, #235	; 0xeb
 8008b5e:	4359      	muls	r1, r3
 8008b60:	f00b fdef 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b64:	21ec      	movs	r1, #236	; 0xec
 8008b66:	4628      	mov	r0, r5
        return i * scale;
 8008b68:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b6c:	4359      	muls	r1, r3
 8008b6e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8008b72:	f00b fde6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b76:	2106      	movs	r1, #6
 8008b78:	4628      	mov	r0, r5
        return i * scale;
 8008b7a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b7e:	434a      	muls	r2, r1
 8008b80:	21ed      	movs	r1, #237	; 0xed
 8008b82:	4359      	muls	r1, r3
 8008b84:	f00b fddd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b88:	21ee      	movs	r1, #238	; 0xee
 8008b8a:	4628      	mov	r0, r5
        return i * scale;
 8008b8c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008b90:	4359      	muls	r1, r3
 8008b92:	0092      	lsls	r2, r2, #2
 8008b94:	f00b fdd5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008b98:	21ef      	movs	r1, #239	; 0xef
 8008b9a:	4628      	mov	r0, r5
        return i * scale;
 8008b9c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ba0:	4359      	muls	r1, r3
 8008ba2:	0052      	lsls	r2, r2, #1
 8008ba4:	f00b fdcd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8008ba8:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008bac:	21f0      	movs	r1, #240	; 0xf0
 8008bae:	465a      	mov	r2, fp
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	4359      	muls	r1, r3
 8008bb4:	f00b fdc5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008bb8:	21f1      	movs	r1, #241	; 0xf1
 8008bba:	4628      	mov	r0, r5
        return i * scale;
 8008bbc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008bc0:	4359      	muls	r1, r3
 8008bc2:	4252      	negs	r2, r2
 8008bc4:	f00b fdbd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008bc8:	f06f 0101 	mvn.w	r1, #1
 8008bcc:	4628      	mov	r0, r5
        return i * scale;
 8008bce:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008bd2:	434a      	muls	r2, r1
 8008bd4:	21f2      	movs	r1, #242	; 0xf2
 8008bd6:	4359      	muls	r1, r3
 8008bd8:	f00b fdb3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008bdc:	21f3      	movs	r1, #243	; 0xf3
 8008bde:	4628      	mov	r0, r5
        return i * scale;
 8008be0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008be4:	4359      	muls	r1, r3
 8008be6:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8008bea:	f00b fdaa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008bee:	f06f 0101 	mvn.w	r1, #1
 8008bf2:	4628      	mov	r0, r5
        return i * scale;
 8008bf4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008bf8:	434a      	muls	r2, r1
 8008bfa:	21f5      	movs	r1, #245	; 0xf5
 8008bfc:	4359      	muls	r1, r3
 8008bfe:	f00b fda0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c02:	21f7      	movs	r1, #247	; 0xf7
 8008c04:	4628      	mov	r0, r5
        return i * scale;
 8008c06:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c0a:	4359      	muls	r1, r3
 8008c0c:	4252      	negs	r2, r2
 8008c0e:	f00b fd98 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c12:	21f8      	movs	r1, #248	; 0xf8
 8008c14:	4628      	mov	r0, r5
 8008c16:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
 8008c1a:	4359      	muls	r1, r3
 8008c1c:	f00b fd91 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c20:	21f9      	movs	r1, #249	; 0xf9
 8008c22:	4628      	mov	r0, r5
        return i * scale;
 8008c24:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c28:	4359      	muls	r1, r3
 8008c2a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8008c2e:	f00b fd88 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c32:	21fa      	movs	r1, #250	; 0xfa
 8008c34:	4628      	mov	r0, r5
        return i * scale;
 8008c36:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c3a:	4359      	muls	r1, r3
 8008c3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c40:	f00b fd7f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c44:	21fb      	movs	r1, #251	; 0xfb
 8008c46:	4628      	mov	r0, r5
        return i * scale;
 8008c48:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c4c:	4359      	muls	r1, r3
 8008c4e:	00d2      	lsls	r2, r2, #3
 8008c50:	f00b fd77 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c54:	210a      	movs	r1, #10
 8008c56:	4628      	mov	r0, r5
        return i * scale;
 8008c58:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c5c:	434a      	muls	r2, r1
 8008c5e:	21fc      	movs	r1, #252	; 0xfc
 8008c60:	4359      	muls	r1, r3
 8008c62:	f00b fd6e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c66:	210d      	movs	r1, #13
 8008c68:	4628      	mov	r0, r5
        return i * scale;
 8008c6a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c6e:	434a      	muls	r2, r1
 8008c70:	21fd      	movs	r1, #253	; 0xfd
 8008c72:	4359      	muls	r1, r3
 8008c74:	f00b fd65 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c78:	21fe      	movs	r1, #254	; 0xfe
 8008c7a:	4628      	mov	r0, r5
        return i * scale;
 8008c7c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c80:	4359      	muls	r1, r3
 8008c82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8008c86:	f00b fd5c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c8a:	2314      	movs	r3, #20
 8008c8c:	4628      	mov	r0, r5
        return i * scale;
 8008c8e:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008c92:	435a      	muls	r2, r3
 8008c94:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8008c98:	f00b fd53 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008c9c:	2317      	movs	r3, #23
 8008c9e:	4628      	mov	r0, r5
        return i * scale;
 8008ca0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ca4:	435a      	muls	r2, r3
 8008ca6:	0209      	lsls	r1, r1, #8
 8008ca8:	f00b fd4b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008cac:	231b      	movs	r3, #27
 8008cae:	4628      	mov	r0, r5
        return i * scale;
 8008cb0:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008cb4:	435a      	muls	r2, r3
 8008cb6:	eb01 2101 	add.w	r1, r1, r1, lsl #8
 8008cba:	f00b fd42 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008cbe:	211e      	movs	r1, #30
 8008cc0:	4628      	mov	r0, r5
        return i * scale;
 8008cc2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008cc6:	434a      	muls	r2, r1
 8008cc8:	f44f 7181 	mov.w	r1, #258	; 0x102
 8008ccc:	4359      	muls	r1, r3
 8008cce:	f00b fd38 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008cd2:	f240 1103 	movw	r1, #259	; 0x103
 8008cd6:	4628      	mov	r0, r5
        return i * scale;
 8008cd8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008cdc:	4359      	muls	r1, r3
 8008cde:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8008ce2:	f00b fd2e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ce6:	2125      	movs	r1, #37	; 0x25
 8008ce8:	4628      	mov	r0, r5
        return i * scale;
 8008cea:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008cee:	434a      	muls	r2, r1
 8008cf0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8008cf4:	4359      	muls	r1, r3
 8008cf6:	f00b fd24 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008cfa:	2128      	movs	r1, #40	; 0x28
 8008cfc:	4628      	mov	r0, r5
        return i * scale;
 8008cfe:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d02:	434a      	muls	r2, r1
 8008d04:	f240 1105 	movw	r1, #261	; 0x105
 8008d08:	4359      	muls	r1, r3
 8008d0a:	f00b fd1a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d0e:	212b      	movs	r1, #43	; 0x2b
 8008d10:	4628      	mov	r0, r5
        return i * scale;
 8008d12:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d16:	434a      	muls	r2, r1
 8008d18:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008d1c:	4359      	muls	r1, r3
 8008d1e:	f00b fd10 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d22:	212d      	movs	r1, #45	; 0x2d
 8008d24:	4628      	mov	r0, r5
        return i * scale;
 8008d26:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d2a:	434a      	muls	r2, r1
 8008d2c:	f240 1107 	movw	r1, #263	; 0x107
 8008d30:	4359      	muls	r1, r3
 8008d32:	f00b fd06 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d36:	2130      	movs	r1, #48	; 0x30
 8008d38:	4628      	mov	r0, r5
        return i * scale;
 8008d3a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d3e:	434a      	muls	r2, r1
 8008d40:	f44f 7184 	mov.w	r1, #264	; 0x108
 8008d44:	4359      	muls	r1, r3
 8008d46:	f00b fcfc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d4a:	2132      	movs	r1, #50	; 0x32
 8008d4c:	4628      	mov	r0, r5
        return i * scale;
 8008d4e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d52:	434a      	muls	r2, r1
 8008d54:	f240 1109 	movw	r1, #265	; 0x109
 8008d58:	4359      	muls	r1, r3
 8008d5a:	f00b fcf2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d5e:	2033      	movs	r0, #51	; 0x33
 8008d60:	f44f 7185 	mov.w	r1, #266	; 0x10a
        return i * scale;
 8008d64:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d68:	4342      	muls	r2, r0
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4359      	muls	r1, r3
 8008d6e:	f00b fce8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d72:	2035      	movs	r0, #53	; 0x35
 8008d74:	f240 110b 	movw	r1, #267	; 0x10b
        return i * scale;
 8008d78:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d7c:	4342      	muls	r2, r0
 8008d7e:	4628      	mov	r0, r5
 8008d80:	4359      	muls	r1, r3
 8008d82:	f00b fcde 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d86:	2136      	movs	r1, #54	; 0x36
 8008d88:	4628      	mov	r0, r5
        return i * scale;
 8008d8a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008d8e:	434a      	muls	r2, r1
 8008d90:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8008d94:	4359      	muls	r1, r3
 8008d96:	f00b fcd4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008d9a:	2035      	movs	r0, #53	; 0x35
 8008d9c:	f240 110f 	movw	r1, #271	; 0x10f
        return i * scale;
 8008da0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008da4:	4342      	muls	r2, r0
 8008da6:	4628      	mov	r0, r5
 8008da8:	4359      	muls	r1, r3
 8008daa:	f00b fcca 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008dae:	f44f 7188 	mov.w	r1, #272	; 0x110
 8008db2:	4628      	mov	r0, r5
        return i * scale;
 8008db4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008db8:	437a      	muls	r2, r7
 8008dba:	2733      	movs	r7, #51	; 0x33
 8008dbc:	4359      	muls	r1, r3
 8008dbe:	f00b fcc0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008dc2:	f240 1111 	movw	r1, #273	; 0x111
 8008dc6:	4628      	mov	r0, r5
        return i * scale;
 8008dc8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008dcc:	437a      	muls	r2, r7
 8008dce:	272f      	movs	r7, #47	; 0x2f
 8008dd0:	4359      	muls	r1, r3
 8008dd2:	f00b fcb6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008dd6:	f44f 7189 	mov.w	r1, #274	; 0x112
 8008dda:	4628      	mov	r0, r5
        return i * scale;
 8008ddc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008de0:	4372      	muls	r2, r6
 8008de2:	262c      	movs	r6, #44	; 0x2c
 8008de4:	4359      	muls	r1, r3
 8008de6:	f00b fcac 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008dea:	f240 1113 	movw	r1, #275	; 0x113
 8008dee:	4628      	mov	r0, r5
        return i * scale;
 8008df0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008df4:	437a      	muls	r2, r7
 8008df6:	271b      	movs	r7, #27
 8008df8:	4359      	muls	r1, r3
 8008dfa:	f00b fca2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008dfe:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008e02:	4628      	mov	r0, r5
        return i * scale;
 8008e04:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e08:	4372      	muls	r2, r6
 8008e0a:	2628      	movs	r6, #40	; 0x28
 8008e0c:	4359      	muls	r1, r3
 8008e0e:	f00b fc98 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e12:	f240 1115 	movw	r1, #277	; 0x115
 8008e16:	4628      	mov	r0, r5
        return i * scale;
 8008e18:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e1c:	4372      	muls	r2, r6
 8008e1e:	2624      	movs	r6, #36	; 0x24
 8008e20:	4359      	muls	r1, r3
 8008e22:	f00b fc8e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e26:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008e2a:	4628      	mov	r0, r5
        return i * scale;
 8008e2c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e30:	4372      	muls	r2, r6
 8008e32:	260b      	movs	r6, #11
 8008e34:	4359      	muls	r1, r3
 8008e36:	f00b fc84 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e3a:	f240 1117 	movw	r1, #279	; 0x117
 8008e3e:	4628      	mov	r0, r5
        return i * scale;
 8008e40:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e44:	4359      	muls	r1, r3
 8008e46:	0152      	lsls	r2, r2, #5
 8008e48:	f00b fc7b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e4c:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008e50:	4628      	mov	r0, r5
        return i * scale;
 8008e52:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e56:	437a      	muls	r2, r7
 8008e58:	2716      	movs	r7, #22
 8008e5a:	4359      	muls	r1, r3
 8008e5c:	f00b fc71 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e60:	f240 1119 	movw	r1, #281	; 0x119
 8008e64:	4628      	mov	r0, r5
        return i * scale;
 8008e66:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e6a:	437a      	muls	r2, r7
 8008e6c:	f06f 0707 	mvn.w	r7, #7
 8008e70:	4359      	muls	r1, r3
 8008e72:	f00b fc66 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e76:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8008e7a:	4628      	mov	r0, r5
        return i * scale;
 8008e7c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e80:	4359      	muls	r1, r3
 8008e82:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8008e86:	f00b fc5c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008e8a:	f240 111b 	movw	r1, #283	; 0x11b
 8008e8e:	4628      	mov	r0, r5
        return i * scale;
 8008e90:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008e94:	4372      	muls	r2, r6
 8008e96:	f06f 0614 	mvn.w	r6, #20
 8008e9a:	4359      	muls	r1, r3
 8008e9c:	f00b fc51 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ea0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8008ea4:	4628      	mov	r0, r5
        return i * scale;
 8008ea6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008eaa:	4359      	muls	r1, r3
 8008eac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008eb0:	f00b fc47 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008eb4:	f06f 0101 	mvn.w	r1, #1
 8008eb8:	4628      	mov	r0, r5
        return i * scale;
 8008eba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ebe:	434a      	muls	r2, r1
 8008ec0:	f240 111d 	movw	r1, #285	; 0x11d
 8008ec4:	4359      	muls	r1, r3
 8008ec6:	f00b fc3c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008eca:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8008ece:	4628      	mov	r0, r5
        return i * scale;
 8008ed0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ed4:	437a      	muls	r2, r7
 8008ed6:	f06f 0721 	mvn.w	r7, #33	; 0x21
 8008eda:	4359      	muls	r1, r3
 8008edc:	f00b fc31 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ee0:	f240 111f 	movw	r1, #287	; 0x11f
 8008ee4:	4628      	mov	r0, r5
        return i * scale;
 8008ee6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008eea:	4359      	muls	r1, r3
 8008eec:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8008ef0:	f00b fc27 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008ef4:	f44f 7190 	mov.w	r1, #288	; 0x120
 8008ef8:	4628      	mov	r0, r5
        return i * scale;
 8008efa:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008efe:	4372      	muls	r2, r6
 8008f00:	f06f 061b 	mvn.w	r6, #27
 8008f04:	4359      	muls	r1, r3
 8008f06:	f00b fc1c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f0a:	f240 1121 	movw	r1, #289	; 0x121
 8008f0e:	4628      	mov	r0, r5
        return i * scale;
 8008f10:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f14:	4372      	muls	r2, r6
 8008f16:	f06f 064f 	mvn.w	r6, #79	; 0x4f
 8008f1a:	4359      	muls	r1, r3
 8008f1c:	f00b fc11 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f20:	f44f 7191 	mov.w	r1, #290	; 0x122
 8008f24:	4628      	mov	r0, r5
        return i * scale;
 8008f26:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f2a:	437a      	muls	r2, r7
 8008f2c:	f06f 072e 	mvn.w	r7, #46	; 0x2e
 8008f30:	4359      	muls	r1, r3
 8008f32:	f00b fc06 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f36:	f240 1123 	movw	r1, #291	; 0x123
 8008f3a:	4628      	mov	r0, r5
        return i * scale;
 8008f3c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f40:	fb08 f202 	mul.w	r2, r8, r2
        return i * scale;
 8008f44:	f06f 085c 	mvn.w	r8, #92	; 0x5c
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f48:	4359      	muls	r1, r3
 8008f4a:	f00b fbfa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f4e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8008f52:	4628      	mov	r0, r5
        return i * scale;
 8008f54:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f58:	437a      	muls	r2, r7
 8008f5a:	f06f 0734 	mvn.w	r7, #52	; 0x34
 8008f5e:	4359      	muls	r1, r3
 8008f60:	f00b fbef 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f64:	f240 1125 	movw	r1, #293	; 0x125
 8008f68:	4628      	mov	r0, r5
        return i * scale;
 8008f6a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f6e:	437a      	muls	r2, r7
 8008f70:	f06f 0740 	mvn.w	r7, #64	; 0x40
 8008f74:	4359      	muls	r1, r3
 8008f76:	f00b fbe4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f7a:	f06f 013a 	mvn.w	r1, #58	; 0x3a
 8008f7e:	4628      	mov	r0, r5
        return i * scale;
 8008f80:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f84:	434a      	muls	r2, r1
 8008f86:	f44f 7193 	mov.w	r1, #294	; 0x126
 8008f8a:	4359      	muls	r1, r3
 8008f8c:	f00b fbd9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008f90:	f240 1127 	movw	r1, #295	; 0x127
 8008f94:	4628      	mov	r0, r5
        return i * scale;
 8008f96:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008f9a:	437a      	muls	r2, r7
 8008f9c:	f06f 0745 	mvn.w	r7, #69	; 0x45
 8008fa0:	4359      	muls	r1, r3
 8008fa2:	f00b fbce 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008fa6:	f44f 7194 	mov.w	r1, #296	; 0x128
 8008faa:	4628      	mov	r0, r5
        return i * scale;
 8008fac:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fb0:	437a      	muls	r2, r7
        return i * scale;
 8008fb2:	f06f 075a 	mvn.w	r7, #90	; 0x5a
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fb6:	4359      	muls	r1, r3
 8008fb8:	f00b fbc3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008fbc:	f240 1129 	movw	r1, #297	; 0x129
 8008fc0:	4628      	mov	r0, r5
        return i * scale;
 8008fc2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fc6:	fb09 f202 	mul.w	r2, r9, r2
        return i * scale;
 8008fca:	f06f 095e 	mvn.w	r9, #94	; 0x5e
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fce:	4359      	muls	r1, r3
 8008fd0:	f00b fbb7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008fd4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8008fd8:	4628      	mov	r0, r5
        return i * scale;
 8008fda:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fde:	4372      	muls	r2, r6
        return i * scale;
 8008fe0:	f06f 0657 	mvn.w	r6, #87	; 0x57
        return addValue(int2scaledX(x), int2scaledY(y));
 8008fe4:	4359      	muls	r1, r3
 8008fe6:	f00b fbac 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8008fea:	f06f 0153 	mvn.w	r1, #83	; 0x53
 8008fee:	4628      	mov	r0, r5
        return i * scale;
 8008ff0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8008ff4:	434a      	muls	r2, r1
 8008ff6:	f240 112b 	movw	r1, #299	; 0x12b
 8008ffa:	4359      	muls	r1, r3
 8008ffc:	f00b fba1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8009000:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8009004:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8009008:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800900c:	4628      	mov	r0, r5
 800900e:	4372      	muls	r2, r6
 8009010:	4359      	muls	r1, r3
 8009012:	f00b fb96 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8009016:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800901a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 800901e:	f240 112d 	movw	r1, #301	; 0x12d
 8009022:	4628      	mov	r0, r5
 8009024:	437a      	muls	r2, r7
 8009026:	4359      	muls	r1, r3
 8009028:	f00b fb8b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800902c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8009030:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 8009034:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8009038:	4628      	mov	r0, r5
 800903a:	fb08 f202 	mul.w	r2, r8, r2
 800903e:	4359      	muls	r1, r3
 8009040:	f00b fb7f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8009044:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8009048:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 800904c:	f240 112f 	movw	r1, #303	; 0x12f
 8009050:	4628      	mov	r0, r5
 8009052:	4359      	muls	r1, r3
 8009054:	fb09 f202 	mul.w	r2, r9, r2
 8009058:	f00b fb73 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 800905c:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8009060:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009064:	f44f 7198 	mov.w	r1, #304	; 0x130
        return i * scale;
 8009068:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 800906c:	4341      	muls	r1, r0
 800906e:	4628      	mov	r0, r5
 8009070:	435a      	muls	r2, r3
 8009072:	f00b fb66 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009076:	f06f 0161 	mvn.w	r1, #97	; 0x61
        return i * scale;
 800907a:	e9d4 0222 	ldrd	r0, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800907e:	434a      	muls	r2, r1
 8009080:	f240 1131 	movw	r1, #305	; 0x131
 8009084:	4341      	muls	r1, r0
 8009086:	4628      	mov	r0, r5
 8009088:	f00b fb5b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800908c:	f06f 0360 	mvn.w	r3, #96	; 0x60
 8009090:	f44f 719a 	mov.w	r1, #308	; 0x134
        return i * scale;
 8009094:	e9d4 0222 	ldrd	r0, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009098:	4341      	muls	r1, r0
 800909a:	4628      	mov	r0, r5
 800909c:	435a      	muls	r2, r3
 800909e:	f00b fb50 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80090a2:	f240 1135 	movw	r1, #309	; 0x135
 80090a6:	4628      	mov	r0, r5
        return i * scale;
 80090a8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80090ac:	4359      	muls	r1, r3
 80090ae:	fb09 f202 	mul.w	r2, r9, r2
 80090b2:	f00b fb46 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80090b6:	f44f 719b 	mov.w	r1, #310	; 0x136
 80090ba:	4628      	mov	r0, r5
        return i * scale;
 80090bc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80090c0:	fb08 f202 	mul.w	r2, r8, r2
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 80090c4:	f504 58a0 	add.w	r8, r4, #5120	; 0x1400
 80090c8:	4359      	muls	r1, r3
 80090ca:	f00b fb3a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80090ce:	f240 1137 	movw	r1, #311	; 0x137
 80090d2:	4628      	mov	r0, r5
 80090d4:	f108 0804 	add.w	r8, r8, #4
        return i * scale;
 80090d8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80090dc:	437a      	muls	r2, r7
 80090de:	f06f 0750 	mvn.w	r7, #80	; 0x50
 80090e2:	4359      	muls	r1, r3
 80090e4:	f00b fb2d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80090e8:	f44f 719c 	mov.w	r1, #312	; 0x138
 80090ec:	4628      	mov	r0, r5
        return i * scale;
 80090ee:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80090f2:	4372      	muls	r2, r6
 80090f4:	f06f 064c 	mvn.w	r6, #76	; 0x4c
 80090f8:	4359      	muls	r1, r3
 80090fa:	f00b fb22 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80090fe:	f06f 0154 	mvn.w	r1, #84	; 0x54
 8009102:	4628      	mov	r0, r5
        return i * scale;
 8009104:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009108:	434a      	muls	r2, r1
 800910a:	f240 1139 	movw	r1, #313	; 0x139
 800910e:	4359      	muls	r1, r3
 8009110:	f00b fb17 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009114:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8009118:	4628      	mov	r0, r5
        return i * scale;
 800911a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800911e:	437a      	muls	r2, r7
 8009120:	f06f 0747 	mvn.w	r7, #71	; 0x47
 8009124:	4359      	muls	r1, r3
 8009126:	f00b fb0c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800912a:	f240 113b 	movw	r1, #315	; 0x13b
 800912e:	4628      	mov	r0, r5
        return i * scale;
 8009130:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009134:	4372      	muls	r2, r6
 8009136:	f06f 0638 	mvn.w	r6, #56	; 0x38
 800913a:	4359      	muls	r1, r3
 800913c:	f00b fb01 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009140:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8009144:	4628      	mov	r0, r5
        return i * scale;
 8009146:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800914a:	437a      	muls	r2, r7
 800914c:	f06f 073d 	mvn.w	r7, #61	; 0x3d
 8009150:	4359      	muls	r1, r3
 8009152:	f00b faf6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009156:	f06f 0142 	mvn.w	r1, #66	; 0x42
 800915a:	4628      	mov	r0, r5
        return i * scale;
 800915c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009160:	434a      	muls	r2, r1
 8009162:	f240 113d 	movw	r1, #317	; 0x13d
 8009166:	4359      	muls	r1, r3
 8009168:	f00b faeb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800916c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8009170:	4628      	mov	r0, r5
        return i * scale;
 8009172:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009176:	437a      	muls	r2, r7
 8009178:	f06f 0732 	mvn.w	r7, #50	; 0x32
 800917c:	4359      	muls	r1, r3
 800917e:	f00b fae0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009182:	f240 113f 	movw	r1, #319	; 0x13f
 8009186:	4628      	mov	r0, r5
        return i * scale;
 8009188:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800918c:	4372      	muls	r2, r6
 800918e:	f06f 0627 	mvn.w	r6, #39	; 0x27
 8009192:	4359      	muls	r1, r3
 8009194:	f00b fad5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009198:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800919c:	4628      	mov	r0, r5
        return i * scale;
 800919e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80091a2:	437a      	muls	r2, r7
 80091a4:	f06f 072d 	mvn.w	r7, #45	; 0x2d
 80091a8:	4359      	muls	r1, r3
 80091aa:	f00b faca 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80091ae:	f240 1141 	movw	r1, #321	; 0x141
 80091b2:	4628      	mov	r0, r5
        return i * scale;
 80091b4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80091b8:	437a      	muls	r2, r7
 80091ba:	f06f 0716 	mvn.w	r7, #22
 80091be:	4359      	muls	r1, r3
 80091c0:	f00b fabf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80091c4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80091c8:	4628      	mov	r0, r5
        return i * scale;
 80091ca:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80091ce:	4372      	muls	r2, r6
 80091d0:	f06f 0621 	mvn.w	r6, #33	; 0x21
 80091d4:	4359      	muls	r1, r3
 80091d6:	f00b fab4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80091da:	f240 1143 	movw	r1, #323	; 0x143
 80091de:	4628      	mov	r0, r5
        return i * scale;
 80091e0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80091e4:	4372      	muls	r2, r6
 80091e6:	f06f 0611 	mvn.w	r6, #17
 80091ea:	4359      	muls	r1, r3
 80091ec:	f00b faa9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80091f0:	f06f 011c 	mvn.w	r1, #28
 80091f4:	4628      	mov	r0, r5
        return i * scale;
 80091f6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80091fa:	434a      	muls	r2, r1
 80091fc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009200:	4359      	muls	r1, r3
 8009202:	f00b fa9e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009206:	f240 1145 	movw	r1, #325	; 0x145
 800920a:	4628      	mov	r0, r5
        return i * scale;
 800920c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009210:	437a      	muls	r2, r7
 8009212:	4359      	muls	r1, r3
 8009214:	f00b fa95 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009218:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800921c:	4628      	mov	r0, r5
        return i * scale;
 800921e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009222:	4372      	muls	r2, r6
 8009224:	f06f 060c 	mvn.w	r6, #12
 8009228:	4359      	muls	r1, r3
 800922a:	f00b fa8a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800922e:	f240 1147 	movw	r1, #327	; 0x147
 8009232:	4628      	mov	r0, r5
        return i * scale;
 8009234:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009238:	4372      	muls	r2, r6
 800923a:	f06f 0607 	mvn.w	r6, #7
 800923e:	4359      	muls	r1, r3
 8009240:	f00b fa7f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009244:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8009248:	4628      	mov	r0, r5
        return i * scale;
 800924a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800924e:	4372      	muls	r2, r6
 8009250:	260d      	movs	r6, #13
 8009252:	4359      	muls	r1, r3
 8009254:	f00b fa75 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009258:	f240 1149 	movw	r1, #329	; 0x149
 800925c:	4628      	mov	r0, r5
        return i * scale;
 800925e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009262:	4359      	muls	r1, r3
 8009264:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8009268:	f00b fa6b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800926c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8009270:	4628      	mov	r0, r5
        return i * scale;
 8009272:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009276:	4359      	muls	r1, r3
 8009278:	0052      	lsls	r2, r2, #1
 800927a:	f00b fa62 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800927e:	2006      	movs	r0, #6
 8009280:	f240 114b 	movw	r1, #331	; 0x14b
        return i * scale;
 8009284:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009288:	4342      	muls	r2, r0
 800928a:	4628      	mov	r0, r5
 800928c:	4359      	muls	r1, r3
 800928e:	f00b fa58 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009292:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8009296:	4628      	mov	r0, r5
        return i * scale;
 8009298:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800929c:	4359      	muls	r1, r3
 800929e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80092a2:	f00b fa4e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80092a6:	f240 114d 	movw	r1, #333	; 0x14d
 80092aa:	4628      	mov	r0, r5
        return i * scale;
 80092ac:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80092b0:	4372      	muls	r2, r6
 80092b2:	2612      	movs	r6, #18
 80092b4:	4359      	muls	r1, r3
 80092b6:	f00b fa44 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80092ba:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80092be:	4628      	mov	r0, r5
        return i * scale;
 80092c0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80092c4:	4359      	muls	r1, r3
 80092c6:	0112      	lsls	r2, r2, #4
 80092c8:	f00b fa3b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80092cc:	f240 114f 	movw	r1, #335	; 0x14f
 80092d0:	4628      	mov	r0, r5
        return i * scale;
 80092d2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80092d6:	4372      	muls	r2, r6
 80092d8:	2617      	movs	r6, #23
 80092da:	4359      	muls	r1, r3
 80092dc:	f00b fa31 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80092e0:	2114      	movs	r1, #20
 80092e2:	4628      	mov	r0, r5
        return i * scale;
 80092e4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80092e8:	434a      	muls	r2, r1
 80092ea:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80092ee:	4359      	muls	r1, r3
 80092f0:	f00b fa27 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80092f4:	2016      	movs	r0, #22
 80092f6:	f240 1151 	movw	r1, #337	; 0x151
        return i * scale;
 80092fa:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80092fe:	4342      	muls	r2, r0
 8009300:	4628      	mov	r0, r5
 8009302:	4359      	muls	r1, r3
 8009304:	f00b fa1d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009308:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800930c:	4628      	mov	r0, r5
        return i * scale;
 800930e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009312:	4372      	muls	r2, r6
 8009314:	4359      	muls	r1, r3
 8009316:	f00b fa14 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800931a:	2018      	movs	r0, #24
 800931c:	f44f 71aa 	mov.w	r1, #340	; 0x154
        return i * scale;
 8009320:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009324:	4342      	muls	r2, r0
 8009326:	4628      	mov	r0, r5
 8009328:	4359      	muls	r1, r3
 800932a:	f00b fa0a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800932e:	f240 1155 	movw	r1, #341	; 0x155
 8009332:	4628      	mov	r0, r5
        return i * scale;
 8009334:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009338:	4372      	muls	r2, r6
 800933a:	2616      	movs	r6, #22
 800933c:	4359      	muls	r1, r3
 800933e:	f00b fa00 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009342:	f240 1157 	movw	r1, #343	; 0x157
 8009346:	4628      	mov	r0, r5
        return i * scale;
 8009348:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800934c:	4372      	muls	r2, r6
 800934e:	4359      	muls	r1, r3
 8009350:	f00b f9f7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009354:	2114      	movs	r1, #20
 8009356:	4628      	mov	r0, r5
        return i * scale;
 8009358:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800935c:	434a      	muls	r2, r1
 800935e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8009362:	4359      	muls	r1, r3
 8009364:	f00b f9ed 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009368:	2113      	movs	r1, #19
 800936a:	4628      	mov	r0, r5
        return i * scale;
 800936c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009370:	434a      	muls	r2, r1
 8009372:	f240 1159 	movw	r1, #345	; 0x159
 8009376:	4359      	muls	r1, r3
 8009378:	f00b f9e3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800937c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8009380:	4628      	mov	r0, r5
        return i * scale;
 8009382:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009386:	4359      	muls	r1, r3
 8009388:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800938c:	f00b f9d9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009390:	210e      	movs	r1, #14
 8009392:	4628      	mov	r0, r5
        return i * scale;
 8009394:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009398:	434a      	muls	r2, r1
 800939a:	f240 115b 	movw	r1, #347	; 0x15b
 800939e:	4359      	muls	r1, r3
 80093a0:	f00b f9cf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80093a4:	200c      	movs	r0, #12
 80093a6:	f44f 71ae 	mov.w	r1, #348	; 0x15c
        return i * scale;
 80093aa:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80093ae:	4342      	muls	r2, r0
 80093b0:	4628      	mov	r0, r5
 80093b2:	4359      	muls	r1, r3
 80093b4:	f00b f9c5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80093b8:	f240 115d 	movw	r1, #349	; 0x15d
 80093bc:	4628      	mov	r0, r5
        return i * scale;
 80093be:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80093c2:	4359      	muls	r1, r3
 80093c4:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80093c8:	f00b f9bb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80093cc:	2006      	movs	r0, #6
 80093ce:	f44f 71af 	mov.w	r1, #350	; 0x15e
        return i * scale;
 80093d2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80093d6:	4342      	muls	r2, r0
 80093d8:	4628      	mov	r0, r5
 80093da:	4359      	muls	r1, r3
 80093dc:	f00b f9b1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80093e0:	f240 115f 	movw	r1, #351	; 0x15f
 80093e4:	4628      	mov	r0, r5
        return i * scale;
 80093e6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80093ea:	4359      	muls	r1, r3
 80093ec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80093f0:	f00b f9a7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80093f4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80093f8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80093fc:	465a      	mov	r2, fp
 80093fe:	4628      	mov	r0, r5
 8009400:	4359      	muls	r1, r3
 8009402:	f00b f99e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009406:	f240 1161 	movw	r1, #353	; 0x161
 800940a:	4628      	mov	r0, r5
        return i * scale;
 800940c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009410:	4359      	muls	r1, r3
 8009412:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8009416:	f00b f994 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800941a:	f06f 0005 	mvn.w	r0, #5
 800941e:	f44f 71b1 	mov.w	r1, #354	; 0x162
        return i * scale;
 8009422:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009426:	4342      	muls	r2, r0
 8009428:	4628      	mov	r0, r5
 800942a:	4359      	muls	r1, r3
 800942c:	f00b f989 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009430:	f06f 0108 	mvn.w	r1, #8
 8009434:	4628      	mov	r0, r5
        return i * scale;
 8009436:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800943a:	434a      	muls	r2, r1
 800943c:	f240 1163 	movw	r1, #355	; 0x163
 8009440:	4359      	muls	r1, r3
 8009442:	f00b f97e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009446:	f06f 010a 	mvn.w	r1, #10
 800944a:	4628      	mov	r0, r5
        return i * scale;
 800944c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009450:	434a      	muls	r2, r1
 8009452:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8009456:	4359      	muls	r1, r3
 8009458:	f00b f973 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800945c:	f06f 010d 	mvn.w	r1, #13
 8009460:	4628      	mov	r0, r5
        return i * scale;
 8009462:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009466:	434a      	muls	r2, r1
 8009468:	f240 1165 	movw	r1, #357	; 0x165
 800946c:	4359      	muls	r1, r3
 800946e:	f00b f968 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009472:	f06f 010f 	mvn.w	r1, #15
 8009476:	4628      	mov	r0, r5
        return i * scale;
 8009478:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800947c:	434a      	muls	r2, r1
 800947e:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8009482:	4359      	muls	r1, r3
 8009484:	f00b f95d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009488:	f06f 0011 	mvn.w	r0, #17
 800948c:	f240 1167 	movw	r1, #359	; 0x167
        return i * scale;
 8009490:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009494:	4342      	muls	r2, r0
 8009496:	4628      	mov	r0, r5
 8009498:	4359      	muls	r1, r3
 800949a:	f00b f952 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800949e:	f06f 0013 	mvn.w	r0, #19
 80094a2:	f44f 71b4 	mov.w	r1, #360	; 0x168
        return i * scale;
 80094a6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80094aa:	4342      	muls	r2, r0
 80094ac:	4628      	mov	r0, r5
 80094ae:	4359      	muls	r1, r3
 80094b0:	f00b f947 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80094b4:	f06f 0114 	mvn.w	r1, #20
 80094b8:	4628      	mov	r0, r5
        return i * scale;
 80094ba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80094be:	434a      	muls	r2, r1
 80094c0:	f240 1169 	movw	r1, #361	; 0x169
 80094c4:	4359      	muls	r1, r3
 80094c6:	f00b f93c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80094ca:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80094ce:	4628      	mov	r0, r5
        return i * scale;
 80094d0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80094d4:	437a      	muls	r2, r7
 80094d6:	4359      	muls	r1, r3
 80094d8:	f00b f933 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80094dc:	f06f 0117 	mvn.w	r1, #23
 80094e0:	4628      	mov	r0, r5
        return i * scale;
 80094e2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80094e6:	434a      	muls	r2, r1
 80094e8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80094ec:	4359      	muls	r1, r3
 80094ee:	f00b f928 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80094f2:	f240 116d 	movw	r1, #365	; 0x16d
 80094f6:	4628      	mov	r0, r5
        return i * scale;
 80094f8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80094fc:	437a      	muls	r2, r7
 80094fe:	4359      	muls	r1, r3
 8009500:	f00b f91f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009504:	f06f 0015 	mvn.w	r0, #21
 8009508:	f240 116f 	movw	r1, #367	; 0x16f
        return i * scale;
 800950c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009510:	4342      	muls	r2, r0
 8009512:	4628      	mov	r0, r5
 8009514:	4359      	muls	r1, r3
 8009516:	f00b f914 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800951a:	f06f 0013 	mvn.w	r0, #19
 800951e:	f44f 71b8 	mov.w	r1, #368	; 0x170
        return i * scale;
 8009522:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009526:	4342      	muls	r2, r0
 8009528:	4628      	mov	r0, r5
 800952a:	4359      	muls	r1, r3
 800952c:	f00b f909 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009530:	f06f 0011 	mvn.w	r0, #17
 8009534:	f240 1171 	movw	r1, #369	; 0x171
        return i * scale;
 8009538:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800953c:	4342      	muls	r2, r0
 800953e:	4628      	mov	r0, r5
 8009540:	4359      	muls	r1, r3
 8009542:	f00b f8fe 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009546:	f06f 000f 	mvn.w	r0, #15
 800954a:	f44f 71b9 	mov.w	r1, #370	; 0x172
        return i * scale;
 800954e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009552:	4342      	muls	r2, r0
 8009554:	4628      	mov	r0, r5
 8009556:	4359      	muls	r1, r3
 8009558:	f00b f8f3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800955c:	f06f 000c 	mvn.w	r0, #12
 8009560:	f240 1173 	movw	r1, #371	; 0x173
        return i * scale;
 8009564:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009568:	4342      	muls	r2, r0
 800956a:	4628      	mov	r0, r5
 800956c:	4359      	muls	r1, r3
 800956e:	f00b f8e8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009572:	f06f 0009 	mvn.w	r0, #9
 8009576:	f44f 71ba 	mov.w	r1, #372	; 0x174
        return i * scale;
 800957a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800957e:	4342      	muls	r2, r0
 8009580:	4628      	mov	r0, r5
 8009582:	4359      	muls	r1, r3
 8009584:	f00b f8dd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009588:	f06f 0005 	mvn.w	r0, #5
 800958c:	f240 1175 	movw	r1, #373	; 0x175
        return i * scale;
 8009590:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009594:	4342      	muls	r2, r0
 8009596:	4628      	mov	r0, r5
 8009598:	4359      	muls	r1, r3
 800959a:	f00b f8d2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800959e:	f06f 0101 	mvn.w	r1, #1
 80095a2:	4628      	mov	r0, r5
        return i * scale;
 80095a4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80095a8:	434a      	muls	r2, r1
 80095aa:	f44f 71bb 	mov.w	r1, #374	; 0x176
 80095ae:	4359      	muls	r1, r3
 80095b0:	f00b f8c7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80095b4:	f240 1177 	movw	r1, #375	; 0x177
 80095b8:	4628      	mov	r0, r5
        return i * scale;
 80095ba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80095be:	4359      	muls	r1, r3
 80095c0:	0052      	lsls	r2, r2, #1
 80095c2:	f00b f8be 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80095c6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80095ca:	4628      	mov	r0, r5
        return i * scale;
 80095cc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80095d0:	4359      	muls	r1, r3
 80095d2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80095d6:	f00b f8b4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80095da:	200c      	movs	r0, #12
 80095dc:	f240 1179 	movw	r1, #377	; 0x179
        return i * scale;
 80095e0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80095e4:	4342      	muls	r2, r0
 80095e6:	4628      	mov	r0, r5
 80095e8:	4359      	muls	r1, r3
 80095ea:	f00b f8aa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80095ee:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80095f2:	4628      	mov	r0, r5
        return i * scale;
 80095f4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80095f8:	4359      	muls	r1, r3
 80095fa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80095fe:	f00b f8a0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009602:	f240 117b 	movw	r1, #379	; 0x17b
 8009606:	4628      	mov	r0, r5
        return i * scale;
 8009608:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800960c:	4372      	muls	r2, r6
 800960e:	4359      	muls	r1, r3
 8009610:	f00b f897 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009614:	201c      	movs	r0, #28
 8009616:	f44f 71be 	mov.w	r1, #380	; 0x17c
        return i * scale;
 800961a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800961e:	4342      	muls	r2, r0
 8009620:	4628      	mov	r0, r5
 8009622:	4359      	muls	r1, r3
 8009624:	f00b f88d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009628:	f240 117d 	movw	r1, #381	; 0x17d
 800962c:	4628      	mov	r0, r5
        return i * scale;
 800962e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009632:	4359      	muls	r1, r3
 8009634:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8009638:	f00b f883 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800963c:	2027      	movs	r0, #39	; 0x27
 800963e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
        return i * scale;
 8009642:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009646:	4342      	muls	r2, r0
 8009648:	4628      	mov	r0, r5
 800964a:	4359      	muls	r1, r3
 800964c:	f00b f879 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009650:	212d      	movs	r1, #45	; 0x2d
 8009652:	4628      	mov	r0, r5
        return i * scale;
 8009654:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009658:	434a      	muls	r2, r1
 800965a:	f240 117f 	movw	r1, #383	; 0x17f
 800965e:	4359      	muls	r1, r3
 8009660:	f00b f86f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009664:	2132      	movs	r1, #50	; 0x32
 8009666:	4628      	mov	r0, r5
        return i * scale;
 8009668:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800966c:	434a      	muls	r2, r1
 800966e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009672:	4359      	muls	r1, r3
 8009674:	f00b f865 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009678:	2138      	movs	r1, #56	; 0x38
 800967a:	4628      	mov	r0, r5
        return i * scale;
 800967c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009680:	434a      	muls	r2, r1
 8009682:	f240 1181 	movw	r1, #385	; 0x181
 8009686:	4359      	muls	r1, r3
 8009688:	f00b f85b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800968c:	213d      	movs	r1, #61	; 0x3d
 800968e:	4628      	mov	r0, r5
        return i * scale;
 8009690:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009694:	434a      	muls	r2, r1
 8009696:	f44f 71c1 	mov.w	r1, #386	; 0x182
 800969a:	4359      	muls	r1, r3
 800969c:	f00b f851 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80096a0:	2042      	movs	r0, #66	; 0x42
 80096a2:	f240 1183 	movw	r1, #387	; 0x183
        return i * scale;
 80096a6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80096aa:	4342      	muls	r2, r0
 80096ac:	4628      	mov	r0, r5
 80096ae:	4359      	muls	r1, r3
 80096b0:	f00b f847 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80096b4:	2047      	movs	r0, #71	; 0x47
 80096b6:	f44f 71c2 	mov.w	r1, #388	; 0x184
        return i * scale;
 80096ba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80096be:	4342      	muls	r2, r0
 80096c0:	4628      	mov	r0, r5
 80096c2:	4359      	muls	r1, r3
 80096c4:	f00b f83d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80096c8:	204c      	movs	r0, #76	; 0x4c
 80096ca:	f240 1185 	movw	r1, #389	; 0x185
        return i * scale;
 80096ce:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80096d2:	4342      	muls	r2, r0
 80096d4:	4628      	mov	r0, r5
 80096d6:	4359      	muls	r1, r3
 80096d8:	f00b f833 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80096dc:	2150      	movs	r1, #80	; 0x50
 80096de:	4628      	mov	r0, r5
        return i * scale;
 80096e0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80096e4:	434a      	muls	r2, r1
 80096e6:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80096ea:	4359      	muls	r1, r3
 80096ec:	f00b f829 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80096f0:	2154      	movs	r1, #84	; 0x54
 80096f2:	4628      	mov	r0, r5
        return i * scale;
 80096f4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80096f8:	434a      	muls	r2, r1
 80096fa:	f240 1187 	movw	r1, #391	; 0x187
 80096fe:	4359      	muls	r1, r3
 8009700:	f00b f81f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009704:	2158      	movs	r1, #88	; 0x58
 8009706:	4628      	mov	r0, r5
        return i * scale;
 8009708:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800970c:	434a      	muls	r2, r1
 800970e:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8009712:	4359      	muls	r1, r3
 8009714:	f00b f815 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009718:	205b      	movs	r0, #91	; 0x5b
 800971a:	f240 1189 	movw	r1, #393	; 0x189
        return i * scale;
 800971e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009722:	4342      	muls	r2, r0
 8009724:	4628      	mov	r0, r5
 8009726:	4359      	muls	r1, r3
 8009728:	f00b f80b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800972c:	205d      	movs	r0, #93	; 0x5d
 800972e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
        return i * scale;
 8009732:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009736:	4342      	muls	r2, r0
 8009738:	4628      	mov	r0, r5
 800973a:	4359      	muls	r1, r3
 800973c:	f00b f801 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009740:	205f      	movs	r0, #95	; 0x5f
 8009742:	f240 118b 	movw	r1, #395	; 0x18b
        return i * scale;
 8009746:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800974a:	4342      	muls	r2, r0
 800974c:	4628      	mov	r0, r5
 800974e:	4359      	muls	r1, r3
 8009750:	f00a fff7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009754:	2161      	movs	r1, #97	; 0x61
 8009756:	4628      	mov	r0, r5
        return i * scale;
 8009758:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800975c:	434a      	muls	r2, r1
 800975e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8009762:	4359      	muls	r1, r3
 8009764:	f00a ffed 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009768:	2062      	movs	r0, #98	; 0x62
 800976a:	f240 118d 	movw	r1, #397	; 0x18d
        return i * scale;
 800976e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009772:	4342      	muls	r2, r0
 8009774:	4628      	mov	r0, r5
 8009776:	4359      	muls	r1, r3
 8009778:	f00a ffe3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800977c:	2161      	movs	r1, #97	; 0x61
 800977e:	4628      	mov	r0, r5
        return i * scale;
 8009780:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009784:	434a      	muls	r2, r1
 8009786:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800978a:	4359      	muls	r1, r3
 800978c:	f00a ffd9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009790:	2160      	movs	r1, #96	; 0x60
 8009792:	4628      	mov	r0, r5
        return i * scale;
 8009794:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009798:	434a      	muls	r2, r1
 800979a:	f240 1191 	movw	r1, #401	; 0x191
 800979e:	4359      	muls	r1, r3
 80097a0:	f00a ffcf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80097a4:	215e      	movs	r1, #94	; 0x5e
 80097a6:	4628      	mov	r0, r5
        return i * scale;
 80097a8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80097ac:	434a      	muls	r2, r1
 80097ae:	f44f 71c9 	mov.w	r1, #402	; 0x192
 80097b2:	4359      	muls	r1, r3
 80097b4:	f00a ffc5 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80097b8:	205b      	movs	r0, #91	; 0x5b
 80097ba:	f240 1193 	movw	r1, #403	; 0x193
        return i * scale;
 80097be:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80097c2:	4342      	muls	r2, r0
 80097c4:	4628      	mov	r0, r5
 80097c6:	4359      	muls	r1, r3
 80097c8:	f00a ffbb 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80097cc:	2158      	movs	r1, #88	; 0x58
 80097ce:	4628      	mov	r0, r5
        return i * scale;
 80097d0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80097d4:	434a      	muls	r2, r1
 80097d6:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80097da:	4359      	muls	r1, r3
 80097dc:	f00a ffb1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80097e0:	2055      	movs	r0, #85	; 0x55
 80097e2:	f240 1195 	movw	r1, #405	; 0x195
        return i * scale;
 80097e6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80097ea:	4342      	muls	r2, r0
 80097ec:	4628      	mov	r0, r5
 80097ee:	4359      	muls	r1, r3
 80097f0:	f00a ffa7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80097f4:	2151      	movs	r1, #81	; 0x51
 80097f6:	4628      	mov	r0, r5
        return i * scale;
 80097f8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80097fc:	434a      	muls	r2, r1
 80097fe:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8009802:	4359      	muls	r1, r3
 8009804:	f00a ff9d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009808:	214c      	movs	r1, #76	; 0x4c
 800980a:	4628      	mov	r0, r5
        return i * scale;
 800980c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009810:	434a      	muls	r2, r1
 8009812:	f240 1197 	movw	r1, #407	; 0x197
 8009816:	4359      	muls	r1, r3
 8009818:	f00a ff93 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800981c:	2047      	movs	r0, #71	; 0x47
 800981e:	f44f 71cc 	mov.w	r1, #408	; 0x198
        return i * scale;
 8009822:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009826:	4342      	muls	r2, r0
 8009828:	4628      	mov	r0, r5
 800982a:	4359      	muls	r1, r3
 800982c:	f00a ff89 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009830:	2142      	movs	r1, #66	; 0x42
 8009832:	4628      	mov	r0, r5
        return i * scale;
 8009834:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009838:	434a      	muls	r2, r1
 800983a:	f240 1199 	movw	r1, #409	; 0x199
 800983e:	4359      	muls	r1, r3
 8009840:	f00a ff7f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009844:	203c      	movs	r0, #60	; 0x3c
 8009846:	f44f 71cd 	mov.w	r1, #410	; 0x19a
        return i * scale;
 800984a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800984e:	4342      	muls	r2, r0
 8009850:	4628      	mov	r0, r5
 8009852:	4359      	muls	r1, r3
 8009854:	f00a ff75 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009858:	2136      	movs	r1, #54	; 0x36
 800985a:	4628      	mov	r0, r5
        return i * scale;
 800985c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009860:	434a      	muls	r2, r1
 8009862:	f240 119b 	movw	r1, #411	; 0x19b
 8009866:	4359      	muls	r1, r3
 8009868:	f00a ff6b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800986c:	2130      	movs	r1, #48	; 0x30
 800986e:	4628      	mov	r0, r5
        return i * scale;
 8009870:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009874:	434a      	muls	r2, r1
 8009876:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800987a:	4359      	muls	r1, r3
 800987c:	f00a ff61 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009880:	202a      	movs	r0, #42	; 0x2a
 8009882:	f240 119d 	movw	r1, #413	; 0x19d
        return i * scale;
 8009886:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800988a:	4342      	muls	r2, r0
 800988c:	4628      	mov	r0, r5
 800988e:	4359      	muls	r1, r3
 8009890:	f00a ff57 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009894:	2123      	movs	r1, #35	; 0x23
 8009896:	4628      	mov	r0, r5
        return i * scale;
 8009898:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800989c:	434a      	muls	r2, r1
 800989e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80098a2:	4359      	muls	r1, r3
 80098a4:	f00a ff4d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80098a8:	211d      	movs	r1, #29
 80098aa:	4628      	mov	r0, r5
        return i * scale;
 80098ac:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80098b0:	434a      	muls	r2, r1
 80098b2:	f240 119f 	movw	r1, #415	; 0x19f
 80098b6:	4359      	muls	r1, r3
 80098b8:	f00a ff43 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80098bc:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80098c0:	4628      	mov	r0, r5
        return i * scale;
 80098c2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80098c6:	4372      	muls	r2, r6
 80098c8:	f06f 0603 	mvn.w	r6, #3
 80098cc:	4359      	muls	r1, r3
 80098ce:	f00a ff38 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80098d2:	f240 11a1 	movw	r1, #417	; 0x1a1
 80098d6:	4628      	mov	r0, r5
        return i * scale;
 80098d8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80098dc:	4359      	muls	r1, r3
 80098de:	0112      	lsls	r2, r2, #4
 80098e0:	f00a ff2f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80098e4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80098e8:	4628      	mov	r0, r5
        return i * scale;
 80098ea:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80098ee:	4359      	muls	r1, r3
 80098f0:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 80098f4:	f00a ff25 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80098f8:	f240 11a3 	movw	r1, #419	; 0x1a3
 80098fc:	4628      	mov	r0, r5
        return i * scale;
 80098fe:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009902:	4359      	muls	r1, r3
 8009904:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009908:	f00a ff1b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800990c:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8009910:	4628      	mov	r0, r5
        return i * scale;
 8009912:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009916:	4372      	muls	r2, r6
 8009918:	f06f 0609 	mvn.w	r6, #9
 800991c:	4359      	muls	r1, r3
 800991e:	f00a ff10 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009922:	f240 11a5 	movw	r1, #421	; 0x1a5
 8009926:	4628      	mov	r0, r5
        return i * scale;
 8009928:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800992c:	4372      	muls	r2, r6
        return i * scale;
 800992e:	f06f 062a 	mvn.w	r6, #42	; 0x2a
        return addValue(int2scaledX(x), int2scaledY(y));
 8009932:	4359      	muls	r1, r3
 8009934:	f00a ff05 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009938:	f06f 000f 	mvn.w	r0, #15
 800993c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
        return i * scale;
 8009940:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009944:	4342      	muls	r2, r0
 8009946:	4628      	mov	r0, r5
 8009948:	4359      	muls	r1, r3
 800994a:	f00a fefa 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800994e:	f06f 0114 	mvn.w	r1, #20
 8009952:	4628      	mov	r0, r5
        return i * scale;
 8009954:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009958:	434a      	muls	r2, r1
 800995a:	f240 11a7 	movw	r1, #423	; 0x1a7
 800995e:	4359      	muls	r1, r3
 8009960:	f00a feef 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009964:	f06f 0119 	mvn.w	r1, #25
 8009968:	4628      	mov	r0, r5
        return i * scale;
 800996a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 800996e:	434a      	muls	r2, r1
 8009970:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 8009974:	4359      	muls	r1, r3
 8009976:	f00a fee4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800997a:	f240 11a9 	movw	r1, #425	; 0x1a9
 800997e:	4628      	mov	r0, r5
        return i * scale;
 8009980:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009984:	4359      	muls	r1, r3
 8009986:	eba2 1242 	sub.w	r2, r2, r2, lsl #5
 800998a:	f00a feda 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 800998e:	f06f 0123 	mvn.w	r1, #35	; 0x23
 8009992:	4628      	mov	r0, r5
        return i * scale;
 8009994:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009998:	434a      	muls	r2, r1
 800999a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800999e:	4359      	muls	r1, r3
 80099a0:	f00a fecf 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80099a4:	f06f 0127 	mvn.w	r1, #39	; 0x27
 80099a8:	4628      	mov	r0, r5
        return i * scale;
 80099aa:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80099ae:	434a      	muls	r2, r1
 80099b0:	f240 11ab 	movw	r1, #427	; 0x1ab
 80099b4:	4359      	muls	r1, r3
 80099b6:	f00a fec4 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 80099ba:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80099be:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
        return addValue(int2scaledX(x), int2scaledY(y));
 80099c2:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80099c6:	4628      	mov	r0, r5
 80099c8:	4372      	muls	r2, r6
 80099ca:	4359      	muls	r1, r3
 80099cc:	f00a feb9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80099d0:	f06f 002d 	mvn.w	r0, #45	; 0x2d
 80099d4:	f240 11ad 	movw	r1, #429	; 0x1ad
        return i * scale;
 80099d8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80099dc:	4342      	muls	r2, r0
 80099de:	4628      	mov	r0, r5
 80099e0:	4359      	muls	r1, r3
 80099e2:	f00a feae 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80099e6:	f06f 0130 	mvn.w	r1, #48	; 0x30
 80099ea:	4628      	mov	r0, r5
        return i * scale;
 80099ec:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 80099f0:	434a      	muls	r2, r1
 80099f2:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80099f6:	4359      	muls	r1, r3
 80099f8:	f00a fea3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 80099fc:	f06f 0132 	mvn.w	r1, #50	; 0x32
 8009a00:	4628      	mov	r0, r5
        return i * scale;
 8009a02:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a06:	434a      	muls	r2, r1
 8009a08:	f240 11af 	movw	r1, #431	; 0x1af
 8009a0c:	4359      	muls	r1, r3
 8009a0e:	f00a fe98 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a12:	f06f 0133 	mvn.w	r1, #51	; 0x33
 8009a16:	4628      	mov	r0, r5
        return i * scale;
 8009a18:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a1c:	434a      	muls	r2, r1
 8009a1e:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009a22:	4359      	muls	r1, r3
 8009a24:	f00a fe8d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a28:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8009a2c:	4628      	mov	r0, r5
        return i * scale;
 8009a2e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a32:	434a      	muls	r2, r1
 8009a34:	f240 11b1 	movw	r1, #433	; 0x1b1
 8009a38:	4359      	muls	r1, r3
 8009a3a:	f00a fe82 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a3e:	f06f 0035 	mvn.w	r0, #53	; 0x35
 8009a42:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
        return i * scale;
 8009a46:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a4a:	4342      	muls	r2, r0
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	4359      	muls	r1, r3
 8009a50:	f00a fe77 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a54:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8009a58:	4628      	mov	r0, r5
        return i * scale;
 8009a5a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a5e:	434a      	muls	r2, r1
 8009a60:	f240 11b5 	movw	r1, #437	; 0x1b5
 8009a64:	4359      	muls	r1, r3
 8009a66:	f00a fe6c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a6a:	f06f 0133 	mvn.w	r1, #51	; 0x33
 8009a6e:	4628      	mov	r0, r5
        return i * scale;
 8009a70:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a74:	434a      	muls	r2, r1
 8009a76:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8009a7a:	4359      	muls	r1, r3
 8009a7c:	f00a fe61 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a80:	f06f 0131 	mvn.w	r1, #49	; 0x31
 8009a84:	4628      	mov	r0, r5
        return i * scale;
 8009a86:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009a8a:	434a      	muls	r2, r1
 8009a8c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8009a90:	4359      	muls	r1, r3
 8009a92:	f00a fe56 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009a96:	f06f 002f 	mvn.w	r0, #47	; 0x2f
 8009a9a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
        return i * scale;
 8009a9e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009aa2:	4342      	muls	r2, r0
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	4359      	muls	r1, r3
 8009aa8:	f00a fe4b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009aac:	f06f 012d 	mvn.w	r1, #45	; 0x2d
 8009ab0:	4628      	mov	r0, r5
        return i * scale;
 8009ab2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ab6:	434a      	muls	r2, r1
 8009ab8:	f240 11b9 	movw	r1, #441	; 0x1b9
 8009abc:	4359      	muls	r1, r3
 8009abe:	f00a fe40 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009ac2:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8009ac6:	4628      	mov	r0, r5
        return i * scale;
 8009ac8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009acc:	4372      	muls	r2, r6
 8009ace:	f06f 0621 	mvn.w	r6, #33	; 0x21
 8009ad2:	4359      	muls	r1, r3
 8009ad4:	f00a fe35 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009ad8:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8009adc:	4628      	mov	r0, r5
        return i * scale;
 8009ade:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ae2:	434a      	muls	r2, r1
 8009ae4:	f240 11bb 	movw	r1, #443	; 0x1bb
 8009ae8:	4359      	muls	r1, r3
 8009aea:	f00a fe2a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009aee:	f06f 0024 	mvn.w	r0, #36	; 0x24
 8009af2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
        return i * scale;
 8009af6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009afa:	4342      	muls	r2, r0
 8009afc:	4628      	mov	r0, r5
 8009afe:	4359      	muls	r1, r3
 8009b00:	f00a fe1f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b04:	f240 11bd 	movw	r1, #445	; 0x1bd
 8009b08:	4628      	mov	r0, r5
        return i * scale;
 8009b0a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b0e:	4372      	muls	r2, r6
 8009b10:	f06f 061d 	mvn.w	r6, #29
 8009b14:	4359      	muls	r1, r3
 8009b16:	f00a fe14 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b1a:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8009b1e:	4628      	mov	r0, r5
        return i * scale;
 8009b20:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b24:	4372      	muls	r2, r6
 8009b26:	f06f 0617 	mvn.w	r6, #23
 8009b2a:	4359      	muls	r1, r3
 8009b2c:	f00a fe09 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b30:	f06f 011a 	mvn.w	r1, #26
 8009b34:	4628      	mov	r0, r5
        return i * scale;
 8009b36:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b3a:	434a      	muls	r2, r1
 8009b3c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8009b40:	4359      	muls	r1, r3
 8009b42:	f00a fdfe 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b46:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8009b4a:	4628      	mov	r0, r5
        return i * scale;
 8009b4c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b50:	4372      	muls	r2, r6
 8009b52:	f06f 060d 	mvn.w	r6, #13
 8009b56:	4359      	muls	r1, r3
 8009b58:	f00a fdf3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b5c:	f06f 0013 	mvn.w	r0, #19
 8009b60:	f240 11c1 	movw	r1, #449	; 0x1c1
        return i * scale;
 8009b64:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b68:	4342      	muls	r2, r0
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	4359      	muls	r1, r3
 8009b6e:	f00a fde8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b72:	f06f 0010 	mvn.w	r0, #16
 8009b76:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
        return i * scale;
 8009b7a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b7e:	4342      	muls	r2, r0
 8009b80:	4628      	mov	r0, r5
 8009b82:	4359      	muls	r1, r3
 8009b84:	f00a fddd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b88:	f240 11c3 	movw	r1, #451	; 0x1c3
 8009b8c:	4628      	mov	r0, r5
        return i * scale;
 8009b8e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009b92:	4372      	muls	r2, r6
 8009b94:	f06f 060a 	mvn.w	r6, #10
 8009b98:	4359      	muls	r1, r3
 8009b9a:	f00a fdd2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009b9e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8009ba2:	4628      	mov	r0, r5
        return i * scale;
 8009ba4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ba8:	4372      	muls	r2, r6
 8009baa:	f06f 0607 	mvn.w	r6, #7
 8009bae:	4359      	muls	r1, r3
 8009bb0:	f00a fdc7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009bb4:	f240 11c5 	movw	r1, #453	; 0x1c5
 8009bb8:	4628      	mov	r0, r5
        return i * scale;
 8009bba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009bbe:	4372      	muls	r2, r6
 8009bc0:	f06f 0605 	mvn.w	r6, #5
 8009bc4:	4359      	muls	r1, r3
 8009bc6:	f00a fdbc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009bca:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8009bce:	4628      	mov	r0, r5
        return i * scale;
 8009bd0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009bd4:	4372      	muls	r2, r6
 8009bd6:	4359      	muls	r1, r3
 8009bd8:	f00a fdb3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009bdc:	f240 11c7 	movw	r1, #455	; 0x1c7
 8009be0:	4628      	mov	r0, r5
        return i * scale;
 8009be2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009be6:	4359      	muls	r1, r3
 8009be8:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8009bec:	f00a fda9 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009bf0:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 8009bf4:	4628      	mov	r0, r5
        return i * scale;
 8009bf6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009bfa:	4359      	muls	r1, r3
 8009bfc:	4252      	negs	r2, r2
 8009bfe:	f00a fda0 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8009c02:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c06:	f240 11c9 	movw	r1, #457	; 0x1c9
 8009c0a:	465a      	mov	r2, fp
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	4359      	muls	r1, r3
 8009c10:	f00a fd97 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c14:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 8009c18:	4628      	mov	r0, r5
        return i * scale;
 8009c1a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c1e:	4359      	muls	r1, r3
 8009c20:	0052      	lsls	r2, r2, #1
 8009c22:	f00a fd8e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c26:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8009c2a:	4628      	mov	r0, r5
        return i * scale;
 8009c2c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c30:	4359      	muls	r1, r3
 8009c32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009c36:	f00a fd84 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c3a:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 8009c3e:	4628      	mov	r0, r5
        return i * scale;
 8009c40:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c44:	4359      	muls	r1, r3
 8009c46:	0052      	lsls	r2, r2, #1
 8009c48:	f00a fd7b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
        return i * scale;
 8009c4c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c50:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009c54:	465a      	mov	r2, fp
 8009c56:	4628      	mov	r0, r5
 8009c58:	4359      	muls	r1, r3
 8009c5a:	f00a fd72 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c5e:	f240 11d1 	movw	r1, #465	; 0x1d1
 8009c62:	4628      	mov	r0, r5
        return i * scale;
 8009c64:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c68:	4359      	muls	r1, r3
 8009c6a:	4252      	negs	r2, r2
 8009c6c:	f00a fd69 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c70:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 8009c74:	4628      	mov	r0, r5
        return i * scale;
 8009c76:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c7a:	4359      	muls	r1, r3
 8009c7c:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 8009c80:	f00a fd5f 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c84:	f240 11d3 	movw	r1, #467	; 0x1d3
 8009c88:	4628      	mov	r0, r5
        return i * scale;
 8009c8a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009c8e:	4372      	muls	r2, r6
 8009c90:	f06f 0612 	mvn.w	r6, #18
 8009c94:	4359      	muls	r1, r3
 8009c96:	f00a fd54 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009c9a:	f06f 0008 	mvn.w	r0, #8
 8009c9e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
        return i * scale;
 8009ca2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ca6:	4342      	muls	r2, r0
 8009ca8:	4628      	mov	r0, r5
 8009caa:	4359      	muls	r1, r3
 8009cac:	f00a fd49 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009cb0:	f06f 000b 	mvn.w	r0, #11
 8009cb4:	f240 11d5 	movw	r1, #469	; 0x1d5
        return i * scale;
 8009cb8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009cbc:	4342      	muls	r2, r0
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	4359      	muls	r1, r3
 8009cc2:	f00a fd3e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009cc6:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 8009cca:	4628      	mov	r0, r5
        return i * scale;
 8009ccc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009cd0:	4359      	muls	r1, r3
 8009cd2:	eba2 1202 	sub.w	r2, r2, r2, lsl #4
 8009cd6:	f00a fd34 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009cda:	f240 11d7 	movw	r1, #471	; 0x1d7
 8009cde:	4628      	mov	r0, r5
        return i * scale;
 8009ce0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ce4:	4372      	muls	r2, r6
 8009ce6:	f06f 0638 	mvn.w	r6, #56	; 0x38
 8009cea:	4359      	muls	r1, r3
 8009cec:	f00a fd29 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009cf0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8009cf4:	4628      	mov	r0, r5
        return i * scale;
 8009cf6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009cfa:	437a      	muls	r2, r7
 8009cfc:	f06f 0750 	mvn.w	r7, #80	; 0x50
 8009d00:	4359      	muls	r1, r3
 8009d02:	f00a fd1e 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d06:	f06f 001a 	mvn.w	r0, #26
 8009d0a:	f240 11d9 	movw	r1, #473	; 0x1d9
        return i * scale;
 8009d0e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d12:	4342      	muls	r2, r0
 8009d14:	4628      	mov	r0, r5
 8009d16:	4359      	muls	r1, r3
 8009d18:	f00a fd13 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d1c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8009d20:	4628      	mov	r0, r5
        return i * scale;
 8009d22:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d26:	4359      	muls	r1, r3
 8009d28:	eba2 1242 	sub.w	r2, r2, r2, lsl #5
 8009d2c:	f00a fd09 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d30:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8009d34:	4628      	mov	r0, r5
        return i * scale;
 8009d36:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d3a:	434a      	muls	r2, r1
 8009d3c:	f240 11db 	movw	r1, #475	; 0x1db
 8009d40:	4359      	muls	r1, r3
 8009d42:	f00a fcfe 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d46:	f06f 0127 	mvn.w	r1, #39	; 0x27
 8009d4a:	4628      	mov	r0, r5
        return i * scale;
 8009d4c:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d50:	434a      	muls	r2, r1
 8009d52:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8009d56:	4359      	muls	r1, r3
 8009d58:	f00a fcf3 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d5c:	f06f 002b 	mvn.w	r0, #43	; 0x2b
 8009d60:	f240 11dd 	movw	r1, #477	; 0x1dd
        return i * scale;
 8009d64:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d68:	4342      	muls	r2, r0
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	4359      	muls	r1, r3
 8009d6e:	f00a fce8 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d72:	f06f 0030 	mvn.w	r0, #48	; 0x30
 8009d76:	f44f 71ef 	mov.w	r1, #478	; 0x1de
        return i * scale;
 8009d7a:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d7e:	4342      	muls	r2, r0
 8009d80:	4628      	mov	r0, r5
 8009d82:	4359      	muls	r1, r3
 8009d84:	f00a fcdd 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d88:	f06f 0134 	mvn.w	r1, #52	; 0x34
 8009d8c:	4628      	mov	r0, r5
        return i * scale;
 8009d8e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009d92:	434a      	muls	r2, r1
 8009d94:	f240 11df 	movw	r1, #479	; 0x1df
 8009d98:	4359      	muls	r1, r3
 8009d9a:	f00a fcd2 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009d9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8009da2:	4628      	mov	r0, r5
        return i * scale;
 8009da4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009da8:	4372      	muls	r2, r6
 8009daa:	f06f 064f 	mvn.w	r6, #79	; 0x4f
 8009dae:	4359      	muls	r1, r3
 8009db0:	f00a fcc7 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009db4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
 8009db8:	f240 11e1 	movw	r1, #481	; 0x1e1
        return i * scale;
 8009dbc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009dc0:	4342      	muls	r2, r0
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	4359      	muls	r1, r3
 8009dc6:	f00a fcbc 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009dca:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009dce:	4628      	mov	r0, r5
        return i * scale;
 8009dd0:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009dd4:	434a      	muls	r2, r1
 8009dd6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8009dda:	4359      	muls	r1, r3
 8009ddc:	f00a fcb1 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009de0:	f06f 0143 	mvn.w	r1, #67	; 0x43
 8009de4:	4628      	mov	r0, r5
        return i * scale;
 8009de6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009dea:	434a      	muls	r2, r1
 8009dec:	f240 11e3 	movw	r1, #483	; 0x1e3
 8009df0:	4359      	muls	r1, r3
 8009df2:	f00a fca6 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009df6:	f06f 0147 	mvn.w	r1, #71	; 0x47
 8009dfa:	4628      	mov	r0, r5
        return i * scale;
 8009dfc:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e00:	434a      	muls	r2, r1
 8009e02:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8009e06:	4359      	muls	r1, r3
 8009e08:	f00a fc9b 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e0c:	f06f 0149 	mvn.w	r1, #73	; 0x49
 8009e10:	4628      	mov	r0, r5
        return i * scale;
 8009e12:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e16:	434a      	muls	r2, r1
 8009e18:	f240 11e5 	movw	r1, #485	; 0x1e5
 8009e1c:	4359      	muls	r1, r3
 8009e1e:	f00a fc90 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e22:	f06f 014c 	mvn.w	r1, #76	; 0x4c
 8009e26:	4628      	mov	r0, r5
        return i * scale;
 8009e28:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e2c:	434a      	muls	r2, r1
 8009e2e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 8009e32:	4359      	muls	r1, r3
 8009e34:	f00a fc85 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e38:	f06f 014e 	mvn.w	r1, #78	; 0x4e
 8009e3c:	4628      	mov	r0, r5
        return i * scale;
 8009e3e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e42:	434a      	muls	r2, r1
 8009e44:	f240 11e7 	movw	r1, #487	; 0x1e7
 8009e48:	4359      	muls	r1, r3
 8009e4a:	f00a fc7a 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e4e:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8009e52:	4628      	mov	r0, r5
        return i * scale;
 8009e54:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e58:	4372      	muls	r2, r6
 8009e5a:	4359      	muls	r1, r3
 8009e5c:	f00a fc71 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e60:	f240 11e9 	movw	r1, #489	; 0x1e9
 8009e64:	4628      	mov	r0, r5
        return i * scale;
 8009e66:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e6a:	437a      	muls	r2, r7
 8009e6c:	4359      	muls	r1, r3
 8009e6e:	f00a fc68 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e72:	f06f 0151 	mvn.w	r1, #81	; 0x51
 8009e76:	4628      	mov	r0, r5
        return i * scale;
 8009e78:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e7c:	434a      	muls	r2, r1
 8009e7e:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8009e82:	4359      	muls	r1, r3
 8009e84:	f00a fc5d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e88:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8009e8c:	4628      	mov	r0, r5
        return i * scale;
 8009e8e:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009e92:	437a      	muls	r2, r7
 8009e94:	f06f 073d 	mvn.w	r7, #61	; 0x3d
 8009e98:	4359      	muls	r1, r3
 8009e9a:	f00a fc52 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009e9e:	f240 11ed 	movw	r1, #493	; 0x1ed
 8009ea2:	4628      	mov	r0, r5
        return i * scale;
 8009ea4:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ea8:	4372      	muls	r2, r6
 8009eaa:	f06f 064d 	mvn.w	r6, #77	; 0x4d
 8009eae:	4359      	muls	r1, r3
 8009eb0:	f00a fc47 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009eb4:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
 8009eb8:	4628      	mov	r0, r5
        return i * scale;
 8009eba:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ebe:	4372      	muls	r2, r6
 8009ec0:	f06f 0648 	mvn.w	r6, #72	; 0x48
 8009ec4:	4359      	muls	r1, r3
 8009ec6:	f00a fc3c 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009eca:	f06f 004b 	mvn.w	r0, #75	; 0x4b
 8009ece:	f240 11ef 	movw	r1, #495	; 0x1ef
        return i * scale;
 8009ed2:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009ed6:	4342      	muls	r2, r0
 8009ed8:	4628      	mov	r0, r5
 8009eda:	4359      	muls	r1, r3
 8009edc:	f00a fc31 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009ee0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009ee4:	4628      	mov	r0, r5
        return i * scale;
 8009ee6:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009eea:	4359      	muls	r1, r3
 8009eec:	4372      	muls	r2, r6
 8009eee:	f00a fc28 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009ef2:	f06f 0145 	mvn.w	r1, #69	; 0x45
 8009ef6:	4628      	mov	r0, r5
        return i * scale;
 8009ef8:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009efc:	434a      	muls	r2, r1
 8009efe:	f240 11f1 	movw	r1, #497	; 0x1f1
 8009f02:	4359      	muls	r1, r3
 8009f04:	f00a fc1d 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009f08:	f06f 0041 	mvn.w	r0, #65	; 0x41
 8009f0c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
        return i * scale;
 8009f10:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009f14:	4342      	muls	r2, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	4359      	muls	r1, r3
 8009f1a:	f00a fc12 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
 8009f1e:	f240 11f3 	movw	r1, #499	; 0x1f3
 8009f22:	4628      	mov	r0, r5
        return i * scale;
 8009f24:	e9d4 3222 	ldrd	r3, r2, [r4, #136]	; 0x88
        return addValue(int2scaledX(x), int2scaledY(y));
 8009f28:	4359      	muls	r1, r3
 8009f2a:	437a      	muls	r2, r7
        color = newColor;
 8009f2c:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
 8009f30:	f00a fc07 	bl	8014742 <_ZN8touchgfx9GraphData8addValueEii>
    add(graph1);
 8009f34:	4629      	mov	r1, r5
 8009f36:	4620      	mov	r0, r4
 8009f38:	4655      	mov	r5, sl
 8009f3a:	f008 fb8f 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    debugText.setXY(210, 0);
 8009f3e:	465a      	mov	r2, fp
 8009f40:	21d2      	movs	r1, #210	; 0xd2
 8009f42:	ee1a 0a10 	vmov	r0, s20
 8009f46:	f7f9 fac4 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8009f4a:	f04f 33ff 	mov.w	r3, #4294967295
        color = newColor;
 8009f4e:	f8ca 72c8 	str.w	r7, [sl, #712]	; 0x2c8
        linespace = space;
 8009f52:	f8aa b2cc 	strh.w	fp, [sl, #716]	; 0x2cc
        boundingArea = calculateBoundingArea();
 8009f56:	f8ca b2d4 	str.w	fp, [sl, #724]	; 0x2d4
 8009f5a:	e9ca 3bb6 	strd	r3, fp, [sl, #728]	; 0x2d8
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8009f5e:	4b67      	ldr	r3, [pc, #412]	; (800a0fc <_ZN15customGraphBaseC1Ev+0x2984>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	b92b      	cbnz	r3, 8009f70 <_ZN15customGraphBaseC1Ev+0x27f8>
 8009f64:	4b66      	ldr	r3, [pc, #408]	; (800a100 <_ZN15customGraphBaseC1Ev+0x2988>)
 8009f66:	2160      	movs	r1, #96	; 0x60
 8009f68:	4a66      	ldr	r2, [pc, #408]	; (800a104 <_ZN15customGraphBaseC1Ev+0x298c>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8009f6a:	4867      	ldr	r0, [pc, #412]	; (800a108 <_ZN15customGraphBaseC1Ev+0x2990>)
 8009f6c:	f01a fc84 	bl	8024878 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8009f70:	4b66      	ldr	r3, [pc, #408]	; (800a10c <_ZN15customGraphBaseC1Ev+0x2994>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d803      	bhi.n	8009f80 <_ZN15customGraphBaseC1Ev+0x2808>
 8009f78:	4b65      	ldr	r3, [pc, #404]	; (800a110 <_ZN15customGraphBaseC1Ev+0x2998>)
 8009f7a:	2161      	movs	r1, #97	; 0x61
 8009f7c:	4a61      	ldr	r2, [pc, #388]	; (800a104 <_ZN15customGraphBaseC1Ev+0x298c>)
 8009f7e:	e7f4      	b.n	8009f6a <_ZN15customGraphBaseC1Ev+0x27f2>
        return texts->getText(typedTextId);
 8009f80:	4b64      	ldr	r3, [pc, #400]	; (800a114 <_ZN15customGraphBaseC1Ev+0x299c>)
 8009f82:	2103      	movs	r1, #3
 8009f84:	f10d 0918 	add.w	r9, sp, #24
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	f7fd fab5 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IZT7).getText());
 8009f8e:	4a62      	ldr	r2, [pc, #392]	; (800a118 <_ZN15customGraphBaseC1Ev+0x29a0>)
 8009f90:	4603      	mov	r3, r0
 8009f92:	210a      	movs	r1, #10
 8009f94:	4640      	mov	r0, r8
 8009f96:	f011 fdfb 	bl	801bb90 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    debugText.resizeToCurrentText();
 8009f9a:	ee1a 0a10 	vmov	r0, s20
        wc1 = value;
 8009f9e:	f8ca 82e0 	str.w	r8, [sl, #736]	; 0x2e0
 8009fa2:	f00c f8b5 	bl	8016110 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8009fa6:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800a11c <_ZN15customGraphBaseC1Ev+0x29a4>
 8009faa:	2305      	movs	r3, #5
    debugText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LR9V));
 8009fac:	a90a      	add	r1, sp, #40	; 0x28
 8009fae:	ee1a 0a10 	vmov	r0, s20
 8009fb2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009fb6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8009fba:	f00c f8c9 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(debugText);
 8009fbe:	ee1a 1a10 	vmov	r1, s20
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f008 fb4a 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel4.setXY(299, 180);
 8009fc8:	22b4      	movs	r2, #180	; 0xb4
 8009fca:	ee18 0a10 	vmov	r0, s16
 8009fce:	f240 112b 	movw	r1, #299	; 0x12b
 8009fd2:	f7f9 fa7e 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 8009fd6:	ee18 1a10 	vmov	r1, s16
 8009fda:	4648      	mov	r0, r9
        color = newColor;
 8009fdc:	f8ca 7314 	str.w	r7, [sl, #788]	; 0x314
        linespace = space;
 8009fe0:	f8a5 b318 	strh.w	fp, [r5, #792]	; 0x318
        boundingArea = calculateBoundingArea();
 8009fe4:	f00b fe0c 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8009fe8:	ee18 3a10 	vmov	r3, s16
 8009fec:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8009ff0:	333c      	adds	r3, #60	; 0x3c
 8009ff2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009ff6:	f8ad b02c 	strh.w	fp, [sp, #44]	; 0x2c
 8009ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_1R5O));
 8009ffe:	a90a      	add	r1, sp, #40	; 0x28
 800a000:	ee18 0a10 	vmov	r0, s16
 800a004:	f00c f8a4 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel4);
 800a008:	ee18 1a10 	vmov	r1, s16
 800a00c:	4620      	mov	r0, r4
 800a00e:	f008 fb25 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel3.setXY(235, 180);
 800a012:	22b4      	movs	r2, #180	; 0xb4
 800a014:	ee18 0a90 	vmov	r0, s17
 800a018:	21eb      	movs	r1, #235	; 0xeb
 800a01a:	f7f9 fa5a 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 800a01e:	ee18 1a90 	vmov	r1, s17
 800a022:	4648      	mov	r0, r9
        color = newColor;
 800a024:	f8ca 735c 	str.w	r7, [sl, #860]	; 0x35c
        linespace = space;
 800a028:	f8a5 b360 	strh.w	fp, [r5, #864]	; 0x360
        boundingArea = calculateBoundingArea();
 800a02c:	f00b fde8 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800a030:	ee18 3a90 	vmov	r3, s17
 800a034:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800a038:	333c      	adds	r3, #60	; 0x3c
 800a03a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a03e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a042:	2301      	movs	r3, #1
    timeLabel3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LORR));
 800a044:	a90a      	add	r1, sp, #40	; 0x28
 800a046:	ee18 0a90 	vmov	r0, s17
 800a04a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800a04e:	f00c f87f 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel3);
 800a052:	ee18 1a90 	vmov	r1, s17
 800a056:	4620      	mov	r0, r4
 800a058:	f008 fb00 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel2.setXY(171, 180);
 800a05c:	22b4      	movs	r2, #180	; 0xb4
 800a05e:	ee19 0a10 	vmov	r0, s18
 800a062:	21ab      	movs	r1, #171	; 0xab
 800a064:	f7f9 fa35 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 800a068:	ee19 1a10 	vmov	r1, s18
 800a06c:	4648      	mov	r0, r9
        color = newColor;
 800a06e:	f8ca 73a4 	str.w	r7, [sl, #932]	; 0x3a4
        linespace = space;
 800a072:	f8a5 b3a8 	strh.w	fp, [r5, #936]	; 0x3a8
        boundingArea = calculateBoundingArea();
 800a076:	f00b fdc3 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800a07a:	ee19 3a10 	vmov	r3, s18
 800a07e:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800a082:	333c      	adds	r3, #60	; 0x3c
 800a084:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a088:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a08c:	2302      	movs	r3, #2
    timeLabel2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LTV0));
 800a08e:	a90a      	add	r1, sp, #40	; 0x28
 800a090:	ee19 0a10 	vmov	r0, s18
 800a094:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800a098:	f00c f85a 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel2);
 800a09c:	ee19 1a10 	vmov	r1, s18
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f008 fadb 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    timeLabel1.setXY(105, 180);
 800a0a6:	22b4      	movs	r2, #180	; 0xb4
 800a0a8:	ee19 0a90 	vmov	r0, s19
 800a0ac:	2169      	movs	r1, #105	; 0x69
 800a0ae:	f7f9 fa10 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 800a0b2:	ee19 1a90 	vmov	r1, s19
 800a0b6:	4648      	mov	r0, r9
        color = newColor;
 800a0b8:	f8ca 73ec 	str.w	r7, [sl, #1004]	; 0x3ec
        linespace = space;
 800a0bc:	f8a5 b3f0 	strh.w	fp, [r5, #1008]	; 0x3f0
        boundingArea = calculateBoundingArea();
 800a0c0:	f00b fd9e 	bl	8015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 800a0c4:	ee19 3a90 	vmov	r3, s19
 800a0c8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800a0cc:	333c      	adds	r3, #60	; 0x3c
 800a0ce:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800a0d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0d6:	2304      	movs	r3, #4
    timeLabel1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E2QR));
 800a0d8:	a90a      	add	r1, sp, #40	; 0x28
 800a0da:	ee19 0a90 	vmov	r0, s19
 800a0de:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800a0e2:	f00c f835 	bl	8016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(timeLabel1);
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	ee19 1a90 	vmov	r1, s19
 800a0ec:	f008 fab6 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	b00d      	add	sp, #52	; 0x34
 800a0f4:	ecbd 8b06 	vpop	{d8-d10}
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	240100b8 	.word	0x240100b8
 800a100:	08026f94 	.word	0x08026f94
 800a104:	080270a4 	.word	0x080270a4
 800a108:	08027011 	.word	0x08027011
 800a10c:	240100bc 	.word	0x240100bc
 800a110:	08027066 	.word	0x08027066
 800a114:	240100c4 	.word	0x240100c4
 800a118:	080270dc 	.word	0x080270dc
 800a11c:	080262c0 	.word	0x080262c0

0800a120 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800a120:	4770      	bx	lr

0800a122 <_ZN19FrontendApplicationD0Ev>:
 800a122:	b510      	push	{r4, lr}
 800a124:	4604      	mov	r4, r0
 800a126:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800a12a:	f01a fa98 	bl	802465e <_ZdlPvj>
 800a12e:	4620      	mov	r0, r4
 800a130:	bd10      	pop	{r4, pc}

0800a132 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800a132:	b510      	push	{r4, lr}
 800a134:	4604      	mov	r4, r0
    {
        model.tick();
 800a136:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 800a13a:	f000 f812 	bl	800a162 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800a13e:	4620      	mov	r0, r4
    }
 800a140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800a144:	f00e bd66 	b.w	8018c14 <_ZN8touchgfx11Application15handleTickEventEv>

0800a148 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800a148:	b510      	push	{r4, lr}
 800a14a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800a14c:	f7f8 fc2a 	bl	80029a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800a150:	4b01      	ldr	r3, [pc, #4]	; (800a158 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800a152:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800a154:	6023      	str	r3, [r4, #0]
}
 800a156:	bd10      	pop	{r4, pc}
 800a158:	08027380 	.word	0x08027380

0800a15c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800a15c:	2200      	movs	r2, #0
 800a15e:	6002      	str	r2, [r0, #0]
{

}
 800a160:	4770      	bx	lr

0800a162 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800a162:	4770      	bx	lr

0800a164 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800a164:	4770      	bx	lr

0800a166 <_ZThn4_N16Screen1PresenterD1Ev>:
 800a166:	3804      	subs	r0, #4
 800a168:	4770      	bx	lr

0800a16a <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 800a16a:	4770      	bx	lr

0800a16c <_ZN16Screen1PresenterD0Ev>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	4604      	mov	r4, r0
 800a170:	2110      	movs	r1, #16
 800a172:	f01a fa74 	bl	802465e <_ZdlPvj>
 800a176:	4620      	mov	r0, r4
 800a178:	bd10      	pop	{r4, pc}

0800a17a <_ZThn4_N16Screen1PresenterD0Ev>:
 800a17a:	f1a0 0004 	sub.w	r0, r0, #4
 800a17e:	e7f5      	b.n	800a16c <_ZN16Screen1PresenterD0Ev>

0800a180 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 800a180:	2200      	movs	r2, #0
    : view(v)
 800a182:	60c1      	str	r1, [r0, #12]
 800a184:	6082      	str	r2, [r0, #8]
 800a186:	4a04      	ldr	r2, [pc, #16]	; (800a198 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 800a188:	b510      	push	{r4, lr}
    : view(v)
 800a18a:	f102 0408 	add.w	r4, r2, #8
 800a18e:	3220      	adds	r2, #32
 800a190:	6004      	str	r4, [r0, #0]
 800a192:	6042      	str	r2, [r0, #4]
}
 800a194:	bd10      	pop	{r4, pc}
 800a196:	bf00      	nop
 800a198:	080273c4 	.word	0x080273c4

0800a19c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800a19c:	4770      	bx	lr
	...

0800a1a0 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter++;
 800a1a0:	f500 42a0 	add.w	r2, r0, #20480	; 0x5000
 800a1a4:	f8d2 11b4 	ldr.w	r1, [r2, #436]	; 0x1b4
	tickCounter2++;
 800a1a8:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
	tickCounter++;
 800a1ac:	3101      	adds	r1, #1
	tickCounter2++;
 800a1ae:	3301      	adds	r3, #1
	if(tickCounter == 10){
 800a1b0:	290a      	cmp	r1, #10
{
 800a1b2:	b510      	push	{r4, lr}
 800a1b4:	ed2d 8b02 	vpush	{d8}
	tickCounter++;
 800a1b8:	f8c2 11b4 	str.w	r1, [r2, #436]	; 0x1b4
		tickCounter= 0;
 800a1bc:	bf08      	it	eq
 800a1be:	2100      	moveq	r1, #0
	tickCounter2++;
 800a1c0:	f8c2 31b8 	str.w	r3, [r2, #440]	; 0x1b8
{
 800a1c4:	4604      	mov	r4, r0
		tickCounter= 0;
 800a1c6:	bf08      	it	eq
 800a1c8:	f8c2 11b4 	streq.w	r1, [r2, #436]	; 0x1b4
		//tickCounter2++;
	}

	//graph1.setGraphRangeX(0, 60+tickCounter2);
	if(tickCounter2 % 3 == 0)
 800a1cc:	2203      	movs	r2, #3
 800a1ce:	fb93 f2f2 	sdiv	r2, r3, r2
 800a1d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d12a      	bne.n	800a230 <_ZN11Screen1View15handleTickEventEv+0x90>
	{
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10);
 800a1da:	ee07 3a90 	vmov	s15, r3
 800a1de:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800a1e2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800a238 <_ZN11Screen1View15handleTickEventEv+0x98>
 800a1e6:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a1ea:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a1ee:	f01a faa3 	bl	8024738 <sinf>
 800a1f2:	eeb0 8a40 	vmov.f32	s16, s0
 800a1f6:	f01a ffa1 	bl	802513c <rand>
 800a1fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a1fe:	210a      	movs	r1, #10
 800a200:	ee38 0a00 	vadd.f32	s0, s16, s0
 800a204:	fb90 f3f1 	sdiv	r3, r0, r1
 800a208:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a20c:	fb03 0111 	mls	r1, r3, r1, r0
 800a210:	2028      	movs	r0, #40	; 0x28
 800a212:	ee10 3a10 	vmov	r3, s0
		//customGraph1.addPoint((sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, (float)tickCounter2);
		//graph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10, tickCounter2);
	}
}
 800a216:	ecbd 8b02 	vpop	{d8}
		dynamicGraph1.addDataPoint((int)(sinf(tickCounter2 * 0.07) + 1) * 40 + rand() % 10);
 800a21a:	fb00 1103 	mla	r1, r0, r3, r1
        return i * scale;
 800a21e:	f8d4 3580 	ldr.w	r3, [r4, #1408]	; 0x580
        return addDataPointScaled(int2scaledY(y));
 800a222:	f204 504c 	addw	r0, r4, #1356	; 0x54c
 800a226:	4359      	muls	r1, r3
}
 800a228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a22c:	f00a ba75 	b.w	801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 800a230:	ecbd 8b02 	vpop	{d8}
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	1eb851ec 	.word	0x1eb851ec
 800a23c:	3fb1eb85 	.word	0x3fb1eb85

0800a240 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <_ZN11Screen1ViewD1Ev+0x10>)
 800a242:	b510      	push	{r4, lr}
 800a244:	4604      	mov	r4, r0
 800a246:	6003      	str	r3, [r0, #0]
 800a248:	f7f9 f924 	bl	8003494 <_ZN15Screen1ViewBaseD1Ev>
 800a24c:	4620      	mov	r0, r4
 800a24e:	bd10      	pop	{r4, pc}
 800a250:	080273f4 	.word	0x080273f4

0800a254 <_ZN11Screen1ViewD0Ev>:
 800a254:	b510      	push	{r4, lr}
 800a256:	4604      	mov	r4, r0
 800a258:	f7ff fff2 	bl	800a240 <_ZN11Screen1ViewD1Ev>
 800a25c:	f245 11c4 	movw	r1, #20932	; 0x51c4
 800a260:	4620      	mov	r0, r4
 800a262:	f01a f9fc 	bl	802465e <_ZdlPvj>
 800a266:	4620      	mov	r0, r4
 800a268:	bd10      	pop	{r4, pc}

0800a26a <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void setupScreen();
    virtual void tearDownScreen();

	virtual void graph2Dragged(AbstractDataGraph::GraphDragEvent value)
 800a26a:	b507      	push	{r0, r1, r2, lr}
 800a26c:	ab02      	add	r3, sp, #8
 800a26e:	e903 0006 	stmdb	r3, {r1, r2}
 800a272:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 800a274:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 800a278:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
	{
		// Override and implement this function in Screen1
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX()){
 800a27c:	429a      	cmp	r2, r3
 800a27e:	dd0f      	ble.n	800a2a0 <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x36>
			Counter2 -= 1;
 800a280:	f500 43a0 	add.w	r3, r0, #20480	; 0x5000
 800a284:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800a288:	1e51      	subs	r1, r2, #1
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 800a28a:	3263      	adds	r2, #99	; 0x63
			Counter2 -= 1;
 800a28c:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
		}
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()){
			Counter2 += 1;
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 800a290:	f500 50e9 	add.w	r0, r0, #7456	; 0x1d20
 800a294:	301c      	adds	r0, #28
 800a296:	f7f8 fc35 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		}
	}
 800a29a:	b003      	add	sp, #12
 800a29c:	f85d fb04 	ldr.w	pc, [sp], #4
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX()){
 800a2a0:	dafb      	bge.n	800a29a <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x30>
			Counter2 += 1;
 800a2a2:	f500 43a0 	add.w	r3, r0, #20480	; 0x5000
 800a2a6:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800a2aa:	1c51      	adds	r1, r2, #1
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 800a2ac:	3265      	adds	r2, #101	; 0x65
			Counter2 += 1;
 800a2ae:	f8c3 11c0 	str.w	r1, [r3, #448]	; 0x1c0
			graph2.setGraphRangeX(0 + Counter2, 100 + Counter2);
 800a2b2:	e7ed      	b.n	800a290 <_ZN11Screen1View13graph2DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x26>

0800a2b4 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800a2b4:	b510      	push	{r4, lr}
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	f7f9 f9d8 	bl	800366c <_ZN15Screen1ViewBaseC1Ev>
 800a2bc:	4b05      	ldr	r3, [pc, #20]	; (800a2d4 <_ZN11Screen1ViewC1Ev+0x20>)
 800a2be:	2200      	movs	r2, #0
}
 800a2c0:	4620      	mov	r0, r4
Screen1View::Screen1View()
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	f504 43a0 	add.w	r3, r4, #20480	; 0x5000
 800a2c8:	e9c3 226f 	strd	r2, r2, [r3, #444]	; 0x1bc
	tickCounter2 = 0;
 800a2cc:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	080273f4 	.word	0x080273f4

0800a2d8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 800a2d8:	f7f9 b851 	b.w	800337e <_ZN15Screen1ViewBase11setupScreenEv>

0800a2dc <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
		timeLabel2.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label2_pageCNTR*100)+50))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
		timeLabel3.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label3_pageCNTR*100)+75))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
		timeLabel4.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label4_pageCNTR*100)+100)) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
	}

	virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 800a2dc:	b530      	push	{r4, r5, lr}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	ab04      	add	r3, sp, #16
 800a2e4:	e903 0006 	stmdb	r3, {r1, r2}
	{
		// Override and implement this function in customGraph
		if(value.clickEvent.getType() == ClickEvent::PRESSED){
 800a2e8:	7913      	ldrb	r3, [r2, #4]
 800a2ea:	b9e3      	cbnz	r3, 800a326 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x4a>
			Unicode::snprintf(debugTextBuffer, DEBUGTEXT_SIZE, "%d", value.index);
 800a2ec:	f500 55a0 	add.w	r5, r0, #5120	; 0x1400
 800a2f0:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE+0x50>)
 800a2f2:	210a      	movs	r1, #10
 800a2f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800a2f8:	3504      	adds	r5, #4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f011 fc48 	bl	801bb90 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
			debugText.setWildcard(debugTextBuffer);
			debugText.invalidate();
 800a300:	f504 5094 	add.w	r0, r4, #4736	; 0x1280
 800a304:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a308:	3018      	adds	r0, #24
 800a30a:	f8c3 52e0 	str.w	r5, [r3, #736]	; 0x2e0
 800a30e:	9001      	str	r0, [sp, #4]
 800a310:	f00f fc43 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
			debugText.resizeToCurrentText();
 800a314:	9801      	ldr	r0, [sp, #4]
 800a316:	f00b fefb 	bl	8016110 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
			debugText.invalidate();
 800a31a:	9801      	ldr	r0, [sp, #4]
		}
		if(value.clickEvent.getType() == ClickEvent::RELEASED){

		}
	}
 800a31c:	b005      	add	sp, #20
 800a31e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			debugText.invalidate();
 800a322:	f00f bc3a 	b.w	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
	}
 800a326:	b005      	add	sp, #20
 800a328:	bd30      	pop	{r4, r5, pc}
 800a32a:	bf00      	nop
 800a32c:	08027424 	.word	0x08027424

0800a330 <_ZN11customGraphD1Ev>:
    virtual ~customGraph() {}
 800a330:	4b03      	ldr	r3, [pc, #12]	; (800a340 <_ZN11customGraphD1Ev+0x10>)
 800a332:	b510      	push	{r4, lr}
 800a334:	4604      	mov	r4, r0
 800a336:	6003      	str	r3, [r0, #0]
 800a338:	f7fd f955 	bl	80075e6 <_ZN15customGraphBaseD1Ev>
 800a33c:	4620      	mov	r0, r4
 800a33e:	bd10      	pop	{r4, pc}
 800a340:	08027430 	.word	0x08027430

0800a344 <_ZN11customGraphD0Ev>:
 800a344:	b510      	push	{r4, lr}
 800a346:	4604      	mov	r4, r0
 800a348:	f7ff fff2 	bl	800a330 <_ZN11customGraphD1Ev>
 800a34c:	f241 414c 	movw	r1, #5196	; 0x144c
 800a350:	4620      	mov	r0, r4
 800a352:	f01a f984 	bl	802465e <_ZdlPvj>
 800a356:	4620      	mov	r0, r4
 800a358:	bd10      	pop	{r4, pc}

0800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
            return v < 0 ? Q5((v + 1) - toQ5(1).v / 2).to<int>() : Q5(v + toQ5(1).v / 2).to<int>();
 800a35a:	6803      	ldr	r3, [r0, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	da02      	bge.n	800a366 <_ZNK8touchgfx7CWRUtil2Q55roundEv+0xc>
            return (T)((T)v / (T)Rasterizer::POLY_BASE_SIZE);
 800a360:	f1b3 000f 	subs.w	r0, r3, #15
 800a364:	d501      	bpl.n	800a36a <_ZNK8touchgfx7CWRUtil2Q55roundEv+0x10>
 800a366:	f103 0010 	add.w	r0, r3, #16
 800a36a:	1140      	asrs	r0, r0, #5
 800a36c:	4770      	bx	lr
	...

0800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>:
    int findTimeLabelCoordinate(int targetX_Val)
 800a370:	4602      	mov	r2, r0
		targetXIndex = targetX_Val;
 800a372:	b208      	sxth	r0, r1
    int findTimeLabelCoordinate(int targetX_Val)
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return usedCapacity;
 800a376:	f9b2 6176 	ldrsh.w	r6, [r2, #374]	; 0x176
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800a37a:	f06f 0701 	mvn.w	r7, #1
		if(targetXIndex > graph1.getUsedCapacity())
 800a37e:	42b0      	cmp	r0, r6
			targetXIndex = graph1.getUsedCapacity()-1;
 800a380:	bfc4      	itt	gt
 800a382:	f106 30ff 	addgt.w	r0, r6, #4294967295
 800a386:	b200      	sxthgt	r0, r0
 800a388:	f1a0 0464 	sub.w	r4, r0, #100	; 0x64
 800a38c:	0085      	lsls	r5, r0, #2
 800a38e:	b2a4      	uxth	r4, r4
        assert(index >= 0 && index < usedCapacity);
 800a390:	2800      	cmp	r0, #0
 800a392:	db01      	blt.n	800a398 <_ZN11customGraph23findTimeLabelCoordinateEi+0x28>
 800a394:	4286      	cmp	r6, r0
 800a396:	dc06      	bgt.n	800a3a6 <_ZN11customGraph23findTimeLabelCoordinateEi+0x36>
 800a398:	4b13      	ldr	r3, [pc, #76]	; (800a3e8 <_ZN11customGraph23findTimeLabelCoordinateEi+0x78>)
 800a39a:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800a39e:	4a13      	ldr	r2, [pc, #76]	; (800a3ec <_ZN11customGraph23findTimeLabelCoordinateEi+0x7c>)
 800a3a0:	4813      	ldr	r0, [pc, #76]	; (800a3f0 <_ZN11customGraph23findTimeLabelCoordinateEi+0x80>)
 800a3a2:	f01a fa69 	bl	8024878 <__assert_func>
        return xValues[index];
 800a3a6:	f8d2 3194 	ldr.w	r3, [r2, #404]	; 0x194
        return scaled2int(i, xScale);
 800a3aa:	f8d2 c088 	ldr.w	ip, [r2, #136]	; 0x88
        return xValues[index];
 800a3ae:	595b      	ldr	r3, [r3, r5]
        if (i >= 0)
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	db0f      	blt.n	800a3d4 <_ZN11customGraph23findTimeLabelCoordinateEi+0x64>
            return ((i * 2 + scale) / scale) / 2;
 800a3b4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800a3b8:	fb93 f3fc 	sdiv	r3, r3, ip
 800a3bc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a3c0:	105b      	asrs	r3, r3, #1
			if(graph1.indexToDataPointXAsInt(targetXIndex) > targetX_Val ){
 800a3c2:	4299      	cmp	r1, r3
 800a3c4:	da05      	bge.n	800a3d2 <_ZN11customGraph23findTimeLabelCoordinateEi+0x62>
				targetXIndex -= 1;
 800a3c6:	3801      	subs	r0, #1
		for(i=0; i<100; i++){
 800a3c8:	3d04      	subs	r5, #4
 800a3ca:	b283      	uxth	r3, r0
 800a3cc:	b200      	sxth	r0, r0
 800a3ce:	429c      	cmp	r4, r3
 800a3d0:	d1de      	bne.n	800a390 <_ZN11customGraph23findTimeLabelCoordinateEi+0x20>
	}
 800a3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800a3d4:	fb07 c303 	mla	r3, r7, r3, ip
 800a3d8:	3b01      	subs	r3, #1
 800a3da:	fb93 f3fc 	sdiv	r3, r3, ip
 800a3de:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a3e2:	105b      	asrs	r3, r3, #1
 800a3e4:	425b      	negs	r3, r3
 800a3e6:	e7ec      	b.n	800a3c2 <_ZN11customGraph23findTimeLabelCoordinateEi+0x52>
 800a3e8:	080266e0 	.word	0x080266e0
 800a3ec:	0802685a 	.word	0x0802685a
 800a3f0:	08026752 	.word	0x08026752

0800a3f4 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	f7fd f9be 	bl	8007778 <_ZN15customGraphBaseC1Ev>
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <_ZN11customGraphC1Ev+0x2c>)
 800a3fe:	2200      	movs	r2, #0
{

}
 800a400:	4620      	mov	r0, r4
customGraph::customGraph()
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800a408:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 800a40c:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
 800a410:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
 800a414:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
 800a418:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
}
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	bf00      	nop
 800a420:	08027430 	.word	0x08027430

0800a424 <_ZN11customGraph10initializeEv>:

void customGraph::initialize()
{
 800a424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a426:	4604      	mov	r4, r0
    customGraphBase::initialize();
 800a428:	f7fd f8de 	bl	80075e8 <_ZN15customGraphBase10initializeEv>
    customGraphBase::graph1.setGraphRangeX(0, 100);
 800a42c:	2264      	movs	r2, #100	; 0x64
 800a42e:	2100      	movs	r1, #0
 800a430:	f104 0558 	add.w	r5, r4, #88	; 0x58
        labelInterval = abs(interval);
 800a434:	f504 5780 	add.w	r7, r4, #4096	; 0x1000
 800a438:	4628      	mov	r0, r5
 800a43a:	f7f8 fb63 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    customGraphBase::graph1MajorXAxisLabel.setInterval((graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())/4);
 800a43e:	4628      	mov	r0, r5
 800a440:	f7f8 fc9f 	bl	8002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 800a444:	4606      	mov	r6, r0
 800a446:	4628      	mov	r0, r5
 800a448:	f7f8 fc74 	bl	8002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800a44c:	1a30      	subs	r0, r6, r0
        return i * scale;
 800a44e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800a452:	bf48      	it	mi
 800a454:	3003      	addmi	r0, #3
 800a456:	1080      	asrs	r0, r0, #2
 800a458:	4358      	muls	r0, r3
 800a45a:	2800      	cmp	r0, #0
 800a45c:	bfb8      	it	lt
 800a45e:	4240      	neglt	r0, r0
 800a460:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
    customGraphBase::graph1MajorXAxisGrid.setInterval((graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())/4);
 800a464:	4628      	mov	r0, r5
 800a466:	f7f8 fc8c 	bl	8002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 800a46a:	4606      	mov	r6, r0
 800a46c:	4628      	mov	r0, r5
 800a46e:	f7f8 fc61 	bl	8002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800a472:	1a30      	subs	r0, r6, r0
        setIntervalScaled(abs(interval) * dataScale);
 800a474:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
    customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 800a478:	f04f 021e 	mov.w	r2, #30
    customGraphBase::graph1MajorXAxisGrid.setInterval((graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())/4);
 800a47c:	bf48      	it	mi
 800a47e:	3003      	addmi	r0, #3
    customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 800a480:	2101      	movs	r1, #1
    customGraphBase::graph1MajorXAxisGrid.setInterval((graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())/4);
 800a482:	1080      	asrs	r0, r0, #2
 800a484:	4358      	muls	r0, r3
 800a486:	2800      	cmp	r0, #0
 800a488:	bfb8      	it	lt
 800a48a:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 800a48c:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
    customGraphBase::graph1.setGraphRangeYAutoScaled(true,30);
 800a490:	4628      	mov	r0, r5
 800a492:	f009 fc78 	bl	8013d86 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
    customGraphBase::graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a496:	4628      	mov	r0, r5
 800a498:	f7f8 fcc1 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a49c:	4606      	mov	r6, r0
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f7f8 fc96 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a4a4:	1a30      	subs	r0, r6, r0
 800a4a6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800a4aa:	bf48      	it	mi
 800a4ac:	3003      	addmi	r0, #3
 800a4ae:	1080      	asrs	r0, r0, #2
 800a4b0:	4358      	muls	r0, r3
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	bfb8      	it	lt
 800a4b6:	4240      	neglt	r0, r0
 800a4b8:	f8c7 023c 	str.w	r0, [r7, #572]	; 0x23c
    customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a4bc:	4628      	mov	r0, r5
 800a4be:	f7f8 fcae 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	f7f8 fc83 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a4ca:	1a30      	subs	r0, r6, r0
        setIntervalScaled(abs(interval) * dataScale);
 800a4cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
    customGraphBase::timeLabel1.setXY(graph1.indexToScreenX(findTimeLabelCoordinate(25))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a4d0:	f04f 0119 	mov.w	r1, #25
    customGraphBase::graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a4d4:	bf48      	it	mi
 800a4d6:	3003      	addmi	r0, #3
 800a4d8:	1080      	asrs	r0, r0, #2
 800a4da:	4358      	muls	r0, r3
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	bfb8      	it	lt
 800a4e0:	4240      	neglt	r0, r0
        gridInterval = abs(interval);
 800a4e2:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
    customGraphBase::timeLabel1.setXY(graph1.indexToScreenX(findTimeLabelCoordinate(25))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f7ff ff42 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
        return indexToScreenXQ5(index).round();
 800a4ec:	b201      	sxth	r1, r0
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7f8 fe1d 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a4f4:	9001      	str	r0, [sp, #4]
 800a4f6:	a801      	add	r0, sp, #4
 800a4f8:	f7ff ff2f 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a4fc:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 800a500:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
 800a504:	22b4      	movs	r2, #180	; 0xb4
 800a506:	1ac9      	subs	r1, r1, r3
 800a508:	4401      	add	r1, r0
 800a50a:	f504 509d 	add.w	r0, r4, #5024	; 0x13a0
 800a50e:	b209      	sxth	r1, r1
 800a510:	301c      	adds	r0, #28
 800a512:	f7f8 ffde 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
    customGraphBase::timeLabel2.setXY(graph1.indexToScreenX(findTimeLabelCoordinate(50))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a516:	2132      	movs	r1, #50	; 0x32
 800a518:	4620      	mov	r0, r4
 800a51a:	f7ff ff29 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a51e:	b201      	sxth	r1, r0
 800a520:	4628      	mov	r0, r5
 800a522:	f7f8 fe04 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a526:	9001      	str	r0, [sp, #4]
 800a528:	a801      	add	r0, sp, #4
 800a52a:	f7ff ff16 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a52e:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 800a532:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
 800a536:	22b4      	movs	r2, #180	; 0xb4
 800a538:	1ac9      	subs	r1, r1, r3
 800a53a:	4401      	add	r1, r0
 800a53c:	f504 509b 	add.w	r0, r4, #4960	; 0x1360
 800a540:	b209      	sxth	r1, r1
 800a542:	3014      	adds	r0, #20
 800a544:	f7f8 ffc5 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
    customGraphBase::timeLabel3.setXY(graph1.indexToScreenX(findTimeLabelCoordinate(75))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a548:	214b      	movs	r1, #75	; 0x4b
 800a54a:	4620      	mov	r0, r4
 800a54c:	f7ff ff10 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a550:	b201      	sxth	r1, r0
 800a552:	4628      	mov	r0, r5
 800a554:	f7f8 fdeb 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a558:	9001      	str	r0, [sp, #4]
 800a55a:	a801      	add	r0, sp, #4
 800a55c:	f7ff fefd 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a560:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 800a564:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
 800a568:	22b4      	movs	r2, #180	; 0xb4
 800a56a:	1ac9      	subs	r1, r1, r3
 800a56c:	4401      	add	r1, r0
 800a56e:	f504 5099 	add.w	r0, r4, #4896	; 0x1320
 800a572:	b209      	sxth	r1, r1
 800a574:	300c      	adds	r0, #12
 800a576:	f7f8 ffac 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
    customGraphBase::timeLabel4.setXY(graph1.indexToScreenX(findTimeLabelCoordinate(100)) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a57a:	2164      	movs	r1, #100	; 0x64
 800a57c:	4620      	mov	r0, r4
 800a57e:	f7ff fef7 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a582:	b201      	sxth	r1, r0
 800a584:	4628      	mov	r0, r5
 800a586:	f7f8 fdd2 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a58a:	9001      	str	r0, [sp, #4]
 800a58c:	a801      	add	r0, sp, #4
 800a58e:	f7ff fee4 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a592:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
 800a596:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 800a59a:	22b4      	movs	r2, #180	; 0xb4
 800a59c:	1ac9      	subs	r1, r1, r3
 800a59e:	4401      	add	r1, r0
 800a5a0:	f504 5097 	add.w	r0, r4, #4832	; 0x12e0
 800a5a4:	b209      	sxth	r1, r1
 800a5a6:	3004      	adds	r0, #4
 800a5a8:	f7f8 ff93 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
}
 800a5ac:	b003      	add	sp, #12
 800a5ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5b0 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 800a5b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a5b4:	466b      	mov	r3, sp
 800a5b6:	4605      	mov	r5, r0
			graph1.setGraphRangeX(0 + Counter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + Counter);
 800a5b8:	f100 0658 	add.w	r6, r0, #88	; 0x58
 800a5bc:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 800a5c0:	e883 0006 	stmia.w	r3, {r1, r2}
 800a5c4:	4613      	mov	r3, r2
        return dragNewX;
 800a5c6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 800a5ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && Counter>0){
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	da7b      	bge.n	800a6ca <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11a>
 800a5d2:	f8d4 7438 	ldr.w	r7, [r4, #1080]	; 0x438
 800a5d6:	2f00      	cmp	r7, #0
 800a5d8:	dd79      	ble.n	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
			Counter -= 1;
 800a5da:	3f01      	subs	r7, #1
			graph1.setGraphRangeX(0 + Counter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + Counter);
 800a5dc:	4630      	mov	r0, r6
			Counter -= 1;
 800a5de:	f8c4 7438 	str.w	r7, [r4, #1080]	; 0x438
			graph1.setGraphRangeX(0 + Counter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + Counter);
 800a5e2:	f7f8 fbce 	bl	8002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7f8 fba3 	bl	8002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800a5ee:	eba8 0000 	sub.w	r0, r8, r0
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	19c2      	adds	r2, r0, r7
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7f8 fa84 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,30);
 800a5fc:	221e      	movs	r2, #30
 800a5fe:	2101      	movs	r1, #1
 800a600:	4630      	mov	r0, r6
 800a602:	f009 fbc0 	bl	8013d86 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a606:	4630      	mov	r0, r6
 800a608:	f7f8 fc09 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a60c:	4607      	mov	r7, r0
 800a60e:	4630      	mov	r0, r6
 800a610:	f7f8 fbde 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a614:	1a38      	subs	r0, r7, r0
        return i * scale;
 800a616:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 800a61a:	bf48      	it	mi
 800a61c:	3003      	addmi	r0, #3
 800a61e:	1080      	asrs	r0, r0, #2
 800a620:	4358      	muls	r0, r3
 800a622:	2800      	cmp	r0, #0
 800a624:	bfb8      	it	lt
 800a626:	4240      	neglt	r0, r0
 800a628:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7f8 fbf6 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a632:	4607      	mov	r7, r0
 800a634:	4630      	mov	r0, r6
 800a636:	f7f8 fbcb 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a63a:	1a38      	subs	r0, r7, r0
        setIntervalScaled(abs(interval) * dataScale);
 800a63c:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 800a640:	bf48      	it	mi
 800a642:	3003      	addmi	r0, #3
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800a644:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
			if(timeLabel1.getX() >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight())
 800a648:	f9b5 10c4 	ldrsh.w	r1, [r5, #196]	; 0xc4
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a64c:	1080      	asrs	r0, r0, #2
 800a64e:	4358      	muls	r0, r3
 800a650:	f8b5 3170 	ldrh.w	r3, [r5, #368]	; 0x170
 800a654:	441a      	add	r2, r3
 800a656:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 800a65a:	2800      	cmp	r0, #0
 800a65c:	eba3 0302 	sub.w	r3, r3, r2
			if(timeLabel1.getX() >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight())
 800a660:	f9b5 205c 	ldrsh.w	r2, [r5, #92]	; 0x5c
 800a664:	bfb8      	it	lt
 800a666:	4240      	neglt	r0, r0
 800a668:	440a      	add	r2, r1
        gridInterval = abs(interval);
 800a66a:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
 800a66e:	fa02 f383 	sxtah	r3, r2, r3
 800a672:	f9b5 20f0 	ldrsh.w	r2, [r5, #240]	; 0xf0
 800a676:	1a9b      	subs	r3, r3, r2
 800a678:	f9b4 23c0 	ldrsh.w	r2, [r4, #960]	; 0x3c0
 800a67c:	429a      	cmp	r2, r3
 800a67e:	f280 80aa 	bge.w	800a7d6 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x226>
			if(timeLabel2.getX() >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight())
 800a682:	f9b4 2378 	ldrsh.w	r2, [r4, #888]	; 0x378
 800a686:	4293      	cmp	r3, r2
 800a688:	dc07      	bgt.n	800a69a <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xea>
				if(label2_pageCNTR > 0)
 800a68a:	f8d4 2440 	ldr.w	r2, [r4, #1088]	; 0x440
 800a68e:	2a00      	cmp	r2, #0
					label2_pageCNTR--;
 800a690:	bfc4      	itt	gt
 800a692:	f102 32ff 	addgt.w	r2, r2, #4294967295
 800a696:	f8c4 2440 	strgt.w	r2, [r4, #1088]	; 0x440
			if(timeLabel3.getX() >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight())
 800a69a:	f9b4 2330 	ldrsh.w	r2, [r4, #816]	; 0x330
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	dc07      	bgt.n	800a6b2 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x102>
				if(label3_pageCNTR > 0)
 800a6a2:	f8d4 2444 	ldr.w	r2, [r4, #1092]	; 0x444
 800a6a6:	2a00      	cmp	r2, #0
					label3_pageCNTR--;
 800a6a8:	bfc4      	itt	gt
 800a6aa:	f102 32ff 	addgt.w	r2, r2, #4294967295
 800a6ae:	f8c4 2444 	strgt.w	r2, [r4, #1092]	; 0x444
			if(timeLabel4.getX() >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight())
 800a6b2:	f9b4 22e8 	ldrsh.w	r2, [r4, #744]	; 0x2e8
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	dc09      	bgt.n	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
				if(label4_pageCNTR > 0)
 800a6ba:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	dd05      	ble.n	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
					label4_pageCNTR--;
 800a6c2:	3b01      	subs	r3, #1
				label4_pageCNTR++;
 800a6c4:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
 800a6c8:	e001      	b.n	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())+Counter<500){
 800a6ca:	f300 808d 	bgt.w	800a7e8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x238>
		timeLabel1.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label1_pageCNTR*100)+25))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a6ce:	f04f 0864 	mov.w	r8, #100	; 0x64
 800a6d2:	f8d4 143c 	ldr.w	r1, [r4, #1084]	; 0x43c
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 800a6dc:	fb08 f101 	mul.w	r1, r8, r1
 800a6e0:	3119      	adds	r1, #25
 800a6e2:	f7ff fe45 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
        return indexToScreenXQ5(index).round();
 800a6e6:	b201      	sxth	r1, r0
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f7f8 fd20 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a6ee:	9003      	str	r0, [sp, #12]
 800a6f0:	a803      	add	r0, sp, #12
 800a6f2:	f7ff fe32 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a6f6:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
 800a6fa:	22b4      	movs	r2, #180	; 0xb4
 800a6fc:	440f      	add	r7, r1
 800a6fe:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 800a702:	1a79      	subs	r1, r7, r1
 800a704:	4401      	add	r1, r0
 800a706:	f505 509d 	add.w	r0, r5, #5024	; 0x13a0
 800a70a:	b209      	sxth	r1, r1
 800a70c:	301c      	adds	r0, #28
 800a70e:	f7f7 ff0c 	bl	800252a <_ZN8touchgfx8Drawable6moveToEss>
		timeLabel2.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label2_pageCNTR*100)+50))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a712:	f8d4 1440 	ldr.w	r1, [r4, #1088]	; 0x440
 800a716:	4628      	mov	r0, r5
 800a718:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 800a71c:	fb08 f101 	mul.w	r1, r8, r1
 800a720:	3132      	adds	r1, #50	; 0x32
 800a722:	f7ff fe25 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a726:	b201      	sxth	r1, r0
 800a728:	4630      	mov	r0, r6
 800a72a:	f7f8 fd00 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a72e:	9003      	str	r0, [sp, #12]
 800a730:	a803      	add	r0, sp, #12
 800a732:	f7ff fe12 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a736:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
 800a73a:	22b4      	movs	r2, #180	; 0xb4
 800a73c:	440f      	add	r7, r1
 800a73e:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 800a742:	1a79      	subs	r1, r7, r1
 800a744:	4401      	add	r1, r0
 800a746:	f505 509b 	add.w	r0, r5, #4960	; 0x1360
 800a74a:	b209      	sxth	r1, r1
 800a74c:	3014      	adds	r0, #20
 800a74e:	f7f7 feec 	bl	800252a <_ZN8touchgfx8Drawable6moveToEss>
		timeLabel3.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label3_pageCNTR*100)+75))  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a752:	f8d4 1444 	ldr.w	r1, [r4, #1092]	; 0x444
 800a756:	4628      	mov	r0, r5
 800a758:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 800a75c:	fb08 f101 	mul.w	r1, r8, r1
 800a760:	314b      	adds	r1, #75	; 0x4b
 800a762:	f7ff fe05 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a766:	b201      	sxth	r1, r0
 800a768:	4630      	mov	r0, r6
 800a76a:	f7f8 fce0 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a76e:	9003      	str	r0, [sp, #12]
 800a770:	a803      	add	r0, sp, #12
 800a772:	f7ff fdf2 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a776:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
 800a77a:	22b4      	movs	r2, #180	; 0xb4
 800a77c:	440f      	add	r7, r1
 800a77e:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 800a782:	1a79      	subs	r1, r7, r1
 800a784:	4401      	add	r1, r0
 800a786:	f505 5099 	add.w	r0, r5, #4896	; 0x1320
 800a78a:	b209      	sxth	r1, r1
 800a78c:	300c      	adds	r0, #12
 800a78e:	f7f7 fecc 	bl	800252a <_ZN8touchgfx8Drawable6moveToEss>
		timeLabel4.moveTo(graph1.getX() + graph1.indexToScreenX(findTimeLabelCoordinate((label4_pageCNTR*100)+100)) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight(), 180);
 800a792:	f8d4 1448 	ldr.w	r1, [r4, #1096]	; 0x448
 800a796:	4628      	mov	r0, r5
 800a798:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
 800a79c:	fb01 8108 	mla	r1, r1, r8, r8
 800a7a0:	f7ff fde6 	bl	800a370 <_ZN11customGraph23findTimeLabelCoordinateEi>
 800a7a4:	b201      	sxth	r1, r0
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	f7f8 fcc1 	bl	800312e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>
 800a7ac:	9003      	str	r0, [sp, #12]
 800a7ae:	a803      	add	r0, sp, #12
 800a7b0:	f7ff fdd3 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800a7b4:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
 800a7b8:	22b4      	movs	r2, #180	; 0xb4
 800a7ba:	440f      	add	r7, r1
 800a7bc:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 800a7c0:	1a79      	subs	r1, r7, r1
 800a7c2:	4401      	add	r1, r0
 800a7c4:	f505 5097 	add.w	r0, r5, #4832	; 0x12e0
 800a7c8:	b209      	sxth	r1, r1
 800a7ca:	3004      	adds	r0, #4
 800a7cc:	f7f7 fead 	bl	800252a <_ZN8touchgfx8Drawable6moveToEss>
	}
 800a7d0:	b004      	add	sp, #16
 800a7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if(label1_pageCNTR > 0)
 800a7d6:	f8d4 243c 	ldr.w	r2, [r4, #1084]	; 0x43c
 800a7da:	2a00      	cmp	r2, #0
					label1_pageCNTR--;
 800a7dc:	bfc4      	itt	gt
 800a7de:	f102 32ff 	addgt.w	r2, r2, #4294967295
 800a7e2:	f8c4 243c 	strgt.w	r2, [r4, #1084]	; 0x43c
 800a7e6:	e74c      	b.n	800a682 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xd2>
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt())+Counter<500){
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f7f8 faca 	bl	8002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 800a7ee:	4607      	mov	r7, r0
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7f8 fa9f 	bl	8002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800a7f6:	f8d4 1438 	ldr.w	r1, [r4, #1080]	; 0x438
 800a7fa:	1a38      	subs	r0, r7, r0
 800a7fc:	4408      	add	r0, r1
 800a7fe:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800a802:	f6bf af64 	bge.w	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
			Counter += 1;
 800a806:	1c4f      	adds	r7, r1, #1
			graph1.setGraphRangeX(0 + Counter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + Counter);
 800a808:	4630      	mov	r0, r6
			Counter += 1;
 800a80a:	f8c4 7438 	str.w	r7, [r4, #1080]	; 0x438
			graph1.setGraphRangeX(0 + Counter, (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + Counter);
 800a80e:	f7f8 fab8 	bl	8002d82 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
 800a812:	4680      	mov	r8, r0
 800a814:	4630      	mov	r0, r6
 800a816:	f7f8 fa8d 	bl	8002d34 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>
 800a81a:	eba8 0000 	sub.w	r0, r8, r0
 800a81e:	4639      	mov	r1, r7
 800a820:	19c2      	adds	r2, r0, r7
 800a822:	4630      	mov	r0, r6
 800a824:	f7f8 f96e 	bl	8002b04 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
			graph1.setGraphRangeYAutoScaled(true,30);
 800a828:	221e      	movs	r2, #30
 800a82a:	2101      	movs	r1, #1
 800a82c:	4630      	mov	r0, r6
 800a82e:	f009 faaa 	bl	8013d86 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>
			graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a832:	4630      	mov	r0, r6
 800a834:	f7f8 faf3 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a838:	4607      	mov	r7, r0
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7f8 fac8 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a840:	1a38      	subs	r0, r7, r0
        return i * scale;
 800a842:	f8d4 3238 	ldr.w	r3, [r4, #568]	; 0x238
 800a846:	bf48      	it	mi
 800a848:	3003      	addmi	r0, #3
 800a84a:	1080      	asrs	r0, r0, #2
 800a84c:	4358      	muls	r0, r3
 800a84e:	2800      	cmp	r0, #0
 800a850:	bfb8      	it	lt
 800a852:	4240      	neglt	r0, r0
 800a854:	f8c4 023c 	str.w	r0, [r4, #572]	; 0x23c
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a858:	4630      	mov	r0, r6
 800a85a:	f7f8 fae0 	bl	8002e1e <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800a85e:	4607      	mov	r7, r0
 800a860:	4630      	mov	r0, r6
 800a862:	f7f8 fab5 	bl	8002dd0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800a866:	1a38      	subs	r0, r7, r0
        setIntervalScaled(abs(interval) * dataScale);
 800a868:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
 800a86c:	bf48      	it	mi
 800a86e:	3003      	addmi	r0, #3
			if(timeLabel1.getX() <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight())
 800a870:	f9b5 20c4 	ldrsh.w	r2, [r5, #196]	; 0xc4
			graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/4);
 800a874:	1080      	asrs	r0, r0, #2
 800a876:	4358      	muls	r0, r3
			if(timeLabel1.getX() <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight())
 800a878:	f9b5 305c 	ldrsh.w	r3, [r5, #92]	; 0x5c
 800a87c:	4413      	add	r3, r2
 800a87e:	f9b5 20f0 	ldrsh.w	r2, [r5, #240]	; 0xf0
 800a882:	2800      	cmp	r0, #0
 800a884:	eba3 0302 	sub.w	r3, r3, r2
 800a888:	f9b4 23c0 	ldrsh.w	r2, [r4, #960]	; 0x3c0
 800a88c:	bfb8      	it	lt
 800a88e:	4240      	neglt	r0, r0
 800a890:	429a      	cmp	r2, r3
        gridInterval = abs(interval);
 800a892:	f8c4 01b0 	str.w	r0, [r4, #432]	; 0x1b0
				label1_pageCNTR++;
 800a896:	bfde      	ittt	le
 800a898:	f8d4 243c 	ldrle.w	r2, [r4, #1084]	; 0x43c
 800a89c:	3201      	addle	r2, #1
 800a89e:	f8c4 243c 	strle.w	r2, [r4, #1084]	; 0x43c
			if(timeLabel2.getX() <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight())
 800a8a2:	f9b4 2378 	ldrsh.w	r2, [r4, #888]	; 0x378
 800a8a6:	4293      	cmp	r3, r2
				label2_pageCNTR++;
 800a8a8:	bfa2      	ittt	ge
 800a8aa:	f8d4 2440 	ldrge.w	r2, [r4, #1088]	; 0x440
 800a8ae:	3201      	addge	r2, #1
 800a8b0:	f8c4 2440 	strge.w	r2, [r4, #1088]	; 0x440
			if(timeLabel3.getX() <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight())
 800a8b4:	f9b4 2330 	ldrsh.w	r2, [r4, #816]	; 0x330
 800a8b8:	4293      	cmp	r3, r2
				label3_pageCNTR++;
 800a8ba:	bfa2      	ittt	ge
 800a8bc:	f8d4 2444 	ldrge.w	r2, [r4, #1092]	; 0x444
 800a8c0:	3201      	addge	r2, #1
 800a8c2:	f8c4 2444 	strge.w	r2, [r4, #1092]	; 0x444
			if(timeLabel4.getX() <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight())
 800a8c6:	f9b4 22e8 	ldrsh.w	r2, [r4, #744]	; 0x2e8
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f6ff aeff 	blt.w	800a6ce <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x11e>
				label4_pageCNTR++;
 800a8d0:	f8d4 3448 	ldr.w	r3, [r4, #1096]	; 0x448
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	e6f5      	b.n	800a6c4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x114>

0800a8d8 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a8d8:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800a8da:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 800a8de:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 800a8e0:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800a8e6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800a8ea:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 800a8ee:	4770      	bx	lr

0800a8f0 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 800a8f0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800a8f4:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800a8f6:	bf04      	itt	eq
 800a8f8:	2300      	moveq	r3, #0
 800a8fa:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 800a8fe:	2000      	movs	r0, #0
 800a900:	4770      	bx	lr

0800a902 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800a902:	2000      	movs	r0, #0
 800a904:	4770      	bx	lr

0800a906 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a906:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a908:	6904      	ldr	r4, [r0, #16]
 800a90a:	8900      	ldrh	r0, [r0, #8]
 800a90c:	46a4      	mov	ip, r4
}
 800a90e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a912:	4760      	bx	ip

0800a914 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a914:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a916:	68c4      	ldr	r4, [r0, #12]
 800a918:	8900      	ldrh	r0, [r0, #8]
 800a91a:	46a4      	mov	ip, r4
}
 800a91c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a920:	4760      	bx	ip

0800a922 <FT6X06_GestureConfig>:
{
 800a922:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a926:	f100 0818 	add.w	r8, r0, #24
{
 800a92a:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a92c:	7809      	ldrb	r1, [r1, #0]
 800a92e:	4640      	mov	r0, r8
 800a930:	f000 f918 	bl	800ab64 <ft6x06_radian_value>
 800a934:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a936:	f899 1004 	ldrb.w	r1, [r9, #4]
 800a93a:	4640      	mov	r0, r8
 800a93c:	f000 f91e 	bl	800ab7c <ft6x06_offset_left_right>
 800a940:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a942:	f899 1008 	ldrb.w	r1, [r9, #8]
 800a946:	4640      	mov	r0, r8
 800a948:	f000 f924 	bl	800ab94 <ft6x06_offset_up_down>
 800a94c:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a94e:	f899 100c 	ldrb.w	r1, [r9, #12]
 800a952:	4640      	mov	r0, r8
 800a954:	f000 f92a 	bl	800abac <ft6x06_disatnce_left_right>
 800a958:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a95a:	f899 1010 	ldrb.w	r1, [r9, #16]
 800a95e:	4640      	mov	r0, r8
 800a960:	f000 f930 	bl	800abc4 <ft6x06_distance_up_down>
 800a964:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a966:	f899 1014 	ldrb.w	r1, [r9, #20]
 800a96a:	4640      	mov	r0, r8
 800a96c:	f000 f936 	bl	800abdc <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 800a970:	42c5      	cmn	r5, r0
}
 800a972:	bf14      	ite	ne
 800a974:	f04f 30ff 	movne.w	r0, #4294967295
 800a978:	2000      	moveq	r0, #0
 800a97a:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

0800a97e <FT6X06_ReadID>:
{
 800a97e:	b513      	push	{r0, r1, r4, lr}
 800a980:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 800a982:	3018      	adds	r0, #24
 800a984:	f10d 0107 	add.w	r1, sp, #7
 800a988:	f000 f940 	bl	800ac0c <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800a98c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a990:	6023      	str	r3, [r4, #0]
}
 800a992:	b002      	add	sp, #8
 800a994:	bd10      	pop	{r4, pc}

0800a996 <FT6X06_GetState>:
{
 800a996:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800a998:	f100 0518 	add.w	r5, r0, #24
{
 800a99c:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800a99e:	a901      	add	r1, sp, #4
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	f000 f8d2 	bl	800ab4a <ft6x06_td_status>
 800a9a6:	bb08      	cbnz	r0, 800a9ec <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800a9a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	bf98      	it	ls
 800a9b0:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800a9b2:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800a9b4:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800a9b6:	2103      	movs	r1, #3
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	eb0d 0203 	add.w	r2, sp, r3
 800a9be:	f000 f8b1 	bl	800ab24 <ft6x06_read_reg>
 800a9c2:	b9b0      	cbnz	r0, 800a9f2 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800a9c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a9c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a9cc:	021b      	lsls	r3, r3, #8
 800a9ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a9d2:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800a9d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800a9d8:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800a9da:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	60a3      	str	r3, [r4, #8]
}
 800a9e8:	b003      	add	sp, #12
 800a9ea:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f0:	e7df      	b.n	800a9b2 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 800a9f2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800a9f6:	e7f7      	b.n	800a9e8 <FT6X06_GetState+0x52>

0800a9f8 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800a9f8:	3018      	adds	r0, #24
 800a9fa:	f000 b8a1 	b.w	800ab40 <ft6x06_gest_id>

0800a9fe <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 800a9fe:	2101      	movs	r1, #1
 800aa00:	3018      	adds	r0, #24
 800aa02:	f000 b8f7 	b.w	800abf4 <ft6x06_g_mode>

0800aa06 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800aa06:	2100      	movs	r1, #0
 800aa08:	3018      	adds	r0, #24
 800aa0a:	f000 b8f3 	b.w	800abf4 <ft6x06_g_mode>

0800aa0e <FT6X06_Init>:
{
 800aa0e:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 800aa10:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800aa14:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800aa16:	b96b      	cbnz	r3, 800aa34 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800aa18:	6803      	ldr	r3, [r0, #0]
 800aa1a:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7ff fff2 	bl	800aa06 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 800aa22:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 800aa24:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800aa28:	bf18      	it	ne
 800aa2a:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 800aa2c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 800aa30:	4240      	negs	r0, r0
}
 800aa32:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 800aa34:	2000      	movs	r0, #0
  return ret;
 800aa36:	e7fc      	b.n	800aa32 <FT6X06_Init+0x24>

0800aa38 <FT6X06_ClearIT>:
 800aa38:	2000      	movs	r0, #0
 800aa3a:	4770      	bx	lr

0800aa3c <FT6X06_GetMultiTouchState>:
{
 800aa3c:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800aa3e:	f100 0518 	add.w	r5, r0, #24
{
 800aa42:	b085      	sub	sp, #20
 800aa44:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800aa46:	4628      	mov	r0, r5
 800aa48:	a901      	add	r1, sp, #4
 800aa4a:	f000 f87e 	bl	800ab4a <ft6x06_td_status>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d145      	bne.n	800aade <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800aa52:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	bf98      	it	ls
 800aa5a:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800aa5c:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800aa5e:	230c      	movs	r3, #12
 800aa60:	aa01      	add	r2, sp, #4
 800aa62:	2103      	movs	r1, #3
 800aa64:	4628      	mov	r0, r5
 800aa66:	f000 f85d 	bl	800ab24 <ft6x06_read_reg>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d13a      	bne.n	800aae4 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800aa6e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800aa72:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800aa76:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800aa78:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800aa7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800aa7e:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800aa80:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800aa82:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aa86:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800aa8a:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800aa8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aa90:	021b      	lsls	r3, r3, #8
 800aa92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aa96:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aa98:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800aa9c:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 800aa9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800aaa2:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 800aaa4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aaac:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800aaae:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800aab4:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aab6:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800aab8:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800aabc:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800aabe:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800aacc:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800aad0:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 800aad2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800aad6:	091b      	lsrs	r3, r3, #4
 800aad8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800aada:	b005      	add	sp, #20
 800aadc:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	e7bb      	b.n	800aa5c <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 800aae4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800aae8:	e7f7      	b.n	800aada <FT6X06_GetMultiTouchState+0x9e>
	...

0800aaec <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 800aaec:	b190      	cbz	r0, 800ab14 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 800aaee:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 800aaf0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800aaf2:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 800aaf4:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800aaf6:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800aaf8:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800aafa:	68ca      	ldr	r2, [r1, #12]
 800aafc:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800aafe:	690a      	ldr	r2, [r1, #16]
 800ab00:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800ab02:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 800ab04:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800ab06:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800ab08:	4a04      	ldr	r2, [pc, #16]	; (800ab1c <FT6X06_RegisterBusIO+0x30>)
 800ab0a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800ab0c:	4a04      	ldr	r2, [pc, #16]	; (800ab20 <FT6X06_RegisterBusIO+0x34>)
 800ab0e:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 800ab10:	b103      	cbz	r3, 800ab14 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 800ab12:	4718      	bx	r3
}
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	0800a907 	.word	0x0800a907
 800ab20:	0800a915 	.word	0x0800a915

0800ab24 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800ab24:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ab26:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800ab2a:	46a4      	mov	ip, r4
}
 800ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800ab30:	4760      	bx	ip

0800ab32 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800ab32:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ab34:	6804      	ldr	r4, [r0, #0]
 800ab36:	6880      	ldr	r0, [r0, #8]
 800ab38:	46a4      	mov	ip, r4
}
 800ab3a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800ab3e:	4760      	bx	ip

0800ab40 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800ab40:	2301      	movs	r3, #1
{
 800ab42:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800ab44:	4619      	mov	r1, r3
 800ab46:	f7ff bfed 	b.w	800ab24 <ft6x06_read_reg>

0800ab4a <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800ab4a:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800ab4c:	460a      	mov	r2, r1
{
 800ab4e:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800ab50:	2301      	movs	r3, #1
 800ab52:	2102      	movs	r1, #2
 800ab54:	f7ff ffe6 	bl	800ab24 <ft6x06_read_reg>
  
  if(ret == 0)
 800ab58:	b918      	cbnz	r0, 800ab62 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800ab5a:	7823      	ldrb	r3, [r4, #0]
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800ab62:	bd10      	pop	{r4, pc}

0800ab64 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 800ab64:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800ab66:	2301      	movs	r3, #1
{
 800ab68:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 800ab6c:	f10d 0207 	add.w	r2, sp, #7
 800ab70:	2191      	movs	r1, #145	; 0x91
 800ab72:	f7ff ffde 	bl	800ab32 <ft6x06_write_reg>
}
 800ab76:	b003      	add	sp, #12
 800ab78:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab7c <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800ab7c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800ab7e:	2301      	movs	r3, #1
{
 800ab80:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800ab84:	f10d 0207 	add.w	r2, sp, #7
 800ab88:	2192      	movs	r1, #146	; 0x92
 800ab8a:	f7ff ffd2 	bl	800ab32 <ft6x06_write_reg>
}
 800ab8e:	b003      	add	sp, #12
 800ab90:	f85d fb04 	ldr.w	pc, [sp], #4

0800ab94 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800ab94:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800ab96:	2301      	movs	r3, #1
{
 800ab98:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800ab9c:	f10d 0207 	add.w	r2, sp, #7
 800aba0:	2193      	movs	r1, #147	; 0x93
 800aba2:	f7ff ffc6 	bl	800ab32 <ft6x06_write_reg>
}
 800aba6:	b003      	add	sp, #12
 800aba8:	f85d fb04 	ldr.w	pc, [sp], #4

0800abac <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 800abac:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800abae:	2301      	movs	r3, #1
{
 800abb0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800abb4:	f10d 0207 	add.w	r2, sp, #7
 800abb8:	2194      	movs	r1, #148	; 0x94
 800abba:	f7ff ffba 	bl	800ab32 <ft6x06_write_reg>
}
 800abbe:	b003      	add	sp, #12
 800abc0:	f85d fb04 	ldr.w	pc, [sp], #4

0800abc4 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 800abc4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800abc6:	2301      	movs	r3, #1
{
 800abc8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800abcc:	f10d 0207 	add.w	r2, sp, #7
 800abd0:	2195      	movs	r1, #149	; 0x95
 800abd2:	f7ff ffae 	bl	800ab32 <ft6x06_write_reg>
}
 800abd6:	b003      	add	sp, #12
 800abd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800abdc <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 800abdc:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800abde:	2301      	movs	r3, #1
{
 800abe0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800abe4:	f10d 0207 	add.w	r2, sp, #7
 800abe8:	2196      	movs	r1, #150	; 0x96
 800abea:	f7ff ffa2 	bl	800ab32 <ft6x06_write_reg>
}
 800abee:	b003      	add	sp, #12
 800abf0:	f85d fb04 	ldr.w	pc, [sp], #4

0800abf4 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 800abf4:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800abf6:	2301      	movs	r3, #1
{
 800abf8:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800abfc:	f10d 0207 	add.w	r2, sp, #7
 800ac00:	21a4      	movs	r1, #164	; 0xa4
 800ac02:	f7ff ff96 	bl	800ab32 <ft6x06_write_reg>
}
 800ac06:	b003      	add	sp, #12
 800ac08:	f85d fb04 	ldr.w	pc, [sp], #4

0800ac0c <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800ac0c:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 800ac0e:	2301      	movs	r3, #1
 800ac10:	21a8      	movs	r1, #168	; 0xa8
 800ac12:	f7ff bf87 	b.w	800ab24 <ft6x06_read_reg>
	...

0800ac18 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800ac18:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 800ac1e:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 800ac22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800ac24:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800ac26:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800ac28:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800ac2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac2e:	f005 f961 	bl	800fef4 <HAL_SDRAM_SendCommand>
 800ac32:	3800      	subs	r0, #0
 800ac34:	bf18      	it	ne
 800ac36:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800ac38:	4240      	negs	r0, r0
 800ac3a:	bd08      	pop	{r3, pc}
 800ac3c:	240066f4 	.word	0x240066f4

0800ac40 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800ac40:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 800ac42:	2202      	movs	r2, #2
 800ac44:	4b08      	ldr	r3, [pc, #32]	; (800ac68 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800ac46:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800ac52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac56:	4619      	mov	r1, r3
 800ac58:	f005 f94c 	bl	800fef4 <HAL_SDRAM_SendCommand>
 800ac5c:	3800      	subs	r0, #0
 800ac5e:	bf18      	it	ne
 800ac60:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800ac62:	4240      	negs	r0, r0
 800ac64:	bd08      	pop	{r3, pc}
 800ac66:	bf00      	nop
 800ac68:	240066f4 	.word	0x240066f4

0800ac6c <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ac6c:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 800ac70:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ac72:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 800ac74:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800ac76:	4c0b      	ldr	r4, [pc, #44]	; (800aca4 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 800ac78:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 800ac7a:	698a      	ldr	r2, [r1, #24]
 800ac7c:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800ac7e:	69ca      	ldr	r2, [r1, #28]
 800ac80:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 800ac82:	2204      	movs	r2, #4
 800ac84:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800ac86:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800ac88:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 800ac8a:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 800ac8c:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 800ac8e:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800ac92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac96:	f005 f92d 	bl	800fef4 <HAL_SDRAM_SendCommand>
 800ac9a:	3800      	subs	r0, #0
 800ac9c:	bf18      	it	ne
 800ac9e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800aca0:	4240      	negs	r0, r0
 800aca2:	bd10      	pop	{r4, pc}
 800aca4:	240066f4 	.word	0x240066f4

0800aca8 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800aca8:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800acaa:	4b08      	ldr	r3, [pc, #32]	; (800accc <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 800acac:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800acb0:	2108      	movs	r1, #8
 800acb2:	2200      	movs	r2, #0
 800acb4:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800acb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acbc:	4619      	mov	r1, r3
 800acbe:	f005 f919 	bl	800fef4 <HAL_SDRAM_SendCommand>
 800acc2:	3800      	subs	r0, #0
 800acc4:	bf18      	it	ne
 800acc6:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800acc8:	4240      	negs	r0, r0
 800acca:	bd08      	pop	{r3, pc}
 800accc:	240066f4 	.word	0x240066f4

0800acd0 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800acd0:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800acd2:	f005 f92e 	bl	800ff32 <HAL_SDRAM_ProgramRefreshRate>
 800acd6:	3800      	subs	r0, #0
 800acd8:	bf18      	it	ne
 800acda:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800acdc:	4240      	negs	r0, r0
 800acde:	bd08      	pop	{r3, pc}

0800ace0 <IS42S32800J_Init>:
{
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800ace4:	6809      	ldr	r1, [r1, #0]
{
 800ace6:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800ace8:	f7ff ff96 	bl	800ac18 <IS42S32800J_ClockEnable>
 800acec:	b110      	cbz	r0, 800acf4 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 800acee:	f04f 30ff 	mov.w	r0, #4294967295
}
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800acf4:	f001 fc98 	bl	800c628 <HAL_GetTick>
 800acf8:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800acfa:	f001 fc95 	bl	800c628 <HAL_GetTick>
 800acfe:	4286      	cmp	r6, r0
 800ad00:	d0fb      	beq.n	800acfa <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800ad02:	6821      	ldr	r1, [r4, #0]
 800ad04:	4628      	mov	r0, r5
 800ad06:	f7ff ff9b 	bl	800ac40 <IS42S32800J_Precharge>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d1ef      	bne.n	800acee <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 800ad0e:	4628      	mov	r0, r5
 800ad10:	e9d4 1200 	ldrd	r1, r2, [r4]
 800ad14:	f7ff ffc8 	bl	800aca8 <IS42S32800J_RefreshMode>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d1e8      	bne.n	800acee <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4628      	mov	r0, r5
 800ad20:	f7ff ffa4 	bl	800ac6c <IS42S32800J_ModeRegConfig>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d1e2      	bne.n	800acee <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800ad28:	68a1      	ldr	r1, [r4, #8]
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f7ff ffd0 	bl	800acd0 <IS42S32800J_RefreshRate>
 800ad30:	3800      	subs	r0, #0
 800ad32:	bf18      	it	ne
 800ad34:	2001      	movne	r0, #1
 800ad36:	4240      	negs	r0, r0
  return ret;
 800ad38:	e7db      	b.n	800acf2 <IS42S32800J_Init+0x12>

0800ad3a <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ad3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ad42:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800ad46:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800ad4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad4e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800ad52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ad56:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 800ad58:	2000      	movs	r0, #0
 800ad5a:	4770      	bx	lr

0800ad5c <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad5c:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad5e:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 800ad62:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad64:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad68:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ad6a:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad6c:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 800ad6e:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800ad70:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ad72:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 800ad74:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad76:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad78:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 800ad7a:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800ad7c:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 800ad7e:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad80:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad82:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ad86:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 800ad8a:	2310      	movs	r3, #16
 800ad8c:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ad8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad92:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800ad94:	f240 1301 	movw	r3, #257	; 0x101
 800ad98:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ad9a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad9e:	f003 fc88 	bl	800e6b2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ada2:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 800ada4:	bf14      	ite	ne
 800ada6:	f06f 0004 	mvnne.w	r0, #4
 800adaa:	2000      	moveq	r0, #0
 800adac:	b015      	add	sp, #84	; 0x54
 800adae:	f85d fb04 	ldr.w	pc, [sp], #4

0800adb2 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800adb2:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800adb4:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800adb8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800adba:	bf08      	it	eq
 800adbc:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800adc0:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800adc2:	bf18      	it	ne
 800adc4:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 800adc8:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800adca:	a906      	add	r1, sp, #24
{
 800adcc:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800adce:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800add0:	2306      	movs	r3, #6
 800add2:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800add4:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800add6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800adda:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 800addc:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800adde:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ade0:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ade4:	f003 fb6a 	bl	800e4bc <HAL_QSPI_Command>
 800ade8:	bb20      	cbnz	r0, 800ae34 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800adea:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 800adee:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800adf0:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800adf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800adf6:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800adf8:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800adfa:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 800adfe:	f04f 0310 	mov.w	r3, #16
 800ae02:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ae06:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae0a:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ae0c:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ae10:	bf0c      	ite	eq
 800ae12:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 800ae16:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae1a:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ae1c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae1e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae22:	f003 fc46 	bl	800e6b2 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ae26:	2800      	cmp	r0, #0
 800ae28:	bf0c      	ite	eq
 800ae2a:	2000      	moveq	r0, #0
 800ae2c:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 800ae30:	b015      	add	sp, #84	; 0x54
 800ae32:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 800ae34:	f06f 0001 	mvn.w	r0, #1
 800ae38:	e7fa      	b.n	800ae30 <MT25TL01G_WriteEnable+0x7e>

0800ae3a <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ae3a:	2903      	cmp	r1, #3
{
 800ae3c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ae3e:	bf08      	it	eq
 800ae40:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800ae44:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ae46:	bf18      	it	ne
 800ae48:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 800ae4c:	4604      	mov	r4, r0
 800ae4e:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ae50:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800ae52:	23b7      	movs	r3, #183	; 0xb7
 800ae54:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ae56:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ae58:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800ae5e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ae60:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ae62:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800ae66:	f7ff ffa4 	bl	800adb2 <MT25TL01G_WriteEnable>
 800ae6a:	b958      	cbnz	r0, 800ae84 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae70:	4669      	mov	r1, sp
 800ae72:	4620      	mov	r0, r4
 800ae74:	f003 fb22 	bl	800e4bc <HAL_QSPI_Command>
 800ae78:	b920      	cbnz	r0, 800ae84 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff ff6d 	bl	800ad5c <MT25TL01G_AutoPollingMemReady>
 800ae82:	b108      	cbz	r0, 800ae88 <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 800ae84:	f06f 0001 	mvn.w	r0, #1
}
 800ae88:	b00f      	add	sp, #60	; 0x3c
 800ae8a:	bd30      	pop	{r4, r5, pc}

0800ae8c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ae8c:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ae8e:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800ae92:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae94:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ae98:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ae9a:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae9c:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ae9e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aea0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aea2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800aea6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800aea8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aeaa:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aeac:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aeb0:	f003 fb04 	bl	800e4bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aeb4:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800aeb6:	bf14      	ite	ne
 800aeb8:	f06f 0001 	mvnne.w	r0, #1
 800aebc:	2000      	moveq	r0, #0
 800aebe:	b00f      	add	sp, #60	; 0x3c
 800aec0:	f85d fb04 	ldr.w	pc, [sp], #4

0800aec4 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800aec4:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aec6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800aeca:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aecc:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aed0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800aed2:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aed4:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800aed6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aed8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aeda:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800aede:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800aee0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aee2:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aee4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aee8:	f003 fae8 	bl	800e4bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aeec:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800aeee:	bf14      	ite	ne
 800aef0:	f06f 0001 	mvnne.w	r0, #1
 800aef4:	2000      	moveq	r0, #0
 800aef6:	b00f      	add	sp, #60	; 0x3c
 800aef8:	f85d fb04 	ldr.w	pc, [sp], #4

0800aefc <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800aefc:	b500      	push	{lr}
 800aefe:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800af00:	2903      	cmp	r1, #3
 800af02:	d80e      	bhi.n	800af22 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800af04:	e8df f001 	tbb	[pc, r1]
 800af08:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af10:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800af12:	230e      	movs	r3, #14
 800af14:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800af16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af1a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800af1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800af20:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800af22:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800af24:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800af28:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800af2c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800af2e:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800af30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800af34:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800af36:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800af38:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800af3c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800af3e:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800af40:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800af42:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800af46:	f003 fc04 	bl	800e752 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800af4a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800af4c:	bf14      	ite	ne
 800af4e:	f06f 0005 	mvnne.w	r0, #5
 800af52:	2000      	moveq	r0, #0
 800af54:	b011      	add	sp, #68	; 0x44
 800af56:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af5e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800af60:	233d      	movs	r3, #61	; 0x3d
 800af62:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800af64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af68:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800af6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af6e:	e7d7      	b.n	800af20 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800af70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af74:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800af76:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800af78:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800af7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800af80:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800af84:	e7cc      	b.n	800af20 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800af86:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af8a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800af8c:	23ed      	movs	r3, #237	; 0xed
 800af8e:	e7f3      	b.n	800af78 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800af90 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800af90:	b500      	push	{lr}
 800af92:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800af94:	2903      	cmp	r1, #3
 800af96:	d80e      	bhi.n	800afb6 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800af98:	e8df f001 	tbb	[pc, r1]
 800af9c:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800afa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800afa6:	230c      	movs	r3, #12
 800afa8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800afaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afae:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800afb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800afb4:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800afb6:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800afb8:	466a      	mov	r2, sp
 800afba:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800afbc:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800afbe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800afc2:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800afc4:	2300      	movs	r3, #0
 800afc6:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800afc8:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800afca:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800afce:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800afd2:	f003 fbbe 	bl	800e752 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800afd6:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800afd8:	bf14      	ite	ne
 800afda:	f06f 0005 	mvnne.w	r0, #5
 800afde:	2000      	moveq	r0, #0
 800afe0:	b011      	add	sp, #68	; 0x44
 800afe2:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800afe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afea:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800afec:	23bc      	movs	r3, #188	; 0xbc
 800afee:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800aff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aff4:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800aff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800affa:	e7db      	b.n	800afb4 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800affc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b000:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800b002:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b004:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800b006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b00a:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800b00c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b010:	e7d0      	b.n	800afb4 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800b012:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b016:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800b018:	23eb      	movs	r3, #235	; 0xeb
 800b01a:	e7f3      	b.n	800b004 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

0800b01c <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b01c:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b01e:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800b022:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b024:	bf08      	it	eq
 800b026:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800b02a:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b02c:	bf18      	it	ne
 800b02e:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b032:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b034:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800b036:	2366      	movs	r3, #102	; 0x66
 800b038:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b03a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b03c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800b040:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800b042:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b044:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b046:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b04a:	f003 fa37 	bl	800e4bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b04e:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800b050:	bf14      	ite	ne
 800b052:	f06f 0001 	mvnne.w	r0, #1
 800b056:	2000      	moveq	r0, #0
 800b058:	b00f      	add	sp, #60	; 0x3c
 800b05a:	f85d fb04 	ldr.w	pc, [sp], #4

0800b05e <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b05e:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800b064:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b066:	bf08      	it	eq
 800b068:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800b06c:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b06e:	bf18      	it	ne
 800b070:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b074:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800b076:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800b078:	2399      	movs	r3, #153	; 0x99
 800b07a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800b07c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800b07e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800b082:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800b084:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800b086:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800b088:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b08c:	f003 fa16 	bl	800e4bc <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 800b090:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800b092:	bf14      	ite	ne
 800b094:	f06f 0001 	mvnne.w	r0, #1
 800b098:	2000      	moveq	r0, #0
 800b09a:	b00f      	add	sp, #60	; 0x3c
 800b09c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b0a0 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800b0a0:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800b0a2:	6884      	ldr	r4, [r0, #8]
 800b0a4:	8800      	ldrh	r0, [r0, #0]
 800b0a6:	46a4      	mov	ip, r4
}
 800b0a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800b0ac:	4760      	bx	ip

0800b0ae <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b0ae:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800b0b0:	6844      	ldr	r4, [r0, #4]
 800b0b2:	8800      	ldrh	r0, [r0, #0]
 800b0b4:	46a4      	mov	ip, r4
}
 800b0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800b0ba:	4760      	bx	ip

0800b0bc <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800b0bc:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800b0be:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 800b0c4:	4798      	blx	r3
 800b0c6:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800b0c8:	68e3      	ldr	r3, [r4, #12]
 800b0ca:	4798      	blx	r3
 800b0cc:	1b83      	subs	r3, r0, r6
 800b0ce:	42ab      	cmp	r3, r5
 800b0d0:	d3fa      	bcc.n	800b0c8 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}

0800b0d4 <OTM8009A_Init>:
{
 800b0d4:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b0d8:	2300      	movs	r3, #0
 800b0da:	f100 0810 	add.w	r8, r0, #16
{
 800b0de:	4682      	mov	sl, r0
 800b0e0:	4689      	mov	r9, r1
 800b0e2:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	4add      	ldr	r2, [pc, #884]	; (800b45c <OTM8009A_Init+0x388>)
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	f000 fbad 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800b0ee:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b0f0:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800b0f2:	4adb      	ldr	r2, [pc, #876]	; (800b460 <OTM8009A_Init+0x38c>)
 800b0f4:	21ff      	movs	r1, #255	; 0xff
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	f000 fba6 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b0fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800b0fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b100:	4ad8      	ldr	r2, [pc, #864]	; (800b464 <OTM8009A_Init+0x390>)
 800b102:	4619      	mov	r1, r3
 800b104:	4640      	mov	r0, r8
 800b106:	f000 fb9f 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800b10a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b10c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800b10e:	4ad6      	ldr	r2, [pc, #856]	; (800b468 <OTM8009A_Init+0x394>)
 800b110:	21ff      	movs	r1, #255	; 0xff
 800b112:	4640      	mov	r0, r8
 800b114:	f000 fb98 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b118:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800b11a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b11c:	4ad1      	ldr	r2, [pc, #836]	; (800b464 <OTM8009A_Init+0x390>)
 800b11e:	4619      	mov	r1, r3
 800b120:	4640      	mov	r0, r8
 800b122:	f000 fb91 	bl	800b848 <otm8009a_write_reg>
 800b126:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800b128:	2300      	movs	r3, #0
 800b12a:	4ad0      	ldr	r2, [pc, #832]	; (800b46c <OTM8009A_Init+0x398>)
 800b12c:	21c4      	movs	r1, #196	; 0xc4
 800b12e:	4640      	mov	r0, r8
 800b130:	f000 fb8a 	bl	800b848 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 800b134:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800b136:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800b138:	4650      	mov	r0, sl
 800b13a:	f7ff ffbf 	bl	800b0bc <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800b13e:	2300      	movs	r3, #0
 800b140:	4acb      	ldr	r2, [pc, #812]	; (800b470 <OTM8009A_Init+0x39c>)
 800b142:	4640      	mov	r0, r8
 800b144:	4619      	mov	r1, r3
 800b146:	4dcb      	ldr	r5, [pc, #812]	; (800b474 <OTM8009A_Init+0x3a0>)
 800b148:	f000 fb7e 	bl	800b848 <otm8009a_write_reg>
 800b14c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800b14e:	2300      	movs	r3, #0
 800b150:	4ac9      	ldr	r2, [pc, #804]	; (800b478 <OTM8009A_Init+0x3a4>)
 800b152:	21c4      	movs	r1, #196	; 0xc4
 800b154:	4640      	mov	r0, r8
 800b156:	f000 fb77 	bl	800b848 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 800b15a:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 800b15c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 800b15e:	4650      	mov	r0, sl
 800b160:	f7ff ffac 	bl	800b0bc <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800b164:	2300      	movs	r3, #0
 800b166:	4ac5      	ldr	r2, [pc, #788]	; (800b47c <OTM8009A_Init+0x3a8>)
 800b168:	4640      	mov	r0, r8
 800b16a:	4619      	mov	r1, r3
 800b16c:	f000 fb6c 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800b170:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800b172:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800b174:	4ac2      	ldr	r2, [pc, #776]	; (800b480 <OTM8009A_Init+0x3ac>)
 800b176:	21c5      	movs	r1, #197	; 0xc5
 800b178:	4640      	mov	r0, r8
 800b17a:	f000 fb65 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800b17e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800b180:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800b182:	4ac0      	ldr	r2, [pc, #768]	; (800b484 <OTM8009A_Init+0x3b0>)
 800b184:	4619      	mov	r1, r3
 800b186:	4640      	mov	r0, r8
 800b188:	f000 fb5e 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b18c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800b18e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b190:	4abd      	ldr	r2, [pc, #756]	; (800b488 <OTM8009A_Init+0x3b4>)
 800b192:	21c5      	movs	r1, #197	; 0xc5
 800b194:	4640      	mov	r0, r8
 800b196:	f000 fb57 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800b19a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b19c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800b19e:	4abb      	ldr	r2, [pc, #748]	; (800b48c <OTM8009A_Init+0x3b8>)
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	f000 fb50 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800b1a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800b1aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800b1ac:	4ab8      	ldr	r2, [pc, #736]	; (800b490 <OTM8009A_Init+0x3bc>)
 800b1ae:	21c0      	movs	r1, #192	; 0xc0
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	f000 fb49 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b1b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800b1b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b1ba:	4aa8      	ldr	r2, [pc, #672]	; (800b45c <OTM8009A_Init+0x388>)
 800b1bc:	4619      	mov	r1, r3
 800b1be:	4640      	mov	r0, r8
 800b1c0:	f000 fb42 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800b1c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b1c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800b1c8:	4ab2      	ldr	r2, [pc, #712]	; (800b494 <OTM8009A_Init+0x3c0>)
 800b1ca:	21d9      	movs	r1, #217	; 0xd9
 800b1cc:	4640      	mov	r0, r8
 800b1ce:	f000 fb3b 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b1d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800b1d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b1d6:	4ab0      	ldr	r2, [pc, #704]	; (800b498 <OTM8009A_Init+0x3c4>)
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4640      	mov	r0, r8
 800b1dc:	f000 fb34 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800b1e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b1e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800b1e4:	4aad      	ldr	r2, [pc, #692]	; (800b49c <OTM8009A_Init+0x3c8>)
 800b1e6:	21c1      	movs	r1, #193	; 0xc1
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	f000 fb2d 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b1ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800b1f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b1f2:	4aab      	ldr	r2, [pc, #684]	; (800b4a0 <OTM8009A_Init+0x3cc>)
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	f000 fb26 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800b1fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b1fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800b200:	4aa8      	ldr	r2, [pc, #672]	; (800b4a4 <OTM8009A_Init+0x3d0>)
 800b202:	21c1      	movs	r1, #193	; 0xc1
 800b204:	4640      	mov	r0, r8
 800b206:	f000 fb1f 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800b20a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800b20c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800b20e:	4aa6      	ldr	r2, [pc, #664]	; (800b4a8 <OTM8009A_Init+0x3d4>)
 800b210:	4619      	mov	r1, r3
 800b212:	4640      	mov	r0, r8
 800b214:	f000 fb18 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800b218:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800b21a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800b21c:	4aa3      	ldr	r2, [pc, #652]	; (800b4ac <OTM8009A_Init+0x3d8>)
 800b21e:	21c5      	movs	r1, #197	; 0xc5
 800b220:	4640      	mov	r0, r8
 800b222:	f000 fb11 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800b226:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800b228:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800b22a:	4aa1      	ldr	r2, [pc, #644]	; (800b4b0 <OTM8009A_Init+0x3dc>)
 800b22c:	4619      	mov	r1, r3
 800b22e:	4640      	mov	r0, r8
 800b230:	f000 fb0a 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b234:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800b236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b238:	4a93      	ldr	r2, [pc, #588]	; (800b488 <OTM8009A_Init+0x3b4>)
 800b23a:	21c5      	movs	r1, #197	; 0xc5
 800b23c:	4640      	mov	r0, r8
 800b23e:	f000 fb03 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b242:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800b244:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b246:	4a85      	ldr	r2, [pc, #532]	; (800b45c <OTM8009A_Init+0x388>)
 800b248:	4619      	mov	r1, r3
 800b24a:	4640      	mov	r0, r8
 800b24c:	f000 fafc 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800b250:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b252:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800b254:	4a97      	ldr	r2, [pc, #604]	; (800b4b4 <OTM8009A_Init+0x3e0>)
 800b256:	21d8      	movs	r1, #216	; 0xd8
 800b258:	4640      	mov	r0, r8
 800b25a:	f000 faf5 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800b25e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800b260:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800b262:	4a95      	ldr	r2, [pc, #596]	; (800b4b8 <OTM8009A_Init+0x3e4>)
 800b264:	4619      	mov	r1, r3
 800b266:	4640      	mov	r0, r8
 800b268:	f000 faee 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800b26c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800b26e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800b270:	4a92      	ldr	r2, [pc, #584]	; (800b4bc <OTM8009A_Init+0x3e8>)
 800b272:	21c5      	movs	r1, #197	; 0xc5
 800b274:	4640      	mov	r0, r8
 800b276:	f000 fae7 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800b27a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800b27c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800b27e:	4a90      	ldr	r2, [pc, #576]	; (800b4c0 <OTM8009A_Init+0x3ec>)
 800b280:	4619      	mov	r1, r3
 800b282:	4640      	mov	r0, r8
 800b284:	f000 fae0 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800b288:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800b28a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800b28c:	4a8d      	ldr	r2, [pc, #564]	; (800b4c4 <OTM8009A_Init+0x3f0>)
 800b28e:	21c0      	movs	r1, #192	; 0xc0
 800b290:	4640      	mov	r0, r8
 800b292:	f000 fad9 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800b296:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800b298:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800b29a:	4a8b      	ldr	r2, [pc, #556]	; (800b4c8 <OTM8009A_Init+0x3f4>)
 800b29c:	4619      	mov	r1, r3
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f000 fad2 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800b2a4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800b2a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800b2a8:	4a88      	ldr	r2, [pc, #544]	; (800b4cc <OTM8009A_Init+0x3f8>)
 800b2aa:	21c5      	movs	r1, #197	; 0xc5
 800b2ac:	4640      	mov	r0, r8
 800b2ae:	f000 facb 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b2b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800b2b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b2b6:	4a78      	ldr	r2, [pc, #480]	; (800b498 <OTM8009A_Init+0x3c4>)
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4640      	mov	r0, r8
 800b2bc:	f000 fac4 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800b2c0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b2c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800b2c4:	4a82      	ldr	r2, [pc, #520]	; (800b4d0 <OTM8009A_Init+0x3fc>)
 800b2c6:	21c4      	movs	r1, #196	; 0xc4
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	f000 fabd 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b2ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800b2d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b2d2:	4a73      	ldr	r2, [pc, #460]	; (800b4a0 <OTM8009A_Init+0x3cc>)
 800b2d4:	4619      	mov	r1, r3
 800b2d6:	4640      	mov	r0, r8
 800b2d8:	f000 fab6 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800b2dc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800b2de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800b2e0:	4a7c      	ldr	r2, [pc, #496]	; (800b4d4 <OTM8009A_Init+0x400>)
 800b2e2:	21c1      	movs	r1, #193	; 0xc1
 800b2e4:	4640      	mov	r0, r8
 800b2e6:	f000 faaf 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800b2ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800b2ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800b2ee:	4a7a      	ldr	r2, [pc, #488]	; (800b4d8 <OTM8009A_Init+0x404>)
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	f000 faa8 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800b2f8:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800b2fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800b2fc:	4a77      	ldr	r2, [pc, #476]	; (800b4dc <OTM8009A_Init+0x408>)
 800b2fe:	21b3      	movs	r1, #179	; 0xb3
 800b300:	4640      	mov	r0, r8
 800b302:	f000 faa1 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b306:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800b308:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b30a:	4a56      	ldr	r2, [pc, #344]	; (800b464 <OTM8009A_Init+0x390>)
 800b30c:	4619      	mov	r1, r3
 800b30e:	4640      	mov	r0, r8
 800b310:	f000 fa9a 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800b314:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b316:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800b318:	4a71      	ldr	r2, [pc, #452]	; (800b4e0 <OTM8009A_Init+0x40c>)
 800b31a:	21ce      	movs	r1, #206	; 0xce
 800b31c:	4640      	mov	r0, r8
 800b31e:	f000 fa93 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b322:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800b324:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b326:	4a6f      	ldr	r2, [pc, #444]	; (800b4e4 <OTM8009A_Init+0x410>)
 800b328:	4619      	mov	r1, r3
 800b32a:	4640      	mov	r0, r8
 800b32c:	f000 fa8c 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800b330:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b332:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800b334:	4a6c      	ldr	r2, [pc, #432]	; (800b4e8 <OTM8009A_Init+0x414>)
 800b336:	21ce      	movs	r1, #206	; 0xce
 800b338:	4640      	mov	r0, r8
 800b33a:	f000 fa85 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b33e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800b340:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b342:	4a6a      	ldr	r2, [pc, #424]	; (800b4ec <OTM8009A_Init+0x418>)
 800b344:	4619      	mov	r1, r3
 800b346:	4640      	mov	r0, r8
 800b348:	f000 fa7e 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800b34c:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b34e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800b350:	4a67      	ldr	r2, [pc, #412]	; (800b4f0 <OTM8009A_Init+0x41c>)
 800b352:	21ce      	movs	r1, #206	; 0xce
 800b354:	4640      	mov	r0, r8
 800b356:	f000 fa77 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b35a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800b35c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b35e:	4a65      	ldr	r2, [pc, #404]	; (800b4f4 <OTM8009A_Init+0x420>)
 800b360:	4619      	mov	r1, r3
 800b362:	4640      	mov	r0, r8
 800b364:	f000 fa70 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800b368:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b36a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800b36c:	4a62      	ldr	r2, [pc, #392]	; (800b4f8 <OTM8009A_Init+0x424>)
 800b36e:	21cf      	movs	r1, #207	; 0xcf
 800b370:	4640      	mov	r0, r8
 800b372:	f000 fa69 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b376:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800b378:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b37a:	4a60      	ldr	r2, [pc, #384]	; (800b4fc <OTM8009A_Init+0x428>)
 800b37c:	4619      	mov	r1, r3
 800b37e:	4640      	mov	r0, r8
 800b380:	f000 fa62 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800b384:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b386:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800b388:	4a5d      	ldr	r2, [pc, #372]	; (800b500 <OTM8009A_Init+0x42c>)
 800b38a:	21cf      	movs	r1, #207	; 0xcf
 800b38c:	4640      	mov	r0, r8
 800b38e:	f000 fa5b 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b392:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800b394:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b396:	4a33      	ldr	r2, [pc, #204]	; (800b464 <OTM8009A_Init+0x390>)
 800b398:	4619      	mov	r1, r3
 800b39a:	4640      	mov	r0, r8
 800b39c:	f000 fa54 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800b3a0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b3a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800b3a4:	4a57      	ldr	r2, [pc, #348]	; (800b504 <OTM8009A_Init+0x430>)
 800b3a6:	21cb      	movs	r1, #203	; 0xcb
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	f000 fa4d 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b3ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800b3b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b3b2:	4a55      	ldr	r2, [pc, #340]	; (800b508 <OTM8009A_Init+0x434>)
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4640      	mov	r0, r8
 800b3b8:	f000 fa46 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800b3bc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b3be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800b3c0:	4a52      	ldr	r2, [pc, #328]	; (800b50c <OTM8009A_Init+0x438>)
 800b3c2:	21cb      	movs	r1, #203	; 0xcb
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	f000 fa3f 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b3ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800b3cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b3ce:	4a45      	ldr	r2, [pc, #276]	; (800b4e4 <OTM8009A_Init+0x410>)
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	f000 fa38 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800b3d8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b3da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800b3dc:	4a4c      	ldr	r2, [pc, #304]	; (800b510 <OTM8009A_Init+0x43c>)
 800b3de:	21cb      	movs	r1, #203	; 0xcb
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	f000 fa31 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b3e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800b3e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b3ea:	4a40      	ldr	r2, [pc, #256]	; (800b4ec <OTM8009A_Init+0x418>)
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	f000 fa2a 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800b3f4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b3f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800b3f8:	4a46      	ldr	r2, [pc, #280]	; (800b514 <OTM8009A_Init+0x440>)
 800b3fa:	21cb      	movs	r1, #203	; 0xcb
 800b3fc:	4640      	mov	r0, r8
 800b3fe:	f000 fa23 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b402:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800b404:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b406:	4a3b      	ldr	r2, [pc, #236]	; (800b4f4 <OTM8009A_Init+0x420>)
 800b408:	4619      	mov	r1, r3
 800b40a:	4640      	mov	r0, r8
 800b40c:	f000 fa1c 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800b410:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b412:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800b414:	4a40      	ldr	r2, [pc, #256]	; (800b518 <OTM8009A_Init+0x444>)
 800b416:	21cb      	movs	r1, #203	; 0xcb
 800b418:	4640      	mov	r0, r8
 800b41a:	f000 fa15 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b41e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 800b420:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b422:	4a36      	ldr	r2, [pc, #216]	; (800b4fc <OTM8009A_Init+0x428>)
 800b424:	4619      	mov	r1, r3
 800b426:	4640      	mov	r0, r8
 800b428:	f000 fa0e 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800b42c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b42e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800b430:	4a3a      	ldr	r2, [pc, #232]	; (800b51c <OTM8009A_Init+0x448>)
 800b432:	21cb      	movs	r1, #203	; 0xcb
 800b434:	4640      	mov	r0, r8
 800b436:	f000 fa07 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800b43a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800b43c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800b43e:	4a38      	ldr	r2, [pc, #224]	; (800b520 <OTM8009A_Init+0x44c>)
 800b440:	4619      	mov	r1, r3
 800b442:	4640      	mov	r0, r8
 800b444:	f000 fa00 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800b448:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800b44a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800b44c:	4a35      	ldr	r2, [pc, #212]	; (800b524 <OTM8009A_Init+0x450>)
 800b44e:	21cb      	movs	r1, #203	; 0xcb
 800b450:	4640      	mov	r0, r8
 800b452:	f000 f9f9 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800b456:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800b458:	4404      	add	r4, r0
 800b45a:	e065      	b.n	800b528 <OTM8009A_Init+0x454>
 800b45c:	080275d9 	.word	0x080275d9
 800b460:	080274cc 	.word	0x080274cc
 800b464:	080275da 	.word	0x080275da
 800b468:	08027547 	.word	0x08027547
 800b46c:	080275db 	.word	0x080275db
 800b470:	080275dc 	.word	0x080275dc
 800b474:	24006704 	.word	0x24006704
 800b478:	080275dd 	.word	0x080275dd
 800b47c:	080275de 	.word	0x080275de
 800b480:	080275df 	.word	0x080275df
 800b484:	080275e0 	.word	0x080275e0
 800b488:	080275e1 	.word	0x080275e1
 800b48c:	080275e2 	.word	0x080275e2
 800b490:	080275e3 	.word	0x080275e3
 800b494:	080275e4 	.word	0x080275e4
 800b498:	080275e5 	.word	0x080275e5
 800b49c:	080275e6 	.word	0x080275e6
 800b4a0:	080275e7 	.word	0x080275e7
 800b4a4:	080275e8 	.word	0x080275e8
 800b4a8:	080275e9 	.word	0x080275e9
 800b4ac:	080275ea 	.word	0x080275ea
 800b4b0:	080275eb 	.word	0x080275eb
 800b4b4:	080275b2 	.word	0x080275b2
 800b4b8:	080275ec 	.word	0x080275ec
 800b4bc:	080275ed 	.word	0x080275ed
 800b4c0:	080275ee 	.word	0x080275ee
 800b4c4:	080275ef 	.word	0x080275ef
 800b4c8:	080275f0 	.word	0x080275f0
 800b4cc:	080275f1 	.word	0x080275f1
 800b4d0:	080275f2 	.word	0x080275f2
 800b4d4:	080275f3 	.word	0x080275f3
 800b4d8:	080275f4 	.word	0x080275f4
 800b4dc:	080275b4 	.word	0x080275b4
 800b4e0:	080275b6 	.word	0x080275b6
 800b4e4:	080275f5 	.word	0x080275f5
 800b4e8:	080275bc 	.word	0x080275bc
 800b4ec:	080275f6 	.word	0x080275f6
 800b4f0:	080275ca 	.word	0x080275ca
 800b4f4:	080275f7 	.word	0x080275f7
 800b4f8:	080274cf 	.word	0x080274cf
 800b4fc:	080275f8 	.word	0x080275f8
 800b500:	08027605 	.word	0x08027605
 800b504:	080274d9 	.word	0x080274d9
 800b508:	080275f9 	.word	0x080275f9
 800b50c:	080274e3 	.word	0x080274e3
 800b510:	080274f2 	.word	0x080274f2
 800b514:	08027501 	.word	0x08027501
 800b518:	0802750b 	.word	0x0802750b
 800b51c:	0802751a 	.word	0x0802751a
 800b520:	080275fa 	.word	0x080275fa
 800b524:	08027529 	.word	0x08027529
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800b528:	4a99      	ldr	r2, [pc, #612]	; (800b790 <OTM8009A_Init+0x6bc>)
 800b52a:	4619      	mov	r1, r3
 800b52c:	4640      	mov	r0, r8
 800b52e:	f000 f98b 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800b532:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800b534:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800b536:	4a97      	ldr	r2, [pc, #604]	; (800b794 <OTM8009A_Init+0x6c0>)
 800b538:	21cb      	movs	r1, #203	; 0xcb
 800b53a:	4640      	mov	r0, r8
 800b53c:	f000 f984 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b540:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800b542:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b544:	4a94      	ldr	r2, [pc, #592]	; (800b798 <OTM8009A_Init+0x6c4>)
 800b546:	4619      	mov	r1, r3
 800b548:	4640      	mov	r0, r8
 800b54a:	f000 f97d 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800b54e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800b550:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800b552:	4a92      	ldr	r2, [pc, #584]	; (800b79c <OTM8009A_Init+0x6c8>)
 800b554:	21cc      	movs	r1, #204	; 0xcc
 800b556:	4640      	mov	r0, r8
 800b558:	f000 f976 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b55c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800b55e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b560:	4a8f      	ldr	r2, [pc, #572]	; (800b7a0 <OTM8009A_Init+0x6cc>)
 800b562:	4619      	mov	r1, r3
 800b564:	4640      	mov	r0, r8
 800b566:	f000 f96f 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800b56a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800b56c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800b56e:	4a8d      	ldr	r2, [pc, #564]	; (800b7a4 <OTM8009A_Init+0x6d0>)
 800b570:	21cc      	movs	r1, #204	; 0xcc
 800b572:	4640      	mov	r0, r8
 800b574:	f000 f968 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b578:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800b57a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b57c:	4a8a      	ldr	r2, [pc, #552]	; (800b7a8 <OTM8009A_Init+0x6d4>)
 800b57e:	4619      	mov	r1, r3
 800b580:	4640      	mov	r0, r8
 800b582:	f000 f961 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800b586:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800b588:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800b58a:	4a88      	ldr	r2, [pc, #544]	; (800b7ac <OTM8009A_Init+0x6d8>)
 800b58c:	21cc      	movs	r1, #204	; 0xcc
 800b58e:	4640      	mov	r0, r8
 800b590:	f000 f95a 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b594:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800b596:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b598:	4a85      	ldr	r2, [pc, #532]	; (800b7b0 <OTM8009A_Init+0x6dc>)
 800b59a:	4619      	mov	r1, r3
 800b59c:	4640      	mov	r0, r8
 800b59e:	f000 f953 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800b5a2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800b5a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800b5a6:	4a83      	ldr	r2, [pc, #524]	; (800b7b4 <OTM8009A_Init+0x6e0>)
 800b5a8:	21cc      	movs	r1, #204	; 0xcc
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	f000 f94c 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b5b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800b5b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b5b4:	4a80      	ldr	r2, [pc, #512]	; (800b7b8 <OTM8009A_Init+0x6e4>)
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4640      	mov	r0, r8
 800b5ba:	f000 f945 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800b5be:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800b5c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800b5c2:	4a7e      	ldr	r2, [pc, #504]	; (800b7bc <OTM8009A_Init+0x6e8>)
 800b5c4:	21cc      	movs	r1, #204	; 0xcc
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	f000 f93e 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b5cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800b5ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b5d0:	4a7b      	ldr	r2, [pc, #492]	; (800b7c0 <OTM8009A_Init+0x6ec>)
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	f000 f937 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800b5da:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800b5dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800b5de:	4a79      	ldr	r2, [pc, #484]	; (800b7c4 <OTM8009A_Init+0x6f0>)
 800b5e0:	21cc      	movs	r1, #204	; 0xcc
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	f000 f930 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b5e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800b5ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b5ec:	4a76      	ldr	r2, [pc, #472]	; (800b7c8 <OTM8009A_Init+0x6f4>)
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	4640      	mov	r0, r8
 800b5f2:	f000 f929 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800b5f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800b5f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800b5fa:	4a74      	ldr	r2, [pc, #464]	; (800b7cc <OTM8009A_Init+0x6f8>)
 800b5fc:	21c5      	movs	r1, #197	; 0xc5
 800b5fe:	4640      	mov	r0, r8
 800b600:	f000 f922 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800b604:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800b606:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800b608:	4a71      	ldr	r2, [pc, #452]	; (800b7d0 <OTM8009A_Init+0x6fc>)
 800b60a:	4619      	mov	r1, r3
 800b60c:	4640      	mov	r0, r8
 800b60e:	f000 f91b 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800b612:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800b614:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800b616:	4a6f      	ldr	r2, [pc, #444]	; (800b7d4 <OTM8009A_Init+0x700>)
 800b618:	21f5      	movs	r1, #245	; 0xf5
 800b61a:	4640      	mov	r0, r8
 800b61c:	f000 f914 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800b620:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 800b622:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800b624:	4a6c      	ldr	r2, [pc, #432]	; (800b7d8 <OTM8009A_Init+0x704>)
 800b626:	4619      	mov	r1, r3
 800b628:	4640      	mov	r0, r8
 800b62a:	f000 f90d 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800b62e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 800b630:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800b632:	4a6a      	ldr	r2, [pc, #424]	; (800b7dc <OTM8009A_Init+0x708>)
 800b634:	21c6      	movs	r1, #198	; 0xc6
 800b636:	4640      	mov	r0, r8
 800b638:	f000 f906 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b63c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800b63e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b640:	4a67      	ldr	r2, [pc, #412]	; (800b7e0 <OTM8009A_Init+0x70c>)
 800b642:	4619      	mov	r1, r3
 800b644:	4640      	mov	r0, r8
 800b646:	f000 f8ff 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800b64a:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b64c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800b64e:	4a65      	ldr	r2, [pc, #404]	; (800b7e4 <OTM8009A_Init+0x710>)
 800b650:	21ff      	movs	r1, #255	; 0xff
 800b652:	4640      	mov	r0, r8
 800b654:	f000 f8f8 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b658:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800b65a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b65c:	4a60      	ldr	r2, [pc, #384]	; (800b7e0 <OTM8009A_Init+0x70c>)
 800b65e:	4619      	mov	r1, r3
 800b660:	4640      	mov	r0, r8
 800b662:	f000 f8f1 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b666:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b668:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b66a:	4a5d      	ldr	r2, [pc, #372]	; (800b7e0 <OTM8009A_Init+0x70c>)
 800b66c:	4619      	mov	r1, r3
 800b66e:	4640      	mov	r0, r8
 800b670:	f000 f8ea 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800b674:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b676:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800b678:	4a5b      	ldr	r2, [pc, #364]	; (800b7e8 <OTM8009A_Init+0x714>)
 800b67a:	21e1      	movs	r1, #225	; 0xe1
 800b67c:	4640      	mov	r0, r8
 800b67e:	f000 f8e3 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b682:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800b684:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b686:	4a56      	ldr	r2, [pc, #344]	; (800b7e0 <OTM8009A_Init+0x70c>)
 800b688:	4619      	mov	r1, r3
 800b68a:	4640      	mov	r0, r8
 800b68c:	f000 f8dc 	bl	800b848 <otm8009a_write_reg>
 800b690:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 800b692:	2310      	movs	r3, #16
 800b694:	4a55      	ldr	r2, [pc, #340]	; (800b7ec <OTM8009A_Init+0x718>)
 800b696:	21e2      	movs	r1, #226	; 0xe2
 800b698:	4640      	mov	r0, r8
 800b69a:	f000 f8d5 	bl	800b848 <otm8009a_write_reg>
 800b69e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4a53      	ldr	r2, [pc, #332]	; (800b7f0 <OTM8009A_Init+0x71c>)
 800b6a4:	2111      	movs	r1, #17
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	f000 f8ce 	bl	800b848 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800b6ac:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800b6ae:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800b6b0:	4650      	mov	r0, sl
 800b6b2:	f7ff fd03 	bl	800b0bc <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800b6b6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ba:	d062      	beq.n	800b782 <OTM8009A_Init+0x6ae>
 800b6bc:	f1b9 0f02 	cmp.w	r9, #2
 800b6c0:	d108      	bne.n	800b6d4 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	4a4b      	ldr	r2, [pc, #300]	; (800b7f4 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800b6c6:	213a      	movs	r1, #58	; 0x3a
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	f000 f8bd 	bl	800b848 <otm8009a_write_reg>
 800b6ce:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800b6d0:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800b6d4:	f1bb 0f01 	cmp.w	fp, #1
 800b6d8:	d156      	bne.n	800b788 <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800b6da:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800b6dc:	f10d 0207 	add.w	r2, sp, #7
 800b6e0:	2136      	movs	r1, #54	; 0x36
 800b6e2:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800b6e4:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f000 f8ad 	bl	800b848 <otm8009a_write_reg>
 800b6ee:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800b6f0:	2304      	movs	r3, #4
 800b6f2:	4a41      	ldr	r2, [pc, #260]	; (800b7f8 <OTM8009A_Init+0x724>)
 800b6f4:	212a      	movs	r1, #42	; 0x2a
 800b6f6:	4640      	mov	r0, r8
 800b6f8:	f000 f8a6 	bl	800b848 <otm8009a_write_reg>
 800b6fc:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800b6fe:	2304      	movs	r3, #4
 800b700:	4a3e      	ldr	r2, [pc, #248]	; (800b7fc <OTM8009A_Init+0x728>)
 800b702:	212b      	movs	r1, #43	; 0x2b
 800b704:	4640      	mov	r0, r8
 800b706:	f000 f89f 	bl	800b848 <otm8009a_write_reg>
 800b70a:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800b70c:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800b710:	2300      	movs	r3, #0
 800b712:	4a3b      	ldr	r2, [pc, #236]	; (800b800 <OTM8009A_Init+0x72c>)
 800b714:	2151      	movs	r1, #81	; 0x51
 800b716:	4640      	mov	r0, r8
 800b718:	f000 f896 	bl	800b848 <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800b71c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800b71e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800b720:	4a38      	ldr	r2, [pc, #224]	; (800b804 <OTM8009A_Init+0x730>)
 800b722:	2153      	movs	r1, #83	; 0x53
 800b724:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800b726:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800b728:	f000 f88e 	bl	800b848 <otm8009a_write_reg>
 800b72c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800b72e:	2300      	movs	r3, #0
 800b730:	4a35      	ldr	r2, [pc, #212]	; (800b808 <OTM8009A_Init+0x734>)
 800b732:	2155      	movs	r1, #85	; 0x55
 800b734:	4640      	mov	r0, r8
 800b736:	f000 f887 	bl	800b848 <otm8009a_write_reg>
 800b73a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800b73c:	2300      	movs	r3, #0
 800b73e:	4a33      	ldr	r2, [pc, #204]	; (800b80c <OTM8009A_Init+0x738>)
 800b740:	215e      	movs	r1, #94	; 0x5e
 800b742:	4640      	mov	r0, r8
 800b744:	f000 f880 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800b748:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 800b74a:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800b74c:	4a30      	ldr	r2, [pc, #192]	; (800b810 <OTM8009A_Init+0x73c>)
 800b74e:	2129      	movs	r1, #41	; 0x29
 800b750:	4640      	mov	r0, r8
 800b752:	f000 f879 	bl	800b848 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b756:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 800b758:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800b75a:	4a21      	ldr	r2, [pc, #132]	; (800b7e0 <OTM8009A_Init+0x70c>)
 800b75c:	4619      	mov	r1, r3
 800b75e:	4640      	mov	r0, r8
 800b760:	f000 f872 	bl	800b848 <otm8009a_write_reg>
 800b764:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800b766:	2300      	movs	r3, #0
 800b768:	4a2a      	ldr	r2, [pc, #168]	; (800b814 <OTM8009A_Init+0x740>)
 800b76a:	212c      	movs	r1, #44	; 0x2c
 800b76c:	4640      	mov	r0, r8
 800b76e:	f000 f86b 	bl	800b848 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800b772:	42c5      	cmn	r5, r0
}
 800b774:	bf14      	ite	ne
 800b776:	f04f 30ff 	movne.w	r0, #4294967295
 800b77a:	2000      	moveq	r0, #0
 800b77c:	b003      	add	sp, #12
 800b77e:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800b782:	464b      	mov	r3, r9
 800b784:	4a24      	ldr	r2, [pc, #144]	; (800b818 <OTM8009A_Init+0x744>)
 800b786:	e79e      	b.n	800b6c6 <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800b788:	2300      	movs	r3, #0
 800b78a:	602b      	str	r3, [r5, #0]
 800b78c:	e7c0      	b.n	800b710 <OTM8009A_Init+0x63c>
 800b78e:	bf00      	nop
 800b790:	080275fb 	.word	0x080275fb
 800b794:	08027533 	.word	0x08027533
 800b798:	080275da 	.word	0x080275da
 800b79c:	0802753d 	.word	0x0802753d
 800b7a0:	080275f9 	.word	0x080275f9
 800b7a4:	08027549 	.word	0x08027549
 800b7a8:	080275f5 	.word	0x080275f5
 800b7ac:	08027558 	.word	0x08027558
 800b7b0:	080275f6 	.word	0x080275f6
 800b7b4:	08027567 	.word	0x08027567
 800b7b8:	080275f7 	.word	0x080275f7
 800b7bc:	08027571 	.word	0x08027571
 800b7c0:	080275f8 	.word	0x080275f8
 800b7c4:	08027580 	.word	0x08027580
 800b7c8:	080275e5 	.word	0x080275e5
 800b7cc:	08027606 	.word	0x08027606
 800b7d0:	08027607 	.word	0x08027607
 800b7d4:	08027608 	.word	0x08027608
 800b7d8:	08027609 	.word	0x08027609
 800b7dc:	0802760a 	.word	0x0802760a
 800b7e0:	080275d9 	.word	0x080275d9
 800b7e4:	0802758f 	.word	0x0802758f
 800b7e8:	08027592 	.word	0x08027592
 800b7ec:	080275a2 	.word	0x080275a2
 800b7f0:	080275fc 	.word	0x080275fc
 800b7f4:	080275fd 	.word	0x080275fd
 800b7f8:	080274c4 	.word	0x080274c4
 800b7fc:	080274c8 	.word	0x080274c8
 800b800:	080275ff 	.word	0x080275ff
 800b804:	08027600 	.word	0x08027600
 800b808:	08027601 	.word	0x08027601
 800b80c:	08027602 	.word	0x08027602
 800b810:	08027603 	.word	0x08027603
 800b814:	08027604 	.word	0x08027604
 800b818:	080275fe 	.word	0x080275fe

0800b81c <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 800b81c:	b160      	cbz	r0, 800b838 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 800b81e:	684b      	ldr	r3, [r1, #4]
 800b820:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800b822:	688b      	ldr	r3, [r1, #8]
 800b824:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800b826:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800b828:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800b82a:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <OTM8009A_RegisterBusIO+0x24>)
 800b82e:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800b830:	4b04      	ldr	r3, [pc, #16]	; (800b844 <OTM8009A_RegisterBusIO+0x28>)
 800b832:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800b834:	2000      	movs	r0, #0
 800b836:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800b838:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	0800b0a1 	.word	0x0800b0a1
 800b844:	0800b0af 	.word	0x0800b0af

0800b848 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800b848:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800b84a:	6804      	ldr	r4, [r0, #0]
 800b84c:	6880      	ldr	r0, [r0, #8]
 800b84e:	46a4      	mov	ip, r4
}
 800b850:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800b854:	4760      	bx	ip
	...

0800b858 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800b858:	4a10      	ldr	r2, [pc, #64]	; (800b89c <BSP_I2C4_DeInit+0x44>)
{
 800b85a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 800b85c:	6813      	ldr	r3, [r2, #0]
 800b85e:	3b01      	subs	r3, #1
 800b860:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800b862:	b10b      	cbz	r3, 800b868 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 800b864:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800b866:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b86c:	480c      	ldr	r0, [pc, #48]	; (800b8a0 <BSP_I2C4_DeInit+0x48>)
 800b86e:	f001 fe0d 	bl	800d48c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b872:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <BSP_I2C4_DeInit+0x48>)
 800b874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b878:	f001 fe08 	bl	800d48c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b87c:	4a09      	ldr	r2, [pc, #36]	; (800b8a4 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b87e:	480a      	ldr	r0, [pc, #40]	; (800b8a8 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800b880:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800b884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b888:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b88c:	f002 f849 	bl	800d922 <HAL_I2C_DeInit>
 800b890:	2800      	cmp	r0, #0
 800b892:	d0e7      	beq.n	800b864 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 800b894:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800b898:	e7e5      	b.n	800b866 <BSP_I2C4_DeInit+0xe>
 800b89a:	bf00      	nop
 800b89c:	24006710 	.word	0x24006710
 800b8a0:	58020c00 	.word	0x58020c00
 800b8a4:	58024400 	.word	0x58024400
 800b8a8:	24007118 	.word	0x24007118

0800b8ac <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	2201      	movs	r2, #1
{
 800b8b0:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800b8b2:	6041      	str	r1, [r0, #4]
{
 800b8b4:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b8b6:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b8b8:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 800b8bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b8c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b8c4:	f001 ffdb 	bl	800d87e <HAL_I2C_Init>
 800b8c8:	4601      	mov	r1, r0
 800b8ca:	b108      	cbz	r0, 800b8d0 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 800b8cc:	2001      	movs	r0, #1
}
 800b8ce:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f002 f9fc 	bl	800dcce <HAL_I2CEx_ConfigAnalogFilter>
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	2800      	cmp	r0, #0
 800b8da:	d1f7      	bne.n	800b8cc <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f002 fa1c 	bl	800dd1a <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 800b8e2:	3800      	subs	r0, #0
 800b8e4:	bf18      	it	ne
 800b8e6:	2001      	movne	r0, #1
 800b8e8:	e7f1      	b.n	800b8ce <MX_I2C4_Init+0x22>
	...

0800b8ec <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 800b8ec:	4ba3      	ldr	r3, [pc, #652]	; (800bb7c <BSP_I2C4_Init+0x290>)
 800b8ee:	48a4      	ldr	r0, [pc, #656]	; (800bb80 <BSP_I2C4_Init+0x294>)
{
 800b8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800b8f4:	6003      	str	r3, [r0, #0]
{
 800b8f6:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 800b8f8:	4ba2      	ldr	r3, [pc, #648]	; (800bb84 <BSP_I2C4_Init+0x298>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	9200      	str	r2, [sp, #0]
 800b8fe:	2a00      	cmp	r2, #0
 800b900:	f040 80cf 	bne.w	800baa2 <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 800b904:	2201      	movs	r2, #1
 800b906:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b908:	f002 f9dc 	bl	800dcc4 <HAL_I2C_GetState>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f040 80c8 	bne.w	800baa2 <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b912:	4d9d      	ldr	r5, [pc, #628]	; (800bb88 <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b914:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b918:	2702      	movs	r7, #2
 800b91a:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b91c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b920:	a90d      	add	r1, sp, #52	; 0x34
 800b922:	489a      	ldr	r0, [pc, #616]	; (800bb8c <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b924:	f043 0308 	orr.w	r3, r3, #8
 800b928:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b92c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	930a      	str	r3, [sp, #40]	; 0x28
 800b936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b938:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b93c:	f043 0308 	orr.w	r3, r3, #8
 800b940:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800b944:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800b948:	f003 0308 	and.w	r3, r3, #8
 800b94c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b954:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b958:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b95a:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b95e:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b960:	f001 fca8 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b968:	a90d      	add	r1, sp, #52	; 0x34
 800b96a:	4888      	ldr	r0, [pc, #544]	; (800bb8c <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b96c:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b96e:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b972:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b974:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b978:	f001 fc9c 	bl	800d2b4 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800b97c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800b980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b984:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800b988:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800b98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b990:	930c      	str	r3, [sp, #48]	; 0x30
 800b992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 800b994:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800b998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 800b9a0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800b9a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9a8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b9ac:	f003 fc0e 	bl	800f1cc <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d070      	beq.n	800ba96 <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b9b4:	4b76      	ldr	r3, [pc, #472]	; (800bb90 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b9b6:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b9ba:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800bb98 <BSP_I2C4_Init+0x2ac>
 800b9be:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b9c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800b9c6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b9ca:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b9ce:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b9d2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b9d4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b9d8:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b9dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b9e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b9e4:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800b9e6:	9302      	str	r3, [sp, #8]
 800b9e8:	4b6a      	ldr	r3, [pc, #424]	; (800bb94 <BSP_I2C4_Init+0x2a8>)
 800b9ea:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b9ee:	9a00      	ldr	r2, [sp, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4696      	mov	lr, r2
{
 800b9f4:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b9f6:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800b9f8:	f240 3479 	movw	r4, #889	; 0x379
 800b9fc:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b9fe:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800ba00:	45a4      	cmp	ip, r4
 800ba02:	d959      	bls.n	800bab8 <BSP_I2C4_Init+0x1cc>
 800ba04:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800ba06:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800ba08:	45ab      	cmp	fp, r5
 800ba0a:	d851      	bhi.n	800bab0 <BSP_I2C4_Init+0x1c4>
 800ba0c:	9c02      	ldr	r4, [sp, #8]
 800ba0e:	42ac      	cmp	r4, r5
 800ba10:	d34e      	bcc.n	800bab0 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 800ba12:	4590      	cmp	r8, r2
 800ba14:	d04c      	beq.n	800bab0 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ba16:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800ba1a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800ba1c:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ba1e:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800ba22:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800ba24:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800ba28:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800ba2c:	d93d      	bls.n	800baaa <BSP_I2C4_Init+0x1be>
 800ba2e:	4a59      	ldr	r2, [pc, #356]	; (800bb94 <BSP_I2C4_Init+0x2a8>)
 800ba30:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba32:	4b58      	ldr	r3, [pc, #352]	; (800bb94 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ba34:	f242 7210 	movw	r2, #10000	; 0x2710
 800ba38:	4957      	ldr	r1, [pc, #348]	; (800bb98 <BSP_I2C4_Init+0x2ac>)
 800ba3a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba3c:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ba3e:	9203      	str	r2, [sp, #12]
 800ba40:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba44:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800ba46:	0043      	lsls	r3, r0, #1
 800ba48:	f103 0432 	add.w	r4, r3, #50	; 0x32
 800ba4c:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 800ba50:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 800ba54:	f10b 0b0c 	add.w	fp, fp, #12
 800ba58:	9409      	str	r4, [sp, #36]	; 0x24
 800ba5a:	3b0a      	subs	r3, #10
 800ba5c:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	429f      	cmp	r7, r3
 800ba62:	d134      	bne.n	800bace <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 800ba64:	2a7f      	cmp	r2, #127	; 0x7f
 800ba66:	d816      	bhi.n	800ba96 <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ba68:	2314      	movs	r3, #20
 800ba6a:	435a      	muls	r2, r3
 800ba6c:	4b4a      	ldr	r3, [pc, #296]	; (800bb98 <BSP_I2C4_Init+0x2ac>)
 800ba6e:	1899      	adds	r1, r3, r2
 800ba70:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800ba72:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ba74:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800ba78:	684b      	ldr	r3, [r1, #4]
 800ba7a:	051b      	lsls	r3, r3, #20
 800ba7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ba80:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800ba82:	688b      	ldr	r3, [r1, #8]
 800ba84:	041b      	lsls	r3, r3, #16
 800ba86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ba8a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800ba8c:	68cb      	ldr	r3, [r1, #12]
 800ba8e:	021b      	lsls	r3, r3, #8
 800ba90:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800ba92:	4323      	orrs	r3, r4
 800ba94:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800ba96:	9900      	ldr	r1, [sp, #0]
 800ba98:	4839      	ldr	r0, [pc, #228]	; (800bb80 <BSP_I2C4_Init+0x294>)
 800ba9a:	f7ff ff07 	bl	800b8ac <MX_I2C4_Init>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d169      	bne.n	800bb76 <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 800baa2:	2000      	movs	r0, #0
}
 800baa4:	b013      	add	sp, #76	; 0x4c
 800baa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baaa:	4690      	mov	r8, r2
 800baac:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800bab0:	3701      	adds	r7, #1
 800bab2:	440d      	add	r5, r1
 800bab4:	2f10      	cmp	r7, #16
 800bab6:	d1a7      	bne.n	800ba08 <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800bab8:	2e10      	cmp	r6, #16
 800baba:	448c      	add	ip, r1
 800babc:	d19c      	bne.n	800b9f8 <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800babe:	3201      	adds	r2, #1
 800bac0:	4401      	add	r1, r0
 800bac2:	2a10      	cmp	r2, #16
 800bac4:	d196      	bne.n	800b9f4 <BSP_I2C4_Init+0x108>
 800bac6:	f1be 0f00 	cmp.w	lr, #0
 800baca:	d1b0      	bne.n	800ba2e <BSP_I2C4_Init+0x142>
 800bacc:	e7b1      	b.n	800ba32 <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800bace:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bad0:	f04f 0c00 	mov.w	ip, #0
 800bad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800bad6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bada:	441c      	add	r4, r3
 800badc:	ebab 0503 	sub.w	r5, fp, r3
 800bae0:	9404      	str	r4, [sp, #16]
 800bae2:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800bae4:	9d04      	ldr	r5, [sp, #16]
 800bae6:	9401      	str	r4, [sp, #4]
 800bae8:	9c02      	ldr	r4, [sp, #8]
 800baea:	441c      	add	r4, r3
 800baec:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800baee:	f241 245c 	movw	r4, #4700	; 0x125c
 800baf2:	f8cd c018 	str.w	ip, [sp, #24]
 800baf6:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800bafa:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800bafe:	42a5      	cmp	r5, r4
 800bb00:	d92e      	bls.n	800bb60 <BSP_I2C4_Init+0x274>
 800bb02:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800bb06:	d22b      	bcs.n	800bb60 <BSP_I2C4_Init+0x274>
 800bb08:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bb0a:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800bb0e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bb12:	1966      	adds	r6, r4, r5
 800bb14:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bb18:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 800bb1c:	f241 0447 	movw	r4, #4167	; 0x1047
 800bb20:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800bb24:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800bb28:	45a2      	cmp	sl, r4
 800bb2a:	d812      	bhi.n	800bb52 <BSP_I2C4_Init+0x266>
 800bb2c:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 800bb30:	d30f      	bcc.n	800bb52 <BSP_I2C4_Init+0x266>
 800bb32:	4540      	cmp	r0, r8
 800bb34:	d20d      	bcs.n	800bb52 <BSP_I2C4_Init+0x266>
              error = -error;
 800bb36:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800bb3a:	bf28      	it	cs
 800bb3c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 800bb3e:	9c03      	ldr	r4, [sp, #12]
 800bb40:	45a2      	cmp	sl, r4
 800bb42:	d206      	bcs.n	800bb52 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 800bb44:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 800bb46:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 800bb4a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800bb4c:	9a07      	ldr	r2, [sp, #28]
 800bb4e:	60ca      	str	r2, [r1, #12]
 800bb50:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800bb52:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 800bb56:	eba9 0903 	sub.w	r9, r9, r3
 800bb5a:	441e      	add	r6, r3
 800bb5c:	4498      	add	r8, r3
 800bb5e:	d1db      	bne.n	800bb18 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800bb60:	9c01      	ldr	r4, [sp, #4]
 800bb62:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 800bb66:	441d      	add	r5, r3
 800bb68:	eba4 0403 	sub.w	r4, r4, r3
 800bb6c:	9401      	str	r4, [sp, #4]
 800bb6e:	d1be      	bne.n	800baee <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800bb70:	3701      	adds	r7, #1
 800bb72:	3114      	adds	r1, #20
 800bb74:	e773      	b.n	800ba5e <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 800bb76:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800bb7a:	e793      	b.n	800baa4 <BSP_I2C4_Init+0x1b8>
 800bb7c:	58001c00 	.word	0x58001c00
 800bb80:	24007118 	.word	0x24007118
 800bb84:	24006710 	.word	0x24006710
 800bb88:	58024400 	.word	0x58024400
 800bb8c:	58020c00 	.word	0x58020c00
 800bb90:	3b9aca00 	.word	0x3b9aca00
 800bb94:	24007114 	.word	0x24007114
 800bb98:	24006714 	.word	0x24006714

0800bb9c <BSP_I2C4_WriteReg>:
{
 800bb9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bb9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800bba2:	9200      	str	r2, [sp, #0]
 800bba4:	460a      	mov	r2, r1
 800bba6:	4601      	mov	r1, r0
 800bba8:	4808      	ldr	r0, [pc, #32]	; (800bbcc <BSP_I2C4_WriteReg+0x30>)
 800bbaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbae:	2301      	movs	r3, #1
 800bbb0:	f001 fed0 	bl	800d954 <HAL_I2C_Mem_Write>
 800bbb4:	b140      	cbz	r0, 800bbc8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bbb6:	4805      	ldr	r0, [pc, #20]	; (800bbcc <BSP_I2C4_WriteReg+0x30>)
 800bbb8:	f002 f887 	bl	800dcca <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bbbc:	2804      	cmp	r0, #4
 800bbbe:	bf0c      	ite	eq
 800bbc0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bbc4:	f06f 0003 	mvnne.w	r0, #3
}
 800bbc8:	b004      	add	sp, #16
 800bbca:	bd10      	pop	{r4, pc}
 800bbcc:	24007118 	.word	0x24007118

0800bbd0 <BSP_I2C4_ReadReg>:
{
 800bbd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800bbd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800bbd6:	9200      	str	r2, [sp, #0]
 800bbd8:	460a      	mov	r2, r1
 800bbda:	4601      	mov	r1, r0
 800bbdc:	4808      	ldr	r0, [pc, #32]	; (800bc00 <BSP_I2C4_ReadReg+0x30>)
 800bbde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	f001 ff90 	bl	800db08 <HAL_I2C_Mem_Read>
 800bbe8:	b140      	cbz	r0, 800bbfc <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800bbea:	4805      	ldr	r0, [pc, #20]	; (800bc00 <BSP_I2C4_ReadReg+0x30>)
 800bbec:	f002 f86d 	bl	800dcca <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800bbf0:	2804      	cmp	r0, #4
 800bbf2:	bf0c      	ite	eq
 800bbf4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800bbf8:	f06f 0003 	mvnne.w	r0, #3
}
 800bbfc:	b004      	add	sp, #16
 800bbfe:	bd10      	pop	{r4, pc}
 800bc00:	24007118 	.word	0x24007118

0800bc04 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 800bc04:	f000 bd10 	b.w	800c628 <HAL_GetTick>

0800bc08 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800bc08:	4a09      	ldr	r2, [pc, #36]	; (800bc30 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800bc0a:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 800bc0e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800bc10:	684a      	ldr	r2, [r1, #4]
 800bc12:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 800bc14:	2201      	movs	r2, #1
 800bc16:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800bc18:	688a      	ldr	r2, [r1, #8]
 800bc1a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800bc1c:	680a      	ldr	r2, [r1, #0]
 800bc1e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800bc20:	2200      	movs	r2, #0
 800bc22:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800bc26:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800bc28:	68ca      	ldr	r2, [r1, #12]
 800bc2a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 800bc2c:	f002 bbf8 	b.w	800e420 <HAL_QSPI_Init>
 800bc30:	52005000 	.word	0x52005000

0800bc34 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800bc34:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bc36:	b988      	cbnz	r0, 800bc5c <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bc38:	4c0a      	ldr	r4, [pc, #40]	; (800bc64 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 800bc3a:	480b      	ldr	r0, [pc, #44]	; (800bc68 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800bc3c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bc3e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800bc40:	b94b      	cbnz	r3, 800bc56 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bc42:	f7ff f9a5 	bl	800af90 <MT25TL01G_EnableMemoryMappedModeSTR>
 800bc46:	b110      	cbz	r0, 800bc4e <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc48:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 800bc4c:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800bc4e:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800bc50:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800bc52:	7023      	strb	r3, [r4, #0]
 800bc54:	e7fa      	b.n	800bc4c <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bc56:	f7ff f951 	bl	800aefc <MT25TL01G_EnableMemoryMappedModeDTR>
 800bc5a:	e7f4      	b.n	800bc46 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 800bc5c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800bc60:	e7f4      	b.n	800bc4c <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800bc62:	bf00      	nop
 800bc64:	2400716c 	.word	0x2400716c
 800bc68:	240002bc 	.word	0x240002bc

0800bc6c <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bc72:	bb28      	cbnz	r0, 800bcc0 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800bc74:	4d17      	ldr	r5, [pc, #92]	; (800bcd4 <BSP_QSPI_ConfigFlash+0x68>)
 800bc76:	782b      	ldrb	r3, [r5, #0]
 800bc78:	2b02      	cmp	r3, #2
 800bc7a:	d024      	beq.n	800bcc6 <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bc7c:	2a00      	cmp	r2, #0
 800bc7e:	4e16      	ldr	r6, [pc, #88]	; (800bcd8 <BSP_QSPI_ConfigFlash+0x6c>)
 800bc80:	bf08      	it	eq
 800bc82:	2010      	moveq	r0, #16
 800bc84:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800bc86:	4630      	mov	r0, r6
 800bc88:	f002 fbca 	bl	800e420 <HAL_QSPI_Init>
 800bc8c:	b9f0      	cbnz	r0, 800bccc <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800bc8e:	786b      	ldrb	r3, [r5, #1]
 800bc90:	2b03      	cmp	r3, #3
 800bc92:	d10f      	bne.n	800bcb4 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800bc94:	2c03      	cmp	r4, #3
 800bc96:	d105      	bne.n	800bca4 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800bc98:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800bc9a:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800bc9c:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800bc9e:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800bca0:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 800bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff f90d 	bl	800aec4 <MT25TL01G_ExitQPIMode>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0f4      	beq.n	800bc98 <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcae:	f06f 0004 	mvn.w	r0, #4
 800bcb2:	e7f6      	b.n	800bca2 <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 800bcb4:	2c03      	cmp	r4, #3
 800bcb6:	d1ef      	bne.n	800bc98 <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7ff f8e7 	bl	800ae8c <MT25TL01G_EnterQPIMode>
 800bcbe:	e7f4      	b.n	800bcaa <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 800bcc0:	f06f 0001 	mvn.w	r0, #1
 800bcc4:	e7ed      	b.n	800bca2 <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800bcc6:	f06f 0019 	mvn.w	r0, #25
 800bcca:	e7ea      	b.n	800bca2 <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bccc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800bcd0:	e7e7      	b.n	800bca2 <BSP_QSPI_ConfigFlash+0x36>
 800bcd2:	bf00      	nop
 800bcd4:	2400716c 	.word	0x2400716c
 800bcd8:	240002bc 	.word	0x240002bc

0800bcdc <BSP_QSPI_Init>:
{
 800bcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce0:	460d      	mov	r5, r1
 800bce2:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bce4:	4604      	mov	r4, r0
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f040 81ac 	bne.w	800c044 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800bcec:	4e03      	ldr	r6, [pc, #12]	; (800bcfc <BSP_QSPI_Init+0x20>)
 800bcee:	7833      	ldrb	r3, [r6, #0]
 800bcf0:	b133      	cbz	r3, 800bd00 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 800bcf2:	2000      	movs	r0, #0
}
 800bcf4:	b024      	add	sp, #144	; 0x90
 800bcf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcfa:	bf00      	nop
 800bcfc:	2400716c 	.word	0x2400716c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800bd00:	4bc2      	ldr	r3, [pc, #776]	; (800c00c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800bd02:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800bd06:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800bd08:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 800bd0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800bd0e:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800bd12:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800bd16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800bd1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bd22:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800bd26:	9201      	str	r2, [sp, #4]
 800bd28:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800bd2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bd2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd30:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800bd32:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bd34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd38:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 800bd3a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd3e:	f042 0202 	orr.w	r2, r2, #2
 800bd42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bd46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd4a:	f002 0202 	and.w	r2, r2, #2
 800bd4e:	9202      	str	r2, [sp, #8]
 800bd50:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800bd52:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd5a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bd5e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd62:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bd66:	9203      	str	r2, [sp, #12]
 800bd68:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800bd6a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd6e:	f042 0208 	orr.w	r2, r2, #8
 800bd72:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bd76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd7a:	f002 0208 	and.w	r2, r2, #8
 800bd7e:	9204      	str	r2, [sp, #16]
 800bd80:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800bd82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd86:	f042 0220 	orr.w	r2, r2, #32
 800bd8a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bd8e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd92:	f002 0220 	and.w	r2, r2, #32
 800bd96:	9205      	str	r2, [sp, #20]
 800bd98:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800bd9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bd9e:	f042 0220 	orr.w	r2, r2, #32
 800bda2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bda6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdaa:	f002 0220 	and.w	r2, r2, #32
 800bdae:	9206      	str	r2, [sp, #24]
 800bdb0:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800bdb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdb6:	f042 0220 	orr.w	r2, r2, #32
 800bdba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bdbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdc2:	f002 0220 	and.w	r2, r2, #32
 800bdc6:	9207      	str	r2, [sp, #28]
 800bdc8:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800bdca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bdd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdda:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800bdde:	9208      	str	r2, [sp, #32]
 800bde0:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800bde2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bde6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800bdee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdf2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bdf6:	9209      	str	r2, [sp, #36]	; 0x24
 800bdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800bdfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800bdfe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800be06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800be0a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800be0e:	920a      	str	r2, [sp, #40]	; 0x28
 800be10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800be12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800be16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800be1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800be22:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800be26:	920b      	str	r2, [sp, #44]	; 0x2c
 800be28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800be2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800be2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800be36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be3e:	930c      	str	r3, [sp, #48]	; 0x30
 800be40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800be42:	2302      	movs	r3, #2
 800be44:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800be48:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be4a:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be4c:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800be50:	486f      	ldr	r0, [pc, #444]	; (800c010 <BSP_QSPI_Init+0x334>)
 800be52:	f001 fa2f 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800be56:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800be58:	a916      	add	r1, sp, #88	; 0x58
 800be5a:	486e      	ldr	r0, [pc, #440]	; (800c014 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800be5c:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800be5e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800be62:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800be66:	f001 fa25 	bl	800d2b4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800be6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800be6e:	a916      	add	r1, sp, #88	; 0x58
 800be70:	4869      	ldr	r0, [pc, #420]	; (800c018 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800be72:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be74:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be76:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800be78:	f001 fa1c 	bl	800d2b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800be7c:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800be7e:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800be82:	4866      	ldr	r0, [pc, #408]	; (800c01c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800be84:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be88:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800be8a:	f001 fa13 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800be8e:	a916      	add	r1, sp, #88	; 0x58
 800be90:	4863      	ldr	r0, [pc, #396]	; (800c020 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800be92:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800be96:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800be9a:	f001 fa0b 	bl	800d2b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800be9e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800bea0:	a916      	add	r1, sp, #88	; 0x58
 800bea2:	485e      	ldr	r0, [pc, #376]	; (800c01c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800bea4:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800bea6:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800bea8:	f001 fa04 	bl	800d2b4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800beac:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800beae:	a916      	add	r1, sp, #88	; 0x58
 800beb0:	485b      	ldr	r0, [pc, #364]	; (800c020 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800beb2:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800beb4:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800beb6:	f001 f9fd 	bl	800d2b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800beba:	a916      	add	r1, sp, #88	; 0x58
 800bebc:	4855      	ldr	r0, [pc, #340]	; (800c014 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800bebe:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800bec2:	f001 f9f7 	bl	800d2b4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800bec6:	a916      	add	r1, sp, #88	; 0x58
 800bec8:	4855      	ldr	r0, [pc, #340]	; (800c020 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800beca:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800bece:	f001 f9f1 	bl	800d2b4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800bed2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800bed6:	a916      	add	r1, sp, #88	; 0x58
 800bed8:	484e      	ldr	r0, [pc, #312]	; (800c014 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800beda:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800bedc:	f001 f9ea 	bl	800d2b4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800bee0:	4622      	mov	r2, r4
 800bee2:	210f      	movs	r1, #15
 800bee4:	205c      	movs	r0, #92	; 0x5c
 800bee6:	f000 fbcf 	bl	800c688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800beea:	205c      	movs	r0, #92	; 0x5c
 800beec:	f000 fbfe 	bl	800c6ec <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800bef0:	a811      	add	r0, sp, #68	; 0x44
 800bef2:	f7fe ff22 	bl	800ad3a <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800bef6:	786a      	ldrb	r2, [r5, #1]
 800bef8:	4b4a      	ldr	r3, [pc, #296]	; (800c024 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800befa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800befe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf02:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf06:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bf0a:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 800bf0c:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800bf10:	a90d      	add	r1, sp, #52	; 0x34
 800bf12:	4845      	ldr	r0, [pc, #276]	; (800c028 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bf14:	bf08      	it	eq
 800bf16:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800bf18:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bf1a:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800bf1c:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800bf1e:	f7ff fe73 	bl	800bc08 <MX_QSPI_Init>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	f040 8091 	bne.w	800c04a <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bf28:	2103      	movs	r1, #3
 800bf2a:	483f      	ldr	r0, [pc, #252]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf2c:	f7ff f876 	bl	800b01c <MT25TL01G_ResetEnable>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	d17c      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bf34:	2103      	movs	r1, #3
 800bf36:	483c      	ldr	r0, [pc, #240]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf38:	f7ff f891 	bl	800b05e <MT25TL01G_ResetMemory>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	d176      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf40:	7871      	ldrb	r1, [r6, #1]
 800bf42:	4839      	ldr	r0, [pc, #228]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf44:	f7fe ff0a 	bl	800ad5c <MT25TL01G_AutoPollingMemReady>
 800bf48:	4601      	mov	r1, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d16f      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf4e:	4836      	ldr	r0, [pc, #216]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf50:	f7ff f864 	bl	800b01c <MT25TL01G_ResetEnable>
 800bf54:	4601      	mov	r1, r0
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d169      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf5a:	4833      	ldr	r0, [pc, #204]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf5c:	f7ff f87f 	bl	800b05e <MT25TL01G_ResetMemory>
 800bf60:	4601      	mov	r1, r0
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d163      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800bf66:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800bf68:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf6a:	482f      	ldr	r0, [pc, #188]	; (800c028 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800bf6c:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf6e:	f7fe fef5 	bl	800ad5c <MT25TL01G_AutoPollingMemReady>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	d15b      	bne.n	800c02e <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf76:	7871      	ldrb	r1, [r6, #1]
 800bf78:	482b      	ldr	r0, [pc, #172]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bf7a:	f7fe ff5e 	bl	800ae3a <MT25TL01G_Enter4BytesAddressMode>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d155      	bne.n	800c02e <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800bf82:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 800bf86:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 800bf8a:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bf8c:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800bf90:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800bf92:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bf94:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800bf96:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800bf98:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800bf9c:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 800bf9e:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800bfa0:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800bfa4:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800bfa8:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfac:	481e      	ldr	r0, [pc, #120]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bfae:	f002 fa85 	bl	800e4bc <HAL_QSPI_Command>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d13b      	bne.n	800c02e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfba:	f10d 0102 	add.w	r1, sp, #2
 800bfbe:	481a      	ldr	r0, [pc, #104]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bfc0:	f002 fb18 	bl	800e5f4 <HAL_QSPI_Receive>
 800bfc4:	bb98      	cbnz	r0, 800c02e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bfc6:	7871      	ldrb	r1, [r6, #1]
 800bfc8:	4817      	ldr	r0, [pc, #92]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800bfca:	f7fe fef2 	bl	800adb2 <MT25TL01G_WriteEnable>
 800bfce:	bb70      	cbnz	r0, 800c02e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800bfd0:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bfd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bfd6:	a916      	add	r1, sp, #88	; 0x58
 800bfd8:	4813      	ldr	r0, [pc, #76]	; (800c028 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800bfda:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800bfdc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800bfe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfe4:	051b      	lsls	r3, r3, #20
 800bfe6:	0d1b      	lsrs	r3, r3, #20
 800bfe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bfec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bff0:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bff4:	f002 fa62 	bl	800e4bc <HAL_QSPI_Command>
 800bff8:	b9c8      	cbnz	r0, 800c02e <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bffa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bffe:	f10d 0102 	add.w	r1, sp, #2
 800c002:	4809      	ldr	r0, [pc, #36]	; (800c028 <BSP_QSPI_Init+0x34c>)
 800c004:	f002 fa9d 	bl	800e542 <HAL_QSPI_Transmit>
 800c008:	e010      	b.n	800c02c <BSP_QSPI_Init+0x350>
 800c00a:	bf00      	nop
 800c00c:	58024400 	.word	0x58024400
 800c010:	58020400 	.word	0x58020400
 800c014:	58021800 	.word	0x58021800
 800c018:	58020c00 	.word	0x58020c00
 800c01c:	58021c00 	.word	0x58021c00
 800c020:	58021400 	.word	0x58021400
 800c024:	0802760c 	.word	0x0802760c
 800c028:	240002bc 	.word	0x240002bc
 800c02c:	b110      	cbz	r0, 800c034 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800c02e:	f06f 0004 	mvn.w	r0, #4
 800c032:	e65f      	b.n	800bcf4 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800c034:	786a      	ldrb	r2, [r5, #1]
 800c036:	7829      	ldrb	r1, [r5, #0]
 800c038:	f7ff fe18 	bl	800bc6c <BSP_QSPI_ConfigFlash>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	f43f ae58 	beq.w	800bcf2 <BSP_QSPI_Init+0x16>
 800c042:	e7f4      	b.n	800c02e <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 800c044:	f06f 0001 	mvn.w	r0, #1
 800c048:	e654      	b.n	800bcf4 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c04a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800c04e:	e651      	b.n	800bcf4 <BSP_QSPI_Init+0x18>

0800c050 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c050:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800c052:	4604      	mov	r4, r0
 800c054:	b970      	cbnz	r0, 800c074 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <BSP_SDRAM_DeInit+0x2c>)
 800c058:	4809      	ldr	r0, [pc, #36]	; (800c080 <BSP_SDRAM_DeInit+0x30>)
 800c05a:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c05c:	f003 ff3c 	bl	800fed8 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800c060:	207a      	movs	r0, #122	; 0x7a
 800c062:	f000 fb51 	bl	800c708 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c066:	4807      	ldr	r0, [pc, #28]	; (800c084 <BSP_SDRAM_DeInit+0x34>)
 800c068:	4b07      	ldr	r3, [pc, #28]	; (800c088 <BSP_SDRAM_DeInit+0x38>)
 800c06a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c06c:	f002 f8a5 	bl	800e1ba <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800c070:	4620      	mov	r0, r4
}
 800c072:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800c074:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800c078:	e7fb      	b.n	800c072 <BSP_SDRAM_DeInit+0x22>
 800c07a:	bf00      	nop
 800c07c:	52004140 	.word	0x52004140
 800c080:	24007178 	.word	0x24007178
 800c084:	240071ac 	.word	0x240071ac
 800c088:	52000040 	.word	0x52000040

0800c08c <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c08c:	2201      	movs	r2, #1
 800c08e:	4915      	ldr	r1, [pc, #84]	; (800c0e4 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c090:	4b15      	ldr	r3, [pc, #84]	; (800c0e8 <MX_SDRAM_Init+0x5c>)
{
 800c092:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c094:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800c098:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800c09a:	2104      	movs	r1, #4
 800c09c:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c09e:	2440      	movs	r4, #64	; 0x40
{
 800c0a0:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800c0a2:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c0a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c0aa:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800c0b4:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c0b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800c0bc:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c0be:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c0c0:	2207      	movs	r2, #7
 800c0c2:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 800c0c4:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c0c8:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800c0ca:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c0cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800c0d0:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c0d4:	f003 fed8 	bl	800fe88 <HAL_SDRAM_Init>
}
 800c0d8:	3800      	subs	r0, #0
 800c0da:	bf18      	it	ne
 800c0dc:	2001      	movne	r0, #1
 800c0de:	b008      	add	sp, #32
 800c0e0:	bd10      	pop	{r4, pc}
 800c0e2:	bf00      	nop
 800c0e4:	52004140 	.word	0x52004140
 800c0e8:	24007178 	.word	0x24007178

0800c0ec <BSP_SDRAM_Init>:
{
 800c0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c0ee:	4605      	mov	r5, r0
{
 800c0f0:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	f040 80dd 	bne.w	800c2b2 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800c0f8:	4b71      	ldr	r3, [pc, #452]	; (800c2c0 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c0fa:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c0fc:	a909      	add	r1, sp, #36	; 0x24
 800c0fe:	4871      	ldr	r0, [pc, #452]	; (800c2c4 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800c100:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 800c104:	4c70      	ldr	r4, [pc, #448]	; (800c2c8 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800c106:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c10a:	4e70      	ldr	r6, [pc, #448]	; (800c2cc <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800c10c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c110:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c114:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800c118:	9201      	str	r2, [sp, #4]
 800c11a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800c11c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c120:	f042 0201 	orr.w	r2, r2, #1
 800c124:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c128:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c12c:	f002 0201 	and.w	r2, r2, #1
 800c130:	9202      	str	r2, [sp, #8]
 800c132:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c134:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c138:	f042 0208 	orr.w	r2, r2, #8
 800c13c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c140:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c144:	f002 0208 	and.w	r2, r2, #8
 800c148:	9203      	str	r2, [sp, #12]
 800c14a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c14c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c150:	f042 0210 	orr.w	r2, r2, #16
 800c154:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c158:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c15c:	f002 0210 	and.w	r2, r2, #16
 800c160:	9204      	str	r2, [sp, #16]
 800c162:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c164:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c168:	f042 0220 	orr.w	r2, r2, #32
 800c16c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c170:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c174:	f002 0220 	and.w	r2, r2, #32
 800c178:	9205      	str	r2, [sp, #20]
 800c17a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c17c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c184:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c188:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c18c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800c190:	9206      	str	r2, [sp, #24]
 800c192:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c194:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c19c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800c1a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c1a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800c1a8:	9207      	str	r2, [sp, #28]
 800c1aa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c1ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800c1b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c1b8:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800c1ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c2:	9308      	str	r3, [sp, #32]
 800c1c4:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c1cc:	230c      	movs	r3, #12
 800c1ce:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800c1d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c1d6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c1d8:	f001 f86c 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c1dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c1e0:	a909      	add	r1, sp, #36	; 0x24
 800c1e2:	483b      	ldr	r0, [pc, #236]	; (800c2d0 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c1e4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c1e6:	f001 f865 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c1ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c1ee:	a909      	add	r1, sp, #36	; 0x24
 800c1f0:	4838      	ldr	r0, [pc, #224]	; (800c2d4 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c1f2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c1f4:	f001 f85e 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800c1f8:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c1fc:	a909      	add	r1, sp, #36	; 0x24
 800c1fe:	4836      	ldr	r0, [pc, #216]	; (800c2d8 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800c200:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c202:	f001 f857 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800c206:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c20a:	a909      	add	r1, sp, #36	; 0x24
 800c20c:	4833      	ldr	r0, [pc, #204]	; (800c2dc <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800c20e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c210:	f001 f850 	bl	800d2b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800c214:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c218:	a909      	add	r1, sp, #36	; 0x24
 800c21a:	4831      	ldr	r0, [pc, #196]	; (800c2e0 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800c21c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800c21e:	f001 f849 	bl	800d2b4 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800c222:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800c22a:	f240 2002 	movw	r0, #514	; 0x202
 800c22e:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c232:	6334      	str	r4, [r6, #48]	; 0x30
 800c234:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 800c236:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800c23a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800c23e:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 800c240:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c242:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 800c244:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 800c246:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c24a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800c24e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800c252:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800c254:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800c256:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 800c258:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 800c25c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c260:	f001 ffab 	bl	800e1ba <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 800c264:	4620      	mov	r0, r4
 800c266:	f001 ff39 	bl	800e0dc <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 800c26a:	462a      	mov	r2, r5
 800c26c:	210f      	movs	r1, #15
 800c26e:	207a      	movs	r0, #122	; 0x7a
 800c270:	f000 fa0a 	bl	800c688 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800c274:	207a      	movs	r0, #122	; 0x7a
 800c276:	f000 fa39 	bl	800c6ec <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7ff ff06 	bl	800c08c <MX_SDRAM_Init>
 800c280:	b9d0      	cbnz	r0, 800c2b8 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c282:	4919      	ldr	r1, [pc, #100]	; (800c2e8 <BSP_SDRAM_Init+0x1fc>)
 800c284:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 800c286:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c28a:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800c28e:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800c290:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 800c294:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800c296:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800c29a:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800c29e:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800c2a0:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800c2a2:	f7fe fd1d 	bl	800ace0 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	bf18      	it	ne
 800c2aa:	f06f 0004 	mvnne.w	r0, #4
}
 800c2ae:	b00f      	add	sp, #60	; 0x3c
 800c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800c2b2:	f06f 0001 	mvn.w	r0, #1
 800c2b6:	e7fa      	b.n	800c2ae <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2bc:	e7f7      	b.n	800c2ae <BSP_SDRAM_Init+0x1c2>
 800c2be:	bf00      	nop
 800c2c0:	58024400 	.word	0x58024400
 800c2c4:	58020c00 	.word	0x58020c00
 800c2c8:	24007218 	.word	0x24007218
 800c2cc:	24007178 	.word	0x24007178
 800c2d0:	58021000 	.word	0x58021000
 800c2d4:	58021400 	.word	0x58021400
 800c2d8:	58021800 	.word	0x58021800
 800c2dc:	58021c00 	.word	0x58021c00
 800c2e0:	58022000 	.word	0x58022000
 800c2e4:	52000040 	.word	0x52000040
 800c2e8:	24007284 	.word	0x24007284

0800c2ec <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f0:	460c      	mov	r4, r1
 800c2f2:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c2f4:	4606      	mov	r6, r0
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d171      	bne.n	800c3de <BSP_TS_Init+0xf2>
 800c2fa:	680b      	ldr	r3, [r1, #0]
 800c2fc:	1e5a      	subs	r2, r3, #1
 800c2fe:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 800c302:	d26c      	bcs.n	800c3de <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c304:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c306:	1e51      	subs	r1, r2, #1
 800c308:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800c30c:	d267      	bcs.n	800c3de <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c30e:	4293      	cmp	r3, r2
 800c310:	bf28      	it	cs
 800c312:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c314:	68e2      	ldr	r2, [r4, #12]
 800c316:	429a      	cmp	r2, r3
 800c318:	d861      	bhi.n	800c3de <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800c31a:	2370      	movs	r3, #112	; 0x70
 800c31c:	2254      	movs	r2, #84	; 0x54
 800c31e:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800c322:	4f32      	ldr	r7, [pc, #200]	; (800c3ec <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 800c324:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800c40c <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800c328:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800c410 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800c32c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800c330:	4b2f      	ldr	r3, [pc, #188]	; (800c3f0 <BSP_TS_Init+0x104>)
 800c332:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c334:	4b2f      	ldr	r3, [pc, #188]	; (800c3f4 <BSP_TS_Init+0x108>)
 800c336:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c338:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <BSP_TS_Init+0x10c>)
 800c33a:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c33c:	4b2f      	ldr	r3, [pc, #188]	; (800c3fc <BSP_TS_Init+0x110>)
 800c33e:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800c340:	4b2f      	ldr	r3, [pc, #188]	; (800c400 <BSP_TS_Init+0x114>)
 800c342:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800c344:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800c348:	a906      	add	r1, sp, #24
 800c34a:	4828      	ldr	r0, [pc, #160]	; (800c3ec <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800c34c:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 800c350:	f7fe fbcc 	bl	800aaec <FT6X06_RegisterBusIO>
 800c354:	b118      	cbz	r0, 800c35e <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 800c356:	2e01      	cmp	r6, #1
 800c358:	d044      	beq.n	800c3e4 <BSP_TS_Init+0xf8>
 800c35a:	2601      	movs	r6, #1
 800c35c:	e7f2      	b.n	800c344 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800c35e:	4669      	mov	r1, sp
 800c360:	4638      	mov	r0, r7
 800c362:	f7fe fb0c 	bl	800a97e <FT6X06_ReadID>
 800c366:	2800      	cmp	r0, #0
 800c368:	d1f5      	bne.n	800c356 <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 800c36a:	9b00      	ldr	r3, [sp, #0]
 800c36c:	2b11      	cmp	r3, #17
 800c36e:	d1f2      	bne.n	800c356 <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800c370:	a903      	add	r1, sp, #12
 800c372:	4638      	mov	r0, r7
 800c374:	f7fe fab0 	bl	800a8d8 <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800c378:	4b22      	ldr	r3, [pc, #136]	; (800c404 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800c37a:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 800c37c:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800c380:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	4798      	blx	r3
 800c388:	4605      	mov	r5, r0
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d1e3      	bne.n	800c356 <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c38e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c390:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c392:	4e1d      	ldr	r6, [pc, #116]	; (800c408 <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c394:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c398:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800c39a:	6863      	ldr	r3, [r4, #4]
 800c39c:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800c39e:	68a3      	ldr	r3, [r4, #8]
 800c3a0:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800c3a2:	68e3      	ldr	r3, [r4, #12]
 800c3a4:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c3a6:	f8d9 3000 	ldr.w	r3, [r9]
 800c3aa:	69db      	ldr	r3, [r3, #28]
 800c3ac:	4798      	blx	r3
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	da02      	bge.n	800c3b8 <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3b2:	f06f 0504 	mvn.w	r5, #4
 800c3b6:	e00e      	b.n	800c3d6 <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c3b8:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c3ba:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c3bc:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c3be:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c3c0:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c3c2:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c3c4:	68e3      	ldr	r3, [r4, #12]
 800c3c6:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c3c8:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c3ca:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c3cc:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c3ce:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c3d0:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c3d2:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	b00c      	add	sp, #48	; 0x30
 800c3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800c3de:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800c3e2:	e7f8      	b.n	800c3d6 <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 800c3e4:	f04f 35ff 	mov.w	r5, #4294967295
 800c3e8:	e7f5      	b.n	800c3d6 <BSP_TS_Init+0xea>
 800c3ea:	bf00      	nop
 800c3ec:	240072a4 	.word	0x240072a4
 800c3f0:	0800b8ed 	.word	0x0800b8ed
 800c3f4:	0800b859 	.word	0x0800b859
 800c3f8:	0800bbd1 	.word	0x0800bbd1
 800c3fc:	0800bb9d 	.word	0x0800bb9d
 800c400:	0800bc05 	.word	0x0800bc05
 800c404:	24000018 	.word	0x24000018
 800c408:	240072d0 	.word	0x240072d0
 800c40c:	240072cc 	.word	0x240072cc
 800c410:	240072f8 	.word	0x240072f8

0800c414 <BSP_TS_GetState>:
{
 800c414:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c418:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d151      	bne.n	800c4c2 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c41e:	4b2a      	ldr	r3, [pc, #168]	; (800c4c8 <BSP_TS_GetState+0xb4>)
 800c420:	a901      	add	r1, sp, #4
 800c422:	4a2a      	ldr	r2, [pc, #168]	; (800c4cc <BSP_TS_GetState+0xb8>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	6810      	ldr	r0, [r2, #0]
 800c428:	691b      	ldr	r3, [r3, #16]
 800c42a:	4798      	blx	r3
 800c42c:	2800      	cmp	r0, #0
 800c42e:	db45      	blt.n	800c4bc <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c430:	4927      	ldr	r1, [pc, #156]	; (800c4d0 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 800c432:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c434:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c438:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 800c43a:	2800      	cmp	r0, #0
 800c43c:	d03a      	beq.n	800c4b4 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c43e:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800c440:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c444:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800c446:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 800c44a:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c44e:	bf42      	ittt	mi
 800c450:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 800c452:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 800c454:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c456:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800c458:	bf44      	itt	mi
 800c45a:	f108 34ff 	addmi.w	r4, r8, #4294967295
 800c45e:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c460:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c462:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800c464:	bf48      	it	mi
 800c466:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c46a:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800c46e:	bf48      	it	mi
 800c470:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c472:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 800c474:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c476:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c478:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c47a:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c47e:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c482:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c484:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c486:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c488:	bf8c      	ite	hi
 800c48a:	eba4 050c 	subhi.w	r5, r4, ip
 800c48e:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c492:	42bb      	cmp	r3, r7
 800c494:	bf8c      	ite	hi
 800c496:	1bda      	subhi	r2, r3, r7
 800c498:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c49a:	42a8      	cmp	r0, r5
 800c49c:	d301      	bcc.n	800c4a2 <BSP_TS_GetState+0x8e>
 800c49e:	4290      	cmp	r0, r2
 800c4a0:	d205      	bcs.n	800c4ae <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800c4a2:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800c4a4:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800c4a6:	2000      	movs	r0, #0
}
 800c4a8:	b004      	add	sp, #16
 800c4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c4ae:	e9c6 c701 	strd	ip, r7, [r6, #4]
 800c4b2:	e7f8      	b.n	800c4a6 <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c4b4:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c4b8:	60b7      	str	r7, [r6, #8]
 800c4ba:	e7f5      	b.n	800c4a8 <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c4bc:	f06f 0004 	mvn.w	r0, #4
 800c4c0:	e7f2      	b.n	800c4a8 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800c4c2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800c4c6:	e7ef      	b.n	800c4a8 <BSP_TS_GetState+0x94>
 800c4c8:	240072f8 	.word	0x240072f8
 800c4cc:	240072cc 	.word	0x240072cc
 800c4d0:	240072d0 	.word	0x240072d0

0800c4d4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800c4d4:	4b2d      	ldr	r3, [pc, #180]	; (800c58c <SystemInit+0xb8>)
 800c4d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c4da:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800c4de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800c4e2:	691a      	ldr	r2, [r3, #16]
 800c4e4:	f042 0210 	orr.w	r2, r2, #16
 800c4e8:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c4ea:	4a29      	ldr	r2, [pc, #164]	; (800c590 <SystemInit+0xbc>)
 800c4ec:	6813      	ldr	r3, [r2, #0]
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	2b06      	cmp	r3, #6
 800c4f4:	d805      	bhi.n	800c502 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c4f6:	6813      	ldr	r3, [r2, #0]
 800c4f8:	f023 030f 	bic.w	r3, r3, #15
 800c4fc:	f043 0307 	orr.w	r3, r3, #7
 800c500:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800c502:	4b24      	ldr	r3, [pc, #144]	; (800c594 <SystemInit+0xc0>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	f042 0201 	orr.w	r2, r2, #1
 800c50a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c50c:	2200      	movs	r2, #0
 800c50e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800c510:	4a21      	ldr	r2, [pc, #132]	; (800c598 <SystemInit+0xc4>)
 800c512:	6819      	ldr	r1, [r3, #0]
 800c514:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c516:	491e      	ldr	r1, [pc, #120]	; (800c590 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800c518:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800c51a:	680a      	ldr	r2, [r1, #0]
 800c51c:	0712      	lsls	r2, r2, #28
 800c51e:	d505      	bpl.n	800c52c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800c520:	680a      	ldr	r2, [r1, #0]
 800c522:	f022 020f 	bic.w	r2, r2, #15
 800c526:	f042 0207 	orr.w	r2, r2, #7
 800c52a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800c52c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800c52e:	491b      	ldr	r1, [pc, #108]	; (800c59c <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 800c530:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800c532:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800c534:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800c536:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800c538:	4919      	ldr	r1, [pc, #100]	; (800c5a0 <SystemInit+0xcc>)
 800c53a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800c53c:	4919      	ldr	r1, [pc, #100]	; (800c5a4 <SystemInit+0xd0>)
 800c53e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800c540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800c542:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800c544:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800c546:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800c548:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800c54a:	6819      	ldr	r1, [r3, #0]
 800c54c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800c550:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800c552:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800c554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c558:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800c55c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c560:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800c564:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <SystemInit+0xd4>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	0c1b      	lsrs	r3, r3, #16
 800c56a:	041b      	lsls	r3, r3, #16
 800c56c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c570:	d203      	bcs.n	800c57a <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800c572:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <SystemInit+0xd8>)
 800c574:	2201      	movs	r2, #1
 800c576:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800c57a:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <SystemInit+0xdc>)
 800c57c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800c580:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800c582:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c586:	4b01      	ldr	r3, [pc, #4]	; (800c58c <SystemInit+0xb8>)
 800c588:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800c58a:	4770      	bx	lr
 800c58c:	e000ed00 	.word	0xe000ed00
 800c590:	52002000 	.word	0x52002000
 800c594:	58024400 	.word	0x58024400
 800c598:	eaf6ed7f 	.word	0xeaf6ed7f
 800c59c:	02020200 	.word	0x02020200
 800c5a0:	01ff0000 	.word	0x01ff0000
 800c5a4:	01010280 	.word	0x01010280
 800c5a8:	5c001000 	.word	0x5c001000
 800c5ac:	51008000 	.word	0x51008000
 800c5b0:	52004000 	.word	0x52004000

0800c5b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c5b4:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c5b6:	2003      	movs	r0, #3
 800c5b8:	f000 f854 	bl	800c664 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c5bc:	f002 fc0c 	bl	800edd8 <HAL_RCC_GetSysClockFreq>
 800c5c0:	490f      	ldr	r1, [pc, #60]	; (800c600 <HAL_Init+0x4c>)
 800c5c2:	4a10      	ldr	r2, [pc, #64]	; (800c604 <HAL_Init+0x50>)
 800c5c4:	698b      	ldr	r3, [r1, #24]
 800c5c6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800c5ca:	5cd3      	ldrb	r3, [r2, r3]
 800c5cc:	f003 031f 	and.w	r3, r3, #31
 800c5d0:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c5d2:	698b      	ldr	r3, [r1, #24]
 800c5d4:	f003 030f 	and.w	r3, r3, #15
 800c5d8:	5cd3      	ldrb	r3, [r2, r3]
 800c5da:	4a0b      	ldr	r2, [pc, #44]	; (800c608 <HAL_Init+0x54>)
 800c5dc:	f003 031f 	and.w	r3, r3, #31
 800c5e0:	fa20 f303 	lsr.w	r3, r0, r3
 800c5e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <HAL_Init+0x58>)
 800c5e8:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c5ea:	2000      	movs	r0, #0
 800c5ec:	f7f4 ff00 	bl	80013f0 <HAL_InitTick>
 800c5f0:	4604      	mov	r4, r0
 800c5f2:	b918      	cbnz	r0, 800c5fc <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800c5f4:	f7f4 fc84 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800c5f8:	4620      	mov	r0, r4
 800c5fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c5fc:	2401      	movs	r4, #1
 800c5fe:	e7fb      	b.n	800c5f8 <HAL_Init+0x44>
 800c600:	58024400 	.word	0x58024400
 800c604:	08027614 	.word	0x08027614
 800c608:	2400004c 	.word	0x2400004c
 800c60c:	24000048 	.word	0x24000048

0800c610 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800c610:	4a03      	ldr	r2, [pc, #12]	; (800c620 <HAL_IncTick+0x10>)
 800c612:	4b04      	ldr	r3, [pc, #16]	; (800c624 <HAL_IncTick+0x14>)
 800c614:	6811      	ldr	r1, [r2, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	440b      	add	r3, r1
 800c61a:	6013      	str	r3, [r2, #0]
}
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	240072fc 	.word	0x240072fc
 800c624:	24000050 	.word	0x24000050

0800c628 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c628:	4b01      	ldr	r3, [pc, #4]	; (800c630 <HAL_GetTick+0x8>)
 800c62a:	6818      	ldr	r0, [r3, #0]
}
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	240072fc 	.word	0x240072fc

0800c634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c638:	f7ff fff6 	bl	800c628 <HAL_GetTick>
 800c63c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c63e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800c640:	bf1e      	ittt	ne
 800c642:	4b04      	ldrne	r3, [pc, #16]	; (800c654 <HAL_Delay+0x20>)
 800c644:	781b      	ldrbne	r3, [r3, #0]
 800c646:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800c648:	f7ff ffee 	bl	800c628 <HAL_GetTick>
 800c64c:	1b43      	subs	r3, r0, r5
 800c64e:	42a3      	cmp	r3, r4
 800c650:	d3fa      	bcc.n	800c648 <HAL_Delay+0x14>
  {
  }
}
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	24000050 	.word	0x24000050

0800c658 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800c658:	4b01      	ldr	r3, [pc, #4]	; (800c660 <HAL_GetREVID+0x8>)
 800c65a:	6818      	ldr	r0, [r3, #0]
}
 800c65c:	0c00      	lsrs	r0, r0, #16
 800c65e:	4770      	bx	lr
 800c660:	5c001000 	.word	0x5c001000

0800c664 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c664:	4907      	ldr	r1, [pc, #28]	; (800c684 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c666:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c668:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c66a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c66e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800c672:	0412      	lsls	r2, r2, #16
 800c674:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c67c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800c680:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c682:	4770      	bx	lr
 800c684:	e000ed00 	.word	0xe000ed00

0800c688 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c688:	4b16      	ldr	r3, [pc, #88]	; (800c6e4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c68a:	b530      	push	{r4, r5, lr}
 800c68c:	68dc      	ldr	r4, [r3, #12]
 800c68e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c692:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c696:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c698:	2d04      	cmp	r5, #4
 800c69a:	bf28      	it	cs
 800c69c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c69e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6a0:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c6a4:	bf8c      	ite	hi
 800c6a6:	3c03      	subhi	r4, #3
 800c6a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6aa:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800c6ae:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c6b0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6b4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c6b8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c6bc:	fa01 f104 	lsl.w	r1, r1, r4
 800c6c0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800c6c8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800c6ca:	db06      	blt.n	800c6da <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6cc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800c6d0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800c6d4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800c6d8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c6da:	f000 000f 	and.w	r0, r0, #15
 800c6de:	4a02      	ldr	r2, [pc, #8]	; (800c6e8 <HAL_NVIC_SetPriority+0x60>)
 800c6e0:	5413      	strb	r3, [r2, r0]
 800c6e2:	e7f9      	b.n	800c6d8 <HAL_NVIC_SetPriority+0x50>
 800c6e4:	e000ed00 	.word	0xe000ed00
 800c6e8:	e000ed14 	.word	0xe000ed14

0800c6ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	db08      	blt.n	800c702 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	0942      	lsrs	r2, r0, #5
 800c6f4:	f000 001f 	and.w	r0, r0, #31
 800c6f8:	fa03 f000 	lsl.w	r0, r3, r0
 800c6fc:	4b01      	ldr	r3, [pc, #4]	; (800c704 <HAL_NVIC_EnableIRQ+0x18>)
 800c6fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800c702:	4770      	bx	lr
 800c704:	e000e100 	.word	0xe000e100

0800c708 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c708:	2800      	cmp	r0, #0
 800c70a:	db0d      	blt.n	800c728 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c70c:	0943      	lsrs	r3, r0, #5
 800c70e:	2201      	movs	r2, #1
 800c710:	f000 001f 	and.w	r0, r0, #31
 800c714:	3320      	adds	r3, #32
 800c716:	fa02 f000 	lsl.w	r0, r2, r0
 800c71a:	4a04      	ldr	r2, [pc, #16]	; (800c72c <HAL_NVIC_DisableIRQ+0x24>)
 800c71c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c720:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c724:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	e000e100 	.word	0xe000e100

0800c730 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800c730:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800c734:	4b04      	ldr	r3, [pc, #16]	; (800c748 <HAL_MPU_Disable+0x18>)
 800c736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c738:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c73c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800c73e:	2200      	movs	r2, #0
 800c740:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	e000ed00 	.word	0xe000ed00

0800c74c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <HAL_MPU_Enable+0x1c>)
 800c74e:	f040 0001 	orr.w	r0, r0, #1
 800c752:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800c756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c758:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c75c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800c75e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800c762:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800c766:	4770      	bx	lr
 800c768:	e000ed00 	.word	0xe000ed00

0800c76c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800c76c:	7843      	ldrb	r3, [r0, #1]
 800c76e:	4a14      	ldr	r2, [pc, #80]	; (800c7c0 <HAL_MPU_ConfigRegion+0x54>)
{
 800c770:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800c772:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 800c776:	7801      	ldrb	r1, [r0, #0]
 800c778:	b1e9      	cbz	r1, 800c7b6 <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800c77a:	6843      	ldr	r3, [r0, #4]
 800c77c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800c780:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c782:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800c784:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c786:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c78a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800c78c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c78e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800c792:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c794:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800c798:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c79a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800c79e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c7a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800c7a4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800c7a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c7aa:	7a01      	ldrb	r1, [r0, #8]
 800c7ac:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800c7b0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800c7b4:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800c7b6:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800c7ba:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 800c7be:	e7f9      	b.n	800c7b4 <HAL_MPU_ConfigRegion+0x48>
 800c7c0:	e000ed00 	.word	0xe000ed00

0800c7c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800c7c4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	b908      	cbnz	r0, 800c7ce <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800c7ca:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800c7cc:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c7ce:	7f43      	ldrb	r3, [r0, #29]
 800c7d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c7d4:	b913      	cbnz	r3, 800c7dc <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800c7d6:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800c7d8:	f7f4 fbaa 	bl	8000f30 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c7dc:	2302      	movs	r3, #2
 800c7de:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c7e0:	7923      	ldrb	r3, [r4, #4]
 800c7e2:	b9e3      	cbnz	r3, 800c81e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	4a13      	ldr	r2, [pc, #76]	; (800c834 <HAL_CRC_Init+0x70>)
 800c7e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c7ea:	689a      	ldr	r2, [r3, #8]
 800c7ec:	f022 0218 	bic.w	r2, r2, #24
 800c7f0:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c7f2:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c7f4:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c7f6:	b9d2      	cbnz	r2, 800c82e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c7f8:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c7fc:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800c7fe:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c800:	689a      	ldr	r2, [r3, #8]
 800c802:	6961      	ldr	r1, [r4, #20]
 800c804:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c808:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c80a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c80c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c814:	430a      	orrs	r2, r1
 800c816:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800c818:	2301      	movs	r3, #1
 800c81a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800c81c:	e7d6      	b.n	800c7cc <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c81e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800c822:	4620      	mov	r0, r4
 800c824:	f000 f808 	bl	800c838 <HAL_CRCEx_Polynomial_Set>
 800c828:	2800      	cmp	r0, #0
 800c82a:	d0e2      	beq.n	800c7f2 <HAL_CRC_Init+0x2e>
 800c82c:	e7cd      	b.n	800c7ca <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c82e:	6922      	ldr	r2, [r4, #16]
 800c830:	e7e4      	b.n	800c7fc <HAL_CRC_Init+0x38>
 800c832:	bf00      	nop
 800c834:	04c11db7 	.word	0x04c11db7

0800c838 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c838:	07cb      	lsls	r3, r1, #31
{
 800c83a:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c83c:	d50c      	bpl.n	800c858 <HAL_CRCEx_Polynomial_Set+0x20>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c83e:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c840:	3b01      	subs	r3, #1
 800c842:	d31c      	bcc.n	800c87e <HAL_CRCEx_Polynomial_Set+0x46>
 800c844:	fa21 f403 	lsr.w	r4, r1, r3
 800c848:	07e4      	lsls	r4, r4, #31
 800c84a:	d5f9      	bpl.n	800c840 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 800c84c:	2a10      	cmp	r2, #16
 800c84e:	d012      	beq.n	800c876 <HAL_CRCEx_Polynomial_Set+0x3e>
 800c850:	d804      	bhi.n	800c85c <HAL_CRCEx_Polynomial_Set+0x24>
 800c852:	b13a      	cbz	r2, 800c864 <HAL_CRCEx_Polynomial_Set+0x2c>
 800c854:	2a08      	cmp	r2, #8
 800c856:	d010      	beq.n	800c87a <HAL_CRCEx_Polynomial_Set+0x42>
        }
        break;
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
        {
          status =   HAL_ERROR;
 800c858:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 800c85a:	e00b      	b.n	800c874 <HAL_CRCEx_Polynomial_Set+0x3c>
    switch (PolyLength)
 800c85c:	2a18      	cmp	r2, #24
 800c85e:	d1fb      	bne.n	800c858 <HAL_CRCEx_Polynomial_Set+0x20>
        if (msb >= HAL_CRC_LENGTH_7B)
 800c860:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800c862:	d8f9      	bhi.n	800c858 <HAL_CRCEx_Polynomial_Set+0x20>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c864:	6800      	ldr	r0, [r0, #0]
 800c866:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c868:	6883      	ldr	r3, [r0, #8]
 800c86a:	f023 0318 	bic.w	r3, r3, #24
 800c86e:	431a      	orrs	r2, r3
 800c870:	6082      	str	r2, [r0, #8]
 800c872:	2000      	movs	r0, #0
}
 800c874:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 800c876:	2b07      	cmp	r3, #7
 800c878:	e7f3      	b.n	800c862 <HAL_CRCEx_Polynomial_Set+0x2a>
        if (msb >= HAL_CRC_LENGTH_16B)
 800c87a:	2b0f      	cmp	r3, #15
 800c87c:	e7f1      	b.n	800c862 <HAL_CRCEx_Polynomial_Set+0x2a>
    switch (PolyLength)
 800c87e:	2a00      	cmp	r2, #0
 800c880:	d1ea      	bne.n	800c858 <HAL_CRCEx_Polynomial_Set+0x20>
 800c882:	e7ef      	b.n	800c864 <HAL_CRCEx_Polynomial_Set+0x2c>

0800c884 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c884:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c886:	4604      	mov	r4, r0
 800c888:	2800      	cmp	r0, #0
 800c88a:	d036      	beq.n	800c8fa <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c88c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800c890:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c894:	b91b      	cbnz	r3, 800c89e <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c896:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c89a:	f7f4 fb61 	bl	8000f60 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c89e:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c8a0:	69e0      	ldr	r0, [r4, #28]
 800c8a2:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c8a4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c8ac:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c8ae:	6819      	ldr	r1, [r3, #0]
 800c8b0:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800c8b4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c8bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c8be:	68a2      	ldr	r2, [r4, #8]
 800c8c0:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 800c8c4:	4302      	orrs	r2, r0
 800c8c6:	f021 0101 	bic.w	r1, r1, #1
 800c8ca:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c8cc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c8ce:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c8d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c8d2:	0c12      	lsrs	r2, r2, #16
 800c8d4:	0412      	lsls	r2, r2, #16
 800c8d6:	430a      	orrs	r2, r1
 800c8d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c8da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c8dc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800c8e0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 800c8e4:	0552      	lsls	r2, r2, #21
 800c8e6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c8ea:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c8ec:	430a      	orrs	r2, r1
 800c8ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c8f0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c8f2:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c8f4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 800c8f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	e7fc      	b.n	800c8f8 <HAL_DMA2D_Init+0x74>

0800c8fe <HAL_DMA2D_LineEventCallback>:
 800c8fe:	4770      	bx	lr

0800c900 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 800c900:	4770      	bx	lr

0800c902 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c902:	6803      	ldr	r3, [r0, #0]
{
 800c904:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800c906:	685e      	ldr	r6, [r3, #4]
{
 800c908:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800c90a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c90c:	07f2      	lsls	r2, r6, #31
 800c90e:	d514      	bpl.n	800c93a <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800c910:	05e9      	lsls	r1, r5, #23
 800c912:	d512      	bpl.n	800c93a <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c91a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c91c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800c91e:	f042 0201 	orr.w	r2, r2, #1
 800c922:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800c924:	2201      	movs	r2, #1
 800c926:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c928:	2304      	movs	r3, #4
 800c92a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c92e:	2300      	movs	r3, #0
 800c930:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c934:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c936:	b103      	cbz	r3, 800c93a <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c938:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c93a:	06b2      	lsls	r2, r6, #26
 800c93c:	d516      	bpl.n	800c96c <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800c93e:	04ab      	lsls	r3, r5, #18
 800c940:	d514      	bpl.n	800c96c <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c94a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800c94c:	2220      	movs	r2, #32
 800c94e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c952:	f043 0302 	orr.w	r3, r3, #2
 800c956:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c958:	2304      	movs	r3, #4
 800c95a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c95e:	2300      	movs	r3, #0
 800c960:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c966:	b10b      	cbz	r3, 800c96c <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c968:	4620      	mov	r0, r4
 800c96a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c96c:	0730      	lsls	r0, r6, #28
 800c96e:	d516      	bpl.n	800c99e <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800c970:	0529      	lsls	r1, r5, #20
 800c972:	d514      	bpl.n	800c99e <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800c974:	6823      	ldr	r3, [r4, #0]
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c97c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800c97e:	2208      	movs	r2, #8
 800c980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c984:	f043 0304 	orr.w	r3, r3, #4
 800c988:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c98a:	2304      	movs	r3, #4
 800c98c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c990:	2300      	movs	r3, #0
 800c992:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800c996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c998:	b10b      	cbz	r3, 800c99e <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800c99a:	4620      	mov	r0, r4
 800c99c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800c99e:	0772      	lsls	r2, r6, #29
 800c9a0:	d50b      	bpl.n	800c9ba <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800c9a2:	056b      	lsls	r3, r5, #21
 800c9a4:	d509      	bpl.n	800c9ba <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c9a6:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c9a8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9b0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800c9b2:	2204      	movs	r2, #4
 800c9b4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800c9b6:	f7ff ffa2 	bl	800c8fe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800c9ba:	07b0      	lsls	r0, r6, #30
 800c9bc:	d514      	bpl.n	800c9e8 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800c9be:	05a9      	lsls	r1, r5, #22
 800c9c0:	d512      	bpl.n	800c9e8 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c9ca:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800c9d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9d2:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800c9e0:	6a23      	ldr	r3, [r4, #32]
 800c9e2:	b10b      	cbz	r3, 800c9e8 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800c9e8:	06f2      	lsls	r2, r6, #27
 800c9ea:	d513      	bpl.n	800ca14 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800c9ec:	04eb      	lsls	r3, r5, #19
 800c9ee:	d511      	bpl.n	800ca14 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c9f0:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800c9f2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c9fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800c9fc:	2210      	movs	r2, #16
 800c9fe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800ca00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca02:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800ca04:	2301      	movs	r3, #1
 800ca06:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800ca10:	f7ff ff76 	bl	800c900 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800ca14:	bd70      	pop	{r4, r5, r6, pc}

0800ca16 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800ca16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca1a:	4607      	mov	r7, r0
 800ca1c:	460d      	mov	r5, r1
 800ca1e:	4614      	mov	r4, r2
 800ca20:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ca22:	f7ff fe01 	bl	800c628 <HAL_GetTick>
 800ca26:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800ca2c:	07d2      	lsls	r2, r2, #31
 800ca2e:	d50a      	bpl.n	800ca46 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ca30:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800ca34:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 800ca36:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ca38:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800ca3c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800ca40:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800ca42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ca46:	f7ff fdef 	bl	800c628 <HAL_GetTick>
 800ca4a:	eba0 0008 	sub.w	r0, r0, r8
 800ca4e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ca52:	d9e9      	bls.n	800ca28 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800ca54:	2003      	movs	r0, #3
 800ca56:	e7f4      	b.n	800ca42 <DSI_ShortWrite+0x2c>

0800ca58 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ca58:	7c03      	ldrb	r3, [r0, #16]
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d05c      	beq.n	800cb18 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800ca5e:	2200      	movs	r2, #0
 800ca60:	6803      	ldr	r3, [r0, #0]
 800ca62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800ca66:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800ca6a:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 800ca6c:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800ca6e:	d507      	bpl.n	800ca80 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800ca70:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca74:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800ca78:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800ca7c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800ca80:	078a      	lsls	r2, r1, #30
 800ca82:	d505      	bpl.n	800ca90 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800ca84:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca88:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 800ca8c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800ca90:	074a      	lsls	r2, r1, #29
 800ca92:	d505      	bpl.n	800caa0 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 800ca94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800ca98:	f042 0201 	orr.w	r2, r2, #1
 800ca9c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800caa0:	070a      	lsls	r2, r1, #28
 800caa2:	d505      	bpl.n	800cab0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 800caa4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800caa8:	f042 0202 	orr.w	r2, r2, #2
 800caac:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800cab0:	06ca      	lsls	r2, r1, #27
 800cab2:	d505      	bpl.n	800cac0 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800cab4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cab8:	f042 020c 	orr.w	r2, r2, #12
 800cabc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800cac0:	068a      	lsls	r2, r1, #26
 800cac2:	d505      	bpl.n	800cad0 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800cac4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cac8:	f042 0210 	orr.w	r2, r2, #16
 800cacc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800cad0:	064a      	lsls	r2, r1, #25
 800cad2:	d505      	bpl.n	800cae0 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800cad4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cad8:	f042 0220 	orr.w	r2, r2, #32
 800cadc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800cae0:	060a      	lsls	r2, r1, #24
 800cae2:	d505      	bpl.n	800caf0 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800cae4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800caec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800caf0:	05ca      	lsls	r2, r1, #23
 800caf2:	d505      	bpl.n	800cb00 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800caf4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800caf8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cafc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800cb00:	058a      	lsls	r2, r1, #22
 800cb02:	d505      	bpl.n	800cb10 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800cb04:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800cb08:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800cb0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800cb10:	2300      	movs	r3, #0
 800cb12:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800cb14:	4618      	mov	r0, r3
 800cb16:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800cb18:	2002      	movs	r0, #2
}
 800cb1a:	4770      	bx	lr

0800cb1c <HAL_DSI_Init>:
{
 800cb1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb1e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800cb20:	4604      	mov	r4, r0
 800cb22:	2800      	cmp	r0, #0
 800cb24:	f000 80a9 	beq.w	800cc7a <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800cb28:	7c43      	ldrb	r3, [r0, #17]
 800cb2a:	b90b      	cbnz	r3, 800cb30 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800cb2c:	f7f4 fa3c 	bl	8000fa8 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800cb30:	2303      	movs	r3, #3
 800cb32:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800cb34:	2300      	movs	r3, #0
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800cb3e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cb42:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800cb46:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800cb4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb4e:	9300      	str	r3, [sp, #0]
 800cb50:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800cb52:	f7ff fd69 	bl	800c628 <HAL_GetTick>
 800cb56:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cb58:	6822      	ldr	r2, [r4, #0]
 800cb5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800cb5e:	04d9      	lsls	r1, r3, #19
 800cb60:	d57a      	bpl.n	800cc58 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cb62:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800cb66:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800cb6a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800cb6e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cb72:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800cb76:	e9d5 0300 	ldrd	r0, r3, [r5]
 800cb7a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cb7c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800cb80:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800cb82:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800cb86:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cb88:	430b      	orrs	r3, r1
 800cb8a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800cb8e:	2300      	movs	r3, #0
 800cb90:	9301      	str	r3, [sp, #4]
 800cb92:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800cb96:	f043 0301 	orr.w	r3, r3, #1
 800cb9a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800cb9e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800cba2:	f003 0301 	and.w	r3, r3, #1
 800cba6:	9301      	str	r3, [sp, #4]
 800cba8:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800cbaa:	f7ff fd43 	bl	800c634 <HAL_Delay>
  tickstart = HAL_GetTick();
 800cbae:	f7ff fd3b 	bl	800c628 <HAL_GetTick>
 800cbb2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cbb4:	6823      	ldr	r3, [r4, #0]
 800cbb6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cbba:	05d2      	lsls	r2, r2, #23
 800cbbc:	d556      	bpl.n	800cc6c <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800cbbe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800cbc2:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800cbc6:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800cbc8:	f042 0206 	orr.w	r2, r2, #6
 800cbcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800cbd0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cbd4:	f022 0203 	bic.w	r2, r2, #3
 800cbd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800cbdc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800cbe0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800cbe2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800cbe4:	f042 0201 	orr.w	r2, r2, #1
 800cbe8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800cbec:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cbf0:	f022 0203 	bic.w	r2, r2, #3
 800cbf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800cbf8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cbfc:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800cbfe:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800cc00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800cc04:	689a      	ldr	r2, [r3, #8]
 800cc06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cc0a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800cc0c:	689a      	ldr	r2, [r3, #8]
 800cc0e:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800cc10:	491b      	ldr	r1, [pc, #108]	; (800cc80 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800cc12:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800cc14:	686a      	ldr	r2, [r5, #4]
 800cc16:	2a01      	cmp	r2, #1
 800cc18:	bf38      	it	cc
 800cc1a:	2201      	movcc	r2, #1
 800cc1c:	434a      	muls	r2, r1
 800cc1e:	68a9      	ldr	r1, [r5, #8]
 800cc20:	f001 0103 	and.w	r1, r1, #3
 800cc24:	408a      	lsls	r2, r1
 800cc26:	6829      	ldr	r1, [r5, #0]
 800cc28:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800cc2a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800cc2c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800cc30:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800cc34:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800cc38:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800cc3c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800cc40:	430a      	orrs	r2, r1
 800cc42:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800cc46:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800cc4a:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800cc4e:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800cc50:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 800cc52:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800cc54:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800cc56:	e007      	b.n	800cc68 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cc58:	f7ff fce6 	bl	800c628 <HAL_GetTick>
 800cc5c:	1b80      	subs	r0, r0, r6
 800cc5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cc62:	f67f af79 	bls.w	800cb58 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800cc66:	2003      	movs	r0, #3
}
 800cc68:	b002      	add	sp, #8
 800cc6a:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cc6c:	f7ff fcdc 	bl	800c628 <HAL_GetTick>
 800cc70:	1b80      	subs	r0, r0, r6
 800cc72:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cc76:	d99d      	bls.n	800cbb4 <HAL_DSI_Init+0x98>
 800cc78:	e7f5      	b.n	800cc66 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	e7f4      	b.n	800cc68 <HAL_DSI_Init+0x14c>
 800cc7e:	bf00      	nop
 800cc80:	003d0900 	.word	0x003d0900

0800cc84 <HAL_DSI_ErrorCallback>:
 800cc84:	4770      	bx	lr

0800cc86 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800cc86:	6803      	ldr	r3, [r0, #0]
 800cc88:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800cc8c:	07d1      	lsls	r1, r2, #31
{
 800cc8e:	b510      	push	{r4, lr}
 800cc90:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800cc92:	d508      	bpl.n	800cca6 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800cc94:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800cc98:	07d2      	lsls	r2, r2, #31
 800cc9a:	d504      	bpl.n	800cca6 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800cca2:	f7f5 f801 	bl	8001ca8 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800ccac:	0791      	lsls	r1, r2, #30
 800ccae:	d509      	bpl.n	800ccc4 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800ccb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ccb4:	0792      	lsls	r2, r2, #30
 800ccb6:	d505      	bpl.n	800ccc4 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ccb8:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ccba:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800ccbc:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800ccc0:	f7f5 f824 	bl	8001d0c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800ccc4:	69a3      	ldr	r3, [r4, #24]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d04e      	beq.n	800cd68 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800ccca:	6821      	ldr	r1, [r4, #0]
 800cccc:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800ccd0:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800ccd4:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800ccd8:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800ccda:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800ccde:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800cce0:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800cce2:	b119      	cbz	r1, 800ccec <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800cce4:	6961      	ldr	r1, [r4, #20]
 800cce6:	f041 0101 	orr.w	r1, r1, #1
 800ccea:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800ccec:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 800ccf0:	d003      	beq.n	800ccfa <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800ccf2:	6962      	ldr	r2, [r4, #20]
 800ccf4:	f042 0202 	orr.w	r2, r2, #2
 800ccf8:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800ccfa:	07d8      	lsls	r0, r3, #31
 800ccfc:	d503      	bpl.n	800cd06 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800ccfe:	6962      	ldr	r2, [r4, #20]
 800cd00:	f042 0204 	orr.w	r2, r2, #4
 800cd04:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800cd06:	0799      	lsls	r1, r3, #30
 800cd08:	d503      	bpl.n	800cd12 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800cd0a:	6962      	ldr	r2, [r4, #20]
 800cd0c:	f042 0208 	orr.w	r2, r2, #8
 800cd10:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800cd12:	f013 0f0c 	tst.w	r3, #12
 800cd16:	d003      	beq.n	800cd20 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800cd18:	6962      	ldr	r2, [r4, #20]
 800cd1a:	f042 0210 	orr.w	r2, r2, #16
 800cd1e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800cd20:	06da      	lsls	r2, r3, #27
 800cd22:	d503      	bpl.n	800cd2c <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 800cd24:	6962      	ldr	r2, [r4, #20]
 800cd26:	f042 0220 	orr.w	r2, r2, #32
 800cd2a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800cd2c:	0698      	lsls	r0, r3, #26
 800cd2e:	d503      	bpl.n	800cd38 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800cd30:	6962      	ldr	r2, [r4, #20]
 800cd32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd36:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800cd38:	0659      	lsls	r1, r3, #25
 800cd3a:	d503      	bpl.n	800cd44 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800cd3c:	6962      	ldr	r2, [r4, #20]
 800cd3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd42:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800cd44:	061a      	lsls	r2, r3, #24
 800cd46:	d503      	bpl.n	800cd50 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800cd48:	6962      	ldr	r2, [r4, #20]
 800cd4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd4e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800cd50:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800cd54:	d003      	beq.n	800cd5e <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800cd56:	6963      	ldr	r3, [r4, #20]
 800cd58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd5c:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800cd5e:	6963      	ldr	r3, [r4, #20]
 800cd60:	b113      	cbz	r3, 800cd68 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800cd62:	4620      	mov	r0, r4
 800cd64:	f7ff ff8e 	bl	800cc84 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800cd68:	bd10      	pop	{r4, pc}

0800cd6a <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd6a:	7c03      	ldrb	r3, [r0, #16]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d00b      	beq.n	800cd88 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800cd70:	6803      	ldr	r3, [r0, #0]
 800cd72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd74:	f022 0203 	bic.w	r2, r2, #3
 800cd78:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800cd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd7c:	4311      	orrs	r1, r2
 800cd7e:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cd80:	2300      	movs	r3, #0
 800cd82:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800cd84:	4618      	mov	r0, r3
 800cd86:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800cd88:	2002      	movs	r0, #2
}
 800cd8a:	4770      	bx	lr

0800cd8c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800cd8c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cd8e:	7c03      	ldrb	r3, [r0, #16]
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d06a      	beq.n	800ce6a <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800cd94:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800cd96:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800cd98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd9a:	f042 0201 	orr.w	r2, r2, #1
 800cd9e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800cda0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cda4:	f022 0201 	bic.w	r2, r2, #1
 800cda8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800cdac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800cdb0:	f042 0201 	orr.w	r2, r2, #1
 800cdb4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800cdb8:	68da      	ldr	r2, [r3, #12]
 800cdba:	f022 0203 	bic.w	r2, r2, #3
 800cdbe:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800cdc0:	68da      	ldr	r2, [r3, #12]
 800cdc2:	4322      	orrs	r2, r4
 800cdc4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800cdc6:	695a      	ldr	r2, [r3, #20]
 800cdc8:	f022 0207 	bic.w	r2, r2, #7
 800cdcc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800cdce:	695c      	ldr	r4, [r3, #20]
 800cdd0:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800cdd4:	432a      	orrs	r2, r5
 800cdd6:	694d      	ldr	r5, [r1, #20]
 800cdd8:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800cdda:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800cddc:	4322      	orrs	r2, r4
 800cdde:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800cde0:	691a      	ldr	r2, [r3, #16]
 800cde2:	f022 020f 	bic.w	r2, r2, #15
 800cde6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800cde8:	691c      	ldr	r4, [r3, #16]
 800cdea:	432c      	orrs	r4, r5
 800cdec:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800cdee:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800cdf2:	f024 040e 	bic.w	r4, r4, #14
 800cdf6:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800cdfa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800cdfe:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800ce00:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800ce04:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800ce08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ce0a:	0c12      	lsrs	r2, r2, #16
 800ce0c:	0412      	lsls	r2, r2, #16
 800ce0e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800ce10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ce12:	4322      	orrs	r2, r4
 800ce14:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800ce16:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800ce1a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ce1e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800ce22:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 800ce26:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800ce2a:	432a      	orrs	r2, r5
 800ce2c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800ce2e:	432a      	orrs	r2, r5
 800ce30:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800ce32:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 800ce34:	432a      	orrs	r2, r5
 800ce36:	4322      	orrs	r2, r4
 800ce38:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800ce3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ce3e:	f022 0201 	bic.w	r2, r2, #1
 800ce42:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800ce44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ce46:	430a      	orrs	r2, r1
 800ce48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800ce4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ce4e:	f042 0201 	orr.w	r2, r2, #1
 800ce52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800ce56:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800ce5a:	f042 0202 	orr.w	r2, r2, #2
 800ce5e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ce62:	2300      	movs	r3, #0
 800ce64:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ce66:	4618      	mov	r0, r3
}
 800ce68:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800ce6a:	2002      	movs	r0, #2
 800ce6c:	e7fc      	b.n	800ce68 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

0800ce70 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 800ce70:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ce72:	7c03      	ldrb	r3, [r0, #16]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d02a      	beq.n	800cece <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 800ce78:	6802      	ldr	r2, [r0, #0]
 800ce7a:	4b16      	ldr	r3, [pc, #88]	; (800ced4 <HAL_DSI_ConfigCommand+0x64>)
 800ce7c:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800ce7e:	4023      	ands	r3, r4
 800ce80:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800ce82:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800ce84:	e9d1 3500 	ldrd	r3, r5, [r1]
 800ce88:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 800ce8a:	688d      	ldr	r5, [r1, #8]
 800ce8c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800ce8e:	68cd      	ldr	r5, [r1, #12]
 800ce90:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800ce92:	690d      	ldr	r5, [r1, #16]
 800ce94:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 800ce96:	694d      	ldr	r5, [r1, #20]
 800ce98:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800ce9a:	698d      	ldr	r5, [r1, #24]
 800ce9c:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800ce9e:	69cd      	ldr	r5, [r1, #28]
 800cea0:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800cea2:	6a0d      	ldr	r5, [r1, #32]
 800cea4:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 800cea6:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800cea8:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800ceaa:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800ceac:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800ceae:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800ceb0:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800ceb2:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800ceb4:	4323      	orrs	r3, r4
 800ceb6:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800ceb8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800ceba:	f023 0302 	bic.w	r3, r3, #2
 800cebe:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800cec0:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800cec2:	430b      	orrs	r3, r1
 800cec4:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cec6:	2300      	movs	r3, #0
 800cec8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800ceca:	4618      	mov	r0, r3
}
 800cecc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800cece:	2002      	movs	r0, #2
 800ced0:	e7fc      	b.n	800cecc <HAL_DSI_ConfigCommand+0x5c>
 800ced2:	bf00      	nop
 800ced4:	fef080ff 	.word	0xfef080ff

0800ced8 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800ced8:	7c03      	ldrb	r3, [r0, #16]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d00b      	beq.n	800cef6 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800cede:	6803      	ldr	r3, [r0, #0]
 800cee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee2:	f022 021f 	bic.w	r2, r2, #31
 800cee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800cee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceea:	4311      	orrs	r1, r2
 800ceec:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800ceee:	2300      	movs	r3, #0
 800cef0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800cef2:	4618      	mov	r0, r3
 800cef4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800cef6:	2002      	movs	r0, #2
}
 800cef8:	4770      	bx	lr

0800cefa <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800cefa:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cefc:	7c03      	ldrb	r3, [r0, #16]
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d035      	beq.n	800cf6e <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800cf02:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800cf04:	e9d1 2400 	ldrd	r2, r4, [r1]
 800cf08:	4294      	cmp	r4, r2
 800cf0a:	bf38      	it	cc
 800cf0c:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800cf0e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cf12:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800cf16:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800cf1a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800cf1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf22:	4322      	orrs	r2, r4
 800cf24:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800cf28:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800cf2c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800cf30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800cf34:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800cf38:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800cf3c:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800cf3e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800cf42:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800cf44:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800cf46:	432a      	orrs	r2, r5
 800cf48:	4322      	orrs	r2, r4
 800cf4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800cf4e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cf52:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cf56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800cf5a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800cf5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800cf66:	2300      	movs	r3, #0
 800cf68:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800cf6a:	4618      	mov	r0, r3
}
 800cf6c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800cf6e:	2002      	movs	r0, #2
 800cf70:	e7fc      	b.n	800cf6c <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800cf74 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800cf74:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800cf76:	7c03      	ldrb	r3, [r0, #16]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d05c      	beq.n	800d036 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800cf7c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800cf7e:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800cf80:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800cf82:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800cf84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800cf88:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800cf90:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800cf92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800cf94:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800cf96:	b292      	uxth	r2, r2
 800cf98:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800cf9a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800cf9c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfa0:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800cfa2:	4a26      	ldr	r2, [pc, #152]	; (800d03c <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800cfa4:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800cfa6:	4014      	ands	r4, r2
 800cfa8:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800cfaa:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800cfac:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800cfae:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800cfb0:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800cfb2:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800cfb4:	4014      	ands	r4, r2
 800cfb6:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800cfb8:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800cfba:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800cfbc:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800cfbe:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800cfc0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cfc4:	4014      	ands	r4, r2
 800cfc6:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800cfca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800cfce:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800cfd0:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800cfd2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800cfd6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfda:	4014      	ands	r4, r2
 800cfdc:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800cfe0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfe4:	432c      	orrs	r4, r5
 800cfe6:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800cfea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfee:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800cff2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800cff6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cffa:	698d      	ldr	r5, [r1, #24]
 800cffc:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800cffe:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800d000:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800d002:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800d006:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800d00a:	4014      	ands	r4, r2
 800d00c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800d010:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800d014:	432c      	orrs	r4, r5
 800d016:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800d01a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800d01e:	4022      	ands	r2, r4
 800d020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800d024:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800d028:	430a      	orrs	r2, r1
 800d02a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d02e:	2300      	movs	r3, #0
 800d030:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800d032:	4618      	mov	r0, r3
}
 800d034:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800d036:	2002      	movs	r0, #2
 800d038:	e7fc      	b.n	800d034 <HAL_DSI_ConfigHostTimeouts+0xc0>
 800d03a:	bf00      	nop
 800d03c:	ffff0000 	.word	0xffff0000

0800d040 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d040:	7c03      	ldrb	r3, [r0, #16]
{
 800d042:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 800d044:	2b01      	cmp	r3, #1
 800d046:	d01c      	beq.n	800d082 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800d048:	6802      	ldr	r2, [r0, #0]
 800d04a:	2300      	movs	r3, #0
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	6851      	ldr	r1, [r2, #4]
 800d050:	f041 0101 	orr.w	r1, r1, #1
 800d054:	6051      	str	r1, [r2, #4]
 800d056:	6851      	ldr	r1, [r2, #4]
 800d058:	f001 0101 	and.w	r1, r1, #1
 800d05c:	9100      	str	r1, [sp, #0]
 800d05e:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 800d066:	f041 0108 	orr.w	r1, r1, #8
 800d06a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 800d06e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d072:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800d074:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d076:	f002 0208 	and.w	r2, r2, #8
 800d07a:	9201      	str	r2, [sp, #4]
 800d07c:	9a01      	ldr	r2, [sp, #4]
}
 800d07e:	b002      	add	sp, #8
 800d080:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d082:	2002      	movs	r0, #2
 800d084:	e7fb      	b.n	800d07e <HAL_DSI_Start+0x3e>

0800d086 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d086:	7c03      	ldrb	r3, [r0, #16]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d00a      	beq.n	800d0a2 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800d08c:	6802      	ldr	r2, [r0, #0]
 800d08e:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800d092:	f043 0304 	orr.w	r3, r3, #4
 800d096:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d09a:	2300      	movs	r3, #0
 800d09c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800d09e:	4618      	mov	r0, r3
 800d0a0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d0a2:	2002      	movs	r0, #2
}
 800d0a4:	4770      	bx	lr

0800d0a6 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800d0a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d0a8:	7c05      	ldrb	r5, [r0, #16]
{
 800d0aa:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800d0ac:	2d01      	cmp	r5, #1
 800d0ae:	d009      	beq.n	800d0c4 <HAL_DSI_ShortWrite+0x1e>
 800d0b0:	2501      	movs	r5, #1
 800d0b2:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800d0b4:	9d06      	ldr	r5, [sp, #24]
 800d0b6:	9500      	str	r5, [sp, #0]
 800d0b8:	f7ff fcad 	bl	800ca16 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d0bc:	2300      	movs	r3, #0
 800d0be:	7423      	strb	r3, [r4, #16]

  return status;
}
 800d0c0:	b003      	add	sp, #12
 800d0c2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800d0c4:	2002      	movs	r0, #2
 800d0c6:	e7fb      	b.n	800d0c0 <HAL_DSI_ShortWrite+0x1a>

0800d0c8 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800d0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d0ce:	7c03      	ldrb	r3, [r0, #16]
{
 800d0d0:	4606      	mov	r6, r0
 800d0d2:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800d0d4:	2b01      	cmp	r3, #1
{
 800d0d6:	4615      	mov	r5, r2
 800d0d8:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800d0dc:	d053      	beq.n	800d186 <HAL_DSI_LongWrite+0xbe>
 800d0de:	2301      	movs	r3, #1
 800d0e0:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800d0e2:	f7ff faa1 	bl	800c628 <HAL_GetTick>
 800d0e6:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d0e8:	6831      	ldr	r1, [r6, #0]
 800d0ea:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800d0ec:	f013 0a01 	ands.w	sl, r3, #1
 800d0f0:	d01a      	beq.n	800d128 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800d0f2:	2c03      	cmp	r4, #3
 800d0f4:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800d0f6:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800d0fa:	bf28      	it	cs
 800d0fc:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800d0fe:	4282      	cmp	r2, r0
 800d100:	d11e      	bne.n	800d140 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800d102:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 800d104:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 800d106:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800d10a:	bb1b      	cbnz	r3, 800d154 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800d10c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d10e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 800d112:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d114:	0222      	lsls	r2, r4, #8
 800d116:	0224      	lsls	r4, r4, #8
 800d118:	b292      	uxth	r2, r2
 800d11a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800d11e:	4315      	orrs	r5, r2
 800d120:	432c      	orrs	r4, r5
 800d122:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 800d124:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 800d126:	e009      	b.n	800d13c <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d128:	f7ff fa7e 	bl	800c628 <HAL_GetTick>
 800d12c:	eba0 000b 	sub.w	r0, r0, fp
 800d130:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d134:	d9d8      	bls.n	800d0e8 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 800d136:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800d138:	f886 a010 	strb.w	sl, [r6, #16]
}
 800d13c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d140:	f818 3002 	ldrb.w	r3, [r8, r2]
 800d144:	3201      	adds	r2, #1
 800d146:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 800d14a:	fa03 f30c 	lsl.w	r3, r3, ip
 800d14e:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 800d152:	e7d4      	b.n	800d0fe <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d154:	2b04      	cmp	r3, #4
    fifoword = 0U;
 800d156:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d15a:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 800d15c:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d15e:	bf28      	it	cs
 800d160:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d164:	f812 8000 	ldrb.w	r8, [r2, r0]
 800d168:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 800d16c:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d16e:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 800d172:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d174:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800d178:	d1f4      	bne.n	800d164 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 800d17a:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 800d17e:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 800d180:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 800d184:	e7c1      	b.n	800d10a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800d186:	2002      	movs	r0, #2
 800d188:	e7d8      	b.n	800d13c <HAL_DSI_LongWrite+0x74>

0800d18a <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800d18a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d18e:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d190:	7c03      	ldrb	r3, [r0, #16]
{
 800d192:	4605      	mov	r5, r0
 800d194:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800d196:	2b01      	cmp	r3, #1
{
 800d198:	4617      	mov	r7, r2
 800d19a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800d19e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 800d1a2:	d06f      	beq.n	800d284 <HAL_DSI_Read+0xfa>
 800d1a4:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800d1a6:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800d1a8:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800d1aa:	d90d      	bls.n	800d1c8 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800d1ac:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800d1b0:	2237      	movs	r2, #55	; 0x37
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	b2f3      	uxtb	r3, r6
 800d1b6:	f7ff fc2e 	bl	800ca16 <DSI_ShortWrite>
 800d1ba:	b128      	cbz	r0, 800d1c8 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d1bc:	2300      	movs	r3, #0

      return HAL_ERROR;
 800d1be:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800d1c0:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 800d1c2:	b003      	add	sp, #12
 800d1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d1c8:	f1b9 0f06 	cmp.w	r9, #6
 800d1cc:	d10f      	bne.n	800d1ee <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800d1d0:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d1d2:	021b      	lsls	r3, r3, #8
 800d1d4:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 800d1d8:	f044 0406 	orr.w	r4, r4, #6
 800d1dc:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800d1de:	f7ff fa23 	bl	800c628 <HAL_GetTick>
 800d1e2:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	dc27      	bgt.n	800d238 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800d1ec:	e7e9      	b.n	800d1c2 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800d1ee:	f1b9 0f04 	cmp.w	r9, #4
 800d1f2:	d105      	bne.n	800d200 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d1f4:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800d1f6:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d1f8:	f044 0404 	orr.w	r4, r4, #4
 800d1fc:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800d1fe:	e7ee      	b.n	800d1de <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800d200:	f1b9 0f14 	cmp.w	r9, #20
 800d204:	d108      	bne.n	800d218 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d206:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d20a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d20c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d20e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 800d212:	f044 0414 	orr.w	r4, r4, #20
 800d216:	e7f1      	b.n	800d1fc <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800d218:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800d21c:	d1ce      	bne.n	800d1bc <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d21e:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d222:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d224:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d228:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d22c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800d22e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800d232:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 800d236:	e7e1      	b.n	800d1fc <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800d238:	682a      	ldr	r2, [r5, #0]
 800d23a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800d23c:	f013 0310 	ands.w	r3, r3, #16
 800d240:	d10d      	bne.n	800d25e <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d242:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800d244:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d246:	4632      	mov	r2, r6
 800d248:	bf28      	it	cs
 800d24a:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d24c:	00d9      	lsls	r1, r3, #3
 800d24e:	fa20 f101 	lsr.w	r1, r0, r1
 800d252:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800d254:	3301      	adds	r3, #1
 800d256:	429a      	cmp	r2, r3
 800d258:	d1f8      	bne.n	800d24c <HAL_DSI_Read+0xc2>
        pdata++;
 800d25a:	4417      	add	r7, r2
        datasize--;
 800d25c:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d25e:	f7ff f9e3 	bl	800c628 <HAL_GetTick>
 800d262:	1b00      	subs	r0, r0, r4
 800d264:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d268:	d903      	bls.n	800d272 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 800d26a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800d26c:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 800d26e:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 800d270:	e7a7      	b.n	800d1c2 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800d272:	682b      	ldr	r3, [r5, #0]
 800d274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800d276:	0652      	lsls	r2, r2, #25
 800d278:	d4b4      	bmi.n	800d1e4 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800d27a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d27e:	069b      	lsls	r3, r3, #26
 800d280:	d49c      	bmi.n	800d1bc <HAL_DSI_Read+0x32>
 800d282:	e7af      	b.n	800d1e4 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800d284:	2002      	movs	r0, #2
 800d286:	e79c      	b.n	800d1c2 <HAL_DSI_Read+0x38>

0800d288 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d288:	7c03      	ldrb	r3, [r0, #16]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d010      	beq.n	800d2b0 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800d28e:	6803      	ldr	r3, [r0, #0]
 800d290:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d294:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800d298:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800d29c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800d2a0:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 800d2a4:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800d2b0:	2002      	movs	r0, #2
}
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d2b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800d2b8:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2ba:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 800d488 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d2be:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d2c2:	680a      	ldr	r2, [r1, #0]
 800d2c4:	fa32 f503 	lsrs.w	r5, r2, r3
 800d2c8:	d102      	bne.n	800d2d0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800d2ca:	b003      	add	sp, #12
 800d2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d2d0:	f04f 0e01 	mov.w	lr, #1
 800d2d4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800d2d8:	ea1e 0202 	ands.w	r2, lr, r2
 800d2dc:	f000 80bd 	beq.w	800d45a <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2e0:	684e      	ldr	r6, [r1, #4]
 800d2e2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2e6:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2ea:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2ee:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2f2:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2f4:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d2f8:	2f01      	cmp	r7, #1
 800d2fa:	d834      	bhi.n	800d366 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800d2fc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2fe:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d302:	68cf      	ldr	r7, [r1, #12]
 800d304:	fa07 f708 	lsl.w	r7, r7, r8
 800d308:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800d30c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800d30e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d310:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d314:	f3c6 1700 	ubfx	r7, r6, #4, #1
 800d318:	409f      	lsls	r7, r3
 800d31a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800d31e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800d320:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d322:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d324:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d328:	688f      	ldr	r7, [r1, #8]
 800d32a:	fa07 f708 	lsl.w	r7, r7, r8
 800d32e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 800d332:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d334:	d119      	bne.n	800d36a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 800d336:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d33a:	f003 0b07 	and.w	fp, r3, #7
 800d33e:	f04f 0e0f 	mov.w	lr, #15
 800d342:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800d346:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800d34a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d34e:	fa0e fe0b 	lsl.w	lr, lr, fp
 800d352:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d356:	690f      	ldr	r7, [r1, #16]
 800d358:	fa07 f70b 	lsl.w	r7, r7, fp
 800d35c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800d360:	f8ca 7020 	str.w	r7, [sl, #32]
 800d364:	e001      	b.n	800d36a <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d366:	2d03      	cmp	r5, #3
 800d368:	d1da      	bne.n	800d320 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 800d36a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d36c:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d370:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d374:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d378:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 800d37c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d37e:	d06c      	beq.n	800d45a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d380:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800d384:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d388:	f003 0c03 	and.w	ip, r3, #3
 800d38c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d390:	f045 0502 	orr.w	r5, r5, #2
 800d394:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d398:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d39c:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 800d3a0:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800d3a4:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 800d3a8:	f005 0502 	and.w	r5, r5, #2
 800d3ac:	9501      	str	r5, [sp, #4]
 800d3ae:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d3b0:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 800d3b4:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d3b8:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d3bc:	4d31      	ldr	r5, [pc, #196]	; (800d484 <HAL_GPIO_Init+0x1d0>)
 800d3be:	42a8      	cmp	r0, r5
 800d3c0:	d04d      	beq.n	800d45e <HAL_GPIO_Init+0x1aa>
 800d3c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3c6:	42a8      	cmp	r0, r5
 800d3c8:	d04b      	beq.n	800d462 <HAL_GPIO_Init+0x1ae>
 800d3ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3ce:	42a8      	cmp	r0, r5
 800d3d0:	d049      	beq.n	800d466 <HAL_GPIO_Init+0x1b2>
 800d3d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3d6:	42a8      	cmp	r0, r5
 800d3d8:	d047      	beq.n	800d46a <HAL_GPIO_Init+0x1b6>
 800d3da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3de:	42a8      	cmp	r0, r5
 800d3e0:	d045      	beq.n	800d46e <HAL_GPIO_Init+0x1ba>
 800d3e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3e6:	42a8      	cmp	r0, r5
 800d3e8:	d043      	beq.n	800d472 <HAL_GPIO_Init+0x1be>
 800d3ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3ee:	42a8      	cmp	r0, r5
 800d3f0:	d041      	beq.n	800d476 <HAL_GPIO_Init+0x1c2>
 800d3f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3f6:	42a8      	cmp	r0, r5
 800d3f8:	d03f      	beq.n	800d47a <HAL_GPIO_Init+0x1c6>
 800d3fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d3fe:	42a8      	cmp	r0, r5
 800d400:	d03d      	beq.n	800d47e <HAL_GPIO_Init+0x1ca>
 800d402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d406:	42a8      	cmp	r0, r5
 800d408:	bf0c      	ite	eq
 800d40a:	2509      	moveq	r5, #9
 800d40c:	250a      	movne	r5, #10
 800d40e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d412:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d416:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d41a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 800d41c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800d420:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800d422:	bf0c      	ite	eq
 800d424:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800d426:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d428:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 800d42c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 800d42e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800d430:	bf0c      	ite	eq
 800d432:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800d434:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d436:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800d43a:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800d43c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 800d440:	bf0c      	ite	eq
 800d442:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800d444:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d446:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800d448:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800d44c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 800d450:	bf54      	ite	pl
 800d452:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800d454:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800d456:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 800d45a:	3301      	adds	r3, #1
 800d45c:	e731      	b.n	800d2c2 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d45e:	2500      	movs	r5, #0
 800d460:	e7d5      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d462:	2501      	movs	r5, #1
 800d464:	e7d3      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d466:	2502      	movs	r5, #2
 800d468:	e7d1      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d46a:	2503      	movs	r5, #3
 800d46c:	e7cf      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d46e:	2504      	movs	r5, #4
 800d470:	e7cd      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d472:	2505      	movs	r5, #5
 800d474:	e7cb      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d476:	2506      	movs	r5, #6
 800d478:	e7c9      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d47a:	2507      	movs	r5, #7
 800d47c:	e7c7      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d47e:	2508      	movs	r5, #8
 800d480:	e7c5      	b.n	800d40e <HAL_GPIO_Init+0x15a>
 800d482:	bf00      	nop
 800d484:	58020000 	.word	0x58020000
 800d488:	58024400 	.word	0x58024400

0800d48c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800d490:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d492:	f8df 812c 	ldr.w	r8, [pc, #300]	; 800d5c0 <HAL_GPIO_DeInit+0x134>
 800d496:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800d5c4 <HAL_GPIO_DeInit+0x138>
 800d49a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800d5c8 <HAL_GPIO_DeInit+0x13c>
 800d49e:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d5cc <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 800d4a2:	fa31 f302 	lsrs.w	r3, r1, r2
 800d4a6:	d101      	bne.n	800d4ac <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 800d4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 800d4b2:	ea1c 0601 	ands.w	r6, ip, r1
 800d4b6:	d06d      	beq.n	800d594 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d4b8:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d4bc:	f002 0703 	and.w	r7, r2, #3
 800d4c0:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d4c2:	4b3e      	ldr	r3, [pc, #248]	; (800d5bc <HAL_GPIO_DeInit+0x130>)
 800d4c4:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d4c8:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d4ca:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d4cc:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d4d0:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d4d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800d4d8:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d4dc:	d05c      	beq.n	800d598 <HAL_GPIO_DeInit+0x10c>
 800d4de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4e2:	4298      	cmp	r0, r3
 800d4e4:	d05a      	beq.n	800d59c <HAL_GPIO_DeInit+0x110>
 800d4e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4ea:	4298      	cmp	r0, r3
 800d4ec:	d058      	beq.n	800d5a0 <HAL_GPIO_DeInit+0x114>
 800d4ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4f2:	4298      	cmp	r0, r3
 800d4f4:	d056      	beq.n	800d5a4 <HAL_GPIO_DeInit+0x118>
 800d4f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d4fa:	4298      	cmp	r0, r3
 800d4fc:	d054      	beq.n	800d5a8 <HAL_GPIO_DeInit+0x11c>
 800d4fe:	4540      	cmp	r0, r8
 800d500:	d054      	beq.n	800d5ac <HAL_GPIO_DeInit+0x120>
 800d502:	4548      	cmp	r0, r9
 800d504:	d054      	beq.n	800d5b0 <HAL_GPIO_DeInit+0x124>
 800d506:	4550      	cmp	r0, sl
 800d508:	d054      	beq.n	800d5b4 <HAL_GPIO_DeInit+0x128>
 800d50a:	4558      	cmp	r0, fp
 800d50c:	d054      	beq.n	800d5b8 <HAL_GPIO_DeInit+0x12c>
 800d50e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800d512:	4298      	cmp	r0, r3
 800d514:	bf0c      	ite	eq
 800d516:	2309      	moveq	r3, #9
 800d518:	230a      	movne	r3, #10
 800d51a:	40bb      	lsls	r3, r7
 800d51c:	4573      	cmp	r3, lr
 800d51e:	d119      	bne.n	800d554 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d524:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 800d528:	ea27 0706 	bic.w	r7, r7, r6
 800d52c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d530:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 800d534:	ea27 0706 	bic.w	r7, r7, r6
 800d538:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 800d53c:	685f      	ldr	r7, [r3, #4]
 800d53e:	ea27 0706 	bic.w	r7, r7, r6
 800d542:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d544:	681f      	ldr	r7, [r3, #0]
 800d546:	ea27 0606 	bic.w	r6, r7, r6
 800d54a:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d54c:	68a3      	ldr	r3, [r4, #8]
 800d54e:	ea23 0305 	bic.w	r3, r3, r5
 800d552:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d554:	2503      	movs	r5, #3
 800d556:	0053      	lsls	r3, r2, #1
 800d558:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d55a:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d55e:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d562:	260f      	movs	r6, #15
 800d564:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d566:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d568:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d56a:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d56c:	fa22 f405 	lsr.w	r4, r2, r5
 800d570:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800d574:	6a25      	ldr	r5, [r4, #32]
 800d576:	ea25 0606 	bic.w	r6, r5, r6
 800d57a:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d57c:	68c4      	ldr	r4, [r0, #12]
 800d57e:	ea24 0403 	bic.w	r4, r4, r3
 800d582:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d584:	6844      	ldr	r4, [r0, #4]
 800d586:	ea24 040c 	bic.w	r4, r4, ip
 800d58a:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d58c:	6884      	ldr	r4, [r0, #8]
 800d58e:	ea24 0303 	bic.w	r3, r4, r3
 800d592:	6083      	str	r3, [r0, #8]
    position++;
 800d594:	3201      	adds	r2, #1
 800d596:	e784      	b.n	800d4a2 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d598:	2300      	movs	r3, #0
 800d59a:	e7be      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d59c:	2301      	movs	r3, #1
 800d59e:	e7bc      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e7ba      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e7b8      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5a8:	2304      	movs	r3, #4
 800d5aa:	e7b6      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5ac:	2305      	movs	r3, #5
 800d5ae:	e7b4      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5b0:	2306      	movs	r3, #6
 800d5b2:	e7b2      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5b4:	2307      	movs	r3, #7
 800d5b6:	e7b0      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5b8:	2308      	movs	r3, #8
 800d5ba:	e7ae      	b.n	800d51a <HAL_GPIO_DeInit+0x8e>
 800d5bc:	58020000 	.word	0x58020000
 800d5c0:	58021400 	.word	0x58021400
 800d5c4:	58021800 	.word	0x58021800
 800d5c8:	58021c00 	.word	0x58021c00
 800d5cc:	58022000 	.word	0x58022000

0800d5d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d5d0:	6903      	ldr	r3, [r0, #16]
 800d5d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800d5d4:	bf14      	ite	ne
 800d5d6:	2001      	movne	r0, #1
 800d5d8:	2000      	moveq	r0, #0
 800d5da:	4770      	bx	lr

0800d5dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d5dc:	b10a      	cbz	r2, 800d5e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d5de:	6181      	str	r1, [r0, #24]
  }
}
 800d5e0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d5e2:	0409      	lsls	r1, r1, #16
 800d5e4:	e7fb      	b.n	800d5de <HAL_GPIO_WritePin+0x2>

0800d5e6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d5e6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d5e8:	ea01 0203 	and.w	r2, r1, r3
 800d5ec:	ea21 0103 	bic.w	r1, r1, r3
 800d5f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5f4:	6181      	str	r1, [r0, #24]
}
 800d5f6:	4770      	bx	lr

0800d5f8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800d5f8:	4b04      	ldr	r3, [pc, #16]	; (800d60c <HAL_HSEM_FastTake+0x14>)
 800d5fa:	3020      	adds	r0, #32
 800d5fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800d600:	4b03      	ldr	r3, [pc, #12]	; (800d610 <HAL_HSEM_FastTake+0x18>)
 800d602:	1ac0      	subs	r0, r0, r3
 800d604:	bf18      	it	ne
 800d606:	2001      	movne	r0, #1
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	58026400 	.word	0x58026400
 800d610:	80000300 	.word	0x80000300

0800d614 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800d614:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 800d618:	4b01      	ldr	r3, [pc, #4]	; (800d620 <HAL_HSEM_Release+0xc>)
 800d61a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800d61e:	4770      	bx	lr
 800d620:	58026400 	.word	0x58026400

0800d624 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d624:	6803      	ldr	r3, [r0, #0]
 800d626:	699a      	ldr	r2, [r3, #24]
 800d628:	0791      	lsls	r1, r2, #30
 800d62a:	d501      	bpl.n	800d630 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d62c:	2200      	movs	r2, #0
 800d62e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d630:	699a      	ldr	r2, [r3, #24]
 800d632:	07d2      	lsls	r2, r2, #31
 800d634:	d403      	bmi.n	800d63e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d636:	699a      	ldr	r2, [r3, #24]
 800d638:	f042 0201 	orr.w	r2, r2, #1
 800d63c:	619a      	str	r2, [r3, #24]
  }
}
 800d63e:	4770      	bx	lr

0800d640 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d640:	b530      	push	{r4, r5, lr}
 800d642:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d644:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d648:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d64a:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800d64c:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d64e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800d652:	4a05      	ldr	r2, [pc, #20]	; (800d668 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d654:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800d656:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d65a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800d65e:	ea20 0002 	bic.w	r0, r0, r2
 800d662:	4303      	orrs	r3, r0
 800d664:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d666:	bd30      	pop	{r4, r5, pc}
 800d668:	03ff63ff 	.word	0x03ff63ff

0800d66c <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 800d66c:	6803      	ldr	r3, [r0, #0]
{
 800d66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800d672:	699c      	ldr	r4, [r3, #24]
{
 800d674:	4605      	mov	r5, r0
 800d676:	460f      	mov	r7, r1
 800d678:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d67a:	f014 0410 	ands.w	r4, r4, #16
 800d67e:	d070      	beq.n	800d762 <I2C_IsErrorOccurred+0xf6>
  uint32_t error_code = 0;
 800d680:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d682:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800d684:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d686:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	699a      	ldr	r2, [r3, #24]
 800d68c:	0692      	lsls	r2, r2, #26
 800d68e:	d462      	bmi.n	800d756 <I2C_IsErrorOccurred+0xea>
 800d690:	f1b8 0f00 	cmp.w	r8, #0
 800d694:	d036      	beq.n	800d704 <I2C_IsErrorOccurred+0x98>
    error_code |= HAL_I2C_ERROR_AF;
 800d696:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 800d69a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800d69c:	682b      	ldr	r3, [r5, #0]
 800d69e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d6a0:	05d6      	lsls	r6, r2, #23
 800d6a2:	d505      	bpl.n	800d6b0 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d6a4:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800d6a8:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 800d6ac:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d6ae:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d6b0:	0551      	lsls	r1, r2, #21
 800d6b2:	d505      	bpl.n	800d6c0 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d6b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800d6b8:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 800d6bc:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d6be:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d6c0:	0592      	lsls	r2, r2, #22
 800d6c2:	d550      	bpl.n	800d766 <I2C_IsErrorOccurred+0xfa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d6c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800d6c8:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d6cc:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	f7ff ffa8 	bl	800d624 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800d6d4:	682a      	ldr	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800d6d6:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800d6d8:	6853      	ldr	r3, [r2, #4]
 800d6da:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800d6de:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800d6e2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800d6e6:	f023 0301 	bic.w	r3, r3, #1
 800d6ea:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800d6ec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d6ee:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 800d6f0:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 800d6f2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d6f4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800d6fe:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 800d702:	e032      	b.n	800d76a <I2C_IsErrorOccurred+0xfe>
      if (Timeout != HAL_MAX_DELAY)
 800d704:	1c7a      	adds	r2, r7, #1
 800d706:	d0c0      	beq.n	800d68a <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d708:	f7fe ff8e 	bl	800c628 <HAL_GetTick>
 800d70c:	1b80      	subs	r0, r0, r6
 800d70e:	42b8      	cmp	r0, r7
 800d710:	d801      	bhi.n	800d716 <I2C_IsErrorOccurred+0xaa>
 800d712:	2f00      	cmp	r7, #0
 800d714:	d1b8      	bne.n	800d688 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d716:	682b      	ldr	r3, [r5, #0]
 800d718:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800d71a:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d71e:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800d720:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d722:	0400      	lsls	r0, r0, #16
 800d724:	d50a      	bpl.n	800d73c <I2C_IsErrorOccurred+0xd0>
 800d726:	0448      	lsls	r0, r1, #17
 800d728:	d408      	bmi.n	800d73c <I2C_IsErrorOccurred+0xd0>
              (tmp1 != I2C_CR2_STOP) && \
 800d72a:	2a20      	cmp	r2, #32
 800d72c:	d006      	beq.n	800d73c <I2C_IsErrorOccurred+0xd0>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d734:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800d736:	f7fe ff77 	bl	800c628 <HAL_GetTick>
 800d73a:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d73c:	682b      	ldr	r3, [r5, #0]
 800d73e:	699b      	ldr	r3, [r3, #24]
 800d740:	0699      	lsls	r1, r3, #26
 800d742:	d4a1      	bmi.n	800d688 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d744:	f7fe ff70 	bl	800c628 <HAL_GetTick>
 800d748:	1b80      	subs	r0, r0, r6
 800d74a:	2819      	cmp	r0, #25
 800d74c:	d9f6      	bls.n	800d73c <I2C_IsErrorOccurred+0xd0>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d74e:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800d750:	f04f 0801 	mov.w	r8, #1
 800d754:	e798      	b.n	800d688 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800d756:	f1b8 0f00 	cmp.w	r8, #0
 800d75a:	d19c      	bne.n	800d696 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d75c:	2220      	movs	r2, #32
 800d75e:	61da      	str	r2, [r3, #28]
 800d760:	e799      	b.n	800d696 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 800d762:	4620      	mov	r0, r4
 800d764:	e79a      	b.n	800d69c <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800d766:	2800      	cmp	r0, #0
 800d768:	d1b1      	bne.n	800d6ce <I2C_IsErrorOccurred+0x62>
}
 800d76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d76e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d76e:	b570      	push	{r4, r5, r6, lr}
 800d770:	4604      	mov	r4, r0
 800d772:	460d      	mov	r5, r1
 800d774:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	079b      	lsls	r3, r3, #30
 800d77c:	d501      	bpl.n	800d782 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 800d77e:	2000      	movs	r0, #0
}
 800d780:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d782:	4632      	mov	r2, r6
 800d784:	4629      	mov	r1, r5
 800d786:	4620      	mov	r0, r4
 800d788:	f7ff ff70 	bl	800d66c <I2C_IsErrorOccurred>
 800d78c:	b9c0      	cbnz	r0, 800d7c0 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800d78e:	1c6a      	adds	r2, r5, #1
 800d790:	d0f1      	beq.n	800d776 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d792:	f7fe ff49 	bl	800c628 <HAL_GetTick>
 800d796:	1b80      	subs	r0, r0, r6
 800d798:	42a8      	cmp	r0, r5
 800d79a:	d801      	bhi.n	800d7a0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800d79c:	2d00      	cmp	r5, #0
 800d79e:	d1ea      	bne.n	800d776 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	f013 0302 	ands.w	r3, r3, #2
 800d7a8:	d1e5      	bne.n	800d776 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800d7ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7b0:	f042 0220 	orr.w	r2, r2, #32
 800d7b4:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800d7c0:	2001      	movs	r0, #1
 800d7c2:	e7dd      	b.n	800d780 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800d7c4 <I2C_WaitOnFlagUntilTimeout>:
{
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	9f06      	ldr	r7, [sp, #24]
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4688      	mov	r8, r1
 800d7ce:	4616      	mov	r6, r2
 800d7d0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7d2:	6822      	ldr	r2, [r4, #0]
 800d7d4:	6993      	ldr	r3, [r2, #24]
 800d7d6:	ea38 0303 	bics.w	r3, r8, r3
 800d7da:	bf0c      	ite	eq
 800d7dc:	2301      	moveq	r3, #1
 800d7de:	2300      	movne	r3, #0
 800d7e0:	42b3      	cmp	r3, r6
 800d7e2:	d001      	beq.n	800d7e8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 800d7e4:	2000      	movs	r0, #0
 800d7e6:	e01e      	b.n	800d826 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800d7e8:	1c6b      	adds	r3, r5, #1
 800d7ea:	d0f3      	beq.n	800d7d4 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7ec:	f7fe ff1c 	bl	800c628 <HAL_GetTick>
 800d7f0:	1bc0      	subs	r0, r0, r7
 800d7f2:	42a8      	cmp	r0, r5
 800d7f4:	d801      	bhi.n	800d7fa <I2C_WaitOnFlagUntilTimeout+0x36>
 800d7f6:	2d00      	cmp	r5, #0
 800d7f8:	d1eb      	bne.n	800d7d2 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d7fa:	6823      	ldr	r3, [r4, #0]
 800d7fc:	699b      	ldr	r3, [r3, #24]
 800d7fe:	ea38 0303 	bics.w	r3, r8, r3
 800d802:	bf0c      	ite	eq
 800d804:	2301      	moveq	r3, #1
 800d806:	2300      	movne	r3, #0
 800d808:	42b3      	cmp	r3, r6
 800d80a:	d1e2      	bne.n	800d7d2 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d80c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 800d80e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d810:	f043 0320 	orr.w	r3, r3, #32
 800d814:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d816:	2320      	movs	r3, #32
 800d818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d81c:	2300      	movs	r3, #0
 800d81e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800d822:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800d826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d82a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d82a:	b570      	push	{r4, r5, r6, lr}
 800d82c:	4604      	mov	r4, r0
 800d82e:	460d      	mov	r5, r1
 800d830:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	069b      	lsls	r3, r3, #26
 800d838:	d501      	bpl.n	800d83e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800d83a:	2000      	movs	r0, #0
}
 800d83c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d83e:	4632      	mov	r2, r6
 800d840:	4629      	mov	r1, r5
 800d842:	4620      	mov	r0, r4
 800d844:	f7ff ff12 	bl	800d66c <I2C_IsErrorOccurred>
 800d848:	b9b0      	cbnz	r0, 800d878 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d84a:	f7fe feed 	bl	800c628 <HAL_GetTick>
 800d84e:	1b80      	subs	r0, r0, r6
 800d850:	42a8      	cmp	r0, r5
 800d852:	d801      	bhi.n	800d858 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800d854:	2d00      	cmp	r5, #0
 800d856:	d1ec      	bne.n	800d832 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d858:	6823      	ldr	r3, [r4, #0]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	f013 0320 	ands.w	r3, r3, #32
 800d860:	d1e7      	bne.n	800d832 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d862:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800d864:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d868:	f042 0220 	orr.w	r2, r2, #32
 800d86c:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d86e:	2220      	movs	r2, #32
 800d870:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d874:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 800d878:	2001      	movs	r0, #1
 800d87a:	e7df      	b.n	800d83c <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

0800d87c <HAL_I2C_MspInit>:
}
 800d87c:	4770      	bx	lr

0800d87e <HAL_I2C_Init>:
{
 800d87e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800d880:	4604      	mov	r4, r0
 800d882:	2800      	cmp	r0, #0
 800d884:	d04a      	beq.n	800d91c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d886:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800d88a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d88e:	b91b      	cbnz	r3, 800d898 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800d890:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800d894:	f7ff fff2 	bl	800d87c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d898:	2324      	movs	r3, #36	; 0x24
 800d89a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d89e:	6823      	ldr	r3, [r4, #0]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	f022 0201 	bic.w	r2, r2, #1
 800d8a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d8a8:	6862      	ldr	r2, [r4, #4]
 800d8aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d8ae:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d8b0:	689a      	ldr	r2, [r3, #8]
 800d8b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d8b6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d8b8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d8bc:	2901      	cmp	r1, #1
 800d8be:	d124      	bne.n	800d90a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d8c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d8c4:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d8c6:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8c8:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d8ca:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800d8ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d8d2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d8d4:	68da      	ldr	r2, [r3, #12]
 800d8d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d8da:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d8dc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800d8e0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d8e2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d8e4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d8e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d8ea:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	f042 0201 	orr.w	r2, r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800d8fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8fc:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d8fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d902:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d904:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800d908:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d90a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d90e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d910:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d912:	d1d8      	bne.n	800d8c6 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d918:	605a      	str	r2, [r3, #4]
 800d91a:	e7d4      	b.n	800d8c6 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800d91c:	2001      	movs	r0, #1
 800d91e:	e7f3      	b.n	800d908 <HAL_I2C_Init+0x8a>

0800d920 <HAL_I2C_MspDeInit>:
 800d920:	4770      	bx	lr

0800d922 <HAL_I2C_DeInit>:
{
 800d922:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800d924:	4604      	mov	r4, r0
 800d926:	b198      	cbz	r0, 800d950 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800d928:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d92a:	2324      	movs	r3, #36	; 0x24
 800d92c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d930:	6813      	ldr	r3, [r2, #0]
 800d932:	f023 0301 	bic.w	r3, r3, #1
 800d936:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800d938:	f7ff fff2 	bl	800d920 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d93c:	2000      	movs	r0, #0
 800d93e:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800d940:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800d944:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d948:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d94a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800d94e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800d950:	2001      	movs	r0, #1
 800d952:	e7fc      	b.n	800d94e <HAL_I2C_DeInit+0x2c>

0800d954 <HAL_I2C_Mem_Write>:
{
 800d954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d958:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d95a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800d95e:	4604      	mov	r4, r0
 800d960:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d962:	2b20      	cmp	r3, #32
{
 800d964:	4616      	mov	r6, r2
 800d966:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800d96a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d96e:	f040 80c6 	bne.w	800dafe <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 800d972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d974:	b113      	cbz	r3, 800d97c <HAL_I2C_Mem_Write+0x28>
 800d976:	f1ba 0f00 	cmp.w	sl, #0
 800d97a:	d106      	bne.n	800d98a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d97c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d980:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800d982:	2001      	movs	r0, #1
}
 800d984:	b003      	add	sp, #12
 800d986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800d98a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d98e:	2b01      	cmp	r3, #1
 800d990:	f000 80b5 	beq.w	800dafe <HAL_I2C_Mem_Write+0x1aa>
 800d994:	f04f 0b01 	mov.w	fp, #1
 800d998:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800d99c:	f7fe fe44 	bl	800c628 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d9a0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800d9a2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d9a4:	9000      	str	r0, [sp, #0]
 800d9a6:	465a      	mov	r2, fp
 800d9a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f7ff ff09 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d1e5      	bne.n	800d982 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d9b6:	2321      	movs	r3, #33	; 0x21
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9b8:	fa5f f289 	uxtb.w	r2, r9
 800d9bc:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800d9be:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d9c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d9c4:	2340      	movs	r3, #64	; 0x40
 800d9c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800d9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d9cc:	6460      	str	r0, [r4, #68]	; 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9ce:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800d9d0:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9d2:	4b4c      	ldr	r3, [pc, #304]	; (800db04 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 800d9d4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d9de:	f7ff fe2f 	bl	800d640 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	4641      	mov	r1, r8
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f7ff fec1 	bl	800d76e <I2C_WaitOnTXISFlagUntilTimeout>
 800d9ec:	bb18      	cbnz	r0, 800da36 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d9ee:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d9f2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d9f4:	d115      	bne.n	800da22 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d9f6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	2180      	movs	r1, #128	; 0x80
 800d9fc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d9fe:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800da00:	4643      	mov	r3, r8
 800da02:	9500      	str	r5, [sp, #0]
 800da04:	f7ff fede 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800da08:	b9a8      	cbnz	r0, 800da36 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	2bff      	cmp	r3, #255	; 0xff
 800da10:	d815      	bhi.n	800da3e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800da12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da18:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800da1a:	b292      	uxth	r2, r2
 800da1c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da1e:	b2d2      	uxtb	r2, r2
 800da20:	e012      	b.n	800da48 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800da22:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da24:	4641      	mov	r1, r8
 800da26:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800da28:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da2a:	462a      	mov	r2, r5
 800da2c:	f7ff fe9f 	bl	800d76e <I2C_WaitOnTXISFlagUntilTimeout>
 800da30:	b908      	cbnz	r0, 800da36 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	e7df      	b.n	800d9f6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800da36:	2300      	movs	r3, #0
 800da38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800da3c:	e7a1      	b.n	800d982 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800da3e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800da40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da44:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800da46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800da48:	4639      	mov	r1, r7
 800da4a:	4620      	mov	r0, r4
 800da4c:	f7ff fdf8 	bl	800d640 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da50:	462a      	mov	r2, r5
 800da52:	4641      	mov	r1, r8
 800da54:	4620      	mov	r0, r4
 800da56:	f7ff fe8a 	bl	800d76e <I2C_WaitOnTXISFlagUntilTimeout>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d191      	bne.n	800d982 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800da5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da60:	6822      	ldr	r2, [r4, #0]
 800da62:	f813 1b01 	ldrb.w	r1, [r3], #1
 800da66:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800da68:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800da6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800da6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800da6e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800da70:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800da72:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800da74:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800da76:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800da78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800da7a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	b1b3      	cbz	r3, 800daae <HAL_I2C_Mem_Write+0x15a>
 800da80:	b9aa      	cbnz	r2, 800daae <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800da82:	4643      	mov	r3, r8
 800da84:	2180      	movs	r1, #128	; 0x80
 800da86:	4620      	mov	r0, r4
 800da88:	9500      	str	r5, [sp, #0]
 800da8a:	f7ff fe9b 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800da8e:	2800      	cmp	r0, #0
 800da90:	f47f af77 	bne.w	800d982 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800da94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800da96:	b29b      	uxth	r3, r3
 800da98:	2bff      	cmp	r3, #255	; 0xff
 800da9a:	d928      	bls.n	800daee <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800da9c:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800da9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800daa2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800daa4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800daa6:	4639      	mov	r1, r7
 800daa8:	4620      	mov	r0, r4
 800daaa:	f7ff fdc9 	bl	800d640 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800daae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1cc      	bne.n	800da50 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dab6:	462a      	mov	r2, r5
 800dab8:	4641      	mov	r1, r8
 800daba:	4620      	mov	r0, r4
 800dabc:	f7ff feb5 	bl	800d82a <I2C_WaitOnSTOPFlagUntilTimeout>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	f47f af5e 	bne.w	800d982 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dac6:	6823      	ldr	r3, [r4, #0]
 800dac8:	2120      	movs	r1, #32
 800daca:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800dad2:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800dad6:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800dada:	f022 0201 	bic.w	r2, r2, #1
 800dade:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dae0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dae4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dae8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800daec:	e74a      	b.n	800d984 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800daee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800daf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800daf4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800daf6:	b292      	uxth	r2, r2
 800daf8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dafa:	b2d2      	uxtb	r2, r2
 800dafc:	e7d3      	b.n	800daa6 <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 800dafe:	2002      	movs	r0, #2
 800db00:	e740      	b.n	800d984 <HAL_I2C_Mem_Write+0x30>
 800db02:	bf00      	nop
 800db04:	80002000 	.word	0x80002000

0800db08 <HAL_I2C_Mem_Read>:
{
 800db08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db0e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800db12:	4604      	mov	r4, r0
 800db14:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db16:	2b20      	cmp	r3, #32
{
 800db18:	4616      	mov	r6, r2
 800db1a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800db1e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800db22:	f040 80c9 	bne.w	800dcb8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800db26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db28:	b113      	cbz	r3, 800db30 <HAL_I2C_Mem_Read+0x28>
 800db2a:	f1ba 0f00 	cmp.w	sl, #0
 800db2e:	d106      	bne.n	800db3e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800db30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db34:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800db36:	2001      	movs	r0, #1
}
 800db38:	b003      	add	sp, #12
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800db3e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800db42:	2b01      	cmp	r3, #1
 800db44:	f000 80b8 	beq.w	800dcb8 <HAL_I2C_Mem_Read+0x1b0>
 800db48:	f04f 0b01 	mov.w	fp, #1
 800db4c:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800db50:	f7fe fd6a 	bl	800c628 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db54:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 800db56:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db58:	9000      	str	r0, [sp, #0]
 800db5a:	465a      	mov	r2, fp
 800db5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff fe2f 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800db66:	2800      	cmp	r0, #0
 800db68:	d1e5      	bne.n	800db36 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db6a:	2322      	movs	r3, #34	; 0x22
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800db6c:	fa5f f289 	uxtb.w	r2, r9
 800db70:	4639      	mov	r1, r7
    hi2c->XferISR   = NULL;
 800db72:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db78:	2340      	movs	r3, #64	; 0x40
 800db7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800db7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db80:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800db82:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800db84:	4b4d      	ldr	r3, [pc, #308]	; (800dcbc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 800db86:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800db8a:	9300      	str	r3, [sp, #0]
 800db8c:	4603      	mov	r3, r0
 800db8e:	4620      	mov	r0, r4
 800db90:	f7ff fd56 	bl	800d640 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800db94:	462a      	mov	r2, r5
 800db96:	4641      	mov	r1, r8
 800db98:	4620      	mov	r0, r4
 800db9a:	f7ff fde8 	bl	800d76e <I2C_WaitOnTXISFlagUntilTimeout>
 800db9e:	bb20      	cbnz	r0, 800dbea <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dba0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dba4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dba6:	d116      	bne.n	800dbd6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dba8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	2140      	movs	r1, #64	; 0x40
 800dbae:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dbb0:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800dbb2:	4643      	mov	r3, r8
 800dbb4:	9500      	str	r5, [sp, #0]
 800dbb6:	f7ff fe05 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800dbba:	b9b0      	cbnz	r0, 800dbea <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	2bff      	cmp	r3, #255	; 0xff
 800dbc2:	4b3f      	ldr	r3, [pc, #252]	; (800dcc0 <HAL_I2C_Mem_Read+0x1b8>)
 800dbc4:	d815      	bhi.n	800dbf2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 800dbc6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800dbce:	b292      	uxth	r2, r2
 800dbd0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dbd2:	b2d2      	uxtb	r2, r2
 800dbd4:	e012      	b.n	800dbfc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dbd6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbd8:	4641      	mov	r1, r8
 800dbda:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dbdc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbde:	462a      	mov	r2, r5
 800dbe0:	f7ff fdc5 	bl	800d76e <I2C_WaitOnTXISFlagUntilTimeout>
 800dbe4:	b908      	cbnz	r0, 800dbea <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dbe6:	6823      	ldr	r3, [r4, #0]
 800dbe8:	e7de      	b.n	800dba8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800dbea:	2300      	movs	r3, #0
 800dbec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800dbf0:	e7a1      	b.n	800db36 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbf2:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbfa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f7ff fd1e 	bl	800d640 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800dc04:	4643      	mov	r3, r8
 800dc06:	2200      	movs	r2, #0
 800dc08:	2104      	movs	r1, #4
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	9500      	str	r5, [sp, #0]
 800dc0e:	f7ff fdd9 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d18f      	bne.n	800db36 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dc16:	6823      	ldr	r3, [r4, #0]
 800dc18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc1c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800dc1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800dc20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 800dc22:	3301      	adds	r3, #1
      hi2c->XferSize--;
 800dc24:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800dc26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800dc28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800dc2a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800dc2c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800dc2e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	b1b3      	cbz	r3, 800dc68 <HAL_I2C_Mem_Read+0x160>
 800dc3a:	b9aa      	cbnz	r2, 800dc68 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800dc3c:	4643      	mov	r3, r8
 800dc3e:	2180      	movs	r1, #128	; 0x80
 800dc40:	4620      	mov	r0, r4
 800dc42:	9500      	str	r5, [sp, #0]
 800dc44:	f7ff fdbe 	bl	800d7c4 <I2C_WaitOnFlagUntilTimeout>
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f47f af74 	bne.w	800db36 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	2bff      	cmp	r3, #255	; 0xff
 800dc54:	d928      	bls.n	800dca8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc56:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800dc58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dc5c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800dc5e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc60:	4639      	mov	r1, r7
 800dc62:	4620      	mov	r0, r4
 800dc64:	f7ff fcec 	bl	800d640 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800dc68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1c9      	bne.n	800dc04 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc70:	462a      	mov	r2, r5
 800dc72:	4641      	mov	r1, r8
 800dc74:	4620      	mov	r0, r4
 800dc76:	f7ff fdd8 	bl	800d82a <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	f47f af5b 	bne.w	800db36 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	2120      	movs	r1, #32
 800dc84:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800dc8c:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800dc90:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800dc94:	f022 0201 	bic.w	r2, r2, #1
 800dc98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800dc9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dc9e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800dca2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800dca6:	e747      	b.n	800db38 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800dca8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dcaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dcae:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dcb4:	b2d2      	uxtb	r2, r2
 800dcb6:	e7d3      	b.n	800dc60 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 800dcb8:	2002      	movs	r0, #2
 800dcba:	e73d      	b.n	800db38 <HAL_I2C_Mem_Read+0x30>
 800dcbc:	80002000 	.word	0x80002000
 800dcc0:	80002400 	.word	0x80002400

0800dcc4 <HAL_I2C_GetState>:
  return hi2c->State;
 800dcc4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 800dcc8:	4770      	bx	lr

0800dcca <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800dcca:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800dccc:	4770      	bx	lr

0800dcce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800dcce:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dcd0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800dcd4:	2b20      	cmp	r3, #32
 800dcd6:	b2dc      	uxtb	r4, r3
 800dcd8:	d11d      	bne.n	800dd16 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcda:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d019      	beq.n	800dd16 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dce2:	2324      	movs	r3, #36	; 0x24
 800dce4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dce8:	6803      	ldr	r3, [r0, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	f022 0201 	bic.w	r2, r2, #1
 800dcf0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dcf8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800dcfa:	681a      	ldr	r2, [r3, #0]
 800dcfc:	4311      	orrs	r1, r2
 800dcfe:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd00:	681a      	ldr	r2, [r3, #0]
 800dd02:	f042 0201 	orr.w	r2, r2, #1
 800dd06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd08:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800dd0a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dd0e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800dd12:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dd14:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800dd16:	2002      	movs	r0, #2
 800dd18:	e7fc      	b.n	800dd14 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800dd1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800dd1a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dd1c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800dd20:	2b20      	cmp	r3, #32
 800dd22:	b2dc      	uxtb	r4, r3
 800dd24:	d11c      	bne.n	800dd60 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dd26:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d018      	beq.n	800dd60 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800dd2e:	2324      	movs	r3, #36	; 0x24
 800dd30:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800dd34:	6803      	ldr	r3, [r0, #0]
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	f022 0201 	bic.w	r2, r2, #1
 800dd3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800dd3e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800dd40:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800dd44:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dd48:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	f042 0201 	orr.w	r2, r2, #1
 800dd50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd52:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800dd54:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800dd58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 800dd5c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800dd5e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800dd60:	2002      	movs	r0, #2
 800dd62:	e7fc      	b.n	800dd5e <HAL_I2CEx_ConfigDigitalFilter+0x44>

0800dd64 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd64:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd66:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dd68:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd6c:	3284      	adds	r2, #132	; 0x84
 800dd6e:	1883      	adds	r3, r0, r2
{
 800dd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd74:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dd76:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd7a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800dd7c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd80:	684c      	ldr	r4, [r1, #4]
 800dd82:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd86:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800dd8a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800dd8e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800dd90:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800dd92:	68c5      	ldr	r5, [r0, #12]
 800dd94:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800dd98:	443d      	add	r5, r7
 800dd9a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dd9e:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800dda0:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800dda2:	68c5      	ldr	r5, [r0, #12]
 800dda4:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800dda8:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ddaa:	689d      	ldr	r5, [r3, #8]
 800ddac:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800ddb0:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddb2:	688d      	ldr	r5, [r1, #8]
 800ddb4:	68c7      	ldr	r7, [r0, #12]
 800ddb6:	3501      	adds	r5, #1
 800ddb8:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800ddbc:	443d      	add	r5, r7
 800ddbe:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ddc2:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ddc4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ddc6:	691d      	ldr	r5, [r3, #16]
 800ddc8:	f025 0507 	bic.w	r5, r5, #7
 800ddcc:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ddce:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ddd0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800ddd2:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800ddd6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ddda:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800ddde:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800dde2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800dde6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800ddea:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800ddee:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800ddf0:	695d      	ldr	r5, [r3, #20]
 800ddf2:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800ddf6:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ddf8:	694d      	ldr	r5, [r1, #20]
 800ddfa:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ddfc:	69dd      	ldr	r5, [r3, #28]
 800ddfe:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800de02:	f025 0507 	bic.w	r5, r5, #7
 800de06:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800de08:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800de0c:	433d      	orrs	r5, r7
 800de0e:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800de10:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800de12:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800de14:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800de18:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800de1a:	b31e      	cbz	r6, 800de64 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800de1c:	2e01      	cmp	r6, #1
 800de1e:	d023      	beq.n	800de68 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800de20:	1eb5      	subs	r5, r6, #2
 800de22:	2d02      	cmp	r5, #2
 800de24:	d922      	bls.n	800de6c <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800de26:	2e07      	cmp	r6, #7
 800de28:	bf0c      	ite	eq
 800de2a:	2502      	moveq	r5, #2
 800de2c:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de2e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de30:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de34:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de38:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800de3a:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de3c:	3407      	adds	r4, #7
 800de3e:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800de40:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800de42:	436e      	muls	r6, r5
 800de44:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800de48:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800de4a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800de4c:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800de50:	f024 0407 	bic.w	r4, r4, #7
 800de54:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800de56:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800de58:	5883      	ldr	r3, [r0, r2]
 800de5a:	f043 0301 	orr.w	r3, r3, #1
 800de5e:	5083      	str	r3, [r0, r2]
}
 800de60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800de64:	2504      	movs	r5, #4
 800de66:	e7e2      	b.n	800de2e <LTDC_SetConfig+0xca>
    tmp = 3U;
 800de68:	2503      	movs	r5, #3
 800de6a:	e7e0      	b.n	800de2e <LTDC_SetConfig+0xca>
    tmp = 2U;
 800de6c:	2502      	movs	r5, #2
 800de6e:	e7de      	b.n	800de2e <LTDC_SetConfig+0xca>

0800de70 <HAL_LTDC_Init>:
{
 800de70:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800de72:	4604      	mov	r4, r0
 800de74:	2800      	cmp	r0, #0
 800de76:	d063      	beq.n	800df40 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800de78:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800de7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800de80:	b91b      	cbnz	r3, 800de8a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800de82:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800de86:	f7f3 f8df 	bl	8001048 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800de8a:	2302      	movs	r3, #2
 800de8c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	699a      	ldr	r2, [r3, #24]
 800de94:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800de98:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800de9a:	6999      	ldr	r1, [r3, #24]
 800de9c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800dea0:	4302      	orrs	r2, r0
 800dea2:	68e0      	ldr	r0, [r4, #12]
 800dea4:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800dea6:	6920      	ldr	r0, [r4, #16]
 800dea8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800deaa:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800deac:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800deae:	4925      	ldr	r1, [pc, #148]	; (800df44 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800deb0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800deb2:	689a      	ldr	r2, [r3, #8]
 800deb4:	400a      	ands	r2, r1
 800deb6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800deb8:	689a      	ldr	r2, [r3, #8]
 800deba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800debe:	69a0      	ldr	r0, [r4, #24]
 800dec0:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800dec2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800dec4:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800dec6:	68da      	ldr	r2, [r3, #12]
 800dec8:	400a      	ands	r2, r1
 800deca:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800ded2:	6a20      	ldr	r0, [r4, #32]
 800ded4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ded6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ded8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800deda:	691a      	ldr	r2, [r3, #16]
 800dedc:	400a      	ands	r2, r1
 800dede:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800dee0:	691a      	ldr	r2, [r3, #16]
 800dee2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800dee6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dee8:	4302      	orrs	r2, r0
 800deea:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800deec:	695a      	ldr	r2, [r3, #20]
 800deee:	4011      	ands	r1, r2
 800def0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800def2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800def4:	695a      	ldr	r2, [r3, #20]
 800def6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800defa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800defc:	430a      	orrs	r2, r1
 800defe:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800df00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800df02:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800df06:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800df0a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800df0e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800df10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800df12:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800df16:	430a      	orrs	r2, r1
 800df18:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800df1c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800df20:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800df22:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800df24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df26:	f042 0206 	orr.w	r2, r2, #6
 800df2a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800df2c:	699a      	ldr	r2, [r3, #24]
 800df2e:	f042 0201 	orr.w	r2, r2, #1
 800df32:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800df34:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800df36:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800df3a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800df40:	2001      	movs	r0, #1
 800df42:	e7fc      	b.n	800df3e <HAL_LTDC_Init+0xce>
 800df44:	f000f800 	.word	0xf000f800

0800df48 <HAL_LTDC_ErrorCallback>:
 800df48:	4770      	bx	lr

0800df4a <HAL_LTDC_LineEventCallback>:
 800df4a:	4770      	bx	lr

0800df4c <HAL_LTDC_ReloadEventCallback>:
 800df4c:	4770      	bx	lr

0800df4e <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800df4e:	6803      	ldr	r3, [r0, #0]
{
 800df50:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800df52:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 800df54:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800df56:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800df58:	0772      	lsls	r2, r6, #29
 800df5a:	d514      	bpl.n	800df86 <HAL_LTDC_IRQHandler+0x38>
 800df5c:	0769      	lsls	r1, r5, #29
 800df5e:	d512      	bpl.n	800df86 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800df60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df62:	f022 0204 	bic.w	r2, r2, #4
 800df66:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800df68:	2204      	movs	r2, #4
 800df6a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800df6c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800df70:	f043 0301 	orr.w	r3, r3, #1
 800df74:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 800df78:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800df7a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800df7e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800df82:	f7ff ffe1 	bl	800df48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800df86:	07b2      	lsls	r2, r6, #30
 800df88:	d516      	bpl.n	800dfb8 <HAL_LTDC_IRQHandler+0x6a>
 800df8a:	07ab      	lsls	r3, r5, #30
 800df8c:	d514      	bpl.n	800dfb8 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800df8e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800df90:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800df92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df94:	f022 0202 	bic.w	r2, r2, #2
 800df98:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800df9a:	2202      	movs	r2, #2
 800df9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800df9e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800dfa8:	2304      	movs	r3, #4
 800dfaa:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800dfae:	2300      	movs	r3, #0
 800dfb0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800dfb4:	f7ff ffc8 	bl	800df48 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800dfb8:	07f0      	lsls	r0, r6, #31
 800dfba:	d510      	bpl.n	800dfde <HAL_LTDC_IRQHandler+0x90>
 800dfbc:	07e9      	lsls	r1, r5, #31
 800dfbe:	d50e      	bpl.n	800dfde <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dfc0:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800dfc2:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800dfc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfc6:	f022 0201 	bic.w	r2, r2, #1
 800dfca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800dfcc:	2201      	movs	r2, #1
 800dfce:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 800dfd0:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800dfd2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800dfd6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800dfda:	f7ff ffb6 	bl	800df4a <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800dfde:	0732      	lsls	r2, r6, #28
 800dfe0:	d511      	bpl.n	800e006 <HAL_LTDC_IRQHandler+0xb8>
 800dfe2:	072b      	lsls	r3, r5, #28
 800dfe4:	d50f      	bpl.n	800e006 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dfe6:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800dfe8:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800dfea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfec:	f022 0208 	bic.w	r2, r2, #8
 800dff0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800dff2:	2208      	movs	r2, #8
 800dff4:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800dff6:	2301      	movs	r3, #1
 800dff8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800dffc:	2300      	movs	r3, #0
 800dffe:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800e002:	f7ff ffa3 	bl	800df4c <HAL_LTDC_ReloadEventCallback>
}
 800e006:	bd70      	pop	{r4, r5, r6, pc}

0800e008 <HAL_LTDC_ConfigLayer>:
{
 800e008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800e00c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800e010:	4606      	mov	r6, r0
 800e012:	460f      	mov	r7, r1
 800e014:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800e016:	2b01      	cmp	r3, #1
 800e018:	f04f 0002 	mov.w	r0, #2
 800e01c:	d01f      	beq.n	800e05e <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e01e:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 800e020:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e024:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e026:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e02a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800e02e:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e032:	3438      	adds	r4, #56	; 0x38
 800e034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e03a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e03c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e03e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e040:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e042:	4630      	mov	r0, r6
 800e044:	4662      	mov	r2, ip
 800e046:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e048:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e04a:	f7ff fe8b 	bl	800dd64 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e04e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800e050:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e052:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e056:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e05a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e064 <HAL_LTDC_SetPitch>:
{
 800e064:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800e066:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	f04f 0302 	mov.w	r3, #2
 800e070:	d02c      	beq.n	800e0cc <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800e072:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e074:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800e078:	fb04 0402 	mla	r4, r4, r2, r0
 800e07c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800e07e:	b33c      	cbz	r4, 800e0d0 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800e080:	2c01      	cmp	r4, #1
 800e082:	d027      	beq.n	800e0d4 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e084:	1ea5      	subs	r5, r4, #2
 800e086:	429d      	cmp	r5, r3
 800e088:	d902      	bls.n	800e090 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800e08a:	2c07      	cmp	r4, #7
 800e08c:	bf18      	it	ne
 800e08e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800e090:	01d2      	lsls	r2, r2, #7
 800e092:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800e094:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800e096:	3284      	adds	r2, #132	; 0x84
 800e098:	4422      	add	r2, r4
 800e09a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800e09c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800e0a0:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 800e0a4:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800e0a6:	4c0c      	ldr	r4, [pc, #48]	; (800e0d8 <HAL_LTDC_SetPitch+0x74>)
 800e0a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e0aa:	f045 0501 	orr.w	r5, r5, #1
 800e0ae:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800e0b0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800e0b2:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e0b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800e0b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0ba:	f043 0301 	orr.w	r3, r3, #1
 800e0be:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800e0d0:	2304      	movs	r3, #4
 800e0d2:	e7dd      	b.n	800e090 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e7db      	b.n	800e090 <HAL_LTDC_SetPitch+0x2c>
 800e0d8:	50001000 	.word	0x50001000

0800e0dc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800e0e0:	f7fe faa2 	bl	800c628 <HAL_GetTick>
 800e0e4:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800e0e6:	2c00      	cmp	r4, #0
 800e0e8:	d061      	beq.n	800e1ae <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800e0ea:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800e0ec:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800e0ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800e0f2:	2302      	movs	r3, #2
 800e0f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800e0f8:	68d3      	ldr	r3, [r2, #12]
 800e0fa:	f023 0301 	bic.w	r3, r3, #1
 800e0fe:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800e100:	6823      	ldr	r3, [r4, #0]
 800e102:	68da      	ldr	r2, [r3, #12]
 800e104:	07d2      	lsls	r2, r2, #31
 800e106:	d448      	bmi.n	800e19a <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800e108:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800e10c:	430a      	orrs	r2, r1
 800e10e:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800e110:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800e114:	430a      	orrs	r2, r1
 800e116:	69e1      	ldr	r1, [r4, #28]
 800e118:	430a      	orrs	r2, r1
 800e11a:	6a21      	ldr	r1, [r4, #32]
 800e11c:	430a      	orrs	r2, r1
 800e11e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e120:	430a      	orrs	r2, r1
 800e122:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e124:	430a      	orrs	r2, r1
 800e126:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e128:	430a      	orrs	r2, r1
 800e12a:	68a1      	ldr	r1, [r4, #8]
 800e12c:	430a      	orrs	r2, r1
 800e12e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800e130:	3901      	subs	r1, #1
 800e132:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e136:	6861      	ldr	r1, [r4, #4]
 800e138:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800e13c:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800e13e:	d103      	bne.n	800e148 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800e140:	691a      	ldr	r2, [r3, #16]
 800e142:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800e146:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800e148:	2200      	movs	r2, #0
 800e14a:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800e14c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e14e:	2a00      	cmp	r2, #0
 800e150:	da04      	bge.n	800e15c <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e152:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800e154:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800e156:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 800e15a:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800e15c:	b292      	uxth	r2, r2
 800e15e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800e160:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e162:	2a00      	cmp	r2, #0
 800e164:	da25      	bge.n	800e1b2 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e166:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800e168:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800e16a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800e16e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e170:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e172:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e176:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e17a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800e17c:	f04f 0200 	mov.w	r2, #0
 800e180:	d019      	beq.n	800e1b6 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800e182:	b2c9      	uxtb	r1, r1
 800e184:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800e186:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 800e188:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800e18a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e18c:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800e18e:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800e190:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800e194:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 800e198:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800e19a:	f7fe fa45 	bl	800c628 <HAL_GetTick>
 800e19e:	1b40      	subs	r0, r0, r5
 800e1a0:	2805      	cmp	r0, #5
 800e1a2:	d9ad      	bls.n	800e100 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800e1a4:	2340      	movs	r3, #64	; 0x40
 800e1a6:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800e1ae:	2001      	movs	r0, #1
 800e1b0:	e7f2      	b.n	800e198 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800e1b2:	6a18      	ldr	r0, [r3, #32]
 800e1b4:	e7dd      	b.n	800e172 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800e1b6:	629a      	str	r2, [r3, #40]	; 0x28
 800e1b8:	e7e5      	b.n	800e186 <HAL_MDMA_Init+0xaa>

0800e1ba <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800e1ba:	b1d8      	cbz	r0, 800e1f4 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800e1bc:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800e1be:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800e1c0:	68d3      	ldr	r3, [r2, #12]
 800e1c2:	f023 0301 	bic.w	r3, r3, #1
 800e1c6:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800e1cc:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800e1ce:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800e1d0:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800e1d2:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800e1d4:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800e1d6:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800e1d8:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800e1da:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800e1dc:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800e1de:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800e1e0:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800e1e2:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800e1e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 800e1e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800e1ec:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	4770      	bx	lr
    return HAL_ERROR;
 800e1f4:	2001      	movs	r0, #1
}
 800e1f6:	4770      	bx	lr

0800e1f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e1f8:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e1fa:	4d1c      	ldr	r5, [pc, #112]	; (800e26c <HAL_PWREx_ConfigSupply+0x74>)
{
 800e1fc:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800e1fe:	68eb      	ldr	r3, [r5, #12]
 800e200:	f003 0307 	and.w	r3, r3, #7
 800e204:	2b06      	cmp	r3, #6
 800e206:	d006      	beq.n	800e216 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e208:	68e8      	ldr	r0, [r5, #12]
 800e20a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e20e:	1b00      	subs	r0, r0, r4
 800e210:	bf18      	it	ne
 800e212:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800e214:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e216:	68eb      	ldr	r3, [r5, #12]
 800e218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e21c:	4303      	orrs	r3, r0
 800e21e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800e220:	f7fe fa02 	bl	800c628 <HAL_GetTick>
 800e224:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e226:	686b      	ldr	r3, [r5, #4]
 800e228:	049a      	lsls	r2, r3, #18
 800e22a:	d508      	bpl.n	800e23e <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800e22c:	f1a4 031d 	sub.w	r3, r4, #29
 800e230:	2b01      	cmp	r3, #1
 800e232:	d90c      	bls.n	800e24e <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800e234:	3c2d      	subs	r4, #45	; 0x2d
 800e236:	2c01      	cmp	r4, #1
 800e238:	d909      	bls.n	800e24e <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 800e23a:	2000      	movs	r0, #0
 800e23c:	e7ea      	b.n	800e214 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e23e:	f7fe f9f3 	bl	800c628 <HAL_GetTick>
 800e242:	1b80      	subs	r0, r0, r6
 800e244:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e248:	d9ed      	bls.n	800e226 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800e24a:	2001      	movs	r0, #1
 800e24c:	e7e2      	b.n	800e214 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800e24e:	f7fe f9eb 	bl	800c628 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e252:	4d06      	ldr	r5, [pc, #24]	; (800e26c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800e254:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800e256:	68eb      	ldr	r3, [r5, #12]
 800e258:	03db      	lsls	r3, r3, #15
 800e25a:	d4ee      	bmi.n	800e23a <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e25c:	f7fe f9e4 	bl	800c628 <HAL_GetTick>
 800e260:	1b00      	subs	r0, r0, r4
 800e262:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800e266:	d9f6      	bls.n	800e256 <HAL_PWREx_ConfigSupply+0x5e>
 800e268:	e7ef      	b.n	800e24a <HAL_PWREx_ConfigSupply+0x52>
 800e26a:	bf00      	nop
 800e26c:	58024800 	.word	0x58024800

0800e270 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800e270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800e274:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800e276:	b136      	cbz	r6, 800e286 <QSPI_Config+0x16>
 800e278:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800e27c:	d003      	beq.n	800e286 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e27e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800e280:	6804      	ldr	r4, [r0, #0]
 800e282:	3b01      	subs	r3, #1
 800e284:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e286:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e28a:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800e28e:	f1b9 0f00 	cmp.w	r9, #0
 800e292:	d04f      	beq.n	800e334 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e294:	694b      	ldr	r3, [r1, #20]
 800e296:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800e29a:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e29c:	f8d1 a000 	ldr.w	sl, [r1]
 800e2a0:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 800e2a4:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 800e2a8:	ea49 0902 	orr.w	r9, r9, r2
 800e2ac:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e2b0:	b335      	cbz	r5, 800e300 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e2b2:	688b      	ldr	r3, [r1, #8]
 800e2b4:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2b8:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e2ba:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e2bc:	b19f      	cbz	r7, 800e2e6 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2be:	ea4a 0307 	orr.w	r3, sl, r7
 800e2c2:	4323      	orrs	r3, r4
 800e2c4:	68cc      	ldr	r4, [r1, #12]
 800e2c6:	ea43 0308 	orr.w	r3, r3, r8
 800e2ca:	ea43 030e 	orr.w	r3, r3, lr
 800e2ce:	4333      	orrs	r3, r6
 800e2d0:	4323      	orrs	r3, r4
 800e2d2:	ea43 030c 	orr.w	r3, r3, ip
 800e2d6:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2d8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2dc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e2de:	d00d      	beq.n	800e2fc <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e2e0:	684b      	ldr	r3, [r1, #4]
 800e2e2:	6183      	str	r3, [r0, #24]
 800e2e4:	e00a      	b.n	800e2fc <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2e6:	ea4a 0304 	orr.w	r3, sl, r4
 800e2ea:	ea43 0308 	orr.w	r3, r3, r8
 800e2ee:	ea43 030e 	orr.w	r3, r3, lr
 800e2f2:	4333      	orrs	r3, r6
 800e2f4:	ea43 030c 	orr.w	r3, r3, ip
 800e2f8:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e2fa:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e300:	b16f      	cbz	r7, 800e31e <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e302:	ea4a 0307 	orr.w	r3, sl, r7
 800e306:	4323      	orrs	r3, r4
 800e308:	68cc      	ldr	r4, [r1, #12]
 800e30a:	ea43 0308 	orr.w	r3, r3, r8
 800e30e:	ea43 030e 	orr.w	r3, r3, lr
 800e312:	4323      	orrs	r3, r4
 800e314:	ea43 030c 	orr.w	r3, r3, ip
 800e318:	ea43 0309 	orr.w	r3, r3, r9
 800e31c:	e7dc      	b.n	800e2d8 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e31e:	ea4a 0304 	orr.w	r3, sl, r4
 800e322:	ea43 0308 	orr.w	r3, r3, r8
 800e326:	ea43 030e 	orr.w	r3, r3, lr
 800e32a:	ea43 030c 	orr.w	r3, r3, ip
 800e32e:	ea43 0309 	orr.w	r3, r3, r9
 800e332:	e7e2      	b.n	800e2fa <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800e334:	b365      	cbz	r5, 800e390 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e336:	6804      	ldr	r4, [r0, #0]
 800e338:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e33a:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800e33c:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e33e:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e342:	694e      	ldr	r6, [r1, #20]
 800e344:	ea43 0502 	orr.w	r5, r3, r2
 800e348:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 800e34c:	04b6      	lsls	r6, r6, #18
 800e34e:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e352:	b1a7      	cbz	r7, 800e37e <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e354:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e356:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e35a:	ea40 0008 	orr.w	r0, r0, r8
 800e35e:	ea43 0300 	orr.w	r3, r3, r0
 800e362:	68c8      	ldr	r0, [r1, #12]
 800e364:	ea43 030c 	orr.w	r3, r3, ip
 800e368:	ea43 0300 	orr.w	r3, r3, r0
 800e36c:	ea43 0306 	orr.w	r3, r3, r6
 800e370:	ea43 0305 	orr.w	r3, r3, r5
 800e374:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800e376:	d0c1      	beq.n	800e2fc <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800e378:	684b      	ldr	r3, [r1, #4]
 800e37a:	61a3      	str	r3, [r4, #24]
 800e37c:	e7be      	b.n	800e2fc <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e37e:	ea40 0008 	orr.w	r0, r0, r8
 800e382:	4303      	orrs	r3, r0
 800e384:	ea43 030c 	orr.w	r3, r3, ip
 800e388:	4333      	orrs	r3, r6
 800e38a:	432b      	orrs	r3, r5
 800e38c:	6163      	str	r3, [r4, #20]
 800e38e:	e7b5      	b.n	800e2fc <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800e390:	b17f      	cbz	r7, 800e3b2 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e392:	ea46 0307 	orr.w	r3, r6, r7
 800e396:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800e398:	6800      	ldr	r0, [r0, #0]
 800e39a:	4313      	orrs	r3, r2
 800e39c:	4323      	orrs	r3, r4
 800e39e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 800e3a0:	4323      	orrs	r3, r4
 800e3a2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800e3a4:	4323      	orrs	r3, r4
 800e3a6:	68cc      	ldr	r4, [r1, #12]
 800e3a8:	4323      	orrs	r3, r4
 800e3aa:	694c      	ldr	r4, [r1, #20]
 800e3ac:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800e3b0:	e792      	b.n	800e2d8 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800e3b2:	2e00      	cmp	r6, #0
 800e3b4:	d0a2      	beq.n	800e2fc <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800e3b6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800e3b8:	6800      	ldr	r0, [r0, #0]
 800e3ba:	4333      	orrs	r3, r6
 800e3bc:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800e3be:	431a      	orrs	r2, r3
 800e3c0:	694b      	ldr	r3, [r1, #20]
 800e3c2:	4332      	orrs	r2, r6
 800e3c4:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800e3c6:	4332      	orrs	r2, r6
 800e3c8:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800e3cc:	6142      	str	r2, [r0, #20]
}
 800e3ce:	e795      	b.n	800e2fc <QSPI_Config+0x8c>

0800e3d0 <QSPI_WaitFlagStateUntilTimeout>:
{
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e3d8:	4604      	mov	r4, r0
 800e3da:	460e      	mov	r6, r1
 800e3dc:	4615      	mov	r5, r2
 800e3de:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800e3e0:	6822      	ldr	r2, [r4, #0]
 800e3e2:	6893      	ldr	r3, [r2, #8]
 800e3e4:	4233      	tst	r3, r6
 800e3e6:	bf14      	ite	ne
 800e3e8:	2301      	movne	r3, #1
 800e3ea:	2300      	moveq	r3, #0
 800e3ec:	42ab      	cmp	r3, r5
 800e3ee:	d101      	bne.n	800e3f4 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	e012      	b.n	800e41a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800e3f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 800e3f8:	d0f3      	beq.n	800e3e2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3fa:	f7fe f915 	bl	800c628 <HAL_GetTick>
 800e3fe:	1bc0      	subs	r0, r0, r7
 800e400:	4540      	cmp	r0, r8
 800e402:	d802      	bhi.n	800e40a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800e404:	f1b8 0f00 	cmp.w	r8, #0
 800e408:	d1ea      	bne.n	800e3e0 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e40a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e40c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800e40e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800e412:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e414:	f043 0301 	orr.w	r3, r3, #1
 800e418:	6463      	str	r3, [r4, #68]	; 0x44
}
 800e41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800e420 <HAL_QSPI_Init>:
{
 800e420:	b530      	push	{r4, r5, lr}
 800e422:	4604      	mov	r4, r0
 800e424:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800e426:	f7fe f8ff 	bl	800c628 <HAL_GetTick>
 800e42a:	4603      	mov	r3, r0
  if(hqspi == NULL)
 800e42c:	2c00      	cmp	r4, #0
 800e42e:	d040      	beq.n	800e4b2 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800e430:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e434:	b93a      	cbnz	r2, 800e446 <HAL_QSPI_Init+0x26>
 800e436:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 800e438:	4620      	mov	r0, r4
 800e43a:	f7f2 fe43 	bl	80010c4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800e43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e442:	9b03      	ldr	r3, [sp, #12]
 800e444:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e446:	6820      	ldr	r0, [r4, #0]
 800e448:	68a1      	ldr	r1, [r4, #8]
 800e44a:	6802      	ldr	r2, [r0, #0]
 800e44c:	3901      	subs	r1, #1
 800e44e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800e452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e456:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800e458:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e45a:	4620      	mov	r0, r4
 800e45c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800e45e:	9200      	str	r2, [sp, #0]
 800e460:	2200      	movs	r2, #0
 800e462:	f7ff ffb5 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800e466:	bb10      	cbnz	r0, 800e4ae <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800e468:	6822      	ldr	r2, [r4, #0]
 800e46a:	69e5      	ldr	r5, [r4, #28]
 800e46c:	68e3      	ldr	r3, [r4, #12]
 800e46e:	6811      	ldr	r1, [r2, #0]
 800e470:	432b      	orrs	r3, r5
 800e472:	6a25      	ldr	r5, [r4, #32]
 800e474:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800e478:	432b      	orrs	r3, r5
 800e47a:	6865      	ldr	r5, [r4, #4]
 800e47c:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800e480:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800e484:	430b      	orrs	r3, r1
 800e486:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800e488:	6855      	ldr	r5, [r2, #4]
 800e48a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800e48e:	430b      	orrs	r3, r1
 800e490:	6921      	ldr	r1, [r4, #16]
 800e492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e496:	4908      	ldr	r1, [pc, #32]	; (800e4b8 <HAL_QSPI_Init+0x98>)
 800e498:	4029      	ands	r1, r5
 800e49a:	430b      	orrs	r3, r1
 800e49c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800e49e:	6813      	ldr	r3, [r2, #0]
 800e4a0:	f043 0301 	orr.w	r3, r3, #1
 800e4a4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800e4a6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e4a8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800e4aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800e4ae:	b005      	add	sp, #20
 800e4b0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	e7fb      	b.n	800e4ae <HAL_QSPI_Init+0x8e>
 800e4b6:	bf00      	nop
 800e4b8:	ffe0f8fe 	.word	0xffe0f8fe

0800e4bc <HAL_QSPI_Command>:
{
 800e4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	b085      	sub	sp, #20
 800e4c4:	4617      	mov	r7, r2
 800e4c6:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800e4c8:	f7fe f8ae 	bl	800c628 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e4cc:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800e4d0:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800e4d2:	2a01      	cmp	r2, #1
 800e4d4:	d033      	beq.n	800e53e <HAL_QSPI_Command+0x82>
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	2602      	movs	r6, #2
 800e4da:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e4de:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e4e2:	2a01      	cmp	r2, #1
 800e4e4:	fa5f f882 	uxtb.w	r8, r2
 800e4e8:	d127      	bne.n	800e53a <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e4ea:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e4ec:	9003      	str	r0, [sp, #12]
 800e4ee:	2120      	movs	r1, #32
 800e4f0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e4f2:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e4f4:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800e4f6:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e4fa:	f7ff ff69 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e4fe:	4605      	mov	r5, r0
 800e500:	b9a0      	cbnz	r0, 800e52c <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e502:	4602      	mov	r2, r0
 800e504:	4649      	mov	r1, r9
 800e506:	4620      	mov	r0, r4
 800e508:	f7ff feb2 	bl	800e270 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800e50c:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 800e510:	9b03      	ldr	r3, [sp, #12]
 800e512:	b94a      	cbnz	r2, 800e528 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e514:	4642      	mov	r2, r8
 800e516:	4631      	mov	r1, r6
 800e518:	4620      	mov	r0, r4
 800e51a:	9700      	str	r7, [sp, #0]
 800e51c:	f7ff ff58 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800e520:	4605      	mov	r5, r0
 800e522:	b918      	cbnz	r0, 800e52c <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800e528:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800e52c:	2300      	movs	r3, #0
 800e52e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e532:	4628      	mov	r0, r5
 800e534:	b005      	add	sp, #20
 800e536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800e53a:	4635      	mov	r5, r6
 800e53c:	e7f6      	b.n	800e52c <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800e53e:	2502      	movs	r5, #2
 800e540:	e7f7      	b.n	800e532 <HAL_QSPI_Command+0x76>

0800e542 <HAL_QSPI_Transmit>:
{
 800e542:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e544:	4604      	mov	r4, r0
 800e546:	b085      	sub	sp, #20
 800e548:	4616      	mov	r6, r2
 800e54a:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800e54c:	f7fe f86c 	bl	800c628 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e550:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800e554:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800e556:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800e558:	2a01      	cmp	r2, #1
 800e55a:	d049      	beq.n	800e5f0 <HAL_QSPI_Transmit+0xae>
 800e55c:	2201      	movs	r2, #1
 800e55e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e562:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e566:	2a01      	cmp	r2, #1
 800e568:	b2d0      	uxtb	r0, r2
 800e56a:	d13f      	bne.n	800e5ec <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e56c:	2200      	movs	r2, #0
 800e56e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800e570:	2f00      	cmp	r7, #0
 800e572:	d036      	beq.n	800e5e2 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800e574:	2212      	movs	r2, #18
 800e576:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e57a:	692a      	ldr	r2, [r5, #16]
 800e57c:	3201      	adds	r2, #1
 800e57e:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e580:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800e582:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e584:	3201      	adds	r2, #1
 800e586:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800e588:	696a      	ldr	r2, [r5, #20]
 800e58a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800e58e:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800e590:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e592:	b98a      	cbnz	r2, 800e5b8 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e594:	2201      	movs	r2, #1
 800e596:	2102      	movs	r1, #2
 800e598:	4620      	mov	r0, r4
 800e59a:	9600      	str	r6, [sp, #0]
 800e59c:	f7ff ff18 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800e5a0:	b910      	cbnz	r0, 800e5a8 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	2202      	movs	r2, #2
 800e5a6:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e5b4:	b005      	add	sp, #20
 800e5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	4620      	mov	r0, r4
 800e5be:	9600      	str	r6, [sp, #0]
 800e5c0:	9303      	str	r3, [sp, #12]
 800e5c2:	f7ff ff05 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d1ee      	bne.n	800e5a8 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e5ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800e5cc:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800e5ce:	7812      	ldrb	r2, [r2, #0]
 800e5d0:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 800e5d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e5d6:	3201      	adds	r2, #1
 800e5d8:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 800e5da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e5dc:	3a01      	subs	r2, #1
 800e5de:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e5e0:	e7d6      	b.n	800e590 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e5e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e5e4:	f043 0308 	orr.w	r3, r3, #8
 800e5e8:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800e5ea:	e7e0      	b.n	800e5ae <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 800e5ec:	2002      	movs	r0, #2
 800e5ee:	e7de      	b.n	800e5ae <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 800e5f0:	2002      	movs	r0, #2
 800e5f2:	e7df      	b.n	800e5b4 <HAL_QSPI_Transmit+0x72>

0800e5f4 <HAL_QSPI_Receive>:
{
 800e5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5f6:	4604      	mov	r4, r0
 800e5f8:	b085      	sub	sp, #20
 800e5fa:	4616      	mov	r6, r2
 800e5fc:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800e5fe:	f7fe f813 	bl	800c628 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e602:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800e604:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800e606:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800e60a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800e60e:	2a01      	cmp	r2, #1
 800e610:	d04d      	beq.n	800e6ae <HAL_QSPI_Receive+0xba>
 800e612:	2201      	movs	r2, #1
 800e614:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e618:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e61c:	2a01      	cmp	r2, #1
 800e61e:	b2d0      	uxtb	r0, r2
 800e620:	d143      	bne.n	800e6aa <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e622:	2200      	movs	r2, #0
 800e624:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800e626:	2f00      	cmp	r7, #0
 800e628:	d03a      	beq.n	800e6a0 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800e62a:	2222      	movs	r2, #34	; 0x22
 800e62c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800e630:	692a      	ldr	r2, [r5, #16]
 800e632:	3201      	adds	r2, #1
 800e634:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e636:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800e638:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800e63a:	3201      	adds	r2, #1
 800e63c:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800e63e:	6969      	ldr	r1, [r5, #20]
 800e640:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 800e644:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800e648:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800e64a:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800e64e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e650:	b98a      	cbnz	r2, 800e676 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800e652:	2201      	movs	r2, #1
 800e654:	2102      	movs	r1, #2
 800e656:	4620      	mov	r0, r4
 800e658:	9600      	str	r6, [sp, #0]
 800e65a:	f7ff feb9 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800e65e:	b910      	cbnz	r0, 800e666 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	2202      	movs	r2, #2
 800e664:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800e666:	2301      	movs	r3, #1
 800e668:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800e66c:	2300      	movs	r3, #0
 800e66e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e672:	b005      	add	sp, #20
 800e674:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800e676:	2201      	movs	r2, #1
 800e678:	2106      	movs	r1, #6
 800e67a:	4620      	mov	r0, r4
 800e67c:	9600      	str	r6, [sp, #0]
 800e67e:	9303      	str	r3, [sp, #12]
 800e680:	f7ff fea6 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800e684:	2800      	cmp	r0, #0
 800e686:	d1ee      	bne.n	800e666 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e688:	f895 1020 	ldrb.w	r1, [r5, #32]
 800e68c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800e68e:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800e690:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 800e692:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800e694:	3201      	adds	r2, #1
 800e696:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 800e698:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e69a:	3a01      	subs	r2, #1
 800e69c:	63a2      	str	r2, [r4, #56]	; 0x38
 800e69e:	e7d6      	b.n	800e64e <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800e6a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6a2:	f043 0308 	orr.w	r3, r3, #8
 800e6a6:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 800e6a8:	e7e0      	b.n	800e66c <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 800e6aa:	2002      	movs	r0, #2
 800e6ac:	e7de      	b.n	800e66c <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 800e6ae:	2002      	movs	r0, #2
 800e6b0:	e7df      	b.n	800e672 <HAL_QSPI_Receive+0x7e>

0800e6b2 <HAL_QSPI_AutoPolling>:
{
 800e6b2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4615      	mov	r5, r2
 800e6ba:	461e      	mov	r6, r3
 800e6bc:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800e6be:	f7fd ffb3 	bl	800c628 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e6c2:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800e6c6:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800e6c8:	2a01      	cmp	r2, #1
 800e6ca:	d040      	beq.n	800e74e <HAL_QSPI_AutoPolling+0x9c>
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e6d2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e6d6:	2a01      	cmp	r2, #1
 800e6d8:	b2d7      	uxtb	r7, r2
 800e6da:	d136      	bne.n	800e74a <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e6dc:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6de:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e6e0:	9003      	str	r0, [sp, #12]
 800e6e2:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e6e4:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e6e6:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800e6e8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800e6ec:	2120      	movs	r1, #32
 800e6ee:	f7ff fe6f 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e6f2:	bb20      	cbnz	r0, 800e73e <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e6f4:	6821      	ldr	r1, [r4, #0]
 800e6f6:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e6f8:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800e6fa:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800e6fc:	686a      	ldr	r2, [r5, #4]
 800e6fe:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800e700:	68aa      	ldr	r2, [r5, #8]
 800e702:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e704:	680a      	ldr	r2, [r1, #0]
 800e706:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800e70a:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e70c:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800e70e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800e712:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e714:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800e716:	68ea      	ldr	r2, [r5, #12]
 800e718:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800e71c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e720:	f7ff fda6 	bl	800e270 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800e724:	9b03      	ldr	r3, [sp, #12]
 800e726:	463a      	mov	r2, r7
 800e728:	2108      	movs	r1, #8
 800e72a:	4620      	mov	r0, r4
 800e72c:	9600      	str	r6, [sp, #0]
 800e72e:	f7ff fe4f 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800e732:	b920      	cbnz	r0, 800e73e <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800e734:	6823      	ldr	r3, [r4, #0]
 800e736:	2208      	movs	r2, #8
 800e738:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800e73a:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800e73e:	2300      	movs	r3, #0
 800e740:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e744:	b004      	add	sp, #16
 800e746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 800e74a:	2002      	movs	r0, #2
 800e74c:	e7f7      	b.n	800e73e <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 800e74e:	2002      	movs	r0, #2
 800e750:	e7f8      	b.n	800e744 <HAL_QSPI_AutoPolling+0x92>

0800e752 <HAL_QSPI_MemoryMapped>:
{
 800e752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e754:	4604      	mov	r4, r0
 800e756:	4616      	mov	r6, r2
 800e758:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800e75a:	f7fd ff65 	bl	800c628 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800e75e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 800e762:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800e764:	2a01      	cmp	r2, #1
 800e766:	d033      	beq.n	800e7d0 <HAL_QSPI_MemoryMapped+0x7e>
 800e768:	2201      	movs	r2, #1
 800e76a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800e76e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800e772:	2a01      	cmp	r2, #1
 800e774:	d12a      	bne.n	800e7cc <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e776:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e778:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e77a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800e77c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800e77e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800e782:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e784:	9100      	str	r1, [sp, #0]
 800e786:	2120      	movs	r1, #32
 800e788:	f7ff fe22 	bl	800e3d0 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800e78c:	4605      	mov	r5, r0
 800e78e:	b9b8      	cbnz	r0, 800e7c0 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	6872      	ldr	r2, [r6, #4]
 800e794:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e796:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800e798:	f020 0008 	bic.w	r0, r0, #8
 800e79c:	ea40 0002 	orr.w	r0, r0, r2
 800e7a0:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800e7a2:	d107      	bne.n	800e7b4 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800e7a4:	6832      	ldr	r2, [r6, #0]
 800e7a6:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800e7a8:	2210      	movs	r2, #16
 800e7aa:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e7b2:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800e7b4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800e7b8:	4639      	mov	r1, r7
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7ff fd58 	bl	800e270 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	b003      	add	sp, #12
 800e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800e7cc:	2502      	movs	r5, #2
 800e7ce:	e7f7      	b.n	800e7c0 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800e7d0:	2502      	movs	r5, #2
 800e7d2:	e7f8      	b.n	800e7c6 <HAL_QSPI_MemoryMapped+0x74>

0800e7d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	b908      	cbnz	r0, 800e7de <HAL_RCC_OscConfig+0xa>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 800e7da:	2001      	movs	r0, #1
 800e7dc:	e08b      	b.n	800e8f6 <HAL_RCC_OscConfig+0x122>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e7de:	6803      	ldr	r3, [r0, #0]
 800e7e0:	07df      	lsls	r7, r3, #31
 800e7e2:	d45e      	bmi.n	800e8a2 <HAL_RCC_OscConfig+0xce>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	079e      	lsls	r6, r3, #30
 800e7e8:	f100 80af 	bmi.w	800e94a <HAL_RCC_OscConfig+0x176>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	06da      	lsls	r2, r3, #27
 800e7f0:	d527      	bpl.n	800e842 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7f2:	4b9e      	ldr	r3, [pc, #632]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e7f4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e7f6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e7fc:	2a08      	cmp	r2, #8
 800e7fe:	d007      	beq.n	800e810 <HAL_RCC_OscConfig+0x3c>
 800e800:	2a18      	cmp	r2, #24
 800e802:	f040 8107 	bne.w	800ea14 <HAL_RCC_OscConfig+0x240>
 800e806:	f001 0203 	and.w	r2, r1, #3
 800e80a:	2a01      	cmp	r2, #1
 800e80c:	f040 8102 	bne.w	800ea14 <HAL_RCC_OscConfig+0x240>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	05db      	lsls	r3, r3, #23
 800e814:	d502      	bpl.n	800e81c <HAL_RCC_OscConfig+0x48>
 800e816:	69e3      	ldr	r3, [r4, #28]
 800e818:	2b80      	cmp	r3, #128	; 0x80
 800e81a:	d1de      	bne.n	800e7da <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e81c:	f7fd ff1c 	bl	800c658 <HAL_GetREVID>
 800e820:	f241 0303 	movw	r3, #4099	; 0x1003
 800e824:	6a21      	ldr	r1, [r4, #32]
 800e826:	4298      	cmp	r0, r3
 800e828:	4b90      	ldr	r3, [pc, #576]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e82a:	f200 80ec 	bhi.w	800ea06 <HAL_RCC_OscConfig+0x232>
 800e82e:	685a      	ldr	r2, [r3, #4]
 800e830:	2920      	cmp	r1, #32
 800e832:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 800e836:	bf0c      	ite	eq
 800e838:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 800e83c:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800e840:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e842:	6823      	ldr	r3, [r4, #0]
 800e844:	0719      	lsls	r1, r3, #28
 800e846:	f100 8127 	bmi.w	800ea98 <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e84a:	6823      	ldr	r3, [r4, #0]
 800e84c:	069a      	lsls	r2, r3, #26
 800e84e:	f100 8148 	bmi.w	800eae2 <HAL_RCC_OscConfig+0x30e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	075d      	lsls	r5, r3, #29
 800e856:	d51e      	bpl.n	800e896 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 800e858:	4d85      	ldr	r5, [pc, #532]	; (800ea70 <HAL_RCC_OscConfig+0x29c>)
 800e85a:	682b      	ldr	r3, [r5, #0]
 800e85c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e860:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800e862:	f7fd fee1 	bl	800c628 <HAL_GetTick>
 800e866:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	05da      	lsls	r2, r3, #23
 800e86c:	f140 815e 	bpl.w	800eb2c <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e870:	68a3      	ldr	r3, [r4, #8]
 800e872:	4d7e      	ldr	r5, [pc, #504]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e874:	2b01      	cmp	r3, #1
 800e876:	f040 8160 	bne.w	800eb3a <HAL_RCC_OscConfig+0x366>
 800e87a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800e87c:	f043 0301 	orr.w	r3, r3, #1
 800e880:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e882:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800e886:	f7fd fecf 	bl	800c628 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e88a:	4e78      	ldr	r6, [pc, #480]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 800e88c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e88e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800e890:	079b      	lsls	r3, r3, #30
 800e892:	f140 8178 	bpl.w	800eb86 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e896:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e898:	2800      	cmp	r0, #0
 800e89a:	f040 817b 	bne.w	800eb94 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800e89e:	2000      	movs	r0, #0
 800e8a0:	e029      	b.n	800e8f6 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8a2:	4b72      	ldr	r3, [pc, #456]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e8a4:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e8a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e8a8:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e8ac:	2a10      	cmp	r2, #16
 800e8ae:	d005      	beq.n	800e8bc <HAL_RCC_OscConfig+0xe8>
 800e8b0:	2a18      	cmp	r2, #24
 800e8b2:	d10a      	bne.n	800e8ca <HAL_RCC_OscConfig+0xf6>
 800e8b4:	f001 0203 	and.w	r2, r1, #3
 800e8b8:	2a02      	cmp	r2, #2
 800e8ba:	d106      	bne.n	800e8ca <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	039d      	lsls	r5, r3, #14
 800e8c0:	d590      	bpl.n	800e7e4 <HAL_RCC_OscConfig+0x10>
 800e8c2:	6863      	ldr	r3, [r4, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d18d      	bne.n	800e7e4 <HAL_RCC_OscConfig+0x10>
 800e8c8:	e787      	b.n	800e7da <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8ca:	6862      	ldr	r2, [r4, #4]
 800e8cc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800e8d0:	d112      	bne.n	800e8f8 <HAL_RCC_OscConfig+0x124>
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800e8d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e8da:	f7fd fea5 	bl	800c628 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e8de:	4e63      	ldr	r6, [pc, #396]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 800e8e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e8e2:	6833      	ldr	r3, [r6, #0]
 800e8e4:	0398      	lsls	r0, r3, #14
 800e8e6:	f53f af7d 	bmi.w	800e7e4 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e8ea:	f7fd fe9d 	bl	800c628 <HAL_GetTick>
 800e8ee:	1b40      	subs	r0, r0, r5
 800e8f0:	2864      	cmp	r0, #100	; 0x64
 800e8f2:	d9f6      	bls.n	800e8e2 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 800e8f4:	2003      	movs	r0, #3
}
 800e8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8f8:	4d5c      	ldr	r5, [pc, #368]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e8fa:	682b      	ldr	r3, [r5, #0]
 800e8fc:	b99a      	cbnz	r2, 800e926 <HAL_RCC_OscConfig+0x152>
 800e8fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e902:	602b      	str	r3, [r5, #0]
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e90a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800e90c:	f7fd fe8c 	bl	800c628 <HAL_GetTick>
 800e910:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e912:	682b      	ldr	r3, [r5, #0]
 800e914:	0399      	lsls	r1, r3, #14
 800e916:	f57f af65 	bpl.w	800e7e4 <HAL_RCC_OscConfig+0x10>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e91a:	f7fd fe85 	bl	800c628 <HAL_GetTick>
 800e91e:	1b80      	subs	r0, r0, r6
 800e920:	2864      	cmp	r0, #100	; 0x64
 800e922:	d9f6      	bls.n	800e912 <HAL_RCC_OscConfig+0x13e>
 800e924:	e7e6      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e926:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800e92a:	d107      	bne.n	800e93c <HAL_RCC_OscConfig+0x168>
 800e92c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e930:	602b      	str	r3, [r5, #0]
 800e932:	682b      	ldr	r3, [r5, #0]
 800e934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e938:	602b      	str	r3, [r5, #0]
 800e93a:	e7ce      	b.n	800e8da <HAL_RCC_OscConfig+0x106>
 800e93c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	682b      	ldr	r3, [r5, #0]
 800e944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e948:	e7f6      	b.n	800e938 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e94a:	4b48      	ldr	r3, [pc, #288]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e94c:	68e1      	ldr	r1, [r4, #12]
 800e94e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e950:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e952:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 800e956:	d003      	beq.n	800e960 <HAL_RCC_OscConfig+0x18c>
 800e958:	2a18      	cmp	r2, #24
 800e95a:	d12b      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x1e0>
 800e95c:	0782      	lsls	r2, r0, #30
 800e95e:	d129      	bne.n	800e9b4 <HAL_RCC_OscConfig+0x1e0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	075b      	lsls	r3, r3, #29
 800e964:	d502      	bpl.n	800e96c <HAL_RCC_OscConfig+0x198>
 800e966:	2900      	cmp	r1, #0
 800e968:	f43f af37 	beq.w	800e7da <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e96c:	4d3f      	ldr	r5, [pc, #252]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
 800e96e:	682a      	ldr	r2, [r5, #0]
 800e970:	f022 0219 	bic.w	r2, r2, #25
 800e974:	430a      	orrs	r2, r1
 800e976:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800e978:	f7fd fe56 	bl	800c628 <HAL_GetTick>
 800e97c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e97e:	682b      	ldr	r3, [r5, #0]
 800e980:	075f      	lsls	r7, r3, #29
 800e982:	d511      	bpl.n	800e9a8 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e984:	f7fd fe68 	bl	800c658 <HAL_GetREVID>
 800e988:	f241 0303 	movw	r3, #4099	; 0x1003
 800e98c:	6922      	ldr	r2, [r4, #16]
 800e98e:	4298      	cmp	r0, r3
 800e990:	686b      	ldr	r3, [r5, #4]
 800e992:	d822      	bhi.n	800e9da <HAL_RCC_OscConfig+0x206>
 800e994:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800e998:	2a40      	cmp	r2, #64	; 0x40
 800e99a:	bf0c      	ite	eq
 800e99c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800e9a0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800e9a4:	606b      	str	r3, [r5, #4]
 800e9a6:	e721      	b.n	800e7ec <HAL_RCC_OscConfig+0x18>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e9a8:	f7fd fe3e 	bl	800c628 <HAL_GetTick>
 800e9ac:	1b80      	subs	r0, r0, r6
 800e9ae:	2802      	cmp	r0, #2
 800e9b0:	d9e5      	bls.n	800e97e <HAL_RCC_OscConfig+0x1aa>
 800e9b2:	e79f      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e9b4:	681a      	ldr	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e9b6:	b1a9      	cbz	r1, 800e9e4 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e9b8:	f022 0219 	bic.w	r2, r2, #25
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9bc:	4d2b      	ldr	r5, [pc, #172]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e9be:	430a      	orrs	r2, r1
 800e9c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e9c2:	f7fd fe31 	bl	800c628 <HAL_GetTick>
 800e9c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e9c8:	682b      	ldr	r3, [r5, #0]
 800e9ca:	0758      	lsls	r0, r3, #29
 800e9cc:	d4da      	bmi.n	800e984 <HAL_RCC_OscConfig+0x1b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e9ce:	f7fd fe2b 	bl	800c628 <HAL_GetTick>
 800e9d2:	1b80      	subs	r0, r0, r6
 800e9d4:	2802      	cmp	r0, #2
 800e9d6:	d9f7      	bls.n	800e9c8 <HAL_RCC_OscConfig+0x1f4>
 800e9d8:	e78c      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e9da:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800e9de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e9e2:	e7df      	b.n	800e9a4 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 800e9e4:	f022 0201 	bic.w	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e9e8:	4e20      	ldr	r6, [pc, #128]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800e9ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800e9ec:	f7fd fe1c 	bl	800c628 <HAL_GetTick>
 800e9f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e9f2:	6833      	ldr	r3, [r6, #0]
 800e9f4:	0759      	lsls	r1, r3, #29
 800e9f6:	f57f aef9 	bpl.w	800e7ec <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e9fa:	f7fd fe15 	bl	800c628 <HAL_GetTick>
 800e9fe:	1b40      	subs	r0, r0, r5
 800ea00:	2802      	cmp	r0, #2
 800ea02:	d9f6      	bls.n	800e9f2 <HAL_RCC_OscConfig+0x21e>
 800ea04:	e776      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ea06:	68da      	ldr	r2, [r3, #12]
 800ea08:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 800ea0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ea10:	60da      	str	r2, [r3, #12]
 800ea12:	e716      	b.n	800e842 <HAL_RCC_OscConfig+0x6e>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ea14:	69e2      	ldr	r2, [r4, #28]
 800ea16:	b36a      	cbz	r2, 800ea74 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 800ea18:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ea1a:	4d14      	ldr	r5, [pc, #80]	; (800ea6c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 800ea1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ea20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ea22:	f7fd fe01 	bl	800c628 <HAL_GetTick>
 800ea26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ea28:	682b      	ldr	r3, [r5, #0]
 800ea2a:	05df      	lsls	r7, r3, #23
 800ea2c:	d511      	bpl.n	800ea52 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ea2e:	f7fd fe13 	bl	800c658 <HAL_GetREVID>
 800ea32:	f241 0303 	movw	r3, #4099	; 0x1003
 800ea36:	6a22      	ldr	r2, [r4, #32]
 800ea38:	4298      	cmp	r0, r3
 800ea3a:	d810      	bhi.n	800ea5e <HAL_RCC_OscConfig+0x28a>
 800ea3c:	686b      	ldr	r3, [r5, #4]
 800ea3e:	2a20      	cmp	r2, #32
 800ea40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ea44:	bf0c      	ite	eq
 800ea46:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800ea4a:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800ea4e:	606b      	str	r3, [r5, #4]
 800ea50:	e6f7      	b.n	800e842 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ea52:	f7fd fde9 	bl	800c628 <HAL_GetTick>
 800ea56:	1b80      	subs	r0, r0, r6
 800ea58:	2802      	cmp	r0, #2
 800ea5a:	d9e5      	bls.n	800ea28 <HAL_RCC_OscConfig+0x254>
 800ea5c:	e74a      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ea5e:	68eb      	ldr	r3, [r5, #12]
 800ea60:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800ea64:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ea68:	60eb      	str	r3, [r5, #12]
 800ea6a:	e6ea      	b.n	800e842 <HAL_RCC_OscConfig+0x6e>
 800ea6c:	58024400 	.word	0x58024400
 800ea70:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800ea74:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea76:	4e88      	ldr	r6, [pc, #544]	; (800ec98 <HAL_RCC_OscConfig+0x4c4>)
        __HAL_RCC_CSI_DISABLE();
 800ea78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ea7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ea7e:	f7fd fdd3 	bl	800c628 <HAL_GetTick>
 800ea82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ea84:	6833      	ldr	r3, [r6, #0]
 800ea86:	05d8      	lsls	r0, r3, #23
 800ea88:	f57f aedb 	bpl.w	800e842 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ea8c:	f7fd fdcc 	bl	800c628 <HAL_GetTick>
 800ea90:	1b40      	subs	r0, r0, r5
 800ea92:	2802      	cmp	r0, #2
 800ea94:	d9f6      	bls.n	800ea84 <HAL_RCC_OscConfig+0x2b0>
 800ea96:	e72d      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ea98:	6963      	ldr	r3, [r4, #20]
 800ea9a:	4d7f      	ldr	r5, [pc, #508]	; (800ec98 <HAL_RCC_OscConfig+0x4c4>)
 800ea9c:	b183      	cbz	r3, 800eac0 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800ea9e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800eaa0:	f043 0301 	orr.w	r3, r3, #1
 800eaa4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800eaa6:	f7fd fdbf 	bl	800c628 <HAL_GetTick>
 800eaaa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eaac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800eaae:	079b      	lsls	r3, r3, #30
 800eab0:	f53f aecb 	bmi.w	800e84a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eab4:	f7fd fdb8 	bl	800c628 <HAL_GetTick>
 800eab8:	1b80      	subs	r0, r0, r6
 800eaba:	2802      	cmp	r0, #2
 800eabc:	d9f6      	bls.n	800eaac <HAL_RCC_OscConfig+0x2d8>
 800eabe:	e719      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 800eac0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800eac2:	f023 0301 	bic.w	r3, r3, #1
 800eac6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800eac8:	f7fd fdae 	bl	800c628 <HAL_GetTick>
 800eacc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eace:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800ead0:	079f      	lsls	r7, r3, #30
 800ead2:	f57f aeba 	bpl.w	800e84a <HAL_RCC_OscConfig+0x76>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ead6:	f7fd fda7 	bl	800c628 <HAL_GetTick>
 800eada:	1b80      	subs	r0, r0, r6
 800eadc:	2802      	cmp	r0, #2
 800eade:	d9f6      	bls.n	800eace <HAL_RCC_OscConfig+0x2fa>
 800eae0:	e708      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800eae2:	69a3      	ldr	r3, [r4, #24]
 800eae4:	4d6c      	ldr	r5, [pc, #432]	; (800ec98 <HAL_RCC_OscConfig+0x4c4>)
 800eae6:	b183      	cbz	r3, 800eb0a <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eaee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800eaf0:	f7fd fd9a 	bl	800c628 <HAL_GetTick>
 800eaf4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	0498      	lsls	r0, r3, #18
 800eafa:	f53f aeaa 	bmi.w	800e852 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eafe:	f7fd fd93 	bl	800c628 <HAL_GetTick>
 800eb02:	1b80      	subs	r0, r0, r6
 800eb04:	2802      	cmp	r0, #2
 800eb06:	d9f6      	bls.n	800eaf6 <HAL_RCC_OscConfig+0x322>
 800eb08:	e6f4      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 800eb0a:	682b      	ldr	r3, [r5, #0]
 800eb0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb10:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800eb12:	f7fd fd89 	bl	800c628 <HAL_GetTick>
 800eb16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eb18:	682b      	ldr	r3, [r5, #0]
 800eb1a:	0499      	lsls	r1, r3, #18
 800eb1c:	f57f ae99 	bpl.w	800e852 <HAL_RCC_OscConfig+0x7e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eb20:	f7fd fd82 	bl	800c628 <HAL_GetTick>
 800eb24:	1b80      	subs	r0, r0, r6
 800eb26:	2802      	cmp	r0, #2
 800eb28:	d9f6      	bls.n	800eb18 <HAL_RCC_OscConfig+0x344>
 800eb2a:	e6e3      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eb2c:	f7fd fd7c 	bl	800c628 <HAL_GetTick>
 800eb30:	1b80      	subs	r0, r0, r6
 800eb32:	2864      	cmp	r0, #100	; 0x64
 800eb34:	f67f ae98 	bls.w	800e868 <HAL_RCC_OscConfig+0x94>
 800eb38:	e6dc      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb3a:	b9b3      	cbnz	r3, 800eb6a <HAL_RCC_OscConfig+0x396>
 800eb3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb3e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb42:	f023 0301 	bic.w	r3, r3, #1
 800eb46:	672b      	str	r3, [r5, #112]	; 0x70
 800eb48:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eb4a:	f023 0304 	bic.w	r3, r3, #4
 800eb4e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800eb50:	f7fd fd6a 	bl	800c628 <HAL_GetTick>
 800eb54:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eb56:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eb58:	0798      	lsls	r0, r3, #30
 800eb5a:	f57f ae9c 	bpl.w	800e896 <HAL_RCC_OscConfig+0xc2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb5e:	f7fd fd63 	bl	800c628 <HAL_GetTick>
 800eb62:	1b80      	subs	r0, r0, r6
 800eb64:	42b8      	cmp	r0, r7
 800eb66:	d9f6      	bls.n	800eb56 <HAL_RCC_OscConfig+0x382>
 800eb68:	e6c4      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb6a:	2b05      	cmp	r3, #5
 800eb6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eb6e:	d103      	bne.n	800eb78 <HAL_RCC_OscConfig+0x3a4>
 800eb70:	f043 0304 	orr.w	r3, r3, #4
 800eb74:	672b      	str	r3, [r5, #112]	; 0x70
 800eb76:	e680      	b.n	800e87a <HAL_RCC_OscConfig+0xa6>
 800eb78:	f023 0301 	bic.w	r3, r3, #1
 800eb7c:	672b      	str	r3, [r5, #112]	; 0x70
 800eb7e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800eb80:	f023 0304 	bic.w	r3, r3, #4
 800eb84:	e67c      	b.n	800e880 <HAL_RCC_OscConfig+0xac>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eb86:	f7fd fd4f 	bl	800c628 <HAL_GetTick>
 800eb8a:	1b40      	subs	r0, r0, r5
 800eb8c:	42b8      	cmp	r0, r7
 800eb8e:	f67f ae7e 	bls.w	800e88e <HAL_RCC_OscConfig+0xba>
 800eb92:	e6af      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800eb94:	4d40      	ldr	r5, [pc, #256]	; (800ec98 <HAL_RCC_OscConfig+0x4c4>)
 800eb96:	692b      	ldr	r3, [r5, #16]
 800eb98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb9c:	2b18      	cmp	r3, #24
 800eb9e:	d07d      	beq.n	800ec9c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800eba0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800eba2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800eba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800eba8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ebaa:	d167      	bne.n	800ec7c <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800ebac:	f7fd fd3c 	bl	800c628 <HAL_GetTick>
 800ebb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ebb2:	682b      	ldr	r3, [r5, #0]
 800ebb4:	0199      	lsls	r1, r3, #6
 800ebb6:	d45b      	bmi.n	800ec70 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ebb8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ebba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ebbc:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 800ebc0:	f023 0303 	bic.w	r3, r3, #3
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ebc8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800ebcc:	62ab      	str	r3, [r5, #40]	; 0x28
 800ebce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebd0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	3a01      	subs	r2, #1
 800ebd6:	025b      	lsls	r3, r3, #9
 800ebd8:	0412      	lsls	r2, r2, #16
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ebe4:	3a01      	subs	r2, #1
 800ebe6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebea:	4313      	orrs	r3, r2
 800ebec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ebee:	3a01      	subs	r2, #1
 800ebf0:	0612      	lsls	r2, r2, #24
 800ebf2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800ebfa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ebfc:	f023 0301 	bic.w	r3, r3, #1
 800ec00:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ec02:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ec04:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ec06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec0a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ec0e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ec12:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ec14:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ec18:	f023 030c 	bic.w	r3, r3, #12
 800ec1c:	4313      	orrs	r3, r2
 800ec1e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ec20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ec24:	f023 0302 	bic.w	r3, r3, #2
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ec2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec32:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec3a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ec3c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ec42:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800ec44:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ec46:	f043 0301 	orr.w	r3, r3, #1
 800ec4a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ec52:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800ec54:	f7fd fce8 	bl	800c628 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ec58:	4d0f      	ldr	r5, [pc, #60]	; (800ec98 <HAL_RCC_OscConfig+0x4c4>)
        tickstart = HAL_GetTick();
 800ec5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	019a      	lsls	r2, r3, #6
 800ec60:	f53f ae1d 	bmi.w	800e89e <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec64:	f7fd fce0 	bl	800c628 <HAL_GetTick>
 800ec68:	1b00      	subs	r0, r0, r4
 800ec6a:	2802      	cmp	r0, #2
 800ec6c:	d9f6      	bls.n	800ec5c <HAL_RCC_OscConfig+0x488>
 800ec6e:	e641      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec70:	f7fd fcda 	bl	800c628 <HAL_GetTick>
 800ec74:	1b80      	subs	r0, r0, r6
 800ec76:	2802      	cmp	r0, #2
 800ec78:	d99b      	bls.n	800ebb2 <HAL_RCC_OscConfig+0x3de>
 800ec7a:	e63b      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800ec7c:	f7fd fcd4 	bl	800c628 <HAL_GetTick>
 800ec80:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec82:	682b      	ldr	r3, [r5, #0]
 800ec84:	019b      	lsls	r3, r3, #6
 800ec86:	f57f ae0a 	bpl.w	800e89e <HAL_RCC_OscConfig+0xca>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ec8a:	f7fd fccd 	bl	800c628 <HAL_GetTick>
 800ec8e:	1b00      	subs	r0, r0, r4
 800ec90:	2802      	cmp	r0, #2
 800ec92:	d9f6      	bls.n	800ec82 <HAL_RCC_OscConfig+0x4ae>
 800ec94:	e62e      	b.n	800e8f4 <HAL_RCC_OscConfig+0x120>
 800ec96:	bf00      	nop
 800ec98:	58024400 	.word	0x58024400
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ec9c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ec9e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800eca0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eca2:	f43f ae28 	beq.w	800e8f6 <HAL_RCC_OscConfig+0x122>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eca6:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ecaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ecac:	4281      	cmp	r1, r0
 800ecae:	f47f ad94 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ecb2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ecb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ecb8:	428a      	cmp	r2, r1
 800ecba:	f47f ad8e 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ecbe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ecc0:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800ecc4:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ecc6:	4291      	cmp	r1, r2
 800ecc8:	f47f ad87 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800eccc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ecce:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800ecd2:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ecd4:	4291      	cmp	r1, r2
 800ecd6:	f47f ad80 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ecda:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ecdc:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800ece0:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ece2:	4291      	cmp	r1, r2
 800ece4:	f47f ad79 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ece8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ecea:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800ecee:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	f47f ad72 	bne.w	800e7da <HAL_RCC_OscConfig+0x6>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ecf6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ecf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ecfa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	f43f adcd 	beq.w	800e89e <HAL_RCC_OscConfig+0xca>
          __HAL_RCC_PLLFRACN_DISABLE();
 800ed04:	4d0c      	ldr	r5, [pc, #48]	; (800ed38 <HAL_RCC_OscConfig+0x564>)
 800ed06:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ed08:	f023 0301 	bic.w	r3, r3, #1
 800ed0c:	62eb      	str	r3, [r5, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800ed0e:	f7fd fc8b 	bl	800c628 <HAL_GetTick>
 800ed12:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ed14:	f7fd fc88 	bl	800c628 <HAL_GetTick>
 800ed18:	42b0      	cmp	r0, r6
 800ed1a:	d0fb      	beq.n	800ed14 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ed1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ed1e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800ed20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ed24:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ed28:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ed2c:	636b      	str	r3, [r5, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800ed2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ed30:	f043 0301 	orr.w	r3, r3, #1
 800ed34:	62eb      	str	r3, [r5, #44]	; 0x2c
 800ed36:	e5b2      	b.n	800e89e <HAL_RCC_OscConfig+0xca>
 800ed38:	58024400 	.word	0x58024400

0800ed3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800ed3c:	b570      	push	{r4, r5, r6, lr}
 800ed3e:	4c23      	ldr	r4, [pc, #140]	; (800edcc <HAL_RCC_MCOConfig+0x90>)
 800ed40:	b088      	sub	sp, #32
 800ed42:	460e      	mov	r6, r1
 800ed44:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800ed46:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800ed4a:	b9f8      	cbnz	r0, 800ed8c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800ed4c:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed50:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ed54:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800ed56:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800ed5a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800ed5e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800ed60:	f003 0301 	and.w	r3, r3, #1
 800ed64:	9301      	str	r3, [sp, #4]
 800ed66:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed6e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed70:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800ed74:	4816      	ldr	r0, [pc, #88]	; (800edd0 <HAL_RCC_MCOConfig+0x94>)
 800ed76:	f7fe fa9d 	bl	800d2b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800ed80:	ea43 0106 	orr.w	r1, r3, r6
 800ed84:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800ed86:	6121      	str	r1, [r4, #16]
  }
}
 800ed88:	b008      	add	sp, #32
 800ed8a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800ed8c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed90:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed94:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800ed96:	480f      	ldr	r0, [pc, #60]	; (800edd4 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800ed98:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800ed9c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800eda0:	f003 0304 	and.w	r3, r3, #4
 800eda4:	9302      	str	r3, [sp, #8]
 800eda6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eda8:	2302      	movs	r3, #2
 800edaa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800edb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800edb6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800edb8:	f7fe fa7c 	bl	800d2b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800edbc:	6923      	ldr	r3, [r4, #16]
 800edbe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800edc2:	ea43 0106 	orr.w	r1, r3, r6
 800edc6:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800edca:	e7dc      	b.n	800ed86 <HAL_RCC_MCOConfig+0x4a>
 800edcc:	58024400 	.word	0x58024400
 800edd0:	58020000 	.word	0x58020000
 800edd4:	58020800 	.word	0x58020800

0800edd8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800edd8:	4b48      	ldr	r3, [pc, #288]	; (800eefc <HAL_RCC_GetSysClockFreq+0x124>)
 800edda:	691a      	ldr	r2, [r3, #16]
 800eddc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800ede0:	2a10      	cmp	r2, #16
{
 800ede2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ede4:	f000 8086 	beq.w	800eef4 <HAL_RCC_GetSysClockFreq+0x11c>
 800ede8:	2a18      	cmp	r2, #24
 800edea:	d00c      	beq.n	800ee06 <HAL_RCC_GetSysClockFreq+0x2e>
 800edec:	2a00      	cmp	r2, #0
 800edee:	f040 8083 	bne.w	800eef8 <HAL_RCC_GetSysClockFreq+0x120>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	4842      	ldr	r0, [pc, #264]	; (800ef00 <HAL_RCC_GetSysClockFreq+0x128>)
 800edf6:	f012 0f20 	tst.w	r2, #32
 800edfa:	d003      	beq.n	800ee04 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800ee02:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800ee04:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee06:	6a99      	ldr	r1, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ee08:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ee0a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
      if (pllm != 0U)
 800ee0c:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ee10:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      if (pllm != 0U)
 800ee16:	d0f5      	beq.n	800ee04 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee18:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ee1c:	f004 0401 	and.w	r4, r4, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee20:	ee07 0a90 	vmov	s15, r0
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ee24:	f001 0103 	and.w	r1, r1, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee28:	4362      	muls	r2, r4
 800ee2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee2e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee32:	2901      	cmp	r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ee34:	ee07 2a90 	vmov	s15, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee38:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800ee3c:	d04c      	beq.n	800eed8 <HAL_RCC_GetSysClockFreq+0x100>
 800ee3e:	2902      	cmp	r1, #2
 800ee40:	d03c      	beq.n	800eebc <HAL_RCC_GetSysClockFreq+0xe4>
 800ee42:	2900      	cmp	r1, #0
 800ee44:	d148      	bne.n	800eed8 <HAL_RCC_GetSysClockFreq+0x100>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	0692      	lsls	r2, r2, #26
 800ee4a:	d527      	bpl.n	800ee9c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee4c:	6819      	ldr	r1, [r3, #0]
 800ee4e:	4a2c      	ldr	r2, [pc, #176]	; (800ef00 <HAL_RCC_GetSysClockFreq+0x128>)
 800ee50:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee56:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee5c:	ee07 2a10 	vmov	s14, r2
 800ee60:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800ee64:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 800ee68:	ee06 3a90 	vmov	s13, r3
 800ee6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ee70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ee74:	ee77 7a86 	vadd.f32	s15, s15, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ee78:	4b20      	ldr	r3, [pc, #128]	; (800eefc <HAL_RCC_GetSysClockFreq+0x124>)
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee7a:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ee7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee80:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800ee84:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ee86:	ee07 3a10 	vmov	s14, r3
 800ee8a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800ee8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ee92:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800ee96:	ee17 0a90 	vmov	r0, s15
 800ee9a:	e7b3      	b.n	800ee04 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ee9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea2:	ee07 3a10 	vmov	s14, r3
 800eea6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eeaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eeae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800eeb2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 800ef04 <HAL_RCC_GetSysClockFreq+0x12c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eeb6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800eeba:	e7dd      	b.n	800ee78 <HAL_RCC_GetSysClockFreq+0xa0>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec2:	ee07 3a10 	vmov	s14, r3
 800eec6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eeca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eece:	ee77 7a86 	vadd.f32	s15, s15, s12
 800eed2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 800ef08 <HAL_RCC_GetSysClockFreq+0x130>
 800eed6:	e7ee      	b.n	800eeb6 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800eed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eede:	ee07 3a10 	vmov	s14, r3
 800eee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eeea:	ee77 7a86 	vadd.f32	s15, s15, s12
 800eeee:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800ef0c <HAL_RCC_GetSysClockFreq+0x134>
 800eef2:	e7e0      	b.n	800eeb6 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800eef4:	4806      	ldr	r0, [pc, #24]	; (800ef10 <HAL_RCC_GetSysClockFreq+0x138>)
 800eef6:	e785      	b.n	800ee04 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800eef8:	4806      	ldr	r0, [pc, #24]	; (800ef14 <HAL_RCC_GetSysClockFreq+0x13c>)
 800eefa:	e783      	b.n	800ee04 <HAL_RCC_GetSysClockFreq+0x2c>
 800eefc:	58024400 	.word	0x58024400
 800ef00:	03d09000 	.word	0x03d09000
 800ef04:	4c742400 	.word	0x4c742400
 800ef08:	4bbebc20 	.word	0x4bbebc20
 800ef0c:	4a742400 	.word	0x4a742400
 800ef10:	017d7840 	.word	0x017d7840
 800ef14:	003d0900 	.word	0x003d0900

0800ef18 <HAL_RCC_ClockConfig>:
{
 800ef18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800ef1e:	4604      	mov	r4, r0
 800ef20:	b910      	cbnz	r0, 800ef28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800ef22:	2001      	movs	r0, #1
}
 800ef24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ef28:	4a88      	ldr	r2, [pc, #544]	; (800f14c <HAL_RCC_ClockConfig+0x234>)
 800ef2a:	6813      	ldr	r3, [r2, #0]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	428b      	cmp	r3, r1
 800ef32:	f0c0 8093 	bcc.w	800f05c <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	075f      	lsls	r7, r3, #29
 800ef3a:	f100 809b 	bmi.w	800f074 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef3e:	071e      	lsls	r6, r3, #28
 800ef40:	d50b      	bpl.n	800ef5a <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ef42:	4983      	ldr	r1, [pc, #524]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800ef44:	6966      	ldr	r6, [r4, #20]
 800ef46:	69c8      	ldr	r0, [r1, #28]
 800ef48:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800ef4c:	4286      	cmp	r6, r0
 800ef4e:	d904      	bls.n	800ef5a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ef50:	69ca      	ldr	r2, [r1, #28]
 800ef52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ef56:	4332      	orrs	r2, r6
 800ef58:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef5a:	06d8      	lsls	r0, r3, #27
 800ef5c:	d50b      	bpl.n	800ef76 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ef5e:	497c      	ldr	r1, [pc, #496]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800ef60:	69a6      	ldr	r6, [r4, #24]
 800ef62:	69c8      	ldr	r0, [r1, #28]
 800ef64:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800ef68:	4286      	cmp	r6, r0
 800ef6a:	d904      	bls.n	800ef76 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ef6c:	69ca      	ldr	r2, [r1, #28]
 800ef6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ef72:	4332      	orrs	r2, r6
 800ef74:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ef76:	0699      	lsls	r1, r3, #26
 800ef78:	d50b      	bpl.n	800ef92 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ef7a:	4975      	ldr	r1, [pc, #468]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800ef7c:	69e6      	ldr	r6, [r4, #28]
 800ef7e:	6a08      	ldr	r0, [r1, #32]
 800ef80:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800ef84:	4286      	cmp	r6, r0
 800ef86:	d904      	bls.n	800ef92 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ef88:	6a0a      	ldr	r2, [r1, #32]
 800ef8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800ef8e:	4332      	orrs	r2, r6
 800ef90:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef92:	079a      	lsls	r2, r3, #30
 800ef94:	d50b      	bpl.n	800efae <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ef96:	496e      	ldr	r1, [pc, #440]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800ef98:	68e6      	ldr	r6, [r4, #12]
 800ef9a:	6988      	ldr	r0, [r1, #24]
 800ef9c:	f000 000f 	and.w	r0, r0, #15
 800efa0:	4286      	cmp	r6, r0
 800efa2:	d904      	bls.n	800efae <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800efa4:	698a      	ldr	r2, [r1, #24]
 800efa6:	f022 020f 	bic.w	r2, r2, #15
 800efaa:	4332      	orrs	r2, r6
 800efac:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800efae:	07df      	lsls	r7, r3, #31
 800efb0:	d46e      	bmi.n	800f090 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efb2:	6823      	ldr	r3, [r4, #0]
 800efb4:	079e      	lsls	r6, r3, #30
 800efb6:	f100 80a1 	bmi.w	800f0fc <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800efba:	4964      	ldr	r1, [pc, #400]	; (800f14c <HAL_RCC_ClockConfig+0x234>)
 800efbc:	680a      	ldr	r2, [r1, #0]
 800efbe:	f002 020f 	and.w	r2, r2, #15
 800efc2:	42aa      	cmp	r2, r5
 800efc4:	f200 80a8 	bhi.w	800f118 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800efc8:	0758      	lsls	r0, r3, #29
 800efca:	f100 80b1 	bmi.w	800f130 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800efce:	0719      	lsls	r1, r3, #28
 800efd0:	d50b      	bpl.n	800efea <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800efd2:	495f      	ldr	r1, [pc, #380]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800efd4:	6965      	ldr	r5, [r4, #20]
 800efd6:	69c8      	ldr	r0, [r1, #28]
 800efd8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800efdc:	4285      	cmp	r5, r0
 800efde:	d204      	bcs.n	800efea <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800efe0:	69ca      	ldr	r2, [r1, #28]
 800efe2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800efe6:	432a      	orrs	r2, r5
 800efe8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800efea:	06da      	lsls	r2, r3, #27
 800efec:	d50b      	bpl.n	800f006 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800efee:	4958      	ldr	r1, [pc, #352]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800eff0:	69a5      	ldr	r5, [r4, #24]
 800eff2:	69c8      	ldr	r0, [r1, #28]
 800eff4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800eff8:	4285      	cmp	r5, r0
 800effa:	d204      	bcs.n	800f006 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800effc:	69ca      	ldr	r2, [r1, #28]
 800effe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f002:	432a      	orrs	r2, r5
 800f004:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f006:	069b      	lsls	r3, r3, #26
 800f008:	d50b      	bpl.n	800f022 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f00a:	4a51      	ldr	r2, [pc, #324]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f00c:	69e0      	ldr	r0, [r4, #28]
 800f00e:	6a11      	ldr	r1, [r2, #32]
 800f010:	f001 0170 	and.w	r1, r1, #112	; 0x70
 800f014:	4288      	cmp	r0, r1
 800f016:	d204      	bcs.n	800f022 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f018:	6a13      	ldr	r3, [r2, #32]
 800f01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f01e:	4303      	orrs	r3, r0
 800f020:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f022:	f7ff fed9 	bl	800edd8 <HAL_RCC_GetSysClockFreq>
 800f026:	494a      	ldr	r1, [pc, #296]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f028:	4a4a      	ldr	r2, [pc, #296]	; (800f154 <HAL_RCC_ClockConfig+0x23c>)
 800f02a:	698b      	ldr	r3, [r1, #24]
 800f02c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800f030:	5cd3      	ldrb	r3, [r2, r3]
 800f032:	f003 031f 	and.w	r3, r3, #31
 800f036:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f038:	698b      	ldr	r3, [r1, #24]
 800f03a:	f003 030f 	and.w	r3, r3, #15
 800f03e:	5cd3      	ldrb	r3, [r2, r3]
 800f040:	4a45      	ldr	r2, [pc, #276]	; (800f158 <HAL_RCC_ClockConfig+0x240>)
 800f042:	f003 031f 	and.w	r3, r3, #31
 800f046:	fa20 f303 	lsr.w	r3, r0, r3
 800f04a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800f04c:	4b43      	ldr	r3, [pc, #268]	; (800f15c <HAL_RCC_ClockConfig+0x244>)
 800f04e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800f050:	4b43      	ldr	r3, [pc, #268]	; (800f160 <HAL_RCC_ClockConfig+0x248>)
}
 800f052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800f056:	6818      	ldr	r0, [r3, #0]
 800f058:	f7f2 b9ca 	b.w	80013f0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f05c:	6813      	ldr	r3, [r2, #0]
 800f05e:	f023 030f 	bic.w	r3, r3, #15
 800f062:	430b      	orrs	r3, r1
 800f064:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f066:	6813      	ldr	r3, [r2, #0]
 800f068:	f003 030f 	and.w	r3, r3, #15
 800f06c:	428b      	cmp	r3, r1
 800f06e:	f47f af58 	bne.w	800ef22 <HAL_RCC_ClockConfig+0xa>
 800f072:	e760      	b.n	800ef36 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f074:	4936      	ldr	r1, [pc, #216]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f076:	6926      	ldr	r6, [r4, #16]
 800f078:	6988      	ldr	r0, [r1, #24]
 800f07a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800f07e:	4286      	cmp	r6, r0
 800f080:	f67f af5d 	bls.w	800ef3e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f084:	698a      	ldr	r2, [r1, #24]
 800f086:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f08a:	4332      	orrs	r2, r6
 800f08c:	618a      	str	r2, [r1, #24]
 800f08e:	e756      	b.n	800ef3e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f090:	4b2f      	ldr	r3, [pc, #188]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f092:	68a1      	ldr	r1, [r4, #8]
 800f094:	699a      	ldr	r2, [r3, #24]
 800f096:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800f09a:	430a      	orrs	r2, r1
 800f09c:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f09e:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0a0:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f0a2:	2a02      	cmp	r2, #2
 800f0a4:	d11d      	bne.n	800f0e2 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f0a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f0aa:	f43f af3a 	beq.w	800ef22 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f0ae:	4e28      	ldr	r6, [pc, #160]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0b0:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f0b4:	6933      	ldr	r3, [r6, #16]
 800f0b6:	f023 0307 	bic.w	r3, r3, #7
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800f0be:	f7fd fab3 	bl	800c628 <HAL_GetTick>
 800f0c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f0c4:	6933      	ldr	r3, [r6, #16]
 800f0c6:	6862      	ldr	r2, [r4, #4]
 800f0c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f0cc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800f0d0:	f43f af6f 	beq.w	800efb2 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0d4:	f7fd faa8 	bl	800c628 <HAL_GetTick>
 800f0d8:	1bc0      	subs	r0, r0, r7
 800f0da:	4540      	cmp	r0, r8
 800f0dc:	d9f2      	bls.n	800f0c4 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800f0de:	2003      	movs	r0, #3
 800f0e0:	e720      	b.n	800ef24 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f0e2:	2a03      	cmp	r2, #3
 800f0e4:	d102      	bne.n	800f0ec <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f0e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800f0ea:	e7de      	b.n	800f0aa <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f0ec:	2a01      	cmp	r2, #1
 800f0ee:	d102      	bne.n	800f0f6 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f0f0:	f413 7f80 	tst.w	r3, #256	; 0x100
 800f0f4:	e7d9      	b.n	800f0aa <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f0f6:	f013 0f04 	tst.w	r3, #4
 800f0fa:	e7d6      	b.n	800f0aa <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f0fc:	4914      	ldr	r1, [pc, #80]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f0fe:	68e6      	ldr	r6, [r4, #12]
 800f100:	6988      	ldr	r0, [r1, #24]
 800f102:	f000 000f 	and.w	r0, r0, #15
 800f106:	4286      	cmp	r6, r0
 800f108:	f4bf af57 	bcs.w	800efba <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f10c:	698a      	ldr	r2, [r1, #24]
 800f10e:	f022 020f 	bic.w	r2, r2, #15
 800f112:	4332      	orrs	r2, r6
 800f114:	618a      	str	r2, [r1, #24]
 800f116:	e750      	b.n	800efba <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f118:	680a      	ldr	r2, [r1, #0]
 800f11a:	f022 020f 	bic.w	r2, r2, #15
 800f11e:	432a      	orrs	r2, r5
 800f120:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f122:	680a      	ldr	r2, [r1, #0]
 800f124:	f002 020f 	and.w	r2, r2, #15
 800f128:	42aa      	cmp	r2, r5
 800f12a:	f47f aefa 	bne.w	800ef22 <HAL_RCC_ClockConfig+0xa>
 800f12e:	e74b      	b.n	800efc8 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f130:	4907      	ldr	r1, [pc, #28]	; (800f150 <HAL_RCC_ClockConfig+0x238>)
 800f132:	6925      	ldr	r5, [r4, #16]
 800f134:	6988      	ldr	r0, [r1, #24]
 800f136:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800f13a:	4285      	cmp	r5, r0
 800f13c:	f4bf af47 	bcs.w	800efce <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f140:	698a      	ldr	r2, [r1, #24]
 800f142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f146:	432a      	orrs	r2, r5
 800f148:	618a      	str	r2, [r1, #24]
 800f14a:	e740      	b.n	800efce <HAL_RCC_ClockConfig+0xb6>
 800f14c:	52002000 	.word	0x52002000
 800f150:	58024400 	.word	0x58024400
 800f154:	08027614 	.word	0x08027614
 800f158:	2400004c 	.word	0x2400004c
 800f15c:	24000048 	.word	0x24000048
 800f160:	24000054 	.word	0x24000054

0800f164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f164:	b510      	push	{r4, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f166:	4c0c      	ldr	r4, [pc, #48]	; (800f198 <HAL_RCC_GetHCLKFreq+0x34>)
 800f168:	f7ff fe36 	bl	800edd8 <HAL_RCC_GetSysClockFreq>
 800f16c:	490b      	ldr	r1, [pc, #44]	; (800f19c <HAL_RCC_GetHCLKFreq+0x38>)
 800f16e:	69a3      	ldr	r3, [r4, #24]
 800f170:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800f174:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f176:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f178:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f17c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f180:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f184:	5ccb      	ldrb	r3, [r1, r3]
 800f186:	f003 031f 	and.w	r3, r3, #31
 800f18a:	fa22 f003 	lsr.w	r0, r2, r3
 800f18e:	4b04      	ldr	r3, [pc, #16]	; (800f1a0 <HAL_RCC_GetHCLKFreq+0x3c>)
 800f190:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f192:	4b04      	ldr	r3, [pc, #16]	; (800f1a4 <HAL_RCC_GetHCLKFreq+0x40>)
 800f194:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800f196:	bd10      	pop	{r4, pc}
 800f198:	58024400 	.word	0x58024400
 800f19c:	08027614 	.word	0x08027614
 800f1a0:	2400004c 	.word	0x2400004c
 800f1a4:	24000048 	.word	0x24000048

0800f1a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f1a8:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f1aa:	f7ff ffdb 	bl	800f164 <HAL_RCC_GetHCLKFreq>
 800f1ae:	4b05      	ldr	r3, [pc, #20]	; (800f1c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800f1b0:	4a05      	ldr	r2, [pc, #20]	; (800f1c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f1b2:	69db      	ldr	r3, [r3, #28]
 800f1b4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f1b8:	5cd3      	ldrb	r3, [r2, r3]
 800f1ba:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f1be:	40d8      	lsrs	r0, r3
 800f1c0:	bd08      	pop	{r3, pc}
 800f1c2:	bf00      	nop
 800f1c4:	58024400 	.word	0x58024400
 800f1c8:	08027614 	.word	0x08027614

0800f1cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f1cc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f1ce:	f7ff ffc9 	bl	800f164 <HAL_RCC_GetHCLKFreq>
 800f1d2:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800f1d4:	4a05      	ldr	r2, [pc, #20]	; (800f1ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800f1d6:	69db      	ldr	r3, [r3, #28]
 800f1d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800f1dc:	5cd3      	ldrb	r3, [r2, r3]
 800f1de:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f1e2:	40d8      	lsrs	r0, r3
 800f1e4:	bd08      	pop	{r3, pc}
 800f1e6:	bf00      	nop
 800f1e8:	58024400 	.word	0x58024400
 800f1ec:	08027614 	.word	0x08027614

0800f1f0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800f1f0:	233f      	movs	r3, #63	; 0x3f
 800f1f2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800f1f4:	4b11      	ldr	r3, [pc, #68]	; (800f23c <HAL_RCC_GetClockConfig+0x4c>)
 800f1f6:	691a      	ldr	r2, [r3, #16]
 800f1f8:	f002 0207 	and.w	r2, r2, #7
 800f1fc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800f1fe:	699a      	ldr	r2, [r3, #24]
 800f200:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 800f204:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	f002 020f 	and.w	r2, r2, #15
 800f20c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800f20e:	699a      	ldr	r2, [r3, #24]
 800f210:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f214:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800f216:	69da      	ldr	r2, [r3, #28]
 800f218:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800f21c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800f21e:	69da      	ldr	r2, [r3, #28]
 800f220:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800f224:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f22c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f22e:	4b04      	ldr	r3, [pc, #16]	; (800f240 <HAL_RCC_GetClockConfig+0x50>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 030f 	and.w	r3, r3, #15
 800f236:	600b      	str	r3, [r1, #0]
}
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	58024400 	.word	0x58024400
 800f240:	52002000 	.word	0x52002000

0800f244 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f246:	4c3a      	ldr	r4, [pc, #232]	; (800f330 <RCCEx_PLL2_Config+0xec>)
{
 800f248:	4606      	mov	r6, r0
 800f24a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f24c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f24e:	f003 0303 	and.w	r3, r3, #3
 800f252:	2b03      	cmp	r3, #3
 800f254:	d069      	beq.n	800f32a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f25c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f25e:	f7fd f9e3 	bl	800c628 <HAL_GetTick>
 800f262:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	011a      	lsls	r2, r3, #4
 800f268:	d44b      	bmi.n	800f302 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f26a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f26c:	6832      	ldr	r2, [r6, #0]
 800f26e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f272:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800f276:	62a3      	str	r3, [r4, #40]	; 0x28
 800f278:	68b3      	ldr	r3, [r6, #8]
 800f27a:	68f2      	ldr	r2, [r6, #12]
 800f27c:	3b01      	subs	r3, #1
 800f27e:	3a01      	subs	r2, #1
 800f280:	025b      	lsls	r3, r3, #9
 800f282:	0412      	lsls	r2, r2, #16
 800f284:	b29b      	uxth	r3, r3
 800f286:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f28a:	4313      	orrs	r3, r2
 800f28c:	6872      	ldr	r2, [r6, #4]
 800f28e:	3a01      	subs	r2, #1
 800f290:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f294:	4313      	orrs	r3, r2
 800f296:	6932      	ldr	r2, [r6, #16]
 800f298:	3a01      	subs	r2, #1
 800f29a:	0612      	lsls	r2, r2, #24
 800f29c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f2a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2a6:	6972      	ldr	r2, [r6, #20]
 800f2a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f2b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2b2:	69b2      	ldr	r2, [r6, #24]
 800f2b4:	f023 0320 	bic.w	r3, r3, #32
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f2bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2be:	f023 0310 	bic.w	r3, r3, #16
 800f2c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f2c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f2c6:	69f2      	ldr	r2, [r6, #28]
 800f2c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f2cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f2d0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f2d4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f2d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2d8:	f043 0310 	orr.w	r3, r3, #16
 800f2dc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f2de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800f2e0:	b9b5      	cbnz	r5, 800f310 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f2e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f2e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f2e8:	4c11      	ldr	r4, [pc, #68]	; (800f330 <RCCEx_PLL2_Config+0xec>)
 800f2ea:	6823      	ldr	r3, [r4, #0]
 800f2ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f2f0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2f2:	f7fd f999 	bl	800c628 <HAL_GetTick>
 800f2f6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f2f8:	6823      	ldr	r3, [r4, #0]
 800f2fa:	011b      	lsls	r3, r3, #4
 800f2fc:	d50f      	bpl.n	800f31e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800f2fe:	2000      	movs	r0, #0
 800f300:	e005      	b.n	800f30e <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f302:	f7fd f991 	bl	800c628 <HAL_GetTick>
 800f306:	1bc0      	subs	r0, r0, r7
 800f308:	2802      	cmp	r0, #2
 800f30a:	d9ab      	bls.n	800f264 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800f30c:	2003      	movs	r0, #3
}
 800f30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800f310:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f312:	bf0c      	ite	eq
 800f314:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f318:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800f31c:	e7e3      	b.n	800f2e6 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f31e:	f7fd f983 	bl	800c628 <HAL_GetTick>
 800f322:	1b40      	subs	r0, r0, r5
 800f324:	2802      	cmp	r0, #2
 800f326:	d9e7      	bls.n	800f2f8 <RCCEx_PLL2_Config+0xb4>
 800f328:	e7f0      	b.n	800f30c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800f32a:	2001      	movs	r0, #1
 800f32c:	e7ef      	b.n	800f30e <RCCEx_PLL2_Config+0xca>
 800f32e:	bf00      	nop
 800f330:	58024400 	.word	0x58024400

0800f334 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f336:	4c3a      	ldr	r4, [pc, #232]	; (800f420 <RCCEx_PLL3_Config+0xec>)
{
 800f338:	4606      	mov	r6, r0
 800f33a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f33c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f33e:	f003 0303 	and.w	r3, r3, #3
 800f342:	2b03      	cmp	r3, #3
 800f344:	d069      	beq.n	800f41a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f34c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f34e:	f7fd f96b 	bl	800c628 <HAL_GetTick>
 800f352:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f354:	6823      	ldr	r3, [r4, #0]
 800f356:	009a      	lsls	r2, r3, #2
 800f358:	d44b      	bmi.n	800f3f2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f35a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f35c:	6832      	ldr	r2, [r6, #0]
 800f35e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800f362:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800f366:	62a3      	str	r3, [r4, #40]	; 0x28
 800f368:	68b3      	ldr	r3, [r6, #8]
 800f36a:	68f2      	ldr	r2, [r6, #12]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	3a01      	subs	r2, #1
 800f370:	025b      	lsls	r3, r3, #9
 800f372:	0412      	lsls	r2, r2, #16
 800f374:	b29b      	uxth	r3, r3
 800f376:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800f37a:	4313      	orrs	r3, r2
 800f37c:	6872      	ldr	r2, [r6, #4]
 800f37e:	3a01      	subs	r2, #1
 800f380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f384:	4313      	orrs	r3, r2
 800f386:	6932      	ldr	r2, [r6, #16]
 800f388:	3a01      	subs	r2, #1
 800f38a:	0612      	lsls	r2, r2, #24
 800f38c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800f390:	4313      	orrs	r3, r2
 800f392:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f394:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f396:	6972      	ldr	r2, [r6, #20]
 800f398:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f39c:	4313      	orrs	r3, r2
 800f39e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f3a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3a2:	69b2      	ldr	r2, [r6, #24]
 800f3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f3ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f3b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3b6:	69f2      	ldr	r2, [r6, #28]
 800f3b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f3bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f3c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800f3c4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f3c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3cc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f3ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800f3d0:	b9b5      	cbnz	r5, 800f400 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f3d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f3d6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f3d8:	4c11      	ldr	r4, [pc, #68]	; (800f420 <RCCEx_PLL3_Config+0xec>)
 800f3da:	6823      	ldr	r3, [r4, #0]
 800f3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3e0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3e2:	f7fd f921 	bl	800c628 <HAL_GetTick>
 800f3e6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	d50f      	bpl.n	800f40e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	e005      	b.n	800f3fe <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f3f2:	f7fd f919 	bl	800c628 <HAL_GetTick>
 800f3f6:	1bc0      	subs	r0, r0, r7
 800f3f8:	2802      	cmp	r0, #2
 800f3fa:	d9ab      	bls.n	800f354 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800f3fc:	2003      	movs	r0, #3
}
 800f3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800f400:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f402:	bf0c      	ite	eq
 800f404:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f408:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800f40c:	e7e3      	b.n	800f3d6 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f40e:	f7fd f90b 	bl	800c628 <HAL_GetTick>
 800f412:	1b40      	subs	r0, r0, r5
 800f414:	2802      	cmp	r0, #2
 800f416:	d9e7      	bls.n	800f3e8 <RCCEx_PLL3_Config+0xb4>
 800f418:	e7f0      	b.n	800f3fc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800f41a:	2001      	movs	r0, #1
 800f41c:	e7ef      	b.n	800f3fe <RCCEx_PLL3_Config+0xca>
 800f41e:	bf00      	nop
 800f420:	58024400 	.word	0x58024400

0800f424 <HAL_RCCEx_PeriphCLKConfig>:
{
 800f424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f428:	6803      	ldr	r3, [r0, #0]
{
 800f42a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f42c:	011c      	lsls	r4, r3, #4
 800f42e:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800f432:	d509      	bpl.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x24>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800f434:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800f436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f43a:	d02e      	beq.n	800f49a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f43c:	d813      	bhi.n	800f466 <HAL_RCCEx_PeriphCLKConfig+0x42>
 800f43e:	b1f3      	cbz	r3, 800f47e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800f440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f444:	d021      	beq.n	800f48a <HAL_RCCEx_PeriphCLKConfig+0x66>
 800f446:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	05d8      	lsls	r0, r3, #23
 800f44c:	f140 8104 	bpl.w	800f658 <HAL_RCCEx_PeriphCLKConfig+0x234>
    switch (PeriphClkInit->Sai1ClockSelection)
 800f450:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800f452:	2b04      	cmp	r3, #4
 800f454:	f200 80ff 	bhi.w	800f656 <HAL_RCCEx_PeriphCLKConfig+0x232>
 800f458:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f45c:	002b0024 	.word	0x002b0024
 800f460:	002900f7 	.word	0x002900f7
 800f464:	0029      	.short	0x0029
    switch (PeriphClkInit->SpdifrxClockSelection)
 800f466:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f46a:	d1ec      	bne.n	800f446 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f46c:	4aaa      	ldr	r2, [pc, #680]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f46e:	2600      	movs	r6, #0
 800f470:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800f472:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f474:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f478:	430b      	orrs	r3, r1
 800f47a:	6513      	str	r3, [r2, #80]	; 0x50
 800f47c:	e7e4      	b.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x24>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f47e:	4aa6      	ldr	r2, [pc, #664]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f480:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f486:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800f488:	e7f0      	b.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f48a:	2102      	movs	r1, #2
 800f48c:	3008      	adds	r0, #8
 800f48e:	f7ff fed9 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f492:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800f494:	2800      	cmp	r0, #0
 800f496:	d1d7      	bne.n	800f448 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800f498:	e7e8      	b.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x48>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f49a:	2102      	movs	r1, #2
 800f49c:	3028      	adds	r0, #40	; 0x28
 800f49e:	f7ff ff49 	bl	800f334 <RCCEx_PLL3_Config>
 800f4a2:	e7f6      	b.n	800f492 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f4a4:	4a9c      	ldr	r2, [pc, #624]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f4a6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f4a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f4ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch (PeriphClkInit->Sai1ClockSelection)
 800f4ae:	4634      	mov	r4, r6
 800f4b0:	e005      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4b2:	2100      	movs	r1, #0
 800f4b4:	f105 0008 	add.w	r0, r5, #8
 800f4b8:	f7ff fec4 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f4bc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f4be:	2c00      	cmp	r4, #0
 800f4c0:	f040 80cc 	bne.w	800f65c <HAL_RCCEx_PeriphCLKConfig+0x238>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f4c4:	4a94      	ldr	r2, [pc, #592]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f4c6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800f4c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f4ca:	f023 0307 	bic.w	r3, r3, #7
 800f4ce:	430b      	orrs	r3, r1
 800f4d0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	0599      	lsls	r1, r3, #22
 800f4d6:	d50d      	bpl.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai23ClockSelection)
 800f4d8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800f4da:	2b80      	cmp	r3, #128	; 0x80
 800f4dc:	f000 80dc 	beq.w	800f698 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800f4e0:	f200 80be 	bhi.w	800f660 <HAL_RCCEx_PeriphCLKConfig+0x23c>
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f000 80ca 	beq.w	800f67e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f4ea:	2b40      	cmp	r3, #64	; 0x40
 800f4ec:	f000 80cd 	beq.w	800f68a <HAL_RCCEx_PeriphCLKConfig+0x266>
 800f4f0:	2601      	movs	r6, #1
 800f4f2:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	055a      	lsls	r2, r3, #21
 800f4f8:	d510      	bpl.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800f4fa:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800f4fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f502:	f000 80ef 	beq.w	800f6e4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800f506:	f200 80cf 	bhi.w	800f6a8 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	f000 80dd 	beq.w	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800f510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f514:	f000 80df 	beq.w	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800f518:	2601      	movs	r6, #1
 800f51a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	051b      	lsls	r3, r3, #20
 800f520:	d510      	bpl.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->Sai4BClockSelection)
 800f522:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 800f526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f52a:	f000 8104 	beq.w	800f736 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800f52e:	f200 80e1 	bhi.w	800f6f4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800f532:	2b00      	cmp	r3, #0
 800f534:	f000 80f2 	beq.w	800f71c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800f538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f53c:	f000 80f4 	beq.w	800f728 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800f540:	2601      	movs	r6, #1
 800f542:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800f544:	682b      	ldr	r3, [r5, #0]
 800f546:	019f      	lsls	r7, r3, #6
 800f548:	d50d      	bpl.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->QspiClockSelection)
 800f54a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f54c:	2b20      	cmp	r3, #32
 800f54e:	f000 810c 	beq.w	800f76a <HAL_RCCEx_PeriphCLKConfig+0x346>
 800f552:	f200 80f8 	bhi.w	800f746 <HAL_RCCEx_PeriphCLKConfig+0x322>
 800f556:	2b00      	cmp	r3, #0
 800f558:	f000 80f8 	beq.w	800f74c <HAL_RCCEx_PeriphCLKConfig+0x328>
 800f55c:	2b10      	cmp	r3, #16
 800f55e:	f000 80fe 	beq.w	800f75e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800f562:	2601      	movs	r6, #1
 800f564:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f566:	682b      	ldr	r3, [r5, #0]
 800f568:	04d8      	lsls	r0, r3, #19
 800f56a:	d50f      	bpl.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi123ClockSelection)
 800f56c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f56e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f572:	f000 8120 	beq.w	800f7b6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800f576:	f200 8101 	bhi.w	800f77c <HAL_RCCEx_PeriphCLKConfig+0x358>
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 810e 	beq.w	800f79c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800f580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f584:	f000 8110 	beq.w	800f7a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800f588:	2601      	movs	r6, #1
 800f58a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f58c:	682b      	ldr	r3, [r5, #0]
 800f58e:	0499      	lsls	r1, r3, #18
 800f590:	d50f      	bpl.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi45ClockSelection)
 800f592:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800f594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f598:	f000 812e 	beq.w	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800f59c:	f200 8113 	bhi.w	800f7c6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	f000 8119 	beq.w	800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800f5a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5aa:	f000 811e 	beq.w	800f7ea <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 800f5ae:	2601      	movs	r6, #1
 800f5b0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f5b2:	682b      	ldr	r3, [r5, #0]
 800f5b4:	045a      	lsls	r2, r3, #17
 800f5b6:	d510      	bpl.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->Spi6ClockSelection)
 800f5b8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 800f5bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5c0:	f000 813c 	beq.w	800f83c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800f5c4:	f200 8120 	bhi.w	800f808 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 8126 	beq.w	800f81a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800f5ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5d2:	f000 812c 	beq.w	800f82e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800f5d6:	2601      	movs	r6, #1
 800f5d8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800f5da:	682b      	ldr	r3, [r5, #0]
 800f5dc:	015b      	lsls	r3, r3, #5
 800f5de:	d515      	bpl.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    switch (PeriphClkInit->DsiClockSelection)
 800f5e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800f5e2:	b14b      	cbz	r3, 800f5f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800f5e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5e8:	f040 8130 	bne.w	800f84c <HAL_RCCEx_PeriphCLKConfig+0x428>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	f105 0008 	add.w	r0, r5, #8
 800f5f2:	f7ff fe27 	bl	800f244 <RCCEx_PLL2_Config>
 800f5f6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f5f8:	2c00      	cmp	r4, #0
 800f5fa:	f040 812a 	bne.w	800f852 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800f5fe:	4a46      	ldr	r2, [pc, #280]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f600:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800f602:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800f604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f608:	430b      	orrs	r3, r1
 800f60a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f60c:	682b      	ldr	r3, [r5, #0]
 800f60e:	041f      	lsls	r7, r3, #16
 800f610:	d50d      	bpl.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch (PeriphClkInit->FdcanClockSelection)
 800f612:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800f614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f618:	f000 811d 	beq.w	800f856 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800f61c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f620:	f000 8127 	beq.w	800f872 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800f624:	2b00      	cmp	r3, #0
 800f626:	f000 811b 	beq.w	800f860 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800f62a:	2601      	movs	r6, #1
 800f62c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f62e:	682b      	ldr	r3, [r5, #0]
 800f630:	01d8      	lsls	r0, r3, #7
 800f632:	f140 8135 	bpl.w	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    switch (PeriphClkInit->FmcClockSelection)
 800f636:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800f638:	2b03      	cmp	r3, #3
 800f63a:	f200 8176 	bhi.w	800f92a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800f63e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f642:	0126      	.short	0x0126
 800f644:	016d0121 	.word	0x016d0121
 800f648:	0126      	.short	0x0126
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f64a:	2100      	movs	r1, #0
 800f64c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f650:	f7ff fe70 	bl	800f334 <RCCEx_PLL3_Config>
 800f654:	e732      	b.n	800f4bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    switch (PeriphClkInit->Sai1ClockSelection)
 800f656:	2601      	movs	r6, #1
 800f658:	4634      	mov	r4, r6
 800f65a:	e73a      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0xae>
 800f65c:	4626      	mov	r6, r4
 800f65e:	e738      	b.n	800f4d2 <HAL_RCCEx_PeriphCLKConfig+0xae>
    switch (PeriphClkInit->Sai23ClockSelection)
 800f660:	2bc0      	cmp	r3, #192	; 0xc0
 800f662:	d003      	beq.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x248>
 800f664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f668:	f47f af42 	bne.w	800f4f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if (ret == HAL_OK)
 800f66c:	b9d4      	cbnz	r4, 800f6a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800f66e:	4a2a      	ldr	r2, [pc, #168]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f670:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800f672:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f674:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800f678:	430b      	orrs	r3, r1
 800f67a:	6513      	str	r3, [r2, #80]	; 0x50
 800f67c:	e73a      	b.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f67e:	4a26      	ldr	r2, [pc, #152]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f680:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f686:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800f688:	e7f0      	b.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f68a:	2100      	movs	r1, #0
 800f68c:	f105 0008 	add.w	r0, r5, #8
 800f690:	f7ff fdd8 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f694:	4604      	mov	r4, r0
        break;
 800f696:	e7e9      	b.n	800f66c <HAL_RCCEx_PeriphCLKConfig+0x248>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f698:	2100      	movs	r1, #0
 800f69a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f69e:	f7ff fe49 	bl	800f334 <RCCEx_PLL3_Config>
 800f6a2:	e7f7      	b.n	800f694 <HAL_RCCEx_PeriphCLKConfig+0x270>
 800f6a4:	4626      	mov	r6, r4
 800f6a6:	e725      	b.n	800f4f4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800f6a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f6ac:	d003      	beq.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800f6ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f6b2:	f47f af31 	bne.w	800f518 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    if (ret == HAL_OK)
 800f6b6:	b9dc      	cbnz	r4, 800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f6b8:	4a17      	ldr	r2, [pc, #92]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f6ba:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800f6be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f6c0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800f6c4:	430b      	orrs	r3, r1
 800f6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800f6c8:	e728      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6ca:	4a13      	ldr	r2, [pc, #76]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f6cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f6d2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800f6d4:	e7ef      	b.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	f105 0008 	add.w	r0, r5, #8
 800f6dc:	f7ff fdb2 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f6e0:	4604      	mov	r4, r0
        break;
 800f6e2:	e7e8      	b.n	800f6b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f6ea:	f7ff fe23 	bl	800f334 <RCCEx_PLL3_Config>
 800f6ee:	e7f7      	b.n	800f6e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800f6f0:	4626      	mov	r6, r4
 800f6f2:	e713      	b.n	800f51c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    switch (PeriphClkInit->Sai4BClockSelection)
 800f6f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f6f8:	d003      	beq.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800f6fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f6fe:	f47f af1f 	bne.w	800f540 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    if (ret == HAL_OK)
 800f702:	b9f4      	cbnz	r4, 800f742 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f704:	4a04      	ldr	r2, [pc, #16]	; (800f718 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800f706:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 800f70a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f70c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800f710:	430b      	orrs	r3, r1
 800f712:	6593      	str	r3, [r2, #88]	; 0x58
 800f714:	e716      	b.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800f716:	bf00      	nop
 800f718:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f71c:	4aa1      	ldr	r2, [pc, #644]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f71e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f724:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800f726:	e7ec      	b.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f728:	2100      	movs	r1, #0
 800f72a:	f105 0008 	add.w	r0, r5, #8
 800f72e:	f7ff fd89 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f732:	4604      	mov	r4, r0
        break;
 800f734:	e7e5      	b.n	800f702 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f736:	2100      	movs	r1, #0
 800f738:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f73c:	f7ff fdfa 	bl	800f334 <RCCEx_PLL3_Config>
 800f740:	e7f7      	b.n	800f732 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800f742:	4626      	mov	r6, r4
 800f744:	e6fe      	b.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x120>
    switch (PeriphClkInit->QspiClockSelection)
 800f746:	2b30      	cmp	r3, #48	; 0x30
 800f748:	f47f af0b 	bne.w	800f562 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    if (ret == HAL_OK)
 800f74c:	b9a4      	cbnz	r4, 800f778 <HAL_RCCEx_PeriphCLKConfig+0x354>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800f74e:	4a95      	ldr	r2, [pc, #596]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f750:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800f752:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800f754:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f758:	430b      	orrs	r3, r1
 800f75a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f75c:	e703      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x142>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f75e:	4a91      	ldr	r2, [pc, #580]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f760:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f766:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800f768:	e7f0      	b.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x328>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f76a:	2102      	movs	r1, #2
 800f76c:	f105 0008 	add.w	r0, r5, #8
 800f770:	f7ff fd68 	bl	800f244 <RCCEx_PLL2_Config>
 800f774:	4604      	mov	r4, r0
        break;
 800f776:	e7e9      	b.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x328>
 800f778:	4626      	mov	r6, r4
 800f77a:	e6f4      	b.n	800f566 <HAL_RCCEx_PeriphCLKConfig+0x142>
    switch (PeriphClkInit->Spi123ClockSelection)
 800f77c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f780:	d003      	beq.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x366>
 800f782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f786:	f47f aeff 	bne.w	800f588 <HAL_RCCEx_PeriphCLKConfig+0x164>
    if (ret == HAL_OK)
 800f78a:	b9d4      	cbnz	r4, 800f7c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f78c:	4a85      	ldr	r2, [pc, #532]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f78e:	6e69      	ldr	r1, [r5, #100]	; 0x64
 800f790:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f796:	430b      	orrs	r3, r1
 800f798:	6513      	str	r3, [r2, #80]	; 0x50
 800f79a:	e6f7      	b.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x168>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f79c:	4a81      	ldr	r2, [pc, #516]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f79e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f7a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800f7a6:	e7f0      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	f105 0008 	add.w	r0, r5, #8
 800f7ae:	f7ff fd49 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7b2:	4604      	mov	r4, r0
        break;
 800f7b4:	e7e9      	b.n	800f78a <HAL_RCCEx_PeriphCLKConfig+0x366>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f7bc:	f7ff fdba 	bl	800f334 <RCCEx_PLL3_Config>
 800f7c0:	e7f7      	b.n	800f7b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800f7c2:	4626      	mov	r6, r4
 800f7c4:	e6e2      	b.n	800f58c <HAL_RCCEx_PeriphCLKConfig+0x168>
    switch (PeriphClkInit->Spi45ClockSelection)
 800f7c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7ca:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800f7ce:	d003      	beq.n	800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 800f7d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f7d4:	f47f aeeb 	bne.w	800f5ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if (ret == HAL_OK)
 800f7d8:	b9a4      	cbnz	r4, 800f804 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f7da:	4a72      	ldr	r2, [pc, #456]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f7dc:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 800f7de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f7e0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800f7e4:	430b      	orrs	r3, r1
 800f7e6:	6513      	str	r3, [r2, #80]	; 0x50
 800f7e8:	e6e3      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f7ea:	2101      	movs	r1, #1
 800f7ec:	f105 0008 	add.w	r0, r5, #8
 800f7f0:	f7ff fd28 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7f4:	4604      	mov	r4, r0
        break;
 800f7f6:	e7ef      	b.n	800f7d8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f7f8:	2101      	movs	r1, #1
 800f7fa:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f7fe:	f7ff fd99 	bl	800f334 <RCCEx_PLL3_Config>
 800f802:	e7f7      	b.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800f804:	4626      	mov	r6, r4
 800f806:	e6d4      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    switch (PeriphClkInit->Spi6ClockSelection)
 800f808:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800f80c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f810:	d003      	beq.n	800f81a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800f812:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f816:	f47f aede 	bne.w	800f5d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if (ret == HAL_OK)
 800f81a:	b9ac      	cbnz	r4, 800f848 <HAL_RCCEx_PeriphCLKConfig+0x424>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f81c:	4a61      	ldr	r2, [pc, #388]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f81e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
 800f822:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f824:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800f828:	430b      	orrs	r3, r1
 800f82a:	6593      	str	r3, [r2, #88]	; 0x58
 800f82c:	e6d5      	b.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f82e:	2101      	movs	r1, #1
 800f830:	f105 0008 	add.w	r0, r5, #8
 800f834:	f7ff fd06 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f838:	4604      	mov	r4, r0
        break;
 800f83a:	e7ee      	b.n	800f81a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f83c:	2101      	movs	r1, #1
 800f83e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f842:	f7ff fd77 	bl	800f334 <RCCEx_PLL3_Config>
 800f846:	e7f7      	b.n	800f838 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800f848:	4626      	mov	r6, r4
 800f84a:	e6c6      	b.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (PeriphClkInit->DsiClockSelection)
 800f84c:	2601      	movs	r6, #1
 800f84e:	4634      	mov	r4, r6
 800f850:	e6dc      	b.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800f852:	4626      	mov	r6, r4
 800f854:	e6da      	b.n	800f60c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f856:	4a53      	ldr	r2, [pc, #332]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f858:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f85a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f85e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800f860:	b974      	cbnz	r4, 800f880 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f862:	4a50      	ldr	r2, [pc, #320]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f864:	6f69      	ldr	r1, [r5, #116]	; 0x74
 800f866:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f868:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800f86c:	430b      	orrs	r3, r1
 800f86e:	6513      	str	r3, [r2, #80]	; 0x50
 800f870:	e6dd      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0x20a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f872:	2101      	movs	r1, #1
 800f874:	f105 0008 	add.w	r0, r5, #8
 800f878:	f7ff fce4 	bl	800f244 <RCCEx_PLL2_Config>
 800f87c:	4604      	mov	r4, r0
        break;
 800f87e:	e7ef      	b.n	800f860 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800f880:	4626      	mov	r6, r4
 800f882:	e6d4      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0x20a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f884:	4a47      	ldr	r2, [pc, #284]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f886:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f88c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800f88e:	2c00      	cmp	r4, #0
 800f890:	d14e      	bne.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f892:	4a44      	ldr	r2, [pc, #272]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f894:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800f896:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800f898:	f023 0303 	bic.w	r3, r3, #3
 800f89c:	430b      	orrs	r3, r1
 800f89e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	0259      	lsls	r1, r3, #9
 800f8a4:	d54e      	bpl.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x520>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f8a6:	4f40      	ldr	r7, [pc, #256]	; (800f9a8 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8ae:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800f8b0:	f7fc feba 	bl	800c628 <HAL_GetTick>
 800f8b4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	05da      	lsls	r2, r3, #23
 800f8ba:	d53b      	bpl.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x510>
    if (ret == HAL_OK)
 800f8bc:	2c00      	cmp	r4, #0
 800f8be:	d16f      	bne.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f8c0:	4b38      	ldr	r3, [pc, #224]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f8c2:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800f8c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f8c8:	4042      	eors	r2, r0
 800f8ca:	f412 7f40 	tst.w	r2, #768	; 0x300
 800f8ce:	d00b      	beq.n	800f8e8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f8d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800f8d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f8d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800f8d8:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800f8dc:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f8de:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f8e0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800f8e4:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800f8e6:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f8e8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800f8ec:	d043      	beq.n	800f976 <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f8ee:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
 800f8f2:	492c      	ldr	r1, [pc, #176]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f8f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800f8f8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800f8fc:	d14c      	bne.n	800f998 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800f8fe:	6908      	ldr	r0, [r1, #16]
 800f900:	4a2a      	ldr	r2, [pc, #168]	; (800f9ac <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800f902:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800f906:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800f90a:	4302      	orrs	r2, r0
 800f90c:	610a      	str	r2, [r1, #16]
 800f90e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f912:	4a24      	ldr	r2, [pc, #144]	; (800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800f914:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800f916:	430b      	orrs	r3, r1
 800f918:	6713      	str	r3, [r2, #112]	; 0x70
 800f91a:	e013      	b.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x520>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f91c:	2102      	movs	r1, #2
 800f91e:	f105 0008 	add.w	r0, r5, #8
 800f922:	f7ff fc8f 	bl	800f244 <RCCEx_PLL2_Config>
 800f926:	4604      	mov	r4, r0
        break;
 800f928:	e7b1      	b.n	800f88e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    switch (PeriphClkInit->FmcClockSelection)
 800f92a:	2601      	movs	r6, #1
 800f92c:	4634      	mov	r4, r6
 800f92e:	e7b7      	b.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800f930:	4626      	mov	r6, r4
 800f932:	e7b5      	b.n	800f8a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f934:	f7fc fe78 	bl	800c628 <HAL_GetTick>
 800f938:	eba0 0008 	sub.w	r0, r0, r8
 800f93c:	2864      	cmp	r0, #100	; 0x64
 800f93e:	d9ba      	bls.n	800f8b6 <HAL_RCCEx_PeriphCLKConfig+0x492>
        ret = HAL_TIMEOUT;
 800f940:	2603      	movs	r6, #3
 800f942:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f944:	682b      	ldr	r3, [r5, #0]
 800f946:	07d8      	lsls	r0, r3, #31
 800f948:	d50a      	bpl.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0x53c>
    switch (PeriphClkInit->Usart16ClockSelection)
 800f94a:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800f94e:	2b10      	cmp	r3, #16
 800f950:	d045      	beq.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800f952:	d82d      	bhi.n	800f9b0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 800f954:	2b00      	cmp	r3, #0
 800f956:	d031      	beq.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f958:	2b08      	cmp	r3, #8
 800f95a:	d039      	beq.n	800f9d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800f95c:	2601      	movs	r6, #1
 800f95e:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f960:	682b      	ldr	r3, [r5, #0]
 800f962:	0799      	lsls	r1, r3, #30
 800f964:	d551      	bpl.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f966:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800f968:	2b05      	cmp	r3, #5
 800f96a:	d864      	bhi.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800f96c:	e8df f003 	tbb	[pc, r3]
 800f970:	455d3f45 	.word	0x455d3f45
 800f974:	4545      	.short	0x4545
        tickstart = HAL_GetTick();
 800f976:	f7fc fe57 	bl	800c628 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f97a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800f9a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
        tickstart = HAL_GetTick();
 800f97e:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f980:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f984:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800f988:	079b      	lsls	r3, r3, #30
 800f98a:	d4b0      	bmi.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f98c:	f7fc fe4c 	bl	800c628 <HAL_GetTick>
 800f990:	1bc0      	subs	r0, r0, r7
 800f992:	4548      	cmp	r0, r9
 800f994:	d9f6      	bls.n	800f984 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800f996:	e7d3      	b.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x51c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f998:	690a      	ldr	r2, [r1, #16]
 800f99a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800f99e:	e7b5      	b.n	800f90c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
 800f9a0:	4626      	mov	r6, r4
 800f9a2:	e7cf      	b.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800f9a4:	58024400 	.word	0x58024400
 800f9a8:	58024800 	.word	0x58024800
 800f9ac:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->Usart16ClockSelection)
 800f9b0:	f023 0208 	bic.w	r2, r3, #8
 800f9b4:	2a20      	cmp	r2, #32
 800f9b6:	d001      	beq.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x598>
 800f9b8:	2b18      	cmp	r3, #24
 800f9ba:	d1cf      	bne.n	800f95c <HAL_RCCEx_PeriphCLKConfig+0x538>
    if (ret == HAL_OK)
 800f9bc:	b9ac      	cbnz	r4, 800f9ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f9be:	4a20      	ldr	r2, [pc, #128]	; (800fa40 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800f9c0:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800f9c4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800f9c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800f9ca:	430b      	orrs	r3, r1
 800f9cc:	6553      	str	r3, [r2, #84]	; 0x54
 800f9ce:	e7c7      	b.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f9d0:	2101      	movs	r1, #1
 800f9d2:	f105 0008 	add.w	r0, r5, #8
 800f9d6:	f7ff fc35 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f9da:	4604      	mov	r4, r0
        break;
 800f9dc:	e7ee      	b.n	800f9bc <HAL_RCCEx_PeriphCLKConfig+0x598>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f9de:	2101      	movs	r1, #1
 800f9e0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800f9e4:	f7ff fca6 	bl	800f334 <RCCEx_PLL3_Config>
 800f9e8:	e7f7      	b.n	800f9da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
 800f9ea:	4626      	mov	r6, r4
 800f9ec:	e7b8      	b.n	800f960 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	f105 0008 	add.w	r0, r5, #8
 800f9f4:	f7ff fc26 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f9f8:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800f9fa:	b9fc      	cbnz	r4, 800fa3c <HAL_RCCEx_PeriphCLKConfig+0x618>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f9fc:	4a10      	ldr	r2, [pc, #64]	; (800fa40 <HAL_RCCEx_PeriphCLKConfig+0x61c>)
 800f9fe:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800fa00:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fa02:	f023 0307 	bic.w	r3, r3, #7
 800fa06:	430b      	orrs	r3, r1
 800fa08:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fa0a:	682b      	ldr	r3, [r5, #0]
 800fa0c:	075a      	lsls	r2, r3, #29
 800fa0e:	d52a      	bpl.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fa10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800fa14:	2b05      	cmp	r3, #5
 800fa16:	f200 817b 	bhi.w	800fd10 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800fa1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fa1e:	0019      	.short	0x0019
 800fa20:	01730013 	.word	0x01730013
 800fa24:	00190019 	.word	0x00190019
 800fa28:	0019      	.short	0x0019
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa2a:	2101      	movs	r1, #1
 800fa2c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fa30:	f7ff fc80 	bl	800f334 <RCCEx_PLL3_Config>
 800fa34:	e7e0      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800fa36:	2601      	movs	r6, #1
 800fa38:	4634      	mov	r4, r6
 800fa3a:	e7e6      	b.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800fa3c:	4626      	mov	r6, r4
 800fa3e:	e7e4      	b.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 800fa40:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fa44:	2101      	movs	r1, #1
 800fa46:	f105 0008 	add.w	r0, r5, #8
 800fa4a:	f7ff fbfb 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fa4e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800fa50:	2c00      	cmp	r4, #0
 800fa52:	f040 8160 	bne.w	800fd16 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fa56:	4aaa      	ldr	r2, [pc, #680]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fa58:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800fa5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fa5e:	f023 0307 	bic.w	r3, r3, #7
 800fa62:	430b      	orrs	r3, r1
 800fa64:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fa66:	682b      	ldr	r3, [r5, #0]
 800fa68:	069b      	lsls	r3, r3, #26
 800fa6a:	d510      	bpl.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fa6c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800fa70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa74:	f000 816b 	beq.w	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 800fa78:	f200 814f 	bhi.w	800fd1a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8155 	beq.w	800fd2c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800fa82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa86:	f000 815b 	beq.w	800fd40 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800fa8a:	2601      	movs	r6, #1
 800fa8c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fa8e:	682b      	ldr	r3, [r5, #0]
 800fa90:	065f      	lsls	r7, r3, #25
 800fa92:	d510      	bpl.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fa94:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800fa98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa9c:	f000 8179 	beq.w	800fd92 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800faa0:	f200 815d 	bhi.w	800fd5e <HAL_RCCEx_PeriphCLKConfig+0x93a>
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 8163 	beq.w	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800faaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faae:	f000 8169 	beq.w	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800fab2:	2601      	movs	r6, #1
 800fab4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800fab6:	682b      	ldr	r3, [r5, #0]
 800fab8:	0618      	lsls	r0, r3, #24
 800faba:	d510      	bpl.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fabc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 800fac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fac4:	f000 8187 	beq.w	800fdd6 <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 800fac8:	f200 816b 	bhi.w	800fda2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800facc:	2b00      	cmp	r3, #0
 800face:	f000 8171 	beq.w	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800fad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fad6:	f000 8177 	beq.w	800fdc8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
 800fada:	2601      	movs	r6, #1
 800fadc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800fade:	682b      	ldr	r3, [r5, #0]
 800fae0:	0719      	lsls	r1, r3, #28
 800fae2:	d514      	bpl.n	800fb0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800fae4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800fae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800faec:	d107      	bne.n	800fafe <HAL_RCCEx_PeriphCLKConfig+0x6da>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800faee:	2102      	movs	r1, #2
 800faf0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800faf4:	f7ff fc1e 	bl	800f334 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800faf8:	2800      	cmp	r0, #0
 800fafa:	bf18      	it	ne
 800fafc:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fafe:	4a80      	ldr	r2, [pc, #512]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fb00:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800fb04:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fb06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800fb0a:	430b      	orrs	r3, r1
 800fb0c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fb0e:	682b      	ldr	r3, [r5, #0]
 800fb10:	06da      	lsls	r2, r3, #27
 800fb12:	d514      	bpl.n	800fb3e <HAL_RCCEx_PeriphCLKConfig+0x71a>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fb14:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800fb18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb1c:	d107      	bne.n	800fb2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fb1e:	2102      	movs	r1, #2
 800fb20:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fb24:	f7ff fc06 	bl	800f334 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	bf18      	it	ne
 800fb2c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fb2e:	4a74      	ldr	r2, [pc, #464]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fb30:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800fb34:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb3a:	430b      	orrs	r3, r1
 800fb3c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fb3e:	682b      	ldr	r3, [r5, #0]
 800fb40:	031b      	lsls	r3, r3, #12
 800fb42:	d51b      	bpl.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0x758>
    switch (PeriphClkInit->AdcClockSelection)
 800fb44:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800fb48:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800fb4c:	f000 814b 	beq.w	800fde6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800fb50:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800fb54:	d007      	beq.n	800fb66 <HAL_RCCEx_PeriphCLKConfig+0x742>
 800fb56:	2900      	cmp	r1, #0
 800fb58:	f040 814b 	bne.w	800fdf2 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb5c:	f105 0008 	add.w	r0, r5, #8
 800fb60:	f7ff fb70 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fb64:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800fb66:	2c00      	cmp	r4, #0
 800fb68:	f040 8146 	bne.w	800fdf8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fb6c:	4a64      	ldr	r2, [pc, #400]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fb6e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800fb72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fb74:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800fb78:	430b      	orrs	r3, r1
 800fb7a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fb7c:	682b      	ldr	r3, [r5, #0]
 800fb7e:	035f      	lsls	r7, r3, #13
 800fb80:	d51c      	bpl.n	800fbbc <HAL_RCCEx_PeriphCLKConfig+0x798>
    switch (PeriphClkInit->UsbClockSelection)
 800fb82:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800fb86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb8a:	f000 8137 	beq.w	800fdfc <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 800fb8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb92:	d008      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x782>
 800fb94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb98:	f040 8137 	bne.w	800fe0a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb9c:	4a58      	ldr	r2, [pc, #352]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fb9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fba4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800fba6:	2c00      	cmp	r4, #0
 800fba8:	f040 8132 	bne.w	800fe10 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fbac:	4a54      	ldr	r2, [pc, #336]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fbae:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800fbb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fbb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fbb8:	430b      	orrs	r3, r1
 800fbba:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fbbc:	682b      	ldr	r3, [r5, #0]
 800fbbe:	03d8      	lsls	r0, r3, #15
 800fbc0:	d509      	bpl.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->SdmmcClockSelection)
 800fbc2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 8125 	beq.w	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x9f0>
 800fbca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbce:	f000 812f 	beq.w	800fe30 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800fbd2:	2601      	movs	r6, #1
 800fbd4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fbd6:	682b      	ldr	r3, [r5, #0]
 800fbd8:	0099      	lsls	r1, r3, #2
 800fbda:	d507      	bpl.n	800fbec <HAL_RCCEx_PeriphCLKConfig+0x7c8>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fbdc:	2102      	movs	r1, #2
 800fbde:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fbe2:	f7ff fba7 	bl	800f334 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	bf18      	it	ne
 800fbea:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fbec:	e9d5 3100 	ldrd	r3, r1, [r5]
 800fbf0:	039a      	lsls	r2, r3, #14
 800fbf2:	d50b      	bpl.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    switch (PeriphClkInit->RngClockSelection)
 800fbf4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 800fbf8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800fbfc:	f000 812f 	beq.w	800fe5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
 800fc00:	f200 811f 	bhi.w	800fe42 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	f000 8122 	beq.w	800fe4e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800fc0a:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fc0c:	02df      	lsls	r7, r3, #11
 800fc0e:	d506      	bpl.n	800fc1e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fc10:	483b      	ldr	r0, [pc, #236]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc12:	6fac      	ldr	r4, [r5, #120]	; 0x78
 800fc14:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800fc16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800fc1a:	4322      	orrs	r2, r4
 800fc1c:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fc1e:	00dc      	lsls	r4, r3, #3
 800fc20:	d507      	bpl.n	800fc32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fc22:	4837      	ldr	r0, [pc, #220]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc24:	f8d5 40bc 	ldr.w	r4, [r5, #188]	; 0xbc
 800fc28:	6902      	ldr	r2, [r0, #16]
 800fc2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fc2e:	4322      	orrs	r2, r4
 800fc30:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fc32:	0298      	lsls	r0, r3, #10
 800fc34:	d506      	bpl.n	800fc44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fc36:	4832      	ldr	r0, [pc, #200]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc38:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800fc3a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800fc3c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800fc40:	4322      	orrs	r2, r4
 800fc42:	6502      	str	r2, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fc44:	005a      	lsls	r2, r3, #1
 800fc46:	d509      	bpl.n	800fc5c <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fc48:	4a2d      	ldr	r2, [pc, #180]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc4a:	6910      	ldr	r0, [r2, #16]
 800fc4c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 800fc50:	6110      	str	r0, [r2, #16]
 800fc52:	6910      	ldr	r0, [r2, #16]
 800fc54:	f8d5 40c0 	ldr.w	r4, [r5, #192]	; 0xc0
 800fc58:	4320      	orrs	r0, r4
 800fc5a:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	da06      	bge.n	800fc6e <HAL_RCCEx_PeriphCLKConfig+0x84a>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fc60:	4827      	ldr	r0, [pc, #156]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc62:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800fc64:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800fc66:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fc6a:	4322      	orrs	r2, r4
 800fc6c:	64c2      	str	r2, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fc6e:	021b      	lsls	r3, r3, #8
 800fc70:	d507      	bpl.n	800fc82 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fc72:	4a23      	ldr	r2, [pc, #140]	; (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 800fc74:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 800fc78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fc7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800fc7e:	4303      	orrs	r3, r0
 800fc80:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fc82:	07cf      	lsls	r7, r1, #31
 800fc84:	d507      	bpl.n	800fc96 <HAL_RCCEx_PeriphCLKConfig+0x872>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc86:	2100      	movs	r1, #0
 800fc88:	f105 0008 	add.w	r0, r5, #8
 800fc8c:	f7ff fada 	bl	800f244 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fc90:	2800      	cmp	r0, #0
 800fc92:	bf18      	it	ne
 800fc94:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fc96:	686b      	ldr	r3, [r5, #4]
 800fc98:	079c      	lsls	r4, r3, #30
 800fc9a:	d507      	bpl.n	800fcac <HAL_RCCEx_PeriphCLKConfig+0x888>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fc9c:	2101      	movs	r1, #1
 800fc9e:	f105 0008 	add.w	r0, r5, #8
 800fca2:	f7ff facf 	bl	800f244 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fca6:	2800      	cmp	r0, #0
 800fca8:	bf18      	it	ne
 800fcaa:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fcac:	686b      	ldr	r3, [r5, #4]
 800fcae:	0758      	lsls	r0, r3, #29
 800fcb0:	d507      	bpl.n	800fcc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fcb2:	2102      	movs	r1, #2
 800fcb4:	f105 0008 	add.w	r0, r5, #8
 800fcb8:	f7ff fac4 	bl	800f244 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	bf18      	it	ne
 800fcc0:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fcc2:	686b      	ldr	r3, [r5, #4]
 800fcc4:	0719      	lsls	r1, r3, #28
 800fcc6:	d507      	bpl.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fcc8:	2100      	movs	r1, #0
 800fcca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fcce:	f7ff fb31 	bl	800f334 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	bf18      	it	ne
 800fcd6:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fcd8:	686b      	ldr	r3, [r5, #4]
 800fcda:	06da      	lsls	r2, r3, #27
 800fcdc:	d507      	bpl.n	800fcee <HAL_RCCEx_PeriphCLKConfig+0x8ca>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcde:	2101      	movs	r1, #1
 800fce0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fce4:	f7ff fb26 	bl	800f334 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fce8:	2800      	cmp	r0, #0
 800fcea:	bf18      	it	ne
 800fcec:	4606      	movne	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fcee:	686b      	ldr	r3, [r5, #4]
 800fcf0:	069b      	lsls	r3, r3, #26
 800fcf2:	f100 80bc 	bmi.w	800fe6e <HAL_RCCEx_PeriphCLKConfig+0xa4a>
    return HAL_OK;
 800fcf6:	1e30      	subs	r0, r6, #0
 800fcf8:	bf18      	it	ne
 800fcfa:	2001      	movne	r0, #1
}
 800fcfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd00:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fd04:	2101      	movs	r1, #1
 800fd06:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fd0a:	f7ff fb13 	bl	800f334 <RCCEx_PLL3_Config>
 800fd0e:	e69e      	b.n	800fa4e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800fd10:	2601      	movs	r6, #1
 800fd12:	4634      	mov	r4, r6
 800fd14:	e6a7      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800fd16:	4626      	mov	r6, r4
 800fd18:	e6a5      	b.n	800fa66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800fd1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fd1e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800fd22:	d003      	beq.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800fd24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fd28:	f47f aeaf 	bne.w	800fa8a <HAL_RCCEx_PeriphCLKConfig+0x666>
    if (ret == HAL_OK)
 800fd2c:	b9ac      	cbnz	r4, 800fd5a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fd2e:	4a55      	ldr	r2, [pc, #340]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fd30:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800fd34:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fd36:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800fd3a:	430b      	orrs	r3, r1
 800fd3c:	6553      	str	r3, [r2, #84]	; 0x54
 800fd3e:	e6a6      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd40:	2100      	movs	r1, #0
 800fd42:	f105 0008 	add.w	r0, r5, #8
 800fd46:	f7ff fa7d 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd4a:	4604      	mov	r4, r0
        break;
 800fd4c:	e7ee      	b.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0x908>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd4e:	2102      	movs	r1, #2
 800fd50:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fd54:	f7ff faee 	bl	800f334 <RCCEx_PLL3_Config>
 800fd58:	e7f7      	b.n	800fd4a <HAL_RCCEx_PeriphCLKConfig+0x926>
 800fd5a:	4626      	mov	r6, r4
 800fd5c:	e697      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800fd5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd62:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800fd66:	d003      	beq.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800fd68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fd6c:	f47f aea1 	bne.w	800fab2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    if (ret == HAL_OK)
 800fd70:	b9ac      	cbnz	r4, 800fd9e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fd72:	4a44      	ldr	r2, [pc, #272]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fd74:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800fd78:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fd7a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800fd7e:	430b      	orrs	r3, r1
 800fd80:	6593      	str	r3, [r2, #88]	; 0x58
 800fd82:	e698      	b.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0x692>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fd84:	2100      	movs	r1, #0
 800fd86:	f105 0008 	add.w	r0, r5, #8
 800fd8a:	f7ff fa5b 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd8e:	4604      	mov	r4, r0
        break;
 800fd90:	e7ee      	b.n	800fd70 <HAL_RCCEx_PeriphCLKConfig+0x94c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fd92:	2102      	movs	r1, #2
 800fd94:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fd98:	f7ff facc 	bl	800f334 <RCCEx_PLL3_Config>
 800fd9c:	e7f7      	b.n	800fd8e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800fd9e:	4626      	mov	r6, r4
 800fda0:	e689      	b.n	800fab6 <HAL_RCCEx_PeriphCLKConfig+0x692>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800fda2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fda6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800fdaa:	d003      	beq.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0x990>
 800fdac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800fdb0:	f47f ae93 	bne.w	800fada <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    if (ret == HAL_OK)
 800fdb4:	b9ac      	cbnz	r4, 800fde2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fdb6:	4a33      	ldr	r2, [pc, #204]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fdb8:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800fdbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800fdbe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800fdc2:	430b      	orrs	r3, r1
 800fdc4:	6593      	str	r3, [r2, #88]	; 0x58
 800fdc6:	e68a      	b.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdc8:	2100      	movs	r1, #0
 800fdca:	f105 0008 	add.w	r0, r5, #8
 800fdce:	f7ff fa39 	bl	800f244 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdd2:	4604      	mov	r4, r0
        break;
 800fdd4:	e7ee      	b.n	800fdb4 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fdd6:	2102      	movs	r1, #2
 800fdd8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fddc:	f7ff faaa 	bl	800f334 <RCCEx_PLL3_Config>
 800fde0:	e7f7      	b.n	800fdd2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
 800fde2:	4626      	mov	r6, r4
 800fde4:	e67b      	b.n	800fade <HAL_RCCEx_PeriphCLKConfig+0x6ba>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fde6:	2102      	movs	r1, #2
 800fde8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fdec:	f7ff faa2 	bl	800f334 <RCCEx_PLL3_Config>
 800fdf0:	e6b8      	b.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0x740>
    switch (PeriphClkInit->AdcClockSelection)
 800fdf2:	2601      	movs	r6, #1
 800fdf4:	4634      	mov	r4, r6
 800fdf6:	e6c1      	b.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0x758>
 800fdf8:	4626      	mov	r6, r4
 800fdfa:	e6bf      	b.n	800fb7c <HAL_RCCEx_PeriphCLKConfig+0x758>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fdfc:	2101      	movs	r1, #1
 800fdfe:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fe02:	f7ff fa97 	bl	800f334 <RCCEx_PLL3_Config>
 800fe06:	4604      	mov	r4, r0
        break;
 800fe08:	e6cd      	b.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x782>
    switch (PeriphClkInit->UsbClockSelection)
 800fe0a:	2601      	movs	r6, #1
 800fe0c:	4634      	mov	r4, r6
 800fe0e:	e6d5      	b.n	800fbbc <HAL_RCCEx_PeriphCLKConfig+0x798>
 800fe10:	4626      	mov	r6, r4
 800fe12:	e6d3      	b.n	800fbbc <HAL_RCCEx_PeriphCLKConfig+0x798>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe14:	4a1b      	ldr	r2, [pc, #108]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fe16:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fe18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fe1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800fe1e:	b974      	cbnz	r4, 800fe3e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fe20:	4a18      	ldr	r2, [pc, #96]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fe22:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800fe24:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fe26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe2a:	430b      	orrs	r3, r1
 800fe2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fe2e:	e6d2      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fe30:	2102      	movs	r1, #2
 800fe32:	f105 0008 	add.w	r0, r5, #8
 800fe36:	f7ff fa05 	bl	800f244 <RCCEx_PLL2_Config>
 800fe3a:	4604      	mov	r4, r0
        break;
 800fe3c:	e7ef      	b.n	800fe1e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800fe3e:	4626      	mov	r6, r4
 800fe40:	e6c9      	b.n	800fbd6 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
    switch (PeriphClkInit->RngClockSelection)
 800fe42:	f420 7280 	bic.w	r2, r0, #256	; 0x100
 800fe46:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800fe4a:	f47f aede 	bne.w	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    if (ret == HAL_OK)
 800fe4e:	b964      	cbnz	r4, 800fe6a <HAL_RCCEx_PeriphCLKConfig+0xa46>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fe50:	4c0c      	ldr	r4, [pc, #48]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fe52:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800fe54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800fe58:	4302      	orrs	r2, r0
 800fe5a:	6562      	str	r2, [r4, #84]	; 0x54
 800fe5c:	e6d6      	b.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fe5e:	4f09      	ldr	r7, [pc, #36]	; (800fe84 <HAL_RCCEx_PeriphCLKConfig+0xa60>)
 800fe60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fe66:	62fa      	str	r2, [r7, #44]	; 0x2c
        break;
 800fe68:	e7f1      	b.n	800fe4e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 800fe6a:	4626      	mov	r6, r4
 800fe6c:	e6ce      	b.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fe6e:	2102      	movs	r1, #2
 800fe70:	f105 0028 	add.w	r0, r5, #40	; 0x28
 800fe74:	f7ff fa5e 	bl	800f334 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	f43f af3c 	beq.w	800fcf6 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
  return HAL_ERROR;
 800fe7e:	2001      	movs	r0, #1
 800fe80:	e73c      	b.n	800fcfc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800fe82:	bf00      	nop
 800fe84:	58024400 	.word	0x58024400

0800fe88 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800fe88:	b538      	push	{r3, r4, r5, lr}
 800fe8a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800fe8c:	4604      	mov	r4, r0
 800fe8e:	b1f0      	cbz	r0, 800fece <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800fe90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800fe94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800fe98:	b91b      	cbnz	r3, 800fea2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800fe9a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800fe9e:	f7f1 f9d5 	bl	800124c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fea2:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800fea4:	1d21      	adds	r1, r4, #4
 800fea6:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800fea8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800feac:	f000 fa1f 	bl	80102ee <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800feb0:	6862      	ldr	r2, [r4, #4]
 800feb2:	4629      	mov	r1, r5
 800feb4:	6820      	ldr	r0, [r4, #0]
 800feb6:	f000 fa55 	bl	8010364 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800feba:	4a06      	ldr	r2, [pc, #24]	; (800fed4 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800febc:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800febe:	6813      	ldr	r3, [r2, #0]
 800fec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800fec4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800fec6:	2301      	movs	r3, #1
 800fec8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800fecc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800fece:	2001      	movs	r0, #1
 800fed0:	e7fc      	b.n	800fecc <HAL_SDRAM_Init+0x44>
 800fed2:	bf00      	nop
 800fed4:	52004000 	.word	0x52004000

0800fed8 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800fed8:	b510      	push	{r4, lr}
 800feda:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800fedc:	f7f1 fa44 	bl	8001368 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800fee0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800fee4:	f000 fa74 	bl	80103d0 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800fee8:	2000      	movs	r0, #0
 800feea:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800feee:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800fef2:	bd10      	pop	{r4, pc}

0800fef4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800fef4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800fef6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800fefa:	4605      	mov	r5, r0
 800fefc:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800fefe:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ff00:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ff02:	d010      	beq.n	800ff26 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ff04:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800ff08:	2c01      	cmp	r4, #1
 800ff0a:	d110      	bne.n	800ff2e <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ff0c:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ff0e:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ff10:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ff14:	f000 fa6b 	bl	80103ee <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ff18:	6833      	ldr	r3, [r6, #0]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d104      	bne.n	800ff28 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ff1e:	2305      	movs	r3, #5
 800ff20:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ff24:	2000      	movs	r0, #0
}
 800ff26:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ff28:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800ff2c:	e7fa      	b.n	800ff24 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800ff2e:	2001      	movs	r0, #1
 800ff30:	e7f9      	b.n	800ff26 <HAL_SDRAM_SendCommand+0x32>

0800ff32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ff32:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ff34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800ff38:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ff3a:	2b02      	cmp	r3, #2
 800ff3c:	b2d8      	uxtb	r0, r3
 800ff3e:	d00d      	beq.n	800ff5c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ff40:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	b2dd      	uxtb	r5, r3
 800ff48:	d109      	bne.n	800ff5e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ff4a:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ff4c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ff4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ff52:	f000 fa5e 	bl	8010412 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ff56:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ff58:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800ff5c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ff5e:	2001      	movs	r0, #1
 800ff60:	e7fc      	b.n	800ff5c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800ff62 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ff62:	4770      	bx	lr

0800ff64 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ff64:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d12f      	bne.n	800ffcc <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff6c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff6e:	4a18      	ldr	r2, [pc, #96]	; (800ffd0 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800ff70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff74:	6803      	ldr	r3, [r0, #0]
 800ff76:	4293      	cmp	r3, r2
 800ff78:	d01a      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ff7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff7e:	d017      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ff80:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800ff84:	4293      	cmp	r3, r2
 800ff86:	d013      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ff88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d00f      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ff90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d00b      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ff98:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d007      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ffa0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d003      	beq.n	800ffb0 <HAL_TIM_Base_Start+0x4c>
 800ffa8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d107      	bne.n	800ffc0 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffb0:	6899      	ldr	r1, [r3, #8]
 800ffb2:	4a08      	ldr	r2, [pc, #32]	; (800ffd4 <HAL_TIM_Base_Start+0x70>)
 800ffb4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffb6:	2a06      	cmp	r2, #6
 800ffb8:	d006      	beq.n	800ffc8 <HAL_TIM_Base_Start+0x64>
 800ffba:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800ffbe:	d003      	beq.n	800ffc8 <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	f042 0201 	orr.w	r2, r2, #1
 800ffc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ffc8:	2000      	movs	r0, #0
}
 800ffca:	4770      	bx	lr
    return HAL_ERROR;
 800ffcc:	2001      	movs	r0, #1
 800ffce:	4770      	bx	lr
 800ffd0:	40010000 	.word	0x40010000
 800ffd4:	00010007 	.word	0x00010007

0800ffd8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ffd8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d133      	bne.n	8010048 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ffe6:	6803      	ldr	r3, [r0, #0]
 800ffe8:	68da      	ldr	r2, [r3, #12]
 800ffea:	f042 0201 	orr.w	r2, r2, #1
 800ffee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fff0:	4a16      	ldr	r2, [pc, #88]	; (801004c <HAL_TIM_Base_Start_IT+0x74>)
 800fff2:	4293      	cmp	r3, r2
 800fff4:	d01a      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 800fff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fffa:	d017      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 800fffc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010000:	4293      	cmp	r3, r2
 8010002:	d013      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 8010004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010008:	4293      	cmp	r3, r2
 801000a:	d00f      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 801000c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010010:	4293      	cmp	r3, r2
 8010012:	d00b      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 8010014:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010018:	4293      	cmp	r3, r2
 801001a:	d007      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 801001c:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8010020:	4293      	cmp	r3, r2
 8010022:	d003      	beq.n	801002c <HAL_TIM_Base_Start_IT+0x54>
 8010024:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8010028:	4293      	cmp	r3, r2
 801002a:	d107      	bne.n	801003c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801002c:	6899      	ldr	r1, [r3, #8]
 801002e:	4a08      	ldr	r2, [pc, #32]	; (8010050 <HAL_TIM_Base_Start_IT+0x78>)
 8010030:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010032:	2a06      	cmp	r2, #6
 8010034:	d006      	beq.n	8010044 <HAL_TIM_Base_Start_IT+0x6c>
 8010036:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801003a:	d003      	beq.n	8010044 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	f042 0201 	orr.w	r2, r2, #1
 8010042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010044:	2000      	movs	r0, #0
}
 8010046:	4770      	bx	lr
    return HAL_ERROR;
 8010048:	2001      	movs	r0, #1
 801004a:	4770      	bx	lr
 801004c:	40010000 	.word	0x40010000
 8010050:	00010007 	.word	0x00010007

08010054 <HAL_TIM_OC_DelayElapsedCallback>:
 8010054:	4770      	bx	lr

08010056 <HAL_TIM_IC_CaptureCallback>:
 8010056:	4770      	bx	lr

08010058 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010058:	4770      	bx	lr

0801005a <HAL_TIM_TriggerCallback>:
 801005a:	4770      	bx	lr

0801005c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801005c:	6803      	ldr	r3, [r0, #0]
 801005e:	691a      	ldr	r2, [r3, #16]
 8010060:	0791      	lsls	r1, r2, #30
{
 8010062:	b510      	push	{r4, lr}
 8010064:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010066:	d50f      	bpl.n	8010088 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010068:	68da      	ldr	r2, [r3, #12]
 801006a:	0792      	lsls	r2, r2, #30
 801006c:	d50c      	bpl.n	8010088 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801006e:	f06f 0202 	mvn.w	r2, #2
 8010072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010074:	2201      	movs	r2, #1
 8010076:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010078:	699b      	ldr	r3, [r3, #24]
 801007a:	0799      	lsls	r1, r3, #30
 801007c:	f000 8085 	beq.w	801018a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010080:	f7ff ffe9 	bl	8010056 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010084:	2300      	movs	r3, #0
 8010086:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010088:	6823      	ldr	r3, [r4, #0]
 801008a:	691a      	ldr	r2, [r3, #16]
 801008c:	0752      	lsls	r2, r2, #29
 801008e:	d510      	bpl.n	80100b2 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010090:	68da      	ldr	r2, [r3, #12]
 8010092:	0750      	lsls	r0, r2, #29
 8010094:	d50d      	bpl.n	80100b2 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010096:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801009a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801009c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801009e:	2202      	movs	r2, #2
 80100a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80100a2:	699b      	ldr	r3, [r3, #24]
 80100a4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80100a8:	d075      	beq.n	8010196 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80100aa:	f7ff ffd4 	bl	8010056 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100ae:	2300      	movs	r3, #0
 80100b0:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	691a      	ldr	r2, [r3, #16]
 80100b6:	0711      	lsls	r1, r2, #28
 80100b8:	d50f      	bpl.n	80100da <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	0712      	lsls	r2, r2, #28
 80100be:	d50c      	bpl.n	80100da <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100c0:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100c8:	2204      	movs	r2, #4
 80100ca:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100cc:	69db      	ldr	r3, [r3, #28]
 80100ce:	079b      	lsls	r3, r3, #30
 80100d0:	d067      	beq.n	80101a2 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80100d2:	f7ff ffc0 	bl	8010056 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100d6:	2300      	movs	r3, #0
 80100d8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	06d0      	lsls	r0, r2, #27
 80100e0:	d510      	bpl.n	8010104 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80100e2:	68da      	ldr	r2, [r3, #12]
 80100e4:	06d1      	lsls	r1, r2, #27
 80100e6:	d50d      	bpl.n	8010104 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100e8:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100ec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100f0:	2208      	movs	r2, #8
 80100f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100f4:	69db      	ldr	r3, [r3, #28]
 80100f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80100fa:	d058      	beq.n	80101ae <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80100fc:	f7ff ffab 	bl	8010056 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010100:	2300      	movs	r3, #0
 8010102:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010104:	6823      	ldr	r3, [r4, #0]
 8010106:	691a      	ldr	r2, [r3, #16]
 8010108:	07d2      	lsls	r2, r2, #31
 801010a:	d508      	bpl.n	801011e <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	07d0      	lsls	r0, r2, #31
 8010110:	d505      	bpl.n	801011e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010112:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010116:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010118:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801011a:	f7f0 fee5 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801011e:	6823      	ldr	r3, [r4, #0]
 8010120:	691a      	ldr	r2, [r3, #16]
 8010122:	0611      	lsls	r1, r2, #24
 8010124:	d508      	bpl.n	8010138 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010126:	68da      	ldr	r2, [r3, #12]
 8010128:	0612      	lsls	r2, r2, #24
 801012a:	d505      	bpl.n	8010138 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801012c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010130:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010132:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8010134:	f000 f8d9 	bl	80102ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010138:	6823      	ldr	r3, [r4, #0]
 801013a:	691a      	ldr	r2, [r3, #16]
 801013c:	05d0      	lsls	r0, r2, #23
 801013e:	d508      	bpl.n	8010152 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010140:	68da      	ldr	r2, [r3, #12]
 8010142:	0611      	lsls	r1, r2, #24
 8010144:	d505      	bpl.n	8010152 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010146:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801014a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801014c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801014e:	f000 f8cd 	bl	80102ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010152:	6823      	ldr	r3, [r4, #0]
 8010154:	691a      	ldr	r2, [r3, #16]
 8010156:	0652      	lsls	r2, r2, #25
 8010158:	d508      	bpl.n	801016c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801015a:	68da      	ldr	r2, [r3, #12]
 801015c:	0650      	lsls	r0, r2, #25
 801015e:	d505      	bpl.n	801016c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010160:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010164:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010166:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8010168:	f7ff ff77 	bl	801005a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801016c:	6823      	ldr	r3, [r4, #0]
 801016e:	691a      	ldr	r2, [r3, #16]
 8010170:	0691      	lsls	r1, r2, #26
 8010172:	d522      	bpl.n	80101ba <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010174:	68da      	ldr	r2, [r3, #12]
 8010176:	0692      	lsls	r2, r2, #26
 8010178:	d51f      	bpl.n	80101ba <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801017a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801017e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010180:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010186:	f000 b8af 	b.w	80102e8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801018a:	f7ff ff63 	bl	8010054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801018e:	4620      	mov	r0, r4
 8010190:	f7ff ff62 	bl	8010058 <HAL_TIM_PWM_PulseFinishedCallback>
 8010194:	e776      	b.n	8010084 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010196:	f7ff ff5d 	bl	8010054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801019a:	4620      	mov	r0, r4
 801019c:	f7ff ff5c 	bl	8010058 <HAL_TIM_PWM_PulseFinishedCallback>
 80101a0:	e785      	b.n	80100ae <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101a2:	f7ff ff57 	bl	8010054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101a6:	4620      	mov	r0, r4
 80101a8:	f7ff ff56 	bl	8010058 <HAL_TIM_PWM_PulseFinishedCallback>
 80101ac:	e793      	b.n	80100d6 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80101ae:	f7ff ff51 	bl	8010054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80101b2:	4620      	mov	r0, r4
 80101b4:	f7ff ff50 	bl	8010058 <HAL_TIM_PWM_PulseFinishedCallback>
 80101b8:	e7a2      	b.n	8010100 <HAL_TIM_IRQHandler+0xa4>
}
 80101ba:	bd10      	pop	{r4, pc}

080101bc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101bc:	4a30      	ldr	r2, [pc, #192]	; (8010280 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80101be:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80101c0:	4290      	cmp	r0, r2
 80101c2:	d012      	beq.n	80101ea <TIM_Base_SetConfig+0x2e>
 80101c4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80101c8:	d00f      	beq.n	80101ea <TIM_Base_SetConfig+0x2e>
 80101ca:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80101ce:	4290      	cmp	r0, r2
 80101d0:	d00b      	beq.n	80101ea <TIM_Base_SetConfig+0x2e>
 80101d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80101d6:	4290      	cmp	r0, r2
 80101d8:	d007      	beq.n	80101ea <TIM_Base_SetConfig+0x2e>
 80101da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80101de:	4290      	cmp	r0, r2
 80101e0:	d003      	beq.n	80101ea <TIM_Base_SetConfig+0x2e>
 80101e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80101e6:	4290      	cmp	r0, r2
 80101e8:	d119      	bne.n	801021e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80101ea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80101ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80101f0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80101f2:	4a23      	ldr	r2, [pc, #140]	; (8010280 <TIM_Base_SetConfig+0xc4>)
 80101f4:	4290      	cmp	r0, r2
 80101f6:	d01d      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 80101f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80101fc:	d01a      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 80101fe:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8010202:	4290      	cmp	r0, r2
 8010204:	d016      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 8010206:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801020a:	4290      	cmp	r0, r2
 801020c:	d012      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 801020e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010212:	4290      	cmp	r0, r2
 8010214:	d00e      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 8010216:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801021a:	4290      	cmp	r0, r2
 801021c:	d00a      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 801021e:	4a19      	ldr	r2, [pc, #100]	; (8010284 <TIM_Base_SetConfig+0xc8>)
 8010220:	4290      	cmp	r0, r2
 8010222:	d007      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 8010224:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010228:	4290      	cmp	r0, r2
 801022a:	d003      	beq.n	8010234 <TIM_Base_SetConfig+0x78>
 801022c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010230:	4290      	cmp	r0, r2
 8010232:	d103      	bne.n	801023c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010238:	68ca      	ldr	r2, [r1, #12]
 801023a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801023c:	694a      	ldr	r2, [r1, #20]
 801023e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010242:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8010244:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010246:	688b      	ldr	r3, [r1, #8]
 8010248:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801024a:	680b      	ldr	r3, [r1, #0]
 801024c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801024e:	4b0c      	ldr	r3, [pc, #48]	; (8010280 <TIM_Base_SetConfig+0xc4>)
 8010250:	4298      	cmp	r0, r3
 8010252:	d00f      	beq.n	8010274 <TIM_Base_SetConfig+0xb8>
 8010254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010258:	4298      	cmp	r0, r3
 801025a:	d00b      	beq.n	8010274 <TIM_Base_SetConfig+0xb8>
 801025c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8010260:	4298      	cmp	r0, r3
 8010262:	d007      	beq.n	8010274 <TIM_Base_SetConfig+0xb8>
 8010264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010268:	4298      	cmp	r0, r3
 801026a:	d003      	beq.n	8010274 <TIM_Base_SetConfig+0xb8>
 801026c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010270:	4298      	cmp	r0, r3
 8010272:	d101      	bne.n	8010278 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010274:	690b      	ldr	r3, [r1, #16]
 8010276:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010278:	2301      	movs	r3, #1
 801027a:	6143      	str	r3, [r0, #20]
}
 801027c:	4770      	bx	lr
 801027e:	bf00      	nop
 8010280:	40010000 	.word	0x40010000
 8010284:	40014000 	.word	0x40014000

08010288 <HAL_TIM_Base_Init>:
{
 8010288:	b510      	push	{r4, lr}
  if (htim == NULL)
 801028a:	4604      	mov	r4, r0
 801028c:	b350      	cbz	r0, 80102e4 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 801028e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8010292:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010296:	b91b      	cbnz	r3, 80102a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8010298:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 801029c:	f7ff fe61 	bl	800ff62 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80102a0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102a2:	6820      	ldr	r0, [r4, #0]
 80102a4:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80102a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102aa:	f7ff ff87 	bl	80101bc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102ae:	2301      	movs	r3, #1
  return HAL_OK;
 80102b0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102b2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80102ba:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80102be:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80102c2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80102c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80102ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80102d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80102da:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80102de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80102e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80102e4:	2001      	movs	r0, #1
 80102e6:	e7fc      	b.n	80102e2 <HAL_TIM_Base_Init+0x5a>

080102e8 <HAL_TIMEx_CommutCallback>:
 80102e8:	4770      	bx	lr

080102ea <HAL_TIMEx_BreakCallback>:
 80102ea:	4770      	bx	lr

080102ec <HAL_TIMEx_Break2Callback>:
 80102ec:	4770      	bx	lr

080102ee <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80102ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80102f2:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80102f4:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80102f8:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80102fc:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8010300:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8010304:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8010308:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801030a:	b9a2      	cbnz	r2, 8010336 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801030c:	ea43 0209 	orr.w	r2, r3, r9
 8010310:	6801      	ldr	r1, [r0, #0]
 8010312:	432a      	orrs	r2, r5
 8010314:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8010318:	ea42 0308 	orr.w	r3, r2, r8
 801031c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8010320:	ea43 030e 	orr.w	r3, r3, lr
 8010324:	ea43 030c 	orr.w	r3, r3, ip
 8010328:	433b      	orrs	r3, r7
 801032a:	4333      	orrs	r3, r6
 801032c:	430b      	orrs	r3, r1
 801032e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8010330:	2000      	movs	r0, #0
 8010332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010336:	6802      	ldr	r2, [r0, #0]
 8010338:	ea43 0309 	orr.w	r3, r3, r9
 801033c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8010340:	4313      	orrs	r3, r2
 8010342:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010344:	ea45 0308 	orr.w	r3, r5, r8
 8010348:	6842      	ldr	r2, [r0, #4]
 801034a:	ea43 030e 	orr.w	r3, r3, lr
 801034e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8010352:	ea43 030c 	orr.w	r3, r3, ip
 8010356:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 801035a:	433b      	orrs	r3, r7
 801035c:	4333      	orrs	r3, r6
 801035e:	4313      	orrs	r3, r2
 8010360:	6043      	str	r3, [r0, #4]
 8010362:	e7e5      	b.n	8010330 <FMC_SDRAM_Init+0x42>

08010364 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010364:	68cb      	ldr	r3, [r1, #12]
 8010366:	f103 3cff 	add.w	ip, r3, #4294967295
 801036a:	694b      	ldr	r3, [r1, #20]
{
 801036c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801036e:	3b01      	subs	r3, #1
 8010370:	680f      	ldr	r7, [r1, #0]
 8010372:	684c      	ldr	r4, [r1, #4]
 8010374:	688e      	ldr	r6, [r1, #8]
 8010376:	051b      	lsls	r3, r3, #20
 8010378:	690d      	ldr	r5, [r1, #16]
 801037a:	3c01      	subs	r4, #1
 801037c:	6989      	ldr	r1, [r1, #24]
 801037e:	3e01      	subs	r6, #1
 8010380:	3d01      	subs	r5, #1
 8010382:	3f01      	subs	r7, #1
 8010384:	3901      	subs	r1, #1
 8010386:	0124      	lsls	r4, r4, #4
 8010388:	0236      	lsls	r6, r6, #8
 801038a:	042d      	lsls	r5, r5, #16
 801038c:	0609      	lsls	r1, r1, #24
 801038e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8010392:	b95a      	cbnz	r2, 80103ac <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010394:	433b      	orrs	r3, r7
 8010396:	6882      	ldr	r2, [r0, #8]
 8010398:	4323      	orrs	r3, r4
 801039a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 801039e:	4333      	orrs	r3, r6
 80103a0:	432b      	orrs	r3, r5
 80103a2:	430b      	orrs	r3, r1
 80103a4:	4313      	orrs	r3, r2
 80103a6:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 80103a8:	2000      	movs	r0, #0
 80103aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103ac:	6882      	ldr	r2, [r0, #8]
 80103ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80103b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80103b6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80103b8:	ea44 0306 	orr.w	r3, r4, r6
 80103bc:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80103be:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80103c0:	68c2      	ldr	r2, [r0, #12]
 80103c2:	432b      	orrs	r3, r5
 80103c4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80103c8:	430b      	orrs	r3, r1
 80103ca:	4313      	orrs	r3, r2
 80103cc:	60c3      	str	r3, [r0, #12]
 80103ce:	e7eb      	b.n	80103a8 <FMC_SDRAM_Timing_Init+0x44>

080103d0 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80103d0:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 80103d4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80103d8:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80103dc:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80103e0:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 80103e2:	2300      	movs	r3, #0
 80103e4:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 80103e6:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 80103e8:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	4770      	bx	lr

080103ee <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80103ee:	6902      	ldr	r2, [r0, #16]
{
 80103f0:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80103f2:	e9d1 3400 	ldrd	r3, r4, [r1]
 80103f6:	0d92      	lsrs	r2, r2, #22
 80103f8:	4323      	orrs	r3, r4
 80103fa:	68cc      	ldr	r4, [r1, #12]
 80103fc:	0592      	lsls	r2, r2, #22
 80103fe:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8010402:	4313      	orrs	r3, r2
 8010404:	688a      	ldr	r2, [r1, #8]
 8010406:	3a01      	subs	r2, #1
 8010408:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 801040c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 801040e:	2000      	movs	r0, #0
 8010410:	bd10      	pop	{r4, pc}

08010412 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8010412:	6943      	ldr	r3, [r0, #20]
 8010414:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8010418:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 801041c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8010420:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8010422:	2000      	movs	r0, #0
 8010424:	4770      	bx	lr

08010426 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010426:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8010428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801042c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801042e:	f001 fe03 	bl	8012038 <xTaskGetSchedulerState>
 8010432:	2801      	cmp	r0, #1
 8010434:	d003      	beq.n	801043e <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8010436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 801043a:	f000 bbcb 	b.w	8010bd4 <xPortSysTickHandler>
}
 801043e:	bd08      	pop	{r3, pc}

08010440 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010440:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8010444:	b92b      	cbnz	r3, 8010452 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8010446:	4b06      	ldr	r3, [pc, #24]	; (8010460 <osKernelInitialize+0x20>)
 8010448:	6818      	ldr	r0, [r3, #0]
 801044a:	b928      	cbnz	r0, 8010458 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801044c:	2201      	movs	r2, #1
 801044e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010450:	4770      	bx	lr
    stat = osErrorISR;
 8010452:	f06f 0005 	mvn.w	r0, #5
 8010456:	4770      	bx	lr
    } else {
      stat = osError;
 8010458:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 801045c:	4770      	bx	lr
 801045e:	bf00      	nop
 8010460:	24007560 	.word	0x24007560

08010464 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010464:	b510      	push	{r4, lr}
 8010466:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 801046a:	b95c      	cbnz	r4, 8010484 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 801046c:	4b08      	ldr	r3, [pc, #32]	; (8010490 <osKernelStart+0x2c>)
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	2a01      	cmp	r2, #1
 8010472:	d10a      	bne.n	801048a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010474:	4a07      	ldr	r2, [pc, #28]	; (8010494 <osKernelStart+0x30>)
 8010476:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010478:	2202      	movs	r2, #2
 801047a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801047c:	f001 fc80 	bl	8011d80 <vTaskStartScheduler>
      stat = osOK;
 8010480:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8010482:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8010484:	f06f 0005 	mvn.w	r0, #5
 8010488:	e7fb      	b.n	8010482 <osKernelStart+0x1e>
      stat = osError;
 801048a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 801048e:	e7f8      	b.n	8010482 <osKernelStart+0x1e>
 8010490:	24007560 	.word	0x24007560
 8010494:	e000ed00 	.word	0xe000ed00

08010498 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010498:	b5f0      	push	{r4, r5, r6, r7, lr}
 801049a:	4614      	mov	r4, r2
 801049c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801049e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80104a0:	460b      	mov	r3, r1
  hTask = NULL;
 80104a2:	9205      	str	r2, [sp, #20]
 80104a4:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80104a8:	b9d2      	cbnz	r2, 80104e0 <osThreadNew+0x48>
 80104aa:	b1c8      	cbz	r0, 80104e0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80104ac:	2c00      	cmp	r4, #0
 80104ae:	d02f      	beq.n	8010510 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80104b0:	69a5      	ldr	r5, [r4, #24]
 80104b2:	2d00      	cmp	r5, #0
 80104b4:	bf08      	it	eq
 80104b6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80104b8:	1e69      	subs	r1, r5, #1
 80104ba:	46ac      	mov	ip, r5
 80104bc:	2937      	cmp	r1, #55	; 0x37
 80104be:	d82b      	bhi.n	8010518 <osThreadNew+0x80>
 80104c0:	6861      	ldr	r1, [r4, #4]
 80104c2:	07c9      	lsls	r1, r1, #31
 80104c4:	d428      	bmi.n	8010518 <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80104c6:	6966      	ldr	r6, [r4, #20]
 80104c8:	b16e      	cbz	r6, 80104e6 <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80104ca:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80104cc:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104ce:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80104d2:	b157      	cbz	r7, 80104ea <osThreadNew+0x52>
 80104d4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80104d8:	d902      	bls.n	80104e0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104da:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80104dc:	b104      	cbz	r4, 80104e0 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80104de:	b9ee      	cbnz	r6, 801051c <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80104e0:	9805      	ldr	r0, [sp, #20]
}
 80104e2:	b007      	add	sp, #28
 80104e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80104e6:	2280      	movs	r2, #128	; 0x80
 80104e8:	e7f0      	b.n	80104cc <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80104ea:	f1be 0f00 	cmp.w	lr, #0
 80104ee:	d1f7      	bne.n	80104e0 <osThreadNew+0x48>
      if (mem == 0) {
 80104f0:	6924      	ldr	r4, [r4, #16]
 80104f2:	2c00      	cmp	r4, #0
 80104f4:	d1f4      	bne.n	80104e0 <osThreadNew+0x48>
 80104f6:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80104f8:	a905      	add	r1, sp, #20
 80104fa:	b292      	uxth	r2, r2
 80104fc:	e9cd c100 	strd	ip, r1, [sp]
 8010500:	4621      	mov	r1, r4
 8010502:	f001 fadc 	bl	8011abe <xTaskCreate>
 8010506:	2801      	cmp	r0, #1
            hTask = NULL;
 8010508:	bf1c      	itt	ne
 801050a:	2300      	movne	r3, #0
 801050c:	9305      	strne	r3, [sp, #20]
 801050e:	e7e7      	b.n	80104e0 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8010510:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8010514:	2280      	movs	r2, #128	; 0x80
 8010516:	e7ef      	b.n	80104f8 <osThreadNew+0x60>
        return (NULL);
 8010518:	4610      	mov	r0, r2
 801051a:	e7e2      	b.n	80104e2 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801051c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8010520:	9500      	str	r5, [sp, #0]
 8010522:	f001 fa94 	bl	8011a4e <xTaskCreateStatic>
 8010526:	9005      	str	r0, [sp, #20]
 8010528:	e7da      	b.n	80104e0 <osThreadNew+0x48>

0801052a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801052a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801052c:	4604      	mov	r4, r0
 801052e:	460e      	mov	r6, r1
 8010530:	4615      	mov	r5, r2
 8010532:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010536:	b11a      	cbz	r2, 8010540 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 8010538:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 801053a:	4620      	mov	r0, r4
 801053c:	b003      	add	sp, #12
 801053e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010540:	2800      	cmp	r0, #0
 8010542:	d0f9      	beq.n	8010538 <osSemaphoreNew+0xe>
 8010544:	4288      	cmp	r0, r1
 8010546:	d3f7      	bcc.n	8010538 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 8010548:	b1e5      	cbz	r5, 8010584 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801054a:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 801054e:	b1bb      	cbz	r3, 8010580 <osSemaphoreNew+0x56>
 8010550:	2f4f      	cmp	r7, #79	; 0x4f
 8010552:	d9f1      	bls.n	8010538 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8010554:	2801      	cmp	r0, #1
 8010556:	d12a      	bne.n	80105ae <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010558:	2103      	movs	r1, #3
 801055a:	9100      	str	r1, [sp, #0]
 801055c:	4611      	mov	r1, r2
 801055e:	f000 fce1 	bl	8010f24 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8010562:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010564:	2800      	cmp	r0, #0
 8010566:	d0e7      	beq.n	8010538 <osSemaphoreNew+0xe>
 8010568:	b1de      	cbz	r6, 80105a2 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801056a:	2300      	movs	r3, #0
 801056c:	461a      	mov	r2, r3
 801056e:	4619      	mov	r1, r3
 8010570:	f000 fd8d 	bl	801108e <xQueueGenericSend>
 8010574:	2801      	cmp	r0, #1
 8010576:	d014      	beq.n	80105a2 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 8010578:	4620      	mov	r0, r4
 801057a:	f001 f8c9 	bl	8011710 <vQueueDelete>
 801057e:	e7db      	b.n	8010538 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010580:	2f00      	cmp	r7, #0
 8010582:	d1d9      	bne.n	8010538 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8010584:	2c01      	cmp	r4, #1
 8010586:	d105      	bne.n	8010594 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8010588:	2203      	movs	r2, #3
 801058a:	2100      	movs	r1, #0
 801058c:	4620      	mov	r0, r4
 801058e:	f000 fd17 	bl	8010fc0 <xQueueGenericCreate>
 8010592:	e7e6      	b.n	8010562 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010594:	4620      	mov	r0, r4
 8010596:	4631      	mov	r1, r6
 8010598:	f000 fd5b 	bl	8011052 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 801059c:	4604      	mov	r4, r0
 801059e:	2800      	cmp	r0, #0
 80105a0:	d0ca      	beq.n	8010538 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 80105a2:	b955      	cbnz	r5, 80105ba <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 80105a4:	4629      	mov	r1, r5
 80105a6:	4620      	mov	r0, r4
 80105a8:	f001 f88c 	bl	80116c4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 80105ac:	e7c5      	b.n	801053a <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80105ae:	461a      	mov	r2, r3
 80105b0:	f000 fd2d 	bl	801100e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80105b4:	4604      	mov	r4, r0
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d0be      	beq.n	8010538 <osSemaphoreNew+0xe>
          name = attr->name;
 80105ba:	682d      	ldr	r5, [r5, #0]
 80105bc:	e7f2      	b.n	80105a4 <osSemaphoreNew+0x7a>

080105be <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80105be:	b513      	push	{r0, r1, r4, lr}
 80105c0:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80105c2:	b308      	cbz	r0, 8010608 <osSemaphoreAcquire+0x4a>
 80105c4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80105c8:	b1b3      	cbz	r3, 80105f8 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 80105ca:	b9e9      	cbnz	r1, 8010608 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105cc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80105ce:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105d0:	f001 f828 	bl	8011624 <xQueueReceiveFromISR>
 80105d4:	2801      	cmp	r0, #1
 80105d6:	d114      	bne.n	8010602 <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80105d8:	9b01      	ldr	r3, [sp, #4]
 80105da:	b913      	cbnz	r3, 80105e2 <osSemaphoreAcquire+0x24>
  stat = osOK;
 80105dc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80105de:	b002      	add	sp, #8
 80105e0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80105e2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80105e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	f3bf 8f6f 	isb	sy
 80105f6:	e7f1      	b.n	80105dc <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80105f8:	f000 ff51 	bl	801149e <xQueueSemaphoreTake>
 80105fc:	2801      	cmp	r0, #1
 80105fe:	d0ed      	beq.n	80105dc <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 8010600:	b92c      	cbnz	r4, 801060e <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 8010602:	f06f 0002 	mvn.w	r0, #2
 8010606:	e7ea      	b.n	80105de <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010608:	f06f 0003 	mvn.w	r0, #3
 801060c:	e7e7      	b.n	80105de <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 801060e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8010612:	e7e4      	b.n	80105de <osSemaphoreAcquire+0x20>

08010614 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010614:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8010616:	b310      	cbz	r0, 801065e <osSemaphoreRelease+0x4a>
 8010618:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 801061c:	b1b3      	cbz	r3, 801064c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 801061e:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010620:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8010622:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010624:	f000 fe48 	bl	80112b8 <xQueueGiveFromISR>
 8010628:	2801      	cmp	r0, #1
 801062a:	d115      	bne.n	8010658 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 801062c:	9b01      	ldr	r3, [sp, #4]
 801062e:	b913      	cbnz	r3, 8010636 <osSemaphoreRelease+0x22>
  stat = osOK;
 8010630:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8010632:	b002      	add	sp, #8
 8010634:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8010636:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801063a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801063e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	f3bf 8f6f 	isb	sy
 801064a:	e7f1      	b.n	8010630 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801064c:	461a      	mov	r2, r3
 801064e:	4619      	mov	r1, r3
 8010650:	f000 fd1d 	bl	801108e <xQueueGenericSend>
 8010654:	2801      	cmp	r0, #1
 8010656:	d0eb      	beq.n	8010630 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 8010658:	f06f 0002 	mvn.w	r0, #2
 801065c:	e7e9      	b.n	8010632 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801065e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8010662:	e7e6      	b.n	8010632 <osSemaphoreRelease+0x1e>

08010664 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010666:	4605      	mov	r5, r0
 8010668:	460e      	mov	r6, r1
 801066a:	4614      	mov	r4, r2
 801066c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010670:	b11f      	cbz	r7, 801067a <osMessageQueueNew+0x16>
  hQueue = NULL;
 8010672:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8010674:	4628      	mov	r0, r5
 8010676:	b003      	add	sp, #12
 8010678:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801067a:	2800      	cmp	r0, #0
 801067c:	d0f9      	beq.n	8010672 <osMessageQueueNew+0xe>
 801067e:	2900      	cmp	r1, #0
 8010680:	d0f7      	beq.n	8010672 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8010682:	b1da      	cbz	r2, 80106bc <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010684:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8010688:	b183      	cbz	r3, 80106ac <osMessageQueueNew+0x48>
 801068a:	2a4f      	cmp	r2, #79	; 0x4f
 801068c:	d9f1      	bls.n	8010672 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801068e:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010690:	2a00      	cmp	r2, #0
 8010692:	d0ee      	beq.n	8010672 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010694:	434d      	muls	r5, r1
 8010696:	6966      	ldr	r6, [r4, #20]
 8010698:	42ae      	cmp	r6, r5
 801069a:	d3ea      	bcc.n	8010672 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801069c:	9700      	str	r7, [sp, #0]
 801069e:	f000 fc41 	bl	8010f24 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80106a2:	4605      	mov	r5, r0
 80106a4:	2800      	cmp	r0, #0
 80106a6:	d0e4      	beq.n	8010672 <osMessageQueueNew+0xe>
        name = attr->name;
 80106a8:	6824      	ldr	r4, [r4, #0]
 80106aa:	e011      	b.n	80106d0 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80106ac:	2a00      	cmp	r2, #0
 80106ae:	d1e0      	bne.n	8010672 <osMessageQueueNew+0xe>
 80106b0:	6923      	ldr	r3, [r4, #16]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1dd      	bne.n	8010672 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80106b6:	6963      	ldr	r3, [r4, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d1da      	bne.n	8010672 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 80106bc:	4628      	mov	r0, r5
 80106be:	2200      	movs	r2, #0
 80106c0:	4631      	mov	r1, r6
 80106c2:	f000 fc7d 	bl	8010fc0 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80106c6:	4605      	mov	r5, r0
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d0d2      	beq.n	8010672 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 80106cc:	2c00      	cmp	r4, #0
 80106ce:	d1eb      	bne.n	80106a8 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 80106d0:	4621      	mov	r1, r4
 80106d2:	4628      	mov	r0, r5
 80106d4:	f000 fff6 	bl	80116c4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80106d8:	e7cc      	b.n	8010674 <osMessageQueueNew+0x10>

080106da <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80106da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106dc:	461c      	mov	r4, r3
 80106de:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80106e2:	b1c6      	cbz	r6, 8010716 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80106e4:	b318      	cbz	r0, 801072e <osMessageQueuePut+0x54>
 80106e6:	b311      	cbz	r1, 801072e <osMessageQueuePut+0x54>
 80106e8:	bb0b      	cbnz	r3, 801072e <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80106ea:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80106ec:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80106ee:	f000 fd81 	bl	80111f4 <xQueueGenericSendFromISR>
 80106f2:	2801      	cmp	r0, #1
 80106f4:	d118      	bne.n	8010728 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80106f6:	9b01      	ldr	r3, [sp, #4]
 80106f8:	b913      	cbnz	r3, 8010700 <osMessageQueuePut+0x26>
  stat = osOK;
 80106fa:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80106fc:	b002      	add	sp, #8
 80106fe:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8010700:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010708:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	e7f1      	b.n	80106fa <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010716:	b150      	cbz	r0, 801072e <osMessageQueuePut+0x54>
 8010718:	b149      	cbz	r1, 801072e <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801071a:	4633      	mov	r3, r6
 801071c:	4622      	mov	r2, r4
 801071e:	f000 fcb6 	bl	801108e <xQueueGenericSend>
 8010722:	2801      	cmp	r0, #1
 8010724:	d0e9      	beq.n	80106fa <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 8010726:	b92c      	cbnz	r4, 8010734 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 8010728:	f06f 0002 	mvn.w	r0, #2
 801072c:	e7e6      	b.n	80106fc <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 801072e:	f06f 0003 	mvn.w	r0, #3
 8010732:	e7e3      	b.n	80106fc <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 8010734:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8010738:	e7e0      	b.n	80106fc <osMessageQueuePut+0x22>

0801073a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801073a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801073c:	461c      	mov	r4, r3
 801073e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8010742:	b1c3      	cbz	r3, 8010776 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010744:	b310      	cbz	r0, 801078c <osMessageQueueGet+0x52>
 8010746:	b309      	cbz	r1, 801078c <osMessageQueueGet+0x52>
 8010748:	bb04      	cbnz	r4, 801078c <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801074a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 801074c:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801074e:	f000 ff69 	bl	8011624 <xQueueReceiveFromISR>
 8010752:	2801      	cmp	r0, #1
 8010754:	d117      	bne.n	8010786 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8010756:	9b01      	ldr	r3, [sp, #4]
 8010758:	b913      	cbnz	r3, 8010760 <osMessageQueueGet+0x26>
  stat = osOK;
 801075a:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 801075c:	b003      	add	sp, #12
 801075e:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8010760:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010768:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801076c:	f3bf 8f4f 	dsb	sy
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	e7f1      	b.n	801075a <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010776:	b148      	cbz	r0, 801078c <osMessageQueueGet+0x52>
 8010778:	b141      	cbz	r1, 801078c <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801077a:	4622      	mov	r2, r4
 801077c:	f000 fdf0 	bl	8011360 <xQueueReceive>
 8010780:	2801      	cmp	r0, #1
 8010782:	d0ea      	beq.n	801075a <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8010784:	b92c      	cbnz	r4, 8010792 <osMessageQueueGet+0x58>
          stat = osErrorResource;
 8010786:	f06f 0002 	mvn.w	r0, #2
 801078a:	e7e7      	b.n	801075c <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 801078c:	f06f 0003 	mvn.w	r0, #3
 8010790:	e7e4      	b.n	801075c <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8010792:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8010796:	e7e1      	b.n	801075c <osMessageQueueGet+0x22>

08010798 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010798:	4b03      	ldr	r3, [pc, #12]	; (80107a8 <vApplicationGetIdleTaskMemory+0x10>)
 801079a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801079c:	4b03      	ldr	r3, [pc, #12]	; (80107ac <vApplicationGetIdleTaskMemory+0x14>)
 801079e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80107a0:	2380      	movs	r3, #128	; 0x80
 80107a2:	6013      	str	r3, [r2, #0]
}
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	24007500 	.word	0x24007500
 80107ac:	24007300 	.word	0x24007300

080107b0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80107b0:	4b03      	ldr	r3, [pc, #12]	; (80107c0 <vApplicationGetTimerTaskMemory+0x10>)
 80107b2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <vApplicationGetTimerTaskMemory+0x14>)
 80107b6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80107b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107bc:	6013      	str	r3, [r2, #0]
}
 80107be:	4770      	bx	lr
 80107c0:	24007964 	.word	0x24007964
 80107c4:	24007564 	.word	0x24007564

080107c8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107c8:	4b0f      	ldr	r3, [pc, #60]	; (8010808 <prvInsertBlockIntoFreeList+0x40>)
{
 80107ca:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107cc:	461a      	mov	r2, r3
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	4283      	cmp	r3, r0
 80107d2:	d3fb      	bcc.n	80107cc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107d4:	6854      	ldr	r4, [r2, #4]
 80107d6:	1911      	adds	r1, r2, r4
 80107d8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80107da:	bf01      	itttt	eq
 80107dc:	6841      	ldreq	r1, [r0, #4]
 80107de:	4610      	moveq	r0, r2
 80107e0:	1909      	addeq	r1, r1, r4
 80107e2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80107e4:	6844      	ldr	r4, [r0, #4]
 80107e6:	1901      	adds	r1, r0, r4
 80107e8:	428b      	cmp	r3, r1
 80107ea:	d107      	bne.n	80107fc <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80107ec:	4907      	ldr	r1, [pc, #28]	; (801080c <prvInsertBlockIntoFreeList+0x44>)
 80107ee:	6809      	ldr	r1, [r1, #0]
 80107f0:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107f2:	bf1f      	itttt	ne
 80107f4:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80107f6:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80107f8:	1909      	addne	r1, r1, r4
 80107fa:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80107fc:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80107fe:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010800:	bf18      	it	ne
 8010802:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010804:	bd10      	pop	{r4, pc}
 8010806:	bf00      	nop
 8010808:	2400f9dc 	.word	0x2400f9dc
 801080c:	240079c4 	.word	0x240079c4

08010810 <pvPortMalloc>:
{
 8010810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010814:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8010816:	f001 f97f 	bl	8011b18 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801081a:	4842      	ldr	r0, [pc, #264]	; (8010924 <pvPortMalloc+0x114>)
 801081c:	4d42      	ldr	r5, [pc, #264]	; (8010928 <pvPortMalloc+0x118>)
 801081e:	6803      	ldr	r3, [r0, #0]
 8010820:	bb0b      	cbnz	r3, 8010866 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8010822:	4942      	ldr	r1, [pc, #264]	; (801092c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010824:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010826:	4e42      	ldr	r6, [pc, #264]	; (8010930 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010828:	bf1b      	ittet	ne
 801082a:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801082c:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010830:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010834:	f023 0307 	bicne.w	r3, r3, #7
 8010838:	bf1c      	itt	ne
 801083a:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801083c:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 801083e:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010840:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010842:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010844:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8010846:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010848:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 801084c:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010850:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8010852:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010854:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010858:	4a36      	ldr	r2, [pc, #216]	; (8010934 <pvPortMalloc+0x124>)
 801085a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801085c:	4a36      	ldr	r2, [pc, #216]	; (8010938 <pvPortMalloc+0x128>)
 801085e:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010864:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010866:	682f      	ldr	r7, [r5, #0]
 8010868:	4227      	tst	r7, r4
 801086a:	d155      	bne.n	8010918 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 801086c:	2c00      	cmp	r4, #0
 801086e:	d046      	beq.n	80108fe <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8010870:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010874:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010876:	bf1c      	itt	ne
 8010878:	f023 0307 	bicne.w	r3, r3, #7
 801087c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801087e:	2b00      	cmp	r3, #0
 8010880:	d04a      	beq.n	8010918 <pvPortMalloc+0x108>
 8010882:	4c2d      	ldr	r4, [pc, #180]	; (8010938 <pvPortMalloc+0x128>)
 8010884:	6826      	ldr	r6, [r4, #0]
 8010886:	429e      	cmp	r6, r3
 8010888:	d346      	bcc.n	8010918 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 801088a:	4a29      	ldr	r2, [pc, #164]	; (8010930 <pvPortMalloc+0x120>)
 801088c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801088e:	6869      	ldr	r1, [r5, #4]
 8010890:	4299      	cmp	r1, r3
 8010892:	d204      	bcs.n	801089e <pvPortMalloc+0x8e>
 8010894:	f8d5 c000 	ldr.w	ip, [r5]
 8010898:	f1bc 0f00 	cmp.w	ip, #0
 801089c:	d115      	bne.n	80108ca <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 801089e:	6800      	ldr	r0, [r0, #0]
 80108a0:	42a8      	cmp	r0, r5
 80108a2:	d039      	beq.n	8010918 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108a4:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108a6:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108a8:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108ac:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80108ae:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80108b0:	d912      	bls.n	80108d8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80108b2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108b4:	0742      	lsls	r2, r0, #29
 80108b6:	d00b      	beq.n	80108d0 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	e7fe      	b.n	80108c8 <pvPortMalloc+0xb8>
 80108ca:	462a      	mov	r2, r5
 80108cc:	4665      	mov	r5, ip
 80108ce:	e7de      	b.n	801088e <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108d0:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108d2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108d4:	f7ff ff78 	bl	80107c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108d8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108da:	4916      	ldr	r1, [pc, #88]	; (8010934 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108dc:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108de:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 80108e0:	4a16      	ldr	r2, [pc, #88]	; (801093c <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 80108e2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108e4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80108e6:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 80108e8:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108ea:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108ec:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80108ee:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 80108f2:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108f6:	bf38      	it	cc
 80108f8:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108fa:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 80108fc:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 80108fe:	f001 f9af 	bl	8011c60 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010902:	0763      	lsls	r3, r4, #29
 8010904:	d00a      	beq.n	801091c <pvPortMalloc+0x10c>
 8010906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	e7fe      	b.n	8010916 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8010918:	2400      	movs	r4, #0
 801091a:	e7f0      	b.n	80108fe <pvPortMalloc+0xee>
}
 801091c:	4620      	mov	r0, r4
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010922:	bf00      	nop
 8010924:	240079c4 	.word	0x240079c4
 8010928:	2400f9c8 	.word	0x2400f9c8
 801092c:	240079c8 	.word	0x240079c8
 8010930:	2400f9dc 	.word	0x2400f9dc
 8010934:	2400f9d0 	.word	0x2400f9d0
 8010938:	2400f9cc 	.word	0x2400f9cc
 801093c:	2400f9d4 	.word	0x2400f9d4

08010940 <vPortFree>:
{
 8010940:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010942:	4604      	mov	r4, r0
 8010944:	b390      	cbz	r0, 80109ac <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010946:	4a1a      	ldr	r2, [pc, #104]	; (80109b0 <vPortFree+0x70>)
 8010948:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	4213      	tst	r3, r2
 8010950:	d108      	bne.n	8010964 <vPortFree+0x24>
 8010952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	e7fe      	b.n	8010962 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010964:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8010968:	b141      	cbz	r1, 801097c <vPortFree+0x3c>
 801096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	e7fe      	b.n	801097a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801097c:	ea23 0302 	bic.w	r3, r3, r2
 8010980:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8010984:	f001 f8c8 	bl	8011b18 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010988:	4a0a      	ldr	r2, [pc, #40]	; (80109b4 <vPortFree+0x74>)
 801098a:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801098e:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010992:	6811      	ldr	r1, [r2, #0]
 8010994:	440b      	add	r3, r1
 8010996:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010998:	f7ff ff16 	bl	80107c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801099c:	4a06      	ldr	r2, [pc, #24]	; (80109b8 <vPortFree+0x78>)
 801099e:	6813      	ldr	r3, [r2, #0]
 80109a0:	3301      	adds	r3, #1
}
 80109a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 80109a6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80109a8:	f001 b95a 	b.w	8011c60 <xTaskResumeAll>
}
 80109ac:	bd10      	pop	{r4, pc}
 80109ae:	bf00      	nop
 80109b0:	2400f9c8 	.word	0x2400f9c8
 80109b4:	2400f9cc 	.word	0x2400f9cc
 80109b8:	2400f9d8 	.word	0x2400f9d8

080109bc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109bc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80109c0:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109c4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109c6:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80109c8:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80109cc:	2300      	movs	r3, #0
 80109ce:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80109d0:	4770      	bx	lr

080109d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80109d2:	2300      	movs	r3, #0
 80109d4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80109d6:	4770      	bx	lr

080109d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80109d8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109da:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80109dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109de:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109e0:	689a      	ldr	r2, [r3, #8]
 80109e2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109e4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80109e6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80109e8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80109ea:	3301      	adds	r3, #1
 80109ec:	6003      	str	r3, [r0, #0]
}
 80109ee:	4770      	bx	lr

080109f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109f0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80109f2:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109f4:	1c63      	adds	r3, r4, #1
 80109f6:	d10a      	bne.n	8010a0e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109f8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80109fa:	685a      	ldr	r2, [r3, #4]
 80109fc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80109fe:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a00:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a02:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8010a04:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8010a06:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8010a08:	3301      	adds	r3, #1
 8010a0a:	6003      	str	r3, [r0, #0]
}
 8010a0c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010a0e:	f100 0208 	add.w	r2, r0, #8
 8010a12:	4613      	mov	r3, r2
 8010a14:	6852      	ldr	r2, [r2, #4]
 8010a16:	6815      	ldr	r5, [r2, #0]
 8010a18:	42a5      	cmp	r5, r4
 8010a1a:	d9fa      	bls.n	8010a12 <vListInsert+0x22>
 8010a1c:	e7ed      	b.n	80109fa <vListInsert+0xa>

08010a1e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a1e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a20:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8010a24:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a26:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a28:	6859      	ldr	r1, [r3, #4]
 8010a2a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a2c:	bf08      	it	eq
 8010a2e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a30:	2200      	movs	r2, #0
 8010a32:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8010a34:	681a      	ldr	r2, [r3, #0]
 8010a36:	3a01      	subs	r2, #1
 8010a38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a3a:	6818      	ldr	r0, [r3, #0]
}
 8010a3c:	4770      	bx	lr
	...

08010a40 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010a40:	4808      	ldr	r0, [pc, #32]	; (8010a64 <prvPortStartFirstTask+0x24>)
 8010a42:	6800      	ldr	r0, [r0, #0]
 8010a44:	6800      	ldr	r0, [r0, #0]
 8010a46:	f380 8808 	msr	MSP, r0
 8010a4a:	f04f 0000 	mov.w	r0, #0
 8010a4e:	f380 8814 	msr	CONTROL, r0
 8010a52:	b662      	cpsie	i
 8010a54:	b661      	cpsie	f
 8010a56:	f3bf 8f4f 	dsb	sy
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	df00      	svc	0
 8010a60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010a62:	0000      	.short	0x0000
 8010a64:	e000ed08 	.word	0xe000ed08

08010a68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a68:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a78 <vPortEnableVFP+0x10>
 8010a6c:	6801      	ldr	r1, [r0, #0]
 8010a6e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a72:	6001      	str	r1, [r0, #0]
 8010a74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a76:	0000      	.short	0x0000
 8010a78:	e000ed88 	.word	0xe000ed88

08010a7c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8010a7c:	2300      	movs	r3, #0
{
 8010a7e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8010a80:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8010a82:	4b0d      	ldr	r3, [pc, #52]	; (8010ab8 <prvTaskExitError+0x3c>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3301      	adds	r3, #1
 8010a88:	d008      	beq.n	8010a9c <prvTaskExitError+0x20>
 8010a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a8e:	f383 8811 	msr	BASEPRI, r3
 8010a92:	f3bf 8f6f 	isb	sy
 8010a96:	f3bf 8f4f 	dsb	sy
 8010a9a:	e7fe      	b.n	8010a9a <prvTaskExitError+0x1e>
 8010a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa0:	f383 8811 	msr	BASEPRI, r3
 8010aa4:	f3bf 8f6f 	isb	sy
 8010aa8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8010aac:	9b01      	ldr	r3, [sp, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d0fc      	beq.n	8010aac <prvTaskExitError+0x30>
}
 8010ab2:	b002      	add	sp, #8
 8010ab4:	4770      	bx	lr
 8010ab6:	bf00      	nop
 8010ab8:	24000058 	.word	0x24000058

08010abc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ac0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ac4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8010ac8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010aca:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010acc:	4b03      	ldr	r3, [pc, #12]	; (8010adc <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ace:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ad0:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ad2:	f06f 0302 	mvn.w	r3, #2
 8010ad6:	6203      	str	r3, [r0, #32]
}
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop
 8010adc:	08010a7d 	.word	0x08010a7d

08010ae0 <SVC_Handler>:
	__asm volatile (
 8010ae0:	4b07      	ldr	r3, [pc, #28]	; (8010b00 <pxCurrentTCBConst2>)
 8010ae2:	6819      	ldr	r1, [r3, #0]
 8010ae4:	6808      	ldr	r0, [r1, #0]
 8010ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aea:	f380 8809 	msr	PSP, r0
 8010aee:	f3bf 8f6f 	isb	sy
 8010af2:	f04f 0000 	mov.w	r0, #0
 8010af6:	f380 8811 	msr	BASEPRI, r0
 8010afa:	4770      	bx	lr
 8010afc:	f3af 8000 	nop.w

08010b00 <pxCurrentTCBConst2>:
 8010b00:	2400fa2c 	.word	0x2400fa2c

08010b04 <vPortEnterCritical>:
 8010b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8010b14:	4a0a      	ldr	r2, [pc, #40]	; (8010b40 <vPortEnterCritical+0x3c>)
 8010b16:	6813      	ldr	r3, [r2, #0]
 8010b18:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8010b1a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8010b1c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8010b1e:	d10e      	bne.n	8010b3e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b20:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010b24:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	b143      	cbz	r3, 8010b3e <vPortEnterCritical+0x3a>
 8010b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	e7fe      	b.n	8010b3c <vPortEnterCritical+0x38>
}
 8010b3e:	4770      	bx	lr
 8010b40:	24000058 	.word	0x24000058

08010b44 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010b44:	4a08      	ldr	r2, [pc, #32]	; (8010b68 <vPortExitCritical+0x24>)
 8010b46:	6813      	ldr	r3, [r2, #0]
 8010b48:	b943      	cbnz	r3, 8010b5c <vPortExitCritical+0x18>
 8010b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	e7fe      	b.n	8010b5a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8010b5c:	3b01      	subs	r3, #1
 8010b5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b60:	b90b      	cbnz	r3, 8010b66 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010b62:	f383 8811 	msr	BASEPRI, r3
}
 8010b66:	4770      	bx	lr
 8010b68:	24000058 	.word	0x24000058
 8010b6c:	00000000 	.word	0x00000000

08010b70 <PendSV_Handler>:
	__asm volatile
 8010b70:	f3ef 8009 	mrs	r0, PSP
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	4b15      	ldr	r3, [pc, #84]	; (8010bd0 <pxCurrentTCBConst>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	f01e 0f10 	tst.w	lr, #16
 8010b80:	bf08      	it	eq
 8010b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8a:	6010      	str	r0, [r2, #0]
 8010b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010b94:	f380 8811 	msr	BASEPRI, r0
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	f3bf 8f6f 	isb	sy
 8010ba0:	f001 f93c 	bl	8011e1c <vTaskSwitchContext>
 8010ba4:	f04f 0000 	mov.w	r0, #0
 8010ba8:	f380 8811 	msr	BASEPRI, r0
 8010bac:	bc09      	pop	{r0, r3}
 8010bae:	6819      	ldr	r1, [r3, #0]
 8010bb0:	6808      	ldr	r0, [r1, #0]
 8010bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb6:	f01e 0f10 	tst.w	lr, #16
 8010bba:	bf08      	it	eq
 8010bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bc0:	f380 8809 	msr	PSP, r0
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	4770      	bx	lr
 8010bca:	bf00      	nop
 8010bcc:	f3af 8000 	nop.w

08010bd0 <pxCurrentTCBConst>:
 8010bd0:	2400fa2c 	.word	0x2400fa2c

08010bd4 <xPortSysTickHandler>:
{
 8010bd4:	b508      	push	{r3, lr}
	__asm volatile
 8010bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8010be6:	f000 ffa5 	bl	8011b34 <xTaskIncrementTick>
 8010bea:	b128      	cbz	r0, 8010bf8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010bec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bf4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	f383 8811 	msr	BASEPRI, r3
}
 8010bfe:	bd08      	pop	{r3, pc}

08010c00 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8010c04:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c0a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c0c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c0e:	4b04      	ldr	r3, [pc, #16]	; (8010c20 <vPortSetupTimerInterrupt+0x20>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8010c16:	3b01      	subs	r3, #1
 8010c18:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c1a:	2307      	movs	r3, #7
 8010c1c:	6113      	str	r3, [r2, #16]
}
 8010c1e:	4770      	bx	lr
 8010c20:	24000048 	.word	0x24000048

08010c24 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c24:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8010c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010c2a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8010c2e:	4a3a      	ldr	r2, [pc, #232]	; (8010d18 <xPortStartScheduler+0xf4>)
 8010c30:	4291      	cmp	r1, r2
 8010c32:	d108      	bne.n	8010c46 <xPortStartScheduler+0x22>
	__asm volatile
 8010c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c38:	f383 8811 	msr	BASEPRI, r3
 8010c3c:	f3bf 8f6f 	isb	sy
 8010c40:	f3bf 8f4f 	dsb	sy
 8010c44:	e7fe      	b.n	8010c44 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010c46:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8010c4a:	4b34      	ldr	r3, [pc, #208]	; (8010d1c <xPortStartScheduler+0xf8>)
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d108      	bne.n	8010c62 <xPortStartScheduler+0x3e>
 8010c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c54:	f383 8811 	msr	BASEPRI, r3
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	f3bf 8f4f 	dsb	sy
 8010c60:	e7fe      	b.n	8010c60 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c62:	4b2f      	ldr	r3, [pc, #188]	; (8010d20 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c64:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c66:	781a      	ldrb	r2, [r3, #0]
 8010c68:	b2d2      	uxtb	r2, r2
 8010c6a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c6c:	22ff      	movs	r2, #255	; 0xff
 8010c6e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c70:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c72:	4a2c      	ldr	r2, [pc, #176]	; (8010d24 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c74:	b2db      	uxtb	r3, r3
 8010c76:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c7a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010c7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c82:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c84:	2307      	movs	r3, #7
 8010c86:	4a28      	ldr	r2, [pc, #160]	; (8010d28 <xPortStartScheduler+0x104>)
 8010c88:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010c8e:	1e5c      	subs	r4, r3, #1
 8010c90:	0600      	lsls	r0, r0, #24
 8010c92:	d40c      	bmi.n	8010cae <xPortStartScheduler+0x8a>
 8010c94:	b111      	cbz	r1, 8010c9c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c96:	2b03      	cmp	r3, #3
 8010c98:	6013      	str	r3, [r2, #0]
 8010c9a:	d011      	beq.n	8010cc0 <xPortStartScheduler+0x9c>
 8010c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca0:	f383 8811 	msr	BASEPRI, r3
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	e7fe      	b.n	8010cac <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010cae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	f88d 3003 	strb.w	r3, [sp, #3]
 8010cbc:	4623      	mov	r3, r4
 8010cbe:	e7e4      	b.n	8010c8a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cc4:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8010cc8:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010cca:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010ccc:	9b01      	ldr	r3, [sp, #4]
 8010cce:	4a14      	ldr	r2, [pc, #80]	; (8010d20 <xPortStartScheduler+0xfc>)
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010cd4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8010cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010cdc:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ce0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8010ce4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010ce8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8010cec:	f7ff ff88 	bl	8010c00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8010cf0:	4b0e      	ldr	r3, [pc, #56]	; (8010d2c <xPortStartScheduler+0x108>)
 8010cf2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8010cf4:	f7ff feb8 	bl	8010a68 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010cf8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8010cfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010d00:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8010d04:	f7ff fe9c 	bl	8010a40 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8010d08:	f001 f888 	bl	8011e1c <vTaskSwitchContext>
}
 8010d0c:	4628      	mov	r0, r5
	prvTaskExitError();
 8010d0e:	f7ff feb5 	bl	8010a7c <prvTaskExitError>
}
 8010d12:	b003      	add	sp, #12
 8010d14:	bd30      	pop	{r4, r5, pc}
 8010d16:	bf00      	nop
 8010d18:	410fc271 	.word	0x410fc271
 8010d1c:	410fc270 	.word	0x410fc270
 8010d20:	e000e400 	.word	0xe000e400
 8010d24:	2400f9e4 	.word	0x2400f9e4
 8010d28:	2400f9e8 	.word	0x2400f9e8
 8010d2c:	24000058 	.word	0x24000058

08010d30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010d30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010d34:	2b0f      	cmp	r3, #15
 8010d36:	d90e      	bls.n	8010d56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010d38:	4a11      	ldr	r2, [pc, #68]	; (8010d80 <vPortValidateInterruptPriority+0x50>)
 8010d3a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010d3c:	4a11      	ldr	r2, [pc, #68]	; (8010d84 <vPortValidateInterruptPriority+0x54>)
 8010d3e:	7812      	ldrb	r2, [r2, #0]
 8010d40:	429a      	cmp	r2, r3
 8010d42:	d908      	bls.n	8010d56 <vPortValidateInterruptPriority+0x26>
 8010d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d48:	f383 8811 	msr	BASEPRI, r3
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	f3bf 8f4f 	dsb	sy
 8010d54:	e7fe      	b.n	8010d54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010d56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010d5a:	4a0b      	ldr	r2, [pc, #44]	; (8010d88 <vPortValidateInterruptPriority+0x58>)
 8010d5c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8010d60:	6812      	ldr	r2, [r2, #0]
 8010d62:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d908      	bls.n	8010d7c <vPortValidateInterruptPriority+0x4c>
 8010d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	e7fe      	b.n	8010d7a <vPortValidateInterruptPriority+0x4a>
	}
 8010d7c:	4770      	bx	lr
 8010d7e:	bf00      	nop
 8010d80:	e000e3f0 	.word	0xe000e3f0
 8010d84:	2400f9e4 	.word	0x2400f9e4
 8010d88:	2400f9e8 	.word	0x2400f9e8

08010d8c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d8c:	b510      	push	{r4, lr}
 8010d8e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d90:	f7ff feb8 	bl	8010b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d94:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8010d96:	f7ff fed5 	bl	8010b44 <vPortExitCritical>

	return xReturn;
}
 8010d9a:	fab4 f084 	clz	r0, r4
 8010d9e:	0940      	lsrs	r0, r0, #5
 8010da0:	bd10      	pop	{r4, pc}

08010da2 <prvCopyDataToQueue>:
{
 8010da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010da4:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010da6:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8010da8:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010daa:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010dac:	b952      	cbnz	r2, 8010dc4 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dae:	6807      	ldr	r7, [r0, #0]
 8010db0:	bb47      	cbnz	r7, 8010e04 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010db2:	6880      	ldr	r0, [r0, #8]
 8010db4:	f001 f990 	bl	80120d8 <xTaskPriorityDisinherit>
 8010db8:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010dba:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dbc:	3601      	adds	r6, #1
}
 8010dbe:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010dc0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8010dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8010dc4:	b965      	cbnz	r5, 8010de0 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010dc6:	6840      	ldr	r0, [r0, #4]
 8010dc8:	f013 fdd4 	bl	8024974 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010dcc:	6863      	ldr	r3, [r4, #4]
 8010dce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010dd0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dd2:	68a2      	ldr	r2, [r4, #8]
 8010dd4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010dd6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dd8:	d3f0      	bcc.n	8010dbc <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010dda:	6823      	ldr	r3, [r4, #0]
 8010ddc:	6063      	str	r3, [r4, #4]
 8010dde:	e7ed      	b.n	8010dbc <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010de0:	68c0      	ldr	r0, [r0, #12]
 8010de2:	f013 fdc7 	bl	8024974 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010de6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010de8:	68e3      	ldr	r3, [r4, #12]
 8010dea:	4251      	negs	r1, r2
 8010dec:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010dee:	6822      	ldr	r2, [r4, #0]
 8010df0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010df2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010df4:	bf3e      	ittt	cc
 8010df6:	68a3      	ldrcc	r3, [r4, #8]
 8010df8:	185b      	addcc	r3, r3, r1
 8010dfa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8010dfc:	2d02      	cmp	r5, #2
 8010dfe:	d101      	bne.n	8010e04 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e00:	b116      	cbz	r6, 8010e08 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8010e02:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8010e04:	2500      	movs	r5, #0
 8010e06:	e7d9      	b.n	8010dbc <prvCopyDataToQueue+0x1a>
 8010e08:	4635      	mov	r5, r6
 8010e0a:	e7d7      	b.n	8010dbc <prvCopyDataToQueue+0x1a>

08010e0c <prvCopyDataFromQueue>:
{
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8010e12:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010e14:	b162      	cbz	r2, 8010e30 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e16:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e18:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010e1c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1e:	60dc      	str	r4, [r3, #12]
}
 8010e20:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010e24:	bf24      	itt	cs
 8010e26:	6819      	ldrcs	r1, [r3, #0]
 8010e28:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e2a:	68d9      	ldr	r1, [r3, #12]
 8010e2c:	f013 bda2 	b.w	8024974 <memcpy>
}
 8010e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <prvUnlockQueue>:
{
 8010e36:	b570      	push	{r4, r5, r6, lr}
 8010e38:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8010e3a:	f7ff fe63 	bl	8010b04 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8010e3e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e42:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8010e46:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010e48:	2d00      	cmp	r5, #0
 8010e4a:	dc14      	bgt.n	8010e76 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8010e4c:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e4e:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8010e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8010e56:	f7ff fe75 	bl	8010b44 <vPortExitCritical>
	taskENTER_CRITICAL();
 8010e5a:	f7ff fe53 	bl	8010b04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8010e5e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8010e62:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e64:	2d00      	cmp	r5, #0
 8010e66:	dc12      	bgt.n	8010e8e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8010e68:	23ff      	movs	r3, #255	; 0xff
 8010e6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8010e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8010e72:	f7ff be67 	b.w	8010b44 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d0e7      	beq.n	8010e4c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e7c:	4630      	mov	r0, r6
 8010e7e:	f001 f849 	bl	8011f14 <xTaskRemoveFromEventList>
 8010e82:	b108      	cbz	r0, 8010e88 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8010e84:	f001 f8d2 	bl	801202c <vTaskMissedYield>
			--cTxLock;
 8010e88:	3d01      	subs	r5, #1
 8010e8a:	b26d      	sxtb	r5, r5
 8010e8c:	e7dc      	b.n	8010e48 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e8e:	6923      	ldr	r3, [r4, #16]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d0e9      	beq.n	8010e68 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e94:	4630      	mov	r0, r6
 8010e96:	f001 f83d 	bl	8011f14 <xTaskRemoveFromEventList>
 8010e9a:	b108      	cbz	r0, 8010ea0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8010e9c:	f001 f8c6 	bl	801202c <vTaskMissedYield>
				--cRxLock;
 8010ea0:	3d01      	subs	r5, #1
 8010ea2:	b26d      	sxtb	r5, r5
 8010ea4:	e7de      	b.n	8010e64 <prvUnlockQueue+0x2e>

08010ea6 <xQueueGenericReset>:
{
 8010ea6:	b538      	push	{r3, r4, r5, lr}
 8010ea8:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8010eaa:	4604      	mov	r4, r0
 8010eac:	b940      	cbnz	r0, 8010ec0 <xQueueGenericReset+0x1a>
 8010eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eb2:	f383 8811 	msr	BASEPRI, r3
 8010eb6:	f3bf 8f6f 	isb	sy
 8010eba:	f3bf 8f4f 	dsb	sy
 8010ebe:	e7fe      	b.n	8010ebe <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8010ec0:	f7ff fe20 	bl	8010b04 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ec4:	6822      	ldr	r2, [r4, #0]
 8010ec6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010eca:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ecc:	434b      	muls	r3, r1
 8010ece:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ed0:	1a5b      	subs	r3, r3, r1
 8010ed2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ed4:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010ed6:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ed8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010eda:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010edc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8010ede:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8010ee6:	b9a5      	cbnz	r5, 8010f12 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ee8:	6923      	ldr	r3, [r4, #16]
 8010eea:	b173      	cbz	r3, 8010f0a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010eec:	f104 0010 	add.w	r0, r4, #16
 8010ef0:	f001 f810 	bl	8011f14 <xTaskRemoveFromEventList>
 8010ef4:	b148      	cbz	r0, 8010f0a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8010ef6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8010efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010efe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8010f02:	f3bf 8f4f 	dsb	sy
 8010f06:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8010f0a:	f7ff fe1b 	bl	8010b44 <vPortExitCritical>
}
 8010f0e:	2001      	movs	r0, #1
 8010f10:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010f12:	f104 0010 	add.w	r0, r4, #16
 8010f16:	f7ff fd51 	bl	80109bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010f1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8010f1e:	f7ff fd4d 	bl	80109bc <vListInitialise>
 8010f22:	e7f2      	b.n	8010f0a <xQueueGenericReset+0x64>

08010f24 <xQueueGenericCreateStatic>:
	{
 8010f24:	b513      	push	{r0, r1, r4, lr}
 8010f26:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010f28:	b940      	cbnz	r0, 8010f3c <xQueueGenericCreateStatic+0x18>
 8010f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f2e:	f383 8811 	msr	BASEPRI, r3
 8010f32:	f3bf 8f6f 	isb	sy
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	e7fe      	b.n	8010f3a <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8010f3c:	b943      	cbnz	r3, 8010f50 <xQueueGenericCreateStatic+0x2c>
 8010f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f42:	f383 8811 	msr	BASEPRI, r3
 8010f46:	f3bf 8f6f 	isb	sy
 8010f4a:	f3bf 8f4f 	dsb	sy
 8010f4e:	e7fe      	b.n	8010f4e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010f50:	b14a      	cbz	r2, 8010f66 <xQueueGenericCreateStatic+0x42>
 8010f52:	b991      	cbnz	r1, 8010f7a <xQueueGenericCreateStatic+0x56>
 8010f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f58:	f383 8811 	msr	BASEPRI, r3
 8010f5c:	f3bf 8f6f 	isb	sy
 8010f60:	f3bf 8f4f 	dsb	sy
 8010f64:	e7fe      	b.n	8010f64 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010f66:	b141      	cbz	r1, 8010f7a <xQueueGenericCreateStatic+0x56>
 8010f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f6c:	f383 8811 	msr	BASEPRI, r3
 8010f70:	f3bf 8f6f 	isb	sy
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	e7fe      	b.n	8010f78 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010f7a:	2350      	movs	r3, #80	; 0x50
 8010f7c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010f7e:	9b01      	ldr	r3, [sp, #4]
 8010f80:	2b50      	cmp	r3, #80	; 0x50
 8010f82:	d008      	beq.n	8010f96 <xQueueGenericCreateStatic+0x72>
 8010f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f88:	f383 8811 	msr	BASEPRI, r3
 8010f8c:	f3bf 8f6f 	isb	sy
 8010f90:	f3bf 8f4f 	dsb	sy
 8010f94:	e7fe      	b.n	8010f94 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010f96:	2900      	cmp	r1, #0
 8010f98:	bf08      	it	eq
 8010f9a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010f9c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	6022      	str	r2, [r4, #0]
 8010fa2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8010fa6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010faa:	4619      	mov	r1, r3
 8010fac:	4620      	mov	r0, r4
 8010fae:	f7ff ff7a 	bl	8010ea6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8010fb2:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 8010fb6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8010fb8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8010fbc:	b002      	add	sp, #8
 8010fbe:	bd10      	pop	{r4, pc}

08010fc0 <xQueueGenericCreate>:
	{
 8010fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fc2:	460d      	mov	r5, r1
 8010fc4:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010fc6:	4606      	mov	r6, r0
 8010fc8:	b940      	cbnz	r0, 8010fdc <xQueueGenericCreate+0x1c>
 8010fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fce:	f383 8811 	msr	BASEPRI, r3
 8010fd2:	f3bf 8f6f 	isb	sy
 8010fd6:	f3bf 8f4f 	dsb	sy
 8010fda:	e7fe      	b.n	8010fda <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fdc:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010fde:	3050      	adds	r0, #80	; 0x50
 8010fe0:	f7ff fc16 	bl	8010810 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	b170      	cbz	r0, 8011006 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8010fee:	b165      	cbz	r5, 801100a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ff0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ff4:	2101      	movs	r1, #1
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8010ffa:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ffe:	f7ff ff52 	bl	8010ea6 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8011002:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8011006:	4620      	mov	r0, r4
 8011008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801100a:	4603      	mov	r3, r0
 801100c:	e7f2      	b.n	8010ff4 <xQueueGenericCreate+0x34>

0801100e <xQueueCreateCountingSemaphoreStatic>:
	{
 801100e:	b513      	push	{r0, r1, r4, lr}
 8011010:	4613      	mov	r3, r2
 8011012:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8011014:	b940      	cbnz	r0, 8011028 <xQueueCreateCountingSemaphoreStatic+0x1a>
 8011016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801101a:	f383 8811 	msr	BASEPRI, r3
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	e7fe      	b.n	8011026 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011028:	4288      	cmp	r0, r1
 801102a:	d208      	bcs.n	801103e <xQueueCreateCountingSemaphoreStatic+0x30>
 801102c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011030:	f383 8811 	msr	BASEPRI, r3
 8011034:	f3bf 8f6f 	isb	sy
 8011038:	f3bf 8f4f 	dsb	sy
 801103c:	e7fe      	b.n	801103c <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801103e:	2202      	movs	r2, #2
 8011040:	9200      	str	r2, [sp, #0]
 8011042:	2200      	movs	r2, #0
 8011044:	4611      	mov	r1, r2
 8011046:	f7ff ff6d 	bl	8010f24 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 801104a:	b100      	cbz	r0, 801104e <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801104c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 801104e:	b002      	add	sp, #8
 8011050:	bd10      	pop	{r4, pc}

08011052 <xQueueCreateCountingSemaphore>:
	{
 8011052:	b510      	push	{r4, lr}
 8011054:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8011056:	b940      	cbnz	r0, 801106a <xQueueCreateCountingSemaphore+0x18>
 8011058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105c:	f383 8811 	msr	BASEPRI, r3
 8011060:	f3bf 8f6f 	isb	sy
 8011064:	f3bf 8f4f 	dsb	sy
 8011068:	e7fe      	b.n	8011068 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 801106a:	4288      	cmp	r0, r1
 801106c:	d208      	bcs.n	8011080 <xQueueCreateCountingSemaphore+0x2e>
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	e7fe      	b.n	801107e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011080:	2202      	movs	r2, #2
 8011082:	2100      	movs	r1, #0
 8011084:	f7ff ff9c 	bl	8010fc0 <xQueueGenericCreate>
		if( xHandle != NULL )
 8011088:	b100      	cbz	r0, 801108c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801108a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 801108c:	bd10      	pop	{r4, pc}

0801108e <xQueueGenericSend>:
{
 801108e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011092:	b085      	sub	sp, #20
 8011094:	4688      	mov	r8, r1
 8011096:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8011098:	4604      	mov	r4, r0
{
 801109a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801109c:	b940      	cbnz	r0, 80110b0 <xQueueGenericSend+0x22>
 801109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	e7fe      	b.n	80110ae <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110b0:	b951      	cbnz	r1, 80110c8 <xQueueGenericSend+0x3a>
 80110b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80110b4:	b143      	cbz	r3, 80110c8 <xQueueGenericSend+0x3a>
 80110b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	e7fe      	b.n	80110c6 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110c8:	2f02      	cmp	r7, #2
 80110ca:	d10b      	bne.n	80110e4 <xQueueGenericSend+0x56>
 80110cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d008      	beq.n	80110e4 <xQueueGenericSend+0x56>
 80110d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d6:	f383 8811 	msr	BASEPRI, r3
 80110da:	f3bf 8f6f 	isb	sy
 80110de:	f3bf 8f4f 	dsb	sy
 80110e2:	e7fe      	b.n	80110e2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110e4:	f000 ffa8 	bl	8012038 <xTaskGetSchedulerState>
 80110e8:	4606      	mov	r6, r0
 80110ea:	b950      	cbnz	r0, 8011102 <xQueueGenericSend+0x74>
 80110ec:	9b01      	ldr	r3, [sp, #4]
 80110ee:	b14b      	cbz	r3, 8011104 <xQueueGenericSend+0x76>
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	e7fe      	b.n	8011100 <xQueueGenericSend+0x72>
 8011102:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8011104:	f04f 0900 	mov.w	r9, #0
 8011108:	e037      	b.n	801117a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 801110a:	9d01      	ldr	r5, [sp, #4]
 801110c:	b91d      	cbnz	r5, 8011116 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 801110e:	f7ff fd19 	bl	8010b44 <vPortExitCritical>
			return errQUEUE_FULL;
 8011112:	2000      	movs	r0, #0
 8011114:	e052      	b.n	80111bc <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 8011116:	b916      	cbnz	r6, 801111e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011118:	a802      	add	r0, sp, #8
 801111a:	f000 ff3f 	bl	8011f9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801111e:	f7ff fd11 	bl	8010b44 <vPortExitCritical>
		vTaskSuspendAll();
 8011122:	f000 fcf9 	bl	8011b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011126:	f7ff fced 	bl	8010b04 <vPortEnterCritical>
 801112a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801112e:	2bff      	cmp	r3, #255	; 0xff
 8011130:	d101      	bne.n	8011136 <xQueueGenericSend+0xa8>
 8011132:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8011136:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801113a:	2bff      	cmp	r3, #255	; 0xff
 801113c:	d101      	bne.n	8011142 <xQueueGenericSend+0xb4>
 801113e:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8011142:	f7ff fcff 	bl	8010b44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011146:	a901      	add	r1, sp, #4
 8011148:	a802      	add	r0, sp, #8
 801114a:	f000 ff33 	bl	8011fb4 <xTaskCheckForTimeOut>
 801114e:	2800      	cmp	r0, #0
 8011150:	d14a      	bne.n	80111e8 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011152:	f7ff fcd7 	bl	8010b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011156:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801115a:	429a      	cmp	r2, r3
 801115c:	d131      	bne.n	80111c2 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 801115e:	f7ff fcf1 	bl	8010b44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011162:	9901      	ldr	r1, [sp, #4]
 8011164:	f104 0010 	add.w	r0, r4, #16
 8011168:	f000 fe9c 	bl	8011ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801116c:	4620      	mov	r0, r4
 801116e:	f7ff fe62 	bl	8010e36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011172:	f000 fd75 	bl	8011c60 <xTaskResumeAll>
 8011176:	b360      	cbz	r0, 80111d2 <xQueueGenericSend+0x144>
 8011178:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801117a:	f7ff fcc3 	bl	8010b04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801117e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011180:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011182:	429a      	cmp	r2, r3
 8011184:	d301      	bcc.n	801118a <xQueueGenericSend+0xfc>
 8011186:	2f02      	cmp	r7, #2
 8011188:	d1bf      	bne.n	801110a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801118a:	463a      	mov	r2, r7
 801118c:	4641      	mov	r1, r8
 801118e:	4620      	mov	r0, r4
 8011190:	f7ff fe07 	bl	8010da2 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011196:	b11b      	cbz	r3, 80111a0 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011198:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801119c:	f000 feba 	bl	8011f14 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80111a0:	b148      	cbz	r0, 80111b6 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 80111a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80111a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80111b6:	f7ff fcc5 	bl	8010b44 <vPortExitCritical>
				return pdPASS;
 80111ba:	2001      	movs	r0, #1
}
 80111bc:	b005      	add	sp, #20
 80111be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80111c2:	f7ff fcbf 	bl	8010b44 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80111c6:	4620      	mov	r0, r4
 80111c8:	f7ff fe35 	bl	8010e36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80111cc:	f000 fd48 	bl	8011c60 <xTaskResumeAll>
 80111d0:	e7d2      	b.n	8011178 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80111d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80111d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80111de:	f3bf 8f4f 	dsb	sy
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	e7c7      	b.n	8011178 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80111e8:	4620      	mov	r0, r4
 80111ea:	f7ff fe24 	bl	8010e36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80111ee:	f000 fd37 	bl	8011c60 <xTaskResumeAll>
 80111f2:	e78e      	b.n	8011112 <xQueueGenericSend+0x84>

080111f4 <xQueueGenericSendFromISR>:
{
 80111f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111f8:	4689      	mov	r9, r1
 80111fa:	4690      	mov	r8, r2
 80111fc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80111fe:	4604      	mov	r4, r0
 8011200:	b940      	cbnz	r0, 8011214 <xQueueGenericSendFromISR+0x20>
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	f383 8811 	msr	BASEPRI, r3
 801120a:	f3bf 8f6f 	isb	sy
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	e7fe      	b.n	8011212 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011214:	b951      	cbnz	r1, 801122c <xQueueGenericSendFromISR+0x38>
 8011216:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011218:	b143      	cbz	r3, 801122c <xQueueGenericSendFromISR+0x38>
 801121a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121e:	f383 8811 	msr	BASEPRI, r3
 8011222:	f3bf 8f6f 	isb	sy
 8011226:	f3bf 8f4f 	dsb	sy
 801122a:	e7fe      	b.n	801122a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801122c:	2f02      	cmp	r7, #2
 801122e:	d10b      	bne.n	8011248 <xQueueGenericSendFromISR+0x54>
 8011230:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011232:	2b01      	cmp	r3, #1
 8011234:	d008      	beq.n	8011248 <xQueueGenericSendFromISR+0x54>
 8011236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123a:	f383 8811 	msr	BASEPRI, r3
 801123e:	f3bf 8f6f 	isb	sy
 8011242:	f3bf 8f4f 	dsb	sy
 8011246:	e7fe      	b.n	8011246 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011248:	f7ff fd72 	bl	8010d30 <vPortValidateInterruptPriority>
	__asm volatile
 801124c:	f3ef 8611 	mrs	r6, BASEPRI
 8011250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011254:	f383 8811 	msr	BASEPRI, r3
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011260:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8011262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011264:	429a      	cmp	r2, r3
 8011266:	d301      	bcc.n	801126c <xQueueGenericSendFromISR+0x78>
 8011268:	2f02      	cmp	r7, #2
 801126a:	d123      	bne.n	80112b4 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 801126c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011270:	463a      	mov	r2, r7
 8011272:	4649      	mov	r1, r9
 8011274:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8011276:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801127a:	f7ff fd92 	bl	8010da2 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 801127e:	1c6b      	adds	r3, r5, #1
 8011280:	d113      	bne.n	80112aa <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011284:	b90b      	cbnz	r3, 801128a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 8011286:	2001      	movs	r0, #1
 8011288:	e00b      	b.n	80112a2 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801128a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801128e:	f000 fe41 	bl	8011f14 <xTaskRemoveFromEventList>
 8011292:	2800      	cmp	r0, #0
 8011294:	d0f7      	beq.n	8011286 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8011296:	f1b8 0f00 	cmp.w	r8, #0
 801129a:	d0f4      	beq.n	8011286 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 801129c:	2001      	movs	r0, #1
 801129e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80112a2:	f386 8811 	msr	BASEPRI, r6
}
 80112a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80112aa:	3501      	adds	r5, #1
 80112ac:	b26d      	sxtb	r5, r5
 80112ae:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80112b2:	e7e8      	b.n	8011286 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 80112b4:	2000      	movs	r0, #0
 80112b6:	e7f4      	b.n	80112a2 <xQueueGenericSendFromISR+0xae>

080112b8 <xQueueGiveFromISR>:
{
 80112b8:	b570      	push	{r4, r5, r6, lr}
 80112ba:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80112bc:	4604      	mov	r4, r0
 80112be:	b940      	cbnz	r0, 80112d2 <xQueueGiveFromISR+0x1a>
	__asm volatile
 80112c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c4:	f383 8811 	msr	BASEPRI, r3
 80112c8:	f3bf 8f6f 	isb	sy
 80112cc:	f3bf 8f4f 	dsb	sy
 80112d0:	e7fe      	b.n	80112d0 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80112d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80112d4:	b143      	cbz	r3, 80112e8 <xQueueGiveFromISR+0x30>
 80112d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112da:	f383 8811 	msr	BASEPRI, r3
 80112de:	f3bf 8f6f 	isb	sy
 80112e2:	f3bf 8f4f 	dsb	sy
 80112e6:	e7fe      	b.n	80112e6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80112e8:	6803      	ldr	r3, [r0, #0]
 80112ea:	b953      	cbnz	r3, 8011302 <xQueueGiveFromISR+0x4a>
 80112ec:	6883      	ldr	r3, [r0, #8]
 80112ee:	b143      	cbz	r3, 8011302 <xQueueGiveFromISR+0x4a>
 80112f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f4:	f383 8811 	msr	BASEPRI, r3
 80112f8:	f3bf 8f6f 	isb	sy
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	e7fe      	b.n	8011300 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011302:	f7ff fd15 	bl	8010d30 <vPortValidateInterruptPriority>
	__asm volatile
 8011306:	f3ef 8611 	mrs	r6, BASEPRI
 801130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f3bf 8f6f 	isb	sy
 8011316:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801131a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 801131c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801131e:	4293      	cmp	r3, r2
 8011320:	d91c      	bls.n	801135c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8011322:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011326:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8011328:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 801132a:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801132c:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 801132e:	d110      	bne.n	8011352 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011332:	b90b      	cbnz	r3, 8011338 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8011334:	2001      	movs	r0, #1
 8011336:	e009      	b.n	801134c <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011338:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801133c:	f000 fdea 	bl	8011f14 <xTaskRemoveFromEventList>
 8011340:	2800      	cmp	r0, #0
 8011342:	d0f7      	beq.n	8011334 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8011344:	2d00      	cmp	r5, #0
 8011346:	d0f5      	beq.n	8011334 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011348:	2001      	movs	r0, #1
 801134a:	6028      	str	r0, [r5, #0]
	__asm volatile
 801134c:	f386 8811 	msr	BASEPRI, r6
}
 8011350:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011352:	3301      	adds	r3, #1
 8011354:	b25b      	sxtb	r3, r3
 8011356:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801135a:	e7eb      	b.n	8011334 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 801135c:	2000      	movs	r0, #0
 801135e:	e7f5      	b.n	801134c <xQueueGiveFromISR+0x94>

08011360 <xQueueReceive>:
{
 8011360:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011364:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8011366:	4604      	mov	r4, r0
{
 8011368:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 801136a:	b940      	cbnz	r0, 801137e <xQueueReceive+0x1e>
	__asm volatile
 801136c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011370:	f383 8811 	msr	BASEPRI, r3
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	f3bf 8f4f 	dsb	sy
 801137c:	e7fe      	b.n	801137c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801137e:	b951      	cbnz	r1, 8011396 <xQueueReceive+0x36>
 8011380:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011382:	b143      	cbz	r3, 8011396 <xQueueReceive+0x36>
 8011384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	e7fe      	b.n	8011394 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011396:	f000 fe4f 	bl	8012038 <xTaskGetSchedulerState>
 801139a:	4606      	mov	r6, r0
 801139c:	b950      	cbnz	r0, 80113b4 <xQueueReceive+0x54>
 801139e:	9b01      	ldr	r3, [sp, #4]
 80113a0:	b14b      	cbz	r3, 80113b6 <xQueueReceive+0x56>
 80113a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a6:	f383 8811 	msr	BASEPRI, r3
 80113aa:	f3bf 8f6f 	isb	sy
 80113ae:	f3bf 8f4f 	dsb	sy
 80113b2:	e7fe      	b.n	80113b2 <xQueueReceive+0x52>
 80113b4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80113b6:	f04f 0800 	mov.w	r8, #0
 80113ba:	e03d      	b.n	8011438 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80113bc:	9d01      	ldr	r5, [sp, #4]
 80113be:	b91d      	cbnz	r5, 80113c8 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 80113c0:	f7ff fbc0 	bl	8010b44 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80113c4:	2000      	movs	r0, #0
 80113c6:	e056      	b.n	8011476 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 80113c8:	b916      	cbnz	r6, 80113d0 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113ca:	a802      	add	r0, sp, #8
 80113cc:	f000 fde6 	bl	8011f9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80113d0:	f7ff fbb8 	bl	8010b44 <vPortExitCritical>
		vTaskSuspendAll();
 80113d4:	f000 fba0 	bl	8011b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113d8:	f7ff fb94 	bl	8010b04 <vPortEnterCritical>
 80113dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80113e0:	2bff      	cmp	r3, #255	; 0xff
 80113e2:	d101      	bne.n	80113e8 <xQueueReceive+0x88>
 80113e4:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80113e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80113ec:	2bff      	cmp	r3, #255	; 0xff
 80113ee:	d101      	bne.n	80113f4 <xQueueReceive+0x94>
 80113f0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 80113f4:	f7ff fba6 	bl	8010b44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80113f8:	a901      	add	r1, sp, #4
 80113fa:	a802      	add	r0, sp, #8
 80113fc:	f000 fdda 	bl	8011fb4 <xTaskCheckForTimeOut>
 8011400:	2800      	cmp	r0, #0
 8011402:	d141      	bne.n	8011488 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011404:	4620      	mov	r0, r4
 8011406:	f7ff fcc1 	bl	8010d8c <prvIsQueueEmpty>
 801140a:	b3b8      	cbz	r0, 801147c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801140c:	9901      	ldr	r1, [sp, #4]
 801140e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011412:	f000 fd47 	bl	8011ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011416:	4620      	mov	r0, r4
 8011418:	f7ff fd0d 	bl	8010e36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801141c:	f000 fc20 	bl	8011c60 <xTaskResumeAll>
 8011420:	b948      	cbnz	r0, 8011436 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8011422:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801142a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8011438:	f7ff fb64 	bl	8010b04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801143c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801143e:	2d00      	cmp	r5, #0
 8011440:	d0bc      	beq.n	80113bc <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011442:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011444:	4639      	mov	r1, r7
 8011446:	4620      	mov	r0, r4
 8011448:	f7ff fce0 	bl	8010e0c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801144c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801144e:	6923      	ldr	r3, [r4, #16]
 8011450:	b173      	cbz	r3, 8011470 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011452:	f104 0010 	add.w	r0, r4, #16
 8011456:	f000 fd5d 	bl	8011f14 <xTaskRemoveFromEventList>
 801145a:	b148      	cbz	r0, 8011470 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 801145c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011464:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8011470:	f7ff fb68 	bl	8010b44 <vPortExitCritical>
				return pdPASS;
 8011474:	2001      	movs	r0, #1
}
 8011476:	b004      	add	sp, #16
 8011478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 801147c:	4620      	mov	r0, r4
 801147e:	f7ff fcda 	bl	8010e36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011482:	f000 fbed 	bl	8011c60 <xTaskResumeAll>
 8011486:	e7d6      	b.n	8011436 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8011488:	4620      	mov	r0, r4
 801148a:	f7ff fcd4 	bl	8010e36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801148e:	f000 fbe7 	bl	8011c60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011492:	4620      	mov	r0, r4
 8011494:	f7ff fc7a 	bl	8010d8c <prvIsQueueEmpty>
 8011498:	2800      	cmp	r0, #0
 801149a:	d0cc      	beq.n	8011436 <xQueueReceive+0xd6>
 801149c:	e792      	b.n	80113c4 <xQueueReceive+0x64>

0801149e <xQueueSemaphoreTake>:
{
 801149e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114a0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 80114a2:	4604      	mov	r4, r0
{
 80114a4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80114a6:	b940      	cbnz	r0, 80114ba <xQueueSemaphoreTake+0x1c>
 80114a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ac:	f383 8811 	msr	BASEPRI, r3
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	e7fe      	b.n	80114b8 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 80114ba:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80114bc:	b145      	cbz	r5, 80114d0 <xQueueSemaphoreTake+0x32>
 80114be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	e7fe      	b.n	80114ce <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114d0:	f000 fdb2 	bl	8012038 <xTaskGetSchedulerState>
 80114d4:	4606      	mov	r6, r0
 80114d6:	b950      	cbnz	r0, 80114ee <xQueueSemaphoreTake+0x50>
 80114d8:	9b01      	ldr	r3, [sp, #4]
 80114da:	b15b      	cbz	r3, 80114f4 <xQueueSemaphoreTake+0x56>
 80114dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e0:	f383 8811 	msr	BASEPRI, r3
 80114e4:	f3bf 8f6f 	isb	sy
 80114e8:	f3bf 8f4f 	dsb	sy
 80114ec:	e7fe      	b.n	80114ec <xQueueSemaphoreTake+0x4e>
 80114ee:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80114f0:	2700      	movs	r7, #0
 80114f2:	e053      	b.n	801159c <xQueueSemaphoreTake+0xfe>
 80114f4:	4605      	mov	r5, r0
 80114f6:	e7fb      	b.n	80114f0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 80114f8:	9b01      	ldr	r3, [sp, #4]
 80114fa:	b963      	cbnz	r3, 8011516 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80114fc:	b145      	cbz	r5, 8011510 <xQueueSemaphoreTake+0x72>
 80114fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	e7fe      	b.n	801150e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 8011510:	f7ff fb18 	bl	8010b44 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8011514:	e062      	b.n	80115dc <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 8011516:	b916      	cbnz	r6, 801151e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011518:	a802      	add	r0, sp, #8
 801151a:	f000 fd3f 	bl	8011f9c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801151e:	f7ff fb11 	bl	8010b44 <vPortExitCritical>
		vTaskSuspendAll();
 8011522:	f000 faf9 	bl	8011b18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011526:	f7ff faed 	bl	8010b04 <vPortEnterCritical>
 801152a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801152e:	2bff      	cmp	r3, #255	; 0xff
 8011530:	d101      	bne.n	8011536 <xQueueSemaphoreTake+0x98>
 8011532:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8011536:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801153a:	2bff      	cmp	r3, #255	; 0xff
 801153c:	d101      	bne.n	8011542 <xQueueSemaphoreTake+0xa4>
 801153e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011542:	f7ff faff 	bl	8010b44 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011546:	a901      	add	r1, sp, #4
 8011548:	a802      	add	r0, sp, #8
 801154a:	f000 fd33 	bl	8011fb4 <xTaskCheckForTimeOut>
 801154e:	2800      	cmp	r0, #0
 8011550:	d14d      	bne.n	80115ee <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011552:	4620      	mov	r0, r4
 8011554:	f7ff fc1a 	bl	8010d8c <prvIsQueueEmpty>
 8011558:	2800      	cmp	r0, #0
 801155a:	d042      	beq.n	80115e2 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801155c:	6823      	ldr	r3, [r4, #0]
 801155e:	b93b      	cbnz	r3, 8011570 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 8011560:	f7ff fad0 	bl	8010b04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011564:	68a0      	ldr	r0, [r4, #8]
 8011566:	f000 fd77 	bl	8012058 <xTaskPriorityInherit>
 801156a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 801156c:	f7ff faea 	bl	8010b44 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011570:	9901      	ldr	r1, [sp, #4]
 8011572:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011576:	f000 fc95 	bl	8011ea4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801157a:	4620      	mov	r0, r4
 801157c:	f7ff fc5b 	bl	8010e36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011580:	f000 fb6e 	bl	8011c60 <xTaskResumeAll>
 8011584:	b948      	cbnz	r0, 801159a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 8011586:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801158a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801158e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011592:	f3bf 8f4f 	dsb	sy
 8011596:	f3bf 8f6f 	isb	sy
 801159a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 801159c:	f7ff fab2 	bl	8010b04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80115a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d0a8      	beq.n	80114f8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80115a6:	3b01      	subs	r3, #1
 80115a8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115aa:	6823      	ldr	r3, [r4, #0]
 80115ac:	b913      	cbnz	r3, 80115b4 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80115ae:	f000 fe29 	bl	8012204 <pvTaskIncrementMutexHeldCount>
 80115b2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115b4:	6923      	ldr	r3, [r4, #16]
 80115b6:	b173      	cbz	r3, 80115d6 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115b8:	f104 0010 	add.w	r0, r4, #16
 80115bc:	f000 fcaa 	bl	8011f14 <xTaskRemoveFromEventList>
 80115c0:	b148      	cbz	r0, 80115d6 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80115c2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80115c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80115ce:	f3bf 8f4f 	dsb	sy
 80115d2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80115d6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80115d8:	f7ff fab4 	bl	8010b44 <vPortExitCritical>
}
 80115dc:	4628      	mov	r0, r5
 80115de:	b005      	add	sp, #20
 80115e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 80115e2:	4620      	mov	r0, r4
 80115e4:	f7ff fc27 	bl	8010e36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115e8:	f000 fb3a 	bl	8011c60 <xTaskResumeAll>
 80115ec:	e7d5      	b.n	801159a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 80115ee:	4620      	mov	r0, r4
 80115f0:	f7ff fc21 	bl	8010e36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115f4:	f000 fb34 	bl	8011c60 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115f8:	4620      	mov	r0, r4
 80115fa:	f7ff fbc7 	bl	8010d8c <prvIsQueueEmpty>
 80115fe:	2800      	cmp	r0, #0
 8011600:	d0cb      	beq.n	801159a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 8011602:	2d00      	cmp	r5, #0
 8011604:	d0ea      	beq.n	80115dc <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 8011606:	f7ff fa7d 	bl	8010b04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801160a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801160c:	b119      	cbz	r1, 8011616 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801160e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011610:	6819      	ldr	r1, [r3, #0]
 8011612:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011616:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8011618:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801161a:	f000 fda1 	bl	8012160 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801161e:	f7ff fa91 	bl	8010b44 <vPortExitCritical>
 8011622:	e7db      	b.n	80115dc <xQueueSemaphoreTake+0x13e>

08011624 <xQueueReceiveFromISR>:
{
 8011624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011628:	4689      	mov	r9, r1
 801162a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 801162c:	4605      	mov	r5, r0
 801162e:	b940      	cbnz	r0, 8011642 <xQueueReceiveFromISR+0x1e>
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	e7fe      	b.n	8011640 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011642:	b951      	cbnz	r1, 801165a <xQueueReceiveFromISR+0x36>
 8011644:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8011646:	b143      	cbz	r3, 801165a <xQueueReceiveFromISR+0x36>
 8011648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801164c:	f383 8811 	msr	BASEPRI, r3
 8011650:	f3bf 8f6f 	isb	sy
 8011654:	f3bf 8f4f 	dsb	sy
 8011658:	e7fe      	b.n	8011658 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801165a:	f7ff fb69 	bl	8010d30 <vPortValidateInterruptPriority>
	__asm volatile
 801165e:	f3ef 8711 	mrs	r7, BASEPRI
 8011662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011672:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011674:	b31c      	cbz	r4, 80116be <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 8011676:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801167a:	4649      	mov	r1, r9
 801167c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801167e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8011680:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011682:	f7ff fbc3 	bl	8010e0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011686:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8011688:	1c73      	adds	r3, r6, #1
 801168a:	d113      	bne.n	80116b4 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801168c:	692b      	ldr	r3, [r5, #16]
 801168e:	b90b      	cbnz	r3, 8011694 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 8011690:	2001      	movs	r0, #1
 8011692:	e00b      	b.n	80116ac <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011694:	f105 0010 	add.w	r0, r5, #16
 8011698:	f000 fc3c 	bl	8011f14 <xTaskRemoveFromEventList>
 801169c:	2800      	cmp	r0, #0
 801169e:	d0f7      	beq.n	8011690 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80116a0:	f1b8 0f00 	cmp.w	r8, #0
 80116a4:	d0f4      	beq.n	8011690 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80116a6:	2001      	movs	r0, #1
 80116a8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80116ac:	f387 8811 	msr	BASEPRI, r7
}
 80116b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80116b4:	3601      	adds	r6, #1
 80116b6:	b276      	sxtb	r6, r6
 80116b8:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80116bc:	e7e8      	b.n	8011690 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 80116be:	4620      	mov	r0, r4
 80116c0:	e7f4      	b.n	80116ac <xQueueReceiveFromISR+0x88>
	...

080116c4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116c4:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80116c6:	4a07      	ldr	r2, [pc, #28]	; (80116e4 <vQueueAddToRegistry+0x20>)
	{
 80116c8:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80116ca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80116ce:	b92c      	cbnz	r4, 80116dc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80116d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80116d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80116d8:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80116da:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116dc:	3301      	adds	r3, #1
 80116de:	2b08      	cmp	r3, #8
 80116e0:	d1f3      	bne.n	80116ca <vQueueAddToRegistry+0x6>
 80116e2:	e7fa      	b.n	80116da <vQueueAddToRegistry+0x16>
 80116e4:	2400f9ec 	.word	0x2400f9ec

080116e8 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80116e8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80116ea:	4a08      	ldr	r2, [pc, #32]	; (801170c <vQueueUnregisterQueue+0x24>)
	{
 80116ec:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80116ee:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80116f2:	684c      	ldr	r4, [r1, #4]
 80116f4:	4284      	cmp	r4, r0
 80116f6:	d104      	bne.n	8011702 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80116f8:	2000      	movs	r0, #0
 80116fa:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80116fe:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011700:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011702:	3301      	adds	r3, #1
 8011704:	2b08      	cmp	r3, #8
 8011706:	d1f2      	bne.n	80116ee <vQueueUnregisterQueue+0x6>
 8011708:	e7fa      	b.n	8011700 <vQueueUnregisterQueue+0x18>
 801170a:	bf00      	nop
 801170c:	2400f9ec 	.word	0x2400f9ec

08011710 <vQueueDelete>:
{
 8011710:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8011712:	4604      	mov	r4, r0
 8011714:	b940      	cbnz	r0, 8011728 <vQueueDelete+0x18>
	__asm volatile
 8011716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801171a:	f383 8811 	msr	BASEPRI, r3
 801171e:	f3bf 8f6f 	isb	sy
 8011722:	f3bf 8f4f 	dsb	sy
 8011726:	e7fe      	b.n	8011726 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8011728:	f7ff ffde 	bl	80116e8 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801172c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011730:	b923      	cbnz	r3, 801173c <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 8011732:	4620      	mov	r0, r4
}
 8011734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8011738:	f7ff b902 	b.w	8010940 <vPortFree>
}
 801173c:	bd10      	pop	{r4, pc}

0801173e <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801173e:	b570      	push	{r4, r5, r6, lr}
 8011740:	4604      	mov	r4, r0
 8011742:	460d      	mov	r5, r1
 8011744:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011746:	f7ff f9dd 	bl	8010b04 <vPortEnterCritical>
 801174a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801174e:	2bff      	cmp	r3, #255	; 0xff
 8011750:	d102      	bne.n	8011758 <vQueueWaitForMessageRestricted+0x1a>
 8011752:	2300      	movs	r3, #0
 8011754:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8011758:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801175c:	2bff      	cmp	r3, #255	; 0xff
 801175e:	d102      	bne.n	8011766 <vQueueWaitForMessageRestricted+0x28>
 8011760:	2300      	movs	r3, #0
 8011762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011766:	f7ff f9ed 	bl	8010b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801176a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801176c:	b92b      	cbnz	r3, 801177a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801176e:	4632      	mov	r2, r6
 8011770:	4629      	mov	r1, r5
 8011772:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8011776:	f000 fbaf 	bl	8011ed8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801177a:	4620      	mov	r0, r4
	}
 801177c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8011780:	f7ff bb59 	b.w	8010e36 <prvUnlockQueue>

08011784 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011788:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801178a:	f7ff f9bb 	bl	8010b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801178e:	4b2f      	ldr	r3, [pc, #188]	; (801184c <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8011790:	4e2f      	ldr	r6, [pc, #188]	; (8011850 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	4f2f      	ldr	r7, [pc, #188]	; (8011854 <prvAddNewTaskToReadyList+0xd0>)
 8011796:	3201      	adds	r2, #1
 8011798:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 801179a:	6835      	ldr	r5, [r6, #0]
 801179c:	2d00      	cmp	r5, #0
 801179e:	d14a      	bne.n	8011836 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117a0:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d11f      	bne.n	80117e8 <prvAddNewTaskToReadyList+0x64>
 80117a8:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117aa:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117ac:	4640      	mov	r0, r8
 80117ae:	f7ff f905 	bl	80109bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117b2:	f108 0814 	add.w	r8, r8, #20
 80117b6:	2d38      	cmp	r5, #56	; 0x38
 80117b8:	d1f7      	bne.n	80117aa <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117ba:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801187c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 80117be:	4d26      	ldr	r5, [pc, #152]	; (8011858 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 80117c0:	4640      	mov	r0, r8
 80117c2:	f7ff f8fb 	bl	80109bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117c6:	4628      	mov	r0, r5
 80117c8:	f7ff f8f8 	bl	80109bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117cc:	4823      	ldr	r0, [pc, #140]	; (801185c <prvAddNewTaskToReadyList+0xd8>)
 80117ce:	f7ff f8f5 	bl	80109bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117d2:	4823      	ldr	r0, [pc, #140]	; (8011860 <prvAddNewTaskToReadyList+0xdc>)
 80117d4:	f7ff f8f2 	bl	80109bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117d8:	4822      	ldr	r0, [pc, #136]	; (8011864 <prvAddNewTaskToReadyList+0xe0>)
 80117da:	f7ff f8ef 	bl	80109bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117de:	4b22      	ldr	r3, [pc, #136]	; (8011868 <prvAddNewTaskToReadyList+0xe4>)
 80117e0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117e4:	4b21      	ldr	r3, [pc, #132]	; (801186c <prvAddNewTaskToReadyList+0xe8>)
 80117e6:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80117e8:	4a21      	ldr	r2, [pc, #132]	; (8011870 <prvAddNewTaskToReadyList+0xec>)
 80117ea:	6813      	ldr	r3, [r2, #0]
 80117ec:	3301      	adds	r3, #1
 80117ee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80117f0:	4a20      	ldr	r2, [pc, #128]	; (8011874 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80117f2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80117f4:	6811      	ldr	r1, [r2, #0]
 80117f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80117f8:	428b      	cmp	r3, r1
 80117fa:	d900      	bls.n	80117fe <prvAddNewTaskToReadyList+0x7a>
 80117fc:	6013      	str	r3, [r2, #0]
 80117fe:	2014      	movs	r0, #20
 8011800:	1d21      	adds	r1, r4, #4
 8011802:	fb00 7003 	mla	r0, r0, r3, r7
 8011806:	f7ff f8e7 	bl	80109d8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 801180a:	f7ff f99b 	bl	8010b44 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 801180e:	4b1a      	ldr	r3, [pc, #104]	; (8011878 <prvAddNewTaskToReadyList+0xf4>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	b173      	cbz	r3, 8011832 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011814:	6833      	ldr	r3, [r6, #0]
 8011816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801181a:	429a      	cmp	r2, r3
 801181c:	d209      	bcs.n	8011832 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 801181e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011826:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	f3bf 8f6f 	isb	sy
}
 8011832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8011836:	4b10      	ldr	r3, [pc, #64]	; (8011878 <prvAddNewTaskToReadyList+0xf4>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1d4      	bne.n	80117e8 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801183e:	6833      	ldr	r3, [r6, #0]
 8011840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011844:	429a      	cmp	r2, r3
 8011846:	d8cf      	bhi.n	80117e8 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8011848:	6034      	str	r4, [r6, #0]
 801184a:	e7cd      	b.n	80117e8 <prvAddNewTaskToReadyList+0x64>
 801184c:	2400fe98 	.word	0x2400fe98
 8011850:	2400fa2c 	.word	0x2400fa2c
 8011854:	2400fa38 	.word	0x2400fa38
 8011858:	2400fec0 	.word	0x2400fec0
 801185c:	2400fee0 	.word	0x2400fee0
 8011860:	2400ff0c 	.word	0x2400ff0c
 8011864:	2400fef8 	.word	0x2400fef8
 8011868:	2400fa30 	.word	0x2400fa30
 801186c:	2400fa34 	.word	0x2400fa34
 8011870:	2400fea4 	.word	0x2400fea4
 8011874:	2400fea8 	.word	0x2400fea8
 8011878:	2400fef4 	.word	0x2400fef4
 801187c:	2400feac 	.word	0x2400feac

08011880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011882:	4b15      	ldr	r3, [pc, #84]	; (80118d8 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8011884:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011886:	4e15      	ldr	r6, [pc, #84]	; (80118dc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8011888:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801188a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801188c:	6830      	ldr	r0, [r6, #0]
 801188e:	3004      	adds	r0, #4
 8011890:	f7ff f8c5 	bl	8010a1e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011894:	1c63      	adds	r3, r4, #1
 8011896:	d107      	bne.n	80118a8 <prvAddCurrentTaskToDelayedList+0x28>
 8011898:	b137      	cbz	r7, 80118a8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801189a:	6831      	ldr	r1, [r6, #0]
 801189c:	4810      	ldr	r0, [pc, #64]	; (80118e0 <prvAddCurrentTaskToDelayedList+0x60>)
 801189e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80118a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118a4:	f7ff b898 	b.w	80109d8 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80118a8:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80118aa:	6833      	ldr	r3, [r6, #0]
 80118ac:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80118ae:	d307      	bcc.n	80118c0 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118b0:	4b0c      	ldr	r3, [pc, #48]	; (80118e4 <prvAddCurrentTaskToDelayedList+0x64>)
 80118b2:	6818      	ldr	r0, [r3, #0]
 80118b4:	6831      	ldr	r1, [r6, #0]
}
 80118b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118ba:	3104      	adds	r1, #4
 80118bc:	f7ff b898 	b.w	80109f0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118c0:	4b09      	ldr	r3, [pc, #36]	; (80118e8 <prvAddCurrentTaskToDelayedList+0x68>)
 80118c2:	6818      	ldr	r0, [r3, #0]
 80118c4:	6831      	ldr	r1, [r6, #0]
 80118c6:	3104      	adds	r1, #4
 80118c8:	f7ff f892 	bl	80109f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80118cc:	4b07      	ldr	r3, [pc, #28]	; (80118ec <prvAddCurrentTaskToDelayedList+0x6c>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	42a2      	cmp	r2, r4
 80118d2:	d900      	bls.n	80118d6 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 80118d4:	601c      	str	r4, [r3, #0]
}
 80118d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118d8:	2400ff20 	.word	0x2400ff20
 80118dc:	2400fa2c 	.word	0x2400fa2c
 80118e0:	2400fef8 	.word	0x2400fef8
 80118e4:	2400fa34 	.word	0x2400fa34
 80118e8:	2400fa30 	.word	0x2400fa30
 80118ec:	2400fed4 	.word	0x2400fed4

080118f0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118f0:	4a06      	ldr	r2, [pc, #24]	; (801190c <prvResetNextTaskUnblockTime+0x1c>)
 80118f2:	6813      	ldr	r3, [r2, #0]
 80118f4:	6819      	ldr	r1, [r3, #0]
 80118f6:	4b06      	ldr	r3, [pc, #24]	; (8011910 <prvResetNextTaskUnblockTime+0x20>)
 80118f8:	b919      	cbnz	r1, 8011902 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80118fa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118fe:	601a      	str	r2, [r3, #0]
}
 8011900:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011902:	6812      	ldr	r2, [r2, #0]
 8011904:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011906:	68d2      	ldr	r2, [r2, #12]
 8011908:	6852      	ldr	r2, [r2, #4]
 801190a:	e7f8      	b.n	80118fe <prvResetNextTaskUnblockTime+0xe>
 801190c:	2400fa30 	.word	0x2400fa30
 8011910:	2400fed4 	.word	0x2400fed4

08011914 <prvDeleteTCB>:
	{
 8011914:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011916:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 801191a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801191c:	b93b      	cbnz	r3, 801192e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 801191e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8011920:	f7ff f80e 	bl	8010940 <vPortFree>
				vPortFree( pxTCB );
 8011924:	4620      	mov	r0, r4
	}
 8011926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 801192a:	f7ff b809 	b.w	8010940 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801192e:	2b01      	cmp	r3, #1
 8011930:	d0f9      	beq.n	8011926 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011932:	2b02      	cmp	r3, #2
 8011934:	d008      	beq.n	8011948 <prvDeleteTCB+0x34>
 8011936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	e7fe      	b.n	8011946 <prvDeleteTCB+0x32>
	}
 8011948:	bd10      	pop	{r4, pc}
	...

0801194c <prvIdleTask>:
{
 801194c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801194e:	4c14      	ldr	r4, [pc, #80]	; (80119a0 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011950:	4f14      	ldr	r7, [pc, #80]	; (80119a4 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 8011952:	4d15      	ldr	r5, [pc, #84]	; (80119a8 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011954:	6823      	ldr	r3, [r4, #0]
 8011956:	b983      	cbnz	r3, 801197a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011958:	4b14      	ldr	r3, [pc, #80]	; (80119ac <prvIdleTask+0x60>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2b01      	cmp	r3, #1
 801195e:	d909      	bls.n	8011974 <prvIdleTask+0x28>
				taskYIELD();
 8011960:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011968:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801196c:	f3bf 8f4f 	dsb	sy
 8011970:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8011974:	f7ee fec0 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011978:	e7eb      	b.n	8011952 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 801197a:	f7ff f8c3 	bl	8010b04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011982:	1d30      	adds	r0, r6, #4
 8011984:	f7ff f84b 	bl	8010a1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011988:	682b      	ldr	r3, [r5, #0]
 801198a:	3b01      	subs	r3, #1
 801198c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801198e:	6823      	ldr	r3, [r4, #0]
 8011990:	3b01      	subs	r3, #1
 8011992:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8011994:	f7ff f8d6 	bl	8010b44 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8011998:	4630      	mov	r0, r6
 801199a:	f7ff ffbb 	bl	8011914 <prvDeleteTCB>
 801199e:	e7d9      	b.n	8011954 <prvIdleTask+0x8>
 80119a0:	2400fe9c 	.word	0x2400fe9c
 80119a4:	2400ff0c 	.word	0x2400ff0c
 80119a8:	2400fe98 	.word	0x2400fe98
 80119ac:	2400fa38 	.word	0x2400fa38

080119b0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80119b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119b4:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80119b8:	4606      	mov	r6, r0
 80119ba:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119bc:	21a5      	movs	r1, #165	; 0xa5
 80119be:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80119c0:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119c2:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80119c6:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80119ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80119cc:	f012 ffe0 	bl	8024990 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80119d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80119d2:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80119d4:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80119d8:	b3b5      	cbz	r5, 8011a48 <prvInitialiseNewTask.constprop.0+0x98>
 80119da:	1e6b      	subs	r3, r5, #1
 80119dc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80119e0:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80119e2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80119e6:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80119ea:	b108      	cbz	r0, 80119f0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119ec:	42ab      	cmp	r3, r5
 80119ee:	d1f8      	bne.n	80119e2 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119f0:	2300      	movs	r3, #0
 80119f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119f6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80119f8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119fc:	1d20      	adds	r0, r4, #4
 80119fe:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8011a00:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8011a04:	bf28      	it	cs
 8011a06:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8011a08:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8011a0a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a0c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011a10:	f7fe ffdf 	bl	80109d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011a14:	f104 0018 	add.w	r0, r4, #24
 8011a18:	f7fe ffdb 	bl	80109d2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8011a1c:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a20:	463a      	mov	r2, r7
 8011a22:	4631      	mov	r1, r6
 8011a24:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011a26:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a28:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a2a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8011a2c:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a30:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a34:	f7ff f842 	bl	8010abc <pxPortInitialiseStack>
 8011a38:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8011a3a:	f1b8 0f00 	cmp.w	r8, #0
 8011a3e:	d001      	beq.n	8011a44 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a40:	f8c8 4000 	str.w	r4, [r8]
}
 8011a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011a48:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8011a4c:	e7d3      	b.n	80119f6 <prvInitialiseNewTask.constprop.0+0x46>

08011a4e <xTaskCreateStatic>:
	{
 8011a4e:	b570      	push	{r4, r5, r6, lr}
 8011a50:	b086      	sub	sp, #24
 8011a52:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8011a56:	b945      	cbnz	r5, 8011a6a <xTaskCreateStatic+0x1c>
 8011a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	e7fe      	b.n	8011a68 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8011a6a:	b944      	cbnz	r4, 8011a7e <xTaskCreateStatic+0x30>
 8011a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a70:	f383 8811 	msr	BASEPRI, r3
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	f3bf 8f4f 	dsb	sy
 8011a7c:	e7fe      	b.n	8011a7c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a7e:	2660      	movs	r6, #96	; 0x60
 8011a80:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011a82:	9e05      	ldr	r6, [sp, #20]
 8011a84:	2e60      	cmp	r6, #96	; 0x60
 8011a86:	d008      	beq.n	8011a9a <xTaskCreateStatic+0x4c>
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	e7fe      	b.n	8011a98 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a9a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a9c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a9e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011aa0:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011aa4:	ad04      	add	r5, sp, #16
 8011aa6:	9402      	str	r4, [sp, #8]
 8011aa8:	9501      	str	r5, [sp, #4]
 8011aaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011aac:	9500      	str	r5, [sp, #0]
 8011aae:	f7ff ff7f 	bl	80119b0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f7ff fe66 	bl	8011784 <prvAddNewTaskToReadyList>
	}
 8011ab8:	9804      	ldr	r0, [sp, #16]
 8011aba:	b006      	add	sp, #24
 8011abc:	bd70      	pop	{r4, r5, r6, pc}

08011abe <xTaskCreate>:
	{
 8011abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ac2:	4607      	mov	r7, r0
 8011ac4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ac6:	0090      	lsls	r0, r2, #2
	{
 8011ac8:	4688      	mov	r8, r1
 8011aca:	4616      	mov	r6, r2
 8011acc:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ace:	f7fe fe9f 	bl	8010810 <pvPortMalloc>
			if( pxStack != NULL )
 8011ad2:	4605      	mov	r5, r0
 8011ad4:	b1e8      	cbz	r0, 8011b12 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ad6:	2060      	movs	r0, #96	; 0x60
 8011ad8:	f7fe fe9a 	bl	8010810 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8011adc:	4604      	mov	r4, r0
 8011ade:	b1a8      	cbz	r0, 8011b0c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ae0:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8011ae2:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011ae4:	4632      	mov	r2, r6
 8011ae6:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ae8:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aee:	9002      	str	r0, [sp, #8]
 8011af0:	4638      	mov	r0, r7
 8011af2:	9301      	str	r3, [sp, #4]
 8011af4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	464b      	mov	r3, r9
 8011afa:	f7ff ff59 	bl	80119b0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ff fe40 	bl	8011784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011b04:	2001      	movs	r0, #1
	}
 8011b06:	b005      	add	sp, #20
 8011b08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7fe ff17 	bl	8010940 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011b12:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8011b16:	e7f6      	b.n	8011b06 <xTaskCreate+0x48>

08011b18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8011b18:	4a02      	ldr	r2, [pc, #8]	; (8011b24 <vTaskSuspendAll+0xc>)
 8011b1a:	6813      	ldr	r3, [r2, #0]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	6013      	str	r3, [r2, #0]
}
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	2400fea0 	.word	0x2400fea0

08011b28 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8011b28:	4b01      	ldr	r3, [pc, #4]	; (8011b30 <xTaskGetTickCount+0x8>)
 8011b2a:	6818      	ldr	r0, [r3, #0]
}
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	2400ff20 	.word	0x2400ff20

08011b34 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b34:	4b3f      	ldr	r3, [pc, #252]	; (8011c34 <xTaskIncrementTick+0x100>)
 8011b36:	681b      	ldr	r3, [r3, #0]
{
 8011b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d172      	bne.n	8011c26 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b40:	4b3d      	ldr	r3, [pc, #244]	; (8011c38 <xTaskIncrementTick+0x104>)
 8011b42:	681d      	ldr	r5, [r3, #0]
 8011b44:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8011b46:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b48:	b9bd      	cbnz	r5, 8011b7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8011b4a:	4b3c      	ldr	r3, [pc, #240]	; (8011c3c <xTaskIncrementTick+0x108>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	6812      	ldr	r2, [r2, #0]
 8011b50:	b142      	cbz	r2, 8011b64 <xTaskIncrementTick+0x30>
 8011b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b56:	f383 8811 	msr	BASEPRI, r3
 8011b5a:	f3bf 8f6f 	isb	sy
 8011b5e:	f3bf 8f4f 	dsb	sy
 8011b62:	e7fe      	b.n	8011b62 <xTaskIncrementTick+0x2e>
 8011b64:	4a36      	ldr	r2, [pc, #216]	; (8011c40 <xTaskIncrementTick+0x10c>)
 8011b66:	6819      	ldr	r1, [r3, #0]
 8011b68:	6810      	ldr	r0, [r2, #0]
 8011b6a:	6018      	str	r0, [r3, #0]
 8011b6c:	6011      	str	r1, [r2, #0]
 8011b6e:	4a35      	ldr	r2, [pc, #212]	; (8011c44 <xTaskIncrementTick+0x110>)
 8011b70:	6813      	ldr	r3, [r2, #0]
 8011b72:	3301      	adds	r3, #1
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	f7ff febb 	bl	80118f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b7a:	4e33      	ldr	r6, [pc, #204]	; (8011c48 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 8011b7c:	2400      	movs	r4, #0
 8011b7e:	4f33      	ldr	r7, [pc, #204]	; (8011c4c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011b80:	6833      	ldr	r3, [r6, #0]
 8011b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8011c58 <xTaskIncrementTick+0x124>
 8011b86:	429d      	cmp	r5, r3
 8011b88:	d211      	bcs.n	8011bae <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8011b8e:	2214      	movs	r2, #20
 8011b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b92:	4353      	muls	r3, r2
 8011b94:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8011b96:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8011b98:	4b2d      	ldr	r3, [pc, #180]	; (8011c50 <xTaskIncrementTick+0x11c>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8011b9c:	bf28      	it	cs
 8011b9e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	bf18      	it	ne
 8011ba4:	2401      	movne	r4, #1
}
 8011ba6:	4620      	mov	r0, r4
 8011ba8:	b003      	add	sp, #12
 8011baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8011c3c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8011bb2:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8011c5c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bb6:	f8d9 3000 	ldr.w	r3, [r9]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	b91b      	cbnz	r3, 8011bc6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc2:	6033      	str	r3, [r6, #0]
					break;
 8011bc4:	e7e1      	b.n	8011b8a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bc6:	f8d9 3000 	ldr.w	r3, [r9]
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011bd0:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8011bd4:	4295      	cmp	r5, r2
 8011bd6:	d201      	bcs.n	8011bdc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8011bd8:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011bda:	e7d6      	b.n	8011b8a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bdc:	f10b 0104 	add.w	r1, fp, #4
 8011be0:	4608      	mov	r0, r1
 8011be2:	9101      	str	r1, [sp, #4]
 8011be4:	f7fe ff1b 	bl	8010a1e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011be8:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8011bec:	9901      	ldr	r1, [sp, #4]
 8011bee:	b122      	cbz	r2, 8011bfa <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011bf0:	f10b 0018 	add.w	r0, fp, #24
 8011bf4:	f7fe ff13 	bl	8010a1e <uxListRemove>
 8011bf8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8011bfa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8011bfe:	f8da 2000 	ldr.w	r2, [sl]
 8011c02:	4290      	cmp	r0, r2
 8011c04:	d901      	bls.n	8011c0a <xTaskIncrementTick+0xd6>
 8011c06:	f8ca 0000 	str.w	r0, [sl]
 8011c0a:	2314      	movs	r3, #20
 8011c0c:	fb03 7000 	mla	r0, r3, r0, r7
 8011c10:	f7fe fee2 	bl	80109d8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c14:	f8d8 1000 	ldr.w	r1, [r8]
 8011c18:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8011c1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	bf28      	it	cs
 8011c22:	2401      	movcs	r4, #1
 8011c24:	e7c7      	b.n	8011bb6 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 8011c26:	4a0b      	ldr	r2, [pc, #44]	; (8011c54 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8011c28:	2400      	movs	r4, #0
		++xPendedTicks;
 8011c2a:	6813      	ldr	r3, [r2, #0]
 8011c2c:	3301      	adds	r3, #1
 8011c2e:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 8011c30:	e7b9      	b.n	8011ba6 <xTaskIncrementTick+0x72>
 8011c32:	bf00      	nop
 8011c34:	2400fea0 	.word	0x2400fea0
 8011c38:	2400ff20 	.word	0x2400ff20
 8011c3c:	2400fa30 	.word	0x2400fa30
 8011c40:	2400fa34 	.word	0x2400fa34
 8011c44:	2400fed8 	.word	0x2400fed8
 8011c48:	2400fed4 	.word	0x2400fed4
 8011c4c:	2400fa38 	.word	0x2400fa38
 8011c50:	2400ff24 	.word	0x2400ff24
 8011c54:	2400fedc 	.word	0x2400fedc
 8011c58:	2400fa2c 	.word	0x2400fa2c
 8011c5c:	2400fea8 	.word	0x2400fea8

08011c60 <xTaskResumeAll>:
{
 8011c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8011c62:	4c31      	ldr	r4, [pc, #196]	; (8011d28 <xTaskResumeAll+0xc8>)
 8011c64:	6823      	ldr	r3, [r4, #0]
 8011c66:	b943      	cbnz	r3, 8011c7a <xTaskResumeAll+0x1a>
 8011c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	e7fe      	b.n	8011c78 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8011c7a:	f7fe ff43 	bl	8010b04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	3b01      	subs	r3, #1
 8011c82:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c84:	6824      	ldr	r4, [r4, #0]
 8011c86:	b12c      	cbz	r4, 8011c94 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 8011c88:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8011c8a:	f7fe ff5b 	bl	8010b44 <vPortExitCritical>
}
 8011c8e:	4620      	mov	r0, r4
 8011c90:	b003      	add	sp, #12
 8011c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011c94:	4b25      	ldr	r3, [pc, #148]	; (8011d2c <xTaskResumeAll+0xcc>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d0f5      	beq.n	8011c88 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c9c:	4d24      	ldr	r5, [pc, #144]	; (8011d30 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8011c9e:	4e25      	ldr	r6, [pc, #148]	; (8011d34 <xTaskResumeAll+0xd4>)
 8011ca0:	4f25      	ldr	r7, [pc, #148]	; (8011d38 <xTaskResumeAll+0xd8>)
 8011ca2:	e01e      	b.n	8011ce2 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ca4:	68eb      	ldr	r3, [r5, #12]
 8011ca6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ca8:	f104 0018 	add.w	r0, r4, #24
 8011cac:	f7fe feb7 	bl	8010a1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cb0:	1d21      	adds	r1, r4, #4
 8011cb2:	4608      	mov	r0, r1
 8011cb4:	9101      	str	r1, [sp, #4]
 8011cb6:	f7fe feb2 	bl	8010a1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011cba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011cbc:	6832      	ldr	r2, [r6, #0]
 8011cbe:	9901      	ldr	r1, [sp, #4]
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d900      	bls.n	8011cc6 <xTaskResumeAll+0x66>
 8011cc4:	6033      	str	r3, [r6, #0]
 8011cc6:	2014      	movs	r0, #20
 8011cc8:	fb00 7003 	mla	r0, r0, r3, r7
 8011ccc:	f7fe fe84 	bl	80109d8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011cd0:	4b1a      	ldr	r3, [pc, #104]	; (8011d3c <xTaskResumeAll+0xdc>)
 8011cd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d302      	bcc.n	8011ce2 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 8011cdc:	4b18      	ldr	r3, [pc, #96]	; (8011d40 <xTaskResumeAll+0xe0>)
 8011cde:	2201      	movs	r2, #1
 8011ce0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ce2:	682b      	ldr	r3, [r5, #0]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d1dd      	bne.n	8011ca4 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 8011ce8:	b10c      	cbz	r4, 8011cee <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 8011cea:	f7ff fe01 	bl	80118f0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011cee:	4d15      	ldr	r5, [pc, #84]	; (8011d44 <xTaskResumeAll+0xe4>)
 8011cf0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8011cf2:	b144      	cbz	r4, 8011d06 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8011cf4:	4e12      	ldr	r6, [pc, #72]	; (8011d40 <xTaskResumeAll+0xe0>)
 8011cf6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8011cf8:	f7ff ff1c 	bl	8011b34 <xTaskIncrementTick>
 8011cfc:	b100      	cbz	r0, 8011d00 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 8011cfe:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011d00:	3c01      	subs	r4, #1
 8011d02:	d1f9      	bne.n	8011cf8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 8011d04:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8011d06:	4b0e      	ldr	r3, [pc, #56]	; (8011d40 <xTaskResumeAll+0xe0>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d0bc      	beq.n	8011c88 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 8011d0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8011d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8011d1a:	f3bf 8f4f 	dsb	sy
 8011d1e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8011d22:	2401      	movs	r4, #1
 8011d24:	e7b1      	b.n	8011c8a <xTaskResumeAll+0x2a>
 8011d26:	bf00      	nop
 8011d28:	2400fea0 	.word	0x2400fea0
 8011d2c:	2400fe98 	.word	0x2400fe98
 8011d30:	2400fee0 	.word	0x2400fee0
 8011d34:	2400fea8 	.word	0x2400fea8
 8011d38:	2400fa38 	.word	0x2400fa38
 8011d3c:	2400fa2c 	.word	0x2400fa2c
 8011d40:	2400ff24 	.word	0x2400ff24
 8011d44:	2400fedc 	.word	0x2400fedc

08011d48 <vTaskSetApplicationTaskTag>:
	{
 8011d48:	b538      	push	{r3, r4, r5, lr}
 8011d4a:	460d      	mov	r5, r1
		if( xTask == NULL )
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	b908      	cbnz	r0, 8011d54 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8011d50:	4b04      	ldr	r3, [pc, #16]	; (8011d64 <vTaskSetApplicationTaskTag+0x1c>)
 8011d52:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 8011d54:	f7fe fed6 	bl	8010b04 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8011d58:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8011d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8011d5e:	f7fe bef1 	b.w	8010b44 <vPortExitCritical>
 8011d62:	bf00      	nop
 8011d64:	2400fa2c 	.word	0x2400fa2c

08011d68 <xTaskCallApplicationTaskHook>:
	{
 8011d68:	4603      	mov	r3, r0
 8011d6a:	4608      	mov	r0, r1
		if( xTask == NULL )
 8011d6c:	b90b      	cbnz	r3, 8011d72 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8011d6e:	4b03      	ldr	r3, [pc, #12]	; (8011d7c <xTaskCallApplicationTaskHook+0x14>)
 8011d70:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 8011d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d74:	b103      	cbz	r3, 8011d78 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 8011d76:	4718      	bx	r3
	}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	4770      	bx	lr
 8011d7c:	2400fa2c 	.word	0x2400fa2c

08011d80 <vTaskStartScheduler>:
{
 8011d80:	b510      	push	{r4, lr}
 8011d82:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011d84:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011d86:	aa07      	add	r2, sp, #28
 8011d88:	a906      	add	r1, sp, #24
 8011d8a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011d8c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011d90:	f7fe fd02 	bl	8010798 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011d94:	9b05      	ldr	r3, [sp, #20]
 8011d96:	9a07      	ldr	r2, [sp, #28]
 8011d98:	9302      	str	r3, [sp, #8]
 8011d9a:	9b06      	ldr	r3, [sp, #24]
 8011d9c:	4919      	ldr	r1, [pc, #100]	; (8011e04 <vTaskStartScheduler+0x84>)
 8011d9e:	481a      	ldr	r0, [pc, #104]	; (8011e08 <vTaskStartScheduler+0x88>)
 8011da0:	e9cd 4300 	strd	r4, r3, [sp]
 8011da4:	4623      	mov	r3, r4
 8011da6:	f7ff fe52 	bl	8011a4e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8011daa:	b340      	cbz	r0, 8011dfe <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 8011dac:	f000 fa88 	bl	80122c0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8011db0:	2801      	cmp	r0, #1
 8011db2:	d119      	bne.n	8011de8 <vTaskStartScheduler+0x68>
 8011db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db8:	f383 8811 	msr	BASEPRI, r3
 8011dbc:	f3bf 8f6f 	isb	sy
 8011dc0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc8:	4b10      	ldr	r3, [pc, #64]	; (8011e0c <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 8011dca:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011dce:	4b10      	ldr	r3, [pc, #64]	; (8011e10 <vTaskStartScheduler+0x90>)
 8011dd0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011dd2:	4b10      	ldr	r3, [pc, #64]	; (8011e14 <vTaskStartScheduler+0x94>)
 8011dd4:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 8011dd6:	4b10      	ldr	r3, [pc, #64]	; (8011e18 <vTaskStartScheduler+0x98>)
 8011dd8:	6818      	ldr	r0, [r3, #0]
 8011dda:	f7ff ffc5 	bl	8011d68 <xTaskCallApplicationTaskHook>
}
 8011dde:	b008      	add	sp, #32
 8011de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8011de4:	f7fe bf1e 	b.w	8010c24 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011de8:	3001      	adds	r0, #1
 8011dea:	d108      	bne.n	8011dfe <vTaskStartScheduler+0x7e>
 8011dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df0:	f383 8811 	msr	BASEPRI, r3
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	f3bf 8f4f 	dsb	sy
 8011dfc:	e7fe      	b.n	8011dfc <vTaskStartScheduler+0x7c>
}
 8011dfe:	b008      	add	sp, #32
 8011e00:	bd10      	pop	{r4, pc}
 8011e02:	bf00      	nop
 8011e04:	08027624 	.word	0x08027624
 8011e08:	0801194d 	.word	0x0801194d
 8011e0c:	2400fed4 	.word	0x2400fed4
 8011e10:	2400fef4 	.word	0x2400fef4
 8011e14:	2400ff20 	.word	0x2400ff20
 8011e18:	2400fa2c 	.word	0x2400fa2c

08011e1c <vTaskSwitchContext>:
{
 8011e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011e1e:	4b1c      	ldr	r3, [pc, #112]	; (8011e90 <vTaskSwitchContext+0x74>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	4b1c      	ldr	r3, [pc, #112]	; (8011e94 <vTaskSwitchContext+0x78>)
 8011e24:	b112      	cbz	r2, 8011e2c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8011e26:	2201      	movs	r2, #1
 8011e28:	601a      	str	r2, [r3, #0]
}
 8011e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8011e2c:	4c1a      	ldr	r4, [pc, #104]	; (8011e98 <vTaskSwitchContext+0x7c>)
 8011e2e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e30:	4e1a      	ldr	r6, [pc, #104]	; (8011e9c <vTaskSwitchContext+0x80>)
 8011e32:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 8011e34:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8011e36:	6820      	ldr	r0, [r4, #0]
 8011e38:	f7ff ff96 	bl	8011d68 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e3c:	6832      	ldr	r2, [r6, #0]
 8011e3e:	4918      	ldr	r1, [pc, #96]	; (8011ea0 <vTaskSwitchContext+0x84>)
 8011e40:	fb07 f302 	mul.w	r3, r7, r2
 8011e44:	58cd      	ldr	r5, [r1, r3]
 8011e46:	18c8      	adds	r0, r1, r3
 8011e48:	b1ad      	cbz	r5, 8011e76 <vTaskSwitchContext+0x5a>
 8011e4a:	6845      	ldr	r5, [r0, #4]
 8011e4c:	3308      	adds	r3, #8
 8011e4e:	686d      	ldr	r5, [r5, #4]
 8011e50:	440b      	add	r3, r1
 8011e52:	429d      	cmp	r5, r3
 8011e54:	6045      	str	r5, [r0, #4]
 8011e56:	bf04      	itt	eq
 8011e58:	686b      	ldreq	r3, [r5, #4]
 8011e5a:	6043      	streq	r3, [r0, #4]
 8011e5c:	2314      	movs	r3, #20
 8011e5e:	fb03 1102 	mla	r1, r3, r2, r1
 8011e62:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 8011e64:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	6023      	str	r3, [r4, #0]
 8011e6a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 8011e6c:	6820      	ldr	r0, [r4, #0]
}
 8011e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8011e72:	f7ff bf79 	b.w	8011d68 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e76:	b942      	cbnz	r2, 8011e8a <vTaskSwitchContext+0x6e>
 8011e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7c:	f383 8811 	msr	BASEPRI, r3
 8011e80:	f3bf 8f6f 	isb	sy
 8011e84:	f3bf 8f4f 	dsb	sy
 8011e88:	e7fe      	b.n	8011e88 <vTaskSwitchContext+0x6c>
 8011e8a:	3a01      	subs	r2, #1
 8011e8c:	e7d8      	b.n	8011e40 <vTaskSwitchContext+0x24>
 8011e8e:	bf00      	nop
 8011e90:	2400fea0 	.word	0x2400fea0
 8011e94:	2400ff24 	.word	0x2400ff24
 8011e98:	2400fa2c 	.word	0x2400fa2c
 8011e9c:	2400fea8 	.word	0x2400fea8
 8011ea0:	2400fa38 	.word	0x2400fa38

08011ea4 <vTaskPlaceOnEventList>:
{
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8011ea8:	b940      	cbnz	r0, 8011ebc <vTaskPlaceOnEventList+0x18>
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	e7fe      	b.n	8011eba <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ebc:	4b05      	ldr	r3, [pc, #20]	; (8011ed4 <vTaskPlaceOnEventList+0x30>)
 8011ebe:	6819      	ldr	r1, [r3, #0]
 8011ec0:	3118      	adds	r1, #24
 8011ec2:	f7fe fd95 	bl	80109f0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	2101      	movs	r1, #1
}
 8011eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ece:	f7ff bcd7 	b.w	8011880 <prvAddCurrentTaskToDelayedList>
 8011ed2:	bf00      	nop
 8011ed4:	2400fa2c 	.word	0x2400fa2c

08011ed8 <vTaskPlaceOnEventListRestricted>:
	{
 8011ed8:	b538      	push	{r3, r4, r5, lr}
 8011eda:	460d      	mov	r5, r1
 8011edc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8011ede:	b940      	cbnz	r0, 8011ef2 <vTaskPlaceOnEventListRestricted+0x1a>
 8011ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	e7fe      	b.n	8011ef0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ef2:	4b07      	ldr	r3, [pc, #28]	; (8011f10 <vTaskPlaceOnEventListRestricted+0x38>)
 8011ef4:	6819      	ldr	r1, [r3, #0]
 8011ef6:	3118      	adds	r1, #24
 8011ef8:	f7fe fd6e 	bl	80109d8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8011efc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011efe:	4621      	mov	r1, r4
 8011f00:	bf0c      	ite	eq
 8011f02:	4628      	moveq	r0, r5
 8011f04:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8011f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011f0c:	f7ff bcb8 	b.w	8011880 <prvAddCurrentTaskToDelayedList>
 8011f10:	2400fa2c 	.word	0x2400fa2c

08011f14 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f14:	68c3      	ldr	r3, [r0, #12]
{
 8011f16:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f18:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8011f1a:	b944      	cbnz	r4, 8011f2e <xTaskRemoveFromEventList+0x1a>
 8011f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f20:	f383 8811 	msr	BASEPRI, r3
 8011f24:	f3bf 8f6f 	isb	sy
 8011f28:	f3bf 8f4f 	dsb	sy
 8011f2c:	e7fe      	b.n	8011f2c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f2e:	f104 0118 	add.w	r1, r4, #24
 8011f32:	4608      	mov	r0, r1
 8011f34:	9101      	str	r1, [sp, #4]
 8011f36:	f7fe fd72 	bl	8010a1e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f3a:	4b12      	ldr	r3, [pc, #72]	; (8011f84 <xTaskRemoveFromEventList+0x70>)
 8011f3c:	9901      	ldr	r1, [sp, #4]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	b9e3      	cbnz	r3, 8011f7c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f42:	1d21      	adds	r1, r4, #4
 8011f44:	4608      	mov	r0, r1
 8011f46:	9101      	str	r1, [sp, #4]
 8011f48:	f7fe fd69 	bl	8010a1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f4c:	4a0e      	ldr	r2, [pc, #56]	; (8011f88 <xTaskRemoveFromEventList+0x74>)
 8011f4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011f50:	6810      	ldr	r0, [r2, #0]
 8011f52:	9901      	ldr	r1, [sp, #4]
 8011f54:	4283      	cmp	r3, r0
 8011f56:	d900      	bls.n	8011f5a <xTaskRemoveFromEventList+0x46>
 8011f58:	6013      	str	r3, [r2, #0]
 8011f5a:	4a0c      	ldr	r2, [pc, #48]	; (8011f8c <xTaskRemoveFromEventList+0x78>)
 8011f5c:	2014      	movs	r0, #20
 8011f5e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f62:	f7fe fd39 	bl	80109d8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f66:	4b0a      	ldr	r3, [pc, #40]	; (8011f90 <xTaskRemoveFromEventList+0x7c>)
 8011f68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d906      	bls.n	8011f80 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8011f72:	2001      	movs	r0, #1
 8011f74:	4b07      	ldr	r3, [pc, #28]	; (8011f94 <xTaskRemoveFromEventList+0x80>)
 8011f76:	6018      	str	r0, [r3, #0]
}
 8011f78:	b002      	add	sp, #8
 8011f7a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f7c:	4806      	ldr	r0, [pc, #24]	; (8011f98 <xTaskRemoveFromEventList+0x84>)
 8011f7e:	e7f0      	b.n	8011f62 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8011f80:	2000      	movs	r0, #0
	return xReturn;
 8011f82:	e7f9      	b.n	8011f78 <xTaskRemoveFromEventList+0x64>
 8011f84:	2400fea0 	.word	0x2400fea0
 8011f88:	2400fea8 	.word	0x2400fea8
 8011f8c:	2400fa38 	.word	0x2400fa38
 8011f90:	2400fa2c 	.word	0x2400fa2c
 8011f94:	2400ff24 	.word	0x2400ff24
 8011f98:	2400fee0 	.word	0x2400fee0

08011f9c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f9c:	4b03      	ldr	r3, [pc, #12]	; (8011fac <vTaskInternalSetTimeOutState+0x10>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fa2:	4b03      	ldr	r3, [pc, #12]	; (8011fb0 <vTaskInternalSetTimeOutState+0x14>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6043      	str	r3, [r0, #4]
}
 8011fa8:	4770      	bx	lr
 8011faa:	bf00      	nop
 8011fac:	2400fed8 	.word	0x2400fed8
 8011fb0:	2400ff20 	.word	0x2400ff20

08011fb4 <xTaskCheckForTimeOut>:
{
 8011fb4:	b570      	push	{r4, r5, r6, lr}
 8011fb6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8011fb8:	4605      	mov	r5, r0
 8011fba:	b940      	cbnz	r0, 8011fce <xTaskCheckForTimeOut+0x1a>
 8011fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc0:	f383 8811 	msr	BASEPRI, r3
 8011fc4:	f3bf 8f6f 	isb	sy
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	e7fe      	b.n	8011fcc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8011fce:	b941      	cbnz	r1, 8011fe2 <xTaskCheckForTimeOut+0x2e>
 8011fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd4:	f383 8811 	msr	BASEPRI, r3
 8011fd8:	f3bf 8f6f 	isb	sy
 8011fdc:	f3bf 8f4f 	dsb	sy
 8011fe0:	e7fe      	b.n	8011fe0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8011fe2:	f7fe fd8f 	bl	8010b04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8011fe6:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <xTaskCheckForTimeOut+0x70>)
 8011fe8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8011fea:	6823      	ldr	r3, [r4, #0]
 8011fec:	1c5a      	adds	r2, r3, #1
 8011fee:	d010      	beq.n	8012012 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ff0:	480d      	ldr	r0, [pc, #52]	; (8012028 <xTaskCheckForTimeOut+0x74>)
 8011ff2:	682e      	ldr	r6, [r5, #0]
 8011ff4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ff6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ff8:	4286      	cmp	r6, r0
 8011ffa:	d001      	beq.n	8012000 <xTaskCheckForTimeOut+0x4c>
 8011ffc:	428a      	cmp	r2, r1
 8011ffe:	d90f      	bls.n	8012020 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012000:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012002:	4283      	cmp	r3, r0
 8012004:	d90a      	bls.n	801201c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8012006:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012008:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 801200a:	4413      	add	r3, r2
 801200c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801200e:	f7ff ffc5 	bl	8011f9c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8012012:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8012014:	f7fe fd96 	bl	8010b44 <vPortExitCritical>
}
 8012018:	4620      	mov	r0, r4
 801201a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 801201c:	2300      	movs	r3, #0
 801201e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8012020:	2401      	movs	r4, #1
 8012022:	e7f7      	b.n	8012014 <xTaskCheckForTimeOut+0x60>
 8012024:	2400ff20 	.word	0x2400ff20
 8012028:	2400fed8 	.word	0x2400fed8

0801202c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801202c:	4b01      	ldr	r3, [pc, #4]	; (8012034 <vTaskMissedYield+0x8>)
 801202e:	2201      	movs	r2, #1
 8012030:	601a      	str	r2, [r3, #0]
}
 8012032:	4770      	bx	lr
 8012034:	2400ff24 	.word	0x2400ff24

08012038 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8012038:	4b05      	ldr	r3, [pc, #20]	; (8012050 <xTaskGetSchedulerState+0x18>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	b133      	cbz	r3, 801204c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801203e:	4b05      	ldr	r3, [pc, #20]	; (8012054 <xTaskGetSchedulerState+0x1c>)
 8012040:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8012042:	2b00      	cmp	r3, #0
 8012044:	bf0c      	ite	eq
 8012046:	2002      	moveq	r0, #2
 8012048:	2000      	movne	r0, #0
 801204a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 801204c:	2001      	movs	r0, #1
	}
 801204e:	4770      	bx	lr
 8012050:	2400fef4 	.word	0x2400fef4
 8012054:	2400fea0 	.word	0x2400fea0

08012058 <xTaskPriorityInherit>:
	{
 8012058:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 801205a:	4604      	mov	r4, r0
 801205c:	b340      	cbz	r0, 80120b0 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801205e:	4d1b      	ldr	r5, [pc, #108]	; (80120cc <xTaskPriorityInherit+0x74>)
 8012060:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012062:	682a      	ldr	r2, [r5, #0]
 8012064:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012066:	4293      	cmp	r3, r2
 8012068:	d228      	bcs.n	80120bc <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801206a:	6982      	ldr	r2, [r0, #24]
 801206c:	2a00      	cmp	r2, #0
 801206e:	db04      	blt.n	801207a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012070:	682a      	ldr	r2, [r5, #0]
 8012072:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012074:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8012078:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801207a:	2214      	movs	r2, #20
 801207c:	4e14      	ldr	r6, [pc, #80]	; (80120d0 <xTaskPriorityInherit+0x78>)
 801207e:	fb02 6303 	mla	r3, r2, r3, r6
 8012082:	6962      	ldr	r2, [r4, #20]
 8012084:	429a      	cmp	r2, r3
 8012086:	d115      	bne.n	80120b4 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012088:	1d21      	adds	r1, r4, #4
 801208a:	4608      	mov	r0, r1
 801208c:	9101      	str	r1, [sp, #4]
 801208e:	f7fe fcc6 	bl	8010a1e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012092:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012094:	4a0f      	ldr	r2, [pc, #60]	; (80120d4 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012098:	6810      	ldr	r0, [r2, #0]
 801209a:	9901      	ldr	r1, [sp, #4]
 801209c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801209e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80120a0:	d900      	bls.n	80120a4 <xTaskPriorityInherit+0x4c>
 80120a2:	6013      	str	r3, [r2, #0]
 80120a4:	2014      	movs	r0, #20
 80120a6:	fb00 6003 	mla	r0, r0, r3, r6
 80120aa:	f7fe fc95 	bl	80109d8 <vListInsertEnd>
				xReturn = pdTRUE;
 80120ae:	2001      	movs	r0, #1
	}
 80120b0:	b002      	add	sp, #8
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80120b4:	682b      	ldr	r3, [r5, #0]
 80120b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80120ba:	e7f8      	b.n	80120ae <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80120bc:	682b      	ldr	r3, [r5, #0]
 80120be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80120c0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80120c2:	42a0      	cmp	r0, r4
 80120c4:	bf2c      	ite	cs
 80120c6:	2000      	movcs	r0, #0
 80120c8:	2001      	movcc	r0, #1
 80120ca:	e7f1      	b.n	80120b0 <xTaskPriorityInherit+0x58>
 80120cc:	2400fa2c 	.word	0x2400fa2c
 80120d0:	2400fa38 	.word	0x2400fa38
 80120d4:	2400fea8 	.word	0x2400fea8

080120d8 <xTaskPriorityDisinherit>:
	{
 80120d8:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 80120da:	b910      	cbnz	r0, 80120e2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80120dc:	2000      	movs	r0, #0
	}
 80120de:	b002      	add	sp, #8
 80120e0:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80120e2:	4b1c      	ldr	r3, [pc, #112]	; (8012154 <xTaskPriorityDisinherit+0x7c>)
 80120e4:	681c      	ldr	r4, [r3, #0]
 80120e6:	4284      	cmp	r4, r0
 80120e8:	d008      	beq.n	80120fc <xTaskPriorityDisinherit+0x24>
 80120ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ee:	f383 8811 	msr	BASEPRI, r3
 80120f2:	f3bf 8f6f 	isb	sy
 80120f6:	f3bf 8f4f 	dsb	sy
 80120fa:	e7fe      	b.n	80120fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80120fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80120fe:	b943      	cbnz	r3, 8012112 <xTaskPriorityDisinherit+0x3a>
 8012100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	e7fe      	b.n	8012110 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012112:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8012114:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012116:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8012118:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801211a:	4291      	cmp	r1, r2
 801211c:	d0de      	beq.n	80120dc <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1dc      	bne.n	80120dc <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012122:	1d21      	adds	r1, r4, #4
 8012124:	4608      	mov	r0, r1
 8012126:	9101      	str	r1, [sp, #4]
 8012128:	f7fe fc79 	bl	8010a1e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801212c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 801212e:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012130:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012134:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012136:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8012138:	4a07      	ldr	r2, [pc, #28]	; (8012158 <xTaskPriorityDisinherit+0x80>)
 801213a:	6810      	ldr	r0, [r2, #0]
 801213c:	4283      	cmp	r3, r0
 801213e:	d900      	bls.n	8012142 <xTaskPriorityDisinherit+0x6a>
 8012140:	6013      	str	r3, [r2, #0]
 8012142:	4a06      	ldr	r2, [pc, #24]	; (801215c <xTaskPriorityDisinherit+0x84>)
 8012144:	2014      	movs	r0, #20
 8012146:	fb00 2003 	mla	r0, r0, r3, r2
 801214a:	f7fe fc45 	bl	80109d8 <vListInsertEnd>
					xReturn = pdTRUE;
 801214e:	2001      	movs	r0, #1
		return xReturn;
 8012150:	e7c5      	b.n	80120de <xTaskPriorityDisinherit+0x6>
 8012152:	bf00      	nop
 8012154:	2400fa2c 	.word	0x2400fa2c
 8012158:	2400fea8 	.word	0x2400fea8
 801215c:	2400fa38 	.word	0x2400fa38

08012160 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8012160:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8012162:	4604      	mov	r4, r0
 8012164:	2800      	cmp	r0, #0
 8012166:	d044      	beq.n	80121f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 8012168:	6d02      	ldr	r2, [r0, #80]	; 0x50
 801216a:	b942      	cbnz	r2, 801217e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 801216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012170:	f383 8811 	msr	BASEPRI, r3
 8012174:	f3bf 8f6f 	isb	sy
 8012178:	f3bf 8f4f 	dsb	sy
 801217c:	e7fe      	b.n	801217c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801217e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8012180:	4299      	cmp	r1, r3
 8012182:	bf38      	it	cc
 8012184:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012186:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012188:	428b      	cmp	r3, r1
 801218a:	d032      	beq.n	80121f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801218c:	2a01      	cmp	r2, #1
 801218e:	d130      	bne.n	80121f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 8012190:	4a19      	ldr	r2, [pc, #100]	; (80121f8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8012192:	6812      	ldr	r2, [r2, #0]
 8012194:	4282      	cmp	r2, r0
 8012196:	d108      	bne.n	80121aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8012198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801219c:	f383 8811 	msr	BASEPRI, r3
 80121a0:	f3bf 8f6f 	isb	sy
 80121a4:	f3bf 8f4f 	dsb	sy
 80121a8:	e7fe      	b.n	80121a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121aa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121ac:	4d13      	ldr	r5, [pc, #76]	; (80121fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121ae:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121b0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80121b4:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121b6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ba:	bfa8      	it	ge
 80121bc:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121c0:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121c2:	bfa8      	it	ge
 80121c4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d113      	bne.n	80121f2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121ca:	1d01      	adds	r1, r0, #4
 80121cc:	4608      	mov	r0, r1
 80121ce:	9101      	str	r1, [sp, #4]
 80121d0:	f7fe fc25 	bl	8010a1e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80121d4:	4a0a      	ldr	r2, [pc, #40]	; (8012200 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80121d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80121d8:	6810      	ldr	r0, [r2, #0]
 80121da:	9901      	ldr	r1, [sp, #4]
 80121dc:	4283      	cmp	r3, r0
 80121de:	d900      	bls.n	80121e2 <vTaskPriorityDisinheritAfterTimeout+0x82>
 80121e0:	6013      	str	r3, [r2, #0]
 80121e2:	2014      	movs	r0, #20
 80121e4:	fb00 5003 	mla	r0, r0, r3, r5
	}
 80121e8:	b003      	add	sp, #12
 80121ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80121ee:	f7fe bbf3 	b.w	80109d8 <vListInsertEnd>
	}
 80121f2:	b003      	add	sp, #12
 80121f4:	bd30      	pop	{r4, r5, pc}
 80121f6:	bf00      	nop
 80121f8:	2400fa2c 	.word	0x2400fa2c
 80121fc:	2400fa38 	.word	0x2400fa38
 8012200:	2400fea8 	.word	0x2400fea8

08012204 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8012204:	4b04      	ldr	r3, [pc, #16]	; (8012218 <pvTaskIncrementMutexHeldCount+0x14>)
 8012206:	681a      	ldr	r2, [r3, #0]
 8012208:	b11a      	cbz	r2, 8012212 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 801220a:	6819      	ldr	r1, [r3, #0]
 801220c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 801220e:	3201      	adds	r2, #1
 8012210:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8012212:	6818      	ldr	r0, [r3, #0]
	}
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop
 8012218:	2400fa2c 	.word	0x2400fa2c

0801221c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801221c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801221e:	4c11      	ldr	r4, [pc, #68]	; (8012264 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8012220:	f7fe fc70 	bl	8010b04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8012224:	6825      	ldr	r5, [r4, #0]
 8012226:	b9bd      	cbnz	r5, 8012258 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8012228:	4f0f      	ldr	r7, [pc, #60]	; (8012268 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 801222a:	4e10      	ldr	r6, [pc, #64]	; (801226c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 801222c:	4638      	mov	r0, r7
 801222e:	f7fe fbc5 	bl	80109bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012232:	4630      	mov	r0, r6
 8012234:	f7fe fbc2 	bl	80109bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012238:	4b0d      	ldr	r3, [pc, #52]	; (8012270 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801223a:	4a0e      	ldr	r2, [pc, #56]	; (8012274 <prvCheckForValidListAndQueue+0x58>)
 801223c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 801223e:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012240:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8012242:	4b0d      	ldr	r3, [pc, #52]	; (8012278 <prvCheckForValidListAndQueue+0x5c>)
 8012244:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012246:	4b0d      	ldr	r3, [pc, #52]	; (801227c <prvCheckForValidListAndQueue+0x60>)
 8012248:	9500      	str	r5, [sp, #0]
 801224a:	f7fe fe6b 	bl	8010f24 <xQueueGenericCreateStatic>
 801224e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012250:	b110      	cbz	r0, 8012258 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012252:	490b      	ldr	r1, [pc, #44]	; (8012280 <prvCheckForValidListAndQueue+0x64>)
 8012254:	f7ff fa36 	bl	80116c4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8012258:	b003      	add	sp, #12
 801225a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801225e:	f7fe bc71 	b.w	8010b44 <vPortExitCritical>
 8012262:	bf00      	nop
 8012264:	2401004c 	.word	0x2401004c
 8012268:	2400ffd0 	.word	0x2400ffd0
 801226c:	2400ffe4 	.word	0x2400ffe4
 8012270:	2400ff28 	.word	0x2400ff28
 8012274:	2400ff30 	.word	0x2400ff30
 8012278:	2400ff2c 	.word	0x2400ff2c
 801227c:	2400fffc 	.word	0x2400fffc
 8012280:	08027629 	.word	0x08027629

08012284 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8012284:	4291      	cmp	r1, r2
{
 8012286:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012288:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801228a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 801228c:	d80a      	bhi.n	80122a4 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801228e:	1ad2      	subs	r2, r2, r3
 8012290:	6983      	ldr	r3, [r0, #24]
 8012292:	429a      	cmp	r2, r3
 8012294:	d20d      	bcs.n	80122b2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012296:	1d01      	adds	r1, r0, #4
 8012298:	4b07      	ldr	r3, [pc, #28]	; (80122b8 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801229a:	6818      	ldr	r0, [r3, #0]
 801229c:	f7fe fba8 	bl	80109f0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80122a0:	2000      	movs	r0, #0
}
 80122a2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d201      	bcs.n	80122ac <prvInsertTimerInActiveList+0x28>
 80122a8:	4299      	cmp	r1, r3
 80122aa:	d202      	bcs.n	80122b2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122ac:	1d01      	adds	r1, r0, #4
 80122ae:	4b03      	ldr	r3, [pc, #12]	; (80122bc <prvInsertTimerInActiveList+0x38>)
 80122b0:	e7f3      	b.n	801229a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80122b2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80122b4:	e7f5      	b.n	80122a2 <prvInsertTimerInActiveList+0x1e>
 80122b6:	bf00      	nop
 80122b8:	2400ff2c 	.word	0x2400ff2c
 80122bc:	2400ff28 	.word	0x2400ff28

080122c0 <xTimerCreateTimerTask>:
{
 80122c0:	b510      	push	{r4, lr}
 80122c2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80122c4:	f7ff ffaa 	bl	801221c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80122c8:	4b12      	ldr	r3, [pc, #72]	; (8012314 <xTimerCreateTimerTask+0x54>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	b1b3      	cbz	r3, 80122fc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80122ce:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80122d0:	aa07      	add	r2, sp, #28
 80122d2:	a906      	add	r1, sp, #24
 80122d4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80122d6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80122da:	f7fe fa69 	bl	80107b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80122de:	9b05      	ldr	r3, [sp, #20]
 80122e0:	9a07      	ldr	r2, [sp, #28]
 80122e2:	9302      	str	r3, [sp, #8]
 80122e4:	9b06      	ldr	r3, [sp, #24]
 80122e6:	490c      	ldr	r1, [pc, #48]	; (8012318 <xTimerCreateTimerTask+0x58>)
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	2302      	movs	r3, #2
 80122ec:	480b      	ldr	r0, [pc, #44]	; (801231c <xTimerCreateTimerTask+0x5c>)
 80122ee:	9300      	str	r3, [sp, #0]
 80122f0:	4623      	mov	r3, r4
 80122f2:	f7ff fbac 	bl	8011a4e <xTaskCreateStatic>
 80122f6:	4b0a      	ldr	r3, [pc, #40]	; (8012320 <xTimerCreateTimerTask+0x60>)
 80122f8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80122fa:	b940      	cbnz	r0, 801230e <xTimerCreateTimerTask+0x4e>
 80122fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801230c:	e7fe      	b.n	801230c <xTimerCreateTimerTask+0x4c>
}
 801230e:	2001      	movs	r0, #1
 8012310:	b008      	add	sp, #32
 8012312:	bd10      	pop	{r4, pc}
 8012314:	2401004c 	.word	0x2401004c
 8012318:	0802762e 	.word	0x0802762e
 801231c:	08012425 	.word	0x08012425
 8012320:	24010050 	.word	0x24010050

08012324 <xTimerGenericCommand>:
{
 8012324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012326:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8012328:	4604      	mov	r4, r0
{
 801232a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 801232c:	b940      	cbnz	r0, 8012340 <xTimerGenericCommand+0x1c>
 801232e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012332:	f383 8811 	msr	BASEPRI, r3
 8012336:	f3bf 8f6f 	isb	sy
 801233a:	f3bf 8f4f 	dsb	sy
 801233e:	e7fe      	b.n	801233e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8012340:	4d0c      	ldr	r5, [pc, #48]	; (8012374 <xTimerGenericCommand+0x50>)
 8012342:	6828      	ldr	r0, [r5, #0]
 8012344:	b178      	cbz	r0, 8012366 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012346:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012348:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801234a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801234e:	dc0c      	bgt.n	801236a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012350:	f7ff fe72 	bl	8012038 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012354:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012356:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012358:	4669      	mov	r1, sp
 801235a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801235c:	bf0c      	ite	eq
 801235e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012360:	461a      	movne	r2, r3
 8012362:	f7fe fe94 	bl	801108e <xQueueGenericSend>
}
 8012366:	b004      	add	sp, #16
 8012368:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801236a:	2300      	movs	r3, #0
 801236c:	4669      	mov	r1, sp
 801236e:	f7fe ff41 	bl	80111f4 <xQueueGenericSendFromISR>
 8012372:	e7f8      	b.n	8012366 <xTimerGenericCommand+0x42>
 8012374:	2401004c 	.word	0x2401004c

08012378 <prvSampleTimeNow>:
{
 8012378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 801237c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8012420 <prvSampleTimeNow+0xa8>
{
 8012380:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8012382:	f7ff fbd1 	bl	8011b28 <xTaskGetTickCount>
 8012386:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8012388:	f8d8 3000 	ldr.w	r3, [r8]
 801238c:	4283      	cmp	r3, r0
 801238e:	d940      	bls.n	8012412 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012390:	4f21      	ldr	r7, [pc, #132]	; (8012418 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012392:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	b95a      	cbnz	r2, 80123b4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 801239c:	4a1f      	ldr	r2, [pc, #124]	; (801241c <prvSampleTimeNow+0xa4>)
 801239e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80123a0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80123a2:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 80123a4:	6039      	str	r1, [r7, #0]
}
 80123a6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 80123a8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80123aa:	f8c8 5000 	str.w	r5, [r8]
}
 80123ae:	b004      	add	sp, #16
 80123b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123b4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123b6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123b8:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123bc:	1d21      	adds	r1, r4, #4
 80123be:	4608      	mov	r0, r1
 80123c0:	9103      	str	r1, [sp, #12]
 80123c2:	f7fe fb2c 	bl	8010a1e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123c6:	6a23      	ldr	r3, [r4, #32]
 80123c8:	4620      	mov	r0, r4
 80123ca:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80123d0:	9903      	ldr	r1, [sp, #12]
 80123d2:	f013 0f04 	tst.w	r3, #4
 80123d6:	d0de      	beq.n	8012396 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123d8:	69a3      	ldr	r3, [r4, #24]
 80123da:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80123dc:	459a      	cmp	sl, r3
 80123de:	d205      	bcs.n	80123ec <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123e0:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123e2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123e4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123e6:	f7fe fb03 	bl	80109f0 <vListInsert>
 80123ea:	e7d4      	b.n	8012396 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80123ec:	2300      	movs	r3, #0
 80123ee:	4652      	mov	r2, sl
 80123f0:	4620      	mov	r0, r4
 80123f2:	f8cd 9000 	str.w	r9, [sp]
 80123f6:	4619      	mov	r1, r3
 80123f8:	f7ff ff94 	bl	8012324 <xTimerGenericCommand>
				configASSERT( xResult );
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d1ca      	bne.n	8012396 <prvSampleTimeNow+0x1e>
 8012400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	e7fe      	b.n	8012410 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 8012412:	2300      	movs	r3, #0
 8012414:	e7c7      	b.n	80123a6 <prvSampleTimeNow+0x2e>
 8012416:	bf00      	nop
 8012418:	2400ff28 	.word	0x2400ff28
 801241c:	2400ff2c 	.word	0x2400ff2c
 8012420:	2400fff8 	.word	0x2400fff8

08012424 <prvTimerTask>:
{
 8012424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012428:	4d6e      	ldr	r5, [pc, #440]	; (80125e4 <prvTimerTask+0x1c0>)
{
 801242a:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801242c:	4e6e      	ldr	r6, [pc, #440]	; (80125e8 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801242e:	682b      	ldr	r3, [r5, #0]
 8012430:	f8d3 8000 	ldr.w	r8, [r3]
 8012434:	f1b8 0f00 	cmp.w	r8, #0
 8012438:	d035      	beq.n	80124a6 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801243a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801243c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801243e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8012442:	f7ff fb69 	bl	8011b18 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012446:	a804      	add	r0, sp, #16
 8012448:	f7ff ff96 	bl	8012378 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 801244c:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801244e:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8012450:	2b00      	cmp	r3, #0
 8012452:	d169      	bne.n	8012528 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012454:	2c00      	cmp	r4, #0
 8012456:	d14c      	bne.n	80124f2 <prvTimerTask+0xce>
 8012458:	4540      	cmp	r0, r8
 801245a:	d350      	bcc.n	80124fe <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 801245c:	f7ff fc00 	bl	8011c60 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012466:	1d38      	adds	r0, r7, #4
 8012468:	f7fe fad9 	bl	8010a1e <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801246c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012470:	0758      	lsls	r0, r3, #29
 8012472:	d51a      	bpl.n	80124aa <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012474:	69b9      	ldr	r1, [r7, #24]
 8012476:	4643      	mov	r3, r8
 8012478:	464a      	mov	r2, r9
 801247a:	4638      	mov	r0, r7
 801247c:	4441      	add	r1, r8
 801247e:	f7ff ff01 	bl	8012284 <prvInsertTimerInActiveList>
 8012482:	b1b0      	cbz	r0, 80124b2 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012484:	4623      	mov	r3, r4
 8012486:	4642      	mov	r2, r8
 8012488:	4621      	mov	r1, r4
 801248a:	4638      	mov	r0, r7
 801248c:	9400      	str	r4, [sp, #0]
 801248e:	f7ff ff49 	bl	8012324 <xTimerGenericCommand>
			configASSERT( xResult );
 8012492:	b970      	cbnz	r0, 80124b2 <prvTimerTask+0x8e>
 8012494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012498:	f383 8811 	msr	BASEPRI, r3
 801249c:	f3bf 8f6f 	isb	sy
 80124a0:	f3bf 8f4f 	dsb	sy
 80124a4:	e7fe      	b.n	80124a4 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80124a6:	2401      	movs	r4, #1
 80124a8:	e7cb      	b.n	8012442 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124aa:	f023 0301 	bic.w	r3, r3, #1
 80124ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	4638      	mov	r0, r7
 80124b6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124b8:	2200      	movs	r2, #0
 80124ba:	a904      	add	r1, sp, #16
 80124bc:	6830      	ldr	r0, [r6, #0]
 80124be:	f7fe ff4f 	bl	8011360 <xQueueReceive>
 80124c2:	2800      	cmp	r0, #0
 80124c4:	d0b3      	beq.n	801242e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80124c6:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80124c8:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	db2f      	blt.n	801252e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80124ce:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80124d0:	6963      	ldr	r3, [r4, #20]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d132      	bne.n	801253c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80124d6:	a803      	add	r0, sp, #12
 80124d8:	f7ff ff4e 	bl	8012378 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80124dc:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80124de:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80124e0:	2b09      	cmp	r3, #9
 80124e2:	d8e9      	bhi.n	80124b8 <prvTimerTask+0x94>
 80124e4:	e8df f003 	tbb	[pc, r3]
 80124e8:	572e2e2e 	.word	0x572e2e2e
 80124ec:	2e2e765e 	.word	0x2e2e765e
 80124f0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80124f2:	4b3e      	ldr	r3, [pc, #248]	; (80125ec <prvTimerTask+0x1c8>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	681c      	ldr	r4, [r3, #0]
 80124f8:	fab4 f484 	clz	r4, r4
 80124fc:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80124fe:	4622      	mov	r2, r4
 8012500:	eba8 0109 	sub.w	r1, r8, r9
 8012504:	6830      	ldr	r0, [r6, #0]
 8012506:	f7ff f91a 	bl	801173e <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801250a:	f7ff fba9 	bl	8011c60 <xTaskResumeAll>
 801250e:	2800      	cmp	r0, #0
 8012510:	d1d2      	bne.n	80124b8 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8012512:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8012516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801251a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801251e:	f3bf 8f4f 	dsb	sy
 8012522:	f3bf 8f6f 	isb	sy
 8012526:	e7c7      	b.n	80124b8 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8012528:	f7ff fb9a 	bl	8011c60 <xTaskResumeAll>
}
 801252c:	e7c4      	b.n	80124b8 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801252e:	9b05      	ldr	r3, [sp, #20]
 8012530:	9907      	ldr	r1, [sp, #28]
 8012532:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012534:	9b04      	ldr	r3, [sp, #16]
 8012536:	2b00      	cmp	r3, #0
 8012538:	dbbe      	blt.n	80124b8 <prvTimerTask+0x94>
 801253a:	e7c8      	b.n	80124ce <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801253c:	1d20      	adds	r0, r4, #4
 801253e:	f7fe fa6e 	bl	8010a1e <uxListRemove>
 8012542:	e7c8      	b.n	80124d6 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012544:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012548:	4620      	mov	r0, r4
 801254a:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801254c:	f043 0301 	orr.w	r3, r3, #1
 8012550:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012554:	9b05      	ldr	r3, [sp, #20]
 8012556:	4419      	add	r1, r3
 8012558:	f7ff fe94 	bl	8012284 <prvInsertTimerInActiveList>
 801255c:	2800      	cmp	r0, #0
 801255e:	d0ab      	beq.n	80124b8 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012560:	6a23      	ldr	r3, [r4, #32]
 8012562:	4620      	mov	r0, r4
 8012564:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012566:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801256a:	0759      	lsls	r1, r3, #29
 801256c:	d5a4      	bpl.n	80124b8 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801256e:	69a2      	ldr	r2, [r4, #24]
 8012570:	2300      	movs	r3, #0
 8012572:	9905      	ldr	r1, [sp, #20]
 8012574:	4620      	mov	r0, r4
 8012576:	9300      	str	r3, [sp, #0]
 8012578:	440a      	add	r2, r1
 801257a:	4619      	mov	r1, r3
 801257c:	f7ff fed2 	bl	8012324 <xTimerGenericCommand>
							configASSERT( xResult );
 8012580:	2800      	cmp	r0, #0
 8012582:	d199      	bne.n	80124b8 <prvTimerTask+0x94>
 8012584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	e7fe      	b.n	8012594 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012596:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801259a:	f023 0301 	bic.w	r3, r3, #1
 801259e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80125a2:	e789      	b.n	80124b8 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80125a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80125a8:	f043 0301 	orr.w	r3, r3, #1
 80125ac:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80125b0:	9905      	ldr	r1, [sp, #20]
 80125b2:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80125b4:	b941      	cbnz	r1, 80125c8 <prvTimerTask+0x1a4>
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	e7fe      	b.n	80125c6 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80125c8:	4603      	mov	r3, r0
 80125ca:	4401      	add	r1, r0
 80125cc:	4620      	mov	r0, r4
 80125ce:	f7ff fe59 	bl	8012284 <prvInsertTimerInActiveList>
					break;
 80125d2:	e771      	b.n	80124b8 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80125d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80125d8:	079a      	lsls	r2, r3, #30
 80125da:	d4de      	bmi.n	801259a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 80125dc:	4620      	mov	r0, r4
 80125de:	f7fe f9af 	bl	8010940 <vPortFree>
 80125e2:	e769      	b.n	80124b8 <prvTimerTask+0x94>
 80125e4:	2400ff28 	.word	0x2400ff28
 80125e8:	2401004c 	.word	0x2401004c
 80125ec:	2400ff2c 	.word	0x2400ff2c

080125f0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80125f0:	8880      	ldrh	r0, [r0, #4]
 80125f2:	4770      	bx	lr

080125f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80125f4:	b570      	push	{r4, r5, r6, lr}
 80125f6:	6803      	ldr	r3, [r0, #0]
 80125f8:	460c      	mov	r4, r1
 80125fa:	2100      	movs	r1, #0
 80125fc:	4605      	mov	r5, r0
 80125fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012600:	4798      	blx	r3
 8012602:	4606      	mov	r6, r0
 8012604:	682b      	ldr	r3, [r5, #0]
 8012606:	4628      	mov	r0, r5
 8012608:	1ba4      	subs	r4, r4, r6
 801260a:	6a1b      	ldr	r3, [r3, #32]
 801260c:	b2a4      	uxth	r4, r4
 801260e:	4798      	blx	r3
 8012610:	fbb4 f0f0 	udiv	r0, r4, r0
 8012614:	bd70      	pop	{r4, r5, r6, pc}

08012616 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8012616:	2300      	movs	r3, #0
 8012618:	8083      	strh	r3, [r0, #4]
 801261a:	4770      	bx	lr

0801261c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801261c:	b510      	push	{r4, lr}
 801261e:	6803      	ldr	r3, [r0, #0]
 8012620:	4604      	mov	r4, r0
 8012622:	8881      	ldrh	r1, [r0, #4]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	4798      	blx	r3
 8012628:	88a3      	ldrh	r3, [r4, #4]
 801262a:	3301      	adds	r3, #1
 801262c:	80a3      	strh	r3, [r4, #4]
 801262e:	bd10      	pop	{r4, pc}

08012630 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8012630:	6803      	ldr	r3, [r0, #0]
 8012632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012634:	4718      	bx	r3

08012636 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8012636:	4770      	bx	lr

08012638 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8012638:	4a02      	ldr	r2, [pc, #8]	; (8012644 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801263a:	6002      	str	r2, [r0, #0]
 801263c:	2200      	movs	r2, #0
 801263e:	8082      	strh	r2, [r0, #4]
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	08027640 	.word	0x08027640

08012648 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8012648:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801264a:	2000      	movs	r0, #0
 801264c:	b12b      	cbz	r3, 801265a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801264e:	b920      	cbnz	r0, 801265a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8012650:	1a5a      	subs	r2, r3, r1
 8012652:	699b      	ldr	r3, [r3, #24]
 8012654:	4250      	negs	r0, r2
 8012656:	4150      	adcs	r0, r2
 8012658:	e7f8      	b.n	801264c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801265a:	4770      	bx	lr

0801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801265c:	2300      	movs	r3, #0
 801265e:	6148      	str	r0, [r1, #20]
 8012660:	618b      	str	r3, [r1, #24]
 8012662:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012664:	b913      	cbnz	r3, 801266c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012666:	6281      	str	r1, [r0, #40]	; 0x28
 8012668:	4770      	bx	lr
 801266a:	4613      	mov	r3, r2
 801266c:	699a      	ldr	r2, [r3, #24]
 801266e:	2a00      	cmp	r2, #0
 8012670:	d1fb      	bne.n	801266a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012672:	6199      	str	r1, [r3, #24]
 8012674:	4770      	bx	lr

08012676 <_ZN8touchgfx9Container9removeAllEv>:
 8012676:	2200      	movs	r2, #0
 8012678:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801267a:	b123      	cbz	r3, 8012686 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801267c:	6999      	ldr	r1, [r3, #24]
 801267e:	6281      	str	r1, [r0, #40]	; 0x28
 8012680:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012684:	e7f8      	b.n	8012678 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012686:	4770      	bx	lr

08012688 <_ZN8touchgfx9Container6unlinkEv>:
 8012688:	2300      	movs	r3, #0
 801268a:	6283      	str	r3, [r0, #40]	; 0x28
 801268c:	4770      	bx	lr

0801268e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801268e:	2200      	movs	r2, #0
 8012690:	8002      	strh	r2, [r0, #0]
 8012692:	8042      	strh	r2, [r0, #2]
 8012694:	8082      	strh	r2, [r0, #4]
 8012696:	80c2      	strh	r2, [r0, #6]
 8012698:	4770      	bx	lr

0801269a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801269a:	b570      	push	{r4, r5, r6, lr}
 801269c:	460d      	mov	r5, r1
 801269e:	4616      	mov	r6, r2
 80126a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80126a2:	b13c      	cbz	r4, 80126b4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80126a4:	6823      	ldr	r3, [r4, #0]
 80126a6:	4620      	mov	r0, r4
 80126a8:	4632      	mov	r2, r6
 80126aa:	4629      	mov	r1, r5
 80126ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ae:	4798      	blx	r3
 80126b0:	69a4      	ldr	r4, [r4, #24]
 80126b2:	e7f6      	b.n	80126a2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80126b4:	bd70      	pop	{r4, r5, r6, pc}

080126b6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80126b6:	b538      	push	{r3, r4, r5, lr}
 80126b8:	460d      	mov	r5, r1
 80126ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80126bc:	b134      	cbz	r4, 80126cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80126be:	682b      	ldr	r3, [r5, #0]
 80126c0:	4621      	mov	r1, r4
 80126c2:	4628      	mov	r0, r5
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	4798      	blx	r3
 80126c8:	69a4      	ldr	r4, [r4, #24]
 80126ca:	e7f7      	b.n	80126bc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80126cc:	bd38      	pop	{r3, r4, r5, pc}

080126ce <_ZN8touchgfx9ContainerD1Ev>:
 80126ce:	4770      	bx	lr

080126d0 <_ZN8touchgfx9ContainerD0Ev>:
 80126d0:	b510      	push	{r4, lr}
 80126d2:	4604      	mov	r4, r0
 80126d4:	212c      	movs	r1, #44	; 0x2c
 80126d6:	f011 ffc2 	bl	802465e <_ZdlPvj>
 80126da:	4620      	mov	r0, r4
 80126dc:	bd10      	pop	{r4, pc}

080126de <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80126de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80126e0:	b19b      	cbz	r3, 801270a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80126e2:	428b      	cmp	r3, r1
 80126e4:	d109      	bne.n	80126fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80126e6:	699a      	ldr	r2, [r3, #24]
 80126e8:	2100      	movs	r1, #0
 80126ea:	6159      	str	r1, [r3, #20]
 80126ec:	6282      	str	r2, [r0, #40]	; 0x28
 80126ee:	b902      	cbnz	r2, 80126f2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80126f0:	4770      	bx	lr
 80126f2:	6199      	str	r1, [r3, #24]
 80126f4:	4770      	bx	lr
 80126f6:	4613      	mov	r3, r2
 80126f8:	b13a      	cbz	r2, 801270a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80126fa:	699a      	ldr	r2, [r3, #24]
 80126fc:	428a      	cmp	r2, r1
 80126fe:	d1fa      	bne.n	80126f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012700:	698a      	ldr	r2, [r1, #24]
 8012702:	619a      	str	r2, [r3, #24]
 8012704:	2300      	movs	r3, #0
 8012706:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801270a:	4770      	bx	lr

0801270c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801270c:	b410      	push	{r4}
 801270e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012710:	4604      	mov	r4, r0
 8012712:	b92b      	cbnz	r3, 8012720 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012714:	6803      	ldr	r3, [r0, #0]
 8012716:	4611      	mov	r1, r2
 8012718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801271c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801271e:	4718      	bx	r3
 8012720:	b941      	cbnz	r1, 8012734 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012722:	6193      	str	r3, [r2, #24]
 8012724:	6282      	str	r2, [r0, #40]	; 0x28
 8012726:	6154      	str	r4, [r2, #20]
 8012728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	4603      	mov	r3, r0
 8012730:	2800      	cmp	r0, #0
 8012732:	d0f9      	beq.n	8012728 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012734:	4299      	cmp	r1, r3
 8012736:	6998      	ldr	r0, [r3, #24]
 8012738:	d1f9      	bne.n	801272e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801273a:	6190      	str	r0, [r2, #24]
 801273c:	618a      	str	r2, [r1, #24]
 801273e:	e7f2      	b.n	8012726 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012740 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012744:	461f      	mov	r7, r3
 8012746:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801274a:	460d      	mov	r5, r1
 801274c:	4616      	mov	r6, r2
 801274e:	b103      	cbz	r3, 8012752 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012750:	6038      	str	r0, [r7, #0]
 8012752:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012754:	b314      	cbz	r4, 801279c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012756:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801275a:	b1eb      	cbz	r3, 8012798 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801275c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012760:	428d      	cmp	r5, r1
 8012762:	db19      	blt.n	8012798 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012764:	b289      	uxth	r1, r1
 8012766:	8923      	ldrh	r3, [r4, #8]
 8012768:	440b      	add	r3, r1
 801276a:	b21b      	sxth	r3, r3
 801276c:	429d      	cmp	r5, r3
 801276e:	da13      	bge.n	8012798 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012770:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012774:	4296      	cmp	r6, r2
 8012776:	db0f      	blt.n	8012798 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012778:	b292      	uxth	r2, r2
 801277a:	8963      	ldrh	r3, [r4, #10]
 801277c:	4413      	add	r3, r2
 801277e:	b21b      	sxth	r3, r3
 8012780:	429e      	cmp	r6, r3
 8012782:	da09      	bge.n	8012798 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012784:	6823      	ldr	r3, [r4, #0]
 8012786:	1ab2      	subs	r2, r6, r2
 8012788:	1a69      	subs	r1, r5, r1
 801278a:	4620      	mov	r0, r4
 801278c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012790:	b212      	sxth	r2, r2
 8012792:	463b      	mov	r3, r7
 8012794:	b209      	sxth	r1, r1
 8012796:	47c0      	blx	r8
 8012798:	69a4      	ldr	r4, [r4, #24]
 801279a:	e7db      	b.n	8012754 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801279c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80127a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a4:	4c6d      	ldr	r4, [pc, #436]	; (801295c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80127a6:	b0a1      	sub	sp, #132	; 0x84
 80127a8:	4606      	mov	r6, r0
 80127aa:	6824      	ldr	r4, [r4, #0]
 80127ac:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80127ae:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80127b2:	2400      	movs	r4, #0
 80127b4:	9303      	str	r3, [sp, #12]
 80127b6:	802c      	strh	r4, [r5, #0]
 80127b8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80127ba:	802c      	strh	r4, [r5, #0]
 80127bc:	601c      	str	r4, [r3, #0]
 80127be:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80127c2:	f7ff ffbd 	bl	8012740 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80127c6:	f1b9 0f03 	cmp.w	r9, #3
 80127ca:	f340 80c1 	ble.w	8012950 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 80127ce:	4631      	mov	r1, r6
 80127d0:	a80c      	add	r0, sp, #48	; 0x30
 80127d2:	f007 fa7d 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80127d6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80127da:	9306      	str	r3, [sp, #24]
 80127dc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80127e0:	9307      	str	r3, [sp, #28]
 80127e2:	9b03      	ldr	r3, [sp, #12]
 80127e4:	f8d3 a000 	ldr.w	sl, [r3]
 80127e8:	f1ba 0f00 	cmp.w	sl, #0
 80127ec:	f000 80b3 	beq.w	8012956 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 80127f0:	4651      	mov	r1, sl
 80127f2:	a810      	add	r0, sp, #64	; 0x40
 80127f4:	f007 fa6c 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80127f8:	2002      	movs	r0, #2
 80127fa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 80127fe:	9b01      	ldr	r3, [sp, #4]
 8012800:	9a06      	ldr	r2, [sp, #24]
 8012802:	fb91 f1f0 	sdiv	r1, r1, r0
 8012806:	189d      	adds	r5, r3, r2
 8012808:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801280c:	9a07      	ldr	r2, [sp, #28]
 801280e:	4419      	add	r1, r3
 8012810:	9b02      	ldr	r3, [sp, #8]
 8012812:	4413      	add	r3, r2
 8012814:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012818:	1a6d      	subs	r5, r5, r1
 801281a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801281e:	fb92 f2f0 	sdiv	r2, r2, r0
 8012822:	440a      	add	r2, r1
 8012824:	1a9b      	subs	r3, r3, r2
 8012826:	435b      	muls	r3, r3
 8012828:	fb05 3505 	mla	r5, r5, r5, r3
 801282c:	4f4c      	ldr	r7, [pc, #304]	; (8012960 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801282e:	ac10      	add	r4, sp, #64	; 0x40
 8012830:	f1b9 0f0c 	cmp.w	r9, #12
 8012834:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012836:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012838:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801283a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801283c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801283e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012840:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012848:	f04f 0303 	mov.w	r3, #3
 801284c:	bfd8      	it	le
 801284e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012852:	f04f 0400 	mov.w	r4, #0
 8012856:	f8cd 9000 	str.w	r9, [sp]
 801285a:	bfcc      	ite	gt
 801285c:	4698      	movgt	r8, r3
 801285e:	fb92 f8f3 	sdivle	r8, r2, r3
 8012862:	1c63      	adds	r3, r4, #1
 8012864:	aa10      	add	r2, sp, #64	; 0x40
 8012866:	f004 0401 	and.w	r4, r4, #1
 801286a:	f04f 0b00 	mov.w	fp, #0
 801286e:	9308      	str	r3, [sp, #32]
 8012870:	9b00      	ldr	r3, [sp, #0]
 8012872:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012876:	fb93 f3f8 	sdiv	r3, r3, r8
 801287a:	3404      	adds	r4, #4
 801287c:	b29b      	uxth	r3, r3
 801287e:	9304      	str	r3, [sp, #16]
 8012880:	9a04      	ldr	r2, [sp, #16]
 8012882:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012886:	fb13 f302 	smulbb	r3, r3, r2
 801288a:	9a01      	ldr	r2, [sp, #4]
 801288c:	b29b      	uxth	r3, r3
 801288e:	1899      	adds	r1, r3, r2
 8012890:	9305      	str	r3, [sp, #20]
 8012892:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012896:	b209      	sxth	r1, r1
 8012898:	4299      	cmp	r1, r3
 801289a:	db4d      	blt.n	8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801289c:	8932      	ldrh	r2, [r6, #8]
 801289e:	4413      	add	r3, r2
 80128a0:	b21b      	sxth	r3, r3
 80128a2:	4299      	cmp	r1, r3
 80128a4:	da48      	bge.n	8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80128a6:	9b04      	ldr	r3, [sp, #16]
 80128a8:	6827      	ldr	r7, [r4, #0]
 80128aa:	fb17 f703 	smulbb	r7, r7, r3
 80128ae:	9b02      	ldr	r3, [sp, #8]
 80128b0:	b2bf      	uxth	r7, r7
 80128b2:	18fa      	adds	r2, r7, r3
 80128b4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80128b8:	b212      	sxth	r2, r2
 80128ba:	429a      	cmp	r2, r3
 80128bc:	db3c      	blt.n	8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80128be:	8970      	ldrh	r0, [r6, #10]
 80128c0:	4403      	add	r3, r0
 80128c2:	b21b      	sxth	r3, r3
 80128c4:	429a      	cmp	r2, r3
 80128c6:	da37      	bge.n	8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80128c8:	2300      	movs	r3, #0
 80128ca:	4630      	mov	r0, r6
 80128cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80128ce:	ab0b      	add	r3, sp, #44	; 0x2c
 80128d0:	f7ff ff36 	bl	8012740 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80128d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80128d6:	b37a      	cbz	r2, 8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80128d8:	4552      	cmp	r2, sl
 80128da:	d02d      	beq.n	8012938 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80128dc:	4611      	mov	r1, r2
 80128de:	a80e      	add	r0, sp, #56	; 0x38
 80128e0:	9209      	str	r2, [sp, #36]	; 0x24
 80128e2:	f007 f9f5 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80128e6:	f04f 0e02 	mov.w	lr, #2
 80128ea:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80128ee:	9a06      	ldr	r2, [sp, #24]
 80128f0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80128f4:	9b01      	ldr	r3, [sp, #4]
 80128f6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80128fa:	4413      	add	r3, r2
 80128fc:	9a07      	ldr	r2, [sp, #28]
 80128fe:	fb91 f1fe 	sdiv	r1, r1, lr
 8012902:	fb9c fcfe 	sdiv	ip, ip, lr
 8012906:	4401      	add	r1, r0
 8012908:	1a58      	subs	r0, r3, r1
 801290a:	9b02      	ldr	r3, [sp, #8]
 801290c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012910:	4413      	add	r3, r2
 8012912:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012914:	448c      	add	ip, r1
 8012916:	eba3 030c 	sub.w	r3, r3, ip
 801291a:	435b      	muls	r3, r3
 801291c:	fb00 3300 	mla	r3, r0, r0, r3
 8012920:	42ab      	cmp	r3, r5
 8012922:	d208      	bcs.n	8012936 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012924:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012926:	461d      	mov	r5, r3
 8012928:	9803      	ldr	r0, [sp, #12]
 801292a:	6001      	str	r1, [r0, #0]
 801292c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801292e:	9805      	ldr	r0, [sp, #20]
 8012930:	8008      	strh	r0, [r1, #0]
 8012932:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012934:	800f      	strh	r7, [r1, #0]
 8012936:	4692      	mov	sl, r2
 8012938:	f10b 0b01 	add.w	fp, fp, #1
 801293c:	3408      	adds	r4, #8
 801293e:	f1bb 0f04 	cmp.w	fp, #4
 8012942:	d19d      	bne.n	8012880 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012944:	9b00      	ldr	r3, [sp, #0]
 8012946:	9c08      	ldr	r4, [sp, #32]
 8012948:	444b      	add	r3, r9
 801294a:	4544      	cmp	r4, r8
 801294c:	9300      	str	r3, [sp, #0]
 801294e:	d188      	bne.n	8012862 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012950:	b021      	add	sp, #132	; 0x84
 8012952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012956:	f04f 35ff 	mov.w	r5, #4294967295
 801295a:	e767      	b.n	801282c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801295c:	24010060 	.word	0x24010060
 8012960:	08025a70 	.word	0x08025a70

08012964 <_ZN8touchgfx4RectaNERKS0_>:
 8012964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012968:	f9b1 7000 	ldrsh.w	r7, [r1]
 801296c:	888c      	ldrh	r4, [r1, #4]
 801296e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012972:	443c      	add	r4, r7
 8012974:	b2a4      	uxth	r4, r4
 8012976:	fa0f f884 	sxth.w	r8, r4
 801297a:	45c1      	cmp	r9, r8
 801297c:	da2f      	bge.n	80129de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801297e:	8882      	ldrh	r2, [r0, #4]
 8012980:	444a      	add	r2, r9
 8012982:	b292      	uxth	r2, r2
 8012984:	fa0f fe82 	sxth.w	lr, r2
 8012988:	4577      	cmp	r7, lr
 801298a:	da28      	bge.n	80129de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801298c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012990:	88cb      	ldrh	r3, [r1, #6]
 8012992:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012996:	442b      	add	r3, r5
 8012998:	b21b      	sxth	r3, r3
 801299a:	429e      	cmp	r6, r3
 801299c:	da1f      	bge.n	80129de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801299e:	88c3      	ldrh	r3, [r0, #6]
 80129a0:	4433      	add	r3, r6
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	fa0f fc83 	sxth.w	ip, r3
 80129a8:	4565      	cmp	r5, ip
 80129aa:	da18      	bge.n	80129de <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80129ac:	454f      	cmp	r7, r9
 80129ae:	bfb8      	it	lt
 80129b0:	464f      	movlt	r7, r9
 80129b2:	42b5      	cmp	r5, r6
 80129b4:	bfb8      	it	lt
 80129b6:	4635      	movlt	r5, r6
 80129b8:	45f0      	cmp	r8, lr
 80129ba:	bfd8      	it	le
 80129bc:	4622      	movle	r2, r4
 80129be:	1bd2      	subs	r2, r2, r7
 80129c0:	8082      	strh	r2, [r0, #4]
 80129c2:	884a      	ldrh	r2, [r1, #2]
 80129c4:	88c9      	ldrh	r1, [r1, #6]
 80129c6:	8007      	strh	r7, [r0, #0]
 80129c8:	440a      	add	r2, r1
 80129ca:	8045      	strh	r5, [r0, #2]
 80129cc:	b292      	uxth	r2, r2
 80129ce:	b211      	sxth	r1, r2
 80129d0:	458c      	cmp	ip, r1
 80129d2:	bfa8      	it	ge
 80129d4:	4613      	movge	r3, r2
 80129d6:	1b5b      	subs	r3, r3, r5
 80129d8:	80c3      	strh	r3, [r0, #6]
 80129da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129de:	2300      	movs	r3, #0
 80129e0:	8003      	strh	r3, [r0, #0]
 80129e2:	8043      	strh	r3, [r0, #2]
 80129e4:	8083      	strh	r3, [r0, #4]
 80129e6:	80c3      	strh	r3, [r0, #6]
 80129e8:	e7f7      	b.n	80129da <_ZN8touchgfx4RectaNERKS0_+0x76>

080129ea <_ZNK8touchgfx4Rect7isEmptyEv>:
 80129ea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	dd06      	ble.n	8012a00 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80129f2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80129f6:	2800      	cmp	r0, #0
 80129f8:	bfcc      	ite	gt
 80129fa:	2000      	movgt	r0, #0
 80129fc:	2001      	movle	r0, #1
 80129fe:	4770      	bx	lr
 8012a00:	2001      	movs	r0, #1
 8012a02:	4770      	bx	lr

08012a04 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4604      	mov	r4, r0
 8012a0c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012a0e:	8003      	strh	r3, [r0, #0]
 8012a10:	8043      	strh	r3, [r0, #2]
 8012a12:	8083      	strh	r3, [r0, #4]
 8012a14:	80c3      	strh	r3, [r0, #6]
 8012a16:	2d00      	cmp	r5, #0
 8012a18:	d040      	beq.n	8012a9c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012a1a:	1d28      	adds	r0, r5, #4
 8012a1c:	f7ff ffe5 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a20:	b988      	cbnz	r0, 8012a46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012a22:	4620      	mov	r0, r4
 8012a24:	f7ff ffe1 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012a28:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012a2c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012a30:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012a34:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012a38:	b138      	cbz	r0, 8012a4a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012a3a:	8022      	strh	r2, [r4, #0]
 8012a3c:	8063      	strh	r3, [r4, #2]
 8012a3e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012a42:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012a46:	69ad      	ldr	r5, [r5, #24]
 8012a48:	e7e5      	b.n	8012a16 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012a4a:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012a4e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012a52:	4290      	cmp	r0, r2
 8012a54:	4607      	mov	r7, r0
 8012a56:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012a5a:	460e      	mov	r6, r1
 8012a5c:	bfa8      	it	ge
 8012a5e:	4617      	movge	r7, r2
 8012a60:	4299      	cmp	r1, r3
 8012a62:	4472      	add	r2, lr
 8012a64:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012a68:	bfa8      	it	ge
 8012a6a:	461e      	movge	r6, r3
 8012a6c:	4440      	add	r0, r8
 8012a6e:	4471      	add	r1, lr
 8012a70:	4463      	add	r3, ip
 8012a72:	b200      	sxth	r0, r0
 8012a74:	8027      	strh	r7, [r4, #0]
 8012a76:	b212      	sxth	r2, r2
 8012a78:	8066      	strh	r6, [r4, #2]
 8012a7a:	b209      	sxth	r1, r1
 8012a7c:	b21b      	sxth	r3, r3
 8012a7e:	4290      	cmp	r0, r2
 8012a80:	bfac      	ite	ge
 8012a82:	ebc7 0200 	rsbge	r2, r7, r0
 8012a86:	ebc7 0202 	rsblt	r2, r7, r2
 8012a8a:	4299      	cmp	r1, r3
 8012a8c:	bfac      	ite	ge
 8012a8e:	ebc6 0301 	rsbge	r3, r6, r1
 8012a92:	ebc6 0303 	rsblt	r3, r6, r3
 8012a96:	80a2      	strh	r2, [r4, #4]
 8012a98:	80e3      	strh	r3, [r4, #6]
 8012a9a:	e7d4      	b.n	8012a46 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012aa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012aa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012aa6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012aaa:	b383      	cbz	r3, 8012b0e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012aac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012aae:	b374      	cbz	r4, 8012b0e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012ab0:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012ab4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012ab8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012abc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012ac0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012ac4:	b303      	cbz	r3, 8012b08 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012ac6:	4668      	mov	r0, sp
 8012ac8:	1d21      	adds	r1, r4, #4
 8012aca:	f8ad 5000 	strh.w	r5, [sp]
 8012ace:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012ad2:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012ad6:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012ada:	f7ff ff43 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8012ade:	4668      	mov	r0, sp
 8012ae0:	f7ff ff83 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ae4:	b980      	cbnz	r0, 8012b08 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012ae6:	f8bd 3000 	ldrh.w	r3, [sp]
 8012aea:	4669      	mov	r1, sp
 8012aec:	88a2      	ldrh	r2, [r4, #4]
 8012aee:	4620      	mov	r0, r4
 8012af0:	1a9b      	subs	r3, r3, r2
 8012af2:	88e2      	ldrh	r2, [r4, #6]
 8012af4:	f8ad 3000 	strh.w	r3, [sp]
 8012af8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012afc:	1a9b      	subs	r3, r3, r2
 8012afe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012b02:	6823      	ldr	r3, [r4, #0]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	4798      	blx	r3
 8012b08:	69a4      	ldr	r4, [r4, #24]
 8012b0a:	2c00      	cmp	r4, #0
 8012b0c:	d1d8      	bne.n	8012ac0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012b0e:	b002      	add	sp, #8
 8012b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b14 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012b14:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012b16:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	4616      	mov	r6, r2
 8012b1e:	b323      	cbz	r3, 8012b6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012b20:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012b22:	b314      	cbz	r4, 8012b6a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012b24:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012b28:	b1eb      	cbz	r3, 8012b66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012b2a:	6828      	ldr	r0, [r5, #0]
 8012b2c:	466b      	mov	r3, sp
 8012b2e:	6869      	ldr	r1, [r5, #4]
 8012b30:	c303      	stmia	r3!, {r0, r1}
 8012b32:	4668      	mov	r0, sp
 8012b34:	1d21      	adds	r1, r4, #4
 8012b36:	f7ff ff15 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8012b3a:	4668      	mov	r0, sp
 8012b3c:	f7ff ff55 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b40:	b988      	cbnz	r0, 8012b66 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012b42:	f8bd 3000 	ldrh.w	r3, [sp]
 8012b46:	4669      	mov	r1, sp
 8012b48:	88a2      	ldrh	r2, [r4, #4]
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	1a9b      	subs	r3, r3, r2
 8012b4e:	88e2      	ldrh	r2, [r4, #6]
 8012b50:	f8ad 3000 	strh.w	r3, [sp]
 8012b54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012b58:	1a9b      	subs	r3, r3, r2
 8012b5a:	4632      	mov	r2, r6
 8012b5c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b64:	4798      	blx	r3
 8012b66:	69a4      	ldr	r4, [r4, #24]
 8012b68:	e7db      	b.n	8012b22 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012b6a:	b002      	add	sp, #8
 8012b6c:	bd70      	pop	{r4, r5, r6, pc}

08012b6e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012b6e:	6803      	ldr	r3, [r0, #0]
 8012b70:	b513      	push	{r0, r1, r4, lr}
 8012b72:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8012b76:	2300      	movs	r3, #0
 8012b78:	e9cd 3300 	strd	r3, r3, [sp]
 8012b7c:	466b      	mov	r3, sp
 8012b7e:	47a0      	blx	r4
 8012b80:	b002      	add	sp, #8
 8012b82:	bd10      	pop	{r4, pc}

08012b84 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012b84:	2301      	movs	r3, #1
 8012b86:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012b8a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012b8e:	4770      	bx	lr

08012b90 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012b90:	2301      	movs	r3, #1
 8012b92:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012b96:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012b9a:	4770      	bx	lr

08012b9c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012b9c:	6843      	ldr	r3, [r0, #4]
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	725a      	strb	r2, [r3, #9]
 8012ba2:	6840      	ldr	r0, [r0, #4]
 8012ba4:	6803      	ldr	r3, [r0, #0]
 8012ba6:	691b      	ldr	r3, [r3, #16]
 8012ba8:	4718      	bx	r3

08012baa <_ZN8touchgfx3HAL8flushDMAEv>:
 8012baa:	6840      	ldr	r0, [r0, #4]
 8012bac:	6803      	ldr	r3, [r0, #0]
 8012bae:	689b      	ldr	r3, [r3, #8]
 8012bb0:	4718      	bx	r3

08012bb2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012bb2:	b530      	push	{r4, r5, lr}
 8012bb4:	b08b      	sub	sp, #44	; 0x2c
 8012bb6:	6804      	ldr	r4, [r0, #0]
 8012bb8:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012bbc:	9509      	str	r5, [sp, #36]	; 0x24
 8012bbe:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012bc2:	9508      	str	r5, [sp, #32]
 8012bc4:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012bc8:	9507      	str	r5, [sp, #28]
 8012bca:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012bce:	9506      	str	r5, [sp, #24]
 8012bd0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012bd4:	9505      	str	r5, [sp, #20]
 8012bd6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012bda:	9504      	str	r5, [sp, #16]
 8012bdc:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012be0:	9503      	str	r5, [sp, #12]
 8012be2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012be6:	9502      	str	r5, [sp, #8]
 8012be8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012bec:	e9cd 3500 	strd	r3, r5, [sp]
 8012bf0:	4613      	mov	r3, r2
 8012bf2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	47a0      	blx	r4
 8012bf8:	b00b      	add	sp, #44	; 0x2c
 8012bfa:	bd30      	pop	{r4, r5, pc}

08012bfc <_ZN8touchgfx3HAL10beginFrameEv>:
 8012bfc:	4b04      	ldr	r3, [pc, #16]	; (8012c10 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	b123      	cbz	r3, 8012c0c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012c02:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012c06:	f080 0001 	eor.w	r0, r0, #1
 8012c0a:	4770      	bx	lr
 8012c0c:	2001      	movs	r0, #1
 8012c0e:	4770      	bx	lr
 8012c10:	2401005e 	.word	0x2401005e

08012c14 <_ZN8touchgfx3HAL8endFrameEv>:
 8012c14:	b510      	push	{r4, lr}
 8012c16:	4604      	mov	r4, r0
 8012c18:	6840      	ldr	r0, [r0, #4]
 8012c1a:	6803      	ldr	r3, [r0, #0]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	4798      	blx	r3
 8012c20:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012c24:	b113      	cbz	r3, 8012c2c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012c26:	2301      	movs	r3, #1
 8012c28:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012c2c:	bd10      	pop	{r4, pc}

08012c2e <_ZN8touchgfx3HAL10initializeEv>:
 8012c2e:	b510      	push	{r4, lr}
 8012c30:	4604      	mov	r4, r0
 8012c32:	f7ef f911 	bl	8001e58 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012c36:	f7ee fe23 	bl	8001880 <_ZN8touchgfx4GPIO4initEv>
 8012c3a:	6860      	ldr	r0, [r4, #4]
 8012c3c:	6803      	ldr	r3, [r0, #0]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	4798      	blx	r3
 8012c42:	68e0      	ldr	r0, [r4, #12]
 8012c44:	6803      	ldr	r3, [r0, #0]
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	4798      	blx	r3
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c54:	4718      	bx	r3
	...

08012c58 <_ZN8touchgfx3HAL4tickEv>:
 8012c58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8012c5a:	6803      	ldr	r3, [r0, #0]
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	4d5b      	ldr	r5, [pc, #364]	; (8012dcc <_ZN8touchgfx3HAL4tickEv+0x174>)
 8012c60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012c64:	4798      	blx	r3
 8012c66:	2800      	cmp	r0, #0
 8012c68:	f000 8095 	beq.w	8012d96 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	2600      	movs	r6, #0
 8012c70:	f7ee fd6c 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8012c74:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8012c78:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8012c7c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012c80:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8012c84:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8012c88:	b133      	cbz	r3, 8012c98 <_ZN8touchgfx3HAL4tickEv+0x40>
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8012c92:	4798      	blx	r3
 8012c94:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8012c98:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8012c9c:	2601      	movs	r6, #1
 8012c9e:	6862      	ldr	r2, [r4, #4]
 8012ca0:	f083 0301 	eor.w	r3, r3, #1
 8012ca4:	702e      	strb	r6, [r5, #0]
 8012ca6:	7253      	strb	r3, [r2, #9]
 8012ca8:	f005 ff32 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
 8012cac:	6803      	ldr	r3, [r0, #0]
 8012cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb0:	4798      	blx	r3
 8012cb2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012cb6:	b90b      	cbnz	r3, 8012cbc <_ZN8touchgfx3HAL4tickEv+0x64>
 8012cb8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8012cbc:	f005 ff28 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
 8012cc0:	6803      	ldr	r3, [r0, #0]
 8012cc2:	695b      	ldr	r3, [r3, #20]
 8012cc4:	4798      	blx	r3
 8012cc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012cc8:	6803      	ldr	r3, [r0, #0]
 8012cca:	691b      	ldr	r3, [r3, #16]
 8012ccc:	4798      	blx	r3
 8012cce:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8012cd2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8012cde:	b10a      	cbz	r2, 8012ce4 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d1eb      	bne.n	8012cbc <_ZN8touchgfx3HAL4tickEv+0x64>
 8012ce4:	4a3a      	ldr	r2, [pc, #232]	; (8012dd0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8012ce6:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8012cea:	7813      	ldrb	r3, [r2, #0]
 8012cec:	3301      	adds	r3, #1
 8012cee:	b25b      	sxtb	r3, r3
 8012cf0:	4299      	cmp	r1, r3
 8012cf2:	7013      	strb	r3, [r2, #0]
 8012cf4:	dc10      	bgt.n	8012d18 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	68e0      	ldr	r0, [r4, #12]
 8012cfa:	a902      	add	r1, sp, #8
 8012cfc:	7013      	strb	r3, [r2, #0]
 8012cfe:	aa03      	add	r2, sp, #12
 8012d00:	6803      	ldr	r3, [r0, #0]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	4798      	blx	r3
 8012d06:	6823      	ldr	r3, [r4, #0]
 8012d08:	2800      	cmp	r0, #0
 8012d0a:	d050      	beq.n	8012dae <_ZN8touchgfx3HAL4tickEv+0x156>
 8012d0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012d10:	4620      	mov	r0, r4
 8012d12:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012d16:	4798      	blx	r3
 8012d18:	2300      	movs	r3, #0
 8012d1a:	6960      	ldr	r0, [r4, #20]
 8012d1c:	f88d 3007 	strb.w	r3, [sp, #7]
 8012d20:	b158      	cbz	r0, 8012d3a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012d22:	6803      	ldr	r3, [r0, #0]
 8012d24:	f10d 0107 	add.w	r1, sp, #7
 8012d28:	68db      	ldr	r3, [r3, #12]
 8012d2a:	4798      	blx	r3
 8012d2c:	b128      	cbz	r0, 8012d3a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8012d2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d30:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8012d34:	6803      	ldr	r3, [r0, #0]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	4798      	blx	r3
 8012d3a:	f104 001c 	add.w	r0, r4, #28
 8012d3e:	f011 f8b7 	bl	8023eb0 <_ZN8touchgfx8Gestures4tickEv>
 8012d42:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8012d46:	b30b      	cbz	r3, 8012d8c <_ZN8touchgfx3HAL4tickEv+0x134>
 8012d48:	6920      	ldr	r0, [r4, #16]
 8012d4a:	6803      	ldr	r3, [r0, #0]
 8012d4c:	691b      	ldr	r3, [r3, #16]
 8012d4e:	4798      	blx	r3
 8012d50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d52:	4606      	mov	r6, r0
 8012d54:	b903      	cbnz	r3, 8012d58 <_ZN8touchgfx3HAL4tickEv+0x100>
 8012d56:	6720      	str	r0, [r4, #112]	; 0x70
 8012d58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d5a:	4a1e      	ldr	r2, [pc, #120]	; (8012dd4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8012d5c:	1af3      	subs	r3, r6, r3
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d914      	bls.n	8012d8c <_ZN8touchgfx3HAL4tickEv+0x134>
 8012d62:	6920      	ldr	r0, [r4, #16]
 8012d64:	6803      	ldr	r3, [r0, #0]
 8012d66:	699b      	ldr	r3, [r3, #24]
 8012d68:	4798      	blx	r3
 8012d6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d6c:	2264      	movs	r2, #100	; 0x64
 8012d6e:	1af3      	subs	r3, r6, r3
 8012d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d74:	fbb0 f0f3 	udiv	r0, r0, r3
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	dc1d      	bgt.n	8012db8 <_ZN8touchgfx3HAL4tickEv+0x160>
 8012d7c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8012d80:	6920      	ldr	r0, [r4, #16]
 8012d82:	2100      	movs	r1, #0
 8012d84:	6803      	ldr	r3, [r0, #0]
 8012d86:	69db      	ldr	r3, [r3, #28]
 8012d88:	4798      	blx	r3
 8012d8a:	6726      	str	r6, [r4, #112]	; 0x70
 8012d8c:	f005 fec0 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
 8012d90:	6803      	ldr	r3, [r0, #0]
 8012d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d94:	4798      	blx	r3
 8012d96:	6823      	ldr	r3, [r4, #0]
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d9e:	4798      	blx	r3
 8012da0:	2001      	movs	r0, #1
 8012da2:	f7ee fd03 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8012da6:	2300      	movs	r3, #0
 8012da8:	702b      	strb	r3, [r5, #0]
 8012daa:	b004      	add	sp, #16
 8012dac:	bd70      	pop	{r4, r5, r6, pc}
 8012dae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8012db2:	4620      	mov	r0, r4
 8012db4:	4798      	blx	r3
 8012db6:	e7af      	b.n	8012d18 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8012db8:	2863      	cmp	r0, #99	; 0x63
 8012dba:	bfcb      	itete	gt
 8012dbc:	2300      	movgt	r3, #0
 8012dbe:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8012dc2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8012dc6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8012dca:	e7d9      	b.n	8012d80 <_ZN8touchgfx3HAL4tickEv+0x128>
 8012dcc:	24010064 	.word	0x24010064
 8012dd0:	24010065 	.word	0x24010065
 8012dd4:	05f5e100 	.word	0x05f5e100

08012dd8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8012dd8:	f7ef b86e 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012ddc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8012ddc:	6581      	str	r1, [r0, #88]	; 0x58
 8012dde:	301c      	adds	r0, #28
 8012de0:	f011 b864 	b.w	8023eac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08012de4 <_ZN8touchgfx3HAL5touchEll>:
 8012de4:	b530      	push	{r4, r5, lr}
 8012de6:	b087      	sub	sp, #28
 8012de8:	4604      	mov	r4, r0
 8012dea:	a804      	add	r0, sp, #16
 8012dec:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8012df0:	f005 fcd4 	bl	801879c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8012df4:	9b04      	ldr	r3, [sp, #16]
 8012df6:	a906      	add	r1, sp, #24
 8012df8:	a803      	add	r0, sp, #12
 8012dfa:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012dfe:	9b05      	ldr	r3, [sp, #20]
 8012e00:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8012e04:	f005 fd1c 	bl	8018840 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8012e08:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8012e0c:	f104 001c 	add.w	r0, r4, #28
 8012e10:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8012e14:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8012e18:	b189      	cbz	r1, 8012e3e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8012e1a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	4613      	mov	r3, r2
 8012e22:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012e26:	462a      	mov	r2, r5
 8012e28:	f011 f850 	bl	8023ecc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8012e2c:	b128      	cbz	r0, 8012e3a <_ZN8touchgfx3HAL5touchEll+0x56>
 8012e2e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8012e32:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012e34:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012e38:	6623      	str	r3, [r4, #96]	; 0x60
 8012e3a:	b007      	add	sp, #28
 8012e3c:	bd30      	pop	{r4, r5, pc}
 8012e3e:	f011 f885 	bl	8023f4c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012e42:	2301      	movs	r3, #1
 8012e44:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012e48:	e7f1      	b.n	8012e2e <_ZN8touchgfx3HAL5touchEll+0x4a>

08012e4a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8012e4a:	b510      	push	{r4, lr}
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d046      	beq.n	8012ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012e50:	ea81 0002 	eor.w	r0, r1, r2
 8012e54:	07c4      	lsls	r4, r0, #31
 8012e56:	d508      	bpl.n	8012e6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8012e58:	440b      	add	r3, r1
 8012e5a:	3a01      	subs	r2, #1
 8012e5c:	428b      	cmp	r3, r1
 8012e5e:	d93e      	bls.n	8012ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012e60:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012e64:	f801 0b01 	strb.w	r0, [r1], #1
 8012e68:	e7f8      	b.n	8012e5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8012e6a:	07d0      	lsls	r0, r2, #31
 8012e6c:	bf42      	ittt	mi
 8012e6e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8012e72:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8012e76:	f801 0b01 	strbmi.w	r0, [r1], #1
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d911      	bls.n	8012ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012e7e:	ea81 0402 	eor.w	r4, r1, r2
 8012e82:	4610      	mov	r0, r2
 8012e84:	07a4      	lsls	r4, r4, #30
 8012e86:	d022      	beq.n	8012ece <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8012e88:	f023 0401 	bic.w	r4, r3, #1
 8012e8c:	440c      	add	r4, r1
 8012e8e:	428c      	cmp	r4, r1
 8012e90:	4602      	mov	r2, r0
 8012e92:	d904      	bls.n	8012e9e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8012e94:	8812      	ldrh	r2, [r2, #0]
 8012e96:	3002      	adds	r0, #2
 8012e98:	f821 2b02 	strh.w	r2, [r1], #2
 8012e9c:	e7f7      	b.n	8012e8e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8012e9e:	f003 0301 	and.w	r3, r3, #1
 8012ea2:	f023 0003 	bic.w	r0, r3, #3
 8012ea6:	4408      	add	r0, r1
 8012ea8:	4288      	cmp	r0, r1
 8012eaa:	4614      	mov	r4, r2
 8012eac:	d904      	bls.n	8012eb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8012eae:	6824      	ldr	r4, [r4, #0]
 8012eb0:	3204      	adds	r2, #4
 8012eb2:	f841 4b04 	str.w	r4, [r1], #4
 8012eb6:	e7f7      	b.n	8012ea8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8012eb8:	f003 0303 	and.w	r3, r3, #3
 8012ebc:	3a01      	subs	r2, #1
 8012ebe:	440b      	add	r3, r1
 8012ec0:	428b      	cmp	r3, r1
 8012ec2:	d90c      	bls.n	8012ede <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8012ec4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8012ec8:	f801 0b01 	strb.w	r0, [r1], #1
 8012ecc:	e7f8      	b.n	8012ec0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8012ece:	0790      	lsls	r0, r2, #30
 8012ed0:	d0e7      	beq.n	8012ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012ed2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8012ed6:	3b02      	subs	r3, #2
 8012ed8:	f821 0b02 	strh.w	r0, [r1], #2
 8012edc:	e7e1      	b.n	8012ea2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8012ede:	2001      	movs	r0, #1
 8012ee0:	bd10      	pop	{r4, pc}

08012ee2 <_ZN8touchgfx3HAL7noTouchEv>:
 8012ee2:	b510      	push	{r4, lr}
 8012ee4:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8012ee8:	4604      	mov	r4, r0
 8012eea:	b153      	cbz	r3, 8012f02 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8012eec:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8012ef0:	2101      	movs	r1, #1
 8012ef2:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8012ef6:	301c      	adds	r0, #28
 8012ef8:	f011 f828 	bl	8023f4c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8012efc:	2300      	movs	r3, #0
 8012efe:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8012f02:	bd10      	pop	{r4, pc}

08012f04 <_ZN8touchgfx3HAL3lcdEv>:
 8012f04:	4b04      	ldr	r3, [pc, #16]	; (8012f18 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012f0c:	b10a      	cbz	r2, 8012f12 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8012f0e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012f10:	b900      	cbnz	r0, 8012f14 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8012f12:	6898      	ldr	r0, [r3, #8]
 8012f14:	4770      	bx	lr
 8012f16:	bf00      	nop
 8012f18:	24010060 	.word	0x24010060

08012f1c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8012f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f20:	b085      	sub	sp, #20
 8012f22:	4604      	mov	r4, r0
 8012f24:	2000      	movs	r0, #0
 8012f26:	4699      	mov	r9, r3
 8012f28:	ad04      	add	r5, sp, #16
 8012f2a:	460f      	mov	r7, r1
 8012f2c:	4690      	mov	r8, r2
 8012f2e:	f845 0d04 	str.w	r0, [r5, #-4]!
 8012f32:	69a0      	ldr	r0, [r4, #24]
 8012f34:	6806      	ldr	r6, [r0, #0]
 8012f36:	9501      	str	r5, [sp, #4]
 8012f38:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8012f3c:	9500      	str	r5, [sp, #0]
 8012f3e:	6835      	ldr	r5, [r6, #0]
 8012f40:	47a8      	blx	r5
 8012f42:	4d10      	ldr	r5, [pc, #64]	; (8012f84 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8012f44:	4606      	mov	r6, r0
 8012f46:	f8a5 9000 	strh.w	r9, [r5]
 8012f4a:	f7ff ffdb 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8012f4e:	6803      	ldr	r3, [r0, #0]
 8012f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f52:	4798      	blx	r3
 8012f54:	b128      	cbz	r0, 8012f62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8012f56:	2801      	cmp	r0, #1
 8012f58:	d00b      	beq.n	8012f72 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8012f5a:	4630      	mov	r0, r6
 8012f5c:	b005      	add	sp, #20
 8012f5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f62:	882b      	ldrh	r3, [r5, #0]
 8012f64:	fb08 7203 	mla	r2, r8, r3, r7
 8012f68:	9b03      	ldr	r3, [sp, #12]
 8012f6a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8012f6e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012f70:	e7f3      	b.n	8012f5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012f72:	882a      	ldrh	r2, [r5, #0]
 8012f74:	9b03      	ldr	r3, [sp, #12]
 8012f76:	fb08 7202 	mla	r2, r8, r2, r7
 8012f7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012f7e:	1a9a      	subs	r2, r3, r2
 8012f80:	63e2      	str	r2, [r4, #60]	; 0x3c
 8012f82:	e7ea      	b.n	8012f5a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8012f84:	2401005a 	.word	0x2401005a

08012f88 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8012f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f8a:	b08b      	sub	sp, #44	; 0x2c
 8012f8c:	4617      	mov	r7, r2
 8012f8e:	4604      	mov	r4, r0
 8012f90:	460e      	mov	r6, r1
 8012f92:	461d      	mov	r5, r3
 8012f94:	f7ff ffb6 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8012f98:	6803      	ldr	r3, [r0, #0]
 8012f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f9c:	4798      	blx	r3
 8012f9e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8012fa2:	9007      	str	r0, [sp, #28]
 8012fa4:	4631      	mov	r1, r6
 8012fa6:	6822      	ldr	r2, [r4, #0]
 8012fa8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8012fac:	4b0c      	ldr	r3, [pc, #48]	; (8012fe0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8012fae:	4620      	mov	r0, r4
 8012fb0:	881b      	ldrh	r3, [r3, #0]
 8012fb2:	9306      	str	r3, [sp, #24]
 8012fb4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8012fb8:	9305      	str	r3, [sp, #20]
 8012fba:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012fbe:	9304      	str	r3, [sp, #16]
 8012fc0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8012fc4:	9303      	str	r3, [sp, #12]
 8012fc6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012fca:	9302      	str	r3, [sp, #8]
 8012fcc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8012fd0:	e9cd 5300 	strd	r5, r3, [sp]
 8012fd4:	463b      	mov	r3, r7
 8012fd6:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8012fd8:	2200      	movs	r2, #0
 8012fda:	47a8      	blx	r5
 8012fdc:	b00b      	add	sp, #44	; 0x2c
 8012fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fe0:	2401005a 	.word	0x2401005a

08012fe4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8012fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fe8:	4698      	mov	r8, r3
 8012fea:	6803      	ldr	r3, [r0, #0]
 8012fec:	b08b      	sub	sp, #44	; 0x2c
 8012fee:	4617      	mov	r7, r2
 8012ff0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8012ff2:	460e      	mov	r6, r1
 8012ff4:	4b13      	ldr	r3, [pc, #76]	; (8013044 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8012ff6:	4604      	mov	r4, r0
 8012ff8:	f8b3 9000 	ldrh.w	r9, [r3]
 8012ffc:	f7ff ff82 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8013000:	6803      	ldr	r3, [r0, #0]
 8013002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013004:	4798      	blx	r3
 8013006:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801300a:	2200      	movs	r2, #0
 801300c:	4631      	mov	r1, r6
 801300e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013012:	2302      	movs	r3, #2
 8013014:	4620      	mov	r0, r4
 8013016:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801301a:	2301      	movs	r3, #1
 801301c:	9305      	str	r3, [sp, #20]
 801301e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8013022:	9304      	str	r3, [sp, #16]
 8013024:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013028:	9303      	str	r3, [sp, #12]
 801302a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801302e:	9302      	str	r3, [sp, #8]
 8013030:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013034:	e9cd 8300 	strd	r8, r3, [sp]
 8013038:	463b      	mov	r3, r7
 801303a:	47a8      	blx	r5
 801303c:	b00b      	add	sp, #44	; 0x2c
 801303e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013042:	bf00      	nop
 8013044:	2401005a 	.word	0x2401005a

08013048 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8013048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801304c:	4698      	mov	r8, r3
 801304e:	6803      	ldr	r3, [r0, #0]
 8013050:	b087      	sub	sp, #28
 8013052:	460e      	mov	r6, r1
 8013054:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013056:	4617      	mov	r7, r2
 8013058:	4b0f      	ldr	r3, [pc, #60]	; (8013098 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 801305a:	4604      	mov	r4, r0
 801305c:	f8b3 9000 	ldrh.w	r9, [r3]
 8013060:	f7ff ff50 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8013064:	6803      	ldr	r3, [r0, #0]
 8013066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013068:	4798      	blx	r3
 801306a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801306e:	463a      	mov	r2, r7
 8013070:	4631      	mov	r1, r6
 8013072:	f8cd 900c 	str.w	r9, [sp, #12]
 8013076:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801307a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801307e:	4620      	mov	r0, r4
 8013080:	9302      	str	r3, [sp, #8]
 8013082:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013086:	9301      	str	r3, [sp, #4]
 8013088:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801308c:	9300      	str	r3, [sp, #0]
 801308e:	4643      	mov	r3, r8
 8013090:	47a8      	blx	r5
 8013092:	b007      	add	sp, #28
 8013094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013098:	2401005a 	.word	0x2401005a

0801309c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 801309c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a0:	4604      	mov	r4, r0
 80130a2:	b08f      	sub	sp, #60	; 0x3c
 80130a4:	4610      	mov	r0, r2
 80130a6:	460d      	mov	r5, r1
 80130a8:	4691      	mov	r9, r2
 80130aa:	461e      	mov	r6, r3
 80130ac:	f008 fd96 	bl	801bbdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80130b0:	2800      	cmp	r0, #0
 80130b2:	f000 809d 	beq.w	80131f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80130b6:	6823      	ldr	r3, [r4, #0]
 80130b8:	4620      	mov	r0, r4
 80130ba:	f8df b198 	ldr.w	fp, [pc, #408]	; 8013254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80130be:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80130c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130c4:	4798      	blx	r3
 80130c6:	6823      	ldr	r3, [r4, #0]
 80130c8:	4620      	mov	r0, r4
 80130ca:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80130ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d0:	4798      	blx	r3
 80130d2:	f8bb 3000 	ldrh.w	r3, [fp]
 80130d6:	4f5c      	ldr	r7, [pc, #368]	; (8013248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80130d8:	9301      	str	r3, [sp, #4]
 80130da:	f8ba 3000 	ldrh.w	r3, [sl]
 80130de:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80130e2:	4640      	mov	r0, r8
 80130e4:	9302      	str	r3, [sp, #8]
 80130e6:	883b      	ldrh	r3, [r7, #0]
 80130e8:	9303      	str	r3, [sp, #12]
 80130ea:	4b58      	ldr	r3, [pc, #352]	; (801324c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80130ec:	881a      	ldrh	r2, [r3, #0]
 80130ee:	9305      	str	r3, [sp, #20]
 80130f0:	9204      	str	r2, [sp, #16]
 80130f2:	f008 feb7 	bl	801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80130f6:	8038      	strh	r0, [r7, #0]
 80130f8:	4640      	mov	r0, r8
 80130fa:	f008 fee7 	bl	801becc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80130fe:	9b05      	ldr	r3, [sp, #20]
 8013100:	b280      	uxth	r0, r0
 8013102:	8018      	strh	r0, [r3, #0]
 8013104:	4b52      	ldr	r3, [pc, #328]	; (8013250 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8013106:	781b      	ldrb	r3, [r3, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d174      	bne.n	80131f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801310c:	883b      	ldrh	r3, [r7, #0]
 801310e:	f8aa 0000 	strh.w	r0, [sl]
 8013112:	f8ab 3000 	strh.w	r3, [fp]
 8013116:	4648      	mov	r0, r9
 8013118:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801311c:	f008 fd5e 	bl	801bbdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8013120:	2200      	movs	r2, #0
 8013122:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8013126:	4611      	mov	r1, r2
 8013128:	4628      	mov	r0, r5
 801312a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801312e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8013132:	f7f0 f9ce 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 8013136:	2301      	movs	r3, #1
 8013138:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801313c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8013140:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013144:	2b00      	cmp	r3, #0
 8013146:	dd5c      	ble.n	8013202 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013148:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801314c:	2b00      	cmp	r3, #0
 801314e:	dd58      	ble.n	8013202 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8013150:	462a      	mov	r2, r5
 8013152:	ab0a      	add	r3, sp, #40	; 0x28
 8013154:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013158:	6851      	ldr	r1, [r2, #4]
 801315a:	c303      	stmia	r3!, {r0, r1}
 801315c:	4631      	mov	r1, r6
 801315e:	a80a      	add	r0, sp, #40	; 0x28
 8013160:	f7ff fc00 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8013164:	4b38      	ldr	r3, [pc, #224]	; (8013248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013166:	2100      	movs	r1, #0
 8013168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801316c:	4b37      	ldr	r3, [pc, #220]	; (801324c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801316e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8013172:	aa0a      	add	r2, sp, #40	; 0x28
 8013174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013178:	910c      	str	r1, [sp, #48]	; 0x30
 801317a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801317e:	ab08      	add	r3, sp, #32
 8013180:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013184:	e883 0003 	stmia.w	r3, {r0, r1}
 8013188:	4618      	mov	r0, r3
 801318a:	a90c      	add	r1, sp, #48	; 0x30
 801318c:	f7ff fbea 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8013190:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8013192:	2b00      	cmp	r3, #0
 8013194:	d13c      	bne.n	8013210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013196:	2000      	movs	r0, #0
 8013198:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801319c:	2600      	movs	r6, #0
 801319e:	696b      	ldr	r3, [r5, #20]
 80131a0:	a908      	add	r1, sp, #32
 80131a2:	682a      	ldr	r2, [r5, #0]
 80131a4:	4628      	mov	r0, r5
 80131a6:	9305      	str	r3, [sp, #20]
 80131a8:	616e      	str	r6, [r5, #20]
 80131aa:	6892      	ldr	r2, [r2, #8]
 80131ac:	4790      	blx	r2
 80131ae:	9b05      	ldr	r3, [sp, #20]
 80131b0:	4652      	mov	r2, sl
 80131b2:	4649      	mov	r1, r9
 80131b4:	616b      	str	r3, [r5, #20]
 80131b6:	4628      	mov	r0, r5
 80131b8:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 80131bc:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 80131c0:	f7f0 f987 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 80131c4:	9a01      	ldr	r2, [sp, #4]
 80131c6:	4b23      	ldr	r3, [pc, #140]	; (8013254 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80131c8:	4620      	mov	r0, r4
 80131ca:	801a      	strh	r2, [r3, #0]
 80131cc:	9a02      	ldr	r2, [sp, #8]
 80131ce:	4b22      	ldr	r3, [pc, #136]	; (8013258 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80131d0:	801a      	strh	r2, [r3, #0]
 80131d2:	9a03      	ldr	r2, [sp, #12]
 80131d4:	4b1c      	ldr	r3, [pc, #112]	; (8013248 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80131d6:	801a      	strh	r2, [r3, #0]
 80131d8:	4b1c      	ldr	r3, [pc, #112]	; (801324c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80131da:	9a04      	ldr	r2, [sp, #16]
 80131dc:	801a      	strh	r2, [r3, #0]
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 80131e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131e6:	4798      	blx	r3
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	4620      	mov	r0, r4
 80131ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131ee:	4798      	blx	r3
 80131f0:	b00f      	add	sp, #60	; 0x3c
 80131f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131f6:	883b      	ldrh	r3, [r7, #0]
 80131f8:	f8ab 0000 	strh.w	r0, [fp]
 80131fc:	f8aa 3000 	strh.w	r3, [sl]
 8013200:	e789      	b.n	8013116 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8013202:	462a      	mov	r2, r5
 8013204:	ab0a      	add	r3, sp, #40	; 0x28
 8013206:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801320a:	6851      	ldr	r1, [r2, #4]
 801320c:	c303      	stmia	r3!, {r0, r1}
 801320e:	e7a9      	b.n	8013164 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8013210:	a807      	add	r0, sp, #28
 8013212:	f008 ff5f 	bl	801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013216:	4606      	mov	r6, r0
 8013218:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801321a:	6803      	ldr	r3, [r0, #0]
 801321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801321e:	4798      	blx	r3
 8013220:	4286      	cmp	r6, r0
 8013222:	d1b8      	bne.n	8013196 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8013224:	f7ff fe6e 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8013228:	6803      	ldr	r3, [r0, #0]
 801322a:	4606      	mov	r6, r0
 801322c:	a807      	add	r0, sp, #28
 801322e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013230:	9305      	str	r3, [sp, #20]
 8013232:	f008 ff4f 	bl	801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013236:	9b05      	ldr	r3, [sp, #20]
 8013238:	4601      	mov	r1, r0
 801323a:	4630      	mov	r0, r6
 801323c:	4798      	blx	r3
 801323e:	f080 0001 	eor.w	r0, r0, #1
 8013242:	b2c0      	uxtb	r0, r0
 8013244:	e7a8      	b.n	8013198 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8013246:	bf00      	nop
 8013248:	24010054 	.word	0x24010054
 801324c:	24010056 	.word	0x24010056
 8013250:	24010058 	.word	0x24010058
 8013254:	2401005a 	.word	0x2401005a
 8013258:	2401005c 	.word	0x2401005c

0801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801325c:	4b07      	ldr	r3, [pc, #28]	; (801327c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801325e:	b510      	push	{r4, lr}
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	4604      	mov	r4, r0
 8013264:	b13b      	cbz	r3, 8013276 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013266:	6803      	ldr	r3, [r0, #0]
 8013268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326a:	4798      	blx	r3
 801326c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801326e:	4283      	cmp	r3, r0
 8013270:	d101      	bne.n	8013276 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013272:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013274:	bd10      	pop	{r4, pc}
 8013276:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013278:	e7fc      	b.n	8013274 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801327a:	bf00      	nop
 801327c:	2401005e 	.word	0x2401005e

08013280 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8013280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013284:	461d      	mov	r5, r3
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801328c:	4690      	mov	r8, r2
 801328e:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8013292:	2400      	movs	r4, #0
 8013294:	4607      	mov	r7, r0
 8013296:	fb06 8505 	mla	r5, r6, r5, r8
 801329a:	9404      	str	r4, [sp, #16]
 801329c:	f88d 4020 	strb.w	r4, [sp, #32]
 80132a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80132a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80132a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80132ac:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80132b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80132b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80132b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80132bc:	f7ff ffce 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80132c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f8ad 601e 	strh.w	r6, [sp, #30]
 80132ca:	a901      	add	r1, sp, #4
 80132cc:	9505      	str	r5, [sp, #20]
 80132ce:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80132d2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80132d6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80132da:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80132de:	6803      	ldr	r3, [r0, #0]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	4798      	blx	r3
 80132e4:	b00a      	add	sp, #40	; 0x28
 80132e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080132ea <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80132ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132ee:	b08b      	sub	sp, #44	; 0x2c
 80132f0:	2400      	movs	r4, #0
 80132f2:	4691      	mov	r9, r2
 80132f4:	461d      	mov	r5, r3
 80132f6:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80132fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132fe:	4688      	mov	r8, r1
 8013300:	4607      	mov	r7, r0
 8013302:	9404      	str	r4, [sp, #16]
 8013304:	fb06 9505 	mla	r5, r6, r5, r9
 8013308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801330c:	f7ff ffa6 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013310:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013314:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013318:	6878      	ldr	r0, [r7, #4]
 801331a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801331e:	a901      	add	r1, sp, #4
 8013320:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013324:	9505      	str	r5, [sp, #20]
 8013326:	f8ad 301a 	strh.w	r3, [sp, #26]
 801332a:	f8ad 401c 	strh.w	r4, [sp, #28]
 801332e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013332:	f8cd 8010 	str.w	r8, [sp, #16]
 8013336:	f8ad 4020 	strh.w	r4, [sp, #32]
 801333a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801333e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013342:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8013346:	6803      	ldr	r3, [r0, #0]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	4798      	blx	r3
 801334c:	b00b      	add	sp, #44	; 0x2c
 801334e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013354 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013358:	b08a      	sub	sp, #40	; 0x28
 801335a:	4698      	mov	r8, r3
 801335c:	2300      	movs	r3, #0
 801335e:	4606      	mov	r6, r0
 8013360:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013364:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8013368:	2d0b      	cmp	r5, #11
 801336a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801336e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8013372:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8013376:	9304      	str	r3, [sp, #16]
 8013378:	d137      	bne.n	80133ea <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801337a:	2380      	movs	r3, #128	; 0x80
 801337c:	f88d 0020 	strb.w	r0, [sp, #32]
 8013380:	4630      	mov	r0, r6
 8013382:	9203      	str	r2, [sp, #12]
 8013384:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013388:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801338c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013390:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013394:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013398:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801339c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80133a0:	f7ff ff5c 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80133a4:	2c0b      	cmp	r4, #11
 80133a6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80133aa:	f8ad 701e 	strh.w	r7, [sp, #30]
 80133ae:	bf94      	ite	ls
 80133b0:	4b19      	ldrls	r3, [pc, #100]	; (8013418 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80133b2:	2100      	movhi	r1, #0
 80133b4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80133b8:	bf98      	it	ls
 80133ba:	5d19      	ldrbls	r1, [r3, r4]
 80133bc:	fb02 8307 	mla	r3, r2, r7, r8
 80133c0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80133c4:	10c9      	asrs	r1, r1, #3
 80133c6:	fb01 0003 	mla	r0, r1, r3, r0
 80133ca:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80133ce:	a901      	add	r1, sp, #4
 80133d0:	9005      	str	r0, [sp, #20]
 80133d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80133d6:	2300      	movs	r3, #0
 80133d8:	6870      	ldr	r0, [r6, #4]
 80133da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80133de:	6803      	ldr	r3, [r0, #0]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	4798      	blx	r3
 80133e4:	b00a      	add	sp, #40	; 0x28
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	2d02      	cmp	r5, #2
 80133ec:	d109      	bne.n	8013402 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 80133ee:	28ff      	cmp	r0, #255	; 0xff
 80133f0:	d105      	bne.n	80133fe <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 80133f2:	f1bc 0f00 	cmp.w	ip, #0
 80133f6:	bf14      	ite	ne
 80133f8:	2340      	movne	r3, #64	; 0x40
 80133fa:	2320      	moveq	r3, #32
 80133fc:	e7be      	b.n	801337c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80133fe:	2340      	movs	r3, #64	; 0x40
 8013400:	e7bc      	b.n	801337c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013402:	28ff      	cmp	r0, #255	; 0xff
 8013404:	d105      	bne.n	8013412 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8013406:	f1bc 0f00 	cmp.w	ip, #0
 801340a:	bf14      	ite	ne
 801340c:	2304      	movne	r3, #4
 801340e:	2301      	moveq	r3, #1
 8013410:	e7b4      	b.n	801337c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013412:	2304      	movs	r3, #4
 8013414:	e7b2      	b.n	801337c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8013416:	bf00      	nop
 8013418:	080276fc 	.word	0x080276fc

0801341c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801341c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013420:	b08b      	sub	sp, #44	; 0x2c
 8013422:	461d      	mov	r5, r3
 8013424:	2400      	movs	r4, #0
 8013426:	4688      	mov	r8, r1
 8013428:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801342c:	4693      	mov	fp, r2
 801342e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8013432:	4607      	mov	r7, r0
 8013434:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8013438:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801343c:	9404      	str	r4, [sp, #16]
 801343e:	bf14      	ite	ne
 8013440:	2308      	movne	r3, #8
 8013442:	2302      	moveq	r3, #2
 8013444:	fb05 b50a 	mla	r5, r5, sl, fp
 8013448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801344c:	f7ff ff06 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013450:	2e0b      	cmp	r6, #11
 8013452:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013456:	a901      	add	r1, sp, #4
 8013458:	bf98      	it	ls
 801345a:	4b13      	ldrls	r3, [pc, #76]	; (80134a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801345c:	f8ad a01e 	strh.w	sl, [sp, #30]
 8013460:	bf98      	it	ls
 8013462:	5d9c      	ldrbls	r4, [r3, r6]
 8013464:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013468:	10e4      	asrs	r4, r4, #3
 801346a:	f8cd 8010 	str.w	r8, [sp, #16]
 801346e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013472:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013476:	fb04 0405 	mla	r4, r4, r5, r0
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013480:	2300      	movs	r3, #0
 8013482:	9405      	str	r4, [sp, #20]
 8013484:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013488:	f88d 9020 	strb.w	r9, [sp, #32]
 801348c:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8013490:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013494:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013498:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801349c:	6803      	ldr	r3, [r0, #0]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	4798      	blx	r3
 80134a2:	b00b      	add	sp, #44	; 0x2c
 80134a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a8:	080276fc 	.word	0x080276fc

080134ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80134ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134b0:	461e      	mov	r6, r3
 80134b2:	4b0a      	ldr	r3, [pc, #40]	; (80134dc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 80134b4:	460f      	mov	r7, r1
 80134b6:	4690      	mov	r8, r2
 80134b8:	881d      	ldrh	r5, [r3, #0]
 80134ba:	f7ff fd23 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80134be:	6803      	ldr	r3, [r0, #0]
 80134c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c2:	4798      	blx	r3
 80134c4:	280b      	cmp	r0, #11
 80134c6:	bf96      	itet	ls
 80134c8:	4b05      	ldrls	r3, [pc, #20]	; (80134e0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 80134ca:	2400      	movhi	r4, #0
 80134cc:	5c1c      	ldrbls	r4, [r3, r0]
 80134ce:	fb08 7005 	mla	r0, r8, r5, r7
 80134d2:	10e4      	asrs	r4, r4, #3
 80134d4:	fb04 6000 	mla	r0, r4, r0, r6
 80134d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134dc:	2401005a 	.word	0x2401005a
 80134e0:	080276fc 	.word	0x080276fc

080134e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80134e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134e6:	b08b      	sub	sp, #44	; 0x2c
 80134e8:	461f      	mov	r7, r3
 80134ea:	4604      	mov	r4, r0
 80134ec:	4616      	mov	r6, r2
 80134ee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80134f2:	2500      	movs	r5, #0
 80134f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80134f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80134fc:	9504      	str	r5, [sp, #16]
 80134fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013502:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013506:	f8ad 301a 	strh.w	r3, [sp, #26]
 801350a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801350e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013512:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013516:	f88d 3020 	strb.w	r3, [sp, #32]
 801351a:	f7ff fe9f 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801351e:	463a      	mov	r2, r7
 8013520:	4631      	mov	r1, r6
 8013522:	4603      	mov	r3, r0
 8013524:	4620      	mov	r0, r4
 8013526:	f7ff ffc1 	bl	80134ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801352a:	4b0e      	ldr	r3, [pc, #56]	; (8013564 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801352c:	9005      	str	r0, [sp, #20]
 801352e:	881b      	ldrh	r3, [r3, #0]
 8013530:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013534:	f7ff fce6 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8013538:	6803      	ldr	r3, [r0, #0]
 801353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353c:	4798      	blx	r3
 801353e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013540:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8013544:	a901      	add	r1, sp, #4
 8013546:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801354a:	9304      	str	r3, [sp, #16]
 801354c:	6860      	ldr	r0, [r4, #4]
 801354e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8013552:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013556:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801355a:	6803      	ldr	r3, [r0, #0]
 801355c:	685b      	ldr	r3, [r3, #4]
 801355e:	4798      	blx	r3
 8013560:	b00b      	add	sp, #44	; 0x2c
 8013562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013564:	2401005a 	.word	0x2401005a

08013568 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801356a:	b08d      	sub	sp, #52	; 0x34
 801356c:	2501      	movs	r5, #1
 801356e:	4604      	mov	r4, r0
 8013570:	466b      	mov	r3, sp
 8013572:	9503      	str	r5, [sp, #12]
 8013574:	e883 0006 	stmia.w	r3, {r1, r2}
 8013578:	2300      	movs	r3, #0
 801357a:	f8bd 6000 	ldrh.w	r6, [sp]
 801357e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8013582:	9306      	str	r3, [sp, #24]
 8013584:	6803      	ldr	r3, [r0, #0]
 8013586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013588:	4798      	blx	r3
 801358a:	463a      	mov	r2, r7
 801358c:	4631      	mov	r1, r6
 801358e:	4603      	mov	r3, r0
 8013590:	4620      	mov	r0, r4
 8013592:	f7ff ff8b 	bl	80134ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013596:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013598:	9004      	str	r0, [sp, #16]
 801359a:	9307      	str	r3, [sp, #28]
 801359c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80135a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80135a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80135a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80135ac:	4b0e      	ldr	r3, [pc, #56]	; (80135e8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80135ae:	881b      	ldrh	r3, [r3, #0]
 80135b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80135b4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80135b8:	f7ff fca4 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80135bc:	6803      	ldr	r3, [r0, #0]
 80135be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135c0:	4798      	blx	r3
 80135c2:	23ff      	movs	r3, #255	; 0xff
 80135c4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80135c8:	a903      	add	r1, sp, #12
 80135ca:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80135ce:	6860      	ldr	r0, [r4, #4]
 80135d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80135d4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80135d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80135dc:	6803      	ldr	r3, [r0, #0]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	4798      	blx	r3
 80135e2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80135e4:	b00d      	add	sp, #52	; 0x34
 80135e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135e8:	2401005a 	.word	0x2401005a

080135ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 80135ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135f0:	b08c      	sub	sp, #48	; 0x30
 80135f2:	461e      	mov	r6, r3
 80135f4:	2300      	movs	r3, #0
 80135f6:	4604      	mov	r4, r0
 80135f8:	466d      	mov	r5, sp
 80135fa:	9306      	str	r3, [sp, #24]
 80135fc:	6803      	ldr	r3, [r0, #0]
 80135fe:	e885 0006 	stmia.w	r5, {r1, r2}
 8013602:	2501      	movs	r5, #1
 8013604:	f8bd 7000 	ldrh.w	r7, [sp]
 8013608:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801360c:	9503      	str	r5, [sp, #12]
 801360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013610:	4798      	blx	r3
 8013612:	4642      	mov	r2, r8
 8013614:	4639      	mov	r1, r7
 8013616:	4603      	mov	r3, r0
 8013618:	4620      	mov	r0, r4
 801361a:	f7ff ff47 	bl	80134ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801361e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013622:	9004      	str	r0, [sp, #16]
 8013624:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013628:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801362c:	9607      	str	r6, [sp, #28]
 801362e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013632:	4b10      	ldr	r3, [pc, #64]	; (8013674 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8013634:	881b      	ldrh	r3, [r3, #0]
 8013636:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801363a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801363c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013640:	f7ff fc60 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8013644:	6803      	ldr	r3, [r0, #0]
 8013646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013648:	4798      	blx	r3
 801364a:	23ff      	movs	r3, #255	; 0xff
 801364c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013650:	a903      	add	r1, sp, #12
 8013652:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013656:	6860      	ldr	r0, [r4, #4]
 8013658:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801365c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013660:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013664:	6803      	ldr	r3, [r0, #0]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	4798      	blx	r3
 801366a:	4630      	mov	r0, r6
 801366c:	b00c      	add	sp, #48	; 0x30
 801366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013672:	bf00      	nop
 8013674:	2401005a 	.word	0x2401005a

08013678 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013678:	b5f0      	push	{r4, r5, r6, r7, lr}
 801367a:	b085      	sub	sp, #20
 801367c:	4605      	mov	r5, r0
 801367e:	ac02      	add	r4, sp, #8
 8013680:	e884 0006 	stmia.w	r4, {r1, r2}
 8013684:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013688:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801368c:	f7ff fde6 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013690:	4631      	mov	r1, r6
 8013692:	4603      	mov	r3, r0
 8013694:	463a      	mov	r2, r7
 8013696:	4628      	mov	r0, r5
 8013698:	f7ff ff08 	bl	80134ac <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801369c:	4a05      	ldr	r2, [pc, #20]	; (80136b4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801369e:	682b      	ldr	r3, [r5, #0]
 80136a0:	8812      	ldrh	r2, [r2, #0]
 80136a2:	9200      	str	r2, [sp, #0]
 80136a4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80136a6:	4603      	mov	r3, r0
 80136a8:	4628      	mov	r0, r5
 80136aa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80136ae:	47b0      	blx	r6
 80136b0:	b005      	add	sp, #20
 80136b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80136b4:	2401005a 	.word	0x2401005a

080136b8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80136b8:	b570      	push	{r4, r5, r6, lr}
 80136ba:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80136be:	4604      	mov	r4, r0
 80136c0:	b19b      	cbz	r3, 80136ea <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80136c2:	2002      	movs	r0, #2
 80136c4:	f7ee f8a2 	bl	800180c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80136c8:	2300      	movs	r3, #0
 80136ca:	4620      	mov	r0, r4
 80136cc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80136d0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80136d4:	6823      	ldr	r3, [r4, #0]
 80136d6:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 80136da:	f7ff fdbf 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136de:	4601      	mov	r1, r0
 80136e0:	4620      	mov	r0, r4
 80136e2:	462b      	mov	r3, r5
 80136e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136e8:	4718      	bx	r3
 80136ea:	bd70      	pop	{r4, r5, r6, pc}

080136ec <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80136ec:	b570      	push	{r4, r5, r6, lr}
 80136ee:	4605      	mov	r5, r0
 80136f0:	460c      	mov	r4, r1
 80136f2:	2003      	movs	r0, #3
 80136f4:	b149      	cbz	r1, 801370a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80136f6:	f7ee f829 	bl	800174c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80136fa:	6928      	ldr	r0, [r5, #16]
 80136fc:	b168      	cbz	r0, 801371a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80136fe:	6803      	ldr	r3, [r0, #0]
 8013700:	2101      	movs	r1, #1
 8013702:	695b      	ldr	r3, [r3, #20]
 8013704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013708:	4718      	bx	r3
 801370a:	f7ee f84f 	bl	80017ac <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801370e:	6928      	ldr	r0, [r5, #16]
 8013710:	b118      	cbz	r0, 801371a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8013712:	6803      	ldr	r3, [r0, #0]
 8013714:	4621      	mov	r1, r4
 8013716:	695b      	ldr	r3, [r3, #20]
 8013718:	e7f4      	b.n	8013704 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801371a:	bd70      	pop	{r4, r5, r6, pc}

0801371c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801371c:	b538      	push	{r3, r4, r5, lr}
 801371e:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013722:	4604      	mov	r4, r0
 8013724:	460d      	mov	r5, r1
 8013726:	428b      	cmp	r3, r1
 8013728:	d006      	beq.n	8013738 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801372a:	6803      	ldr	r3, [r0, #0]
 801372c:	b929      	cbnz	r1, 801373a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801372e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013732:	4798      	blx	r3
 8013734:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013738:	bd38      	pop	{r3, r4, r5, pc}
 801373a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801373e:	e7f8      	b.n	8013732 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013740 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013740:	4b0d      	ldr	r3, [pc, #52]	; (8013778 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013742:	b510      	push	{r4, lr}
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	4604      	mov	r4, r0
 8013748:	b95b      	cbnz	r3, 8013762 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801374a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801374e:	2b02      	cmp	r3, #2
 8013750:	d007      	beq.n	8013762 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013752:	6840      	ldr	r0, [r0, #4]
 8013754:	f000 f92a 	bl	80139ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013758:	b118      	cbz	r0, 8013762 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801375a:	6862      	ldr	r2, [r4, #4]
 801375c:	7a53      	ldrb	r3, [r2, #9]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d0fc      	beq.n	801375c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013762:	f7ee fba1 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013766:	4620      	mov	r0, r4
 8013768:	2100      	movs	r1, #0
 801376a:	f7ff ffd7 	bl	801371c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801376e:	4620      	mov	r0, r4
 8013770:	f7ff fd74 	bl	801325c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013774:	bd10      	pop	{r4, pc}
 8013776:	bf00      	nop
 8013778:	2401005e 	.word	0x2401005e

0801377c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801377c:	b570      	push	{r4, r5, r6, lr}
 801377e:	4604      	mov	r4, r0
 8013780:	6803      	ldr	r3, [r0, #0]
 8013782:	b919      	cbnz	r1, 801378c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8013784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801378a:	4718      	bx	r3
 801378c:	2200      	movs	r2, #0
 801378e:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 8013792:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8013796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013798:	4798      	blx	r3
 801379a:	4605      	mov	r5, r0
 801379c:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80137a0:	4620      	mov	r0, r4
 80137a2:	2101      	movs	r1, #1
 80137a4:	f7ff ffba 	bl	801371c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80137a8:	4628      	mov	r0, r5
 80137aa:	bd70      	pop	{r4, r5, r6, pc}

080137ac <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80137ac:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80137b0:	1a13      	subs	r3, r2, r0
 80137b2:	4258      	negs	r0, r3
 80137b4:	4158      	adcs	r0, r3
 80137b6:	4770      	bx	lr

080137b8 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80137b8:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80137bc:	1a9b      	subs	r3, r3, r2
 80137be:	2b00      	cmp	r3, #0
 80137c0:	bfdc      	itt	le
 80137c2:	6882      	ldrle	r2, [r0, #8]
 80137c4:	189b      	addle	r3, r3, r2
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	bfcc      	ite	gt
 80137ca:	2000      	movgt	r0, #0
 80137cc:	2001      	movle	r0, #1
 80137ce:	4770      	bx	lr

080137d0 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80137d0:	6902      	ldr	r2, [r0, #16]
 80137d2:	6843      	ldr	r3, [r0, #4]
 80137d4:	2024      	movs	r0, #36	; 0x24
 80137d6:	fb00 3002 	mla	r0, r0, r2, r3
 80137da:	4770      	bx	lr

080137dc <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80137dc:	6803      	ldr	r3, [r0, #0]
 80137de:	691b      	ldr	r3, [r3, #16]
 80137e0:	4718      	bx	r3

080137e2 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80137e2:	2301      	movs	r3, #1
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	7203      	strb	r3, [r0, #8]
 80137e8:	4604      	mov	r4, r0
 80137ea:	6840      	ldr	r0, [r0, #4]
 80137ec:	6803      	ldr	r3, [r0, #0]
 80137ee:	699b      	ldr	r3, [r3, #24]
 80137f0:	4798      	blx	r3
 80137f2:	6803      	ldr	r3, [r0, #0]
 80137f4:	4605      	mov	r5, r0
 80137f6:	2b40      	cmp	r3, #64	; 0x40
 80137f8:	d00c      	beq.n	8013814 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80137fa:	d810      	bhi.n	801381e <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80137fc:	2b04      	cmp	r3, #4
 80137fe:	d01d      	beq.n	801383c <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013800:	d804      	bhi.n	801380c <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013802:	2b01      	cmp	r3, #1
 8013804:	d006      	beq.n	8013814 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013806:	2b02      	cmp	r3, #2
 8013808:	d02c      	beq.n	8013864 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801380a:	bd70      	pop	{r4, r5, r6, pc}
 801380c:	2b08      	cmp	r3, #8
 801380e:	d01d      	beq.n	801384c <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013810:	2b20      	cmp	r3, #32
 8013812:	d1fa      	bne.n	801380a <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013814:	6823      	ldr	r3, [r4, #0]
 8013816:	4620      	mov	r0, r4
 8013818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801381a:	4798      	blx	r3
 801381c:	e013      	b.n	8013846 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013822:	d0f7      	beq.n	8013814 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013824:	d804      	bhi.n	8013830 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013826:	2b80      	cmp	r3, #128	; 0x80
 8013828:	d0f4      	beq.n	8013814 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801382a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801382e:	e7f0      	b.n	8013812 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013834:	d0ee      	beq.n	8013814 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801383a:	e7e5      	b.n	8013808 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801383c:	6823      	ldr	r3, [r4, #0]
 801383e:	7f01      	ldrb	r1, [r0, #28]
 8013840:	4620      	mov	r0, r4
 8013842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013844:	4798      	blx	r3
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801384a:	e006      	b.n	801385a <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	7f01      	ldrb	r1, [r0, #28]
 8013850:	4620      	mov	r0, r4
 8013852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013854:	4798      	blx	r3
 8013856:	6823      	ldr	r3, [r4, #0]
 8013858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801385a:	4629      	mov	r1, r5
 801385c:	4620      	mov	r0, r4
 801385e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013862:	4718      	bx	r3
 8013864:	6823      	ldr	r3, [r4, #0]
 8013866:	4620      	mov	r0, r4
 8013868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801386a:	4798      	blx	r3
 801386c:	e7f3      	b.n	8013856 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801386e <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801386e:	4770      	bx	lr

08013870 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013870:	4770      	bx	lr

08013872 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8013872:	4770      	bx	lr

08013874 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013874:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013878:	b510      	push	{r4, lr}
 801387a:	1ad2      	subs	r2, r2, r3
 801387c:	2a00      	cmp	r2, #0
 801387e:	bfdc      	itt	le
 8013880:	6884      	ldrle	r4, [r0, #8]
 8013882:	1912      	addle	r2, r2, r4
 8013884:	2a01      	cmp	r2, #1
 8013886:	dd16      	ble.n	80138b6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013888:	6842      	ldr	r2, [r0, #4]
 801388a:	2424      	movs	r4, #36	; 0x24
 801388c:	fb04 2303 	mla	r3, r4, r3, r2
 8013890:	f101 0220 	add.w	r2, r1, #32
 8013894:	f851 4b04 	ldr.w	r4, [r1], #4
 8013898:	4291      	cmp	r1, r2
 801389a:	f843 4b04 	str.w	r4, [r3], #4
 801389e:	d1f9      	bne.n	8013894 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80138a0:	780a      	ldrb	r2, [r1, #0]
 80138a2:	701a      	strb	r2, [r3, #0]
 80138a4:	68c3      	ldr	r3, [r0, #12]
 80138a6:	6882      	ldr	r2, [r0, #8]
 80138a8:	f3bf 8f5b 	dmb	ish
 80138ac:	3301      	adds	r3, #1
 80138ae:	429a      	cmp	r2, r3
 80138b0:	bfd8      	it	le
 80138b2:	1a9b      	suble	r3, r3, r2
 80138b4:	60c3      	str	r3, [r0, #12]
 80138b6:	bd10      	pop	{r4, pc}

080138b8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80138b8:	6903      	ldr	r3, [r0, #16]
 80138ba:	6882      	ldr	r2, [r0, #8]
 80138bc:	f3bf 8f5b 	dmb	ish
 80138c0:	3301      	adds	r3, #1
 80138c2:	429a      	cmp	r2, r3
 80138c4:	bfd8      	it	le
 80138c6:	1a9b      	suble	r3, r3, r2
 80138c8:	6103      	str	r3, [r0, #16]
 80138ca:	4770      	bx	lr

080138cc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80138cc:	b570      	push	{r4, r5, r6, lr}
 80138ce:	4604      	mov	r4, r0
 80138d0:	460e      	mov	r6, r1
 80138d2:	6860      	ldr	r0, [r4, #4]
 80138d4:	6803      	ldr	r3, [r0, #0]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	4798      	blx	r3
 80138da:	2800      	cmp	r0, #0
 80138dc:	d1f9      	bne.n	80138d2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80138de:	4d0d      	ldr	r5, [pc, #52]	; (8013914 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80138e0:	6828      	ldr	r0, [r5, #0]
 80138e2:	6803      	ldr	r3, [r0, #0]
 80138e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80138e6:	4798      	blx	r3
 80138e8:	f7ee faec 	bl	8001ec4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80138ec:	6828      	ldr	r0, [r5, #0]
 80138ee:	2101      	movs	r1, #1
 80138f0:	f7ff ff14 	bl	801371c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80138f4:	6860      	ldr	r0, [r4, #4]
 80138f6:	4631      	mov	r1, r6
 80138f8:	6803      	ldr	r3, [r0, #0]
 80138fa:	689b      	ldr	r3, [r3, #8]
 80138fc:	4798      	blx	r3
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	4620      	mov	r0, r4
 8013902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013904:	4798      	blx	r3
 8013906:	6828      	ldr	r0, [r5, #0]
 8013908:	6803      	ldr	r3, [r0, #0]
 801390a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801390e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013910:	4718      	bx	r3
 8013912:	bf00      	nop
 8013914:	24010060 	.word	0x24010060

08013918 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013918:	b508      	push	{r3, lr}
 801391a:	f7ee fac5 	bl	8001ea8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801391e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013922:	f7ee bac9 	b.w	8001eb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013926 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013926:	b510      	push	{r4, lr}
 8013928:	4604      	mov	r4, r0
 801392a:	2114      	movs	r1, #20
 801392c:	f010 fe97 	bl	802465e <_ZdlPvj>
 8013930:	4620      	mov	r0, r4
 8013932:	bd10      	pop	{r4, pc}

08013934 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013934:	b510      	push	{r4, lr}
 8013936:	4604      	mov	r4, r0
 8013938:	6840      	ldr	r0, [r0, #4]
 801393a:	6803      	ldr	r3, [r0, #0]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	4798      	blx	r3
 8013940:	b948      	cbnz	r0, 8013956 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013942:	7a63      	ldrb	r3, [r4, #9]
 8013944:	b13b      	cbz	r3, 8013956 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013946:	7a23      	ldrb	r3, [r4, #8]
 8013948:	b92b      	cbnz	r3, 8013956 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	4620      	mov	r0, r4
 801394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013954:	4718      	bx	r3
 8013956:	bd10      	pop	{r4, pc}

08013958 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013958:	b570      	push	{r4, r5, r6, lr}
 801395a:	4604      	mov	r4, r0
 801395c:	6840      	ldr	r0, [r0, #4]
 801395e:	6803      	ldr	r3, [r0, #0]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	4798      	blx	r3
 8013964:	4605      	mov	r5, r0
 8013966:	b930      	cbnz	r0, 8013976 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013968:	7a23      	ldrb	r3, [r4, #8]
 801396a:	b123      	cbz	r3, 8013976 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801396c:	6860      	ldr	r0, [r4, #4]
 801396e:	6803      	ldr	r3, [r0, #0]
 8013970:	695b      	ldr	r3, [r3, #20]
 8013972:	4798      	blx	r3
 8013974:	7225      	strb	r5, [r4, #8]
 8013976:	6860      	ldr	r0, [r4, #4]
 8013978:	6803      	ldr	r3, [r0, #0]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	4798      	blx	r3
 801397e:	b928      	cbnz	r0, 801398c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013980:	6823      	ldr	r3, [r4, #0]
 8013982:	4620      	mov	r0, r4
 8013984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801398a:	4718      	bx	r3
 801398c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013990:	f7ee baa0 	b.w	8001ed4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08013994 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013994:	b510      	push	{r4, lr}
 8013996:	6082      	str	r2, [r0, #8]
 8013998:	2200      	movs	r2, #0
 801399a:	4c03      	ldr	r4, [pc, #12]	; (80139a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801399c:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80139a0:	e9c0 4100 	strd	r4, r1, [r0]
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	bf00      	nop
 80139a8:	08027710 	.word	0x08027710

080139ac <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80139ac:	6840      	ldr	r0, [r0, #4]
 80139ae:	6803      	ldr	r3, [r0, #0]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	4718      	bx	r3

080139b4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80139b4:	0c0b      	lsrs	r3, r1, #16
 80139b6:	60c1      	str	r1, [r0, #12]
 80139b8:	7481      	strb	r1, [r0, #18]
 80139ba:	7403      	strb	r3, [r0, #16]
 80139bc:	0a0b      	lsrs	r3, r1, #8
 80139be:	7443      	strb	r3, [r0, #17]
 80139c0:	4770      	bx	lr

080139c2 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80139c2:	f1a0 0008 	sub.w	r0, r0, #8
 80139c6:	e7f5      	b.n	80139b4 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>

080139c8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80139c8:	b508      	push	{r3, lr}
 80139ca:	4b05      	ldr	r3, [pc, #20]	; (80139e0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80139cc:	6818      	ldr	r0, [r3, #0]
 80139ce:	6803      	ldr	r3, [r0, #0]
 80139d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80139d4:	4798      	blx	r3
 80139d6:	1e43      	subs	r3, r0, #1
 80139d8:	4258      	negs	r0, r3
 80139da:	4158      	adcs	r0, r3
 80139dc:	bd08      	pop	{r3, pc}
 80139de:	bf00      	nop
 80139e0:	24010060 	.word	0x24010060

080139e4 <_ZN8touchgfx13PainterRGB888D1Ev>:
 80139e4:	4770      	bx	lr

080139e6 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80139e6:	3808      	subs	r0, #8
 80139e8:	4770      	bx	lr

080139ea <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80139ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80139ee:	b410      	push	{r4}
 80139f0:	188c      	adds	r4, r1, r2
 80139f2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80139f6:	68c2      	ldr	r2, [r0, #12]
 80139f8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80139fc:	4620      	mov	r0, r4
 80139fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a02:	f7ee bc1d 	b.w	8002240 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08013a06 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8013a06:	f7ee bc11 	b.w	800222c <_ZN8touchgfx5paint8tearDownEv>

08013a0a <_ZN8touchgfx13PainterRGB888D0Ev>:
 8013a0a:	b510      	push	{r4, lr}
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	2114      	movs	r1, #20
 8013a10:	f010 fe25 	bl	802465e <_ZdlPvj>
 8013a14:	4620      	mov	r0, r4
 8013a16:	bd10      	pop	{r4, pc}

08013a18 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8013a18:	f1a0 0008 	sub.w	r0, r0, #8
 8013a1c:	e7f5      	b.n	8013a0a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08013a20 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 8013a20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8013a22:	6803      	ldr	r3, [r0, #0]
 8013a24:	460d      	mov	r5, r1
 8013a26:	4604      	mov	r4, r0
 8013a28:	4601      	mov	r1, r0
 8013a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013a2c:	a802      	add	r0, sp, #8
 8013a2e:	4798      	blx	r3
 8013a30:	6828      	ldr	r0, [r5, #0]
 8013a32:	6869      	ldr	r1, [r5, #4]
 8013a34:	466b      	mov	r3, sp
 8013a36:	c303      	stmia	r3!, {r0, r1}
 8013a38:	4668      	mov	r0, sp
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	f7fe ff92 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8013a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013a42:	b1a8      	cbz	r0, 8013a70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8013a44:	6803      	ldr	r3, [r0, #0]
 8013a46:	1d21      	adds	r1, r4, #4
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	4798      	blx	r3
 8013a4c:	b180      	cbz	r0, 8013a70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8013a4e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	dd0c      	ble.n	8013a70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8013a56:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8013a5a:	2d00      	cmp	r5, #0
 8013a5c:	dd08      	ble.n	8013a70 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8013a5e:	4a2d      	ldr	r2, [pc, #180]	; (8013b14 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8013a60:	7812      	ldrb	r2, [r2, #0]
 8013a62:	b13a      	cbz	r2, 8013a74 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 8013a64:	2a01      	cmp	r2, #1
 8013a66:	d02d      	beq.n	8013ac4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8013a68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013a6a:	6803      	ldr	r3, [r0, #0]
 8013a6c:	691b      	ldr	r3, [r3, #16]
 8013a6e:	4798      	blx	r3
 8013a70:	b004      	add	sp, #16
 8013a72:	bd70      	pop	{r4, r5, r6, pc}
 8013a74:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013a78:	441d      	add	r5, r3
 8013a7a:	b2ad      	uxth	r5, r5
 8013a7c:	b22e      	sxth	r6, r5
 8013a7e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8013a82:	42b3      	cmp	r3, r6
 8013a84:	daf0      	bge.n	8013a68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013a86:	6823      	ldr	r3, [r4, #0]
 8013a88:	4669      	mov	r1, sp
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a8e:	4798      	blx	r3
 8013a90:	b940      	cbnz	r0, 8013aa4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8013a92:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013a96:	2b01      	cmp	r3, #1
 8013a98:	d004      	beq.n	8013aa4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	105b      	asrs	r3, r3, #1
 8013a9e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013aa2:	e7f0      	b.n	8013a86 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 8013aa4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013aa8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013aac:	4413      	add	r3, r2
 8013aae:	b29b      	uxth	r3, r3
 8013ab0:	441a      	add	r2, r3
 8013ab2:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013ab6:	b212      	sxth	r2, r2
 8013ab8:	4296      	cmp	r6, r2
 8013aba:	dae0      	bge.n	8013a7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013abc:	1aeb      	subs	r3, r5, r3
 8013abe:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013ac2:	e7dc      	b.n	8013a7e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8013ac4:	f8bd 5000 	ldrh.w	r5, [sp]
 8013ac8:	441d      	add	r5, r3
 8013aca:	b2ad      	uxth	r5, r5
 8013acc:	b22e      	sxth	r6, r5
 8013ace:	f9bd 3000 	ldrsh.w	r3, [sp]
 8013ad2:	42b3      	cmp	r3, r6
 8013ad4:	dac8      	bge.n	8013a68 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8013ad6:	6823      	ldr	r3, [r4, #0]
 8013ad8:	4669      	mov	r1, sp
 8013ada:	4620      	mov	r0, r4
 8013adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ade:	4798      	blx	r3
 8013ae0:	b940      	cbnz	r0, 8013af4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8013ae2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d004      	beq.n	8013af4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8013aea:	3301      	adds	r3, #1
 8013aec:	105b      	asrs	r3, r3, #1
 8013aee:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013af2:	e7f0      	b.n	8013ad6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 8013af4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8013af8:	f8bd 3000 	ldrh.w	r3, [sp]
 8013afc:	4413      	add	r3, r2
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	441a      	add	r2, r3
 8013b02:	f8ad 3000 	strh.w	r3, [sp]
 8013b06:	b212      	sxth	r2, r2
 8013b08:	4296      	cmp	r6, r2
 8013b0a:	dae0      	bge.n	8013ace <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8013b0c:	1aeb      	subs	r3, r5, r3
 8013b0e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013b12:	e7dc      	b.n	8013ace <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8013b14:	24010058 	.word	0x24010058

08013b18 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8013b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013b1a:	6803      	ldr	r3, [r0, #0]
 8013b1c:	4604      	mov	r4, r0
 8013b1e:	4601      	mov	r1, r0
 8013b20:	4668      	mov	r0, sp
 8013b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b24:	4798      	blx	r3
 8013b26:	2100      	movs	r1, #0
 8013b28:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8013b2c:	4668      	mov	r0, sp
 8013b2e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8013b32:	9102      	str	r1, [sp, #8]
 8013b34:	a902      	add	r1, sp, #8
 8013b36:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013b3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013b3e:	f7fe ff11 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	4669      	mov	r1, sp
 8013b46:	4620      	mov	r0, r4
 8013b48:	691b      	ldr	r3, [r3, #16]
 8013b4a:	4798      	blx	r3
 8013b4c:	b004      	add	sp, #16
 8013b4e:	bd10      	pop	{r4, pc}

08013b50 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8013b50:	2101      	movs	r1, #1
 8013b52:	2200      	movs	r2, #0
 8013b54:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8013b58:	490a      	ldr	r1, [pc, #40]	; (8013b84 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8013b5a:	8082      	strh	r2, [r0, #4]
 8013b5c:	6001      	str	r1, [r0, #0]
 8013b5e:	21ff      	movs	r1, #255	; 0xff
 8013b60:	80c2      	strh	r2, [r0, #6]
 8013b62:	8102      	strh	r2, [r0, #8]
 8013b64:	8142      	strh	r2, [r0, #10]
 8013b66:	8182      	strh	r2, [r0, #12]
 8013b68:	81c2      	strh	r2, [r0, #14]
 8013b6a:	8202      	strh	r2, [r0, #16]
 8013b6c:	8242      	strh	r2, [r0, #18]
 8013b6e:	61c2      	str	r2, [r0, #28]
 8013b70:	8402      	strh	r2, [r0, #32]
 8013b72:	8442      	strh	r2, [r0, #34]	; 0x22
 8013b74:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8013b78:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8013b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8013b7e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013b82:	4770      	bx	lr
 8013b84:	0802776c 	.word	0x0802776c

08013b88 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 8013b88:	6301      	str	r1, [r0, #48]	; 0x30
 8013b8a:	4770      	bx	lr

08013b8c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8013b8c:	6341      	str	r1, [r0, #52]	; 0x34
 8013b8e:	4770      	bx	lr

08013b90 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8013b90:	4770      	bx	lr

08013b92 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
 8013b92:	4608      	mov	r0, r1
 8013b94:	4770      	bx	lr

08013b96 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8013b96:	4608      	mov	r0, r1
 8013b98:	4770      	bx	lr

08013b9a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 8013b9a:	b530      	push	{r4, r5, lr}
 8013b9c:	460d      	mov	r5, r1
 8013b9e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013ba0:	8949      	ldrh	r1, [r1, #10]
 8013ba2:	b085      	sub	sp, #20
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	1ac9      	subs	r1, r1, r3
 8013ba8:	6803      	ldr	r3, [r0, #0]
 8013baa:	f10d 0206 	add.w	r2, sp, #6
 8013bae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013bb2:	b209      	sxth	r1, r1
 8013bb4:	4798      	blx	r3
 8013bb6:	b1a0      	cbz	r0, 8013be2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013bb8:	792b      	ldrb	r3, [r5, #4]
 8013bba:	b993      	cbnz	r3, 8013be2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013bbc:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8013bc0:	b178      	cbz	r0, 8013be2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013bc2:	6803      	ldr	r3, [r0, #0]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	4798      	blx	r3
 8013bc8:	b158      	cbz	r0, 8013be2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 8013bca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013bce:	aa02      	add	r2, sp, #8
 8013bd0:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8013bd4:	4621      	mov	r1, r4
 8013bd6:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013bda:	9503      	str	r5, [sp, #12]
 8013bdc:	6803      	ldr	r3, [r0, #0]
 8013bde:	689b      	ldr	r3, [r3, #8]
 8013be0:	4798      	blx	r3
 8013be2:	b005      	add	sp, #20
 8013be4:	bd30      	pop	{r4, r5, pc}

08013be6 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 8013be6:	b430      	push	{r4, r5}
 8013be8:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 8013bec:	b1cd      	cbz	r5, 8013c22 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 8013bee:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8013bf2:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8013bf6:	3d01      	subs	r5, #1
 8013bf8:	6823      	ldr	r3, [r4, #0]
 8013bfa:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8013bfe:	b139      	cbz	r1, 8013c10 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 8013c00:	4293      	cmp	r3, r2
 8013c02:	f1c2 0100 	rsb	r1, r2, #0
 8013c06:	bfa8      	it	ge
 8013c08:	4613      	movge	r3, r2
 8013c0a:	428c      	cmp	r4, r1
 8013c0c:	bfb8      	it	lt
 8013c0e:	460c      	movlt	r4, r1
 8013c10:	1a99      	subs	r1, r3, r2
 8013c12:	4422      	add	r2, r4
 8013c14:	4291      	cmp	r1, r2
 8013c16:	d004      	beq.n	8013c22 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 8013c18:	6803      	ldr	r3, [r0, #0]
 8013c1a:	bc30      	pop	{r4, r5}
 8013c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c20:	4718      	bx	r3
 8013c22:	bc30      	pop	{r4, r5}
 8013c24:	4770      	bx	lr

08013c26 <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 8013c26:	b410      	push	{r4}
 8013c28:	2300      	movs	r3, #0
 8013c2a:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	dd0e      	ble.n	8013c50 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 8013c32:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 8013c36:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8013c3a:	428c      	cmp	r4, r1
 8013c3c:	d106      	bne.n	8013c4c <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 8013c3e:	6802      	ldr	r2, [r0, #0]
 8013c40:	4619      	mov	r1, r3
 8013c42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c46:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 8013c4a:	4710      	bx	r2
 8013c4c:	3301      	adds	r3, #1
 8013c4e:	e7ee      	b.n	8013c2e <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295
 8013c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013c58:	4770      	bx	lr

08013c5a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 8013c5a:	428a      	cmp	r2, r1
 8013c5c:	bfbc      	itt	lt
 8013c5e:	460b      	movlt	r3, r1
 8013c60:	4611      	movlt	r1, r2
 8013c62:	b510      	push	{r4, lr}
 8013c64:	bfb8      	it	lt
 8013c66:	461a      	movlt	r2, r3
 8013c68:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	428b      	cmp	r3, r1
 8013c70:	d103      	bne.n	8013c7a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 8013c72:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 8013c76:	4293      	cmp	r3, r2
 8013c78:	d011      	beq.n	8013c9e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 8013c7a:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 8013c7e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8013c82:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 8013c86:	f005 ff88 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013c8a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013c8e:	f005 ff84 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013c92:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8013c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c9a:	f005 bf7e 	b.w	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013c9e:	bd10      	pop	{r4, pc}

08013ca0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 8013ca0:	428a      	cmp	r2, r1
 8013ca2:	bfbc      	itt	lt
 8013ca4:	460b      	movlt	r3, r1
 8013ca6:	4611      	movlt	r1, r2
 8013ca8:	b510      	push	{r4, lr}
 8013caa:	bfb8      	it	lt
 8013cac:	461a      	movlt	r2, r3
 8013cae:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	428b      	cmp	r3, r1
 8013cb6:	d103      	bne.n	8013cc0 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8013cb8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8013cbc:	4293      	cmp	r3, r2
 8013cbe:	d011      	beq.n	8013ce4 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 8013cc0:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 8013cc4:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8013cc8:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8013ccc:	f005 ff65 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013cd0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013cd4:	f005 ff61 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013cd8:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8013cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ce0:	f005 bf5b 	b.w	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8013ce4:	bd10      	pop	{r4, pc}

08013ce6 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	3038      	adds	r0, #56	; 0x38
 8013cea:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 8013cee:	f005 bf54 	b.w	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>

08013cf2 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 8013cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cf6:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8013cfa:	4605      	mov	r5, r0
 8013cfc:	4688      	mov	r8, r1
 8013cfe:	4617      	mov	r7, r2
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d03e      	beq.n	8013d82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8013d04:	6803      	ldr	r3, [r0, #0]
 8013d06:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8013d0a:	4798      	blx	r3
 8013d0c:	682b      	ldr	r3, [r5, #0]
 8013d0e:	4604      	mov	r4, r0
 8013d10:	4628      	mov	r0, r5
 8013d12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013d16:	4798      	blx	r3
 8013d18:	4284      	cmp	r4, r0
 8013d1a:	f9b5 611e 	ldrsh.w	r6, [r5, #286]	; 0x11e
 8013d1e:	bfc2      	ittt	gt
 8013d20:	4623      	movgt	r3, r4
 8013d22:	4604      	movgt	r4, r0
 8013d24:	4618      	movgt	r0, r3
 8013d26:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
 8013d2a:	42b3      	cmp	r3, r6
 8013d2c:	da29      	bge.n	8013d82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8013d2e:	42b0      	cmp	r0, r6
 8013d30:	bfa8      	it	ge
 8013d32:	4630      	movge	r0, r6
 8013d34:	2800      	cmp	r0, #0
 8013d36:	db24      	blt.n	8013d82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8013d38:	f1b8 0f00 	cmp.w	r8, #0
 8013d3c:	d11e      	bne.n	8013d7c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8a>
 8013d3e:	f8d5 2144 	ldr.w	r2, [r5, #324]	; 0x144
 8013d42:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013d46:	460c      	mov	r4, r1
 8013d48:	009a      	lsls	r2, r3, #2
 8013d4a:	4298      	cmp	r0, r3
 8013d4c:	dd0b      	ble.n	8013d66 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x74>
 8013d4e:	f8d5 6144 	ldr.w	r6, [r5, #324]	; 0x144
 8013d52:	3301      	adds	r3, #1
 8013d54:	58b6      	ldr	r6, [r6, r2]
 8013d56:	3204      	adds	r2, #4
 8013d58:	42b1      	cmp	r1, r6
 8013d5a:	bfa8      	it	ge
 8013d5c:	4631      	movge	r1, r6
 8013d5e:	42b4      	cmp	r4, r6
 8013d60:	bfb8      	it	lt
 8013d62:	4634      	movlt	r4, r6
 8013d64:	e7f1      	b.n	8013d4a <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x58>
 8013d66:	1bc9      	subs	r1, r1, r7
 8013d68:	193a      	adds	r2, r7, r4
 8013d6a:	4291      	cmp	r1, r2
 8013d6c:	d009      	beq.n	8013d82 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x90>
 8013d6e:	682b      	ldr	r3, [r5, #0]
 8013d70:	4628      	mov	r0, r5
 8013d72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d7a:	4718      	bx	r3
 8013d7c:	427c      	negs	r4, r7
 8013d7e:	4639      	mov	r1, r7
 8013d80:	e7e2      	b.n	8013d48 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 8013d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d86 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 8013d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d8a:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8013d8e:	4604      	mov	r4, r0
 8013d90:	4688      	mov	r8, r1
 8013d92:	4616      	mov	r6, r2
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d04c      	beq.n	8013e32 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 8013d98:	6803      	ldr	r3, [r0, #0]
 8013d9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8013d9e:	4798      	blx	r3
 8013da0:	6823      	ldr	r3, [r4, #0]
 8013da2:	4605      	mov	r5, r0
 8013da4:	4620      	mov	r0, r4
 8013da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013daa:	4798      	blx	r3
 8013dac:	4285      	cmp	r5, r0
 8013dae:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 8013db2:	bfc2      	ittt	gt
 8013db4:	b22b      	sxthgt	r3, r5
 8013db6:	4605      	movgt	r5, r0
 8013db8:	4618      	movgt	r0, r3
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8013dc0:	0099      	lsls	r1, r3, #2
 8013dc2:	42aa      	cmp	r2, r5
 8013dc4:	da05      	bge.n	8013dd2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 8013dc6:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 8013dca:	42bb      	cmp	r3, r7
 8013dcc:	da01      	bge.n	8013dd2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 8013dce:	3301      	adds	r3, #1
 8013dd0:	e7f4      	b.n	8013dbc <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 8013dd2:	4282      	cmp	r2, r0
 8013dd4:	dc2d      	bgt.n	8013e32 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 8013dd6:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 8013dda:	3301      	adds	r3, #1
 8013ddc:	f85c 5001 	ldr.w	r5, [ip, r1]
 8013de0:	462a      	mov	r2, r5
 8013de2:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 8013de6:	4288      	cmp	r0, r1
 8013de8:	dd0d      	ble.n	8013e06 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 8013dea:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 8013dee:	428b      	cmp	r3, r1
 8013df0:	da09      	bge.n	8013e06 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 8013df2:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 8013df6:	3301      	adds	r3, #1
 8013df8:	42bd      	cmp	r5, r7
 8013dfa:	bfa8      	it	ge
 8013dfc:	463d      	movge	r5, r7
 8013dfe:	42ba      	cmp	r2, r7
 8013e00:	bfb8      	it	lt
 8013e02:	463a      	movlt	r2, r7
 8013e04:	e7ed      	b.n	8013de2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 8013e06:	f1b8 0f00 	cmp.w	r8, #0
 8013e0a:	d007      	beq.n	8013e1c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 8013e0c:	42b5      	cmp	r5, r6
 8013e0e:	f1c6 0300 	rsb	r3, r6, #0
 8013e12:	bfa8      	it	ge
 8013e14:	4635      	movge	r5, r6
 8013e16:	429a      	cmp	r2, r3
 8013e18:	bfb8      	it	lt
 8013e1a:	461a      	movlt	r2, r3
 8013e1c:	1ba9      	subs	r1, r5, r6
 8013e1e:	4432      	add	r2, r6
 8013e20:	4291      	cmp	r1, r2
 8013e22:	d006      	beq.n	8013e32 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 8013e24:	6823      	ldr	r3, [r4, #0]
 8013e26:	4620      	mov	r0, r4
 8013e28:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8013e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e30:	4718      	bx	r3
 8013e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e36 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8013e36:	b530      	push	{r4, r5, lr}
 8013e38:	790b      	ldrb	r3, [r1, #4]
 8013e3a:	b085      	sub	sp, #20
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	460d      	mov	r5, r1
 8013e40:	2b02      	cmp	r3, #2
 8013e42:	d020      	beq.n	8013e86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013e44:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8013e46:	f10d 0206 	add.w	r2, sp, #6
 8013e4a:	88c9      	ldrh	r1, [r1, #6]
 8013e4c:	1ac9      	subs	r1, r1, r3
 8013e4e:	6803      	ldr	r3, [r0, #0]
 8013e50:	b209      	sxth	r1, r1
 8013e52:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013e56:	4798      	blx	r3
 8013e58:	b1a8      	cbz	r0, 8013e86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013e5a:	792b      	ldrb	r3, [r5, #4]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d812      	bhi.n	8013e86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013e60:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8013e64:	b178      	cbz	r0, 8013e86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013e66:	6803      	ldr	r3, [r0, #0]
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	4798      	blx	r3
 8013e6c:	b158      	cbz	r0, 8013e86 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8013e6e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8013e72:	aa02      	add	r2, sp, #8
 8013e74:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 8013e78:	4621      	mov	r1, r4
 8013e7a:	f8ad 3008 	strh.w	r3, [sp, #8]
 8013e7e:	9503      	str	r5, [sp, #12]
 8013e80:	6803      	ldr	r3, [r0, #0]
 8013e82:	689b      	ldr	r3, [r3, #8]
 8013e84:	4798      	blx	r3
 8013e86:	b005      	add	sp, #20
 8013e88:	bd30      	pop	{r4, r5, pc}

08013e8a <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8013e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e8e:	4604      	mov	r4, r0
 8013e90:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8013e94:	4690      	mov	r8, r2
 8013e96:	461e      	mov	r6, r3
 8013e98:	9f06      	ldr	r7, [sp, #24]
 8013e9a:	b928      	cbnz	r0, 8013ea8 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8013e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ea0:	803b      	strh	r3, [r7, #0]
 8013ea2:	8033      	strh	r3, [r6, #0]
 8013ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ea8:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8013eac:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8013eb0:	1883      	adds	r3, r0, r2
 8013eb2:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8013eb6:	1ad2      	subs	r2, r2, r3
 8013eb8:	b212      	sxth	r2, r2
 8013eba:	2a01      	cmp	r2, #1
 8013ebc:	dc07      	bgt.n	8013ece <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	8033      	strh	r3, [r6, #0]
 8013ec2:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8013ec6:	3b01      	subs	r3, #1
 8013ec8:	803b      	strh	r3, [r7, #0]
 8013eca:	2001      	movs	r0, #1
 8013ecc:	e7ea      	b.n	8013ea4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8013ece:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 8013ed2:	1a08      	subs	r0, r1, r0
 8013ed4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8013ed8:	3a01      	subs	r2, #1
 8013eda:	0140      	lsls	r0, r0, #5
 8013edc:	1ae9      	subs	r1, r5, r3
 8013ede:	f006 f823 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 8013ee2:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8013ee6:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8013eea:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8013eee:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8013ef2:	1883      	adds	r3, r0, r2
 8013ef4:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8013ef8:	eba8 0000 	sub.w	r0, r8, r0
 8013efc:	1ad2      	subs	r2, r2, r3
 8013efe:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8013f02:	0140      	lsls	r0, r0, #5
 8013f04:	b212      	sxth	r2, r2
 8013f06:	1a59      	subs	r1, r3, r1
 8013f08:	3a01      	subs	r2, #1
 8013f0a:	f006 f80d 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 8013f0e:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8013f12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8013f16:	4285      	cmp	r5, r0
 8013f18:	bfde      	ittt	le
 8013f1a:	4603      	movle	r3, r0
 8013f1c:	4628      	movle	r0, r5
 8013f1e:	461d      	movle	r5, r3
 8013f20:	2320      	movs	r3, #32
 8013f22:	2d00      	cmp	r5, #0
 8013f24:	bfa8      	it	ge
 8013f26:	351f      	addge	r5, #31
 8013f28:	fb90 f0f3 	sdiv	r0, r0, r3
 8013f2c:	bfb4      	ite	lt
 8013f2e:	fb95 f5f3 	sdivlt	r5, r5, r3
 8013f32:	116d      	asrge	r5, r5, #5
 8013f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f38:	8033      	strh	r3, [r6, #0]
 8013f3a:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 8013f3e:	f9b6 3000 	ldrsh.w	r3, [r6]
 8013f42:	1e51      	subs	r1, r2, #1
 8013f44:	428b      	cmp	r3, r1
 8013f46:	da06      	bge.n	8013f56 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 8013f48:	3301      	adds	r3, #1
 8013f4a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8013f4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013f52:	4288      	cmp	r0, r1
 8013f54:	daf0      	bge.n	8013f38 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 8013f56:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013f5a:	803a      	strh	r2, [r7, #0]
 8013f5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	dd23      	ble.n	8013fac <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 8013f64:	181a      	adds	r2, r3, r0
 8013f66:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8013f6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8013f6e:	42aa      	cmp	r2, r5
 8013f70:	db10      	blt.n	8013f94 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 8013f72:	3b01      	subs	r3, #1
 8013f74:	803b      	strh	r3, [r7, #0]
 8013f76:	e7f1      	b.n	8013f5c <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 8013f78:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8013f7c:	8032      	strh	r2, [r6, #0]
 8013f7e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013f82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8013f86:	4293      	cmp	r3, r2
 8013f88:	bfdc      	itt	le
 8013f8a:	f103 33ff 	addle.w	r3, r3, #4294967295
 8013f8e:	b21a      	sxthle	r2, r3
 8013f90:	803a      	strh	r2, [r7, #0]
 8013f92:	e79a      	b.n	8013eca <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 8013f94:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8013f98:	f9b6 2000 	ldrsh.w	r2, [r6]
 8013f9c:	3b01      	subs	r3, #1
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	dbea      	blt.n	8013f78 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 8013fa2:	b21b      	sxth	r3, r3
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	803b      	strh	r3, [r7, #0]
 8013fa8:	8033      	strh	r3, [r6, #0]
 8013faa:	e77b      	b.n	8013ea4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8013fac:	2000      	movs	r0, #0
 8013fae:	8038      	strh	r0, [r7, #0]
 8013fb0:	8030      	strh	r0, [r6, #0]
 8013fb2:	e777      	b.n	8013ea4 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>

08013fb4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8013fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb8:	4604      	mov	r4, r0
 8013fba:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8013fbe:	4690      	mov	r8, r2
 8013fc0:	461f      	mov	r7, r3
 8013fc2:	9e06      	ldr	r6, [sp, #24]
 8013fc4:	b928      	cbnz	r0, 8013fd2 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8013fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fca:	8033      	strh	r3, [r6, #0]
 8013fcc:	803b      	strh	r3, [r7, #0]
 8013fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd2:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8013fd6:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 8013fda:	1883      	adds	r3, r0, r2
 8013fdc:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8013fe0:	1ad2      	subs	r2, r2, r3
 8013fe2:	b212      	sxth	r2, r2
 8013fe4:	2a01      	cmp	r2, #1
 8013fe6:	dc07      	bgt.n	8013ff8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	803b      	strh	r3, [r7, #0]
 8013fec:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8013ff0:	3b01      	subs	r3, #1
 8013ff2:	8033      	strh	r3, [r6, #0]
 8013ff4:	2001      	movs	r0, #1
 8013ff6:	e7ea      	b.n	8013fce <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8013ff8:	1a08      	subs	r0, r1, r0
 8013ffa:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8013ffe:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8014002:	0140      	lsls	r0, r0, #5
 8014004:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8014006:	1a5b      	subs	r3, r3, r1
 8014008:	d459      	bmi.n	80140be <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 801400a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801400e:	fb93 f1f5 	sdiv	r1, r3, r5
 8014012:	2302      	movs	r3, #2
 8014014:	fb91 f1f3 	sdiv	r1, r1, r3
 8014018:	3a01      	subs	r2, #1
 801401a:	f005 ff85 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 801401e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 8014022:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
 8014026:	2900      	cmp	r1, #0
 8014028:	db55      	blt.n	80140d6 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 801402a:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 801402e:	2502      	movs	r5, #2
 8014030:	fb93 f3fc 	sdiv	r3, r3, ip
 8014034:	fb93 f3f5 	sdiv	r3, r3, r5
 8014038:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 801403c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
 8014040:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
 8014044:	1a52      	subs	r2, r2, r1
 8014046:	eba8 0003 	sub.w	r0, r8, r3
 801404a:	ea4f 1040 	mov.w	r0, r0, lsl #5
 801404e:	d44e      	bmi.n	80140ee <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13a>
 8014050:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8014054:	fb92 f1fc 	sdiv	r1, r2, ip
 8014058:	2202      	movs	r2, #2
 801405a:	fb91 f1f2 	sdiv	r1, r1, r2
 801405e:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 8014062:	4413      	add	r3, r2
 8014064:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8014068:	1ad2      	subs	r2, r2, r3
 801406a:	b212      	sxth	r2, r2
 801406c:	3a01      	subs	r2, #1
 801406e:	f005 ff5b 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 8014072:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8014076:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8014078:	2b00      	cmp	r3, #0
 801407a:	db44      	blt.n	8014106 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x152>
 801407c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014080:	fb93 f3f2 	sdiv	r3, r3, r2
 8014084:	2202      	movs	r2, #2
 8014086:	fb93 f3f2 	sdiv	r3, r3, r2
 801408a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 801408e:	2020      	movs	r0, #32
 8014090:	429d      	cmp	r5, r3
 8014092:	bfde      	ittt	le
 8014094:	461a      	movle	r2, r3
 8014096:	462b      	movle	r3, r5
 8014098:	4615      	movle	r5, r2
 801409a:	b21b      	sxth	r3, r3
 801409c:	2d00      	cmp	r5, #0
 801409e:	bfaa      	itet	ge
 80140a0:	351f      	addge	r5, #31
 80140a2:	fb95 f5f0 	sdivlt	r5, r5, r0
 80140a6:	116d      	asrge	r5, r5, #5
 80140a8:	fb93 f3f0 	sdiv	r3, r3, r0
 80140ac:	b22d      	sxth	r5, r5
 80140ae:	803b      	strh	r3, [r7, #0]
 80140b0:	2d00      	cmp	r5, #0
 80140b2:	8035      	strh	r5, [r6, #0]
 80140b4:	da33      	bge.n	801411e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16a>
 80140b6:	2000      	movs	r0, #0
 80140b8:	8030      	strh	r0, [r6, #0]
 80140ba:	8038      	strh	r0, [r7, #0]
 80140bc:	e787      	b.n	8013fce <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 80140be:	f06f 0101 	mvn.w	r1, #1
 80140c2:	fb01 5303 	mla	r3, r1, r3, r5
 80140c6:	1e59      	subs	r1, r3, #1
 80140c8:	2302      	movs	r3, #2
 80140ca:	fb91 f1f5 	sdiv	r1, r1, r5
 80140ce:	fb91 f1f3 	sdiv	r1, r1, r3
 80140d2:	4249      	negs	r1, r1
 80140d4:	e7a0      	b.n	8014018 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 80140d6:	f06f 0301 	mvn.w	r3, #1
 80140da:	2502      	movs	r5, #2
 80140dc:	fb03 c301 	mla	r3, r3, r1, ip
 80140e0:	3b01      	subs	r3, #1
 80140e2:	fb93 f3fc 	sdiv	r3, r3, ip
 80140e6:	fb93 f3f5 	sdiv	r3, r3, r5
 80140ea:	425b      	negs	r3, r3
 80140ec:	e7a4      	b.n	8014038 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 80140ee:	f06f 0101 	mvn.w	r1, #1
 80140f2:	fb01 c202 	mla	r2, r1, r2, ip
 80140f6:	1e51      	subs	r1, r2, #1
 80140f8:	2202      	movs	r2, #2
 80140fa:	fb91 f1fc 	sdiv	r1, r1, ip
 80140fe:	fb91 f1f2 	sdiv	r1, r1, r2
 8014102:	4249      	negs	r1, r1
 8014104:	e7ab      	b.n	801405e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8014106:	f06f 0101 	mvn.w	r1, #1
 801410a:	fb01 2303 	mla	r3, r1, r3, r2
 801410e:	3b01      	subs	r3, #1
 8014110:	fb93 f3f2 	sdiv	r3, r3, r2
 8014114:	2202      	movs	r2, #2
 8014116:	fb93 f3f2 	sdiv	r3, r3, r2
 801411a:	425b      	negs	r3, r3
 801411c:	e7b5      	b.n	801408a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 801411e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014122:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014126:	4293      	cmp	r3, r2
 8014128:	dc05      	bgt.n	8014136 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x182>
 801412a:	3b01      	subs	r3, #1
 801412c:	2000      	movs	r0, #0
 801412e:	b21b      	sxth	r3, r3
 8014130:	8033      	strh	r3, [r6, #0]
 8014132:	803b      	strh	r3, [r7, #0]
 8014134:	e74b      	b.n	8013fce <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8014136:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801413a:	803a      	strh	r2, [r7, #0]
 801413c:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014140:	f9b6 2000 	ldrsh.w	r2, [r6]
 8014144:	4293      	cmp	r3, r2
 8014146:	bfdc      	itt	le
 8014148:	f103 33ff 	addle.w	r3, r3, #4294967295
 801414c:	b21a      	sxthle	r2, r3
 801414e:	8032      	strh	r2, [r6, #0]
 8014150:	e750      	b.n	8013ff4 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
	...

08014154 <_ZN8touchgfx9ContainerC1Ev>:
 8014154:	2101      	movs	r1, #1
 8014156:	2200      	movs	r2, #0
 8014158:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801415c:	4909      	ldr	r1, [pc, #36]	; (8014184 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 801415e:	8082      	strh	r2, [r0, #4]
 8014160:	80c2      	strh	r2, [r0, #6]
 8014162:	8102      	strh	r2, [r0, #8]
 8014164:	8142      	strh	r2, [r0, #10]
 8014166:	8182      	strh	r2, [r0, #12]
 8014168:	81c2      	strh	r2, [r0, #14]
 801416a:	8202      	strh	r2, [r0, #16]
 801416c:	8242      	strh	r2, [r0, #18]
 801416e:	61c2      	str	r2, [r0, #28]
 8014170:	8402      	strh	r2, [r0, #32]
 8014172:	8442      	strh	r2, [r0, #34]	; 0x22
 8014174:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8014178:	6001      	str	r1, [r0, #0]
 801417a:	6282      	str	r2, [r0, #40]	; 0x28
 801417c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	08027674 	.word	0x08027674

08014188 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8014188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801418c:	4605      	mov	r5, r0
 801418e:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8014192:	4688      	mov	r8, r1
 8014194:	4691      	mov	r9, r2
 8014196:	469a      	mov	sl, r3
 8014198:	b360      	cbz	r0, 80141f4 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 801419a:	2700      	movs	r7, #0
 801419c:	f04f 3bff 	mov.w	fp, #4294967295
 80141a0:	b23e      	sxth	r6, r7
 80141a2:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 80141a6:	42b3      	cmp	r3, r6
 80141a8:	dd23      	ble.n	80141f2 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 80141aa:	682b      	ldr	r3, [r5, #0]
 80141ac:	4631      	mov	r1, r6
 80141ae:	4628      	mov	r0, r5
 80141b0:	3701      	adds	r7, #1
 80141b2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80141b6:	4798      	blx	r3
 80141b8:	9001      	str	r0, [sp, #4]
 80141ba:	a801      	add	r0, sp, #4
 80141bc:	f7f6 f8cd 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80141c0:	682b      	ldr	r3, [r5, #0]
 80141c2:	eba0 0008 	sub.w	r0, r0, r8
 80141c6:	4631      	mov	r1, r6
 80141c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80141cc:	b204      	sxth	r4, r0
 80141ce:	4628      	mov	r0, r5
 80141d0:	4798      	blx	r3
 80141d2:	9001      	str	r0, [sp, #4]
 80141d4:	a801      	add	r0, sp, #4
 80141d6:	f7f6 f8c0 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80141da:	eba0 0009 	sub.w	r0, r0, r9
 80141de:	fb10 f000 	smulbb	r0, r0, r0
 80141e2:	fb04 0404 	mla	r4, r4, r4, r0
 80141e6:	455c      	cmp	r4, fp
 80141e8:	bf3c      	itt	cc
 80141ea:	f8aa 6000 	strhcc.w	r6, [sl]
 80141ee:	46a3      	movcc	fp, r4
 80141f0:	e7d6      	b.n	80141a0 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 80141f2:	2001      	movs	r0, #1
 80141f4:	b003      	add	sp, #12
 80141f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141fa <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 80141fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80141fe:	4604      	mov	r4, r0
 8014200:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 8014204:	4688      	mov	r8, r1
 8014206:	4691      	mov	r9, r2
 8014208:	b1f8      	cbz	r0, 801424a <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 801420a:	2500      	movs	r5, #0
 801420c:	f04f 37ff 	mov.w	r7, #4294967295
 8014210:	b22e      	sxth	r6, r5
 8014212:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014216:	42b3      	cmp	r3, r6
 8014218:	dd16      	ble.n	8014248 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 801421a:	6823      	ldr	r3, [r4, #0]
 801421c:	4631      	mov	r1, r6
 801421e:	4620      	mov	r0, r4
 8014220:	3501      	adds	r5, #1
 8014222:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014226:	4798      	blx	r3
 8014228:	9001      	str	r0, [sp, #4]
 801422a:	a801      	add	r0, sp, #4
 801422c:	f7f6 f895 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014230:	b200      	sxth	r0, r0
 8014232:	eba0 0008 	sub.w	r0, r0, r8
 8014236:	2800      	cmp	r0, #0
 8014238:	bfb8      	it	lt
 801423a:	4240      	neglt	r0, r0
 801423c:	42b8      	cmp	r0, r7
 801423e:	bf3c      	itt	cc
 8014240:	f8a9 6000 	strhcc.w	r6, [r9]
 8014244:	4607      	movcc	r7, r0
 8014246:	e7e3      	b.n	8014210 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 8014248:	2001      	movs	r0, #1
 801424a:	b003      	add	sp, #12
 801424c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014250 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8014250:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 8014254:	f9bd 3000 	ldrsh.w	r3, [sp]
 8014258:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 801425c:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 8014260:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 8014264:	4770      	bx	lr

08014266 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8014266:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014268:	4604      	mov	r4, r0
 801426a:	3038      	adds	r0, #56	; 0x38
 801426c:	460d      	mov	r5, r1
 801426e:	f7fe f9f5 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014272:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 8014276:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801427a:	4628      	mov	r0, r5
 801427c:	9200      	str	r2, [sp, #0]
 801427e:	2200      	movs	r2, #0
 8014280:	4611      	mov	r1, r2
 8014282:	f7ef f933 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8014286:	b003      	add	sp, #12
 8014288:	bd30      	pop	{r4, r5, pc}

0801428a <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 801428a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801428c:	4604      	mov	r4, r0
 801428e:	3064      	adds	r0, #100	; 0x64
 8014290:	460d      	mov	r5, r1
 8014292:	f7fe f9e3 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014296:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 801429a:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 801429e:	4628      	mov	r0, r5
 80142a0:	9200      	str	r2, [sp, #0]
 80142a2:	2200      	movs	r2, #0
 80142a4:	4611      	mov	r1, r2
 80142a6:	f7ef f921 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80142aa:	b003      	add	sp, #12
 80142ac:	bd30      	pop	{r4, r5, pc}

080142ae <_ZN8touchgfx17AbstractDataGraph16addBottomElementERNS_23AbstractGraphDecorationE>:
 80142ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142b0:	4604      	mov	r4, r0
 80142b2:	30e8      	adds	r0, #232	; 0xe8
 80142b4:	460d      	mov	r5, r1
 80142b6:	f7fe f9d1 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80142ba:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 80142be:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 80142c2:	4628      	mov	r0, r5
 80142c4:	9200      	str	r2, [sp, #0]
 80142c6:	2200      	movs	r2, #0
 80142c8:	4611      	mov	r1, r2
 80142ca:	f7ef f90f 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80142ce:	b003      	add	sp, #12
 80142d0:	bd30      	pop	{r4, r5, pc}

080142d2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 80142d2:	b538      	push	{r3, r4, r5, lr}
 80142d4:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 80142d8:	460d      	mov	r5, r1
 80142da:	428b      	cmp	r3, r1
 80142dc:	dd08      	ble.n	80142f0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80142de:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80142e0:	b134      	cbz	r4, 80142f0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 80142e2:	6823      	ldr	r3, [r4, #0]
 80142e4:	4620      	mov	r0, r4
 80142e6:	4629      	mov	r1, r5
 80142e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142ea:	4798      	blx	r3
 80142ec:	69a4      	ldr	r4, [r4, #24]
 80142ee:	e7f7      	b.n	80142e0 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 80142f0:	bd38      	pop	{r3, r4, r5, pc}

080142f2 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 80142f2:	b570      	push	{r4, r5, r6, lr}
 80142f4:	b20e      	sxth	r6, r1
 80142f6:	4605      	mov	r5, r0
 80142f8:	460c      	mov	r4, r1
 80142fa:	4631      	mov	r1, r6
 80142fc:	f7ff ffe9 	bl	80142d2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8014300:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 8014304:	3b01      	subs	r3, #1
 8014306:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 801430a:	00a3      	lsls	r3, r4, #2
 801430c:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 8014310:	1d1a      	adds	r2, r3, #4
 8014312:	42a1      	cmp	r1, r4
 8014314:	dd0a      	ble.n	801432c <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x3a>
 8014316:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 801431a:	3401      	adds	r4, #1
 801431c:	5888      	ldr	r0, [r1, r2]
 801431e:	50c8      	str	r0, [r1, r3]
 8014320:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 8014324:	5888      	ldr	r0, [r1, r2]
 8014326:	50c8      	str	r0, [r1, r3]
 8014328:	4613      	mov	r3, r2
 801432a:	e7ef      	b.n	801430c <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1a>
 801432c:	4630      	mov	r0, r6
 801432e:	bd70      	pop	{r4, r5, r6, pc}

08014330 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8014330:	b570      	push	{r4, r5, r6, lr}
 8014332:	4606      	mov	r6, r0
 8014334:	460d      	mov	r5, r1
 8014336:	f8d0 40e4 	ldr.w	r4, [r0, #228]	; 0xe4
 801433a:	b134      	cbz	r4, 801434a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 801433c:	6823      	ldr	r3, [r4, #0]
 801433e:	4620      	mov	r0, r4
 8014340:	4629      	mov	r1, r5
 8014342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014344:	4798      	blx	r3
 8014346:	69a4      	ldr	r4, [r4, #24]
 8014348:	e7f7      	b.n	801433a <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 801434a:	f8d6 4110 	ldr.w	r4, [r6, #272]	; 0x110
 801434e:	b134      	cbz	r4, 801435e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8014350:	6823      	ldr	r3, [r4, #0]
 8014352:	4620      	mov	r0, r4
 8014354:	4629      	mov	r1, r5
 8014356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014358:	4798      	blx	r3
 801435a:	69a4      	ldr	r4, [r4, #24]
 801435c:	e7f7      	b.n	801434e <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 801435e:	bd70      	pop	{r4, r5, r6, pc}

08014360 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>:
 8014360:	b538      	push	{r3, r4, r5, lr}
 8014362:	4604      	mov	r4, r0
 8014364:	2500      	movs	r5, #0
 8014366:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801436a:	42ab      	cmp	r3, r5
 801436c:	db05      	blt.n	801437a <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x1a>
 801436e:	b229      	sxth	r1, r5
 8014370:	4620      	mov	r0, r4
 8014372:	f7ff ffdd 	bl	8014330 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8014376:	3501      	adds	r5, #1
 8014378:	e7f5      	b.n	8014366 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv+0x6>
 801437a:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 801437e:	f005 fc0c 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8014382:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8014386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801438a:	f005 bc06 	b.w	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>

0801438e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 801438e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014390:	4604      	mov	r4, r0
 8014392:	6e05      	ldr	r5, [r0, #96]	; 0x60
 8014394:	b15d      	cbz	r5, 80143ae <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8014396:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 801439a:	4628      	mov	r0, r5
 801439c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80143a0:	9200      	str	r2, [sp, #0]
 80143a2:	2200      	movs	r2, #0
 80143a4:	4611      	mov	r1, r2
 80143a6:	f7ef f8a1 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80143aa:	69ad      	ldr	r5, [r5, #24]
 80143ac:	e7f2      	b.n	8014394 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 80143ae:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 80143b2:	b15d      	cbz	r5, 80143cc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 80143b4:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 80143b8:	4628      	mov	r0, r5
 80143ba:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 80143be:	9200      	str	r2, [sp, #0]
 80143c0:	2200      	movs	r2, #0
 80143c2:	4611      	mov	r1, r2
 80143c4:	f7ef f892 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80143c8:	69ad      	ldr	r5, [r5, #24]
 80143ca:	e7f2      	b.n	80143b2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 80143cc:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 80143d0:	b15d      	cbz	r5, 80143ea <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 80143d2:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 80143d6:	4628      	mov	r0, r5
 80143d8:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 80143dc:	9200      	str	r2, [sp, #0]
 80143de:	2200      	movs	r2, #0
 80143e0:	4611      	mov	r1, r2
 80143e2:	f7ef f883 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80143e6:	69ad      	ldr	r5, [r5, #24]
 80143e8:	e7f2      	b.n	80143d0 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 80143ea:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80143ee:	b15d      	cbz	r5, 8014408 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 80143f0:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 80143f4:	4628      	mov	r0, r5
 80143f6:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 80143fa:	9200      	str	r2, [sp, #0]
 80143fc:	2200      	movs	r2, #0
 80143fe:	4611      	mov	r1, r2
 8014400:	f7ef f874 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8014404:	69ad      	ldr	r5, [r5, #24]
 8014406:	e7f2      	b.n	80143ee <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8014408:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 801440c:	b15d      	cbz	r5, 8014426 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 801440e:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 8014412:	4628      	mov	r0, r5
 8014414:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 8014418:	9200      	str	r2, [sp, #0]
 801441a:	2200      	movs	r2, #0
 801441c:	4611      	mov	r1, r2
 801441e:	f7ef f865 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8014422:	69ad      	ldr	r5, [r5, #24]
 8014424:	e7f2      	b.n	801440c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	4620      	mov	r0, r4
 801442a:	695b      	ldr	r3, [r3, #20]
 801442c:	b003      	add	sp, #12
 801442e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014432:	4718      	bx	r3

08014434 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8014434:	b430      	push	{r4, r5}
 8014436:	b28a      	uxth	r2, r1
 8014438:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 801443c:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8014440:	1b15      	subs	r5, r2, r4
 8014442:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 8014446:	8101      	strh	r1, [r0, #8]
 8014448:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 801444c:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 8014450:	442c      	add	r4, r5
 8014452:	1b12      	subs	r2, r2, r4
 8014454:	bc30      	pop	{r4, r5}
 8014456:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801445a:	f7ff bf98 	b.w	801438e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0801445e <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 801445e:	b430      	push	{r4, r5}
 8014460:	b28a      	uxth	r2, r1
 8014462:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 8014466:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 801446a:	1b15      	subs	r5, r2, r4
 801446c:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 8014470:	8141      	strh	r1, [r0, #10]
 8014472:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 8014476:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 801447a:	442c      	add	r4, r5
 801447c:	1b12      	subs	r2, r2, r4
 801447e:	bc30      	pop	{r4, r5}
 8014480:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 8014484:	f7ff bf83 	b.w	801438e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08014488 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8014488:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801448c:	fa1f fa83 	uxth.w	sl, r3
 8014490:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 8014494:	4615      	mov	r5, r2
 8014496:	4699      	mov	r9, r3
 8014498:	fa1f f887 	uxth.w	r8, r7
 801449c:	8903      	ldrh	r3, [r0, #8]
 801449e:	4452      	add	r2, sl
 80144a0:	4604      	mov	r4, r0
 80144a2:	8940      	ldrh	r0, [r0, #10]
 80144a4:	460e      	mov	r6, r1
 80144a6:	1a9b      	subs	r3, r3, r2
 80144a8:	eb08 0201 	add.w	r2, r8, r1
 80144ac:	1a80      	subs	r0, r0, r2
 80144ae:	b21b      	sxth	r3, r3
 80144b0:	460a      	mov	r2, r1
 80144b2:	4629      	mov	r1, r5
 80144b4:	b200      	sxth	r0, r0
 80144b6:	9000      	str	r0, [sp, #0]
 80144b8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80144bc:	f7ef f816 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80144c0:	2200      	movs	r2, #0
 80144c2:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80144c6:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80144ca:	4611      	mov	r1, r2
 80144cc:	9600      	str	r6, [sp, #0]
 80144ce:	f7ef f80d 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80144d2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80144d6:	2200      	movs	r2, #0
 80144d8:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	462b      	mov	r3, r5
 80144e0:	4611      	mov	r1, r2
 80144e2:	f7ef f803 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 80144e6:	8921      	ldrh	r1, [r4, #8]
 80144e8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80144ec:	f104 0090 	add.w	r0, r4, #144	; 0x90
 80144f0:	eba1 010a 	sub.w	r1, r1, sl
 80144f4:	2200      	movs	r2, #0
 80144f6:	9300      	str	r3, [sp, #0]
 80144f8:	464b      	mov	r3, r9
 80144fa:	b209      	sxth	r1, r1
 80144fc:	f7ee fff6 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8014500:	8962      	ldrh	r2, [r4, #10]
 8014502:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8014506:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801450a:	eba2 0208 	sub.w	r2, r2, r8
 801450e:	9700      	str	r7, [sp, #0]
 8014510:	2100      	movs	r1, #0
 8014512:	b212      	sxth	r2, r2
 8014514:	f7ee ffea 	bl	80034ec <_ZN8touchgfx8Drawable11setPositionEssss>
 8014518:	4620      	mov	r0, r4
 801451a:	b002      	add	sp, #8
 801451c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014520:	f7ff bf35 	b.w	801438e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08014524 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8014524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014528:	b085      	sub	sp, #20
 801452a:	4604      	mov	r4, r0
 801452c:	2601      	movs	r6, #1
 801452e:	2500      	movs	r5, #0
 8014530:	9103      	str	r1, [sp, #12]
 8014532:	f7ff fe0f 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 8014536:	4b2c      	ldr	r3, [pc, #176]	; (80145e8 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8014538:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 801453c:	f104 0964 	add.w	r9, r4, #100	; 0x64
 8014540:	f104 0890 	add.w	r8, r4, #144	; 0x90
 8014544:	6023      	str	r3, [r4, #0]
 8014546:	23ff      	movs	r3, #255	; 0xff
 8014548:	4658      	mov	r0, fp
 801454a:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 801454e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014552:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 8014556:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801455a:	f7ff fdfb 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 801455e:	4648      	mov	r0, r9
 8014560:	f7ff fdf8 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 8014564:	4640      	mov	r0, r8
 8014566:	f7ff fdf5 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 801456a:	4650      	mov	r0, sl
 801456c:	f7ff fdf2 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 8014570:	4638      	mov	r0, r7
 8014572:	f7ff fdef 	bl	8014154 <_ZN8touchgfx9ContainerC1Ev>
 8014576:	9903      	ldr	r1, [sp, #12]
 8014578:	4620      	mov	r0, r4
 801457a:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 801457e:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 8014582:	4659      	mov	r1, fp
 8014584:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8014588:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 801458c:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 8014590:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 8014594:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 8014598:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801459c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80145a0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80145a4:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 80145a8:	f7fe f858 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80145ac:	4651      	mov	r1, sl
 80145ae:	4620      	mov	r0, r4
 80145b0:	f7fe f854 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80145b4:	4649      	mov	r1, r9
 80145b6:	4620      	mov	r0, r4
 80145b8:	f7fe f850 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80145bc:	4641      	mov	r1, r8
 80145be:	4620      	mov	r0, r4
 80145c0:	f7fe f84c 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80145c4:	4639      	mov	r1, r7
 80145c6:	4620      	mov	r0, r4
 80145c8:	f7fe f848 	bl	801265c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80145cc:	4620      	mov	r0, r4
 80145ce:	9500      	str	r5, [sp, #0]
 80145d0:	462b      	mov	r3, r5
 80145d2:	462a      	mov	r2, r5
 80145d4:	4629      	mov	r1, r5
 80145d6:	f7ff ff57 	bl	8014488 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 80145da:	4620      	mov	r0, r4
 80145dc:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 80145e0:	b005      	add	sp, #20
 80145e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e6:	bf00      	nop
 80145e8:	08027ab8 	.word	0x08027ab8

080145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 80145ec:	4291      	cmp	r1, r2
 80145ee:	4613      	mov	r3, r2
 80145f0:	d003      	beq.n	80145fa <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 80145f2:	460a      	mov	r2, r1
 80145f4:	4619      	mov	r1, r3
 80145f6:	f005 bc97 	b.w	8019f28 <_ZN8touchgfx6muldivElll>
 80145fa:	4770      	bx	lr

080145fc <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 80145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014600:	6803      	ldr	r3, [r0, #0]
 8014602:	460d      	mov	r5, r1
 8014604:	4604      	mov	r4, r0
 8014606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801460a:	4798      	blx	r3
 801460c:	42a8      	cmp	r0, r5
 801460e:	4606      	mov	r6, r0
 8014610:	d024      	beq.n	801465c <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8014612:	6823      	ldr	r3, [r4, #0]
 8014614:	4601      	mov	r1, r0
 8014616:	462a      	mov	r2, r5
 8014618:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 801461c:	f8d3 70a4 	ldr.w	r7, [r3, #164]	; 0xa4
 8014620:	f7ff ffe4 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014624:	4680      	mov	r8, r0
 8014626:	462a      	mov	r2, r5
 8014628:	4631      	mov	r1, r6
 801462a:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
 801462e:	f7ff ffdd 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014632:	4641      	mov	r1, r8
 8014634:	4602      	mov	r2, r0
 8014636:	4620      	mov	r0, r4
 8014638:	47b8      	blx	r7
 801463a:	462a      	mov	r2, r5
 801463c:	4631      	mov	r1, r6
 801463e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8014642:	f7ff ffd3 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014646:	462a      	mov	r2, r5
 8014648:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 801464c:	4631      	mov	r1, r6
 801464e:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
 8014652:	f7ff ffcb 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014656:	6325      	str	r5, [r4, #48]	; 0x30
 8014658:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
 801465c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014660 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8014660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014664:	4604      	mov	r4, r0
 8014666:	460f      	mov	r7, r1
 8014668:	b1b2      	cbz	r2, 8014698 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 801466a:	6803      	ldr	r3, [r0, #0]
 801466c:	2600      	movs	r6, #0
 801466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014672:	4798      	blx	r3
 8014674:	4681      	mov	r9, r0
 8014676:	b235      	sxth	r5, r6
 8014678:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 801467c:	3601      	adds	r6, #1
 801467e:	42ab      	cmp	r3, r5
 8014680:	dd0a      	ble.n	8014698 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x38>
 8014682:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 8014686:	463a      	mov	r2, r7
 8014688:	4649      	mov	r1, r9
 801468a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 801468e:	f7ff ffad 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8014692:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8014696:	e7ee      	b.n	8014676 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8014698:	6367      	str	r7, [r4, #52]	; 0x34
 801469a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801469e <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 801469e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146a2:	4604      	mov	r4, r0
 80146a4:	460f      	mov	r7, r1
 80146a6:	b1b2      	cbz	r2, 80146d6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 80146a8:	6803      	ldr	r3, [r0, #0]
 80146aa:	2600      	movs	r6, #0
 80146ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146b0:	4798      	blx	r3
 80146b2:	4681      	mov	r9, r0
 80146b4:	b235      	sxth	r5, r6
 80146b6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80146ba:	3601      	adds	r6, #1
 80146bc:	42ab      	cmp	r3, r5
 80146be:	dd0a      	ble.n	80146d6 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 80146c0:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 80146c4:	463a      	mov	r2, r7
 80146c6:	4649      	mov	r1, r9
 80146c8:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 80146cc:	f7ff ff8e 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 80146d0:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 80146d4:	e7ee      	b.n	80146b4 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 80146d6:	6327      	str	r7, [r4, #48]	; 0x30
 80146d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080146dc <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 80146dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146e0:	4604      	mov	r4, r0
 80146e2:	460f      	mov	r7, r1
 80146e4:	b1b2      	cbz	r2, 8014714 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 80146e6:	6803      	ldr	r3, [r0, #0]
 80146e8:	2600      	movs	r6, #0
 80146ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80146ee:	4798      	blx	r3
 80146f0:	4681      	mov	r9, r0
 80146f2:	b235      	sxth	r5, r6
 80146f4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 80146f8:	3601      	adds	r6, #1
 80146fa:	42ab      	cmp	r3, r5
 80146fc:	dd0a      	ble.n	8014714 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 80146fe:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 8014702:	463a      	mov	r2, r7
 8014704:	4649      	mov	r1, r9
 8014706:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 801470a:	f7ff ff6f 	bl	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801470e:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8014712:	e7ee      	b.n	80146f2 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 8014714:	6367      	str	r7, [r4, #52]	; 0x34
 8014716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801471a <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 801471a:	b570      	push	{r4, r5, r6, lr}
 801471c:	6803      	ldr	r3, [r0, #0]
 801471e:	4604      	mov	r4, r0
 8014720:	460d      	mov	r5, r1
 8014722:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8014726:	4798      	blx	r3
 8014728:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 801472c:	4629      	mov	r1, r5
 801472e:	4620      	mov	r0, r4
 8014730:	3301      	adds	r3, #1
 8014732:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8014736:	6823      	ldr	r3, [r4, #0]
 8014738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801473c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8014740:	4718      	bx	r3

08014742 <_ZN8touchgfx9GraphData8addValueEii>:
 8014742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014746:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 801474a:	4605      	mov	r5, r0
 801474c:	4617      	mov	r7, r2
 801474e:	2b00      	cmp	r3, #0
 8014750:	d03e      	beq.n	80147d0 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 8014752:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 8014756:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 801475a:	3801      	subs	r0, #1
 801475c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8014760:	4288      	cmp	r0, r1
 8014762:	db35      	blt.n	80147d0 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 8014764:	2000      	movs	r0, #0
 8014766:	b204      	sxth	r4, r0
 8014768:	42a3      	cmp	r3, r4
 801476a:	dd16      	ble.n	801479a <_ZN8touchgfx9GraphData8addValueEii+0x58>
 801476c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8014770:	3001      	adds	r0, #1
 8014772:	f852 6008 	ldr.w	r6, [r2, r8]
 8014776:	428e      	cmp	r6, r1
 8014778:	dbf5      	blt.n	8014766 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 801477a:	d10f      	bne.n	801479c <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 801477c:	4621      	mov	r1, r4
 801477e:	4628      	mov	r0, r5
 8014780:	f7ff fda7 	bl	80142d2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8014784:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 8014788:	f843 7008 	str.w	r7, [r3, r8]
 801478c:	4621      	mov	r1, r4
 801478e:	4628      	mov	r0, r5
 8014790:	f7ff fd9f 	bl	80142d2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8014794:	4620      	mov	r0, r4
 8014796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479a:	d01a      	beq.n	80147d2 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 801479c:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80147a0:	428a      	cmp	r2, r1
 80147a2:	dc16      	bgt.n	80147d2 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 80147a4:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 80147a8:	3801      	subs	r0, #1
 80147aa:	0080      	lsls	r0, r0, #2
 80147ac:	42a3      	cmp	r3, r4
 80147ae:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 80147b2:	dd15      	ble.n	80147e0 <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 80147b4:	5832      	ldr	r2, [r6, r0]
 80147b6:	f100 0c04 	add.w	ip, r0, #4
 80147ba:	3b01      	subs	r3, #1
 80147bc:	f846 200c 	str.w	r2, [r6, ip]
 80147c0:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 80147c4:	b21b      	sxth	r3, r3
 80147c6:	5832      	ldr	r2, [r6, r0]
 80147c8:	3804      	subs	r0, #4
 80147ca:	f846 200c 	str.w	r2, [r6, ip]
 80147ce:	e7ed      	b.n	80147ac <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 80147d0:	461c      	mov	r4, r3
 80147d2:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d1e4      	bne.n	80147a4 <_ZN8touchgfx9GraphData8addValueEii+0x62>
 80147da:	f04f 34ff 	mov.w	r4, #4294967295
 80147de:	e7d9      	b.n	8014794 <_ZN8touchgfx9GraphData8addValueEii+0x52>
 80147e0:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 80147e4:	3301      	adds	r3, #1
 80147e6:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 80147ea:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 80147ee:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 80147f2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80147f6:	e7c9      	b.n	801478c <_ZN8touchgfx9GraphData8addValueEii+0x4a>

080147f8 <_ZN8touchgfx16GraphElementLineD1Ev>:
 80147f8:	4770      	bx	lr

080147fa <_ZN8touchgfx16GraphElementLineD0Ev>:
 80147fa:	b510      	push	{r4, lr}
 80147fc:	4604      	mov	r4, r0
 80147fe:	2130      	movs	r1, #48	; 0x30
 8014800:	f00f ff2d 	bl	802465e <_ZdlPvj>
 8014804:	4620      	mov	r0, r4
 8014806:	bd10      	pop	{r4, pc}

08014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801480a:	4604      	mov	r4, r0
 801480c:	4608      	mov	r0, r1
 801480e:	460d      	mov	r5, r1
 8014810:	f7fe f8eb 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8014814:	b978      	cbnz	r0, 8014836 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014816:	4620      	mov	r0, r4
 8014818:	f7fe f8e7 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801481c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014820:	b150      	cbz	r0, 8014838 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014822:	8026      	strh	r6, [r4, #0]
 8014824:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014828:	8063      	strh	r3, [r4, #2]
 801482a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801482e:	80a3      	strh	r3, [r4, #4]
 8014830:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014834:	80e3      	strh	r3, [r4, #6]
 8014836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014838:	f9b4 1000 	ldrsh.w	r1, [r4]
 801483c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014840:	42b1      	cmp	r1, r6
 8014842:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8014846:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801484a:	460f      	mov	r7, r1
 801484c:	88ed      	ldrh	r5, [r5, #6]
 801484e:	bfa8      	it	ge
 8014850:	4637      	movge	r7, r6
 8014852:	4293      	cmp	r3, r2
 8014854:	4618      	mov	r0, r3
 8014856:	4466      	add	r6, ip
 8014858:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801485c:	bfa8      	it	ge
 801485e:	4610      	movge	r0, r2
 8014860:	442a      	add	r2, r5
 8014862:	88e5      	ldrh	r5, [r4, #6]
 8014864:	4461      	add	r1, ip
 8014866:	b236      	sxth	r6, r6
 8014868:	8027      	strh	r7, [r4, #0]
 801486a:	442b      	add	r3, r5
 801486c:	b209      	sxth	r1, r1
 801486e:	b212      	sxth	r2, r2
 8014870:	8060      	strh	r0, [r4, #2]
 8014872:	b21b      	sxth	r3, r3
 8014874:	428e      	cmp	r6, r1
 8014876:	bfac      	ite	ge
 8014878:	ebc7 0106 	rsbge	r1, r7, r6
 801487c:	ebc7 0101 	rsblt	r1, r7, r1
 8014880:	429a      	cmp	r2, r3
 8014882:	bfac      	ite	ge
 8014884:	ebc0 0202 	rsbge	r2, r0, r2
 8014888:	ebc0 0203 	rsblt	r2, r0, r3
 801488c:	80a1      	strh	r1, [r4, #4]
 801488e:	80e2      	strh	r2, [r4, #6]
 8014890:	e7d1      	b.n	8014836 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

08014892 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8014892:	6800      	ldr	r0, [r0, #0]
 8014894:	2800      	cmp	r0, #0
 8014896:	bfb9      	ittee	lt
 8014898:	2320      	movlt	r3, #32
 801489a:	fb90 f0f3 	sdivlt	r0, r0, r3
 801489e:	301f      	addge	r0, #31
 80148a0:	1140      	asrge	r0, r0, #5
 80148a2:	4770      	bx	lr

080148a4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 80148a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a8:	6803      	ldr	r3, [r0, #0]
 80148aa:	b093      	sub	sp, #76	; 0x4c
 80148ac:	6945      	ldr	r5, [r0, #20]
 80148ae:	4604      	mov	r4, r0
 80148b0:	460f      	mov	r7, r1
 80148b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80148b4:	2d00      	cmp	r5, #0
 80148b6:	f000 81ad 	beq.w	8014c14 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80148ba:	696d      	ldr	r5, [r5, #20]
 80148bc:	4798      	blx	r3
 80148be:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d077      	beq.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80148c6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80148ca:	fb13 f000 	smulbb	r0, r3, r0
 80148ce:	b283      	uxth	r3, r0
 80148d0:	1c58      	adds	r0, r3, #1
 80148d2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80148d6:	1200      	asrs	r0, r0, #8
 80148d8:	d06d      	beq.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80148da:	b2c3      	uxtb	r3, r0
 80148dc:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80148e0:	462a      	mov	r2, r5
 80148e2:	4621      	mov	r1, r4
 80148e4:	9308      	str	r3, [sp, #32]
 80148e6:	4640      	mov	r0, r8
 80148e8:	6823      	ldr	r3, [r4, #0]
 80148ea:	ae0e      	add	r6, sp, #56	; 0x38
 80148ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80148f0:	4798      	blx	r3
 80148f2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80148f6:	e886 0003 	stmia.w	r6, {r0, r1}
 80148fa:	4639      	mov	r1, r7
 80148fc:	4630      	mov	r0, r6
 80148fe:	f7fe f831 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8014902:	6823      	ldr	r3, [r4, #0]
 8014904:	4629      	mov	r1, r5
 8014906:	4620      	mov	r0, r4
 8014908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801490c:	4798      	blx	r3
 801490e:	6823      	ldr	r3, [r4, #0]
 8014910:	4607      	mov	r7, r0
 8014912:	4629      	mov	r1, r5
 8014914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014918:	4620      	mov	r0, r4
 801491a:	4798      	blx	r3
 801491c:	4681      	mov	r9, r0
 801491e:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8014922:	4629      	mov	r1, r5
 8014924:	0103      	lsls	r3, r0, #4
 8014926:	4620      	mov	r0, r4
 8014928:	9309      	str	r3, [sp, #36]	; 0x24
 801492a:	6823      	ldr	r3, [r4, #0]
 801492c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014930:	4798      	blx	r3
 8014932:	4629      	mov	r1, r5
 8014934:	b203      	sxth	r3, r0
 8014936:	4620      	mov	r0, r4
 8014938:	9306      	str	r3, [sp, #24]
 801493a:	6823      	ldr	r3, [r4, #0]
 801493c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014940:	4798      	blx	r3
 8014942:	2f00      	cmp	r7, #0
 8014944:	b203      	sxth	r3, r0
 8014946:	9307      	str	r3, [sp, #28]
 8014948:	d138      	bne.n	80149bc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 801494a:	f1b9 0f00 	cmp.w	r9, #0
 801494e:	d132      	bne.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014950:	6823      	ldr	r3, [r4, #0]
 8014952:	464a      	mov	r2, r9
 8014954:	4629      	mov	r1, r5
 8014956:	4620      	mov	r0, r4
 8014958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801495c:	4798      	blx	r3
 801495e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014960:	1ac0      	subs	r0, r0, r3
 8014962:	9010      	str	r0, [sp, #64]	; 0x40
 8014964:	4640      	mov	r0, r8
 8014966:	f7f5 fcf8 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801496a:	6823      	ldr	r3, [r4, #0]
 801496c:	4607      	mov	r7, r0
 801496e:	4629      	mov	r1, r5
 8014970:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014974:	4620      	mov	r0, r4
 8014976:	4798      	blx	r3
 8014978:	1a38      	subs	r0, r7, r0
 801497a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801497e:	fa0f f880 	sxth.w	r8, r0
 8014982:	eb13 0f08 	cmn.w	r3, r8
 8014986:	d416      	bmi.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014988:	6823      	ldr	r3, [r4, #0]
 801498a:	4629      	mov	r1, r5
 801498c:	4620      	mov	r0, r4
 801498e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014992:	4798      	blx	r3
 8014994:	4580      	cmp	r8, r0
 8014996:	da0e      	bge.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014998:	9a08      	ldr	r2, [sp, #32]
 801499a:	b23f      	sxth	r7, r7
 801499c:	6823      	ldr	r3, [r4, #0]
 801499e:	4631      	mov	r1, r6
 80149a0:	9202      	str	r2, [sp, #8]
 80149a2:	4620      	mov	r0, r4
 80149a4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 80149a8:	9700      	str	r7, [sp, #0]
 80149aa:	9201      	str	r2, [sp, #4]
 80149ac:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80149b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149b4:	47a8      	blx	r5
 80149b6:	b013      	add	sp, #76	; 0x4c
 80149b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149bc:	ddfb      	ble.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80149be:	6823      	ldr	r3, [r4, #0]
 80149c0:	4629      	mov	r1, r5
 80149c2:	4620      	mov	r0, r4
 80149c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80149c8:	4798      	blx	r3
 80149ca:	6823      	ldr	r3, [r4, #0]
 80149cc:	4683      	mov	fp, r0
 80149ce:	4629      	mov	r1, r5
 80149d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80149d4:	4620      	mov	r0, r4
 80149d6:	4798      	blx	r3
 80149d8:	eba0 030b 	sub.w	r3, r0, fp
 80149dc:	4680      	mov	r8, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	bfb8      	it	lt
 80149e2:	425b      	neglt	r3, r3
 80149e4:	fb93 f3f7 	sdiv	r3, r3, r7
 80149e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80149ec:	dce3      	bgt.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	465a      	mov	r2, fp
 80149f2:	4629      	mov	r1, r5
 80149f4:	4620      	mov	r0, r4
 80149f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80149fa:	4798      	blx	r3
 80149fc:	6823      	ldr	r3, [r4, #0]
 80149fe:	4606      	mov	r6, r0
 8014a00:	4642      	mov	r2, r8
 8014a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014a06:	4629      	mov	r1, r5
 8014a08:	4620      	mov	r0, r4
 8014a0a:	4798      	blx	r3
 8014a0c:	42b0      	cmp	r0, r6
 8014a0e:	bfa2      	ittt	ge
 8014a10:	4643      	movge	r3, r8
 8014a12:	46d8      	movge	r8, fp
 8014a14:	469b      	movge	fp, r3
 8014a16:	fb98 f6f7 	sdiv	r6, r8, r7
 8014a1a:	fb9b f2f7 	sdiv	r2, fp, r7
 8014a1e:	45d8      	cmp	r8, fp
 8014a20:	bfac      	ite	ge
 8014a22:	f04f 33ff 	movge.w	r3, #4294967295
 8014a26:	2301      	movlt	r3, #1
 8014a28:	1af6      	subs	r6, r6, r3
 8014a2a:	441a      	add	r2, r3
 8014a2c:	4296      	cmp	r6, r2
 8014a2e:	bfac      	ite	ge
 8014a30:	f04f 3aff 	movge.w	sl, #4294967295
 8014a34:	f04f 0a01 	movlt.w	sl, #1
 8014a38:	f1b9 0f00 	cmp.w	r9, #0
 8014a3c:	d13e      	bne.n	8014abc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8014a3e:	fb07 fb0a 	mul.w	fp, r7, sl
 8014a42:	eb0a 0802 	add.w	r8, sl, r2
 8014a46:	4377      	muls	r7, r6
 8014a48:	45b0      	cmp	r8, r6
 8014a4a:	d0b4      	beq.n	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	463a      	mov	r2, r7
 8014a50:	4629      	mov	r1, r5
 8014a52:	4620      	mov	r0, r4
 8014a54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014a58:	4798      	blx	r3
 8014a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a5c:	1ac0      	subs	r0, r0, r3
 8014a5e:	9010      	str	r0, [sp, #64]	; 0x40
 8014a60:	a810      	add	r0, sp, #64	; 0x40
 8014a62:	f7f5 fc7a 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014a66:	6823      	ldr	r3, [r4, #0]
 8014a68:	4681      	mov	r9, r0
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014a70:	4620      	mov	r0, r4
 8014a72:	4798      	blx	r3
 8014a74:	eba9 0000 	sub.w	r0, r9, r0
 8014a78:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014a7c:	b203      	sxth	r3, r0
 8014a7e:	42da      	cmn	r2, r3
 8014a80:	9304      	str	r3, [sp, #16]
 8014a82:	d418      	bmi.n	8014ab6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8014a84:	6822      	ldr	r2, [r4, #0]
 8014a86:	4629      	mov	r1, r5
 8014a88:	4620      	mov	r0, r4
 8014a8a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8014a8e:	4790      	blx	r2
 8014a90:	9b04      	ldr	r3, [sp, #16]
 8014a92:	4283      	cmp	r3, r0
 8014a94:	da0f      	bge.n	8014ab6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 8014a96:	9b08      	ldr	r3, [sp, #32]
 8014a98:	a90e      	add	r1, sp, #56	; 0x38
 8014a9a:	6822      	ldr	r2, [r4, #0]
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	9302      	str	r3, [sp, #8]
 8014aa0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014aa4:	9301      	str	r3, [sp, #4]
 8014aa6:	fa0f f389 	sxth.w	r3, r9
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	f8d2 9088 	ldr.w	r9, [r2, #136]	; 0x88
 8014ab0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014ab4:	47c8      	blx	r9
 8014ab6:	4456      	add	r6, sl
 8014ab8:	445f      	add	r7, fp
 8014aba:	e7c5      	b.n	8014a48 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 8014abc:	fb98 f8f9 	sdiv	r8, r8, r9
 8014ac0:	eba8 0203 	sub.w	r2, r8, r3
 8014ac4:	4629      	mov	r1, r5
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	9204      	str	r2, [sp, #16]
 8014aca:	fb9b f8f9 	sdiv	r8, fp, r9
 8014ace:	4498      	add	r8, r3
 8014ad0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 8014ad4:	4542      	cmp	r2, r8
 8014ad6:	bfac      	ite	ge
 8014ad8:	f04f 33ff 	movge.w	r3, #4294967295
 8014adc:	2301      	movlt	r3, #1
 8014ade:	fb02 f209 	mul.w	r2, r2, r9
 8014ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ae4:	6823      	ldr	r3, [r4, #0]
 8014ae6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014aea:	4798      	blx	r3
 8014aec:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8014af0:	4658      	mov	r0, fp
 8014af2:	f7f5 fc32 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014af6:	fb06 f207 	mul.w	r2, r6, r7
 8014afa:	b203      	sxth	r3, r0
 8014afc:	4629      	mov	r1, r5
 8014afe:	4620      	mov	r0, r4
 8014b00:	9305      	str	r3, [sp, #20]
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014b08:	4798      	blx	r3
 8014b0a:	9010      	str	r0, [sp, #64]	; 0x40
 8014b0c:	4658      	mov	r0, fp
 8014b0e:	f7f5 fc24 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b12:	fb07 f20a 	mul.w	r2, r7, sl
 8014b16:	b203      	sxth	r3, r0
 8014b18:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b1c:	4442      	add	r2, r8
 8014b1e:	920c      	str	r2, [sp, #48]	; 0x30
 8014b20:	9a05      	ldr	r2, [sp, #20]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	dc16      	bgt.n	8014b54 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 8014b26:	eb06 080a 	add.w	r8, r6, sl
 8014b2a:	fb07 f808 	mul.w	r8, r7, r8
 8014b2e:	9a05      	ldr	r2, [sp, #20]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	db54      	blt.n	8014bde <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 8014b34:	6823      	ldr	r3, [r4, #0]
 8014b36:	4642      	mov	r2, r8
 8014b38:	4629      	mov	r1, r5
 8014b3a:	4620      	mov	r0, r4
 8014b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014b40:	4456      	add	r6, sl
 8014b42:	4798      	blx	r3
 8014b44:	9010      	str	r0, [sp, #64]	; 0x40
 8014b46:	4658      	mov	r0, fp
 8014b48:	f7f5 fc07 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b4e:	b203      	sxth	r3, r0
 8014b50:	4490      	add	r8, r2
 8014b52:	e7ec      	b.n	8014b2e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 8014b54:	6823      	ldr	r3, [r4, #0]
 8014b56:	fb07 f206 	mul.w	r2, r7, r6
 8014b5a:	4629      	mov	r1, r5
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014b62:	4798      	blx	r3
 8014b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b66:	1ac0      	subs	r0, r0, r3
 8014b68:	9010      	str	r0, [sp, #64]	; 0x40
 8014b6a:	4658      	mov	r0, fp
 8014b6c:	f7f5 fbf5 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014b70:	6823      	ldr	r3, [r4, #0]
 8014b72:	4680      	mov	r8, r0
 8014b74:	4629      	mov	r1, r5
 8014b76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014b7a:	4620      	mov	r0, r4
 8014b7c:	4798      	blx	r3
 8014b7e:	eba8 0000 	sub.w	r0, r8, r0
 8014b82:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8014b86:	b203      	sxth	r3, r0
 8014b88:	42da      	cmn	r2, r3
 8014b8a:	930d      	str	r3, [sp, #52]	; 0x34
 8014b8c:	d418      	bmi.n	8014bc0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8014b8e:	6822      	ldr	r2, [r4, #0]
 8014b90:	4629      	mov	r1, r5
 8014b92:	4620      	mov	r0, r4
 8014b94:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8014b98:	4790      	blx	r2
 8014b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b9c:	4283      	cmp	r3, r0
 8014b9e:	da0f      	bge.n	8014bc0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8014ba0:	9b08      	ldr	r3, [sp, #32]
 8014ba2:	a90e      	add	r1, sp, #56	; 0x38
 8014ba4:	6822      	ldr	r2, [r4, #0]
 8014ba6:	4620      	mov	r0, r4
 8014ba8:	9302      	str	r3, [sp, #8]
 8014baa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014bae:	9301      	str	r3, [sp, #4]
 8014bb0:	fa0f f388 	sxth.w	r3, r8
 8014bb4:	9300      	str	r3, [sp, #0]
 8014bb6:	f8d2 8088 	ldr.w	r8, [r2, #136]	; 0x88
 8014bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bbe:	47c0      	blx	r8
 8014bc0:	6823      	ldr	r3, [r4, #0]
 8014bc2:	4456      	add	r6, sl
 8014bc4:	4629      	mov	r1, r5
 8014bc6:	4620      	mov	r0, r4
 8014bc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014bcc:	fb06 f207 	mul.w	r2, r6, r7
 8014bd0:	4798      	blx	r3
 8014bd2:	9010      	str	r0, [sp, #64]	; 0x40
 8014bd4:	4658      	mov	r0, fp
 8014bd6:	f7f5 fbc0 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014bda:	b203      	sxth	r3, r0
 8014bdc:	e7a0      	b.n	8014b20 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8014bde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014be0:	930d      	str	r3, [sp, #52]	; 0x34
 8014be2:	9b04      	ldr	r3, [sp, #16]
 8014be4:	4413      	add	r3, r2
 8014be6:	9304      	str	r3, [sp, #16]
 8014be8:	9a04      	ldr	r2, [sp, #16]
 8014bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bec:	4293      	cmp	r3, r2
 8014bee:	f43f aee2 	beq.w	80149b6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8014bf2:	9b04      	ldr	r3, [sp, #16]
 8014bf4:	4629      	mov	r1, r5
 8014bf6:	6822      	ldr	r2, [r4, #0]
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	f8d2 80ac 	ldr.w	r8, [r2, #172]	; 0xac
 8014bfe:	fb03 f209 	mul.w	r2, r3, r9
 8014c02:	47c0      	blx	r8
 8014c04:	9010      	str	r0, [sp, #64]	; 0x40
 8014c06:	4658      	mov	r0, fp
 8014c08:	f7f5 fba7 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014c0c:	b203      	sxth	r3, r0
 8014c0e:	9305      	str	r3, [sp, #20]
 8014c10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c12:	e785      	b.n	8014b20 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 8014c14:	4798      	blx	r3
 8014c16:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014c1a:	deff      	udf	#255	; 0xff

08014c1c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8014c1c:	b510      	push	{r4, lr}
 8014c1e:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8014c22:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8014c26:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8014c2a:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8014c2e:	139b      	asrs	r3, r3, #14
 8014c30:	13a4      	asrs	r4, r4, #14
 8014c32:	429c      	cmp	r4, r3
 8014c34:	bfb8      	it	lt
 8014c36:	461c      	movlt	r4, r3
 8014c38:	2c01      	cmp	r4, #1
 8014c3a:	dd07      	ble.n	8014c4c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8014c3c:	fb91 f1f4 	sdiv	r1, r1, r4
 8014c40:	fb90 f0f4 	sdiv	r0, r0, r4
 8014c44:	f7ff ffea 	bl	8014c1c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014c48:	4360      	muls	r0, r4
 8014c4a:	bd10      	pop	{r4, pc}
 8014c4c:	4340      	muls	r0, r0
 8014c4e:	fb01 0101 	mla	r1, r1, r1, r0
 8014c52:	2000      	movs	r0, #0
 8014c54:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8014c58:	bfb4      	ite	lt
 8014c5a:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 8014c5e:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 8014c62:	18c2      	adds	r2, r0, r3
 8014c64:	428a      	cmp	r2, r1
 8014c66:	bf9c      	itt	ls
 8014c68:	1898      	addls	r0, r3, r2
 8014c6a:	1a89      	subls	r1, r1, r2
 8014c6c:	089b      	lsrs	r3, r3, #2
 8014c6e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014c72:	d1f6      	bne.n	8014c62 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 8014c74:	e7e9      	b.n	8014c4a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08014c76 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 8014c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c78:	9906      	ldr	r1, [sp, #24]
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	461c      	mov	r4, r3
 8014c7e:	2020      	movs	r0, #32
 8014c80:	4291      	cmp	r1, r2
 8014c82:	bfbc      	itt	lt
 8014c84:	9206      	strlt	r2, [sp, #24]
 8014c86:	460a      	movlt	r2, r1
 8014c88:	9907      	ldr	r1, [sp, #28]
 8014c8a:	428b      	cmp	r3, r1
 8014c8c:	bfc4      	itt	gt
 8014c8e:	460c      	movgt	r4, r1
 8014c90:	9307      	strgt	r3, [sp, #28]
 8014c92:	fb92 f5f0 	sdiv	r5, r2, r0
 8014c96:	fb94 f4f0 	sdiv	r4, r4, r0
 8014c9a:	a806      	add	r0, sp, #24
 8014c9c:	f7ff fdf9 	bl	8014892 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014ca0:	4607      	mov	r7, r0
 8014ca2:	a807      	add	r0, sp, #28
 8014ca4:	f7ff fdf5 	bl	8014892 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014ca8:	1b7a      	subs	r2, r7, r5
 8014caa:	1b00      	subs	r0, r0, r4
 8014cac:	8035      	strh	r5, [r6, #0]
 8014cae:	8074      	strh	r4, [r6, #2]
 8014cb0:	80f0      	strh	r0, [r6, #6]
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	80b2      	strh	r2, [r6, #4]
 8014cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014cb8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 8014cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014cba:	9c08      	ldr	r4, [sp, #32]
 8014cbc:	2602      	movs	r6, #2
 8014cbe:	4605      	mov	r5, r0
 8014cc0:	3401      	adds	r4, #1
 8014cc2:	fb94 f4f6 	sdiv	r4, r4, r6
 8014cc6:	18a6      	adds	r6, r4, r2
 8014cc8:	191f      	adds	r7, r3, r4
 8014cca:	1b12      	subs	r2, r2, r4
 8014ccc:	1b1b      	subs	r3, r3, r4
 8014cce:	e9cd 6700 	strd	r6, r7, [sp]
 8014cd2:	f7ff ffd0 	bl	8014c76 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 8014cd6:	4628      	mov	r0, r5
 8014cd8:	b003      	add	sp, #12
 8014cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014cdc <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 8014cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ce0:	6943      	ldr	r3, [r0, #20]
 8014ce2:	b087      	sub	sp, #28
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	460d      	mov	r5, r1
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d072      	beq.n	8014dd2 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 8014cec:	695c      	ldr	r4, [r3, #20]
 8014cee:	f890 702c 	ldrb.w	r7, [r0, #44]	; 0x2c
 8014cf2:	6823      	ldr	r3, [r4, #0]
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	017f      	lsls	r7, r7, #5
 8014cf8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014cfc:	4798      	blx	r3
 8014cfe:	6823      	ldr	r3, [r4, #0]
 8014d00:	4680      	mov	r8, r0
 8014d02:	4629      	mov	r1, r5
 8014d04:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014d08:	4620      	mov	r0, r4
 8014d0a:	4798      	blx	r3
 8014d0c:	9700      	str	r7, [sp, #0]
 8014d0e:	4603      	mov	r3, r0
 8014d10:	4642      	mov	r2, r8
 8014d12:	4631      	mov	r1, r6
 8014d14:	a802      	add	r0, sp, #8
 8014d16:	f7ff ffcf 	bl	8014cb8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014d1a:	2d00      	cmp	r5, #0
 8014d1c:	dd1b      	ble.n	8014d56 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 8014d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8014d22:	6823      	ldr	r3, [r4, #0]
 8014d24:	4620      	mov	r0, r4
 8014d26:	fa0f f888 	sxth.w	r8, r8
 8014d2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014d2e:	4641      	mov	r1, r8
 8014d30:	4798      	blx	r3
 8014d32:	6823      	ldr	r3, [r4, #0]
 8014d34:	4681      	mov	r9, r0
 8014d36:	4641      	mov	r1, r8
 8014d38:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	4798      	blx	r3
 8014d40:	4631      	mov	r1, r6
 8014d42:	4603      	mov	r3, r0
 8014d44:	9700      	str	r7, [sp, #0]
 8014d46:	a804      	add	r0, sp, #16
 8014d48:	464a      	mov	r2, r9
 8014d4a:	f7ff ffb5 	bl	8014cb8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014d4e:	a904      	add	r1, sp, #16
 8014d50:	a802      	add	r0, sp, #8
 8014d52:	f7ff fd59 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014d56:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014d5a:	3b01      	subs	r3, #1
 8014d5c:	429d      	cmp	r5, r3
 8014d5e:	da19      	bge.n	8014d94 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 8014d60:	3501      	adds	r5, #1
 8014d62:	6823      	ldr	r3, [r4, #0]
 8014d64:	4620      	mov	r0, r4
 8014d66:	b22d      	sxth	r5, r5
 8014d68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	4798      	blx	r3
 8014d70:	6823      	ldr	r3, [r4, #0]
 8014d72:	4680      	mov	r8, r0
 8014d74:	4629      	mov	r1, r5
 8014d76:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014d7a:	4620      	mov	r0, r4
 8014d7c:	4798      	blx	r3
 8014d7e:	4631      	mov	r1, r6
 8014d80:	4603      	mov	r3, r0
 8014d82:	9700      	str	r7, [sp, #0]
 8014d84:	a804      	add	r0, sp, #16
 8014d86:	4642      	mov	r2, r8
 8014d88:	f7ff ff96 	bl	8014cb8 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8014d8c:	a904      	add	r1, sp, #16
 8014d8e:	a802      	add	r0, sp, #8
 8014d90:	f7ff fd3a 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8014d94:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8014d98:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8014d9c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8014da0:	18ca      	adds	r2, r1, r3
 8014da2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8014da6:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014daa:	a904      	add	r1, sp, #16
 8014dac:	1a9b      	subs	r3, r3, r2
 8014dae:	2200      	movs	r2, #0
 8014db0:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014db4:	a802      	add	r0, sp, #8
 8014db6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014dba:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014dbe:	f7fd fdd1 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8014dc2:	6833      	ldr	r3, [r6, #0]
 8014dc4:	a902      	add	r1, sp, #8
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	691b      	ldr	r3, [r3, #16]
 8014dca:	4798      	blx	r3
 8014dcc:	b007      	add	sp, #28
 8014dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	deff      	udf	#255	; 0xff

08014dd6 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 8014dd6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	da05      	bge.n	8014dea <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	880a      	ldrh	r2, [r1, #0]
 8014de2:	441a      	add	r2, r3
 8014de4:	425b      	negs	r3, r3
 8014de6:	800a      	strh	r2, [r1, #0]
 8014de8:	808b      	strh	r3, [r1, #4]
 8014dea:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	da05      	bge.n	8014dfe <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	884a      	ldrh	r2, [r1, #2]
 8014df6:	441a      	add	r2, r3
 8014df8:	425b      	negs	r3, r3
 8014dfa:	804a      	strh	r2, [r1, #2]
 8014dfc:	80cb      	strh	r3, [r1, #6]
 8014dfe:	4770      	bx	lr

08014e00 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 8014e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8014e02:	4604      	mov	r4, r0
 8014e04:	460d      	mov	r5, r1
 8014e06:	6801      	ldr	r1, [r0, #0]
 8014e08:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 8014e0c:	9001      	str	r0, [sp, #4]
 8014e0e:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8014e12:	9000      	str	r0, [sp, #0]
 8014e14:	a802      	add	r0, sp, #8
 8014e16:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	47b0      	blx	r6
 8014e1e:	a902      	add	r1, sp, #8
 8014e20:	4620      	mov	r0, r4
 8014e22:	f7ff ffd8 	bl	8014dd6 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8014e26:	a802      	add	r0, sp, #8
 8014e28:	4629      	mov	r1, r5
 8014e2a:	f7fd fd9b 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8014e2e:	a802      	add	r0, sp, #8
 8014e30:	f7fd fddb 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8014e34:	b968      	cbnz	r0, 8014e52 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8014e36:	6823      	ldr	r3, [r4, #0]
 8014e38:	a902      	add	r1, sp, #8
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e3e:	4798      	blx	r3
 8014e40:	f7fe f860 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8014e44:	6803      	ldr	r3, [r0, #0]
 8014e46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014e48:	a902      	add	r1, sp, #8
 8014e4a:	6a1d      	ldr	r5, [r3, #32]
 8014e4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014e50:	47a8      	blx	r5
 8014e52:	b004      	add	sp, #16
 8014e54:	bd70      	pop	{r4, r5, r6, pc}

08014e56 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8014e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e5a:	b08b      	sub	sp, #44	; 0x2c
 8014e5c:	461e      	mov	r6, r3
 8014e5e:	460f      	mov	r7, r1
 8014e60:	4615      	mov	r5, r2
 8014e62:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 8014e66:	429e      	cmp	r6, r3
 8014e68:	9304      	str	r3, [sp, #16]
 8014e6a:	d074      	beq.n	8014f56 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8014e6c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014e70:	4631      	mov	r1, r6
 8014e72:	4610      	mov	r0, r2
 8014e74:	4634      	mov	r4, r6
 8014e76:	015b      	lsls	r3, r3, #5
 8014e78:	9303      	str	r3, [sp, #12]
 8014e7a:	6813      	ldr	r3, [r2, #0]
 8014e7c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014e80:	4798      	blx	r3
 8014e82:	ab0a      	add	r3, sp, #40	; 0x28
 8014e84:	f843 0d10 	str.w	r0, [r3, #-16]!
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f5 fa66 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014e8e:	682b      	ldr	r3, [r5, #0]
 8014e90:	4631      	mov	r1, r6
 8014e92:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014e96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	4798      	blx	r3
 8014e9e:	ab0a      	add	r3, sp, #40	; 0x28
 8014ea0:	f843 0d0c 	str.w	r0, [r3, #-12]!
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7f5 fa58 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014eaa:	4641      	mov	r1, r8
 8014eac:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8014eb0:	4638      	mov	r0, r7
 8014eb2:	464a      	mov	r2, r9
 8014eb4:	f00f fb12 	bl	80244dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8014eb8:	2301      	movs	r3, #1
 8014eba:	9300      	str	r3, [sp, #0]
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	9b00      	ldr	r3, [sp, #0]
 8014ec0:	441c      	add	r4, r3
 8014ec2:	682b      	ldr	r3, [r5, #0]
 8014ec4:	b224      	sxth	r4, r4
 8014ec6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8014eca:	4621      	mov	r1, r4
 8014ecc:	4798      	blx	r3
 8014ece:	9008      	str	r0, [sp, #32]
 8014ed0:	a808      	add	r0, sp, #32
 8014ed2:	f7f5 fa42 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	0143      	lsls	r3, r0, #5
 8014eda:	4628      	mov	r0, r5
 8014edc:	9301      	str	r3, [sp, #4]
 8014ede:	682b      	ldr	r3, [r5, #0]
 8014ee0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8014ee4:	4798      	blx	r3
 8014ee6:	9009      	str	r0, [sp, #36]	; 0x24
 8014ee8:	a809      	add	r0, sp, #36	; 0x24
 8014eea:	f7f5 fa36 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8014eee:	0143      	lsls	r3, r0, #5
 8014ef0:	9302      	str	r3, [sp, #8]
 8014ef2:	9b01      	ldr	r3, [sp, #4]
 8014ef4:	eba3 0b08 	sub.w	fp, r3, r8
 8014ef8:	9b02      	ldr	r3, [sp, #8]
 8014efa:	eba3 0a09 	sub.w	sl, r3, r9
 8014efe:	4658      	mov	r0, fp
 8014f00:	4651      	mov	r1, sl
 8014f02:	f7ff fe8b 	bl	8014c1c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8014f06:	b320      	cbz	r0, 8014f52 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 8014f08:	4602      	mov	r2, r0
 8014f0a:	4651      	mov	r1, sl
 8014f0c:	9005      	str	r0, [sp, #20]
 8014f0e:	9803      	ldr	r0, [sp, #12]
 8014f10:	f005 f80a 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 8014f14:	2302      	movs	r3, #2
 8014f16:	4659      	mov	r1, fp
 8014f18:	fb90 faf3 	sdiv	sl, r0, r3
 8014f1c:	9b05      	ldr	r3, [sp, #20]
 8014f1e:	9803      	ldr	r0, [sp, #12]
 8014f20:	461a      	mov	r2, r3
 8014f22:	f005 f801 	bl	8019f28 <_ZN8touchgfx6muldivElll>
 8014f26:	2302      	movs	r3, #2
 8014f28:	eba8 010a 	sub.w	r1, r8, sl
 8014f2c:	fb90 fbf3 	sdiv	fp, r0, r3
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	eb0b 0209 	add.w	r2, fp, r9
 8014f36:	4638      	mov	r0, r7
 8014f38:	689b      	ldr	r3, [r3, #8]
 8014f3a:	4798      	blx	r3
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	9a02      	ldr	r2, [sp, #8]
 8014f40:	4638      	mov	r0, r7
 8014f42:	9901      	ldr	r1, [sp, #4]
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	445a      	add	r2, fp
 8014f48:	eba1 010a 	sub.w	r1, r1, sl
 8014f4c:	4798      	blx	r3
 8014f4e:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 8014f52:	42a6      	cmp	r6, r4
 8014f54:	db02      	blt.n	8014f5c <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8014f56:	b00b      	add	sp, #44	; 0x2c
 8014f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f5c:	9b00      	ldr	r3, [sp, #0]
 8014f5e:	9a04      	ldr	r2, [sp, #16]
 8014f60:	42a2      	cmp	r2, r4
 8014f62:	bf08      	it	eq
 8014f64:	f04f 33ff 	moveq.w	r3, #4294967295
 8014f68:	e7a7      	b.n	8014eba <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08014f6c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8014f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f70:	6943      	ldr	r3, [r0, #20]
 8014f72:	b0a2      	sub	sp, #136	; 0x88
 8014f74:	4606      	mov	r6, r0
 8014f76:	460f      	mov	r7, r1
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d06c      	beq.n	8015056 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xea>
 8014f7c:	695c      	ldr	r4, [r3, #20]
 8014f7e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 8014f82:	2b01      	cmp	r3, #1
 8014f84:	dc04      	bgt.n	8014f90 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8014f86:	2401      	movs	r4, #1
 8014f88:	4620      	mov	r0, r4
 8014f8a:	b022      	add	sp, #136	; 0x88
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8014f94:	ad22      	add	r5, sp, #136	; 0x88
 8014f96:	011b      	lsls	r3, r3, #4
 8014f98:	f845 3d70 	str.w	r3, [r5, #-112]!
 8014f9c:	4628      	mov	r0, r5
 8014f9e:	f7ff fc78 	bl	8014892 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8014fa2:	8839      	ldrh	r1, [r7, #0]
 8014fa4:	88ba      	ldrh	r2, [r7, #4]
 8014fa6:	b280      	uxth	r0, r0
 8014fa8:	6823      	ldr	r3, [r4, #0]
 8014faa:	440a      	add	r2, r1
 8014fac:	1a09      	subs	r1, r1, r0
 8014fae:	4402      	add	r2, r0
 8014fb0:	f10d 000e 	add.w	r0, sp, #14
 8014fb4:	b209      	sxth	r1, r1
 8014fb6:	9000      	str	r0, [sp, #0]
 8014fb8:	b212      	sxth	r2, r2
 8014fba:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 8014fbe:	4620      	mov	r0, r4
 8014fc0:	ab03      	add	r3, sp, #12
 8014fc2:	47c0      	blx	r8
 8014fc4:	2800      	cmp	r0, #0
 8014fc6:	d0de      	beq.n	8014f86 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 8014fc8:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 8014fcc:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 8014fd0:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 8014fd4:	18ca      	adds	r2, r1, r3
 8014fd6:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8014fda:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014fde:	4639      	mov	r1, r7
 8014fe0:	1a9b      	subs	r3, r3, r2
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014fe8:	a804      	add	r0, sp, #16
 8014fea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014fee:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014ff2:	f7fd fcb7 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8014ff6:	aa04      	add	r2, sp, #16
 8014ff8:	4631      	mov	r1, r6
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f00f f8f4 	bl	80241e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8015000:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 8015004:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015008:	2f00      	cmp	r7, #0
 801500a:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801500e:	dd03      	ble.n	8015018 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8015010:	42bb      	cmp	r3, r7
 8015012:	da01      	bge.n	8015018 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 8015014:	42ba      	cmp	r2, r7
 8015016:	da11      	bge.n	801503c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xd0>
 8015018:	9200      	str	r2, [sp, #0]
 801501a:	4622      	mov	r2, r4
 801501c:	4629      	mov	r1, r5
 801501e:	4630      	mov	r0, r6
 8015020:	f7ff ff19 	bl	8014e56 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8015024:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015028:	4628      	mov	r0, r5
 801502a:	f00f f999 	bl	8024360 <_ZN8touchgfx6Canvas6renderEh>
 801502e:	4b0b      	ldr	r3, [pc, #44]	; (801505c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xf0>)
 8015030:	4604      	mov	r4, r0
 8015032:	a80e      	add	r0, sp, #56	; 0x38
 8015034:	9306      	str	r3, [sp, #24]
 8015036:	f001 fa65 	bl	8016504 <_ZN8touchgfx7OutlineD1Ev>
 801503a:	e7a5      	b.n	8014f88 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801503c:	1e7a      	subs	r2, r7, #1
 801503e:	4629      	mov	r1, r5
 8015040:	4630      	mov	r0, r6
 8015042:	b212      	sxth	r2, r2
 8015044:	9200      	str	r2, [sp, #0]
 8015046:	4622      	mov	r2, r4
 8015048:	f7ff ff05 	bl	8014e56 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801504c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015050:	9300      	str	r3, [sp, #0]
 8015052:	463b      	mov	r3, r7
 8015054:	e7e1      	b.n	801501a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 8015056:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 801505a:	deff      	udf	#255	; 0xff
 801505c:	0802838c 	.word	0x0802838c

08015060 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 8015060:	4770      	bx	lr

08015062 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 8015062:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015064:	b118      	cbz	r0, 801506e <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 8015066:	6803      	ldr	r3, [r0, #0]
 8015068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801506c:	4718      	bx	r3
 801506e:	4770      	bx	lr

08015070 <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8015070:	680b      	ldr	r3, [r1, #0]
 8015072:	4608      	mov	r0, r1
 8015074:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015078:	4718      	bx	r3

0801507a <_ZNK8touchgfx12GraphLabelsX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 801507a:	680b      	ldr	r3, [r1, #0]
 801507c:	4608      	mov	r0, r1
 801507e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015082:	4718      	bx	r3

08015084 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 8015084:	680b      	ldr	r3, [r1, #0]
 8015086:	4608      	mov	r0, r1
 8015088:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801508c:	4718      	bx	r3

0801508e <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 801508e:	680b      	ldr	r3, [r1, #0]
 8015090:	4608      	mov	r0, r1
 8015092:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8015096:	4718      	bx	r3

08015098 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 8015098:	4a38      	ldr	r2, [pc, #224]	; (801517c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe4>)
 801509a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 80150a0:	b087      	sub	sp, #28
 80150a2:	8812      	ldrh	r2, [r2, #0]
 80150a4:	4604      	mov	r4, r0
 80150a6:	4689      	mov	r9, r1
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d937      	bls.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80150ac:	4a34      	ldr	r2, [pc, #208]	; (8015180 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xe8>)
 80150ae:	6812      	ldr	r2, [r2, #0]
 80150b0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80150b4:	4b33      	ldr	r3, [pc, #204]	; (8015184 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xec>)
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80150bc:	f1b8 0f00 	cmp.w	r8, #0
 80150c0:	d02c      	beq.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80150c2:	6803      	ldr	r3, [r0, #0]
 80150c4:	6945      	ldr	r5, [r0, #20]
 80150c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150c8:	2d00      	cmp	r5, #0
 80150ca:	d052      	beq.n	8015172 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xda>
 80150cc:	696f      	ldr	r7, [r5, #20]
 80150ce:	4798      	blx	r3
 80150d0:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 80150d4:	fb15 f000 	smulbb	r0, r5, r0
 80150d8:	b280      	uxth	r0, r0
 80150da:	1c45      	adds	r5, r0, #1
 80150dc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80150e0:	122d      	asrs	r5, r5, #8
 80150e2:	d01b      	beq.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 80150e4:	6823      	ldr	r3, [r4, #0]
 80150e6:	4639      	mov	r1, r7
 80150e8:	4620      	mov	r0, r4
 80150ea:	b2ed      	uxtb	r5, r5
 80150ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150f0:	4798      	blx	r3
 80150f2:	6823      	ldr	r3, [r4, #0]
 80150f4:	4606      	mov	r6, r0
 80150f6:	4639      	mov	r1, r7
 80150f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80150fc:	4620      	mov	r0, r4
 80150fe:	4798      	blx	r3
 8015100:	4683      	mov	fp, r0
 8015102:	b970      	cbnz	r0, 8015122 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8015104:	b96e      	cbnz	r6, 8015122 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x8a>
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	4642      	mov	r2, r8
 801510a:	9600      	str	r6, [sp, #0]
 801510c:	4649      	mov	r1, r9
 801510e:	4620      	mov	r0, r4
 8015110:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8015114:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8015118:	463b      	mov	r3, r7
 801511a:	47a8      	blx	r5
 801511c:	b007      	add	sp, #28
 801511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015122:	2e00      	cmp	r6, #0
 8015124:	ddfa      	ble.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	4639      	mov	r1, r7
 801512a:	4620      	mov	r0, r4
 801512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015130:	4798      	blx	r3
 8015132:	6823      	ldr	r3, [r4, #0]
 8015134:	4682      	mov	sl, r0
 8015136:	4639      	mov	r1, r7
 8015138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801513c:	4620      	mov	r0, r4
 801513e:	4798      	blx	r3
 8015140:	4582      	cmp	sl, r0
 8015142:	bfde      	ittt	le
 8015144:	4603      	movle	r3, r0
 8015146:	4650      	movle	r0, sl
 8015148:	469a      	movle	sl, r3
 801514a:	ebaa 0300 	sub.w	r3, sl, r0
 801514e:	fb93 f3f6 	sdiv	r3, r3, r6
 8015152:	2b64      	cmp	r3, #100	; 0x64
 8015154:	dce2      	bgt.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015156:	6823      	ldr	r3, [r4, #0]
 8015158:	4642      	mov	r2, r8
 801515a:	9000      	str	r0, [sp, #0]
 801515c:	4649      	mov	r1, r9
 801515e:	4620      	mov	r0, r4
 8015160:	e9cd b503 	strd	fp, r5, [sp, #12]
 8015164:	e9cd a601 	strd	sl, r6, [sp, #4]
 8015168:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 801516c:	463b      	mov	r3, r7
 801516e:	47a8      	blx	r5
 8015170:	e7d4      	b.n	801511c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x84>
 8015172:	4798      	blx	r3
 8015174:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8015178:	deff      	udf	#255	; 0xff
 801517a:	bf00      	nop
 801517c:	240100bc 	.word	0x240100bc
 8015180:	240100b8 	.word	0x240100b8
 8015184:	240100c0 	.word	0x240100c0

08015188 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 8015188:	4770      	bx	lr

0801518a <_ZN8touchgfx12GraphLabelsXD1Ev>:
 801518a:	4770      	bx	lr

0801518c <_ZNK8touchgfx12GraphLabelsX31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 801518c:	b538      	push	{r3, r4, r5, lr}
 801518e:	680a      	ldr	r2, [r1, #0]
 8015190:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8015194:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8015198:	4608      	mov	r0, r1
 801519a:	4790      	blx	r2
 801519c:	4629      	mov	r1, r5
 801519e:	4602      	mov	r2, r0
 80151a0:	4620      	mov	r0, r4
 80151a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151a6:	f7ff ba21 	b.w	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080151aa <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 80151aa:	b538      	push	{r3, r4, r5, lr}
 80151ac:	680a      	ldr	r2, [r1, #0]
 80151ae:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 80151b2:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80151b6:	4608      	mov	r0, r1
 80151b8:	4790      	blx	r2
 80151ba:	4629      	mov	r1, r5
 80151bc:	4602      	mov	r2, r0
 80151be:	4620      	mov	r0, r4
 80151c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80151c4:	f7ff ba12 	b.w	80145ec <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080151c8 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 80151c8:	b510      	push	{r4, lr}
 80151ca:	4604      	mov	r4, r0
 80151cc:	214c      	movs	r1, #76	; 0x4c
 80151ce:	f00f fa46 	bl	802465e <_ZdlPvj>
 80151d2:	4620      	mov	r0, r4
 80151d4:	bd10      	pop	{r4, pc}

080151d6 <_ZN8touchgfx12GraphLabelsXD0Ev>:
 80151d6:	b510      	push	{r4, lr}
 80151d8:	4604      	mov	r4, r0
 80151da:	214c      	movs	r1, #76	; 0x4c
 80151dc:	f00f fa3f 	bl	802465e <_ZdlPvj>
 80151e0:	4620      	mov	r0, r4
 80151e2:	bd10      	pop	{r4, pc}

080151e4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 80151e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e8:	b08d      	sub	sp, #52	; 0x34
 80151ea:	4606      	mov	r6, r0
 80151ec:	9309      	str	r3, [sp, #36]	; 0x24
 80151ee:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80151f2:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 80151f6:	e9cd 1207 	strd	r1, r2, [sp, #28]
 80151fa:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 80151fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015200:	f1b9 0f00 	cmp.w	r9, #0
 8015204:	d117      	bne.n	8015236 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 8015206:	2f00      	cmp	r7, #0
 8015208:	dc7c      	bgt.n	8015304 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 801520a:	f1b8 0f00 	cmp.w	r8, #0
 801520e:	da01      	bge.n	8015214 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 8015210:	2f00      	cmp	r7, #0
 8015212:	d17a      	bne.n	801530a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015216:	4630      	mov	r0, r6
 8015218:	6832      	ldr	r2, [r6, #0]
 801521a:	9318      	str	r3, [sp, #96]	; 0x60
 801521c:	2300      	movs	r3, #0
 801521e:	9907      	ldr	r1, [sp, #28]
 8015220:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 8015224:	f8d2 408c 	ldr.w	r4, [r2, #140]	; 0x8c
 8015228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801522c:	46a4      	mov	ip, r4
 801522e:	b00d      	add	sp, #52	; 0x34
 8015230:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015234:	4760      	bx	ip
 8015236:	fb97 f4f9 	sdiv	r4, r7, r9
 801523a:	1e63      	subs	r3, r4, #1
 801523c:	9305      	str	r3, [sp, #20]
 801523e:	f1ba 0f00 	cmp.w	sl, #0
 8015242:	d122      	bne.n	801528a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 8015244:	fb03 f509 	mul.w	r5, r3, r9
 8015248:	fb98 faf9 	sdiv	sl, r8, r9
 801524c:	f10a 0a02 	add.w	sl, sl, #2
 8015250:	9b05      	ldr	r3, [sp, #20]
 8015252:	459a      	cmp	sl, r3
 8015254:	d059      	beq.n	801530a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015256:	42af      	cmp	r7, r5
 8015258:	dc5a      	bgt.n	8015310 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 801525a:	45a8      	cmp	r8, r5
 801525c:	da01      	bge.n	8015262 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 801525e:	42af      	cmp	r7, r5
 8015260:	db0e      	blt.n	8015280 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8015262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015264:	4630      	mov	r0, r6
 8015266:	9905      	ldr	r1, [sp, #20]
 8015268:	9302      	str	r3, [sp, #8]
 801526a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801526c:	6832      	ldr	r2, [r6, #0]
 801526e:	434b      	muls	r3, r1
 8015270:	9907      	ldr	r1, [sp, #28]
 8015272:	e9cd 5300 	strd	r5, r3, [sp]
 8015276:	f8d2 b08c 	ldr.w	fp, [r2, #140]	; 0x8c
 801527a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801527e:	47d8      	blx	fp
 8015280:	9b05      	ldr	r3, [sp, #20]
 8015282:	444d      	add	r5, r9
 8015284:	3301      	adds	r3, #1
 8015286:	9305      	str	r3, [sp, #20]
 8015288:	e7e2      	b.n	8015250 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 801528a:	fb97 f3fa 	sdiv	r3, r7, sl
 801528e:	3b01      	subs	r3, #1
 8015290:	9306      	str	r3, [sp, #24]
 8015292:	9a06      	ldr	r2, [sp, #24]
 8015294:	fb98 f3fa 	sdiv	r3, r8, sl
 8015298:	fb02 fb0a 	mul.w	fp, r2, sl
 801529c:	9a05      	ldr	r2, [sp, #20]
 801529e:	3302      	adds	r3, #2
 80152a0:	fb02 f509 	mul.w	r5, r2, r9
 80152a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80152a6:	45ab      	cmp	fp, r5
 80152a8:	dd1d      	ble.n	80152e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80152aa:	42af      	cmp	r7, r5
 80152ac:	dc08      	bgt.n	80152c0 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 80152ae:	45a8      	cmp	r8, r5
 80152b0:	da08      	bge.n	80152c4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80152b2:	42af      	cmp	r7, r5
 80152b4:	da06      	bge.n	80152c4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 80152b6:	9b05      	ldr	r3, [sp, #20]
 80152b8:	444d      	add	r5, r9
 80152ba:	3301      	adds	r3, #1
 80152bc:	9305      	str	r3, [sp, #20]
 80152be:	e7f2      	b.n	80152a6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 80152c0:	45a8      	cmp	r8, r5
 80152c2:	dcf8      	bgt.n	80152b6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80152c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152c6:	4630      	mov	r0, r6
 80152c8:	9905      	ldr	r1, [sp, #20]
 80152ca:	9302      	str	r3, [sp, #8]
 80152cc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80152ce:	6832      	ldr	r2, [r6, #0]
 80152d0:	434b      	muls	r3, r1
 80152d2:	9907      	ldr	r1, [sp, #28]
 80152d4:	e9cd 5300 	strd	r5, r3, [sp]
 80152d8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80152dc:	461c      	mov	r4, r3
 80152de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80152e2:	47a0      	blx	r4
 80152e4:	e7e7      	b.n	80152b6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 80152e6:	45ab      	cmp	fp, r5
 80152e8:	db04      	blt.n	80152f4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 80152ea:	9b05      	ldr	r3, [sp, #20]
 80152ec:	444d      	add	r5, r9
 80152ee:	3301      	adds	r3, #1
 80152f0:	9305      	str	r3, [sp, #20]
 80152f2:	e7f8      	b.n	80152e6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 80152f4:	9b06      	ldr	r3, [sp, #24]
 80152f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152f8:	3301      	adds	r3, #1
 80152fa:	4293      	cmp	r3, r2
 80152fc:	9306      	str	r3, [sp, #24]
 80152fe:	d004      	beq.n	801530a <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 8015300:	44d3      	add	fp, sl
 8015302:	e7d0      	b.n	80152a6 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 8015304:	f1b8 0f00 	cmp.w	r8, #0
 8015308:	dd84      	ble.n	8015214 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 801530a:	b00d      	add	sp, #52	; 0x34
 801530c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015310:	45a8      	cmp	r8, r5
 8015312:	dcb5      	bgt.n	8015280 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 8015314:	e7a5      	b.n	8015262 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

08015316 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 8015316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801531a:	f9b3 4120 	ldrsh.w	r4, [r3, #288]	; 0x120
 801531e:	b089      	sub	sp, #36	; 0x24
 8015320:	468a      	mov	sl, r1
 8015322:	4693      	mov	fp, r2
 8015324:	2c00      	cmp	r4, #0
 8015326:	9007      	str	r0, [sp, #28]
 8015328:	461d      	mov	r5, r3
 801532a:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801532e:	e9dd c612 	ldrd	ip, r6, [sp, #72]	; 0x48
 8015332:	e9dd 7814 	ldrd	r7, r8, [sp, #80]	; 0x50
 8015336:	dd03      	ble.n	8015340 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 8015338:	4564      	cmp	r4, ip
 801533a:	dd01      	ble.n	8015340 <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x2a>
 801533c:	42b4      	cmp	r4, r6
 801533e:	dd0e      	ble.n	801535e <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x48>
 8015340:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8015344:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8015348:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 801534c:	462b      	mov	r3, r5
 801534e:	465a      	mov	r2, fp
 8015350:	4651      	mov	r1, sl
 8015352:	9807      	ldr	r0, [sp, #28]
 8015354:	b009      	add	sp, #36	; 0x24
 8015356:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535a:	f7ff bf43 	b.w	80151e4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 801535e:	f104 3eff 	add.w	lr, r4, #4294967295
 8015362:	9702      	str	r7, [sp, #8]
 8015364:	e9cd 8903 	strd	r8, r9, [sp, #12]
 8015368:	e9cd ce00 	strd	ip, lr, [sp]
 801536c:	f7ff ff3a 	bl	80151e4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>
 8015370:	9412      	str	r4, [sp, #72]	; 0x48
 8015372:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
 8015376:	e9cd 6713 	strd	r6, r7, [sp, #76]	; 0x4c
 801537a:	e7e7      	b.n	801534c <_ZNK8touchgfx12GraphLabelsX14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x36>

0801537c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 801537c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015380:	f1b3 0900 	subs.w	r9, r3, #0
 8015384:	460d      	mov	r5, r1
 8015386:	4690      	mov	r8, r2
 8015388:	9f08      	ldr	r7, [sp, #32]
 801538a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 801538e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015390:	da18      	bge.n	80153c4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8015392:	2a01      	cmp	r2, #1
 8015394:	dd16      	ble.n	80153c4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 8015396:	232d      	movs	r3, #45	; 0x2d
 8015398:	f1c9 0900 	rsb	r9, r9, #0
 801539c:	2001      	movs	r0, #1
 801539e:	800b      	strh	r3, [r1, #0]
 80153a0:	2f00      	cmp	r7, #0
 80153a2:	d111      	bne.n	80153c8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 80153a4:	2302      	movs	r3, #2
 80153a6:	eba8 0100 	sub.w	r1, r8, r0
 80153aa:	4a26      	ldr	r2, [pc, #152]	; (8015444 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80153ac:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80153b0:	b289      	uxth	r1, r1
 80153b2:	fb96 f3f3 	sdiv	r3, r6, r3
 80153b6:	444b      	add	r3, r9
 80153b8:	fb93 f3f6 	sdiv	r3, r3, r6
 80153bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153c0:	f006 bbe6 	b.w	801bb90 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80153c4:	2000      	movs	r0, #0
 80153c6:	e7eb      	b.n	80153a0 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 80153c8:	dd39      	ble.n	801543e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 80153ca:	eba8 0100 	sub.w	r1, r8, r0
 80153ce:	4a1d      	ldr	r2, [pc, #116]	; (8015444 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 80153d0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 80153d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80153d8:	b289      	uxth	r1, r1
 80153da:	fb99 f4f6 	sdiv	r4, r9, r6
 80153de:	4623      	mov	r3, r4
 80153e0:	f006 fbd6 	bl	801bb90 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80153e4:	4628      	mov	r0, r5
 80153e6:	f006 f861 	bl	801b4ac <_ZN8touchgfx7Unicode6strlenEPKt>
 80153ea:	4580      	cmp	r8, r0
 80153ec:	dd27      	ble.n	801543e <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 80153ee:	f04f 0e02 	mov.w	lr, #2
 80153f2:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 80153f6:	fb06 9314 	mls	r3, r6, r4, r9
 80153fa:	3001      	adds	r0, #1
 80153fc:	2200      	movs	r2, #0
 80153fe:	f04f 090a 	mov.w	r9, #10
 8015402:	f107 3aff 	add.w	sl, r7, #4294967295
 8015406:	fb96 fefe 	sdiv	lr, r6, lr
 801540a:	4580      	cmp	r8, r0
 801540c:	4684      	mov	ip, r0
 801540e:	dd13      	ble.n	8015438 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 8015410:	fb09 f303 	mul.w	r3, r9, r3
 8015414:	4592      	cmp	sl, r2
 8015416:	f102 0201 	add.w	r2, r2, #1
 801541a:	f100 0c01 	add.w	ip, r0, #1
 801541e:	bf08      	it	eq
 8015420:	4473      	addeq	r3, lr
 8015422:	4297      	cmp	r7, r2
 8015424:	fb93 f4f6 	sdiv	r4, r3, r6
 8015428:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801542c:	fb06 3314 	mls	r3, r6, r4, r3
 8015430:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 8015434:	4660      	mov	r0, ip
 8015436:	d1e8      	bne.n	801540a <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 8015438:	2300      	movs	r3, #0
 801543a:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 801543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015442:	bf00      	nop
 8015444:	08027424 	.word	0x08027424

08015448 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs>:
 8015448:	4a69      	ldr	r2, [pc, #420]	; (80155f0 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a8>)
 801544a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801544e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8015450:	b093      	sub	sp, #76	; 0x4c
 8015452:	8812      	ldrh	r2, [r2, #0]
 8015454:	4604      	mov	r4, r0
 8015456:	460e      	mov	r6, r1
 8015458:	429a      	cmp	r2, r3
 801545a:	d93a      	bls.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 801545c:	4a65      	ldr	r2, [pc, #404]	; (80155f4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1ac>)
 801545e:	6812      	ldr	r2, [r2, #0]
 8015460:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015464:	4b64      	ldr	r3, [pc, #400]	; (80155f8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b0>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801546c:	f1b8 0f00 	cmp.w	r8, #0
 8015470:	d02f      	beq.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8015472:	6803      	ldr	r3, [r0, #0]
 8015474:	6945      	ldr	r5, [r0, #20]
 8015476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015478:	2d00      	cmp	r5, #0
 801547a:	f000 80b5 	beq.w	80155e8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1a0>
 801547e:	696f      	ldr	r7, [r5, #20]
 8015480:	4798      	blx	r3
 8015482:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015486:	fb13 f000 	smulbb	r0, r3, r0
 801548a:	b280      	uxth	r0, r0
 801548c:	1c43      	adds	r3, r0, #1
 801548e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8015492:	0a03      	lsrs	r3, r0, #8
 8015494:	d01d      	beq.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 8015496:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015498:	4620      	mov	r0, r4
 801549a:	6823      	ldr	r3, [r4, #0]
 801549c:	434e      	muls	r6, r1
 801549e:	4639      	mov	r1, r7
 80154a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80154a4:	4798      	blx	r3
 80154a6:	6823      	ldr	r3, [r4, #0]
 80154a8:	4605      	mov	r5, r0
 80154aa:	4639      	mov	r1, r7
 80154ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80154b0:	4620      	mov	r0, r4
 80154b2:	4798      	blx	r3
 80154b4:	2d00      	cmp	r5, #0
 80154b6:	dd0f      	ble.n	80154d8 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x90>
 80154b8:	fb96 f3f5 	sdiv	r3, r6, r5
 80154bc:	436b      	muls	r3, r5
 80154be:	1b9a      	subs	r2, r3, r6
 80154c0:	4253      	negs	r3, r2
 80154c2:	4153      	adcs	r3, r2
 80154c4:	2800      	cmp	r0, #0
 80154c6:	dd09      	ble.n	80154dc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x94>
 80154c8:	fb96 f2f0 	sdiv	r2, r6, r0
 80154cc:	4350      	muls	r0, r2
 80154ce:	42b0      	cmp	r0, r6
 80154d0:	d10d      	bne.n	80154ee <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 80154d2:	b013      	add	sp, #76	; 0x4c
 80154d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154d8:	2300      	movs	r3, #0
 80154da:	e7f3      	b.n	80154c4 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x7c>
 80154dc:	d107      	bne.n	80154ee <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa6>
 80154de:	2d00      	cmp	r5, #0
 80154e0:	d17f      	bne.n	80155e2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x19a>
 80154e2:	2e00      	cmp	r6, #0
 80154e4:	d063      	beq.n	80155ae <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x166>
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d0f3      	beq.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80154ea:	462a      	mov	r2, r5
 80154ec:	e007      	b.n	80154fe <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d0ef      	beq.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80154f2:	2d00      	cmp	r5, #0
 80154f4:	d0f9      	beq.n	80154ea <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xa2>
 80154f6:	fb96 f2f5 	sdiv	r2, r6, r5
 80154fa:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80154fc:	436a      	muls	r2, r5
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	4631      	mov	r1, r6
 8015502:	4638      	mov	r0, r7
 8015504:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015508:	4798      	blx	r3
 801550a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801550c:	2214      	movs	r2, #20
 801550e:	a908      	add	r1, sp, #32
 8015510:	9302      	str	r3, [sp, #8]
 8015512:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8015516:	9301      	str	r3, [sp, #4]
 8015518:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 801551c:	9300      	str	r3, [sp, #0]
 801551e:	4603      	mov	r3, r0
 8015520:	4620      	mov	r0, r4
 8015522:	f7ff ff2b 	bl	801537c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8015526:	4b35      	ldr	r3, [pc, #212]	; (80155fc <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x1b4>)
 8015528:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 801552a:	6818      	ldr	r0, [r3, #0]
 801552c:	f7f1 ffe4 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015530:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015534:	4681      	mov	r9, r0
 8015536:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801553a:	f8d8 3000 	ldr.w	r3, [r8]
 801553e:	d138      	bne.n	80155b2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x16a>
 8015540:	4601      	mov	r1, r0
 8015542:	699b      	ldr	r3, [r3, #24]
 8015544:	aa08      	add	r2, sp, #32
 8015546:	4640      	mov	r0, r8
 8015548:	4798      	blx	r3
 801554a:	b205      	sxth	r5, r0
 801554c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015550:	2002      	movs	r0, #2
 8015552:	4631      	mov	r1, r6
 8015554:	f8b7 906c 	ldrh.w	r9, [r7, #108]	; 0x6c
 8015558:	2b01      	cmp	r3, #1
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	bf88      	it	hi
 801555e:	f105 0801 	addhi.w	r8, r5, #1
 8015562:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015566:	bf8c      	ite	hi
 8015568:	fb98 f8f0 	sdivhi	r8, r8, r0
 801556c:	fb95 f8f0 	sdivls	r8, r5, r0
 8015570:	4638      	mov	r0, r7
 8015572:	bf88      	it	hi
 8015574:	fa0f f888 	sxthhi.w	r8, r8
 8015578:	4798      	blx	r3
 801557a:	ab12      	add	r3, sp, #72	; 0x48
 801557c:	f843 0d34 	str.w	r0, [r3, #-52]!
 8015580:	4618      	mov	r0, r3
 8015582:	f7f4 feea 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015586:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801558a:	4448      	add	r0, r9
 801558c:	2200      	movs	r2, #0
 801558e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015592:	a906      	add	r1, sp, #24
 8015594:	eba0 0808 	sub.w	r8, r0, r8
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	f8ad 201a 	strh.w	r2, [sp, #26]
 801559e:	4620      	mov	r0, r4
 80155a0:	f8ad 8018 	strh.w	r8, [sp, #24]
 80155a4:	f8ad 501c 	strh.w	r5, [sp, #28]
 80155a8:	691b      	ldr	r3, [r3, #16]
 80155aa:	4798      	blx	r3
 80155ac:	e791      	b.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80155ae:	4632      	mov	r2, r6
 80155b0:	e7a5      	b.n	80154fe <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xb6>
 80155b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155b4:	4640      	mov	r0, r8
 80155b6:	4798      	blx	r3
 80155b8:	f8d8 3000 	ldr.w	r3, [r8]
 80155bc:	4605      	mov	r5, r0
 80155be:	aa08      	add	r2, sp, #32
 80155c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80155c2:	4649      	mov	r1, r9
 80155c4:	4640      	mov	r0, r8
 80155c6:	4798      	blx	r3
 80155c8:	fb15 f500 	smulbb	r5, r5, r0
 80155cc:	f8d8 3000 	ldr.w	r3, [r8]
 80155d0:	aa08      	add	r2, sp, #32
 80155d2:	b2ad      	uxth	r5, r5
 80155d4:	4649      	mov	r1, r9
 80155d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155d8:	4640      	mov	r0, r8
 80155da:	4798      	blx	r3
 80155dc:	4405      	add	r5, r0
 80155de:	b22d      	sxth	r5, r5
 80155e0:	e7b4      	b.n	801554c <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x104>
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d187      	bne.n	80154f6 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0xae>
 80155e6:	e774      	b.n	80154d2 <_ZN8touchgfx12GraphLabelsX22invalidateGraphPointAtEs+0x8a>
 80155e8:	4798      	blx	r3
 80155ea:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80155ee:	deff      	udf	#255	; 0xff
 80155f0:	240100bc 	.word	0x240100bc
 80155f4:	240100b8 	.word	0x240100b8
 80155f8:	240100c0 	.word	0x240100c0
 80155fc:	240100c4 	.word	0x240100c4

08015600 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 8015600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015604:	b09b      	sub	sp, #108	; 0x6c
 8015606:	461e      	mov	r6, r3
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	4604      	mov	r4, r0
 801560c:	af1a      	add	r7, sp, #104	; 0x68
 801560e:	9104      	str	r1, [sp, #16]
 8015610:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8015614:	4630      	mov	r0, r6
 8015616:	9924      	ldr	r1, [sp, #144]	; 0x90
 8015618:	4690      	mov	r8, r2
 801561a:	4798      	blx	r3
 801561c:	f847 0d28 	str.w	r0, [r7, #-40]!
 8015620:	4638      	mov	r0, r7
 8015622:	f7f4 fe9a 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8015626:	f8b6 3116 	ldrh.w	r3, [r6, #278]	; 0x116
 801562a:	1ac0      	subs	r0, r0, r3
 801562c:	b200      	sxth	r0, r0
 801562e:	2800      	cmp	r0, #0
 8015630:	f2c0 80b8 	blt.w	80157a4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8015634:	f8b6 2118 	ldrh.w	r2, [r6, #280]	; 0x118
 8015638:	441a      	add	r2, r3
 801563a:	f8b6 3040 	ldrh.w	r3, [r6, #64]	; 0x40
 801563e:	1a9b      	subs	r3, r3, r2
 8015640:	b21b      	sxth	r3, r3
 8015642:	4298      	cmp	r0, r3
 8015644:	f280 80ae 	bge.w	80157a4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8015648:	6833      	ldr	r3, [r6, #0]
 801564a:	4630      	mov	r0, r6
 801564c:	e9dd 1224 	ldrd	r1, r2, [sp, #144]	; 0x90
 8015650:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8015654:	4798      	blx	r3
 8015656:	6833      	ldr	r3, [r6, #0]
 8015658:	f8b4 9042 	ldrh.w	r9, [r4, #66]	; 0x42
 801565c:	4605      	mov	r5, r0
 801565e:	f8b4 b044 	ldrh.w	fp, [r4, #68]	; 0x44
 8015662:	4630      	mov	r0, r6
 8015664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015668:	4798      	blx	r3
 801566a:	f8cd 9000 	str.w	r9, [sp]
 801566e:	462b      	mov	r3, r5
 8015670:	2214      	movs	r2, #20
 8015672:	4639      	mov	r1, r7
 8015674:	e9cd b001 	strd	fp, r0, [sp, #4]
 8015678:	4620      	mov	r0, r4
 801567a:	f7ff fe7f 	bl	801537c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 801567e:	4b57      	ldr	r3, [pc, #348]	; (80157dc <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1dc>)
 8015680:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8015682:	6818      	ldr	r0, [r3, #0]
 8015684:	f7f1 ff38 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015688:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801568c:	4681      	mov	r9, r0
 801568e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015692:	f8d8 3000 	ldr.w	r3, [r8]
 8015696:	f040 8088 	bne.w	80157aa <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1aa>
 801569a:	4601      	mov	r1, r0
 801569c:	699b      	ldr	r3, [r3, #24]
 801569e:	463a      	mov	r2, r7
 80156a0:	4640      	mov	r0, r8
 80156a2:	4798      	blx	r3
 80156a4:	b205      	sxth	r5, r0
 80156a6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80156aa:	2002      	movs	r0, #2
 80156ac:	6832      	ldr	r2, [r6, #0]
 80156ae:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80156b2:	2b01      	cmp	r3, #1
 80156b4:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
 80156b8:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 80156bc:	bf88      	it	hi
 80156be:	f105 0b01 	addhi.w	fp, r5, #1
 80156c2:	9305      	str	r3, [sp, #20]
 80156c4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80156c6:	bf8c      	ite	hi
 80156c8:	fb9b fbf0 	sdivhi	fp, fp, r0
 80156cc:	fb95 fbf0 	sdivls	fp, r5, r0
 80156d0:	4630      	mov	r0, r6
 80156d2:	bf88      	it	hi
 80156d4:	fa0f fb8b 	sxthhi.w	fp, fp
 80156d8:	4790      	blx	r2
 80156da:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 80156de:	4650      	mov	r0, sl
 80156e0:	2600      	movs	r6, #0
 80156e2:	f7f4 fe3a 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80156e6:	9b05      	ldr	r3, [sp, #20]
 80156e8:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80156ec:	4418      	add	r0, r3
 80156ee:	f8ad 5020 	strh.w	r5, [sp, #32]
 80156f2:	ad07      	add	r5, sp, #28
 80156f4:	f8ad 601e 	strh.w	r6, [sp, #30]
 80156f8:	eba0 0b0b 	sub.w	fp, r0, fp
 80156fc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 8015700:	f8ad b01c 	strh.w	fp, [sp, #28]
 8015704:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8015708:	e895 0003 	ldmia.w	r5, {r0, r1}
 801570c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015710:	9904      	ldr	r1, [sp, #16]
 8015712:	4658      	mov	r0, fp
 8015714:	f7fd f926 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8015718:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801571c:	42b3      	cmp	r3, r6
 801571e:	dd41      	ble.n	80157a4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8015720:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8015724:	42b3      	cmp	r3, r6
 8015726:	dd3d      	ble.n	80157a4 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a4>
 8015728:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801572c:	4620      	mov	r0, r4
 801572e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015732:	1a5b      	subs	r3, r3, r1
 8015734:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015738:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801573c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8015740:	1a5b      	subs	r3, r3, r1
 8015742:	4629      	mov	r1, r5
 8015744:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015748:	6823      	ldr	r3, [r4, #0]
 801574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801574c:	4798      	blx	r3
 801574e:	4b24      	ldr	r3, [pc, #144]	; (80157e0 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1e0>)
 8015750:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015758:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801575c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801575e:	785b      	ldrb	r3, [r3, #1]
 8015760:	910d      	str	r1, [sp, #52]	; 0x34
 8015762:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8015766:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801576a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801576e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8015772:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 8015776:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 801577a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801577e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 8015782:	f8ad 6038 	strh.w	r6, [sp, #56]	; 0x38
 8015786:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
 801578a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801578e:	f7fd fbb9 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 8015792:	465b      	mov	r3, fp
 8015794:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8015798:	e9cd a900 	strd	sl, r9, [sp]
 801579c:	e895 0006 	ldmia.w	r5, {r1, r2}
 80157a0:	f7f1 fe5c 	bl	800745c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80157a4:	b01b      	add	sp, #108	; 0x6c
 80157a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157ac:	4640      	mov	r0, r8
 80157ae:	4798      	blx	r3
 80157b0:	f8d8 3000 	ldr.w	r3, [r8]
 80157b4:	4605      	mov	r5, r0
 80157b6:	463a      	mov	r2, r7
 80157b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80157ba:	4649      	mov	r1, r9
 80157bc:	4640      	mov	r0, r8
 80157be:	4798      	blx	r3
 80157c0:	fb15 f500 	smulbb	r5, r5, r0
 80157c4:	f8d8 3000 	ldr.w	r3, [r8]
 80157c8:	463a      	mov	r2, r7
 80157ca:	b2ad      	uxth	r5, r5
 80157cc:	4649      	mov	r1, r9
 80157ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d0:	4640      	mov	r0, r8
 80157d2:	4798      	blx	r3
 80157d4:	4405      	add	r5, r0
 80157d6:	b22d      	sxth	r5, r5
 80157d8:	e765      	b.n	80156a6 <_ZNK8touchgfx12GraphLabelsX10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa6>
 80157da:	bf00      	nop
 80157dc:	240100c4 	.word	0x240100c4
 80157e0:	240100b8 	.word	0x240100b8

080157e4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 80157e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e8:	b09b      	sub	sp, #108	; 0x6c
 80157ea:	4698      	mov	r8, r3
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	4604      	mov	r4, r0
 80157f0:	ae1a      	add	r6, sp, #104	; 0x68
 80157f2:	9104      	str	r1, [sp, #16]
 80157f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80157f8:	4640      	mov	r0, r8
 80157fa:	9924      	ldr	r1, [sp, #144]	; 0x90
 80157fc:	4617      	mov	r7, r2
 80157fe:	4798      	blx	r3
 8015800:	f846 0d28 	str.w	r0, [r6, #-40]!
 8015804:	4630      	mov	r0, r6
 8015806:	f7f4 fda8 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801580a:	f8b8 3114 	ldrh.w	r3, [r8, #276]	; 0x114
 801580e:	1ac0      	subs	r0, r0, r3
 8015810:	b200      	sxth	r0, r0
 8015812:	2800      	cmp	r0, #0
 8015814:	f2c0 80ba 	blt.w	801598c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015818:	f8b8 211a 	ldrh.w	r2, [r8, #282]	; 0x11a
 801581c:	441a      	add	r2, r3
 801581e:	f8b8 3042 	ldrh.w	r3, [r8, #66]	; 0x42
 8015822:	1a9b      	subs	r3, r3, r2
 8015824:	b21b      	sxth	r3, r3
 8015826:	4298      	cmp	r0, r3
 8015828:	f280 80b0 	bge.w	801598c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801582c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801582e:	2214      	movs	r2, #20
 8015830:	4631      	mov	r1, r6
 8015832:	4620      	mov	r0, r4
 8015834:	9302      	str	r3, [sp, #8]
 8015836:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 801583a:	9301      	str	r3, [sp, #4]
 801583c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 8015840:	9300      	str	r3, [sp, #0]
 8015842:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015844:	f7ff fd9a 	bl	801537c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 8015848:	4b55      	ldr	r3, [pc, #340]	; (80159a0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1bc>)
 801584a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 801584c:	6818      	ldr	r0, [r3, #0]
 801584e:	f7f1 fe53 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015852:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015856:	4681      	mov	r9, r0
 8015858:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	f040 8098 	bne.w	8015992 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1ae>
 8015862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015864:	4638      	mov	r0, r7
 8015866:	4798      	blx	r3
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	4605      	mov	r5, r0
 801586c:	4632      	mov	r2, r6
 801586e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015870:	4649      	mov	r1, r9
 8015872:	4638      	mov	r0, r7
 8015874:	4798      	blx	r3
 8015876:	fb15 f500 	smulbb	r5, r5, r0
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	4632      	mov	r2, r6
 801587e:	b2ad      	uxth	r5, r5
 8015880:	4649      	mov	r1, r9
 8015882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015884:	4638      	mov	r0, r7
 8015886:	4798      	blx	r3
 8015888:	4405      	add	r5, r0
 801588a:	b22d      	sxth	r5, r5
 801588c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8015890:	2002      	movs	r0, #2
 8015892:	f8d8 2000 	ldr.w	r2, [r8]
 8015896:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801589a:	2b01      	cmp	r3, #1
 801589c:	f8b8 30c6 	ldrh.w	r3, [r8, #198]	; 0xc6
 80158a0:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 80158a4:	bf88      	it	hi
 80158a6:	f105 0b01 	addhi.w	fp, r5, #1
 80158aa:	9305      	str	r3, [sp, #20]
 80158ac:	9924      	ldr	r1, [sp, #144]	; 0x90
 80158ae:	bf8c      	ite	hi
 80158b0:	fb9b fbf0 	sdivhi	fp, fp, r0
 80158b4:	fb95 fbf0 	sdivls	fp, r5, r0
 80158b8:	4640      	mov	r0, r8
 80158ba:	bf88      	it	hi
 80158bc:	fa0f fb8b 	sxthhi.w	fp, fp
 80158c0:	4790      	blx	r2
 80158c2:	f84a 0d3c 	str.w	r0, [sl, #-60]!
 80158c6:	4650      	mov	r0, sl
 80158c8:	f04f 0800 	mov.w	r8, #0
 80158cc:	f7f4 fd45 	bl	800a35a <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80158d0:	9b05      	ldr	r3, [sp, #20]
 80158d2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80158d6:	4418      	add	r0, r3
 80158d8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80158dc:	ad07      	add	r5, sp, #28
 80158de:	f8ad 801c 	strh.w	r8, [sp, #28]
 80158e2:	eba0 0b0b 	sub.w	fp, r0, fp
 80158e6:	f8ad 1020 	strh.w	r1, [sp, #32]
 80158ea:	f8ad b01e 	strh.w	fp, [sp, #30]
 80158ee:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 80158f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80158f6:	e88b 0003 	stmia.w	fp, {r0, r1}
 80158fa:	9904      	ldr	r1, [sp, #16]
 80158fc:	4658      	mov	r0, fp
 80158fe:	f7fd f831 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8015902:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8015906:	4543      	cmp	r3, r8
 8015908:	dd40      	ble.n	801598c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 801590a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801590e:	4543      	cmp	r3, r8
 8015910:	dd3c      	ble.n	801598c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1a8>
 8015912:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8015916:	4620      	mov	r0, r4
 8015918:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801591c:	1a5b      	subs	r3, r3, r1
 801591e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8015922:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8015926:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801592a:	1a5b      	subs	r3, r3, r1
 801592c:	4629      	mov	r1, r5
 801592e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8015932:	6823      	ldr	r3, [r4, #0]
 8015934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015936:	4798      	blx	r3
 8015938:	4b1a      	ldr	r3, [pc, #104]	; (80159a4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x1c0>)
 801593a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8015942:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015946:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8015948:	785b      	ldrb	r3, [r3, #1]
 801594a:	910d      	str	r1, [sp, #52]	; 0x34
 801594c:	f3c3 0c01 	ubfx	ip, r3, #0, #2
 8015950:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015954:	970b      	str	r7, [sp, #44]	; 0x2c
 8015956:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 801595a:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 801595e:	f88d c030 	strb.w	ip, [sp, #48]	; 0x30
 8015962:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8015966:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
 801596a:	f8ad 8038 	strh.w	r8, [sp, #56]	; 0x38
 801596e:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 8015972:	f88d 803c 	strb.w	r8, [sp, #60]	; 0x3c
 8015976:	f7fd fac5 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 801597a:	465b      	mov	r3, fp
 801597c:	e9cd 6802 	strd	r6, r8, [sp, #8]
 8015980:	e9cd a900 	strd	sl, r9, [sp]
 8015984:	e895 0006 	ldmia.w	r5, {r1, r2}
 8015988:	f7f1 fd68 	bl	800745c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801598c:	b01b      	add	sp, #108	; 0x6c
 801598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015992:	4601      	mov	r1, r0
 8015994:	699b      	ldr	r3, [r3, #24]
 8015996:	4632      	mov	r2, r6
 8015998:	4638      	mov	r0, r7
 801599a:	4798      	blx	r3
 801599c:	b205      	sxth	r5, r0
 801599e:	e775      	b.n	801588c <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 80159a0:	240100c4 	.word	0x240100c4
 80159a4:	240100b8 	.word	0x240100b8

080159a8 <_ZN8touchgfx15GraphScrollData5clearEv>:
 80159a8:	b510      	push	{r4, lr}
 80159aa:	4604      	mov	r4, r0
 80159ac:	f7fe f99b 	bl	8013ce6 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 80159b0:	2300      	movs	r3, #0
 80159b2:	f8a4 314c 	strh.w	r3, [r4, #332]	; 0x14c
 80159b6:	bd10      	pop	{r4, pc}

080159b8 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv>:
 80159b8:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 80159bc:	f9b0 311c 	ldrsh.w	r3, [r0, #284]	; 0x11c
 80159c0:	429a      	cmp	r2, r3
 80159c2:	d101      	bne.n	80159c8 <_ZN8touchgfx15GraphScrollData14beforeAddValueEv+0x10>
 80159c4:	f7fe bccc 	b.w	8014360 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 80159c8:	4770      	bx	lr

080159ca <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs>:
 80159ca:	b538      	push	{r3, r4, r5, lr}
 80159cc:	f9b0 411c 	ldrsh.w	r4, [r0, #284]	; 0x11c
 80159d0:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 80159d4:	42a5      	cmp	r5, r4
 80159d6:	da04      	bge.n	80159e2 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x18>
 80159d8:	6803      	ldr	r3, [r0, #0]
 80159da:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80159de:	4798      	blx	r3
 80159e0:	bd38      	pop	{r3, r4, r5, pc}
 80159e2:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
 80159e6:	4408      	add	r0, r1
 80159e8:	1b00      	subs	r0, r0, r4
 80159ea:	e7f9      	b.n	80159e0 <_ZNK8touchgfx15GraphScrollData18indexToGlobalIndexEs+0x16>

080159ec <_ZN8touchgfx15GraphScrollData8addValueEi>:
 80159ec:	b570      	push	{r4, r5, r6, lr}
 80159ee:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	; 0x14c
 80159f2:	4604      	mov	r4, r0
 80159f4:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	; 0x11c
 80159f8:	1c6b      	adds	r3, r5, #1
 80159fa:	f9b0 611e 	ldrsh.w	r6, [r0, #286]	; 0x11e
 80159fe:	b21b      	sxth	r3, r3
 8015a00:	42ae      	cmp	r6, r5
 8015a02:	fb93 f0f2 	sdiv	r0, r3, r2
 8015a06:	bf08      	it	eq
 8015a08:	f8a4 311e 	strheq.w	r3, [r4, #286]	; 0x11e
 8015a0c:	4296      	cmp	r6, r2
 8015a0e:	fb02 3010 	mls	r0, r2, r0, r3
 8015a12:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 8015a16:	f8a4 014c 	strh.w	r0, [r4, #332]	; 0x14c
 8015a1a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8015a1e:	d108      	bne.n	8015a32 <_ZN8touchgfx15GraphScrollData8addValueEi+0x46>
 8015a20:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015a24:	f004 f8b9 	bl	8019b9a <_ZNK8touchgfx8Drawable10invalidateEv>
 8015a28:	4620      	mov	r0, r4
 8015a2a:	f7fe fc99 	bl	8014360 <_ZN8touchgfx17AbstractDataGraph24invalidateAllXAxisPointsEv>
 8015a2e:	4628      	mov	r0, r5
 8015a30:	bd70      	pop	{r4, r5, r6, pc}
 8015a32:	4629      	mov	r1, r5
 8015a34:	4620      	mov	r0, r4
 8015a36:	f7fe fc4c 	bl	80142d2 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8015a3a:	e7f8      	b.n	8015a2e <_ZN8touchgfx15GraphScrollData8addValueEi+0x42>

08015a3c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8015a3c:	2000      	movs	r0, #0
 8015a3e:	4770      	bx	lr

08015a40 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8015a40:	4b07      	ldr	r3, [pc, #28]	; (8015a60 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8015a42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015a44:	881b      	ldrh	r3, [r3, #0]
 8015a46:	4293      	cmp	r3, r2
 8015a48:	bf81      	itttt	hi
 8015a4a:	4b06      	ldrhi	r3, [pc, #24]	; (8015a64 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8015a4c:	681b      	ldrhi	r3, [r3, #0]
 8015a4e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8015a52:	7858      	ldrbhi	r0, [r3, #1]
 8015a54:	bf8c      	ite	hi
 8015a56:	f000 0003 	andhi.w	r0, r0, #3
 8015a5a:	2000      	movls	r0, #0
 8015a5c:	4770      	bx	lr
 8015a5e:	bf00      	nop
 8015a60:	240100bc 	.word	0x240100bc
 8015a64:	240100b8 	.word	0x240100b8

08015a68 <_ZN8touchgfx8TextAreaD1Ev>:
 8015a68:	4770      	bx	lr
	...

08015a6c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8015a6c:	4b11      	ldr	r3, [pc, #68]	; (8015ab4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8015a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a72:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015a74:	4604      	mov	r4, r0
 8015a76:	881b      	ldrh	r3, [r3, #0]
 8015a78:	428b      	cmp	r3, r1
 8015a7a:	d918      	bls.n	8015aae <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8015a7c:	6803      	ldr	r3, [r0, #0]
 8015a7e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8015a80:	4b0d      	ldr	r3, [pc, #52]	; (8015ab8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8015a82:	6818      	ldr	r0, [r3, #0]
 8015a84:	f7f1 fd38 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015a88:	6823      	ldr	r3, [r4, #0]
 8015a8a:	4606      	mov	r6, r0
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015a90:	4798      	blx	r3
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	4607      	mov	r7, r0
 8015a96:	4620      	mov	r0, r4
 8015a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015a9c:	4798      	blx	r3
 8015a9e:	463a      	mov	r2, r7
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	4631      	mov	r1, r6
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	46ac      	mov	ip, r5
 8015aa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015aac:	4760      	bx	ip
 8015aae:	2000      	movs	r0, #0
 8015ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ab4:	240100bc 	.word	0x240100bc
 8015ab8:	240100c4 	.word	0x240100c4

08015abc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8015abc:	4b18      	ldr	r3, [pc, #96]	; (8015b20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8015abe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015ac2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	881b      	ldrh	r3, [r3, #0]
 8015ac8:	428b      	cmp	r3, r1
 8015aca:	d926      	bls.n	8015b1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8015acc:	4b15      	ldr	r3, [pc, #84]	; (8015b24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8015ad4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8015ad8:	4b13      	ldr	r3, [pc, #76]	; (8015b28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8015ada:	7855      	ldrb	r5, [r2, #1]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8015ae2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8015ae6:	6833      	ldr	r3, [r6, #0]
 8015ae8:	69df      	ldr	r7, [r3, #28]
 8015aea:	4b10      	ldr	r3, [pc, #64]	; (8015b2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8015aec:	6818      	ldr	r0, [r3, #0]
 8015aee:	f7f1 fd03 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015af2:	6823      	ldr	r3, [r4, #0]
 8015af4:	4680      	mov	r8, r0
 8015af6:	4620      	mov	r0, r4
 8015af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015afa:	4798      	blx	r3
 8015afc:	6823      	ldr	r3, [r4, #0]
 8015afe:	4681      	mov	r9, r0
 8015b00:	4620      	mov	r0, r4
 8015b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015b06:	4798      	blx	r3
 8015b08:	464b      	mov	r3, r9
 8015b0a:	9000      	str	r0, [sp, #0]
 8015b0c:	4642      	mov	r2, r8
 8015b0e:	4629      	mov	r1, r5
 8015b10:	4630      	mov	r0, r6
 8015b12:	47b8      	blx	r7
 8015b14:	b003      	add	sp, #12
 8015b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b1a:	2000      	movs	r0, #0
 8015b1c:	e7fa      	b.n	8015b14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8015b1e:	bf00      	nop
 8015b20:	240100bc 	.word	0x240100bc
 8015b24:	240100b8 	.word	0x240100b8
 8015b28:	240100c0 	.word	0x240100c0
 8015b2c:	240100c4 	.word	0x240100c4

08015b30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8015b30:	b40e      	push	{r1, r2, r3}
 8015b32:	4b30      	ldr	r3, [pc, #192]	; (8015bf4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8015b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b38:	881a      	ldrh	r2, [r3, #0]
 8015b3a:	b09d      	sub	sp, #116	; 0x74
 8015b3c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8015b3e:	4604      	mov	r4, r0
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d954      	bls.n	8015bee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8015b44:	aa26      	add	r2, sp, #152	; 0x98
 8015b46:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8015bf8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8015b4a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8015bfc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8015b4e:	9202      	str	r2, [sp, #8]
 8015b50:	f8d9 2000 	ldr.w	r2, [r9]
 8015b54:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8015b58:	f8d8 3000 	ldr.w	r3, [r8]
 8015b5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015b60:	682b      	ldr	r3, [r5, #0]
 8015b62:	4628      	mov	r0, r5
 8015b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b66:	4798      	blx	r3
 8015b68:	4606      	mov	r6, r0
 8015b6a:	b207      	sxth	r7, r0
 8015b6c:	a803      	add	r0, sp, #12
 8015b6e:	f004 fd37 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015b72:	682b      	ldr	r3, [r5, #0]
 8015b74:	4628      	mov	r0, r5
 8015b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b78:	4798      	blx	r3
 8015b7a:	682b      	ldr	r3, [r5, #0]
 8015b7c:	4682      	mov	sl, r0
 8015b7e:	4628      	mov	r0, r5
 8015b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b82:	4798      	blx	r3
 8015b84:	4653      	mov	r3, sl
 8015b86:	9000      	str	r0, [sp, #0]
 8015b88:	a803      	add	r0, sp, #12
 8015b8a:	9a02      	ldr	r2, [sp, #8]
 8015b8c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015b8e:	f004 fd82 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015b92:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015b94:	f8d9 3000 	ldr.w	r3, [r9]
 8015b98:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8015b9c:	8925      	ldrh	r5, [r4, #8]
 8015b9e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8015ba2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8015ba6:	eba5 050c 	sub.w	r5, r5, ip
 8015baa:	784a      	ldrb	r2, [r1, #1]
 8015bac:	f8d8 3000 	ldr.w	r3, [r8]
 8015bb0:	b22d      	sxth	r5, r5
 8015bb2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8015bb6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8015bba:	9500      	str	r5, [sp, #0]
 8015bbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015bc0:	a803      	add	r0, sp, #12
 8015bc2:	f002 fb79 	bl	80182b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8015bc6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8015bca:	b203      	sxth	r3, r0
 8015bcc:	18b9      	adds	r1, r7, r2
 8015bce:	2900      	cmp	r1, #0
 8015bd0:	dd0b      	ble.n	8015bea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	fb13 f302 	smulbb	r3, r3, r2
 8015bd8:	fb16 3300 	smlabb	r3, r6, r0, r3
 8015bdc:	b21f      	sxth	r7, r3
 8015bde:	4638      	mov	r0, r7
 8015be0:	b01d      	add	sp, #116	; 0x74
 8015be2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015be6:	b003      	add	sp, #12
 8015be8:	4770      	bx	lr
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	dcf7      	bgt.n	8015bde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015bee:	2700      	movs	r7, #0
 8015bf0:	e7f5      	b.n	8015bde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8015bf2:	bf00      	nop
 8015bf4:	240100bc 	.word	0x240100bc
 8015bf8:	240100b8 	.word	0x240100b8
 8015bfc:	240100c0 	.word	0x240100c0

08015c00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8015c00:	4bbd      	ldr	r3, [pc, #756]	; (8015ef8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8015c02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c06:	460c      	mov	r4, r1
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8015c0c:	b0a9      	sub	sp, #164	; 0xa4
 8015c0e:	4680      	mov	r8, r0
 8015c10:	428b      	cmp	r3, r1
 8015c12:	d809      	bhi.n	8015c28 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8015c14:	2300      	movs	r3, #0
 8015c16:	f04f 32ff 	mov.w	r2, #4294967295
 8015c1a:	6083      	str	r3, [r0, #8]
 8015c1c:	e9c0 3200 	strd	r3, r2, [r0]
 8015c20:	4640      	mov	r0, r8
 8015c22:	b029      	add	sp, #164	; 0xa4
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c28:	4eb4      	ldr	r6, [pc, #720]	; (8015efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8015c2a:	6833      	ldr	r3, [r6, #0]
 8015c2c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8015c30:	4bb3      	ldr	r3, [pc, #716]	; (8015f00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8015c38:	4bb2      	ldr	r3, [pc, #712]	; (8015f04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015c3a:	6818      	ldr	r0, [r3, #0]
 8015c3c:	f7f1 fc5c 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015c40:	682b      	ldr	r3, [r5, #0]
 8015c42:	4681      	mov	r9, r0
 8015c44:	4628      	mov	r0, r5
 8015c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c48:	4798      	blx	r3
 8015c4a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 8015c4c:	b203      	sxth	r3, r0
 8015c4e:	4682      	mov	sl, r0
 8015c50:	4407      	add	r7, r0
 8015c52:	a80f      	add	r0, sp, #60	; 0x3c
 8015c54:	9304      	str	r3, [sp, #16]
 8015c56:	b2bb      	uxth	r3, r7
 8015c58:	9303      	str	r3, [sp, #12]
 8015c5a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f040 80a5 	bne.w	8015dae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8015c64:	f004 fcbc 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015c68:	682b      	ldr	r3, [r5, #0]
 8015c6a:	4628      	mov	r0, r5
 8015c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c6e:	4798      	blx	r3
 8015c70:	682b      	ldr	r3, [r5, #0]
 8015c72:	4606      	mov	r6, r0
 8015c74:	4628      	mov	r0, r5
 8015c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c78:	4798      	blx	r3
 8015c7a:	6823      	ldr	r3, [r4, #0]
 8015c7c:	4607      	mov	r7, r0
 8015c7e:	4620      	mov	r0, r4
 8015c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015c82:	4798      	blx	r3
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	4683      	mov	fp, r0
 8015c88:	4620      	mov	r0, r4
 8015c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c8e:	4798      	blx	r3
 8015c90:	463b      	mov	r3, r7
 8015c92:	4649      	mov	r1, r9
 8015c94:	4632      	mov	r2, r6
 8015c96:	2600      	movs	r6, #0
 8015c98:	e9cd b000 	strd	fp, r0, [sp]
 8015c9c:	a80f      	add	r0, sp, #60	; 0x3c
 8015c9e:	4637      	mov	r7, r6
 8015ca0:	f004 fd0e 	bl	801a6c0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015ca4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015ca8:	f8df b250 	ldr.w	fp, [pc, #592]	; 8015efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8015cac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015cb0:	bf0c      	ite	eq
 8015cb2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8015cb6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8015cba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8015cbc:	4629      	mov	r1, r5
 8015cbe:	f8db 3000 	ldr.w	r3, [fp]
 8015cc2:	a80f      	add	r0, sp, #60	; 0x3c
 8015cc4:	3701      	adds	r7, #1
 8015cc6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8015cca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015cce:	b2bf      	uxth	r7, r7
 8015cd0:	785b      	ldrb	r3, [r3, #1]
 8015cd2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8015cd6:	f002 f80a 	bl	8017cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8015cda:	9b03      	ldr	r3, [sp, #12]
 8015cdc:	4286      	cmp	r6, r0
 8015cde:	eba9 0903 	sub.w	r9, r9, r3
 8015ce2:	bfb8      	it	lt
 8015ce4:	4606      	movlt	r6, r0
 8015ce6:	a80f      	add	r0, sp, #60	; 0x3c
 8015ce8:	fa0f f989 	sxth.w	r9, r9
 8015cec:	b236      	sxth	r6, r6
 8015cee:	f004 fc9e 	bl	801a62e <_ZN8touchgfx12TextProvider11endOfStringEv>
 8015cf2:	b918      	cbnz	r0, 8015cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015cf4:	7a2b      	ldrb	r3, [r5, #8]
 8015cf6:	444b      	add	r3, r9
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	dcde      	bgt.n	8015cba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8015cfc:	9b03      	ldr	r3, [sp, #12]
 8015cfe:	4620      	mov	r0, r4
 8015d00:	9a04      	ldr	r2, [sp, #16]
 8015d02:	fb13 f707 	smulbb	r7, r3, r7
 8015d06:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015d08:	f895 9009 	ldrb.w	r9, [r5, #9]
 8015d0c:	1aff      	subs	r7, r7, r3
 8015d0e:	b2bf      	uxth	r7, r7
 8015d10:	b23b      	sxth	r3, r7
 8015d12:	429a      	cmp	r2, r3
 8015d14:	bfa8      	it	ge
 8015d16:	4657      	movge	r7, sl
 8015d18:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015d1c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015d20:	6823      	ldr	r3, [r4, #0]
 8015d22:	444f      	add	r7, r9
 8015d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d26:	bf08      	it	eq
 8015d28:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8015d2c:	fa1f f987 	uxth.w	r9, r7
 8015d30:	bf18      	it	ne
 8015d32:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8015d36:	4798      	blx	r3
 8015d38:	2801      	cmp	r0, #1
 8015d3a:	fa0f f789 	sxth.w	r7, r9
 8015d3e:	b2b3      	uxth	r3, r6
 8015d40:	f000 80e2 	beq.w	8015f08 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8015d44:	2802      	cmp	r0, #2
 8015d46:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 8015d4a:	f000 80e3 	beq.w	8015f14 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8015d4e:	7aea      	ldrb	r2, [r5, #11]
 8015d50:	b236      	sxth	r6, r6
 8015d52:	7b2d      	ldrb	r5, [r5, #12]
 8015d54:	1ab6      	subs	r6, r6, r2
 8015d56:	442a      	add	r2, r5
 8015d58:	fa1f fa86 	uxth.w	sl, r6
 8015d5c:	4413      	add	r3, r2
 8015d5e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8015d62:	fa0f fb8a 	sxth.w	fp, sl
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	2a02      	cmp	r2, #2
 8015d6a:	b21e      	sxth	r6, r3
 8015d6c:	f000 80d6 	beq.w	8015f1c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8015d70:	2a03      	cmp	r2, #3
 8015d72:	f000 80de 	beq.w	8015f32 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8015d76:	2a01      	cmp	r2, #1
 8015d78:	f040 80e6 	bne.w	8015f48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8015d7c:	8925      	ldrh	r5, [r4, #8]
 8015d7e:	4633      	mov	r3, r6
 8015d80:	463e      	mov	r6, r7
 8015d82:	eba5 0909 	sub.w	r9, r5, r9
 8015d86:	461f      	mov	r7, r3
 8015d88:	465d      	mov	r5, fp
 8015d8a:	fa0f fb89 	sxth.w	fp, r9
 8015d8e:	4b5d      	ldr	r3, [pc, #372]	; (8015f04 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8015d90:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015d92:	6818      	ldr	r0, [r3, #0]
 8015d94:	f7f1 fbb0 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015d98:	f8a8 b000 	strh.w	fp, [r8]
 8015d9c:	f8a8 5002 	strh.w	r5, [r8, #2]
 8015da0:	f8a8 6004 	strh.w	r6, [r8, #4]
 8015da4:	f8a8 7006 	strh.w	r7, [r8, #6]
 8015da8:	f8c8 0008 	str.w	r0, [r8, #8]
 8015dac:	e738      	b.n	8015c20 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8015dae:	f004 fc17 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8015db2:	682b      	ldr	r3, [r5, #0]
 8015db4:	4628      	mov	r0, r5
 8015db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015db8:	4798      	blx	r3
 8015dba:	682b      	ldr	r3, [r5, #0]
 8015dbc:	4607      	mov	r7, r0
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015dc2:	4798      	blx	r3
 8015dc4:	6823      	ldr	r3, [r4, #0]
 8015dc6:	4683      	mov	fp, r0
 8015dc8:	4620      	mov	r0, r4
 8015dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015dcc:	4798      	blx	r3
 8015dce:	6822      	ldr	r2, [r4, #0]
 8015dd0:	9005      	str	r0, [sp, #20]
 8015dd2:	4620      	mov	r0, r4
 8015dd4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015dd8:	4790      	blx	r2
 8015dda:	9b05      	ldr	r3, [sp, #20]
 8015ddc:	463a      	mov	r2, r7
 8015dde:	4649      	mov	r1, r9
 8015de0:	9001      	str	r0, [sp, #4]
 8015de2:	a80f      	add	r0, sp, #60	; 0x3c
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	465b      	mov	r3, fp
 8015de8:	f004 fc6a 	bl	801a6c0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8015dec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8015df0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8015df4:	af0f      	add	r7, sp, #60	; 0x3c
 8015df6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8015dfa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8015dfe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8015e00:	bf0a      	itet	eq
 8015e02:	464a      	moveq	r2, r9
 8015e04:	461a      	movne	r2, r3
 8015e06:	4699      	moveq	r9, r3
 8015e08:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8015e0c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8015e10:	1ad2      	subs	r2, r2, r3
 8015e12:	6833      	ldr	r3, [r6, #0]
 8015e14:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 8015e18:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8015e1c:	7859      	ldrb	r1, [r3, #1]
 8015e1e:	2300      	movs	r3, #0
 8015e20:	9707      	str	r7, [sp, #28]
 8015e22:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8015e26:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015e2a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8015e2e:	f88d 1020 	strb.w	r1, [sp, #32]
 8015e32:	9509      	str	r5, [sp, #36]	; 0x24
 8015e34:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015e38:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8015e3c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8015e40:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8015e44:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8015e48:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015e4c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8015e50:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015e54:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015e58:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8015e5c:	b350      	cbz	r0, 8015eb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8015e5e:	682b      	ldr	r3, [r5, #0]
 8015e60:	4628      	mov	r0, r5
 8015e62:	695b      	ldr	r3, [r3, #20]
 8015e64:	4798      	blx	r3
 8015e66:	4607      	mov	r7, r0
 8015e68:	b320      	cbz	r0, 8015eb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8015e6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e6c:	4639      	mov	r1, r7
 8015e6e:	6803      	ldr	r3, [r0, #0]
 8015e70:	68db      	ldr	r3, [r3, #12]
 8015e72:	4798      	blx	r3
 8015e74:	4606      	mov	r6, r0
 8015e76:	b1e8      	cbz	r0, 8015eb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8015e78:	7b43      	ldrb	r3, [r0, #13]
 8015e7a:	7a82      	ldrb	r2, [r0, #10]
 8015e7c:	005b      	lsls	r3, r3, #1
 8015e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e82:	4313      	orrs	r3, r2
 8015e84:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8015e88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8015e8c:	2b06      	cmp	r3, #6
 8015e8e:	d111      	bne.n	8015eb4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8015e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015e92:	4632      	mov	r2, r6
 8015e94:	4639      	mov	r1, r7
 8015e96:	6803      	ldr	r3, [r0, #0]
 8015e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e9a:	4798      	blx	r3
 8015e9c:	7b73      	ldrb	r3, [r6, #13]
 8015e9e:	005b      	lsls	r3, r3, #1
 8015ea0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015ea4:	7ab3      	ldrb	r3, [r6, #10]
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	4418      	add	r0, r3
 8015eaa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015eae:	4418      	add	r0, r3
 8015eb0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 8015eb4:	2600      	movs	r6, #0
 8015eb6:	4637      	mov	r7, r6
 8015eb8:	a806      	add	r0, sp, #24
 8015eba:	3701      	adds	r7, #1
 8015ebc:	f002 f8f9 	bl	80180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8015ec0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 8015ec4:	9b03      	ldr	r3, [sp, #12]
 8015ec6:	b2bf      	uxth	r7, r7
 8015ec8:	4286      	cmp	r6, r0
 8015eca:	eba9 0903 	sub.w	r9, r9, r3
 8015ece:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8015ed2:	bfb8      	it	lt
 8015ed4:	4606      	movlt	r6, r0
 8015ed6:	fa0f f989 	sxth.w	r9, r9
 8015eda:	b236      	sxth	r6, r6
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	f43f af0d 	beq.w	8015cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015ee2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	f47f af08 	bne.w	8015cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015eec:	7a2b      	ldrb	r3, [r5, #8]
 8015eee:	444b      	add	r3, r9
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	dce1      	bgt.n	8015eb8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8015ef4:	e702      	b.n	8015cfc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8015ef6:	bf00      	nop
 8015ef8:	240100bc 	.word	0x240100bc
 8015efc:	240100b8 	.word	0x240100b8
 8015f00:	240100c0 	.word	0x240100c0
 8015f04:	240100c4 	.word	0x240100c4
 8015f08:	ebaa 0606 	sub.w	r6, sl, r6
 8015f0c:	2002      	movs	r0, #2
 8015f0e:	fb96 f6f0 	sdiv	r6, r6, r0
 8015f12:	e71c      	b.n	8015d4e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015f14:	441e      	add	r6, r3
 8015f16:	ebaa 0606 	sub.w	r6, sl, r6
 8015f1a:	e718      	b.n	8015d4e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8015f1c:	8925      	ldrh	r5, [r4, #8]
 8015f1e:	1aed      	subs	r5, r5, r3
 8015f20:	eba5 050a 	sub.w	r5, r5, sl
 8015f24:	fa0f fb85 	sxth.w	fp, r5
 8015f28:	8965      	ldrh	r5, [r4, #10]
 8015f2a:	eba5 0509 	sub.w	r5, r5, r9
 8015f2e:	b22d      	sxth	r5, r5
 8015f30:	e72d      	b.n	8015d8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015f32:	8965      	ldrh	r5, [r4, #10]
 8015f34:	f04f 0b00 	mov.w	fp, #0
 8015f38:	1aed      	subs	r5, r5, r3
 8015f3a:	4633      	mov	r3, r6
 8015f3c:	463e      	mov	r6, r7
 8015f3e:	eba5 050a 	sub.w	r5, r5, sl
 8015f42:	461f      	mov	r7, r3
 8015f44:	b22d      	sxth	r5, r5
 8015f46:	e722      	b.n	8015d8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8015f48:	2500      	movs	r5, #0
 8015f4a:	e720      	b.n	8015d8e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08015f4c <_ZN8touchgfx8TextAreaD0Ev>:
 8015f4c:	b510      	push	{r4, lr}
 8015f4e:	4604      	mov	r4, r0
 8015f50:	2148      	movs	r1, #72	; 0x48
 8015f52:	f00e fb84 	bl	802465e <_ZdlPvj>
 8015f56:	4620      	mov	r0, r4
 8015f58:	bd10      	pop	{r4, pc}
	...

08015f5c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8015f5c:	b513      	push	{r0, r1, r4, lr}
 8015f5e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8015f62:	4604      	mov	r4, r0
 8015f64:	b1fb      	cbz	r3, 8015fa6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015f66:	4b16      	ldr	r3, [pc, #88]	; (8015fc0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8015f68:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8015f6a:	881b      	ldrh	r3, [r3, #0]
 8015f6c:	428b      	cmp	r3, r1
 8015f6e:	d91a      	bls.n	8015fa6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015f70:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	dd16      	ble.n	8015fa6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015f78:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	dd12      	ble.n	8015fa6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015f80:	4b10      	ldr	r3, [pc, #64]	; (8015fc4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8015f82:	6818      	ldr	r0, [r3, #0]
 8015f84:	f7f1 fab8 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015f88:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015f8c:	6822      	ldr	r2, [r4, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	db06      	blt.n	8015fa0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015f92:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	db02      	blt.n	8015fa0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8015f9a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015f9c:	4298      	cmp	r0, r3
 8015f9e:	d004      	beq.n	8015faa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8015fa0:	6953      	ldr	r3, [r2, #20]
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	4798      	blx	r3
 8015fa6:	b002      	add	sp, #8
 8015fa8:	bd10      	pop	{r4, pc}
 8015faa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8015fae:	466b      	mov	r3, sp
 8015fb0:	6912      	ldr	r2, [r2, #16]
 8015fb2:	c903      	ldmia	r1, {r0, r1}
 8015fb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8015fb8:	4619      	mov	r1, r3
 8015fba:	4620      	mov	r0, r4
 8015fbc:	4790      	blx	r2
 8015fbe:	e7f2      	b.n	8015fa6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8015fc0:	240100bc 	.word	0x240100bc
 8015fc4:	240100c4 	.word	0x240100c4

08015fc8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8015fc8:	4b45      	ldr	r3, [pc, #276]	; (80160e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8015fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8015fd0:	b08e      	sub	sp, #56	; 0x38
 8015fd2:	881b      	ldrh	r3, [r3, #0]
 8015fd4:	4604      	mov	r4, r0
 8015fd6:	4293      	cmp	r3, r2
 8015fd8:	d97e      	bls.n	80160d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8015fda:	6808      	ldr	r0, [r1, #0]
 8015fdc:	ab05      	add	r3, sp, #20
 8015fde:	6849      	ldr	r1, [r1, #4]
 8015fe0:	4d40      	ldr	r5, [pc, #256]	; (80160e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8015fe2:	c303      	stmia	r3!, {r0, r1}
 8015fe4:	4611      	mov	r1, r2
 8015fe6:	6828      	ldr	r0, [r5, #0]
 8015fe8:	f7f1 fa86 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8015fec:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	db11      	blt.n	8016018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015ff4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	db0d      	blt.n	8016018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8015ffc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8015ffe:	4298      	cmp	r0, r3
 8016000:	d10a      	bne.n	8016018 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8016002:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8016006:	ab09      	add	r3, sp, #36	; 0x24
 8016008:	e892 0003 	ldmia.w	r2, {r0, r1}
 801600c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016010:	4619      	mov	r1, r3
 8016012:	a805      	add	r0, sp, #20
 8016014:	f7fc fca6 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8016018:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801601c:	2b00      	cmp	r3, #0
 801601e:	dd5b      	ble.n	80160d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016020:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8016024:	2b00      	cmp	r3, #0
 8016026:	dd57      	ble.n	80160d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8016028:	4f2f      	ldr	r7, [pc, #188]	; (80160e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801602a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8016032:	4b2e      	ldr	r3, [pc, #184]	; (80160ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801603a:	2e00      	cmp	r6, #0
 801603c:	d04c      	beq.n	80160d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801603e:	6823      	ldr	r3, [r4, #0]
 8016040:	4620      	mov	r0, r4
 8016042:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8016046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016048:	4798      	blx	r3
 801604a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8016052:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8016056:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801605a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801605e:	785b      	ldrb	r3, [r3, #1]
 8016060:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8016064:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8016068:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801606a:	9609      	str	r6, [sp, #36]	; 0x24
 801606c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016070:	4b1f      	ldr	r3, [pc, #124]	; (80160f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8016072:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801607c:	910b      	str	r1, [sp, #44]	; 0x2c
 801607e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8016082:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8016086:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801608a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801608e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8016092:	b10a      	cbz	r2, 8016098 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8016094:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8016096:	b906      	cbnz	r6, 801609a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 8016098:	689e      	ldr	r6, [r3, #8]
 801609a:	af07      	add	r7, sp, #28
 801609c:	4621      	mov	r1, r4
 801609e:	4638      	mov	r0, r7
 80160a0:	f003 fe16 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80160a4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80160a6:	6828      	ldr	r0, [r5, #0]
 80160a8:	f7f1 fa26 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 80160ac:	6823      	ldr	r3, [r4, #0]
 80160ae:	4605      	mov	r5, r0
 80160b0:	4620      	mov	r0, r4
 80160b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160b4:	4798      	blx	r3
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	4680      	mov	r8, r0
 80160ba:	4620      	mov	r0, r4
 80160bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80160c0:	4798      	blx	r3
 80160c2:	ab09      	add	r3, sp, #36	; 0x24
 80160c4:	9501      	str	r5, [sp, #4]
 80160c6:	9300      	str	r3, [sp, #0]
 80160c8:	ab05      	add	r3, sp, #20
 80160ca:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80160ce:	4630      	mov	r0, r6
 80160d0:	e897 0006 	ldmia.w	r7, {r1, r2}
 80160d4:	f7f1 f9c2 	bl	800745c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80160d8:	b00e      	add	sp, #56	; 0x38
 80160da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160de:	bf00      	nop
 80160e0:	240100bc 	.word	0x240100bc
 80160e4:	240100c4 	.word	0x240100c4
 80160e8:	240100b8 	.word	0x240100b8
 80160ec:	240100c0 	.word	0x240100c0
 80160f0:	24010060 	.word	0x24010060

080160f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80160f4:	b570      	push	{r4, r5, r6, lr}
 80160f6:	6803      	ldr	r3, [r0, #0]
 80160f8:	4604      	mov	r4, r0
 80160fa:	4615      	mov	r5, r2
 80160fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80160fe:	4798      	blx	r3
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	4629      	mov	r1, r5
 8016104:	4620      	mov	r0, r4
 8016106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801610c:	4718      	bx	r3
	...

08016110 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8016110:	b538      	push	{r3, r4, r5, lr}
 8016112:	4b0e      	ldr	r3, [pc, #56]	; (801614c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8016114:	4604      	mov	r4, r0
 8016116:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016118:	881b      	ldrh	r3, [r3, #0]
 801611a:	429a      	cmp	r2, r3
 801611c:	d214      	bcs.n	8016148 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801611e:	6803      	ldr	r3, [r0, #0]
 8016120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016122:	4798      	blx	r3
 8016124:	6823      	ldr	r3, [r4, #0]
 8016126:	4605      	mov	r5, r0
 8016128:	4620      	mov	r0, r4
 801612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801612c:	4798      	blx	r3
 801612e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016132:	b22d      	sxth	r5, r5
 8016134:	4601      	mov	r1, r0
 8016136:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801613a:	bf06      	itte	eq
 801613c:	4602      	moveq	r2, r0
 801613e:	4629      	moveq	r1, r5
 8016140:	462a      	movne	r2, r5
 8016142:	4620      	mov	r0, r4
 8016144:	f7ff ffd6 	bl	80160f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8016148:	bd38      	pop	{r3, r4, r5, pc}
 801614a:	bf00      	nop
 801614c:	240100bc 	.word	0x240100bc

08016150 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8016150:	b530      	push	{r4, r5, lr}
 8016152:	888b      	ldrh	r3, [r1, #4]
 8016154:	b085      	sub	sp, #20
 8016156:	4604      	mov	r4, r0
 8016158:	8583      	strh	r3, [r0, #44]	; 0x2c
 801615a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801615e:	b923      	cbnz	r3, 801616a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016160:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8016164:	b90b      	cbnz	r3, 801616a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8016166:	f7ff ffd3 	bl	8016110 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801616a:	6823      	ldr	r3, [r4, #0]
 801616c:	466d      	mov	r5, sp
 801616e:	4621      	mov	r1, r4
 8016170:	343c      	adds	r4, #60	; 0x3c
 8016172:	4628      	mov	r0, r5
 8016174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016178:	4798      	blx	r3
 801617a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801617e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016182:	b005      	add	sp, #20
 8016184:	bd30      	pop	{r4, r5, pc}

08016186 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8016186:	2300      	movs	r3, #0
 8016188:	8083      	strh	r3, [r0, #4]
 801618a:	80c3      	strh	r3, [r0, #6]
 801618c:	8003      	strh	r3, [r0, #0]
 801618e:	8043      	strh	r3, [r0, #2]
 8016190:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8016194:	2bff      	cmp	r3, #255	; 0xff
 8016196:	bf01      	itttt	eq
 8016198:	890b      	ldrheq	r3, [r1, #8]
 801619a:	8083      	strheq	r3, [r0, #4]
 801619c:	894b      	ldrheq	r3, [r1, #10]
 801619e:	80c3      	strheq	r3, [r0, #6]
 80161a0:	4770      	bx	lr
	...

080161a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80161a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161a6:	4604      	mov	r4, r0
 80161a8:	466b      	mov	r3, sp
 80161aa:	6808      	ldr	r0, [r1, #0]
 80161ac:	6849      	ldr	r1, [r1, #4]
 80161ae:	c303      	stmia	r3!, {r0, r1}
 80161b0:	6823      	ldr	r3, [r4, #0]
 80161b2:	4669      	mov	r1, sp
 80161b4:	4620      	mov	r0, r4
 80161b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161b8:	4798      	blx	r3
 80161ba:	4b08      	ldr	r3, [pc, #32]	; (80161dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80161c2:	b10a      	cbz	r2, 80161c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80161c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80161c6:	b900      	cbnz	r0, 80161ca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80161c8:	6898      	ldr	r0, [r3, #8]
 80161ca:	6803      	ldr	r3, [r0, #0]
 80161cc:	4669      	mov	r1, sp
 80161ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80161d0:	6a1d      	ldr	r5, [r3, #32]
 80161d2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80161d6:	47a8      	blx	r5
 80161d8:	b003      	add	sp, #12
 80161da:	bd30      	pop	{r4, r5, pc}
 80161dc:	24010060 	.word	0x24010060

080161e0 <_ZN8touchgfx3BoxD1Ev>:
 80161e0:	4770      	bx	lr

080161e2 <_ZN8touchgfx3BoxD0Ev>:
 80161e2:	b510      	push	{r4, lr}
 80161e4:	4604      	mov	r4, r0
 80161e6:	212c      	movs	r1, #44	; 0x2c
 80161e8:	f00e fa39 	bl	802465e <_ZdlPvj>
 80161ec:	4620      	mov	r0, r4
 80161ee:	bd10      	pop	{r4, pc}

080161f0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80161f0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80161f4:	b12a      	cbz	r2, 8016202 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80161f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80161fa:	b112      	cbz	r2, 8016202 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80161fc:	6803      	ldr	r3, [r0, #0]
 80161fe:	695b      	ldr	r3, [r3, #20]
 8016200:	4718      	bx	r3
 8016202:	4770      	bx	lr

08016204 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 8016204:	4b30      	ldr	r3, [pc, #192]	; (80162c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8016206:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801620a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801620c:	b08d      	sub	sp, #52	; 0x34
 801620e:	881b      	ldrh	r3, [r3, #0]
 8016210:	4604      	mov	r4, r0
 8016212:	460f      	mov	r7, r1
 8016214:	4293      	cmp	r3, r2
 8016216:	d954      	bls.n	80162c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016218:	4b2c      	ldr	r3, [pc, #176]	; (80162cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801621a:	6819      	ldr	r1, [r3, #0]
 801621c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8016220:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8016224:	4a2a      	ldr	r2, [pc, #168]	; (80162d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 8016226:	6812      	ldr	r2, [r2, #0]
 8016228:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801622c:	2900      	cmp	r1, #0
 801622e:	d048      	beq.n	80162c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8016230:	785a      	ldrb	r2, [r3, #1]
 8016232:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8016236:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801623a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801623e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8016242:	4b24      	ldr	r3, [pc, #144]	; (80162d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8016244:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801624e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 8016252:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 8016256:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8016258:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801625c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8016260:	9107      	str	r1, [sp, #28]
 8016262:	f88d 8020 	strb.w	r8, [sp, #32]
 8016266:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801626a:	9609      	str	r6, [sp, #36]	; 0x24
 801626c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8016270:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8016274:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8016278:	b10b      	cbz	r3, 801627e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801627a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801627c:	b905      	cbnz	r5, 8016280 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801627e:	6895      	ldr	r5, [r2, #8]
 8016280:	ae05      	add	r6, sp, #20
 8016282:	4621      	mov	r1, r4
 8016284:	4630      	mov	r0, r6
 8016286:	f003 fd23 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801628a:	4b13      	ldr	r3, [pc, #76]	; (80162d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801628c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801628e:	6818      	ldr	r0, [r3, #0]
 8016290:	f7f1 f932 	bl	80074f8 <_ZNK8touchgfx5Texts7getTextEt>
 8016294:	6823      	ldr	r3, [r4, #0]
 8016296:	4680      	mov	r8, r0
 8016298:	4620      	mov	r0, r4
 801629a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801629c:	4798      	blx	r3
 801629e:	6823      	ldr	r3, [r4, #0]
 80162a0:	4681      	mov	r9, r0
 80162a2:	4620      	mov	r0, r4
 80162a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80162a8:	4798      	blx	r3
 80162aa:	ab07      	add	r3, sp, #28
 80162ac:	f8cd 8004 	str.w	r8, [sp, #4]
 80162b0:	9300      	str	r3, [sp, #0]
 80162b2:	463b      	mov	r3, r7
 80162b4:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80162b8:	4628      	mov	r0, r5
 80162ba:	e896 0006 	ldmia.w	r6, {r1, r2}
 80162be:	f7f1 f8cd 	bl	800745c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80162c2:	b00d      	add	sp, #52	; 0x34
 80162c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162c8:	240100bc 	.word	0x240100bc
 80162cc:	240100b8 	.word	0x240100b8
 80162d0:	240100c0 	.word	0x240100c0
 80162d4:	24010060 	.word	0x24010060
 80162d8:	240100c4 	.word	0x240100c4

080162dc <_ZN8touchgfx13BoxWithBorderD1Ev>:
 80162dc:	4770      	bx	lr

080162de <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80162de:	b510      	push	{r4, lr}
 80162e0:	4604      	mov	r4, r0
 80162e2:	2134      	movs	r1, #52	; 0x34
 80162e4:	f00e f9bb 	bl	802465e <_ZdlPvj>
 80162e8:	4620      	mov	r0, r4
 80162ea:	bd10      	pop	{r4, pc}

080162ec <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80162ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162f0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80162f2:	4604      	mov	r4, r0
 80162f4:	460e      	mov	r6, r1
 80162f6:	b08e      	sub	sp, #56	; 0x38
 80162f8:	b218      	sxth	r0, r3
 80162fa:	8921      	ldrh	r1, [r4, #8]
 80162fc:	005b      	lsls	r3, r3, #1
 80162fe:	8962      	ldrh	r2, [r4, #10]
 8016300:	f8ad 0000 	strh.w	r0, [sp]
 8016304:	b29b      	uxth	r3, r3
 8016306:	f8ad 0002 	strh.w	r0, [sp, #2]
 801630a:	1ac9      	subs	r1, r1, r3
 801630c:	1ad3      	subs	r3, r2, r3
 801630e:	b209      	sxth	r1, r1
 8016310:	b21b      	sxth	r3, r3
 8016312:	2900      	cmp	r1, #0
 8016314:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016318:	f8ad 3006 	strh.w	r3, [sp, #6]
 801631c:	dd5e      	ble.n	80163dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801631e:	2b00      	cmp	r3, #0
 8016320:	dd5c      	ble.n	80163dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8016322:	6830      	ldr	r0, [r6, #0]
 8016324:	ab02      	add	r3, sp, #8
 8016326:	6871      	ldr	r1, [r6, #4]
 8016328:	c303      	stmia	r3!, {r0, r1}
 801632a:	4669      	mov	r1, sp
 801632c:	a802      	add	r0, sp, #8
 801632e:	f7fc fb19 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8016332:	4620      	mov	r0, r4
 8016334:	a902      	add	r1, sp, #8
 8016336:	f7ff ff35 	bl	80161a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 801633a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801633c:	2800      	cmp	r0, #0
 801633e:	d05f      	beq.n	8016400 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8016340:	8963      	ldrh	r3, [r4, #10]
 8016342:	b202      	sxth	r2, r0
 8016344:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8016348:	2500      	movs	r5, #0
 801634a:	1a1f      	subs	r7, r3, r0
 801634c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8016350:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016354:	b21b      	sxth	r3, r3
 8016356:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801635a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801635e:	af04      	add	r7, sp, #16
 8016360:	1a09      	subs	r1, r1, r0
 8016362:	9506      	str	r5, [sp, #24]
 8016364:	f8ad 201e 	strh.w	r2, [sp, #30]
 8016368:	f8ad 5020 	strh.w	r5, [sp, #32]
 801636c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8016370:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8016374:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8016378:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801637c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8016380:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8016384:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016388:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801638c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016390:	ab06      	add	r3, sp, #24
 8016392:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016396:	e893 0003 	ldmia.w	r3, {r0, r1}
 801639a:	e887 0003 	stmia.w	r7, {r0, r1}
 801639e:	4631      	mov	r1, r6
 80163a0:	4638      	mov	r0, r7
 80163a2:	f7fc fadf 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 80163a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	dd12      	ble.n	80163d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80163ae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	dd0e      	ble.n	80163d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 80163b6:	6823      	ldr	r3, [r4, #0]
 80163b8:	4639      	mov	r1, r7
 80163ba:	4620      	mov	r0, r4
 80163bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163be:	4798      	blx	r3
 80163c0:	f7fc fda0 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80163c4:	6803      	ldr	r3, [r0, #0]
 80163c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80163c8:	4639      	mov	r1, r7
 80163ca:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80163ce:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80163d2:	47c0      	blx	r8
 80163d4:	3501      	adds	r5, #1
 80163d6:	2d04      	cmp	r5, #4
 80163d8:	d1da      	bne.n	8016390 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80163da:	e011      	b.n	8016400 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80163dc:	6830      	ldr	r0, [r6, #0]
 80163de:	ab06      	add	r3, sp, #24
 80163e0:	6871      	ldr	r1, [r6, #4]
 80163e2:	c303      	stmia	r3!, {r0, r1}
 80163e4:	6823      	ldr	r3, [r4, #0]
 80163e6:	a906      	add	r1, sp, #24
 80163e8:	4620      	mov	r0, r4
 80163ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ec:	4798      	blx	r3
 80163ee:	f7fc fd89 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80163f2:	6803      	ldr	r3, [r0, #0]
 80163f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80163f6:	a906      	add	r1, sp, #24
 80163f8:	6a1d      	ldr	r5, [r3, #32]
 80163fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80163fe:	47a8      	blx	r5
 8016400:	b00e      	add	sp, #56	; 0x38
 8016402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016406 <_ZN8touchgfx5ImageD1Ev>:
 8016406:	4770      	bx	lr

08016408 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8016408:	b570      	push	{r4, r5, r6, lr}
 801640a:	880b      	ldrh	r3, [r1, #0]
 801640c:	460d      	mov	r5, r1
 801640e:	4604      	mov	r4, r0
 8016410:	84c3      	strh	r3, [r0, #38]	; 0x26
 8016412:	4608      	mov	r0, r1
 8016414:	f005 fd26 	bl	801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016418:	4606      	mov	r6, r0
 801641a:	4628      	mov	r0, r5
 801641c:	f005 fd56 	bl	801becc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016420:	6823      	ldr	r3, [r4, #0]
 8016422:	4605      	mov	r5, r0
 8016424:	4631      	mov	r1, r6
 8016426:	4620      	mov	r0, r4
 8016428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801642a:	4798      	blx	r3
 801642c:	6823      	ldr	r3, [r4, #0]
 801642e:	4629      	mov	r1, r5
 8016430:	4620      	mov	r0, r4
 8016432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016438:	4718      	bx	r3

0801643a <_ZN8touchgfx5ImageD0Ev>:
 801643a:	b510      	push	{r4, lr}
 801643c:	4604      	mov	r4, r0
 801643e:	212c      	movs	r1, #44	; 0x2c
 8016440:	f00e f90d 	bl	802465e <_ZdlPvj>
 8016444:	4620      	mov	r0, r4
 8016446:	bd10      	pop	{r4, pc}

08016448 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8016448:	b510      	push	{r4, lr}
 801644a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 801644e:	4604      	mov	r4, r0
 8016450:	2bff      	cmp	r3, #255	; 0xff
 8016452:	d006      	beq.n	8016462 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8016454:	2300      	movs	r3, #0
 8016456:	8003      	strh	r3, [r0, #0]
 8016458:	8043      	strh	r3, [r0, #2]
 801645a:	8083      	strh	r3, [r0, #4]
 801645c:	80c3      	strh	r3, [r0, #6]
 801645e:	4620      	mov	r0, r4
 8016460:	bd10      	pop	{r4, pc}
 8016462:	3126      	adds	r1, #38	; 0x26
 8016464:	f005 fd66 	bl	801bf34 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8016468:	e7f9      	b.n	801645e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801646a <_ZNK8touchgfx5Image17invalidateContentEv>:
 801646a:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 801646e:	b12a      	cbz	r2, 801647c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8016470:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8016474:	b112      	cbz	r2, 801647c <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8016476:	6803      	ldr	r3, [r0, #0]
 8016478:	695b      	ldr	r3, [r3, #20]
 801647a:	4718      	bx	r3
 801647c:	4770      	bx	lr
	...

08016480 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8016480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016484:	4604      	mov	r4, r0
 8016486:	b088      	sub	sp, #32
 8016488:	2500      	movs	r5, #0
 801648a:	460f      	mov	r7, r1
 801648c:	f854 3b26 	ldr.w	r3, [r4], #38
 8016490:	a904      	add	r1, sp, #16
 8016492:	4606      	mov	r6, r0
 8016494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016496:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801649a:	4798      	blx	r3
 801649c:	4620      	mov	r0, r4
 801649e:	f005 fce1 	bl	801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80164a2:	4680      	mov	r8, r0
 80164a4:	4620      	mov	r0, r4
 80164a6:	f005 fd11 	bl	801becc <_ZNK8touchgfx6Bitmap9getHeightEv>
 80164aa:	9506      	str	r5, [sp, #24]
 80164ac:	ad06      	add	r5, sp, #24
 80164ae:	f8ad 001e 	strh.w	r0, [sp, #30]
 80164b2:	4639      	mov	r1, r7
 80164b4:	f8ad 801c 	strh.w	r8, [sp, #28]
 80164b8:	4628      	mov	r0, r5
 80164ba:	f7fc fa53 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 80164be:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	dd19      	ble.n	80164fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80164c6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	dd15      	ble.n	80164fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80164ce:	4b0c      	ldr	r3, [pc, #48]	; (8016500 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80164d6:	b10a      	cbz	r2, 80164dc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80164d8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80164da:	b900      	cbnz	r0, 80164de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80164dc:	6898      	ldr	r0, [r3, #8]
 80164de:	2701      	movs	r7, #1
 80164e0:	6801      	ldr	r1, [r0, #0]
 80164e2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80164e6:	9702      	str	r7, [sp, #8]
 80164e8:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80164ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80164f0:	e9cd 5600 	strd	r5, r6, [sp]
 80164f4:	688d      	ldr	r5, [r1, #8]
 80164f6:	4621      	mov	r1, r4
 80164f8:	47a8      	blx	r5
 80164fa:	b008      	add	sp, #32
 80164fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016500:	24010060 	.word	0x24010060

08016504 <_ZN8touchgfx7OutlineD1Ev>:
 8016504:	4770      	bx	lr

08016506 <_ZN8touchgfx7OutlineD0Ev>:
 8016506:	b510      	push	{r4, lr}
 8016508:	4604      	mov	r4, r0
 801650a:	2130      	movs	r1, #48	; 0x30
 801650c:	f00e f8a7 	bl	802465e <_ZdlPvj>
 8016510:	4620      	mov	r0, r4
 8016512:	bd10      	pop	{r4, pc}

08016514 <_ZN8touchgfx7Outline5resetEv>:
 8016514:	b510      	push	{r4, lr}
 8016516:	4604      	mov	r4, r0
 8016518:	f000 fe86 	bl	8017228 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801651c:	60e0      	str	r0, [r4, #12]
 801651e:	f000 fe89 	bl	8017234 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8016522:	68e3      	ldr	r3, [r4, #12]
 8016524:	08c0      	lsrs	r0, r0, #3
 8016526:	2200      	movs	r2, #0
 8016528:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801652c:	6123      	str	r3, [r4, #16]
 801652e:	3801      	subs	r0, #1
 8016530:	60a2      	str	r2, [r4, #8]
 8016532:	6060      	str	r0, [r4, #4]
 8016534:	8019      	strh	r1, [r3, #0]
 8016536:	8059      	strh	r1, [r3, #2]
 8016538:	809a      	strh	r2, [r3, #4]
 801653a:	80da      	strh	r2, [r3, #6]
 801653c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801653e:	f023 0301 	bic.w	r3, r3, #1
 8016542:	f043 0302 	orr.w	r3, r3, #2
 8016546:	6263      	str	r3, [r4, #36]	; 0x24
 8016548:	bd10      	pop	{r4, pc}
	...

0801654c <_ZN8touchgfx7OutlineC1Ev>:
 801654c:	4b0a      	ldr	r3, [pc, #40]	; (8016578 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801654e:	b510      	push	{r4, lr}
 8016550:	6003      	str	r3, [r0, #0]
 8016552:	2300      	movs	r3, #0
 8016554:	4604      	mov	r4, r0
 8016556:	6243      	str	r3, [r0, #36]	; 0x24
 8016558:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801655c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016560:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8016564:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8016568:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801656c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8016570:	f7ff ffd0 	bl	8016514 <_ZN8touchgfx7Outline5resetEv>
 8016574:	4620      	mov	r0, r4
 8016576:	bd10      	pop	{r4, pc}
 8016578:	08028010 	.word	0x08028010

0801657c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016580:	b093      	sub	sp, #76	; 0x4c
 8016582:	1156      	asrs	r6, r2, #5
 8016584:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8016586:	9305      	str	r3, [sp, #20]
 8016588:	1153      	asrs	r3, r2, #5
 801658a:	f004 051f 	and.w	r5, r4, #31
 801658e:	9303      	str	r3, [sp, #12]
 8016590:	1163      	asrs	r3, r4, #5
 8016592:	9504      	str	r5, [sp, #16]
 8016594:	1165      	asrs	r5, r4, #5
 8016596:	9306      	str	r3, [sp, #24]
 8016598:	f002 031f 	and.w	r3, r2, #31
 801659c:	42ae      	cmp	r6, r5
 801659e:	f040 80f4 	bne.w	801678a <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80165a2:	9c04      	ldr	r4, [sp, #16]
 80165a4:	9a05      	ldr	r2, [sp, #20]
 80165a6:	42a3      	cmp	r3, r4
 80165a8:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80165ac:	6902      	ldr	r2, [r0, #16]
 80165ae:	d125      	bne.n	80165fc <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80165b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80165b4:	459e      	cmp	lr, r3
 80165b6:	d103      	bne.n	80165c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80165b8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80165bc:	429e      	cmp	r6, r3
 80165be:	d035      	beq.n	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80165c0:	88d1      	ldrh	r1, [r2, #6]
 80165c2:	8893      	ldrh	r3, [r2, #4]
 80165c4:	430b      	orrs	r3, r1
 80165c6:	d010      	beq.n	80165ea <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80165c8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	db0c      	blt.n	80165ea <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80165d0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80165d2:	428b      	cmp	r3, r1
 80165d4:	da09      	bge.n	80165ea <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80165d6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80165da:	428b      	cmp	r3, r1
 80165dc:	f103 0301 	add.w	r3, r3, #1
 80165e0:	bf38      	it	cc
 80165e2:	3208      	addcc	r2, #8
 80165e4:	6083      	str	r3, [r0, #8]
 80165e6:	bf38      	it	cc
 80165e8:	6102      	strcc	r2, [r0, #16]
 80165ea:	6903      	ldr	r3, [r0, #16]
 80165ec:	9a03      	ldr	r2, [sp, #12]
 80165ee:	f8a3 e000 	strh.w	lr, [r3]
 80165f2:	805a      	strh	r2, [r3, #2]
 80165f4:	2200      	movs	r2, #0
 80165f6:	809a      	strh	r2, [r3, #4]
 80165f8:	80da      	strh	r2, [r3, #6]
 80165fa:	e017      	b.n	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80165fc:	9c05      	ldr	r4, [sp, #20]
 80165fe:	114e      	asrs	r6, r1, #5
 8016600:	f001 0c1f 	and.w	ip, r1, #31
 8016604:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8016608:	f004 041f 	and.w	r4, r4, #31
 801660c:	4576      	cmp	r6, lr
 801660e:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8016612:	9402      	str	r4, [sp, #8]
 8016614:	9c04      	ldr	r4, [sp, #16]
 8016616:	eba4 0403 	sub.w	r4, r4, r3
 801661a:	d10a      	bne.n	8016632 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 801661c:	9b02      	ldr	r3, [sp, #8]
 801661e:	44a0      	add	r8, r4
 8016620:	449c      	add	ip, r3
 8016622:	f8a2 8004 	strh.w	r8, [r2, #4]
 8016626:	fb04 a40c 	mla	r4, r4, ip, sl
 801662a:	80d4      	strh	r4, [r2, #6]
 801662c:	b013      	add	sp, #76	; 0x4c
 801662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016632:	9d05      	ldr	r5, [sp, #20]
 8016634:	1a69      	subs	r1, r5, r1
 8016636:	bf51      	iteee	pl
 8016638:	f1cc 0520 	rsbpl	r5, ip, #32
 801663c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016640:	4249      	negmi	r1, r1
 8016642:	2500      	movmi	r5, #0
 8016644:	bf5d      	ittte	pl
 8016646:	436c      	mulpl	r4, r5
 8016648:	2520      	movpl	r5, #32
 801664a:	f04f 0901 	movpl.w	r9, #1
 801664e:	f04f 39ff 	movmi.w	r9, #4294967295
 8016652:	9501      	str	r5, [sp, #4]
 8016654:	9f01      	ldr	r7, [sp, #4]
 8016656:	444e      	add	r6, r9
 8016658:	fb94 f5f1 	sdiv	r5, r4, r1
 801665c:	fb01 4415 	mls	r4, r1, r5, r4
 8016660:	44bc      	add	ip, r7
 8016662:	2c00      	cmp	r4, #0
 8016664:	bfbc      	itt	lt
 8016666:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801666a:	1864      	addlt	r4, r4, r1
 801666c:	44a8      	add	r8, r5
 801666e:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016672:	f8a2 8004 	strh.w	r8, [r2, #4]
 8016676:	f8a2 c006 	strh.w	ip, [r2, #6]
 801667a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801667e:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016682:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8016686:	ea58 0202 	orrs.w	r2, r8, r2
 801668a:	d011      	beq.n	80166b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801668c:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016690:	f1b8 0f00 	cmp.w	r8, #0
 8016694:	db0c      	blt.n	80166b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8016696:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8016698:	4590      	cmp	r8, r2
 801669a:	da09      	bge.n	80166b0 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801669c:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80166a0:	4590      	cmp	r8, r2
 80166a2:	bf3c      	itt	cc
 80166a4:	f10c 0208 	addcc.w	r2, ip, #8
 80166a8:	6102      	strcc	r2, [r0, #16]
 80166aa:	f108 0201 	add.w	r2, r8, #1
 80166ae:	6082      	str	r2, [r0, #8]
 80166b0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80166b4:	2700      	movs	r7, #0
 80166b6:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80166ba:	45b6      	cmp	lr, r6
 80166bc:	f8ac 6000 	strh.w	r6, [ip]
 80166c0:	442b      	add	r3, r5
 80166c2:	f8ac 2002 	strh.w	r2, [ip, #2]
 80166c6:	f8ac 7004 	strh.w	r7, [ip, #4]
 80166ca:	f8ac 7006 	strh.w	r7, [ip, #6]
 80166ce:	d04b      	beq.n	8016768 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80166d0:	9f04      	ldr	r7, [sp, #16]
 80166d2:	1a64      	subs	r4, r4, r1
 80166d4:	f04f 0a00 	mov.w	sl, #0
 80166d8:	1aff      	subs	r7, r7, r3
 80166da:	443d      	add	r5, r7
 80166dc:	016d      	lsls	r5, r5, #5
 80166de:	fb95 f8f1 	sdiv	r8, r5, r1
 80166e2:	fb01 5518 	mls	r5, r1, r8, r5
 80166e6:	2d00      	cmp	r5, #0
 80166e8:	bfbc      	itt	lt
 80166ea:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80166ee:	186d      	addlt	r5, r5, r1
 80166f0:	f108 0701 	add.w	r7, r8, #1
 80166f4:	9703      	str	r7, [sp, #12]
 80166f6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80166fa:	1964      	adds	r4, r4, r5
 80166fc:	444e      	add	r6, r9
 80166fe:	bf54      	ite	pl
 8016700:	9f03      	ldrpl	r7, [sp, #12]
 8016702:	4647      	movmi	r7, r8
 8016704:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016708:	bf58      	it	pl
 801670a:	1a64      	subpl	r4, r4, r1
 801670c:	443b      	add	r3, r7
 801670e:	44bb      	add	fp, r7
 8016710:	f8ac b004 	strh.w	fp, [ip, #4]
 8016714:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016718:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801671c:	f8ac b006 	strh.w	fp, [ip, #6]
 8016720:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016724:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016728:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801672c:	ea5b 0707 	orrs.w	r7, fp, r7
 8016730:	d011      	beq.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8016732:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016736:	f1bb 0f00 	cmp.w	fp, #0
 801673a:	db0c      	blt.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801673c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801673e:	45bb      	cmp	fp, r7
 8016740:	da09      	bge.n	8016756 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8016742:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016746:	45bb      	cmp	fp, r7
 8016748:	bf3c      	itt	cc
 801674a:	f10c 0708 	addcc.w	r7, ip, #8
 801674e:	6107      	strcc	r7, [r0, #16]
 8016750:	f10b 0701 	add.w	r7, fp, #1
 8016754:	6087      	str	r7, [r0, #8]
 8016756:	6907      	ldr	r7, [r0, #16]
 8016758:	45b6      	cmp	lr, r6
 801675a:	803e      	strh	r6, [r7, #0]
 801675c:	807a      	strh	r2, [r7, #2]
 801675e:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016762:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016766:	d1c6      	bne.n	80166f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8016768:	9a04      	ldr	r2, [sp, #16]
 801676a:	1ad3      	subs	r3, r2, r3
 801676c:	6902      	ldr	r2, [r0, #16]
 801676e:	8891      	ldrh	r1, [r2, #4]
 8016770:	88d6      	ldrh	r6, [r2, #6]
 8016772:	4419      	add	r1, r3
 8016774:	8091      	strh	r1, [r2, #4]
 8016776:	9902      	ldr	r1, [sp, #8]
 8016778:	f101 0c20 	add.w	ip, r1, #32
 801677c:	9901      	ldr	r1, [sp, #4]
 801677e:	ebac 0c01 	sub.w	ip, ip, r1
 8016782:	fb03 630c 	mla	r3, r3, ip, r6
 8016786:	80d3      	strh	r3, [r2, #6]
 8016788:	e750      	b.n	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801678a:	9d05      	ldr	r5, [sp, #20]
 801678c:	1aa2      	subs	r2, r4, r2
 801678e:	eba5 0501 	sub.w	r5, r5, r1
 8016792:	9202      	str	r2, [sp, #8]
 8016794:	9508      	str	r5, [sp, #32]
 8016796:	f140 8128 	bpl.w	80169ea <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801679a:	9a03      	ldr	r2, [sp, #12]
 801679c:	2a00      	cmp	r2, #0
 801679e:	f6ff af45 	blt.w	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80167a2:	9a02      	ldr	r2, [sp, #8]
 80167a4:	f04f 34ff 	mov.w	r4, #4294967295
 80167a8:	4252      	negs	r2, r2
 80167aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80167ac:	2400      	movs	r4, #0
 80167ae:	9202      	str	r2, [sp, #8]
 80167b0:	9a06      	ldr	r2, [sp, #24]
 80167b2:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80167b6:	9206      	str	r2, [sp, #24]
 80167b8:	462a      	mov	r2, r5
 80167ba:	435a      	muls	r2, r3
 80167bc:	9401      	str	r4, [sp, #4]
 80167be:	9c02      	ldr	r4, [sp, #8]
 80167c0:	9d02      	ldr	r5, [sp, #8]
 80167c2:	fb92 f4f4 	sdiv	r4, r2, r4
 80167c6:	fb05 2214 	mls	r2, r5, r4, r2
 80167ca:	2a00      	cmp	r2, #0
 80167cc:	9207      	str	r2, [sp, #28]
 80167ce:	bfbc      	itt	lt
 80167d0:	1952      	addlt	r2, r2, r5
 80167d2:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80167d6:	6905      	ldr	r5, [r0, #16]
 80167d8:	bfb8      	it	lt
 80167da:	9207      	strlt	r2, [sp, #28]
 80167dc:	eb04 0901 	add.w	r9, r4, r1
 80167e0:	9a01      	ldr	r2, [sp, #4]
 80167e2:	ea4f 1669 	mov.w	r6, r9, asr #5
 80167e6:	429a      	cmp	r2, r3
 80167e8:	f040 8111 	bne.w	8016a0e <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80167ec:	f9b5 3000 	ldrsh.w	r3, [r5]
 80167f0:	429e      	cmp	r6, r3
 80167f2:	d104      	bne.n	80167fe <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80167f4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80167f8:	9a03      	ldr	r2, [sp, #12]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	d01b      	beq.n	8016836 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80167fe:	88ea      	ldrh	r2, [r5, #6]
 8016800:	88ab      	ldrh	r3, [r5, #4]
 8016802:	4313      	orrs	r3, r2
 8016804:	d010      	beq.n	8016828 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8016806:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801680a:	2a00      	cmp	r2, #0
 801680c:	db0c      	blt.n	8016828 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801680e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016810:	429a      	cmp	r2, r3
 8016812:	da09      	bge.n	8016828 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8016814:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8016818:	429a      	cmp	r2, r3
 801681a:	f102 0201 	add.w	r2, r2, #1
 801681e:	bf38      	it	cc
 8016820:	3508      	addcc	r5, #8
 8016822:	6082      	str	r2, [r0, #8]
 8016824:	bf38      	it	cc
 8016826:	6105      	strcc	r5, [r0, #16]
 8016828:	6903      	ldr	r3, [r0, #16]
 801682a:	9a03      	ldr	r2, [sp, #12]
 801682c:	801e      	strh	r6, [r3, #0]
 801682e:	805a      	strh	r2, [r3, #2]
 8016830:	2200      	movs	r2, #0
 8016832:	809a      	strh	r2, [r3, #4]
 8016834:	80da      	strh	r2, [r3, #6]
 8016836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016838:	9a03      	ldr	r2, [sp, #12]
 801683a:	6901      	ldr	r1, [r0, #16]
 801683c:	441a      	add	r2, r3
 801683e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016842:	42b3      	cmp	r3, r6
 8016844:	d103      	bne.n	801684e <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8016846:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801684a:	429a      	cmp	r2, r3
 801684c:	d01a      	beq.n	8016884 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801684e:	88cc      	ldrh	r4, [r1, #6]
 8016850:	888b      	ldrh	r3, [r1, #4]
 8016852:	4323      	orrs	r3, r4
 8016854:	d010      	beq.n	8016878 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8016856:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801685a:	2c00      	cmp	r4, #0
 801685c:	db0c      	blt.n	8016878 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801685e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016860:	429c      	cmp	r4, r3
 8016862:	da09      	bge.n	8016878 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8016864:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8016868:	429c      	cmp	r4, r3
 801686a:	f104 0401 	add.w	r4, r4, #1
 801686e:	bf38      	it	cc
 8016870:	3108      	addcc	r1, #8
 8016872:	6084      	str	r4, [r0, #8]
 8016874:	bf38      	it	cc
 8016876:	6101      	strcc	r1, [r0, #16]
 8016878:	6903      	ldr	r3, [r0, #16]
 801687a:	2100      	movs	r1, #0
 801687c:	801e      	strh	r6, [r3, #0]
 801687e:	805a      	strh	r2, [r3, #2]
 8016880:	8099      	strh	r1, [r3, #4]
 8016882:	80d9      	strh	r1, [r3, #6]
 8016884:	9b06      	ldr	r3, [sp, #24]
 8016886:	4293      	cmp	r3, r2
 8016888:	f000 8082 	beq.w	8016990 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 801688c:	9b08      	ldr	r3, [sp, #32]
 801688e:	9902      	ldr	r1, [sp, #8]
 8016890:	015b      	lsls	r3, r3, #5
 8016892:	9c02      	ldr	r4, [sp, #8]
 8016894:	fb93 f1f1 	sdiv	r1, r3, r1
 8016898:	fb04 3311 	mls	r3, r4, r1, r3
 801689c:	9103      	str	r1, [sp, #12]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	9308      	str	r3, [sp, #32]
 80168a2:	da04      	bge.n	80168ae <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80168a4:	1e4b      	subs	r3, r1, #1
 80168a6:	9303      	str	r3, [sp, #12]
 80168a8:	9b08      	ldr	r3, [sp, #32]
 80168aa:	4423      	add	r3, r4
 80168ac:	9308      	str	r3, [sp, #32]
 80168ae:	9b07      	ldr	r3, [sp, #28]
 80168b0:	464f      	mov	r7, r9
 80168b2:	9902      	ldr	r1, [sp, #8]
 80168b4:	2600      	movs	r6, #0
 80168b6:	1a5b      	subs	r3, r3, r1
 80168b8:	9307      	str	r3, [sp, #28]
 80168ba:	9b01      	ldr	r3, [sp, #4]
 80168bc:	f1c3 0320 	rsb	r3, r3, #32
 80168c0:	930e      	str	r3, [sp, #56]	; 0x38
 80168c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80168c4:	9b01      	ldr	r3, [sp, #4]
 80168c6:	1a5b      	subs	r3, r3, r1
 80168c8:	930a      	str	r3, [sp, #40]	; 0x28
 80168ca:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80168ce:	185b      	adds	r3, r3, r1
 80168d0:	bf58      	it	pl
 80168d2:	9902      	ldrpl	r1, [sp, #8]
 80168d4:	9307      	str	r3, [sp, #28]
 80168d6:	bf57      	itett	pl
 80168d8:	1a5b      	subpl	r3, r3, r1
 80168da:	9903      	ldrmi	r1, [sp, #12]
 80168dc:	9307      	strpl	r3, [sp, #28]
 80168de:	9b03      	ldrpl	r3, [sp, #12]
 80168e0:	bf58      	it	pl
 80168e2:	1c59      	addpl	r1, r3, #1
 80168e4:	2a00      	cmp	r2, #0
 80168e6:	4489      	add	r9, r1
 80168e8:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80168ec:	db2e      	blt.n	801694c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80168ee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80168f0:	4293      	cmp	r3, r2
 80168f2:	dd2b      	ble.n	801694c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80168f4:	9c01      	ldr	r4, [sp, #4]
 80168f6:	6905      	ldr	r5, [r0, #16]
 80168f8:	46a0      	mov	r8, r4
 80168fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80168fc:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8016900:	45a0      	cmp	r8, r4
 8016902:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8016906:	f040 814c 	bne.w	8016ba2 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 801690a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801690e:	4551      	cmp	r1, sl
 8016910:	d103      	bne.n	801691a <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8016912:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8016916:	4291      	cmp	r1, r2
 8016918:	d018      	beq.n	801694c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801691a:	ea5c 010e 	orrs.w	r1, ip, lr
 801691e:	d00f      	beq.n	8016940 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8016920:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8016924:	2900      	cmp	r1, #0
 8016926:	db0b      	blt.n	8016940 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8016928:	428b      	cmp	r3, r1
 801692a:	dd09      	ble.n	8016940 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801692c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8016930:	4299      	cmp	r1, r3
 8016932:	f101 0101 	add.w	r1, r1, #1
 8016936:	bf38      	it	cc
 8016938:	3508      	addcc	r5, #8
 801693a:	6081      	str	r1, [r0, #8]
 801693c:	bf38      	it	cc
 801693e:	6105      	strcc	r5, [r0, #16]
 8016940:	6903      	ldr	r3, [r0, #16]
 8016942:	f8a3 a000 	strh.w	sl, [r3]
 8016946:	805a      	strh	r2, [r3, #2]
 8016948:	809e      	strh	r6, [r3, #4]
 801694a:	80de      	strh	r6, [r3, #6]
 801694c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801694e:	6901      	ldr	r1, [r0, #16]
 8016950:	441a      	add	r2, r3
 8016952:	88cc      	ldrh	r4, [r1, #6]
 8016954:	888b      	ldrh	r3, [r1, #4]
 8016956:	4323      	orrs	r3, r4
 8016958:	d010      	beq.n	801697c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801695a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801695e:	2c00      	cmp	r4, #0
 8016960:	db0c      	blt.n	801697c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8016962:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016964:	429c      	cmp	r4, r3
 8016966:	da09      	bge.n	801697c <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8016968:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801696c:	429c      	cmp	r4, r3
 801696e:	f104 0401 	add.w	r4, r4, #1
 8016972:	bf38      	it	cc
 8016974:	3108      	addcc	r1, #8
 8016976:	6084      	str	r4, [r0, #8]
 8016978:	bf38      	it	cc
 801697a:	6101      	strcc	r1, [r0, #16]
 801697c:	6903      	ldr	r3, [r0, #16]
 801697e:	464f      	mov	r7, r9
 8016980:	f8a3 a000 	strh.w	sl, [r3]
 8016984:	805a      	strh	r2, [r3, #2]
 8016986:	809e      	strh	r6, [r3, #4]
 8016988:	80de      	strh	r6, [r3, #6]
 801698a:	9b06      	ldr	r3, [sp, #24]
 801698c:	4293      	cmp	r3, r2
 801698e:	d19c      	bne.n	80168ca <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8016990:	9b01      	ldr	r3, [sp, #4]
 8016992:	6907      	ldr	r7, [r0, #16]
 8016994:	f1c3 0620 	rsb	r6, r3, #32
 8016998:	9b05      	ldr	r3, [sp, #20]
 801699a:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801699e:	9b04      	ldr	r3, [sp, #16]
 80169a0:	429e      	cmp	r6, r3
 80169a2:	f040 81c7 	bne.w	8016d34 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80169a6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80169aa:	459e      	cmp	lr, r3
 80169ac:	d104      	bne.n	80169b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80169ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169b2:	429a      	cmp	r2, r3
 80169b4:	f43f ae3a 	beq.w	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80169b8:	88f9      	ldrh	r1, [r7, #6]
 80169ba:	88bb      	ldrh	r3, [r7, #4]
 80169bc:	430b      	orrs	r3, r1
 80169be:	d010      	beq.n	80169e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80169c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	db0c      	blt.n	80169e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80169c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80169ca:	428b      	cmp	r3, r1
 80169cc:	da09      	bge.n	80169e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80169ce:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80169d2:	428b      	cmp	r3, r1
 80169d4:	f103 0301 	add.w	r3, r3, #1
 80169d8:	bf38      	it	cc
 80169da:	3708      	addcc	r7, #8
 80169dc:	6083      	str	r3, [r0, #8]
 80169de:	bf38      	it	cc
 80169e0:	6107      	strcc	r7, [r0, #16]
 80169e2:	6903      	ldr	r3, [r0, #16]
 80169e4:	f8a3 e000 	strh.w	lr, [r3]
 80169e8:	e603      	b.n	80165f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80169ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80169ec:	9c03      	ldr	r4, [sp, #12]
 80169ee:	42a2      	cmp	r2, r4
 80169f0:	f6ff ae1c 	blt.w	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80169f4:	9c06      	ldr	r4, [sp, #24]
 80169f6:	42a2      	cmp	r2, r4
 80169f8:	9c08      	ldr	r4, [sp, #32]
 80169fa:	bfbc      	itt	lt
 80169fc:	3201      	addlt	r2, #1
 80169fe:	9206      	strlt	r2, [sp, #24]
 8016a00:	f1c3 0220 	rsb	r2, r3, #32
 8016a04:	4362      	muls	r2, r4
 8016a06:	2401      	movs	r4, #1
 8016a08:	940b      	str	r4, [sp, #44]	; 0x2c
 8016a0a:	2420      	movs	r4, #32
 8016a0c:	e6d6      	b.n	80167bc <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8016a0e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8016a12:	f009 021f 	and.w	r2, r9, #31
 8016a16:	f001 011f 	and.w	r1, r1, #31
 8016a1a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8016a1e:	920c      	str	r2, [sp, #48]	; 0x30
 8016a20:	45b0      	cmp	r8, r6
 8016a22:	9a01      	ldr	r2, [sp, #4]
 8016a24:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8016a28:	eba2 0203 	sub.w	r2, r2, r3
 8016a2c:	d108      	bne.n	8016a40 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8016a2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a30:	4496      	add	lr, r2
 8016a32:	4419      	add	r1, r3
 8016a34:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016a38:	fb02 a101 	mla	r1, r2, r1, sl
 8016a3c:	80e9      	strh	r1, [r5, #6]
 8016a3e:	e6fa      	b.n	8016836 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8016a40:	2c00      	cmp	r4, #0
 8016a42:	f2c0 80a7 	blt.w	8016b94 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8016a46:	2701      	movs	r7, #1
 8016a48:	f1c1 0c20 	rsb	ip, r1, #32
 8016a4c:	970a      	str	r7, [sp, #40]	; 0x28
 8016a4e:	2720      	movs	r7, #32
 8016a50:	fb02 f20c 	mul.w	r2, r2, ip
 8016a54:	9709      	str	r7, [sp, #36]	; 0x24
 8016a56:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016a58:	fb92 fcf4 	sdiv	ip, r2, r4
 8016a5c:	fb04 221c 	mls	r2, r4, ip, r2
 8016a60:	4439      	add	r1, r7
 8016a62:	2a00      	cmp	r2, #0
 8016a64:	bfbc      	itt	lt
 8016a66:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8016a6a:	1912      	addlt	r2, r2, r4
 8016a6c:	fb0c a101 	mla	r1, ip, r1, sl
 8016a70:	44e6      	add	lr, ip
 8016a72:	80e9      	strh	r1, [r5, #6]
 8016a74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016a76:	f8a5 e004 	strh.w	lr, [r5, #4]
 8016a7a:	eb08 0501 	add.w	r5, r8, r1
 8016a7e:	6901      	ldr	r1, [r0, #16]
 8016a80:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8016a84:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8016a88:	ea58 070e 	orrs.w	r7, r8, lr
 8016a8c:	d010      	beq.n	8016ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016a8e:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8016a92:	f1be 0f00 	cmp.w	lr, #0
 8016a96:	db0b      	blt.n	8016ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016a98:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016a9a:	45be      	cmp	lr, r7
 8016a9c:	da08      	bge.n	8016ab0 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8016a9e:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016aa2:	45be      	cmp	lr, r7
 8016aa4:	bf3c      	itt	cc
 8016aa6:	3108      	addcc	r1, #8
 8016aa8:	6101      	strcc	r1, [r0, #16]
 8016aaa:	f10e 0101 	add.w	r1, lr, #1
 8016aae:	6081      	str	r1, [r0, #8]
 8016ab0:	6901      	ldr	r1, [r0, #16]
 8016ab2:	f04f 0e00 	mov.w	lr, #0
 8016ab6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8016aba:	42ae      	cmp	r6, r5
 8016abc:	800d      	strh	r5, [r1, #0]
 8016abe:	4463      	add	r3, ip
 8016ac0:	f8a1 8002 	strh.w	r8, [r1, #2]
 8016ac4:	f8a1 e004 	strh.w	lr, [r1, #4]
 8016ac8:	f8a1 e006 	strh.w	lr, [r1, #6]
 8016acc:	d053      	beq.n	8016b76 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8016ace:	9901      	ldr	r1, [sp, #4]
 8016ad0:	1b12      	subs	r2, r2, r4
 8016ad2:	1ac9      	subs	r1, r1, r3
 8016ad4:	4461      	add	r1, ip
 8016ad6:	0149      	lsls	r1, r1, #5
 8016ad8:	fb91 fef4 	sdiv	lr, r1, r4
 8016adc:	fb04 111e 	mls	r1, r4, lr, r1
 8016ae0:	2900      	cmp	r1, #0
 8016ae2:	bfbc      	itt	lt
 8016ae4:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8016ae8:	1909      	addlt	r1, r1, r4
 8016aea:	f10e 0701 	add.w	r7, lr, #1
 8016aee:	970d      	str	r7, [sp, #52]	; 0x34
 8016af0:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8016af4:	1852      	adds	r2, r2, r1
 8016af6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016af8:	bf54      	ite	pl
 8016afa:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8016afe:	46f4      	movmi	ip, lr
 8016b00:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8016b04:	bf58      	it	pl
 8016b06:	1b12      	subpl	r2, r2, r4
 8016b08:	4463      	add	r3, ip
 8016b0a:	443d      	add	r5, r7
 8016b0c:	44e3      	add	fp, ip
 8016b0e:	f8aa b004 	strh.w	fp, [sl, #4]
 8016b12:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8016b16:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8016b1a:	f8aa b006 	strh.w	fp, [sl, #6]
 8016b1e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016b22:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016b26:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8016b2a:	ea5b 070a 	orrs.w	r7, fp, sl
 8016b2e:	d014      	beq.n	8016b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8016b30:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8016b34:	f1ba 0f00 	cmp.w	sl, #0
 8016b38:	db0f      	blt.n	8016b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8016b3a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016b3c:	45ba      	cmp	sl, r7
 8016b3e:	da0c      	bge.n	8016b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8016b40:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8016b44:	45ba      	cmp	sl, r7
 8016b46:	f10a 0a01 	add.w	sl, sl, #1
 8016b4a:	bf38      	it	cc
 8016b4c:	f10c 0c08 	addcc.w	ip, ip, #8
 8016b50:	f8c0 a008 	str.w	sl, [r0, #8]
 8016b54:	bf38      	it	cc
 8016b56:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8016b5a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016b5e:	f04f 0700 	mov.w	r7, #0
 8016b62:	42ae      	cmp	r6, r5
 8016b64:	f8ac 5000 	strh.w	r5, [ip]
 8016b68:	f8ac 8002 	strh.w	r8, [ip, #2]
 8016b6c:	f8ac 7004 	strh.w	r7, [ip, #4]
 8016b70:	f8ac 7006 	strh.w	r7, [ip, #6]
 8016b74:	d1bc      	bne.n	8016af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8016b76:	6904      	ldr	r4, [r0, #16]
 8016b78:	9a01      	ldr	r2, [sp, #4]
 8016b7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016b7c:	1ad3      	subs	r3, r2, r3
 8016b7e:	88a2      	ldrh	r2, [r4, #4]
 8016b80:	3120      	adds	r1, #32
 8016b82:	441a      	add	r2, r3
 8016b84:	80a2      	strh	r2, [r4, #4]
 8016b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b88:	1a89      	subs	r1, r1, r2
 8016b8a:	88e2      	ldrh	r2, [r4, #6]
 8016b8c:	fb03 2301 	mla	r3, r3, r1, r2
 8016b90:	80e3      	strh	r3, [r4, #6]
 8016b92:	e650      	b.n	8016836 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8016b94:	f04f 37ff 	mov.w	r7, #4294967295
 8016b98:	434a      	muls	r2, r1
 8016b9a:	4264      	negs	r4, r4
 8016b9c:	970a      	str	r7, [sp, #40]	; 0x28
 8016b9e:	2700      	movs	r7, #0
 8016ba0:	e758      	b.n	8016a54 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8016ba2:	ea4f 1867 	mov.w	r8, r7, asr #5
 8016ba6:	f009 031f 	and.w	r3, r9, #31
 8016baa:	f007 071f 	and.w	r7, r7, #31
 8016bae:	fa1f fc8c 	uxth.w	ip, ip
 8016bb2:	45d0      	cmp	r8, sl
 8016bb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016bb6:	fa1f fe8e 	uxth.w	lr, lr
 8016bba:	d10a      	bne.n	8016bd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8016bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bbe:	449c      	add	ip, r3
 8016bc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016bc2:	441f      	add	r7, r3
 8016bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bc6:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016bca:	fb03 e707 	mla	r7, r3, r7, lr
 8016bce:	80ef      	strh	r7, [r5, #6]
 8016bd0:	e6bc      	b.n	801694c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8016bd2:	2900      	cmp	r1, #0
 8016bd4:	f2c0 80a6 	blt.w	8016d24 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8016bd8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016bda:	f1c7 0320 	rsb	r3, r7, #32
 8016bde:	4363      	muls	r3, r4
 8016be0:	2401      	movs	r4, #1
 8016be2:	940d      	str	r4, [sp, #52]	; 0x34
 8016be4:	2420      	movs	r4, #32
 8016be6:	940c      	str	r4, [sp, #48]	; 0x30
 8016be8:	fb93 f4f1 	sdiv	r4, r3, r1
 8016bec:	fb01 3b14 	mls	fp, r1, r4, r3
 8016bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bf2:	f1bb 0f00 	cmp.w	fp, #0
 8016bf6:	441f      	add	r7, r3
 8016bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bfa:	bfbc      	itt	lt
 8016bfc:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8016c00:	448b      	addlt	fp, r1
 8016c02:	fb04 e707 	mla	r7, r4, r7, lr
 8016c06:	44a4      	add	ip, r4
 8016c08:	80ef      	strh	r7, [r5, #6]
 8016c0a:	f8a5 c004 	strh.w	ip, [r5, #4]
 8016c0e:	eb08 0503 	add.w	r5, r8, r3
 8016c12:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016c16:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8016c1a:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016c1e:	ea5e 0307 	orrs.w	r3, lr, r7
 8016c22:	d011      	beq.n	8016c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8016c24:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8016c28:	f1be 0f00 	cmp.w	lr, #0
 8016c2c:	db0c      	blt.n	8016c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8016c2e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016c30:	45be      	cmp	lr, r7
 8016c32:	da09      	bge.n	8016c48 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8016c34:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8016c38:	45be      	cmp	lr, r7
 8016c3a:	bf3c      	itt	cc
 8016c3c:	f10c 0708 	addcc.w	r7, ip, #8
 8016c40:	6107      	strcc	r7, [r0, #16]
 8016c42:	f10e 0701 	add.w	r7, lr, #1
 8016c46:	6087      	str	r7, [r0, #8]
 8016c48:	6907      	ldr	r7, [r0, #16]
 8016c4a:	b213      	sxth	r3, r2
 8016c4c:	4555      	cmp	r5, sl
 8016c4e:	9310      	str	r3, [sp, #64]	; 0x40
 8016c50:	807b      	strh	r3, [r7, #2]
 8016c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c54:	803d      	strh	r5, [r7, #0]
 8016c56:	80be      	strh	r6, [r7, #4]
 8016c58:	eb04 0c03 	add.w	ip, r4, r3
 8016c5c:	80fe      	strh	r6, [r7, #6]
 8016c5e:	d050      	beq.n	8016d02 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8016c60:	9b01      	ldr	r3, [sp, #4]
 8016c62:	eba3 070c 	sub.w	r7, r3, ip
 8016c66:	ebab 0301 	sub.w	r3, fp, r1
 8016c6a:	443c      	add	r4, r7
 8016c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016c6e:	0164      	lsls	r4, r4, #5
 8016c70:	fb94 f8f1 	sdiv	r8, r4, r1
 8016c74:	fb01 4418 	mls	r4, r1, r8, r4
 8016c78:	2c00      	cmp	r4, #0
 8016c7a:	bfbc      	itt	lt
 8016c7c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016c80:	1864      	addlt	r4, r4, r1
 8016c82:	f108 0701 	add.w	r7, r8, #1
 8016c86:	9711      	str	r7, [sp, #68]	; 0x44
 8016c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c8a:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016c8e:	191b      	adds	r3, r3, r4
 8016c90:	f8be b004 	ldrh.w	fp, [lr, #4]
 8016c94:	bf54      	ite	pl
 8016c96:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8016c98:	4647      	movmi	r7, r8
 8016c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c9c:	bf58      	it	pl
 8016c9e:	1a5b      	subpl	r3, r3, r1
 8016ca0:	44bb      	add	fp, r7
 8016ca2:	44bc      	add	ip, r7
 8016ca4:	bf58      	it	pl
 8016ca6:	9309      	strpl	r3, [sp, #36]	; 0x24
 8016ca8:	f8ae b004 	strh.w	fp, [lr, #4]
 8016cac:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016cb0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016cb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016cb6:	f8ae b006 	strh.w	fp, [lr, #6]
 8016cba:	443d      	add	r5, r7
 8016cbc:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8016cc0:	f8be b006 	ldrh.w	fp, [lr, #6]
 8016cc4:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8016cc8:	ea5b 0307 	orrs.w	r3, fp, r7
 8016ccc:	d011      	beq.n	8016cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016cce:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8016cd2:	f1bb 0f00 	cmp.w	fp, #0
 8016cd6:	db0c      	blt.n	8016cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016cd8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016cda:	45bb      	cmp	fp, r7
 8016cdc:	da09      	bge.n	8016cf2 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8016cde:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016ce2:	45bb      	cmp	fp, r7
 8016ce4:	bf3c      	itt	cc
 8016ce6:	f10e 0708 	addcc.w	r7, lr, #8
 8016cea:	6107      	strcc	r7, [r0, #16]
 8016cec:	f10b 0701 	add.w	r7, fp, #1
 8016cf0:	6087      	str	r7, [r0, #8]
 8016cf2:	6907      	ldr	r7, [r0, #16]
 8016cf4:	4555      	cmp	r5, sl
 8016cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016cf8:	803d      	strh	r5, [r7, #0]
 8016cfa:	807b      	strh	r3, [r7, #2]
 8016cfc:	80be      	strh	r6, [r7, #4]
 8016cfe:	80fe      	strh	r6, [r7, #6]
 8016d00:	d1c2      	bne.n	8016c88 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8016d02:	9b01      	ldr	r3, [sp, #4]
 8016d04:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016d06:	eba3 0c0c 	sub.w	ip, r3, ip
 8016d0a:	6903      	ldr	r3, [r0, #16]
 8016d0c:	3720      	adds	r7, #32
 8016d0e:	8899      	ldrh	r1, [r3, #4]
 8016d10:	4461      	add	r1, ip
 8016d12:	8099      	strh	r1, [r3, #4]
 8016d14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d16:	1a7f      	subs	r7, r7, r1
 8016d18:	88d9      	ldrh	r1, [r3, #6]
 8016d1a:	fb0c 1c07 	mla	ip, ip, r7, r1
 8016d1e:	f8a3 c006 	strh.w	ip, [r3, #6]
 8016d22:	e613      	b.n	801694c <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8016d24:	f04f 34ff 	mov.w	r4, #4294967295
 8016d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d2a:	4249      	negs	r1, r1
 8016d2c:	940d      	str	r4, [sp, #52]	; 0x34
 8016d2e:	2400      	movs	r4, #0
 8016d30:	437b      	muls	r3, r7
 8016d32:	e758      	b.n	8016be6 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8016d34:	9905      	ldr	r1, [sp, #20]
 8016d36:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8016d3a:	f009 0c1f 	and.w	ip, r9, #31
 8016d3e:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8016d42:	f001 011f 	and.w	r1, r1, #31
 8016d46:	45f3      	cmp	fp, lr
 8016d48:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8016d4c:	9102      	str	r1, [sp, #8]
 8016d4e:	9904      	ldr	r1, [sp, #16]
 8016d50:	eba1 0406 	sub.w	r4, r1, r6
 8016d54:	d108      	bne.n	8016d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8016d56:	9b02      	ldr	r3, [sp, #8]
 8016d58:	44a0      	add	r8, r4
 8016d5a:	449c      	add	ip, r3
 8016d5c:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016d60:	fb04 a40c 	mla	r4, r4, ip, sl
 8016d64:	80fc      	strh	r4, [r7, #6]
 8016d66:	e461      	b.n	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8016d68:	9905      	ldr	r1, [sp, #20]
 8016d6a:	ebb1 0109 	subs.w	r1, r1, r9
 8016d6e:	bf51      	iteee	pl
 8016d70:	f1cc 0520 	rsbpl	r5, ip, #32
 8016d74:	fb04 f40c 	mulmi.w	r4, r4, ip
 8016d78:	4249      	negmi	r1, r1
 8016d7a:	2500      	movmi	r5, #0
 8016d7c:	bf5d      	ittte	pl
 8016d7e:	436c      	mulpl	r4, r5
 8016d80:	2520      	movpl	r5, #32
 8016d82:	f04f 0901 	movpl.w	r9, #1
 8016d86:	f04f 39ff 	movmi.w	r9, #4294967295
 8016d8a:	9501      	str	r5, [sp, #4]
 8016d8c:	9b01      	ldr	r3, [sp, #4]
 8016d8e:	fb94 f5f1 	sdiv	r5, r4, r1
 8016d92:	fb01 4415 	mls	r4, r1, r5, r4
 8016d96:	449c      	add	ip, r3
 8016d98:	eb0b 0309 	add.w	r3, fp, r9
 8016d9c:	2c00      	cmp	r4, #0
 8016d9e:	bfbc      	itt	lt
 8016da0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8016da4:	1864      	addlt	r4, r4, r1
 8016da6:	44a8      	add	r8, r5
 8016da8:	fb05 ac0c 	mla	ip, r5, ip, sl
 8016dac:	f8a7 8004 	strh.w	r8, [r7, #4]
 8016db0:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016db4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016db8:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8016dbc:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016dc0:	ea58 0707 	orrs.w	r7, r8, r7
 8016dc4:	d011      	beq.n	8016dea <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016dc6:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8016dca:	f1b8 0f00 	cmp.w	r8, #0
 8016dce:	db0c      	blt.n	8016dea <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016dd0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016dd2:	45b8      	cmp	r8, r7
 8016dd4:	da09      	bge.n	8016dea <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8016dd6:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8016dda:	45b8      	cmp	r8, r7
 8016ddc:	bf3c      	itt	cc
 8016dde:	f10c 0708 	addcc.w	r7, ip, #8
 8016de2:	6107      	strcc	r7, [r0, #16]
 8016de4:	f108 0701 	add.w	r7, r8, #1
 8016de8:	6087      	str	r7, [r0, #8]
 8016dea:	6907      	ldr	r7, [r0, #16]
 8016dec:	f04f 0c00 	mov.w	ip, #0
 8016df0:	b212      	sxth	r2, r2
 8016df2:	459e      	cmp	lr, r3
 8016df4:	803b      	strh	r3, [r7, #0]
 8016df6:	442e      	add	r6, r5
 8016df8:	807a      	strh	r2, [r7, #2]
 8016dfa:	f8a7 c004 	strh.w	ip, [r7, #4]
 8016dfe:	f8a7 c006 	strh.w	ip, [r7, #6]
 8016e02:	d04b      	beq.n	8016e9c <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8016e04:	9f04      	ldr	r7, [sp, #16]
 8016e06:	1a64      	subs	r4, r4, r1
 8016e08:	f04f 0a00 	mov.w	sl, #0
 8016e0c:	1bbf      	subs	r7, r7, r6
 8016e0e:	443d      	add	r5, r7
 8016e10:	016d      	lsls	r5, r5, #5
 8016e12:	fb95 f8f1 	sdiv	r8, r5, r1
 8016e16:	fb01 5518 	mls	r5, r1, r8, r5
 8016e1a:	4565      	cmp	r5, ip
 8016e1c:	bfbc      	itt	lt
 8016e1e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8016e22:	186d      	addlt	r5, r5, r1
 8016e24:	f108 0701 	add.w	r7, r8, #1
 8016e28:	9703      	str	r7, [sp, #12]
 8016e2a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016e2e:	1964      	adds	r4, r4, r5
 8016e30:	444b      	add	r3, r9
 8016e32:	bf54      	ite	pl
 8016e34:	9f03      	ldrpl	r7, [sp, #12]
 8016e36:	4647      	movmi	r7, r8
 8016e38:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8016e3c:	bf58      	it	pl
 8016e3e:	1a64      	subpl	r4, r4, r1
 8016e40:	443e      	add	r6, r7
 8016e42:	44bb      	add	fp, r7
 8016e44:	f8ac b004 	strh.w	fp, [ip, #4]
 8016e48:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016e4c:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8016e50:	f8ac b006 	strh.w	fp, [ip, #6]
 8016e54:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8016e58:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8016e5c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8016e60:	ea5b 0707 	orrs.w	r7, fp, r7
 8016e64:	d011      	beq.n	8016e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016e66:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8016e6a:	f1bb 0f00 	cmp.w	fp, #0
 8016e6e:	db0c      	blt.n	8016e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016e70:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8016e72:	45bb      	cmp	fp, r7
 8016e74:	da09      	bge.n	8016e8a <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8016e76:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8016e7a:	45bb      	cmp	fp, r7
 8016e7c:	bf3c      	itt	cc
 8016e7e:	f10c 0708 	addcc.w	r7, ip, #8
 8016e82:	6107      	strcc	r7, [r0, #16]
 8016e84:	f10b 0701 	add.w	r7, fp, #1
 8016e88:	6087      	str	r7, [r0, #8]
 8016e8a:	6907      	ldr	r7, [r0, #16]
 8016e8c:	459e      	cmp	lr, r3
 8016e8e:	803b      	strh	r3, [r7, #0]
 8016e90:	807a      	strh	r2, [r7, #2]
 8016e92:	f8a7 a004 	strh.w	sl, [r7, #4]
 8016e96:	f8a7 a006 	strh.w	sl, [r7, #6]
 8016e9a:	d1c6      	bne.n	8016e2a <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8016e9c:	9b04      	ldr	r3, [sp, #16]
 8016e9e:	1b9e      	subs	r6, r3, r6
 8016ea0:	6903      	ldr	r3, [r0, #16]
 8016ea2:	889a      	ldrh	r2, [r3, #4]
 8016ea4:	4432      	add	r2, r6
 8016ea6:	809a      	strh	r2, [r3, #4]
 8016ea8:	9a02      	ldr	r2, [sp, #8]
 8016eaa:	f102 0c20 	add.w	ip, r2, #32
 8016eae:	9a01      	ldr	r2, [sp, #4]
 8016eb0:	ebac 0c02 	sub.w	ip, ip, r2
 8016eb4:	88da      	ldrh	r2, [r3, #6]
 8016eb6:	fb06 260c 	mla	r6, r6, ip, r2
 8016eba:	80de      	strh	r6, [r3, #6]
 8016ebc:	f7ff bbb6 	b.w	801662c <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08016ec0 <_ZN8touchgfx7Outline6lineToEii>:
 8016ec0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016ec2:	079b      	lsls	r3, r3, #30
 8016ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ec6:	460e      	mov	r6, r1
 8016ec8:	4615      	mov	r5, r2
 8016eca:	d511      	bpl.n	8016ef0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016ecc:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8016ed0:	ea86 0701 	eor.w	r7, r6, r1
 8016ed4:	ea85 0302 	eor.w	r3, r5, r2
 8016ed8:	433b      	orrs	r3, r7
 8016eda:	d009      	beq.n	8016ef0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8016edc:	4633      	mov	r3, r6
 8016ede:	9500      	str	r5, [sp, #0]
 8016ee0:	f7ff fb4c 	bl	801657c <_ZN8touchgfx7Outline10renderLineEiiii>
 8016ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016ee6:	f043 0301 	orr.w	r3, r3, #1
 8016eea:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8016eee:	6243      	str	r3, [r0, #36]	; 0x24
 8016ef0:	b003      	add	sp, #12
 8016ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016ef4 <_ZN8touchgfx7Outline6moveToEii>:
 8016ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ef6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016ef8:	4615      	mov	r5, r2
 8016efa:	4604      	mov	r4, r0
 8016efc:	460e      	mov	r6, r1
 8016efe:	079a      	lsls	r2, r3, #30
 8016f00:	d401      	bmi.n	8016f06 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8016f02:	f7ff fb07 	bl	8016514 <_ZN8touchgfx7Outline5resetEv>
 8016f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f08:	07db      	lsls	r3, r3, #31
 8016f0a:	d504      	bpl.n	8016f16 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8016f12:	f7ff ffd5 	bl	8016ec0 <_ZN8touchgfx7Outline6lineToEii>
 8016f16:	6923      	ldr	r3, [r4, #16]
 8016f18:	1170      	asrs	r0, r6, #5
 8016f1a:	1169      	asrs	r1, r5, #5
 8016f1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016f20:	4290      	cmp	r0, r2
 8016f22:	d103      	bne.n	8016f2c <_ZN8touchgfx7Outline6moveToEii+0x38>
 8016f24:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f28:	4291      	cmp	r1, r2
 8016f2a:	d01a      	beq.n	8016f62 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8016f2c:	88df      	ldrh	r7, [r3, #6]
 8016f2e:	889a      	ldrh	r2, [r3, #4]
 8016f30:	433a      	orrs	r2, r7
 8016f32:	d010      	beq.n	8016f56 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016f34:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8016f38:	2a00      	cmp	r2, #0
 8016f3a:	db0c      	blt.n	8016f56 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016f3c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8016f3e:	42ba      	cmp	r2, r7
 8016f40:	da09      	bge.n	8016f56 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8016f42:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8016f46:	42ba      	cmp	r2, r7
 8016f48:	f102 0201 	add.w	r2, r2, #1
 8016f4c:	bf38      	it	cc
 8016f4e:	3308      	addcc	r3, #8
 8016f50:	60a2      	str	r2, [r4, #8]
 8016f52:	bf38      	it	cc
 8016f54:	6123      	strcc	r3, [r4, #16]
 8016f56:	6923      	ldr	r3, [r4, #16]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	8018      	strh	r0, [r3, #0]
 8016f5c:	8059      	strh	r1, [r3, #2]
 8016f5e:	809a      	strh	r2, [r3, #4]
 8016f60:	80da      	strh	r2, [r3, #6]
 8016f62:	6166      	str	r6, [r4, #20]
 8016f64:	6225      	str	r5, [r4, #32]
 8016f66:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016f6c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8016f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f70:	b0d0      	sub	sp, #320	; 0x140
 8016f72:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8016f76:	466c      	mov	r4, sp
 8016f78:	4627      	mov	r7, r4
 8016f7a:	1a0d      	subs	r5, r1, r0
 8016f7c:	f100 0308 	add.w	r3, r0, #8
 8016f80:	2d48      	cmp	r5, #72	; 0x48
 8016f82:	f340 80d5 	ble.w	8017130 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8016f86:	112d      	asrs	r5, r5, #4
 8016f88:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8016f8c:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016f90:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8016f94:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8016f98:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8016f9c:	6816      	ldr	r6, [r2, #0]
 8016f9e:	6006      	str	r6, [r0, #0]
 8016fa0:	6856      	ldr	r6, [r2, #4]
 8016fa2:	6046      	str	r6, [r0, #4]
 8016fa4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8016fa8:	f8a2 8002 	strh.w	r8, [r2, #2]
 8016fac:	f8a2 e004 	strh.w	lr, [r2, #4]
 8016fb0:	f8a2 c006 	strh.w	ip, [r2, #6]
 8016fb4:	f1a1 0208 	sub.w	r2, r1, #8
 8016fb8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8016fbc:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8016fc0:	4565      	cmp	r5, ip
 8016fc2:	db06      	blt.n	8016fd2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8016fc4:	d119      	bne.n	8016ffa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016fc6:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8016fca:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8016fce:	42ae      	cmp	r6, r5
 8016fd0:	dd13      	ble.n	8016ffa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8016fd2:	460e      	mov	r6, r1
 8016fd4:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8016fd8:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8016fdc:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8016fe0:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8016fe4:	601d      	str	r5, [r3, #0]
 8016fe6:	6875      	ldr	r5, [r6, #4]
 8016fe8:	605d      	str	r5, [r3, #4]
 8016fea:	f821 9c08 	strh.w	r9, [r1, #-8]
 8016fee:	f821 cc06 	strh.w	ip, [r1, #-6]
 8016ff2:	f821 8c04 	strh.w	r8, [r1, #-4]
 8016ff6:	f821 ec02 	strh.w	lr, [r1, #-2]
 8016ffa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016ffe:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8017002:	42ae      	cmp	r6, r5
 8017004:	db06      	blt.n	8017014 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8017006:	d116      	bne.n	8017036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017008:	f9b0 c000 	ldrsh.w	ip, [r0]
 801700c:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8017010:	45ac      	cmp	ip, r5
 8017012:	da10      	bge.n	8017036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8017014:	681d      	ldr	r5, [r3, #0]
 8017016:	f9b0 8000 	ldrsh.w	r8, [r0]
 801701a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801701e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8017022:	6005      	str	r5, [r0, #0]
 8017024:	685d      	ldr	r5, [r3, #4]
 8017026:	f8a0 8008 	strh.w	r8, [r0, #8]
 801702a:	6045      	str	r5, [r0, #4]
 801702c:	8146      	strh	r6, [r0, #10]
 801702e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8017032:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017036:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801703a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801703e:	4565      	cmp	r5, ip
 8017040:	db06      	blt.n	8017050 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8017042:	d119      	bne.n	8017078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017044:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8017048:	f9b0 5000 	ldrsh.w	r5, [r0]
 801704c:	42ae      	cmp	r6, r5
 801704e:	da13      	bge.n	8017078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017050:	460e      	mov	r6, r1
 8017052:	f9b0 9000 	ldrsh.w	r9, [r0]
 8017056:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801705a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801705e:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8017062:	6005      	str	r5, [r0, #0]
 8017064:	6875      	ldr	r5, [r6, #4]
 8017066:	6045      	str	r5, [r0, #4]
 8017068:	f821 9c08 	strh.w	r9, [r1, #-8]
 801706c:	f821 cc06 	strh.w	ip, [r1, #-6]
 8017070:	f821 8c04 	strh.w	r8, [r1, #-4]
 8017074:	f821 ec02 	strh.w	lr, [r1, #-2]
 8017078:	3308      	adds	r3, #8
 801707a:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801707e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8017082:	45e6      	cmp	lr, ip
 8017084:	dbf8      	blt.n	8017078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017086:	d105      	bne.n	8017094 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8017088:	f9b3 6000 	ldrsh.w	r6, [r3]
 801708c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017090:	42ae      	cmp	r6, r5
 8017092:	dbf1      	blt.n	8017078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8017094:	4615      	mov	r5, r2
 8017096:	3a08      	subs	r2, #8
 8017098:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801709c:	45b4      	cmp	ip, r6
 801709e:	dbf9      	blt.n	8017094 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80170a0:	d105      	bne.n	80170ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80170a2:	f9b0 8000 	ldrsh.w	r8, [r0]
 80170a6:	f9b2 6000 	ldrsh.w	r6, [r2]
 80170aa:	45b0      	cmp	r8, r6
 80170ac:	dbf2      	blt.n	8017094 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80170ae:	4293      	cmp	r3, r2
 80170b0:	f1a5 0608 	sub.w	r6, r5, #8
 80170b4:	d816      	bhi.n	80170e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80170b6:	f8d6 c000 	ldr.w	ip, [r6]
 80170ba:	f9b3 a000 	ldrsh.w	sl, [r3]
 80170be:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80170c2:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80170c6:	f8c3 c000 	str.w	ip, [r3]
 80170ca:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80170ce:	f8c3 c004 	str.w	ip, [r3, #4]
 80170d2:	f825 ac08 	strh.w	sl, [r5, #-8]
 80170d6:	f825 ec06 	strh.w	lr, [r5, #-6]
 80170da:	f825 9c04 	strh.w	r9, [r5, #-4]
 80170de:	f825 8c02 	strh.w	r8, [r5, #-2]
 80170e2:	e7c9      	b.n	8017078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80170e4:	f8d6 e000 	ldr.w	lr, [r6]
 80170e8:	f9b0 a000 	ldrsh.w	sl, [r0]
 80170ec:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80170f0:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80170f4:	f8c0 e000 	str.w	lr, [r0]
 80170f8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80170fc:	1a16      	subs	r6, r2, r0
 80170fe:	f8c0 e004 	str.w	lr, [r0, #4]
 8017102:	f825 ac08 	strh.w	sl, [r5, #-8]
 8017106:	f825 cc06 	strh.w	ip, [r5, #-6]
 801710a:	f825 9c04 	strh.w	r9, [r5, #-4]
 801710e:	f825 8c02 	strh.w	r8, [r5, #-2]
 8017112:	1acd      	subs	r5, r1, r3
 8017114:	10ed      	asrs	r5, r5, #3
 8017116:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801711a:	bfb5      	itete	lt
 801711c:	e9c4 0200 	strdlt	r0, r2, [r4]
 8017120:	e9c4 3100 	strdge	r3, r1, [r4]
 8017124:	460a      	movlt	r2, r1
 8017126:	4603      	movge	r3, r0
 8017128:	3408      	adds	r4, #8
 801712a:	4618      	mov	r0, r3
 801712c:	4611      	mov	r1, r2
 801712e:	e724      	b.n	8016f7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017130:	4299      	cmp	r1, r3
 8017132:	d927      	bls.n	8017184 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8017134:	f1a3 0210 	sub.w	r2, r3, #16
 8017138:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801713c:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8017140:	45ac      	cmp	ip, r5
 8017142:	db06      	blt.n	8017152 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8017144:	d11c      	bne.n	8017180 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017146:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801714a:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801714e:	42ae      	cmp	r6, r5
 8017150:	da16      	bge.n	8017180 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8017152:	4615      	mov	r5, r2
 8017154:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8017158:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801715c:	3a08      	subs	r2, #8
 801715e:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8017162:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 8017166:	6196      	str	r6, [r2, #24]
 8017168:	42a8      	cmp	r0, r5
 801716a:	686e      	ldr	r6, [r5, #4]
 801716c:	f8a2 9010 	strh.w	r9, [r2, #16]
 8017170:	61d6      	str	r6, [r2, #28]
 8017172:	f8a2 c012 	strh.w	ip, [r2, #18]
 8017176:	f8a2 8014 	strh.w	r8, [r2, #20]
 801717a:	f8a2 e016 	strh.w	lr, [r2, #22]
 801717e:	d1db      	bne.n	8017138 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8017180:	3308      	adds	r3, #8
 8017182:	e7d5      	b.n	8017130 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8017184:	42bc      	cmp	r4, r7
 8017186:	d903      	bls.n	8017190 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8017188:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801718c:	3c08      	subs	r4, #8
 801718e:	e6f4      	b.n	8016f7a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8017190:	b050      	add	sp, #320	; 0x140
 8017192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08017196 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8017196:	b510      	push	{r4, lr}
 8017198:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801719a:	4604      	mov	r4, r0
 801719c:	07da      	lsls	r2, r3, #31
 801719e:	d507      	bpl.n	80171b0 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80171a0:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80171a4:	f7ff fe8c 	bl	8016ec0 <_ZN8touchgfx7Outline6lineToEii>
 80171a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80171aa:	f023 0301 	bic.w	r3, r3, #1
 80171ae:	6243      	str	r3, [r0, #36]	; 0x24
 80171b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171b2:	079b      	lsls	r3, r3, #30
 80171b4:	d521      	bpl.n	80171fa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80171b6:	6923      	ldr	r3, [r4, #16]
 80171b8:	88d9      	ldrh	r1, [r3, #6]
 80171ba:	889a      	ldrh	r2, [r3, #4]
 80171bc:	430a      	orrs	r2, r1
 80171be:	d010      	beq.n	80171e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80171c0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80171c4:	2a00      	cmp	r2, #0
 80171c6:	db0c      	blt.n	80171e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80171c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80171ca:	428a      	cmp	r2, r1
 80171cc:	da09      	bge.n	80171e2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80171ce:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80171d2:	4291      	cmp	r1, r2
 80171d4:	f102 0201 	add.w	r2, r2, #1
 80171d8:	bf88      	it	hi
 80171da:	3308      	addhi	r3, #8
 80171dc:	60a2      	str	r2, [r4, #8]
 80171de:	bf88      	it	hi
 80171e0:	6123      	strhi	r3, [r4, #16]
 80171e2:	68a1      	ldr	r1, [r4, #8]
 80171e4:	b129      	cbz	r1, 80171f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80171e6:	6863      	ldr	r3, [r4, #4]
 80171e8:	4299      	cmp	r1, r3
 80171ea:	d802      	bhi.n	80171f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80171ec:	68e0      	ldr	r0, [r4, #12]
 80171ee:	f7ff febd 	bl	8016f6c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80171f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171f4:	f023 0302 	bic.w	r3, r3, #2
 80171f8:	6263      	str	r3, [r4, #36]	; 0x24
 80171fa:	68e0      	ldr	r0, [r4, #12]
 80171fc:	bd10      	pop	{r4, pc}
	...

08017200 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8017200:	4b02      	ldr	r3, [pc, #8]	; (801720c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8017202:	6018      	str	r0, [r3, #0]
 8017204:	4b02      	ldr	r3, [pc, #8]	; (8017210 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8017206:	6019      	str	r1, [r3, #0]
 8017208:	4770      	bx	lr
 801720a:	bf00      	nop
 801720c:	24010068 	.word	0x24010068
 8017210:	2401006c 	.word	0x2401006c

08017214 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8017214:	2300      	movs	r3, #0
 8017216:	4a02      	ldr	r2, [pc, #8]	; (8017220 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8017218:	6013      	str	r3, [r2, #0]
 801721a:	4a02      	ldr	r2, [pc, #8]	; (8017224 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 801721c:	6013      	str	r3, [r2, #0]
 801721e:	4770      	bx	lr
 8017220:	24010068 	.word	0x24010068
 8017224:	2401006c 	.word	0x2401006c

08017228 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8017228:	4b01      	ldr	r3, [pc, #4]	; (8017230 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801722a:	6818      	ldr	r0, [r3, #0]
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop
 8017230:	24010068 	.word	0x24010068

08017234 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8017234:	4b01      	ldr	r3, [pc, #4]	; (801723c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8017236:	6818      	ldr	r0, [r3, #0]
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop
 801723c:	2401006c 	.word	0x2401006c

08017240 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8017240:	b510      	push	{r4, lr}
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	460c      	mov	r4, r1
 8017246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017248:	4798      	blx	r3
 801724a:	1b03      	subs	r3, r0, r4
 801724c:	4258      	negs	r0, r3
 801724e:	4158      	adcs	r0, r3
 8017250:	bd10      	pop	{r4, pc}
	...

08017254 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8017254:	4b01      	ldr	r3, [pc, #4]	; (801725c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8017256:	6019      	str	r1, [r3, #0]
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	24010070 	.word	0x24010070

08017260 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8017260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017264:	4696      	mov	lr, r2
 8017266:	b097      	sub	sp, #92	; 0x5c
 8017268:	4605      	mov	r5, r0
 801726a:	4614      	mov	r4, r2
 801726c:	460e      	mov	r6, r1
 801726e:	461f      	mov	r7, r3
 8017270:	f10d 0c1c 	add.w	ip, sp, #28
 8017274:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8017278:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801727c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8017280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017288:	f8de 3000 	ldr.w	r3, [lr]
 801728c:	f104 0e14 	add.w	lr, r4, #20
 8017290:	f8cc 3000 	str.w	r3, [ip]
 8017294:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017298:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801729c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172a0:	f8de 3000 	ldr.w	r3, [lr]
 80172a4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80172a8:	f8cc 3000 	str.w	r3, [ip]
 80172ac:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80172b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80172b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172b8:	f8de 3000 	ldr.w	r3, [lr]
 80172bc:	4631      	mov	r1, r6
 80172be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80172c0:	4628      	mov	r0, r5
 80172c2:	f8cc 3000 	str.w	r3, [ip]
 80172c6:	682b      	ldr	r3, [r5, #0]
 80172c8:	9201      	str	r2, [sp, #4]
 80172ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80172cc:	f8cd 8008 	str.w	r8, [sp, #8]
 80172d0:	9200      	str	r2, [sp, #0]
 80172d2:	aa07      	add	r2, sp, #28
 80172d4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80172d8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80172dc:	463b      	mov	r3, r7
 80172de:	47d8      	blx	fp
 80172e0:	46a6      	mov	lr, r4
 80172e2:	f10d 0c1c 	add.w	ip, sp, #28
 80172e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80172ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80172ee:	f8de 3000 	ldr.w	r3, [lr]
 80172f2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80172f6:	343c      	adds	r4, #60	; 0x3c
 80172f8:	f8cc 3000 	str.w	r3, [ip]
 80172fc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017300:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017304:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017308:	f8de 3000 	ldr.w	r3, [lr]
 801730c:	f8cc 3000 	str.w	r3, [ip]
 8017310:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8017314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017316:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801731a:	6823      	ldr	r3, [r4, #0]
 801731c:	4631      	mov	r1, r6
 801731e:	4628      	mov	r0, r5
 8017320:	f8cc 3000 	str.w	r3, [ip]
 8017324:	682b      	ldr	r3, [r5, #0]
 8017326:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801732a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801732c:	f8cd 8008 	str.w	r8, [sp, #8]
 8017330:	9201      	str	r2, [sp, #4]
 8017332:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017334:	9200      	str	r2, [sp, #0]
 8017336:	aa07      	add	r2, sp, #28
 8017338:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801733a:	463b      	mov	r3, r7
 801733c:	47a0      	blx	r4
 801733e:	b017      	add	sp, #92	; 0x5c
 8017340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017344 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8017344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017348:	b08d      	sub	sp, #52	; 0x34
 801734a:	4688      	mov	r8, r1
 801734c:	f8d3 c000 	ldr.w	ip, [r3]
 8017350:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017352:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8017356:	680f      	ldr	r7, [r1, #0]
 8017358:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801735c:	eba7 070c 	sub.w	r7, r7, ip
 8017360:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8017364:	edd3 6a07 	vldr	s13, [r3, #28]
 8017368:	42bc      	cmp	r4, r7
 801736a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801736c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8017370:	bfa8      	it	ge
 8017372:	463c      	movge	r4, r7
 8017374:	f9b1 9000 	ldrsh.w	r9, [r1]
 8017378:	f9ba 1000 	ldrsh.w	r1, [sl]
 801737c:	ee07 4a90 	vmov	s15, r4
 8017380:	eb09 0e0c 	add.w	lr, r9, ip
 8017384:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8017388:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801738c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8017390:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8017394:	4571      	cmp	r1, lr
 8017396:	ee25 4a04 	vmul.f32	s8, s10, s8
 801739a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801739e:	ee25 5a27 	vmul.f32	s10, s10, s15
 80173a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80173a6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80173aa:	ee32 1a05 	vadd.f32	s2, s4, s10
 80173ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80173b2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80173b6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80173ba:	ee22 2a07 	vmul.f32	s4, s4, s14
 80173be:	f340 808c 	ble.w	80174da <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80173c2:	eba1 060e 	sub.w	r6, r1, lr
 80173c6:	fb96 f5f4 	sdiv	r5, r6, r4
 80173ca:	ee07 5a10 	vmov	s14, r5
 80173ce:	2d00      	cmp	r5, #0
 80173d0:	fb04 6615 	mls	r6, r4, r5, r6
 80173d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80173d8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80173dc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80173e0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80173e4:	dd12      	ble.n	801740c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80173e6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80173ea:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80173ee:	ee31 2a45 	vsub.f32	s4, s2, s10
 80173f2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80173f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173fa:	bf14      	ite	ne
 80173fc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8017400:	eeb0 7a67 	vmoveq.f32	s14, s15
 8017404:	ee61 1a87 	vmul.f32	s3, s3, s14
 8017408:	ee22 2a07 	vmul.f32	s4, s4, s14
 801740c:	fb05 f204 	mul.w	r2, r5, r4
 8017410:	1abf      	subs	r7, r7, r2
 8017412:	4494      	add	ip, r2
 8017414:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8017418:	4411      	add	r1, r2
 801741a:	eb09 020c 	add.w	r2, r9, ip
 801741e:	b209      	sxth	r1, r1
 8017420:	443a      	add	r2, r7
 8017422:	428a      	cmp	r2, r1
 8017424:	bfc4      	itt	gt
 8017426:	eba1 0209 	subgt.w	r2, r1, r9
 801742a:	eba2 070c 	subgt.w	r7, r2, ip
 801742e:	2f00      	cmp	r7, #0
 8017430:	dd50      	ble.n	80174d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8017432:	fb97 f1f4 	sdiv	r1, r7, r4
 8017436:	fb04 7211 	mls	r2, r4, r1, r7
 801743a:	b90a      	cbnz	r2, 8017440 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801743c:	3901      	subs	r1, #1
 801743e:	4622      	mov	r2, r4
 8017440:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8017444:	6840      	ldr	r0, [r0, #4]
 8017446:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801744a:	44b6      	add	lr, r6
 801744c:	f8d0 a000 	ldr.w	sl, [r0]
 8017450:	2900      	cmp	r1, #0
 8017452:	bfcc      	ite	gt
 8017454:	46a1      	movgt	r9, r4
 8017456:	4691      	movle	r9, r2
 8017458:	900b      	str	r0, [sp, #44]	; 0x2c
 801745a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801745c:	fb04 e505 	mla	r5, r4, r5, lr
 8017460:	eef0 6a42 	vmov.f32	s13, s4
 8017464:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017468:	9008      	str	r0, [sp, #32]
 801746a:	eeb0 7a61 	vmov.f32	s14, s3
 801746e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8017470:	695b      	ldr	r3, [r3, #20]
 8017472:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017476:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801747a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801747e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017480:	445b      	add	r3, fp
 8017482:	9307      	str	r3, [sp, #28]
 8017484:	ee16 3a90 	vmov	r3, s13
 8017488:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801748c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8017490:	ee21 3a23 	vmul.f32	s6, s2, s7
 8017494:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8017498:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801749c:	ee17 7a90 	vmov	r7, s15
 80174a0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80174a4:	fb97 f7f4 	sdiv	r7, r7, r4
 80174a8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80174ac:	ee17 ca90 	vmov	ip, s15
 80174b0:	fb9c fcf4 	sdiv	ip, ip, r4
 80174b4:	fb0c 3306 	mla	r3, ip, r6, r3
 80174b8:	9302      	str	r3, [sp, #8]
 80174ba:	ee17 3a10 	vmov	r3, s14
 80174be:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80174c2:	fb07 3706 	mla	r7, r7, r6, r3
 80174c6:	eba9 0306 	sub.w	r3, r9, r6
 80174ca:	e9cd 4700 	strd	r4, r7, [sp]
 80174ce:	f8da 4008 	ldr.w	r4, [sl, #8]
 80174d2:	47a0      	blx	r4
 80174d4:	b00d      	add	sp, #52	; 0x34
 80174d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174da:	2500      	movs	r5, #0
 80174dc:	462e      	mov	r6, r5
 80174de:	e799      	b.n	8017414 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080174e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80174e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e4:	b0db      	sub	sp, #364	; 0x16c
 80174e6:	461d      	mov	r5, r3
 80174e8:	4614      	mov	r4, r2
 80174ea:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80174ee:	910f      	str	r1, [sp, #60]	; 0x3c
 80174f0:	4629      	mov	r1, r5
 80174f2:	930a      	str	r3, [sp, #40]	; 0x28
 80174f4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80174f8:	9009      	str	r0, [sp, #36]	; 0x24
 80174fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80174fc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8017500:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8017504:	9310      	str	r3, [sp, #64]	; 0x40
 8017506:	6803      	ldr	r3, [r0, #0]
 8017508:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801750a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801750e:	47b8      	blx	r7
 8017510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017512:	6058      	str	r0, [r3, #4]
 8017514:	2800      	cmp	r0, #0
 8017516:	f000 83a1 	beq.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801751a:	682b      	ldr	r3, [r5, #0]
 801751c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8017520:	ed94 7a02 	vldr	s14, [r4, #8]
 8017524:	9314      	str	r3, [sp, #80]	; 0x50
 8017526:	686b      	ldr	r3, [r5, #4]
 8017528:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801752c:	9315      	str	r3, [sp, #84]	; 0x54
 801752e:	4bc1      	ldr	r3, [pc, #772]	; (8017834 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8017530:	7819      	ldrb	r1, [r3, #0]
 8017532:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8017536:	2900      	cmp	r1, #0
 8017538:	bf16      	itet	ne
 801753a:	4619      	movne	r1, r3
 801753c:	4611      	moveq	r1, r2
 801753e:	4613      	movne	r3, r2
 8017540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017544:	9116      	str	r1, [sp, #88]	; 0x58
 8017546:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801754a:	f240 8387 	bls.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801754e:	ed94 7a07 	vldr	s14, [r4, #28]
 8017552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801755a:	f240 837f 	bls.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801755e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8017562:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756a:	f240 8377 	bls.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801756e:	6822      	ldr	r2, [r4, #0]
 8017570:	4bb1      	ldr	r3, [pc, #708]	; (8017838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8017572:	429a      	cmp	r2, r3
 8017574:	f2c0 8372 	blt.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017578:	49b0      	ldr	r1, [pc, #704]	; (801783c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801757a:	6963      	ldr	r3, [r4, #20]
 801757c:	428a      	cmp	r2, r1
 801757e:	f300 836d 	bgt.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017582:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017586:	48ae      	ldr	r0, [pc, #696]	; (8017840 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8017588:	33ff      	adds	r3, #255	; 0xff
 801758a:	4283      	cmp	r3, r0
 801758c:	f200 8366 	bhi.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017590:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017592:	4dac      	ldr	r5, [pc, #688]	; (8017844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8017594:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8017598:	33ff      	adds	r3, #255	; 0xff
 801759a:	42ab      	cmp	r3, r5
 801759c:	f200 835e 	bhi.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175a0:	6862      	ldr	r2, [r4, #4]
 80175a2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80175a6:	33ff      	adds	r3, #255	; 0xff
 80175a8:	4283      	cmp	r3, r0
 80175aa:	f200 8357 	bhi.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175ae:	69a1      	ldr	r1, [r4, #24]
 80175b0:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80175b4:	33ff      	adds	r3, #255	; 0xff
 80175b6:	4283      	cmp	r3, r0
 80175b8:	f200 8350 	bhi.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80175be:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80175c2:	30ff      	adds	r0, #255	; 0xff
 80175c4:	42a8      	cmp	r0, r5
 80175c6:	f200 8349 	bhi.w	8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80175ca:	428a      	cmp	r2, r1
 80175cc:	f280 8110 	bge.w	80177f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80175d0:	429a      	cmp	r2, r3
 80175d2:	f300 8119 	bgt.w	8017808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80175d6:	4299      	cmp	r1, r3
 80175d8:	f280 811d 	bge.w	8017816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80175dc:	2502      	movs	r5, #2
 80175de:	2701      	movs	r7, #1
 80175e0:	46a9      	mov	r9, r5
 80175e2:	46b8      	mov	r8, r7
 80175e4:	f04f 0a00 	mov.w	sl, #0
 80175e8:	4621      	mov	r1, r4
 80175ea:	a849      	add	r0, sp, #292	; 0x124
 80175ec:	f003 fd42 	bl	801b074 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80175f0:	4622      	mov	r2, r4
 80175f2:	4653      	mov	r3, sl
 80175f4:	a949      	add	r1, sp, #292	; 0x124
 80175f6:	f8cd 9000 	str.w	r9, [sp]
 80175fa:	a819      	add	r0, sp, #100	; 0x64
 80175fc:	f003 fe6a 	bl	801b2d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017600:	4622      	mov	r2, r4
 8017602:	4653      	mov	r3, sl
 8017604:	a949      	add	r1, sp, #292	; 0x124
 8017606:	f8cd 8000 	str.w	r8, [sp]
 801760a:	a829      	add	r0, sp, #164	; 0xa4
 801760c:	f003 fe62 	bl	801b2d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017610:	4643      	mov	r3, r8
 8017612:	4622      	mov	r2, r4
 8017614:	a949      	add	r1, sp, #292	; 0x124
 8017616:	f8cd 9000 	str.w	r9, [sp]
 801761a:	a839      	add	r0, sp, #228	; 0xe4
 801761c:	f003 fe5a 	bl	801b2d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8017620:	42af      	cmp	r7, r5
 8017622:	af12      	add	r7, sp, #72	; 0x48
 8017624:	bfb7      	itett	lt
 8017626:	2300      	movlt	r3, #0
 8017628:	2301      	movge	r3, #1
 801762a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801762c:	ac19      	addlt	r4, sp, #100	; 0x64
 801762e:	bfb1      	iteee	lt
 8017630:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017632:	ad19      	addge	r5, sp, #100	; 0x64
 8017634:	930e      	strge	r3, [sp, #56]	; 0x38
 8017636:	ac29      	addge	r4, sp, #164	; 0xa4
 8017638:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801763a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801763e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017642:	b928      	cbnz	r0, 8017650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8017644:	4b80      	ldr	r3, [pc, #512]	; (8017848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8017646:	6818      	ldr	r0, [r3, #0]
 8017648:	6803      	ldr	r3, [r0, #0]
 801764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801764c:	4798      	blx	r3
 801764e:	6038      	str	r0, [r7, #0]
 8017650:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017652:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801765a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801765c:	930c      	str	r3, [sp, #48]	; 0x30
 801765e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017660:	6963      	ldr	r3, [r4, #20]
 8017662:	440b      	add	r3, r1
 8017664:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017668:	4408      	add	r0, r1
 801766a:	b200      	sxth	r0, r0
 801766c:	4283      	cmp	r3, r0
 801766e:	900d      	str	r0, [sp, #52]	; 0x34
 8017670:	f280 80dd 	bge.w	801782e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8017674:	428b      	cmp	r3, r1
 8017676:	da08      	bge.n	801768a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017678:	2a00      	cmp	r2, #0
 801767a:	dd06      	ble.n	801768a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801767c:	1acb      	subs	r3, r1, r3
 801767e:	429a      	cmp	r2, r3
 8017680:	f2c0 80e4 	blt.w	801784c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8017684:	2b00      	cmp	r3, #0
 8017686:	f300 80e2 	bgt.w	801784e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801768a:	6967      	ldr	r7, [r4, #20]
 801768c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8017690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017692:	443b      	add	r3, r7
 8017694:	461f      	mov	r7, r3
 8017696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017698:	1bdf      	subs	r7, r3, r7
 801769a:	4297      	cmp	r7, r2
 801769c:	bfa8      	it	ge
 801769e:	4617      	movge	r7, r2
 80176a0:	2f00      	cmp	r7, #0
 80176a2:	f340 8166 	ble.w	8017972 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80176a6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80176a8:	6829      	ldr	r1, [r5, #0]
 80176aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80176ae:	f9bb 3000 	ldrsh.w	r3, [fp]
 80176b2:	4411      	add	r1, r2
 80176b4:	6820      	ldr	r0, [r4, #0]
 80176b6:	4299      	cmp	r1, r3
 80176b8:	dd1a      	ble.n	80176f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80176ba:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80176be:	4402      	add	r2, r0
 80176c0:	440b      	add	r3, r1
 80176c2:	b21b      	sxth	r3, r3
 80176c4:	429a      	cmp	r2, r3
 80176c6:	dc13      	bgt.n	80176f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80176c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80176ca:	a912      	add	r1, sp, #72	; 0x48
 80176cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	9206      	str	r2, [sp, #24]
 80176d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80176d6:	9500      	str	r5, [sp, #0]
 80176d8:	9205      	str	r2, [sp, #20]
 80176da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80176dc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80176e0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80176e2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80176e6:	aa49      	add	r2, sp, #292	; 0x124
 80176e8:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80176ec:	4623      	mov	r3, r4
 80176ee:	47c8      	blx	r9
 80176f0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80176f4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80176f8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80176fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017700:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017704:	68a1      	ldr	r1, [r4, #8]
 8017706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801770a:	ed94 6a08 	vldr	s12, [r4, #32]
 801770e:	edd4 6a07 	vldr	s13, [r4, #28]
 8017712:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017716:	ee76 6a86 	vadd.f32	s13, s13, s12
 801771a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801771e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017722:	edc4 6a07 	vstr	s13, [r4, #28]
 8017726:	441a      	add	r2, r3
 8017728:	6963      	ldr	r3, [r4, #20]
 801772a:	3301      	adds	r3, #1
 801772c:	6022      	str	r2, [r4, #0]
 801772e:	6163      	str	r3, [r4, #20]
 8017730:	69a3      	ldr	r3, [r4, #24]
 8017732:	3b01      	subs	r3, #1
 8017734:	61a3      	str	r3, [r4, #24]
 8017736:	6923      	ldr	r3, [r4, #16]
 8017738:	440b      	add	r3, r1
 801773a:	68e1      	ldr	r1, [r4, #12]
 801773c:	428b      	cmp	r3, r1
 801773e:	6123      	str	r3, [r4, #16]
 8017740:	db15      	blt.n	801776e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8017742:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017746:	3201      	adds	r2, #1
 8017748:	1a5b      	subs	r3, r3, r1
 801774a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801774e:	6022      	str	r2, [r4, #0]
 8017750:	6123      	str	r3, [r4, #16]
 8017752:	edc4 6a07 	vstr	s13, [r4, #28]
 8017756:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801775a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801775e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017762:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017766:	ee77 7a27 	vadd.f32	s15, s14, s15
 801776a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801776e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017772:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017776:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801777a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801777e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017782:	68a9      	ldr	r1, [r5, #8]
 8017784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017788:	ed95 6a08 	vldr	s12, [r5, #32]
 801778c:	edd5 6a07 	vldr	s13, [r5, #28]
 8017790:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017794:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017798:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801779c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80177a0:	edc5 6a07 	vstr	s13, [r5, #28]
 80177a4:	441a      	add	r2, r3
 80177a6:	696b      	ldr	r3, [r5, #20]
 80177a8:	3301      	adds	r3, #1
 80177aa:	602a      	str	r2, [r5, #0]
 80177ac:	616b      	str	r3, [r5, #20]
 80177ae:	69ab      	ldr	r3, [r5, #24]
 80177b0:	3b01      	subs	r3, #1
 80177b2:	61ab      	str	r3, [r5, #24]
 80177b4:	692b      	ldr	r3, [r5, #16]
 80177b6:	440b      	add	r3, r1
 80177b8:	68e9      	ldr	r1, [r5, #12]
 80177ba:	428b      	cmp	r3, r1
 80177bc:	612b      	str	r3, [r5, #16]
 80177be:	db15      	blt.n	80177ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80177c0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80177c4:	3201      	adds	r2, #1
 80177c6:	1a5b      	subs	r3, r3, r1
 80177c8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80177cc:	602a      	str	r2, [r5, #0]
 80177ce:	612b      	str	r3, [r5, #16]
 80177d0:	edc5 6a07 	vstr	s13, [r5, #28]
 80177d4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80177d8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80177dc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80177e0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80177e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80177e8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80177ec:	3f01      	subs	r7, #1
 80177ee:	e757      	b.n	80176a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80177f0:	4299      	cmp	r1, r3
 80177f2:	dc13      	bgt.n	801781c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80177f4:	429a      	cmp	r2, r3
 80177f6:	da14      	bge.n	8017822 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80177f8:	2502      	movs	r5, #2
 80177fa:	2703      	movs	r7, #3
 80177fc:	f04f 0800 	mov.w	r8, #0
 8017800:	46a9      	mov	r9, r5
 8017802:	f04f 0a01 	mov.w	sl, #1
 8017806:	e6ef      	b.n	80175e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017808:	2501      	movs	r5, #1
 801780a:	2700      	movs	r7, #0
 801780c:	46a9      	mov	r9, r5
 801780e:	46b8      	mov	r8, r7
 8017810:	f04f 0a02 	mov.w	sl, #2
 8017814:	e6e8      	b.n	80175e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8017816:	2501      	movs	r5, #1
 8017818:	2702      	movs	r7, #2
 801781a:	e6e1      	b.n	80175e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801781c:	2500      	movs	r5, #0
 801781e:	2701      	movs	r7, #1
 8017820:	e7f4      	b.n	801780c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8017822:	2702      	movs	r7, #2
 8017824:	2503      	movs	r5, #3
 8017826:	f04f 0900 	mov.w	r9, #0
 801782a:	46b8      	mov	r8, r7
 801782c:	e7e9      	b.n	8017802 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801782e:	4613      	mov	r3, r2
 8017830:	e728      	b.n	8017684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8017832:	bf00      	nop
 8017834:	24010058 	.word	0x24010058
 8017838:	fffd8f01 	.word	0xfffd8f01
 801783c:	00027100 	.word	0x00027100
 8017840:	0004e1ff 	.word	0x0004e1ff
 8017844:	0004e1fe 	.word	0x0004e1fe
 8017848:	24010060 	.word	0x24010060
 801784c:	4613      	mov	r3, r2
 801784e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8017850:	469e      	mov	lr, r3
 8017852:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8017854:	469c      	mov	ip, r3
 8017856:	9111      	str	r1, [sp, #68]	; 0x44
 8017858:	f04f 0900 	mov.w	r9, #0
 801785c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8017860:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8017864:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8017868:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801786c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8017870:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8017874:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8017878:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801787c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8017880:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8017884:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8017888:	f1bc 0f00 	cmp.w	ip, #0
 801788c:	d147      	bne.n	801791e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801788e:	eb03 0c07 	add.w	ip, r3, r7
 8017892:	1ad7      	subs	r7, r2, r3
 8017894:	f1b9 0f00 	cmp.w	r9, #0
 8017898:	d009      	beq.n	80178ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801789a:	9029      	str	r0, [sp, #164]	; 0xa4
 801789c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 80178a0:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 80178a4:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 80178a8:	912d      	str	r1, [sp, #180]	; 0xb4
 80178aa:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80178ae:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80178b0:	f04f 0800 	mov.w	r8, #0
 80178b4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80178b8:	9111      	str	r1, [sp, #68]	; 0x44
 80178ba:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80178be:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80178c2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80178c6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80178ca:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80178ce:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80178d2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80178d6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80178da:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80178de:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80178e2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80178e6:	f1be 0f00 	cmp.w	lr, #0
 80178ea:	d031      	beq.n	8017950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80178ec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80178ee:	4450      	add	r0, sl
 80178f0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80178f4:	4431      	add	r1, r6
 80178f6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80178fa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80178fe:	4549      	cmp	r1, r9
 8017900:	db08      	blt.n	8017914 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8017902:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017906:	3001      	adds	r0, #1
 8017908:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801790c:	eba1 0109 	sub.w	r1, r1, r9
 8017910:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017914:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017918:	f04f 0801 	mov.w	r8, #1
 801791c:	e7e3      	b.n	80178e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801791e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8017920:	4450      	add	r0, sl
 8017922:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017926:	4431      	add	r1, r6
 8017928:	ee77 7a84 	vadd.f32	s15, s15, s8
 801792c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017930:	4541      	cmp	r1, r8
 8017932:	db08      	blt.n	8017946 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8017934:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017938:	3001      	adds	r0, #1
 801793a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801793e:	eba1 0108 	sub.w	r1, r1, r8
 8017942:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017946:	f10c 3cff 	add.w	ip, ip, #4294967295
 801794a:	f04f 0901 	mov.w	r9, #1
 801794e:	e79b      	b.n	8017888 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8017950:	449c      	add	ip, r3
 8017952:	1aff      	subs	r7, r7, r3
 8017954:	f1b8 0f00 	cmp.w	r8, #0
 8017958:	d009      	beq.n	801796e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801795a:	9019      	str	r0, [sp, #100]	; 0x64
 801795c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017960:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017964:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017968:	911d      	str	r1, [sp, #116]	; 0x74
 801796a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801796e:	1ad2      	subs	r2, r2, r3
 8017970:	e68b      	b.n	801768a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8017972:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017974:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8017976:	2b00      	cmp	r3, #0
 8017978:	f000 80d1 	beq.w	8017b1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801797c:	ad19      	add	r5, sp, #100	; 0x64
 801797e:	ac39      	add	r4, sp, #228	; 0xe4
 8017980:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8017982:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8017986:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801798a:	930c      	str	r3, [sp, #48]	; 0x30
 801798c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801798e:	6963      	ldr	r3, [r4, #20]
 8017990:	440b      	add	r3, r1
 8017992:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8017996:	4408      	add	r0, r1
 8017998:	b200      	sxth	r0, r0
 801799a:	4283      	cmp	r3, r0
 801799c:	900d      	str	r0, [sp, #52]	; 0x34
 801799e:	f280 80c1 	bge.w	8017b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80179a2:	428b      	cmp	r3, r1
 80179a4:	da08      	bge.n	80179b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80179a6:	2a00      	cmp	r2, #0
 80179a8:	dd06      	ble.n	80179b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80179aa:	1acb      	subs	r3, r1, r3
 80179ac:	429a      	cmp	r2, r3
 80179ae:	f2c0 80bb 	blt.w	8017b28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f300 80b9 	bgt.w	8017b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80179b8:	6967      	ldr	r7, [r4, #20]
 80179ba:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80179be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80179c0:	443b      	add	r3, r7
 80179c2:	461f      	mov	r7, r3
 80179c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179c6:	1bdf      	subs	r7, r3, r7
 80179c8:	4297      	cmp	r7, r2
 80179ca:	bfa8      	it	ge
 80179cc:	4617      	movge	r7, r2
 80179ce:	2f00      	cmp	r7, #0
 80179d0:	f340 813c 	ble.w	8017c4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80179d4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80179d6:	6829      	ldr	r1, [r5, #0]
 80179d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179dc:	f9bb 3000 	ldrsh.w	r3, [fp]
 80179e0:	4411      	add	r1, r2
 80179e2:	6820      	ldr	r0, [r4, #0]
 80179e4:	4299      	cmp	r1, r3
 80179e6:	dd1a      	ble.n	8017a1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80179e8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80179ec:	4402      	add	r2, r0
 80179ee:	440b      	add	r3, r1
 80179f0:	b21b      	sxth	r3, r3
 80179f2:	429a      	cmp	r2, r3
 80179f4:	dc13      	bgt.n	8017a1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80179f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80179f8:	a912      	add	r1, sp, #72	; 0x48
 80179fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	9206      	str	r2, [sp, #24]
 8017a02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a04:	9500      	str	r5, [sp, #0]
 8017a06:	9205      	str	r2, [sp, #20]
 8017a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a0a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8017a0e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8017a10:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8017a14:	aa49      	add	r2, sp, #292	; 0x124
 8017a16:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8017a1a:	4623      	mov	r3, r4
 8017a1c:	47c8      	blx	r9
 8017a1e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8017a22:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8017a26:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8017a2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a2e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8017a32:	68a1      	ldr	r1, [r4, #8]
 8017a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017a38:	ed94 6a08 	vldr	s12, [r4, #32]
 8017a3c:	edd4 6a07 	vldr	s13, [r4, #28]
 8017a40:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a44:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017a48:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a4c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017a50:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a54:	441a      	add	r2, r3
 8017a56:	6963      	ldr	r3, [r4, #20]
 8017a58:	3301      	adds	r3, #1
 8017a5a:	6022      	str	r2, [r4, #0]
 8017a5c:	6163      	str	r3, [r4, #20]
 8017a5e:	69a3      	ldr	r3, [r4, #24]
 8017a60:	3b01      	subs	r3, #1
 8017a62:	61a3      	str	r3, [r4, #24]
 8017a64:	6923      	ldr	r3, [r4, #16]
 8017a66:	440b      	add	r3, r1
 8017a68:	68e1      	ldr	r1, [r4, #12]
 8017a6a:	428b      	cmp	r3, r1
 8017a6c:	6123      	str	r3, [r4, #16]
 8017a6e:	db15      	blt.n	8017a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8017a70:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8017a74:	3201      	adds	r2, #1
 8017a76:	1a5b      	subs	r3, r3, r1
 8017a78:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017a7c:	6022      	str	r2, [r4, #0]
 8017a7e:	6123      	str	r3, [r4, #16]
 8017a80:	edc4 6a07 	vstr	s13, [r4, #28]
 8017a84:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8017a88:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017a8c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8017a90:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8017a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a98:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8017a9c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8017aa0:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8017aa4:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8017aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017aac:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8017ab0:	68a9      	ldr	r1, [r5, #8]
 8017ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017ab6:	ed95 6a08 	vldr	s12, [r5, #32]
 8017aba:	edd5 6a07 	vldr	s13, [r5, #28]
 8017abe:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017ac2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8017ac6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017aca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017ace:	edc5 6a07 	vstr	s13, [r5, #28]
 8017ad2:	441a      	add	r2, r3
 8017ad4:	696b      	ldr	r3, [r5, #20]
 8017ad6:	3301      	adds	r3, #1
 8017ad8:	602a      	str	r2, [r5, #0]
 8017ada:	616b      	str	r3, [r5, #20]
 8017adc:	69ab      	ldr	r3, [r5, #24]
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	61ab      	str	r3, [r5, #24]
 8017ae2:	692b      	ldr	r3, [r5, #16]
 8017ae4:	440b      	add	r3, r1
 8017ae6:	68e9      	ldr	r1, [r5, #12]
 8017ae8:	428b      	cmp	r3, r1
 8017aea:	612b      	str	r3, [r5, #16]
 8017aec:	db15      	blt.n	8017b1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8017aee:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8017af2:	3201      	adds	r2, #1
 8017af4:	1a5b      	subs	r3, r3, r1
 8017af6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8017afa:	602a      	str	r2, [r5, #0]
 8017afc:	612b      	str	r3, [r5, #16]
 8017afe:	edc5 6a07 	vstr	s13, [r5, #28]
 8017b02:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8017b06:	ee36 7a87 	vadd.f32	s14, s13, s14
 8017b0a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8017b0e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8017b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017b16:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8017b1a:	3f01      	subs	r7, #1
 8017b1c:	e757      	b.n	80179ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8017b1e:	ad39      	add	r5, sp, #228	; 0xe4
 8017b20:	ac19      	add	r4, sp, #100	; 0x64
 8017b22:	e72d      	b.n	8017980 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8017b24:	4613      	mov	r3, r2
 8017b26:	e744      	b.n	80179b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8017b28:	4613      	mov	r3, r2
 8017b2a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8017b2c:	469e      	mov	lr, r3
 8017b2e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8017b32:	461f      	mov	r7, r3
 8017b34:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8017b38:	f04f 0900 	mov.w	r9, #0
 8017b3c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8017b40:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8017b44:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8017b48:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8017b4c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8017b50:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8017b52:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8017b56:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8017b5a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8017b5e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8017b62:	960e      	str	r6, [sp, #56]	; 0x38
 8017b64:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8017b68:	2f00      	cmp	r7, #0
 8017b6a:	d146      	bne.n	8017bfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8017b6c:	449c      	add	ip, r3
 8017b6e:	1ad7      	subs	r7, r2, r3
 8017b70:	f1b9 0f00 	cmp.w	r9, #0
 8017b74:	d009      	beq.n	8017b8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8017b76:	9039      	str	r0, [sp, #228]	; 0xe4
 8017b78:	913d      	str	r1, [sp, #244]	; 0xf4
 8017b7a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8017b7e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8017b82:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8017b86:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8017b8a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8017b8c:	f04f 0800 	mov.w	r8, #0
 8017b90:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8017b94:	910e      	str	r1, [sp, #56]	; 0x38
 8017b96:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8017b9a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8017b9e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8017ba2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8017ba6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8017baa:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8017bae:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8017bb2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8017bb6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8017bba:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8017bbe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8017bc2:	f1be 0f00 	cmp.w	lr, #0
 8017bc6:	d030      	beq.n	8017c2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8017bc8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017bca:	4450      	add	r0, sl
 8017bcc:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8017bd0:	4431      	add	r1, r6
 8017bd2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8017bd6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8017bda:	4549      	cmp	r1, r9
 8017bdc:	db08      	blt.n	8017bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8017bde:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017be2:	3001      	adds	r0, #1
 8017be4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8017be8:	eba1 0109 	sub.w	r1, r1, r9
 8017bec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8017bf0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8017bf4:	f04f 0801 	mov.w	r8, #1
 8017bf8:	e7e3      	b.n	8017bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8017bfa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8017bfc:	4450      	add	r0, sl
 8017bfe:	ee37 7a24 	vadd.f32	s14, s14, s9
 8017c02:	4431      	add	r1, r6
 8017c04:	ee77 7a84 	vadd.f32	s15, s15, s8
 8017c08:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8017c0c:	4541      	cmp	r1, r8
 8017c0e:	db08      	blt.n	8017c22 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8017c10:	ee76 6a85 	vadd.f32	s13, s13, s10
 8017c14:	3001      	adds	r0, #1
 8017c16:	ee37 7a25 	vadd.f32	s14, s14, s11
 8017c1a:	eba1 0108 	sub.w	r1, r1, r8
 8017c1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8017c22:	3f01      	subs	r7, #1
 8017c24:	f04f 0901 	mov.w	r9, #1
 8017c28:	e79e      	b.n	8017b68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8017c2a:	449c      	add	ip, r3
 8017c2c:	1aff      	subs	r7, r7, r3
 8017c2e:	f1b8 0f00 	cmp.w	r8, #0
 8017c32:	d009      	beq.n	8017c48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8017c34:	9019      	str	r0, [sp, #100]	; 0x64
 8017c36:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8017c3a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8017c3e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8017c42:	911d      	str	r1, [sp, #116]	; 0x74
 8017c44:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8017c48:	1ad2      	subs	r2, r2, r3
 8017c4a:	e6b5      	b.n	80179b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8017c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	b923      	cbnz	r3, 8017c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8017c52:	4b04      	ldr	r3, [pc, #16]	; (8017c64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8017c54:	6818      	ldr	r0, [r3, #0]
 8017c56:	6803      	ldr	r3, [r0, #0]
 8017c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c5a:	4798      	blx	r3
 8017c5c:	b05b      	add	sp, #364	; 0x16c
 8017c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c62:	bf00      	nop
 8017c64:	24010060 	.word	0x24010060

08017c68 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8017c68:	b570      	push	{r4, r5, r6, lr}
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	2500      	movs	r5, #0
 8017c6e:	9805      	ldr	r0, [sp, #20]
 8017c70:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8017c74:	6061      	str	r1, [r4, #4]
 8017c76:	8263      	strh	r3, [r4, #18]
 8017c78:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8017c7c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017c80:	8025      	strh	r5, [r4, #0]
 8017c82:	7221      	strb	r1, [r4, #8]
 8017c84:	7266      	strb	r6, [r4, #9]
 8017c86:	60e0      	str	r0, [r4, #12]
 8017c88:	8222      	strh	r2, [r4, #16]
 8017c8a:	82a3      	strh	r3, [r4, #20]
 8017c8c:	82e5      	strh	r5, [r4, #22]
 8017c8e:	8325      	strh	r5, [r4, #24]
 8017c90:	8365      	strh	r5, [r4, #26]
 8017c92:	83a5      	strh	r5, [r4, #28]
 8017c94:	83e5      	strh	r5, [r4, #30]
 8017c96:	8425      	strh	r5, [r4, #32]
 8017c98:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8017c9c:	b32e      	cbz	r6, 8017cea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017c9e:	6803      	ldr	r3, [r0, #0]
 8017ca0:	695b      	ldr	r3, [r3, #20]
 8017ca2:	4798      	blx	r3
 8017ca4:	4606      	mov	r6, r0
 8017ca6:	b300      	cbz	r0, 8017cea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017ca8:	68e0      	ldr	r0, [r4, #12]
 8017caa:	4631      	mov	r1, r6
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	68db      	ldr	r3, [r3, #12]
 8017cb0:	4798      	blx	r3
 8017cb2:	4605      	mov	r5, r0
 8017cb4:	b1c8      	cbz	r0, 8017cea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017cb6:	7b43      	ldrb	r3, [r0, #13]
 8017cb8:	7a82      	ldrb	r2, [r0, #10]
 8017cba:	005b      	lsls	r3, r3, #1
 8017cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cc0:	4313      	orrs	r3, r2
 8017cc2:	8423      	strh	r3, [r4, #32]
 8017cc4:	7a63      	ldrb	r3, [r4, #9]
 8017cc6:	2b06      	cmp	r3, #6
 8017cc8:	d10f      	bne.n	8017cea <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8017cca:	68e0      	ldr	r0, [r4, #12]
 8017ccc:	462a      	mov	r2, r5
 8017cce:	4631      	mov	r1, r6
 8017cd0:	6803      	ldr	r3, [r0, #0]
 8017cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cd4:	4798      	blx	r3
 8017cd6:	7b6b      	ldrb	r3, [r5, #13]
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017cde:	7aab      	ldrb	r3, [r5, #10]
 8017ce0:	4313      	orrs	r3, r2
 8017ce2:	4418      	add	r0, r3
 8017ce4:	8c23      	ldrh	r3, [r4, #32]
 8017ce6:	4418      	add	r0, r3
 8017ce8:	8420      	strh	r0, [r4, #32]
 8017cea:	4620      	mov	r0, r4
 8017cec:	bd70      	pop	{r4, r5, r6, pc}

08017cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8017cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cf2:	2400      	movs	r4, #0
 8017cf4:	b085      	sub	sp, #20
 8017cf6:	4681      	mov	r9, r0
 8017cf8:	4688      	mov	r8, r1
 8017cfa:	4692      	mov	sl, r2
 8017cfc:	469b      	mov	fp, r3
 8017cfe:	4627      	mov	r7, r4
 8017d00:	4625      	mov	r5, r4
 8017d02:	4626      	mov	r6, r4
 8017d04:	4554      	cmp	r4, sl
 8017d06:	da2a      	bge.n	8017d5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d08:	2300      	movs	r3, #0
 8017d0a:	9303      	str	r3, [sp, #12]
 8017d0c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017d10:	429d      	cmp	r5, r3
 8017d12:	d004      	beq.n	8017d1e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8017d14:	f242 030b 	movw	r3, #8203	; 0x200b
 8017d18:	429d      	cmp	r5, r3
 8017d1a:	bf18      	it	ne
 8017d1c:	462f      	movne	r7, r5
 8017d1e:	ab03      	add	r3, sp, #12
 8017d20:	4642      	mov	r2, r8
 8017d22:	4659      	mov	r1, fp
 8017d24:	4648      	mov	r0, r9
 8017d26:	f002 ffbb 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017d2a:	4605      	mov	r5, r0
 8017d2c:	b1b8      	cbz	r0, 8017d5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d2e:	280a      	cmp	r0, #10
 8017d30:	d015      	beq.n	8017d5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8017d32:	9a03      	ldr	r2, [sp, #12]
 8017d34:	b18a      	cbz	r2, 8017d5a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8017d36:	7b50      	ldrb	r0, [r2, #13]
 8017d38:	4639      	mov	r1, r7
 8017d3a:	7a93      	ldrb	r3, [r2, #10]
 8017d3c:	0040      	lsls	r0, r0, #1
 8017d3e:	8895      	ldrh	r5, [r2, #4]
 8017d40:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d44:	4303      	orrs	r3, r0
 8017d46:	4640      	mov	r0, r8
 8017d48:	9301      	str	r3, [sp, #4]
 8017d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8017d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d50:	4798      	blx	r3
 8017d52:	9b01      	ldr	r3, [sp, #4]
 8017d54:	4418      	add	r0, r3
 8017d56:	4406      	add	r6, r0
 8017d58:	b2b6      	uxth	r6, r6
 8017d5a:	3401      	adds	r4, #1
 8017d5c:	e7d2      	b.n	8017d04 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8017d5e:	4630      	mov	r0, r6
 8017d60:	b005      	add	sp, #20
 8017d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017d66 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8017d66:	2a02      	cmp	r2, #2
 8017d68:	b530      	push	{r4, r5, lr}
 8017d6a:	d011      	beq.n	8017d90 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8017d6c:	2a03      	cmp	r2, #3
 8017d6e:	d01c      	beq.n	8017daa <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8017d70:	2a01      	cmp	r2, #1
 8017d72:	d10c      	bne.n	8017d8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017d74:	888b      	ldrh	r3, [r1, #4]
 8017d76:	8801      	ldrh	r1, [r0, #0]
 8017d78:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8017d7c:	1a5b      	subs	r3, r3, r1
 8017d7e:	8844      	ldrh	r4, [r0, #2]
 8017d80:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8017d84:	1a9b      	subs	r3, r3, r2
 8017d86:	8004      	strh	r4, [r0, #0]
 8017d88:	8081      	strh	r1, [r0, #4]
 8017d8a:	8043      	strh	r3, [r0, #2]
 8017d8c:	80c2      	strh	r2, [r0, #6]
 8017d8e:	bd30      	pop	{r4, r5, pc}
 8017d90:	88cb      	ldrh	r3, [r1, #6]
 8017d92:	8842      	ldrh	r2, [r0, #2]
 8017d94:	1a9b      	subs	r3, r3, r2
 8017d96:	88c2      	ldrh	r2, [r0, #6]
 8017d98:	1a9b      	subs	r3, r3, r2
 8017d9a:	888a      	ldrh	r2, [r1, #4]
 8017d9c:	8801      	ldrh	r1, [r0, #0]
 8017d9e:	8043      	strh	r3, [r0, #2]
 8017da0:	1a52      	subs	r2, r2, r1
 8017da2:	8881      	ldrh	r1, [r0, #4]
 8017da4:	1a52      	subs	r2, r2, r1
 8017da6:	8002      	strh	r2, [r0, #0]
 8017da8:	e7f1      	b.n	8017d8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8017daa:	88cb      	ldrh	r3, [r1, #6]
 8017dac:	8841      	ldrh	r1, [r0, #2]
 8017dae:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8017db2:	1a5b      	subs	r3, r3, r1
 8017db4:	f9b0 5000 	ldrsh.w	r5, [r0]
 8017db8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	8045      	strh	r5, [r0, #2]
 8017dc0:	8082      	strh	r2, [r0, #4]
 8017dc2:	8003      	strh	r3, [r0, #0]
 8017dc4:	80c4      	strh	r4, [r0, #6]
 8017dc6:	e7e2      	b.n	8017d8e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08017dc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8017dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dcc:	b09f      	sub	sp, #124	; 0x7c
 8017dce:	9116      	str	r1, [sp, #88]	; 0x58
 8017dd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8017dd2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017dd4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017dd6:	8809      	ldrh	r1, [r1, #0]
 8017dd8:	889b      	ldrh	r3, [r3, #4]
 8017dda:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8017dde:	440b      	add	r3, r1
 8017de0:	9212      	str	r2, [sp, #72]	; 0x48
 8017de2:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8017de6:	b21b      	sxth	r3, r3
 8017de8:	9011      	str	r0, [sp, #68]	; 0x44
 8017dea:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8017dee:	9310      	str	r3, [sp, #64]	; 0x40
 8017df0:	f8d8 3000 	ldr.w	r3, [r8]
 8017df4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8017df8:	7b19      	ldrb	r1, [r3, #12]
 8017dfa:	7adb      	ldrb	r3, [r3, #11]
 8017dfc:	9114      	str	r1, [sp, #80]	; 0x50
 8017dfe:	9315      	str	r3, [sp, #84]	; 0x54
 8017e00:	2a00      	cmp	r2, #0
 8017e02:	d06a      	beq.n	8017eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8017e04:	f898 3010 	ldrb.w	r3, [r8, #16]
 8017e08:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017e0a:	2b06      	cmp	r3, #6
 8017e0c:	bf14      	ite	ne
 8017e0e:	2301      	movne	r3, #1
 8017e10:	2302      	moveq	r3, #2
 8017e12:	4413      	add	r3, r2
 8017e14:	f04f 0900 	mov.w	r9, #0
 8017e18:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e1a:	464c      	mov	r4, r9
 8017e1c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8017e20:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8017e24:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	f280 808f 	bge.w	8017f4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8017e2e:	2300      	movs	r3, #0
 8017e30:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8017e34:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8017e38:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017e3c:	429c      	cmp	r4, r3
 8017e3e:	d006      	beq.n	8017e4e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8017e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e42:	f242 020b 	movw	r2, #8203	; 0x200b
 8017e46:	4294      	cmp	r4, r2
 8017e48:	bf18      	it	ne
 8017e4a:	4623      	movne	r3, r4
 8017e4c:	930d      	str	r3, [sp, #52]	; 0x34
 8017e4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e50:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8017e52:	f8d8 2000 	ldr.w	r2, [r8]
 8017e56:	428b      	cmp	r3, r1
 8017e58:	db41      	blt.n	8017ede <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8017e5a:	6813      	ldr	r3, [r2, #0]
 8017e5c:	4610      	mov	r0, r2
 8017e5e:	695b      	ldr	r3, [r3, #20]
 8017e60:	4798      	blx	r3
 8017e62:	4604      	mov	r4, r0
 8017e64:	f8d8 0000 	ldr.w	r0, [r8]
 8017e68:	aa1d      	add	r2, sp, #116	; 0x74
 8017e6a:	4621      	mov	r1, r4
 8017e6c:	6803      	ldr	r3, [r0, #0]
 8017e6e:	689d      	ldr	r5, [r3, #8]
 8017e70:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017e74:	47a8      	blx	r5
 8017e76:	901c      	str	r0, [sp, #112]	; 0x70
 8017e78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017e7c:	429c      	cmp	r4, r3
 8017e7e:	f000 80ec 	beq.w	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017e82:	f242 030b 	movw	r3, #8203	; 0x200b
 8017e86:	429c      	cmp	r4, r3
 8017e88:	f000 80e7 	beq.w	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017e8c:	2c00      	cmp	r4, #0
 8017e8e:	f000 80f9 	beq.w	8018084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8017e92:	2c0a      	cmp	r4, #10
 8017e94:	d060      	beq.n	8017f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8017e96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017e98:	b36a      	cbz	r2, 8017ef6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8017e9a:	8894      	ldrh	r4, [r2, #4]
 8017e9c:	f1bb 0f00 	cmp.w	fp, #0
 8017ea0:	d03b      	beq.n	8017f1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8017ea2:	f892 900d 	ldrb.w	r9, [r2, #13]
 8017ea6:	f1bb 0f01 	cmp.w	fp, #1
 8017eaa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8017eae:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8017eb2:	f892 900a 	ldrb.w	r9, [r2, #10]
 8017eb6:	ea49 0903 	orr.w	r9, r9, r3
 8017eba:	d134      	bne.n	8017f26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8017ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017ebe:	eba6 0609 	sub.w	r6, r6, r9
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d14f      	bne.n	8017f66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017ec6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017ec8:	eb09 0306 	add.w	r3, r9, r6
 8017ecc:	4413      	add	r3, r2
 8017ece:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017ed0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8017ed4:	4293      	cmp	r3, r2
 8017ed6:	da51      	bge.n	8017f7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017ed8:	e038      	b.n	8017f4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8017eda:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017edc:	e79a      	b.n	8017e14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8017ede:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8017ee2:	4659      	mov	r1, fp
 8017ee4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8017ee6:	9301      	str	r3, [sp, #4]
 8017ee8:	ab1d      	add	r3, sp, #116	; 0x74
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	ab1c      	add	r3, sp, #112	; 0x70
 8017eee:	f002 ff20 	bl	801ad32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	e7c0      	b.n	8017e78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8017ef6:	f8d8 0000 	ldr.w	r0, [r8]
 8017efa:	6803      	ldr	r3, [r0, #0]
 8017efc:	691b      	ldr	r3, [r3, #16]
 8017efe:	4798      	blx	r3
 8017f00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8017f04:	4298      	cmp	r0, r3
 8017f06:	f000 80a8 	beq.w	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017f0a:	f242 030b 	movw	r3, #8203	; 0x200b
 8017f0e:	4298      	cmp	r0, r3
 8017f10:	f000 80a3 	beq.w	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017f14:	f1bb 0f00 	cmp.w	fp, #0
 8017f18:	d100      	bne.n	8017f1c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8017f1a:	444e      	add	r6, r9
 8017f1c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8017f1e:	2a00      	cmp	r2, #0
 8017f20:	d1bf      	bne.n	8017ea2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8017f22:	4691      	mov	r9, r2
 8017f24:	e099      	b.n	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	f000 80ad 	beq.w	8018088 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8017f2e:	f1bb 0f00 	cmp.w	fp, #0
 8017f32:	d118      	bne.n	8017f66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8017f34:	f8d8 0000 	ldr.w	r0, [r8]
 8017f38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f3a:	6803      	ldr	r3, [r0, #0]
 8017f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f3e:	4798      	blx	r3
 8017f40:	4406      	add	r6, r0
 8017f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f46:	1af3      	subs	r3, r6, r3
 8017f48:	4293      	cmp	r3, r2
 8017f4a:	dd17      	ble.n	8017f7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8017f4c:	2c00      	cmp	r4, #0
 8017f4e:	f000 8099 	beq.w	8018084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8017f52:	2c0a      	cmp	r4, #10
 8017f54:	f040 8087 	bne.w	8018066 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8017f58:	240a      	movs	r4, #10
 8017f5a:	fab4 f084 	clz	r0, r4
 8017f5e:	0940      	lsrs	r0, r0, #5
 8017f60:	b01f      	add	sp, #124	; 0x7c
 8017f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f66:	f8d8 0000 	ldr.w	r0, [r8]
 8017f6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017f6c:	6803      	ldr	r3, [r0, #0]
 8017f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f70:	4798      	blx	r3
 8017f72:	f1bb 0f01 	cmp.w	fp, #1
 8017f76:	eba6 0600 	sub.w	r6, r6, r0
 8017f7a:	d0a4      	beq.n	8017ec6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8017f7c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8017f7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017f80:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8017f84:	f9b3 7000 	ldrsh.w	r7, [r3]
 8017f88:	7b43      	ldrb	r3, [r0, #13]
 8017f8a:	4431      	add	r1, r6
 8017f8c:	015b      	lsls	r3, r3, #5
 8017f8e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8017f92:	7983      	ldrb	r3, [r0, #6]
 8017f94:	4313      	orrs	r3, r2
 8017f96:	440b      	add	r3, r1
 8017f98:	42bb      	cmp	r3, r7
 8017f9a:	db5e      	blt.n	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017f9e:	4299      	cmp	r1, r3
 8017fa0:	da5b      	bge.n	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017fa2:	f8d8 0000 	ldr.w	r0, [r8]
 8017fa6:	42b7      	cmp	r7, r6
 8017fa8:	6803      	ldr	r3, [r0, #0]
 8017faa:	bfcc      	ite	gt
 8017fac:	1bbf      	subgt	r7, r7, r6
 8017fae:	2700      	movle	r7, #0
 8017fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fb2:	bfc8      	it	gt
 8017fb4:	b2bf      	uxthgt	r7, r7
 8017fb6:	4798      	blx	r3
 8017fb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017fba:	7b5a      	ldrb	r2, [r3, #13]
 8017fbc:	00d1      	lsls	r1, r2, #3
 8017fbe:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8017fc2:	7a19      	ldrb	r1, [r3, #8]
 8017fc4:	4329      	orrs	r1, r5
 8017fc6:	0655      	lsls	r5, r2, #25
 8017fc8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8017fca:	bf48      	it	mi
 8017fcc:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8017fd0:	4405      	add	r5, r0
 8017fd2:	bf48      	it	mi
 8017fd4:	b209      	sxthmi	r1, r1
 8017fd6:	1a6d      	subs	r5, r5, r1
 8017fd8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8017fda:	b2ad      	uxth	r5, r5
 8017fdc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8017fe0:	fa0f fa85 	sxth.w	sl, r5
 8017fe4:	4551      	cmp	r1, sl
 8017fe6:	dd3c      	ble.n	8018062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8017fe8:	0112      	lsls	r2, r2, #4
 8017fea:	79d8      	ldrb	r0, [r3, #7]
 8017fec:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8017ff0:	4302      	orrs	r2, r0
 8017ff2:	4492      	add	sl, r2
 8017ff4:	4551      	cmp	r1, sl
 8017ff6:	dc30      	bgt.n	801805a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8017ff8:	1b4d      	subs	r5, r1, r5
 8017ffa:	468a      	mov	sl, r1
 8017ffc:	b22d      	sxth	r5, r5
 8017ffe:	9319      	str	r3, [sp, #100]	; 0x64
 8018000:	b2ad      	uxth	r5, r5
 8018002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018004:	f8d8 0000 	ldr.w	r0, [r8]
 8018008:	681a      	ldr	r2, [r3, #0]
 801800a:	6801      	ldr	r1, [r0, #0]
 801800c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801800e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018010:	9313      	str	r3, [sp, #76]	; 0x4c
 8018012:	9218      	str	r2, [sp, #96]	; 0x60
 8018014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018016:	4788      	blx	r1
 8018018:	f898 1006 	ldrb.w	r1, [r8, #6]
 801801c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801801e:	910b      	str	r1, [sp, #44]	; 0x2c
 8018020:	f898 100e 	ldrb.w	r1, [r8, #14]
 8018024:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018026:	910a      	str	r1, [sp, #40]	; 0x28
 8018028:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801802c:	9109      	str	r1, [sp, #36]	; 0x24
 801802e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018032:	9305      	str	r3, [sp, #20]
 8018034:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8018036:	9206      	str	r2, [sp, #24]
 8018038:	9304      	str	r3, [sp, #16]
 801803a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801803c:	f8cd a004 	str.w	sl, [sp, #4]
 8018040:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8018044:	4437      	add	r7, r6
 8018046:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018048:	b23f      	sxth	r7, r7
 801804a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801804e:	9700      	str	r7, [sp, #0]
 8018050:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018052:	681a      	ldr	r2, [r3, #0]
 8018054:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	47a8      	blx	r5
 801805a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801805c:	3301      	adds	r3, #1
 801805e:	930e      	str	r3, [sp, #56]	; 0x38
 8018060:	e6e0      	b.n	8017e24 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8018062:	2500      	movs	r5, #0
 8018064:	e7cb      	b.n	8017ffe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8018066:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8018068:	3501      	adds	r5, #1
 801806a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801806c:	429d      	cmp	r5, r3
 801806e:	f6bf af74 	bge.w	8017f5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8018072:	4659      	mov	r1, fp
 8018074:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8018076:	f7ef f9ad 	bl	80073d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801807a:	4604      	mov	r4, r0
 801807c:	b110      	cbz	r0, 8018084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801807e:	280a      	cmp	r0, #10
 8018080:	d1f2      	bne.n	8018068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8018082:	e769      	b.n	8017f58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8018084:	2400      	movs	r4, #0
 8018086:	e768      	b.n	8017f5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8018088:	f1bb 0f00 	cmp.w	fp, #0
 801808c:	f43f af59 	beq.w	8017f42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8018090:	e774      	b.n	8017f7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08018092 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8018092:	b530      	push	{r4, r5, lr}
 8018094:	8ac4      	ldrh	r4, [r0, #22]
 8018096:	8b45      	ldrh	r5, [r0, #26]
 8018098:	8343      	strh	r3, [r0, #26]
 801809a:	442c      	add	r4, r5
 801809c:	1ae4      	subs	r4, r4, r3
 801809e:	8b83      	ldrh	r3, [r0, #28]
 80180a0:	82c4      	strh	r4, [r0, #22]
 80180a2:	8b04      	ldrh	r4, [r0, #24]
 80180a4:	4422      	add	r2, r4
 80180a6:	440c      	add	r4, r1
 80180a8:	1a59      	subs	r1, r3, r1
 80180aa:	83c2      	strh	r2, [r0, #30]
 80180ac:	8304      	strh	r4, [r0, #24]
 80180ae:	8381      	strh	r1, [r0, #28]
 80180b0:	bd30      	pop	{r4, r5, pc}

080180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80180b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180b6:	4604      	mov	r4, r0
 80180b8:	8a47      	ldrh	r7, [r0, #18]
 80180ba:	68c0      	ldr	r0, [r0, #12]
 80180bc:	b085      	sub	sp, #20
 80180be:	6803      	ldr	r3, [r0, #0]
 80180c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180c2:	4798      	blx	r3
 80180c4:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 80180c8:	7a63      	ldrb	r3, [r4, #9]
 80180ca:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 80180ce:	3b01      	subs	r3, #1
 80180d0:	42b7      	cmp	r7, r6
 80180d2:	bfac      	ite	ge
 80180d4:	f04f 0900 	movge.w	r9, #0
 80180d8:	f04f 0901 	movlt.w	r9, #1
 80180dc:	2b05      	cmp	r3, #5
 80180de:	d804      	bhi.n	80180ea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 80180e0:	e8df f003 	tbb	[pc, r3]
 80180e4:	470f0854 	.word	0x470f0854
 80180e8:	4c4c      	.short	0x4c4c
 80180ea:	2500      	movs	r5, #0
 80180ec:	46a9      	mov	r9, r5
 80180ee:	462e      	mov	r6, r5
 80180f0:	462f      	mov	r7, r5
 80180f2:	e00e      	b.n	8018112 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80180f4:	42b7      	cmp	r7, r6
 80180f6:	f04f 0500 	mov.w	r5, #0
 80180fa:	bfb4      	ite	lt
 80180fc:	2600      	movlt	r6, #0
 80180fe:	2601      	movge	r6, #1
 8018100:	e7f6      	b.n	80180f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018102:	42b7      	cmp	r7, r6
 8018104:	464d      	mov	r5, r9
 8018106:	f04f 0900 	mov.w	r9, #0
 801810a:	bfb4      	ite	lt
 801810c:	2600      	movlt	r6, #0
 801810e:	2601      	movge	r6, #1
 8018110:	464f      	mov	r7, r9
 8018112:	f04f 0800 	mov.w	r8, #0
 8018116:	f8a4 8016 	strh.w	r8, [r4, #22]
 801811a:	f8a4 8018 	strh.w	r8, [r4, #24]
 801811e:	f8cd 8004 	str.w	r8, [sp, #4]
 8018122:	2300      	movs	r3, #0
 8018124:	9303      	str	r3, [sp, #12]
 8018126:	8823      	ldrh	r3, [r4, #0]
 8018128:	2b20      	cmp	r3, #32
 801812a:	d033      	beq.n	8018194 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 801812c:	f242 010b 	movw	r1, #8203	; 0x200b
 8018130:	1a5a      	subs	r2, r3, r1
 8018132:	f1d2 0a00 	rsbs	sl, r2, #0
 8018136:	eb4a 0a02 	adc.w	sl, sl, r2
 801813a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801813e:	4293      	cmp	r3, r2
 8018140:	d008      	beq.n	8018154 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8018142:	428b      	cmp	r3, r1
 8018144:	9a01      	ldr	r2, [sp, #4]
 8018146:	bf0e      	itee	eq
 8018148:	f04f 0a01 	moveq.w	sl, #1
 801814c:	461a      	movne	r2, r3
 801814e:	f04f 0a00 	movne.w	sl, #0
 8018152:	9201      	str	r2, [sp, #4]
 8018154:	ab03      	add	r3, sp, #12
 8018156:	68e2      	ldr	r2, [r4, #12]
 8018158:	7a21      	ldrb	r1, [r4, #8]
 801815a:	6860      	ldr	r0, [r4, #4]
 801815c:	f002 fda0 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8018160:	8020      	strh	r0, [r4, #0]
 8018162:	b9d8      	cbnz	r0, 801819c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8018164:	8ba2      	ldrh	r2, [r4, #28]
 8018166:	2300      	movs	r3, #0
 8018168:	4611      	mov	r1, r2
 801816a:	4620      	mov	r0, r4
 801816c:	f7ff ff91 	bl	8018092 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018170:	e06e      	b.n	8018250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8018172:	2500      	movs	r5, #0
 8018174:	2701      	movs	r7, #1
 8018176:	46a9      	mov	r9, r5
 8018178:	462e      	mov	r6, r5
 801817a:	e7ca      	b.n	8018112 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801817c:	42b7      	cmp	r7, r6
 801817e:	f04f 0500 	mov.w	r5, #0
 8018182:	bfb4      	ite	lt
 8018184:	2700      	movlt	r7, #0
 8018186:	2701      	movge	r7, #1
 8018188:	462e      	mov	r6, r5
 801818a:	e7c2      	b.n	8018112 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 801818c:	2500      	movs	r5, #0
 801818e:	2601      	movs	r6, #1
 8018190:	46a9      	mov	r9, r5
 8018192:	e7ad      	b.n	80180f0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8018194:	9301      	str	r3, [sp, #4]
 8018196:	f04f 0a01 	mov.w	sl, #1
 801819a:	e7db      	b.n	8018154 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801819c:	8b63      	ldrh	r3, [r4, #26]
 801819e:	280a      	cmp	r0, #10
 80181a0:	f103 0301 	add.w	r3, r3, #1
 80181a4:	8363      	strh	r3, [r4, #26]
 80181a6:	d0dd      	beq.n	8018164 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80181a8:	9a03      	ldr	r2, [sp, #12]
 80181aa:	bb62      	cbnz	r2, 8018206 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80181ac:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80181b0:	4298      	cmp	r0, r3
 80181b2:	d003      	beq.n	80181bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80181b4:	f242 030b 	movw	r3, #8203	; 0x200b
 80181b8:	4298      	cmp	r0, r3
 80181ba:	d1b2      	bne.n	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80181bc:	8823      	ldrh	r3, [r4, #0]
 80181be:	8ba1      	ldrh	r1, [r4, #28]
 80181c0:	2b20      	cmp	r3, #32
 80181c2:	d003      	beq.n	80181cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 80181c4:	f242 000b 	movw	r0, #8203	; 0x200b
 80181c8:	4283      	cmp	r3, r0
 80181ca:	d131      	bne.n	8018230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 80181cc:	f1ba 0f00 	cmp.w	sl, #0
 80181d0:	bf0a      	itet	eq
 80181d2:	4688      	moveq	r8, r1
 80181d4:	4650      	movne	r0, sl
 80181d6:	2001      	moveq	r0, #1
 80181d8:	440a      	add	r2, r1
 80181da:	8b23      	ldrh	r3, [r4, #24]
 80181dc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80181e0:	b292      	uxth	r2, r2
 80181e2:	83a2      	strh	r2, [r4, #28]
 80181e4:	4413      	add	r3, r2
 80181e6:	f1b9 0f00 	cmp.w	r9, #0
 80181ea:	d102      	bne.n	80181f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 80181ec:	2d00      	cmp	r5, #0
 80181ee:	d042      	beq.n	8018276 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 80181f0:	b300      	cbz	r0, 8018234 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 80181f2:	8c21      	ldrh	r1, [r4, #32]
 80181f4:	4419      	add	r1, r3
 80181f6:	458c      	cmp	ip, r1
 80181f8:	da37      	bge.n	801826a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 80181fa:	8ae1      	ldrh	r1, [r4, #22]
 80181fc:	2900      	cmp	r1, #0
 80181fe:	d034      	beq.n	801826a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8018200:	4563      	cmp	r3, ip
 8018202:	dd8e      	ble.n	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018204:	e01d      	b.n	8018242 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8018206:	8893      	ldrh	r3, [r2, #4]
 8018208:	9901      	ldr	r1, [sp, #4]
 801820a:	8023      	strh	r3, [r4, #0]
 801820c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8018210:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8018214:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8018218:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801821c:	ea4b 0b00 	orr.w	fp, fp, r0
 8018220:	68e0      	ldr	r0, [r4, #12]
 8018222:	6803      	ldr	r3, [r0, #0]
 8018224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018226:	4798      	blx	r3
 8018228:	eb0b 0200 	add.w	r2, fp, r0
 801822c:	b292      	uxth	r2, r2
 801822e:	e7c5      	b.n	80181bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8018230:	2000      	movs	r0, #0
 8018232:	e7d1      	b.n	80181d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8018234:	4563      	cmp	r3, ip
 8018236:	f77f af74 	ble.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801823a:	8ae3      	ldrh	r3, [r4, #22]
 801823c:	2b00      	cmp	r3, #0
 801823e:	f43f af70 	beq.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018242:	2301      	movs	r3, #1
 8018244:	8c22      	ldrh	r2, [r4, #32]
 8018246:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801824a:	8be3      	ldrh	r3, [r4, #30]
 801824c:	4413      	add	r3, r2
 801824e:	83e3      	strh	r3, [r4, #30]
 8018250:	68e0      	ldr	r0, [r4, #12]
 8018252:	6803      	ldr	r3, [r0, #0]
 8018254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018256:	4798      	blx	r3
 8018258:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801825c:	4418      	add	r0, r3
 801825e:	8a63      	ldrh	r3, [r4, #18]
 8018260:	1a18      	subs	r0, r3, r0
 8018262:	8260      	strh	r0, [r4, #18]
 8018264:	b005      	add	sp, #20
 8018266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801826a:	2300      	movs	r3, #0
 801826c:	4611      	mov	r1, r2
 801826e:	4620      	mov	r0, r4
 8018270:	f7ff ff0f 	bl	8018092 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8018274:	e755      	b.n	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018276:	4563      	cmp	r3, ip
 8018278:	dd14      	ble.n	80182a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 801827a:	b117      	cbz	r7, 8018282 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 801827c:	2301      	movs	r3, #1
 801827e:	460a      	mov	r2, r1
 8018280:	e772      	b.n	8018168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8018282:	2e00      	cmp	r6, #0
 8018284:	f43f af4d 	beq.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8018288:	2800      	cmp	r0, #0
 801828a:	f47f af4a 	bne.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801828e:	f1ba 0f00 	cmp.w	sl, #0
 8018292:	d002      	beq.n	801829a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8018294:	2301      	movs	r3, #1
 8018296:	4642      	mov	r2, r8
 8018298:	e767      	b.n	801816a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 801829a:	8ae3      	ldrh	r3, [r4, #22]
 801829c:	2b00      	cmp	r3, #0
 801829e:	f43f af40 	beq.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80182a2:	e7d5      	b.n	8018250 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80182a4:	2800      	cmp	r0, #0
 80182a6:	f47f af3c 	bne.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80182aa:	f1ba 0f00 	cmp.w	sl, #0
 80182ae:	f43f af38 	beq.w	8018122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80182b2:	2301      	movs	r3, #1
 80182b4:	4642      	mov	r2, r8
 80182b6:	e7da      	b.n	801826e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080182b8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80182b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182ba:	4605      	mov	r5, r0
 80182bc:	b08f      	sub	sp, #60	; 0x3c
 80182be:	4617      	mov	r7, r2
 80182c0:	461c      	mov	r4, r3
 80182c2:	460e      	mov	r6, r1
 80182c4:	b1d1      	cbz	r1, 80182fc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4620      	mov	r0, r4
 80182ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182cc:	4798      	blx	r3
 80182ce:	4240      	negs	r0, r0
 80182d0:	9603      	str	r6, [sp, #12]
 80182d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80182d6:	b200      	sxth	r0, r0
 80182d8:	9700      	str	r7, [sp, #0]
 80182da:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80182de:	4629      	mov	r1, r5
 80182e0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80182e4:	2401      	movs	r4, #1
 80182e6:	a805      	add	r0, sp, #20
 80182e8:	f7ff fcbe 	bl	8017c68 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 80182ec:	a805      	add	r0, sp, #20
 80182ee:	f7ff fee0 	bl	80180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80182f2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80182f6:	b163      	cbz	r3, 8018312 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 80182f8:	3401      	adds	r4, #1
 80182fa:	e7f7      	b.n	80182ec <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80182fc:	2401      	movs	r4, #1
 80182fe:	f002 fd9b 	bl	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8018302:	280a      	cmp	r0, #10
 8018304:	4628      	mov	r0, r5
 8018306:	bf08      	it	eq
 8018308:	3401      	addeq	r4, #1
 801830a:	f002 fd95 	bl	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801830e:	2800      	cmp	r0, #0
 8018310:	d1f7      	bne.n	8018302 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8018312:	b2a0      	uxth	r0, r4
 8018314:	b00f      	add	sp, #60	; 0x3c
 8018316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018318 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8018318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801831c:	b0e3      	sub	sp, #396	; 0x18c
 801831e:	461c      	mov	r4, r3
 8018320:	4683      	mov	fp, r0
 8018322:	4688      	mov	r8, r1
 8018324:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8018326:	2b00      	cmp	r3, #0
 8018328:	f000 810f 	beq.w	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801832c:	6823      	ldr	r3, [r4, #0]
 801832e:	2b00      	cmp	r3, #0
 8018330:	f000 810b 	beq.w	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8018334:	7ba3      	ldrb	r3, [r4, #14]
 8018336:	2b00      	cmp	r3, #0
 8018338:	f000 8107 	beq.w	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 801833c:	ad0a      	add	r5, sp, #40	; 0x28
 801833e:	6810      	ldr	r0, [r2, #0]
 8018340:	6851      	ldr	r1, [r2, #4]
 8018342:	462b      	mov	r3, r5
 8018344:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8018348:	c303      	stmia	r3!, {r0, r1}
 801834a:	2100      	movs	r1, #0
 801834c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018350:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018354:	4628      	mov	r0, r5
 8018356:	910c      	str	r1, [sp, #48]	; 0x30
 8018358:	a90c      	add	r1, sp, #48	; 0x30
 801835a:	79a2      	ldrb	r2, [r4, #6]
 801835c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018360:	f7ff fd01 	bl	8017d66 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8018364:	a90c      	add	r1, sp, #48	; 0x30
 8018366:	79a2      	ldrb	r2, [r4, #6]
 8018368:	4608      	mov	r0, r1
 801836a:	f7ff fcfc 	bl	8017d66 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801836e:	a817      	add	r0, sp, #92	; 0x5c
 8018370:	f002 f936 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8018374:	6820      	ldr	r0, [r4, #0]
 8018376:	6803      	ldr	r3, [r0, #0]
 8018378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801837a:	4798      	blx	r3
 801837c:	4606      	mov	r6, r0
 801837e:	6820      	ldr	r0, [r4, #0]
 8018380:	6803      	ldr	r3, [r0, #0]
 8018382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018384:	4798      	blx	r3
 8018386:	4633      	mov	r3, r6
 8018388:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 801838a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 801838c:	9000      	str	r0, [sp, #0]
 801838e:	a817      	add	r0, sp, #92	; 0x5c
 8018390:	f002 f981 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018394:	6820      	ldr	r0, [r4, #0]
 8018396:	f894 a004 	ldrb.w	sl, [r4, #4]
 801839a:	6803      	ldr	r3, [r0, #0]
 801839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801839e:	4798      	blx	r3
 80183a0:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80183a4:	6823      	ldr	r3, [r4, #0]
 80183a6:	4607      	mov	r7, r0
 80183a8:	4406      	add	r6, r0
 80183aa:	a830      	add	r0, sp, #192	; 0xc0
 80183ac:	f893 9009 	ldrb.w	r9, [r3, #9]
 80183b0:	f002 f916 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 80183b4:	7c23      	ldrb	r3, [r4, #16]
 80183b6:	b17b      	cbz	r3, 80183d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80183b8:	6820      	ldr	r0, [r4, #0]
 80183ba:	6803      	ldr	r3, [r0, #0]
 80183bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183be:	4798      	blx	r3
 80183c0:	9009      	str	r0, [sp, #36]	; 0x24
 80183c2:	6820      	ldr	r0, [r4, #0]
 80183c4:	6802      	ldr	r2, [r0, #0]
 80183c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80183c8:	4790      	blx	r2
 80183ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183cc:	9000      	str	r0, [sp, #0]
 80183ce:	a830      	add	r0, sp, #192	; 0xc0
 80183d0:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 80183d2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 80183d4:	f002 f95f 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80183d8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80183dc:	a80e      	add	r0, sp, #56	; 0x38
 80183de:	7be2      	ldrb	r2, [r4, #15]
 80183e0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80183e4:	1a8a      	subs	r2, r1, r2
 80183e6:	7c21      	ldrb	r1, [r4, #16]
 80183e8:	9103      	str	r1, [sp, #12]
 80183ea:	b292      	uxth	r2, r2
 80183ec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80183f0:	9102      	str	r1, [sp, #8]
 80183f2:	6821      	ldr	r1, [r4, #0]
 80183f4:	9101      	str	r1, [sp, #4]
 80183f6:	7961      	ldrb	r1, [r4, #5]
 80183f8:	9100      	str	r1, [sp, #0]
 80183fa:	a930      	add	r1, sp, #192	; 0xc0
 80183fc:	f7ff fc34 	bl	8017c68 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8018400:	2e00      	cmp	r6, #0
 8018402:	dc5b      	bgt.n	80184bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8018404:	af17      	add	r7, sp, #92	; 0x5c
 8018406:	f04f 0900 	mov.w	r9, #0
 801840a:	7c23      	ldrb	r3, [r4, #16]
 801840c:	2b00      	cmp	r3, #0
 801840e:	f000 80ae 	beq.w	801856e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8018412:	a80e      	add	r0, sp, #56	; 0x38
 8018414:	f7ff fe4d 	bl	80180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8018418:	f1ba 0f00 	cmp.w	sl, #0
 801841c:	f000 80a2 	beq.w	8018564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8018420:	7c23      	ldrb	r3, [r4, #16]
 8018422:	2264      	movs	r2, #100	; 0x64
 8018424:	4639      	mov	r1, r7
 8018426:	a849      	add	r0, sp, #292	; 0x124
 8018428:	9309      	str	r3, [sp, #36]	; 0x24
 801842a:	f00c faa3 	bl	8024974 <memcpy>
 801842e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018430:	2b00      	cmp	r3, #0
 8018432:	f000 80a4 	beq.w	801857e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 8018436:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801843a:	7922      	ldrb	r2, [r4, #4]
 801843c:	2a01      	cmp	r2, #1
 801843e:	f040 8087 	bne.w	8018550 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8018442:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8018446:	1ac0      	subs	r0, r0, r3
 8018448:	2302      	movs	r3, #2
 801844a:	fb90 f0f3 	sdiv	r0, r0, r3
 801844e:	b200      	sxth	r0, r0
 8018450:	7c23      	ldrb	r3, [r4, #16]
 8018452:	2b00      	cmp	r3, #0
 8018454:	f000 8088 	beq.w	8018568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
 8018458:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 801845c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8018460:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018464:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8018468:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801846c:	2100      	movs	r1, #0
 801846e:	4410      	add	r0, r2
 8018470:	4642      	mov	r2, r8
 8018472:	b200      	sxth	r0, r0
 8018474:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8018478:	9000      	str	r0, [sp, #0]
 801847a:	4658      	mov	r0, fp
 801847c:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8018480:	f7ff fca2 	bl	8017dc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8018484:	2800      	cmp	r0, #0
 8018486:	d160      	bne.n	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8018488:	b2b2      	uxth	r2, r6
 801848a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801848e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8018492:	4413      	add	r3, r2
 8018494:	1a8a      	subs	r2, r1, r2
 8018496:	b21b      	sxth	r3, r3
 8018498:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801849c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 80184a0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80184a4:	2a00      	cmp	r2, #0
 80184a6:	d150      	bne.n	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80184a8:	6822      	ldr	r2, [r4, #0]
 80184aa:	8869      	ldrh	r1, [r5, #2]
 80184ac:	7a12      	ldrb	r2, [r2, #8]
 80184ae:	1a9b      	subs	r3, r3, r2
 80184b0:	88ea      	ldrh	r2, [r5, #6]
 80184b2:	440a      	add	r2, r1
 80184b4:	b212      	sxth	r2, r2
 80184b6:	4293      	cmp	r3, r2
 80184b8:	dda7      	ble.n	801840a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80184ba:	e046      	b.n	801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 80184bc:	7c23      	ldrb	r3, [r4, #16]
 80184be:	444f      	add	r7, r9
 80184c0:	b1c3      	cbz	r3, 80184f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80184c2:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80184c6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80184ca:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80184ce:	443b      	add	r3, r7
 80184d0:	4293      	cmp	r3, r2
 80184d2:	da97      	bge.n	8018404 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 80184d4:	a80e      	add	r0, sp, #56	; 0x38
 80184d6:	f7ff fdec 	bl	80180b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 80184da:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80184de:	3b01      	subs	r3, #1
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	454b      	cmp	r3, r9
 80184e4:	9309      	str	r3, [sp, #36]	; 0x24
 80184e6:	d021      	beq.n	801852c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 80184e8:	7961      	ldrb	r1, [r4, #5]
 80184ea:	a817      	add	r0, sp, #92	; 0x5c
 80184ec:	f7ee ff72 	bl	80073d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80184f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184f2:	e7f4      	b.n	80184de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 80184f4:	fa1f f986 	uxth.w	r9, r6
 80184f8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80184fc:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018500:	443b      	add	r3, r7
 8018502:	4293      	cmp	r3, r2
 8018504:	f6bf af7e 	bge.w	8018404 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8018508:	a817      	add	r0, sp, #92	; 0x5c
 801850a:	f002 fc95 	bl	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801850e:	b1e0      	cbz	r0, 801854a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
 8018510:	280a      	cmp	r0, #10
 8018512:	d1f1      	bne.n	80184f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8018514:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018518:	444b      	add	r3, r9
 801851a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801851e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018522:	eba3 0309 	sub.w	r3, r3, r9
 8018526:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801852a:	e7e5      	b.n	80184f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801852c:	b2b3      	uxth	r3, r6
 801852e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8018532:	441a      	add	r2, r3
 8018534:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018538:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801853c:	1ad3      	subs	r3, r2, r3
 801853e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018542:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018546:	2b00      	cmp	r3, #0
 8018548:	d1bd      	bne.n	80184c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801854a:	b063      	add	sp, #396	; 0x18c
 801854c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018550:	2a02      	cmp	r2, #2
 8018552:	d105      	bne.n	8018560 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 8018554:	7be2      	ldrb	r2, [r4, #15]
 8018556:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801855a:	1a80      	subs	r0, r0, r2
 801855c:	1ac0      	subs	r0, r0, r3
 801855e:	e776      	b.n	801844e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8018560:	2000      	movs	r0, #0
 8018562:	e775      	b.n	8018450 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018564:	7be0      	ldrb	r0, [r4, #15]
 8018566:	e773      	b.n	8018450 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8018568:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801856c:	e776      	b.n	801845c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801856e:	f1ba 0f00 	cmp.w	sl, #0
 8018572:	d0f7      	beq.n	8018564 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
 8018574:	2264      	movs	r2, #100	; 0x64
 8018576:	4639      	mov	r1, r7
 8018578:	a849      	add	r0, sp, #292	; 0x124
 801857a:	f00c f9fb 	bl	8024974 <memcpy>
 801857e:	2300      	movs	r3, #0
 8018580:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018584:	6821      	ldr	r1, [r4, #0]
 8018586:	a849      	add	r0, sp, #292	; 0x124
 8018588:	f7ff fbb1 	bl	8017cee <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801858c:	b203      	sxth	r3, r0
 801858e:	e754      	b.n	801843a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08018590 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8018590:	2b03      	cmp	r3, #3
 8018592:	d818      	bhi.n	80185c6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8018594:	e8df f003 	tbb	[pc, r3]
 8018598:	130d0602 	.word	0x130d0602
 801859c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80185a0:	1850      	adds	r0, r2, r1
 80185a2:	4770      	bx	lr
 80185a4:	8803      	ldrh	r3, [r0, #0]
 80185a6:	8880      	ldrh	r0, [r0, #4]
 80185a8:	4418      	add	r0, r3
 80185aa:	b200      	sxth	r0, r0
 80185ac:	1a80      	subs	r0, r0, r2
 80185ae:	3801      	subs	r0, #1
 80185b0:	4770      	bx	lr
 80185b2:	8803      	ldrh	r3, [r0, #0]
 80185b4:	8880      	ldrh	r0, [r0, #4]
 80185b6:	4418      	add	r0, r3
 80185b8:	b200      	sxth	r0, r0
 80185ba:	1a40      	subs	r0, r0, r1
 80185bc:	e7f7      	b.n	80185ae <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80185be:	f9b0 0000 	ldrsh.w	r0, [r0]
 80185c2:	4410      	add	r0, r2
 80185c4:	4770      	bx	lr
 80185c6:	2000      	movs	r0, #0
 80185c8:	4770      	bx	lr

080185ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80185ca:	2b03      	cmp	r3, #3
 80185cc:	d817      	bhi.n	80185fe <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80185ce:	e8df f003 	tbb	[pc, r3]
 80185d2:	0602      	.short	0x0602
 80185d4:	1009      	.short	0x1009
 80185d6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80185da:	1850      	adds	r0, r2, r1
 80185dc:	4770      	bx	lr
 80185de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80185e2:	e7fa      	b.n	80185da <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80185e4:	8843      	ldrh	r3, [r0, #2]
 80185e6:	88c0      	ldrh	r0, [r0, #6]
 80185e8:	4418      	add	r0, r3
 80185ea:	b200      	sxth	r0, r0
 80185ec:	1a80      	subs	r0, r0, r2
 80185ee:	3801      	subs	r0, #1
 80185f0:	4770      	bx	lr
 80185f2:	8843      	ldrh	r3, [r0, #2]
 80185f4:	88c0      	ldrh	r0, [r0, #6]
 80185f6:	4418      	add	r0, r3
 80185f8:	b200      	sxth	r0, r0
 80185fa:	1a40      	subs	r0, r0, r1
 80185fc:	e7f7      	b.n	80185ee <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80185fe:	2000      	movs	r0, #0
 8018600:	4770      	bx	lr
	...

08018604 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8018604:	4b01      	ldr	r3, [pc, #4]	; (801860c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8018606:	2200      	movs	r2, #0
 8018608:	601a      	str	r2, [r3, #0]
 801860a:	4770      	bx	lr
 801860c:	24010070 	.word	0x24010070

08018610 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8018610:	4603      	mov	r3, r0
 8018612:	b1c8      	cbz	r0, 8018648 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8018614:	0c02      	lsrs	r2, r0, #16
 8018616:	0412      	lsls	r2, r2, #16
 8018618:	b9a2      	cbnz	r2, 8018644 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801861a:	0403      	lsls	r3, r0, #16
 801861c:	2010      	movs	r0, #16
 801861e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018622:	bf04      	itt	eq
 8018624:	021b      	lsleq	r3, r3, #8
 8018626:	3008      	addeq	r0, #8
 8018628:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801862c:	bf04      	itt	eq
 801862e:	011b      	lsleq	r3, r3, #4
 8018630:	3004      	addeq	r0, #4
 8018632:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018636:	bf04      	itt	eq
 8018638:	009b      	lsleq	r3, r3, #2
 801863a:	3002      	addeq	r0, #2
 801863c:	2b00      	cmp	r3, #0
 801863e:	db04      	blt.n	801864a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8018640:	3001      	adds	r0, #1
 8018642:	4770      	bx	lr
 8018644:	2000      	movs	r0, #0
 8018646:	e7ea      	b.n	801861e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8018648:	2020      	movs	r0, #32
 801864a:	4770      	bx	lr

0801864c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018650:	b087      	sub	sp, #28
 8018652:	4681      	mov	r9, r0
 8018654:	4698      	mov	r8, r3
 8018656:	4610      	mov	r0, r2
 8018658:	460d      	mov	r5, r1
 801865a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801865e:	b981      	cbnz	r1, 8018682 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8018660:	b14b      	cbz	r3, 8018676 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8018662:	460b      	mov	r3, r1
 8018664:	464a      	mov	r2, r9
 8018666:	4641      	mov	r1, r8
 8018668:	e9cd 4700 	strd	r4, r7, [sp]
 801866c:	f7ff ffee 	bl	801864c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018670:	b007      	add	sp, #28
 8018672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018676:	f04f 33ff 	mov.w	r3, #4294967295
 801867a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801867e:	603b      	str	r3, [r7, #0]
 8018680:	e7f6      	b.n	8018670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018682:	fa32 fa01 	lsrs.w	sl, r2, r1
 8018686:	d107      	bne.n	8018698 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8018688:	fb09 f602 	mul.w	r6, r9, r2
 801868c:	fbb6 f0f4 	udiv	r0, r6, r4
 8018690:	fb04 6610 	mls	r6, r4, r0, r6
 8018694:	603e      	str	r6, [r7, #0]
 8018696:	e7eb      	b.n	8018670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8018698:	2601      	movs	r6, #1
 801869a:	fa09 fb01 	lsl.w	fp, r9, r1
 801869e:	408e      	lsls	r6, r1
 80186a0:	fbbb f3f4 	udiv	r3, fp, r4
 80186a4:	3e01      	subs	r6, #1
 80186a6:	9302      	str	r3, [sp, #8]
 80186a8:	fb0a f303 	mul.w	r3, sl, r3
 80186ac:	4016      	ands	r6, r2
 80186ae:	9303      	str	r3, [sp, #12]
 80186b0:	4630      	mov	r0, r6
 80186b2:	f7ff ffad 	bl	8018610 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80186b6:	464a      	mov	r2, r9
 80186b8:	460b      	mov	r3, r1
 80186ba:	4601      	mov	r1, r0
 80186bc:	4630      	mov	r0, r6
 80186be:	e9cd 4700 	strd	r4, r7, [sp]
 80186c2:	f7ff ffc3 	bl	801864c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80186c6:	9b02      	ldr	r3, [sp, #8]
 80186c8:	4606      	mov	r6, r0
 80186ca:	eb05 0108 	add.w	r1, r5, r8
 80186ce:	fb04 bb13 	mls	fp, r4, r3, fp
 80186d2:	4658      	mov	r0, fp
 80186d4:	f7ff ff9c 	bl	8018610 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80186d8:	ab05      	add	r3, sp, #20
 80186da:	465a      	mov	r2, fp
 80186dc:	e9cd 4300 	strd	r4, r3, [sp]
 80186e0:	4603      	mov	r3, r0
 80186e2:	4650      	mov	r0, sl
 80186e4:	f7ff ffb2 	bl	801864c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80186e8:	6839      	ldr	r1, [r7, #0]
 80186ea:	9a05      	ldr	r2, [sp, #20]
 80186ec:	9b03      	ldr	r3, [sp, #12]
 80186ee:	4411      	add	r1, r2
 80186f0:	fbb1 f2f4 	udiv	r2, r1, r4
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	fb04 1412 	mls	r4, r4, r2, r1
 80186fa:	441e      	add	r6, r3
 80186fc:	603c      	str	r4, [r7, #0]
 80186fe:	4430      	add	r0, r6
 8018700:	e7b6      	b.n	8018670 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08018702 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8018702:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018706:	b085      	sub	sp, #20
 8018708:	f1b0 0900 	subs.w	r9, r0, #0
 801870c:	461d      	mov	r5, r3
 801870e:	4617      	mov	r7, r2
 8018710:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018712:	bfbb      	ittet	lt
 8018714:	f1c9 0900 	rsblt	r9, r9, #0
 8018718:	f04f 36ff 	movlt.w	r6, #4294967295
 801871c:	2601      	movge	r6, #1
 801871e:	6823      	ldrlt	r3, [r4, #0]
 8018720:	bfbc      	itt	lt
 8018722:	425b      	neglt	r3, r3
 8018724:	6023      	strlt	r3, [r4, #0]
 8018726:	2a00      	cmp	r2, #0
 8018728:	da04      	bge.n	8018734 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801872a:	6823      	ldr	r3, [r4, #0]
 801872c:	4257      	negs	r7, r2
 801872e:	4276      	negs	r6, r6
 8018730:	425b      	negs	r3, r3
 8018732:	6023      	str	r3, [r4, #0]
 8018734:	2d00      	cmp	r5, #0
 8018736:	4638      	mov	r0, r7
 8018738:	bfba      	itte	lt
 801873a:	426d      	neglt	r5, r5
 801873c:	f04f 38ff 	movlt.w	r8, #4294967295
 8018740:	f04f 0801 	movge.w	r8, #1
 8018744:	f7ff ff64 	bl	8018610 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8018748:	ab03      	add	r3, sp, #12
 801874a:	463a      	mov	r2, r7
 801874c:	e9cd 5300 	strd	r5, r3, [sp]
 8018750:	4603      	mov	r3, r0
 8018752:	4648      	mov	r0, r9
 8018754:	f7ff ff7a 	bl	801864c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8018758:	6823      	ldr	r3, [r4, #0]
 801875a:	9a03      	ldr	r2, [sp, #12]
 801875c:	4546      	cmp	r6, r8
 801875e:	441a      	add	r2, r3
 8018760:	fb92 f3f5 	sdiv	r3, r2, r5
 8018764:	4418      	add	r0, r3
 8018766:	fb05 2313 	mls	r3, r5, r3, r2
 801876a:	bf18      	it	ne
 801876c:	4240      	negne	r0, r0
 801876e:	1c72      	adds	r2, r6, #1
 8018770:	6023      	str	r3, [r4, #0]
 8018772:	d105      	bne.n	8018780 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8018774:	2b00      	cmp	r3, #0
 8018776:	f1c3 0200 	rsb	r2, r3, #0
 801877a:	db0b      	blt.n	8018794 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801877c:	6022      	str	r2, [r4, #0]
 801877e:	e006      	b.n	801878e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018780:	2e01      	cmp	r6, #1
 8018782:	d104      	bne.n	801878e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018784:	2b00      	cmp	r3, #0
 8018786:	da02      	bge.n	801878e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8018788:	442b      	add	r3, r5
 801878a:	3801      	subs	r0, #1
 801878c:	6023      	str	r3, [r4, #0]
 801878e:	b005      	add	sp, #20
 8018790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018794:	3801      	subs	r0, #1
 8018796:	1b52      	subs	r2, r2, r5
 8018798:	e7f0      	b.n	801877c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801879c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801879c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80187a0:	4c1c      	ldr	r4, [pc, #112]	; (8018814 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80187a2:	4605      	mov	r5, r0
 80187a4:	6807      	ldr	r7, [r0, #0]
 80187a6:	69a3      	ldr	r3, [r4, #24]
 80187a8:	b92b      	cbnz	r3, 80187b6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80187aa:	6840      	ldr	r0, [r0, #4]
 80187ac:	e9c5 7000 	strd	r7, r0, [r5]
 80187b0:	b004      	add	sp, #16
 80187b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187b6:	f04f 0802 	mov.w	r8, #2
 80187ba:	68a2      	ldr	r2, [r4, #8]
 80187bc:	ae04      	add	r6, sp, #16
 80187be:	6820      	ldr	r0, [r4, #0]
 80187c0:	fb93 f1f8 	sdiv	r1, r3, r8
 80187c4:	440a      	add	r2, r1
 80187c6:	69e1      	ldr	r1, [r4, #28]
 80187c8:	f846 2d04 	str.w	r2, [r6, #-4]!
 80187cc:	463a      	mov	r2, r7
 80187ce:	9600      	str	r6, [sp, #0]
 80187d0:	f7ff ff97 	bl	8018702 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80187d4:	69a3      	ldr	r3, [r4, #24]
 80187d6:	4607      	mov	r7, r0
 80187d8:	686a      	ldr	r2, [r5, #4]
 80187da:	6a21      	ldr	r1, [r4, #32]
 80187dc:	9600      	str	r6, [sp, #0]
 80187de:	6860      	ldr	r0, [r4, #4]
 80187e0:	f7ff ff8f 	bl	8018702 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80187e4:	69a3      	ldr	r3, [r4, #24]
 80187e6:	6962      	ldr	r2, [r4, #20]
 80187e8:	4407      	add	r7, r0
 80187ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80187ec:	9600      	str	r6, [sp, #0]
 80187ee:	68e0      	ldr	r0, [r4, #12]
 80187f0:	fb93 f8f8 	sdiv	r8, r3, r8
 80187f4:	4442      	add	r2, r8
 80187f6:	9203      	str	r2, [sp, #12]
 80187f8:	682a      	ldr	r2, [r5, #0]
 80187fa:	f7ff ff82 	bl	8018702 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80187fe:	4680      	mov	r8, r0
 8018800:	9600      	str	r6, [sp, #0]
 8018802:	69a3      	ldr	r3, [r4, #24]
 8018804:	686a      	ldr	r2, [r5, #4]
 8018806:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8018808:	6920      	ldr	r0, [r4, #16]
 801880a:	f7ff ff7a 	bl	8018702 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801880e:	4440      	add	r0, r8
 8018810:	e7cc      	b.n	80187ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8018812:	bf00      	nop
 8018814:	24010074 	.word	0x24010074

08018818 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8018818:	4b07      	ldr	r3, [pc, #28]	; (8018838 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	2b01      	cmp	r3, #1
 801881e:	d109      	bne.n	8018834 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8018820:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018824:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018828:	8003      	strh	r3, [r0, #0]
 801882a:	4b04      	ldr	r3, [pc, #16]	; (801883c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801882c:	881b      	ldrh	r3, [r3, #0]
 801882e:	3b01      	subs	r3, #1
 8018830:	1a9b      	subs	r3, r3, r2
 8018832:	800b      	strh	r3, [r1, #0]
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop
 8018838:	24010058 	.word	0x24010058
 801883c:	24010054 	.word	0x24010054

08018840 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8018840:	4b07      	ldr	r3, [pc, #28]	; (8018860 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8018842:	b510      	push	{r4, lr}
 8018844:	781b      	ldrb	r3, [r3, #0]
 8018846:	2b01      	cmp	r3, #1
 8018848:	d108      	bne.n	801885c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801884a:	4b06      	ldr	r3, [pc, #24]	; (8018864 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801884c:	880c      	ldrh	r4, [r1, #0]
 801884e:	881b      	ldrh	r3, [r3, #0]
 8018850:	f9b0 2000 	ldrsh.w	r2, [r0]
 8018854:	3b01      	subs	r3, #1
 8018856:	1b1b      	subs	r3, r3, r4
 8018858:	8003      	strh	r3, [r0, #0]
 801885a:	800a      	strh	r2, [r1, #0]
 801885c:	bd10      	pop	{r4, pc}
 801885e:	bf00      	nop
 8018860:	24010058 	.word	0x24010058
 8018864:	24010054 	.word	0x24010054

08018868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8018868:	4b0a      	ldr	r3, [pc, #40]	; (8018894 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801886a:	b510      	push	{r4, lr}
 801886c:	781b      	ldrb	r3, [r3, #0]
 801886e:	2b01      	cmp	r3, #1
 8018870:	d10e      	bne.n	8018890 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8018872:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8018876:	8843      	ldrh	r3, [r0, #2]
 8018878:	f9b0 4000 	ldrsh.w	r4, [r0]
 801887c:	18ca      	adds	r2, r1, r3
 801887e:	4b06      	ldr	r3, [pc, #24]	; (8018898 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8018880:	8044      	strh	r4, [r0, #2]
 8018882:	881b      	ldrh	r3, [r3, #0]
 8018884:	1a9b      	subs	r3, r3, r2
 8018886:	8003      	strh	r3, [r0, #0]
 8018888:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801888c:	8081      	strh	r1, [r0, #4]
 801888e:	80c3      	strh	r3, [r0, #6]
 8018890:	bd10      	pop	{r4, pc}
 8018892:	bf00      	nop
 8018894:	24010058 	.word	0x24010058
 8018898:	24010054 	.word	0x24010054

0801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801889c:	4b08      	ldr	r3, [pc, #32]	; (80188c0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801889e:	781b      	ldrb	r3, [r3, #0]
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d10c      	bne.n	80188be <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80188a4:	8803      	ldrh	r3, [r0, #0]
 80188a6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80188aa:	8842      	ldrh	r2, [r0, #2]
 80188ac:	8002      	strh	r2, [r0, #0]
 80188ae:	185a      	adds	r2, r3, r1
 80188b0:	4b04      	ldr	r3, [pc, #16]	; (80188c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80188b2:	881b      	ldrh	r3, [r3, #0]
 80188b4:	1a9b      	subs	r3, r3, r2
 80188b6:	8043      	strh	r3, [r0, #2]
 80188b8:	88c3      	ldrh	r3, [r0, #6]
 80188ba:	80c1      	strh	r1, [r0, #6]
 80188bc:	8083      	strh	r3, [r0, #4]
 80188be:	4770      	bx	lr
 80188c0:	24010058 	.word	0x24010058
 80188c4:	24010054 	.word	0x24010054

080188c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80188c8:	4b07      	ldr	r3, [pc, #28]	; (80188e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80188ca:	b510      	push	{r4, lr}
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	2b01      	cmp	r3, #1
 80188d0:	d108      	bne.n	80188e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 80188d2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80188d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80188da:	8003      	strh	r3, [r0, #0]
 80188dc:	8893      	ldrh	r3, [r2, #4]
 80188de:	3b01      	subs	r3, #1
 80188e0:	1b1b      	subs	r3, r3, r4
 80188e2:	800b      	strh	r3, [r1, #0]
 80188e4:	bd10      	pop	{r4, pc}
 80188e6:	bf00      	nop
 80188e8:	24010058 	.word	0x24010058

080188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80188ec:	4b0a      	ldr	r3, [pc, #40]	; (8018918 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80188ee:	460a      	mov	r2, r1
 80188f0:	b510      	push	{r4, lr}
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	d10d      	bne.n	8018914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80188f8:	8881      	ldrh	r1, [r0, #4]
 80188fa:	8803      	ldrh	r3, [r0, #0]
 80188fc:	440b      	add	r3, r1
 80188fe:	4601      	mov	r1, r0
 8018900:	3b01      	subs	r3, #1
 8018902:	f821 3b02 	strh.w	r3, [r1], #2
 8018906:	f7ff ffdf 	bl	80188c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801890a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801890e:	88c2      	ldrh	r2, [r0, #6]
 8018910:	80c3      	strh	r3, [r0, #6]
 8018912:	8082      	strh	r2, [r0, #4]
 8018914:	bd10      	pop	{r4, pc}
 8018916:	bf00      	nop
 8018918:	24010058 	.word	0x24010058

0801891c <_ZN8touchgfx11Application13requestRedrawEv>:
 801891c:	4b06      	ldr	r3, [pc, #24]	; (8018938 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801891e:	2100      	movs	r1, #0
 8018920:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018924:	4b05      	ldr	r3, [pc, #20]	; (801893c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8018926:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801892a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801892e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8018932:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 8018936:	4770      	bx	lr
 8018938:	24010054 	.word	0x24010054
 801893c:	24010056 	.word	0x24010056

08018940 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8018940:	4b03      	ldr	r3, [pc, #12]	; (8018950 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8018942:	6818      	ldr	r0, [r3, #0]
 8018944:	b110      	cbz	r0, 801894c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8018946:	6803      	ldr	r3, [r0, #0]
 8018948:	699b      	ldr	r3, [r3, #24]
 801894a:	4718      	bx	r3
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop
 8018950:	240100a4 	.word	0x240100a4

08018954 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8018954:	4770      	bx	lr
	...

08018958 <_ZN8touchgfx11Application4drawEv>:
 8018958:	4b09      	ldr	r3, [pc, #36]	; (8018980 <_ZN8touchgfx11Application4drawEv+0x28>)
 801895a:	b507      	push	{r0, r1, r2, lr}
 801895c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018960:	2100      	movs	r1, #0
 8018962:	4b08      	ldr	r3, [pc, #32]	; (8018984 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8018964:	9100      	str	r1, [sp, #0]
 8018966:	4669      	mov	r1, sp
 8018968:	f9b3 3000 	ldrsh.w	r3, [r3]
 801896c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018970:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018974:	6803      	ldr	r3, [r0, #0]
 8018976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018978:	4798      	blx	r3
 801897a:	b003      	add	sp, #12
 801897c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018980:	24010054 	.word	0x24010054
 8018984:	24010056 	.word	0x24010056

08018988 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8018988:	4b03      	ldr	r3, [pc, #12]	; (8018998 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801898a:	6818      	ldr	r0, [r3, #0]
 801898c:	b110      	cbz	r0, 8018994 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801898e:	6803      	ldr	r3, [r0, #0]
 8018990:	69db      	ldr	r3, [r3, #28]
 8018992:	4718      	bx	r3
 8018994:	4770      	bx	lr
 8018996:	bf00      	nop
 8018998:	240100a4 	.word	0x240100a4

0801899c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801899c:	4b03      	ldr	r3, [pc, #12]	; (80189ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801899e:	6818      	ldr	r0, [r3, #0]
 80189a0:	b110      	cbz	r0, 80189a8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80189a2:	6803      	ldr	r3, [r0, #0]
 80189a4:	6a1b      	ldr	r3, [r3, #32]
 80189a6:	4718      	bx	r3
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop
 80189ac:	240100a4 	.word	0x240100a4

080189b0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80189b0:	2300      	movs	r3, #0
 80189b2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 80189b6:	4770      	bx	lr

080189b8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80189b8:	4b03      	ldr	r3, [pc, #12]	; (80189c8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80189ba:	6818      	ldr	r0, [r3, #0]
 80189bc:	b110      	cbz	r0, 80189c4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80189be:	6803      	ldr	r3, [r0, #0]
 80189c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189c2:	4718      	bx	r3
 80189c4:	4770      	bx	lr
 80189c6:	bf00      	nop
 80189c8:	240100a4 	.word	0x240100a4

080189cc <_ZN8touchgfx11ApplicationD1Ev>:
 80189cc:	4770      	bx	lr

080189ce <_ZN8touchgfx11ApplicationD0Ev>:
 80189ce:	b510      	push	{r4, lr}
 80189d0:	4604      	mov	r4, r0
 80189d2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80189d6:	f00b fe42 	bl	802465e <_ZdlPvj>
 80189da:	4620      	mov	r0, r4
 80189dc:	bd10      	pop	{r4, pc}

080189de <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80189de:	b510      	push	{r4, lr}
 80189e0:	f9b1 4000 	ldrsh.w	r4, [r1]
 80189e4:	888a      	ldrh	r2, [r1, #4]
 80189e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 80189ea:	4422      	add	r2, r4
 80189ec:	b212      	sxth	r2, r2
 80189ee:	4293      	cmp	r3, r2
 80189f0:	da15      	bge.n	8018a1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80189f2:	8882      	ldrh	r2, [r0, #4]
 80189f4:	4413      	add	r3, r2
 80189f6:	b21b      	sxth	r3, r3
 80189f8:	429c      	cmp	r4, r3
 80189fa:	da10      	bge.n	8018a1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80189fc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018a00:	88c9      	ldrh	r1, [r1, #6]
 8018a02:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018a06:	4419      	add	r1, r3
 8018a08:	b209      	sxth	r1, r1
 8018a0a:	428a      	cmp	r2, r1
 8018a0c:	da07      	bge.n	8018a1e <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8018a0e:	88c0      	ldrh	r0, [r0, #6]
 8018a10:	4410      	add	r0, r2
 8018a12:	b200      	sxth	r0, r0
 8018a14:	4283      	cmp	r3, r0
 8018a16:	bfac      	ite	ge
 8018a18:	2000      	movge	r0, #0
 8018a1a:	2001      	movlt	r0, #1
 8018a1c:	bd10      	pop	{r4, pc}
 8018a1e:	2000      	movs	r0, #0
 8018a20:	e7fc      	b.n	8018a1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08018a22 <_ZN8touchgfx4Rect10restrictToEss>:
 8018a22:	f9b0 3000 	ldrsh.w	r3, [r0]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	b510      	push	{r4, lr}
 8018a2a:	da04      	bge.n	8018a36 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8018a2c:	8884      	ldrh	r4, [r0, #4]
 8018a2e:	4423      	add	r3, r4
 8018a30:	8083      	strh	r3, [r0, #4]
 8018a32:	2300      	movs	r3, #0
 8018a34:	8003      	strh	r3, [r0, #0]
 8018a36:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018a3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8018a3e:	1b09      	subs	r1, r1, r4
 8018a40:	428b      	cmp	r3, r1
 8018a42:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8018a46:	bfc8      	it	gt
 8018a48:	8081      	strhgt	r1, [r0, #4]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	da04      	bge.n	8018a58 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8018a4e:	88c1      	ldrh	r1, [r0, #6]
 8018a50:	440b      	add	r3, r1
 8018a52:	80c3      	strh	r3, [r0, #6]
 8018a54:	2300      	movs	r3, #0
 8018a56:	8043      	strh	r3, [r0, #2]
 8018a58:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8018a5c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8018a60:	1a52      	subs	r2, r2, r1
 8018a62:	4293      	cmp	r3, r2
 8018a64:	bfc8      	it	gt
 8018a66:	80c2      	strhgt	r2, [r0, #6]
 8018a68:	bd10      	pop	{r4, pc}
	...

08018a6c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8018a6c:	4b10      	ldr	r3, [pc, #64]	; (8018ab0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8018a6e:	b510      	push	{r4, lr}
 8018a70:	460c      	mov	r4, r1
 8018a72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018a76:	4b0f      	ldr	r3, [pc, #60]	; (8018ab4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018a7e:	f7ff ffd0 	bl	8018a22 <_ZN8touchgfx4Rect10restrictToEss>
 8018a82:	4b0d      	ldr	r3, [pc, #52]	; (8018ab8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8018a84:	6818      	ldr	r0, [r3, #0]
 8018a86:	b190      	cbz	r0, 8018aae <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8018a88:	6803      	ldr	r3, [r0, #0]
 8018a8a:	4621      	mov	r1, r4
 8018a8c:	689b      	ldr	r3, [r3, #8]
 8018a8e:	4798      	blx	r3
 8018a90:	4b0a      	ldr	r3, [pc, #40]	; (8018abc <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8018a92:	6818      	ldr	r0, [r3, #0]
 8018a94:	b118      	cbz	r0, 8018a9e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8018a96:	6803      	ldr	r3, [r0, #0]
 8018a98:	4621      	mov	r1, r4
 8018a9a:	689b      	ldr	r3, [r3, #8]
 8018a9c:	4798      	blx	r3
 8018a9e:	4b08      	ldr	r3, [pc, #32]	; (8018ac0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8018aa0:	4621      	mov	r1, r4
 8018aa2:	6818      	ldr	r0, [r3, #0]
 8018aa4:	6803      	ldr	r3, [r0, #0]
 8018aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018aaa:	69db      	ldr	r3, [r3, #28]
 8018aac:	4718      	bx	r3
 8018aae:	bd10      	pop	{r4, pc}
 8018ab0:	24010056 	.word	0x24010056
 8018ab4:	24010054 	.word	0x24010054
 8018ab8:	240100a4 	.word	0x240100a4
 8018abc:	240100a0 	.word	0x240100a0
 8018ac0:	24010060 	.word	0x24010060

08018ac4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8018ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ac6:	4606      	mov	r6, r0
 8018ac8:	4608      	mov	r0, r1
 8018aca:	460f      	mov	r7, r1
 8018acc:	f7f9 ff8d 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018ad0:	b9e8      	cbnz	r0, 8018b0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018ad2:	f9b7 5000 	ldrsh.w	r5, [r7]
 8018ad6:	f9b6 4000 	ldrsh.w	r4, [r6]
 8018ada:	42a5      	cmp	r5, r4
 8018adc:	db17      	blt.n	8018b0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018ade:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8018ae2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	db11      	blt.n	8018b0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018aea:	88b9      	ldrh	r1, [r7, #4]
 8018aec:	440d      	add	r5, r1
 8018aee:	88b1      	ldrh	r1, [r6, #4]
 8018af0:	440c      	add	r4, r1
 8018af2:	b22d      	sxth	r5, r5
 8018af4:	b224      	sxth	r4, r4
 8018af6:	42a5      	cmp	r5, r4
 8018af8:	dc09      	bgt.n	8018b0e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8018afa:	88f8      	ldrh	r0, [r7, #6]
 8018afc:	4410      	add	r0, r2
 8018afe:	88f2      	ldrh	r2, [r6, #6]
 8018b00:	4413      	add	r3, r2
 8018b02:	b200      	sxth	r0, r0
 8018b04:	b21b      	sxth	r3, r3
 8018b06:	4298      	cmp	r0, r3
 8018b08:	bfcc      	ite	gt
 8018b0a:	2000      	movgt	r0, #0
 8018b0c:	2001      	movle	r0, #1
 8018b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018b10 <_ZN8touchgfx11Application11getInstanceEv>:
 8018b10:	4b01      	ldr	r3, [pc, #4]	; (8018b18 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8018b12:	6818      	ldr	r0, [r3, #0]
 8018b14:	4770      	bx	lr
 8018b16:	bf00      	nop
 8018b18:	240100b4 	.word	0x240100b4

08018b1c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	b510      	push	{r4, lr}
 8018b20:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8018b24:	4604      	mov	r4, r0
 8018b26:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018b2a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018b2e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018b32:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8018b36:	429a      	cmp	r2, r3
 8018b38:	d90e      	bls.n	8018b58 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8018b3a:	18e2      	adds	r2, r4, r3
 8018b3c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8018b40:	b122      	cbz	r2, 8018b4c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8018b42:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8018b46:	6803      	ldr	r3, [r0, #0]
 8018b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b4a:	4798      	blx	r3
 8018b4c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8018b50:	3301      	adds	r3, #1
 8018b52:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8018b56:	e7ea      	b.n	8018b2e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8018b58:	bd10      	pop	{r4, pc}

08018b5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8018b60:	30a4      	adds	r0, #164	; 0xa4
 8018b62:	f820 3c24 	strh.w	r3, [r0, #-36]
 8018b66:	f802 3b01 	strb.w	r3, [r2], #1
 8018b6a:	4282      	cmp	r2, r0
 8018b6c:	d1fb      	bne.n	8018b66 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8018b6e:	4770      	bx	lr

08018b70 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8018b70:	b570      	push	{r4, r5, r6, lr}
 8018b72:	4c0b      	ldr	r4, [pc, #44]	; (8018ba0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8018b74:	4605      	mov	r5, r0
 8018b76:	460e      	mov	r6, r1
 8018b78:	6820      	ldr	r0, [r4, #0]
 8018b7a:	b110      	cbz	r0, 8018b82 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8018b7c:	6803      	ldr	r3, [r0, #0]
 8018b7e:	695b      	ldr	r3, [r3, #20]
 8018b80:	4798      	blx	r3
 8018b82:	1d28      	adds	r0, r5, #4
 8018b84:	f7ff ffe9 	bl	8018b5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018b88:	6026      	str	r6, [r4, #0]
 8018b8a:	6833      	ldr	r3, [r6, #0]
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	68db      	ldr	r3, [r3, #12]
 8018b90:	4798      	blx	r3
 8018b92:	682b      	ldr	r3, [r5, #0]
 8018b94:	4628      	mov	r0, r5
 8018b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b9c:	4718      	bx	r3
 8018b9e:	bf00      	nop
 8018ba0:	240100a4 	.word	0x240100a4

08018ba4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8018baa:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8018bae:	461a      	mov	r2, r3
 8018bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bb2:	461c      	mov	r4, r3
 8018bb4:	461d      	mov	r5, r3
 8018bb6:	459c      	cmp	ip, r3
 8018bb8:	dd1a      	ble.n	8018bf0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8018bba:	18c6      	adds	r6, r0, r3
 8018bbc:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8018bc0:	b16e      	cbz	r6, 8018bde <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d008      	beq.n	8018bd8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8018bc6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8018bca:	fa1f fe82 	uxth.w	lr, r2
 8018bce:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8018bd2:	1887      	adds	r7, r0, r2
 8018bd4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8018bd8:	3201      	adds	r2, #1
 8018bda:	3301      	adds	r3, #1
 8018bdc:	e7eb      	b.n	8018bb6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8018bde:	4299      	cmp	r1, r3
 8018be0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8018be4:	bfa8      	it	ge
 8018be6:	3501      	addge	r5, #1
 8018be8:	429e      	cmp	r6, r3
 8018bea:	bfc8      	it	gt
 8018bec:	3401      	addgt	r4, #1
 8018bee:	e7f4      	b.n	8018bda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8018bf0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8018bf4:	1b49      	subs	r1, r1, r5
 8018bf6:	1b1b      	subs	r3, r3, r4
 8018bf8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8018bfc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8018c00:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8018c04:	4293      	cmp	r3, r2
 8018c06:	dd03      	ble.n	8018c10 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8018c08:	3b01      	subs	r3, #1
 8018c0a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8018c0e:	e7f7      	b.n	8018c00 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8018c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08018c14 <_ZN8touchgfx11Application15handleTickEventEv>:
 8018c14:	b570      	push	{r4, r5, r6, lr}
 8018c16:	4d16      	ldr	r5, [pc, #88]	; (8018c70 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8018c18:	4604      	mov	r4, r0
 8018c1a:	6828      	ldr	r0, [r5, #0]
 8018c1c:	b140      	cbz	r0, 8018c30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018c1e:	7a03      	ldrb	r3, [r0, #8]
 8018c20:	b933      	cbnz	r3, 8018c30 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8018c22:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018c26:	6803      	ldr	r3, [r0, #0]
 8018c28:	689b      	ldr	r3, [r3, #8]
 8018c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018c2e:	4718      	bx	r3
 8018c30:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8018c34:	4e0f      	ldr	r6, [pc, #60]	; (8018c74 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8018c36:	b973      	cbnz	r3, 8018c56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c38:	b168      	cbz	r0, 8018c56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c3a:	7a03      	ldrb	r3, [r0, #8]
 8018c3c:	b15b      	cbz	r3, 8018c56 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8018c3e:	6830      	ldr	r0, [r6, #0]
 8018c40:	b110      	cbz	r0, 8018c48 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8018c42:	6803      	ldr	r3, [r0, #0]
 8018c44:	691b      	ldr	r3, [r3, #16]
 8018c46:	4798      	blx	r3
 8018c48:	6828      	ldr	r0, [r5, #0]
 8018c4a:	6803      	ldr	r3, [r0, #0]
 8018c4c:	68db      	ldr	r3, [r3, #12]
 8018c4e:	4798      	blx	r3
 8018c50:	2301      	movs	r3, #1
 8018c52:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8018c56:	3404      	adds	r4, #4
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f7ff ff5f 	bl	8018b1c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8018c5e:	4620      	mov	r0, r4
 8018c60:	f7ff ffa0 	bl	8018ba4 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8018c64:	6830      	ldr	r0, [r6, #0]
 8018c66:	b110      	cbz	r0, 8018c6e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8018c68:	6803      	ldr	r3, [r0, #0]
 8018c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6c:	e7dd      	b.n	8018c2a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8018c6e:	bd70      	pop	{r4, r5, r6, pc}
 8018c70:	240100a8 	.word	0x240100a8
 8018c74:	240100a4 	.word	0x240100a4

08018c78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8018c78:	4603      	mov	r3, r0
 8018c7a:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8018c7e:	2200      	movs	r2, #0
 8018c80:	801a      	strh	r2, [r3, #0]
 8018c82:	3308      	adds	r3, #8
 8018c84:	f823 2c06 	strh.w	r2, [r3, #-6]
 8018c88:	f823 2c04 	strh.w	r2, [r3, #-4]
 8018c8c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8018c90:	428b      	cmp	r3, r1
 8018c92:	d1f5      	bne.n	8018c80 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8018c94:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8018c98:	4770      	bx	lr
	...

08018c9c <_ZN8touchgfx11ApplicationC1Ev>:
 8018c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9e:	4b1d      	ldr	r3, [pc, #116]	; (8018d14 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8018ca0:	4606      	mov	r6, r0
 8018ca2:	4604      	mov	r4, r0
 8018ca4:	2500      	movs	r5, #0
 8018ca6:	f846 3b04 	str.w	r3, [r6], #4
 8018caa:	22a8      	movs	r2, #168	; 0xa8
 8018cac:	2100      	movs	r1, #0
 8018cae:	4630      	mov	r0, r6
 8018cb0:	f00b fe6e 	bl	8024990 <memset>
 8018cb4:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8018cb8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8018cbc:	4f16      	ldr	r7, [pc, #88]	; (8018d18 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8018cbe:	f7ff ffdb 	bl	8018c78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018cc2:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8018cc6:	f7ff ffd7 	bl	8018c78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8018cca:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8018cce:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8018cd2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8018cd6:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8018cda:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 8018cde:	490f      	ldr	r1, [pc, #60]	; (8018d1c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8018ce0:	480f      	ldr	r0, [pc, #60]	; (8018d20 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8018ce2:	f00b f891 	bl	8023e08 <CRC_Lock>
 8018ce6:	4b0f      	ldr	r3, [pc, #60]	; (8018d24 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8018ce8:	b158      	cbz	r0, 8018d02 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8018cea:	801d      	strh	r5, [r3, #0]
 8018cec:	2300      	movs	r3, #0
 8018cee:	4a0e      	ldr	r2, [pc, #56]	; (8018d28 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	6013      	str	r3, [r2, #0]
 8018cf4:	4a0d      	ldr	r2, [pc, #52]	; (8018d2c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8018cf6:	603b      	str	r3, [r7, #0]
 8018cf8:	6013      	str	r3, [r2, #0]
 8018cfa:	f7ff ff2e 	bl	8018b5a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8018cfe:	4620      	mov	r0, r4
 8018d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018d06:	2002      	movs	r0, #2
 8018d08:	801a      	strh	r2, [r3, #0]
 8018d0a:	6038      	str	r0, [r7, #0]
 8018d0c:	f001 faee 	bl	801a2ec <_ZN8touchgfx6Screen4drawEv>
 8018d10:	e7ec      	b.n	8018cec <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8018d12:	bf00      	nop
 8018d14:	08028020 	.word	0x08028020
 8018d18:	240100a4 	.word	0x240100a4
 8018d1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8018d20:	f407a5c2 	.word	0xf407a5c2
 8018d24:	2400005c 	.word	0x2400005c
 8018d28:	240100b4 	.word	0x240100b4
 8018d2c:	240100a8 	.word	0x240100a8

08018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8018d30:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8018d34:	3b01      	subs	r3, #1
 8018d36:	b29b      	uxth	r3, r3
 8018d38:	428b      	cmp	r3, r1
 8018d3a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8018d3e:	b510      	push	{r4, lr}
 8018d40:	d908      	bls.n	8018d54 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8018d42:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8018d46:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8018d4a:	681a      	ldr	r2, [r3, #0]
 8018d4c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8018d50:	685a      	ldr	r2, [r3, #4]
 8018d52:	6062      	str	r2, [r4, #4]
 8018d54:	bd10      	pop	{r4, pc}
	...

08018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8018d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d5c:	b08f      	sub	sp, #60	; 0x3c
 8018d5e:	4b8f      	ldr	r3, [pc, #572]	; (8018f9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8018d60:	4683      	mov	fp, r0
 8018d62:	ac0a      	add	r4, sp, #40	; 0x28
 8018d64:	e884 0006 	stmia.w	r4, {r1, r2}
 8018d68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	4b8c      	ldr	r3, [pc, #560]	; (8018fa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8018d70:	f9b3 1000 	ldrsh.w	r1, [r3]
 8018d74:	f7ff fe55 	bl	8018a22 <_ZN8touchgfx4Rect10restrictToEss>
 8018d78:	4620      	mov	r0, r4
 8018d7a:	f7f9 fe36 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	d16a      	bne.n	8018e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018d82:	9403      	str	r4, [sp, #12]
 8018d84:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8018d88:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8018d8c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8018d90:	9301      	str	r3, [sp, #4]
 8018d92:	35a4      	adds	r5, #164	; 0xa4
 8018d94:	b15c      	cbz	r4, 8018dae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8018d96:	4629      	mov	r1, r5
 8018d98:	9803      	ldr	r0, [sp, #12]
 8018d9a:	f7ff fe93 	bl	8018ac4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018d9e:	3c01      	subs	r4, #1
 8018da0:	b118      	cbz	r0, 8018daa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8018da2:	b2a1      	uxth	r1, r4
 8018da4:	9801      	ldr	r0, [sp, #4]
 8018da6:	f7ff ffc3 	bl	8018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018daa:	3d08      	subs	r5, #8
 8018dac:	e7f2      	b.n	8018d94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8018dae:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 8018db2:	f108 33ff 	add.w	r3, r8, #4294967295
 8018db6:	f8cd 8010 	str.w	r8, [sp, #16]
 8018dba:	9302      	str	r3, [sp, #8]
 8018dbc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8018dc0:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8018dc4:	9306      	str	r3, [sp, #24]
 8018dc6:	445c      	add	r4, fp
 8018dc8:	2500      	movs	r5, #0
 8018dca:	4626      	mov	r6, r4
 8018dcc:	f8cd 8014 	str.w	r8, [sp, #20]
 8018dd0:	462f      	mov	r7, r5
 8018dd2:	9b05      	ldr	r3, [sp, #20]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d073      	beq.n	8018ec0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8018dd8:	9903      	ldr	r1, [sp, #12]
 8018dda:	4630      	mov	r0, r6
 8018ddc:	f7ff fdff 	bl	80189de <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018de0:	b350      	cbz	r0, 8018e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018de2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018de6:	f9b6 c000 	ldrsh.w	ip, [r6]
 8018dea:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018dee:	45e6      	cmp	lr, ip
 8018df0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8018df4:	db33      	blt.n	8018e5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018df6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018dfa:	88b3      	ldrh	r3, [r6, #4]
 8018dfc:	4472      	add	r2, lr
 8018dfe:	4463      	add	r3, ip
 8018e00:	b212      	sxth	r2, r2
 8018e02:	b21b      	sxth	r3, r3
 8018e04:	429a      	cmp	r2, r3
 8018e06:	dc2a      	bgt.n	8018e5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8018e08:	fa1f f289 	uxth.w	r2, r9
 8018e0c:	88f3      	ldrh	r3, [r6, #6]
 8018e0e:	45ca      	cmp	sl, r9
 8018e10:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8018e14:	4413      	add	r3, r2
 8018e16:	fa1f fc8a 	uxth.w	ip, sl
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	fa0f fe83 	sxth.w	lr, r3
 8018e20:	db0f      	blt.n	8018e42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8018e22:	eba3 030c 	sub.w	r3, r3, ip
 8018e26:	1ac9      	subs	r1, r1, r3
 8018e28:	b209      	sxth	r1, r1
 8018e2a:	2900      	cmp	r1, #0
 8018e2c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8018e30:	dd12      	ble.n	8018e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018e32:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8018e36:	4605      	mov	r5, r0
 8018e38:	9b05      	ldr	r3, [sp, #20]
 8018e3a:	3e08      	subs	r6, #8
 8018e3c:	3b01      	subs	r3, #1
 8018e3e:	9305      	str	r3, [sp, #20]
 8018e40:	e7c7      	b.n	8018dd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8018e42:	4461      	add	r1, ip
 8018e44:	b209      	sxth	r1, r1
 8018e46:	4571      	cmp	r1, lr
 8018e48:	dc38      	bgt.n	8018ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018e4a:	eba2 020c 	sub.w	r2, r2, ip
 8018e4e:	b212      	sxth	r2, r2
 8018e50:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018e54:	2a00      	cmp	r2, #0
 8018e56:	dcee      	bgt.n	8018e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018e58:	b00f      	add	sp, #60	; 0x3c
 8018e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e5e:	45ca      	cmp	sl, r9
 8018e60:	db2c      	blt.n	8018ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018e62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8018e66:	449a      	add	sl, r3
 8018e68:	88f3      	ldrh	r3, [r6, #6]
 8018e6a:	4499      	add	r9, r3
 8018e6c:	fa0f fa8a 	sxth.w	sl, sl
 8018e70:	fa0f f989 	sxth.w	r9, r9
 8018e74:	45ca      	cmp	sl, r9
 8018e76:	dc21      	bgt.n	8018ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018e78:	fa1f f28c 	uxth.w	r2, ip
 8018e7c:	88b3      	ldrh	r3, [r6, #4]
 8018e7e:	45e6      	cmp	lr, ip
 8018e80:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018e84:	4413      	add	r3, r2
 8018e86:	fa1f f98e 	uxth.w	r9, lr
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	fa0f fa83 	sxth.w	sl, r3
 8018e90:	db0a      	blt.n	8018ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8018e92:	eba3 0309 	sub.w	r3, r3, r9
 8018e96:	1ac9      	subs	r1, r1, r3
 8018e98:	b209      	sxth	r1, r1
 8018e9a:	2900      	cmp	r1, #0
 8018e9c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8018ea0:	ddda      	ble.n	8018e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8018ea2:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8018ea6:	e7c6      	b.n	8018e36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8018ea8:	4449      	add	r1, r9
 8018eaa:	b209      	sxth	r1, r1
 8018eac:	4551      	cmp	r1, sl
 8018eae:	dc05      	bgt.n	8018ebc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8018eb0:	eba2 0209 	sub.w	r2, r2, r9
 8018eb4:	b212      	sxth	r2, r2
 8018eb6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018eba:	e7cb      	b.n	8018e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8018ebc:	4607      	mov	r7, r0
 8018ebe:	e7bb      	b.n	8018e38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8018ec0:	2d00      	cmp	r5, #0
 8018ec2:	d181      	bne.n	8018dc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8018ec4:	2f00      	cmp	r7, #0
 8018ec6:	f000 81dd 	beq.w	8019284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018eca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8018ece:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8018ed2:	b2b3      	uxth	r3, r6
 8018ed4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8018ed8:	b2b9      	uxth	r1, r7
 8018eda:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8018ede:	441a      	add	r2, r3
 8018ee0:	448a      	add	sl, r1
 8018ee2:	9105      	str	r1, [sp, #20]
 8018ee4:	b292      	uxth	r2, r2
 8018ee6:	fa1f fa8a 	uxth.w	sl, sl
 8018eea:	fa0f f882 	sxth.w	r8, r2
 8018eee:	fa0f f98a 	sxth.w	r9, sl
 8018ef2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8018ef6:	9b04      	ldr	r3, [sp, #16]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d053      	beq.n	8018fa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8018efc:	9903      	ldr	r1, [sp, #12]
 8018efe:	4620      	mov	r0, r4
 8018f00:	f7ff fd6d 	bl	80189de <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018f04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8018f08:	b1c0      	cbz	r0, 8018f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018f0a:	f9b4 e000 	ldrsh.w	lr, [r4]
 8018f0e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8018f12:	4576      	cmp	r6, lr
 8018f14:	dc23      	bgt.n	8018f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018f16:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8018f1a:	44f4      	add	ip, lr
 8018f1c:	fa0f fc8c 	sxth.w	ip, ip
 8018f20:	45e0      	cmp	r8, ip
 8018f22:	db1c      	blt.n	8018f5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8018f24:	428f      	cmp	r7, r1
 8018f26:	fa1f fc81 	uxth.w	ip, r1
 8018f2a:	88e1      	ldrh	r1, [r4, #6]
 8018f2c:	dc0d      	bgt.n	8018f4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8018f2e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8018f32:	f8a4 9002 	strh.w	r9, [r4, #2]
 8018f36:	eba1 010c 	sub.w	r1, r1, ip
 8018f3a:	80e1      	strh	r1, [r4, #6]
 8018f3c:	4628      	mov	r0, r5
 8018f3e:	9904      	ldr	r1, [sp, #16]
 8018f40:	3c08      	subs	r4, #8
 8018f42:	4605      	mov	r5, r0
 8018f44:	3901      	subs	r1, #1
 8018f46:	9104      	str	r1, [sp, #16]
 8018f48:	e7d3      	b.n	8018ef2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8018f4a:	4461      	add	r1, ip
 8018f4c:	b209      	sxth	r1, r1
 8018f4e:	4549      	cmp	r1, r9
 8018f50:	dcf5      	bgt.n	8018f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018f52:	9905      	ldr	r1, [sp, #20]
 8018f54:	eba1 0c0c 	sub.w	ip, r1, ip
 8018f58:	f8a4 c006 	strh.w	ip, [r4, #6]
 8018f5c:	e7ee      	b.n	8018f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018f5e:	428f      	cmp	r7, r1
 8018f60:	dced      	bgt.n	8018f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018f62:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8018f66:	4461      	add	r1, ip
 8018f68:	b209      	sxth	r1, r1
 8018f6a:	4589      	cmp	r9, r1
 8018f6c:	dbe7      	blt.n	8018f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018f6e:	4576      	cmp	r6, lr
 8018f70:	fa1f fc8e 	uxth.w	ip, lr
 8018f74:	88a1      	ldrh	r1, [r4, #4]
 8018f76:	dc07      	bgt.n	8018f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8018f78:	eba2 0c0c 	sub.w	ip, r2, ip
 8018f7c:	f8a4 8000 	strh.w	r8, [r4]
 8018f80:	eba1 010c 	sub.w	r1, r1, ip
 8018f84:	80a1      	strh	r1, [r4, #4]
 8018f86:	e7d9      	b.n	8018f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018f88:	4461      	add	r1, ip
 8018f8a:	b209      	sxth	r1, r1
 8018f8c:	4588      	cmp	r8, r1
 8018f8e:	dbd6      	blt.n	8018f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8018f90:	eba3 0c0c 	sub.w	ip, r3, ip
 8018f94:	f8a4 c004 	strh.w	ip, [r4, #4]
 8018f98:	e7d0      	b.n	8018f3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8018f9a:	bf00      	nop
 8018f9c:	24010056 	.word	0x24010056
 8018fa0:	24010054 	.word	0x24010054
 8018fa4:	2d00      	cmp	r5, #0
 8018fa6:	f000 816d 	beq.w	8019284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018faa:	9b06      	ldr	r3, [sp, #24]
 8018fac:	445b      	add	r3, fp
 8018fae:	461c      	mov	r4, r3
 8018fb0:	9b02      	ldr	r3, [sp, #8]
 8018fb2:	3301      	adds	r3, #1
 8018fb4:	f000 8166 	beq.w	8019284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8018fb8:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8018fbc:	9803      	ldr	r0, [sp, #12]
 8018fbe:	4629      	mov	r1, r5
 8018fc0:	f7ff fd80 	bl	8018ac4 <_ZNK8touchgfx4Rect8includesERKS0_>
 8018fc4:	b120      	cbz	r0, 8018fd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8018fc6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8018fca:	9801      	ldr	r0, [sp, #4]
 8018fcc:	f7ff feb0 	bl	8018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8018fd0:	9903      	ldr	r1, [sp, #12]
 8018fd2:	4628      	mov	r0, r5
 8018fd4:	f7ff fd03 	bl	80189de <_ZNK8touchgfx4Rect9intersectERKS0_>
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	f000 809c 	beq.w	8019116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8018fde:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8018fe2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8018fe6:	fa1f f189 	uxth.w	r1, r9
 8018fea:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8018fee:	9309      	str	r3, [sp, #36]	; 0x24
 8018ff0:	eb01 0c03 	add.w	ip, r1, r3
 8018ff4:	b283      	uxth	r3, r0
 8018ff6:	4548      	cmp	r0, r9
 8018ff8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8018ffc:	fa1f fa8c 	uxth.w	sl, ip
 8019000:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8019004:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8019008:	eb03 050c 	add.w	r5, r3, ip
 801900c:	b2ad      	uxth	r5, r5
 801900e:	9505      	str	r5, [sp, #20]
 8019010:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8019014:	9504      	str	r5, [sp, #16]
 8019016:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 801901a:	f340 8099 	ble.w	8019150 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801901e:	1a5b      	subs	r3, r3, r1
 8019020:	4596      	cmp	lr, r2
 8019022:	fa0f f08a 	sxth.w	r0, sl
 8019026:	b29b      	uxth	r3, r3
 8019028:	b21e      	sxth	r6, r3
 801902a:	dd2e      	ble.n	801908a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801902c:	9f02      	ldr	r7, [sp, #8]
 801902e:	fa1f fe8e 	uxth.w	lr, lr
 8019032:	b292      	uxth	r2, r2
 8019034:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8019038:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801903c:	9f04      	ldr	r7, [sp, #16]
 801903e:	ebae 0102 	sub.w	r1, lr, r2
 8019042:	44a6      	add	lr, r4
 8019044:	1a3f      	subs	r7, r7, r0
 8019046:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 801904a:	b289      	uxth	r1, r1
 801904c:	4402      	add	r2, r0
 801904e:	fa0f fe8e 	sxth.w	lr, lr
 8019052:	b20d      	sxth	r5, r1
 8019054:	b212      	sxth	r2, r2
 8019056:	436f      	muls	r7, r5
 8019058:	ebae 0202 	sub.w	r2, lr, r2
 801905c:	4372      	muls	r2, r6
 801905e:	4297      	cmp	r7, r2
 8019060:	db09      	blt.n	8019076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8019062:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8019066:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 801906a:	449c      	add	ip, r3
 801906c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8019070:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8019074:	e686      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019076:	4421      	add	r1, r4
 8019078:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 801907c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8019080:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019084:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8019088:	e67c      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801908a:	9f04      	ldr	r7, [sp, #16]
 801908c:	42b8      	cmp	r0, r7
 801908e:	da27      	bge.n	80190e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8019090:	9902      	ldr	r1, [sp, #8]
 8019092:	1a3f      	subs	r7, r7, r0
 8019094:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8019098:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801909c:	eb05 010e 	add.w	r1, r5, lr
 80190a0:	fa1f f881 	uxth.w	r8, r1
 80190a4:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80190a8:	4411      	add	r1, r2
 80190aa:	fa0f f988 	sxth.w	r9, r8
 80190ae:	eba2 020e 	sub.w	r2, r2, lr
 80190b2:	eba1 0108 	sub.w	r1, r1, r8
 80190b6:	4372      	muls	r2, r6
 80190b8:	b289      	uxth	r1, r1
 80190ba:	fa0f f881 	sxth.w	r8, r1
 80190be:	fb08 f707 	mul.w	r7, r8, r7
 80190c2:	42ba      	cmp	r2, r7
 80190c4:	dc06      	bgt.n	80190d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80190c6:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 80190ca:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 80190ce:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 80190d2:	e7ca      	b.n	801906a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80190d4:	4429      	add	r1, r5
 80190d6:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 80190da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80190de:	e651      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80190e0:	9805      	ldr	r0, [sp, #20]
 80190e2:	2d06      	cmp	r5, #6
 80190e4:	ebaa 0000 	sub.w	r0, sl, r0
 80190e8:	b280      	uxth	r0, r0
 80190ea:	fa0f fe80 	sxth.w	lr, r0
 80190ee:	d817      	bhi.n	8019120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80190f0:	9b04      	ldr	r3, [sp, #16]
 80190f2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 80190f6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80190fa:	1c6b      	adds	r3, r5, #1
 80190fc:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8019100:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019104:	9b01      	ldr	r3, [sp, #4]
 8019106:	9801      	ldr	r0, [sp, #4]
 8019108:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801910c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019110:	805a      	strh	r2, [r3, #2]
 8019112:	809e      	strh	r6, [r3, #4]
 8019114:	80d9      	strh	r1, [r3, #6]
 8019116:	9b02      	ldr	r3, [sp, #8]
 8019118:	3c08      	subs	r4, #8
 801911a:	3b01      	subs	r3, #1
 801911c:	9302      	str	r3, [sp, #8]
 801911e:	e747      	b.n	8018fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8019120:	9a02      	ldr	r2, [sp, #8]
 8019122:	45b6      	cmp	lr, r6
 8019124:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8019128:	db0d      	blt.n	8019146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801912a:	449c      	add	ip, r3
 801912c:	445a      	add	r2, fp
 801912e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8019132:	fa1f fc8c 	uxth.w	ip, ip
 8019136:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 801913a:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801913e:	448c      	add	ip, r1
 8019140:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8019144:	e61e      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019146:	445a      	add	r2, fp
 8019148:	4484      	add	ip, r0
 801914a:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 801914e:	e78f      	b.n	8019070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8019150:	fa1f f18e 	uxth.w	r1, lr
 8019154:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8019158:	b293      	uxth	r3, r2
 801915a:	4596      	cmp	lr, r2
 801915c:	eb01 0806 	add.w	r8, r1, r6
 8019160:	9306      	str	r3, [sp, #24]
 8019162:	fa1f f888 	uxth.w	r8, r8
 8019166:	9f06      	ldr	r7, [sp, #24]
 8019168:	fa0f f388 	sxth.w	r3, r8
 801916c:	9307      	str	r3, [sp, #28]
 801916e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8019172:	443b      	add	r3, r7
 8019174:	b29b      	uxth	r3, r3
 8019176:	9308      	str	r3, [sp, #32]
 8019178:	da24      	bge.n	80191c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801917a:	9905      	ldr	r1, [sp, #20]
 801917c:	eba3 0308 	sub.w	r3, r3, r8
 8019180:	eba2 020e 	sub.w	r2, r2, lr
 8019184:	eba9 0000 	sub.w	r0, r9, r0
 8019188:	ebaa 0401 	sub.w	r4, sl, r1
 801918c:	b29b      	uxth	r3, r3
 801918e:	b2a4      	uxth	r4, r4
 8019190:	b219      	sxth	r1, r3
 8019192:	b225      	sxth	r5, r4
 8019194:	4348      	muls	r0, r1
 8019196:	436a      	muls	r2, r5
 8019198:	4282      	cmp	r2, r0
 801919a:	9a02      	ldr	r2, [sp, #8]
 801919c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80191a0:	445a      	add	r2, fp
 80191a2:	dc06      	bgt.n	80191b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80191a4:	9b07      	ldr	r3, [sp, #28]
 80191a6:	44a4      	add	ip, r4
 80191a8:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 80191ac:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 80191b0:	e75e      	b.n	8019070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80191b2:	9904      	ldr	r1, [sp, #16]
 80191b4:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 80191b8:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 80191bc:	4433      	add	r3, r6
 80191be:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80191c2:	e5df      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80191c4:	9f06      	ldr	r7, [sp, #24]
 80191c6:	9b04      	ldr	r3, [sp, #16]
 80191c8:	1bc9      	subs	r1, r1, r7
 80191ca:	fa0f f78a 	sxth.w	r7, sl
 80191ce:	b289      	uxth	r1, r1
 80191d0:	429f      	cmp	r7, r3
 80191d2:	fa0f fe81 	sxth.w	lr, r1
 80191d6:	dd23      	ble.n	8019220 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80191d8:	9a05      	ldr	r2, [sp, #20]
 80191da:	eba9 0000 	sub.w	r0, r9, r0
 80191de:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80191e2:	ebaa 0202 	sub.w	r2, sl, r2
 80191e6:	9d07      	ldr	r5, [sp, #28]
 80191e8:	fb0e f000 	mul.w	r0, lr, r0
 80191ec:	b292      	uxth	r2, r2
 80191ee:	eba5 0a03 	sub.w	sl, r5, r3
 80191f2:	9b02      	ldr	r3, [sp, #8]
 80191f4:	b214      	sxth	r4, r2
 80191f6:	00db      	lsls	r3, r3, #3
 80191f8:	fb04 fa0a 	mul.w	sl, r4, sl
 80191fc:	445b      	add	r3, fp
 80191fe:	4550      	cmp	r0, sl
 8019200:	db03      	blt.n	801920a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8019202:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8019206:	4494      	add	ip, r2
 8019208:	e732      	b.n	8019070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801920a:	9a04      	ldr	r2, [sp, #16]
 801920c:	4431      	add	r1, r6
 801920e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8019212:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8019216:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 801921a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801921e:	e75c      	b.n	80190da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8019220:	9b08      	ldr	r3, [sp, #32]
 8019222:	2d06      	cmp	r5, #6
 8019224:	eba3 0308 	sub.w	r3, r3, r8
 8019228:	b29b      	uxth	r3, r3
 801922a:	b218      	sxth	r0, r3
 801922c:	d813      	bhi.n	8019256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801922e:	9b07      	ldr	r3, [sp, #28]
 8019230:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8019234:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8019238:	1c6b      	adds	r3, r5, #1
 801923a:	9901      	ldr	r1, [sp, #4]
 801923c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8019240:	9b01      	ldr	r3, [sp, #4]
 8019242:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8019246:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801924a:	805a      	strh	r2, [r3, #2]
 801924c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801924e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8019252:	809a      	strh	r2, [r3, #4]
 8019254:	e75f      	b.n	8019116 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8019256:	9c02      	ldr	r4, [sp, #8]
 8019258:	4570      	cmp	r0, lr
 801925a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801925e:	db0d      	blt.n	801927c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8019260:	4431      	add	r1, r6
 8019262:	9b06      	ldr	r3, [sp, #24]
 8019264:	445c      	add	r4, fp
 8019266:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801926a:	b289      	uxth	r1, r1
 801926c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8019270:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8019274:	4419      	add	r1, r3
 8019276:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 801927a:	e583      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801927c:	445c      	add	r4, fp
 801927e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8019282:	e79b      	b.n	80191bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8019284:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8019288:	2e07      	cmp	r6, #7
 801928a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801928e:	d812      	bhi.n	80192b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
 8019290:	1c75      	adds	r5, r6, #1
 8019292:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8019296:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801929a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 801929e:	9d01      	ldr	r5, [sp, #4]
 80192a0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80192a4:	442c      	add	r4, r5
 80192a6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80192aa:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80192ae:	8061      	strh	r1, [r4, #2]
 80192b0:	80a2      	strh	r2, [r4, #4]
 80192b2:	80e3      	strh	r3, [r4, #6]
 80192b4:	e5d0      	b.n	8018e58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80192b6:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80192ba:	3e01      	subs	r6, #1
 80192bc:	445c      	add	r4, fp
 80192be:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80192c2:	f04f 37ff 	mov.w	r7, #4294967295
 80192c6:	2500      	movs	r5, #0
 80192c8:	9305      	str	r3, [sp, #20]
 80192ca:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80192ce:	1e72      	subs	r2, r6, #1
 80192d0:	9302      	str	r3, [sp, #8]
 80192d2:	4691      	mov	r9, r2
 80192d4:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80192d8:	9304      	str	r3, [sp, #16]
 80192da:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 80192de:	f1b9 3fff 	cmp.w	r9, #4294967295
 80192e2:	6818      	ldr	r0, [r3, #0]
 80192e4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80192e8:	9207      	str	r2, [sp, #28]
 80192ea:	bf16      	itet	ne
 80192ec:	9905      	ldrne	r1, [sp, #20]
 80192ee:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80192f2:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80192f6:	9306      	str	r3, [sp, #24]
 80192f8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80192fc:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8019300:	fb18 f801 	smulbb	r8, r8, r1
 8019304:	6859      	ldr	r1, [r3, #4]
 8019306:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801930a:	4671      	mov	r1, lr
 801930c:	a80c      	add	r0, sp, #48	; 0x30
 801930e:	f7fb fa7b 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8019312:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8019316:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801931a:	f04f 0c08 	mov.w	ip, #8
 801931e:	9b04      	ldr	r3, [sp, #16]
 8019320:	9a02      	ldr	r2, [sp, #8]
 8019322:	fb10 f001 	smulbb	r0, r0, r1
 8019326:	fb02 8803 	mla	r8, r2, r3, r8
 801932a:	eba0 0108 	sub.w	r1, r0, r8
 801932e:	fb90 f0fc 	sdiv	r0, r0, ip
 8019332:	4288      	cmp	r0, r1
 8019334:	dc20      	bgt.n	8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8019336:	4551      	cmp	r1, sl
 8019338:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801933c:	da03      	bge.n	8019346 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
 801933e:	b1d9      	cbz	r1, 8019378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
 8019340:	468a      	mov	sl, r1
 8019342:	464f      	mov	r7, r9
 8019344:	4635      	mov	r5, r6
 8019346:	f109 39ff 	add.w	r9, r9, #4294967295
 801934a:	f119 0f02 	cmn.w	r9, #2
 801934e:	d1c6      	bne.n	80192de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 8019350:	4616      	mov	r6, r2
 8019352:	3201      	adds	r2, #1
 8019354:	f1a4 0408 	sub.w	r4, r4, #8
 8019358:	d1b7      	bne.n	80192ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
 801935a:	9b01      	ldr	r3, [sp, #4]
 801935c:	b2ac      	uxth	r4, r5
 801935e:	00ed      	lsls	r5, r5, #3
 8019360:	1958      	adds	r0, r3, r5
 8019362:	1c7b      	adds	r3, r7, #1
 8019364:	d10b      	bne.n	801937e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 8019366:	4601      	mov	r1, r0
 8019368:	9803      	ldr	r0, [sp, #12]
 801936a:	f7fb fa4d 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801936e:	4621      	mov	r1, r4
 8019370:	9801      	ldr	r0, [sp, #4]
 8019372:	f7ff fcdd 	bl	8018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8019376:	e505      	b.n	8018d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8019378:	464f      	mov	r7, r9
 801937a:	4635      	mov	r5, r6
 801937c:	e7ed      	b.n	801935a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
 801937e:	9b01      	ldr	r3, [sp, #4]
 8019380:	00ff      	lsls	r7, r7, #3
 8019382:	445d      	add	r5, fp
 8019384:	19d9      	adds	r1, r3, r7
 8019386:	445f      	add	r7, fp
 8019388:	f7fb fa3e 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801938c:	9b03      	ldr	r3, [sp, #12]
 801938e:	cb03      	ldmia	r3!, {r0, r1}
 8019390:	9b03      	ldr	r3, [sp, #12]
 8019392:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8019396:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 801939a:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801939e:	6869      	ldr	r1, [r5, #4]
 80193a0:	c303      	stmia	r3!, {r0, r1}
 80193a2:	e7e4      	b.n	801936e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

080193a4 <_ZN8touchgfx11Application10invalidateEv>:
 80193a4:	4b09      	ldr	r3, [pc, #36]	; (80193cc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80193a6:	b082      	sub	sp, #8
 80193a8:	2100      	movs	r1, #0
 80193aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193ae:	4b08      	ldr	r3, [pc, #32]	; (80193d0 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80193b0:	9100      	str	r1, [sp, #0]
 80193b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193b6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80193ba:	f8ad 3006 	strh.w	r3, [sp, #6]
 80193be:	ab02      	add	r3, sp, #8
 80193c0:	e913 0006 	ldmdb	r3, {r1, r2}
 80193c4:	b002      	add	sp, #8
 80193c6:	f7ff bcc7 	b.w	8018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80193ca:	bf00      	nop
 80193cc:	24010054 	.word	0x24010054
 80193d0:	24010056 	.word	0x24010056

080193d4 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80193d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d8:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80193dc:	b09b      	sub	sp, #108	; 0x6c
 80193de:	4604      	mov	r4, r0
 80193e0:	4630      	mov	r0, r6
 80193e2:	f7f9 fb02 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 80193e6:	4605      	mov	r5, r0
 80193e8:	b940      	cbnz	r0, 80193fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80193ea:	4620      	mov	r0, r4
 80193ec:	e896 0006 	ldmia.w	r6, {r1, r2}
 80193f0:	f7ff fcb2 	bl	8018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80193f4:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80193f8:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80193fc:	4bc8      	ldr	r3, [pc, #800]	; (8019720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d03e      	beq.n	8019482 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8019404:	4dc7      	ldr	r5, [pc, #796]	; (8019724 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8019406:	4628      	mov	r0, r5
 8019408:	f7f9 faef 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801940c:	4606      	mov	r6, r0
 801940e:	2800      	cmp	r0, #0
 8019410:	d137      	bne.n	8019482 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8019412:	4628      	mov	r0, r5
 8019414:	f7ff fa28 	bl	8018868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8019418:	6829      	ldr	r1, [r5, #0]
 801941a:	686a      	ldr	r2, [r5, #4]
 801941c:	4620      	mov	r0, r4
 801941e:	f7ff fc9b 	bl	8018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019422:	802e      	strh	r6, [r5, #0]
 8019424:	806e      	strh	r6, [r5, #2]
 8019426:	80ae      	strh	r6, [r5, #4]
 8019428:	80ee      	strh	r6, [r5, #6]
 801942a:	ae09      	add	r6, sp, #36	; 0x24
 801942c:	4630      	mov	r0, r6
 801942e:	f7ff fc23 	bl	8018c78 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8019432:	4abd      	ldr	r2, [pc, #756]	; (8019728 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8019434:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8019438:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801943c:	8815      	ldrh	r5, [r2, #0]
 801943e:	9202      	str	r2, [sp, #8]
 8019440:	462b      	mov	r3, r5
 8019442:	429f      	cmp	r7, r3
 8019444:	d924      	bls.n	8019490 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8019446:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801944a:	2907      	cmp	r1, #7
 801944c:	d816      	bhi.n	801947c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801944e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8019452:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 8019456:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801945a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801945e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8019462:	1c4a      	adds	r2, r1, #1
 8019464:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8019468:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801946c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8019470:	f8a2 9002 	strh.w	r9, [r2, #2]
 8019474:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019478:	f8a2 c006 	strh.w	ip, [r2, #6]
 801947c:	3301      	adds	r3, #1
 801947e:	b29b      	uxth	r3, r3
 8019480:	e7df      	b.n	8019442 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8019482:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8019486:	2b00      	cmp	r3, #0
 8019488:	d1cf      	bne.n	801942a <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801948a:	b01b      	add	sp, #108	; 0x6c
 801948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019490:	462f      	mov	r7, r5
 8019492:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8019496:	42bb      	cmp	r3, r7
 8019498:	d90b      	bls.n	80194b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801949a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801949e:	3701      	adds	r7, #1
 80194a0:	4620      	mov	r0, r4
 80194a2:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80194a6:	b2bf      	uxth	r7, r7
 80194a8:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80194ac:	f7ff fc54 	bl	8018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80194b0:	e7ef      	b.n	8019492 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80194b2:	4a9e      	ldr	r2, [pc, #632]	; (801972c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80194b4:	6813      	ldr	r3, [r2, #0]
 80194b6:	4690      	mov	r8, r2
 80194b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80194bc:	2b01      	cmp	r3, #1
 80194be:	f040 80e4 	bne.w	801968a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80194c2:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80194c6:	4629      	mov	r1, r5
 80194c8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80194cc:	2500      	movs	r5, #0
 80194ce:	33ae      	adds	r3, #174	; 0xae
 80194d0:	428f      	cmp	r7, r1
 80194d2:	f103 0308 	add.w	r3, r3, #8
 80194d6:	dd0a      	ble.n	80194ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80194d8:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80194dc:	3101      	adds	r1, #1
 80194de:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80194e2:	4402      	add	r2, r0
 80194e4:	b212      	sxth	r2, r2
 80194e6:	4295      	cmp	r5, r2
 80194e8:	bfb8      	it	lt
 80194ea:	4615      	movlt	r5, r2
 80194ec:	e7f0      	b.n	80194d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80194ee:	4b90      	ldr	r3, [pc, #576]	; (8019730 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80194f0:	f8df b238 	ldr.w	fp, [pc, #568]	; 801972c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80194f4:	881b      	ldrh	r3, [r3, #0]
 80194f6:	46d8      	mov	r8, fp
 80194f8:	2b0f      	cmp	r3, #15
 80194fa:	bf8c      	ite	hi
 80194fc:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8019500:	f04f 0a01 	movls.w	sl, #1
 8019504:	2300      	movs	r3, #0
 8019506:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801950a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801950e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8019512:	4438      	add	r0, r7
 8019514:	b207      	sxth	r7, r0
 8019516:	f8db 0000 	ldr.w	r0, [fp]
 801951a:	42bd      	cmp	r5, r7
 801951c:	6803      	ldr	r3, [r0, #0]
 801951e:	f340 8084 	ble.w	801962a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8019522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019526:	4798      	blx	r3
 8019528:	eb07 030a 	add.w	r3, r7, sl
 801952c:	4298      	cmp	r0, r3
 801952e:	da07      	bge.n	8019540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8019530:	4285      	cmp	r5, r0
 8019532:	dd05      	ble.n	8019540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8019534:	4287      	cmp	r7, r0
 8019536:	dd6d      	ble.n	8019614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8019538:	2f00      	cmp	r7, #0
 801953a:	dd6b      	ble.n	8019614 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801953c:	4628      	mov	r0, r5
 801953e:	e004      	b.n	801954a <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8019540:	4287      	cmp	r7, r0
 8019542:	dcfb      	bgt.n	801953c <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8019544:	42a8      	cmp	r0, r5
 8019546:	bfa8      	it	ge
 8019548:	4628      	movge	r0, r5
 801954a:	4b7a      	ldr	r3, [pc, #488]	; (8019734 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801954c:	1bc0      	subs	r0, r0, r7
 801954e:	2200      	movs	r2, #0
 8019550:	f8ad 7016 	strh.w	r7, [sp, #22]
 8019554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019558:	f8ad 2014 	strh.w	r2, [sp, #20]
 801955c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019560:	9b02      	ldr	r3, [sp, #8]
 8019562:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019566:	881f      	ldrh	r7, [r3, #0]
 8019568:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801956c:	42bb      	cmp	r3, r7
 801956e:	d9cc      	bls.n	801950a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8019570:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8019574:	ab07      	add	r3, sp, #28
 8019576:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801957a:	6851      	ldr	r1, [r2, #4]
 801957c:	c303      	stmia	r3!, {r0, r1}
 801957e:	a905      	add	r1, sp, #20
 8019580:	a807      	add	r0, sp, #28
 8019582:	f7ff fa2c 	bl	80189de <_ZNK8touchgfx4Rect9intersectERKS0_>
 8019586:	2800      	cmp	r0, #0
 8019588:	d04c      	beq.n	8019624 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801958a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801958e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8019592:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8019596:	4686      	mov	lr, r0
 8019598:	4290      	cmp	r0, r2
 801959a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801959e:	4448      	add	r0, r9
 80195a0:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80195a4:	bfb8      	it	lt
 80195a6:	4696      	movlt	lr, r2
 80195a8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80195ac:	444a      	add	r2, r9
 80195ae:	b280      	uxth	r0, r0
 80195b0:	4299      	cmp	r1, r3
 80195b2:	468c      	mov	ip, r1
 80195b4:	b292      	uxth	r2, r2
 80195b6:	9303      	str	r3, [sp, #12]
 80195b8:	bfb8      	it	lt
 80195ba:	469c      	movlt	ip, r3
 80195bc:	b203      	sxth	r3, r0
 80195be:	fa0f f982 	sxth.w	r9, r2
 80195c2:	f8ad e01c 	strh.w	lr, [sp, #28]
 80195c6:	f8ad c01e 	strh.w	ip, [sp, #30]
 80195ca:	454b      	cmp	r3, r9
 80195cc:	bfb8      	it	lt
 80195ce:	4602      	movlt	r2, r0
 80195d0:	9b03      	ldr	r3, [sp, #12]
 80195d2:	eba2 020e 	sub.w	r2, r2, lr
 80195d6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80195da:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80195de:	4411      	add	r1, r2
 80195e0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80195e4:	4413      	add	r3, r2
 80195e6:	b289      	uxth	r1, r1
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	b208      	sxth	r0, r1
 80195ec:	b21a      	sxth	r2, r3
 80195ee:	4290      	cmp	r0, r2
 80195f0:	bfb8      	it	lt
 80195f2:	460b      	movlt	r3, r1
 80195f4:	eba3 030c 	sub.w	r3, r3, ip
 80195f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80195fc:	a807      	add	r0, sp, #28
 80195fe:	f7f9 f9f4 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019602:	b920      	cbnz	r0, 801960e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8019604:	6823      	ldr	r3, [r4, #0]
 8019606:	a907      	add	r1, sp, #28
 8019608:	4620      	mov	r0, r4
 801960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801960c:	4798      	blx	r3
 801960e:	3701      	adds	r7, #1
 8019610:	b2bf      	uxth	r7, r7
 8019612:	e7a9      	b.n	8019568 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8019614:	f8d8 0000 	ldr.w	r0, [r8]
 8019618:	2101      	movs	r1, #1
 801961a:	6803      	ldr	r3, [r0, #0]
 801961c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019620:	4798      	blx	r3
 8019622:	e772      	b.n	801950a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8019624:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8019628:	e7e8      	b.n	80195fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801962c:	4798      	blx	r3
 801962e:	4b42      	ldr	r3, [pc, #264]	; (8019738 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8019630:	781b      	ldrb	r3, [r3, #0]
 8019632:	2b00      	cmp	r3, #0
 8019634:	f43f af29 	beq.w	801948a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019638:	2300      	movs	r3, #0
 801963a:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801963e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8019642:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8019646:	9b02      	ldr	r3, [sp, #8]
 8019648:	881b      	ldrh	r3, [r3, #0]
 801964a:	429d      	cmp	r5, r3
 801964c:	f67f af1d 	bls.w	801948a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8019650:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8019654:	2907      	cmp	r1, #7
 8019656:	d815      	bhi.n	8019684 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8019658:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801965c:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8019660:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8019664:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8019668:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801966c:	1c4a      	adds	r2, r1, #1
 801966e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8019672:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8019676:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801967a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801967e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8019682:	80d7      	strh	r7, [r2, #6]
 8019684:	3301      	adds	r3, #1
 8019686:	b29b      	uxth	r3, r3
 8019688:	e7df      	b.n	801964a <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801968a:	2b02      	cmp	r3, #2
 801968c:	f040 8135 	bne.w	80198fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8019690:	4b2a      	ldr	r3, [pc, #168]	; (801973c <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8019692:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	2b01      	cmp	r3, #1
 801969a:	f000 809c 	beq.w	80197d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801969e:	9b02      	ldr	r3, [sp, #8]
 80196a0:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 80196a4:	f8b3 b000 	ldrh.w	fp, [r3]
 80196a8:	f10b 0b01 	add.w	fp, fp, #1
 80196ac:	fa1f fb8b 	uxth.w	fp, fp
 80196b0:	2a00      	cmp	r2, #0
 80196b2:	d0bc      	beq.n	801962e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80196b4:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 80196b8:	4659      	mov	r1, fp
 80196ba:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80196be:	f04f 0800 	mov.w	r8, #0
 80196c2:	441d      	add	r5, r3
 80196c4:	b22d      	sxth	r5, r5
 80196c6:	b28b      	uxth	r3, r1
 80196c8:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80196cc:	429a      	cmp	r2, r3
 80196ce:	f240 80c0 	bls.w	8019852 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80196d2:	4427      	add	r7, r4
 80196d4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80196d8:	4608      	mov	r0, r1
 80196da:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80196de:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80196e2:	4563      	cmp	r3, ip
 80196e4:	f340 80a2 	ble.w	801982c <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80196e8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80196ec:	4465      	add	r5, ip
 80196ee:	b22d      	sxth	r5, r5
 80196f0:	429d      	cmp	r5, r3
 80196f2:	bfa8      	it	ge
 80196f4:	461d      	movge	r5, r3
 80196f6:	3101      	adds	r1, #1
 80196f8:	4680      	mov	r8, r0
 80196fa:	e7e4      	b.n	80196c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80196fc:	d10b      	bne.n	8019716 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80196fe:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 8019702:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 8019706:	458c      	cmp	ip, r1
 8019708:	bfb4      	ite	lt
 801970a:	469c      	movlt	ip, r3
 801970c:	46bc      	movge	ip, r7
 801970e:	4572      	cmp	r2, lr
 8019710:	bfb8      	it	lt
 8019712:	4672      	movlt	r2, lr
 8019714:	e087      	b.n	8019826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8019716:	428a      	cmp	r2, r1
 8019718:	46bc      	mov	ip, r7
 801971a:	bfb8      	it	lt
 801971c:	460a      	movlt	r2, r1
 801971e:	e082      	b.n	8019826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8019720:	240100a0 	.word	0x240100a0
 8019724:	240100ac 	.word	0x240100ac
 8019728:	2400005c 	.word	0x2400005c
 801972c:	24010060 	.word	0x24010060
 8019730:	24010056 	.word	0x24010056
 8019734:	24010054 	.word	0x24010054
 8019738:	2401005e 	.word	0x2401005e
 801973c:	24010058 	.word	0x24010058
 8019740:	1961      	adds	r1, r4, r5
 8019742:	ab07      	add	r3, sp, #28
 8019744:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8019748:	6849      	ldr	r1, [r1, #4]
 801974a:	c303      	stmia	r3!, {r0, r1}
 801974c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8019750:	a807      	add	r0, sp, #28
 8019752:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019756:	2b13      	cmp	r3, #19
 8019758:	440b      	add	r3, r1
 801975a:	bfd8      	it	le
 801975c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8019760:	1a9b      	subs	r3, r3, r2
 8019762:	f8ad 201c 	strh.w	r2, [sp, #28]
 8019766:	f8ad 3020 	strh.w	r3, [sp, #32]
 801976a:	f7ff f897 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801976e:	a807      	add	r0, sp, #28
 8019770:	f7f9 f93b 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019774:	bb78      	cbnz	r0, 80197d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8019776:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801977a:	4425      	add	r5, r4
 801977c:	f8d8 0000 	ldr.w	r0, [r8]
 8019780:	f1bc 0f14 	cmp.w	ip, #20
 8019784:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019788:	f8d0 e000 	ldr.w	lr, [r0]
 801978c:	bfa8      	it	ge
 801978e:	f04f 0c14 	movge.w	ip, #20
 8019792:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8019796:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801979a:	fa1f fc8c 	uxth.w	ip, ip
 801979e:	f8cd c000 	str.w	ip, [sp]
 80197a2:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 80197a6:	47d0      	blx	sl
 80197a8:	4682      	mov	sl, r0
 80197aa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80197ae:	a807      	add	r0, sp, #28
 80197b0:	f7ff f85a 	bl	8018868 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80197b4:	6823      	ldr	r3, [r4, #0]
 80197b6:	4620      	mov	r0, r4
 80197b8:	a907      	add	r1, sp, #28
 80197ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80197bc:	4798      	blx	r3
 80197be:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 80197c2:	eba0 000a 	sub.w	r0, r0, sl
 80197c6:	b200      	sxth	r0, r0
 80197c8:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 80197cc:	b918      	cbnz	r0, 80197d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 80197ce:	b2b9      	uxth	r1, r7
 80197d0:	4648      	mov	r0, r9
 80197d2:	f7ff faad 	bl	8018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80197d6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80197da:	f1bb 0f00 	cmp.w	fp, #0
 80197de:	f43f af26 	beq.w	801962e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80197e2:	9b02      	ldr	r3, [sp, #8]
 80197e4:	2700      	movs	r7, #0
 80197e6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80197ea:	881b      	ldrh	r3, [r3, #0]
 80197ec:	3301      	adds	r3, #1
 80197ee:	b29b      	uxth	r3, r3
 80197f0:	b299      	uxth	r1, r3
 80197f2:	00fd      	lsls	r5, r7, #3
 80197f4:	458b      	cmp	fp, r1
 80197f6:	d9a3      	bls.n	8019740 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 80197f8:	4425      	add	r5, r4
 80197fa:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80197fe:	469c      	mov	ip, r3
 8019800:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 8019804:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8019808:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 801980c:	4408      	add	r0, r1
 801980e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 8019812:	4471      	add	r1, lr
 8019814:	b200      	sxth	r0, r0
 8019816:	b209      	sxth	r1, r1
 8019818:	4288      	cmp	r0, r1
 801981a:	f6bf af6f 	bge.w	80196fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801981e:	4586      	cmp	lr, r0
 8019820:	4672      	mov	r2, lr
 8019822:	bfb8      	it	lt
 8019824:	4602      	movlt	r2, r0
 8019826:	3301      	adds	r3, #1
 8019828:	4667      	mov	r7, ip
 801982a:	e7e1      	b.n	80197f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801982c:	d10c      	bne.n	8019848 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801982e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8019832:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8019836:	4287      	cmp	r7, r0
 8019838:	bfb4      	ite	lt
 801983a:	4608      	movlt	r0, r1
 801983c:	4640      	movge	r0, r8
 801983e:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8019842:	443b      	add	r3, r7
 8019844:	b21b      	sxth	r3, r3
 8019846:	e753      	b.n	80196f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8019848:	4565      	cmp	r5, ip
 801984a:	4640      	mov	r0, r8
 801984c:	bfa8      	it	ge
 801984e:	4665      	movge	r5, ip
 8019850:	e751      	b.n	80196f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8019852:	eb09 0007 	add.w	r0, r9, r7
 8019856:	4427      	add	r7, r4
 8019858:	9203      	str	r2, [sp, #12]
 801985a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801985e:	f1ba 0f13 	cmp.w	sl, #19
 8019862:	bfde      	ittt	le
 8019864:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 8019868:	4455      	addle	r5, sl
 801986a:	b22d      	sxthle	r5, r5
 801986c:	f7f9 f8bd 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019870:	9a03      	ldr	r2, [sp, #12]
 8019872:	2800      	cmp	r0, #0
 8019874:	f47f af1c 	bne.w	80196b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8019878:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801987c:	fa1f fa8a 	uxth.w	sl, sl
 8019880:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8019884:	1aad      	subs	r5, r5, r2
 8019886:	4829      	ldr	r0, [pc, #164]	; (801992c <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8019888:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 801988c:	2d14      	cmp	r5, #20
 801988e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8019892:	6800      	ldr	r0, [r0, #0]
 8019894:	bfa8      	it	ge
 8019896:	2514      	movge	r5, #20
 8019898:	f8ad 101c 	strh.w	r1, [sp, #28]
 801989c:	f8ad 201e 	strh.w	r2, [sp, #30]
 80198a0:	b289      	uxth	r1, r1
 80198a2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80198a6:	b2ad      	uxth	r5, r5
 80198a8:	f8d0 c000 	ldr.w	ip, [r0]
 80198ac:	b292      	uxth	r2, r2
 80198ae:	4555      	cmp	r5, sl
 80198b0:	bf94      	ite	ls
 80198b2:	9500      	strls	r5, [sp, #0]
 80198b4:	f8cd a000 	strhi.w	sl, [sp]
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 80198be:	47a8      	blx	r5
 80198c0:	6823      	ldr	r3, [r4, #0]
 80198c2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80198c6:	a907      	add	r1, sp, #28
 80198c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198ca:	4620      	mov	r0, r4
 80198cc:	4798      	blx	r3
 80198ce:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80198d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80198d6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80198da:	1a5b      	subs	r3, r3, r1
 80198dc:	440a      	add	r2, r1
 80198de:	b21b      	sxth	r3, r3
 80198e0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80198e4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	f47f aed8 	bne.w	801969e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80198ee:	fa1f f188 	uxth.w	r1, r8
 80198f2:	4648      	mov	r0, r9
 80198f4:	f7ff fa1c 	bl	8018d30 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80198f8:	e6d1      	b.n	801969e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 80198fa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80198fe:	42ab      	cmp	r3, r5
 8019900:	f67f ae95 	bls.w	801962e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8019904:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8019908:	ab07      	add	r3, sp, #28
 801990a:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801990e:	6851      	ldr	r1, [r2, #4]
 8019910:	c303      	stmia	r3!, {r0, r1}
 8019912:	a807      	add	r0, sp, #28
 8019914:	f7f9 f869 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 8019918:	b920      	cbnz	r0, 8019924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801991a:	6823      	ldr	r3, [r4, #0]
 801991c:	a907      	add	r1, sp, #28
 801991e:	4620      	mov	r0, r4
 8019920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019922:	4798      	blx	r3
 8019924:	3501      	adds	r5, #1
 8019926:	b2ad      	uxth	r5, r5
 8019928:	e7e7      	b.n	80198fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801992a:	bf00      	nop
 801992c:	24010060 	.word	0x24010060

08019930 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8019930:	4b03      	ldr	r3, [pc, #12]	; (8019940 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8019932:	2200      	movs	r2, #0
 8019934:	801a      	strh	r2, [r3, #0]
 8019936:	805a      	strh	r2, [r3, #2]
 8019938:	809a      	strh	r2, [r3, #4]
 801993a:	80da      	strh	r2, [r3, #6]
 801993c:	4770      	bx	lr
 801993e:	bf00      	nop
 8019940:	240100ac 	.word	0x240100ac

08019944 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8019944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019948:	b09d      	sub	sp, #116	; 0x74
 801994a:	4606      	mov	r6, r0
 801994c:	4614      	mov	r4, r2
 801994e:	468a      	mov	sl, r1
 8019950:	a803      	add	r0, sp, #12
 8019952:	461d      	mov	r5, r3
 8019954:	f000 fe44 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8019958:	6833      	ldr	r3, [r6, #0]
 801995a:	4630      	mov	r0, r6
 801995c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8019960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019962:	4798      	blx	r3
 8019964:	6833      	ldr	r3, [r6, #0]
 8019966:	4607      	mov	r7, r0
 8019968:	4630      	mov	r0, r6
 801996a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801996c:	4798      	blx	r3
 801996e:	462a      	mov	r2, r5
 8019970:	2500      	movs	r5, #0
 8019972:	4621      	mov	r1, r4
 8019974:	9000      	str	r0, [sp, #0]
 8019976:	463b      	mov	r3, r7
 8019978:	462c      	mov	r4, r5
 801997a:	46a9      	mov	r9, r5
 801997c:	46a8      	mov	r8, r5
 801997e:	a803      	add	r0, sp, #12
 8019980:	f000 fe89 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019984:	2300      	movs	r3, #0
 8019986:	9302      	str	r3, [sp, #8]
 8019988:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801998c:	429c      	cmp	r4, r3
 801998e:	d002      	beq.n	8019996 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8019990:	455c      	cmp	r4, fp
 8019992:	bf18      	it	ne
 8019994:	4625      	movne	r5, r4
 8019996:	ab02      	add	r3, sp, #8
 8019998:	4632      	mov	r2, r6
 801999a:	4651      	mov	r1, sl
 801999c:	a803      	add	r0, sp, #12
 801999e:	f001 f97f 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80199a2:	4604      	mov	r4, r0
 80199a4:	b108      	cbz	r0, 80199aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80199a6:	280a      	cmp	r0, #10
 80199a8:	d10a      	bne.n	80199c0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80199aa:	45c1      	cmp	r9, r8
 80199ac:	bf38      	it	cc
 80199ae:	46c1      	movcc	r9, r8
 80199b0:	f04f 0800 	mov.w	r8, #0
 80199b4:	2c00      	cmp	r4, #0
 80199b6:	d1e5      	bne.n	8019984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199b8:	4648      	mov	r0, r9
 80199ba:	b01d      	add	sp, #116	; 0x74
 80199bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c0:	9a02      	ldr	r2, [sp, #8]
 80199c2:	2a00      	cmp	r2, #0
 80199c4:	d0de      	beq.n	8019984 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80199c6:	7b57      	ldrb	r7, [r2, #13]
 80199c8:	4629      	mov	r1, r5
 80199ca:	6833      	ldr	r3, [r6, #0]
 80199cc:	007f      	lsls	r7, r7, #1
 80199ce:	8894      	ldrh	r4, [r2, #4]
 80199d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199d2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80199d6:	7a97      	ldrb	r7, [r2, #10]
 80199d8:	4307      	orrs	r7, r0
 80199da:	4630      	mov	r0, r6
 80199dc:	4798      	blx	r3
 80199de:	4438      	add	r0, r7
 80199e0:	4480      	add	r8, r0
 80199e2:	fa1f f888 	uxth.w	r8, r8
 80199e6:	e7e5      	b.n	80199b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080199e8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80199e8:	b508      	push	{r3, lr}
 80199ea:	6803      	ldr	r3, [r0, #0]
 80199ec:	68db      	ldr	r3, [r3, #12]
 80199ee:	4798      	blx	r3
 80199f0:	b128      	cbz	r0, 80199fe <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80199f2:	7b43      	ldrb	r3, [r0, #13]
 80199f4:	7a80      	ldrb	r0, [r0, #10]
 80199f6:	005b      	lsls	r3, r3, #1
 80199f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199fc:	4318      	orrs	r0, r3
 80199fe:	bd08      	pop	{r3, pc}

08019a00 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8019a00:	b40e      	push	{r1, r2, r3}
 8019a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a04:	b09e      	sub	sp, #120	; 0x78
 8019a06:	4605      	mov	r5, r0
 8019a08:	ab23      	add	r3, sp, #140	; 0x8c
 8019a0a:	a805      	add	r0, sp, #20
 8019a0c:	f853 4b04 	ldr.w	r4, [r3], #4
 8019a10:	9303      	str	r3, [sp, #12]
 8019a12:	f000 fde5 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8019a16:	682b      	ldr	r3, [r5, #0]
 8019a18:	4628      	mov	r0, r5
 8019a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a1c:	4798      	blx	r3
 8019a1e:	682b      	ldr	r3, [r5, #0]
 8019a20:	4606      	mov	r6, r0
 8019a22:	4628      	mov	r0, r5
 8019a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a26:	4798      	blx	r3
 8019a28:	4633      	mov	r3, r6
 8019a2a:	4621      	mov	r1, r4
 8019a2c:	ae1e      	add	r6, sp, #120	; 0x78
 8019a2e:	2400      	movs	r4, #0
 8019a30:	9000      	str	r0, [sp, #0]
 8019a32:	9a03      	ldr	r2, [sp, #12]
 8019a34:	a805      	add	r0, sp, #20
 8019a36:	f000 fe2e 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019a3a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8019a3e:	462a      	mov	r2, r5
 8019a40:	4633      	mov	r3, r6
 8019a42:	4621      	mov	r1, r4
 8019a44:	a805      	add	r0, sp, #20
 8019a46:	f001 f92b 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a4a:	b300      	cbz	r0, 8019a8e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8019a4c:	280a      	cmp	r0, #10
 8019a4e:	d01a      	beq.n	8019a86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a50:	9f04      	ldr	r7, [sp, #16]
 8019a52:	b1c7      	cbz	r7, 8019a86 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8019a54:	7b78      	ldrb	r0, [r7, #13]
 8019a56:	7a3b      	ldrb	r3, [r7, #8]
 8019a58:	00c1      	lsls	r1, r0, #3
 8019a5a:	88ea      	ldrh	r2, [r5, #6]
 8019a5c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8019a60:	4319      	orrs	r1, r3
 8019a62:	0643      	lsls	r3, r0, #25
 8019a64:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8019a68:	bf48      	it	mi
 8019a6a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8019a6e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019a72:	bf48      	it	mi
 8019a74:	b219      	sxthmi	r1, r3
 8019a76:	79fb      	ldrb	r3, [r7, #7]
 8019a78:	4303      	orrs	r3, r0
 8019a7a:	4413      	add	r3, r2
 8019a7c:	1a5b      	subs	r3, r3, r1
 8019a7e:	b21b      	sxth	r3, r3
 8019a80:	429c      	cmp	r4, r3
 8019a82:	bfb8      	it	lt
 8019a84:	461c      	movlt	r4, r3
 8019a86:	4633      	mov	r3, r6
 8019a88:	462a      	mov	r2, r5
 8019a8a:	2100      	movs	r1, #0
 8019a8c:	e7da      	b.n	8019a44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8019a8e:	b2a0      	uxth	r0, r4
 8019a90:	b01e      	add	sp, #120	; 0x78
 8019a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019a96:	b003      	add	sp, #12
 8019a98:	4770      	bx	lr

08019a9a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8019a9a:	7a43      	ldrb	r3, [r0, #9]
 8019a9c:	8880      	ldrh	r0, [r0, #4]
 8019a9e:	4418      	add	r0, r3
 8019aa0:	b280      	uxth	r0, r0
 8019aa2:	4770      	bx	lr

08019aa4 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8019aa4:	6803      	ldr	r3, [r0, #0]
 8019aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019aa8:	4718      	bx	r3

08019aaa <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8019aaa:	b40e      	push	{r1, r2, r3}
 8019aac:	b570      	push	{r4, r5, r6, lr}
 8019aae:	b09d      	sub	sp, #116	; 0x74
 8019ab0:	4604      	mov	r4, r0
 8019ab2:	ab21      	add	r3, sp, #132	; 0x84
 8019ab4:	a803      	add	r0, sp, #12
 8019ab6:	f853 5b04 	ldr.w	r5, [r3], #4
 8019aba:	9302      	str	r3, [sp, #8]
 8019abc:	f000 fd90 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8019ac0:	6823      	ldr	r3, [r4, #0]
 8019ac2:	4620      	mov	r0, r4
 8019ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019ac6:	4798      	blx	r3
 8019ac8:	6823      	ldr	r3, [r4, #0]
 8019aca:	4606      	mov	r6, r0
 8019acc:	4620      	mov	r0, r4
 8019ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ad0:	2401      	movs	r4, #1
 8019ad2:	4798      	blx	r3
 8019ad4:	4633      	mov	r3, r6
 8019ad6:	9000      	str	r0, [sp, #0]
 8019ad8:	4629      	mov	r1, r5
 8019ada:	9a02      	ldr	r2, [sp, #8]
 8019adc:	a803      	add	r0, sp, #12
 8019ade:	f000 fdda 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019ae2:	a803      	add	r0, sp, #12
 8019ae4:	f001 f9a8 	bl	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019ae8:	b2a3      	uxth	r3, r4
 8019aea:	b138      	cbz	r0, 8019afc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8019aec:	280a      	cmp	r0, #10
 8019aee:	a803      	add	r0, sp, #12
 8019af0:	bf04      	itt	eq
 8019af2:	3301      	addeq	r3, #1
 8019af4:	b21c      	sxtheq	r4, r3
 8019af6:	f001 f99f 	bl	801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8019afa:	e7f5      	b.n	8019ae8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8019afc:	4618      	mov	r0, r3
 8019afe:	b01d      	add	sp, #116	; 0x74
 8019b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b04:	b003      	add	sp, #12
 8019b06:	4770      	bx	lr

08019b08 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8019b08:	b40e      	push	{r1, r2, r3}
 8019b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b0c:	b09e      	sub	sp, #120	; 0x78
 8019b0e:	4604      	mov	r4, r0
 8019b10:	ab23      	add	r3, sp, #140	; 0x8c
 8019b12:	a805      	add	r0, sp, #20
 8019b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8019b18:	9303      	str	r3, [sp, #12]
 8019b1a:	f000 fd61 	bl	801a5e0 <_ZN8touchgfx12TextProviderC1Ev>
 8019b1e:	6823      	ldr	r3, [r4, #0]
 8019b20:	4620      	mov	r0, r4
 8019b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b24:	4798      	blx	r3
 8019b26:	6823      	ldr	r3, [r4, #0]
 8019b28:	4606      	mov	r6, r0
 8019b2a:	4620      	mov	r0, r4
 8019b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b2e:	4798      	blx	r3
 8019b30:	4633      	mov	r3, r6
 8019b32:	4629      	mov	r1, r5
 8019b34:	9000      	str	r0, [sp, #0]
 8019b36:	9a03      	ldr	r2, [sp, #12]
 8019b38:	a805      	add	r0, sp, #20
 8019b3a:	f000 fdac 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019b3e:	ad1e      	add	r5, sp, #120	; 0x78
 8019b40:	2100      	movs	r1, #0
 8019b42:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8019b46:	4622      	mov	r2, r4
 8019b48:	a805      	add	r0, sp, #20
 8019b4a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8019b4e:	462b      	mov	r3, r5
 8019b50:	f001 f8a6 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b54:	b1d8      	cbz	r0, 8019b8e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8019b56:	280a      	cmp	r0, #10
 8019b58:	d012      	beq.n	8019b80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b5a:	9804      	ldr	r0, [sp, #16]
 8019b5c:	b180      	cbz	r0, 8019b80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8019b5e:	7b47      	ldrb	r7, [r0, #13]
 8019b60:	88e2      	ldrh	r2, [r4, #6]
 8019b62:	00fb      	lsls	r3, r7, #3
 8019b64:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8019b68:	7a03      	ldrb	r3, [r0, #8]
 8019b6a:	430b      	orrs	r3, r1
 8019b6c:	0679      	lsls	r1, r7, #25
 8019b6e:	bf44      	itt	mi
 8019b70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8019b74:	b21b      	sxthmi	r3, r3
 8019b76:	1ad3      	subs	r3, r2, r3
 8019b78:	b21b      	sxth	r3, r3
 8019b7a:	429e      	cmp	r6, r3
 8019b7c:	bfa8      	it	ge
 8019b7e:	461e      	movge	r6, r3
 8019b80:	462b      	mov	r3, r5
 8019b82:	4622      	mov	r2, r4
 8019b84:	2100      	movs	r1, #0
 8019b86:	a805      	add	r0, sp, #20
 8019b88:	f001 f88a 	bl	801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019b8c:	e7e2      	b.n	8019b54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8019b8e:	4630      	mov	r0, r6
 8019b90:	b01e      	add	sp, #120	; 0x78
 8019b92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019b96:	b003      	add	sp, #12
 8019b98:	4770      	bx	lr

08019b9a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8019b9a:	b513      	push	{r0, r1, r4, lr}
 8019b9c:	6803      	ldr	r3, [r0, #0]
 8019b9e:	2400      	movs	r4, #0
 8019ba0:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8019ba4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ba8:	f8ad 1004 	strh.w	r1, [sp, #4]
 8019bac:	4669      	mov	r1, sp
 8019bae:	691b      	ldr	r3, [r3, #16]
 8019bb0:	9400      	str	r4, [sp, #0]
 8019bb2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8019bb6:	4798      	blx	r3
 8019bb8:	b002      	add	sp, #8
 8019bba:	bd10      	pop	{r4, pc}

08019bbc <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8019bbc:	b538      	push	{r3, r4, r5, lr}
 8019bbe:	680b      	ldr	r3, [r1, #0]
 8019bc0:	460c      	mov	r4, r1
 8019bc2:	4605      	mov	r5, r0
 8019bc4:	68db      	ldr	r3, [r3, #12]
 8019bc6:	4798      	blx	r3
 8019bc8:	6823      	ldr	r3, [r4, #0]
 8019bca:	4620      	mov	r0, r4
 8019bcc:	4629      	mov	r1, r5
 8019bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bd0:	4798      	blx	r3
 8019bd2:	4628      	mov	r0, r5
 8019bd4:	bd38      	pop	{r3, r4, r5, pc}

08019bd6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8019bd6:	b410      	push	{r4}
 8019bd8:	880a      	ldrh	r2, [r1, #0]
 8019bda:	8884      	ldrh	r4, [r0, #4]
 8019bdc:	4422      	add	r2, r4
 8019bde:	800a      	strh	r2, [r1, #0]
 8019be0:	884a      	ldrh	r2, [r1, #2]
 8019be2:	88c4      	ldrh	r4, [r0, #6]
 8019be4:	4422      	add	r2, r4
 8019be6:	804a      	strh	r2, [r1, #2]
 8019be8:	6940      	ldr	r0, [r0, #20]
 8019bea:	b120      	cbz	r0, 8019bf6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8019bec:	6803      	ldr	r3, [r0, #0]
 8019bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bf4:	4718      	bx	r3
 8019bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019bfa:	4770      	bx	lr

08019bfc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8019bfc:	b570      	push	{r4, r5, r6, lr}
 8019bfe:	8882      	ldrh	r2, [r0, #4]
 8019c00:	460c      	mov	r4, r1
 8019c02:	880b      	ldrh	r3, [r1, #0]
 8019c04:	4605      	mov	r5, r0
 8019c06:	4413      	add	r3, r2
 8019c08:	800b      	strh	r3, [r1, #0]
 8019c0a:	884b      	ldrh	r3, [r1, #2]
 8019c0c:	88c2      	ldrh	r2, [r0, #6]
 8019c0e:	4413      	add	r3, r2
 8019c10:	804b      	strh	r3, [r1, #2]
 8019c12:	1d01      	adds	r1, r0, #4
 8019c14:	4620      	mov	r0, r4
 8019c16:	f7f8 fea5 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8019c1a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	dd0b      	ble.n	8019c3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	dd07      	ble.n	8019c3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c2a:	6968      	ldr	r0, [r5, #20]
 8019c2c:	b128      	cbz	r0, 8019c3a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8019c2e:	6803      	ldr	r3, [r0, #0]
 8019c30:	4621      	mov	r1, r4
 8019c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c38:	4718      	bx	r3
 8019c3a:	bd70      	pop	{r4, r5, r6, pc}

08019c3c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8019c3c:	b570      	push	{r4, r5, r6, lr}
 8019c3e:	8882      	ldrh	r2, [r0, #4]
 8019c40:	460c      	mov	r4, r1
 8019c42:	880b      	ldrh	r3, [r1, #0]
 8019c44:	4605      	mov	r5, r0
 8019c46:	4413      	add	r3, r2
 8019c48:	800b      	strh	r3, [r1, #0]
 8019c4a:	884b      	ldrh	r3, [r1, #2]
 8019c4c:	88c2      	ldrh	r2, [r0, #6]
 8019c4e:	4413      	add	r3, r2
 8019c50:	804b      	strh	r3, [r1, #2]
 8019c52:	1d01      	adds	r1, r0, #4
 8019c54:	4620      	mov	r0, r4
 8019c56:	f7f8 fe85 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 8019c5a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	dd18      	ble.n	8019c94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019c62:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	dd14      	ble.n	8019c94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019c6a:	6968      	ldr	r0, [r5, #20]
 8019c6c:	b128      	cbz	r0, 8019c7a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8019c6e:	6803      	ldr	r3, [r0, #0]
 8019c70:	4621      	mov	r1, r4
 8019c72:	691b      	ldr	r3, [r3, #16]
 8019c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c78:	4718      	bx	r3
 8019c7a:	4b07      	ldr	r3, [pc, #28]	; (8019c98 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	3304      	adds	r3, #4
 8019c80:	429d      	cmp	r5, r3
 8019c82:	d107      	bne.n	8019c94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8019c84:	f7fe ff44 	bl	8018b10 <_ZN8touchgfx11Application11getInstanceEv>
 8019c88:	6821      	ldr	r1, [r4, #0]
 8019c8a:	6862      	ldr	r2, [r4, #4]
 8019c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c90:	f7ff b862 	b.w	8018d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8019c94:	bd70      	pop	{r4, r5, r6, pc}
 8019c96:	bf00      	nop
 8019c98:	240100a4 	.word	0x240100a4

08019c9c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8019c9c:	b570      	push	{r4, r5, r6, lr}
 8019c9e:	4604      	mov	r4, r0
 8019ca0:	4616      	mov	r6, r2
 8019ca2:	460d      	mov	r5, r1
 8019ca4:	b901      	cbnz	r1, 8019ca8 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8019ca6:	b192      	cbz	r2, 8019cce <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8019ca8:	6823      	ldr	r3, [r4, #0]
 8019caa:	4620      	mov	r0, r4
 8019cac:	699b      	ldr	r3, [r3, #24]
 8019cae:	4798      	blx	r3
 8019cb0:	88e2      	ldrh	r2, [r4, #6]
 8019cb2:	88a1      	ldrh	r1, [r4, #4]
 8019cb4:	4620      	mov	r0, r4
 8019cb6:	4432      	add	r2, r6
 8019cb8:	4429      	add	r1, r5
 8019cba:	b212      	sxth	r2, r2
 8019cbc:	b209      	sxth	r1, r1
 8019cbe:	f7e9 fc08 	bl	80034d2 <_ZN8touchgfx8Drawable5setXYEss>
 8019cc2:	6823      	ldr	r3, [r4, #0]
 8019cc4:	4620      	mov	r0, r4
 8019cc6:	699b      	ldr	r3, [r3, #24]
 8019cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019ccc:	4718      	bx	r3
 8019cce:	bd70      	pop	{r4, r5, r6, pc}

08019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	4604      	mov	r4, r0
 8019cd6:	4608      	mov	r0, r1
 8019cd8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8019cdc:	8023      	strh	r3, [r4, #0]
 8019cde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8019ce2:	8063      	strh	r3, [r4, #2]
 8019ce4:	6803      	ldr	r3, [r0, #0]
 8019ce6:	80a1      	strh	r1, [r4, #4]
 8019ce8:	4621      	mov	r1, r4
 8019cea:	80e2      	strh	r2, [r4, #6]
 8019cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019cee:	4798      	blx	r3
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	bd10      	pop	{r4, pc}

08019cf4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8019cf4:	b530      	push	{r4, r5, lr}
 8019cf6:	8083      	strh	r3, [r0, #4]
 8019cf8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019cfc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8019d00:	80c3      	strh	r3, [r0, #6]
 8019d02:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8019d06:	6141      	str	r1, [r0, #20]
 8019d08:	7203      	strb	r3, [r0, #8]
 8019d0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019d0e:	8302      	strh	r2, [r0, #24]
 8019d10:	7243      	strb	r3, [r0, #9]
 8019d12:	7a83      	ldrb	r3, [r0, #10]
 8019d14:	f365 0306 	bfi	r3, r5, #0, #7
 8019d18:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8019d1c:	f365 13c7 	bfi	r3, r5, #7, #1
 8019d20:	7283      	strb	r3, [r0, #10]
 8019d22:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8019d26:	72c3      	strb	r3, [r0, #11]
 8019d28:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8019d2c:	7303      	strb	r3, [r0, #12]
 8019d2e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019d32:	81c3      	strh	r3, [r0, #14]
 8019d34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8019d38:	8203      	strh	r3, [r0, #16]
 8019d3a:	4b01      	ldr	r3, [pc, #4]	; (8019d40 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8019d3c:	6003      	str	r3, [r0, #0]
 8019d3e:	bd30      	pop	{r4, r5, pc}
 8019d40:	080280d4 	.word	0x080280d4

08019d44 <_ZNK8touchgfx9ConstFont4findEt>:
 8019d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d46:	6944      	ldr	r4, [r0, #20]
 8019d48:	b3bc      	cbz	r4, 8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d4a:	88a3      	ldrh	r3, [r4, #4]
 8019d4c:	8b02      	ldrh	r2, [r0, #24]
 8019d4e:	1acb      	subs	r3, r1, r3
 8019d50:	f102 32ff 	add.w	r2, r2, #4294967295
 8019d54:	d431      	bmi.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d56:	4293      	cmp	r3, r2
 8019d58:	dd0c      	ble.n	8019d74 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8019d5a:	230e      	movs	r3, #14
 8019d5c:	fb03 4302 	mla	r3, r3, r2, r4
 8019d60:	889b      	ldrh	r3, [r3, #4]
 8019d62:	1a5b      	subs	r3, r3, r1
 8019d64:	1ad3      	subs	r3, r2, r3
 8019d66:	429a      	cmp	r2, r3
 8019d68:	db27      	blt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	bfbc      	itt	lt
 8019d6e:	2302      	movlt	r3, #2
 8019d70:	fb92 f3f3 	sdivlt	r3, r2, r3
 8019d74:	2500      	movs	r5, #0
 8019d76:	260e      	movs	r6, #14
 8019d78:	4295      	cmp	r5, r2
 8019d7a:	dc1e      	bgt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d7c:	fb06 4003 	mla	r0, r6, r3, r4
 8019d80:	8887      	ldrh	r7, [r0, #4]
 8019d82:	42b9      	cmp	r1, r7
 8019d84:	d01a      	beq.n	8019dbc <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8019d86:	d20d      	bcs.n	8019da4 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8019d88:	1e5a      	subs	r2, r3, #1
 8019d8a:	4295      	cmp	r5, r2
 8019d8c:	dc15      	bgt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d8e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8019d92:	1a5b      	subs	r3, r3, r1
 8019d94:	1ad3      	subs	r3, r2, r3
 8019d96:	429a      	cmp	r2, r3
 8019d98:	db0f      	blt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019d9a:	429d      	cmp	r5, r3
 8019d9c:	ddec      	ble.n	8019d78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019d9e:	1953      	adds	r3, r2, r5
 8019da0:	105b      	asrs	r3, r3, #1
 8019da2:	e7e9      	b.n	8019d78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019da4:	1c5d      	adds	r5, r3, #1
 8019da6:	42aa      	cmp	r2, r5
 8019da8:	db07      	blt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019daa:	8a43      	ldrh	r3, [r0, #18]
 8019dac:	1acb      	subs	r3, r1, r3
 8019dae:	442b      	add	r3, r5
 8019db0:	429d      	cmp	r5, r3
 8019db2:	dc02      	bgt.n	8019dba <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8019db4:	429a      	cmp	r2, r3
 8019db6:	dadf      	bge.n	8019d78 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8019db8:	e7f1      	b.n	8019d9e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8019dba:	2000      	movs	r0, #0
 8019dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019dbe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8019dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	4617      	mov	r7, r2
 8019dc4:	461e      	mov	r6, r3
 8019dc6:	b911      	cbnz	r1, 8019dce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8019dc8:	2500      	movs	r5, #0
 8019dca:	4628      	mov	r0, r5
 8019dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019dce:	290a      	cmp	r1, #10
 8019dd0:	d0fa      	beq.n	8019dc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019dd2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8019dd6:	4291      	cmp	r1, r2
 8019dd8:	d0f6      	beq.n	8019dc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019dda:	f242 020b 	movw	r2, #8203	; 0x200b
 8019dde:	4291      	cmp	r1, r2
 8019de0:	d0f2      	beq.n	8019dc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019de2:	f7ff ffaf 	bl	8019d44 <_ZNK8touchgfx9ConstFont4findEt>
 8019de6:	4605      	mov	r5, r0
 8019de8:	b950      	cbnz	r0, 8019e00 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8019dea:	6823      	ldr	r3, [r4, #0]
 8019dec:	4620      	mov	r0, r4
 8019dee:	691b      	ldr	r3, [r3, #16]
 8019df0:	4798      	blx	r3
 8019df2:	4601      	mov	r1, r0
 8019df4:	4620      	mov	r0, r4
 8019df6:	f7ff ffa5 	bl	8019d44 <_ZNK8touchgfx9ConstFont4findEt>
 8019dfa:	4605      	mov	r5, r0
 8019dfc:	2800      	cmp	r0, #0
 8019dfe:	d0e3      	beq.n	8019dc8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8019e00:	6823      	ldr	r3, [r4, #0]
 8019e02:	4629      	mov	r1, r5
 8019e04:	4620      	mov	r0, r4
 8019e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e08:	4798      	blx	r3
 8019e0a:	6038      	str	r0, [r7, #0]
 8019e0c:	6823      	ldr	r3, [r4, #0]
 8019e0e:	4620      	mov	r0, r4
 8019e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e12:	4798      	blx	r3
 8019e14:	7030      	strb	r0, [r6, #0]
 8019e16:	e7d8      	b.n	8019dca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08019e18 <_ZN8touchgfx4clzuEm>:
 8019e18:	4603      	mov	r3, r0
 8019e1a:	b1c8      	cbz	r0, 8019e50 <_ZN8touchgfx4clzuEm+0x38>
 8019e1c:	0c02      	lsrs	r2, r0, #16
 8019e1e:	0412      	lsls	r2, r2, #16
 8019e20:	b9a2      	cbnz	r2, 8019e4c <_ZN8touchgfx4clzuEm+0x34>
 8019e22:	0403      	lsls	r3, r0, #16
 8019e24:	2010      	movs	r0, #16
 8019e26:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019e2a:	bf04      	itt	eq
 8019e2c:	021b      	lsleq	r3, r3, #8
 8019e2e:	3008      	addeq	r0, #8
 8019e30:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019e34:	bf04      	itt	eq
 8019e36:	011b      	lsleq	r3, r3, #4
 8019e38:	3004      	addeq	r0, #4
 8019e3a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019e3e:	bf04      	itt	eq
 8019e40:	009b      	lsleq	r3, r3, #2
 8019e42:	3002      	addeq	r0, #2
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	db04      	blt.n	8019e52 <_ZN8touchgfx4clzuEm+0x3a>
 8019e48:	3001      	adds	r0, #1
 8019e4a:	4770      	bx	lr
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	e7ea      	b.n	8019e26 <_ZN8touchgfx4clzuEm+0xe>
 8019e50:	2020      	movs	r0, #32
 8019e52:	4770      	bx	lr

08019e54 <_ZN8touchgfx7muldivuEmmmRm>:
 8019e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e58:	4680      	mov	r8, r0
 8019e5a:	460f      	mov	r7, r1
 8019e5c:	4615      	mov	r5, r2
 8019e5e:	461e      	mov	r6, r3
 8019e60:	f7ff ffda 	bl	8019e18 <_ZN8touchgfx4clzuEm>
 8019e64:	b998      	cbnz	r0, 8019e8e <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8019e66:	4608      	mov	r0, r1
 8019e68:	f7ff ffd6 	bl	8019e18 <_ZN8touchgfx4clzuEm>
 8019e6c:	2800      	cmp	r0, #0
 8019e6e:	dd08      	ble.n	8019e82 <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 8019e70:	4633      	mov	r3, r6
 8019e72:	462a      	mov	r2, r5
 8019e74:	4641      	mov	r1, r8
 8019e76:	4638      	mov	r0, r7
 8019e78:	f7ff ffec 	bl	8019e54 <_ZN8touchgfx7muldivuEmmmRm>
 8019e7c:	b003      	add	sp, #12
 8019e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e82:	f04f 33ff 	mov.w	r3, #4294967295
 8019e86:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019e8a:	6033      	str	r3, [r6, #0]
 8019e8c:	e7f6      	b.n	8019e7c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019e8e:	fa31 f900 	lsrs.w	r9, r1, r0
 8019e92:	fb01 f308 	mul.w	r3, r1, r8
 8019e96:	d105      	bne.n	8019ea4 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8019e98:	fbb3 f0f5 	udiv	r0, r3, r5
 8019e9c:	fb05 3510 	mls	r5, r5, r0, r3
 8019ea0:	6035      	str	r5, [r6, #0]
 8019ea2:	e7eb      	b.n	8019e7c <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8019ea4:	2301      	movs	r3, #1
 8019ea6:	fa08 fb00 	lsl.w	fp, r8, r0
 8019eaa:	462a      	mov	r2, r5
 8019eac:	4641      	mov	r1, r8
 8019eae:	fa03 f000 	lsl.w	r0, r3, r0
 8019eb2:	4633      	mov	r3, r6
 8019eb4:	fbbb faf5 	udiv	sl, fp, r5
 8019eb8:	3801      	subs	r0, #1
 8019eba:	fb09 f40a 	mul.w	r4, r9, sl
 8019ebe:	4038      	ands	r0, r7
 8019ec0:	f7ff ffc8 	bl	8019e54 <_ZN8touchgfx7muldivuEmmmRm>
 8019ec4:	462a      	mov	r2, r5
 8019ec6:	4607      	mov	r7, r0
 8019ec8:	ab01      	add	r3, sp, #4
 8019eca:	fb05 b11a 	mls	r1, r5, sl, fp
 8019ece:	4648      	mov	r0, r9
 8019ed0:	f7ff ffc0 	bl	8019e54 <_ZN8touchgfx7muldivuEmmmRm>
 8019ed4:	9b01      	ldr	r3, [sp, #4]
 8019ed6:	6832      	ldr	r2, [r6, #0]
 8019ed8:	441a      	add	r2, r3
 8019eda:	fbb2 f3f5 	udiv	r3, r2, r5
 8019ede:	441c      	add	r4, r3
 8019ee0:	fb05 2513 	mls	r5, r5, r3, r2
 8019ee4:	443c      	add	r4, r7
 8019ee6:	4420      	add	r0, r4
 8019ee8:	e7da      	b.n	8019ea0 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

08019eea <_ZN8touchgfx6muldivElllRl>:
 8019eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019eec:	2800      	cmp	r0, #0
 8019eee:	461e      	mov	r6, r3
 8019ef0:	bfba      	itte	lt
 8019ef2:	4240      	neglt	r0, r0
 8019ef4:	f04f 34ff 	movlt.w	r4, #4294967295
 8019ef8:	2401      	movge	r4, #1
 8019efa:	2900      	cmp	r1, #0
 8019efc:	bfbc      	itt	lt
 8019efe:	4249      	neglt	r1, r1
 8019f00:	4264      	neglt	r4, r4
 8019f02:	2a00      	cmp	r2, #0
 8019f04:	bfb6      	itet	lt
 8019f06:	4265      	neglt	r5, r4
 8019f08:	4625      	movge	r5, r4
 8019f0a:	4252      	neglt	r2, r2
 8019f0c:	4288      	cmp	r0, r1
 8019f0e:	bfc2      	ittt	gt
 8019f10:	4603      	movgt	r3, r0
 8019f12:	4608      	movgt	r0, r1
 8019f14:	4619      	movgt	r1, r3
 8019f16:	ab01      	add	r3, sp, #4
 8019f18:	f7ff ff9c 	bl	8019e54 <_ZN8touchgfx7muldivuEmmmRm>
 8019f1c:	9b01      	ldr	r3, [sp, #4]
 8019f1e:	4368      	muls	r0, r5
 8019f20:	435c      	muls	r4, r3
 8019f22:	6034      	str	r4, [r6, #0]
 8019f24:	b002      	add	sp, #8
 8019f26:	bd70      	pop	{r4, r5, r6, pc}

08019f28 <_ZN8touchgfx6muldivElll>:
 8019f28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019f2a:	4606      	mov	r6, r0
 8019f2c:	ab01      	add	r3, sp, #4
 8019f2e:	460d      	mov	r5, r1
 8019f30:	4614      	mov	r4, r2
 8019f32:	f7ff ffda 	bl	8019eea <_ZN8touchgfx6muldivElllRl>
 8019f36:	2e00      	cmp	r6, #0
 8019f38:	db20      	blt.n	8019f7c <_ZN8touchgfx6muldivElll+0x54>
 8019f3a:	bf14      	ite	ne
 8019f3c:	2301      	movne	r3, #1
 8019f3e:	2300      	moveq	r3, #0
 8019f40:	2d00      	cmp	r5, #0
 8019f42:	db1e      	blt.n	8019f82 <_ZN8touchgfx6muldivElll+0x5a>
 8019f44:	bf14      	ite	ne
 8019f46:	2201      	movne	r2, #1
 8019f48:	2200      	moveq	r2, #0
 8019f4a:	2c00      	cmp	r4, #0
 8019f4c:	fb03 f202 	mul.w	r2, r3, r2
 8019f50:	db1a      	blt.n	8019f88 <_ZN8touchgfx6muldivElll+0x60>
 8019f52:	bf14      	ite	ne
 8019f54:	2301      	movne	r3, #1
 8019f56:	2300      	moveq	r3, #0
 8019f58:	4353      	muls	r3, r2
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d117      	bne.n	8019f8e <_ZN8touchgfx6muldivElll+0x66>
 8019f5e:	2c00      	cmp	r4, #0
 8019f60:	9b01      	ldr	r3, [sp, #4]
 8019f62:	bfb8      	it	lt
 8019f64:	4264      	neglt	r4, r4
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	f104 0401 	add.w	r4, r4, #1
 8019f6c:	bfb8      	it	lt
 8019f6e:	425b      	neglt	r3, r3
 8019f70:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019f74:	db00      	blt.n	8019f78 <_ZN8touchgfx6muldivElll+0x50>
 8019f76:	3001      	adds	r0, #1
 8019f78:	b002      	add	sp, #8
 8019f7a:	bd70      	pop	{r4, r5, r6, pc}
 8019f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f80:	e7de      	b.n	8019f40 <_ZN8touchgfx6muldivElll+0x18>
 8019f82:	f04f 32ff 	mov.w	r2, #4294967295
 8019f86:	e7e0      	b.n	8019f4a <_ZN8touchgfx6muldivElll+0x22>
 8019f88:	f04f 33ff 	mov.w	r3, #4294967295
 8019f8c:	e7e4      	b.n	8019f58 <_ZN8touchgfx6muldivElll+0x30>
 8019f8e:	3301      	adds	r3, #1
 8019f90:	d1f2      	bne.n	8019f78 <_ZN8touchgfx6muldivElll+0x50>
 8019f92:	9b01      	ldr	r3, [sp, #4]
 8019f94:	2c00      	cmp	r4, #0
 8019f96:	bfb8      	it	lt
 8019f98:	4264      	neglt	r4, r4
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	bfb8      	it	lt
 8019f9e:	425b      	neglt	r3, r3
 8019fa0:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 8019fa4:	bfc8      	it	gt
 8019fa6:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8019faa:	e7e5      	b.n	8019f78 <_ZN8touchgfx6muldivElll+0x50>

08019fac <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8019fac:	2000      	movs	r0, #0
 8019fae:	4770      	bx	lr

08019fb0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8019fb0:	2001      	movs	r0, #1
 8019fb2:	4770      	bx	lr

08019fb4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8019fb4:	2002      	movs	r0, #2
 8019fb6:	4770      	bx	lr

08019fb8 <_ZN8touchgfx6ScreenD1Ev>:
 8019fb8:	4770      	bx	lr

08019fba <_ZN8touchgfx12GestureEventD1Ev>:
 8019fba:	4770      	bx	lr

08019fbc <_ZN8touchgfx9DragEventD1Ev>:
 8019fbc:	4770      	bx	lr

08019fbe <_ZN8touchgfx10ClickEventD1Ev>:
 8019fbe:	4770      	bx	lr

08019fc0 <_ZN8touchgfx10ClickEventD0Ev>:
 8019fc0:	b510      	push	{r4, lr}
 8019fc2:	4604      	mov	r4, r0
 8019fc4:	210c      	movs	r1, #12
 8019fc6:	f00a fb4a 	bl	802465e <_ZdlPvj>
 8019fca:	4620      	mov	r0, r4
 8019fcc:	bd10      	pop	{r4, pc}

08019fce <_ZN8touchgfx9DragEventD0Ev>:
 8019fce:	b510      	push	{r4, lr}
 8019fd0:	4604      	mov	r4, r0
 8019fd2:	2110      	movs	r1, #16
 8019fd4:	f00a fb43 	bl	802465e <_ZdlPvj>
 8019fd8:	4620      	mov	r0, r4
 8019fda:	bd10      	pop	{r4, pc}

08019fdc <_ZN8touchgfx12GestureEventD0Ev>:
 8019fdc:	b510      	push	{r4, lr}
 8019fde:	4604      	mov	r4, r0
 8019fe0:	210c      	movs	r1, #12
 8019fe2:	f00a fb3c 	bl	802465e <_ZdlPvj>
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	bd10      	pop	{r4, pc}

08019fea <_ZN8touchgfx6ScreenD0Ev>:
 8019fea:	b510      	push	{r4, lr}
 8019fec:	4604      	mov	r4, r0
 8019fee:	213c      	movs	r1, #60	; 0x3c
 8019ff0:	f00a fb35 	bl	802465e <_ZdlPvj>
 8019ff4:	4620      	mov	r0, r4
 8019ff6:	bd10      	pop	{r4, pc}

08019ff8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8019ff8:	b530      	push	{r4, r5, lr}
 8019ffa:	460d      	mov	r5, r1
 8019ffc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8019ffe:	b087      	sub	sp, #28
 801a000:	4604      	mov	r4, r0
 801a002:	b301      	cbz	r1, 801a046 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801a004:	a801      	add	r0, sp, #4
 801a006:	f7ff fe63 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a00a:	892a      	ldrh	r2, [r5, #8]
 801a00c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a010:	7928      	ldrb	r0, [r5, #4]
 801a012:	1ad2      	subs	r2, r2, r3
 801a014:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801a016:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801a01a:	441a      	add	r2, r3
 801a01c:	896b      	ldrh	r3, [r5, #10]
 801a01e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801a022:	f88d 0010 	strb.w	r0, [sp, #16]
 801a026:	1b5b      	subs	r3, r3, r5
 801a028:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801a02a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a02c:	442b      	add	r3, r5
 801a02e:	4d07      	ldr	r5, [pc, #28]	; (801a04c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801a030:	f8ad 1012 	strh.w	r1, [sp, #18]
 801a034:	a903      	add	r1, sp, #12
 801a036:	9503      	str	r5, [sp, #12]
 801a038:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a03c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a040:	6803      	ldr	r3, [r0, #0]
 801a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a044:	4798      	blx	r3
 801a046:	b007      	add	sp, #28
 801a048:	bd30      	pop	{r4, r5, pc}
 801a04a:	bf00      	nop
 801a04c:	0802815c 	.word	0x0802815c

0801a050 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801a050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a054:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801a056:	b08a      	sub	sp, #40	; 0x28
 801a058:	4604      	mov	r4, r0
 801a05a:	460d      	mov	r5, r1
 801a05c:	b113      	cbz	r3, 801a064 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801a05e:	790b      	ldrb	r3, [r1, #4]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d044      	beq.n	801a0ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a064:	f104 0804 	add.w	r8, r4, #4
 801a068:	a803      	add	r0, sp, #12
 801a06a:	4641      	mov	r1, r8
 801a06c:	f7ff fe30 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a070:	792b      	ldrb	r3, [r5, #4]
 801a072:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801a076:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801a07a:	b983      	cbnz	r3, 801a09e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801a07c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801a080:	892a      	ldrh	r2, [r5, #8]
 801a082:	88e9      	ldrh	r1, [r5, #6]
 801a084:	4640      	mov	r0, r8
 801a086:	1b92      	subs	r2, r2, r6
 801a088:	9301      	str	r3, [sp, #4]
 801a08a:	1bc9      	subs	r1, r1, r7
 801a08c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801a090:	b212      	sxth	r2, r2
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	b209      	sxth	r1, r1
 801a096:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801a09a:	f7f8 fb81 	bl	80127a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801a09e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a0a0:	b329      	cbz	r1, 801a0ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a0a2:	a805      	add	r0, sp, #20
 801a0a4:	f7ff fe14 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a0a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a0ac:	792b      	ldrb	r3, [r5, #4]
 801a0ae:	a907      	add	r1, sp, #28
 801a0b0:	1abf      	subs	r7, r7, r2
 801a0b2:	88ea      	ldrh	r2, [r5, #6]
 801a0b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801a0b6:	4417      	add	r7, r2
 801a0b8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801a0ba:	f88d 3020 	strb.w	r3, [sp, #32]
 801a0be:	4417      	add	r7, r2
 801a0c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801a0c4:	1ab6      	subs	r6, r6, r2
 801a0c6:	892a      	ldrh	r2, [r5, #8]
 801a0c8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801a0cc:	4416      	add	r6, r2
 801a0ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801a0d0:	4416      	add	r6, r2
 801a0d2:	4a08      	ldr	r2, [pc, #32]	; (801a0f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801a0d4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801a0d8:	2600      	movs	r6, #0
 801a0da:	9207      	str	r2, [sp, #28]
 801a0dc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801a0e0:	6803      	ldr	r3, [r0, #0]
 801a0e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a0e4:	4798      	blx	r3
 801a0e6:	792b      	ldrb	r3, [r5, #4]
 801a0e8:	b10b      	cbz	r3, 801a0ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801a0ea:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801a0ee:	b00a      	add	sp, #40	; 0x28
 801a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0f4:	08028134 	.word	0x08028134

0801a0f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801a0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0fc:	460c      	mov	r4, r1
 801a0fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801a100:	b088      	sub	sp, #32
 801a102:	4605      	mov	r5, r0
 801a104:	2900      	cmp	r1, #0
 801a106:	d06d      	beq.n	801a1e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801a108:	4668      	mov	r0, sp
 801a10a:	f7ff fde1 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a10e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801a110:	88e3      	ldrh	r3, [r4, #6]
 801a112:	f9bd 8000 	ldrsh.w	r8, [sp]
 801a116:	440b      	add	r3, r1
 801a118:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801a11c:	b21b      	sxth	r3, r3
 801a11e:	4543      	cmp	r3, r8
 801a120:	db31      	blt.n	801a186 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a122:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801a126:	44c4      	add	ip, r8
 801a128:	fa0f fc8c 	sxth.w	ip, ip
 801a12c:	4563      	cmp	r3, ip
 801a12e:	da2a      	bge.n	801a186 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a130:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801a132:	8926      	ldrh	r6, [r4, #8]
 801a134:	4416      	add	r6, r2
 801a136:	b236      	sxth	r6, r6
 801a138:	42be      	cmp	r6, r7
 801a13a:	db24      	blt.n	801a186 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a13c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801a140:	4438      	add	r0, r7
 801a142:	b200      	sxth	r0, r0
 801a144:	4286      	cmp	r6, r0
 801a146:	da1e      	bge.n	801a186 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a148:	8963      	ldrh	r3, [r4, #10]
 801a14a:	4419      	add	r1, r3
 801a14c:	b209      	sxth	r1, r1
 801a14e:	4541      	cmp	r1, r8
 801a150:	db08      	blt.n	801a164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a152:	4561      	cmp	r1, ip
 801a154:	da06      	bge.n	801a164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a156:	89a3      	ldrh	r3, [r4, #12]
 801a158:	441a      	add	r2, r3
 801a15a:	b212      	sxth	r2, r2
 801a15c:	42ba      	cmp	r2, r7
 801a15e:	db01      	blt.n	801a164 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801a160:	4282      	cmp	r2, r0
 801a162:	db10      	blt.n	801a186 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801a164:	4b21      	ldr	r3, [pc, #132]	; (801a1ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801a166:	a904      	add	r1, sp, #16
 801a168:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a16a:	9304      	str	r3, [sp, #16]
 801a16c:	2302      	movs	r3, #2
 801a16e:	f88d 3014 	strb.w	r3, [sp, #20]
 801a172:	2300      	movs	r3, #0
 801a174:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a178:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a17c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a180:	6803      	ldr	r3, [r0, #0]
 801a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a184:	4798      	blx	r3
 801a186:	1d29      	adds	r1, r5, #4
 801a188:	a802      	add	r0, sp, #8
 801a18a:	f7ff fda1 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a18e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a192:	88e0      	ldrh	r0, [r4, #6]
 801a194:	eba3 0808 	sub.w	r8, r3, r8
 801a198:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a19c:	7921      	ldrb	r1, [r4, #4]
 801a19e:	fa1f f888 	uxth.w	r8, r8
 801a1a2:	1bdf      	subs	r7, r3, r7
 801a1a4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801a1a8:	b2bb      	uxth	r3, r7
 801a1aa:	4440      	add	r0, r8
 801a1ac:	8922      	ldrh	r2, [r4, #8]
 801a1ae:	8967      	ldrh	r7, [r4, #10]
 801a1b0:	4460      	add	r0, ip
 801a1b2:	89a4      	ldrh	r4, [r4, #12]
 801a1b4:	441a      	add	r2, r3
 801a1b6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801a1b8:	44b8      	add	r8, r7
 801a1ba:	4423      	add	r3, r4
 801a1bc:	f8ad 0016 	strh.w	r0, [sp, #22]
 801a1c0:	4432      	add	r2, r6
 801a1c2:	44e0      	add	r8, ip
 801a1c4:	4433      	add	r3, r6
 801a1c6:	4c0a      	ldr	r4, [pc, #40]	; (801a1f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801a1c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801a1ca:	f88d 1014 	strb.w	r1, [sp, #20]
 801a1ce:	a904      	add	r1, sp, #16
 801a1d0:	9404      	str	r4, [sp, #16]
 801a1d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a1d6:	f8ad 801a 	strh.w	r8, [sp, #26]
 801a1da:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a1de:	6803      	ldr	r3, [r0, #0]
 801a1e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a1e2:	4798      	blx	r3
 801a1e4:	b008      	add	sp, #32
 801a1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1ea:	bf00      	nop
 801a1ec:	08028134 	.word	0x08028134
 801a1f0:	08028148 	.word	0x08028148

0801a1f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801a1f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a1f6:	4604      	mov	r4, r0
 801a1f8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801a1fc:	3201      	adds	r2, #1
 801a1fe:	d112      	bne.n	801a226 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801a200:	2500      	movs	r5, #0
 801a202:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801a206:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801a20a:	6803      	ldr	r3, [r0, #0]
 801a20c:	9500      	str	r5, [sp, #0]
 801a20e:	466d      	mov	r5, sp
 801a210:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a214:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a218:	4629      	mov	r1, r5
 801a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a21c:	4798      	blx	r3
 801a21e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a222:	e884 0003 	stmia.w	r4, {r0, r1}
 801a226:	4620      	mov	r0, r4
 801a228:	b003      	add	sp, #12
 801a22a:	bd30      	pop	{r4, r5, pc}

0801a22c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801a22c:	b513      	push	{r0, r1, r4, lr}
 801a22e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801a232:	4604      	mov	r4, r0
 801a234:	3301      	adds	r3, #1
 801a236:	d109      	bne.n	801a24c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801a238:	4601      	mov	r1, r0
 801a23a:	4668      	mov	r0, sp
 801a23c:	f7ff fd48 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a240:	f8bd 3000 	ldrh.w	r3, [sp]
 801a244:	8423      	strh	r3, [r4, #32]
 801a246:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a24a:	8463      	strh	r3, [r4, #34]	; 0x22
 801a24c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801a250:	b002      	add	sp, #8
 801a252:	bd10      	pop	{r4, pc}

0801a254 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801a254:	b513      	push	{r0, r1, r4, lr}
 801a256:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801a25a:	4604      	mov	r4, r0
 801a25c:	3301      	adds	r3, #1
 801a25e:	d109      	bne.n	801a274 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801a260:	4601      	mov	r1, r0
 801a262:	4668      	mov	r0, sp
 801a264:	f7ff fd34 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a268:	f8bd 3000 	ldrh.w	r3, [sp]
 801a26c:	8423      	strh	r3, [r4, #32]
 801a26e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a272:	8463      	strh	r3, [r4, #34]	; 0x22
 801a274:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801a278:	b002      	add	sp, #8
 801a27a:	bd10      	pop	{r4, pc}

0801a27c <_ZN8touchgfx6ScreenC1Ev>:
 801a27c:	b570      	push	{r4, r5, r6, lr}
 801a27e:	4b17      	ldr	r3, [pc, #92]	; (801a2dc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801a280:	4605      	mov	r5, r0
 801a282:	4a17      	ldr	r2, [pc, #92]	; (801a2e0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801a284:	2101      	movs	r1, #1
 801a286:	f845 3b04 	str.w	r3, [r5], #4
 801a28a:	2300      	movs	r3, #0
 801a28c:	6042      	str	r2, [r0, #4]
 801a28e:	4604      	mov	r4, r0
 801a290:	8103      	strh	r3, [r0, #8]
 801a292:	8143      	strh	r3, [r0, #10]
 801a294:	8183      	strh	r3, [r0, #12]
 801a296:	81c3      	strh	r3, [r0, #14]
 801a298:	8203      	strh	r3, [r0, #16]
 801a29a:	8243      	strh	r3, [r0, #18]
 801a29c:	8283      	strh	r3, [r0, #20]
 801a29e:	82c3      	strh	r3, [r0, #22]
 801a2a0:	6203      	str	r3, [r0, #32]
 801a2a2:	8483      	strh	r3, [r0, #36]	; 0x24
 801a2a4:	84c3      	strh	r3, [r0, #38]	; 0x26
 801a2a6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801a2aa:	6343      	str	r3, [r0, #52]	; 0x34
 801a2ac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801a2b0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a2b4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801a2b8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801a2bc:	4b09      	ldr	r3, [pc, #36]	; (801a2e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801a2be:	4628      	mov	r0, r5
 801a2c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a2c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801a2c6:	4a08      	ldr	r2, [pc, #32]	; (801a2e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801a2c8:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a2cc:	4798      	blx	r3
 801a2ce:	6863      	ldr	r3, [r4, #4]
 801a2d0:	4628      	mov	r0, r5
 801a2d2:	4631      	mov	r1, r6
 801a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2d6:	4798      	blx	r3
 801a2d8:	4620      	mov	r0, r4
 801a2da:	bd70      	pop	{r4, r5, r6, pc}
 801a2dc:	08028170 	.word	0x08028170
 801a2e0:	08027674 	.word	0x08027674
 801a2e4:	24010056 	.word	0x24010056
 801a2e8:	24010054 	.word	0x24010054

0801a2ec <_ZN8touchgfx6Screen4drawEv>:
 801a2ec:	4b09      	ldr	r3, [pc, #36]	; (801a314 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801a2ee:	b507      	push	{r0, r1, r2, lr}
 801a2f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a2f4:	2100      	movs	r1, #0
 801a2f6:	4b08      	ldr	r3, [pc, #32]	; (801a318 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801a2f8:	9100      	str	r1, [sp, #0]
 801a2fa:	4669      	mov	r1, sp
 801a2fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a300:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a304:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a308:	6803      	ldr	r3, [r0, #0]
 801a30a:	689b      	ldr	r3, [r3, #8]
 801a30c:	4798      	blx	r3
 801a30e:	b003      	add	sp, #12
 801a310:	f85d fb04 	ldr.w	pc, [sp], #4
 801a314:	24010054 	.word	0x24010054
 801a318:	24010056 	.word	0x24010056

0801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a320:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801a324:	b089      	sub	sp, #36	; 0x24
 801a326:	4680      	mov	r8, r0
 801a328:	460c      	mov	r4, r1
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	4615      	mov	r5, r2
 801a32e:	dd0e      	ble.n	801a34e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a330:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801a334:	2b00      	cmp	r3, #0
 801a336:	dd0a      	ble.n	801a34e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a338:	4628      	mov	r0, r5
 801a33a:	f7ff ff5b 	bl	801a1f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a33e:	4621      	mov	r1, r4
 801a340:	f7fe fb4d 	bl	80189de <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a344:	69eb      	ldr	r3, [r5, #28]
 801a346:	b928      	cbnz	r0, 801a354 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801a348:	461d      	mov	r5, r3
 801a34a:	2b00      	cmp	r3, #0
 801a34c:	d1f4      	bne.n	801a338 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801a34e:	b009      	add	sp, #36	; 0x24
 801a350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a354:	ae04      	add	r6, sp, #16
 801a356:	2b00      	cmp	r3, #0
 801a358:	f000 80b5 	beq.w	801a4c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a35c:	682b      	ldr	r3, [r5, #0]
 801a35e:	4629      	mov	r1, r5
 801a360:	a802      	add	r0, sp, #8
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	4798      	blx	r3
 801a366:	4628      	mov	r0, r5
 801a368:	f7ff ff60 	bl	801a22c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a36c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801a370:	4407      	add	r7, r0
 801a372:	4628      	mov	r0, r5
 801a374:	f7ff ff6e 	bl	801a254 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a378:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a37c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801a380:	b23f      	sxth	r7, r7
 801a382:	4418      	add	r0, r3
 801a384:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801a388:	4621      	mov	r1, r4
 801a38a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a38e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a392:	4630      	mov	r0, r6
 801a394:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a398:	f8ad 7010 	strh.w	r7, [sp, #16]
 801a39c:	f7f8 fae2 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	f7ff ff27 	bl	801a1f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a3a6:	ab06      	add	r3, sp, #24
 801a3a8:	4602      	mov	r2, r0
 801a3aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a3ae:	e883 0003 	stmia.w	r3, {r0, r1}
 801a3b2:	4611      	mov	r1, r2
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	f7f8 fad5 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801a3ba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801a3be:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a3c2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801a3c6:	4299      	cmp	r1, r3
 801a3c8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801a3cc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801a3d0:	d10b      	bne.n	801a3ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a3d2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a3d6:	4552      	cmp	r2, sl
 801a3d8:	d107      	bne.n	801a3ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a3da:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a3de:	455a      	cmp	r2, fp
 801a3e0:	d103      	bne.n	801a3ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801a3e2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a3e6:	454a      	cmp	r2, r9
 801a3e8:	d06d      	beq.n	801a4c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a3ea:	f1bb 0f00 	cmp.w	fp, #0
 801a3ee:	dd65      	ble.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a3f0:	f1b9 0f00 	cmp.w	r9, #0
 801a3f4:	dd62      	ble.n	801a4bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801a3f6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a3fa:	fa1f f08a 	uxth.w	r0, sl
 801a3fe:	4552      	cmp	r2, sl
 801a400:	9000      	str	r0, [sp, #0]
 801a402:	da12      	bge.n	801a42a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801a404:	9301      	str	r3, [sp, #4]
 801a406:	9b00      	ldr	r3, [sp, #0]
 801a408:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a40c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a410:	1a9a      	subs	r2, r3, r2
 801a412:	f8ad 1010 	strh.w	r1, [sp, #16]
 801a416:	4631      	mov	r1, r6
 801a418:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a41c:	4640      	mov	r0, r8
 801a41e:	f8ad 2016 	strh.w	r2, [sp, #22]
 801a422:	69ea      	ldr	r2, [r5, #28]
 801a424:	f7ff ff7a 	bl	801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a428:	9b01      	ldr	r3, [sp, #4]
 801a42a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a42e:	b29f      	uxth	r7, r3
 801a430:	429a      	cmp	r2, r3
 801a432:	da0d      	bge.n	801a450 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801a434:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a438:	1aba      	subs	r2, r7, r2
 801a43a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a43e:	4631      	mov	r1, r6
 801a440:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a444:	4640      	mov	r0, r8
 801a446:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a44a:	69ea      	ldr	r2, [r5, #28]
 801a44c:	f7ff ff66 	bl	801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a450:	8822      	ldrh	r2, [r4, #0]
 801a452:	445f      	add	r7, fp
 801a454:	88a3      	ldrh	r3, [r4, #4]
 801a456:	b2bf      	uxth	r7, r7
 801a458:	4413      	add	r3, r2
 801a45a:	b23a      	sxth	r2, r7
 801a45c:	b29b      	uxth	r3, r3
 801a45e:	b219      	sxth	r1, r3
 801a460:	4291      	cmp	r1, r2
 801a462:	dd0d      	ble.n	801a480 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801a464:	1bdb      	subs	r3, r3, r7
 801a466:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a46a:	f8ad a012 	strh.w	sl, [sp, #18]
 801a46e:	4631      	mov	r1, r6
 801a470:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a474:	4640      	mov	r0, r8
 801a476:	f8ad 9016 	strh.w	r9, [sp, #22]
 801a47a:	69ea      	ldr	r2, [r5, #28]
 801a47c:	f7ff ff4e 	bl	801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a480:	88e2      	ldrh	r2, [r4, #6]
 801a482:	8863      	ldrh	r3, [r4, #2]
 801a484:	4413      	add	r3, r2
 801a486:	9a00      	ldr	r2, [sp, #0]
 801a488:	444a      	add	r2, r9
 801a48a:	b29b      	uxth	r3, r3
 801a48c:	fa1f f982 	uxth.w	r9, r2
 801a490:	b219      	sxth	r1, r3
 801a492:	fa0f f289 	sxth.w	r2, r9
 801a496:	428a      	cmp	r2, r1
 801a498:	da15      	bge.n	801a4c6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801a49a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a49e:	eba3 0309 	sub.w	r3, r3, r9
 801a4a2:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a4a6:	f8ad 1014 	strh.w	r1, [sp, #20]
 801a4aa:	4631      	mov	r1, r6
 801a4ac:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a4b0:	f8ad 2012 	strh.w	r2, [sp, #18]
 801a4b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a4b8:	69ea      	ldr	r2, [r5, #28]
 801a4ba:	e001      	b.n	801a4c0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801a4bc:	69ea      	ldr	r2, [r5, #28]
 801a4be:	4621      	mov	r1, r4
 801a4c0:	4640      	mov	r0, r8
 801a4c2:	f7ff ff2b 	bl	801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f7ff fe94 	bl	801a1f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801a4cc:	6861      	ldr	r1, [r4, #4]
 801a4ce:	4602      	mov	r2, r0
 801a4d0:	4633      	mov	r3, r6
 801a4d2:	6820      	ldr	r0, [r4, #0]
 801a4d4:	c303      	stmia	r3!, {r0, r1}
 801a4d6:	4611      	mov	r1, r2
 801a4d8:	4630      	mov	r0, r6
 801a4da:	f7f8 fa43 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801a4de:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	f77f af33 	ble.w	801a34e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a4e8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	f77f af2e 	ble.w	801a34e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801a4f2:	4628      	mov	r0, r5
 801a4f4:	f7ff fe9a 	bl	801a22c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801a4f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a4fc:	1a18      	subs	r0, r3, r0
 801a4fe:	f8ad 0010 	strh.w	r0, [sp, #16]
 801a502:	4628      	mov	r0, r5
 801a504:	f7ff fea6 	bl	801a254 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801a508:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a50c:	4631      	mov	r1, r6
 801a50e:	1a18      	subs	r0, r3, r0
 801a510:	f8ad 0012 	strh.w	r0, [sp, #18]
 801a514:	4628      	mov	r0, r5
 801a516:	682b      	ldr	r3, [r5, #0]
 801a518:	689b      	ldr	r3, [r3, #8]
 801a51a:	4798      	blx	r3
 801a51c:	e717      	b.n	801a34e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801a51e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801a51e:	b570      	push	{r4, r5, r6, lr}
 801a520:	1d06      	adds	r6, r0, #4
 801a522:	b086      	sub	sp, #24
 801a524:	460c      	mov	r4, r1
 801a526:	2300      	movs	r3, #0
 801a528:	4631      	mov	r1, r6
 801a52a:	4605      	mov	r5, r0
 801a52c:	a802      	add	r0, sp, #8
 801a52e:	9301      	str	r3, [sp, #4]
 801a530:	f7ff fbce 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a534:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a538:	8822      	ldrh	r2, [r4, #0]
 801a53a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801a53e:	1ad2      	subs	r2, r2, r3
 801a540:	8863      	ldrh	r3, [r4, #2]
 801a542:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a546:	1a5b      	subs	r3, r3, r1
 801a548:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a54c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801a550:	aa01      	add	r2, sp, #4
 801a552:	f8ad 0014 	strh.w	r0, [sp, #20]
 801a556:	4630      	mov	r0, r6
 801a558:	f8ad 1016 	strh.w	r1, [sp, #22]
 801a55c:	a904      	add	r1, sp, #16
 801a55e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801a562:	f7f8 fad7 	bl	8012b14 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801a566:	9a01      	ldr	r2, [sp, #4]
 801a568:	b11a      	cbz	r2, 801a572 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801a56a:	4621      	mov	r1, r4
 801a56c:	4628      	mov	r0, r5
 801a56e:	f7ff fed5 	bl	801a31c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801a572:	b006      	add	sp, #24
 801a574:	bd70      	pop	{r4, r5, r6, pc}

0801a576 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801a576:	4602      	mov	r2, r0
 801a578:	b530      	push	{r4, r5, lr}
 801a57a:	4604      	mov	r4, r0
 801a57c:	b085      	sub	sp, #20
 801a57e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801a582:	460d      	mov	r5, r1
 801a584:	466b      	mov	r3, sp
 801a586:	6851      	ldr	r1, [r2, #4]
 801a588:	c303      	stmia	r3!, {r0, r1}
 801a58a:	4629      	mov	r1, r5
 801a58c:	4668      	mov	r0, sp
 801a58e:	f7f8 f9e9 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801a592:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801a596:	b12b      	cbz	r3, 801a5a4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801a598:	4669      	mov	r1, sp
 801a59a:	4620      	mov	r0, r4
 801a59c:	f7ff ffbf 	bl	801a51e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801a5a0:	b005      	add	sp, #20
 801a5a2:	bd30      	pop	{r4, r5, pc}
 801a5a4:	3404      	adds	r4, #4
 801a5a6:	a802      	add	r0, sp, #8
 801a5a8:	4621      	mov	r1, r4
 801a5aa:	f7ff fb91 	bl	8019cd0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801a5ae:	f8bd 3000 	ldrh.w	r3, [sp]
 801a5b2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801a5b6:	4669      	mov	r1, sp
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	1a9b      	subs	r3, r3, r2
 801a5bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a5c0:	f8ad 3000 	strh.w	r3, [sp]
 801a5c4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a5c8:	1a9b      	subs	r3, r3, r2
 801a5ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a5ce:	f7f8 fa68 	bl	8012aa2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801a5d2:	e7e5      	b.n	801a5a0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801a5d4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801a5d4:	460b      	mov	r3, r1
 801a5d6:	680a      	ldr	r2, [r1, #0]
 801a5d8:	1d01      	adds	r1, r0, #4
 801a5da:	6992      	ldr	r2, [r2, #24]
 801a5dc:	4618      	mov	r0, r3
 801a5de:	4710      	bx	r2

0801a5e0 <_ZN8touchgfx12TextProviderC1Ev>:
 801a5e0:	b538      	push	{r3, r4, r5, lr}
 801a5e2:	2500      	movs	r5, #0
 801a5e4:	2302      	movs	r3, #2
 801a5e6:	4604      	mov	r4, r0
 801a5e8:	220e      	movs	r2, #14
 801a5ea:	7403      	strb	r3, [r0, #16]
 801a5ec:	4629      	mov	r1, r5
 801a5ee:	6145      	str	r5, [r0, #20]
 801a5f0:	7605      	strb	r5, [r0, #24]
 801a5f2:	83c5      	strh	r5, [r0, #30]
 801a5f4:	8405      	strh	r5, [r0, #32]
 801a5f6:	86c5      	strh	r5, [r0, #54]	; 0x36
 801a5f8:	8705      	strh	r5, [r0, #56]	; 0x38
 801a5fa:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801a5fc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801a600:	e9c0 5500 	strd	r5, r5, [r0]
 801a604:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801a608:	304c      	adds	r0, #76	; 0x4c
 801a60a:	f00a f9c1 	bl	8024990 <memset>
 801a60e:	2301      	movs	r3, #1
 801a610:	4620      	mov	r0, r4
 801a612:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801a616:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801a61a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801a61e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801a622:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801a626:	f7ec ff17 	bl	8007458 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801a62a:	4620      	mov	r0, r4
 801a62c:	bd38      	pop	{r3, r4, r5, pc}

0801a62e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801a62e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801a630:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801a634:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801a636:	fab0 f080 	clz	r0, r0
 801a63a:	0940      	lsrs	r0, r0, #5
 801a63c:	4770      	bx	lr

0801a63e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801a63e:	b530      	push	{r4, r5, lr}
 801a640:	2500      	movs	r5, #0
 801a642:	2401      	movs	r4, #1
 801a644:	6843      	ldr	r3, [r0, #4]
 801a646:	b913      	cbnz	r3, 801a64e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801a648:	6803      	ldr	r3, [r0, #0]
 801a64a:	b313      	cbz	r3, 801a692 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a64c:	6043      	str	r3, [r0, #4]
 801a64e:	7e03      	ldrb	r3, [r0, #24]
 801a650:	b143      	cbz	r3, 801a664 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801a652:	6943      	ldr	r3, [r0, #20]
 801a654:	b12b      	cbz	r3, 801a662 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a656:	881a      	ldrh	r2, [r3, #0]
 801a658:	b11a      	cbz	r2, 801a662 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801a65a:	1c9a      	adds	r2, r3, #2
 801a65c:	6142      	str	r2, [r0, #20]
 801a65e:	8818      	ldrh	r0, [r3, #0]
 801a660:	bd30      	pop	{r4, r5, pc}
 801a662:	7605      	strb	r5, [r0, #24]
 801a664:	6843      	ldr	r3, [r0, #4]
 801a666:	8819      	ldrh	r1, [r3, #0]
 801a668:	b199      	cbz	r1, 801a692 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801a66a:	1c9a      	adds	r2, r3, #2
 801a66c:	2902      	cmp	r1, #2
 801a66e:	6042      	str	r2, [r0, #4]
 801a670:	d1f5      	bne.n	801a65e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801a672:	7c03      	ldrb	r3, [r0, #16]
 801a674:	2b01      	cmp	r3, #1
 801a676:	d8e5      	bhi.n	801a644 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a678:	1c5a      	adds	r2, r3, #1
 801a67a:	3302      	adds	r3, #2
 801a67c:	7402      	strb	r2, [r0, #16]
 801a67e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801a682:	6143      	str	r3, [r0, #20]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d0dd      	beq.n	801a644 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a688:	881b      	ldrh	r3, [r3, #0]
 801a68a:	2b00      	cmp	r3, #0
 801a68c:	d0da      	beq.n	801a644 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a68e:	7604      	strb	r4, [r0, #24]
 801a690:	e7d8      	b.n	801a644 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801a692:	2000      	movs	r0, #0
 801a694:	e7e4      	b.n	801a660 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801a696:	6001      	str	r1, [r0, #0]
 801a698:	2100      	movs	r1, #0
 801a69a:	b430      	push	{r4, r5}
 801a69c:	6041      	str	r1, [r0, #4]
 801a69e:	6815      	ldr	r5, [r2, #0]
 801a6a0:	6085      	str	r5, [r0, #8]
 801a6a2:	6852      	ldr	r2, [r2, #4]
 801a6a4:	6443      	str	r3, [r0, #68]	; 0x44
 801a6a6:	9b02      	ldr	r3, [sp, #8]
 801a6a8:	60c2      	str	r2, [r0, #12]
 801a6aa:	7401      	strb	r1, [r0, #16]
 801a6ac:	6141      	str	r1, [r0, #20]
 801a6ae:	7601      	strb	r1, [r0, #24]
 801a6b0:	8701      	strh	r1, [r0, #56]	; 0x38
 801a6b2:	8401      	strh	r1, [r0, #32]
 801a6b4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801a6b8:	6483      	str	r3, [r0, #72]	; 0x48
 801a6ba:	bc30      	pop	{r4, r5}
 801a6bc:	f7ec becc 	b.w	8007458 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801a6c0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801a6c0:	b408      	push	{r3}
 801a6c2:	b510      	push	{r4, lr}
 801a6c4:	b085      	sub	sp, #20
 801a6c6:	ac07      	add	r4, sp, #28
 801a6c8:	f854 3b04 	ldr.w	r3, [r4], #4
 801a6cc:	9300      	str	r3, [sp, #0]
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	4622      	mov	r2, r4
 801a6d2:	9403      	str	r4, [sp, #12]
 801a6d4:	f7ff ffdf 	bl	801a696 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a6d8:	b005      	add	sp, #20
 801a6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6de:	b001      	add	sp, #4
 801a6e0:	4770      	bx	lr

0801a6e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801a6e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	4608      	mov	r0, r1
 801a6e8:	b1f1      	cbz	r1, 801a728 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801a6ea:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801a6ee:	460b      	mov	r3, r1
 801a6f0:	f101 0708 	add.w	r7, r1, #8
 801a6f4:	4622      	mov	r2, r4
 801a6f6:	6818      	ldr	r0, [r3, #0]
 801a6f8:	3308      	adds	r3, #8
 801a6fa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a6fe:	4626      	mov	r6, r4
 801a700:	42bb      	cmp	r3, r7
 801a702:	c603      	stmia	r6!, {r0, r1}
 801a704:	4634      	mov	r4, r6
 801a706:	d1f6      	bne.n	801a6f6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801a708:	6818      	ldr	r0, [r3, #0]
 801a70a:	6030      	str	r0, [r6, #0]
 801a70c:	4610      	mov	r0, r2
 801a70e:	889b      	ldrh	r3, [r3, #4]
 801a710:	80b3      	strh	r3, [r6, #4]
 801a712:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801a716:	015b      	lsls	r3, r3, #5
 801a718:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801a71c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801a720:	430b      	orrs	r3, r1
 801a722:	425b      	negs	r3, r3
 801a724:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801a728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a72a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801a72a:	b538      	push	{r3, r4, r5, lr}
 801a72c:	460c      	mov	r4, r1
 801a72e:	6811      	ldr	r1, [r2, #0]
 801a730:	4610      	mov	r0, r2
 801a732:	68cd      	ldr	r5, [r1, #12]
 801a734:	4619      	mov	r1, r3
 801a736:	47a8      	blx	r5
 801a738:	2800      	cmp	r0, #0
 801a73a:	bf08      	it	eq
 801a73c:	4620      	moveq	r0, r4
 801a73e:	bd38      	pop	{r3, r4, r5, pc}

0801a740 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	4604      	mov	r4, r0
 801a744:	4615      	mov	r5, r2
 801a746:	4608      	mov	r0, r1
 801a748:	b93a      	cbnz	r2, 801a75a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801a74a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a74e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801a752:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801a756:	4628      	mov	r0, r5
 801a758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a75a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801a75e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801a762:	8893      	ldrh	r3, [r2, #4]
 801a764:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801a768:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a76c:	79ee      	ldrb	r6, [r5, #7]
 801a76e:	4316      	orrs	r6, r2
 801a770:	19da      	adds	r2, r3, r7
 801a772:	b291      	uxth	r1, r2
 801a774:	b2b7      	uxth	r7, r6
 801a776:	291d      	cmp	r1, #29
 801a778:	d87b      	bhi.n	801a872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a77a:	2201      	movs	r2, #1
 801a77c:	10f6      	asrs	r6, r6, #3
 801a77e:	408a      	lsls	r2, r1
 801a780:	4974      	ldr	r1, [pc, #464]	; (801a954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801a782:	420a      	tst	r2, r1
 801a784:	d12e      	bne.n	801a7e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801a786:	f412 7f60 	tst.w	r2, #896	; 0x380
 801a78a:	d072      	beq.n	801a872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801a78c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801a790:	462b      	mov	r3, r5
 801a792:	f105 0e08 	add.w	lr, r5, #8
 801a796:	4615      	mov	r5, r2
 801a798:	6818      	ldr	r0, [r3, #0]
 801a79a:	3308      	adds	r3, #8
 801a79c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801a7a0:	4694      	mov	ip, r2
 801a7a2:	4573      	cmp	r3, lr
 801a7a4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a7a8:	4662      	mov	r2, ip
 801a7aa:	d1f5      	bne.n	801a798 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801a7ac:	6818      	ldr	r0, [r3, #0]
 801a7ae:	f8cc 0000 	str.w	r0, [ip]
 801a7b2:	889b      	ldrh	r3, [r3, #4]
 801a7b4:	f8ac 3004 	strh.w	r3, [ip, #4]
 801a7b8:	b2b3      	uxth	r3, r6
 801a7ba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801a7be:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801a7c2:	1aca      	subs	r2, r1, r3
 801a7c4:	1bcf      	subs	r7, r1, r7
 801a7c6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801a7ca:	b292      	uxth	r2, r2
 801a7cc:	1afb      	subs	r3, r7, r3
 801a7ce:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801a7d2:	10d2      	asrs	r2, r2, #3
 801a7d4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801a7d8:	4302      	orrs	r2, r0
 801a7da:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801a7de:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801a7e2:	e7b8      	b.n	801a756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a7e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801a7e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801a7ea:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801a7ec:	f640 6333 	movw	r3, #3635	; 0xe33
 801a7f0:	4299      	cmp	r1, r3
 801a7f2:	d110      	bne.n	801a816 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801a7f4:	6803      	ldr	r3, [r0, #0]
 801a7f6:	68db      	ldr	r3, [r3, #12]
 801a7f8:	4798      	blx	r3
 801a7fa:	7b41      	ldrb	r1, [r0, #13]
 801a7fc:	00cb      	lsls	r3, r1, #3
 801a7fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a802:	7a03      	ldrb	r3, [r0, #8]
 801a804:	0648      	lsls	r0, r1, #25
 801a806:	ea43 0302 	orr.w	r3, r3, r2
 801a80a:	bf44      	itt	mi
 801a80c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a810:	b21b      	sxthmi	r3, r3
 801a812:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a816:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801a81a:	462a      	mov	r2, r5
 801a81c:	f105 0c08 	add.w	ip, r5, #8
 801a820:	443b      	add	r3, r7
 801a822:	4433      	add	r3, r6
 801a824:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801a828:	b29b      	uxth	r3, r3
 801a82a:	4635      	mov	r5, r6
 801a82c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a830:	6810      	ldr	r0, [r2, #0]
 801a832:	3208      	adds	r2, #8
 801a834:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801a838:	4637      	mov	r7, r6
 801a83a:	4562      	cmp	r2, ip
 801a83c:	c703      	stmia	r7!, {r0, r1}
 801a83e:	463e      	mov	r6, r7
 801a840:	d1f6      	bne.n	801a830 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801a842:	6810      	ldr	r0, [r2, #0]
 801a844:	6038      	str	r0, [r7, #0]
 801a846:	8892      	ldrh	r2, [r2, #4]
 801a848:	80ba      	strh	r2, [r7, #4]
 801a84a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801a84e:	10db      	asrs	r3, r3, #3
 801a850:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801a854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801a858:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a85c:	4313      	orrs	r3, r2
 801a85e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801a862:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801a866:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801a86a:	1a9b      	subs	r3, r3, r2
 801a86c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801a870:	e771      	b.n	801a756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801a872:	f023 0204 	bic.w	r2, r3, #4
 801a876:	f640 611b 	movw	r1, #3611	; 0xe1b
 801a87a:	428a      	cmp	r2, r1
 801a87c:	d003      	beq.n	801a886 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801a87e:	f640 621d 	movw	r2, #3613	; 0xe1d
 801a882:	4293      	cmp	r3, r2
 801a884:	d120      	bne.n	801a8c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801a886:	3b01      	subs	r3, #1
 801a888:	4602      	mov	r2, r0
 801a88a:	4629      	mov	r1, r5
 801a88c:	4620      	mov	r0, r4
 801a88e:	b29b      	uxth	r3, r3
 801a890:	f7ff ff4b 	bl	801a72a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a894:	7b41      	ldrb	r1, [r0, #13]
 801a896:	00cb      	lsls	r3, r1, #3
 801a898:	0649      	lsls	r1, r1, #25
 801a89a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a89e:	7a03      	ldrb	r3, [r0, #8]
 801a8a0:	ea43 0302 	orr.w	r3, r3, r2
 801a8a4:	bf44      	itt	mi
 801a8a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a8aa:	b21b      	sxthmi	r3, r3
 801a8ac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a8b0:	7b6b      	ldrb	r3, [r5, #13]
 801a8b2:	7aaa      	ldrb	r2, [r5, #10]
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a8ba:	4313      	orrs	r3, r2
 801a8bc:	115a      	asrs	r2, r3, #5
 801a8be:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801a8c2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a8c6:	e035      	b.n	801a934 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801a8c8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801a8cc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801a8d0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801a8d4:	7a2a      	ldrb	r2, [r5, #8]
 801a8d6:	ea42 0201 	orr.w	r2, r2, r1
 801a8da:	f640 6109 	movw	r1, #3593	; 0xe09
 801a8de:	bf1c      	itt	ne
 801a8e0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801a8e4:	b212      	sxthne	r2, r2
 801a8e6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801a8ea:	f023 0210 	bic.w	r2, r3, #16
 801a8ee:	428a      	cmp	r2, r1
 801a8f0:	d003      	beq.n	801a8fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801a8f2:	f640 6213 	movw	r2, #3603	; 0xe13
 801a8f6:	4293      	cmp	r3, r2
 801a8f8:	d129      	bne.n	801a94e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801a8fa:	7b6e      	ldrb	r6, [r5, #13]
 801a8fc:	4629      	mov	r1, r5
 801a8fe:	0076      	lsls	r6, r6, #1
 801a900:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801a904:	7aae      	ldrb	r6, [r5, #10]
 801a906:	4316      	orrs	r6, r2
 801a908:	f640 6213 	movw	r2, #3603	; 0xe13
 801a90c:	4293      	cmp	r3, r2
 801a90e:	4602      	mov	r2, r0
 801a910:	4620      	mov	r0, r4
 801a912:	bf16      	itet	ne
 801a914:	f103 33ff 	addne.w	r3, r3, #4294967295
 801a918:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801a91c:	b29b      	uxthne	r3, r3
 801a91e:	f7ff ff04 	bl	801a72a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801a922:	7b43      	ldrb	r3, [r0, #13]
 801a924:	7a82      	ldrb	r2, [r0, #10]
 801a926:	005b      	lsls	r3, r3, #1
 801a928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a92c:	4313      	orrs	r3, r2
 801a92e:	1af6      	subs	r6, r6, r3
 801a930:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801a934:	7b69      	ldrb	r1, [r5, #13]
 801a936:	00cb      	lsls	r3, r1, #3
 801a938:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a93c:	7a2b      	ldrb	r3, [r5, #8]
 801a93e:	4313      	orrs	r3, r2
 801a940:	064a      	lsls	r2, r1, #25
 801a942:	bf44      	itt	mi
 801a944:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a948:	b21b      	sxthmi	r3, r3
 801a94a:	1bdb      	subs	r3, r3, r7
 801a94c:	e747      	b.n	801a7de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801a94e:	2300      	movs	r3, #0
 801a950:	e7b7      	b.n	801a8c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801a952:	bf00      	nop
 801a954:	3fc00079 	.word	0x3fc00079

0801a958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801a958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a95c:	4604      	mov	r4, r0
 801a95e:	b942      	cbnz	r2, 801a972 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801a960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a964:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801a968:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801a96c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801a970:	e047      	b.n	801aa02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801a972:	7b51      	ldrb	r1, [r2, #13]
 801a974:	8893      	ldrh	r3, [r2, #4]
 801a976:	010d      	lsls	r5, r1, #4
 801a978:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801a97c:	79d5      	ldrb	r5, [r2, #7]
 801a97e:	4305      	orrs	r5, r0
 801a980:	2d04      	cmp	r5, #4
 801a982:	bfcc      	ite	gt
 801a984:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801a988:	f04f 0e01 	movle.w	lr, #1
 801a98c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801a990:	f200 80ab 	bhi.w	801aaea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801a994:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801a998:	4283      	cmp	r3, r0
 801a99a:	d216      	bcs.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a99c:	f240 605b 	movw	r0, #1627	; 0x65b
 801a9a0:	4283      	cmp	r3, r0
 801a9a2:	d859      	bhi.n	801aa58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801a9a4:	f240 6057 	movw	r0, #1623	; 0x657
 801a9a8:	4283      	cmp	r3, r0
 801a9aa:	d20e      	bcs.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a9ac:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801a9b0:	d24a      	bcs.n	801aa48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801a9b2:	f240 604e 	movw	r0, #1614	; 0x64e
 801a9b6:	4283      	cmp	r3, r0
 801a9b8:	d207      	bcs.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801a9ba:	f240 601a 	movw	r0, #1562	; 0x61a
 801a9be:	4283      	cmp	r3, r0
 801a9c0:	d02a      	beq.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801a9c2:	d821      	bhi.n	801aa08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801a9c4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801a9c8:	d35b      	bcc.n	801aa82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801a9ca:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801a9ce:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801a9d2:	f040 80d0 	bne.w	801ab76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a9d6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801a9da:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801a9de:	f040 80ca 	bne.w	801ab76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801a9e2:	00cb      	lsls	r3, r1, #3
 801a9e4:	0649      	lsls	r1, r1, #25
 801a9e6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801a9ea:	7a13      	ldrb	r3, [r2, #8]
 801a9ec:	ea43 0300 	orr.w	r3, r3, r0
 801a9f0:	bf44      	itt	mi
 801a9f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801a9f6:	b21b      	sxthmi	r3, r3
 801a9f8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801a9fc:	1b5d      	subs	r5, r3, r5
 801a9fe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801aa02:	4610      	mov	r0, r2
 801aa04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa08:	f240 604b 	movw	r0, #1611	; 0x64b
 801aa0c:	4283      	cmp	r3, r0
 801aa0e:	d338      	bcc.n	801aa82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aa10:	f240 604c 	movw	r0, #1612	; 0x64c
 801aa14:	4283      	cmp	r3, r0
 801aa16:	d9d8      	bls.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa18:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801aa1c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801aa20:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801aa24:	f040 80f3 	bne.w	801ac0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801aa28:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801aa2c:	f040 80ef 	bne.w	801ac0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801aa30:	00cb      	lsls	r3, r1, #3
 801aa32:	064e      	lsls	r6, r1, #25
 801aa34:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa38:	7a13      	ldrb	r3, [r2, #8]
 801aa3a:	ea43 0300 	orr.w	r3, r3, r0
 801aa3e:	bf44      	itt	mi
 801aa40:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa44:	b21b      	sxthmi	r3, r3
 801aa46:	e7d9      	b.n	801a9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801aa48:	f240 6054 	movw	r0, #1620	; 0x654
 801aa4c:	4283      	cmp	r3, r0
 801aa4e:	d8e3      	bhi.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa50:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801aa54:	d9e0      	bls.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa56:	e7b8      	b.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa58:	f240 6074 	movw	r0, #1652	; 0x674
 801aa5c:	4283      	cmp	r3, r0
 801aa5e:	d0b4      	beq.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa60:	d82d      	bhi.n	801aabe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801aa62:	f240 605e 	movw	r0, #1630	; 0x65e
 801aa66:	4283      	cmp	r3, r0
 801aa68:	d804      	bhi.n	801aa74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801aa6a:	f240 605d 	movw	r0, #1629	; 0x65d
 801aa6e:	4283      	cmp	r3, r0
 801aa70:	d3d2      	bcc.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa72:	e7aa      	b.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa74:	f240 605f 	movw	r0, #1631	; 0x65f
 801aa78:	4283      	cmp	r3, r0
 801aa7a:	d0cd      	beq.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aa7c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801aa80:	d0a3      	beq.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aa82:	00cb      	lsls	r3, r1, #3
 801aa84:	0649      	lsls	r1, r1, #25
 801aa86:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801aa8a:	7a13      	ldrb	r3, [r2, #8]
 801aa8c:	ea43 0300 	orr.w	r3, r3, r0
 801aa90:	bf44      	itt	mi
 801aa92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801aa96:	b21b      	sxthmi	r3, r3
 801aa98:	1b5d      	subs	r5, r3, r5
 801aa9a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801aa9e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801aaa2:	7b53      	ldrb	r3, [r2, #13]
 801aaa4:	015b      	lsls	r3, r3, #5
 801aaa6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801aaaa:	7993      	ldrb	r3, [r2, #6]
 801aaac:	430b      	orrs	r3, r1
 801aaae:	2105      	movs	r1, #5
 801aab0:	005b      	lsls	r3, r3, #1
 801aab2:	fb93 f3f1 	sdiv	r3, r3, r1
 801aab6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801aaba:	440b      	add	r3, r1
 801aabc:	e756      	b.n	801a96c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801aabe:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801aac2:	4283      	cmp	r3, r0
 801aac4:	d809      	bhi.n	801aada <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801aac6:	f240 60df 	movw	r0, #1759	; 0x6df
 801aaca:	4283      	cmp	r3, r0
 801aacc:	f4bf af7d 	bcs.w	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aad0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801aad4:	2b05      	cmp	r3, #5
 801aad6:	d8d4      	bhi.n	801aa82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801aad8:	e777      	b.n	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801aada:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801aade:	4283      	cmp	r3, r0
 801aae0:	d09a      	beq.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aae2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801aae6:	4283      	cmp	r3, r0
 801aae8:	e7ca      	b.n	801aa80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801aaea:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801aaee:	d22b      	bcs.n	801ab48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801aaf0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801aaf4:	4283      	cmp	r3, r0
 801aaf6:	d28f      	bcs.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801aaf8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801aafc:	4283      	cmp	r3, r0
 801aafe:	d816      	bhi.n	801ab2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ab00:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ab04:	4283      	cmp	r3, r0
 801ab06:	f4bf af60 	bcs.w	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ab0a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ab0e:	4283      	cmp	r3, r0
 801ab10:	d80a      	bhi.n	801ab28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ab12:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ab16:	4283      	cmp	r3, r0
 801ab18:	f4bf af57 	bcs.w	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ab1c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ab20:	4283      	cmp	r3, r0
 801ab22:	f43f af79 	beq.w	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ab26:	e7ac      	b.n	801aa82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ab28:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ab2c:	e7f8      	b.n	801ab20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ab2e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ab32:	4283      	cmp	r3, r0
 801ab34:	d802      	bhi.n	801ab3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ab36:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ab3a:	e798      	b.n	801aa6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ab3c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ab40:	4283      	cmp	r3, r0
 801ab42:	f47f af42 	bne.w	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ab46:	e767      	b.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ab48:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ab4c:	4283      	cmp	r3, r0
 801ab4e:	f43f af63 	beq.w	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ab52:	d802      	bhi.n	801ab5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ab54:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ab58:	e7f2      	b.n	801ab40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ab5a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ab5e:	4283      	cmp	r3, r0
 801ab60:	d805      	bhi.n	801ab6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ab62:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ab66:	4283      	cmp	r3, r0
 801ab68:	f4ff af2f 	bcc.w	801a9ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ab6c:	e754      	b.n	801aa18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ab6e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ab72:	4283      	cmp	r3, r0
 801ab74:	e7af      	b.n	801aad6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ab76:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ab7a:	4617      	mov	r7, r2
 801ab7c:	f102 0808 	add.w	r8, r2, #8
 801ab80:	4666      	mov	r6, ip
 801ab82:	6838      	ldr	r0, [r7, #0]
 801ab84:	3708      	adds	r7, #8
 801ab86:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ab8a:	46e6      	mov	lr, ip
 801ab8c:	4547      	cmp	r7, r8
 801ab8e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801ab92:	46f4      	mov	ip, lr
 801ab94:	d1f5      	bne.n	801ab82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801ab96:	6838      	ldr	r0, [r7, #0]
 801ab98:	f8ce 0000 	str.w	r0, [lr]
 801ab9c:	88b9      	ldrh	r1, [r7, #4]
 801ab9e:	f8ae 1004 	strh.w	r1, [lr, #4]
 801aba2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801aba6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801abaa:	d009      	beq.n	801abc0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801abac:	7b51      	ldrb	r1, [r2, #13]
 801abae:	7992      	ldrb	r2, [r2, #6]
 801abb0:	0149      	lsls	r1, r1, #5
 801abb2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801abb6:	4311      	orrs	r1, r2
 801abb8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801abbc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801abc0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801abc4:	b2ad      	uxth	r5, r5
 801abc6:	d00d      	beq.n	801abe4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801abc8:	442b      	add	r3, r5
 801abca:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801abce:	b29b      	uxth	r3, r3
 801abd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801abd4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801abd8:	10db      	asrs	r3, r3, #3
 801abda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801abde:	4313      	orrs	r3, r2
 801abe0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801abe4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801abe8:	00cb      	lsls	r3, r1, #3
 801abea:	064f      	lsls	r7, r1, #25
 801abec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801abf0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801abf4:	ea43 0302 	orr.w	r3, r3, r2
 801abf8:	bf44      	itt	mi
 801abfa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801abfe:	b21b      	sxthmi	r3, r3
 801ac00:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ac04:	1b5b      	subs	r3, r3, r5
 801ac06:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ac0a:	4632      	mov	r2, r6
 801ac0c:	e6f9      	b.n	801aa02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ac0e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ac12:	4617      	mov	r7, r2
 801ac14:	f102 0908 	add.w	r9, r2, #8
 801ac18:	4666      	mov	r6, ip
 801ac1a:	6838      	ldr	r0, [r7, #0]
 801ac1c:	3708      	adds	r7, #8
 801ac1e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801ac22:	46e0      	mov	r8, ip
 801ac24:	454f      	cmp	r7, r9
 801ac26:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ac2a:	46c4      	mov	ip, r8
 801ac2c:	d1f5      	bne.n	801ac1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801ac2e:	6838      	ldr	r0, [r7, #0]
 801ac30:	f8c8 0000 	str.w	r0, [r8]
 801ac34:	88b9      	ldrh	r1, [r7, #4]
 801ac36:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ac3a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801ac3e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801ac42:	d009      	beq.n	801ac58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801ac44:	7b51      	ldrb	r1, [r2, #13]
 801ac46:	7992      	ldrb	r2, [r2, #6]
 801ac48:	0149      	lsls	r1, r1, #5
 801ac4a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ac4e:	4311      	orrs	r1, r2
 801ac50:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ac54:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801ac58:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801ac5c:	d00e      	beq.n	801ac7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801ac5e:	eba3 030e 	sub.w	r3, r3, lr
 801ac62:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ac6c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ac70:	10db      	asrs	r3, r3, #3
 801ac72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ac76:	4313      	orrs	r3, r2
 801ac78:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ac7c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801ac80:	00cb      	lsls	r3, r1, #3
 801ac82:	0648      	lsls	r0, r1, #25
 801ac84:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ac88:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801ac8c:	ea43 0302 	orr.w	r3, r3, r2
 801ac90:	bf44      	itt	mi
 801ac92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ac96:	b21b      	sxthmi	r3, r3
 801ac98:	1b5d      	subs	r5, r3, r5
 801ac9a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ac9e:	e7b4      	b.n	801ac0a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801aca0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aca4:	461e      	mov	r6, r3
 801aca6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801aca8:	4604      	mov	r4, r0
 801acaa:	4617      	mov	r7, r2
 801acac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801acb0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801acb4:	f7ec fb8e 	bl	80073d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801acb8:	4605      	mov	r5, r0
 801acba:	b918      	cbnz	r0, 801acc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801acbc:	6030      	str	r0, [r6, #0]
 801acbe:	4628      	mov	r0, r5
 801acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acc4:	683b      	ldr	r3, [r7, #0]
 801acc6:	4601      	mov	r1, r0
 801acc8:	4638      	mov	r0, r7
 801acca:	68db      	ldr	r3, [r3, #12]
 801accc:	4798      	blx	r3
 801acce:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801acd2:	4602      	mov	r2, r0
 801acd4:	6030      	str	r0, [r6, #0]
 801acd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801acda:	d213      	bcs.n	801ad04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801acdc:	4643      	mov	r3, r8
 801acde:	4639      	mov	r1, r7
 801ace0:	4620      	mov	r0, r4
 801ace2:	f7ff fe39 	bl	801a958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ace6:	6030      	str	r0, [r6, #0]
 801ace8:	6833      	ldr	r3, [r6, #0]
 801acea:	b143      	cbz	r3, 801acfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801acec:	7b5a      	ldrb	r2, [r3, #13]
 801acee:	7a9b      	ldrb	r3, [r3, #10]
 801acf0:	0052      	lsls	r2, r2, #1
 801acf2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801acf6:	4313      	orrs	r3, r2
 801acf8:	bf0c      	ite	eq
 801acfa:	2301      	moveq	r3, #1
 801acfc:	2300      	movne	r3, #0
 801acfe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ad02:	e7dc      	b.n	801acbe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801ad04:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	2b7f      	cmp	r3, #127	; 0x7f
 801ad0c:	d804      	bhi.n	801ad18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801ad0e:	4639      	mov	r1, r7
 801ad10:	4620      	mov	r0, r4
 801ad12:	f7ff fd15 	bl	801a740 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ad16:	e7e6      	b.n	801ace6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801ad18:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d0e3      	beq.n	801ace8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ad20:	f640 1302 	movw	r3, #2306	; 0x902
 801ad24:	429d      	cmp	r5, r3
 801ad26:	d1df      	bne.n	801ace8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801ad28:	4601      	mov	r1, r0
 801ad2a:	4620      	mov	r0, r4
 801ad2c:	f7ff fcd9 	bl	801a6e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801ad30:	e7d9      	b.n	801ace6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801ad32 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801ad32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad36:	461e      	mov	r6, r3
 801ad38:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ad3a:	4604      	mov	r4, r0
 801ad3c:	4617      	mov	r7, r2
 801ad3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801ad42:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801ad46:	f7ec fb45 	bl	80073d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ad4a:	4605      	mov	r5, r0
 801ad4c:	b918      	cbnz	r0, 801ad56 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801ad4e:	6030      	str	r0, [r6, #0]
 801ad50:	4628      	mov	r0, r5
 801ad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad56:	683b      	ldr	r3, [r7, #0]
 801ad58:	4601      	mov	r1, r0
 801ad5a:	4638      	mov	r0, r7
 801ad5c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ad60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ad64:	47c8      	blx	r9
 801ad66:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ad6a:	4602      	mov	r2, r0
 801ad6c:	6030      	str	r0, [r6, #0]
 801ad6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad72:	d213      	bcs.n	801ad9c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801ad74:	4643      	mov	r3, r8
 801ad76:	4639      	mov	r1, r7
 801ad78:	4620      	mov	r0, r4
 801ad7a:	f7ff fded 	bl	801a958 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801ad7e:	6030      	str	r0, [r6, #0]
 801ad80:	6833      	ldr	r3, [r6, #0]
 801ad82:	b143      	cbz	r3, 801ad96 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801ad84:	7b5a      	ldrb	r2, [r3, #13]
 801ad86:	7a9b      	ldrb	r3, [r3, #10]
 801ad88:	0052      	lsls	r2, r2, #1
 801ad8a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ad8e:	4313      	orrs	r3, r2
 801ad90:	bf0c      	ite	eq
 801ad92:	2301      	moveq	r3, #1
 801ad94:	2300      	movne	r3, #0
 801ad96:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801ad9a:	e7d9      	b.n	801ad50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801ad9c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ada0:	b29b      	uxth	r3, r3
 801ada2:	2b7f      	cmp	r3, #127	; 0x7f
 801ada4:	d804      	bhi.n	801adb0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801ada6:	4639      	mov	r1, r7
 801ada8:	4620      	mov	r0, r4
 801adaa:	f7ff fcc9 	bl	801a740 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801adae:	e7e6      	b.n	801ad7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801adb0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d0e3      	beq.n	801ad80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801adb8:	f640 1302 	movw	r3, #2306	; 0x902
 801adbc:	429d      	cmp	r5, r3
 801adbe:	d1df      	bne.n	801ad80 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801adc0:	4601      	mov	r1, r0
 801adc2:	4620      	mov	r0, r4
 801adc4:	f7ff fc8d 	bl	801a6e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801adc8:	e7d9      	b.n	801ad7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801adca <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801adca:	b510      	push	{r4, lr}
 801adcc:	4604      	mov	r4, r0
 801adce:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801add2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801add4:	b1e1      	cbz	r1, 801ae10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801add6:	2b0a      	cmp	r3, #10
 801add8:	d02d      	beq.n	801ae36 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801adda:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801addc:	3901      	subs	r1, #1
 801adde:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801ade2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801ade4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801ade8:	1c51      	adds	r1, r2, #1
 801adea:	b289      	uxth	r1, r1
 801adec:	2901      	cmp	r1, #1
 801adee:	bf8a      	itet	hi
 801adf0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801adf4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801adf6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801adf8:	1c5a      	adds	r2, r3, #1
 801adfa:	8722      	strh	r2, [r4, #56]	; 0x38
 801adfc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801adfe:	4413      	add	r3, r2
 801ae00:	b29b      	uxth	r3, r3
 801ae02:	2b09      	cmp	r3, #9
 801ae04:	bf88      	it	hi
 801ae06:	3b0a      	subhi	r3, #10
 801ae08:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae0c:	8458      	strh	r0, [r3, #34]	; 0x22
 801ae0e:	e7de      	b.n	801adce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801ae10:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ae12:	2b0a      	cmp	r3, #10
 801ae14:	d00f      	beq.n	801ae36 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801ae16:	4620      	mov	r0, r4
 801ae18:	f7ff fc11 	bl	801a63e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801ae1c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801ae1e:	1c5a      	adds	r2, r3, #1
 801ae20:	8722      	strh	r2, [r4, #56]	; 0x38
 801ae22:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801ae24:	4413      	add	r3, r2
 801ae26:	b29b      	uxth	r3, r3
 801ae28:	2b09      	cmp	r3, #9
 801ae2a:	bf88      	it	hi
 801ae2c:	3b0a      	subhi	r3, #10
 801ae2e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ae32:	8458      	strh	r0, [r3, #34]	; 0x22
 801ae34:	e7ec      	b.n	801ae10 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801ae36:	bd10      	pop	{r4, pc}

0801ae38 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801ae38:	b538      	push	{r3, r4, r5, lr}
 801ae3a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801ae42:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801ae44:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801ae46:	3a01      	subs	r2, #1
 801ae48:	8702      	strh	r2, [r0, #56]	; 0x38
 801ae4a:	1c5a      	adds	r2, r3, #1
 801ae4c:	b292      	uxth	r2, r2
 801ae4e:	2a09      	cmp	r2, #9
 801ae50:	bf8a      	itet	hi
 801ae52:	3b09      	subhi	r3, #9
 801ae54:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801ae56:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801ae58:	f7ff ffb7 	bl	801adca <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ae5c:	8c23      	ldrh	r3, [r4, #32]
 801ae5e:	2b01      	cmp	r3, #1
 801ae60:	bf9c      	itt	ls
 801ae62:	3301      	addls	r3, #1
 801ae64:	8423      	strhls	r3, [r4, #32]
 801ae66:	8be3      	ldrh	r3, [r4, #30]
 801ae68:	b90b      	cbnz	r3, 801ae6e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ae6a:	2302      	movs	r3, #2
 801ae6c:	83e3      	strh	r3, [r4, #30]
 801ae6e:	8be3      	ldrh	r3, [r4, #30]
 801ae70:	4628      	mov	r0, r5
 801ae72:	3b01      	subs	r3, #1
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	83e3      	strh	r3, [r4, #30]
 801ae78:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ae7c:	8365      	strh	r5, [r4, #26]
 801ae7e:	bd38      	pop	{r3, r4, r5, pc}

0801ae80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ae80:	428a      	cmp	r2, r1
 801ae82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae86:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801ae88:	d932      	bls.n	801aef0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801ae8a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801ae8c:	1a54      	subs	r4, r2, r1
 801ae8e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801ae92:	19ee      	adds	r6, r5, r7
 801ae94:	fa1f fe84 	uxth.w	lr, r4
 801ae98:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801ae9c:	3e01      	subs	r6, #1
 801ae9e:	b2b4      	uxth	r4, r6
 801aea0:	eba4 090e 	sub.w	r9, r4, lr
 801aea4:	fa1f f989 	uxth.w	r9, r9
 801aea8:	2c09      	cmp	r4, #9
 801aeaa:	4626      	mov	r6, r4
 801aeac:	bf88      	it	hi
 801aeae:	f1a4 060a 	subhi.w	r6, r4, #10
 801aeb2:	f1bc 0f00 	cmp.w	ip, #0
 801aeb6:	f104 34ff 	add.w	r4, r4, #4294967295
 801aeba:	bf08      	it	eq
 801aebc:	f04f 0c02 	moveq.w	ip, #2
 801aec0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801aec4:	b2a4      	uxth	r4, r4
 801aec6:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aeca:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801aece:	454c      	cmp	r4, r9
 801aed0:	fa1f fc8c 	uxth.w	ip, ip
 801aed4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801aed8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801aedc:	d1e4      	bne.n	801aea8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801aede:	eba5 050e 	sub.w	r5, r5, lr
 801aee2:	eb0e 0408 	add.w	r4, lr, r8
 801aee6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801aeea:	8705      	strh	r5, [r0, #56]	; 0x38
 801aeec:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801aef0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801aef2:	250a      	movs	r5, #10
 801aef4:	1a64      	subs	r4, r4, r1
 801aef6:	4439      	add	r1, r7
 801aef8:	b289      	uxth	r1, r1
 801aefa:	8704      	strh	r4, [r0, #56]	; 0x38
 801aefc:	2909      	cmp	r1, #9
 801aefe:	bf88      	it	hi
 801af00:	390a      	subhi	r1, #10
 801af02:	86c1      	strh	r1, [r0, #54]	; 0x36
 801af04:	b18a      	cbz	r2, 801af2a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801af06:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801af08:	3a01      	subs	r2, #1
 801af0a:	3101      	adds	r1, #1
 801af0c:	b292      	uxth	r2, r2
 801af0e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801af12:	8701      	strh	r1, [r0, #56]	; 0x38
 801af14:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801af16:	b901      	cbnz	r1, 801af1a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801af18:	86c5      	strh	r5, [r0, #54]	; 0x36
 801af1a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801af1c:	3901      	subs	r1, #1
 801af1e:	b289      	uxth	r1, r1
 801af20:	86c1      	strh	r1, [r0, #54]	; 0x36
 801af22:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801af26:	844c      	strh	r4, [r1, #34]	; 0x22
 801af28:	e7ec      	b.n	801af04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801af2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801af2e:	f7ff bf4c 	b.w	801adca <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801af32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801af32:	b570      	push	{r4, r5, r6, lr}
 801af34:	2500      	movs	r5, #0
 801af36:	4295      	cmp	r5, r2
 801af38:	d011      	beq.n	801af5e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801af3a:	8bc4      	ldrh	r4, [r0, #30]
 801af3c:	f831 6b02 	ldrh.w	r6, [r1], #2
 801af40:	4414      	add	r4, r2
 801af42:	3c01      	subs	r4, #1
 801af44:	1b64      	subs	r4, r4, r5
 801af46:	b2a4      	uxth	r4, r4
 801af48:	2c01      	cmp	r4, #1
 801af4a:	bf88      	it	hi
 801af4c:	3c02      	subhi	r4, #2
 801af4e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801af52:	8b64      	ldrh	r4, [r4, #26]
 801af54:	42b4      	cmp	r4, r6
 801af56:	d117      	bne.n	801af88 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801af58:	3501      	adds	r5, #1
 801af5a:	b2ad      	uxth	r5, r5
 801af5c:	e7eb      	b.n	801af36 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801af5e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801af62:	2400      	movs	r4, #0
 801af64:	4413      	add	r3, r2
 801af66:	b2a2      	uxth	r2, r4
 801af68:	429a      	cmp	r2, r3
 801af6a:	da0f      	bge.n	801af8c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801af6c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801af6e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801af72:	3401      	adds	r4, #1
 801af74:	4432      	add	r2, r6
 801af76:	b292      	uxth	r2, r2
 801af78:	2a09      	cmp	r2, #9
 801af7a:	bf88      	it	hi
 801af7c:	3a0a      	subhi	r2, #10
 801af7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801af82:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801af84:	42aa      	cmp	r2, r5
 801af86:	d0ee      	beq.n	801af66 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801af88:	2000      	movs	r0, #0
 801af8a:	bd70      	pop	{r4, r5, r6, pc}
 801af8c:	2001      	movs	r0, #1
 801af8e:	e7fc      	b.n	801af8a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801af90 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801af90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af94:	4605      	mov	r5, r0
 801af96:	4616      	mov	r6, r2
 801af98:	1c8c      	adds	r4, r1, #2
 801af9a:	8809      	ldrh	r1, [r1, #0]
 801af9c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801afa0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801afa4:	42b3      	cmp	r3, r6
 801afa6:	d124      	bne.n	801aff2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801afa8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801afac:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801afb0:	f001 070f 	and.w	r7, r1, #15
 801afb4:	4652      	mov	r2, sl
 801afb6:	f8cd 8000 	str.w	r8, [sp]
 801afba:	464b      	mov	r3, r9
 801afbc:	4621      	mov	r1, r4
 801afbe:	4628      	mov	r0, r5
 801afc0:	f7ff ffb7 	bl	801af32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801afc4:	4683      	mov	fp, r0
 801afc6:	b168      	cbz	r0, 801afe4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801afc8:	eb0a 0109 	add.w	r1, sl, r9
 801afcc:	463a      	mov	r2, r7
 801afce:	4628      	mov	r0, r5
 801afd0:	4441      	add	r1, r8
 801afd2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801afd6:	4649      	mov	r1, r9
 801afd8:	f7ff ff52 	bl	801ae80 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801afdc:	4658      	mov	r0, fp
 801afde:	b003      	add	sp, #12
 801afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afe4:	eb07 010a 	add.w	r1, r7, sl
 801afe8:	4449      	add	r1, r9
 801afea:	4441      	add	r1, r8
 801afec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801aff0:	e7d2      	b.n	801af98 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801aff2:	f04f 0b00 	mov.w	fp, #0
 801aff6:	e7f1      	b.n	801afdc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801aff8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801aff8:	b570      	push	{r4, r5, r6, lr}
 801affa:	8810      	ldrh	r0, [r2, #0]
 801affc:	4298      	cmp	r0, r3
 801affe:	d817      	bhi.n	801b030 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b000:	1e48      	subs	r0, r1, #1
 801b002:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801b006:	4298      	cmp	r0, r3
 801b008:	d312      	bcc.n	801b030 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b00a:	2400      	movs	r4, #0
 801b00c:	428c      	cmp	r4, r1
 801b00e:	d20f      	bcs.n	801b030 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801b010:	1860      	adds	r0, r4, r1
 801b012:	1040      	asrs	r0, r0, #1
 801b014:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801b018:	0085      	lsls	r5, r0, #2
 801b01a:	42b3      	cmp	r3, r6
 801b01c:	d902      	bls.n	801b024 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801b01e:	3001      	adds	r0, #1
 801b020:	b284      	uxth	r4, r0
 801b022:	e7f3      	b.n	801b00c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b024:	d201      	bcs.n	801b02a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801b026:	b281      	uxth	r1, r0
 801b028:	e7f0      	b.n	801b00c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801b02a:	442a      	add	r2, r5
 801b02c:	8850      	ldrh	r0, [r2, #2]
 801b02e:	bd70      	pop	{r4, r5, r6, pc}
 801b030:	2000      	movs	r0, #0
 801b032:	e7fc      	b.n	801b02e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801b034 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801b034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b038:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801b03a:	4604      	mov	r4, r0
 801b03c:	260b      	movs	r6, #11
 801b03e:	886f      	ldrh	r7, [r5, #2]
 801b040:	087f      	lsrs	r7, r7, #1
 801b042:	3e01      	subs	r6, #1
 801b044:	d013      	beq.n	801b06e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b046:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801b048:	462a      	mov	r2, r5
 801b04a:	4639      	mov	r1, r7
 801b04c:	4620      	mov	r0, r4
 801b04e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b052:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801b056:	4643      	mov	r3, r8
 801b058:	f7ff ffce 	bl	801aff8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801b05c:	b138      	cbz	r0, 801b06e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801b05e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801b062:	4642      	mov	r2, r8
 801b064:	4620      	mov	r0, r4
 801b066:	f7ff ff93 	bl	801af90 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801b06a:	2800      	cmp	r0, #0
 801b06c:	d1e9      	bne.n	801b042 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801b06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801b074 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801b074:	b570      	push	{r4, r5, r6, lr}
 801b076:	694a      	ldr	r2, [r1, #20]
 801b078:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801b07a:	684b      	ldr	r3, [r1, #4]
 801b07c:	1b54      	subs	r4, r2, r5
 801b07e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801b080:	f000 8106 	beq.w	801b290 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801b084:	1b9b      	subs	r3, r3, r6
 801b086:	d003      	beq.n	801b090 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b088:	4363      	muls	r3, r4
 801b08a:	2210      	movs	r2, #16
 801b08c:	fb93 f3f2 	sdiv	r3, r3, r2
 801b090:	680c      	ldr	r4, [r1, #0]
 801b092:	698a      	ldr	r2, [r1, #24]
 801b094:	1b65      	subs	r5, r4, r5
 801b096:	f000 80fd 	beq.w	801b294 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801b09a:	1b92      	subs	r2, r2, r6
 801b09c:	d003      	beq.n	801b0a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b09e:	436a      	muls	r2, r5
 801b0a0:	2410      	movs	r4, #16
 801b0a2:	fb92 f2f4 	sdiv	r2, r2, r4
 801b0a6:	1a9b      	subs	r3, r3, r2
 801b0a8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801b2d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801b0ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b0b0:	460a      	mov	r2, r1
 801b0b2:	ee07 3a90 	vmov	s15, r3
 801b0b6:	f100 040c 	add.w	r4, r0, #12
 801b0ba:	4603      	mov	r3, r0
 801b0bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b0c4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801b0c8:	eeb1 6a43 	vneg.f32	s12, s6
 801b0cc:	edd2 7a02 	vldr	s15, [r2, #8]
 801b0d0:	3214      	adds	r2, #20
 801b0d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801b0d6:	ece3 6a01 	vstmia	r3!, {s13}
 801b0da:	429c      	cmp	r4, r3
 801b0dc:	ed52 7a02 	vldr	s15, [r2, #-8]
 801b0e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b0e4:	edc3 7a02 	vstr	s15, [r3, #8]
 801b0e8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801b0ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b0f0:	edc3 7a05 	vstr	s15, [r3, #20]
 801b0f4:	d1ea      	bne.n	801b0cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801b0f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b0f8:	698b      	ldr	r3, [r1, #24]
 801b0fa:	edd0 4a02 	vldr	s9, [r0, #8]
 801b0fe:	1a9b      	subs	r3, r3, r2
 801b100:	edd0 3a00 	vldr	s7, [r0]
 801b104:	edd0 6a01 	vldr	s13, [r0, #4]
 801b108:	ee07 3a90 	vmov	s15, r3
 801b10c:	684b      	ldr	r3, [r1, #4]
 801b10e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801b112:	ed90 5a05 	vldr	s10, [r0, #20]
 801b116:	1a9b      	subs	r3, r3, r2
 801b118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b11c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801b120:	ed90 2a03 	vldr	s4, [r0, #12]
 801b124:	ee07 3a10 	vmov	s14, r3
 801b128:	edd0 5a04 	vldr	s11, [r0, #16]
 801b12c:	ee67 7a84 	vmul.f32	s15, s15, s8
 801b130:	ed90 1a07 	vldr	s2, [r0, #28]
 801b134:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b138:	edd0 2a06 	vldr	s5, [r0, #24]
 801b13c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801b140:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801b144:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b148:	ee32 5a45 	vsub.f32	s10, s4, s10
 801b14c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b150:	ee67 7a83 	vmul.f32	s15, s15, s6
 801b154:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801b158:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b15a:	694a      	ldr	r2, [r1, #20]
 801b15c:	1b13      	subs	r3, r2, r4
 801b15e:	ee07 3a10 	vmov	s14, r3
 801b162:	680b      	ldr	r3, [r1, #0]
 801b164:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b168:	1b1b      	subs	r3, r3, r4
 801b16a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b16e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801b172:	ee07 3a10 	vmov	s14, r3
 801b176:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b17a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b17e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801b182:	ee64 4a86 	vmul.f32	s9, s9, s12
 801b186:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801b18a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b18c:	698b      	ldr	r3, [r1, #24]
 801b18e:	1a9b      	subs	r3, r3, r2
 801b190:	ee06 3a90 	vmov	s13, r3
 801b194:	684b      	ldr	r3, [r1, #4]
 801b196:	1a9b      	subs	r3, r3, r2
 801b198:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b19c:	ee07 3a10 	vmov	s14, r3
 801b1a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 801b1a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b1a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801b1ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b1b0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801b1b4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801b1b8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801b1bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b1be:	694a      	ldr	r2, [r1, #20]
 801b1c0:	1b13      	subs	r3, r2, r4
 801b1c2:	ee07 3a10 	vmov	s14, r3
 801b1c6:	680b      	ldr	r3, [r1, #0]
 801b1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b1cc:	1b1b      	subs	r3, r3, r4
 801b1ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b1d2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801b1d6:	ee07 3a10 	vmov	s14, r3
 801b1da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b1de:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b1e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 801b1e6:	edd0 5a08 	vldr	s11, [r0, #32]
 801b1ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 801b1ee:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801b1f2:	ee25 5a06 	vmul.f32	s10, s10, s12
 801b1f6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801b1fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b1fc:	698b      	ldr	r3, [r1, #24]
 801b1fe:	1a9b      	subs	r3, r3, r2
 801b200:	ee07 3a10 	vmov	s14, r3
 801b204:	684b      	ldr	r3, [r1, #4]
 801b206:	1a9b      	subs	r3, r3, r2
 801b208:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b20c:	ee01 3a90 	vmov	s3, r3
 801b210:	ee27 7a04 	vmul.f32	s14, s14, s8
 801b214:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801b218:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801b21c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801b220:	eea1 7a21 	vfma.f32	s14, s2, s3
 801b224:	ee27 7a03 	vmul.f32	s14, s14, s6
 801b228:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b22c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801b22e:	694a      	ldr	r2, [r1, #20]
 801b230:	1b13      	subs	r3, r2, r4
 801b232:	ee03 3a10 	vmov	s6, r3
 801b236:	680b      	ldr	r3, [r1, #0]
 801b238:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b23c:	1b1b      	subs	r3, r3, r4
 801b23e:	ee23 3a04 	vmul.f32	s6, s6, s8
 801b242:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801b246:	ee03 3a10 	vmov	s6, r3
 801b24a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801b24e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801b252:	eee1 5a04 	vfma.f32	s11, s2, s8
 801b256:	ee25 6a86 	vmul.f32	s12, s11, s12
 801b25a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801b25e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801b262:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801b266:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801b26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b26e:	dd13      	ble.n	801b298 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801b270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b274:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801b278:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b27a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801b27e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b286:	dd15      	ble.n	801b2b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801b288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b28c:	6403      	str	r3, [r0, #64]	; 0x40
 801b28e:	bd70      	pop	{r4, r5, r6, pc}
 801b290:	4623      	mov	r3, r4
 801b292:	e6fd      	b.n	801b090 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801b294:	462a      	mov	r2, r5
 801b296:	e706      	b.n	801b0a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801b298:	d502      	bpl.n	801b2a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801b29a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b29e:	e7e9      	b.n	801b274 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801b2a0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801b2a4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801b2a8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2b0:	dade      	bge.n	801b270 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801b2b2:	e7f2      	b.n	801b29a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801b2b4:	d502      	bpl.n	801b2bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801b2b6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801b2ba:	e7e7      	b.n	801b28c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801b2bc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801b2c0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801b2c4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b2c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2cc:	dadc      	bge.n	801b288 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801b2ce:	e7f2      	b.n	801b2b6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801b2d0:	3d800000 	.word	0x3d800000

0801b2d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2d8:	2714      	movs	r7, #20
 801b2da:	435f      	muls	r7, r3
 801b2dc:	eb02 0c07 	add.w	ip, r2, r7
 801b2e0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801b2e4:	f115 0e0f 	adds.w	lr, r5, #15
 801b2e8:	f100 80a2 	bmi.w	801b430 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801b2ec:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801b2f0:	9c08      	ldr	r4, [sp, #32]
 801b2f2:	2614      	movs	r6, #20
 801b2f4:	f8c0 e014 	str.w	lr, [r0, #20]
 801b2f8:	4366      	muls	r6, r4
 801b2fa:	eb02 0806 	add.w	r8, r2, r6
 801b2fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801b302:	f115 040f 	adds.w	r4, r5, #15
 801b306:	f100 809f 	bmi.w	801b448 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801b30a:	1124      	asrs	r4, r4, #4
 801b30c:	eba4 040e 	sub.w	r4, r4, lr
 801b310:	6184      	str	r4, [r0, #24]
 801b312:	2c00      	cmp	r4, #0
 801b314:	f000 808a 	beq.w	801b42c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801b318:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801b31c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b320:	5995      	ldr	r5, [r2, r6]
 801b322:	eba4 0809 	sub.w	r8, r4, r9
 801b326:	59d4      	ldr	r4, [r2, r7]
 801b328:	eba5 0a04 	sub.w	sl, r5, r4
 801b32c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801b330:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801b334:	fb0e fe05 	mul.w	lr, lr, r5
 801b338:	fb0a ee19 	mls	lr, sl, r9, lr
 801b33c:	fb08 e404 	mla	r4, r8, r4, lr
 801b340:	3c01      	subs	r4, #1
 801b342:	19a4      	adds	r4, r4, r6
 801b344:	f100 808c 	bmi.w	801b460 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801b348:	fb94 fef6 	sdiv	lr, r4, r6
 801b34c:	fb06 441e 	mls	r4, r6, lr, r4
 801b350:	f8c0 e000 	str.w	lr, [r0]
 801b354:	6104      	str	r4, [r0, #16]
 801b356:	2d00      	cmp	r5, #0
 801b358:	f2c0 8095 	blt.w	801b486 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801b35c:	fb95 f4f6 	sdiv	r4, r5, r6
 801b360:	fb06 5514 	mls	r5, r6, r4, r5
 801b364:	6044      	str	r4, [r0, #4]
 801b366:	6085      	str	r5, [r0, #8]
 801b368:	60c6      	str	r6, [r0, #12]
 801b36a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801b36e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801b372:	6945      	ldr	r5, [r0, #20]
 801b374:	59d2      	ldr	r2, [r2, r7]
 801b376:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801b37a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801b4a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801b37e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b382:	ee07 4a10 	vmov	s14, r4
 801b386:	6804      	ldr	r4, [r0, #0]
 801b388:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801b38c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801b390:	ee07 2a90 	vmov	s15, r2
 801b394:	ee27 7a26 	vmul.f32	s14, s14, s13
 801b398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b39c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801b3a0:	edd3 6a00 	vldr	s13, [r3]
 801b3a4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801b3a8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801b3ac:	eee6 6a27 	vfma.f32	s13, s12, s15
 801b3b0:	edc0 6a07 	vstr	s13, [r0, #28]
 801b3b4:	edd0 6a01 	vldr	s13, [r0, #4]
 801b3b8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801b3bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801b3c0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801b3c4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b3c8:	ed80 6a08 	vstr	s12, [r0, #32]
 801b3cc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801b3ce:	6242      	str	r2, [r0, #36]	; 0x24
 801b3d0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801b3d4:	ed93 6a03 	vldr	s12, [r3, #12]
 801b3d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b3dc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b3e0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801b3e4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801b3e8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801b3ec:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801b3f0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801b3f4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801b3f8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801b3fa:	6302      	str	r2, [r0, #48]	; 0x30
 801b3fc:	ed93 6a06 	vldr	s12, [r3, #24]
 801b400:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801b404:	eea5 6a87 	vfma.f32	s12, s11, s14
 801b408:	eeb0 7a46 	vmov.f32	s14, s12
 801b40c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801b410:	eea6 7a27 	vfma.f32	s14, s12, s15
 801b414:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801b418:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801b41c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801b420:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b424:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801b428:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801b42a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b430:	2410      	movs	r4, #16
 801b432:	f1c5 0501 	rsb	r5, r5, #1
 801b436:	fb9e fef4 	sdiv	lr, lr, r4
 801b43a:	f015 050f 	ands.w	r5, r5, #15
 801b43e:	bf18      	it	ne
 801b440:	2501      	movne	r5, #1
 801b442:	ebae 0e05 	sub.w	lr, lr, r5
 801b446:	e753      	b.n	801b2f0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801b448:	f04f 0910 	mov.w	r9, #16
 801b44c:	f1c5 0501 	rsb	r5, r5, #1
 801b450:	fb94 f4f9 	sdiv	r4, r4, r9
 801b454:	f015 050f 	ands.w	r5, r5, #15
 801b458:	bf18      	it	ne
 801b45a:	2501      	movne	r5, #1
 801b45c:	1b64      	subs	r4, r4, r5
 801b45e:	e755      	b.n	801b30c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801b460:	4264      	negs	r4, r4
 801b462:	fb94 fef6 	sdiv	lr, r4, r6
 801b466:	f1ce 0800 	rsb	r8, lr, #0
 801b46a:	fb06 441e 	mls	r4, r6, lr, r4
 801b46e:	f8c0 8000 	str.w	r8, [r0]
 801b472:	6104      	str	r4, [r0, #16]
 801b474:	2c00      	cmp	r4, #0
 801b476:	f43f af6e 	beq.w	801b356 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801b47a:	ea6f 0e0e 	mvn.w	lr, lr
 801b47e:	1b34      	subs	r4, r6, r4
 801b480:	f8c0 e000 	str.w	lr, [r0]
 801b484:	e766      	b.n	801b354 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801b486:	426d      	negs	r5, r5
 801b488:	fb95 f4f6 	sdiv	r4, r5, r6
 801b48c:	f1c4 0e00 	rsb	lr, r4, #0
 801b490:	fb06 5514 	mls	r5, r6, r4, r5
 801b494:	f8c0 e004 	str.w	lr, [r0, #4]
 801b498:	6085      	str	r5, [r0, #8]
 801b49a:	2d00      	cmp	r5, #0
 801b49c:	f43f af64 	beq.w	801b368 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801b4a0:	43e4      	mvns	r4, r4
 801b4a2:	1b75      	subs	r5, r6, r5
 801b4a4:	6044      	str	r4, [r0, #4]
 801b4a6:	e75e      	b.n	801b366 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801b4a8:	3d800000 	.word	0x3d800000

0801b4ac <_ZN8touchgfx7Unicode6strlenEPKt>:
 801b4ac:	4602      	mov	r2, r0
 801b4ae:	b148      	cbz	r0, 801b4c4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	b298      	uxth	r0, r3
 801b4b4:	3301      	adds	r3, #1
 801b4b6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801b4ba:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801b4be:	2900      	cmp	r1, #0
 801b4c0:	d1f7      	bne.n	801b4b2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801b4c2:	4770      	bx	lr
 801b4c4:	4770      	bx	lr

0801b4c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801b4c6:	b530      	push	{r4, r5, lr}
 801b4c8:	4604      	mov	r4, r0
 801b4ca:	b159      	cbz	r1, 801b4e4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801b4cc:	b148      	cbz	r0, 801b4e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	b298      	uxth	r0, r3
 801b4d2:	4282      	cmp	r2, r0
 801b4d4:	d905      	bls.n	801b4e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801b4d6:	5ccd      	ldrb	r5, [r1, r3]
 801b4d8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801b4dc:	3301      	adds	r3, #1
 801b4de:	2d00      	cmp	r5, #0
 801b4e0:	d1f6      	bne.n	801b4d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801b4e2:	bd30      	pop	{r4, r5, pc}
 801b4e4:	4608      	mov	r0, r1
 801b4e6:	e7fc      	b.n	801b4e2 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801b4e8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4ea:	468c      	mov	ip, r1
 801b4ec:	b08b      	sub	sp, #44	; 0x2c
 801b4ee:	2100      	movs	r1, #0
 801b4f0:	ae01      	add	r6, sp, #4
 801b4f2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b4f6:	211f      	movs	r1, #31
 801b4f8:	fbb0 f7f3 	udiv	r7, r0, r3
 801b4fc:	fb03 0517 	mls	r5, r3, r7, r0
 801b500:	4638      	mov	r0, r7
 801b502:	b2ec      	uxtb	r4, r5
 801b504:	2d09      	cmp	r5, #9
 801b506:	bfd4      	ite	le
 801b508:	3430      	addle	r4, #48	; 0x30
 801b50a:	3457      	addgt	r4, #87	; 0x57
 801b50c:	b2e4      	uxtb	r4, r4
 801b50e:	558c      	strb	r4, [r1, r6]
 801b510:	1e4c      	subs	r4, r1, #1
 801b512:	b92f      	cbnz	r7, 801b520 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801b514:	4431      	add	r1, r6
 801b516:	4660      	mov	r0, ip
 801b518:	f7ff ffd5 	bl	801b4c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b51c:	b00b      	add	sp, #44	; 0x2c
 801b51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b520:	4621      	mov	r1, r4
 801b522:	e7e9      	b.n	801b4f8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801b524 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801b524:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b526:	4607      	mov	r7, r0
 801b528:	b08b      	sub	sp, #44	; 0x2c
 801b52a:	4608      	mov	r0, r1
 801b52c:	b341      	cbz	r1, 801b580 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b52e:	1e99      	subs	r1, r3, #2
 801b530:	2922      	cmp	r1, #34	; 0x22
 801b532:	d825      	bhi.n	801b580 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801b534:	2100      	movs	r1, #0
 801b536:	463c      	mov	r4, r7
 801b538:	261f      	movs	r6, #31
 801b53a:	f10d 0c04 	add.w	ip, sp, #4
 801b53e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b542:	1e71      	subs	r1, r6, #1
 801b544:	fb94 fef3 	sdiv	lr, r4, r3
 801b548:	fb03 441e 	mls	r4, r3, lr, r4
 801b54c:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801b550:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801b554:	b2ec      	uxtb	r4, r5
 801b556:	2d09      	cmp	r5, #9
 801b558:	bfd4      	ite	le
 801b55a:	3430      	addle	r4, #48	; 0x30
 801b55c:	3457      	addgt	r4, #87	; 0x57
 801b55e:	b2e4      	uxtb	r4, r4
 801b560:	f80c 4006 	strb.w	r4, [ip, r6]
 801b564:	4674      	mov	r4, lr
 801b566:	b96c      	cbnz	r4, 801b584 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801b568:	2f00      	cmp	r7, #0
 801b56a:	da05      	bge.n	801b578 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801b56c:	ab0a      	add	r3, sp, #40	; 0x28
 801b56e:	4419      	add	r1, r3
 801b570:	232d      	movs	r3, #45	; 0x2d
 801b572:	f801 3c24 	strb.w	r3, [r1, #-36]
 801b576:	1eb1      	subs	r1, r6, #2
 801b578:	3101      	adds	r1, #1
 801b57a:	4461      	add	r1, ip
 801b57c:	f7ff ffa3 	bl	801b4c6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801b580:	b00b      	add	sp, #44	; 0x2c
 801b582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b584:	460e      	mov	r6, r1
 801b586:	e7dc      	b.n	801b542 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801b588 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b58c:	b085      	sub	sp, #20
 801b58e:	4691      	mov	r9, r2
 801b590:	6802      	ldr	r2, [r0, #0]
 801b592:	4688      	mov	r8, r1
 801b594:	461c      	mov	r4, r3
 801b596:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801b59a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801b59e:	4683      	mov	fp, r0
 801b5a0:	4610      	mov	r0, r2
 801b5a2:	9103      	str	r1, [sp, #12]
 801b5a4:	9302      	str	r3, [sp, #8]
 801b5a6:	9201      	str	r2, [sp, #4]
 801b5a8:	f7ff ff80 	bl	801b4ac <_ZN8touchgfx7Unicode6strlenEPKt>
 801b5ac:	f1b8 0f00 	cmp.w	r8, #0
 801b5b0:	bf0c      	ite	eq
 801b5b2:	4684      	moveq	ip, r0
 801b5b4:	f100 0c01 	addne.w	ip, r0, #1
 801b5b8:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801b5bc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801b5c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801b5c2:	fa1f fc8c 	uxth.w	ip, ip
 801b5c6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801b5c8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801b5cc:	9903      	ldr	r1, [sp, #12]
 801b5ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b5d2:	d041      	beq.n	801b658 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b5d4:	d834      	bhi.n	801b640 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801b5d6:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801b5da:	d059      	beq.n	801b690 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801b5dc:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801b5e0:	d03a      	beq.n	801b658 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801b5e2:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801b5e6:	d034      	beq.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b5e8:	2400      	movs	r4, #0
 801b5ea:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801b5ee:	3a01      	subs	r2, #1
 801b5f0:	b169      	cbz	r1, 801b60e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b5f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 801b5f4:	458c      	cmp	ip, r1
 801b5f6:	da09      	bge.n	801b60c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b5f8:	eba1 010c 	sub.w	r1, r1, ip
 801b5fc:	b289      	uxth	r1, r1
 801b5fe:	b933      	cbnz	r3, 801b60e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b600:	2e00      	cmp	r6, #0
 801b602:	d051      	beq.n	801b6a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b604:	2800      	cmp	r0, #0
 801b606:	d04f      	beq.n	801b6a8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801b608:	440c      	add	r4, r1
 801b60a:	b2a4      	uxth	r4, r4
 801b60c:	2100      	movs	r1, #0
 801b60e:	682b      	ldr	r3, [r5, #0]
 801b610:	4293      	cmp	r3, r2
 801b612:	da07      	bge.n	801b624 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b614:	f1b8 0f00 	cmp.w	r8, #0
 801b618:	d004      	beq.n	801b624 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801b61a:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801b61e:	682b      	ldr	r3, [r5, #0]
 801b620:	3301      	adds	r3, #1
 801b622:	602b      	str	r3, [r5, #0]
 801b624:	2730      	movs	r7, #48	; 0x30
 801b626:	2c00      	cmp	r4, #0
 801b628:	d04e      	beq.n	801b6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b62a:	682e      	ldr	r6, [r5, #0]
 801b62c:	3c01      	subs	r4, #1
 801b62e:	42b2      	cmp	r2, r6
 801b630:	b2a4      	uxth	r4, r4
 801b632:	dd49      	ble.n	801b6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b634:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b638:	682b      	ldr	r3, [r5, #0]
 801b63a:	3301      	adds	r3, #1
 801b63c:	602b      	str	r3, [r5, #0]
 801b63e:	e7f2      	b.n	801b626 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801b640:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801b644:	d01d      	beq.n	801b682 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801b646:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801b64a:	d002      	beq.n	801b652 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801b64c:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801b650:	e7c9      	b.n	801b5e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801b652:	4684      	mov	ip, r0
 801b654:	f04f 0800 	mov.w	r8, #0
 801b658:	2c00      	cmp	r4, #0
 801b65a:	d0c6      	beq.n	801b5ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b65c:	b947      	cbnz	r7, 801b670 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b65e:	2801      	cmp	r0, #1
 801b660:	d106      	bne.n	801b670 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801b662:	8814      	ldrh	r4, [r2, #0]
 801b664:	2c30      	cmp	r4, #48	; 0x30
 801b666:	bf02      	ittt	eq
 801b668:	3202      	addeq	r2, #2
 801b66a:	4638      	moveq	r0, r7
 801b66c:	f8cb 2000 	streq.w	r2, [fp]
 801b670:	45bc      	cmp	ip, r7
 801b672:	da14      	bge.n	801b69e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801b674:	b2bf      	uxth	r7, r7
 801b676:	eba7 040c 	sub.w	r4, r7, ip
 801b67a:	46bc      	mov	ip, r7
 801b67c:	b2a4      	uxth	r4, r4
 801b67e:	2600      	movs	r6, #0
 801b680:	e7b3      	b.n	801b5ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b682:	4684      	mov	ip, r0
 801b684:	b16c      	cbz	r4, 801b6a2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801b686:	42b8      	cmp	r0, r7
 801b688:	dd00      	ble.n	801b68c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801b68a:	b2b8      	uxth	r0, r7
 801b68c:	2400      	movs	r4, #0
 801b68e:	e003      	b.n	801b698 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801b690:	f04f 0c01 	mov.w	ip, #1
 801b694:	2400      	movs	r4, #0
 801b696:	4660      	mov	r0, ip
 801b698:	4626      	mov	r6, r4
 801b69a:	46a0      	mov	r8, r4
 801b69c:	e7a5      	b.n	801b5ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b69e:	2400      	movs	r4, #0
 801b6a0:	e7ed      	b.n	801b67e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801b6a2:	4626      	mov	r6, r4
 801b6a4:	46a0      	mov	r8, r4
 801b6a6:	e7a0      	b.n	801b5ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801b6a8:	2900      	cmp	r1, #0
 801b6aa:	d0b0      	beq.n	801b60e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b6ac:	2720      	movs	r7, #32
 801b6ae:	682e      	ldr	r6, [r5, #0]
 801b6b0:	2900      	cmp	r1, #0
 801b6b2:	d0ac      	beq.n	801b60e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801b6b4:	3901      	subs	r1, #1
 801b6b6:	4296      	cmp	r6, r2
 801b6b8:	b289      	uxth	r1, r1
 801b6ba:	daa7      	bge.n	801b60c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801b6bc:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801b6c0:	682b      	ldr	r3, [r5, #0]
 801b6c2:	3301      	adds	r3, #1
 801b6c4:	602b      	str	r3, [r5, #0]
 801b6c6:	e7f2      	b.n	801b6ae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801b6c8:	b188      	cbz	r0, 801b6ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b6ca:	682b      	ldr	r3, [r5, #0]
 801b6cc:	3801      	subs	r0, #1
 801b6ce:	429a      	cmp	r2, r3
 801b6d0:	b280      	uxth	r0, r0
 801b6d2:	dd0c      	ble.n	801b6ee <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801b6d4:	f8db 3000 	ldr.w	r3, [fp]
 801b6d8:	1c9c      	adds	r4, r3, #2
 801b6da:	f8cb 4000 	str.w	r4, [fp]
 801b6de:	881c      	ldrh	r4, [r3, #0]
 801b6e0:	682b      	ldr	r3, [r5, #0]
 801b6e2:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801b6e6:	682b      	ldr	r3, [r5, #0]
 801b6e8:	3301      	adds	r3, #1
 801b6ea:	602b      	str	r3, [r5, #0]
 801b6ec:	e7ec      	b.n	801b6c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801b6ee:	2620      	movs	r6, #32
 801b6f0:	b151      	cbz	r1, 801b708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b6f2:	6828      	ldr	r0, [r5, #0]
 801b6f4:	3901      	subs	r1, #1
 801b6f6:	4282      	cmp	r2, r0
 801b6f8:	b289      	uxth	r1, r1
 801b6fa:	dd05      	ble.n	801b708 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801b6fc:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801b700:	682b      	ldr	r3, [r5, #0]
 801b702:	3301      	adds	r3, #1
 801b704:	602b      	str	r3, [r5, #0]
 801b706:	e7f3      	b.n	801b6f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801b708:	b005      	add	sp, #20
 801b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b70e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801b70e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b712:	2400      	movs	r4, #0
 801b714:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801b718:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801b71c:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801b720:	8014      	strh	r4, [r2, #0]
 801b722:	701c      	strb	r4, [r3, #0]
 801b724:	f888 4000 	strb.w	r4, [r8]
 801b728:	f88c 4000 	strb.w	r4, [ip]
 801b72c:	f88e 4000 	strb.w	r4, [lr]
 801b730:	703c      	strb	r4, [r7, #0]
 801b732:	6804      	ldr	r4, [r0, #0]
 801b734:	b1a4      	cbz	r4, 801b760 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801b736:	8824      	ldrh	r4, [r4, #0]
 801b738:	f04f 0901 	mov.w	r9, #1
 801b73c:	b314      	cbz	r4, 801b784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b73e:	2c2b      	cmp	r4, #43	; 0x2b
 801b740:	d001      	beq.n	801b746 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801b742:	2c20      	cmp	r4, #32
 801b744:	d110      	bne.n	801b768 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801b746:	8014      	strh	r4, [r2, #0]
 801b748:	6804      	ldr	r4, [r0, #0]
 801b74a:	b10c      	cbz	r4, 801b750 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801b74c:	3402      	adds	r4, #2
 801b74e:	6004      	str	r4, [r0, #0]
 801b750:	680c      	ldr	r4, [r1, #0]
 801b752:	b10c      	cbz	r4, 801b758 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801b754:	3401      	adds	r4, #1
 801b756:	600c      	str	r4, [r1, #0]
 801b758:	6804      	ldr	r4, [r0, #0]
 801b75a:	b17c      	cbz	r4, 801b77c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801b75c:	8824      	ldrh	r4, [r4, #0]
 801b75e:	e7ed      	b.n	801b73c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b760:	680c      	ldr	r4, [r1, #0]
 801b762:	b17c      	cbz	r4, 801b784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b764:	7824      	ldrb	r4, [r4, #0]
 801b766:	e7e7      	b.n	801b738 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801b768:	2c2d      	cmp	r4, #45	; 0x2d
 801b76a:	d102      	bne.n	801b772 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801b76c:	f883 9000 	strb.w	r9, [r3]
 801b770:	e7ea      	b.n	801b748 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b772:	2c23      	cmp	r4, #35	; 0x23
 801b774:	d107      	bne.n	801b786 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801b776:	f888 9000 	strb.w	r9, [r8]
 801b77a:	e7e5      	b.n	801b748 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801b77c:	680c      	ldr	r4, [r1, #0]
 801b77e:	b10c      	cbz	r4, 801b784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801b780:	7824      	ldrb	r4, [r4, #0]
 801b782:	e7db      	b.n	801b73c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801b784:	2400      	movs	r4, #0
 801b786:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b78a:	2b09      	cmp	r3, #9
 801b78c:	d901      	bls.n	801b792 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801b78e:	2c2a      	cmp	r4, #42	; 0x2a
 801b790:	d122      	bne.n	801b7d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b792:	2301      	movs	r3, #1
 801b794:	2c30      	cmp	r4, #48	; 0x30
 801b796:	f88e 3000 	strb.w	r3, [lr]
 801b79a:	d10d      	bne.n	801b7b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b79c:	f88c 3000 	strb.w	r3, [ip]
 801b7a0:	6803      	ldr	r3, [r0, #0]
 801b7a2:	b10b      	cbz	r3, 801b7a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801b7a4:	3302      	adds	r3, #2
 801b7a6:	6003      	str	r3, [r0, #0]
 801b7a8:	680b      	ldr	r3, [r1, #0]
 801b7aa:	b10b      	cbz	r3, 801b7b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801b7ac:	3301      	adds	r3, #1
 801b7ae:	600b      	str	r3, [r1, #0]
 801b7b0:	6803      	ldr	r3, [r0, #0]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d02f      	beq.n	801b816 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801b7b6:	881c      	ldrh	r4, [r3, #0]
 801b7b8:	2c2a      	cmp	r4, #42	; 0x2a
 801b7ba:	d135      	bne.n	801b828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b7bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b7c0:	6033      	str	r3, [r6, #0]
 801b7c2:	6803      	ldr	r3, [r0, #0]
 801b7c4:	b10b      	cbz	r3, 801b7ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801b7c6:	3302      	adds	r3, #2
 801b7c8:	6003      	str	r3, [r0, #0]
 801b7ca:	680b      	ldr	r3, [r1, #0]
 801b7cc:	b10b      	cbz	r3, 801b7d2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801b7ce:	3301      	adds	r3, #1
 801b7d0:	600b      	str	r3, [r1, #0]
 801b7d2:	6803      	ldr	r3, [r0, #0]
 801b7d4:	b31b      	cbz	r3, 801b81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801b7d6:	881c      	ldrh	r4, [r3, #0]
 801b7d8:	2c2e      	cmp	r4, #46	; 0x2e
 801b7da:	d11a      	bne.n	801b812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b7dc:	2301      	movs	r3, #1
 801b7de:	703b      	strb	r3, [r7, #0]
 801b7e0:	6803      	ldr	r3, [r0, #0]
 801b7e2:	b10b      	cbz	r3, 801b7e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801b7e4:	3302      	adds	r3, #2
 801b7e6:	6003      	str	r3, [r0, #0]
 801b7e8:	680b      	ldr	r3, [r1, #0]
 801b7ea:	b10b      	cbz	r3, 801b7f0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801b7ec:	3301      	adds	r3, #1
 801b7ee:	600b      	str	r3, [r1, #0]
 801b7f0:	6803      	ldr	r3, [r0, #0]
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d036      	beq.n	801b864 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801b7f6:	881b      	ldrh	r3, [r3, #0]
 801b7f8:	2b2a      	cmp	r3, #42	; 0x2a
 801b7fa:	d137      	bne.n	801b86c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b7fc:	f04f 33ff 	mov.w	r3, #4294967295
 801b800:	602b      	str	r3, [r5, #0]
 801b802:	6803      	ldr	r3, [r0, #0]
 801b804:	b10b      	cbz	r3, 801b80a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801b806:	3302      	adds	r3, #2
 801b808:	6003      	str	r3, [r0, #0]
 801b80a:	680b      	ldr	r3, [r1, #0]
 801b80c:	b10b      	cbz	r3, 801b812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b80e:	3301      	adds	r3, #1
 801b810:	600b      	str	r3, [r1, #0]
 801b812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b816:	680c      	ldr	r4, [r1, #0]
 801b818:	b134      	cbz	r4, 801b828 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801b81a:	7824      	ldrb	r4, [r4, #0]
 801b81c:	e7cc      	b.n	801b7b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801b81e:	680b      	ldr	r3, [r1, #0]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d0f6      	beq.n	801b812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801b824:	781c      	ldrb	r4, [r3, #0]
 801b826:	e7d7      	b.n	801b7d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b828:	2300      	movs	r3, #0
 801b82a:	220a      	movs	r2, #10
 801b82c:	6033      	str	r3, [r6, #0]
 801b82e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b832:	fa1f f38c 	uxth.w	r3, ip
 801b836:	2b09      	cmp	r3, #9
 801b838:	d8ce      	bhi.n	801b7d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801b83a:	6833      	ldr	r3, [r6, #0]
 801b83c:	fb02 c303 	mla	r3, r2, r3, ip
 801b840:	6033      	str	r3, [r6, #0]
 801b842:	6803      	ldr	r3, [r0, #0]
 801b844:	b10b      	cbz	r3, 801b84a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801b846:	3302      	adds	r3, #2
 801b848:	6003      	str	r3, [r0, #0]
 801b84a:	680b      	ldr	r3, [r1, #0]
 801b84c:	b10b      	cbz	r3, 801b852 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801b84e:	3301      	adds	r3, #1
 801b850:	600b      	str	r3, [r1, #0]
 801b852:	6803      	ldr	r3, [r0, #0]
 801b854:	b10b      	cbz	r3, 801b85a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801b856:	881c      	ldrh	r4, [r3, #0]
 801b858:	e7e9      	b.n	801b82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b85a:	680c      	ldr	r4, [r1, #0]
 801b85c:	2c00      	cmp	r4, #0
 801b85e:	d0e6      	beq.n	801b82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b860:	7824      	ldrb	r4, [r4, #0]
 801b862:	e7e4      	b.n	801b82e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801b864:	680b      	ldr	r3, [r1, #0]
 801b866:	b10b      	cbz	r3, 801b86c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801b868:	781b      	ldrb	r3, [r3, #0]
 801b86a:	e7c5      	b.n	801b7f8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801b86c:	2200      	movs	r2, #0
 801b86e:	240a      	movs	r4, #10
 801b870:	602a      	str	r2, [r5, #0]
 801b872:	3b30      	subs	r3, #48	; 0x30
 801b874:	682a      	ldr	r2, [r5, #0]
 801b876:	b29e      	uxth	r6, r3
 801b878:	2e09      	cmp	r6, #9
 801b87a:	d813      	bhi.n	801b8a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801b87c:	fb04 3302 	mla	r3, r4, r2, r3
 801b880:	602b      	str	r3, [r5, #0]
 801b882:	6803      	ldr	r3, [r0, #0]
 801b884:	b10b      	cbz	r3, 801b88a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801b886:	3302      	adds	r3, #2
 801b888:	6003      	str	r3, [r0, #0]
 801b88a:	680b      	ldr	r3, [r1, #0]
 801b88c:	b10b      	cbz	r3, 801b892 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801b88e:	3301      	adds	r3, #1
 801b890:	600b      	str	r3, [r1, #0]
 801b892:	6803      	ldr	r3, [r0, #0]
 801b894:	b10b      	cbz	r3, 801b89a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801b896:	881b      	ldrh	r3, [r3, #0]
 801b898:	e7eb      	b.n	801b872 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b89a:	680b      	ldr	r3, [r1, #0]
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d0e8      	beq.n	801b872 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b8a0:	781b      	ldrb	r3, [r3, #0]
 801b8a2:	e7e6      	b.n	801b872 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801b8a4:	2a06      	cmp	r2, #6
 801b8a6:	bfa8      	it	ge
 801b8a8:	2206      	movge	r2, #6
 801b8aa:	602a      	str	r2, [r5, #0]
 801b8ac:	e7b1      	b.n	801b812 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801b8ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801b8ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8b2:	b0a3      	sub	sp, #140	; 0x8c
 801b8b4:	2600      	movs	r6, #0
 801b8b6:	4607      	mov	r7, r0
 801b8b8:	4688      	mov	r8, r1
 801b8ba:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801b8be:	4631      	mov	r1, r6
 801b8c0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801b8c2:	4648      	mov	r0, r9
 801b8c4:	960d      	str	r6, [sp, #52]	; 0x34
 801b8c6:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b8ca:	2242      	movs	r2, #66	; 0x42
 801b8cc:	f009 f860 	bl	8024990 <memset>
 801b8d0:	b15f      	cbz	r7, 801b8ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801b8d2:	f108 3aff 	add.w	sl, r8, #4294967295
 801b8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8da:	b152      	cbz	r2, 801b8f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801b8dc:	8812      	ldrh	r2, [r2, #0]
 801b8de:	b10a      	cbz	r2, 801b8e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b8e0:	459a      	cmp	sl, r3
 801b8e2:	dc2e      	bgt.n	801b942 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b8ea:	4638      	mov	r0, r7
 801b8ec:	b023      	add	sp, #140	; 0x8c
 801b8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8f2:	9a08      	ldr	r2, [sp, #32]
 801b8f4:	2a00      	cmp	r2, #0
 801b8f6:	d0f5      	beq.n	801b8e4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801b8f8:	7812      	ldrb	r2, [r2, #0]
 801b8fa:	e7f0      	b.n	801b8de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801b8fc:	2d00      	cmp	r5, #0
 801b8fe:	d0ea      	beq.n	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b900:	782a      	ldrb	r2, [r5, #0]
 801b902:	b142      	cbz	r2, 801b916 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801b904:	2a25      	cmp	r2, #37	; 0x25
 801b906:	d001      	beq.n	801b90c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801b908:	459a      	cmp	sl, r3
 801b90a:	dc08      	bgt.n	801b91e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801b90c:	f1bb 0f00 	cmp.w	fp, #0
 801b910:	d121      	bne.n	801b956 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801b912:	2d00      	cmp	r5, #0
 801b914:	d0df      	beq.n	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b916:	782a      	ldrb	r2, [r5, #0]
 801b918:	f04f 0b00 	mov.w	fp, #0
 801b91c:	e01d      	b.n	801b95a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801b91e:	f1bb 0f00 	cmp.w	fp, #0
 801b922:	d077      	beq.n	801ba14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801b924:	f8bb 2000 	ldrh.w	r2, [fp]
 801b928:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801b92c:	f1bb 0f00 	cmp.w	fp, #0
 801b930:	d002      	beq.n	801b938 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801b932:	f10b 0202 	add.w	r2, fp, #2
 801b936:	9209      	str	r2, [sp, #36]	; 0x24
 801b938:	b10d      	cbz	r5, 801b93e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801b93a:	3501      	adds	r5, #1
 801b93c:	9508      	str	r5, [sp, #32]
 801b93e:	3301      	adds	r3, #1
 801b940:	930d      	str	r3, [sp, #52]	; 0x34
 801b942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b944:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801b948:	f1bb 0f00 	cmp.w	fp, #0
 801b94c:	d0d6      	beq.n	801b8fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801b94e:	f8bb 2000 	ldrh.w	r2, [fp]
 801b952:	2a00      	cmp	r2, #0
 801b954:	d1d6      	bne.n	801b904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801b956:	f8bb 2000 	ldrh.w	r2, [fp]
 801b95a:	2a00      	cmp	r2, #0
 801b95c:	d0bb      	beq.n	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b95e:	459a      	cmp	sl, r3
 801b960:	ddb9      	ble.n	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801b962:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801b966:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801b96a:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801b96e:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801b972:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801b976:	960e      	str	r6, [sp, #56]	; 0x38
 801b978:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801b97c:	960f      	str	r6, [sp, #60]	; 0x3c
 801b97e:	f1bb 0f00 	cmp.w	fp, #0
 801b982:	d002      	beq.n	801b98a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801b984:	f10b 0302 	add.w	r3, fp, #2
 801b988:	9309      	str	r3, [sp, #36]	; 0x24
 801b98a:	b10d      	cbz	r5, 801b990 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801b98c:	1c6b      	adds	r3, r5, #1
 801b98e:	9308      	str	r3, [sp, #32]
 801b990:	ab0f      	add	r3, sp, #60	; 0x3c
 801b992:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801b996:	a908      	add	r1, sp, #32
 801b998:	a809      	add	r0, sp, #36	; 0x24
 801b99a:	9305      	str	r3, [sp, #20]
 801b99c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801b9a0:	9304      	str	r3, [sp, #16]
 801b9a2:	ab0e      	add	r3, sp, #56	; 0x38
 801b9a4:	9303      	str	r3, [sp, #12]
 801b9a6:	ab0c      	add	r3, sp, #48	; 0x30
 801b9a8:	9302      	str	r3, [sp, #8]
 801b9aa:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801b9ae:	9301      	str	r3, [sp, #4]
 801b9b0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801b9b4:	9300      	str	r3, [sp, #0]
 801b9b6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801b9ba:	f7ff fea8 	bl	801b70e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801b9be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	bfbf      	itttt	lt
 801b9c4:	6823      	ldrlt	r3, [r4, #0]
 801b9c6:	3404      	addlt	r4, #4
 801b9c8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b9cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 801b9ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	bfbe      	ittt	lt
 801b9d4:	6823      	ldrlt	r3, [r4, #0]
 801b9d6:	3404      	addlt	r4, #4
 801b9d8:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801b9dc:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801b9e0:	bfb8      	it	lt
 801b9e2:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801b9e4:	b1d9      	cbz	r1, 801ba1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801b9e6:	880b      	ldrh	r3, [r1, #0]
 801b9e8:	2b69      	cmp	r3, #105	; 0x69
 801b9ea:	d01f      	beq.n	801ba2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b9ec:	d82f      	bhi.n	801ba4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801b9ee:	2b58      	cmp	r3, #88	; 0x58
 801b9f0:	d01c      	beq.n	801ba2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801b9f2:	d818      	bhi.n	801ba26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801b9f4:	2b25      	cmp	r3, #37	; 0x25
 801b9f6:	d034      	beq.n	801ba62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801b9f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b9fa:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801b9fe:	f1bb 0f00 	cmp.w	fp, #0
 801ba02:	f000 80b7 	beq.w	801bb74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801ba06:	f8bb 5000 	ldrh.w	r5, [fp]
 801ba0a:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801ba0e:	3301      	adds	r3, #1
 801ba10:	930d      	str	r3, [sp, #52]	; 0x34
 801ba12:	e029      	b.n	801ba68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ba14:	b10d      	cbz	r5, 801ba1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ba16:	782a      	ldrb	r2, [r5, #0]
 801ba18:	e786      	b.n	801b928 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ba1a:	462a      	mov	r2, r5
 801ba1c:	e784      	b.n	801b928 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ba1e:	2a00      	cmp	r2, #0
 801ba20:	d0ea      	beq.n	801b9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ba22:	7813      	ldrb	r3, [r2, #0]
 801ba24:	e7e0      	b.n	801b9e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ba26:	3b63      	subs	r3, #99	; 0x63
 801ba28:	2b01      	cmp	r3, #1
 801ba2a:	d8e5      	bhi.n	801b9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ba2c:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ba30:	b329      	cbz	r1, 801ba7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ba32:	880b      	ldrh	r3, [r1, #0]
 801ba34:	2b69      	cmp	r3, #105	; 0x69
 801ba36:	d063      	beq.n	801bb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ba38:	d825      	bhi.n	801ba86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ba3a:	2b63      	cmp	r3, #99	; 0x63
 801ba3c:	d038      	beq.n	801bab0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ba3e:	2b64      	cmp	r3, #100	; 0x64
 801ba40:	d05e      	beq.n	801bb00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ba42:	2b58      	cmp	r3, #88	; 0x58
 801ba44:	d07a      	beq.n	801bb3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ba46:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ba4a:	4625      	mov	r5, r4
 801ba4c:	e036      	b.n	801babc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ba4e:	2b73      	cmp	r3, #115	; 0x73
 801ba50:	d0ec      	beq.n	801ba2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba52:	d802      	bhi.n	801ba5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ba54:	2b6f      	cmp	r3, #111	; 0x6f
 801ba56:	d1cf      	bne.n	801b9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ba58:	e7e8      	b.n	801ba2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba5a:	2b75      	cmp	r3, #117	; 0x75
 801ba5c:	d0e6      	beq.n	801ba2c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ba5e:	2b78      	cmp	r3, #120	; 0x78
 801ba60:	e7f9      	b.n	801ba56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ba62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba64:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ba68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba6a:	b10b      	cbz	r3, 801ba70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ba6c:	3302      	adds	r3, #2
 801ba6e:	9309      	str	r3, [sp, #36]	; 0x24
 801ba70:	9b08      	ldr	r3, [sp, #32]
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	f43f af2f 	beq.w	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba78:	3301      	adds	r3, #1
 801ba7a:	9308      	str	r3, [sp, #32]
 801ba7c:	e72b      	b.n	801b8d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ba7e:	2a00      	cmp	r2, #0
 801ba80:	d0e1      	beq.n	801ba46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ba82:	7813      	ldrb	r3, [r2, #0]
 801ba84:	e7d6      	b.n	801ba34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ba86:	2b73      	cmp	r3, #115	; 0x73
 801ba88:	d036      	beq.n	801baf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ba8a:	d807      	bhi.n	801ba9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ba8c:	2b6f      	cmp	r3, #111	; 0x6f
 801ba8e:	d1da      	bne.n	801ba46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ba90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ba92:	1d25      	adds	r5, r4, #4
 801ba94:	2308      	movs	r3, #8
 801ba96:	eba8 0202 	sub.w	r2, r8, r2
 801ba9a:	e049      	b.n	801bb30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ba9c:	2b75      	cmp	r3, #117	; 0x75
 801ba9e:	d042      	beq.n	801bb26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801baa0:	2b78      	cmp	r3, #120	; 0x78
 801baa2:	d1d0      	bne.n	801ba46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801baa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801baa6:	1d25      	adds	r5, r4, #4
 801baa8:	2310      	movs	r3, #16
 801baaa:	eba8 0202 	sub.w	r2, r8, r2
 801baae:	e03f      	b.n	801bb30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801bab0:	6823      	ldr	r3, [r4, #0]
 801bab2:	1d25      	adds	r5, r4, #4
 801bab4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801bab8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801babe:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d051      	beq.n	801bb6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801bac6:	881a      	ldrh	r2, [r3, #0]
 801bac8:	a80d      	add	r0, sp, #52	; 0x34
 801baca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801bace:	462c      	mov	r4, r5
 801bad0:	9005      	str	r0, [sp, #20]
 801bad2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801bad6:	9004      	str	r0, [sp, #16]
 801bad8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bada:	9003      	str	r0, [sp, #12]
 801badc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801bae0:	9002      	str	r0, [sp, #8]
 801bae2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bae4:	9001      	str	r0, [sp, #4]
 801bae6:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801baea:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801baee:	9000      	str	r0, [sp, #0]
 801baf0:	a810      	add	r0, sp, #64	; 0x40
 801baf2:	f7ff fd49 	bl	801b588 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801baf6:	e7b7      	b.n	801ba68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801baf8:	1d25      	adds	r5, r4, #4
 801bafa:	6823      	ldr	r3, [r4, #0]
 801bafc:	9310      	str	r3, [sp, #64]	; 0x40
 801bafe:	e7dd      	b.n	801babc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb02:	230a      	movs	r3, #10
 801bb04:	4649      	mov	r1, r9
 801bb06:	6820      	ldr	r0, [r4, #0]
 801bb08:	eba8 0202 	sub.w	r2, r8, r2
 801bb0c:	1d25      	adds	r5, r4, #4
 801bb0e:	b292      	uxth	r2, r2
 801bb10:	f7ff fd08 	bl	801b524 <_ZN8touchgfx7Unicode4itoaElPtti>
 801bb14:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801bb18:	2b2d      	cmp	r3, #45	; 0x2d
 801bb1a:	d1cf      	bne.n	801babc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb1c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801bb20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb22:	3302      	adds	r3, #2
 801bb24:	e7ea      	b.n	801bafc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801bb26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb28:	1d25      	adds	r5, r4, #4
 801bb2a:	230a      	movs	r3, #10
 801bb2c:	eba8 0202 	sub.w	r2, r8, r2
 801bb30:	b292      	uxth	r2, r2
 801bb32:	4649      	mov	r1, r9
 801bb34:	6820      	ldr	r0, [r4, #0]
 801bb36:	f7ff fcd7 	bl	801b4e8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bb3a:	e7bf      	b.n	801babc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bb3e:	2310      	movs	r3, #16
 801bb40:	4649      	mov	r1, r9
 801bb42:	6820      	ldr	r0, [r4, #0]
 801bb44:	eba8 0202 	sub.w	r2, r8, r2
 801bb48:	1d25      	adds	r5, r4, #4
 801bb4a:	b292      	uxth	r2, r2
 801bb4c:	f7ff fccc 	bl	801b4e8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801bb50:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801bb54:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d0af      	beq.n	801babc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801bb5c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801bb60:	2919      	cmp	r1, #25
 801bb62:	d8f7      	bhi.n	801bb54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bb64:	3b20      	subs	r3, #32
 801bb66:	8013      	strh	r3, [r2, #0]
 801bb68:	e7f4      	b.n	801bb54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801bb6a:	9a08      	ldr	r2, [sp, #32]
 801bb6c:	2a00      	cmp	r2, #0
 801bb6e:	d0ab      	beq.n	801bac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bb70:	7812      	ldrb	r2, [r2, #0]
 801bb72:	e7a9      	b.n	801bac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801bb74:	2d00      	cmp	r5, #0
 801bb76:	f43f af48 	beq.w	801ba0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801bb7a:	782d      	ldrb	r5, [r5, #0]
 801bb7c:	e745      	b.n	801ba0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801bb7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801bb7e:	b507      	push	{r0, r1, r2, lr}
 801bb80:	9300      	str	r3, [sp, #0]
 801bb82:	4613      	mov	r3, r2
 801bb84:	2200      	movs	r2, #0
 801bb86:	f7ff fe92 	bl	801b8ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801bb8a:	b003      	add	sp, #12
 801bb8c:	f85d fb04 	ldr.w	pc, [sp], #4

0801bb90 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801bb90:	b40c      	push	{r2, r3}
 801bb92:	b507      	push	{r0, r1, r2, lr}
 801bb94:	ab04      	add	r3, sp, #16
 801bb96:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb9a:	9301      	str	r3, [sp, #4]
 801bb9c:	f7ff ffef 	bl	801bb7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801bba0:	b003      	add	sp, #12
 801bba2:	f85d eb04 	ldr.w	lr, [sp], #4
 801bba6:	b002      	add	sp, #8
 801bba8:	4770      	bx	lr
	...

0801bbac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801bbac:	4b01      	ldr	r3, [pc, #4]	; (801bbb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801bbae:	6018      	str	r0, [r3, #0]
 801bbb0:	4770      	bx	lr
 801bbb2:	bf00      	nop
 801bbb4:	240100c8 	.word	0x240100c8

0801bbb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801bbb8:	4b06      	ldr	r3, [pc, #24]	; (801bbd4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801bbba:	881a      	ldrh	r2, [r3, #0]
 801bbbc:	4282      	cmp	r2, r0
 801bbbe:	d807      	bhi.n	801bbd0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801bbc0:	4b05      	ldr	r3, [pc, #20]	; (801bbd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801bbc2:	881b      	ldrh	r3, [r3, #0]
 801bbc4:	4413      	add	r3, r2
 801bbc6:	4298      	cmp	r0, r3
 801bbc8:	bfac      	ite	ge
 801bbca:	2000      	movge	r0, #0
 801bbcc:	2001      	movlt	r0, #1
 801bbce:	4770      	bx	lr
 801bbd0:	2000      	movs	r0, #0
 801bbd2:	4770      	bx	lr
 801bbd4:	240100e8 	.word	0x240100e8
 801bbd8:	240100ec 	.word	0x240100ec

0801bbdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801bbdc:	b508      	push	{r3, lr}
 801bbde:	4601      	mov	r1, r0
 801bbe0:	f7ff ffea 	bl	801bbb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bbe4:	b118      	cbz	r0, 801bbee <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801bbe6:	4b02      	ldr	r3, [pc, #8]	; (801bbf0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801bbee:	bd08      	pop	{r3, pc}
 801bbf0:	240100cc 	.word	0x240100cc

0801bbf4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801bbf4:	b538      	push	{r3, r4, r5, lr}
 801bbf6:	4604      	mov	r4, r0
 801bbf8:	f7ff ffde 	bl	801bbb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bbfc:	b188      	cbz	r0, 801bc22 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801bbfe:	4b09      	ldr	r3, [pc, #36]	; (801bc24 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801bc00:	881a      	ldrh	r2, [r3, #0]
 801bc02:	4b09      	ldr	r3, [pc, #36]	; (801bc28 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801bc04:	1aa4      	subs	r4, r4, r2
 801bc06:	220e      	movs	r2, #14
 801bc08:	681d      	ldr	r5, [r3, #0]
 801bc0a:	4362      	muls	r2, r4
 801bc0c:	18ac      	adds	r4, r5, r2
 801bc0e:	7b23      	ldrb	r3, [r4, #12]
 801bc10:	f013 0320 	ands.w	r3, r3, #32
 801bc14:	bf17      	itett	ne
 801bc16:	680b      	ldrne	r3, [r1, #0]
 801bc18:	4618      	moveq	r0, r3
 801bc1a:	50ab      	strne	r3, [r5, r2]
 801bc1c:	684b      	ldrne	r3, [r1, #4]
 801bc1e:	bf18      	it	ne
 801bc20:	6063      	strne	r3, [r4, #4]
 801bc22:	bd38      	pop	{r3, r4, r5, pc}
 801bc24:	240100e8 	.word	0x240100e8
 801bc28:	240100d0 	.word	0x240100d0

0801bc2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801bc2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc30:	4606      	mov	r6, r0
 801bc32:	460c      	mov	r4, r1
 801bc34:	f7ff ffc0 	bl	801bbb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801bc38:	b918      	cbnz	r0, 801bc42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801bc3a:	2000      	movs	r0, #0
 801bc3c:	b002      	add	sp, #8
 801bc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc42:	4608      	mov	r0, r1
 801bc44:	f7f6 fed1 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc48:	2800      	cmp	r0, #0
 801bc4a:	d1f6      	bne.n	801bc3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bc4c:	4b3f      	ldr	r3, [pc, #252]	; (801bd4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801bc4e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801bd50 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801bc52:	881d      	ldrh	r5, [r3, #0]
 801bc54:	f8d9 a000 	ldr.w	sl, [r9]
 801bc58:	46c8      	mov	r8, r9
 801bc5a:	1b73      	subs	r3, r6, r5
 801bc5c:	250e      	movs	r5, #14
 801bc5e:	435d      	muls	r5, r3
 801bc60:	eb0a 0705 	add.w	r7, sl, r5
 801bc64:	7b3b      	ldrb	r3, [r7, #12]
 801bc66:	f013 0f20 	tst.w	r3, #32
 801bc6a:	d0e6      	beq.n	801bc3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bc6c:	4621      	mov	r1, r4
 801bc6e:	4638      	mov	r0, r7
 801bc70:	f7fc ff28 	bl	8018ac4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d1e1      	bne.n	801bc3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801bc78:	4639      	mov	r1, r7
 801bc7a:	4620      	mov	r0, r4
 801bc7c:	f7fc ff22 	bl	8018ac4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801bc80:	b108      	cbz	r0, 801bc86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801bc82:	4621      	mov	r1, r4
 801bc84:	e020      	b.n	801bcc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801bc86:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bc8a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	d11e      	bne.n	801bcd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bc92:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bc96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	d118      	bne.n	801bcd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bc9e:	6820      	ldr	r0, [r4, #0]
 801bca0:	466b      	mov	r3, sp
 801bca2:	6861      	ldr	r1, [r4, #4]
 801bca4:	c303      	stmia	r3!, {r0, r1}
 801bca6:	4639      	mov	r1, r7
 801bca8:	4668      	mov	r0, sp
 801bcaa:	f7f8 fdad 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bcae:	f8d9 3000 	ldr.w	r3, [r9]
 801bcb2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801bcb6:	442b      	add	r3, r5
 801bcb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bcbc:	4413      	add	r3, r2
 801bcbe:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801bcc2:	4293      	cmp	r3, r2
 801bcc4:	dc04      	bgt.n	801bcd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801bcc6:	4669      	mov	r1, sp
 801bcc8:	4630      	mov	r0, r6
 801bcca:	f7ff ff93 	bl	801bbf4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801bcce:	e7b5      	b.n	801bc3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801bcd0:	f8d8 3000 	ldr.w	r3, [r8]
 801bcd4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801bcd8:	442b      	add	r3, r5
 801bcda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801bcde:	4291      	cmp	r1, r2
 801bce0:	d119      	bne.n	801bd16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801bce2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801bce6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801bcea:	4291      	cmp	r1, r2
 801bcec:	d113      	bne.n	801bd16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801bcee:	6820      	ldr	r0, [r4, #0]
 801bcf0:	466a      	mov	r2, sp
 801bcf2:	6861      	ldr	r1, [r4, #4]
 801bcf4:	c203      	stmia	r2!, {r0, r1}
 801bcf6:	4619      	mov	r1, r3
 801bcf8:	4668      	mov	r0, sp
 801bcfa:	f7f8 fd85 	bl	8014808 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bcfe:	f8d8 3000 	ldr.w	r3, [r8]
 801bd02:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801bd06:	442b      	add	r3, r5
 801bd08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bd12:	4293      	cmp	r3, r2
 801bd14:	ddd7      	ble.n	801bcc6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801bd16:	4620      	mov	r0, r4
 801bd18:	f7f6 fe67 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd1c:	b990      	cbnz	r0, 801bd44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801bd1e:	88a7      	ldrh	r7, [r4, #4]
 801bd20:	88e3      	ldrh	r3, [r4, #6]
 801bd22:	fb17 f703 	smulbb	r7, r7, r3
 801bd26:	f8d8 3000 	ldr.w	r3, [r8]
 801bd2a:	441d      	add	r5, r3
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	f7f6 fe5c 	bl	80129ea <_ZNK8touchgfx4Rect7isEmptyEv>
 801bd32:	b948      	cbnz	r0, 801bd48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801bd34:	88ab      	ldrh	r3, [r5, #4]
 801bd36:	88ea      	ldrh	r2, [r5, #6]
 801bd38:	fb13 f302 	smulbb	r3, r3, r2
 801bd3c:	42bb      	cmp	r3, r7
 801bd3e:	f6bf af7c 	bge.w	801bc3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801bd42:	e79e      	b.n	801bc82 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801bd44:	2700      	movs	r7, #0
 801bd46:	e7ee      	b.n	801bd26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801bd48:	2300      	movs	r3, #0
 801bd4a:	e7f7      	b.n	801bd3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801bd4c:	240100e8 	.word	0x240100e8
 801bd50:	240100d0 	.word	0x240100d0

0801bd54 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd56:	4c24      	ldr	r4, [pc, #144]	; (801bde8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801bd58:	6823      	ldr	r3, [r4, #0]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d042      	beq.n	801bde4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bd5e:	4a23      	ldr	r2, [pc, #140]	; (801bdec <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801bd60:	4d23      	ldr	r5, [pc, #140]	; (801bdf0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801bd62:	8811      	ldrh	r1, [r2, #0]
 801bd64:	f8b5 c000 	ldrh.w	ip, [r5]
 801bd68:	4822      	ldr	r0, [pc, #136]	; (801bdf4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801bd6a:	4461      	add	r1, ip
 801bd6c:	1c4a      	adds	r2, r1, #1
 801bd6e:	008f      	lsls	r7, r1, #2
 801bd70:	f022 0201 	bic.w	r2, r2, #1
 801bd74:	19de      	adds	r6, r3, r7
 801bd76:	0412      	lsls	r2, r2, #16
 801bd78:	6006      	str	r6, [r0, #0]
 801bd7a:	4e1f      	ldr	r6, [pc, #124]	; (801bdf8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801bd7c:	0c12      	lsrs	r2, r2, #16
 801bd7e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801bd82:	19da      	adds	r2, r3, r7
 801bd84:	6032      	str	r2, [r6, #0]
 801bd86:	220e      	movs	r2, #14
 801bd88:	fb02 f20c 	mul.w	r2, r2, ip
 801bd8c:	3203      	adds	r2, #3
 801bd8e:	f022 0203 	bic.w	r2, r2, #3
 801bd92:	443a      	add	r2, r7
 801bd94:	4f19      	ldr	r7, [pc, #100]	; (801bdfc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801bd96:	4413      	add	r3, r2
 801bd98:	603b      	str	r3, [r7, #0]
 801bd9a:	2300      	movs	r3, #0
 801bd9c:	4f18      	ldr	r7, [pc, #96]	; (801be00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801bd9e:	469c      	mov	ip, r3
 801bda0:	803b      	strh	r3, [r7, #0]
 801bda2:	4f18      	ldr	r7, [pc, #96]	; (801be04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801bda4:	683f      	ldr	r7, [r7, #0]
 801bda6:	1aba      	subs	r2, r7, r2
 801bda8:	4f17      	ldr	r7, [pc, #92]	; (801be08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801bdaa:	603a      	str	r2, [r7, #0]
 801bdac:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801bdb0:	4a16      	ldr	r2, [pc, #88]	; (801be0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801bdb2:	8013      	strh	r3, [r2, #0]
 801bdb4:	428b      	cmp	r3, r1
 801bdb6:	d10d      	bne.n	801bdd4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801bdb8:	882d      	ldrh	r5, [r5, #0]
 801bdba:	2300      	movs	r3, #0
 801bdbc:	6830      	ldr	r0, [r6, #0]
 801bdbe:	240e      	movs	r4, #14
 801bdc0:	429d      	cmp	r5, r3
 801bdc2:	d90f      	bls.n	801bde4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801bdc4:	fb04 0203 	mla	r2, r4, r3, r0
 801bdc8:	3301      	adds	r3, #1
 801bdca:	7b11      	ldrb	r1, [r2, #12]
 801bdcc:	f36f 1145 	bfc	r1, #5, #1
 801bdd0:	7311      	strb	r1, [r2, #12]
 801bdd2:	e7f5      	b.n	801bdc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801bdd4:	6822      	ldr	r2, [r4, #0]
 801bdd6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801bdda:	6802      	ldr	r2, [r0, #0]
 801bddc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801bde0:	3301      	adds	r3, #1
 801bde2:	e7e7      	b.n	801bdb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bde6:	bf00      	nop
 801bde8:	240100cc 	.word	0x240100cc
 801bdec:	240100e8 	.word	0x240100e8
 801bdf0:	240100ec 	.word	0x240100ec
 801bdf4:	240100e0 	.word	0x240100e0
 801bdf8:	240100d0 	.word	0x240100d0
 801bdfc:	240100d8 	.word	0x240100d8
 801be00:	240100ea 	.word	0x240100ea
 801be04:	240100d4 	.word	0x240100d4
 801be08:	240100e4 	.word	0x240100e4
 801be0c:	240100dc 	.word	0x240100dc

0801be10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801be10:	4b06      	ldr	r3, [pc, #24]	; (801be2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	b943      	cbnz	r3, 801be28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801be16:	b139      	cbz	r1, 801be28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801be18:	4b05      	ldr	r3, [pc, #20]	; (801be30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801be1a:	801a      	strh	r2, [r3, #0]
 801be1c:	4b05      	ldr	r3, [pc, #20]	; (801be34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801be1e:	6019      	str	r1, [r3, #0]
 801be20:	4b05      	ldr	r3, [pc, #20]	; (801be38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801be22:	6018      	str	r0, [r3, #0]
 801be24:	f7ff bf96 	b.w	801bd54 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801be28:	4770      	bx	lr
 801be2a:	bf00      	nop
 801be2c:	240100d8 	.word	0x240100d8
 801be30:	240100ec 	.word	0x240100ec
 801be34:	240100d4 	.word	0x240100d4
 801be38:	240100cc 	.word	0x240100cc

0801be3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801be3c:	b470      	push	{r4, r5, r6}
 801be3e:	4c07      	ldr	r4, [pc, #28]	; (801be5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801be40:	4605      	mov	r5, r0
 801be42:	4610      	mov	r0, r2
 801be44:	9a03      	ldr	r2, [sp, #12]
 801be46:	6826      	ldr	r6, [r4, #0]
 801be48:	b936      	cbnz	r6, 801be58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801be4a:	6025      	str	r5, [r4, #0]
 801be4c:	4c04      	ldr	r4, [pc, #16]	; (801be60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801be4e:	8021      	strh	r1, [r4, #0]
 801be50:	4619      	mov	r1, r3
 801be52:	bc70      	pop	{r4, r5, r6}
 801be54:	f7ff bfdc 	b.w	801be10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801be58:	bc70      	pop	{r4, r5, r6}
 801be5a:	4770      	bx	lr
 801be5c:	240100f0 	.word	0x240100f0
 801be60:	240100e8 	.word	0x240100e8

0801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801be64:	4a12      	ldr	r2, [pc, #72]	; (801beb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801be66:	8803      	ldrh	r3, [r0, #0]
 801be68:	8812      	ldrh	r2, [r2, #0]
 801be6a:	4293      	cmp	r3, r2
 801be6c:	d207      	bcs.n	801be7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801be6e:	4a11      	ldr	r2, [pc, #68]	; (801beb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801be70:	2114      	movs	r1, #20
 801be72:	6812      	ldr	r2, [r2, #0]
 801be74:	fb01 2303 	mla	r3, r1, r3, r2
 801be78:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801be7c:	4770      	bx	lr
 801be7e:	490e      	ldr	r1, [pc, #56]	; (801beb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801be80:	8809      	ldrh	r1, [r1, #0]
 801be82:	4411      	add	r1, r2
 801be84:	428b      	cmp	r3, r1
 801be86:	da04      	bge.n	801be92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801be88:	1a9b      	subs	r3, r3, r2
 801be8a:	4a0c      	ldr	r2, [pc, #48]	; (801bebc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801be8c:	210e      	movs	r1, #14
 801be8e:	6812      	ldr	r2, [r2, #0]
 801be90:	e7f0      	b.n	801be74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801be92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801be96:	4293      	cmp	r3, r2
 801be98:	d108      	bne.n	801beac <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801be9a:	4b09      	ldr	r3, [pc, #36]	; (801bec0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801be9c:	781b      	ldrb	r3, [r3, #0]
 801be9e:	b91b      	cbnz	r3, 801bea8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801bea0:	4b08      	ldr	r3, [pc, #32]	; (801bec4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801bea2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bea6:	4770      	bx	lr
 801bea8:	4b07      	ldr	r3, [pc, #28]	; (801bec8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801beaa:	e7fa      	b.n	801bea2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801beac:	2000      	movs	r0, #0
 801beae:	4770      	bx	lr
 801beb0:	240100e8 	.word	0x240100e8
 801beb4:	240100f0 	.word	0x240100f0
 801beb8:	240100ec 	.word	0x240100ec
 801bebc:	240100d0 	.word	0x240100d0
 801bec0:	24010058 	.word	0x24010058
 801bec4:	2401005a 	.word	0x2401005a
 801bec8:	2401005c 	.word	0x2401005c

0801becc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801becc:	4a12      	ldr	r2, [pc, #72]	; (801bf18 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801bece:	8803      	ldrh	r3, [r0, #0]
 801bed0:	8812      	ldrh	r2, [r2, #0]
 801bed2:	4293      	cmp	r3, r2
 801bed4:	d207      	bcs.n	801bee6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801bed6:	4a11      	ldr	r2, [pc, #68]	; (801bf1c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801bed8:	2114      	movs	r1, #20
 801beda:	6812      	ldr	r2, [r2, #0]
 801bedc:	fb01 2303 	mla	r3, r1, r3, r2
 801bee0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801bee4:	4770      	bx	lr
 801bee6:	490e      	ldr	r1, [pc, #56]	; (801bf20 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801bee8:	8809      	ldrh	r1, [r1, #0]
 801beea:	4411      	add	r1, r2
 801beec:	428b      	cmp	r3, r1
 801beee:	da04      	bge.n	801befa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801bef0:	1a9b      	subs	r3, r3, r2
 801bef2:	4a0c      	ldr	r2, [pc, #48]	; (801bf24 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801bef4:	210e      	movs	r1, #14
 801bef6:	6812      	ldr	r2, [r2, #0]
 801bef8:	e7f0      	b.n	801bedc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801befa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801befe:	4293      	cmp	r3, r2
 801bf00:	d108      	bne.n	801bf14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801bf02:	4b09      	ldr	r3, [pc, #36]	; (801bf28 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801bf04:	781b      	ldrb	r3, [r3, #0]
 801bf06:	b91b      	cbnz	r3, 801bf10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801bf08:	4b08      	ldr	r3, [pc, #32]	; (801bf2c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801bf0a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801bf0e:	4770      	bx	lr
 801bf10:	4b07      	ldr	r3, [pc, #28]	; (801bf30 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801bf12:	e7fa      	b.n	801bf0a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801bf14:	2000      	movs	r0, #0
 801bf16:	4770      	bx	lr
 801bf18:	240100e8 	.word	0x240100e8
 801bf1c:	240100f0 	.word	0x240100f0
 801bf20:	240100ec 	.word	0x240100ec
 801bf24:	240100d0 	.word	0x240100d0
 801bf28:	24010058 	.word	0x24010058
 801bf2c:	2401005c 	.word	0x2401005c
 801bf30:	2401005a 	.word	0x2401005a

0801bf34 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801bf34:	4a1f      	ldr	r2, [pc, #124]	; (801bfb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801bf36:	b510      	push	{r4, lr}
 801bf38:	880b      	ldrh	r3, [r1, #0]
 801bf3a:	8812      	ldrh	r2, [r2, #0]
 801bf3c:	4293      	cmp	r3, r2
 801bf3e:	d213      	bcs.n	801bf68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801bf40:	4a1d      	ldr	r2, [pc, #116]	; (801bfb8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801bf42:	2114      	movs	r1, #20
 801bf44:	6812      	ldr	r2, [r2, #0]
 801bf46:	fb01 2303 	mla	r3, r1, r3, r2
 801bf4a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801bf4e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801bf52:	8a1a      	ldrh	r2, [r3, #16]
 801bf54:	8a5b      	ldrh	r3, [r3, #18]
 801bf56:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801bf5a:	8004      	strh	r4, [r0, #0]
 801bf5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bf60:	8041      	strh	r1, [r0, #2]
 801bf62:	8082      	strh	r2, [r0, #4]
 801bf64:	80c3      	strh	r3, [r0, #6]
 801bf66:	e00e      	b.n	801bf86 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801bf68:	4914      	ldr	r1, [pc, #80]	; (801bfbc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801bf6a:	8809      	ldrh	r1, [r1, #0]
 801bf6c:	4411      	add	r1, r2
 801bf6e:	428b      	cmp	r3, r1
 801bf70:	da0a      	bge.n	801bf88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801bf72:	1a9b      	subs	r3, r3, r2
 801bf74:	4a12      	ldr	r2, [pc, #72]	; (801bfc0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801bf76:	210e      	movs	r1, #14
 801bf78:	6812      	ldr	r2, [r2, #0]
 801bf7a:	fb01 2303 	mla	r3, r1, r3, r2
 801bf7e:	681a      	ldr	r2, [r3, #0]
 801bf80:	6002      	str	r2, [r0, #0]
 801bf82:	685a      	ldr	r2, [r3, #4]
 801bf84:	6042      	str	r2, [r0, #4]
 801bf86:	bd10      	pop	{r4, pc}
 801bf88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801bf8c:	4293      	cmp	r3, r2
 801bf8e:	d10b      	bne.n	801bfa8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801bf90:	4b0c      	ldr	r3, [pc, #48]	; (801bfc4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801bf92:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bf96:	4b0c      	ldr	r3, [pc, #48]	; (801bfc8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801bf98:	8081      	strh	r1, [r0, #4]
 801bf9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	80c2      	strh	r2, [r0, #6]
 801bfa2:	8003      	strh	r3, [r0, #0]
 801bfa4:	8043      	strh	r3, [r0, #2]
 801bfa6:	e7ee      	b.n	801bf86 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	8003      	strh	r3, [r0, #0]
 801bfac:	8043      	strh	r3, [r0, #2]
 801bfae:	8083      	strh	r3, [r0, #4]
 801bfb0:	e7d8      	b.n	801bf64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801bfb2:	bf00      	nop
 801bfb4:	240100e8 	.word	0x240100e8
 801bfb8:	240100f0 	.word	0x240100f0
 801bfbc:	240100ec 	.word	0x240100ec
 801bfc0:	240100d0 	.word	0x240100d0
 801bfc4:	24010054 	.word	0x24010054
 801bfc8:	24010056 	.word	0x24010056

0801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>:
 801bfcc:	4a12      	ldr	r2, [pc, #72]	; (801c018 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801bfce:	8803      	ldrh	r3, [r0, #0]
 801bfd0:	8811      	ldrh	r1, [r2, #0]
 801bfd2:	428b      	cmp	r3, r1
 801bfd4:	d20b      	bcs.n	801bfee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801bfd6:	4a11      	ldr	r2, [pc, #68]	; (801c01c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bfd8:	6812      	ldr	r2, [r2, #0]
 801bfda:	b112      	cbz	r2, 801bfe2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801bfdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801bfe0:	b9c0      	cbnz	r0, 801c014 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801bfe2:	4a0f      	ldr	r2, [pc, #60]	; (801c020 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801bfe4:	6811      	ldr	r1, [r2, #0]
 801bfe6:	2214      	movs	r2, #20
 801bfe8:	4353      	muls	r3, r2
 801bfea:	58c8      	ldr	r0, [r1, r3]
 801bfec:	4770      	bx	lr
 801bfee:	4a0d      	ldr	r2, [pc, #52]	; (801c024 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801bff0:	8812      	ldrh	r2, [r2, #0]
 801bff2:	440a      	add	r2, r1
 801bff4:	4293      	cmp	r3, r2
 801bff6:	da04      	bge.n	801c002 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801bff8:	4a08      	ldr	r2, [pc, #32]	; (801c01c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801bffa:	6812      	ldr	r2, [r2, #0]
 801bffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801c000:	4770      	bx	lr
 801c002:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c006:	4293      	cmp	r3, r2
 801c008:	d103      	bne.n	801c012 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801c00a:	4b07      	ldr	r3, [pc, #28]	; (801c028 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801c00c:	681b      	ldr	r3, [r3, #0]
 801c00e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801c010:	4770      	bx	lr
 801c012:	2000      	movs	r0, #0
 801c014:	4770      	bx	lr
 801c016:	bf00      	nop
 801c018:	240100e8 	.word	0x240100e8
 801c01c:	240100cc 	.word	0x240100cc
 801c020:	240100f0 	.word	0x240100f0
 801c024:	240100ec 	.word	0x240100ec
 801c028:	24010060 	.word	0x24010060

0801c02c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801c02c:	4b24      	ldr	r3, [pc, #144]	; (801c0c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801c02e:	8802      	ldrh	r2, [r0, #0]
 801c030:	8818      	ldrh	r0, [r3, #0]
 801c032:	4282      	cmp	r2, r0
 801c034:	d221      	bcs.n	801c07a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801c036:	4b23      	ldr	r3, [pc, #140]	; (801c0c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801c038:	6819      	ldr	r1, [r3, #0]
 801c03a:	2314      	movs	r3, #20
 801c03c:	fb03 1302 	mla	r3, r3, r2, r1
 801c040:	6858      	ldr	r0, [r3, #4]
 801c042:	2800      	cmp	r0, #0
 801c044:	d03a      	beq.n	801c0bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c046:	4920      	ldr	r1, [pc, #128]	; (801c0c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c048:	6809      	ldr	r1, [r1, #0]
 801c04a:	2900      	cmp	r1, #0
 801c04c:	d036      	beq.n	801c0bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c04e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801c052:	2900      	cmp	r1, #0
 801c054:	d032      	beq.n	801c0bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801c056:	891a      	ldrh	r2, [r3, #8]
 801c058:	8958      	ldrh	r0, [r3, #10]
 801c05a:	4350      	muls	r0, r2
 801c05c:	7c5a      	ldrb	r2, [r3, #17]
 801c05e:	7cdb      	ldrb	r3, [r3, #19]
 801c060:	0952      	lsrs	r2, r2, #5
 801c062:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801c066:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801c06a:	2b0b      	cmp	r3, #11
 801c06c:	bf18      	it	ne
 801c06e:	0040      	lslne	r0, r0, #1
 801c070:	3003      	adds	r0, #3
 801c072:	f020 0003 	bic.w	r0, r0, #3
 801c076:	4408      	add	r0, r1
 801c078:	4770      	bx	lr
 801c07a:	4b14      	ldr	r3, [pc, #80]	; (801c0cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801c07c:	881b      	ldrh	r3, [r3, #0]
 801c07e:	4403      	add	r3, r0
 801c080:	429a      	cmp	r2, r3
 801c082:	da1a      	bge.n	801c0ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c084:	4b12      	ldr	r3, [pc, #72]	; (801c0d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801c086:	1a10      	subs	r0, r2, r0
 801c088:	210e      	movs	r1, #14
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	fb01 3000 	mla	r0, r1, r0, r3
 801c090:	7b03      	ldrb	r3, [r0, #12]
 801c092:	f003 031f 	and.w	r3, r3, #31
 801c096:	2b0b      	cmp	r3, #11
 801c098:	d10b      	bne.n	801c0b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801c09a:	8903      	ldrh	r3, [r0, #8]
 801c09c:	8940      	ldrh	r0, [r0, #10]
 801c09e:	4358      	muls	r0, r3
 801c0a0:	4b09      	ldr	r3, [pc, #36]	; (801c0c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801c0a2:	3003      	adds	r0, #3
 801c0a4:	6819      	ldr	r1, [r3, #0]
 801c0a6:	f020 0303 	bic.w	r3, r0, #3
 801c0aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801c0ae:	4418      	add	r0, r3
 801c0b0:	4770      	bx	lr
 801c0b2:	2b0d      	cmp	r3, #13
 801c0b4:	d101      	bne.n	801c0ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801c0b6:	300d      	adds	r0, #13
 801c0b8:	4770      	bx	lr
 801c0ba:	2000      	movs	r0, #0
 801c0bc:	4770      	bx	lr
 801c0be:	bf00      	nop
 801c0c0:	240100e8 	.word	0x240100e8
 801c0c4:	240100f0 	.word	0x240100f0
 801c0c8:	240100cc 	.word	0x240100cc
 801c0cc:	240100ec 	.word	0x240100ec
 801c0d0:	240100d0 	.word	0x240100d0

0801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801c0d4:	4a17      	ldr	r2, [pc, #92]	; (801c134 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801c0d6:	b510      	push	{r4, lr}
 801c0d8:	8803      	ldrh	r3, [r0, #0]
 801c0da:	8812      	ldrh	r2, [r2, #0]
 801c0dc:	4293      	cmp	r3, r2
 801c0de:	d20c      	bcs.n	801c0fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801c0e0:	4a15      	ldr	r2, [pc, #84]	; (801c138 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801c0e2:	2114      	movs	r1, #20
 801c0e4:	6812      	ldr	r2, [r2, #0]
 801c0e6:	fb01 2303 	mla	r3, r1, r3, r2
 801c0ea:	7c58      	ldrb	r0, [r3, #17]
 801c0ec:	0942      	lsrs	r2, r0, #5
 801c0ee:	7cd8      	ldrb	r0, [r3, #19]
 801c0f0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801c0f4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801c0f8:	bd10      	pop	{r4, pc}
 801c0fa:	4910      	ldr	r1, [pc, #64]	; (801c13c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801c0fc:	8809      	ldrh	r1, [r1, #0]
 801c0fe:	4411      	add	r1, r2
 801c100:	428b      	cmp	r3, r1
 801c102:	da09      	bge.n	801c118 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801c104:	1a9b      	subs	r3, r3, r2
 801c106:	4a0e      	ldr	r2, [pc, #56]	; (801c140 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801c108:	210e      	movs	r1, #14
 801c10a:	6812      	ldr	r2, [r2, #0]
 801c10c:	fb01 2303 	mla	r3, r1, r3, r2
 801c110:	7b18      	ldrb	r0, [r3, #12]
 801c112:	f000 001f 	and.w	r0, r0, #31
 801c116:	e7ef      	b.n	801c0f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c118:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c11c:	4293      	cmp	r3, r2
 801c11e:	d106      	bne.n	801c12e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801c120:	f7f6 fef0 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 801c124:	6803      	ldr	r3, [r0, #0]
 801c126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c12c:	4718      	bx	r3
 801c12e:	2000      	movs	r0, #0
 801c130:	e7e2      	b.n	801c0f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801c132:	bf00      	nop
 801c134:	240100e8 	.word	0x240100e8
 801c138:	240100f0 	.word	0x240100f0
 801c13c:	240100ec 	.word	0x240100ec
 801c140:	240100d0 	.word	0x240100d0

0801c144 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801c144:	2018      	movs	r0, #24
 801c146:	4770      	bx	lr

0801c148 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801c148:	2001      	movs	r0, #1
 801c14a:	4770      	bx	lr

0801c14c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801c14c:	4b02      	ldr	r3, [pc, #8]	; (801c158 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801c14e:	8818      	ldrh	r0, [r3, #0]
 801c150:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c154:	b280      	uxth	r0, r0
 801c156:	4770      	bx	lr
 801c158:	2401005a 	.word	0x2401005a

0801c15c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c15c:	2bff      	cmp	r3, #255	; 0xff
 801c15e:	d040      	beq.n	801c1e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801c160:	2a2c      	cmp	r2, #44	; 0x2c
 801c162:	d02a      	beq.n	801c1ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 801c164:	d80f      	bhi.n	801c186 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801c166:	2a08      	cmp	r2, #8
 801c168:	d037      	beq.n	801c1da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c16a:	d805      	bhi.n	801c178 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801c16c:	2a04      	cmp	r2, #4
 801c16e:	d032      	beq.n	801c1d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 801c170:	2a05      	cmp	r2, #5
 801c172:	d02e      	beq.n	801c1d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801c174:	2000      	movs	r0, #0
 801c176:	4770      	bx	lr
 801c178:	2a0a      	cmp	r2, #10
 801c17a:	d02e      	beq.n	801c1da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801c17c:	d301      	bcc.n	801c182 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801c17e:	2a0b      	cmp	r2, #11
 801c180:	d1f8      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c182:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801c184:	4770      	bx	lr
 801c186:	2a30      	cmp	r2, #48	; 0x30
 801c188:	d029      	beq.n	801c1de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c18a:	d808      	bhi.n	801c19e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801c18c:	2a2e      	cmp	r2, #46	; 0x2e
 801c18e:	684b      	ldr	r3, [r1, #4]
 801c190:	d01a      	beq.n	801c1c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801c192:	d90b      	bls.n	801c1ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801c194:	781b      	ldrb	r3, [r3, #0]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d1ec      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c19a:	6a00      	ldr	r0, [r0, #32]
 801c19c:	4770      	bx	lr
 801c19e:	2a32      	cmp	r2, #50	; 0x32
 801c1a0:	d01d      	beq.n	801c1de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801c1a2:	d301      	bcc.n	801c1a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 801c1a4:	2a33      	cmp	r2, #51	; 0x33
 801c1a6:	d1e5      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c1a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801c1aa:	4770      	bx	lr
 801c1ac:	781b      	ldrb	r3, [r3, #0]
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d0f3      	beq.n	801c19a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 801c1b2:	2b01      	cmp	r3, #1
 801c1b4:	d1de      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c1b6:	6900      	ldr	r0, [r0, #16]
 801c1b8:	4770      	bx	lr
 801c1ba:	684b      	ldr	r3, [r1, #4]
 801c1bc:	781b      	ldrb	r3, [r3, #0]
 801c1be:	b133      	cbz	r3, 801c1ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801c1c0:	2b01      	cmp	r3, #1
 801c1c2:	d1d7      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c1c4:	6880      	ldr	r0, [r0, #8]
 801c1c6:	4770      	bx	lr
 801c1c8:	781b      	ldrb	r3, [r3, #0]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d1d2      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c1ce:	6980      	ldr	r0, [r0, #24]
 801c1d0:	4770      	bx	lr
 801c1d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801c1d4:	4770      	bx	lr
 801c1d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801c1d8:	4770      	bx	lr
 801c1da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801c1dc:	4770      	bx	lr
 801c1de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801c1e0:	4770      	bx	lr
 801c1e2:	2a2c      	cmp	r2, #44	; 0x2c
 801c1e4:	d02a      	beq.n	801c23c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801c1e6:	d80f      	bhi.n	801c208 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 801c1e8:	2a08      	cmp	r2, #8
 801c1ea:	d035      	beq.n	801c258 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801c1ec:	d805      	bhi.n	801c1fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801c1ee:	2a04      	cmp	r2, #4
 801c1f0:	d030      	beq.n	801c254 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 801c1f2:	2a05      	cmp	r2, #5
 801c1f4:	d1be      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c1f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801c1f8:	4770      	bx	lr
 801c1fa:	2a0a      	cmp	r2, #10
 801c1fc:	d02c      	beq.n	801c258 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801c1fe:	d301      	bcc.n	801c204 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 801c200:	2a0b      	cmp	r2, #11
 801c202:	d1b7      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c204:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801c206:	4770      	bx	lr
 801c208:	2a30      	cmp	r2, #48	; 0x30
 801c20a:	d027      	beq.n	801c25c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801c20c:	d808      	bhi.n	801c220 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801c20e:	2a2e      	cmp	r2, #46	; 0x2e
 801c210:	684b      	ldr	r3, [r1, #4]
 801c212:	d01a      	beq.n	801c24a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 801c214:	d90b      	bls.n	801c22e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 801c216:	781b      	ldrb	r3, [r3, #0]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d1ab      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c21c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801c21e:	4770      	bx	lr
 801c220:	2a32      	cmp	r2, #50	; 0x32
 801c222:	d01b      	beq.n	801c25c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801c224:	d301      	bcc.n	801c22a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 801c226:	2a33      	cmp	r2, #51	; 0x33
 801c228:	d1a4      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c22a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801c22c:	4770      	bx	lr
 801c22e:	781b      	ldrb	r3, [r3, #0]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d0f3      	beq.n	801c21c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801c234:	2b01      	cmp	r3, #1
 801c236:	d19d      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c238:	6940      	ldr	r0, [r0, #20]
 801c23a:	4770      	bx	lr
 801c23c:	684b      	ldr	r3, [r1, #4]
 801c23e:	781b      	ldrb	r3, [r3, #0]
 801c240:	b133      	cbz	r3, 801c250 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 801c242:	2b01      	cmp	r3, #1
 801c244:	d196      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c246:	68c0      	ldr	r0, [r0, #12]
 801c248:	4770      	bx	lr
 801c24a:	781b      	ldrb	r3, [r3, #0]
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d191      	bne.n	801c174 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801c250:	69c0      	ldr	r0, [r0, #28]
 801c252:	4770      	bx	lr
 801c254:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801c256:	4770      	bx	lr
 801c258:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801c25a:	4770      	bx	lr
 801c25c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801c25e:	4770      	bx	lr

0801c260 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c264:	b085      	sub	sp, #20
 801c266:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801c268:	9203      	str	r2, [sp, #12]
 801c26a:	6870      	ldr	r0, [r6, #4]
 801c26c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c270:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801c274:	9101      	str	r1, [sp, #4]
 801c276:	fa1f f885 	uxth.w	r8, r5
 801c27a:	43ed      	mvns	r5, r5
 801c27c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c280:	b2ed      	uxtb	r5, r5
 801c282:	fb00 2404 	mla	r4, r0, r4, r2
 801c286:	6832      	ldr	r2, [r6, #0]
 801c288:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c28c:	4414      	add	r4, r2
 801c28e:	f8dc 2000 	ldr.w	r2, [ip]
 801c292:	9202      	str	r2, [sp, #8]
 801c294:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c298:	f102 0e04 	add.w	lr, r2, #4
 801c29c:	9a01      	ldr	r2, [sp, #4]
 801c29e:	2a00      	cmp	r2, #0
 801c2a0:	dc03      	bgt.n	801c2aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c2a2:	9a03      	ldr	r2, [sp, #12]
 801c2a4:	2a00      	cmp	r2, #0
 801c2a6:	f340 8116 	ble.w	801c4d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c2aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c2ac:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801c2b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c2b6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801c2ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	dd0e      	ble.n	801c2e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801c2c2:	1406      	asrs	r6, r0, #16
 801c2c4:	d405      	bmi.n	801c2d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2c6:	4556      	cmp	r6, sl
 801c2c8:	da03      	bge.n	801c2d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2ca:	1416      	asrs	r6, r2, #16
 801c2cc:	d401      	bmi.n	801c2d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801c2ce:	454e      	cmp	r6, r9
 801c2d0:	db07      	blt.n	801c2e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801c2d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c2d4:	3b01      	subs	r3, #1
 801c2d6:	3403      	adds	r4, #3
 801c2d8:	4430      	add	r0, r6
 801c2da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c2dc:	4432      	add	r2, r6
 801c2de:	e7ee      	b.n	801c2be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c2e0:	d063      	beq.n	801c3aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801c2e2:	1e5e      	subs	r6, r3, #1
 801c2e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801c2e6:	fb07 0706 	mla	r7, r7, r6, r0
 801c2ea:	143f      	asrs	r7, r7, #16
 801c2ec:	d454      	bmi.n	801c398 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c2ee:	4557      	cmp	r7, sl
 801c2f0:	da52      	bge.n	801c398 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c2f2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801c2f4:	fb07 2606 	mla	r6, r7, r6, r2
 801c2f8:	1436      	asrs	r6, r6, #16
 801c2fa:	d44d      	bmi.n	801c398 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c2fc:	454e      	cmp	r6, r9
 801c2fe:	da4b      	bge.n	801c398 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801c300:	1ce6      	adds	r6, r4, #3
 801c302:	4699      	mov	r9, r3
 801c304:	f1b9 0f00 	cmp.w	r9, #0
 801c308:	f106 0603 	add.w	r6, r6, #3
 801c30c:	dd48      	ble.n	801c3a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c30e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801c312:	1417      	asrs	r7, r2, #16
 801c314:	9902      	ldr	r1, [sp, #8]
 801c316:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801c31a:	f109 39ff 	add.w	r9, r9, #4294967295
 801c31e:	fb0b 1707 	mla	r7, fp, r7, r1
 801c322:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801c326:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c328:	f817 700a 	ldrb.w	r7, [r7, sl]
 801c32c:	fb1b fb05 	smulbb	fp, fp, r5
 801c330:	4408      	add	r0, r1
 801c332:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c334:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c338:	440a      	add	r2, r1
 801c33a:	eb0e 0a07 	add.w	sl, lr, r7
 801c33e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801c342:	fb07 b708 	mla	r7, r7, r8, fp
 801c346:	b2bf      	uxth	r7, r7
 801c348:	f107 0b01 	add.w	fp, r7, #1
 801c34c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c350:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801c354:	fb1b fb05 	smulbb	fp, fp, r5
 801c358:	123f      	asrs	r7, r7, #8
 801c35a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801c35e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801c362:	fb07 b708 	mla	r7, r7, r8, fp
 801c366:	b2bf      	uxth	r7, r7
 801c368:	f107 0b01 	add.w	fp, r7, #1
 801c36c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801c370:	123f      	asrs	r7, r7, #8
 801c372:	f806 7c05 	strb.w	r7, [r6, #-5]
 801c376:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801c37a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801c37e:	fb1a fa05 	smulbb	sl, sl, r5
 801c382:	fb07 a708 	mla	r7, r7, r8, sl
 801c386:	b2bf      	uxth	r7, r7
 801c388:	f107 0a01 	add.w	sl, r7, #1
 801c38c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801c390:	123f      	asrs	r7, r7, #8
 801c392:	f806 7c04 	strb.w	r7, [r6, #-4]
 801c396:	e7b5      	b.n	801c304 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801c398:	2700      	movs	r7, #0
 801c39a:	1bde      	subs	r6, r3, r7
 801c39c:	2e00      	cmp	r6, #0
 801c39e:	dc42      	bgt.n	801c426 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c3a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c3a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3a8:	441c      	add	r4, r3
 801c3aa:	9b01      	ldr	r3, [sp, #4]
 801c3ac:	2b00      	cmp	r3, #0
 801c3ae:	f340 8092 	ble.w	801c4d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801c3b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c3bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c3c0:	eef0 6a62 	vmov.f32	s13, s5
 801c3c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c3c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c3cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c3d0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801c3d4:	eef0 6a43 	vmov.f32	s13, s6
 801c3d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c3dc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801c3e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c3e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c3e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c3ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c3f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c3f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c3f8:	ee12 2a90 	vmov	r2, s5
 801c3fc:	eef0 2a47 	vmov.f32	s5, s14
 801c400:	fb92 f3f3 	sdiv	r3, r2, r3
 801c404:	ee13 2a10 	vmov	r2, s6
 801c408:	9311      	str	r3, [sp, #68]	; 0x44
 801c40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c40c:	eeb0 3a67 	vmov.f32	s6, s15
 801c410:	fb92 f3f3 	sdiv	r3, r2, r3
 801c414:	9312      	str	r3, [sp, #72]	; 0x48
 801c416:	9b01      	ldr	r3, [sp, #4]
 801c418:	9a03      	ldr	r2, [sp, #12]
 801c41a:	3b01      	subs	r3, #1
 801c41c:	9301      	str	r3, [sp, #4]
 801c41e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c420:	bf08      	it	eq
 801c422:	4613      	moveq	r3, r2
 801c424:	e73a      	b.n	801c29c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c426:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801c42a:	d44e      	bmi.n	801c4ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c42c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c430:	4556      	cmp	r6, sl
 801c432:	dd4a      	ble.n	801c4ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c434:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801c438:	d447      	bmi.n	801c4ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c43a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801c43e:	4559      	cmp	r1, fp
 801c440:	dd43      	ble.n	801c4ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801c442:	fa0f f986 	sxth.w	r9, r6
 801c446:	9902      	ldr	r1, [sp, #8]
 801c448:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801c44c:	fb0b 1909 	mla	r9, fp, r9, r1
 801c450:	f814 b006 	ldrb.w	fp, [r4, r6]
 801c454:	f819 900a 	ldrb.w	r9, [r9, sl]
 801c458:	fb1b fb05 	smulbb	fp, fp, r5
 801c45c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c460:	eb0e 0a09 	add.w	sl, lr, r9
 801c464:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801c468:	fb09 b908 	mla	r9, r9, r8, fp
 801c46c:	fa1f f989 	uxth.w	r9, r9
 801c470:	f109 0b01 	add.w	fp, r9, #1
 801c474:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c478:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c47c:	f804 9006 	strb.w	r9, [r4, r6]
 801c480:	4426      	add	r6, r4
 801c482:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c486:	f896 b001 	ldrb.w	fp, [r6, #1]
 801c48a:	fb1b fb05 	smulbb	fp, fp, r5
 801c48e:	fb09 b908 	mla	r9, r9, r8, fp
 801c492:	fa1f f989 	uxth.w	r9, r9
 801c496:	f109 0b01 	add.w	fp, r9, #1
 801c49a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c49e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4a2:	f886 9001 	strb.w	r9, [r6, #1]
 801c4a6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c4aa:	f896 a002 	ldrb.w	sl, [r6, #2]
 801c4ae:	fb1a fa05 	smulbb	sl, sl, r5
 801c4b2:	fb09 a908 	mla	r9, r9, r8, sl
 801c4b6:	fa1f f989 	uxth.w	r9, r9
 801c4ba:	f109 0a01 	add.w	sl, r9, #1
 801c4be:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801c4c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c4c6:	f886 9002 	strb.w	r9, [r6, #2]
 801c4ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c4cc:	3701      	adds	r7, #1
 801c4ce:	4408      	add	r0, r1
 801c4d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c4d2:	440a      	add	r2, r1
 801c4d4:	e761      	b.n	801c39a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c4d6:	b005      	add	sp, #20
 801c4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c4dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801c4e2:	4693      	mov	fp, r2
 801c4e4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801c4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c4ea:	6868      	ldr	r0, [r5, #4]
 801c4ec:	6877      	ldr	r7, [r6, #4]
 801c4ee:	9100      	str	r1, [sp, #0]
 801c4f0:	3704      	adds	r7, #4
 801c4f2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801c4f6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801c4fa:	fb00 2404 	mla	r4, r0, r4, r2
 801c4fe:	682a      	ldr	r2, [r5, #0]
 801c500:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c504:	4414      	add	r4, r2
 801c506:	6832      	ldr	r2, [r6, #0]
 801c508:	9201      	str	r2, [sp, #4]
 801c50a:	9a00      	ldr	r2, [sp, #0]
 801c50c:	2a00      	cmp	r2, #0
 801c50e:	dc03      	bgt.n	801c518 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c510:	f1bb 0f00 	cmp.w	fp, #0
 801c514:	f340 80bc 	ble.w	801c690 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c518:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c51a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801c51e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c524:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801c528:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	dd0c      	ble.n	801c54a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c530:	1405      	asrs	r5, r0, #16
 801c532:	d405      	bmi.n	801c540 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c534:	4555      	cmp	r5, sl
 801c536:	da03      	bge.n	801c540 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c538:	1415      	asrs	r5, r2, #16
 801c53a:	d401      	bmi.n	801c540 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801c53c:	454d      	cmp	r5, r9
 801c53e:	db05      	blt.n	801c54c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c540:	4440      	add	r0, r8
 801c542:	4472      	add	r2, lr
 801c544:	3b01      	subs	r3, #1
 801c546:	3403      	adds	r4, #3
 801c548:	e7f0      	b.n	801c52c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801c54a:	d03f      	beq.n	801c5cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801c54c:	1e5d      	subs	r5, r3, #1
 801c54e:	fb08 0c05 	mla	ip, r8, r5, r0
 801c552:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801c556:	d42e      	bmi.n	801c5b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c558:	45d4      	cmp	ip, sl
 801c55a:	da2c      	bge.n	801c5b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c55c:	fb0e 2505 	mla	r5, lr, r5, r2
 801c560:	142d      	asrs	r5, r5, #16
 801c562:	d428      	bmi.n	801c5b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c564:	454d      	cmp	r5, r9
 801c566:	da26      	bge.n	801c5b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801c568:	1ce5      	adds	r5, r4, #3
 801c56a:	469c      	mov	ip, r3
 801c56c:	f1bc 0f00 	cmp.w	ip, #0
 801c570:	f105 0503 	add.w	r5, r5, #3
 801c574:	dd25      	ble.n	801c5c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801c576:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801c57a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801c57e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c582:	4472      	add	r2, lr
 801c584:	468a      	mov	sl, r1
 801c586:	9901      	ldr	r1, [sp, #4]
 801c588:	fb0a 1909 	mla	r9, sl, r9, r1
 801c58c:	1401      	asrs	r1, r0, #16
 801c58e:	4440      	add	r0, r8
 801c590:	f819 9001 	ldrb.w	r9, [r9, r1]
 801c594:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801c598:	eb07 0a09 	add.w	sl, r7, r9
 801c59c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801c5a0:	f805 9c06 	strb.w	r9, [r5, #-6]
 801c5a4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801c5a8:	f805 9c05 	strb.w	r9, [r5, #-5]
 801c5ac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801c5b0:	f805 9c04 	strb.w	r9, [r5, #-4]
 801c5b4:	e7da      	b.n	801c56c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c5b6:	2500      	movs	r5, #0
 801c5b8:	eba3 0c05 	sub.w	ip, r3, r5
 801c5bc:	f1bc 0f00 	cmp.w	ip, #0
 801c5c0:	dc3b      	bgt.n	801c63a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801c5c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c5c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5ca:	441c      	add	r4, r3
 801c5cc:	9b00      	ldr	r3, [sp, #0]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	dd5e      	ble.n	801c690 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c5d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c5d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c5d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c5dc:	eeb0 6a62 	vmov.f32	s12, s5
 801c5e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c5e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c5e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5ec:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801c5f0:	eeb0 6a43 	vmov.f32	s12, s6
 801c5f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c5f8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801c5fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c600:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c604:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c608:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c60c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c610:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c614:	ee12 2a90 	vmov	r2, s5
 801c618:	eef0 2a47 	vmov.f32	s5, s14
 801c61c:	fb92 f8f3 	sdiv	r8, r2, r3
 801c620:	ee13 2a10 	vmov	r2, s6
 801c624:	eeb0 3a67 	vmov.f32	s6, s15
 801c628:	fb92 fef3 	sdiv	lr, r2, r3
 801c62c:	9b00      	ldr	r3, [sp, #0]
 801c62e:	3b01      	subs	r3, #1
 801c630:	9300      	str	r3, [sp, #0]
 801c632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c634:	bf08      	it	eq
 801c636:	465b      	moveq	r3, fp
 801c638:	e767      	b.n	801c50a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c63a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c63e:	d423      	bmi.n	801c688 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c640:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801c644:	45cc      	cmp	ip, r9
 801c646:	dd1f      	ble.n	801c688 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c648:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801c64c:	d41c      	bmi.n	801c688 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c64e:	68f1      	ldr	r1, [r6, #12]
 801c650:	4551      	cmp	r1, sl
 801c652:	dd19      	ble.n	801c688 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801c654:	fa0f fc8c 	sxth.w	ip, ip
 801c658:	9901      	ldr	r1, [sp, #4]
 801c65a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801c65e:	f81c c009 	ldrb.w	ip, [ip, r9]
 801c662:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801c666:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801c66a:	eb07 090c 	add.w	r9, r7, ip
 801c66e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801c672:	f804 a00c 	strb.w	sl, [r4, ip]
 801c676:	44a4      	add	ip, r4
 801c678:	f899 a001 	ldrb.w	sl, [r9, #1]
 801c67c:	f88c a001 	strb.w	sl, [ip, #1]
 801c680:	f899 9002 	ldrb.w	r9, [r9, #2]
 801c684:	f88c 9002 	strb.w	r9, [ip, #2]
 801c688:	4440      	add	r0, r8
 801c68a:	4472      	add	r2, lr
 801c68c:	3501      	adds	r5, #1
 801c68e:	e793      	b.n	801c5b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801c690:	b003      	add	sp, #12
 801c692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c696 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69a:	b085      	sub	sp, #20
 801c69c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c6a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c6a2:	9202      	str	r2, [sp, #8]
 801c6a4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801c6a8:	6860      	ldr	r0, [r4, #4]
 801c6aa:	9203      	str	r2, [sp, #12]
 801c6ac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c6b0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c6b4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801c6b8:	fb00 2505 	mla	r5, r0, r5, r2
 801c6bc:	6822      	ldr	r2, [r4, #0]
 801c6be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6c2:	4415      	add	r5, r2
 801c6c4:	f8dc 2000 	ldr.w	r2, [ip]
 801c6c8:	9200      	str	r2, [sp, #0]
 801c6ca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c6ce:	3204      	adds	r2, #4
 801c6d0:	9201      	str	r2, [sp, #4]
 801c6d2:	2900      	cmp	r1, #0
 801c6d4:	dc03      	bgt.n	801c6de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c6d6:	9a02      	ldr	r2, [sp, #8]
 801c6d8:	2a00      	cmp	r2, #0
 801c6da:	f340 8127 	ble.w	801c92c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c6de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c6e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c6e4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801c6e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c6ea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c6ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	dd0d      	ble.n	801c712 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c6f6:	1422      	asrs	r2, r4, #16
 801c6f8:	d405      	bmi.n	801c706 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c6fa:	4542      	cmp	r2, r8
 801c6fc:	da03      	bge.n	801c706 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c6fe:	1402      	asrs	r2, r0, #16
 801c700:	d401      	bmi.n	801c706 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801c702:	42ba      	cmp	r2, r7
 801c704:	db06      	blt.n	801c714 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801c706:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c708:	4474      	add	r4, lr
 801c70a:	3b01      	subs	r3, #1
 801c70c:	3503      	adds	r5, #3
 801c70e:	4410      	add	r0, r2
 801c710:	e7ef      	b.n	801c6f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c712:	d075      	beq.n	801c800 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801c714:	1e5a      	subs	r2, r3, #1
 801c716:	fb0e 4602 	mla	r6, lr, r2, r4
 801c71a:	1436      	asrs	r6, r6, #16
 801c71c:	d465      	bmi.n	801c7ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c71e:	4546      	cmp	r6, r8
 801c720:	da63      	bge.n	801c7ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c722:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c724:	fb06 0202 	mla	r2, r6, r2, r0
 801c728:	1412      	asrs	r2, r2, #16
 801c72a:	d45e      	bmi.n	801c7ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c72c:	42ba      	cmp	r2, r7
 801c72e:	da5c      	bge.n	801c7ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c730:	1cef      	adds	r7, r5, #3
 801c732:	4699      	mov	r9, r3
 801c734:	f1b9 0f00 	cmp.w	r9, #0
 801c738:	dd5d      	ble.n	801c7f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801c73a:	1402      	asrs	r2, r0, #16
 801c73c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c740:	1426      	asrs	r6, r4, #16
 801c742:	4692      	mov	sl, r2
 801c744:	9a00      	ldr	r2, [sp, #0]
 801c746:	fb08 220a 	mla	r2, r8, sl, r2
 801c74a:	5d92      	ldrb	r2, [r2, r6]
 801c74c:	9e01      	ldr	r6, [sp, #4]
 801c74e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801c752:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801c756:	d041      	beq.n	801c7dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801c758:	9a03      	ldr	r2, [sp, #12]
 801c75a:	fa5f fb86 	uxtb.w	fp, r6
 801c75e:	fb02 f808 	mul.w	r8, r2, r8
 801c762:	f108 0201 	add.w	r2, r8, #1
 801c766:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801c76a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801c76e:	1212      	asrs	r2, r2, #8
 801c770:	fa1f fa82 	uxth.w	sl, r2
 801c774:	43d2      	mvns	r2, r2
 801c776:	fb1b fb0a 	smulbb	fp, fp, sl
 801c77a:	b2d2      	uxtb	r2, r2
 801c77c:	fb08 b802 	mla	r8, r8, r2, fp
 801c780:	fa1f f888 	uxth.w	r8, r8
 801c784:	f108 0b01 	add.w	fp, r8, #1
 801c788:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c78c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801c790:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801c794:	fb1b fb0a 	smulbb	fp, fp, sl
 801c798:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c79c:	fb16 fa0a 	smulbb	sl, r6, sl
 801c7a0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801c7a4:	f807 8c03 	strb.w	r8, [r7, #-3]
 801c7a8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801c7ac:	fb06 aa02 	mla	sl, r6, r2, sl
 801c7b0:	fb08 b802 	mla	r8, r8, r2, fp
 801c7b4:	fa1f fa8a 	uxth.w	sl, sl
 801c7b8:	fa1f f888 	uxth.w	r8, r8
 801c7bc:	f10a 0601 	add.w	r6, sl, #1
 801c7c0:	f108 0b01 	add.w	fp, r8, #1
 801c7c4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801c7c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c7cc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c7d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7d4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801c7d8:	f807 8c02 	strb.w	r8, [r7, #-2]
 801c7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c7de:	4474      	add	r4, lr
 801c7e0:	3703      	adds	r7, #3
 801c7e2:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7e6:	4410      	add	r0, r2
 801c7e8:	e7a4      	b.n	801c734 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801c7ea:	f04f 0800 	mov.w	r8, #0
 801c7ee:	eba3 0208 	sub.w	r2, r3, r8
 801c7f2:	2a00      	cmp	r2, #0
 801c7f4:	dc3b      	bgt.n	801c86e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801c7f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c7fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c7fe:	441d      	add	r5, r3
 801c800:	2900      	cmp	r1, #0
 801c802:	f340 8093 	ble.w	801c92c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801c806:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c80c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c810:	3901      	subs	r1, #1
 801c812:	eeb0 6a62 	vmov.f32	s12, s5
 801c816:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c81a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c81e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c822:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801c826:	eeb0 6a43 	vmov.f32	s12, s6
 801c82a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c82e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801c832:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c836:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c83a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c83e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c842:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c846:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c84a:	ee12 2a90 	vmov	r2, s5
 801c84e:	eef0 2a47 	vmov.f32	s5, s14
 801c852:	fb92 fef3 	sdiv	lr, r2, r3
 801c856:	ee13 2a10 	vmov	r2, s6
 801c85a:	eeb0 3a67 	vmov.f32	s6, s15
 801c85e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c862:	9a02      	ldr	r2, [sp, #8]
 801c864:	9312      	str	r3, [sp, #72]	; 0x48
 801c866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c868:	bf08      	it	eq
 801c86a:	4613      	moveq	r3, r2
 801c86c:	e731      	b.n	801c6d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c86e:	1427      	asrs	r7, r4, #16
 801c870:	d456      	bmi.n	801c920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c872:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801c876:	42be      	cmp	r6, r7
 801c878:	dd52      	ble.n	801c920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c87a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801c87e:	d44f      	bmi.n	801c920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c880:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c884:	454a      	cmp	r2, r9
 801c886:	dd4b      	ble.n	801c920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c888:	9a00      	ldr	r2, [sp, #0]
 801c88a:	b236      	sxth	r6, r6
 801c88c:	fb09 2606 	mla	r6, r9, r6, r2
 801c890:	5df2      	ldrb	r2, [r6, r7]
 801c892:	9e01      	ldr	r6, [sp, #4]
 801c894:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801c898:	0e3a      	lsrs	r2, r7, #24
 801c89a:	d041      	beq.n	801c920 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801c89c:	9e03      	ldr	r6, [sp, #12]
 801c89e:	fa5f fb87 	uxtb.w	fp, r7
 801c8a2:	4372      	muls	r2, r6
 801c8a4:	1c56      	adds	r6, r2, #1
 801c8a6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801c8aa:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801c8ae:	1212      	asrs	r2, r2, #8
 801c8b0:	f815 9006 	ldrb.w	r9, [r5, r6]
 801c8b4:	fa1f fa82 	uxth.w	sl, r2
 801c8b8:	43d2      	mvns	r2, r2
 801c8ba:	fb1b fb0a 	smulbb	fp, fp, sl
 801c8be:	b2d2      	uxtb	r2, r2
 801c8c0:	fb09 b902 	mla	r9, r9, r2, fp
 801c8c4:	fa1f f989 	uxth.w	r9, r9
 801c8c8:	f109 0b01 	add.w	fp, r9, #1
 801c8cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c8d0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801c8d4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801c8d8:	fb1b fb0a 	smulbb	fp, fp, sl
 801c8dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c8e0:	fb17 fa0a 	smulbb	sl, r7, sl
 801c8e4:	f805 9006 	strb.w	r9, [r5, r6]
 801c8e8:	442e      	add	r6, r5
 801c8ea:	78b7      	ldrb	r7, [r6, #2]
 801c8ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 801c8f0:	fb07 aa02 	mla	sl, r7, r2, sl
 801c8f4:	fb09 b902 	mla	r9, r9, r2, fp
 801c8f8:	fa1f fa8a 	uxth.w	sl, sl
 801c8fc:	fa1f f989 	uxth.w	r9, r9
 801c900:	f10a 0701 	add.w	r7, sl, #1
 801c904:	f109 0b01 	add.w	fp, r9, #1
 801c908:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c90c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801c910:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c914:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c918:	f886 a002 	strb.w	sl, [r6, #2]
 801c91c:	f886 9001 	strb.w	r9, [r6, #1]
 801c920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c922:	4474      	add	r4, lr
 801c924:	f108 0801 	add.w	r8, r8, #1
 801c928:	4410      	add	r0, r2
 801c92a:	e760      	b.n	801c7ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801c92c:	b005      	add	sp, #20
 801c92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c932 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c932:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c936:	b085      	sub	sp, #20
 801c938:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c93c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c93e:	9203      	str	r2, [sp, #12]
 801c940:	6868      	ldr	r0, [r5, #4]
 801c942:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801c946:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801c94a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801c94e:	fb00 2404 	mla	r4, r0, r4, r2
 801c952:	682a      	ldr	r2, [r5, #0]
 801c954:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c958:	4414      	add	r4, r2
 801c95a:	f8dc 2000 	ldr.w	r2, [ip]
 801c95e:	9201      	str	r2, [sp, #4]
 801c960:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801c964:	3204      	adds	r2, #4
 801c966:	9202      	str	r2, [sp, #8]
 801c968:	2900      	cmp	r1, #0
 801c96a:	dc03      	bgt.n	801c974 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801c96c:	9a03      	ldr	r2, [sp, #12]
 801c96e:	2a00      	cmp	r2, #0
 801c970:	f340 8137 	ble.w	801cbe2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801c974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c976:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c97a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801c97e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c980:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801c984:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801c988:	2b00      	cmp	r3, #0
 801c98a:	dd0d      	ble.n	801c9a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801c98c:	1405      	asrs	r5, r0, #16
 801c98e:	d405      	bmi.n	801c99c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c990:	4545      	cmp	r5, r8
 801c992:	da03      	bge.n	801c99c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c994:	1415      	asrs	r5, r2, #16
 801c996:	d401      	bmi.n	801c99c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c998:	42bd      	cmp	r5, r7
 801c99a:	db06      	blt.n	801c9aa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c99c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801c99e:	4470      	add	r0, lr
 801c9a0:	3b01      	subs	r3, #1
 801c9a2:	3403      	adds	r4, #3
 801c9a4:	442a      	add	r2, r5
 801c9a6:	e7ef      	b.n	801c988 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801c9a8:	d070      	beq.n	801ca8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c9aa:	1e5d      	subs	r5, r3, #1
 801c9ac:	fb0e 0605 	mla	r6, lr, r5, r0
 801c9b0:	1436      	asrs	r6, r6, #16
 801c9b2:	d462      	bmi.n	801ca7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c9b4:	4546      	cmp	r6, r8
 801c9b6:	da60      	bge.n	801ca7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c9b8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801c9ba:	fb06 2505 	mla	r5, r6, r5, r2
 801c9be:	142d      	asrs	r5, r5, #16
 801c9c0:	d45b      	bmi.n	801ca7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c9c2:	42bd      	cmp	r5, r7
 801c9c4:	da59      	bge.n	801ca7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801c9c6:	1ce5      	adds	r5, r4, #3
 801c9c8:	469a      	mov	sl, r3
 801c9ca:	f1ba 0f00 	cmp.w	sl, #0
 801c9ce:	dd58      	ble.n	801ca82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801c9d0:	1416      	asrs	r6, r2, #16
 801c9d2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801c9d6:	1407      	asrs	r7, r0, #16
 801c9d8:	46b1      	mov	r9, r6
 801c9da:	9e01      	ldr	r6, [sp, #4]
 801c9dc:	fb08 6609 	mla	r6, r8, r9, r6
 801c9e0:	5df6      	ldrb	r6, [r6, r7]
 801c9e2:	9f02      	ldr	r7, [sp, #8]
 801c9e4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801c9e8:	0e37      	lsrs	r7, r6, #24
 801c9ea:	2fff      	cmp	r7, #255	; 0xff
 801c9ec:	f000 80f0 	beq.w	801cbd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801c9f0:	fa5f f887 	uxtb.w	r8, r7
 801c9f4:	b3d7      	cbz	r7, 801ca6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801c9f6:	fa1f f788 	uxth.w	r7, r8
 801c9fa:	ea6f 0808 	mvn.w	r8, r8
 801c9fe:	fa5f fb86 	uxtb.w	fp, r6
 801ca02:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801ca06:	fa5f f888 	uxtb.w	r8, r8
 801ca0a:	fb1b fb07 	smulbb	fp, fp, r7
 801ca0e:	fb09 b908 	mla	r9, r9, r8, fp
 801ca12:	fa1f f989 	uxth.w	r9, r9
 801ca16:	f109 0b01 	add.w	fp, r9, #1
 801ca1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca1e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801ca22:	fb1b fb08 	smulbb	fp, fp, r8
 801ca26:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca2a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801ca2e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801ca32:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801ca36:	fb09 b907 	mla	r9, r9, r7, fp
 801ca3a:	fa1f f989 	uxth.w	r9, r9
 801ca3e:	f109 0b01 	add.w	fp, r9, #1
 801ca42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ca46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ca4a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801ca4e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801ca52:	fb19 f808 	smulbb	r8, r9, r8
 801ca56:	fb06 8607 	mla	r6, r6, r7, r8
 801ca5a:	b2b6      	uxth	r6, r6
 801ca5c:	f106 0801 	add.w	r8, r6, #1
 801ca60:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801ca64:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ca68:	f805 8c01 	strb.w	r8, [r5, #-1]
 801ca6c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ca6e:	4470      	add	r0, lr
 801ca70:	3503      	adds	r5, #3
 801ca72:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca76:	4432      	add	r2, r6
 801ca78:	e7a7      	b.n	801c9ca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca7a:	2600      	movs	r6, #0
 801ca7c:	1b9d      	subs	r5, r3, r6
 801ca7e:	2d00      	cmp	r5, #0
 801ca80:	dc3b      	bgt.n	801cafa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ca82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ca86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ca8a:	441c      	add	r4, r3
 801ca8c:	2900      	cmp	r1, #0
 801ca8e:	f340 80a8 	ble.w	801cbe2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ca92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca9c:	3901      	subs	r1, #1
 801ca9e:	eeb0 6a62 	vmov.f32	s12, s5
 801caa2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801caa6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801caaa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801caae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801cab2:	eeb0 6a43 	vmov.f32	s12, s6
 801cab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801caba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801cabe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cac2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cac6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801caca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cace:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cad2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cad6:	ee12 2a90 	vmov	r2, s5
 801cada:	eef0 2a47 	vmov.f32	s5, s14
 801cade:	fb92 fef3 	sdiv	lr, r2, r3
 801cae2:	ee13 2a10 	vmov	r2, s6
 801cae6:	eeb0 3a67 	vmov.f32	s6, s15
 801caea:	fb92 f3f3 	sdiv	r3, r2, r3
 801caee:	9a03      	ldr	r2, [sp, #12]
 801caf0:	9312      	str	r3, [sp, #72]	; 0x48
 801caf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801caf4:	bf08      	it	eq
 801caf6:	4613      	moveq	r3, r2
 801caf8:	e736      	b.n	801c968 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801cafa:	ea5f 4820 	movs.w	r8, r0, asr #16
 801cafe:	d457      	bmi.n	801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb00:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801cb04:	4547      	cmp	r7, r8
 801cb06:	dd53      	ble.n	801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb08:	ea5f 4922 	movs.w	r9, r2, asr #16
 801cb0c:	d450      	bmi.n	801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb0e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801cb12:	454d      	cmp	r5, r9
 801cb14:	dd4c      	ble.n	801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb16:	9d01      	ldr	r5, [sp, #4]
 801cb18:	b23f      	sxth	r7, r7
 801cb1a:	fb09 5707 	mla	r7, r9, r7, r5
 801cb1e:	f817 5008 	ldrb.w	r5, [r7, r8]
 801cb22:	9f02      	ldr	r7, [sp, #8]
 801cb24:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801cb28:	0e2f      	lsrs	r7, r5, #24
 801cb2a:	2fff      	cmp	r7, #255	; 0xff
 801cb2c:	d045      	beq.n	801cbba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801cb2e:	fa5f f987 	uxtb.w	r9, r7
 801cb32:	b3ef      	cbz	r7, 801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cb34:	fa1f f889 	uxth.w	r8, r9
 801cb38:	ea6f 0909 	mvn.w	r9, r9
 801cb3c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801cb40:	fa5f fb85 	uxtb.w	fp, r5
 801cb44:	f814 a007 	ldrb.w	sl, [r4, r7]
 801cb48:	fa5f f989 	uxtb.w	r9, r9
 801cb4c:	fb1b fb08 	smulbb	fp, fp, r8
 801cb50:	fb0a ba09 	mla	sl, sl, r9, fp
 801cb54:	fa1f fa8a 	uxth.w	sl, sl
 801cb58:	f10a 0b01 	add.w	fp, sl, #1
 801cb5c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cb60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb64:	f804 a007 	strb.w	sl, [r4, r7]
 801cb68:	4427      	add	r7, r4
 801cb6a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801cb6e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801cb72:	f897 b001 	ldrb.w	fp, [r7, #1]
 801cb76:	fb1b fb09 	smulbb	fp, fp, r9
 801cb7a:	fb0a ba08 	mla	sl, sl, r8, fp
 801cb7e:	fa1f fa8a 	uxth.w	sl, sl
 801cb82:	f10a 0b01 	add.w	fp, sl, #1
 801cb86:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801cb8a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cb8e:	f887 a001 	strb.w	sl, [r7, #1]
 801cb92:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cb96:	fb1a f909 	smulbb	r9, sl, r9
 801cb9a:	fb05 9508 	mla	r5, r5, r8, r9
 801cb9e:	b2ad      	uxth	r5, r5
 801cba0:	f105 0901 	add.w	r9, r5, #1
 801cba4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801cba8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbac:	f887 9002 	strb.w	r9, [r7, #2]
 801cbb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801cbb2:	4470      	add	r0, lr
 801cbb4:	3601      	adds	r6, #1
 801cbb6:	442a      	add	r2, r5
 801cbb8:	e760      	b.n	801ca7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801cbba:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801cbbe:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801cbc2:	55e5      	strb	r5, [r4, r7]
 801cbc4:	4427      	add	r7, r4
 801cbc6:	0c2d      	lsrs	r5, r5, #16
 801cbc8:	f887 8001 	strb.w	r8, [r7, #1]
 801cbcc:	70bd      	strb	r5, [r7, #2]
 801cbce:	e7ef      	b.n	801cbb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cbd0:	0a37      	lsrs	r7, r6, #8
 801cbd2:	f805 6c03 	strb.w	r6, [r5, #-3]
 801cbd6:	0c36      	lsrs	r6, r6, #16
 801cbd8:	f805 7c02 	strb.w	r7, [r5, #-2]
 801cbdc:	f805 6c01 	strb.w	r6, [r5, #-1]
 801cbe0:	e744      	b.n	801ca6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801cbe2:	b005      	add	sp, #20
 801cbe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cbe8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cbe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cbee:	9201      	str	r2, [sp, #4]
 801cbf0:	6870      	ldr	r0, [r6, #4]
 801cbf2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801cbf6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801cbfa:	fa1f fe85 	uxth.w	lr, r5
 801cbfe:	43ed      	mvns	r5, r5
 801cc00:	f8dc 8000 	ldr.w	r8, [ip]
 801cc04:	b2ed      	uxtb	r5, r5
 801cc06:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801cc0a:	fb00 2404 	mla	r4, r0, r4, r2
 801cc0e:	6832      	ldr	r2, [r6, #0]
 801cc10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cc14:	4414      	add	r4, r2
 801cc16:	2900      	cmp	r1, #0
 801cc18:	dc03      	bgt.n	801cc22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cc1a:	9a01      	ldr	r2, [sp, #4]
 801cc1c:	2a00      	cmp	r2, #0
 801cc1e:	f340 810d 	ble.w	801ce3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cc22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc24:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801cc28:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801cc2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc2e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801cc32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	dd0e      	ble.n	801cc58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cc3a:	1406      	asrs	r6, r0, #16
 801cc3c:	d405      	bmi.n	801cc4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cc3e:	4556      	cmp	r6, sl
 801cc40:	da03      	bge.n	801cc4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cc42:	1416      	asrs	r6, r2, #16
 801cc44:	d401      	bmi.n	801cc4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801cc46:	454e      	cmp	r6, r9
 801cc48:	db07      	blt.n	801cc5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cc4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801cc4c:	3b01      	subs	r3, #1
 801cc4e:	3403      	adds	r4, #3
 801cc50:	4430      	add	r0, r6
 801cc52:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801cc54:	4432      	add	r2, r6
 801cc56:	e7ee      	b.n	801cc36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801cc58:	d060      	beq.n	801cd1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801cc5a:	1e5e      	subs	r6, r3, #1
 801cc5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cc5e:	fb07 0706 	mla	r7, r7, r6, r0
 801cc62:	143f      	asrs	r7, r7, #16
 801cc64:	d451      	bmi.n	801cd0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc66:	4557      	cmp	r7, sl
 801cc68:	da4f      	bge.n	801cd0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cc6c:	fb07 2606 	mla	r6, r7, r6, r2
 801cc70:	1436      	asrs	r6, r6, #16
 801cc72:	d44a      	bmi.n	801cd0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc74:	454e      	cmp	r6, r9
 801cc76:	da48      	bge.n	801cd0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801cc78:	1ce6      	adds	r6, r4, #3
 801cc7a:	4699      	mov	r9, r3
 801cc7c:	f1b9 0f00 	cmp.w	r9, #0
 801cc80:	f106 0603 	add.w	r6, r6, #3
 801cc84:	dd45      	ble.n	801cd12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801cc86:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801cc8a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801cc8e:	1417      	asrs	r7, r2, #16
 801cc90:	f109 39ff 	add.w	r9, r9, #4294967295
 801cc94:	fb0b a707 	mla	r7, fp, r7, sl
 801cc98:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801cc9c:	fb1b fb05 	smulbb	fp, fp, r5
 801cca0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801cca4:	eb08 0a07 	add.w	sl, r8, r7
 801cca8:	f818 7007 	ldrb.w	r7, [r8, r7]
 801ccac:	fb07 b70e 	mla	r7, r7, lr, fp
 801ccb0:	b2bf      	uxth	r7, r7
 801ccb2:	f107 0b01 	add.w	fp, r7, #1
 801ccb6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ccba:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ccbe:	fb1b fb05 	smulbb	fp, fp, r5
 801ccc2:	123f      	asrs	r7, r7, #8
 801ccc4:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ccc8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801cccc:	fb07 b70e 	mla	r7, r7, lr, fp
 801ccd0:	b2bf      	uxth	r7, r7
 801ccd2:	f107 0b01 	add.w	fp, r7, #1
 801ccd6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ccda:	123f      	asrs	r7, r7, #8
 801ccdc:	f806 7c05 	strb.w	r7, [r6, #-5]
 801cce0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801cce4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801cce8:	fb1a fa05 	smulbb	sl, sl, r5
 801ccec:	fb07 a70e 	mla	r7, r7, lr, sl
 801ccf0:	b2bf      	uxth	r7, r7
 801ccf2:	f107 0a01 	add.w	sl, r7, #1
 801ccf6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ccfa:	123f      	asrs	r7, r7, #8
 801ccfc:	f806 7c04 	strb.w	r7, [r6, #-4]
 801cd00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801cd02:	4438      	add	r0, r7
 801cd04:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801cd06:	443a      	add	r2, r7
 801cd08:	e7b8      	b.n	801cc7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801cd0a:	2700      	movs	r7, #0
 801cd0c:	1bde      	subs	r6, r3, r7
 801cd0e:	2e00      	cmp	r6, #0
 801cd10:	dc3f      	bgt.n	801cd92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801cd12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cd16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd1a:	441c      	add	r4, r3
 801cd1c:	2900      	cmp	r1, #0
 801cd1e:	f340 808d 	ble.w	801ce3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801cd22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd28:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cd2c:	3901      	subs	r1, #1
 801cd2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cd32:	eef0 6a62 	vmov.f32	s13, s5
 801cd36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cd3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cd3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd42:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 801cd46:	eef0 6a43 	vmov.f32	s13, s6
 801cd4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cd4e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 801cd52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cd56:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cd5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cd5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cd62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cd66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cd6a:	ee12 2a90 	vmov	r2, s5
 801cd6e:	eef0 2a47 	vmov.f32	s5, s14
 801cd72:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd76:	ee13 2a10 	vmov	r2, s6
 801cd7a:	930f      	str	r3, [sp, #60]	; 0x3c
 801cd7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd7e:	eeb0 3a67 	vmov.f32	s6, s15
 801cd82:	fb92 f3f3 	sdiv	r3, r2, r3
 801cd86:	9a01      	ldr	r2, [sp, #4]
 801cd88:	9310      	str	r3, [sp, #64]	; 0x40
 801cd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd8c:	bf08      	it	eq
 801cd8e:	4613      	moveq	r3, r2
 801cd90:	e741      	b.n	801cc16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cd92:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cd96:	d44b      	bmi.n	801ce30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cd98:	f8dc b008 	ldr.w	fp, [ip, #8]
 801cd9c:	45cb      	cmp	fp, r9
 801cd9e:	dd47      	ble.n	801ce30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cda0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cda4:	d444      	bmi.n	801ce30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cda6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801cdaa:	4556      	cmp	r6, sl
 801cdac:	dd40      	ble.n	801ce30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801cdae:	fa0f f68b 	sxth.w	r6, fp
 801cdb2:	fb0a 9906 	mla	r9, sl, r6, r9
 801cdb6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801cdba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801cdbe:	f814 b006 	ldrb.w	fp, [r4, r6]
 801cdc2:	fb1b fb05 	smulbb	fp, fp, r5
 801cdc6:	eb08 0a09 	add.w	sl, r8, r9
 801cdca:	f818 9009 	ldrb.w	r9, [r8, r9]
 801cdce:	fb09 b90e 	mla	r9, r9, lr, fp
 801cdd2:	fa1f f989 	uxth.w	r9, r9
 801cdd6:	f109 0b01 	add.w	fp, r9, #1
 801cdda:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cdde:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cde2:	f804 9006 	strb.w	r9, [r4, r6]
 801cde6:	4426      	add	r6, r4
 801cde8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801cdec:	f896 b001 	ldrb.w	fp, [r6, #1]
 801cdf0:	fb1b fb05 	smulbb	fp, fp, r5
 801cdf4:	fb09 b90e 	mla	r9, r9, lr, fp
 801cdf8:	fa1f f989 	uxth.w	r9, r9
 801cdfc:	f109 0b01 	add.w	fp, r9, #1
 801ce00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ce04:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce08:	f886 9001 	strb.w	r9, [r6, #1]
 801ce0c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ce10:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ce14:	fb1a fa05 	smulbb	sl, sl, r5
 801ce18:	fb09 a90e 	mla	r9, r9, lr, sl
 801ce1c:	fa1f f989 	uxth.w	r9, r9
 801ce20:	f109 0a01 	add.w	sl, r9, #1
 801ce24:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ce28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce2c:	f886 9002 	strb.w	r9, [r6, #2]
 801ce30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ce32:	3701      	adds	r7, #1
 801ce34:	4430      	add	r0, r6
 801ce36:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801ce38:	4432      	add	r2, r6
 801ce3a:	e767      	b.n	801cd0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801ce3c:	b003      	add	sp, #12
 801ce3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ce42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ce48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ce4c:	9201      	str	r2, [sp, #4]
 801ce4e:	6868      	ldr	r0, [r5, #4]
 801ce50:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ce52:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ce56:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801ce5a:	fb00 2404 	mla	r4, r0, r4, r2
 801ce5e:	682a      	ldr	r2, [r5, #0]
 801ce60:	f8d7 8000 	ldr.w	r8, [r7]
 801ce64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce68:	4414      	add	r4, r2
 801ce6a:	2900      	cmp	r1, #0
 801ce6c:	dc03      	bgt.n	801ce76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ce6e:	9a01      	ldr	r2, [sp, #4]
 801ce70:	2a00      	cmp	r2, #0
 801ce72:	f340 80af 	ble.w	801cfd4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801ce76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce78:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801ce7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ce80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ce82:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801ce86:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	dd0c      	ble.n	801cea8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ce8e:	1405      	asrs	r5, r0, #16
 801ce90:	d405      	bmi.n	801ce9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce92:	4555      	cmp	r5, sl
 801ce94:	da03      	bge.n	801ce9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce96:	1415      	asrs	r5, r2, #16
 801ce98:	d401      	bmi.n	801ce9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce9a:	454d      	cmp	r5, r9
 801ce9c:	db05      	blt.n	801ceaa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ce9e:	4470      	add	r0, lr
 801cea0:	4462      	add	r2, ip
 801cea2:	3b01      	subs	r3, #1
 801cea4:	3403      	adds	r4, #3
 801cea6:	e7f0      	b.n	801ce8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cea8:	d038      	beq.n	801cf1c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ceaa:	1e5d      	subs	r5, r3, #1
 801ceac:	fb0e 0605 	mla	r6, lr, r5, r0
 801ceb0:	1436      	asrs	r6, r6, #16
 801ceb2:	d42a      	bmi.n	801cf0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ceb4:	4556      	cmp	r6, sl
 801ceb6:	da28      	bge.n	801cf0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801ceb8:	fb0c 2505 	mla	r5, ip, r5, r2
 801cebc:	142d      	asrs	r5, r5, #16
 801cebe:	d424      	bmi.n	801cf0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cec0:	454d      	cmp	r5, r9
 801cec2:	da22      	bge.n	801cf0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801cec4:	1ce6      	adds	r6, r4, #3
 801cec6:	4699      	mov	r9, r3
 801cec8:	f1b9 0f00 	cmp.w	r9, #0
 801cecc:	f106 0603 	add.w	r6, r6, #3
 801ced0:	dd1f      	ble.n	801cf12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801ced2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801ced6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801ceda:	1415      	asrs	r5, r2, #16
 801cedc:	4470      	add	r0, lr
 801cede:	4462      	add	r2, ip
 801cee0:	f109 39ff 	add.w	r9, r9, #4294967295
 801cee4:	fb0b a505 	mla	r5, fp, r5, sl
 801cee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ceec:	eb08 0a05 	add.w	sl, r8, r5
 801cef0:	f818 5005 	ldrb.w	r5, [r8, r5]
 801cef4:	f806 5c06 	strb.w	r5, [r6, #-6]
 801cef8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801cefc:	f806 5c05 	strb.w	r5, [r6, #-5]
 801cf00:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801cf04:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cf08:	e7de      	b.n	801cec8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801cf0a:	2600      	movs	r6, #0
 801cf0c:	1b9d      	subs	r5, r3, r6
 801cf0e:	2d00      	cmp	r5, #0
 801cf10:	dc38      	bgt.n	801cf84 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801cf12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cf16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf1a:	441c      	add	r4, r3
 801cf1c:	2900      	cmp	r1, #0
 801cf1e:	dd59      	ble.n	801cfd4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801cf20:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf2a:	3901      	subs	r1, #1
 801cf2c:	eeb0 6a62 	vmov.f32	s12, s5
 801cf30:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cf34:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf38:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf3c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801cf40:	eeb0 6a43 	vmov.f32	s12, s6
 801cf44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cf48:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801cf4c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf50:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf54:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf58:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf5c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf60:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf64:	ee12 2a90 	vmov	r2, s5
 801cf68:	eef0 2a47 	vmov.f32	s5, s14
 801cf6c:	fb92 fef3 	sdiv	lr, r2, r3
 801cf70:	ee13 2a10 	vmov	r2, s6
 801cf74:	eeb0 3a67 	vmov.f32	s6, s15
 801cf78:	fb92 fcf3 	sdiv	ip, r2, r3
 801cf7c:	9a01      	ldr	r2, [sp, #4]
 801cf7e:	bf08      	it	eq
 801cf80:	4613      	moveq	r3, r2
 801cf82:	e772      	b.n	801ce6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801cf84:	ea5f 4920 	movs.w	r9, r0, asr #16
 801cf88:	d420      	bmi.n	801cfcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf8a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801cf8e:	45cb      	cmp	fp, r9
 801cf90:	dd1c      	ble.n	801cfcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf92:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801cf96:	d419      	bmi.n	801cfcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf98:	68fd      	ldr	r5, [r7, #12]
 801cf9a:	4555      	cmp	r5, sl
 801cf9c:	dd16      	ble.n	801cfcc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801cf9e:	fa0f f58b 	sxth.w	r5, fp
 801cfa2:	fb0a 9505 	mla	r5, sl, r5, r9
 801cfa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfaa:	f818 9005 	ldrb.w	r9, [r8, r5]
 801cfae:	eb08 0b05 	add.w	fp, r8, r5
 801cfb2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801cfb6:	f804 9005 	strb.w	r9, [r4, r5]
 801cfba:	4425      	add	r5, r4
 801cfbc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801cfc0:	f885 9001 	strb.w	r9, [r5, #1]
 801cfc4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801cfc8:	f885 9002 	strb.w	r9, [r5, #2]
 801cfcc:	4470      	add	r0, lr
 801cfce:	4462      	add	r2, ip
 801cfd0:	3601      	adds	r6, #1
 801cfd2:	e79b      	b.n	801cf0c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801cfd4:	b003      	add	sp, #12
 801cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cfda <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfde:	b085      	sub	sp, #20
 801cfe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cfe4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cfe6:	9202      	str	r2, [sp, #8]
 801cfe8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801cfec:	6860      	ldr	r0, [r4, #4]
 801cfee:	9203      	str	r2, [sp, #12]
 801cff0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801cff4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801cff8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801cffc:	fb00 2505 	mla	r5, r0, r5, r2
 801d000:	6822      	ldr	r2, [r4, #0]
 801d002:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d006:	4415      	add	r5, r2
 801d008:	f8dc 2000 	ldr.w	r2, [ip]
 801d00c:	9201      	str	r2, [sp, #4]
 801d00e:	2900      	cmp	r1, #0
 801d010:	dc03      	bgt.n	801d01a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d012:	9a02      	ldr	r2, [sp, #8]
 801d014:	2a00      	cmp	r2, #0
 801d016:	f340 8122 	ble.w	801d25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d01a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d01c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d020:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d026:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d02a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d02e:	2b00      	cmp	r3, #0
 801d030:	dd0d      	ble.n	801d04e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d032:	1422      	asrs	r2, r4, #16
 801d034:	d405      	bmi.n	801d042 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d036:	4542      	cmp	r2, r8
 801d038:	da03      	bge.n	801d042 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d03a:	1402      	asrs	r2, r0, #16
 801d03c:	d401      	bmi.n	801d042 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801d03e:	42ba      	cmp	r2, r7
 801d040:	db06      	blt.n	801d050 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d042:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d044:	4474      	add	r4, lr
 801d046:	3b01      	subs	r3, #1
 801d048:	3503      	adds	r5, #3
 801d04a:	4410      	add	r0, r2
 801d04c:	e7ef      	b.n	801d02e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801d04e:	d072      	beq.n	801d136 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801d050:	1e5a      	subs	r2, r3, #1
 801d052:	fb0e 4602 	mla	r6, lr, r2, r4
 801d056:	1436      	asrs	r6, r6, #16
 801d058:	d462      	bmi.n	801d120 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d05a:	4546      	cmp	r6, r8
 801d05c:	da60      	bge.n	801d120 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d05e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801d060:	fb06 0202 	mla	r2, r6, r2, r0
 801d064:	1412      	asrs	r2, r2, #16
 801d066:	d45b      	bmi.n	801d120 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d068:	42ba      	cmp	r2, r7
 801d06a:	da59      	bge.n	801d120 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801d06c:	1cef      	adds	r7, r5, #3
 801d06e:	4699      	mov	r9, r3
 801d070:	f1b9 0f00 	cmp.w	r9, #0
 801d074:	dd5a      	ble.n	801d12c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d076:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d07a:	1426      	asrs	r6, r4, #16
 801d07c:	1402      	asrs	r2, r0, #16
 801d07e:	fb08 6202 	mla	r2, r8, r2, r6
 801d082:	9e01      	ldr	r6, [sp, #4]
 801d084:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801d088:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801d08c:	d041      	beq.n	801d112 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801d08e:	9a03      	ldr	r2, [sp, #12]
 801d090:	fa5f fb86 	uxtb.w	fp, r6
 801d094:	fb02 f808 	mul.w	r8, r2, r8
 801d098:	f108 0201 	add.w	r2, r8, #1
 801d09c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801d0a0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801d0a4:	1212      	asrs	r2, r2, #8
 801d0a6:	fa1f fa82 	uxth.w	sl, r2
 801d0aa:	43d2      	mvns	r2, r2
 801d0ac:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0b0:	b2d2      	uxtb	r2, r2
 801d0b2:	fb08 b802 	mla	r8, r8, r2, fp
 801d0b6:	fa1f f888 	uxth.w	r8, r8
 801d0ba:	f108 0b01 	add.w	fp, r8, #1
 801d0be:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d0c2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801d0c6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801d0ca:	fb1b fb0a 	smulbb	fp, fp, sl
 801d0ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d0d2:	fb16 fa0a 	smulbb	sl, r6, sl
 801d0d6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801d0da:	f807 8c03 	strb.w	r8, [r7, #-3]
 801d0de:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801d0e2:	fb06 aa02 	mla	sl, r6, r2, sl
 801d0e6:	fb08 b802 	mla	r8, r8, r2, fp
 801d0ea:	fa1f fa8a 	uxth.w	sl, sl
 801d0ee:	fa1f f888 	uxth.w	r8, r8
 801d0f2:	f10a 0601 	add.w	r6, sl, #1
 801d0f6:	f108 0b01 	add.w	fp, r8, #1
 801d0fa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801d0fe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d102:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d106:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d10a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801d10e:	f807 8c02 	strb.w	r8, [r7, #-2]
 801d112:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d114:	4474      	add	r4, lr
 801d116:	3703      	adds	r7, #3
 801d118:	f109 39ff 	add.w	r9, r9, #4294967295
 801d11c:	4410      	add	r0, r2
 801d11e:	e7a7      	b.n	801d070 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d120:	f04f 0800 	mov.w	r8, #0
 801d124:	eba3 0208 	sub.w	r2, r3, r8
 801d128:	2a00      	cmp	r2, #0
 801d12a:	dc3b      	bgt.n	801d1a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801d12c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d130:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d134:	441d      	add	r5, r3
 801d136:	2900      	cmp	r1, #0
 801d138:	f340 8091 	ble.w	801d25e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801d13c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d142:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d146:	3901      	subs	r1, #1
 801d148:	eeb0 6a62 	vmov.f32	s12, s5
 801d14c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d150:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d154:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d158:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d15c:	eeb0 6a43 	vmov.f32	s12, s6
 801d160:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d164:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d168:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d16c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d170:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d174:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d178:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d17c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d180:	ee12 2a90 	vmov	r2, s5
 801d184:	eef0 2a47 	vmov.f32	s5, s14
 801d188:	fb92 fef3 	sdiv	lr, r2, r3
 801d18c:	ee13 2a10 	vmov	r2, s6
 801d190:	eeb0 3a67 	vmov.f32	s6, s15
 801d194:	fb92 f3f3 	sdiv	r3, r2, r3
 801d198:	9a02      	ldr	r2, [sp, #8]
 801d19a:	9312      	str	r3, [sp, #72]	; 0x48
 801d19c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d19e:	bf08      	it	eq
 801d1a0:	4613      	moveq	r3, r2
 801d1a2:	e734      	b.n	801d00e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d1a4:	1427      	asrs	r7, r4, #16
 801d1a6:	d454      	bmi.n	801d252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d1a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d1ac:	42be      	cmp	r6, r7
 801d1ae:	dd50      	ble.n	801d252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d1b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801d1b4:	d44d      	bmi.n	801d252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d1b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d1ba:	454a      	cmp	r2, r9
 801d1bc:	dd49      	ble.n	801d252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d1be:	b236      	sxth	r6, r6
 801d1c0:	9a01      	ldr	r2, [sp, #4]
 801d1c2:	fb09 7606 	mla	r6, r9, r6, r7
 801d1c6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d1ca:	0e3a      	lsrs	r2, r7, #24
 801d1cc:	d041      	beq.n	801d252 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801d1ce:	9e03      	ldr	r6, [sp, #12]
 801d1d0:	fa5f fb87 	uxtb.w	fp, r7
 801d1d4:	4372      	muls	r2, r6
 801d1d6:	1c56      	adds	r6, r2, #1
 801d1d8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d1dc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801d1e0:	1212      	asrs	r2, r2, #8
 801d1e2:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d1e6:	fa1f fa82 	uxth.w	sl, r2
 801d1ea:	43d2      	mvns	r2, r2
 801d1ec:	fb1b fb0a 	smulbb	fp, fp, sl
 801d1f0:	b2d2      	uxtb	r2, r2
 801d1f2:	fb09 b902 	mla	r9, r9, r2, fp
 801d1f6:	fa1f f989 	uxth.w	r9, r9
 801d1fa:	f109 0b01 	add.w	fp, r9, #1
 801d1fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d202:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d206:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d20a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d20e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d212:	fb17 fa0a 	smulbb	sl, r7, sl
 801d216:	f805 9006 	strb.w	r9, [r5, r6]
 801d21a:	442e      	add	r6, r5
 801d21c:	78b7      	ldrb	r7, [r6, #2]
 801d21e:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d222:	fb07 aa02 	mla	sl, r7, r2, sl
 801d226:	fb09 b902 	mla	r9, r9, r2, fp
 801d22a:	fa1f fa8a 	uxth.w	sl, sl
 801d22e:	fa1f f989 	uxth.w	r9, r9
 801d232:	f10a 0701 	add.w	r7, sl, #1
 801d236:	f109 0b01 	add.w	fp, r9, #1
 801d23a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d23e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d242:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d246:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d24a:	f886 a002 	strb.w	sl, [r6, #2]
 801d24e:	f886 9001 	strb.w	r9, [r6, #1]
 801d252:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d254:	4474      	add	r4, lr
 801d256:	f108 0801 	add.w	r8, r8, #1
 801d25a:	4410      	add	r0, r2
 801d25c:	e762      	b.n	801d124 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801d25e:	b005      	add	sp, #20
 801d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d264 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d268:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d26e:	9201      	str	r2, [sp, #4]
 801d270:	6860      	ldr	r0, [r4, #4]
 801d272:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801d276:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801d27a:	fb00 2505 	mla	r5, r0, r5, r2
 801d27e:	6822      	ldr	r2, [r4, #0]
 801d280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d284:	4415      	add	r5, r2
 801d286:	f8dc 2000 	ldr.w	r2, [ip]
 801d28a:	9200      	str	r2, [sp, #0]
 801d28c:	2900      	cmp	r1, #0
 801d28e:	dc03      	bgt.n	801d298 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801d290:	9a01      	ldr	r2, [sp, #4]
 801d292:	2a00      	cmp	r2, #0
 801d294:	f340 812b 	ble.w	801d4ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d298:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d29a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d29e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d2a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d2a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d2a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d2ac:	2b00      	cmp	r3, #0
 801d2ae:	dd0e      	ble.n	801d2ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801d2b0:	1422      	asrs	r2, r4, #16
 801d2b2:	d405      	bmi.n	801d2c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d2b4:	4572      	cmp	r2, lr
 801d2b6:	da03      	bge.n	801d2c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d2b8:	1402      	asrs	r2, r0, #16
 801d2ba:	d401      	bmi.n	801d2c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801d2bc:	42ba      	cmp	r2, r7
 801d2be:	db07      	blt.n	801d2d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d2c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	3503      	adds	r5, #3
 801d2c6:	4414      	add	r4, r2
 801d2c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d2ca:	4410      	add	r0, r2
 801d2cc:	e7ee      	b.n	801d2ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d2ce:	d06f      	beq.n	801d3b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801d2d0:	1e5a      	subs	r2, r3, #1
 801d2d2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801d2d4:	fb06 4602 	mla	r6, r6, r2, r4
 801d2d8:	1436      	asrs	r6, r6, #16
 801d2da:	d45e      	bmi.n	801d39a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d2dc:	4576      	cmp	r6, lr
 801d2de:	da5c      	bge.n	801d39a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d2e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801d2e2:	fb06 0202 	mla	r2, r6, r2, r0
 801d2e6:	1412      	asrs	r2, r2, #16
 801d2e8:	d457      	bmi.n	801d39a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d2ea:	42ba      	cmp	r2, r7
 801d2ec:	da55      	bge.n	801d39a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801d2ee:	1cee      	adds	r6, r5, #3
 801d2f0:	469a      	mov	sl, r3
 801d2f2:	f1ba 0f00 	cmp.w	sl, #0
 801d2f6:	dd56      	ble.n	801d3a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d2f8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d2fc:	1427      	asrs	r7, r4, #16
 801d2fe:	1402      	asrs	r2, r0, #16
 801d300:	fb0e 7202 	mla	r2, lr, r2, r7
 801d304:	9f00      	ldr	r7, [sp, #0]
 801d306:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801d30a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801d30e:	d03c      	beq.n	801d38a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d310:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d314:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d318:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d31c:	fa5f f28e 	uxtb.w	r2, lr
 801d320:	b2ff      	uxtb	r7, r7
 801d322:	f000 80dd 	beq.w	801d4e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d326:	fa1f f882 	uxth.w	r8, r2
 801d32a:	43d2      	mvns	r2, r2
 801d32c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801d330:	fb17 f708 	smulbb	r7, r7, r8
 801d334:	b2d2      	uxtb	r2, r2
 801d336:	fb19 f908 	smulbb	r9, r9, r8
 801d33a:	fb0e 7702 	mla	r7, lr, r2, r7
 801d33e:	fb1b f808 	smulbb	r8, fp, r8
 801d342:	b2bf      	uxth	r7, r7
 801d344:	f107 0e01 	add.w	lr, r7, #1
 801d348:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d34c:	123f      	asrs	r7, r7, #8
 801d34e:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d352:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801d356:	fb07 9902 	mla	r9, r7, r2, r9
 801d35a:	fa1f f989 	uxth.w	r9, r9
 801d35e:	f109 0701 	add.w	r7, r9, #1
 801d362:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d366:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d36a:	fb07 8802 	mla	r8, r7, r2, r8
 801d36e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d372:	fa1f f888 	uxth.w	r8, r8
 801d376:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d37a:	f108 0201 	add.w	r2, r8, #1
 801d37e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d382:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d386:	f806 8c01 	strb.w	r8, [r6, #-1]
 801d38a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d38c:	3603      	adds	r6, #3
 801d38e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d392:	4414      	add	r4, r2
 801d394:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d396:	4410      	add	r0, r2
 801d398:	e7ab      	b.n	801d2f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d39a:	f04f 0e00 	mov.w	lr, #0
 801d39e:	eba3 020e 	sub.w	r2, r3, lr
 801d3a2:	2a00      	cmp	r2, #0
 801d3a4:	dc3d      	bgt.n	801d422 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801d3a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d3ae:	441d      	add	r5, r3
 801d3b0:	2900      	cmp	r1, #0
 801d3b2:	f340 809c 	ble.w	801d4ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d3b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d3ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d3bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d3c0:	3901      	subs	r1, #1
 801d3c2:	eeb0 6a62 	vmov.f32	s12, s5
 801d3c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d3ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d3ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3d2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801d3d6:	eeb0 6a43 	vmov.f32	s12, s6
 801d3da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d3de:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801d3e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d3e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d3ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d3ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d3f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d3f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d3fa:	ee12 2a90 	vmov	r2, s5
 801d3fe:	eef0 2a47 	vmov.f32	s5, s14
 801d402:	fb92 f3f3 	sdiv	r3, r2, r3
 801d406:	ee13 2a10 	vmov	r2, s6
 801d40a:	930f      	str	r3, [sp, #60]	; 0x3c
 801d40c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d40e:	eeb0 3a67 	vmov.f32	s6, s15
 801d412:	fb92 f3f3 	sdiv	r3, r2, r3
 801d416:	9a01      	ldr	r2, [sp, #4]
 801d418:	9310      	str	r3, [sp, #64]	; 0x40
 801d41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d41c:	bf08      	it	eq
 801d41e:	4613      	moveq	r3, r2
 801d420:	e734      	b.n	801d28c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801d422:	1427      	asrs	r7, r4, #16
 801d424:	d44d      	bmi.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d426:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801d42a:	42be      	cmp	r6, r7
 801d42c:	dd49      	ble.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d42e:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d432:	d446      	bmi.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d434:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d438:	4542      	cmp	r2, r8
 801d43a:	dd42      	ble.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d43c:	b236      	sxth	r6, r6
 801d43e:	9a00      	ldr	r2, [sp, #0]
 801d440:	fb08 7606 	mla	r6, r8, r6, r7
 801d444:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801d448:	0e3a      	lsrs	r2, r7, #24
 801d44a:	d03a      	beq.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d44c:	2aff      	cmp	r2, #255	; 0xff
 801d44e:	b2d6      	uxtb	r6, r2
 801d450:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d454:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801d458:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801d45c:	b2ff      	uxtb	r7, r7
 801d45e:	d037      	beq.n	801d4d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801d460:	fa1f f986 	uxth.w	r9, r6
 801d464:	4472      	add	r2, lr
 801d466:	43f6      	mvns	r6, r6
 801d468:	f815 8002 	ldrb.w	r8, [r5, r2]
 801d46c:	fb17 f709 	smulbb	r7, r7, r9
 801d470:	fb1a fa09 	smulbb	sl, sl, r9
 801d474:	b2f6      	uxtb	r6, r6
 801d476:	fb1b f909 	smulbb	r9, fp, r9
 801d47a:	fb08 7706 	mla	r7, r8, r6, r7
 801d47e:	b2bf      	uxth	r7, r7
 801d480:	f107 0801 	add.w	r8, r7, #1
 801d484:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801d488:	123f      	asrs	r7, r7, #8
 801d48a:	54af      	strb	r7, [r5, r2]
 801d48c:	442a      	add	r2, r5
 801d48e:	7857      	ldrb	r7, [r2, #1]
 801d490:	fb07 aa06 	mla	sl, r7, r6, sl
 801d494:	fa1f fa8a 	uxth.w	sl, sl
 801d498:	f10a 0701 	add.w	r7, sl, #1
 801d49c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d4a0:	7897      	ldrb	r7, [r2, #2]
 801d4a2:	fb07 9906 	mla	r9, r7, r6, r9
 801d4a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d4aa:	fa1f f989 	uxth.w	r9, r9
 801d4ae:	f882 a001 	strb.w	sl, [r2, #1]
 801d4b2:	f109 0601 	add.w	r6, r9, #1
 801d4b6:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801d4ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d4be:	f882 9002 	strb.w	r9, [r2, #2]
 801d4c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4c4:	f10e 0e01 	add.w	lr, lr, #1
 801d4c8:	4414      	add	r4, r2
 801d4ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d4cc:	4410      	add	r0, r2
 801d4ce:	e766      	b.n	801d39e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801d4d0:	4472      	add	r2, lr
 801d4d2:	54af      	strb	r7, [r5, r2]
 801d4d4:	442a      	add	r2, r5
 801d4d6:	f882 a001 	strb.w	sl, [r2, #1]
 801d4da:	f882 b002 	strb.w	fp, [r2, #2]
 801d4de:	e7f0      	b.n	801d4c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801d4e0:	f806 7c03 	strb.w	r7, [r6, #-3]
 801d4e4:	f806 9c02 	strb.w	r9, [r6, #-2]
 801d4e8:	f806 bc01 	strb.w	fp, [r6, #-1]
 801d4ec:	e74d      	b.n	801d38a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801d4ee:	b003      	add	sp, #12
 801d4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d4f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4f8:	b087      	sub	sp, #28
 801d4fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d4fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d500:	9204      	str	r2, [sp, #16]
 801d502:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d506:	6860      	ldr	r0, [r4, #4]
 801d508:	9205      	str	r2, [sp, #20]
 801d50a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801d50e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 801d512:	9101      	str	r1, [sp, #4]
 801d514:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801d518:	fb00 2505 	mla	r5, r0, r5, r2
 801d51c:	6822      	ldr	r2, [r4, #0]
 801d51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d522:	4415      	add	r5, r2
 801d524:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d528:	3201      	adds	r2, #1
 801d52a:	f022 0201 	bic.w	r2, r2, #1
 801d52e:	9202      	str	r2, [sp, #8]
 801d530:	f8dc 2000 	ldr.w	r2, [ip]
 801d534:	9203      	str	r2, [sp, #12]
 801d536:	9a01      	ldr	r2, [sp, #4]
 801d538:	2a00      	cmp	r2, #0
 801d53a:	dc03      	bgt.n	801d544 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801d53c:	9a04      	ldr	r2, [sp, #16]
 801d53e:	2a00      	cmp	r2, #0
 801d540:	f340 8135 	ble.w	801d7ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d546:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801d54a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d550:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d554:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801d558:	2b00      	cmp	r3, #0
 801d55a:	dd0d      	ble.n	801d578 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801d55c:	1422      	asrs	r2, r4, #16
 801d55e:	d405      	bmi.n	801d56c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d560:	4542      	cmp	r2, r8
 801d562:	da03      	bge.n	801d56c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d564:	1402      	asrs	r2, r0, #16
 801d566:	d401      	bmi.n	801d56c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d568:	42ba      	cmp	r2, r7
 801d56a:	db06      	blt.n	801d57a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d56c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d56e:	4474      	add	r4, lr
 801d570:	3b01      	subs	r3, #1
 801d572:	3503      	adds	r5, #3
 801d574:	4410      	add	r0, r2
 801d576:	e7ef      	b.n	801d558 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801d578:	d077      	beq.n	801d66a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801d57a:	1e5a      	subs	r2, r3, #1
 801d57c:	fb0e 4602 	mla	r6, lr, r2, r4
 801d580:	1436      	asrs	r6, r6, #16
 801d582:	d469      	bmi.n	801d658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d584:	4546      	cmp	r6, r8
 801d586:	da67      	bge.n	801d658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d588:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d58a:	fb06 0202 	mla	r2, r6, r2, r0
 801d58e:	1412      	asrs	r2, r2, #16
 801d590:	d462      	bmi.n	801d658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d592:	42ba      	cmp	r2, r7
 801d594:	da60      	bge.n	801d658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d596:	1cee      	adds	r6, r5, #3
 801d598:	4699      	mov	r9, r3
 801d59a:	f1b9 0f00 	cmp.w	r9, #0
 801d59e:	dd5f      	ble.n	801d660 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801d5a0:	1422      	asrs	r2, r4, #16
 801d5a2:	9902      	ldr	r1, [sp, #8]
 801d5a4:	1407      	asrs	r7, r0, #16
 801d5a6:	fb01 2707 	mla	r7, r1, r7, r2
 801d5aa:	9903      	ldr	r1, [sp, #12]
 801d5ac:	087a      	lsrs	r2, r7, #1
 801d5ae:	5c8a      	ldrb	r2, [r1, r2]
 801d5b0:	07f9      	lsls	r1, r7, #31
 801d5b2:	bf54      	ite	pl
 801d5b4:	f002 020f 	andpl.w	r2, r2, #15
 801d5b8:	1112      	asrmi	r2, r2, #4
 801d5ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d5be:	b2d2      	uxtb	r2, r2
 801d5c0:	2a00      	cmp	r2, #0
 801d5c2:	d042      	beq.n	801d64a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801d5c4:	497b      	ldr	r1, [pc, #492]	; (801d7b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d5c6:	680f      	ldr	r7, [r1, #0]
 801d5c8:	9905      	ldr	r1, [sp, #20]
 801d5ca:	fa5f fb87 	uxtb.w	fp, r7
 801d5ce:	434a      	muls	r2, r1
 801d5d0:	f102 0801 	add.w	r8, r2, #1
 801d5d4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801d5d8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801d5dc:	1212      	asrs	r2, r2, #8
 801d5de:	fa1f fa82 	uxth.w	sl, r2
 801d5e2:	43d2      	mvns	r2, r2
 801d5e4:	fb1b fb0a 	smulbb	fp, fp, sl
 801d5e8:	b2d2      	uxtb	r2, r2
 801d5ea:	fb08 b802 	mla	r8, r8, r2, fp
 801d5ee:	fa1f f888 	uxth.w	r8, r8
 801d5f2:	f108 0b01 	add.w	fp, r8, #1
 801d5f6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d5fa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801d5fe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d602:	fb1b fb0a 	smulbb	fp, fp, sl
 801d606:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d60a:	fb17 fa0a 	smulbb	sl, r7, sl
 801d60e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801d612:	f806 8c03 	strb.w	r8, [r6, #-3]
 801d616:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801d61a:	fb07 aa02 	mla	sl, r7, r2, sl
 801d61e:	fb08 b802 	mla	r8, r8, r2, fp
 801d622:	fa1f fa8a 	uxth.w	sl, sl
 801d626:	fa1f f888 	uxth.w	r8, r8
 801d62a:	f10a 0701 	add.w	r7, sl, #1
 801d62e:	f108 0b01 	add.w	fp, r8, #1
 801d632:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d636:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801d63a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d63e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d642:	f806 ac01 	strb.w	sl, [r6, #-1]
 801d646:	f806 8c02 	strb.w	r8, [r6, #-2]
 801d64a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d64c:	4474      	add	r4, lr
 801d64e:	3603      	adds	r6, #3
 801d650:	f109 39ff 	add.w	r9, r9, #4294967295
 801d654:	4410      	add	r0, r2
 801d656:	e7a0      	b.n	801d59a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801d658:	2700      	movs	r7, #0
 801d65a:	1bda      	subs	r2, r3, r7
 801d65c:	2a00      	cmp	r2, #0
 801d65e:	dc3e      	bgt.n	801d6de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d660:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d668:	441d      	add	r5, r3
 801d66a:	9b01      	ldr	r3, [sp, #4]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	f340 809e 	ble.w	801d7ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801d672:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d678:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d67c:	eeb0 6a62 	vmov.f32	s12, s5
 801d680:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d684:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d688:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d68c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d690:	eeb0 6a43 	vmov.f32	s12, s6
 801d694:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d698:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d69c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d6a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d6a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d6a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d6ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d6b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d6b4:	ee12 2a90 	vmov	r2, s5
 801d6b8:	eef0 2a47 	vmov.f32	s5, s14
 801d6bc:	fb92 fef3 	sdiv	lr, r2, r3
 801d6c0:	ee13 2a10 	vmov	r2, s6
 801d6c4:	eeb0 3a67 	vmov.f32	s6, s15
 801d6c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d6cc:	9314      	str	r3, [sp, #80]	; 0x50
 801d6ce:	9b01      	ldr	r3, [sp, #4]
 801d6d0:	9a04      	ldr	r2, [sp, #16]
 801d6d2:	3b01      	subs	r3, #1
 801d6d4:	9301      	str	r3, [sp, #4]
 801d6d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d6d8:	bf08      	it	eq
 801d6da:	4613      	moveq	r3, r2
 801d6dc:	e72b      	b.n	801d536 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801d6de:	1426      	asrs	r6, r4, #16
 801d6e0:	d460      	bmi.n	801d7a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d6e6:	42b2      	cmp	r2, r6
 801d6e8:	dd5c      	ble.n	801d7a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6ea:	ea5f 4820 	movs.w	r8, r0, asr #16
 801d6ee:	d459      	bmi.n	801d7a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d6f4:	4542      	cmp	r2, r8
 801d6f6:	dd55      	ble.n	801d7a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d6f8:	9a02      	ldr	r2, [sp, #8]
 801d6fa:	9903      	ldr	r1, [sp, #12]
 801d6fc:	fb08 6602 	mla	r6, r8, r2, r6
 801d700:	0872      	lsrs	r2, r6, #1
 801d702:	07f6      	lsls	r6, r6, #31
 801d704:	5c8a      	ldrb	r2, [r1, r2]
 801d706:	bf54      	ite	pl
 801d708:	f002 020f 	andpl.w	r2, r2, #15
 801d70c:	1112      	asrmi	r2, r2, #4
 801d70e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d712:	b2d2      	uxtb	r2, r2
 801d714:	2a00      	cmp	r2, #0
 801d716:	d045      	beq.n	801d7a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801d718:	4926      	ldr	r1, [pc, #152]	; (801d7b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801d71a:	f8d1 8000 	ldr.w	r8, [r1]
 801d71e:	9905      	ldr	r1, [sp, #20]
 801d720:	fa5f fb88 	uxtb.w	fp, r8
 801d724:	434a      	muls	r2, r1
 801d726:	1c56      	adds	r6, r2, #1
 801d728:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801d72c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801d730:	1212      	asrs	r2, r2, #8
 801d732:	f815 9006 	ldrb.w	r9, [r5, r6]
 801d736:	fa1f fa82 	uxth.w	sl, r2
 801d73a:	43d2      	mvns	r2, r2
 801d73c:	fb1b fb0a 	smulbb	fp, fp, sl
 801d740:	b2d2      	uxtb	r2, r2
 801d742:	fb09 b902 	mla	r9, r9, r2, fp
 801d746:	fa1f f989 	uxth.w	r9, r9
 801d74a:	f109 0b01 	add.w	fp, r9, #1
 801d74e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d752:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801d756:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801d75a:	fb1b fb0a 	smulbb	fp, fp, sl
 801d75e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d762:	fb18 fa0a 	smulbb	sl, r8, sl
 801d766:	f805 9006 	strb.w	r9, [r5, r6]
 801d76a:	442e      	add	r6, r5
 801d76c:	f896 8002 	ldrb.w	r8, [r6, #2]
 801d770:	f896 9001 	ldrb.w	r9, [r6, #1]
 801d774:	fb08 aa02 	mla	sl, r8, r2, sl
 801d778:	fb09 b902 	mla	r9, r9, r2, fp
 801d77c:	fa1f fa8a 	uxth.w	sl, sl
 801d780:	fa1f f989 	uxth.w	r9, r9
 801d784:	f10a 0801 	add.w	r8, sl, #1
 801d788:	f109 0b01 	add.w	fp, r9, #1
 801d78c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801d790:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801d794:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d798:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d79c:	f886 a002 	strb.w	sl, [r6, #2]
 801d7a0:	f886 9001 	strb.w	r9, [r6, #1]
 801d7a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d7a6:	4474      	add	r4, lr
 801d7a8:	3701      	adds	r7, #1
 801d7aa:	4410      	add	r0, r2
 801d7ac:	e755      	b.n	801d65a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801d7ae:	b007      	add	sp, #28
 801d7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7b4:	24010070 	.word	0x24010070

0801d7b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7bc:	b085      	sub	sp, #20
 801d7be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d7c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d7c4:	9203      	str	r2, [sp, #12]
 801d7c6:	6860      	ldr	r0, [r4, #4]
 801d7c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801d7cc:	9100      	str	r1, [sp, #0]
 801d7ce:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 801d7d2:	fb00 2606 	mla	r6, r0, r6, r2
 801d7d6:	6822      	ldr	r2, [r4, #0]
 801d7d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d7dc:	4416      	add	r6, r2
 801d7de:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d7e2:	3201      	adds	r2, #1
 801d7e4:	f022 0201 	bic.w	r2, r2, #1
 801d7e8:	9201      	str	r2, [sp, #4]
 801d7ea:	f8dc 2000 	ldr.w	r2, [ip]
 801d7ee:	9202      	str	r2, [sp, #8]
 801d7f0:	9a00      	ldr	r2, [sp, #0]
 801d7f2:	2a00      	cmp	r2, #0
 801d7f4:	dc03      	bgt.n	801d7fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801d7f6:	9a03      	ldr	r2, [sp, #12]
 801d7f8:	2a00      	cmp	r2, #0
 801d7fa:	f340 8140 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d7fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d800:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801d804:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801d808:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d80a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801d80e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801d812:	2b00      	cmp	r3, #0
 801d814:	dd0e      	ble.n	801d834 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d816:	142a      	asrs	r2, r5, #16
 801d818:	d405      	bmi.n	801d826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d81a:	4572      	cmp	r2, lr
 801d81c:	da03      	bge.n	801d826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d81e:	1422      	asrs	r2, r4, #16
 801d820:	d401      	bmi.n	801d826 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d822:	42ba      	cmp	r2, r7
 801d824:	db07      	blt.n	801d836 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801d826:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d828:	3b01      	subs	r3, #1
 801d82a:	3603      	adds	r6, #3
 801d82c:	4415      	add	r5, r2
 801d82e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d830:	4414      	add	r4, r2
 801d832:	e7ee      	b.n	801d812 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801d834:	d072      	beq.n	801d91c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801d836:	1e5a      	subs	r2, r3, #1
 801d838:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d83a:	fb00 5002 	mla	r0, r0, r2, r5
 801d83e:	1400      	asrs	r0, r0, #16
 801d840:	d463      	bmi.n	801d90a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d842:	4570      	cmp	r0, lr
 801d844:	da61      	bge.n	801d90a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d846:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d848:	fb00 4202 	mla	r2, r0, r2, r4
 801d84c:	1412      	asrs	r2, r2, #16
 801d84e:	d45c      	bmi.n	801d90a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d850:	42ba      	cmp	r2, r7
 801d852:	da5a      	bge.n	801d90a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801d854:	1cf0      	adds	r0, r6, #3
 801d856:	469a      	mov	sl, r3
 801d858:	f1ba 0f00 	cmp.w	sl, #0
 801d85c:	dd59      	ble.n	801d912 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801d85e:	142a      	asrs	r2, r5, #16
 801d860:	9901      	ldr	r1, [sp, #4]
 801d862:	1427      	asrs	r7, r4, #16
 801d864:	fb01 2707 	mla	r7, r1, r7, r2
 801d868:	9902      	ldr	r1, [sp, #8]
 801d86a:	087a      	lsrs	r2, r7, #1
 801d86c:	5c8a      	ldrb	r2, [r1, r2]
 801d86e:	07f9      	lsls	r1, r7, #31
 801d870:	bf54      	ite	pl
 801d872:	f002 020f 	andpl.w	r2, r2, #15
 801d876:	1112      	asrmi	r2, r2, #4
 801d878:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d87c:	b2d2      	uxtb	r2, r2
 801d87e:	2a00      	cmp	r2, #0
 801d880:	d03b      	beq.n	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801d882:	4980      	ldr	r1, [pc, #512]	; (801da84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d884:	2aff      	cmp	r2, #255	; 0xff
 801d886:	680f      	ldr	r7, [r1, #0]
 801d888:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801d88c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d890:	b2ff      	uxtb	r7, r7
 801d892:	f000 80ed 	beq.w	801da70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801d896:	fa1f f882 	uxth.w	r8, r2
 801d89a:	43d2      	mvns	r2, r2
 801d89c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801d8a0:	fb17 f708 	smulbb	r7, r7, r8
 801d8a4:	b2d2      	uxtb	r2, r2
 801d8a6:	fb19 f908 	smulbb	r9, r9, r8
 801d8aa:	fb0e 7702 	mla	r7, lr, r2, r7
 801d8ae:	fb1b f808 	smulbb	r8, fp, r8
 801d8b2:	b2bf      	uxth	r7, r7
 801d8b4:	f107 0e01 	add.w	lr, r7, #1
 801d8b8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801d8bc:	123f      	asrs	r7, r7, #8
 801d8be:	f800 7c03 	strb.w	r7, [r0, #-3]
 801d8c2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801d8c6:	fb07 9902 	mla	r9, r7, r2, r9
 801d8ca:	fa1f f989 	uxth.w	r9, r9
 801d8ce:	f109 0701 	add.w	r7, r9, #1
 801d8d2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801d8d6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801d8da:	fb07 8802 	mla	r8, r7, r2, r8
 801d8de:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d8e2:	fa1f f888 	uxth.w	r8, r8
 801d8e6:	f800 9c02 	strb.w	r9, [r0, #-2]
 801d8ea:	f108 0201 	add.w	r2, r8, #1
 801d8ee:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801d8f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801d8f6:	f800 8c01 	strb.w	r8, [r0, #-1]
 801d8fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801d8fc:	3003      	adds	r0, #3
 801d8fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d902:	4415      	add	r5, r2
 801d904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d906:	4414      	add	r4, r2
 801d908:	e7a6      	b.n	801d858 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d90a:	2700      	movs	r7, #0
 801d90c:	1bda      	subs	r2, r3, r7
 801d90e:	2a00      	cmp	r2, #0
 801d910:	dc40      	bgt.n	801d994 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801d912:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d916:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d91a:	441e      	add	r6, r3
 801d91c:	9b00      	ldr	r3, [sp, #0]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	f340 80ad 	ble.w	801da7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801d924:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d92a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d92e:	eeb0 6a62 	vmov.f32	s12, s5
 801d932:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d936:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d93a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d93e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801d942:	eeb0 6a43 	vmov.f32	s12, s6
 801d946:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d94a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801d94e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d952:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d956:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d95a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d95e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d962:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d966:	ee12 2a90 	vmov	r2, s5
 801d96a:	eef0 2a47 	vmov.f32	s5, s14
 801d96e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d972:	ee13 2a10 	vmov	r2, s6
 801d976:	9311      	str	r3, [sp, #68]	; 0x44
 801d978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d97a:	eeb0 3a67 	vmov.f32	s6, s15
 801d97e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d982:	9312      	str	r3, [sp, #72]	; 0x48
 801d984:	9b00      	ldr	r3, [sp, #0]
 801d986:	9a03      	ldr	r2, [sp, #12]
 801d988:	3b01      	subs	r3, #1
 801d98a:	9300      	str	r3, [sp, #0]
 801d98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d98e:	bf08      	it	eq
 801d990:	4613      	moveq	r3, r2
 801d992:	e72d      	b.n	801d7f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801d994:	1428      	asrs	r0, r5, #16
 801d996:	d45c      	bmi.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d998:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801d99c:	4282      	cmp	r2, r0
 801d99e:	dd58      	ble.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d9a0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801d9a4:	d455      	bmi.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d9a6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801d9aa:	4572      	cmp	r2, lr
 801d9ac:	dd51      	ble.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d9ae:	9a01      	ldr	r2, [sp, #4]
 801d9b0:	9902      	ldr	r1, [sp, #8]
 801d9b2:	fb0e 0002 	mla	r0, lr, r2, r0
 801d9b6:	0842      	lsrs	r2, r0, #1
 801d9b8:	07c0      	lsls	r0, r0, #31
 801d9ba:	5c8a      	ldrb	r2, [r1, r2]
 801d9bc:	bf54      	ite	pl
 801d9be:	f002 020f 	andpl.w	r2, r2, #15
 801d9c2:	1112      	asrmi	r2, r2, #4
 801d9c4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d9c8:	b2d2      	uxtb	r2, r2
 801d9ca:	2a00      	cmp	r2, #0
 801d9cc:	d041      	beq.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d9ce:	492d      	ldr	r1, [pc, #180]	; (801da84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801d9d0:	2aff      	cmp	r2, #255	; 0xff
 801d9d2:	6808      	ldr	r0, [r1, #0]
 801d9d4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801d9d8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801d9dc:	fa5f fe80 	uxtb.w	lr, r0
 801d9e0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801d9e4:	d03b      	beq.n	801da5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d9e6:	fa1f f982 	uxth.w	r9, r2
 801d9ea:	4438      	add	r0, r7
 801d9ec:	43d2      	mvns	r2, r2
 801d9ee:	f816 8000 	ldrb.w	r8, [r6, r0]
 801d9f2:	fb1e fe09 	smulbb	lr, lr, r9
 801d9f6:	fb1a fa09 	smulbb	sl, sl, r9
 801d9fa:	b2d2      	uxtb	r2, r2
 801d9fc:	fb1b f909 	smulbb	r9, fp, r9
 801da00:	fb08 ee02 	mla	lr, r8, r2, lr
 801da04:	fa1f fe8e 	uxth.w	lr, lr
 801da08:	f10e 0801 	add.w	r8, lr, #1
 801da0c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801da10:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801da14:	f806 e000 	strb.w	lr, [r6, r0]
 801da18:	4430      	add	r0, r6
 801da1a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801da1e:	fb0e aa02 	mla	sl, lr, r2, sl
 801da22:	fa1f fa8a 	uxth.w	sl, sl
 801da26:	f10a 0e01 	add.w	lr, sl, #1
 801da2a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801da2e:	f890 e002 	ldrb.w	lr, [r0, #2]
 801da32:	fb0e 9902 	mla	r9, lr, r2, r9
 801da36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801da3a:	fa1f f989 	uxth.w	r9, r9
 801da3e:	f880 a001 	strb.w	sl, [r0, #1]
 801da42:	f109 0201 	add.w	r2, r9, #1
 801da46:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801da4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801da4e:	f880 9002 	strb.w	r9, [r0, #2]
 801da52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801da54:	3701      	adds	r7, #1
 801da56:	4415      	add	r5, r2
 801da58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801da5a:	4414      	add	r4, r2
 801da5c:	e756      	b.n	801d90c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801da5e:	4438      	add	r0, r7
 801da60:	f806 e000 	strb.w	lr, [r6, r0]
 801da64:	4430      	add	r0, r6
 801da66:	f880 a001 	strb.w	sl, [r0, #1]
 801da6a:	f880 b002 	strb.w	fp, [r0, #2]
 801da6e:	e7f0      	b.n	801da52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801da70:	f800 7c03 	strb.w	r7, [r0, #-3]
 801da74:	f800 9c02 	strb.w	r9, [r0, #-2]
 801da78:	f800 bc01 	strb.w	fp, [r0, #-1]
 801da7c:	e73d      	b.n	801d8fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801da7e:	b005      	add	sp, #20
 801da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da84:	24010070 	.word	0x24010070

0801da88 <_ZN8touchgfx8LCD24bppD1Ev>:
 801da88:	4770      	bx	lr

0801da8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801da8a:	4770      	bx	lr

0801da8c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801da8c:	4770      	bx	lr

0801da8e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801da8e:	4770      	bx	lr

0801da90 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801da90:	4770      	bx	lr

0801da92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801da92:	4770      	bx	lr

0801da94 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801da94:	4770      	bx	lr

0801da96 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801da96:	4770      	bx	lr

0801da98 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801da98:	4770      	bx	lr

0801da9a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801da9a:	4770      	bx	lr

0801da9c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801da9c:	4770      	bx	lr

0801da9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801da9e:	4770      	bx	lr

0801daa0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801daa0:	4770      	bx	lr

0801daa2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801daa2:	4770      	bx	lr

0801daa4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801daa4:	4770      	bx	lr

0801daa6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801daa6:	4770      	bx	lr

0801daa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801daa8:	4770      	bx	lr

0801daaa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801daaa:	4770      	bx	lr

0801daac <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801daac:	4770      	bx	lr

0801daae <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801daae:	4770      	bx	lr

0801dab0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801dab0:	4770      	bx	lr
	...

0801dab4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801dab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dab6:	4606      	mov	r6, r0
 801dab8:	b087      	sub	sp, #28
 801daba:	4615      	mov	r5, r2
 801dabc:	461f      	mov	r7, r3
 801dabe:	b353      	cbz	r3, 801db16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801dac0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	dd26      	ble.n	801db16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801dac8:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	dd22      	ble.n	801db16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801dad0:	6808      	ldr	r0, [r1, #0]
 801dad2:	aa04      	add	r2, sp, #16
 801dad4:	6849      	ldr	r1, [r1, #4]
 801dad6:	4c1b      	ldr	r4, [pc, #108]	; (801db44 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801dad8:	c203      	stmia	r2!, {r0, r1}
 801dada:	a804      	add	r0, sp, #16
 801dadc:	f7fa fede 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dae0:	6820      	ldr	r0, [r4, #0]
 801dae2:	6803      	ldr	r3, [r0, #0]
 801dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dae6:	4798      	blx	r3
 801dae8:	2fff      	cmp	r7, #255	; 0xff
 801daea:	d016      	beq.n	801db1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801daec:	f010 0f08 	tst.w	r0, #8
 801daf0:	6820      	ldr	r0, [r4, #0]
 801daf2:	d015      	beq.n	801db20 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801daf4:	2400      	movs	r4, #0
 801daf6:	6801      	ldr	r1, [r0, #0]
 801daf8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801dafc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801db00:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801db04:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801db08:	9401      	str	r4, [sp, #4]
 801db0a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801db0e:	9400      	str	r4, [sp, #0]
 801db10:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801db12:	4629      	mov	r1, r5
 801db14:	47a0      	blx	r4
 801db16:	b007      	add	sp, #28
 801db18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db1a:	f010 0f02 	tst.w	r0, #2
 801db1e:	e7e7      	b.n	801daf0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801db20:	6803      	ldr	r3, [r0, #0]
 801db22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db24:	4798      	blx	r3
 801db26:	4b08      	ldr	r3, [pc, #32]	; (801db48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801db28:	4601      	mov	r1, r0
 801db2a:	4630      	mov	r0, r6
 801db2c:	881a      	ldrh	r2, [r3, #0]
 801db2e:	6833      	ldr	r3, [r6, #0]
 801db30:	e9cd 5700 	strd	r5, r7, [sp]
 801db34:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801db36:	ab04      	add	r3, sp, #16
 801db38:	47a8      	blx	r5
 801db3a:	6820      	ldr	r0, [r4, #0]
 801db3c:	6803      	ldr	r3, [r0, #0]
 801db3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db40:	4798      	blx	r3
 801db42:	e7e8      	b.n	801db16 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801db44:	24010060 	.word	0x24010060
 801db48:	2401005a 	.word	0x2401005a

0801db4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801db4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801db50:	b08b      	sub	sp, #44	; 0x2c
 801db52:	460d      	mov	r5, r1
 801db54:	4616      	mov	r6, r2
 801db56:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801db5a:	f1b8 0f00 	cmp.w	r8, #0
 801db5e:	d047      	beq.n	801dbf0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801db60:	6810      	ldr	r0, [r2, #0]
 801db62:	ac06      	add	r4, sp, #24
 801db64:	6851      	ldr	r1, [r2, #4]
 801db66:	4f51      	ldr	r7, [pc, #324]	; (801dcac <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801db68:	c403      	stmia	r4!, {r0, r1}
 801db6a:	6818      	ldr	r0, [r3, #0]
 801db6c:	ac08      	add	r4, sp, #32
 801db6e:	6859      	ldr	r1, [r3, #4]
 801db70:	c403      	stmia	r4!, {r0, r1}
 801db72:	a806      	add	r0, sp, #24
 801db74:	f7fa fe92 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801db78:	4631      	mov	r1, r6
 801db7a:	a808      	add	r0, sp, #32
 801db7c:	f7fa feb6 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801db80:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801db84:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801db88:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801db8c:	6838      	ldr	r0, [r7, #0]
 801db8e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801db92:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801db96:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801db9a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801db9e:	440d      	add	r5, r1
 801dba0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801dba4:	440a      	add	r2, r1
 801dba6:	f8ad 2020 	strh.w	r2, [sp, #32]
 801dbaa:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801dbae:	4413      	add	r3, r2
 801dbb0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801dbb4:	6803      	ldr	r3, [r0, #0]
 801dbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbb8:	4798      	blx	r3
 801dbba:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dbbe:	d01a      	beq.n	801dbf6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801dbc0:	f010 0f04 	tst.w	r0, #4
 801dbc4:	6838      	ldr	r0, [r7, #0]
 801dbc6:	d019      	beq.n	801dbfc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801dbc8:	2100      	movs	r1, #0
 801dbca:	6807      	ldr	r7, [r0, #0]
 801dbcc:	b2a4      	uxth	r4, r4
 801dbce:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbd2:	b2b6      	uxth	r6, r6
 801dbd4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801dbd8:	9401      	str	r4, [sp, #4]
 801dbda:	9600      	str	r6, [sp, #0]
 801dbdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801dbe0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801dbe4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801dbe8:	9102      	str	r1, [sp, #8]
 801dbea:	4629      	mov	r1, r5
 801dbec:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801dbee:	47a0      	blx	r4
 801dbf0:	b00b      	add	sp, #44	; 0x2c
 801dbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dbf6:	f010 0f01 	tst.w	r0, #1
 801dbfa:	e7e3      	b.n	801dbc4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801dbfc:	6803      	ldr	r3, [r0, #0]
 801dbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc00:	4798      	blx	r3
 801dc02:	4a2b      	ldr	r2, [pc, #172]	; (801dcb0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801dc04:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801dc08:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc0c:	8813      	ldrh	r3, [r2, #0]
 801dc0e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801dc12:	fb03 f404 	mul.w	r4, r3, r4
 801dc16:	fb03 c101 	mla	r1, r3, r1, ip
 801dc1a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dc1e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801dc22:	4408      	add	r0, r1
 801dc24:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801dc28:	4404      	add	r4, r0
 801dc2a:	d02e      	beq.n	801dc8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801dc2c:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801dc30:	1b9b      	subs	r3, r3, r6
 801dc32:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 801dc36:	1b96      	subs	r6, r2, r6
 801dc38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc3c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dc40:	42a0      	cmp	r0, r4
 801dc42:	d22d      	bcs.n	801dca0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801dc44:	eb00 0e01 	add.w	lr, r0, r1
 801dc48:	4570      	cmp	r0, lr
 801dc4a:	d210      	bcs.n	801dc6e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801dc4c:	f890 9000 	ldrb.w	r9, [r0]
 801dc50:	f815 2b01 	ldrb.w	r2, [r5], #1
 801dc54:	fb19 f90c 	smulbb	r9, r9, ip
 801dc58:	fb02 9208 	mla	r2, r2, r8, r9
 801dc5c:	b292      	uxth	r2, r2
 801dc5e:	f102 0901 	add.w	r9, r2, #1
 801dc62:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801dc66:	1212      	asrs	r2, r2, #8
 801dc68:	f800 2b01 	strb.w	r2, [r0], #1
 801dc6c:	e7ec      	b.n	801dc48 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801dc6e:	4418      	add	r0, r3
 801dc70:	4435      	add	r5, r6
 801dc72:	e7e5      	b.n	801dc40 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801dc74:	8813      	ldrh	r3, [r2, #0]
 801dc76:	1b9b      	subs	r3, r3, r6
 801dc78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc7c:	4418      	add	r0, r3
 801dc7e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801dc82:	1b9b      	subs	r3, r3, r6
 801dc84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dc88:	441d      	add	r5, r3
 801dc8a:	42a0      	cmp	r0, r4
 801dc8c:	d208      	bcs.n	801dca0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801dc8e:	eb00 0c01 	add.w	ip, r0, r1
 801dc92:	4560      	cmp	r0, ip
 801dc94:	d2ee      	bcs.n	801dc74 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801dc96:	f815 3b01 	ldrb.w	r3, [r5], #1
 801dc9a:	f800 3b01 	strb.w	r3, [r0], #1
 801dc9e:	e7f8      	b.n	801dc92 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801dca0:	6838      	ldr	r0, [r7, #0]
 801dca2:	6803      	ldr	r3, [r0, #0]
 801dca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dca6:	4798      	blx	r3
 801dca8:	e7a2      	b.n	801dbf0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801dcaa:	bf00      	nop
 801dcac:	24010060 	.word	0x24010060
 801dcb0:	2401005a 	.word	0x2401005a

0801dcb4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801dcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dcb6:	2300      	movs	r3, #0
 801dcb8:	b085      	sub	sp, #20
 801dcba:	9300      	str	r3, [sp, #0]
 801dcbc:	4b41      	ldr	r3, [pc, #260]	; (801ddc4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801dcbe:	781b      	ldrb	r3, [r3, #0]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d136      	bne.n	801dd32 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801dcc4:	4a40      	ldr	r2, [pc, #256]	; (801ddc8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dcc6:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dcca:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d131      	bne.n	801dd36 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801dcd2:	4b3e      	ldr	r3, [pc, #248]	; (801ddcc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801dcd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dcd8:	ac02      	add	r4, sp, #8
 801dcda:	6808      	ldr	r0, [r1, #0]
 801dcdc:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dce0:	ab02      	add	r3, sp, #8
 801dce2:	6849      	ldr	r1, [r1, #4]
 801dce4:	4d3a      	ldr	r5, [pc, #232]	; (801ddd0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801dce6:	c303      	stmia	r3!, {r0, r1}
 801dce8:	4669      	mov	r1, sp
 801dcea:	4620      	mov	r0, r4
 801dcec:	f7fa fdfe 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dcf0:	4668      	mov	r0, sp
 801dcf2:	f7fa fdd3 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801dcf6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801dcfa:	f8bd 2000 	ldrh.w	r2, [sp]
 801dcfe:	462e      	mov	r6, r5
 801dd00:	6828      	ldr	r0, [r5, #0]
 801dd02:	4413      	add	r3, r2
 801dd04:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801dd08:	f8ad 3008 	strh.w	r3, [sp, #8]
 801dd0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801dd10:	4413      	add	r3, r2
 801dd12:	f8ad 300a 	strh.w	r3, [sp, #10]
 801dd16:	6803      	ldr	r3, [r0, #0]
 801dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd1a:	4798      	blx	r3
 801dd1c:	f010 0f01 	tst.w	r0, #1
 801dd20:	d00b      	beq.n	801dd3a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801dd22:	6828      	ldr	r0, [r5, #0]
 801dd24:	6803      	ldr	r3, [r0, #0]
 801dd26:	e894 0006 	ldmia.w	r4, {r1, r2}
 801dd2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dd2c:	4798      	blx	r3
 801dd2e:	b005      	add	sp, #20
 801dd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd32:	4a26      	ldr	r2, [pc, #152]	; (801ddcc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801dd34:	e7c7      	b.n	801dcc6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801dd36:	4b24      	ldr	r3, [pc, #144]	; (801ddc8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dd38:	e7cc      	b.n	801dcd4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801dd3a:	6830      	ldr	r0, [r6, #0]
 801dd3c:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801dd40:	6803      	ldr	r3, [r0, #0]
 801dd42:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801dd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dd48:	4798      	blx	r3
 801dd4a:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801dd4e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801dd52:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801dd56:	fb14 3402 	smlabb	r4, r4, r2, r3
 801dd5a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dd5e:	4404      	add	r4, r0
 801dd60:	6830      	ldr	r0, [r6, #0]
 801dd62:	6803      	ldr	r3, [r0, #0]
 801dd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd66:	4798      	blx	r3
 801dd68:	4917      	ldr	r1, [pc, #92]	; (801ddc8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801dd6a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801dd6e:	880b      	ldrh	r3, [r1, #0]
 801dd70:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801dd74:	fb03 c202 	mla	r2, r3, r2, ip
 801dd78:	437b      	muls	r3, r7
 801dd7a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801dd7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dd86:	4410      	add	r0, r2
 801dd88:	18c2      	adds	r2, r0, r3
 801dd8a:	4290      	cmp	r0, r2
 801dd8c:	d214      	bcs.n	801ddb8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801dd8e:	eb00 0c07 	add.w	ip, r0, r7
 801dd92:	4560      	cmp	r0, ip
 801dd94:	d204      	bcs.n	801dda0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801dd96:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dd9a:	f800 3b01 	strb.w	r3, [r0], #1
 801dd9e:	e7f8      	b.n	801dd92 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801dda0:	880b      	ldrh	r3, [r1, #0]
 801dda2:	1b5b      	subs	r3, r3, r5
 801dda4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dda8:	4418      	add	r0, r3
 801ddaa:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801ddae:	1b5b      	subs	r3, r3, r5
 801ddb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ddb4:	441c      	add	r4, r3
 801ddb6:	e7e8      	b.n	801dd8a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801ddb8:	6830      	ldr	r0, [r6, #0]
 801ddba:	6803      	ldr	r3, [r0, #0]
 801ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddbe:	4798      	blx	r3
 801ddc0:	e7b5      	b.n	801dd2e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ddc2:	bf00      	nop
 801ddc4:	24010058 	.word	0x24010058
 801ddc8:	2401005a 	.word	0x2401005a
 801ddcc:	2401005c 	.word	0x2401005c
 801ddd0:	24010060 	.word	0x24010060

0801ddd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801ddd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddd8:	b089      	sub	sp, #36	; 0x24
 801ddda:	4607      	mov	r7, r0
 801dddc:	4689      	mov	r9, r1
 801ddde:	4692      	mov	sl, r2
 801dde0:	ac08      	add	r4, sp, #32
 801dde2:	461e      	mov	r6, r3
 801dde4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801dde8:	4620      	mov	r0, r4
 801ddea:	f7fe f8ef 	bl	801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801ddee:	683b      	ldr	r3, [r7, #0]
 801ddf0:	4605      	mov	r5, r0
 801ddf2:	4620      	mov	r0, r4
 801ddf4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801ddf8:	f7fe f834 	bl	801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ddfc:	4683      	mov	fp, r0
 801ddfe:	4620      	mov	r0, r4
 801de00:	f7fe f864 	bl	801becc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801de04:	4653      	mov	r3, sl
 801de06:	464a      	mov	r2, r9
 801de08:	4639      	mov	r1, r7
 801de0a:	9500      	str	r5, [sp, #0]
 801de0c:	e9cd b001 	strd	fp, r0, [sp, #4]
 801de10:	a806      	add	r0, sp, #24
 801de12:	47c0      	blx	r8
 801de14:	a906      	add	r1, sp, #24
 801de16:	4630      	mov	r0, r6
 801de18:	f7fd ff08 	bl	801bc2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801de1c:	4628      	mov	r0, r5
 801de1e:	b009      	add	sp, #36	; 0x24
 801de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801de24 <_ZN8touchgfx8LCD24bppD0Ev>:
 801de24:	b510      	push	{r4, lr}
 801de26:	4604      	mov	r4, r0
 801de28:	2158      	movs	r1, #88	; 0x58
 801de2a:	f006 fc18 	bl	802465e <_ZdlPvj>
 801de2e:	4620      	mov	r0, r4
 801de30:	bd10      	pop	{r4, pc}

0801de32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801de32:	b510      	push	{r4, lr}
 801de34:	4604      	mov	r4, r0
 801de36:	2104      	movs	r1, #4
 801de38:	f006 fc11 	bl	802465e <_ZdlPvj>
 801de3c:	4620      	mov	r0, r4
 801de3e:	bd10      	pop	{r4, pc}

0801de40 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801de40:	b510      	push	{r4, lr}
 801de42:	4604      	mov	r4, r0
 801de44:	2104      	movs	r1, #4
 801de46:	f006 fc0a 	bl	802465e <_ZdlPvj>
 801de4a:	4620      	mov	r0, r4
 801de4c:	bd10      	pop	{r4, pc}

0801de4e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801de4e:	b510      	push	{r4, lr}
 801de50:	4604      	mov	r4, r0
 801de52:	2104      	movs	r1, #4
 801de54:	f006 fc03 	bl	802465e <_ZdlPvj>
 801de58:	4620      	mov	r0, r4
 801de5a:	bd10      	pop	{r4, pc}

0801de5c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801de5c:	b510      	push	{r4, lr}
 801de5e:	4604      	mov	r4, r0
 801de60:	2104      	movs	r1, #4
 801de62:	f006 fbfc 	bl	802465e <_ZdlPvj>
 801de66:	4620      	mov	r0, r4
 801de68:	bd10      	pop	{r4, pc}

0801de6a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801de6a:	b510      	push	{r4, lr}
 801de6c:	4604      	mov	r4, r0
 801de6e:	2104      	movs	r1, #4
 801de70:	f006 fbf5 	bl	802465e <_ZdlPvj>
 801de74:	4620      	mov	r0, r4
 801de76:	bd10      	pop	{r4, pc}

0801de78 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801de78:	b510      	push	{r4, lr}
 801de7a:	4604      	mov	r4, r0
 801de7c:	2104      	movs	r1, #4
 801de7e:	f006 fbee 	bl	802465e <_ZdlPvj>
 801de82:	4620      	mov	r0, r4
 801de84:	bd10      	pop	{r4, pc}

0801de86 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801de86:	b510      	push	{r4, lr}
 801de88:	4604      	mov	r4, r0
 801de8a:	2104      	movs	r1, #4
 801de8c:	f006 fbe7 	bl	802465e <_ZdlPvj>
 801de90:	4620      	mov	r0, r4
 801de92:	bd10      	pop	{r4, pc}

0801de94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801de94:	b510      	push	{r4, lr}
 801de96:	4604      	mov	r4, r0
 801de98:	2104      	movs	r1, #4
 801de9a:	f006 fbe0 	bl	802465e <_ZdlPvj>
 801de9e:	4620      	mov	r0, r4
 801dea0:	bd10      	pop	{r4, pc}

0801dea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801dea2:	b510      	push	{r4, lr}
 801dea4:	4604      	mov	r4, r0
 801dea6:	2104      	movs	r1, #4
 801dea8:	f006 fbd9 	bl	802465e <_ZdlPvj>
 801deac:	4620      	mov	r0, r4
 801deae:	bd10      	pop	{r4, pc}

0801deb0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801deb0:	b510      	push	{r4, lr}
 801deb2:	4604      	mov	r4, r0
 801deb4:	2104      	movs	r1, #4
 801deb6:	f006 fbd2 	bl	802465e <_ZdlPvj>
 801deba:	4620      	mov	r0, r4
 801debc:	bd10      	pop	{r4, pc}

0801debe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801debe:	b510      	push	{r4, lr}
 801dec0:	4604      	mov	r4, r0
 801dec2:	2104      	movs	r1, #4
 801dec4:	f006 fbcb 	bl	802465e <_ZdlPvj>
 801dec8:	4620      	mov	r0, r4
 801deca:	bd10      	pop	{r4, pc}

0801decc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801decc:	b510      	push	{r4, lr}
 801dece:	4604      	mov	r4, r0
 801ded0:	2104      	movs	r1, #4
 801ded2:	f006 fbc4 	bl	802465e <_ZdlPvj>
 801ded6:	4620      	mov	r0, r4
 801ded8:	bd10      	pop	{r4, pc}

0801deda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801deda:	b510      	push	{r4, lr}
 801dedc:	4604      	mov	r4, r0
 801dede:	2104      	movs	r1, #4
 801dee0:	f006 fbbd 	bl	802465e <_ZdlPvj>
 801dee4:	4620      	mov	r0, r4
 801dee6:	bd10      	pop	{r4, pc}

0801dee8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801dee8:	b510      	push	{r4, lr}
 801deea:	4604      	mov	r4, r0
 801deec:	2104      	movs	r1, #4
 801deee:	f006 fbb6 	bl	802465e <_ZdlPvj>
 801def2:	4620      	mov	r0, r4
 801def4:	bd10      	pop	{r4, pc}

0801def6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801def6:	b510      	push	{r4, lr}
 801def8:	4604      	mov	r4, r0
 801defa:	2104      	movs	r1, #4
 801defc:	f006 fbaf 	bl	802465e <_ZdlPvj>
 801df00:	4620      	mov	r0, r4
 801df02:	bd10      	pop	{r4, pc}

0801df04 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801df04:	b510      	push	{r4, lr}
 801df06:	4604      	mov	r4, r0
 801df08:	2104      	movs	r1, #4
 801df0a:	f006 fba8 	bl	802465e <_ZdlPvj>
 801df0e:	4620      	mov	r0, r4
 801df10:	bd10      	pop	{r4, pc}

0801df12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801df12:	b510      	push	{r4, lr}
 801df14:	4604      	mov	r4, r0
 801df16:	2104      	movs	r1, #4
 801df18:	f006 fba1 	bl	802465e <_ZdlPvj>
 801df1c:	4620      	mov	r0, r4
 801df1e:	bd10      	pop	{r4, pc}

0801df20 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801df20:	b510      	push	{r4, lr}
 801df22:	4604      	mov	r4, r0
 801df24:	2104      	movs	r1, #4
 801df26:	f006 fb9a 	bl	802465e <_ZdlPvj>
 801df2a:	4620      	mov	r0, r4
 801df2c:	bd10      	pop	{r4, pc}

0801df2e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801df2e:	b510      	push	{r4, lr}
 801df30:	4604      	mov	r4, r0
 801df32:	2104      	movs	r1, #4
 801df34:	f006 fb93 	bl	802465e <_ZdlPvj>
 801df38:	4620      	mov	r0, r4
 801df3a:	bd10      	pop	{r4, pc}

0801df3c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801df3c:	b510      	push	{r4, lr}
 801df3e:	4604      	mov	r4, r0
 801df40:	2104      	movs	r1, #4
 801df42:	f006 fb8c 	bl	802465e <_ZdlPvj>
 801df46:	4620      	mov	r0, r4
 801df48:	bd10      	pop	{r4, pc}

0801df4a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df4e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801df52:	9c06      	ldr	r4, [sp, #24]
 801df54:	2800      	cmp	r0, #0
 801df56:	d06e      	beq.n	801e036 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df58:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801df5c:	2d00      	cmp	r5, #0
 801df5e:	dd6a      	ble.n	801e036 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df60:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801df64:	f1bc 0f00 	cmp.w	ip, #0
 801df68:	dd65      	ble.n	801e036 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df6a:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801df6e:	28ff      	cmp	r0, #255	; 0xff
 801df70:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df74:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801df78:	fb02 3306 	mla	r3, r2, r6, r3
 801df7c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801df80:	b2e4      	uxtb	r4, r4
 801df82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df86:	4419      	add	r1, r3
 801df88:	fb02 f30c 	mul.w	r3, r2, ip
 801df8c:	eba2 0205 	sub.w	r2, r2, r5
 801df90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df98:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df9c:	440b      	add	r3, r1
 801df9e:	d03e      	beq.n	801e01e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801dfa0:	fa1f fc80 	uxth.w	ip, r0
 801dfa4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801dfa8:	fb06 f60c 	mul.w	r6, r6, ip
 801dfac:	b280      	uxth	r0, r0
 801dfae:	fb07 f70c 	mul.w	r7, r7, ip
 801dfb2:	fb04 f40c 	mul.w	r4, r4, ip
 801dfb6:	4299      	cmp	r1, r3
 801dfb8:	d23d      	bcs.n	801e036 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801dfba:	eb01 0c05 	add.w	ip, r1, r5
 801dfbe:	458c      	cmp	ip, r1
 801dfc0:	f101 0e03 	add.w	lr, r1, #3
 801dfc4:	d928      	bls.n	801e018 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801dfc6:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801dfca:	fb11 f100 	smulbb	r1, r1, r0
 801dfce:	4421      	add	r1, r4
 801dfd0:	b289      	uxth	r1, r1
 801dfd2:	f101 0801 	add.w	r8, r1, #1
 801dfd6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dfda:	1209      	asrs	r1, r1, #8
 801dfdc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801dfe0:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801dfe4:	fb11 f100 	smulbb	r1, r1, r0
 801dfe8:	4439      	add	r1, r7
 801dfea:	b289      	uxth	r1, r1
 801dfec:	f101 0801 	add.w	r8, r1, #1
 801dff0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dff4:	1209      	asrs	r1, r1, #8
 801dff6:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801dffa:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801dffe:	fb11 f100 	smulbb	r1, r1, r0
 801e002:	4431      	add	r1, r6
 801e004:	b289      	uxth	r1, r1
 801e006:	f101 0801 	add.w	r8, r1, #1
 801e00a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e00e:	1209      	asrs	r1, r1, #8
 801e010:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e014:	4671      	mov	r1, lr
 801e016:	e7d2      	b.n	801dfbe <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801e018:	4411      	add	r1, r2
 801e01a:	e7cc      	b.n	801dfb6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801e01c:	4411      	add	r1, r2
 801e01e:	4299      	cmp	r1, r3
 801e020:	d209      	bcs.n	801e036 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e022:	1948      	adds	r0, r1, r5
 801e024:	4281      	cmp	r1, r0
 801e026:	d2f9      	bcs.n	801e01c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801e028:	700c      	strb	r4, [r1, #0]
 801e02a:	3103      	adds	r1, #3
 801e02c:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e030:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e034:	e7f6      	b.n	801e024 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801e036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801e03c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e040:	b093      	sub	sp, #76	; 0x4c
 801e042:	4699      	mov	r9, r3
 801e044:	4617      	mov	r7, r2
 801e046:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e04a:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 801e04e:	4604      	mov	r4, r0
 801e050:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e054:	a80c      	add	r0, sp, #48	; 0x30
 801e056:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 801e05a:	460d      	mov	r5, r1
 801e05c:	4649      	mov	r1, r9
 801e05e:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e062:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e066:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 801e06a:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801e06e:	f7f4 fc79 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801e072:	4639      	mov	r1, r7
 801e074:	a80c      	add	r0, sp, #48	; 0x30
 801e076:	f7f4 fc75 	bl	8012964 <_ZN8touchgfx4RectaNERKS0_>
 801e07a:	4b78      	ldr	r3, [pc, #480]	; (801e25c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801e07c:	8818      	ldrh	r0, [r3, #0]
 801e07e:	4b78      	ldr	r3, [pc, #480]	; (801e260 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801e080:	b202      	sxth	r2, r0
 801e082:	8819      	ldrh	r1, [r3, #0]
 801e084:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801e088:	b20f      	sxth	r7, r1
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	da07      	bge.n	801e09e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801e08e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801e092:	4463      	add	r3, ip
 801e094:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801e098:	2300      	movs	r3, #0
 801e09a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801e09e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801e0a2:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801e0a6:	1ad2      	subs	r2, r2, r3
 801e0a8:	4594      	cmp	ip, r2
 801e0aa:	bfc4      	itt	gt
 801e0ac:	1ac2      	subgt	r2, r0, r3
 801e0ae:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801e0b2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e0b6:	2a00      	cmp	r2, #0
 801e0b8:	da07      	bge.n	801e0ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801e0ba:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801e0be:	4462      	add	r2, ip
 801e0c0:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801e0c4:	2200      	movs	r2, #0
 801e0c6:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 801e0ca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801e0ce:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801e0d2:	1abf      	subs	r7, r7, r2
 801e0d4:	45bc      	cmp	ip, r7
 801e0d6:	f8df c190 	ldr.w	ip, [pc, #400]	; 801e268 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801e0da:	bfc8      	it	gt
 801e0dc:	1a8f      	subgt	r7, r1, r2
 801e0de:	f89c c000 	ldrb.w	ip, [ip]
 801e0e2:	bfc8      	it	gt
 801e0e4:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 801e0e8:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801e0ec:	f1bc 0f00 	cmp.w	ip, #0
 801e0f0:	d176      	bne.n	801e1e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801e0f2:	4287      	cmp	r7, r0
 801e0f4:	bf14      	ite	ne
 801e0f6:	2100      	movne	r1, #0
 801e0f8:	2101      	moveq	r1, #1
 801e0fa:	2f00      	cmp	r7, #0
 801e0fc:	9107      	str	r1, [sp, #28]
 801e0fe:	dd73      	ble.n	801e1e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e100:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801e104:	2900      	cmp	r1, #0
 801e106:	9104      	str	r1, [sp, #16]
 801e108:	dd6e      	ble.n	801e1e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e10a:	f8b9 1000 	ldrh.w	r1, [r9]
 801e10e:	a80e      	add	r0, sp, #56	; 0x38
 801e110:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801e114:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801e118:	1a5b      	subs	r3, r3, r1
 801e11a:	a910      	add	r1, sp, #64	; 0x40
 801e11c:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801e120:	b21b      	sxth	r3, r3
 801e122:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 801e126:	f8df a144 	ldr.w	sl, [pc, #324]	; 801e26c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e12a:	9305      	str	r3, [sp, #20]
 801e12c:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801e130:	1ad2      	subs	r2, r2, r3
 801e132:	b213      	sxth	r3, r2
 801e134:	9306      	str	r3, [sp, #24]
 801e136:	9b05      	ldr	r3, [sp, #20]
 801e138:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801e13c:	9b06      	ldr	r3, [sp, #24]
 801e13e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e142:	9b04      	ldr	r3, [sp, #16]
 801e144:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801e148:	2300      	movs	r3, #0
 801e14a:	9310      	str	r3, [sp, #64]	; 0x40
 801e14c:	f7fa fbce 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e150:	4640      	mov	r0, r8
 801e152:	f7fa fba3 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e156:	a810      	add	r0, sp, #64	; 0x40
 801e158:	f7fa fba0 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e15c:	4b41      	ldr	r3, [pc, #260]	; (801e264 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801e15e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801e162:	4628      	mov	r0, r5
 801e164:	881b      	ldrh	r3, [r3, #0]
 801e166:	9308      	str	r3, [sp, #32]
 801e168:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e16c:	b21b      	sxth	r3, r3
 801e16e:	9303      	str	r3, [sp, #12]
 801e170:	682b      	ldr	r3, [r5, #0]
 801e172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e174:	4798      	blx	r3
 801e176:	9a03      	ldr	r2, [sp, #12]
 801e178:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e17c:	4681      	mov	r9, r0
 801e17e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801e182:	fb13 f302 	smulbb	r3, r3, r2
 801e186:	2203      	movs	r2, #3
 801e188:	f8da 0000 	ldr.w	r0, [sl]
 801e18c:	fb15 3302 	smlabb	r3, r5, r2, r3
 801e190:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801e192:	920b      	str	r2, [sp, #44]	; 0x2c
 801e194:	441d      	add	r5, r3
 801e196:	6803      	ldr	r3, [r0, #0]
 801e198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e19a:	4798      	blx	r3
 801e19c:	9009      	str	r0, [sp, #36]	; 0x24
 801e19e:	f8da 0000 	ldr.w	r0, [sl]
 801e1a2:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801e1a6:	6803      	ldr	r3, [r0, #0]
 801e1a8:	910a      	str	r1, [sp, #40]	; 0x28
 801e1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e1ac:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801e1b0:	4798      	blx	r3
 801e1b2:	f010 0f01 	tst.w	r0, #1
 801e1b6:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801e1ba:	d01e      	beq.n	801e1fa <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801e1bc:	f8da 0000 	ldr.w	r0, [sl]
 801e1c0:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801e1c4:	6803      	ldr	r3, [r0, #0]
 801e1c6:	9200      	str	r2, [sp, #0]
 801e1c8:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801e1ca:	462b      	mov	r3, r5
 801e1cc:	e898 0006 	ldmia.w	r8, {r1, r2}
 801e1d0:	47b0      	blx	r6
 801e1d2:	9b05      	ldr	r3, [sp, #20]
 801e1d4:	80a7      	strh	r7, [r4, #4]
 801e1d6:	8023      	strh	r3, [r4, #0]
 801e1d8:	9b06      	ldr	r3, [sp, #24]
 801e1da:	8063      	strh	r3, [r4, #2]
 801e1dc:	9b04      	ldr	r3, [sp, #16]
 801e1de:	e007      	b.n	801e1f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801e1e0:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801e1e4:	4288      	cmp	r0, r1
 801e1e6:	e785      	b.n	801e0f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	8023      	strh	r3, [r4, #0]
 801e1ec:	8063      	strh	r3, [r4, #2]
 801e1ee:	80a3      	strh	r3, [r4, #4]
 801e1f0:	4620      	mov	r0, r4
 801e1f2:	80e3      	strh	r3, [r4, #6]
 801e1f4:	b013      	add	sp, #76	; 0x4c
 801e1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1fa:	fb09 f606 	mul.w	r6, r9, r6
 801e1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e200:	fb11 6602 	smlabb	r6, r1, r2, r6
 801e204:	9a07      	ldr	r2, [sp, #28]
 801e206:	4433      	add	r3, r6
 801e208:	461e      	mov	r6, r3
 801e20a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801e20e:	b16a      	cbz	r2, 801e22c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e210:	9a08      	ldr	r2, [sp, #32]
 801e212:	4593      	cmp	fp, r2
 801e214:	d10a      	bne.n	801e22c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e216:	f8da 0000 	ldr.w	r0, [sl]
 801e21a:	fb09 f303 	mul.w	r3, r9, r3
 801e21e:	4629      	mov	r1, r5
 801e220:	6802      	ldr	r2, [r0, #0]
 801e222:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801e226:	4632      	mov	r2, r6
 801e228:	47d0      	blx	sl
 801e22a:	e7d2      	b.n	801e1d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e22c:	9a03      	ldr	r2, [sp, #12]
 801e22e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 801e26c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e232:	fb02 5803 	mla	r8, r2, r3, r5
 801e236:	4545      	cmp	r5, r8
 801e238:	d2cb      	bcs.n	801e1d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e23a:	f8db 0000 	ldr.w	r0, [fp]
 801e23e:	4629      	mov	r1, r5
 801e240:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801e244:	6802      	ldr	r2, [r0, #0]
 801e246:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e24a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801e24e:	4632      	mov	r2, r6
 801e250:	47d0      	blx	sl
 801e252:	9b03      	ldr	r3, [sp, #12]
 801e254:	444e      	add	r6, r9
 801e256:	441d      	add	r5, r3
 801e258:	e7ed      	b.n	801e236 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801e25a:	bf00      	nop
 801e25c:	24010054 	.word	0x24010054
 801e260:	24010056 	.word	0x24010056
 801e264:	2401005a 	.word	0x2401005a
 801e268:	24010058 	.word	0x24010058
 801e26c:	24010060 	.word	0x24010060

0801e270 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e270:	2200      	movs	r2, #0
 801e272:	490c      	ldr	r1, [pc, #48]	; (801e2a4 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 801e274:	6042      	str	r2, [r0, #4]
 801e276:	6001      	str	r1, [r0, #0]
 801e278:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801e27c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801e280:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801e284:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801e288:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801e28c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801e290:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801e294:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801e298:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801e29c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801e2a0:	4770      	bx	lr
 801e2a2:	bf00      	nop
 801e2a4:	08028334 	.word	0x08028334

0801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ac:	b091      	sub	sp, #68	; 0x44
 801e2ae:	4607      	mov	r7, r0
 801e2b0:	4688      	mov	r8, r1
 801e2b2:	6810      	ldr	r0, [r2, #0]
 801e2b4:	6851      	ldr	r1, [r2, #4]
 801e2b6:	ac0c      	add	r4, sp, #48	; 0x30
 801e2b8:	4616      	mov	r6, r2
 801e2ba:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801e2be:	4d64      	ldr	r5, [pc, #400]	; (801e450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e2c0:	f8df a190 	ldr.w	sl, [pc, #400]	; 801e454 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801e2c4:	c403      	stmia	r4!, {r0, r1}
 801e2c6:	6818      	ldr	r0, [r3, #0]
 801e2c8:	ac0e      	add	r4, sp, #56	; 0x38
 801e2ca:	6859      	ldr	r1, [r3, #4]
 801e2cc:	c403      	stmia	r4!, {r0, r1}
 801e2ce:	a80c      	add	r0, sp, #48	; 0x30
 801e2d0:	f7fa fae4 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e2d4:	4631      	mov	r1, r6
 801e2d6:	a80e      	add	r0, sp, #56	; 0x38
 801e2d8:	f7fa fb08 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e2dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e2e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e2e4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e2e8:	6828      	ldr	r0, [r5, #0]
 801e2ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e2ee:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801e2f2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801e2f6:	440f      	add	r7, r1
 801e2f8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e2fc:	440a      	add	r2, r1
 801e2fe:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e302:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e306:	4413      	add	r3, r2
 801e308:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e30c:	6803      	ldr	r3, [r0, #0]
 801e30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e310:	4798      	blx	r3
 801e312:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e316:	6828      	ldr	r0, [r5, #0]
 801e318:	d01f      	beq.n	801e35a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801e31a:	2201      	movs	r2, #1
 801e31c:	2500      	movs	r5, #0
 801e31e:	6801      	ldr	r1, [r0, #0]
 801e320:	b2a4      	uxth	r4, r4
 801e322:	b2b6      	uxth	r6, r6
 801e324:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e328:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801e32c:	250b      	movs	r5, #11
 801e32e:	9507      	str	r5, [sp, #28]
 801e330:	f8ba 5000 	ldrh.w	r5, [sl]
 801e334:	f8cd 9010 	str.w	r9, [sp, #16]
 801e338:	9602      	str	r6, [sp, #8]
 801e33a:	9401      	str	r4, [sp, #4]
 801e33c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e340:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e344:	9203      	str	r2, [sp, #12]
 801e346:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e34a:	9200      	str	r2, [sp, #0]
 801e34c:	4642      	mov	r2, r8
 801e34e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801e350:	4639      	mov	r1, r7
 801e352:	47a0      	blx	r4
 801e354:	b011      	add	sp, #68	; 0x44
 801e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35a:	6803      	ldr	r3, [r0, #0]
 801e35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e35e:	4798      	blx	r3
 801e360:	f8ba 5000 	ldrh.w	r5, [sl]
 801e364:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e368:	f04f 0e04 	mov.w	lr, #4
 801e36c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e370:	436e      	muls	r6, r5
 801e372:	fb05 2303 	mla	r3, r5, r3, r2
 801e376:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e37a:	1b2d      	subs	r5, r5, r4
 801e37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e384:	4418      	add	r0, r3
 801e386:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801e38a:	1982      	adds	r2, r0, r6
 801e38c:	1b1b      	subs	r3, r3, r4
 801e38e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e392:	930b      	str	r3, [sp, #44]	; 0x2c
 801e394:	4290      	cmp	r0, r2
 801e396:	d254      	bcs.n	801e442 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e398:	eb00 0a04 	add.w	sl, r0, r4
 801e39c:	4550      	cmp	r0, sl
 801e39e:	d24c      	bcs.n	801e43a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801e3a0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e3a4:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e3a8:	eb08 0c01 	add.w	ip, r8, r1
 801e3ac:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e3b0:	b173      	cbz	r3, 801e3d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e3b2:	2bff      	cmp	r3, #255	; 0xff
 801e3b4:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e3b8:	d10c      	bne.n	801e3d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3ba:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e3be:	d109      	bne.n	801e3d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3c0:	f880 b000 	strb.w	fp, [r0]
 801e3c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e3c8:	7043      	strb	r3, [r0, #1]
 801e3ca:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e3ce:	7083      	strb	r3, [r0, #2]
 801e3d0:	3003      	adds	r0, #3
 801e3d2:	e7e3      	b.n	801e39c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e3d4:	fb09 f103 	mul.w	r1, r9, r3
 801e3d8:	1c4b      	adds	r3, r1, #1
 801e3da:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e3de:	7801      	ldrb	r1, [r0, #0]
 801e3e0:	121b      	asrs	r3, r3, #8
 801e3e2:	b29e      	uxth	r6, r3
 801e3e4:	43db      	mvns	r3, r3
 801e3e6:	fb1b fb06 	smulbb	fp, fp, r6
 801e3ea:	b2db      	uxtb	r3, r3
 801e3ec:	fb01 b103 	mla	r1, r1, r3, fp
 801e3f0:	b289      	uxth	r1, r1
 801e3f2:	f101 0b01 	add.w	fp, r1, #1
 801e3f6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e3fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e3fe:	fb1b fb03 	smulbb	fp, fp, r3
 801e402:	1209      	asrs	r1, r1, #8
 801e404:	7001      	strb	r1, [r0, #0]
 801e406:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e40a:	fb01 b106 	mla	r1, r1, r6, fp
 801e40e:	b289      	uxth	r1, r1
 801e410:	f101 0b01 	add.w	fp, r1, #1
 801e414:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e418:	1209      	asrs	r1, r1, #8
 801e41a:	7041      	strb	r1, [r0, #1]
 801e41c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e420:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e424:	fb1c f303 	smulbb	r3, ip, r3
 801e428:	fb01 3606 	mla	r6, r1, r6, r3
 801e42c:	b2b6      	uxth	r6, r6
 801e42e:	1c73      	adds	r3, r6, #1
 801e430:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e434:	1236      	asrs	r6, r6, #8
 801e436:	7086      	strb	r6, [r0, #2]
 801e438:	e7ca      	b.n	801e3d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e43c:	4428      	add	r0, r5
 801e43e:	441f      	add	r7, r3
 801e440:	e7a8      	b.n	801e394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801e442:	4b03      	ldr	r3, [pc, #12]	; (801e450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e444:	6818      	ldr	r0, [r3, #0]
 801e446:	6803      	ldr	r3, [r0, #0]
 801e448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e44a:	4798      	blx	r3
 801e44c:	e782      	b.n	801e354 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801e44e:	bf00      	nop
 801e450:	24010060 	.word	0x24010060
 801e454:	2401005a 	.word	0x2401005a

0801e458 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e45c:	b091      	sub	sp, #68	; 0x44
 801e45e:	4680      	mov	r8, r0
 801e460:	460e      	mov	r6, r1
 801e462:	6810      	ldr	r0, [r2, #0]
 801e464:	6851      	ldr	r1, [r2, #4]
 801e466:	ad0c      	add	r5, sp, #48	; 0x30
 801e468:	4614      	mov	r4, r2
 801e46a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801e46e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 801e608 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801e472:	f8df a198 	ldr.w	sl, [pc, #408]	; 801e60c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e476:	c503      	stmia	r5!, {r0, r1}
 801e478:	6818      	ldr	r0, [r3, #0]
 801e47a:	ad0e      	add	r5, sp, #56	; 0x38
 801e47c:	6859      	ldr	r1, [r3, #4]
 801e47e:	c503      	stmia	r5!, {r0, r1}
 801e480:	a80c      	add	r0, sp, #48	; 0x30
 801e482:	f7fa fa0b 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e486:	4621      	mov	r1, r4
 801e488:	a80e      	add	r0, sp, #56	; 0x38
 801e48a:	f7fa fa2f 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e48e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801e492:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e496:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801e49a:	f8d9 0000 	ldr.w	r0, [r9]
 801e49e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4a2:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 801e4a6:	eb08 0401 	add.w	r4, r8, r1
 801e4aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801e4ae:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801e4b2:	440a      	add	r2, r1
 801e4b4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801e4b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801e4bc:	4413      	add	r3, r2
 801e4be:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e4c2:	6803      	ldr	r3, [r0, #0]
 801e4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e4c6:	4798      	blx	r3
 801e4c8:	f010 0f80 	tst.w	r0, #128	; 0x80
 801e4cc:	f8d9 0000 	ldr.w	r0, [r9]
 801e4d0:	d022      	beq.n	801e518 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e4d2:	2200      	movs	r2, #0
 801e4d4:	f04f 0c01 	mov.w	ip, #1
 801e4d8:	6801      	ldr	r1, [r0, #0]
 801e4da:	b2ad      	uxth	r5, r5
 801e4dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e4e0:	e9cd c208 	strd	ip, r2, [sp, #32]
 801e4e4:	f04f 0c0b 	mov.w	ip, #11
 801e4e8:	f8cd c01c 	str.w	ip, [sp, #28]
 801e4ec:	f8ba c000 	ldrh.w	ip, [sl]
 801e4f0:	9704      	str	r7, [sp, #16]
 801e4f2:	9502      	str	r5, [sp, #8]
 801e4f4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801e4f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801e4fc:	9203      	str	r2, [sp, #12]
 801e4fe:	fa1f f288 	uxth.w	r2, r8
 801e502:	9201      	str	r2, [sp, #4]
 801e504:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e508:	9200      	str	r2, [sp, #0]
 801e50a:	4632      	mov	r2, r6
 801e50c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801e50e:	4621      	mov	r1, r4
 801e510:	47a8      	blx	r5
 801e512:	b011      	add	sp, #68	; 0x44
 801e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e518:	6803      	ldr	r3, [r0, #0]
 801e51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e51c:	4798      	blx	r3
 801e51e:	f8ba 2000 	ldrh.w	r2, [sl]
 801e522:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801e526:	f04f 0e03 	mov.w	lr, #3
 801e52a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801e52e:	4355      	muls	r5, r2
 801e530:	fa1f fc87 	uxth.w	ip, r7
 801e534:	fb02 1303 	mla	r3, r2, r3, r1
 801e538:	eba2 0208 	sub.w	r2, r2, r8
 801e53c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e548:	4418      	add	r0, r3
 801e54a:	920b      	str	r2, [sp, #44]	; 0x2c
 801e54c:	1943      	adds	r3, r0, r5
 801e54e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801e552:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 801e556:	eba2 0208 	sub.w	r2, r2, r8
 801e55a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e55e:	b2ad      	uxth	r5, r5
 801e560:	4298      	cmp	r0, r3
 801e562:	d24a      	bcs.n	801e5fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801e564:	eb00 0908 	add.w	r9, r0, r8
 801e568:	4621      	mov	r1, r4
 801e56a:	4548      	cmp	r0, r9
 801e56c:	460c      	mov	r4, r1
 801e56e:	d240      	bcs.n	801e5f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e570:	f04f 0a04 	mov.w	sl, #4
 801e574:	7824      	ldrb	r4, [r4, #0]
 801e576:	2fff      	cmp	r7, #255	; 0xff
 801e578:	f101 0101 	add.w	r1, r1, #1
 801e57c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e580:	eb06 0a04 	add.w	sl, r6, r4
 801e584:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e588:	d02b      	beq.n	801e5e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801e58a:	7804      	ldrb	r4, [r0, #0]
 801e58c:	fb14 f405 	smulbb	r4, r4, r5
 801e590:	fb0b 440c 	mla	r4, fp, ip, r4
 801e594:	b2a4      	uxth	r4, r4
 801e596:	f104 0b01 	add.w	fp, r4, #1
 801e59a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e59e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e5a2:	fb1b fb05 	smulbb	fp, fp, r5
 801e5a6:	1224      	asrs	r4, r4, #8
 801e5a8:	7004      	strb	r4, [r0, #0]
 801e5aa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e5ae:	fb04 b40c 	mla	r4, r4, ip, fp
 801e5b2:	b2a4      	uxth	r4, r4
 801e5b4:	f104 0b01 	add.w	fp, r4, #1
 801e5b8:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e5bc:	1224      	asrs	r4, r4, #8
 801e5be:	7044      	strb	r4, [r0, #1]
 801e5c0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e5c4:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e5c8:	fb1a fa05 	smulbb	sl, sl, r5
 801e5cc:	fb04 a40c 	mla	r4, r4, ip, sl
 801e5d0:	b2a4      	uxth	r4, r4
 801e5d2:	f104 0a01 	add.w	sl, r4, #1
 801e5d6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e5da:	1224      	asrs	r4, r4, #8
 801e5dc:	7084      	strb	r4, [r0, #2]
 801e5de:	3003      	adds	r0, #3
 801e5e0:	e7c3      	b.n	801e56a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801e5e2:	f880 b000 	strb.w	fp, [r0]
 801e5e6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e5ea:	7044      	strb	r4, [r0, #1]
 801e5ec:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e5f0:	e7f4      	b.n	801e5dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801e5f2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e5f4:	4420      	add	r0, r4
 801e5f6:	188c      	adds	r4, r1, r2
 801e5f8:	e7b2      	b.n	801e560 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801e5fa:	4b03      	ldr	r3, [pc, #12]	; (801e608 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801e5fc:	6818      	ldr	r0, [r3, #0]
 801e5fe:	6803      	ldr	r3, [r0, #0]
 801e600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e602:	4798      	blx	r3
 801e604:	e785      	b.n	801e512 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801e606:	bf00      	nop
 801e608:	24010060 	.word	0x24010060
 801e60c:	2401005a 	.word	0x2401005a

0801e610 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e610:	b430      	push	{r4, r5}
 801e612:	780d      	ldrb	r5, [r1, #0]
 801e614:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801e618:	b11d      	cbz	r5, 801e622 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 801e61a:	2d01      	cmp	r5, #1
 801e61c:	d005      	beq.n	801e62a <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801e61e:	bc30      	pop	{r4, r5}
 801e620:	4770      	bx	lr
 801e622:	9402      	str	r4, [sp, #8]
 801e624:	bc30      	pop	{r4, r5}
 801e626:	f7ff be3f 	b.w	801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e62a:	9402      	str	r4, [sp, #8]
 801e62c:	bc30      	pop	{r4, r5}
 801e62e:	f7ff bf13 	b.w	801e458 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

0801e634 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e638:	4605      	mov	r5, r0
 801e63a:	b08f      	sub	sp, #60	; 0x3c
 801e63c:	460c      	mov	r4, r1
 801e63e:	461f      	mov	r7, r3
 801e640:	2b00      	cmp	r3, #0
 801e642:	d052      	beq.n	801e6ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e644:	6808      	ldr	r0, [r1, #0]
 801e646:	ab0a      	add	r3, sp, #40	; 0x28
 801e648:	6849      	ldr	r1, [r1, #4]
 801e64a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801e814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e64e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 801e818 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e652:	c303      	stmia	r3!, {r0, r1}
 801e654:	6810      	ldr	r0, [r2, #0]
 801e656:	ab0c      	add	r3, sp, #48	; 0x30
 801e658:	6851      	ldr	r1, [r2, #4]
 801e65a:	c303      	stmia	r3!, {r0, r1}
 801e65c:	a80a      	add	r0, sp, #40	; 0x28
 801e65e:	f7fa f91d 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e662:	4621      	mov	r1, r4
 801e664:	a80c      	add	r0, sp, #48	; 0x30
 801e666:	f7fa f941 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e66a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e66e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e672:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e676:	f8d8 0000 	ldr.w	r0, [r8]
 801e67a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e67e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801e682:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 801e686:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e68a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801e68e:	440a      	add	r2, r1
 801e690:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801e694:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801e698:	4413      	add	r3, r2
 801e69a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801e69e:	6803      	ldr	r3, [r0, #0]
 801e6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6a2:	4798      	blx	r3
 801e6a4:	2fff      	cmp	r7, #255	; 0xff
 801e6a6:	d023      	beq.n	801e6f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801e6a8:	f010 0f04 	tst.w	r0, #4
 801e6ac:	f8d8 0000 	ldr.w	r0, [r8]
 801e6b0:	d021      	beq.n	801e6f6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801e6b2:	2100      	movs	r1, #0
 801e6b4:	f04f 0e01 	mov.w	lr, #1
 801e6b8:	f8d0 c000 	ldr.w	ip, [r0]
 801e6bc:	b2a4      	uxth	r4, r4
 801e6be:	9106      	str	r1, [sp, #24]
 801e6c0:	b2b6      	uxth	r6, r6
 801e6c2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801e6c6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801e6ca:	e9cd e107 	strd	lr, r1, [sp, #28]
 801e6ce:	f8b9 e000 	ldrh.w	lr, [r9]
 801e6d2:	9703      	str	r7, [sp, #12]
 801e6d4:	9401      	str	r4, [sp, #4]
 801e6d6:	9600      	str	r6, [sp, #0]
 801e6d8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e6dc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e6e0:	9102      	str	r1, [sp, #8]
 801e6e2:	4629      	mov	r1, r5
 801e6e4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 801e6e8:	47a0      	blx	r4
 801e6ea:	b00f      	add	sp, #60	; 0x3c
 801e6ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6f0:	f010 0f01 	tst.w	r0, #1
 801e6f4:	e7da      	b.n	801e6ac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e6f6:	6803      	ldr	r3, [r0, #0]
 801e6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6fa:	4798      	blx	r3
 801e6fc:	f8b9 1000 	ldrh.w	r1, [r9]
 801e700:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801e704:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e708:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801e70c:	434c      	muls	r4, r1
 801e70e:	2fff      	cmp	r7, #255	; 0xff
 801e710:	fb01 2303 	mla	r3, r1, r3, r2
 801e714:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e718:	eba1 0106 	sub.w	r1, r1, r6
 801e71c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e720:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e724:	4418      	add	r0, r3
 801e726:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801e72a:	eba3 0606 	sub.w	r6, r3, r6
 801e72e:	4404      	add	r4, r0
 801e730:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e734:	d04a      	beq.n	801e7cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801e736:	43fa      	mvns	r2, r7
 801e738:	b2bb      	uxth	r3, r7
 801e73a:	b2d7      	uxtb	r7, r2
 801e73c:	42a0      	cmp	r0, r4
 801e73e:	d263      	bcs.n	801e808 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e740:	eb00 0e0c 	add.w	lr, r0, ip
 801e744:	4586      	cmp	lr, r0
 801e746:	f100 0803 	add.w	r8, r0, #3
 801e74a:	d93a      	bls.n	801e7c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801e74c:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e750:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e754:	00d0      	lsls	r0, r2, #3
 801e756:	fb19 f907 	smulbb	r9, r9, r7
 801e75a:	b2c0      	uxtb	r0, r0
 801e75c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e760:	fb00 9003 	mla	r0, r0, r3, r9
 801e764:	b280      	uxth	r0, r0
 801e766:	f100 0901 	add.w	r9, r0, #1
 801e76a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e76e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e772:	fb19 f907 	smulbb	r9, r9, r7
 801e776:	1200      	asrs	r0, r0, #8
 801e778:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e77c:	10d0      	asrs	r0, r2, #3
 801e77e:	1212      	asrs	r2, r2, #8
 801e780:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e784:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e788:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e78c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e790:	fb00 9003 	mla	r0, r0, r3, r9
 801e794:	b280      	uxth	r0, r0
 801e796:	f100 0901 	add.w	r9, r0, #1
 801e79a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e79e:	1200      	asrs	r0, r0, #8
 801e7a0:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e7a4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e7a8:	fb10 f007 	smulbb	r0, r0, r7
 801e7ac:	fb02 0203 	mla	r2, r2, r3, r0
 801e7b0:	b292      	uxth	r2, r2
 801e7b2:	1c50      	adds	r0, r2, #1
 801e7b4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e7b8:	4640      	mov	r0, r8
 801e7ba:	1212      	asrs	r2, r2, #8
 801e7bc:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e7c0:	e7c0      	b.n	801e744 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801e7c2:	4408      	add	r0, r1
 801e7c4:	4435      	add	r5, r6
 801e7c6:	e7b9      	b.n	801e73c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801e7c8:	4408      	add	r0, r1
 801e7ca:	4435      	add	r5, r6
 801e7cc:	42a0      	cmp	r0, r4
 801e7ce:	d21b      	bcs.n	801e808 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e7d0:	eb00 070c 	add.w	r7, r0, ip
 801e7d4:	42b8      	cmp	r0, r7
 801e7d6:	d2f7      	bcs.n	801e7c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801e7d8:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e7dc:	3003      	adds	r0, #3
 801e7de:	00da      	lsls	r2, r3, #3
 801e7e0:	b2d2      	uxtb	r2, r2
 801e7e2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e7e6:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e7ea:	10da      	asrs	r2, r3, #3
 801e7ec:	121b      	asrs	r3, r3, #8
 801e7ee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e7f2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e7f6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e7fa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e7fe:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e802:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e806:	e7e5      	b.n	801e7d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801e808:	4b02      	ldr	r3, [pc, #8]	; (801e814 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e80a:	6818      	ldr	r0, [r3, #0]
 801e80c:	6803      	ldr	r3, [r0, #0]
 801e80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e810:	4798      	blx	r3
 801e812:	e76a      	b.n	801e6ea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e814:	24010060 	.word	0x24010060
 801e818:	2401005a 	.word	0x2401005a

0801e81c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e820:	b08a      	sub	sp, #40	; 0x28
 801e822:	460d      	mov	r5, r1
 801e824:	4604      	mov	r4, r0
 801e826:	461e      	mov	r6, r3
 801e828:	6808      	ldr	r0, [r1, #0]
 801e82a:	ab06      	add	r3, sp, #24
 801e82c:	6849      	ldr	r1, [r1, #4]
 801e82e:	4f5d      	ldr	r7, [pc, #372]	; (801e9a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e830:	c303      	stmia	r3!, {r0, r1}
 801e832:	6810      	ldr	r0, [r2, #0]
 801e834:	ab08      	add	r3, sp, #32
 801e836:	6851      	ldr	r1, [r2, #4]
 801e838:	c303      	stmia	r3!, {r0, r1}
 801e83a:	a806      	add	r0, sp, #24
 801e83c:	f7fa f82e 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e840:	4629      	mov	r1, r5
 801e842:	a808      	add	r0, sp, #32
 801e844:	f7fa f852 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e848:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e84c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e850:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e854:	6838      	ldr	r0, [r7, #0]
 801e856:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e85a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801e85e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801e862:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e866:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e86a:	440a      	add	r2, r1
 801e86c:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e870:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e874:	4413      	add	r3, r2
 801e876:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801e87a:	6803      	ldr	r3, [r0, #0]
 801e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e87e:	4798      	blx	r3
 801e880:	2eff      	cmp	r6, #255	; 0xff
 801e882:	d119      	bne.n	801e8b8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e884:	f010 0f20 	tst.w	r0, #32
 801e888:	6838      	ldr	r0, [r7, #0]
 801e88a:	d018      	beq.n	801e8be <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e88c:	b2ad      	uxth	r5, r5
 801e88e:	2700      	movs	r7, #0
 801e890:	6801      	ldr	r1, [r0, #0]
 801e892:	9501      	str	r5, [sp, #4]
 801e894:	fa1f f588 	uxth.w	r5, r8
 801e898:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801e89c:	9500      	str	r5, [sp, #0]
 801e89e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e8a2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e8a6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e8aa:	9602      	str	r6, [sp, #8]
 801e8ac:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801e8ae:	4621      	mov	r1, r4
 801e8b0:	47a8      	blx	r5
 801e8b2:	b00a      	add	sp, #40	; 0x28
 801e8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e8b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e8bc:	e7e4      	b.n	801e888 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e8be:	6803      	ldr	r3, [r0, #0]
 801e8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8c2:	4798      	blx	r3
 801e8c4:	4b38      	ldr	r3, [pc, #224]	; (801e9a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e8c6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e8ca:	f8b3 c000 	ldrh.w	ip, [r3]
 801e8ce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801e8d2:	fb0c f505 	mul.w	r5, ip, r5
 801e8d6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e8da:	fb0c 2303 	mla	r3, ip, r3, r2
 801e8de:	ebac 0c08 	sub.w	ip, ip, r8
 801e8e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e8e6:	ebae 0e08 	sub.w	lr, lr, r8
 801e8ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e8ee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e8f2:	4418      	add	r0, r3
 801e8f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e8f8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e8fc:	4405      	add	r5, r0
 801e8fe:	42a8      	cmp	r0, r5
 801e900:	d24a      	bcs.n	801e998 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801e902:	eb00 0803 	add.w	r8, r0, r3
 801e906:	4540      	cmp	r0, r8
 801e908:	d243      	bcs.n	801e992 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801e90a:	78e2      	ldrb	r2, [r4, #3]
 801e90c:	b15a      	cbz	r2, 801e926 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e90e:	2aff      	cmp	r2, #255	; 0xff
 801e910:	f894 9000 	ldrb.w	r9, [r4]
 801e914:	d10a      	bne.n	801e92c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e916:	2eff      	cmp	r6, #255	; 0xff
 801e918:	d108      	bne.n	801e92c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e91a:	f880 9000 	strb.w	r9, [r0]
 801e91e:	7862      	ldrb	r2, [r4, #1]
 801e920:	7042      	strb	r2, [r0, #1]
 801e922:	78a2      	ldrb	r2, [r4, #2]
 801e924:	7082      	strb	r2, [r0, #2]
 801e926:	3003      	adds	r0, #3
 801e928:	3404      	adds	r4, #4
 801e92a:	e7ec      	b.n	801e906 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801e92c:	4372      	muls	r2, r6
 801e92e:	1c51      	adds	r1, r2, #1
 801e930:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e934:	1209      	asrs	r1, r1, #8
 801e936:	fa1f fa81 	uxth.w	sl, r1
 801e93a:	43c9      	mvns	r1, r1
 801e93c:	fb19 f90a 	smulbb	r9, r9, sl
 801e940:	b2ca      	uxtb	r2, r1
 801e942:	7801      	ldrb	r1, [r0, #0]
 801e944:	fb01 9902 	mla	r9, r1, r2, r9
 801e948:	fa1f f989 	uxth.w	r9, r9
 801e94c:	f109 0101 	add.w	r1, r9, #1
 801e950:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801e954:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e958:	f880 9000 	strb.w	r9, [r0]
 801e95c:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e960:	7861      	ldrb	r1, [r4, #1]
 801e962:	fb19 f902 	smulbb	r9, r9, r2
 801e966:	fb01 910a 	mla	r1, r1, sl, r9
 801e96a:	b289      	uxth	r1, r1
 801e96c:	f101 0901 	add.w	r9, r1, #1
 801e970:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801e974:	1209      	asrs	r1, r1, #8
 801e976:	7041      	strb	r1, [r0, #1]
 801e978:	7881      	ldrb	r1, [r0, #2]
 801e97a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e97e:	fb11 f202 	smulbb	r2, r1, r2
 801e982:	fb09 220a 	mla	r2, r9, sl, r2
 801e986:	b292      	uxth	r2, r2
 801e988:	1c51      	adds	r1, r2, #1
 801e98a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e98e:	1212      	asrs	r2, r2, #8
 801e990:	e7c8      	b.n	801e924 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801e992:	4460      	add	r0, ip
 801e994:	4474      	add	r4, lr
 801e996:	e7b2      	b.n	801e8fe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801e998:	6838      	ldr	r0, [r7, #0]
 801e99a:	6803      	ldr	r3, [r0, #0]
 801e99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e99e:	4798      	blx	r3
 801e9a0:	e787      	b.n	801e8b2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801e9a2:	bf00      	nop
 801e9a4:	24010060 	.word	0x24010060
 801e9a8:	2401005a 	.word	0x2401005a

0801e9ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801e9ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9b0:	b085      	sub	sp, #20
 801e9b2:	4606      	mov	r6, r0
 801e9b4:	460c      	mov	r4, r1
 801e9b6:	4691      	mov	r9, r2
 801e9b8:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801e9bc:	4698      	mov	r8, r3
 801e9be:	b31d      	cbz	r5, 801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e9c0:	4608      	mov	r0, r1
 801e9c2:	f7fd fa4f 	bl	801be64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801e9c6:	4607      	mov	r7, r0
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	f7fd fa7f 	bl	801becc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801e9ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 801e9d2:	4620      	mov	r0, r4
 801e9d4:	f8ad 9008 	strh.w	r9, [sp, #8]
 801e9d8:	f8ad 800a 	strh.w	r8, [sp, #10]
 801e9dc:	f8ad 700c 	strh.w	r7, [sp, #12]
 801e9e0:	f7fd fb78 	bl	801c0d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801e9e4:	280b      	cmp	r0, #11
 801e9e6:	d80f      	bhi.n	801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801e9e8:	e8df f000 	tbb	[pc, r0]
 801e9ec:	0e062920 	.word	0x0e062920
 801e9f0:	0e0e0e0e 	.word	0x0e0e0e0e
 801e9f4:	110e0e0e 	.word	0x110e0e0e
 801e9f8:	4620      	mov	r0, r4
 801e9fa:	f7fd fae7 	bl	801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801e9fe:	462b      	mov	r3, r5
 801ea00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea02:	a902      	add	r1, sp, #8
 801ea04:	f7ff ff0a 	bl	801e81c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea08:	b005      	add	sp, #20
 801ea0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea0e:	4620      	mov	r0, r4
 801ea10:	f7fd fadc 	bl	801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea14:	4606      	mov	r6, r0
 801ea16:	4620      	mov	r0, r4
 801ea18:	f7fd fb08 	bl	801c02c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ea1c:	9500      	str	r5, [sp, #0]
 801ea1e:	4601      	mov	r1, r0
 801ea20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea22:	aa02      	add	r2, sp, #8
 801ea24:	4630      	mov	r0, r6
 801ea26:	f7ff fdf3 	bl	801e610 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ea2a:	e7ed      	b.n	801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea2c:	4620      	mov	r0, r4
 801ea2e:	f7fd facd 	bl	801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea32:	462b      	mov	r3, r5
 801ea34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ea36:	a902      	add	r1, sp, #8
 801ea38:	f7ff fdfc 	bl	801e634 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ea3c:	e7e4      	b.n	801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801ea3e:	6833      	ldr	r3, [r6, #0]
 801ea40:	4620      	mov	r0, r4
 801ea42:	68df      	ldr	r7, [r3, #12]
 801ea44:	f7fd fac2 	bl	801bfcc <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea48:	2300      	movs	r3, #0
 801ea4a:	4601      	mov	r1, r0
 801ea4c:	aa02      	add	r2, sp, #8
 801ea4e:	4630      	mov	r0, r6
 801ea50:	e9cd 5300 	strd	r5, r3, [sp]
 801ea54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea56:	47b8      	blx	r7
 801ea58:	e7d6      	b.n	801ea08 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801ea5a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ea5a:	b4f0      	push	{r4, r5, r6, r7}
 801ea5c:	4616      	mov	r6, r2
 801ea5e:	461c      	mov	r4, r3
 801ea60:	460d      	mov	r5, r1
 801ea62:	9a04      	ldr	r2, [sp, #16]
 801ea64:	2e01      	cmp	r6, #1
 801ea66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ea6a:	d00e      	beq.n	801ea8a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801ea6c:	d303      	bcc.n	801ea76 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801ea6e:	2e02      	cmp	r6, #2
 801ea70:	d006      	beq.n	801ea80 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801ea72:	bcf0      	pop	{r4, r5, r6, r7}
 801ea74:	4770      	bx	lr
 801ea76:	4621      	mov	r1, r4
 801ea78:	4628      	mov	r0, r5
 801ea7a:	bcf0      	pop	{r4, r5, r6, r7}
 801ea7c:	f7ff bdda 	b.w	801e634 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801ea80:	4621      	mov	r1, r4
 801ea82:	4628      	mov	r0, r5
 801ea84:	bcf0      	pop	{r4, r5, r6, r7}
 801ea86:	f7ff bec9 	b.w	801e81c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea8a:	6805      	ldr	r5, [r0, #0]
 801ea8c:	2600      	movs	r6, #0
 801ea8e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801ea92:	68ed      	ldr	r5, [r5, #12]
 801ea94:	4613      	mov	r3, r2
 801ea96:	4622      	mov	r2, r4
 801ea98:	46ac      	mov	ip, r5
 801ea9a:	bcf0      	pop	{r4, r5, r6, r7}
 801ea9c:	4760      	bx	ip
	...

0801eaa0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801eaa0:	b160      	cbz	r0, 801eabc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801eaa2:	2903      	cmp	r1, #3
 801eaa4:	d818      	bhi.n	801ead8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801eaa6:	e8df f001 	tbb	[pc, r1]
 801eaaa:	1902      	.short	0x1902
 801eaac:	1b06      	.short	0x1b06
 801eaae:	4b0e      	ldr	r3, [pc, #56]	; (801eae8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801eab0:	8818      	ldrh	r0, [r3, #0]
 801eab2:	4240      	negs	r0, r0
 801eab4:	4770      	bx	lr
 801eab6:	4b0c      	ldr	r3, [pc, #48]	; (801eae8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801eab8:	8818      	ldrh	r0, [r3, #0]
 801eaba:	4770      	bx	lr
 801eabc:	2903      	cmp	r1, #3
 801eabe:	d80b      	bhi.n	801ead8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801eac0:	a301      	add	r3, pc, #4	; (adr r3, 801eac8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801eac2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801eac6:	bf00      	nop
 801eac8:	0801eadd 	.word	0x0801eadd
 801eacc:	0801eab7 	.word	0x0801eab7
 801ead0:	0801eae1 	.word	0x0801eae1
 801ead4:	0801eaaf 	.word	0x0801eaaf
 801ead8:	2000      	movs	r0, #0
 801eada:	4770      	bx	lr
 801eadc:	2001      	movs	r0, #1
 801eade:	4770      	bx	lr
 801eae0:	f04f 30ff 	mov.w	r0, #4294967295
 801eae4:	4770      	bx	lr
 801eae6:	bf00      	nop
 801eae8:	2401005a 	.word	0x2401005a

0801eaec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801eaec:	b160      	cbz	r0, 801eb08 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801eaee:	2903      	cmp	r1, #3
 801eaf0:	d818      	bhi.n	801eb24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801eaf2:	e8df f001 	tbb	[pc, r1]
 801eaf6:	0219      	.short	0x0219
 801eaf8:	051b      	.short	0x051b
 801eafa:	4b0e      	ldr	r3, [pc, #56]	; (801eb34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801eafc:	8818      	ldrh	r0, [r3, #0]
 801eafe:	4770      	bx	lr
 801eb00:	4b0c      	ldr	r3, [pc, #48]	; (801eb34 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801eb02:	8818      	ldrh	r0, [r3, #0]
 801eb04:	4240      	negs	r0, r0
 801eb06:	4770      	bx	lr
 801eb08:	2903      	cmp	r1, #3
 801eb0a:	d80b      	bhi.n	801eb24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801eb0c:	a301      	add	r3, pc, #4	; (adr r3, 801eb14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801eb0e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801eb12:	bf00      	nop
 801eb14:	0801eafb 	.word	0x0801eafb
 801eb18:	0801eb2d 	.word	0x0801eb2d
 801eb1c:	0801eb01 	.word	0x0801eb01
 801eb20:	0801eb29 	.word	0x0801eb29
 801eb24:	2000      	movs	r0, #0
 801eb26:	4770      	bx	lr
 801eb28:	2001      	movs	r0, #1
 801eb2a:	4770      	bx	lr
 801eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb30:	4770      	bx	lr
 801eb32:	bf00      	nop
 801eb34:	2401005a 	.word	0x2401005a

0801eb38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801eb38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb3c:	b097      	sub	sp, #92	; 0x5c
 801eb3e:	910b      	str	r1, [sp, #44]	; 0x2c
 801eb40:	a912      	add	r1, sp, #72	; 0x48
 801eb42:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801eb46:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801eb4a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 801eb4e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801eb52:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801eb56:	e881 000c 	stmia.w	r1, {r2, r3}
 801eb5a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 801eb5e:	930a      	str	r3, [sp, #40]	; 0x28
 801eb60:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801eb64:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801eb68:	9311      	str	r3, [sp, #68]	; 0x44
 801eb6a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 801eb6e:	798d      	ldrb	r5, [r1, #6]
 801eb70:	930c      	str	r3, [sp, #48]	; 0x30
 801eb72:	7b4b      	ldrb	r3, [r1, #13]
 801eb74:	0158      	lsls	r0, r3, #5
 801eb76:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801eb7a:	4328      	orrs	r0, r5
 801eb7c:	9009      	str	r0, [sp, #36]	; 0x24
 801eb7e:	f000 817c 	beq.w	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801eb82:	011b      	lsls	r3, r3, #4
 801eb84:	79c8      	ldrb	r0, [r1, #7]
 801eb86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801eb8a:	4303      	orrs	r3, r0
 801eb8c:	930e      	str	r3, [sp, #56]	; 0x38
 801eb8e:	f000 8174 	beq.w	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801eb92:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801eb96:	b29b      	uxth	r3, r3
 801eb98:	2f00      	cmp	r7, #0
 801eb9a:	f000 8116 	beq.w	801edca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801eb9e:	1aff      	subs	r7, r7, r3
 801eba0:	b2bf      	uxth	r7, r7
 801eba2:	043b      	lsls	r3, r7, #16
 801eba4:	d502      	bpl.n	801ebac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801eba6:	1bf6      	subs	r6, r6, r7
 801eba8:	2700      	movs	r7, #0
 801ebaa:	b236      	sxth	r6, r6
 801ebac:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ebb0:	a812      	add	r0, sp, #72	; 0x48
 801ebb2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ebb6:	428e      	cmp	r6, r1
 801ebb8:	b28b      	uxth	r3, r1
 801ebba:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801ebbe:	bfbf      	itttt	lt
 801ebc0:	18ff      	addlt	r7, r7, r3
 801ebc2:	1bbe      	sublt	r6, r7, r6
 801ebc4:	b2b7      	uxthlt	r7, r6
 801ebc6:	460e      	movlt	r6, r1
 801ebc8:	8891      	ldrh	r1, [r2, #4]
 801ebca:	440b      	add	r3, r1
 801ebcc:	4631      	mov	r1, r6
 801ebce:	b21b      	sxth	r3, r3
 801ebd0:	9310      	str	r3, [sp, #64]	; 0x40
 801ebd2:	88d3      	ldrh	r3, [r2, #6]
 801ebd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ebd6:	449a      	add	sl, r3
 801ebd8:	fa0f f38a 	sxth.w	r3, sl
 801ebdc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801ebe0:	930f      	str	r3, [sp, #60]	; 0x3c
 801ebe2:	4bb5      	ldr	r3, [pc, #724]	; (801eeb8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801ebe4:	f893 b000 	ldrb.w	fp, [r3]
 801ebe8:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ebec:	f1dc 0300 	rsbs	r3, ip, #0
 801ebf0:	eb43 030c 	adc.w	r3, r3, ip
 801ebf4:	930d      	str	r3, [sp, #52]	; 0x34
 801ebf6:	464b      	mov	r3, r9
 801ebf8:	f7f9 fcca 	bl	8018590 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ebfc:	4631      	mov	r1, r6
 801ebfe:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 801ec02:	464b      	mov	r3, r9
 801ec04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec06:	a812      	add	r0, sp, #72	; 0x48
 801ec08:	f7f9 fcdf 	bl	80185ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ec0c:	a916      	add	r1, sp, #88	; 0x58
 801ec0e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ec12:	a815      	add	r0, sp, #84	; 0x54
 801ec14:	f7f9 fe00 	bl	8018818 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ec18:	f1b9 0f00 	cmp.w	r9, #0
 801ec1c:	f040 80d8 	bne.w	801edd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801ec20:	f1bb 0f01 	cmp.w	fp, #1
 801ec24:	f040 80dc 	bne.w	801ede0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ec28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ec2a:	b153      	cbz	r3, 801ec42 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ec2c:	2508      	movs	r5, #8
 801ec2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec30:	fb95 f3f8 	sdiv	r3, r5, r8
 801ec34:	1e5d      	subs	r5, r3, #1
 801ec36:	4415      	add	r5, r2
 801ec38:	fb95 f5f3 	sdiv	r5, r5, r3
 801ec3c:	fb15 f503 	smulbb	r5, r5, r3
 801ec40:	b2ad      	uxth	r5, r5
 801ec42:	b907      	cbnz	r7, 801ec46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ec44:	b16c      	cbz	r4, 801ec62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ec46:	fb04 7305 	mla	r3, r4, r5, r7
 801ec4a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ec4c:	ebaa 0a04 	sub.w	sl, sl, r4
 801ec50:	fb08 f303 	mul.w	r3, r8, r3
 801ec54:	fa1f fa8a 	uxth.w	sl, sl
 801ec58:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ec5c:	f003 0407 	and.w	r4, r3, #7
 801ec60:	9226      	str	r2, [sp, #152]	; 0x98
 801ec62:	4649      	mov	r1, r9
 801ec64:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ec66:	f7ff ff1b 	bl	801eaa0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ec6a:	4683      	mov	fp, r0
 801ec6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ec6e:	f7ff ff3d 	bl	801eaec <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ec72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ec76:	4681      	mov	r9, r0
 801ec78:	1a9b      	subs	r3, r3, r2
 801ec7a:	459a      	cmp	sl, r3
 801ec7c:	bfa8      	it	ge
 801ec7e:	469a      	movge	sl, r3
 801ec80:	f1ba 0f00 	cmp.w	sl, #0
 801ec84:	f340 80f9 	ble.w	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ec88:	1bf6      	subs	r6, r6, r7
 801ec8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ec8c:	1b9e      	subs	r6, r3, r6
 801ec8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ec90:	429e      	cmp	r6, r3
 801ec92:	bfd4      	ite	le
 801ec94:	ebc7 0706 	rsble	r7, r7, r6
 801ec98:	ebc7 0703 	rsbgt	r7, r7, r3
 801ec9c:	2f00      	cmp	r7, #0
 801ec9e:	f340 80ec 	ble.w	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801eca2:	1bed      	subs	r5, r5, r7
 801eca4:	fb08 f305 	mul.w	r3, r8, r5
 801eca8:	930d      	str	r3, [sp, #52]	; 0x34
 801ecaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ecb0:	930e      	str	r3, [sp, #56]	; 0x38
 801ecb2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ecb8:	930f      	str	r3, [sp, #60]	; 0x3c
 801ecba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	9310      	str	r3, [sp, #64]	; 0x40
 801ecc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	f040 80de 	bne.w	801ee84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801ecc8:	4b7c      	ldr	r3, [pc, #496]	; (801eebc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801ecca:	6818      	ldr	r0, [r3, #0]
 801eccc:	6803      	ldr	r3, [r0, #0]
 801ecce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ecd0:	4798      	blx	r3
 801ecd2:	2301      	movs	r3, #1
 801ecd4:	4a7a      	ldr	r2, [pc, #488]	; (801eec0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ecd6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801ecda:	fb07 9b1b 	mls	fp, r7, fp, r9
 801ecde:	fa03 f308 	lsl.w	r3, r3, r8
 801ece2:	8811      	ldrh	r1, [r2, #0]
 801ece4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 801ece8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ecec:	3b01      	subs	r3, #1
 801ecee:	fb06 bb07 	mla	fp, r6, r7, fp
 801ecf2:	b2db      	uxtb	r3, r3
 801ecf4:	930a      	str	r3, [sp, #40]	; 0x28
 801ecf6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801ecfa:	fb01 2303 	mla	r3, r1, r3, r2
 801ecfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed02:	18c3      	adds	r3, r0, r3
 801ed04:	9309      	str	r3, [sp, #36]	; 0x24
 801ed06:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ed08:	781a      	ldrb	r2, [r3, #0]
 801ed0a:	4122      	asrs	r2, r4
 801ed0c:	b2d2      	uxtb	r2, r2
 801ed0e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ed12:	f0c0 80d7 	bcc.w	801eec4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801ed16:	46be      	mov	lr, r7
 801ed18:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed1a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ed1e:	f0c0 80ba 	bcc.w	801ee96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801ed22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed24:	4013      	ands	r3, r2
 801ed26:	d041      	beq.n	801edac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ed28:	20ff      	movs	r0, #255	; 0xff
 801ed2a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ed2c:	fb90 f5f5 	sdiv	r5, r0, r5
 801ed30:	436b      	muls	r3, r5
 801ed32:	2bfe      	cmp	r3, #254	; 0xfe
 801ed34:	dd03      	ble.n	801ed3e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801ed36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed38:	4285      	cmp	r5, r0
 801ed3a:	f000 80a5 	beq.w	801ee88 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801ed3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed40:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ed42:	fb15 f303 	smulbb	r3, r5, r3
 801ed46:	b29b      	uxth	r3, r3
 801ed48:	1c5d      	adds	r5, r3, #1
 801ed4a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ed4e:	780d      	ldrb	r5, [r1, #0]
 801ed50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed54:	fa1f fc83 	uxth.w	ip, r3
 801ed58:	43db      	mvns	r3, r3
 801ed5a:	fb10 f90c 	smulbb	r9, r0, ip
 801ed5e:	b2db      	uxtb	r3, r3
 801ed60:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ed62:	fb05 9503 	mla	r5, r5, r3, r9
 801ed66:	b2ad      	uxth	r5, r5
 801ed68:	f105 0901 	add.w	r9, r5, #1
 801ed6c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ed70:	fb10 f90c 	smulbb	r9, r0, ip
 801ed74:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ed76:	122d      	asrs	r5, r5, #8
 801ed78:	fb10 fc0c 	smulbb	ip, r0, ip
 801ed7c:	700d      	strb	r5, [r1, #0]
 801ed7e:	784d      	ldrb	r5, [r1, #1]
 801ed80:	fb05 9503 	mla	r5, r5, r3, r9
 801ed84:	b2ad      	uxth	r5, r5
 801ed86:	f105 0901 	add.w	r9, r5, #1
 801ed8a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ed8e:	122d      	asrs	r5, r5, #8
 801ed90:	704d      	strb	r5, [r1, #1]
 801ed92:	788d      	ldrb	r5, [r1, #2]
 801ed94:	fb05 cc03 	mla	ip, r5, r3, ip
 801ed98:	fa1f fc8c 	uxth.w	ip, ip
 801ed9c:	f10c 0301 	add.w	r3, ip, #1
 801eda0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801eda4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801eda8:	f881 c002 	strb.w	ip, [r1, #2]
 801edac:	4444      	add	r4, r8
 801edae:	4431      	add	r1, r6
 801edb0:	b2a4      	uxth	r4, r4
 801edb2:	2c07      	cmp	r4, #7
 801edb4:	bf89      	itett	hi
 801edb6:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 801edb8:	fa42 f208 	asrls.w	r2, r2, r8
 801edbc:	2400      	movhi	r4, #0
 801edbe:	785a      	ldrbhi	r2, [r3, #1]
 801edc0:	bf8a      	itet	hi
 801edc2:	3301      	addhi	r3, #1
 801edc4:	b2d2      	uxtbls	r2, r2
 801edc6:	9326      	strhi	r3, [sp, #152]	; 0x98
 801edc8:	e7a7      	b.n	801ed1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801edca:	441e      	add	r6, r3
 801edcc:	b236      	sxth	r6, r6
 801edce:	e6ed      	b.n	801ebac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801edd0:	f1b9 0f01 	cmp.w	r9, #1
 801edd4:	f47f af28 	bne.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801edd8:	f1bb 0f01 	cmp.w	fp, #1
 801eddc:	f47f af24 	bne.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ede0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801eebc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ede4:	f8db 0000 	ldr.w	r0, [fp]
 801ede8:	6803      	ldr	r3, [r0, #0]
 801edea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801edec:	4798      	blx	r3
 801edee:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801edf2:	465a      	mov	r2, fp
 801edf4:	d006      	beq.n	801ee04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801edf6:	f1b8 0f04 	cmp.w	r8, #4
 801edfa:	d141      	bne.n	801ee80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801edfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801edfe:	3300      	adds	r3, #0
 801ee00:	bf18      	it	ne
 801ee02:	2301      	movne	r3, #1
 801ee04:	0580      	lsls	r0, r0, #22
 801ee06:	d566      	bpl.n	801eed6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ee08:	f1b8 0f08 	cmp.w	r8, #8
 801ee0c:	d163      	bne.n	801eed6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	bf0c      	ite	eq
 801ee12:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801ee16:	f44f 7180 	movne.w	r1, #256	; 0x100
 801ee1a:	2f00      	cmp	r7, #0
 801ee1c:	f47f af04 	bne.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee20:	2c00      	cmp	r4, #0
 801ee22:	f47f af01 	bne.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee28:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ee2a:	18f3      	adds	r3, r6, r3
 801ee2c:	4283      	cmp	r3, r0
 801ee2e:	f73f aefb 	bgt.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee32:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ee34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee36:	4403      	add	r3, r0
 801ee38:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ee3a:	4283      	cmp	r3, r0
 801ee3c:	f73f aef4 	bgt.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee40:	f1b8 0f08 	cmp.w	r8, #8
 801ee44:	6810      	ldr	r0, [r2, #0]
 801ee46:	f04f 0600 	mov.w	r6, #0
 801ee4a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801ee4e:	bf18      	it	ne
 801ee50:	3501      	addne	r5, #1
 801ee52:	6804      	ldr	r4, [r0, #0]
 801ee54:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801ee58:	bf18      	it	ne
 801ee5a:	f025 0501 	bicne.w	r5, r5, #1
 801ee5e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801ee62:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ee64:	bf18      	it	ne
 801ee66:	b2ad      	uxthne	r5, r5
 801ee68:	9104      	str	r1, [sp, #16]
 801ee6a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ee6c:	e9cd 5a00 	strd	r5, sl, [sp]
 801ee70:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801ee74:	9926      	ldr	r1, [sp, #152]	; 0x98
 801ee76:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801ee78:	47a0      	blx	r4
 801ee7a:	b017      	add	sp, #92	; 0x5c
 801ee7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee80:	2300      	movs	r3, #0
 801ee82:	e7bf      	b.n	801ee04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ee84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801ee86:	e724      	b.n	801ecd2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801ee88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee8a:	700b      	strb	r3, [r1, #0]
 801ee8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ee8e:	704b      	strb	r3, [r1, #1]
 801ee90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee92:	708b      	strb	r3, [r1, #2]
 801ee94:	e78a      	b.n	801edac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ee96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee98:	b153      	cbz	r3, 801eeb0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ee9a:	441c      	add	r4, r3
 801ee9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ee9e:	b2a4      	uxth	r4, r4
 801eea0:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801eea4:	f004 0407 	and.w	r4, r4, #7
 801eea8:	781a      	ldrb	r2, [r3, #0]
 801eeaa:	9326      	str	r3, [sp, #152]	; 0x98
 801eeac:	4122      	asrs	r2, r4
 801eeae:	b2d2      	uxtb	r2, r2
 801eeb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eeb2:	445b      	add	r3, fp
 801eeb4:	9309      	str	r3, [sp, #36]	; 0x24
 801eeb6:	e72a      	b.n	801ed0e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801eeb8:	24010058 	.word	0x24010058
 801eebc:	24010060 	.word	0x24010060
 801eec0:	2401005a 	.word	0x2401005a
 801eec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d1d7      	bne.n	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801eeca:	4b06      	ldr	r3, [pc, #24]	; (801eee4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801eecc:	6818      	ldr	r0, [r3, #0]
 801eece:	6803      	ldr	r3, [r0, #0]
 801eed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eed2:	4798      	blx	r3
 801eed4:	e7d1      	b.n	801ee7a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801eed6:	2b00      	cmp	r3, #0
 801eed8:	f43f aea6 	beq.w	801ec28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eedc:	f44f 7180 	mov.w	r1, #256	; 0x100
 801eee0:	e79b      	b.n	801ee1a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801eee2:	bf00      	nop
 801eee4:	24010060 	.word	0x24010060

0801eee8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801eee8:	b538      	push	{r3, r4, r5, lr}
 801eeea:	4c15      	ldr	r4, [pc, #84]	; (801ef40 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801eeec:	4605      	mov	r5, r0
 801eeee:	7823      	ldrb	r3, [r4, #0]
 801eef0:	f3bf 8f5b 	dmb	ish
 801eef4:	07da      	lsls	r2, r3, #31
 801eef6:	d40b      	bmi.n	801ef10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801eef8:	4620      	mov	r0, r4
 801eefa:	f005 fbb2 	bl	8024662 <__cxa_guard_acquire>
 801eefe:	b138      	cbz	r0, 801ef10 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ef00:	4620      	mov	r0, r4
 801ef02:	f005 fbba 	bl	802467a <__cxa_guard_release>
 801ef06:	4a0f      	ldr	r2, [pc, #60]	; (801ef44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ef08:	490f      	ldr	r1, [pc, #60]	; (801ef48 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ef0a:	4810      	ldr	r0, [pc, #64]	; (801ef4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ef0c:	f005 fba2 	bl	8024654 <__aeabi_atexit>
 801ef10:	4c0f      	ldr	r4, [pc, #60]	; (801ef50 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ef12:	7823      	ldrb	r3, [r4, #0]
 801ef14:	f3bf 8f5b 	dmb	ish
 801ef18:	07db      	lsls	r3, r3, #31
 801ef1a:	d40b      	bmi.n	801ef34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ef1c:	4620      	mov	r0, r4
 801ef1e:	f005 fba0 	bl	8024662 <__cxa_guard_acquire>
 801ef22:	b138      	cbz	r0, 801ef34 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ef24:	4620      	mov	r0, r4
 801ef26:	f005 fba8 	bl	802467a <__cxa_guard_release>
 801ef2a:	4a06      	ldr	r2, [pc, #24]	; (801ef44 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ef2c:	4909      	ldr	r1, [pc, #36]	; (801ef54 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801ef2e:	480a      	ldr	r0, [pc, #40]	; (801ef58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ef30:	f005 fb90 	bl	8024654 <__aeabi_atexit>
 801ef34:	4b05      	ldr	r3, [pc, #20]	; (801ef4c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ef36:	612b      	str	r3, [r5, #16]
 801ef38:	4b07      	ldr	r3, [pc, #28]	; (801ef58 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801ef3a:	616b      	str	r3, [r5, #20]
 801ef3c:	bd38      	pop	{r3, r4, r5, pc}
 801ef3e:	bf00      	nop
 801ef40:	24010134 	.word	0x24010134
 801ef44:	24000000 	.word	0x24000000
 801ef48:	0801daad 	.word	0x0801daad
 801ef4c:	240000a0 	.word	0x240000a0
 801ef50:	24010138 	.word	0x24010138
 801ef54:	0801daab 	.word	0x0801daab
 801ef58:	240000a4 	.word	0x240000a4

0801ef5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801ef5c:	b538      	push	{r3, r4, r5, lr}
 801ef5e:	4c15      	ldr	r4, [pc, #84]	; (801efb4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801ef60:	4605      	mov	r5, r0
 801ef62:	7823      	ldrb	r3, [r4, #0]
 801ef64:	f3bf 8f5b 	dmb	ish
 801ef68:	07da      	lsls	r2, r3, #31
 801ef6a:	d40b      	bmi.n	801ef84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ef6c:	4620      	mov	r0, r4
 801ef6e:	f005 fb78 	bl	8024662 <__cxa_guard_acquire>
 801ef72:	b138      	cbz	r0, 801ef84 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801ef74:	4620      	mov	r0, r4
 801ef76:	f005 fb80 	bl	802467a <__cxa_guard_release>
 801ef7a:	4a0f      	ldr	r2, [pc, #60]	; (801efb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801ef7c:	490f      	ldr	r1, [pc, #60]	; (801efbc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801ef7e:	4810      	ldr	r0, [pc, #64]	; (801efc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801ef80:	f005 fb68 	bl	8024654 <__aeabi_atexit>
 801ef84:	4c0f      	ldr	r4, [pc, #60]	; (801efc4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801ef86:	7823      	ldrb	r3, [r4, #0]
 801ef88:	f3bf 8f5b 	dmb	ish
 801ef8c:	07db      	lsls	r3, r3, #31
 801ef8e:	d40b      	bmi.n	801efa8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ef90:	4620      	mov	r0, r4
 801ef92:	f005 fb66 	bl	8024662 <__cxa_guard_acquire>
 801ef96:	b138      	cbz	r0, 801efa8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801ef98:	4620      	mov	r0, r4
 801ef9a:	f005 fb6e 	bl	802467a <__cxa_guard_release>
 801ef9e:	4a06      	ldr	r2, [pc, #24]	; (801efb8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801efa0:	4909      	ldr	r1, [pc, #36]	; (801efc8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801efa2:	480a      	ldr	r0, [pc, #40]	; (801efcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801efa4:	f005 fb56 	bl	8024654 <__aeabi_atexit>
 801efa8:	4b05      	ldr	r3, [pc, #20]	; (801efc0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801efaa:	60ab      	str	r3, [r5, #8]
 801efac:	4b07      	ldr	r3, [pc, #28]	; (801efcc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801efae:	60eb      	str	r3, [r5, #12]
 801efb0:	bd38      	pop	{r3, r4, r5, pc}
 801efb2:	bf00      	nop
 801efb4:	24010114 	.word	0x24010114
 801efb8:	24000000 	.word	0x24000000
 801efbc:	0801dab1 	.word	0x0801dab1
 801efc0:	24000080 	.word	0x24000080
 801efc4:	24010118 	.word	0x24010118
 801efc8:	0801daaf 	.word	0x0801daaf
 801efcc:	24000084 	.word	0x24000084

0801efd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801efd0:	b510      	push	{r4, lr}
 801efd2:	4604      	mov	r4, r0
 801efd4:	f7ff ff88 	bl	801eee8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801efd8:	4620      	mov	r0, r4
 801efda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801efde:	f7ff bfbd 	b.w	801ef5c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801efe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801efe4:	b538      	push	{r3, r4, r5, lr}
 801efe6:	4c15      	ldr	r4, [pc, #84]	; (801f03c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801efe8:	4605      	mov	r5, r0
 801efea:	7823      	ldrb	r3, [r4, #0]
 801efec:	f3bf 8f5b 	dmb	ish
 801eff0:	07da      	lsls	r2, r3, #31
 801eff2:	d40b      	bmi.n	801f00c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801eff4:	4620      	mov	r0, r4
 801eff6:	f005 fb34 	bl	8024662 <__cxa_guard_acquire>
 801effa:	b138      	cbz	r0, 801f00c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801effc:	4620      	mov	r0, r4
 801effe:	f005 fb3c 	bl	802467a <__cxa_guard_release>
 801f002:	4a0f      	ldr	r2, [pc, #60]	; (801f040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f004:	490f      	ldr	r1, [pc, #60]	; (801f044 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f006:	4810      	ldr	r0, [pc, #64]	; (801f048 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f008:	f005 fb24 	bl	8024654 <__aeabi_atexit>
 801f00c:	4c0f      	ldr	r4, [pc, #60]	; (801f04c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f00e:	7823      	ldrb	r3, [r4, #0]
 801f010:	f3bf 8f5b 	dmb	ish
 801f014:	07db      	lsls	r3, r3, #31
 801f016:	d40b      	bmi.n	801f030 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f018:	4620      	mov	r0, r4
 801f01a:	f005 fb22 	bl	8024662 <__cxa_guard_acquire>
 801f01e:	b138      	cbz	r0, 801f030 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f020:	4620      	mov	r0, r4
 801f022:	f005 fb2a 	bl	802467a <__cxa_guard_release>
 801f026:	4a06      	ldr	r2, [pc, #24]	; (801f040 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f028:	4909      	ldr	r1, [pc, #36]	; (801f050 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f02a:	480a      	ldr	r0, [pc, #40]	; (801f054 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f02c:	f005 fb12 	bl	8024654 <__aeabi_atexit>
 801f030:	4b05      	ldr	r3, [pc, #20]	; (801f048 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f032:	622b      	str	r3, [r5, #32]
 801f034:	4b07      	ldr	r3, [pc, #28]	; (801f054 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f036:	626b      	str	r3, [r5, #36]	; 0x24
 801f038:	bd38      	pop	{r3, r4, r5, pc}
 801f03a:	bf00      	nop
 801f03c:	2401013c 	.word	0x2401013c
 801f040:	24000000 	.word	0x24000000
 801f044:	0801daa5 	.word	0x0801daa5
 801f048:	240000a8 	.word	0x240000a8
 801f04c:	24010140 	.word	0x24010140
 801f050:	0801daa3 	.word	0x0801daa3
 801f054:	240000ac 	.word	0x240000ac

0801f058 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f058:	b538      	push	{r3, r4, r5, lr}
 801f05a:	4c15      	ldr	r4, [pc, #84]	; (801f0b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f05c:	4605      	mov	r5, r0
 801f05e:	7823      	ldrb	r3, [r4, #0]
 801f060:	f3bf 8f5b 	dmb	ish
 801f064:	07da      	lsls	r2, r3, #31
 801f066:	d40b      	bmi.n	801f080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f068:	4620      	mov	r0, r4
 801f06a:	f005 fafa 	bl	8024662 <__cxa_guard_acquire>
 801f06e:	b138      	cbz	r0, 801f080 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f070:	4620      	mov	r0, r4
 801f072:	f005 fb02 	bl	802467a <__cxa_guard_release>
 801f076:	4a0f      	ldr	r2, [pc, #60]	; (801f0b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f078:	490f      	ldr	r1, [pc, #60]	; (801f0b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f07a:	4810      	ldr	r0, [pc, #64]	; (801f0bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f07c:	f005 faea 	bl	8024654 <__aeabi_atexit>
 801f080:	4c0f      	ldr	r4, [pc, #60]	; (801f0c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f082:	7823      	ldrb	r3, [r4, #0]
 801f084:	f3bf 8f5b 	dmb	ish
 801f088:	07db      	lsls	r3, r3, #31
 801f08a:	d40b      	bmi.n	801f0a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f08c:	4620      	mov	r0, r4
 801f08e:	f005 fae8 	bl	8024662 <__cxa_guard_acquire>
 801f092:	b138      	cbz	r0, 801f0a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f094:	4620      	mov	r0, r4
 801f096:	f005 faf0 	bl	802467a <__cxa_guard_release>
 801f09a:	4a06      	ldr	r2, [pc, #24]	; (801f0b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f09c:	4909      	ldr	r1, [pc, #36]	; (801f0c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f09e:	480a      	ldr	r0, [pc, #40]	; (801f0c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f0a0:	f005 fad8 	bl	8024654 <__aeabi_atexit>
 801f0a4:	4b05      	ldr	r3, [pc, #20]	; (801f0bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f0a6:	61ab      	str	r3, [r5, #24]
 801f0a8:	4b07      	ldr	r3, [pc, #28]	; (801f0c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f0aa:	61eb      	str	r3, [r5, #28]
 801f0ac:	bd38      	pop	{r3, r4, r5, pc}
 801f0ae:	bf00      	nop
 801f0b0:	2401011c 	.word	0x2401011c
 801f0b4:	24000000 	.word	0x24000000
 801f0b8:	0801daa9 	.word	0x0801daa9
 801f0bc:	24000088 	.word	0x24000088
 801f0c0:	24010120 	.word	0x24010120
 801f0c4:	0801daa7 	.word	0x0801daa7
 801f0c8:	2400008c 	.word	0x2400008c

0801f0cc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f0cc:	b510      	push	{r4, lr}
 801f0ce:	4604      	mov	r4, r0
 801f0d0:	f7ff ff88 	bl	801efe4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f0d4:	4620      	mov	r0, r4
 801f0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f0da:	f7ff bfbd 	b.w	801f058 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f0e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f0e0:	b538      	push	{r3, r4, r5, lr}
 801f0e2:	4c15      	ldr	r4, [pc, #84]	; (801f138 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f0e4:	4605      	mov	r5, r0
 801f0e6:	7823      	ldrb	r3, [r4, #0]
 801f0e8:	f3bf 8f5b 	dmb	ish
 801f0ec:	07da      	lsls	r2, r3, #31
 801f0ee:	d40b      	bmi.n	801f108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f0f0:	4620      	mov	r0, r4
 801f0f2:	f005 fab6 	bl	8024662 <__cxa_guard_acquire>
 801f0f6:	b138      	cbz	r0, 801f108 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f0f8:	4620      	mov	r0, r4
 801f0fa:	f005 fabe 	bl	802467a <__cxa_guard_release>
 801f0fe:	4a0f      	ldr	r2, [pc, #60]	; (801f13c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f100:	490f      	ldr	r1, [pc, #60]	; (801f140 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f102:	4810      	ldr	r0, [pc, #64]	; (801f144 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f104:	f005 faa6 	bl	8024654 <__aeabi_atexit>
 801f108:	4c0f      	ldr	r4, [pc, #60]	; (801f148 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f10a:	7823      	ldrb	r3, [r4, #0]
 801f10c:	f3bf 8f5b 	dmb	ish
 801f110:	07db      	lsls	r3, r3, #31
 801f112:	d40b      	bmi.n	801f12c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f114:	4620      	mov	r0, r4
 801f116:	f005 faa4 	bl	8024662 <__cxa_guard_acquire>
 801f11a:	b138      	cbz	r0, 801f12c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f11c:	4620      	mov	r0, r4
 801f11e:	f005 faac 	bl	802467a <__cxa_guard_release>
 801f122:	4a06      	ldr	r2, [pc, #24]	; (801f13c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f124:	4909      	ldr	r1, [pc, #36]	; (801f14c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f126:	480a      	ldr	r0, [pc, #40]	; (801f150 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f128:	f005 fa94 	bl	8024654 <__aeabi_atexit>
 801f12c:	4b05      	ldr	r3, [pc, #20]	; (801f144 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f12e:	632b      	str	r3, [r5, #48]	; 0x30
 801f130:	4b07      	ldr	r3, [pc, #28]	; (801f150 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f132:	636b      	str	r3, [r5, #52]	; 0x34
 801f134:	bd38      	pop	{r3, r4, r5, pc}
 801f136:	bf00      	nop
 801f138:	24010124 	.word	0x24010124
 801f13c:	24000000 	.word	0x24000000
 801f140:	0801da9d 	.word	0x0801da9d
 801f144:	24000090 	.word	0x24000090
 801f148:	24010128 	.word	0x24010128
 801f14c:	0801da9b 	.word	0x0801da9b
 801f150:	24000094 	.word	0x24000094

0801f154 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f154:	b538      	push	{r3, r4, r5, lr}
 801f156:	4c15      	ldr	r4, [pc, #84]	; (801f1ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f158:	4605      	mov	r5, r0
 801f15a:	7823      	ldrb	r3, [r4, #0]
 801f15c:	f3bf 8f5b 	dmb	ish
 801f160:	07da      	lsls	r2, r3, #31
 801f162:	d40b      	bmi.n	801f17c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f164:	4620      	mov	r0, r4
 801f166:	f005 fa7c 	bl	8024662 <__cxa_guard_acquire>
 801f16a:	b138      	cbz	r0, 801f17c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f16c:	4620      	mov	r0, r4
 801f16e:	f005 fa84 	bl	802467a <__cxa_guard_release>
 801f172:	4a0f      	ldr	r2, [pc, #60]	; (801f1b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f174:	490f      	ldr	r1, [pc, #60]	; (801f1b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f176:	4810      	ldr	r0, [pc, #64]	; (801f1b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f178:	f005 fa6c 	bl	8024654 <__aeabi_atexit>
 801f17c:	4c0f      	ldr	r4, [pc, #60]	; (801f1bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f17e:	7823      	ldrb	r3, [r4, #0]
 801f180:	f3bf 8f5b 	dmb	ish
 801f184:	07db      	lsls	r3, r3, #31
 801f186:	d40b      	bmi.n	801f1a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f188:	4620      	mov	r0, r4
 801f18a:	f005 fa6a 	bl	8024662 <__cxa_guard_acquire>
 801f18e:	b138      	cbz	r0, 801f1a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f190:	4620      	mov	r0, r4
 801f192:	f005 fa72 	bl	802467a <__cxa_guard_release>
 801f196:	4a06      	ldr	r2, [pc, #24]	; (801f1b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f198:	4909      	ldr	r1, [pc, #36]	; (801f1c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f19a:	480a      	ldr	r0, [pc, #40]	; (801f1c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f19c:	f005 fa5a 	bl	8024654 <__aeabi_atexit>
 801f1a0:	4b05      	ldr	r3, [pc, #20]	; (801f1b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f1a2:	62ab      	str	r3, [r5, #40]	; 0x28
 801f1a4:	4b07      	ldr	r3, [pc, #28]	; (801f1c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f1a6:	62eb      	str	r3, [r5, #44]	; 0x2c
 801f1a8:	bd38      	pop	{r3, r4, r5, pc}
 801f1aa:	bf00      	nop
 801f1ac:	240100fc 	.word	0x240100fc
 801f1b0:	24000000 	.word	0x24000000
 801f1b4:	0801daa1 	.word	0x0801daa1
 801f1b8:	24000068 	.word	0x24000068
 801f1bc:	24010100 	.word	0x24010100
 801f1c0:	0801da9f 	.word	0x0801da9f
 801f1c4:	2400006c 	.word	0x2400006c

0801f1c8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f1c8:	b510      	push	{r4, lr}
 801f1ca:	4604      	mov	r4, r0
 801f1cc:	f7ff ff88 	bl	801f0e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f1d0:	4620      	mov	r0, r4
 801f1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1d6:	f7ff bfbd 	b.w	801f154 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f1dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f1dc:	b538      	push	{r3, r4, r5, lr}
 801f1de:	4c15      	ldr	r4, [pc, #84]	; (801f234 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f1e0:	4605      	mov	r5, r0
 801f1e2:	7823      	ldrb	r3, [r4, #0]
 801f1e4:	f3bf 8f5b 	dmb	ish
 801f1e8:	07da      	lsls	r2, r3, #31
 801f1ea:	d40b      	bmi.n	801f204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f1ec:	4620      	mov	r0, r4
 801f1ee:	f005 fa38 	bl	8024662 <__cxa_guard_acquire>
 801f1f2:	b138      	cbz	r0, 801f204 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f1f4:	4620      	mov	r0, r4
 801f1f6:	f005 fa40 	bl	802467a <__cxa_guard_release>
 801f1fa:	4a0f      	ldr	r2, [pc, #60]	; (801f238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f1fc:	490f      	ldr	r1, [pc, #60]	; (801f23c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f1fe:	4810      	ldr	r0, [pc, #64]	; (801f240 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f200:	f005 fa28 	bl	8024654 <__aeabi_atexit>
 801f204:	4c0f      	ldr	r4, [pc, #60]	; (801f244 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f206:	7823      	ldrb	r3, [r4, #0]
 801f208:	f3bf 8f5b 	dmb	ish
 801f20c:	07db      	lsls	r3, r3, #31
 801f20e:	d40b      	bmi.n	801f228 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f210:	4620      	mov	r0, r4
 801f212:	f005 fa26 	bl	8024662 <__cxa_guard_acquire>
 801f216:	b138      	cbz	r0, 801f228 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f218:	4620      	mov	r0, r4
 801f21a:	f005 fa2e 	bl	802467a <__cxa_guard_release>
 801f21e:	4a06      	ldr	r2, [pc, #24]	; (801f238 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f220:	4909      	ldr	r1, [pc, #36]	; (801f248 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f222:	480a      	ldr	r0, [pc, #40]	; (801f24c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f224:	f005 fa16 	bl	8024654 <__aeabi_atexit>
 801f228:	4b05      	ldr	r3, [pc, #20]	; (801f240 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f22a:	642b      	str	r3, [r5, #64]	; 0x40
 801f22c:	4b07      	ldr	r3, [pc, #28]	; (801f24c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f22e:	646b      	str	r3, [r5, #68]	; 0x44
 801f230:	bd38      	pop	{r3, r4, r5, pc}
 801f232:	bf00      	nop
 801f234:	2401012c 	.word	0x2401012c
 801f238:	24000000 	.word	0x24000000
 801f23c:	0801da95 	.word	0x0801da95
 801f240:	24000098 	.word	0x24000098
 801f244:	24010130 	.word	0x24010130
 801f248:	0801da93 	.word	0x0801da93
 801f24c:	2400009c 	.word	0x2400009c

0801f250 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f250:	b538      	push	{r3, r4, r5, lr}
 801f252:	4c15      	ldr	r4, [pc, #84]	; (801f2a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f254:	4605      	mov	r5, r0
 801f256:	7823      	ldrb	r3, [r4, #0]
 801f258:	f3bf 8f5b 	dmb	ish
 801f25c:	07da      	lsls	r2, r3, #31
 801f25e:	d40b      	bmi.n	801f278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f260:	4620      	mov	r0, r4
 801f262:	f005 f9fe 	bl	8024662 <__cxa_guard_acquire>
 801f266:	b138      	cbz	r0, 801f278 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f268:	4620      	mov	r0, r4
 801f26a:	f005 fa06 	bl	802467a <__cxa_guard_release>
 801f26e:	4a0f      	ldr	r2, [pc, #60]	; (801f2ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f270:	490f      	ldr	r1, [pc, #60]	; (801f2b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f272:	4810      	ldr	r0, [pc, #64]	; (801f2b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f274:	f005 f9ee 	bl	8024654 <__aeabi_atexit>
 801f278:	4c0f      	ldr	r4, [pc, #60]	; (801f2b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f27a:	7823      	ldrb	r3, [r4, #0]
 801f27c:	f3bf 8f5b 	dmb	ish
 801f280:	07db      	lsls	r3, r3, #31
 801f282:	d40b      	bmi.n	801f29c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f284:	4620      	mov	r0, r4
 801f286:	f005 f9ec 	bl	8024662 <__cxa_guard_acquire>
 801f28a:	b138      	cbz	r0, 801f29c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f28c:	4620      	mov	r0, r4
 801f28e:	f005 f9f4 	bl	802467a <__cxa_guard_release>
 801f292:	4a06      	ldr	r2, [pc, #24]	; (801f2ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f294:	4909      	ldr	r1, [pc, #36]	; (801f2bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f296:	480a      	ldr	r0, [pc, #40]	; (801f2c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f298:	f005 f9dc 	bl	8024654 <__aeabi_atexit>
 801f29c:	4b05      	ldr	r3, [pc, #20]	; (801f2b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f29e:	63ab      	str	r3, [r5, #56]	; 0x38
 801f2a0:	4b07      	ldr	r3, [pc, #28]	; (801f2c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f2a2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801f2a4:	bd38      	pop	{r3, r4, r5, pc}
 801f2a6:	bf00      	nop
 801f2a8:	2401010c 	.word	0x2401010c
 801f2ac:	24000000 	.word	0x24000000
 801f2b0:	0801da99 	.word	0x0801da99
 801f2b4:	24000078 	.word	0x24000078
 801f2b8:	24010110 	.word	0x24010110
 801f2bc:	0801da97 	.word	0x0801da97
 801f2c0:	2400007c 	.word	0x2400007c

0801f2c4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f2c4:	b510      	push	{r4, lr}
 801f2c6:	4604      	mov	r4, r0
 801f2c8:	f7ff ff88 	bl	801f1dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f2cc:	4620      	mov	r0, r4
 801f2ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f2d2:	f7ff bfbd 	b.w	801f250 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f2d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f2d8:	b538      	push	{r3, r4, r5, lr}
 801f2da:	4c15      	ldr	r4, [pc, #84]	; (801f330 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f2dc:	4605      	mov	r5, r0
 801f2de:	7823      	ldrb	r3, [r4, #0]
 801f2e0:	f3bf 8f5b 	dmb	ish
 801f2e4:	07da      	lsls	r2, r3, #31
 801f2e6:	d40b      	bmi.n	801f300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f2e8:	4620      	mov	r0, r4
 801f2ea:	f005 f9ba 	bl	8024662 <__cxa_guard_acquire>
 801f2ee:	b138      	cbz	r0, 801f300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	f005 f9c2 	bl	802467a <__cxa_guard_release>
 801f2f6:	4a0f      	ldr	r2, [pc, #60]	; (801f334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f2f8:	490f      	ldr	r1, [pc, #60]	; (801f338 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f2fa:	4810      	ldr	r0, [pc, #64]	; (801f33c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f2fc:	f005 f9aa 	bl	8024654 <__aeabi_atexit>
 801f300:	4c0f      	ldr	r4, [pc, #60]	; (801f340 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f302:	7823      	ldrb	r3, [r4, #0]
 801f304:	f3bf 8f5b 	dmb	ish
 801f308:	07db      	lsls	r3, r3, #31
 801f30a:	d40b      	bmi.n	801f324 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f30c:	4620      	mov	r0, r4
 801f30e:	f005 f9a8 	bl	8024662 <__cxa_guard_acquire>
 801f312:	b138      	cbz	r0, 801f324 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f314:	4620      	mov	r0, r4
 801f316:	f005 f9b0 	bl	802467a <__cxa_guard_release>
 801f31a:	4a06      	ldr	r2, [pc, #24]	; (801f334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f31c:	4909      	ldr	r1, [pc, #36]	; (801f344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f31e:	480a      	ldr	r0, [pc, #40]	; (801f348 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f320:	f005 f998 	bl	8024654 <__aeabi_atexit>
 801f324:	4b05      	ldr	r3, [pc, #20]	; (801f33c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f326:	652b      	str	r3, [r5, #80]	; 0x50
 801f328:	4b07      	ldr	r3, [pc, #28]	; (801f348 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f32a:	656b      	str	r3, [r5, #84]	; 0x54
 801f32c:	bd38      	pop	{r3, r4, r5, pc}
 801f32e:	bf00      	nop
 801f330:	24010104 	.word	0x24010104
 801f334:	24000000 	.word	0x24000000
 801f338:	0801da8d 	.word	0x0801da8d
 801f33c:	24000070 	.word	0x24000070
 801f340:	24010108 	.word	0x24010108
 801f344:	0801da8b 	.word	0x0801da8b
 801f348:	24000074 	.word	0x24000074

0801f34c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f34c:	b538      	push	{r3, r4, r5, lr}
 801f34e:	4c15      	ldr	r4, [pc, #84]	; (801f3a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f350:	4605      	mov	r5, r0
 801f352:	7823      	ldrb	r3, [r4, #0]
 801f354:	f3bf 8f5b 	dmb	ish
 801f358:	07da      	lsls	r2, r3, #31
 801f35a:	d40b      	bmi.n	801f374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f35c:	4620      	mov	r0, r4
 801f35e:	f005 f980 	bl	8024662 <__cxa_guard_acquire>
 801f362:	b138      	cbz	r0, 801f374 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f364:	4620      	mov	r0, r4
 801f366:	f005 f988 	bl	802467a <__cxa_guard_release>
 801f36a:	4a0f      	ldr	r2, [pc, #60]	; (801f3a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f36c:	490f      	ldr	r1, [pc, #60]	; (801f3ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f36e:	4810      	ldr	r0, [pc, #64]	; (801f3b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f370:	f005 f970 	bl	8024654 <__aeabi_atexit>
 801f374:	4c0f      	ldr	r4, [pc, #60]	; (801f3b4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f376:	7823      	ldrb	r3, [r4, #0]
 801f378:	f3bf 8f5b 	dmb	ish
 801f37c:	07db      	lsls	r3, r3, #31
 801f37e:	d40b      	bmi.n	801f398 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f380:	4620      	mov	r0, r4
 801f382:	f005 f96e 	bl	8024662 <__cxa_guard_acquire>
 801f386:	b138      	cbz	r0, 801f398 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f388:	4620      	mov	r0, r4
 801f38a:	f005 f976 	bl	802467a <__cxa_guard_release>
 801f38e:	4a06      	ldr	r2, [pc, #24]	; (801f3a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f390:	4909      	ldr	r1, [pc, #36]	; (801f3b8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f392:	480a      	ldr	r0, [pc, #40]	; (801f3bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f394:	f005 f95e 	bl	8024654 <__aeabi_atexit>
 801f398:	4b05      	ldr	r3, [pc, #20]	; (801f3b0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f39a:	64ab      	str	r3, [r5, #72]	; 0x48
 801f39c:	4b07      	ldr	r3, [pc, #28]	; (801f3bc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f39e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801f3a0:	bd38      	pop	{r3, r4, r5, pc}
 801f3a2:	bf00      	nop
 801f3a4:	240100f4 	.word	0x240100f4
 801f3a8:	24000000 	.word	0x24000000
 801f3ac:	0801da91 	.word	0x0801da91
 801f3b0:	24000060 	.word	0x24000060
 801f3b4:	240100f8 	.word	0x240100f8
 801f3b8:	0801da8f 	.word	0x0801da8f
 801f3bc:	24000064 	.word	0x24000064

0801f3c0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f3c0:	b510      	push	{r4, lr}
 801f3c2:	4604      	mov	r4, r0
 801f3c4:	f7ff ff88 	bl	801f2d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f3c8:	4620      	mov	r0, r4
 801f3ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3ce:	f7ff bfbd 	b.w	801f34c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f3d2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f3d2:	b510      	push	{r4, lr}
 801f3d4:	4604      	mov	r4, r0
 801f3d6:	f7ff fff3 	bl	801f3c0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f3da:	4620      	mov	r0, r4
 801f3dc:	f7ff ff72 	bl	801f2c4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f3e0:	4620      	mov	r0, r4
 801f3e2:	f7ff fe73 	bl	801f0cc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	f7ff fdf2 	bl	801efd0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f3ec:	4620      	mov	r0, r4
 801f3ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3f2:	f7ff bee9 	b.w	801f1c8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

0801f3f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f3f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3fa:	b087      	sub	sp, #28
 801f3fc:	788d      	ldrb	r5, [r1, #2]
 801f3fe:	f891 9000 	ldrb.w	r9, [r1]
 801f402:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801f406:	9501      	str	r5, [sp, #4]
 801f408:	784d      	ldrb	r5, [r1, #1]
 801f40a:	9203      	str	r2, [sp, #12]
 801f40c:	9502      	str	r5, [sp, #8]
 801f40e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801f412:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801f416:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801f41a:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 801f41e:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801f422:	fb06 0708 	mla	r7, r6, r8, r0
 801f426:	2e00      	cmp	r6, #0
 801f428:	eb02 0a07 	add.w	sl, r2, r7
 801f42c:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801f430:	9d01      	ldr	r5, [sp, #4]
 801f432:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801f436:	ea45 0509 	orr.w	r5, r5, r9
 801f43a:	9505      	str	r5, [sp, #20]
 801f43c:	f2c0 80b2 	blt.w	801f5a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f440:	45b3      	cmp	fp, r6
 801f442:	f340 80af 	ble.w	801f5a4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f446:	2800      	cmp	r0, #0
 801f448:	f2c0 80aa 	blt.w	801f5a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f44c:	4580      	cmp	r8, r0
 801f44e:	f340 80a7 	ble.w	801f5a0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f452:	9a03      	ldr	r2, [sp, #12]
 801f454:	5dd7      	ldrb	r7, [r2, r7]
 801f456:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f45a:	441f      	add	r7, r3
 801f45c:	1c42      	adds	r2, r0, #1
 801f45e:	f100 80a4 	bmi.w	801f5aa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f462:	4590      	cmp	r8, r2
 801f464:	f340 80a1 	ble.w	801f5aa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f468:	2c00      	cmp	r4, #0
 801f46a:	f000 809e 	beq.w	801f5aa <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f46e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f472:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f476:	441d      	add	r5, r3
 801f478:	3601      	adds	r6, #1
 801f47a:	f100 809a 	bmi.w	801f5b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f47e:	45b3      	cmp	fp, r6
 801f480:	f340 8097 	ble.w	801f5b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f484:	f1bc 0f00 	cmp.w	ip, #0
 801f488:	f000 8093 	beq.w	801f5b2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f48c:	2800      	cmp	r0, #0
 801f48e:	f2c0 808e 	blt.w	801f5ae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f492:	4580      	cmp	r8, r0
 801f494:	f340 808b 	ble.w	801f5ae <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f498:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801f49c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f4a0:	441e      	add	r6, r3
 801f4a2:	3001      	adds	r0, #1
 801f4a4:	f100 8088 	bmi.w	801f5b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f4a8:	4580      	cmp	r8, r0
 801f4aa:	f340 8085 	ble.w	801f5b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f4ae:	2c00      	cmp	r4, #0
 801f4b0:	f000 8082 	beq.w	801f5b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f4b4:	44d0      	add	r8, sl
 801f4b6:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f4ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f4be:	4413      	add	r3, r2
 801f4c0:	b2a4      	uxth	r4, r4
 801f4c2:	f895 a000 	ldrb.w	sl, [r5]
 801f4c6:	fa1f fc8c 	uxth.w	ip, ip
 801f4ca:	fb04 fb0c 	mul.w	fp, r4, ip
 801f4ce:	0124      	lsls	r4, r4, #4
 801f4d0:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801f4d4:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801f4d8:	eba4 040b 	sub.w	r4, r4, fp
 801f4dc:	fa1f f08c 	uxth.w	r0, ip
 801f4e0:	b2a2      	uxth	r2, r4
 801f4e2:	783c      	ldrb	r4, [r7, #0]
 801f4e4:	eba8 0800 	sub.w	r8, r8, r0
 801f4e8:	fa1f fc8e 	uxth.w	ip, lr
 801f4ec:	fb02 fa0a 	mul.w	sl, r2, sl
 801f4f0:	ea6f 0e0e 	mvn.w	lr, lr
 801f4f4:	fa1f f888 	uxth.w	r8, r8
 801f4f8:	fa5f fe8e 	uxtb.w	lr, lr
 801f4fc:	fb08 aa04 	mla	sl, r8, r4, sl
 801f500:	7834      	ldrb	r4, [r6, #0]
 801f502:	fb19 f90e 	smulbb	r9, r9, lr
 801f506:	fb00 aa04 	mla	sl, r0, r4, sl
 801f50a:	781c      	ldrb	r4, [r3, #0]
 801f50c:	fb0b a404 	mla	r4, fp, r4, sl
 801f510:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f514:	fb04 990c 	mla	r9, r4, ip, r9
 801f518:	fa1f f989 	uxth.w	r9, r9
 801f51c:	f109 0401 	add.w	r4, r9, #1
 801f520:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f524:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f528:	f881 9000 	strb.w	r9, [r1]
 801f52c:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f530:	787c      	ldrb	r4, [r7, #1]
 801f532:	fb02 f909 	mul.w	r9, r2, r9
 801f536:	fb08 9904 	mla	r9, r8, r4, r9
 801f53a:	7874      	ldrb	r4, [r6, #1]
 801f53c:	fb00 9904 	mla	r9, r0, r4, r9
 801f540:	785c      	ldrb	r4, [r3, #1]
 801f542:	fb0b 9404 	mla	r4, fp, r4, r9
 801f546:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801f54a:	9c02      	ldr	r4, [sp, #8]
 801f54c:	fb14 f90e 	smulbb	r9, r4, lr
 801f550:	fb0a 940c 	mla	r4, sl, ip, r9
 801f554:	b2a4      	uxth	r4, r4
 801f556:	f104 0901 	add.w	r9, r4, #1
 801f55a:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801f55e:	1224      	asrs	r4, r4, #8
 801f560:	704c      	strb	r4, [r1, #1]
 801f562:	78ad      	ldrb	r5, [r5, #2]
 801f564:	78bc      	ldrb	r4, [r7, #2]
 801f566:	436a      	muls	r2, r5
 801f568:	789b      	ldrb	r3, [r3, #2]
 801f56a:	fb08 2204 	mla	r2, r8, r4, r2
 801f56e:	78b4      	ldrb	r4, [r6, #2]
 801f570:	fb00 2004 	mla	r0, r0, r4, r2
 801f574:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f578:	9b01      	ldr	r3, [sp, #4]
 801f57a:	fb13 fe0e 	smulbb	lr, r3, lr
 801f57e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f582:	fb0b ec0c 	mla	ip, fp, ip, lr
 801f586:	fa1f fc8c 	uxth.w	ip, ip
 801f58a:	f10c 0e01 	add.w	lr, ip, #1
 801f58e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f592:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f596:	f881 c002 	strb.w	ip, [r1, #2]
 801f59a:	b007      	add	sp, #28
 801f59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5a0:	af05      	add	r7, sp, #20
 801f5a2:	e75b      	b.n	801f45c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801f5a4:	ad05      	add	r5, sp, #20
 801f5a6:	462f      	mov	r7, r5
 801f5a8:	e766      	b.n	801f478 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f5aa:	ad05      	add	r5, sp, #20
 801f5ac:	e764      	b.n	801f478 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f5ae:	ae05      	add	r6, sp, #20
 801f5b0:	e777      	b.n	801f4a2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801f5b2:	ab05      	add	r3, sp, #20
 801f5b4:	461e      	mov	r6, r3
 801f5b6:	e783      	b.n	801f4c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801f5b8:	ab05      	add	r3, sp, #20
 801f5ba:	e781      	b.n	801f4c0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801f5bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c0:	b093      	sub	sp, #76	; 0x4c
 801f5c2:	9210      	str	r2, [sp, #64]	; 0x40
 801f5c4:	9309      	str	r3, [sp, #36]	; 0x24
 801f5c6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801f5c8:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801f5cc:	9011      	str	r0, [sp, #68]	; 0x44
 801f5ce:	930e      	str	r3, [sp, #56]	; 0x38
 801f5d0:	6850      	ldr	r0, [r2, #4]
 801f5d2:	910d      	str	r1, [sp, #52]	; 0x34
 801f5d4:	6812      	ldr	r2, [r2, #0]
 801f5d6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801f5da:	fb00 1303 	mla	r3, r0, r3, r1
 801f5de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f5e2:	18d3      	adds	r3, r2, r3
 801f5e4:	930a      	str	r3, [sp, #40]	; 0x28
 801f5e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	930c      	str	r3, [sp, #48]	; 0x30
 801f5ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f5ee:	685c      	ldr	r4, [r3, #4]
 801f5f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5f2:	3404      	adds	r4, #4
 801f5f4:	43db      	mvns	r3, r3
 801f5f6:	b2db      	uxtb	r3, r3
 801f5f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801f5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	dc03      	bgt.n	801f608 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f600:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f602:	2b00      	cmp	r3, #0
 801f604:	f340 8250 	ble.w	801faa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f608:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f60a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f60e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f612:	1e48      	subs	r0, r1, #1
 801f614:	1e55      	subs	r5, r2, #1
 801f616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f618:	2b00      	cmp	r3, #0
 801f61a:	f340 80ee 	ble.w	801f7fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801f61e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f620:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f622:	1436      	asrs	r6, r6, #16
 801f624:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f628:	d406      	bmi.n	801f638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f62a:	4286      	cmp	r6, r0
 801f62c:	da04      	bge.n	801f638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f62e:	2b00      	cmp	r3, #0
 801f630:	db02      	blt.n	801f638 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f632:	42ab      	cmp	r3, r5
 801f634:	f2c0 80e2 	blt.w	801f7fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f638:	3601      	adds	r6, #1
 801f63a:	f100 80cf 	bmi.w	801f7dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f63e:	42b1      	cmp	r1, r6
 801f640:	f2c0 80cc 	blt.w	801f7dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f644:	3301      	adds	r3, #1
 801f646:	f100 80c9 	bmi.w	801f7dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f64a:	429a      	cmp	r2, r3
 801f64c:	f2c0 80c6 	blt.w	801f7dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f650:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801f654:	f1bb 0f00 	cmp.w	fp, #0
 801f658:	f340 80f1 	ble.w	801f83e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f65c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f65e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f660:	9824      	ldr	r0, [sp, #144]	; 0x90
 801f662:	141d      	asrs	r5, r3, #16
 801f664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f666:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f66a:	68c7      	ldr	r7, [r0, #12]
 801f66c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f66e:	1418      	asrs	r0, r3, #16
 801f670:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f674:	6892      	ldr	r2, [r2, #8]
 801f676:	f100 8137 	bmi.w	801f8e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f67a:	f102 3cff 	add.w	ip, r2, #4294967295
 801f67e:	4560      	cmp	r0, ip
 801f680:	f280 8132 	bge.w	801f8e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f684:	2d00      	cmp	r5, #0
 801f686:	f2c0 812f 	blt.w	801f8e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f68a:	f107 3cff 	add.w	ip, r7, #4294967295
 801f68e:	4565      	cmp	r5, ip
 801f690:	f280 812a 	bge.w	801f8e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f694:	b212      	sxth	r2, r2
 801f696:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801f698:	fb05 0002 	mla	r0, r5, r2, r0
 801f69c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f69e:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f6a2:	4405      	add	r5, r0
 801f6a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f6a8:	eb04 0e0c 	add.w	lr, r4, ip
 801f6ac:	f1b8 0f00 	cmp.w	r8, #0
 801f6b0:	f000 810c 	beq.w	801f8cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801f6b4:	786f      	ldrb	r7, [r5, #1]
 801f6b6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f6ba:	4427      	add	r7, r4
 801f6bc:	2900      	cmp	r1, #0
 801f6be:	f000 810d 	beq.w	801f8dc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801f6c2:	18a8      	adds	r0, r5, r2
 801f6c4:	5caa      	ldrb	r2, [r5, r2]
 801f6c6:	7840      	ldrb	r0, [r0, #1]
 801f6c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f6cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f6d0:	4422      	add	r2, r4
 801f6d2:	4420      	add	r0, r4
 801f6d4:	fa1f f388 	uxth.w	r3, r8
 801f6d8:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f6dc:	b289      	uxth	r1, r1
 801f6de:	f897 c000 	ldrb.w	ip, [r7]
 801f6e2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801f6e6:	fb03 f901 	mul.w	r9, r3, r1
 801f6ea:	011b      	lsls	r3, r3, #4
 801f6ec:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f6f0:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801f6f4:	eba3 0309 	sub.w	r3, r3, r9
 801f6f8:	b289      	uxth	r1, r1
 801f6fa:	b29b      	uxth	r3, r3
 801f6fc:	eba8 0801 	sub.w	r8, r8, r1
 801f700:	fb03 fc0c 	mul.w	ip, r3, ip
 801f704:	fa1f f888 	uxth.w	r8, r8
 801f708:	930f      	str	r3, [sp, #60]	; 0x3c
 801f70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f70c:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f710:	f892 a000 	ldrb.w	sl, [r2]
 801f714:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f718:	f890 a000 	ldrb.w	sl, [r0]
 801f71c:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f720:	f896 a000 	ldrb.w	sl, [r6]
 801f724:	fb1a fa03 	smulbb	sl, sl, r3
 801f728:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f72c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f72e:	fb0c ac05 	mla	ip, ip, r5, sl
 801f732:	fa1f fc8c 	uxth.w	ip, ip
 801f736:	f10c 0a01 	add.w	sl, ip, #1
 801f73a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f73e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f742:	f886 a000 	strb.w	sl, [r6]
 801f746:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f74a:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f74e:	fb03 fc0c 	mul.w	ip, r3, ip
 801f752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f754:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f758:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f75c:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f760:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f764:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f768:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f76c:	fb1a fa03 	smulbb	sl, sl, r3
 801f770:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f774:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f776:	fb0c ac05 	mla	ip, ip, r5, sl
 801f77a:	fa1f fc8c 	uxth.w	ip, ip
 801f77e:	f10c 0a01 	add.w	sl, ip, #1
 801f782:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f786:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f78a:	f886 c001 	strb.w	ip, [r6, #1]
 801f78e:	78bf      	ldrb	r7, [r7, #2]
 801f790:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f794:	437b      	muls	r3, r7
 801f796:	fb08 330c 	mla	r3, r8, ip, r3
 801f79a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f79e:	7882      	ldrb	r2, [r0, #2]
 801f7a0:	fb01 310c 	mla	r1, r1, ip, r3
 801f7a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f7a6:	fb09 1902 	mla	r9, r9, r2, r1
 801f7aa:	78b1      	ldrb	r1, [r6, #2]
 801f7ac:	fb11 f103 	smulbb	r1, r1, r3
 801f7b0:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f7b4:	fb09 1505 	mla	r5, r9, r5, r1
 801f7b8:	b2ad      	uxth	r5, r5
 801f7ba:	1c6b      	adds	r3, r5, #1
 801f7bc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f7c0:	122d      	asrs	r5, r5, #8
 801f7c2:	70b5      	strb	r5, [r6, #2]
 801f7c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7c6:	3603      	adds	r6, #3
 801f7c8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f7ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f7ce:	4413      	add	r3, r2
 801f7d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801f7d2:	931d      	str	r3, [sp, #116]	; 0x74
 801f7d4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f7d6:	4413      	add	r3, r2
 801f7d8:	931e      	str	r3, [sp, #120]	; 0x78
 801f7da:	e73b      	b.n	801f654 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f7dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7de:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801f7e0:	4433      	add	r3, r6
 801f7e2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801f7e4:	931d      	str	r3, [sp, #116]	; 0x74
 801f7e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f7e8:	4433      	add	r3, r6
 801f7ea:	931e      	str	r3, [sp, #120]	; 0x78
 801f7ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7ee:	3b01      	subs	r3, #1
 801f7f0:	9309      	str	r3, [sp, #36]	; 0x24
 801f7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f7f4:	3303      	adds	r3, #3
 801f7f6:	930a      	str	r3, [sp, #40]	; 0x28
 801f7f8:	e70d      	b.n	801f616 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f7fa:	d028      	beq.n	801f84e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f800:	3b01      	subs	r3, #1
 801f802:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f804:	fb00 5003 	mla	r0, r0, r3, r5
 801f808:	1400      	asrs	r0, r0, #16
 801f80a:	f53f af21 	bmi.w	801f650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f80e:	3901      	subs	r1, #1
 801f810:	4288      	cmp	r0, r1
 801f812:	f6bf af1d 	bge.w	801f650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f816:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f818:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f81a:	fb01 0303 	mla	r3, r1, r3, r0
 801f81e:	141b      	asrs	r3, r3, #16
 801f820:	f53f af16 	bmi.w	801f650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f824:	3a01      	subs	r2, #1
 801f826:	4293      	cmp	r3, r2
 801f828:	f6bf af12 	bge.w	801f650 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f82c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f82e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801f832:	1cdf      	adds	r7, r3, #3
 801f834:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801f838:	f1b9 0f00 	cmp.w	r9, #0
 801f83c:	dc73      	bgt.n	801f926 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801f83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f842:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f846:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f84a:	441a      	add	r2, r3
 801f84c:	920a      	str	r2, [sp, #40]	; 0x28
 801f84e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f850:	2b00      	cmp	r3, #0
 801f852:	f340 8129 	ble.w	801faa8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f85a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f85c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f860:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f864:	eef0 6a62 	vmov.f32	s13, s5
 801f868:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f86c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f874:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801f878:	eef0 6a43 	vmov.f32	s13, s6
 801f87c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f880:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801f884:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f888:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f88c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f890:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f894:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f898:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f89c:	ee12 2a90 	vmov	r2, s5
 801f8a0:	eef0 2a47 	vmov.f32	s5, s14
 801f8a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8a8:	ee13 2a10 	vmov	r2, s6
 801f8ac:	931f      	str	r3, [sp, #124]	; 0x7c
 801f8ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8b0:	eeb0 3a67 	vmov.f32	s6, s15
 801f8b4:	fb92 f3f3 	sdiv	r3, r2, r3
 801f8b8:	9320      	str	r3, [sp, #128]	; 0x80
 801f8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801f8bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8be:	3b01      	subs	r3, #1
 801f8c0:	930d      	str	r3, [sp, #52]	; 0x34
 801f8c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f8c4:	bf08      	it	eq
 801f8c6:	4613      	moveq	r3, r2
 801f8c8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8ca:	e696      	b.n	801f5fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f8cc:	b149      	cbz	r1, 801f8e2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801f8ce:	5caa      	ldrb	r2, [r5, r2]
 801f8d0:	4670      	mov	r0, lr
 801f8d2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8d6:	4422      	add	r2, r4
 801f8d8:	4677      	mov	r7, lr
 801f8da:	e6fb      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f8dc:	4670      	mov	r0, lr
 801f8de:	4672      	mov	r2, lr
 801f8e0:	e6f8      	b.n	801f6d4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f8e2:	4670      	mov	r0, lr
 801f8e4:	4672      	mov	r2, lr
 801f8e6:	e7f7      	b.n	801f8d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801f8e8:	f110 0c01 	adds.w	ip, r0, #1
 801f8ec:	f53f af6a 	bmi.w	801f7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f8f0:	4562      	cmp	r2, ip
 801f8f2:	f6ff af67 	blt.w	801f7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f8f6:	f115 0c01 	adds.w	ip, r5, #1
 801f8fa:	f53f af63 	bmi.w	801f7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f8fe:	4567      	cmp	r7, ip
 801f900:	f6ff af60 	blt.w	801f7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f906:	b23f      	sxth	r7, r7
 801f908:	b212      	sxth	r2, r2
 801f90a:	9002      	str	r0, [sp, #8]
 801f90c:	9701      	str	r7, [sp, #4]
 801f90e:	9200      	str	r2, [sp, #0]
 801f910:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f914:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801f918:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801f91c:	4623      	mov	r3, r4
 801f91e:	4631      	mov	r1, r6
 801f920:	f7ff fd69 	bl	801f3f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801f924:	e74e      	b.n	801f7c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801f926:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f928:	981e      	ldr	r0, [sp, #120]	; 0x78
 801f92a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f92e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801f930:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801f932:	1400      	asrs	r0, r0, #16
 801f934:	142d      	asrs	r5, r5, #16
 801f936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f938:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801f93c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801f940:	fb02 5000 	mla	r0, r2, r0, r5
 801f944:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f946:	f815 e000 	ldrb.w	lr, [r5, r0]
 801f94a:	eb05 0c00 	add.w	ip, r5, r0
 801f94e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801f952:	eb04 060e 	add.w	r6, r4, lr
 801f956:	2b00      	cmp	r3, #0
 801f958:	f000 8097 	beq.w	801fa8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801f95c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f964:	4425      	add	r5, r4
 801f966:	2900      	cmp	r1, #0
 801f968:	f000 8098 	beq.w	801fa9c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801f96c:	eb0c 0002 	add.w	r0, ip, r2
 801f970:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f974:	7840      	ldrb	r0, [r0, #1]
 801f976:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f97a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f97e:	4422      	add	r2, r4
 801f980:	4420      	add	r0, r4
 801f982:	b29b      	uxth	r3, r3
 801f984:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801f988:	b289      	uxth	r1, r1
 801f98a:	f895 e000 	ldrb.w	lr, [r5]
 801f98e:	3703      	adds	r7, #3
 801f990:	f109 39ff 	add.w	r9, r9, #4294967295
 801f994:	fb03 f801 	mul.w	r8, r3, r1
 801f998:	011b      	lsls	r3, r3, #4
 801f99a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801f99e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801f9a2:	eba3 0308 	sub.w	r3, r3, r8
 801f9a6:	b289      	uxth	r1, r1
 801f9a8:	b29b      	uxth	r3, r3
 801f9aa:	ebac 0c01 	sub.w	ip, ip, r1
 801f9ae:	fb03 fe0e 	mul.w	lr, r3, lr
 801f9b2:	fa1f fc8c 	uxth.w	ip, ip
 801f9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 801f9b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f9ba:	fb0c ee0b 	mla	lr, ip, fp, lr
 801f9be:	f892 b000 	ldrb.w	fp, [r2]
 801f9c2:	fb01 ee0b 	mla	lr, r1, fp, lr
 801f9c6:	f890 b000 	ldrb.w	fp, [r0]
 801f9ca:	fb08 ee0b 	mla	lr, r8, fp, lr
 801f9ce:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801f9d2:	fb1b fb03 	smulbb	fp, fp, r3
 801f9d6:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801f9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9dc:	fb0e be0a 	mla	lr, lr, sl, fp
 801f9e0:	fa1f fe8e 	uxth.w	lr, lr
 801f9e4:	f10e 0b01 	add.w	fp, lr, #1
 801f9e8:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801f9ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f9f0:	f807 ec06 	strb.w	lr, [r7, #-6]
 801f9f4:	f895 e001 	ldrb.w	lr, [r5, #1]
 801f9f8:	f896 b001 	ldrb.w	fp, [r6, #1]
 801f9fc:	fb03 fe0e 	mul.w	lr, r3, lr
 801fa00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fa02:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fa06:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fa0a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fa0e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fa12:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fa16:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801fa1a:	fb1b fb03 	smulbb	fp, fp, r3
 801fa1e:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fa22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa24:	fb0e be0a 	mla	lr, lr, sl, fp
 801fa28:	fa1f fe8e 	uxth.w	lr, lr
 801fa2c:	f10e 0b01 	add.w	fp, lr, #1
 801fa30:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fa34:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fa38:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fa3c:	78ad      	ldrb	r5, [r5, #2]
 801fa3e:	78b6      	ldrb	r6, [r6, #2]
 801fa40:	436b      	muls	r3, r5
 801fa42:	7895      	ldrb	r5, [r2, #2]
 801fa44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fa46:	fb0c 3306 	mla	r3, ip, r6, r3
 801fa4a:	fb01 3305 	mla	r3, r1, r5, r3
 801fa4e:	7885      	ldrb	r5, [r0, #2]
 801fa50:	fb08 3805 	mla	r8, r8, r5, r3
 801fa54:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801fa58:	fb13 f302 	smulbb	r3, r3, r2
 801fa5c:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fa60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801fa62:	fb08 380a 	mla	r8, r8, sl, r3
 801fa66:	fa1f f888 	uxth.w	r8, r8
 801fa6a:	f108 0301 	add.w	r3, r8, #1
 801fa6e:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801fa72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fa74:	4413      	add	r3, r2
 801fa76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fa78:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fa7c:	931d      	str	r3, [sp, #116]	; 0x74
 801fa7e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fa80:	f807 8c04 	strb.w	r8, [r7, #-4]
 801fa84:	4413      	add	r3, r2
 801fa86:	931e      	str	r3, [sp, #120]	; 0x78
 801fa88:	e6d6      	b.n	801f838 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fa8a:	b151      	cbz	r1, 801faa2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801fa8c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fa90:	4630      	mov	r0, r6
 801fa92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa96:	4422      	add	r2, r4
 801fa98:	4635      	mov	r5, r6
 801fa9a:	e772      	b.n	801f982 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fa9c:	4630      	mov	r0, r6
 801fa9e:	4632      	mov	r2, r6
 801faa0:	e76f      	b.n	801f982 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801faa2:	4630      	mov	r0, r6
 801faa4:	4632      	mov	r2, r6
 801faa6:	e7f7      	b.n	801fa98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801faa8:	b013      	add	sp, #76	; 0x4c
 801faaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801faae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801fab2:	784c      	ldrb	r4, [r1, #1]
 801fab4:	f891 a002 	ldrb.w	sl, [r1, #2]
 801fab8:	0224      	lsls	r4, r4, #8
 801faba:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801fabe:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801fac2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fac6:	f891 a000 	ldrb.w	sl, [r1]
 801faca:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801face:	ea44 040a 	orr.w	r4, r4, sl
 801fad2:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801fad6:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801fada:	9401      	str	r4, [sp, #4]
 801fadc:	fb05 c70e 	mla	r7, r5, lr, ip
 801fae0:	2d00      	cmp	r5, #0
 801fae2:	eb02 0807 	add.w	r8, r2, r7
 801fae6:	db72      	blt.n	801fbce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801fae8:	45a9      	cmp	r9, r5
 801faea:	dd70      	ble.n	801fbce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801faec:	f1bc 0f00 	cmp.w	ip, #0
 801faf0:	db6b      	blt.n	801fbca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801faf2:	45e6      	cmp	lr, ip
 801faf4:	dd69      	ble.n	801fbca <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801faf6:	5dd7      	ldrb	r7, [r2, r7]
 801faf8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fafc:	441f      	add	r7, r3
 801fafe:	f11c 0201 	adds.w	r2, ip, #1
 801fb02:	d467      	bmi.n	801fbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fb04:	4596      	cmp	lr, r2
 801fb06:	dd65      	ble.n	801fbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fb08:	2800      	cmp	r0, #0
 801fb0a:	d063      	beq.n	801fbd4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fb0c:	f898 4001 	ldrb.w	r4, [r8, #1]
 801fb10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fb14:	441c      	add	r4, r3
 801fb16:	3501      	adds	r5, #1
 801fb18:	d460      	bmi.n	801fbdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fb1a:	45a9      	cmp	r9, r5
 801fb1c:	dd5e      	ble.n	801fbdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fb1e:	2e00      	cmp	r6, #0
 801fb20:	d05c      	beq.n	801fbdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fb22:	f1bc 0f00 	cmp.w	ip, #0
 801fb26:	db57      	blt.n	801fbd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801fb28:	45e6      	cmp	lr, ip
 801fb2a:	dd55      	ble.n	801fbd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801fb2c:	f818 500e 	ldrb.w	r5, [r8, lr]
 801fb30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb34:	441d      	add	r5, r3
 801fb36:	f11c 0201 	adds.w	r2, ip, #1
 801fb3a:	d452      	bmi.n	801fbe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fb3c:	4596      	cmp	lr, r2
 801fb3e:	dd50      	ble.n	801fbe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fb40:	2800      	cmp	r0, #0
 801fb42:	d04e      	beq.n	801fbe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fb44:	44c6      	add	lr, r8
 801fb46:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fb4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb4e:	4413      	add	r3, r2
 801fb50:	b280      	uxth	r0, r0
 801fb52:	f897 8000 	ldrb.w	r8, [r7]
 801fb56:	b2b2      	uxth	r2, r6
 801fb58:	fb00 f602 	mul.w	r6, r0, r2
 801fb5c:	0100      	lsls	r0, r0, #4
 801fb5e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801fb62:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801fb66:	1b80      	subs	r0, r0, r6
 801fb68:	fa1f fc82 	uxth.w	ip, r2
 801fb6c:	b282      	uxth	r2, r0
 801fb6e:	7820      	ldrb	r0, [r4, #0]
 801fb70:	ebae 0e0c 	sub.w	lr, lr, ip
 801fb74:	4350      	muls	r0, r2
 801fb76:	fa1f fe8e 	uxth.w	lr, lr
 801fb7a:	fb0e 0808 	mla	r8, lr, r8, r0
 801fb7e:	7828      	ldrb	r0, [r5, #0]
 801fb80:	fb0c 8800 	mla	r8, ip, r0, r8
 801fb84:	7818      	ldrb	r0, [r3, #0]
 801fb86:	fb06 8000 	mla	r0, r6, r0, r8
 801fb8a:	1200      	asrs	r0, r0, #8
 801fb8c:	7008      	strb	r0, [r1, #0]
 801fb8e:	7860      	ldrb	r0, [r4, #1]
 801fb90:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fb94:	4350      	muls	r0, r2
 801fb96:	fb0e 0808 	mla	r8, lr, r8, r0
 801fb9a:	7868      	ldrb	r0, [r5, #1]
 801fb9c:	fb0c 8800 	mla	r8, ip, r0, r8
 801fba0:	7858      	ldrb	r0, [r3, #1]
 801fba2:	fb06 8000 	mla	r0, r6, r0, r8
 801fba6:	1200      	asrs	r0, r0, #8
 801fba8:	7048      	strb	r0, [r1, #1]
 801fbaa:	78a0      	ldrb	r0, [r4, #2]
 801fbac:	78bf      	ldrb	r7, [r7, #2]
 801fbae:	4350      	muls	r0, r2
 801fbb0:	78aa      	ldrb	r2, [r5, #2]
 801fbb2:	fb0e 0007 	mla	r0, lr, r7, r0
 801fbb6:	fb0c 0c02 	mla	ip, ip, r2, r0
 801fbba:	789a      	ldrb	r2, [r3, #2]
 801fbbc:	fb06 c202 	mla	r2, r6, r2, ip
 801fbc0:	1212      	asrs	r2, r2, #8
 801fbc2:	708a      	strb	r2, [r1, #2]
 801fbc4:	b002      	add	sp, #8
 801fbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fbca:	af01      	add	r7, sp, #4
 801fbcc:	e797      	b.n	801fafe <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801fbce:	ac01      	add	r4, sp, #4
 801fbd0:	4627      	mov	r7, r4
 801fbd2:	e7a0      	b.n	801fb16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fbd4:	ac01      	add	r4, sp, #4
 801fbd6:	e79e      	b.n	801fb16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fbd8:	ad01      	add	r5, sp, #4
 801fbda:	e7ac      	b.n	801fb36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801fbdc:	ab01      	add	r3, sp, #4
 801fbde:	461d      	mov	r5, r3
 801fbe0:	e7b6      	b.n	801fb50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801fbe2:	ab01      	add	r3, sp, #4
 801fbe4:	e7b4      	b.n	801fb50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801fbe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbea:	b08d      	sub	sp, #52	; 0x34
 801fbec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbf0:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801fbf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801fbf6:	900b      	str	r0, [sp, #44]	; 0x2c
 801fbf8:	9306      	str	r3, [sp, #24]
 801fbfa:	6850      	ldr	r0, [r2, #4]
 801fbfc:	6812      	ldr	r2, [r2, #0]
 801fbfe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801fc00:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 801fc04:	fb00 1303 	mla	r3, r0, r3, r1
 801fc08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fc0c:	18d3      	adds	r3, r2, r3
 801fc0e:	9307      	str	r3, [sp, #28]
 801fc10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	9308      	str	r3, [sp, #32]
 801fc16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fc18:	685d      	ldr	r5, [r3, #4]
 801fc1a:	3504      	adds	r5, #4
 801fc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	dc03      	bgt.n	801fc2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	f340 81e6 	ble.w	801fff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801fc2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fc2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fc30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fc34:	1e48      	subs	r0, r1, #1
 801fc36:	1e56      	subs	r6, r2, #1
 801fc38:	9b06      	ldr	r3, [sp, #24]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	f340 80bd 	ble.w	801fdba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fc40:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fc42:	1427      	asrs	r7, r4, #16
 801fc44:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fc48:	d406      	bmi.n	801fc58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fc4a:	4287      	cmp	r7, r0
 801fc4c:	da04      	bge.n	801fc58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	db02      	blt.n	801fc58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fc52:	42b3      	cmp	r3, r6
 801fc54:	f2c0 80b2 	blt.w	801fdbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801fc58:	3701      	adds	r7, #1
 801fc5a:	f100 80a1 	bmi.w	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fc5e:	42b9      	cmp	r1, r7
 801fc60:	f2c0 809e 	blt.w	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fc64:	3301      	adds	r3, #1
 801fc66:	f100 809b 	bmi.w	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fc6a:	429a      	cmp	r2, r3
 801fc6c:	f2c0 8098 	blt.w	801fda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fc70:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801fc74:	f1bb 0f00 	cmp.w	fp, #0
 801fc78:	f340 80bf 	ble.w	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fc7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc7e:	981e      	ldr	r0, [sp, #120]	; 0x78
 801fc80:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fc82:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fc86:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801fc8a:	1420      	asrs	r0, r4, #16
 801fc8c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fc8e:	ea4f 4723 	mov.w	r7, r3, asr #16
 801fc92:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fc96:	6892      	ldr	r2, [r2, #8]
 801fc98:	f100 8103 	bmi.w	801fea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fc9c:	f102 3eff 	add.w	lr, r2, #4294967295
 801fca0:	4570      	cmp	r0, lr
 801fca2:	f280 80fe 	bge.w	801fea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fca6:	2f00      	cmp	r7, #0
 801fca8:	f2c0 80fb 	blt.w	801fea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fcac:	f10c 3eff 	add.w	lr, ip, #4294967295
 801fcb0:	4577      	cmp	r7, lr
 801fcb2:	f280 80f6 	bge.w	801fea2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fcb6:	b212      	sxth	r2, r2
 801fcb8:	fb07 0002 	mla	r0, r7, r2, r0
 801fcbc:	9f08      	ldr	r7, [sp, #32]
 801fcbe:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fcc2:	eb07 0e00 	add.w	lr, r7, r0
 801fcc6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fcca:	eb05 0c08 	add.w	ip, r5, r8
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	f000 80d8 	beq.w	801fe84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801fcd4:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801fcd8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fcdc:	442f      	add	r7, r5
 801fcde:	2900      	cmp	r1, #0
 801fce0:	f000 80d9 	beq.w	801fe96 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fce4:	eb0e 0002 	add.w	r0, lr, r2
 801fce8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fcec:	7840      	ldrb	r0, [r0, #1]
 801fcee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fcf2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fcf6:	442a      	add	r2, r5
 801fcf8:	4428      	add	r0, r5
 801fcfa:	b29b      	uxth	r3, r3
 801fcfc:	f815 a008 	ldrb.w	sl, [r5, r8]
 801fd00:	b289      	uxth	r1, r1
 801fd02:	f897 8000 	ldrb.w	r8, [r7]
 801fd06:	fb03 f901 	mul.w	r9, r3, r1
 801fd0a:	011b      	lsls	r3, r3, #4
 801fd0c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fd10:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801fd14:	eba3 0309 	sub.w	r3, r3, r9
 801fd18:	b289      	uxth	r1, r1
 801fd1a:	b29b      	uxth	r3, r3
 801fd1c:	ebae 0e01 	sub.w	lr, lr, r1
 801fd20:	fb03 f808 	mul.w	r8, r3, r8
 801fd24:	fa1f fe8e 	uxth.w	lr, lr
 801fd28:	fb0e 880a 	mla	r8, lr, sl, r8
 801fd2c:	f892 a000 	ldrb.w	sl, [r2]
 801fd30:	fb01 880a 	mla	r8, r1, sl, r8
 801fd34:	f890 a000 	ldrb.w	sl, [r0]
 801fd38:	fb09 880a 	mla	r8, r9, sl, r8
 801fd3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd40:	f886 8000 	strb.w	r8, [r6]
 801fd44:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fd48:	f89c a001 	ldrb.w	sl, [ip, #1]
 801fd4c:	fb03 f808 	mul.w	r8, r3, r8
 801fd50:	fb0e 880a 	mla	r8, lr, sl, r8
 801fd54:	f892 a001 	ldrb.w	sl, [r2, #1]
 801fd58:	fb01 880a 	mla	r8, r1, sl, r8
 801fd5c:	f890 a001 	ldrb.w	sl, [r0, #1]
 801fd60:	fb09 880a 	mla	r8, r9, sl, r8
 801fd64:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fd68:	f886 8001 	strb.w	r8, [r6, #1]
 801fd6c:	78bf      	ldrb	r7, [r7, #2]
 801fd6e:	f89c c002 	ldrb.w	ip, [ip, #2]
 801fd72:	437b      	muls	r3, r7
 801fd74:	7892      	ldrb	r2, [r2, #2]
 801fd76:	fb0e 330c 	mla	r3, lr, ip, r3
 801fd7a:	fb01 3102 	mla	r1, r1, r2, r3
 801fd7e:	7882      	ldrb	r2, [r0, #2]
 801fd80:	fb09 1902 	mla	r9, r9, r2, r1
 801fd84:	ea4f 2929 	mov.w	r9, r9, asr #8
 801fd88:	f886 9002 	strb.w	r9, [r6, #2]
 801fd8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fd8e:	3603      	adds	r6, #3
 801fd90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801fd92:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fd96:	441c      	add	r4, r3
 801fd98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fd9a:	4413      	add	r3, r2
 801fd9c:	9318      	str	r3, [sp, #96]	; 0x60
 801fd9e:	e769      	b.n	801fc74 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fda0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fda2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801fda4:	441c      	add	r4, r3
 801fda6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fda8:	443b      	add	r3, r7
 801fdaa:	9318      	str	r3, [sp, #96]	; 0x60
 801fdac:	9b06      	ldr	r3, [sp, #24]
 801fdae:	3b01      	subs	r3, #1
 801fdb0:	9306      	str	r3, [sp, #24]
 801fdb2:	9b07      	ldr	r3, [sp, #28]
 801fdb4:	3303      	adds	r3, #3
 801fdb6:	9307      	str	r3, [sp, #28]
 801fdb8:	e73e      	b.n	801fc38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fdba:	d026      	beq.n	801fe0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801fdbc:	9b06      	ldr	r3, [sp, #24]
 801fdbe:	9819      	ldr	r0, [sp, #100]	; 0x64
 801fdc0:	3b01      	subs	r3, #1
 801fdc2:	fb00 4003 	mla	r0, r0, r3, r4
 801fdc6:	1400      	asrs	r0, r0, #16
 801fdc8:	f53f af52 	bmi.w	801fc70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fdcc:	3901      	subs	r1, #1
 801fdce:	4288      	cmp	r0, r1
 801fdd0:	f6bf af4e 	bge.w	801fc70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fdd4:	991a      	ldr	r1, [sp, #104]	; 0x68
 801fdd6:	9818      	ldr	r0, [sp, #96]	; 0x60
 801fdd8:	fb01 0303 	mla	r3, r1, r3, r0
 801fddc:	141b      	asrs	r3, r3, #16
 801fdde:	f53f af47 	bmi.w	801fc70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fde2:	3a01      	subs	r2, #1
 801fde4:	4293      	cmp	r3, r2
 801fde6:	f6bf af43 	bge.w	801fc70 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801fdea:	9b07      	ldr	r3, [sp, #28]
 801fdec:	f8dd a018 	ldr.w	sl, [sp, #24]
 801fdf0:	f103 0803 	add.w	r8, r3, #3
 801fdf4:	f1ba 0f00 	cmp.w	sl, #0
 801fdf8:	dc71      	bgt.n	801fede <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801fdfa:	9b06      	ldr	r3, [sp, #24]
 801fdfc:	9a07      	ldr	r2, [sp, #28]
 801fdfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fe02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fe06:	441a      	add	r2, r3
 801fe08:	9207      	str	r2, [sp, #28]
 801fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	f340 80f2 	ble.w	801fff6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801fe12:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fe16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fe18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fe1c:	eeb0 6a62 	vmov.f32	s12, s5
 801fe20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fe24:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fe28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe2c:	ee16 4a10 	vmov	r4, s12
 801fe30:	eeb0 6a43 	vmov.f32	s12, s6
 801fe34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fe38:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801fe3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fe40:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fe44:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fe48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fe4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fe50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fe54:	ee12 2a90 	vmov	r2, s5
 801fe58:	eef0 2a47 	vmov.f32	s5, s14
 801fe5c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe60:	ee13 2a10 	vmov	r2, s6
 801fe64:	9319      	str	r3, [sp, #100]	; 0x64
 801fe66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fe68:	eeb0 3a67 	vmov.f32	s6, s15
 801fe6c:	fb92 f3f3 	sdiv	r3, r2, r3
 801fe70:	931a      	str	r3, [sp, #104]	; 0x68
 801fe72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fe76:	3b01      	subs	r3, #1
 801fe78:	9309      	str	r3, [sp, #36]	; 0x24
 801fe7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fe7c:	bf08      	it	eq
 801fe7e:	4613      	moveq	r3, r2
 801fe80:	9306      	str	r3, [sp, #24]
 801fe82:	e6cb      	b.n	801fc1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801fe84:	b151      	cbz	r1, 801fe9c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801fe86:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801fe8a:	4660      	mov	r0, ip
 801fe8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fe90:	442a      	add	r2, r5
 801fe92:	4667      	mov	r7, ip
 801fe94:	e731      	b.n	801fcfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fe96:	4660      	mov	r0, ip
 801fe98:	4662      	mov	r2, ip
 801fe9a:	e72e      	b.n	801fcfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801fe9c:	4660      	mov	r0, ip
 801fe9e:	4662      	mov	r2, ip
 801fea0:	e7f7      	b.n	801fe92 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801fea2:	f110 0e01 	adds.w	lr, r0, #1
 801fea6:	f53f af71 	bmi.w	801fd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801feaa:	4572      	cmp	r2, lr
 801feac:	f6ff af6e 	blt.w	801fd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801feb0:	f117 0e01 	adds.w	lr, r7, #1
 801feb4:	f53f af6a 	bmi.w	801fd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801feb8:	45f4      	cmp	ip, lr
 801feba:	f6ff af67 	blt.w	801fd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801febe:	b212      	sxth	r2, r2
 801fec0:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801fec4:	fa0f f38c 	sxth.w	r3, ip
 801fec8:	9200      	str	r2, [sp, #0]
 801feca:	4631      	mov	r1, r6
 801fecc:	9a08      	ldr	r2, [sp, #32]
 801fece:	9301      	str	r3, [sp, #4]
 801fed0:	462b      	mov	r3, r5
 801fed2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801fed6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801fed8:	f7ff fde9 	bl	801faae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801fedc:	e756      	b.n	801fd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801fede:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fee0:	1426      	asrs	r6, r4, #16
 801fee2:	9818      	ldr	r0, [sp, #96]	; 0x60
 801fee4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fee8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801feec:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801feee:	1400      	asrs	r0, r0, #16
 801fef0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fef4:	fb02 6000 	mla	r0, r2, r0, r6
 801fef8:	9e08      	ldr	r6, [sp, #32]
 801fefa:	f816 e000 	ldrb.w	lr, [r6, r0]
 801fefe:	eb06 0c00 	add.w	ip, r6, r0
 801ff02:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ff06:	eb05 070e 	add.w	r7, r5, lr
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d064      	beq.n	801ffd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801ff0e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801ff12:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ff16:	442e      	add	r6, r5
 801ff18:	2900      	cmp	r1, #0
 801ff1a:	d066      	beq.n	801ffea <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801ff1c:	eb0c 0002 	add.w	r0, ip, r2
 801ff20:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ff24:	7840      	ldrb	r0, [r0, #1]
 801ff26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ff2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ff2e:	442a      	add	r2, r5
 801ff30:	4428      	add	r0, r5
 801ff32:	b29b      	uxth	r3, r3
 801ff34:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801ff38:	b289      	uxth	r1, r1
 801ff3a:	f896 e000 	ldrb.w	lr, [r6]
 801ff3e:	f108 0803 	add.w	r8, r8, #3
 801ff42:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ff46:	fb03 f901 	mul.w	r9, r3, r1
 801ff4a:	011b      	lsls	r3, r3, #4
 801ff4c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ff50:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801ff54:	eba3 0309 	sub.w	r3, r3, r9
 801ff58:	b289      	uxth	r1, r1
 801ff5a:	b29b      	uxth	r3, r3
 801ff5c:	ebac 0c01 	sub.w	ip, ip, r1
 801ff60:	fb03 fe0e 	mul.w	lr, r3, lr
 801ff64:	fa1f fc8c 	uxth.w	ip, ip
 801ff68:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ff6c:	f892 b000 	ldrb.w	fp, [r2]
 801ff70:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ff74:	f890 b000 	ldrb.w	fp, [r0]
 801ff78:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ff7c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ff80:	f808 ec06 	strb.w	lr, [r8, #-6]
 801ff84:	f896 e001 	ldrb.w	lr, [r6, #1]
 801ff88:	f897 b001 	ldrb.w	fp, [r7, #1]
 801ff8c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ff90:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ff94:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ff98:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ff9c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ffa0:	fb09 ee0b 	mla	lr, r9, fp, lr
 801ffa4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ffa8:	f808 ec05 	strb.w	lr, [r8, #-5]
 801ffac:	78b6      	ldrb	r6, [r6, #2]
 801ffae:	78bf      	ldrb	r7, [r7, #2]
 801ffb0:	4373      	muls	r3, r6
 801ffb2:	7896      	ldrb	r6, [r2, #2]
 801ffb4:	7882      	ldrb	r2, [r0, #2]
 801ffb6:	fb0c 3307 	mla	r3, ip, r7, r3
 801ffba:	fb01 3306 	mla	r3, r1, r6, r3
 801ffbe:	fb09 3902 	mla	r9, r9, r2, r3
 801ffc2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ffc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ffc6:	441c      	add	r4, r3
 801ffc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ffca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ffce:	4413      	add	r3, r2
 801ffd0:	f808 9c04 	strb.w	r9, [r8, #-4]
 801ffd4:	9318      	str	r3, [sp, #96]	; 0x60
 801ffd6:	e70d      	b.n	801fdf4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801ffd8:	b151      	cbz	r1, 801fff0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801ffda:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ffde:	4638      	mov	r0, r7
 801ffe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ffe4:	442a      	add	r2, r5
 801ffe6:	463e      	mov	r6, r7
 801ffe8:	e7a3      	b.n	801ff32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801ffea:	4638      	mov	r0, r7
 801ffec:	463a      	mov	r2, r7
 801ffee:	e7a0      	b.n	801ff32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801fff0:	4638      	mov	r0, r7
 801fff2:	463a      	mov	r2, r7
 801fff4:	e7f7      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801fff6:	b00d      	add	sp, #52	; 0x34
 801fff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fffc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801fffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020000:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8020004:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8020008:	2d00      	cmp	r5, #0
 802000a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 802000e:	fb05 700c 	mla	r0, r5, ip, r7
 8020012:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8020016:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 802001a:	eb02 0800 	add.w	r8, r2, r0
 802001e:	f2c0 8118 	blt.w	8020252 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020022:	45a9      	cmp	r9, r5
 8020024:	f340 8115 	ble.w	8020252 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8020028:	2f00      	cmp	r7, #0
 802002a:	f2c0 8110 	blt.w	802024e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 802002e:	45bc      	cmp	ip, r7
 8020030:	f340 810d 	ble.w	802024e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8020034:	5c12      	ldrb	r2, [r2, r0]
 8020036:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802003a:	1c7a      	adds	r2, r7, #1
 802003c:	f100 810c 	bmi.w	8020258 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020040:	4594      	cmp	ip, r2
 8020042:	f340 8109 	ble.w	8020258 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020046:	2c00      	cmp	r4, #0
 8020048:	f000 8108 	beq.w	802025c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 802004c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020050:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020054:	3501      	adds	r5, #1
 8020056:	f100 8105 	bmi.w	8020264 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802005a:	45a9      	cmp	r9, r5
 802005c:	f340 8102 	ble.w	8020264 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020060:	f1be 0f00 	cmp.w	lr, #0
 8020064:	f000 8101 	beq.w	802026a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8020068:	2f00      	cmp	r7, #0
 802006a:	f2c0 80f9 	blt.w	8020260 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 802006e:	45bc      	cmp	ip, r7
 8020070:	f340 80f6 	ble.w	8020260 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020074:	f818 200c 	ldrb.w	r2, [r8, ip]
 8020078:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802007c:	3701      	adds	r7, #1
 802007e:	f100 80f7 	bmi.w	8020270 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020082:	45bc      	cmp	ip, r7
 8020084:	f340 80f4 	ble.w	8020270 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020088:	2c00      	cmp	r4, #0
 802008a:	f000 80f3 	beq.w	8020274 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 802008e:	44c4      	add	ip, r8
 8020090:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020094:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020098:	fa1f fc84 	uxth.w	ip, r4
 802009c:	fa1f f48e 	uxth.w	r4, lr
 80200a0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80200a4:	fb04 fe0c 	mul.w	lr, r4, ip
 80200a8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80200ac:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80200b0:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 80200b4:	ebac 070e 	sub.w	r7, ip, lr
 80200b8:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80200bc:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80200c0:	b2a4      	uxth	r4, r4
 80200c2:	b2bf      	uxth	r7, r7
 80200c4:	1b1b      	subs	r3, r3, r4
 80200c6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80200ca:	fb07 fc0a 	mul.w	ip, r7, sl
 80200ce:	b29b      	uxth	r3, r3
 80200d0:	fb03 cc0b 	mla	ip, r3, fp, ip
 80200d4:	9300      	str	r3, [sp, #0]
 80200d6:	fb04 cc09 	mla	ip, r4, r9, ip
 80200da:	fb0e cc08 	mla	ip, lr, r8, ip
 80200de:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80200e2:	9301      	str	r3, [sp, #4]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	f000 80af 	beq.w	8020248 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80200ea:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80200ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80200f2:	fb0b fc0c 	mul.w	ip, fp, ip
 80200f6:	fb0b f606 	mul.w	r6, fp, r6
 80200fa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80200fe:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020102:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020106:	44dc      	add	ip, fp
 8020108:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 802010c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020114:	fb0a fb0b 	mul.w	fp, sl, fp
 8020118:	fb0a fa00 	mul.w	sl, sl, r0
 802011c:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020120:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020124:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020128:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 802012c:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020130:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020134:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020138:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802013c:	0a36      	lsrs	r6, r6, #8
 802013e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020142:	44dc      	add	ip, fp
 8020144:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020148:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802014c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020150:	fb09 fb0b 	mul.w	fp, r9, fp
 8020154:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020158:	fb09 f905 	mul.w	r9, r9, r5
 802015c:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020160:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020164:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8020168:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802016c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020170:	fb0c fc07 	mul.w	ip, ip, r7
 8020174:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020178:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 802017c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020180:	4458      	add	r0, fp
 8020182:	fb08 f505 	mul.w	r5, r8, r5
 8020186:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802018a:	fb08 f802 	mul.w	r8, r8, r2
 802018e:	0a00      	lsrs	r0, r0, #8
 8020190:	0a2a      	lsrs	r2, r5, #8
 8020192:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020196:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802019a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802019e:	4415      	add	r5, r2
 80201a0:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80201a4:	0a2d      	lsrs	r5, r5, #8
 80201a6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80201aa:	9a00      	ldr	r2, [sp, #0]
 80201ac:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80201b0:	fb03 cc02 	mla	ip, r3, r2, ip
 80201b4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80201b8:	9b01      	ldr	r3, [sp, #4]
 80201ba:	fb05 c50e 	mla	r5, r5, lr, ip
 80201be:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80201c2:	fb00 5004 	mla	r0, r0, r4, r5
 80201c6:	0a00      	lsrs	r0, r0, #8
 80201c8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80201cc:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80201d0:	4378      	muls	r0, r7
 80201d2:	fb02 0006 	mla	r0, r2, r6, r0
 80201d6:	fb0e 0e08 	mla	lr, lr, r8, r0
 80201da:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80201de:	fb04 e000 	mla	r0, r4, r0, lr
 80201e2:	0a00      	lsrs	r0, r0, #8
 80201e4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80201e8:	4328      	orrs	r0, r5
 80201ea:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80201ee:	b2ad      	uxth	r5, r5
 80201f0:	b2c4      	uxtb	r4, r0
 80201f2:	436b      	muls	r3, r5
 80201f4:	fb14 f405 	smulbb	r4, r4, r5
 80201f8:	1c5a      	adds	r2, r3, #1
 80201fa:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80201fe:	780b      	ldrb	r3, [r1, #0]
 8020200:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8020204:	b2d2      	uxtb	r2, r2
 8020206:	fb03 4302 	mla	r3, r3, r2, r4
 802020a:	b29b      	uxth	r3, r3
 802020c:	1c5c      	adds	r4, r3, #1
 802020e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8020212:	784c      	ldrb	r4, [r1, #1]
 8020214:	fb14 f402 	smulbb	r4, r4, r2
 8020218:	121b      	asrs	r3, r3, #8
 802021a:	700b      	strb	r3, [r1, #0]
 802021c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020220:	fb03 4305 	mla	r3, r3, r5, r4
 8020224:	b29b      	uxth	r3, r3
 8020226:	1c5c      	adds	r4, r3, #1
 8020228:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 802022c:	0c04      	lsrs	r4, r0, #16
 802022e:	7888      	ldrb	r0, [r1, #2]
 8020230:	121b      	asrs	r3, r3, #8
 8020232:	fb10 f002 	smulbb	r0, r0, r2
 8020236:	704b      	strb	r3, [r1, #1]
 8020238:	fb04 0005 	mla	r0, r4, r5, r0
 802023c:	b280      	uxth	r0, r0
 802023e:	1c43      	adds	r3, r0, #1
 8020240:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020244:	1200      	asrs	r0, r0, #8
 8020246:	7088      	strb	r0, [r1, #2]
 8020248:	b003      	add	sp, #12
 802024a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802024e:	2600      	movs	r6, #0
 8020250:	e6f3      	b.n	802003a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8020252:	2000      	movs	r0, #0
 8020254:	4606      	mov	r6, r0
 8020256:	e6fd      	b.n	8020054 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020258:	2000      	movs	r0, #0
 802025a:	e6fb      	b.n	8020054 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802025c:	4620      	mov	r0, r4
 802025e:	e6f9      	b.n	8020054 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020260:	2500      	movs	r5, #0
 8020262:	e70b      	b.n	802007c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8020264:	2200      	movs	r2, #0
 8020266:	4615      	mov	r5, r2
 8020268:	e716      	b.n	8020098 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802026a:	4672      	mov	r2, lr
 802026c:	4675      	mov	r5, lr
 802026e:	e713      	b.n	8020098 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020270:	2200      	movs	r2, #0
 8020272:	e711      	b.n	8020098 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020274:	4622      	mov	r2, r4
 8020276:	e70f      	b.n	8020098 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08020278 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802027c:	b09f      	sub	sp, #124	; 0x7c
 802027e:	921b      	str	r2, [sp, #108]	; 0x6c
 8020280:	9309      	str	r3, [sp, #36]	; 0x24
 8020282:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8020284:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020288:	901d      	str	r0, [sp, #116]	; 0x74
 802028a:	931c      	str	r3, [sp, #112]	; 0x70
 802028c:	6850      	ldr	r0, [r2, #4]
 802028e:	9119      	str	r1, [sp, #100]	; 0x64
 8020290:	6812      	ldr	r2, [r2, #0]
 8020292:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8020294:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8020298:	fb00 1303 	mla	r3, r0, r3, r1
 802029c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80202a0:	18d3      	adds	r3, r2, r3
 80202a2:	930c      	str	r3, [sp, #48]	; 0x30
 80202a4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	9312      	str	r3, [sp, #72]	; 0x48
 80202aa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80202ac:	685e      	ldr	r6, [r3, #4]
 80202ae:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80202b2:	3604      	adds	r6, #4
 80202b4:	930d      	str	r3, [sp, #52]	; 0x34
 80202b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	dc03      	bgt.n	80202c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80202bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80202be:	2b00      	cmp	r3, #0
 80202c0:	f340 8378 	ble.w	80209b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80202c4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80202c6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80202ce:	1e48      	subs	r0, r1, #1
 80202d0:	1e57      	subs	r7, r2, #1
 80202d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	f340 818c 	ble.w	80205f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80202da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80202dc:	142b      	asrs	r3, r5, #16
 80202de:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80202e2:	d406      	bmi.n	80202f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80202e4:	4584      	cmp	ip, r0
 80202e6:	da04      	bge.n	80202f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80202e8:	2b00      	cmp	r3, #0
 80202ea:	db02      	blt.n	80202f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80202ec:	42bb      	cmp	r3, r7
 80202ee:	f2c0 8181 	blt.w	80205f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80202f2:	f11c 0c01 	adds.w	ip, ip, #1
 80202f6:	f100 816f 	bmi.w	80205d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80202fa:	4561      	cmp	r1, ip
 80202fc:	f2c0 816c 	blt.w	80205d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020300:	3301      	adds	r3, #1
 8020302:	f100 8169 	bmi.w	80205d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8020306:	429a      	cmp	r2, r3
 8020308:	f2c0 8166 	blt.w	80205d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802030c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802030e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8020310:	931a      	str	r3, [sp, #104]	; 0x68
 8020312:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8020314:	2b00      	cmp	r3, #0
 8020316:	f340 818c 	ble.w	8020632 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 802031a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802031c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020320:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8020324:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020328:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802032a:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802032e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020330:	141b      	asrs	r3, r3, #16
 8020332:	f100 81d0 	bmi.w	80206d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020336:	f100 38ff 	add.w	r8, r0, #4294967295
 802033a:	4543      	cmp	r3, r8
 802033c:	f280 81cb 	bge.w	80206d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020340:	f1bc 0f00 	cmp.w	ip, #0
 8020344:	f2c0 81c7 	blt.w	80206d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020348:	f10e 38ff 	add.w	r8, lr, #4294967295
 802034c:	45c4      	cmp	ip, r8
 802034e:	f280 81c2 	bge.w	80206d6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020352:	b200      	sxth	r0, r0
 8020354:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020356:	fb0c 3300 	mla	r3, ip, r0, r3
 802035a:	eb04 0803 	add.w	r8, r4, r3
 802035e:	5ce3      	ldrb	r3, [r4, r3]
 8020360:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020364:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020368:	2a00      	cmp	r2, #0
 802036a:	f000 81a9 	beq.w	80206c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802036e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020372:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020376:	940e      	str	r4, [sp, #56]	; 0x38
 8020378:	0e24      	lsrs	r4, r4, #24
 802037a:	9415      	str	r4, [sp, #84]	; 0x54
 802037c:	b179      	cbz	r1, 802039e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802037e:	eb08 0c00 	add.w	ip, r8, r0
 8020382:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020386:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802038a:	900a      	str	r0, [sp, #40]	; 0x28
 802038c:	0e00      	lsrs	r0, r0, #24
 802038e:	9013      	str	r0, [sp, #76]	; 0x4c
 8020390:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020394:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020398:	900f      	str	r0, [sp, #60]	; 0x3c
 802039a:	0e00      	lsrs	r0, r0, #24
 802039c:	9016      	str	r0, [sp, #88]	; 0x58
 802039e:	b292      	uxth	r2, r2
 80203a0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80203a2:	b289      	uxth	r1, r1
 80203a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80203a6:	fb02 f901 	mul.w	r9, r2, r1
 80203aa:	0112      	lsls	r2, r2, #4
 80203ac:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80203b0:	eba2 0809 	sub.w	r8, r2, r9
 80203b4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80203b8:	b289      	uxth	r1, r1
 80203ba:	fa1f f888 	uxth.w	r8, r8
 80203be:	1a52      	subs	r2, r2, r1
 80203c0:	fb08 f000 	mul.w	r0, r8, r0
 80203c4:	b292      	uxth	r2, r2
 80203c6:	fb02 000e 	mla	r0, r2, lr, r0
 80203ca:	fb01 0004 	mla	r0, r1, r4, r0
 80203ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80203d0:	fb09 0004 	mla	r0, r9, r4, r0
 80203d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80203d8:	2800      	cmp	r0, #0
 80203da:	f000 80f2 	beq.w	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80203de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80203e2:	d01b      	beq.n	802041c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80203e4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80203e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203ec:	fb0e fa0a 	mul.w	sl, lr, sl
 80203f0:	fb0e fe03 	mul.w	lr, lr, r3
 80203f4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80203f8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80203fc:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020400:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020404:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020408:	4453      	add	r3, sl
 802040a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802040e:	0a1b      	lsrs	r3, r3, #8
 8020410:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020414:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020418:	ea43 030c 	orr.w	r3, r3, ip
 802041c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802041e:	2cff      	cmp	r4, #255	; 0xff
 8020420:	d021      	beq.n	8020466 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020422:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020424:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020428:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802042a:	fb04 fb0b 	mul.w	fp, r4, fp
 802042e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020430:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020434:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8020436:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802043a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802043e:	fb04 fa0a 	mul.w	sl, r4, sl
 8020442:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020446:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802044a:	44de      	add	lr, fp
 802044c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020450:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020454:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020458:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802045c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020460:	ea4e 040a 	orr.w	r4, lr, sl
 8020464:	940e      	str	r4, [sp, #56]	; 0x38
 8020466:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020468:	2cff      	cmp	r4, #255	; 0xff
 802046a:	d021      	beq.n	80204b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802046c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802046e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020472:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020474:	fb04 fb0b 	mul.w	fp, r4, fp
 8020478:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802047a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802047e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020480:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020484:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020488:	fb04 fa0a 	mul.w	sl, r4, sl
 802048c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020490:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020494:	44de      	add	lr, fp
 8020496:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802049a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802049e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204a6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204aa:	ea4e 040a 	orr.w	r4, lr, sl
 80204ae:	940a      	str	r4, [sp, #40]	; 0x28
 80204b0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80204b2:	2cff      	cmp	r4, #255	; 0xff
 80204b4:	d021      	beq.n	80204fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80204b6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80204b8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80204bc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80204be:	fb04 fb0b 	mul.w	fp, r4, fp
 80204c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80204c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80204c8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80204ca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80204ce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80204d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80204d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204da:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80204de:	44de      	add	lr, fp
 80204e0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80204e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80204e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80204ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80204f0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80204f4:	ea4e 040a 	orr.w	r4, lr, sl
 80204f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80204fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80204fc:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020504:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020508:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802050a:	fb08 fc0c 	mul.w	ip, r8, ip
 802050e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020512:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020516:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020518:	fb01 cc0e 	mla	ip, r1, lr, ip
 802051c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020520:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8020522:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020526:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802052a:	fb08 f80e 	mul.w	r8, r8, lr
 802052e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020532:	fb02 8303 	mla	r3, r2, r3, r8
 8020536:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020538:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802053c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020540:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020542:	fb01 330a 	mla	r3, r1, sl, r3
 8020546:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802054a:	fb09 3901 	mla	r9, r9, r1, r3
 802054e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020550:	990d      	ldr	r1, [sp, #52]	; 0x34
 8020552:	4343      	muls	r3, r0
 8020554:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020558:	1c58      	adds	r0, r3, #1
 802055a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802055e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020562:	ea4c 0c09 	orr.w	ip, ip, r9
 8020566:	783b      	ldrb	r3, [r7, #0]
 8020568:	fa5f f28c 	uxtb.w	r2, ip
 802056c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020570:	fb12 f201 	smulbb	r2, r2, r1
 8020574:	b2c0      	uxtb	r0, r0
 8020576:	fb03 2300 	mla	r3, r3, r0, r2
 802057a:	b29b      	uxth	r3, r3
 802057c:	1c5a      	adds	r2, r3, #1
 802057e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020582:	787a      	ldrb	r2, [r7, #1]
 8020584:	fb12 f200 	smulbb	r2, r2, r0
 8020588:	121b      	asrs	r3, r3, #8
 802058a:	703b      	strb	r3, [r7, #0]
 802058c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020590:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020594:	fb03 2301 	mla	r3, r3, r1, r2
 8020598:	b29b      	uxth	r3, r3
 802059a:	1c5a      	adds	r2, r3, #1
 802059c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80205a0:	121b      	asrs	r3, r3, #8
 80205a2:	707b      	strb	r3, [r7, #1]
 80205a4:	78bb      	ldrb	r3, [r7, #2]
 80205a6:	fb13 f000 	smulbb	r0, r3, r0
 80205aa:	fb0c 0c01 	mla	ip, ip, r1, r0
 80205ae:	fa1f fc8c 	uxth.w	ip, ip
 80205b2:	f10c 0301 	add.w	r3, ip, #1
 80205b6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80205ba:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80205be:	f887 c002 	strb.w	ip, [r7, #2]
 80205c2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80205c4:	3703      	adds	r7, #3
 80205c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80205c8:	441a      	add	r2, r3
 80205ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80205cc:	441d      	add	r5, r3
 80205ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80205d0:	9229      	str	r2, [sp, #164]	; 0xa4
 80205d2:	3b01      	subs	r3, #1
 80205d4:	931a      	str	r3, [sp, #104]	; 0x68
 80205d6:	e69c      	b.n	8020312 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80205d8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80205da:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80205dc:	441c      	add	r4, r3
 80205de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80205e0:	441d      	add	r5, r3
 80205e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205e4:	9429      	str	r4, [sp, #164]	; 0xa4
 80205e6:	3b01      	subs	r3, #1
 80205e8:	9309      	str	r3, [sp, #36]	; 0x24
 80205ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80205ec:	3303      	adds	r3, #3
 80205ee:	930c      	str	r3, [sp, #48]	; 0x30
 80205f0:	e66f      	b.n	80202d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80205f2:	d026      	beq.n	8020642 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80205f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205f6:	982b      	ldr	r0, [sp, #172]	; 0xac
 80205f8:	3b01      	subs	r3, #1
 80205fa:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80205fc:	fb00 4003 	mla	r0, r0, r3, r4
 8020600:	1400      	asrs	r0, r0, #16
 8020602:	f53f ae83 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020606:	3901      	subs	r1, #1
 8020608:	4288      	cmp	r0, r1
 802060a:	f6bf ae7f 	bge.w	802030c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802060e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8020610:	fb01 5303 	mla	r3, r1, r3, r5
 8020614:	141b      	asrs	r3, r3, #16
 8020616:	f53f ae79 	bmi.w	802030c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802061a:	3a01      	subs	r2, #1
 802061c:	4293      	cmp	r3, r2
 802061e:	f6bf ae75 	bge.w	802030c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8020622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020624:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020628:	f103 0e03 	add.w	lr, r3, #3
 802062c:	f1bb 0f00 	cmp.w	fp, #0
 8020630:	dc71      	bgt.n	8020716 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8020632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020634:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802063a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802063e:	4423      	add	r3, r4
 8020640:	930c      	str	r3, [sp, #48]	; 0x30
 8020642:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020644:	2b00      	cmp	r3, #0
 8020646:	f340 81b5 	ble.w	80209b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802064a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802064e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020650:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020654:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020658:	eef0 6a62 	vmov.f32	s13, s5
 802065c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020660:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020664:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020668:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802066c:	eef0 6a43 	vmov.f32	s13, s6
 8020670:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020674:	ee16 5a90 	vmov	r5, s13
 8020678:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802067c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020680:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020684:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020688:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802068c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020690:	ee12 2a90 	vmov	r2, s5
 8020694:	eef0 2a47 	vmov.f32	s5, s14
 8020698:	fb92 f3f3 	sdiv	r3, r2, r3
 802069c:	ee13 2a10 	vmov	r2, s6
 80206a0:	932b      	str	r3, [sp, #172]	; 0xac
 80206a2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80206a4:	eeb0 3a67 	vmov.f32	s6, s15
 80206a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80206ac:	932c      	str	r3, [sp, #176]	; 0xb0
 80206ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80206b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80206b2:	3b01      	subs	r3, #1
 80206b4:	9319      	str	r3, [sp, #100]	; 0x64
 80206b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80206b8:	bf08      	it	eq
 80206ba:	4613      	moveq	r3, r2
 80206bc:	9309      	str	r3, [sp, #36]	; 0x24
 80206be:	e5fa      	b.n	80202b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80206c0:	2900      	cmp	r1, #0
 80206c2:	f43f ae6c 	beq.w	802039e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80206c6:	f818 0000 	ldrb.w	r0, [r8, r0]
 80206ca:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80206ce:	900a      	str	r0, [sp, #40]	; 0x28
 80206d0:	0e00      	lsrs	r0, r0, #24
 80206d2:	9013      	str	r0, [sp, #76]	; 0x4c
 80206d4:	e663      	b.n	802039e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80206d6:	f113 0801 	adds.w	r8, r3, #1
 80206da:	f53f af72 	bmi.w	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80206de:	4540      	cmp	r0, r8
 80206e0:	f6ff af6f 	blt.w	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80206e4:	f11c 0801 	adds.w	r8, ip, #1
 80206e8:	f53f af6b 	bmi.w	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80206ec:	45c6      	cmp	lr, r8
 80206ee:	f6ff af68 	blt.w	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80206f2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80206f4:	b200      	sxth	r0, r0
 80206f6:	9302      	str	r3, [sp, #8]
 80206f8:	fa0f f38e 	sxth.w	r3, lr
 80206fc:	9000      	str	r0, [sp, #0]
 80206fe:	9301      	str	r3, [sp, #4]
 8020700:	4633      	mov	r3, r6
 8020702:	981d      	ldr	r0, [sp, #116]	; 0x74
 8020704:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8020708:	e9cd c203 	strd	ip, r2, [sp, #12]
 802070c:	4639      	mov	r1, r7
 802070e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020710:	f7ff fc74 	bl	801fffc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8020714:	e755      	b.n	80205c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020716:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8020718:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802071c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802071e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020722:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8020724:	1427      	asrs	r7, r4, #16
 8020726:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020728:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802072c:	142b      	asrs	r3, r5, #16
 802072e:	fb01 7303 	mla	r3, r1, r3, r7
 8020732:	18e7      	adds	r7, r4, r3
 8020734:	5ce3      	ldrb	r3, [r4, r3]
 8020736:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802073a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802073e:	2a00      	cmp	r2, #0
 8020740:	f000 812e 	beq.w	80209a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8020744:	f897 8001 	ldrb.w	r8, [r7, #1]
 8020748:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802074c:	9410      	str	r4, [sp, #64]	; 0x40
 802074e:	0e24      	lsrs	r4, r4, #24
 8020750:	9417      	str	r4, [sp, #92]	; 0x5c
 8020752:	b170      	cbz	r0, 8020772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020754:	eb07 0801 	add.w	r8, r7, r1
 8020758:	5c79      	ldrb	r1, [r7, r1]
 802075a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802075e:	910b      	str	r1, [sp, #44]	; 0x2c
 8020760:	0e09      	lsrs	r1, r1, #24
 8020762:	9114      	str	r1, [sp, #80]	; 0x50
 8020764:	f898 1001 	ldrb.w	r1, [r8, #1]
 8020768:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802076c:	9111      	str	r1, [sp, #68]	; 0x44
 802076e:	0e09      	lsrs	r1, r1, #24
 8020770:	9118      	str	r1, [sp, #96]	; 0x60
 8020772:	b292      	uxth	r2, r2
 8020774:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020776:	b280      	uxth	r0, r0
 8020778:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802077a:	fb02 f900 	mul.w	r9, r2, r0
 802077e:	0112      	lsls	r2, r2, #4
 8020780:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020784:	eba2 0809 	sub.w	r8, r2, r9
 8020788:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802078c:	b280      	uxth	r0, r0
 802078e:	fa1f f888 	uxth.w	r8, r8
 8020792:	1a12      	subs	r2, r2, r0
 8020794:	fb08 f101 	mul.w	r1, r8, r1
 8020798:	b292      	uxth	r2, r2
 802079a:	fb02 110c 	mla	r1, r2, ip, r1
 802079e:	fb00 1104 	mla	r1, r0, r4, r1
 80207a2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80207a4:	fb09 1104 	mla	r1, r9, r4, r1
 80207a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80207ac:	2900      	cmp	r1, #0
 80207ae:	f000 80ec 	beq.w	802098a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 80207b2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80207b6:	d019      	beq.n	80207ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 80207b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80207bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80207c0:	fb0c fa0a 	mul.w	sl, ip, sl
 80207c4:	fb0c fc03 	mul.w	ip, ip, r3
 80207c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80207cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80207d0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80207d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80207d8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80207dc:	4453      	add	r3, sl
 80207de:	0a3f      	lsrs	r7, r7, #8
 80207e0:	0a1b      	lsrs	r3, r3, #8
 80207e2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80207e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80207ea:	433b      	orrs	r3, r7
 80207ec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80207ee:	2cff      	cmp	r4, #255	; 0xff
 80207f0:	d020      	beq.n	8020834 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80207f2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80207f4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80207f8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80207fa:	4367      	muls	r7, r4
 80207fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80207fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020802:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020806:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8020808:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802080c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020810:	fb04 fa0a 	mul.w	sl, r4, sl
 8020814:	44bc      	add	ip, r7
 8020816:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802081a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802081e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020822:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020826:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802082a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802082e:	ea4c 040a 	orr.w	r4, ip, sl
 8020832:	9410      	str	r4, [sp, #64]	; 0x40
 8020834:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020836:	2cff      	cmp	r4, #255	; 0xff
 8020838:	d020      	beq.n	802087c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 802083a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802083c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020840:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020842:	4367      	muls	r7, r4
 8020844:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020846:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802084a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802084e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8020850:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8020854:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020858:	fb04 fa0a 	mul.w	sl, r4, sl
 802085c:	44bc      	add	ip, r7
 802085e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020862:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020866:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802086a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802086e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020872:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020876:	ea4c 040a 	orr.w	r4, ip, sl
 802087a:	940b      	str	r4, [sp, #44]	; 0x2c
 802087c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802087e:	2cff      	cmp	r4, #255	; 0xff
 8020880:	d020      	beq.n	80208c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020882:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8020884:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8020888:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802088a:	4367      	muls	r7, r4
 802088c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802088e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020892:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020896:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8020898:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802089c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80208a4:	44bc      	add	ip, r7
 80208a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80208ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80208ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80208be:	ea4c 040a 	orr.w	r4, ip, sl
 80208c2:	9411      	str	r4, [sp, #68]	; 0x44
 80208c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80208c6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80208ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208ce:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80208d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80208d4:	fb08 f707 	mul.w	r7, r8, r7
 80208d8:	fb02 770c 	mla	r7, r2, ip, r7
 80208dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80208e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80208e2:	fb00 770c 	mla	r7, r0, ip, r7
 80208e6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80208ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80208ec:	fb09 770c 	mla	r7, r9, ip, r7
 80208f0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80208f4:	fb08 f80c 	mul.w	r8, r8, ip
 80208f8:	0a3f      	lsrs	r7, r7, #8
 80208fa:	fb02 8303 	mla	r3, r2, r3, r8
 80208fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020900:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020904:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802090a:	fb00 330a 	mla	r3, r0, sl, r3
 802090e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020912:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020914:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802091a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802091e:	434b      	muls	r3, r1
 8020920:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020924:	1c59      	adds	r1, r3, #1
 8020926:	ea47 070c 	orr.w	r7, r7, ip
 802092a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802092e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020932:	b2fa      	uxtb	r2, r7
 8020934:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020938:	fb12 f200 	smulbb	r2, r2, r0
 802093c:	b2c9      	uxtb	r1, r1
 802093e:	fb03 2301 	mla	r3, r3, r1, r2
 8020942:	b29b      	uxth	r3, r3
 8020944:	1c5a      	adds	r2, r3, #1
 8020946:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802094a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802094e:	fb12 f201 	smulbb	r2, r2, r1
 8020952:	121b      	asrs	r3, r3, #8
 8020954:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020958:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802095c:	0c3f      	lsrs	r7, r7, #16
 802095e:	fb03 2300 	mla	r3, r3, r0, r2
 8020962:	b29b      	uxth	r3, r3
 8020964:	1c5a      	adds	r2, r3, #1
 8020966:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802096a:	121b      	asrs	r3, r3, #8
 802096c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020970:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020974:	fb13 f101 	smulbb	r1, r3, r1
 8020978:	fb07 1700 	mla	r7, r7, r0, r1
 802097c:	b2bf      	uxth	r7, r7
 802097e:	1c7b      	adds	r3, r7, #1
 8020980:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020984:	123f      	asrs	r7, r7, #8
 8020986:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802098a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802098c:	f10e 0e03 	add.w	lr, lr, #3
 8020990:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020992:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020996:	441a      	add	r2, r3
 8020998:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802099a:	9229      	str	r2, [sp, #164]	; 0xa4
 802099c:	441d      	add	r5, r3
 802099e:	e645      	b.n	802062c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80209a0:	2800      	cmp	r0, #0
 80209a2:	f43f aee6 	beq.w	8020772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80209a6:	5c79      	ldrb	r1, [r7, r1]
 80209a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80209ac:	910b      	str	r1, [sp, #44]	; 0x2c
 80209ae:	0e09      	lsrs	r1, r1, #24
 80209b0:	9114      	str	r1, [sp, #80]	; 0x50
 80209b2:	e6de      	b.n	8020772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80209b4:	b01f      	add	sp, #124	; 0x7c
 80209b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080209ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80209ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209be:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80209c2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80209c6:	2d00      	cmp	r5, #0
 80209c8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80209cc:	fb05 700e 	mla	r0, r5, lr, r7
 80209d0:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80209d4:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80209d8:	eb02 0800 	add.w	r8, r2, r0
 80209dc:	f2c0 8105 	blt.w	8020bea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80209e0:	45a9      	cmp	r9, r5
 80209e2:	f340 8102 	ble.w	8020bea <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80209e6:	2f00      	cmp	r7, #0
 80209e8:	f2c0 80fd 	blt.w	8020be6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80209ec:	45be      	cmp	lr, r7
 80209ee:	f340 80fa 	ble.w	8020be6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80209f2:	5c12      	ldrb	r2, [r2, r0]
 80209f4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80209f8:	1c7a      	adds	r2, r7, #1
 80209fa:	f100 80f9 	bmi.w	8020bf0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80209fe:	4596      	cmp	lr, r2
 8020a00:	f340 80f6 	ble.w	8020bf0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020a04:	2c00      	cmp	r4, #0
 8020a06:	f000 80f5 	beq.w	8020bf4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8020a0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020a0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020a12:	3501      	adds	r5, #1
 8020a14:	f100 80f2 	bmi.w	8020bfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020a18:	45a9      	cmp	r9, r5
 8020a1a:	f340 80ef 	ble.w	8020bfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020a1e:	f1bc 0f00 	cmp.w	ip, #0
 8020a22:	f000 80ee 	beq.w	8020c02 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8020a26:	2f00      	cmp	r7, #0
 8020a28:	f2c0 80e6 	blt.w	8020bf8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020a2c:	45be      	cmp	lr, r7
 8020a2e:	f340 80e3 	ble.w	8020bf8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020a32:	f818 200e 	ldrb.w	r2, [r8, lr]
 8020a36:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020a3a:	3701      	adds	r7, #1
 8020a3c:	f100 80e4 	bmi.w	8020c08 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8020a40:	45be      	cmp	lr, r7
 8020a42:	f340 80e1 	ble.w	8020c08 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8020a46:	2c00      	cmp	r4, #0
 8020a48:	f000 80e0 	beq.w	8020c0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8020a4c:	44c6      	add	lr, r8
 8020a4e:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020a56:	b2a3      	uxth	r3, r4
 8020a58:	fa1f fc8c 	uxth.w	ip, ip
 8020a5c:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020a60:	fb0c fe03 	mul.w	lr, ip, r3
 8020a64:	011b      	lsls	r3, r3, #4
 8020a66:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020a6a:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8020a6e:	eba3 070e 	sub.w	r7, r3, lr
 8020a72:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8020a76:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020a7a:	fa1f f48c 	uxth.w	r4, ip
 8020a7e:	b2bf      	uxth	r7, r7
 8020a80:	1b1b      	subs	r3, r3, r4
 8020a82:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020a86:	fb07 fc0a 	mul.w	ip, r7, sl
 8020a8a:	b29b      	uxth	r3, r3
 8020a8c:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020a90:	9300      	str	r3, [sp, #0]
 8020a92:	fb04 cc09 	mla	ip, r4, r9, ip
 8020a96:	fb0e cc08 	mla	ip, lr, r8, ip
 8020a9a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020a9e:	9301      	str	r3, [sp, #4]
 8020aa0:	2b00      	cmp	r3, #0
 8020aa2:	f000 809d 	beq.w	8020be0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8020aa6:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8020aaa:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020aae:	fb0b fc0c 	mul.w	ip, fp, ip
 8020ab2:	fb0b f606 	mul.w	r6, fp, r6
 8020ab6:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020aba:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8020abe:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8020ac2:	44dc      	add	ip, fp
 8020ac4:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8020ac8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020acc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ad0:	fb0a fb0b 	mul.w	fp, sl, fp
 8020ad4:	fb0a fa00 	mul.w	sl, sl, r0
 8020ad8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8020adc:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8020ae0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8020ae4:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020ae8:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020aec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020af0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020af4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020af8:	0a36      	lsrs	r6, r6, #8
 8020afa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020afe:	44dc      	add	ip, fp
 8020b00:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020b04:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8020b08:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8020b0c:	fb09 fb0b 	mul.w	fp, r9, fp
 8020b10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020b14:	fb09 f905 	mul.w	r9, r9, r5
 8020b18:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020b1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020b20:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8020b24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020b28:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020b2c:	fb0c fc07 	mul.w	ip, ip, r7
 8020b30:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020b34:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8020b38:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020b3c:	4458      	add	r0, fp
 8020b3e:	fb08 f505 	mul.w	r5, r8, r5
 8020b42:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020b46:	fb08 f802 	mul.w	r8, r8, r2
 8020b4a:	0a00      	lsrs	r0, r0, #8
 8020b4c:	0a2a      	lsrs	r2, r5, #8
 8020b4e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8020b52:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8020b56:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020b5a:	4415      	add	r5, r2
 8020b5c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020b60:	0a2d      	lsrs	r5, r5, #8
 8020b62:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020b66:	9a00      	ldr	r2, [sp, #0]
 8020b68:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020b6c:	fb03 cc02 	mla	ip, r3, r2, ip
 8020b70:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020b74:	9b01      	ldr	r3, [sp, #4]
 8020b76:	fb05 c50e 	mla	r5, r5, lr, ip
 8020b7a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8020b7e:	43db      	mvns	r3, r3
 8020b80:	fb00 5004 	mla	r0, r0, r4, r5
 8020b84:	b2db      	uxtb	r3, r3
 8020b86:	0a00      	lsrs	r0, r0, #8
 8020b88:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8020b8c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8020b90:	4378      	muls	r0, r7
 8020b92:	fb02 0006 	mla	r0, r2, r6, r0
 8020b96:	780a      	ldrb	r2, [r1, #0]
 8020b98:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020b9c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8020ba0:	fb04 e000 	mla	r0, r4, r0, lr
 8020ba4:	fb02 f403 	mul.w	r4, r2, r3
 8020ba8:	0a00      	lsrs	r0, r0, #8
 8020baa:	1c62      	adds	r2, r4, #1
 8020bac:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020bb0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020bb4:	4328      	orrs	r0, r5
 8020bb6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020bba:	700a      	strb	r2, [r1, #0]
 8020bbc:	784a      	ldrb	r2, [r1, #1]
 8020bbe:	435a      	muls	r2, r3
 8020bc0:	1c54      	adds	r4, r2, #1
 8020bc2:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020bc6:	0a02      	lsrs	r2, r0, #8
 8020bc8:	0c00      	lsrs	r0, r0, #16
 8020bca:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020bce:	704a      	strb	r2, [r1, #1]
 8020bd0:	788a      	ldrb	r2, [r1, #2]
 8020bd2:	4353      	muls	r3, r2
 8020bd4:	1c5a      	adds	r2, r3, #1
 8020bd6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020bda:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020bde:	7088      	strb	r0, [r1, #2]
 8020be0:	b003      	add	sp, #12
 8020be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020be6:	2600      	movs	r6, #0
 8020be8:	e706      	b.n	80209f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8020bea:	2000      	movs	r0, #0
 8020bec:	4606      	mov	r6, r0
 8020bee:	e710      	b.n	8020a12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020bf0:	2000      	movs	r0, #0
 8020bf2:	e70e      	b.n	8020a12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020bf4:	4620      	mov	r0, r4
 8020bf6:	e70c      	b.n	8020a12 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020bf8:	2500      	movs	r5, #0
 8020bfa:	e71e      	b.n	8020a3a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8020bfc:	2200      	movs	r2, #0
 8020bfe:	4615      	mov	r5, r2
 8020c00:	e729      	b.n	8020a56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020c02:	4662      	mov	r2, ip
 8020c04:	4665      	mov	r5, ip
 8020c06:	e726      	b.n	8020a56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020c08:	2200      	movs	r2, #0
 8020c0a:	e724      	b.n	8020a56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020c0c:	4622      	mov	r2, r4
 8020c0e:	e722      	b.n	8020a56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08020c10 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c14:	b09b      	sub	sp, #108	; 0x6c
 8020c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020c1a:	9218      	str	r2, [sp, #96]	; 0x60
 8020c1c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020c1e:	9019      	str	r0, [sp, #100]	; 0x64
 8020c20:	9116      	str	r1, [sp, #88]	; 0x58
 8020c22:	6850      	ldr	r0, [r2, #4]
 8020c24:	9307      	str	r3, [sp, #28]
 8020c26:	6812      	ldr	r2, [r2, #0]
 8020c28:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8020c2a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020c2e:	fb00 1303 	mla	r3, r0, r3, r1
 8020c32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020c36:	18d3      	adds	r3, r2, r3
 8020c38:	930a      	str	r3, [sp, #40]	; 0x28
 8020c3a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8020c40:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c42:	685e      	ldr	r6, [r3, #4]
 8020c44:	3604      	adds	r6, #4
 8020c46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	dc03      	bgt.n	8020c54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020c4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	f340 834f 	ble.w	80212f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020c54:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020c5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020c5e:	1e48      	subs	r0, r1, #1
 8020c60:	1e57      	subs	r7, r2, #1
 8020c62:	9b07      	ldr	r3, [sp, #28]
 8020c64:	2b00      	cmp	r3, #0
 8020c66:	f340 8178 	ble.w	8020f5a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020c6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020c6c:	142b      	asrs	r3, r5, #16
 8020c6e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020c72:	d406      	bmi.n	8020c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020c74:	4584      	cmp	ip, r0
 8020c76:	da04      	bge.n	8020c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	db02      	blt.n	8020c82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020c7c:	42bb      	cmp	r3, r7
 8020c7e:	f2c0 816d 	blt.w	8020f5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020c82:	f11c 0c01 	adds.w	ip, ip, #1
 8020c86:	f100 815b 	bmi.w	8020f40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020c8a:	4561      	cmp	r1, ip
 8020c8c:	f2c0 8158 	blt.w	8020f40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020c90:	3301      	adds	r3, #1
 8020c92:	f100 8155 	bmi.w	8020f40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020c96:	429a      	cmp	r2, r3
 8020c98:	f2c0 8152 	blt.w	8020f40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020c9c:	9b07      	ldr	r3, [sp, #28]
 8020c9e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8020ca0:	9317      	str	r3, [sp, #92]	; 0x5c
 8020ca2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	f340 8178 	ble.w	8020f9a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020caa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020cac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020cb0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020cb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020cb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020cba:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020cbe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8020cc0:	141b      	asrs	r3, r3, #16
 8020cc2:	f100 81ba 	bmi.w	802103a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020cc6:	f101 38ff 	add.w	r8, r1, #4294967295
 8020cca:	4543      	cmp	r3, r8
 8020ccc:	f280 81b5 	bge.w	802103a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020cd0:	f1bc 0f00 	cmp.w	ip, #0
 8020cd4:	f2c0 81b1 	blt.w	802103a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020cd8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020cdc:	45c4      	cmp	ip, r8
 8020cde:	f280 81ac 	bge.w	802103a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020ce2:	b209      	sxth	r1, r1
 8020ce4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8020ce6:	fb0c 3301 	mla	r3, ip, r1, r3
 8020cea:	eb04 0803 	add.w	r8, r4, r3
 8020cee:	5ce3      	ldrb	r3, [r4, r3]
 8020cf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020cf4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020cf8:	2a00      	cmp	r2, #0
 8020cfa:	f000 8193 	beq.w	8021024 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8020cfe:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020d02:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020d06:	940b      	str	r4, [sp, #44]	; 0x2c
 8020d08:	0e24      	lsrs	r4, r4, #24
 8020d0a:	9412      	str	r4, [sp, #72]	; 0x48
 8020d0c:	b178      	cbz	r0, 8020d2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020d0e:	eb08 0c01 	add.w	ip, r8, r1
 8020d12:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020d16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d1a:	9108      	str	r1, [sp, #32]
 8020d1c:	0e09      	lsrs	r1, r1, #24
 8020d1e:	9110      	str	r1, [sp, #64]	; 0x40
 8020d20:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020d24:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020d28:	910c      	str	r1, [sp, #48]	; 0x30
 8020d2a:	0e09      	lsrs	r1, r1, #24
 8020d2c:	9113      	str	r1, [sp, #76]	; 0x4c
 8020d2e:	b292      	uxth	r2, r2
 8020d30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8020d32:	b280      	uxth	r0, r0
 8020d34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020d36:	fb02 f900 	mul.w	r9, r2, r0
 8020d3a:	0112      	lsls	r2, r2, #4
 8020d3c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020d40:	eba2 0809 	sub.w	r8, r2, r9
 8020d44:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8020d48:	b280      	uxth	r0, r0
 8020d4a:	fa1f f888 	uxth.w	r8, r8
 8020d4e:	1a12      	subs	r2, r2, r0
 8020d50:	fb08 f101 	mul.w	r1, r8, r1
 8020d54:	b292      	uxth	r2, r2
 8020d56:	fb02 110e 	mla	r1, r2, lr, r1
 8020d5a:	fb00 1104 	mla	r1, r0, r4, r1
 8020d5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020d60:	fb09 1104 	mla	r1, r9, r4, r1
 8020d64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020d68:	2900      	cmp	r1, #0
 8020d6a:	f000 80de 	beq.w	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020d6e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8020d72:	d01b      	beq.n	8020dac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8020d74:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8020d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020d7c:	fb0e fa0a 	mul.w	sl, lr, sl
 8020d80:	fb0e fe03 	mul.w	lr, lr, r3
 8020d84:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020d88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8020d8c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8020d90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020d94:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020d98:	4453      	add	r3, sl
 8020d9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020d9e:	0a1b      	lsrs	r3, r3, #8
 8020da0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020da4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8020da8:	ea43 030c 	orr.w	r3, r3, ip
 8020dac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020dae:	2cff      	cmp	r4, #255	; 0xff
 8020db0:	d021      	beq.n	8020df6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020db2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020db4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020db8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020dba:	fb04 fb0b 	mul.w	fp, r4, fp
 8020dbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020dc0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020dc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8020dc6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020dca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020dce:	fb04 fa0a 	mul.w	sl, r4, sl
 8020dd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020dd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020dda:	44de      	add	lr, fp
 8020ddc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020de0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020df0:	ea4e 040a 	orr.w	r4, lr, sl
 8020df4:	940b      	str	r4, [sp, #44]	; 0x2c
 8020df6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020df8:	2cff      	cmp	r4, #255	; 0xff
 8020dfa:	d021      	beq.n	8020e40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020dfc:	9c08      	ldr	r4, [sp, #32]
 8020dfe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020e02:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e04:	fb04 fb0b 	mul.w	fp, r4, fp
 8020e08:	9c08      	ldr	r4, [sp, #32]
 8020e0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8020e10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020e14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e18:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020e20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020e24:	44de      	add	lr, fp
 8020e26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020e2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020e36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e3a:	ea4e 040a 	orr.w	r4, lr, sl
 8020e3e:	9408      	str	r4, [sp, #32]
 8020e40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e42:	2cff      	cmp	r4, #255	; 0xff
 8020e44:	d021      	beq.n	8020e8a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020e46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020e48:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8020e4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8020e52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020e54:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8020e58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020e5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020e5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020e62:	fb04 fa0a 	mul.w	sl, r4, sl
 8020e66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020e6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020e6e:	44de      	add	lr, fp
 8020e70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020e74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020e78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020e7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020e80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020e84:	ea4e 040a 	orr.w	r4, lr, sl
 8020e88:	940c      	str	r4, [sp, #48]	; 0x30
 8020e8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020e8c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8020e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8020e94:	43c9      	mvns	r1, r1
 8020e96:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020e9a:	9c08      	ldr	r4, [sp, #32]
 8020e9c:	b2c9      	uxtb	r1, r1
 8020e9e:	fb08 fc0c 	mul.w	ip, r8, ip
 8020ea2:	fb02 cc0e 	mla	ip, r2, lr, ip
 8020ea6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020eaa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020eac:	fb00 cc0e 	mla	ip, r0, lr, ip
 8020eb0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8020eb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020eb6:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020eba:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8020ebe:	fb08 f80e 	mul.w	r8, r8, lr
 8020ec2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ec6:	fb02 8303 	mla	r3, r2, r3, r8
 8020eca:	9a08      	ldr	r2, [sp, #32]
 8020ecc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020ed0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ed6:	fb00 330a 	mla	r3, r0, sl, r3
 8020eda:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8020ede:	fb09 3900 	mla	r9, r9, r0, r3
 8020ee2:	783b      	ldrb	r3, [r7, #0]
 8020ee4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020ee8:	fb03 f201 	mul.w	r2, r3, r1
 8020eec:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020ef0:	1c53      	adds	r3, r2, #1
 8020ef2:	ea4c 0c09 	orr.w	ip, ip, r9
 8020ef6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020efa:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8020efe:	703b      	strb	r3, [r7, #0]
 8020f00:	787b      	ldrb	r3, [r7, #1]
 8020f02:	434b      	muls	r3, r1
 8020f04:	1c5a      	adds	r2, r3, #1
 8020f06:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020f0a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8020f0e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020f12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020f16:	707b      	strb	r3, [r7, #1]
 8020f18:	78bb      	ldrb	r3, [r7, #2]
 8020f1a:	4359      	muls	r1, r3
 8020f1c:	1c4b      	adds	r3, r1, #1
 8020f1e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020f22:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020f26:	f887 c002 	strb.w	ip, [r7, #2]
 8020f2a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020f2c:	3703      	adds	r7, #3
 8020f2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020f30:	441a      	add	r2, r3
 8020f32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f34:	441d      	add	r5, r3
 8020f36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8020f38:	9225      	str	r2, [sp, #148]	; 0x94
 8020f3a:	3b01      	subs	r3, #1
 8020f3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8020f3e:	e6b0      	b.n	8020ca2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020f40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020f42:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020f44:	441c      	add	r4, r3
 8020f46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020f48:	441d      	add	r5, r3
 8020f4a:	9b07      	ldr	r3, [sp, #28]
 8020f4c:	9425      	str	r4, [sp, #148]	; 0x94
 8020f4e:	3b01      	subs	r3, #1
 8020f50:	9307      	str	r3, [sp, #28]
 8020f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f54:	3303      	adds	r3, #3
 8020f56:	930a      	str	r3, [sp, #40]	; 0x28
 8020f58:	e683      	b.n	8020c62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8020f5a:	d026      	beq.n	8020faa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8020f5c:	9b07      	ldr	r3, [sp, #28]
 8020f5e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8020f60:	3b01      	subs	r3, #1
 8020f62:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8020f64:	fb00 4003 	mla	r0, r0, r3, r4
 8020f68:	1400      	asrs	r0, r0, #16
 8020f6a:	f53f ae97 	bmi.w	8020c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020f6e:	3901      	subs	r1, #1
 8020f70:	4288      	cmp	r0, r1
 8020f72:	f6bf ae93 	bge.w	8020c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020f76:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020f78:	fb01 5303 	mla	r3, r1, r3, r5
 8020f7c:	141b      	asrs	r3, r3, #16
 8020f7e:	f53f ae8d 	bmi.w	8020c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020f82:	3a01      	subs	r2, #1
 8020f84:	4293      	cmp	r3, r2
 8020f86:	f6bf ae89 	bge.w	8020c9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8020f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f8c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8020f90:	f103 0e03 	add.w	lr, r3, #3
 8020f94:	f1bb 0f00 	cmp.w	fp, #0
 8020f98:	dc6d      	bgt.n	8021076 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8020f9a:	9b07      	ldr	r3, [sp, #28]
 8020f9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fa2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020fa6:	4423      	add	r3, r4
 8020fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8020faa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020fac:	2b00      	cmp	r3, #0
 8020fae:	f340 81a0 	ble.w	80212f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020fb2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020fb6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020fb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020fbc:	eeb0 6a62 	vmov.f32	s12, s5
 8020fc0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020fc4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020fc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fcc:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8020fd0:	eeb0 6a43 	vmov.f32	s12, s6
 8020fd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020fd8:	ee16 5a10 	vmov	r5, s12
 8020fdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020fe0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020fe4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020fe8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020fec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ff0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020ff4:	ee12 2a90 	vmov	r2, s5
 8020ff8:	eef0 2a47 	vmov.f32	s5, s14
 8020ffc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021000:	ee13 2a10 	vmov	r2, s6
 8021004:	9327      	str	r3, [sp, #156]	; 0x9c
 8021006:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021008:	eeb0 3a67 	vmov.f32	s6, s15
 802100c:	fb92 f3f3 	sdiv	r3, r2, r3
 8021010:	9328      	str	r3, [sp, #160]	; 0xa0
 8021012:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021014:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021016:	3b01      	subs	r3, #1
 8021018:	9316      	str	r3, [sp, #88]	; 0x58
 802101a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802101c:	bf08      	it	eq
 802101e:	4613      	moveq	r3, r2
 8021020:	9307      	str	r3, [sp, #28]
 8021022:	e610      	b.n	8020c46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8021024:	2800      	cmp	r0, #0
 8021026:	f43f ae82 	beq.w	8020d2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802102a:	f818 1001 	ldrb.w	r1, [r8, r1]
 802102e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021032:	9108      	str	r1, [sp, #32]
 8021034:	0e09      	lsrs	r1, r1, #24
 8021036:	9110      	str	r1, [sp, #64]	; 0x40
 8021038:	e679      	b.n	8020d2e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 802103a:	f113 0801 	adds.w	r8, r3, #1
 802103e:	f53f af74 	bmi.w	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021042:	4541      	cmp	r1, r8
 8021044:	f6ff af71 	blt.w	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021048:	f11c 0801 	adds.w	r8, ip, #1
 802104c:	f53f af6d 	bmi.w	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021050:	45c6      	cmp	lr, r8
 8021052:	f6ff af6a 	blt.w	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021056:	b209      	sxth	r1, r1
 8021058:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802105c:	fa0f f38e 	sxth.w	r3, lr
 8021060:	9100      	str	r1, [sp, #0]
 8021062:	4639      	mov	r1, r7
 8021064:	9301      	str	r3, [sp, #4]
 8021066:	4633      	mov	r3, r6
 8021068:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802106c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802106e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021070:	f7ff fca3 	bl	80209ba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021074:	e759      	b.n	8020f2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021076:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8021078:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802107c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802107e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021082:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021084:	1427      	asrs	r7, r4, #16
 8021086:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8021088:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802108c:	142b      	asrs	r3, r5, #16
 802108e:	fb01 7303 	mla	r3, r1, r3, r7
 8021092:	18e7      	adds	r7, r4, r3
 8021094:	5ce3      	ldrb	r3, [r4, r3]
 8021096:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802109a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802109e:	2a00      	cmp	r2, #0
 80210a0:	f000 811d 	beq.w	80212de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 80210a4:	f897 8001 	ldrb.w	r8, [r7, #1]
 80210a8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80210ac:	940d      	str	r4, [sp, #52]	; 0x34
 80210ae:	0e24      	lsrs	r4, r4, #24
 80210b0:	9414      	str	r4, [sp, #80]	; 0x50
 80210b2:	b170      	cbz	r0, 80210d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80210b4:	eb07 0801 	add.w	r8, r7, r1
 80210b8:	5c79      	ldrb	r1, [r7, r1]
 80210ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80210be:	9109      	str	r1, [sp, #36]	; 0x24
 80210c0:	0e09      	lsrs	r1, r1, #24
 80210c2:	9111      	str	r1, [sp, #68]	; 0x44
 80210c4:	f898 1001 	ldrb.w	r1, [r8, #1]
 80210c8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80210cc:	910e      	str	r1, [sp, #56]	; 0x38
 80210ce:	0e09      	lsrs	r1, r1, #24
 80210d0:	9115      	str	r1, [sp, #84]	; 0x54
 80210d2:	b292      	uxth	r2, r2
 80210d4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80210d6:	b280      	uxth	r0, r0
 80210d8:	fb02 f900 	mul.w	r9, r2, r0
 80210dc:	0112      	lsls	r2, r2, #4
 80210de:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80210e2:	eba2 0809 	sub.w	r8, r2, r9
 80210e6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80210ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80210ec:	b280      	uxth	r0, r0
 80210ee:	fa1f f888 	uxth.w	r8, r8
 80210f2:	1a09      	subs	r1, r1, r0
 80210f4:	fb08 f202 	mul.w	r2, r8, r2
 80210f8:	b289      	uxth	r1, r1
 80210fa:	fb01 220c 	mla	r2, r1, ip, r2
 80210fe:	fb00 2204 	mla	r2, r0, r4, r2
 8021102:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021104:	fb09 2204 	mla	r2, r9, r4, r2
 8021108:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802110c:	2a00      	cmp	r2, #0
 802110e:	f000 80db 	beq.w	80212c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8021112:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021116:	d019      	beq.n	802114c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 8021118:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802111c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021120:	fb0c fa0a 	mul.w	sl, ip, sl
 8021124:	fb0c fc03 	mul.w	ip, ip, r3
 8021128:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802112c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021130:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8021134:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021138:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802113c:	4453      	add	r3, sl
 802113e:	0a3f      	lsrs	r7, r7, #8
 8021140:	0a1b      	lsrs	r3, r3, #8
 8021142:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021146:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802114a:	433b      	orrs	r3, r7
 802114c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802114e:	2cff      	cmp	r4, #255	; 0xff
 8021150:	d020      	beq.n	8021194 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021152:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021154:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021158:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802115a:	4367      	muls	r7, r4
 802115c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802115e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021162:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8021166:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021168:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802116c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021170:	fb04 fa0a 	mul.w	sl, r4, sl
 8021174:	44bc      	add	ip, r7
 8021176:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802117a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802117e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021182:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021186:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802118a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802118e:	ea4c 040a 	orr.w	r4, ip, sl
 8021192:	940d      	str	r4, [sp, #52]	; 0x34
 8021194:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8021196:	2cff      	cmp	r4, #255	; 0xff
 8021198:	d020      	beq.n	80211dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 802119a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802119c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80211a0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211a2:	4367      	muls	r7, r4
 80211a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80211a6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80211aa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80211ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80211b0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80211b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211b8:	fb04 fa0a 	mul.w	sl, r4, sl
 80211bc:	44bc      	add	ip, r7
 80211be:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80211c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80211c6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80211ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80211ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80211d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80211d6:	ea4c 040a 	orr.w	r4, ip, sl
 80211da:	9409      	str	r4, [sp, #36]	; 0x24
 80211dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80211de:	2cff      	cmp	r4, #255	; 0xff
 80211e0:	d020      	beq.n	8021224 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80211e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211e4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80211e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80211ea:	4367      	muls	r7, r4
 80211ec:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80211ee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80211f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80211f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80211f8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80211fc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021200:	fb04 fa0a 	mul.w	sl, r4, sl
 8021204:	44bc      	add	ip, r7
 8021206:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802120a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802120e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021212:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021216:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802121a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802121e:	ea4c 040a 	orr.w	r4, ip, sl
 8021222:	940e      	str	r4, [sp, #56]	; 0x38
 8021224:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021226:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802122a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802122e:	43d2      	mvns	r2, r2
 8021230:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8021234:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8021236:	b2d2      	uxtb	r2, r2
 8021238:	fb08 f707 	mul.w	r7, r8, r7
 802123c:	fb01 770c 	mla	r7, r1, ip, r7
 8021240:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021244:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8021246:	fb00 770c 	mla	r7, r0, ip, r7
 802124a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802124e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8021250:	fb09 770c 	mla	r7, r9, ip, r7
 8021254:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8021258:	fb08 f80c 	mul.w	r8, r8, ip
 802125c:	0a3f      	lsrs	r7, r7, #8
 802125e:	fb01 8303 	mla	r3, r1, r3, r8
 8021262:	9909      	ldr	r1, [sp, #36]	; 0x24
 8021264:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8021268:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802126c:	990e      	ldr	r1, [sp, #56]	; 0x38
 802126e:	fb00 330a 	mla	r3, r0, sl, r3
 8021272:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8021276:	fb09 3c0c 	mla	ip, r9, ip, r3
 802127a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 802127e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021282:	fb03 f102 	mul.w	r1, r3, r2
 8021286:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802128a:	1c4b      	adds	r3, r1, #1
 802128c:	ea47 070c 	orr.w	r7, r7, ip
 8021290:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021294:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8021298:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802129c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80212a0:	4353      	muls	r3, r2
 80212a2:	1c59      	adds	r1, r3, #1
 80212a4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80212a8:	0a3b      	lsrs	r3, r7, #8
 80212aa:	0c3f      	lsrs	r7, r7, #16
 80212ac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80212b0:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80212b4:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80212b8:	435a      	muls	r2, r3
 80212ba:	1c53      	adds	r3, r2, #1
 80212bc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 80212c0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80212c4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80212c8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80212ca:	f10e 0e03 	add.w	lr, lr, #3
 80212ce:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80212d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80212d4:	441a      	add	r2, r3
 80212d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212d8:	9225      	str	r2, [sp, #148]	; 0x94
 80212da:	441d      	add	r5, r3
 80212dc:	e65a      	b.n	8020f94 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80212de:	2800      	cmp	r0, #0
 80212e0:	f43f aef7 	beq.w	80210d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80212e4:	5c79      	ldrb	r1, [r7, r1]
 80212e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80212ea:	9109      	str	r1, [sp, #36]	; 0x24
 80212ec:	0e09      	lsrs	r1, r1, #24
 80212ee:	9111      	str	r1, [sp, #68]	; 0x44
 80212f0:	e6ef      	b.n	80210d2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80212f2:	b01b      	add	sp, #108	; 0x6c
 80212f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080212f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80212f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212fc:	b08d      	sub	sp, #52	; 0x34
 80212fe:	468b      	mov	fp, r1
 8021300:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8021304:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8021308:	fb0c 5703 	mla	r7, ip, r3, r5
 802130c:	f1bc 0f00 	cmp.w	ip, #0
 8021310:	910b      	str	r1, [sp, #44]	; 0x2c
 8021312:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021316:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 802131a:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 802131e:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8021322:	eb02 0607 	add.w	r6, r2, r7
 8021326:	f89b 4000 	ldrb.w	r4, [fp]
 802132a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 802132e:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8021332:	f2c0 80c1 	blt.w	80214b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8021336:	45e6      	cmp	lr, ip
 8021338:	f340 80be 	ble.w	80214b8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 802133c:	2d00      	cmp	r5, #0
 802133e:	f2c0 80b7 	blt.w	80214b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021342:	42ab      	cmp	r3, r5
 8021344:	f340 80b4 	ble.w	80214b0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021348:	5dd2      	ldrb	r2, [r2, r7]
 802134a:	9205      	str	r2, [sp, #20]
 802134c:	7872      	ldrb	r2, [r6, #1]
 802134e:	9206      	str	r2, [sp, #24]
 8021350:	78b2      	ldrb	r2, [r6, #2]
 8021352:	9207      	str	r2, [sp, #28]
 8021354:	1c6a      	adds	r2, r5, #1
 8021356:	f100 80b6 	bmi.w	80214c6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802135a:	4293      	cmp	r3, r2
 802135c:	f340 80b3 	ble.w	80214c6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021360:	f1b8 0f00 	cmp.w	r8, #0
 8021364:	f000 80af 	beq.w	80214c6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021368:	78f2      	ldrb	r2, [r6, #3]
 802136a:	9201      	str	r2, [sp, #4]
 802136c:	7932      	ldrb	r2, [r6, #4]
 802136e:	9202      	str	r2, [sp, #8]
 8021370:	7972      	ldrb	r2, [r6, #5]
 8021372:	9203      	str	r2, [sp, #12]
 8021374:	f11c 0c01 	adds.w	ip, ip, #1
 8021378:	f100 80ad 	bmi.w	80214d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802137c:	45e6      	cmp	lr, ip
 802137e:	f340 80aa 	ble.w	80214d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021382:	f1ba 0f00 	cmp.w	sl, #0
 8021386:	f000 80a6 	beq.w	80214d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802138a:	2d00      	cmp	r5, #0
 802138c:	f2c0 809f 	blt.w	80214ce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021390:	42ab      	cmp	r3, r5
 8021392:	f340 809c 	ble.w	80214ce <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021396:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802139a:	f816 9002 	ldrb.w	r9, [r6, r2]
 802139e:	2203      	movs	r2, #3
 80213a0:	fb03 6c02 	mla	ip, r3, r2, r6
 80213a4:	f89c 7001 	ldrb.w	r7, [ip, #1]
 80213a8:	f89c e002 	ldrb.w	lr, [ip, #2]
 80213ac:	9704      	str	r7, [sp, #16]
 80213ae:	3501      	adds	r5, #1
 80213b0:	f100 8098 	bmi.w	80214e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80213b4:	42ab      	cmp	r3, r5
 80213b6:	f340 8095 	ble.w	80214e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80213ba:	f1b8 0f00 	cmp.w	r8, #0
 80213be:	f000 8091 	beq.w	80214e4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 80213c2:	f04f 0c03 	mov.w	ip, #3
 80213c6:	fb13 c20c 	smlabb	r2, r3, ip, ip
 80213ca:	5cb5      	ldrb	r5, [r6, r2]
 80213cc:	fb03 620c 	mla	r2, r3, ip, r6
 80213d0:	fb03 630c 	mla	r3, r3, ip, r6
 80213d4:	7912      	ldrb	r2, [r2, #4]
 80213d6:	795e      	ldrb	r6, [r3, #5]
 80213d8:	fa1f f388 	uxth.w	r3, r8
 80213dc:	fa1f fc8a 	uxth.w	ip, sl
 80213e0:	fb03 f70c 	mul.w	r7, r3, ip
 80213e4:	011b      	lsls	r3, r3, #4
 80213e6:	9708      	str	r7, [sp, #32]
 80213e8:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80213ec:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 80213f0:	1bdb      	subs	r3, r3, r7
 80213f2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 80213f6:	fa1f fc8c 	uxth.w	ip, ip
 80213fa:	b29b      	uxth	r3, r3
 80213fc:	9709      	str	r7, [sp, #36]	; 0x24
 80213fe:	ebaa 0a0c 	sub.w	sl, sl, ip
 8021402:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8021404:	930a      	str	r3, [sp, #40]	; 0x28
 8021406:	fa1f fa8a 	uxth.w	sl, sl
 802140a:	ea6f 0807 	mvn.w	r8, r7
 802140e:	9f01      	ldr	r7, [sp, #4]
 8021410:	435f      	muls	r7, r3
 8021412:	9b05      	ldr	r3, [sp, #20]
 8021414:	fa5f f888 	uxtb.w	r8, r8
 8021418:	fb0a 7703 	mla	r7, sl, r3, r7
 802141c:	9b08      	ldr	r3, [sp, #32]
 802141e:	fb14 f408 	smulbb	r4, r4, r8
 8021422:	fb0c 7709 	mla	r7, ip, r9, r7
 8021426:	fb10 f008 	smulbb	r0, r0, r8
 802142a:	fb11 f108 	smulbb	r1, r1, r8
 802142e:	fb03 7705 	mla	r7, r3, r5, r7
 8021432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021434:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8021438:	fb07 4703 	mla	r7, r7, r3, r4
 802143c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802143e:	b2bf      	uxth	r7, r7
 8021440:	1c7c      	adds	r4, r7, #1
 8021442:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8021446:	1224      	asrs	r4, r4, #8
 8021448:	f88b 4000 	strb.w	r4, [fp]
 802144c:	9c02      	ldr	r4, [sp, #8]
 802144e:	435c      	muls	r4, r3
 8021450:	9b06      	ldr	r3, [sp, #24]
 8021452:	fb0a 4403 	mla	r4, sl, r3, r4
 8021456:	9b04      	ldr	r3, [sp, #16]
 8021458:	fb0c 4403 	mla	r4, ip, r3, r4
 802145c:	9b08      	ldr	r3, [sp, #32]
 802145e:	fb03 4402 	mla	r4, r3, r2, r4
 8021462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021464:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021466:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802146a:	fb04 0403 	mla	r4, r4, r3, r0
 802146e:	9b03      	ldr	r3, [sp, #12]
 8021470:	435a      	muls	r2, r3
 8021472:	b2a4      	uxth	r4, r4
 8021474:	4613      	mov	r3, r2
 8021476:	9a07      	ldr	r2, [sp, #28]
 8021478:	1c60      	adds	r0, r4, #1
 802147a:	fb0a 3a02 	mla	sl, sl, r2, r3
 802147e:	9b08      	ldr	r3, [sp, #32]
 8021480:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8021484:	fb0c ac0e 	mla	ip, ip, lr, sl
 8021488:	1224      	asrs	r4, r4, #8
 802148a:	fb03 c606 	mla	r6, r3, r6, ip
 802148e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021490:	f88b 4001 	strb.w	r4, [fp, #1]
 8021494:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021498:	fb06 1103 	mla	r1, r6, r3, r1
 802149c:	b289      	uxth	r1, r1
 802149e:	1c4e      	adds	r6, r1, #1
 80214a0:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 80214a4:	1209      	asrs	r1, r1, #8
 80214a6:	f88b 1002 	strb.w	r1, [fp, #2]
 80214aa:	b00d      	add	sp, #52	; 0x34
 80214ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80214b4:	9405      	str	r4, [sp, #20]
 80214b6:	e74d      	b.n	8021354 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 80214b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80214bc:	9401      	str	r4, [sp, #4]
 80214be:	9405      	str	r4, [sp, #20]
 80214c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80214c4:	e756      	b.n	8021374 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80214c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80214ca:	9401      	str	r4, [sp, #4]
 80214cc:	e752      	b.n	8021374 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 80214ce:	468e      	mov	lr, r1
 80214d0:	9004      	str	r0, [sp, #16]
 80214d2:	46a1      	mov	r9, r4
 80214d4:	e76b      	b.n	80213ae <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 80214d6:	460e      	mov	r6, r1
 80214d8:	4602      	mov	r2, r0
 80214da:	4625      	mov	r5, r4
 80214dc:	468e      	mov	lr, r1
 80214de:	9004      	str	r0, [sp, #16]
 80214e0:	46a1      	mov	r9, r4
 80214e2:	e779      	b.n	80213d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80214e4:	460e      	mov	r6, r1
 80214e6:	4602      	mov	r2, r0
 80214e8:	4625      	mov	r5, r4
 80214ea:	e775      	b.n	80213d8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080214ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80214ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f0:	b09f      	sub	sp, #124	; 0x7c
 80214f2:	920e      	str	r2, [sp, #56]	; 0x38
 80214f4:	9307      	str	r3, [sp, #28]
 80214f6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80214f8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80214fc:	901d      	str	r0, [sp, #116]	; 0x74
 80214fe:	930c      	str	r3, [sp, #48]	; 0x30
 8021500:	6850      	ldr	r0, [r2, #4]
 8021502:	910b      	str	r1, [sp, #44]	; 0x2c
 8021504:	6812      	ldr	r2, [r2, #0]
 8021506:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 802150a:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 802150e:	fb00 1303 	mla	r3, r0, r3, r1
 8021512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021516:	18d3      	adds	r3, r2, r3
 8021518:	9308      	str	r3, [sp, #32]
 802151a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802151c:	681b      	ldr	r3, [r3, #0]
 802151e:	930a      	str	r3, [sp, #40]	; 0x28
 8021520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021522:	43db      	mvns	r3, r3
 8021524:	b2db      	uxtb	r3, r3
 8021526:	9309      	str	r3, [sp, #36]	; 0x24
 8021528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802152a:	2b00      	cmp	r3, #0
 802152c:	dc03      	bgt.n	8021536 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802152e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021530:	2b00      	cmp	r3, #0
 8021532:	f340 81f5 	ble.w	8021920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021536:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021538:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802153c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021540:	1e48      	subs	r0, r1, #1
 8021542:	1e54      	subs	r4, r2, #1
 8021544:	9b07      	ldr	r3, [sp, #28]
 8021546:	2b00      	cmp	r3, #0
 8021548:	f340 80d5 	ble.w	80216f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802154c:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021550:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021554:	d406      	bmi.n	8021564 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021556:	4285      	cmp	r5, r0
 8021558:	da04      	bge.n	8021564 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802155a:	2b00      	cmp	r3, #0
 802155c:	db02      	blt.n	8021564 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802155e:	42a3      	cmp	r3, r4
 8021560:	f2c0 80ca 	blt.w	80216f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021564:	3501      	adds	r5, #1
 8021566:	f100 80bb 	bmi.w	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802156a:	42a9      	cmp	r1, r5
 802156c:	f2c0 80b8 	blt.w	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021570:	3301      	adds	r3, #1
 8021572:	f100 80b5 	bmi.w	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021576:	429a      	cmp	r2, r3
 8021578:	f2c0 80b2 	blt.w	80216e0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802157c:	9b07      	ldr	r3, [sp, #28]
 802157e:	9d08      	ldr	r5, [sp, #32]
 8021580:	930d      	str	r3, [sp, #52]	; 0x34
 8021582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021584:	2b00      	cmp	r3, #0
 8021586:	f340 80d6 	ble.w	8021736 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 802158a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 802158c:	ea4f 4428 	mov.w	r4, r8, asr #16
 8021590:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8021592:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021596:	68c6      	ldr	r6, [r0, #12]
 8021598:	ea5f 402a 	movs.w	r0, sl, asr #16
 802159c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 80215a0:	689b      	ldr	r3, [r3, #8]
 80215a2:	f100 810f 	bmi.w	80217c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80215a6:	1e5f      	subs	r7, r3, #1
 80215a8:	42b8      	cmp	r0, r7
 80215aa:	f280 810b 	bge.w	80217c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80215ae:	2c00      	cmp	r4, #0
 80215b0:	f2c0 8108 	blt.w	80217c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80215b4:	1e77      	subs	r7, r6, #1
 80215b6:	42bc      	cmp	r4, r7
 80215b8:	f280 8104 	bge.w	80217c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80215bc:	b21b      	sxth	r3, r3
 80215be:	fb04 0003 	mla	r0, r4, r3, r0
 80215c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80215c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80215c8:	1826      	adds	r6, r4, r0
 80215ca:	5c24      	ldrb	r4, [r4, r0]
 80215cc:	78b7      	ldrb	r7, [r6, #2]
 80215ce:	7870      	ldrb	r0, [r6, #1]
 80215d0:	970f      	str	r7, [sp, #60]	; 0x3c
 80215d2:	7977      	ldrb	r7, [r6, #5]
 80215d4:	f896 e003 	ldrb.w	lr, [r6, #3]
 80215d8:	f896 c004 	ldrb.w	ip, [r6, #4]
 80215dc:	9710      	str	r7, [sp, #64]	; 0x40
 80215de:	b1c9      	cbz	r1, 8021614 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80215e0:	f04f 0b03 	mov.w	fp, #3
 80215e4:	f06f 0904 	mvn.w	r9, #4
 80215e8:	3605      	adds	r6, #5
 80215ea:	fb13 930b 	smlabb	r3, r3, fp, r9
 80215ee:	eb06 0b03 	add.w	fp, r6, r3
 80215f2:	5cf3      	ldrb	r3, [r6, r3]
 80215f4:	9311      	str	r3, [sp, #68]	; 0x44
 80215f6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80215fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80215fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021600:	9315      	str	r3, [sp, #84]	; 0x54
 8021602:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8021606:	9312      	str	r3, [sp, #72]	; 0x48
 8021608:	f89b 3004 	ldrb.w	r3, [fp, #4]
 802160c:	9314      	str	r3, [sp, #80]	; 0x50
 802160e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8021612:	9316      	str	r3, [sp, #88]	; 0x58
 8021614:	b292      	uxth	r2, r2
 8021616:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8021618:	b289      	uxth	r1, r1
 802161a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 802161e:	fb02 f601 	mul.w	r6, r2, r1
 8021622:	0112      	lsls	r2, r2, #4
 8021624:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8021628:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 802162c:	1b92      	subs	r2, r2, r6
 802162e:	b289      	uxth	r1, r1
 8021630:	b292      	uxth	r2, r2
 8021632:	eba9 0901 	sub.w	r9, r9, r1
 8021636:	fb02 fe0e 	mul.w	lr, r2, lr
 802163a:	fa1f f989 	uxth.w	r9, r9
 802163e:	fb02 fc0c 	mul.w	ip, r2, ip
 8021642:	fb09 e404 	mla	r4, r9, r4, lr
 8021646:	f895 e000 	ldrb.w	lr, [r5]
 802164a:	fb09 c000 	mla	r0, r9, r0, ip
 802164e:	fb01 4407 	mla	r4, r1, r7, r4
 8021652:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8021654:	fb06 4407 	mla	r4, r6, r7, r4
 8021658:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802165a:	fb1e fe07 	smulbb	lr, lr, r7
 802165e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021662:	fb04 e403 	mla	r4, r4, r3, lr
 8021666:	b2a4      	uxth	r4, r4
 8021668:	f104 0e01 	add.w	lr, r4, #1
 802166c:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8021670:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021672:	fb01 0004 	mla	r0, r1, r4, r0
 8021676:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021678:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802167c:	fb06 0004 	mla	r0, r6, r4, r0
 8021680:	786c      	ldrb	r4, [r5, #1]
 8021682:	f885 e000 	strb.w	lr, [r5]
 8021686:	fb14 f407 	smulbb	r4, r4, r7
 802168a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802168e:	fb00 4003 	mla	r0, r0, r3, r4
 8021692:	b280      	uxth	r0, r0
 8021694:	1c44      	adds	r4, r0, #1
 8021696:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802169a:	1200      	asrs	r0, r0, #8
 802169c:	7068      	strb	r0, [r5, #1]
 802169e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80216a0:	4342      	muls	r2, r0
 80216a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80216a4:	fb09 2200 	mla	r2, r9, r0, r2
 80216a8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80216aa:	fb01 2100 	mla	r1, r1, r0, r2
 80216ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80216b0:	fb06 1602 	mla	r6, r6, r2, r1
 80216b4:	78a9      	ldrb	r1, [r5, #2]
 80216b6:	fb11 f107 	smulbb	r1, r1, r7
 80216ba:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80216be:	fb06 1303 	mla	r3, r6, r3, r1
 80216c2:	b29b      	uxth	r3, r3
 80216c4:	1c5e      	adds	r6, r3, #1
 80216c6:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 80216ca:	121b      	asrs	r3, r3, #8
 80216cc:	70ab      	strb	r3, [r5, #2]
 80216ce:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80216d0:	3503      	adds	r5, #3
 80216d2:	449a      	add	sl, r3
 80216d4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80216d6:	4498      	add	r8, r3
 80216d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216da:	3b01      	subs	r3, #1
 80216dc:	930d      	str	r3, [sp, #52]	; 0x34
 80216de:	e750      	b.n	8021582 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80216e0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80216e2:	449a      	add	sl, r3
 80216e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80216e6:	4498      	add	r8, r3
 80216e8:	9b07      	ldr	r3, [sp, #28]
 80216ea:	3b01      	subs	r3, #1
 80216ec:	9307      	str	r3, [sp, #28]
 80216ee:	9b08      	ldr	r3, [sp, #32]
 80216f0:	3303      	adds	r3, #3
 80216f2:	9308      	str	r3, [sp, #32]
 80216f4:	e726      	b.n	8021544 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80216f6:	d026      	beq.n	8021746 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80216f8:	9b07      	ldr	r3, [sp, #28]
 80216fa:	982b      	ldr	r0, [sp, #172]	; 0xac
 80216fc:	3b01      	subs	r3, #1
 80216fe:	fb00 a003 	mla	r0, r0, r3, sl
 8021702:	1400      	asrs	r0, r0, #16
 8021704:	f53f af3a 	bmi.w	802157c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021708:	3901      	subs	r1, #1
 802170a:	4288      	cmp	r0, r1
 802170c:	f6bf af36 	bge.w	802157c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021710:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021712:	fb01 8303 	mla	r3, r1, r3, r8
 8021716:	141b      	asrs	r3, r3, #16
 8021718:	f53f af30 	bmi.w	802157c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802171c:	3a01      	subs	r2, #1
 802171e:	4293      	cmp	r3, r2
 8021720:	f6bf af2c 	bge.w	802157c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8021724:	9b08      	ldr	r3, [sp, #32]
 8021726:	f8dd c01c 	ldr.w	ip, [sp, #28]
 802172a:	1cdd      	adds	r5, r3, #3
 802172c:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8021730:	f1bc 0f00 	cmp.w	ip, #0
 8021734:	dc5f      	bgt.n	80217f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8021736:	9b07      	ldr	r3, [sp, #28]
 8021738:	9a08      	ldr	r2, [sp, #32]
 802173a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802173e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021742:	441a      	add	r2, r3
 8021744:	9208      	str	r2, [sp, #32]
 8021746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021748:	2b00      	cmp	r3, #0
 802174a:	f340 80e9 	ble.w	8021920 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802174e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021752:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021754:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021758:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802175c:	eef0 6a62 	vmov.f32	s13, s5
 8021760:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021764:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021768:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802176c:	ee16 aa90 	vmov	sl, s13
 8021770:	eef0 6a43 	vmov.f32	s13, s6
 8021774:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021778:	ee16 8a90 	vmov	r8, s13
 802177c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021780:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021784:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021788:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802178c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021790:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021794:	ee12 2a90 	vmov	r2, s5
 8021798:	eef0 2a47 	vmov.f32	s5, s14
 802179c:	fb92 f3f3 	sdiv	r3, r2, r3
 80217a0:	ee13 2a10 	vmov	r2, s6
 80217a4:	932b      	str	r3, [sp, #172]	; 0xac
 80217a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217a8:	eeb0 3a67 	vmov.f32	s6, s15
 80217ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80217b0:	932c      	str	r3, [sp, #176]	; 0xb0
 80217b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80217b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80217b6:	3b01      	subs	r3, #1
 80217b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80217ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80217bc:	bf08      	it	eq
 80217be:	4613      	moveq	r3, r2
 80217c0:	9307      	str	r3, [sp, #28]
 80217c2:	e6b1      	b.n	8021528 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80217c4:	1c47      	adds	r7, r0, #1
 80217c6:	d482      	bmi.n	80216ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80217c8:	42bb      	cmp	r3, r7
 80217ca:	db80      	blt.n	80216ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80217cc:	1c67      	adds	r7, r4, #1
 80217ce:	f53f af7e 	bmi.w	80216ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80217d2:	42be      	cmp	r6, r7
 80217d4:	f6ff af7b 	blt.w	80216ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80217d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80217da:	b236      	sxth	r6, r6
 80217dc:	9001      	str	r0, [sp, #4]
 80217de:	b21b      	sxth	r3, r3
 80217e0:	9600      	str	r6, [sp, #0]
 80217e2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80217e4:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80217e8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80217ec:	4629      	mov	r1, r5
 80217ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80217f0:	f7ff fd82 	bl	80212f8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80217f4:	e76b      	b.n	80216ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80217f6:	9930      	ldr	r1, [sp, #192]	; 0xc0
 80217f8:	ea4f 402a 	mov.w	r0, sl, asr #16
 80217fc:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8021800:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8021804:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8021808:	ea4f 4128 	mov.w	r1, r8, asr #16
 802180c:	fb07 0101 	mla	r1, r7, r1, r0
 8021810:	980a      	ldr	r0, [sp, #40]	; 0x28
 8021812:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021816:	1844      	adds	r4, r0, r1
 8021818:	5c40      	ldrb	r0, [r0, r1]
 802181a:	78a6      	ldrb	r6, [r4, #2]
 802181c:	7861      	ldrb	r1, [r4, #1]
 802181e:	960f      	str	r6, [sp, #60]	; 0x3c
 8021820:	78e6      	ldrb	r6, [r4, #3]
 8021822:	910d      	str	r1, [sp, #52]	; 0x34
 8021824:	9610      	str	r6, [sp, #64]	; 0x40
 8021826:	f894 9004 	ldrb.w	r9, [r4, #4]
 802182a:	f894 b005 	ldrb.w	fp, [r4, #5]
 802182e:	b192      	cbz	r2, 8021856 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8021830:	f06f 0604 	mvn.w	r6, #4
 8021834:	2103      	movs	r1, #3
 8021836:	3405      	adds	r4, #5
 8021838:	fb17 6701 	smlabb	r7, r7, r1, r6
 802183c:	19e6      	adds	r6, r4, r7
 802183e:	5de4      	ldrb	r4, [r4, r7]
 8021840:	9417      	str	r4, [sp, #92]	; 0x5c
 8021842:	7874      	ldrb	r4, [r6, #1]
 8021844:	9419      	str	r4, [sp, #100]	; 0x64
 8021846:	78b4      	ldrb	r4, [r6, #2]
 8021848:	941b      	str	r4, [sp, #108]	; 0x6c
 802184a:	78f4      	ldrb	r4, [r6, #3]
 802184c:	9418      	str	r4, [sp, #96]	; 0x60
 802184e:	7934      	ldrb	r4, [r6, #4]
 8021850:	941a      	str	r4, [sp, #104]	; 0x68
 8021852:	7974      	ldrb	r4, [r6, #5]
 8021854:	941c      	str	r4, [sp, #112]	; 0x70
 8021856:	b29b      	uxth	r3, r3
 8021858:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802185a:	b292      	uxth	r2, r2
 802185c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802185e:	3503      	adds	r5, #3
 8021860:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021864:	fb03 f402 	mul.w	r4, r3, r2
 8021868:	011b      	lsls	r3, r3, #4
 802186a:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 802186e:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8021872:	1b1b      	subs	r3, r3, r4
 8021874:	b292      	uxth	r2, r2
 8021876:	b29b      	uxth	r3, r3
 8021878:	1ab6      	subs	r6, r6, r2
 802187a:	435f      	muls	r7, r3
 802187c:	b2b6      	uxth	r6, r6
 802187e:	fb03 f909 	mul.w	r9, r3, r9
 8021882:	fb03 fb0b 	mul.w	fp, r3, fp
 8021886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021888:	fb06 7000 	mla	r0, r6, r0, r7
 802188c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 802188e:	fb06 bb03 	mla	fp, r6, r3, fp
 8021892:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8021894:	fb02 0007 	mla	r0, r2, r7, r0
 8021898:	9f18      	ldr	r7, [sp, #96]	; 0x60
 802189a:	fb02 bb03 	mla	fp, r2, r3, fp
 802189e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80218a0:	fb04 0007 	mla	r0, r4, r7, r0
 80218a4:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 80218a8:	fb17 f701 	smulbb	r7, r7, r1
 80218ac:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80218b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80218b2:	fb00 700e 	mla	r0, r0, lr, r7
 80218b6:	fb06 9101 	mla	r1, r6, r1, r9
 80218ba:	b280      	uxth	r0, r0
 80218bc:	1c47      	adds	r7, r0, #1
 80218be:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80218c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80218c4:	1200      	asrs	r0, r0, #8
 80218c6:	f805 0c06 	strb.w	r0, [r5, #-6]
 80218ca:	9819      	ldr	r0, [sp, #100]	; 0x64
 80218cc:	fb02 1100 	mla	r1, r2, r0, r1
 80218d0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80218d2:	fb04 1100 	mla	r1, r4, r0, r1
 80218d6:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80218da:	fb04 b403 	mla	r4, r4, r3, fp
 80218de:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80218e2:	fb10 f007 	smulbb	r0, r0, r7
 80218e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80218ea:	fb13 f307 	smulbb	r3, r3, r7
 80218ee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80218f2:	fb01 010e 	mla	r1, r1, lr, r0
 80218f6:	fb04 340e 	mla	r4, r4, lr, r3
 80218fa:	b289      	uxth	r1, r1
 80218fc:	b2a4      	uxth	r4, r4
 80218fe:	1c48      	adds	r0, r1, #1
 8021900:	1c63      	adds	r3, r4, #1
 8021902:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021906:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802190a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802190c:	1209      	asrs	r1, r1, #8
 802190e:	1224      	asrs	r4, r4, #8
 8021910:	449a      	add	sl, r3
 8021912:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021914:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021918:	f805 4c04 	strb.w	r4, [r5, #-4]
 802191c:	4498      	add	r8, r3
 802191e:	e707      	b.n	8021730 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8021920:	b01f      	add	sp, #124	; 0x7c
 8021922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021926 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021926:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802192a:	b087      	sub	sp, #28
 802192c:	780d      	ldrb	r5, [r1, #0]
 802192e:	784c      	ldrb	r4, [r1, #1]
 8021930:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8021934:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 8021938:	9004      	str	r0, [sp, #16]
 802193a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 802193e:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8021942:	9005      	str	r0, [sp, #20]
 8021944:	fb06 bc03 	mla	ip, r6, r3, fp
 8021948:	2e00      	cmp	r6, #0
 802194a:	7888      	ldrb	r0, [r1, #2]
 802194c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021950:	eb02 090c 	add.w	r9, r2, ip
 8021954:	f2c0 8084 	blt.w	8021a60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021958:	42b7      	cmp	r7, r6
 802195a:	f340 8081 	ble.w	8021a60 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 802195e:	f1bb 0f00 	cmp.w	fp, #0
 8021962:	db79      	blt.n	8021a58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021964:	455b      	cmp	r3, fp
 8021966:	dd77      	ble.n	8021a58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021968:	f812 200c 	ldrb.w	r2, [r2, ip]
 802196c:	9201      	str	r2, [sp, #4]
 802196e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021972:	9202      	str	r2, [sp, #8]
 8021974:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021978:	9203      	str	r2, [sp, #12]
 802197a:	f11b 0201 	adds.w	r2, fp, #1
 802197e:	d476      	bmi.n	8021a6e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021980:	4293      	cmp	r3, r2
 8021982:	dd74      	ble.n	8021a6e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021984:	9a04      	ldr	r2, [sp, #16]
 8021986:	2a00      	cmp	r2, #0
 8021988:	d071      	beq.n	8021a6e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 802198a:	f899 8003 	ldrb.w	r8, [r9, #3]
 802198e:	f899 c004 	ldrb.w	ip, [r9, #4]
 8021992:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021996:	3601      	adds	r6, #1
 8021998:	d471      	bmi.n	8021a7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802199a:	42b7      	cmp	r7, r6
 802199c:	dd6f      	ble.n	8021a7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 802199e:	9a05      	ldr	r2, [sp, #20]
 80219a0:	2a00      	cmp	r2, #0
 80219a2:	d06c      	beq.n	8021a7e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 80219a4:	f1bb 0f00 	cmp.w	fp, #0
 80219a8:	db65      	blt.n	8021a76 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80219aa:	455b      	cmp	r3, fp
 80219ac:	dd63      	ble.n	8021a76 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 80219ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80219b2:	f819 e002 	ldrb.w	lr, [r9, r2]
 80219b6:	2203      	movs	r2, #3
 80219b8:	fb03 9602 	mla	r6, r3, r2, r9
 80219bc:	7877      	ldrb	r7, [r6, #1]
 80219be:	78b6      	ldrb	r6, [r6, #2]
 80219c0:	f11b 0b01 	adds.w	fp, fp, #1
 80219c4:	d40c      	bmi.n	80219e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80219c6:	455b      	cmp	r3, fp
 80219c8:	dd0a      	ble.n	80219e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80219ca:	9a04      	ldr	r2, [sp, #16]
 80219cc:	b142      	cbz	r2, 80219e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80219ce:	2203      	movs	r2, #3
 80219d0:	fb13 2002 	smlabb	r0, r3, r2, r2
 80219d4:	f819 5000 	ldrb.w	r5, [r9, r0]
 80219d8:	fb03 9002 	mla	r0, r3, r2, r9
 80219dc:	7904      	ldrb	r4, [r0, #4]
 80219de:	7940      	ldrb	r0, [r0, #5]
 80219e0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80219e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80219e8:	fb03 fb02 	mul.w	fp, r3, r2
 80219ec:	011b      	lsls	r3, r3, #4
 80219ee:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80219f2:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80219f6:	eba3 030b 	sub.w	r3, r3, fp
 80219fa:	b292      	uxth	r2, r2
 80219fc:	b29b      	uxth	r3, r3
 80219fe:	eba9 0902 	sub.w	r9, r9, r2
 8021a02:	9304      	str	r3, [sp, #16]
 8021a04:	fa1f f989 	uxth.w	r9, r9
 8021a08:	fb03 f808 	mul.w	r8, r3, r8
 8021a0c:	9b01      	ldr	r3, [sp, #4]
 8021a0e:	fb09 8803 	mla	r8, r9, r3, r8
 8021a12:	9b04      	ldr	r3, [sp, #16]
 8021a14:	fb03 fc0c 	mul.w	ip, r3, ip
 8021a18:	9b02      	ldr	r3, [sp, #8]
 8021a1a:	fb02 880e 	mla	r8, r2, lr, r8
 8021a1e:	fb09 cc03 	mla	ip, r9, r3, ip
 8021a22:	9b04      	ldr	r3, [sp, #16]
 8021a24:	fb0b 8805 	mla	r8, fp, r5, r8
 8021a28:	fb02 c707 	mla	r7, r2, r7, ip
 8021a2c:	fb03 f30a 	mul.w	r3, r3, sl
 8021a30:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021a34:	fb0b 7404 	mla	r4, fp, r4, r7
 8021a38:	f881 8000 	strb.w	r8, [r1]
 8021a3c:	1224      	asrs	r4, r4, #8
 8021a3e:	704c      	strb	r4, [r1, #1]
 8021a40:	9c03      	ldr	r4, [sp, #12]
 8021a42:	fb09 3904 	mla	r9, r9, r4, r3
 8021a46:	fb02 9206 	mla	r2, r2, r6, r9
 8021a4a:	fb0b 2000 	mla	r0, fp, r0, r2
 8021a4e:	1200      	asrs	r0, r0, #8
 8021a50:	7088      	strb	r0, [r1, #2]
 8021a52:	b007      	add	sp, #28
 8021a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a58:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8021a5c:	9501      	str	r5, [sp, #4]
 8021a5e:	e78c      	b.n	802197a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8021a60:	4682      	mov	sl, r0
 8021a62:	46a4      	mov	ip, r4
 8021a64:	46a8      	mov	r8, r5
 8021a66:	9501      	str	r5, [sp, #4]
 8021a68:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8021a6c:	e793      	b.n	8021996 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021a6e:	4682      	mov	sl, r0
 8021a70:	46a4      	mov	ip, r4
 8021a72:	46a8      	mov	r8, r5
 8021a74:	e78f      	b.n	8021996 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021a76:	4606      	mov	r6, r0
 8021a78:	4627      	mov	r7, r4
 8021a7a:	46ae      	mov	lr, r5
 8021a7c:	e7a0      	b.n	80219c0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021a7e:	4606      	mov	r6, r0
 8021a80:	4627      	mov	r7, r4
 8021a82:	46ae      	mov	lr, r5
 8021a84:	e7ac      	b.n	80219e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08021a86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021a86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a8a:	b09b      	sub	sp, #108	; 0x6c
 8021a8c:	920b      	str	r2, [sp, #44]	; 0x2c
 8021a8e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021a90:	9019      	str	r0, [sp, #100]	; 0x64
 8021a92:	9109      	str	r1, [sp, #36]	; 0x24
 8021a94:	6850      	ldr	r0, [r2, #4]
 8021a96:	9306      	str	r3, [sp, #24]
 8021a98:	6812      	ldr	r2, [r2, #0]
 8021a9a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021a9e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8021aa2:	fb00 1303 	mla	r3, r0, r3, r1
 8021aa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021aaa:	18d3      	adds	r3, r2, r3
 8021aac:	9307      	str	r3, [sp, #28]
 8021aae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ab0:	681b      	ldr	r3, [r3, #0]
 8021ab2:	9308      	str	r3, [sp, #32]
 8021ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	dc03      	bgt.n	8021ac2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021abc:	2b00      	cmp	r3, #0
 8021abe:	f340 81ab 	ble.w	8021e18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021ac2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021ac4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021ac8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021acc:	1e48      	subs	r0, r1, #1
 8021ace:	1e55      	subs	r5, r2, #1
 8021ad0:	9b06      	ldr	r3, [sp, #24]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	f340 80b1 	ble.w	8021c3a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021ad8:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021adc:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021ae0:	d406      	bmi.n	8021af0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021ae2:	4286      	cmp	r6, r0
 8021ae4:	da04      	bge.n	8021af0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021ae6:	2b00      	cmp	r3, #0
 8021ae8:	db02      	blt.n	8021af0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021aea:	42ab      	cmp	r3, r5
 8021aec:	f2c0 80a6 	blt.w	8021c3c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021af0:	3601      	adds	r6, #1
 8021af2:	f100 8097 	bmi.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021af6:	42b1      	cmp	r1, r6
 8021af8:	f2c0 8094 	blt.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021afc:	3301      	adds	r3, #1
 8021afe:	f100 8091 	bmi.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021b02:	429a      	cmp	r2, r3
 8021b04:	f2c0 808e 	blt.w	8021c24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021b08:	9b06      	ldr	r3, [sp, #24]
 8021b0a:	9e07      	ldr	r6, [sp, #28]
 8021b0c:	930a      	str	r3, [sp, #40]	; 0x28
 8021b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	f340 80b0 	ble.w	8021c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021b16:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8021b18:	1425      	asrs	r5, r4, #16
 8021b1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021b1c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021b20:	68c7      	ldr	r7, [r0, #12]
 8021b22:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021b26:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021b2a:	689b      	ldr	r3, [r3, #8]
 8021b2c:	f100 80ea 	bmi.w	8021d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021b30:	f103 3cff 	add.w	ip, r3, #4294967295
 8021b34:	4560      	cmp	r0, ip
 8021b36:	f280 80e5 	bge.w	8021d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021b3a:	2d00      	cmp	r5, #0
 8021b3c:	f2c0 80e2 	blt.w	8021d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021b40:	f107 3cff 	add.w	ip, r7, #4294967295
 8021b44:	4565      	cmp	r5, ip
 8021b46:	f280 80dd 	bge.w	8021d04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021b4a:	b21b      	sxth	r3, r3
 8021b4c:	fb05 0003 	mla	r0, r5, r3, r0
 8021b50:	9d08      	ldr	r5, [sp, #32]
 8021b52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021b56:	182f      	adds	r7, r5, r0
 8021b58:	5c2d      	ldrb	r5, [r5, r0]
 8021b5a:	7878      	ldrb	r0, [r7, #1]
 8021b5c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021b60:	900c      	str	r0, [sp, #48]	; 0x30
 8021b62:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021b66:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021b6a:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021b6e:	b1c9      	cbz	r1, 8021ba4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021b70:	f04f 0c03 	mov.w	ip, #3
 8021b74:	f06f 0004 	mvn.w	r0, #4
 8021b78:	3705      	adds	r7, #5
 8021b7a:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021b7e:	eb07 0c03 	add.w	ip, r7, r3
 8021b82:	5cfb      	ldrb	r3, [r7, r3]
 8021b84:	930d      	str	r3, [sp, #52]	; 0x34
 8021b86:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021b8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8021b8c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021b90:	9311      	str	r3, [sp, #68]	; 0x44
 8021b92:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021b96:	930e      	str	r3, [sp, #56]	; 0x38
 8021b98:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021b9c:	9310      	str	r3, [sp, #64]	; 0x40
 8021b9e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021ba2:	9312      	str	r3, [sp, #72]	; 0x48
 8021ba4:	b292      	uxth	r2, r2
 8021ba6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021ba8:	b289      	uxth	r1, r1
 8021baa:	fb02 f301 	mul.w	r3, r2, r1
 8021bae:	0112      	lsls	r2, r2, #4
 8021bb0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021bb4:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8021bb8:	1ad2      	subs	r2, r2, r3
 8021bba:	b289      	uxth	r1, r1
 8021bbc:	b292      	uxth	r2, r2
 8021bbe:	1a7f      	subs	r7, r7, r1
 8021bc0:	fb02 f909 	mul.w	r9, r2, r9
 8021bc4:	b2bf      	uxth	r7, r7
 8021bc6:	fb02 f808 	mul.w	r8, r2, r8
 8021bca:	fb02 fa0a 	mul.w	sl, r2, sl
 8021bce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021bd0:	fb07 9905 	mla	r9, r7, r5, r9
 8021bd4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021bd6:	fb07 8800 	mla	r8, r7, r0, r8
 8021bda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021bdc:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021be0:	fb01 9905 	mla	r9, r1, r5, r9
 8021be4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021be6:	fb01 8800 	mla	r8, r1, r0, r8
 8021bea:	9810      	ldr	r0, [sp, #64]	; 0x40
 8021bec:	fb01 a102 	mla	r1, r1, r2, sl
 8021bf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bf2:	fb03 9905 	mla	r9, r3, r5, r9
 8021bf6:	fb03 8800 	mla	r8, r3, r0, r8
 8021bfa:	fb03 1302 	mla	r3, r3, r2, r1
 8021bfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021c02:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021c06:	121b      	asrs	r3, r3, #8
 8021c08:	f886 9000 	strb.w	r9, [r6]
 8021c0c:	f886 8001 	strb.w	r8, [r6, #1]
 8021c10:	70b3      	strb	r3, [r6, #2]
 8021c12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c14:	3603      	adds	r6, #3
 8021c16:	449b      	add	fp, r3
 8021c18:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c1a:	441c      	add	r4, r3
 8021c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021c1e:	3b01      	subs	r3, #1
 8021c20:	930a      	str	r3, [sp, #40]	; 0x28
 8021c22:	e774      	b.n	8021b0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021c24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021c26:	449b      	add	fp, r3
 8021c28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021c2a:	441c      	add	r4, r3
 8021c2c:	9b06      	ldr	r3, [sp, #24]
 8021c2e:	3b01      	subs	r3, #1
 8021c30:	9306      	str	r3, [sp, #24]
 8021c32:	9b07      	ldr	r3, [sp, #28]
 8021c34:	3303      	adds	r3, #3
 8021c36:	9307      	str	r3, [sp, #28]
 8021c38:	e74a      	b.n	8021ad0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021c3a:	d024      	beq.n	8021c86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021c3c:	9b06      	ldr	r3, [sp, #24]
 8021c3e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021c40:	3b01      	subs	r3, #1
 8021c42:	fb00 b003 	mla	r0, r0, r3, fp
 8021c46:	1400      	asrs	r0, r0, #16
 8021c48:	f53f af5e 	bmi.w	8021b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021c4c:	3901      	subs	r1, #1
 8021c4e:	4288      	cmp	r0, r1
 8021c50:	f6bf af5a 	bge.w	8021b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021c54:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021c56:	fb01 4303 	mla	r3, r1, r3, r4
 8021c5a:	141b      	asrs	r3, r3, #16
 8021c5c:	f53f af54 	bmi.w	8021b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021c60:	3a01      	subs	r2, #1
 8021c62:	4293      	cmp	r3, r2
 8021c64:	f6bf af50 	bge.w	8021b08 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021c68:	9b07      	ldr	r3, [sp, #28]
 8021c6a:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021c6e:	1cde      	adds	r6, r3, #3
 8021c70:	f1be 0f00 	cmp.w	lr, #0
 8021c74:	dc5f      	bgt.n	8021d36 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021c76:	9b06      	ldr	r3, [sp, #24]
 8021c78:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021c7c:	9b07      	ldr	r3, [sp, #28]
 8021c7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021c82:	4423      	add	r3, r4
 8021c84:	9307      	str	r3, [sp, #28]
 8021c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c88:	2b00      	cmp	r3, #0
 8021c8a:	f340 80c5 	ble.w	8021e18 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021c92:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021c94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021c98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021c9c:	eef0 6a62 	vmov.f32	s13, s5
 8021ca0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ca4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ca8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cac:	ee16 ba90 	vmov	fp, s13
 8021cb0:	eef0 6a43 	vmov.f32	s13, s6
 8021cb4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cb8:	ee16 4a90 	vmov	r4, s13
 8021cbc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021cc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021cc4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021cc8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ccc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021cd0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021cd4:	ee12 2a90 	vmov	r2, s5
 8021cd8:	eef0 2a47 	vmov.f32	s5, s14
 8021cdc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ce0:	ee13 2a10 	vmov	r2, s6
 8021ce4:	9327      	str	r3, [sp, #156]	; 0x9c
 8021ce6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021ce8:	eeb0 3a67 	vmov.f32	s6, s15
 8021cec:	fb92 f3f3 	sdiv	r3, r2, r3
 8021cf0:	9328      	str	r3, [sp, #160]	; 0xa0
 8021cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021cf6:	3b01      	subs	r3, #1
 8021cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8021cfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021cfc:	bf08      	it	eq
 8021cfe:	4613      	moveq	r3, r2
 8021d00:	9306      	str	r3, [sp, #24]
 8021d02:	e6d7      	b.n	8021ab4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021d04:	f110 0c01 	adds.w	ip, r0, #1
 8021d08:	d483      	bmi.n	8021c12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021d0a:	4563      	cmp	r3, ip
 8021d0c:	db81      	blt.n	8021c12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021d0e:	f115 0c01 	adds.w	ip, r5, #1
 8021d12:	f53f af7e 	bmi.w	8021c12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021d16:	4567      	cmp	r7, ip
 8021d18:	f6ff af7b 	blt.w	8021c12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021d1c:	b23f      	sxth	r7, r7
 8021d1e:	b21b      	sxth	r3, r3
 8021d20:	9700      	str	r7, [sp, #0]
 8021d22:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8021d26:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8021d2a:	9a08      	ldr	r2, [sp, #32]
 8021d2c:	4631      	mov	r1, r6
 8021d2e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8021d30:	f7ff fdf9 	bl	8021926 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021d34:	e76d      	b.n	8021c12 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021d36:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8021d38:	ea4f 402b 	mov.w	r0, fp, asr #16
 8021d3c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021d40:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021d44:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8021d48:	1421      	asrs	r1, r4, #16
 8021d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8021d4c:	fb0c 0101 	mla	r1, ip, r1, r0
 8021d50:	9808      	ldr	r0, [sp, #32]
 8021d52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021d56:	1845      	adds	r5, r0, r1
 8021d58:	5c40      	ldrb	r0, [r0, r1]
 8021d5a:	796f      	ldrb	r7, [r5, #5]
 8021d5c:	7869      	ldrb	r1, [r5, #1]
 8021d5e:	f895 8002 	ldrb.w	r8, [r5, #2]
 8021d62:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021d66:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021d6a:	970c      	str	r7, [sp, #48]	; 0x30
 8021d6c:	b1a2      	cbz	r2, 8021d98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8021d6e:	2703      	movs	r7, #3
 8021d70:	f06f 0304 	mvn.w	r3, #4
 8021d74:	3505      	adds	r5, #5
 8021d76:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021d7a:	eb05 070c 	add.w	r7, r5, ip
 8021d7e:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021d82:	9513      	str	r5, [sp, #76]	; 0x4c
 8021d84:	787d      	ldrb	r5, [r7, #1]
 8021d86:	9515      	str	r5, [sp, #84]	; 0x54
 8021d88:	78bd      	ldrb	r5, [r7, #2]
 8021d8a:	9517      	str	r5, [sp, #92]	; 0x5c
 8021d8c:	78fd      	ldrb	r5, [r7, #3]
 8021d8e:	9514      	str	r5, [sp, #80]	; 0x50
 8021d90:	793d      	ldrb	r5, [r7, #4]
 8021d92:	9516      	str	r5, [sp, #88]	; 0x58
 8021d94:	797d      	ldrb	r5, [r7, #5]
 8021d96:	9518      	str	r5, [sp, #96]	; 0x60
 8021d98:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8021d9c:	b292      	uxth	r2, r2
 8021d9e:	3603      	adds	r6, #3
 8021da0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021da4:	fb03 f502 	mul.w	r5, r3, r2
 8021da8:	011b      	lsls	r3, r3, #4
 8021daa:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021dae:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8021db2:	1b5b      	subs	r3, r3, r5
 8021db4:	b292      	uxth	r2, r2
 8021db6:	b29b      	uxth	r3, r3
 8021db8:	1abf      	subs	r7, r7, r2
 8021dba:	fb03 f909 	mul.w	r9, r3, r9
 8021dbe:	b2bf      	uxth	r7, r7
 8021dc0:	fb03 fa0a 	mul.w	sl, r3, sl
 8021dc4:	fb07 9901 	mla	r9, r7, r1, r9
 8021dc8:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021dca:	fb07 aa00 	mla	sl, r7, r0, sl
 8021dce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021dd0:	fb02 9901 	mla	r9, r2, r1, r9
 8021dd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8021dd6:	fb02 aa00 	mla	sl, r2, r0, sl
 8021dda:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021ddc:	fb05 9901 	mla	r9, r5, r1, r9
 8021de0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021de2:	fb05 aa00 	mla	sl, r5, r0, sl
 8021de6:	434b      	muls	r3, r1
 8021de8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8021dea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021dee:	fb07 3308 	mla	r3, r7, r8, r3
 8021df2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021df6:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021dfa:	fb02 3201 	mla	r2, r2, r1, r3
 8021dfe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021e00:	f806 9c05 	strb.w	r9, [r6, #-5]
 8021e04:	fb05 2503 	mla	r5, r5, r3, r2
 8021e08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021e0a:	122d      	asrs	r5, r5, #8
 8021e0c:	449b      	add	fp, r3
 8021e0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021e10:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021e14:	441c      	add	r4, r3
 8021e16:	e72b      	b.n	8021c70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021e18:	b01b      	add	sp, #108	; 0x6c
 8021e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021e1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021e1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e22:	b087      	sub	sp, #28
 8021e24:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8021e28:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8021e2c:	fb05 7003 	mla	r0, r5, r3, r7
 8021e30:	2d00      	cmp	r5, #0
 8021e32:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8021e36:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8021e3a:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8021e3e:	f2c0 811f 	blt.w	8022080 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021e42:	45a8      	cmp	r8, r5
 8021e44:	f340 811c 	ble.w	8022080 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8021e48:	2f00      	cmp	r7, #0
 8021e4a:	f2c0 8117 	blt.w	802207c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021e4e:	42bb      	cmp	r3, r7
 8021e50:	f340 8114 	ble.w	802207c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8021e54:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8021e58:	1c7a      	adds	r2, r7, #1
 8021e5a:	f100 8114 	bmi.w	8022086 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021e5e:	4293      	cmp	r3, r2
 8021e60:	f340 8111 	ble.w	8022086 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8021e64:	2c00      	cmp	r4, #0
 8021e66:	f000 8110 	beq.w	802208a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8021e6a:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8021e6e:	3501      	adds	r5, #1
 8021e70:	f100 810f 	bmi.w	8022092 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021e74:	45a8      	cmp	r8, r5
 8021e76:	f340 810c 	ble.w	8022092 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8021e7a:	f1be 0f00 	cmp.w	lr, #0
 8021e7e:	f000 810b 	beq.w	8022098 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8021e82:	2f00      	cmp	r7, #0
 8021e84:	f2c0 8103 	blt.w	802208e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021e88:	42bb      	cmp	r3, r7
 8021e8a:	f340 8100 	ble.w	802208e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8021e8e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8021e92:	3701      	adds	r7, #1
 8021e94:	f100 8103 	bmi.w	802209e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021e98:	42bb      	cmp	r3, r7
 8021e9a:	f340 8100 	ble.w	802209e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8021e9e:	2c00      	cmp	r4, #0
 8021ea0:	f000 80ff 	beq.w	80220a2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8021ea4:	3301      	adds	r3, #1
 8021ea6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021eaa:	fa1f fc84 	uxth.w	ip, r4
 8021eae:	fa1f fe8e 	uxth.w	lr, lr
 8021eb2:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8021eb6:	fb0c f90e 	mul.w	r9, ip, lr
 8021eba:	0e13      	lsrs	r3, r2, #24
 8021ebc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8021ec0:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8021ec4:	9302      	str	r3, [sp, #8]
 8021ec6:	ebac 0709 	sub.w	r7, ip, r9
 8021eca:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8021ece:	fa1f f48e 	uxth.w	r4, lr
 8021ed2:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 8021ed6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8021eda:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8021ede:	fb0a fe0e 	mul.w	lr, sl, lr
 8021ee2:	1b1b      	subs	r3, r3, r4
 8021ee4:	fb0a f606 	mul.w	r6, sl, r6
 8021ee8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8021eec:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8021ef0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8021ef4:	b29b      	uxth	r3, r3
 8021ef6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021efa:	b2bf      	uxth	r7, r7
 8021efc:	9301      	str	r3, [sp, #4]
 8021efe:	44e6      	add	lr, ip
 8021f00:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8021f04:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f08:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8021f0c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 8021f10:	9303      	str	r3, [sp, #12]
 8021f12:	0a33      	lsrs	r3, r6, #8
 8021f14:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8021f18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021f1c:	9304      	str	r3, [sp, #16]
 8021f1e:	fb0b f606 	mul.w	r6, fp, r6
 8021f22:	fb0b f000 	mul.w	r0, fp, r0
 8021f26:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8021f2a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021f2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f32:	44b6      	add	lr, r6
 8021f34:	f500 7680 	add.w	r6, r0, #256	; 0x100
 8021f38:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8021f3c:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8021f40:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021f44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021f48:	fb08 f606 	mul.w	r6, r8, r6
 8021f4c:	0a03      	lsrs	r3, r0, #8
 8021f4e:	fb08 f505 	mul.w	r5, r8, r5
 8021f52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021f56:	0a30      	lsrs	r0, r6, #8
 8021f58:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021f5c:	9305      	str	r3, [sp, #20]
 8021f5e:	0e13      	lsrs	r3, r2, #24
 8021f60:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f64:	fb0e fe07 	mul.w	lr, lr, r7
 8021f68:	4430      	add	r0, r6
 8021f6a:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8021f6e:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8021f72:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021f76:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021f7a:	0a00      	lsrs	r0, r0, #8
 8021f7c:	435e      	muls	r6, r3
 8021f7e:	0a2d      	lsrs	r5, r5, #8
 8021f80:	435a      	muls	r2, r3
 8021f82:	9b03      	ldr	r3, [sp, #12]
 8021f84:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8021f88:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8021f8c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8021f90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021f94:	44b4      	add	ip, r6
 8021f96:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8021f9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021f9e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8021fa2:	9e01      	ldr	r6, [sp, #4]
 8021fa4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021fa8:	fb03 ee06 	mla	lr, r3, r6, lr
 8021fac:	9b04      	ldr	r3, [sp, #16]
 8021fae:	0a12      	lsrs	r2, r2, #8
 8021fb0:	fb0c ee09 	mla	lr, ip, r9, lr
 8021fb4:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 8021fb8:	9b05      	ldr	r3, [sp, #20]
 8021fba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021fbe:	fb00 ee04 	mla	lr, r0, r4, lr
 8021fc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021fc6:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8021fca:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8021fce:	9b01      	ldr	r3, [sp, #4]
 8021fd0:	fb07 fe0e 	mul.w	lr, r7, lr
 8021fd4:	fb07 f70b 	mul.w	r7, r7, fp
 8021fd8:	fb03 ee06 	mla	lr, r3, r6, lr
 8021fdc:	fb03 730a 	mla	r3, r3, sl, r7
 8021fe0:	fb09 e202 	mla	r2, r9, r2, lr
 8021fe4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021fe8:	fb04 2e0e 	mla	lr, r4, lr, r2
 8021fec:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8021ff0:	fb04 3408 	mla	r4, r4, r8, r3
 8021ff4:	9b02      	ldr	r3, [sp, #8]
 8021ff6:	b292      	uxth	r2, r2
 8021ff8:	fb09 4903 	mla	r9, r9, r3, r4
 8021ffc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022000:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8022004:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8022008:	fb09 f902 	mul.w	r9, r9, r2
 802200c:	ea40 0e0e 	orr.w	lr, r0, lr
 8022010:	f109 0301 	add.w	r3, r9, #1
 8022014:	fa5f f08e 	uxtb.w	r0, lr
 8022018:	fb10 f002 	smulbb	r0, r0, r2
 802201c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022020:	780b      	ldrb	r3, [r1, #0]
 8022022:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 8022026:	fa5f f989 	uxtb.w	r9, r9
 802202a:	fb03 0309 	mla	r3, r3, r9, r0
 802202e:	b29b      	uxth	r3, r3
 8022030:	1c58      	adds	r0, r3, #1
 8022032:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022036:	7848      	ldrb	r0, [r1, #1]
 8022038:	fb10 f009 	smulbb	r0, r0, r9
 802203c:	121b      	asrs	r3, r3, #8
 802203e:	700b      	strb	r3, [r1, #0]
 8022040:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022044:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022048:	fb03 0302 	mla	r3, r3, r2, r0
 802204c:	b29b      	uxth	r3, r3
 802204e:	1c58      	adds	r0, r3, #1
 8022050:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022054:	121b      	asrs	r3, r3, #8
 8022056:	704b      	strb	r3, [r1, #1]
 8022058:	788b      	ldrb	r3, [r1, #2]
 802205a:	fb13 f909 	smulbb	r9, r3, r9
 802205e:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022062:	fa1f fe8e 	uxth.w	lr, lr
 8022066:	f10e 0301 	add.w	r3, lr, #1
 802206a:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 802206e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022072:	f881 e002 	strb.w	lr, [r1, #2]
 8022076:	b007      	add	sp, #28
 8022078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802207c:	2600      	movs	r6, #0
 802207e:	e6eb      	b.n	8021e58 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8022080:	2000      	movs	r0, #0
 8022082:	4606      	mov	r6, r0
 8022084:	e6f3      	b.n	8021e6e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022086:	2000      	movs	r0, #0
 8022088:	e6f1      	b.n	8021e6e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802208a:	4620      	mov	r0, r4
 802208c:	e6ef      	b.n	8021e6e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802208e:	2500      	movs	r5, #0
 8022090:	e6ff      	b.n	8021e92 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022092:	2200      	movs	r2, #0
 8022094:	4615      	mov	r5, r2
 8022096:	e708      	b.n	8021eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022098:	4672      	mov	r2, lr
 802209a:	4675      	mov	r5, lr
 802209c:	e705      	b.n	8021eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802209e:	2200      	movs	r2, #0
 80220a0:	e703      	b.n	8021eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 80220a2:	4622      	mov	r2, r4
 80220a4:	e701      	b.n	8021eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

080220a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80220a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220aa:	b09d      	sub	sp, #116	; 0x74
 80220ac:	9219      	str	r2, [sp, #100]	; 0x64
 80220ae:	9307      	str	r3, [sp, #28]
 80220b0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80220b2:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80220b6:	901b      	str	r0, [sp, #108]	; 0x6c
 80220b8:	931a      	str	r3, [sp, #104]	; 0x68
 80220ba:	6850      	ldr	r0, [r2, #4]
 80220bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80220be:	6812      	ldr	r2, [r2, #0]
 80220c0:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80220c4:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80220c8:	fb00 1303 	mla	r3, r0, r3, r1
 80220cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80220d0:	18d3      	adds	r3, r2, r3
 80220d2:	930a      	str	r3, [sp, #40]	; 0x28
 80220d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80220d6:	681b      	ldr	r3, [r3, #0]
 80220d8:	9310      	str	r3, [sp, #64]	; 0x40
 80220da:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80220de:	930b      	str	r3, [sp, #44]	; 0x2c
 80220e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	dc03      	bgt.n	80220ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80220e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80220e8:	2b00      	cmp	r3, #0
 80220ea:	f340 8368 	ble.w	80227be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80220ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80220f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80220f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80220f8:	1e48      	subs	r0, r1, #1
 80220fa:	1e57      	subs	r7, r2, #1
 80220fc:	9b07      	ldr	r3, [sp, #28]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	f340 8187 	ble.w	8022412 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8022104:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022108:	ea4f 4326 	mov.w	r3, r6, asr #16
 802210c:	d406      	bmi.n	802211c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802210e:	4584      	cmp	ip, r0
 8022110:	da04      	bge.n	802211c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022112:	2b00      	cmp	r3, #0
 8022114:	db02      	blt.n	802211c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022116:	42bb      	cmp	r3, r7
 8022118:	f2c0 817c 	blt.w	8022414 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802211c:	f11c 0c01 	adds.w	ip, ip, #1
 8022120:	f100 816c 	bmi.w	80223fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022124:	4561      	cmp	r1, ip
 8022126:	f2c0 8169 	blt.w	80223fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802212a:	3301      	adds	r3, #1
 802212c:	f100 8166 	bmi.w	80223fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022130:	429a      	cmp	r2, r3
 8022132:	f2c0 8163 	blt.w	80223fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8022136:	9b07      	ldr	r3, [sp, #28]
 8022138:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802213a:	9318      	str	r3, [sp, #96]	; 0x60
 802213c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802213e:	2b00      	cmp	r3, #0
 8022140:	f340 8186 	ble.w	8022450 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022144:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022146:	142a      	asrs	r2, r5, #16
 8022148:	ea4f 4026 	mov.w	r0, r6, asr #16
 802214c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022150:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022154:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8022158:	f100 81cb 	bmi.w	80224f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802215c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022160:	4542      	cmp	r2, r8
 8022162:	f280 81c6 	bge.w	80224f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022166:	2800      	cmp	r0, #0
 8022168:	f2c0 81c3 	blt.w	80224f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802216c:	f103 38ff 	add.w	r8, r3, #4294967295
 8022170:	4540      	cmp	r0, r8
 8022172:	f280 81be 	bge.w	80224f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022176:	fa0f f38e 	sxth.w	r3, lr
 802217a:	fb00 2203 	mla	r2, r0, r3, r2
 802217e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022180:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022184:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8022188:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802218c:	2900      	cmp	r1, #0
 802218e:	f000 81a6 	beq.w	80224de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022192:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022196:	900c      	str	r0, [sp, #48]	; 0x30
 8022198:	0e00      	lsrs	r0, r0, #24
 802219a:	9013      	str	r0, [sp, #76]	; 0x4c
 802219c:	f1bc 0f00 	cmp.w	ip, #0
 80221a0:	d00f      	beq.n	80221c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80221a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80221a6:	3b01      	subs	r3, #1
 80221a8:	009b      	lsls	r3, r3, #2
 80221aa:	3304      	adds	r3, #4
 80221ac:	eb08 0003 	add.w	r0, r8, r3
 80221b0:	f858 3003 	ldr.w	r3, [r8, r3]
 80221b4:	9308      	str	r3, [sp, #32]
 80221b6:	0e1b      	lsrs	r3, r3, #24
 80221b8:	9311      	str	r3, [sp, #68]	; 0x44
 80221ba:	6843      	ldr	r3, [r0, #4]
 80221bc:	930d      	str	r3, [sp, #52]	; 0x34
 80221be:	0e1b      	lsrs	r3, r3, #24
 80221c0:	9314      	str	r3, [sp, #80]	; 0x50
 80221c2:	b289      	uxth	r1, r1
 80221c4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80221c6:	fa1f fc8c 	uxth.w	ip, ip
 80221ca:	0108      	lsls	r0, r1, #4
 80221cc:	fb01 f90c 	mul.w	r9, r1, ip
 80221d0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80221d4:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80221d8:	eba0 0809 	sub.w	r8, r0, r9
 80221dc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80221de:	fa1f f18c 	uxth.w	r1, ip
 80221e2:	fa1f f888 	uxth.w	r8, r8
 80221e6:	1a5b      	subs	r3, r3, r1
 80221e8:	fb08 f000 	mul.w	r0, r8, r0
 80221ec:	b29b      	uxth	r3, r3
 80221ee:	fb03 000e 	mla	r0, r3, lr, r0
 80221f2:	fb01 0004 	mla	r0, r1, r4, r0
 80221f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80221f8:	fb09 0004 	mla	r0, r9, r4, r0
 80221fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8022200:	2800      	cmp	r0, #0
 8022202:	f000 80f2 	beq.w	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022206:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802220a:	d01b      	beq.n	8022244 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 802220c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8022210:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022214:	fb0e fa0a 	mul.w	sl, lr, sl
 8022218:	fb0e fe02 	mul.w	lr, lr, r2
 802221c:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8022220:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022224:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022228:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802222c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022230:	4452      	add	r2, sl
 8022232:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022236:	0a12      	lsrs	r2, r2, #8
 8022238:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802223c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022240:	ea42 020c 	orr.w	r2, r2, ip
 8022244:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022246:	2cff      	cmp	r4, #255	; 0xff
 8022248:	d021      	beq.n	802228e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802224a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802224c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8022250:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022252:	fb04 fb0b 	mul.w	fp, r4, fp
 8022256:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022258:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802225c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802225e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022262:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022266:	fb04 fa0a 	mul.w	sl, r4, sl
 802226a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802226e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022272:	44de      	add	lr, fp
 8022274:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022278:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802227c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022280:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022284:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022288:	ea4e 040a 	orr.w	r4, lr, sl
 802228c:	940c      	str	r4, [sp, #48]	; 0x30
 802228e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022290:	2cff      	cmp	r4, #255	; 0xff
 8022292:	d021      	beq.n	80222d8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022294:	9c08      	ldr	r4, [sp, #32]
 8022296:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802229a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802229c:	fb04 fb0b 	mul.w	fp, r4, fp
 80222a0:	9c08      	ldr	r4, [sp, #32]
 80222a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80222a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80222ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80222b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80222b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80222bc:	44de      	add	lr, fp
 80222be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80222c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80222c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80222ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80222ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80222d2:	ea4e 040a 	orr.w	r4, lr, sl
 80222d6:	9408      	str	r4, [sp, #32]
 80222d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222da:	2cff      	cmp	r4, #255	; 0xff
 80222dc:	d021      	beq.n	8022322 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80222de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222e0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80222e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222e6:	fb04 fb0b 	mul.w	fp, r4, fp
 80222ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80222ec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80222f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80222f2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80222f6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80222fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80222fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022302:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022306:	44de      	add	lr, fp
 8022308:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802230c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022310:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022314:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022318:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802231c:	ea4e 040a 	orr.w	r4, lr, sl
 8022320:	940d      	str	r4, [sp, #52]	; 0x34
 8022322:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022324:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022328:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802232c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022330:	9c08      	ldr	r4, [sp, #32]
 8022332:	fb08 fc0c 	mul.w	ip, r8, ip
 8022336:	fb03 cc0e 	mla	ip, r3, lr, ip
 802233a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802233e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022340:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022344:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022348:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802234a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802234e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022352:	fb08 f80e 	mul.w	r8, r8, lr
 8022356:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802235a:	fb03 8202 	mla	r2, r3, r2, r8
 802235e:	9b08      	ldr	r3, [sp, #32]
 8022360:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022364:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8022368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802236a:	fb01 220a 	mla	r2, r1, sl, r2
 802236e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8022372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022374:	fb09 2901 	mla	r9, r9, r1, r2
 8022378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802237a:	4343      	muls	r3, r0
 802237c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022380:	1c58      	adds	r0, r3, #1
 8022382:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022386:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802238a:	783b      	ldrb	r3, [r7, #0]
 802238c:	ea4c 0c09 	orr.w	ip, ip, r9
 8022390:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022394:	fa5f f28c 	uxtb.w	r2, ip
 8022398:	b2c0      	uxtb	r0, r0
 802239a:	fb12 f201 	smulbb	r2, r2, r1
 802239e:	fb03 2300 	mla	r3, r3, r0, r2
 80223a2:	b29b      	uxth	r3, r3
 80223a4:	1c5a      	adds	r2, r3, #1
 80223a6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223aa:	787a      	ldrb	r2, [r7, #1]
 80223ac:	fb12 f200 	smulbb	r2, r2, r0
 80223b0:	121b      	asrs	r3, r3, #8
 80223b2:	703b      	strb	r3, [r7, #0]
 80223b4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80223b8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80223bc:	fb03 2301 	mla	r3, r3, r1, r2
 80223c0:	b29b      	uxth	r3, r3
 80223c2:	1c5a      	adds	r2, r3, #1
 80223c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80223c8:	121b      	asrs	r3, r3, #8
 80223ca:	707b      	strb	r3, [r7, #1]
 80223cc:	78bb      	ldrb	r3, [r7, #2]
 80223ce:	fb13 f000 	smulbb	r0, r3, r0
 80223d2:	fb0c 0c01 	mla	ip, ip, r1, r0
 80223d6:	fa1f fc8c 	uxth.w	ip, ip
 80223da:	f10c 0301 	add.w	r3, ip, #1
 80223de:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80223e2:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80223e6:	f887 c002 	strb.w	ip, [r7, #2]
 80223ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223ec:	3703      	adds	r7, #3
 80223ee:	441d      	add	r5, r3
 80223f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80223f2:	441e      	add	r6, r3
 80223f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80223f6:	3b01      	subs	r3, #1
 80223f8:	9318      	str	r3, [sp, #96]	; 0x60
 80223fa:	e69f      	b.n	802213c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80223fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80223fe:	441d      	add	r5, r3
 8022400:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022402:	441e      	add	r6, r3
 8022404:	9b07      	ldr	r3, [sp, #28]
 8022406:	3b01      	subs	r3, #1
 8022408:	9307      	str	r3, [sp, #28]
 802240a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802240c:	3303      	adds	r3, #3
 802240e:	930a      	str	r3, [sp, #40]	; 0x28
 8022410:	e674      	b.n	80220fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8022412:	d025      	beq.n	8022460 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8022414:	9b07      	ldr	r3, [sp, #28]
 8022416:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8022418:	3b01      	subs	r3, #1
 802241a:	fb00 5003 	mla	r0, r0, r3, r5
 802241e:	1400      	asrs	r0, r0, #16
 8022420:	f53f ae89 	bmi.w	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022424:	3901      	subs	r1, #1
 8022426:	4288      	cmp	r0, r1
 8022428:	f6bf ae85 	bge.w	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802242c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802242e:	fb01 6303 	mla	r3, r1, r3, r6
 8022432:	141b      	asrs	r3, r3, #16
 8022434:	f53f ae7f 	bmi.w	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022438:	3a01      	subs	r2, #1
 802243a:	4293      	cmp	r3, r2
 802243c:	f6bf ae7b 	bge.w	8022136 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022442:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022446:	f103 0e03 	add.w	lr, r3, #3
 802244a:	f1bb 0f00 	cmp.w	fp, #0
 802244e:	dc6e      	bgt.n	802252e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8022450:	9b07      	ldr	r3, [sp, #28]
 8022452:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022458:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802245c:	4423      	add	r3, r4
 802245e:	930a      	str	r3, [sp, #40]	; 0x28
 8022460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8022462:	2b00      	cmp	r3, #0
 8022464:	f340 81ab 	ble.w	80227be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8022468:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802246c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802246e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022472:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022476:	eef0 6a62 	vmov.f32	s13, s5
 802247a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802247e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022482:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022486:	ee16 5a90 	vmov	r5, s13
 802248a:	eef0 6a43 	vmov.f32	s13, s6
 802248e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022492:	ee16 6a90 	vmov	r6, s13
 8022496:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802249a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802249e:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224a2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80224a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80224aa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80224ae:	ee12 2a90 	vmov	r2, s5
 80224b2:	eef0 2a47 	vmov.f32	s5, s14
 80224b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ba:	ee13 2a10 	vmov	r2, s6
 80224be:	9329      	str	r3, [sp, #164]	; 0xa4
 80224c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224c2:	eeb0 3a67 	vmov.f32	s6, s15
 80224c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80224ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80224cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80224ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80224d0:	3b01      	subs	r3, #1
 80224d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80224d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80224d6:	bf08      	it	eq
 80224d8:	4613      	moveq	r3, r2
 80224da:	9307      	str	r3, [sp, #28]
 80224dc:	e600      	b.n	80220e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80224de:	f1bc 0f00 	cmp.w	ip, #0
 80224e2:	f43f ae6e 	beq.w	80221c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80224e6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80224ea:	9308      	str	r3, [sp, #32]
 80224ec:	0e1b      	lsrs	r3, r3, #24
 80224ee:	9311      	str	r3, [sp, #68]	; 0x44
 80224f0:	e667      	b.n	80221c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80224f2:	f112 0801 	adds.w	r8, r2, #1
 80224f6:	f53f af78 	bmi.w	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80224fa:	45c6      	cmp	lr, r8
 80224fc:	f6ff af75 	blt.w	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022500:	f110 0801 	adds.w	r8, r0, #1
 8022504:	f53f af71 	bmi.w	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8022508:	4543      	cmp	r3, r8
 802250a:	f6ff af6e 	blt.w	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802250e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8022510:	b21b      	sxth	r3, r3
 8022512:	9201      	str	r2, [sp, #4]
 8022514:	9300      	str	r3, [sp, #0]
 8022516:	fa0f f38e 	sxth.w	r3, lr
 802251a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802251c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022520:	e9cd c404 	strd	ip, r4, [sp, #16]
 8022524:	4639      	mov	r1, r7
 8022526:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8022528:	f7ff fc79 	bl	8021e1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 802252c:	e75d      	b.n	80223ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 802252e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022530:	142f      	asrs	r7, r5, #16
 8022532:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022534:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022538:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802253c:	1433      	asrs	r3, r6, #16
 802253e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022542:	fb02 7303 	mla	r3, r2, r3, r7
 8022546:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802254a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 802254e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022552:	2900      	cmp	r1, #0
 8022554:	f000 812a 	beq.w	80227ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8022558:	687c      	ldr	r4, [r7, #4]
 802255a:	940e      	str	r4, [sp, #56]	; 0x38
 802255c:	0e24      	lsrs	r4, r4, #24
 802255e:	9415      	str	r4, [sp, #84]	; 0x54
 8022560:	b178      	cbz	r0, 8022582 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022562:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8022566:	3a01      	subs	r2, #1
 8022568:	0092      	lsls	r2, r2, #2
 802256a:	3204      	adds	r2, #4
 802256c:	eb07 0802 	add.w	r8, r7, r2
 8022570:	58ba      	ldr	r2, [r7, r2]
 8022572:	9209      	str	r2, [sp, #36]	; 0x24
 8022574:	0e12      	lsrs	r2, r2, #24
 8022576:	9212      	str	r2, [sp, #72]	; 0x48
 8022578:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802257c:	920f      	str	r2, [sp, #60]	; 0x3c
 802257e:	0e12      	lsrs	r2, r2, #24
 8022580:	9216      	str	r2, [sp, #88]	; 0x58
 8022582:	b289      	uxth	r1, r1
 8022584:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022586:	b280      	uxth	r0, r0
 8022588:	fb01 f900 	mul.w	r9, r1, r0
 802258c:	0109      	lsls	r1, r1, #4
 802258e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022592:	eba1 0809 	sub.w	r8, r1, r9
 8022596:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 802259a:	9915      	ldr	r1, [sp, #84]	; 0x54
 802259c:	b280      	uxth	r0, r0
 802259e:	fa1f f888 	uxth.w	r8, r8
 80225a2:	1a12      	subs	r2, r2, r0
 80225a4:	fb08 f101 	mul.w	r1, r8, r1
 80225a8:	b292      	uxth	r2, r2
 80225aa:	fb02 110c 	mla	r1, r2, ip, r1
 80225ae:	fb00 1104 	mla	r1, r0, r4, r1
 80225b2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80225b4:	fb09 1104 	mla	r1, r9, r4, r1
 80225b8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80225bc:	2900      	cmp	r1, #0
 80225be:	f000 80ec 	beq.w	802279a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 80225c2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80225c6:	d019      	beq.n	80225fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80225c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80225cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80225d0:	fb0c fa0a 	mul.w	sl, ip, sl
 80225d4:	fb0c fc03 	mul.w	ip, ip, r3
 80225d8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80225dc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80225e0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80225e4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80225e8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80225ec:	4453      	add	r3, sl
 80225ee:	0a3f      	lsrs	r7, r7, #8
 80225f0:	0a1b      	lsrs	r3, r3, #8
 80225f2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80225f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80225fa:	433b      	orrs	r3, r7
 80225fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80225fe:	2cff      	cmp	r4, #255	; 0xff
 8022600:	d020      	beq.n	8022644 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8022602:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022604:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022608:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802260a:	4367      	muls	r7, r4
 802260c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802260e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022612:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022616:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8022618:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802261c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022620:	fb04 fa0a 	mul.w	sl, r4, sl
 8022624:	44bc      	add	ip, r7
 8022626:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802262a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802262e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022632:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022636:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802263a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802263e:	ea4c 040a 	orr.w	r4, ip, sl
 8022642:	940e      	str	r4, [sp, #56]	; 0x38
 8022644:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022646:	2cff      	cmp	r4, #255	; 0xff
 8022648:	d020      	beq.n	802268c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802264a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802264c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022650:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022652:	4367      	muls	r7, r4
 8022654:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8022656:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802265a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802265e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022660:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022664:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022668:	fb04 fa0a 	mul.w	sl, r4, sl
 802266c:	44bc      	add	ip, r7
 802266e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022672:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022676:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802267a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802267e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022682:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022686:	ea4c 040a 	orr.w	r4, ip, sl
 802268a:	9409      	str	r4, [sp, #36]	; 0x24
 802268c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802268e:	2cff      	cmp	r4, #255	; 0xff
 8022690:	d020      	beq.n	80226d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8022692:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022694:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8022698:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802269a:	4367      	muls	r7, r4
 802269c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802269e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80226a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80226a6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80226a8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80226ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80226b4:	44bc      	add	ip, r7
 80226b6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80226ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80226be:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80226c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80226c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80226ca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80226ce:	ea4c 040a 	orr.w	r4, ip, sl
 80226d2:	940f      	str	r4, [sp, #60]	; 0x3c
 80226d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80226d6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80226da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80226de:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80226e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80226e4:	fb08 f707 	mul.w	r7, r8, r7
 80226e8:	fb02 770c 	mla	r7, r2, ip, r7
 80226ec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80226f0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80226f2:	fb00 770c 	mla	r7, r0, ip, r7
 80226f6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80226fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80226fc:	fb09 770c 	mla	r7, r9, ip, r7
 8022700:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8022704:	fb08 f80c 	mul.w	r8, r8, ip
 8022708:	0a3f      	lsrs	r7, r7, #8
 802270a:	fb02 8303 	mla	r3, r2, r3, r8
 802270e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022710:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8022714:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8022718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802271a:	fb00 330a 	mla	r3, r0, sl, r3
 802271e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8022722:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022724:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802272a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802272e:	434b      	muls	r3, r1
 8022730:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022734:	1c59      	adds	r1, r3, #1
 8022736:	ea47 070c 	orr.w	r7, r7, ip
 802273a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802273e:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022742:	b2fa      	uxtb	r2, r7
 8022744:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8022748:	fb12 f200 	smulbb	r2, r2, r0
 802274c:	b2c9      	uxtb	r1, r1
 802274e:	fb03 2301 	mla	r3, r3, r1, r2
 8022752:	b29b      	uxth	r3, r3
 8022754:	1c5a      	adds	r2, r3, #1
 8022756:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802275a:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 802275e:	fb12 f201 	smulbb	r2, r2, r1
 8022762:	121b      	asrs	r3, r3, #8
 8022764:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8022768:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802276c:	0c3f      	lsrs	r7, r7, #16
 802276e:	fb03 2300 	mla	r3, r3, r0, r2
 8022772:	b29b      	uxth	r3, r3
 8022774:	1c5a      	adds	r2, r3, #1
 8022776:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802277a:	121b      	asrs	r3, r3, #8
 802277c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022780:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022784:	fb13 f101 	smulbb	r1, r3, r1
 8022788:	fb07 1700 	mla	r7, r7, r0, r1
 802278c:	b2bf      	uxth	r7, r7
 802278e:	1c79      	adds	r1, r7, #1
 8022790:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022794:	123f      	asrs	r7, r7, #8
 8022796:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802279a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802279c:	f10e 0e03 	add.w	lr, lr, #3
 80227a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80227a4:	441d      	add	r5, r3
 80227a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80227a8:	441e      	add	r6, r3
 80227aa:	e64e      	b.n	802244a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80227ac:	2800      	cmp	r0, #0
 80227ae:	f43f aee8 	beq.w	8022582 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80227b2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80227b6:	9209      	str	r2, [sp, #36]	; 0x24
 80227b8:	0e12      	lsrs	r2, r2, #24
 80227ba:	9212      	str	r2, [sp, #72]	; 0x48
 80227bc:	e6e1      	b.n	8022582 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 80227be:	b01d      	add	sp, #116	; 0x74
 80227c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080227c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 80227c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227c8:	b087      	sub	sp, #28
 80227ca:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 80227ce:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80227d2:	fb05 7003 	mla	r0, r5, r3, r7
 80227d6:	2d00      	cmp	r5, #0
 80227d8:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 80227dc:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 80227e0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80227e4:	f2c0 810a 	blt.w	80229fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80227e8:	45a8      	cmp	r8, r5
 80227ea:	f340 8107 	ble.w	80229fc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80227ee:	2f00      	cmp	r7, #0
 80227f0:	f2c0 8102 	blt.w	80229f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80227f4:	42bb      	cmp	r3, r7
 80227f6:	f340 80ff 	ble.w	80229f8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80227fa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80227fe:	1c7a      	adds	r2, r7, #1
 8022800:	f100 80ff 	bmi.w	8022a02 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8022804:	4293      	cmp	r3, r2
 8022806:	f340 80fc 	ble.w	8022a02 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 802280a:	2c00      	cmp	r4, #0
 802280c:	f000 80fb 	beq.w	8022a06 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8022810:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022814:	3501      	adds	r5, #1
 8022816:	f100 80fa 	bmi.w	8022a0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 802281a:	45a8      	cmp	r8, r5
 802281c:	f340 80f7 	ble.w	8022a0e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 8022820:	f1be 0f00 	cmp.w	lr, #0
 8022824:	f000 80f6 	beq.w	8022a14 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 8022828:	2f00      	cmp	r7, #0
 802282a:	f2c0 80ee 	blt.w	8022a0a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 802282e:	42bb      	cmp	r3, r7
 8022830:	f340 80eb 	ble.w	8022a0a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 8022834:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022838:	3701      	adds	r7, #1
 802283a:	f100 80ee 	bmi.w	8022a1a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 802283e:	42bb      	cmp	r3, r7
 8022840:	f340 80eb 	ble.w	8022a1a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8022844:	2c00      	cmp	r4, #0
 8022846:	f000 80ea 	beq.w	8022a1e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 802284a:	3301      	adds	r3, #1
 802284c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022850:	fa1f fc84 	uxth.w	ip, r4
 8022854:	fa1f fe8e 	uxth.w	lr, lr
 8022858:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802285c:	fb0c f90e 	mul.w	r9, ip, lr
 8022860:	0e13      	lsrs	r3, r2, #24
 8022862:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022866:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 802286a:	9302      	str	r3, [sp, #8]
 802286c:	ebac 0709 	sub.w	r7, ip, r9
 8022870:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8022874:	fa1f f48e 	uxth.w	r4, lr
 8022878:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 802287c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022880:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022884:	fb0a fe0e 	mul.w	lr, sl, lr
 8022888:	1b1b      	subs	r3, r3, r4
 802288a:	fb0a f606 	mul.w	r6, sl, r6
 802288e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022892:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022896:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 802289a:	b29b      	uxth	r3, r3
 802289c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80228a0:	b2bf      	uxth	r7, r7
 80228a2:	9301      	str	r3, [sp, #4]
 80228a4:	44e6      	add	lr, ip
 80228a6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80228aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228ae:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80228b2:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80228b6:	9303      	str	r3, [sp, #12]
 80228b8:	0a33      	lsrs	r3, r6, #8
 80228ba:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80228be:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228c2:	9304      	str	r3, [sp, #16]
 80228c4:	fb0b f606 	mul.w	r6, fp, r6
 80228c8:	fb0b f000 	mul.w	r0, fp, r0
 80228cc:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80228d0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 80228d4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80228d8:	44b6      	add	lr, r6
 80228da:	f500 7680 	add.w	r6, r0, #256	; 0x100
 80228de:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80228e2:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 80228e6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80228ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80228ee:	fb08 f606 	mul.w	r6, r8, r6
 80228f2:	0a03      	lsrs	r3, r0, #8
 80228f4:	fb08 f505 	mul.w	r5, r8, r5
 80228f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80228fc:	0a30      	lsrs	r0, r6, #8
 80228fe:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022902:	9305      	str	r3, [sp, #20]
 8022904:	0e13      	lsrs	r3, r2, #24
 8022906:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802290a:	fb0e fe07 	mul.w	lr, lr, r7
 802290e:	4430      	add	r0, r6
 8022910:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8022914:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022918:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 802291c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022920:	0a00      	lsrs	r0, r0, #8
 8022922:	435e      	muls	r6, r3
 8022924:	0a2d      	lsrs	r5, r5, #8
 8022926:	435a      	muls	r2, r3
 8022928:	9b03      	ldr	r3, [sp, #12]
 802292a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802292e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8022932:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8022936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802293a:	44b4      	add	ip, r6
 802293c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8022940:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022944:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022948:	9e01      	ldr	r6, [sp, #4]
 802294a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802294e:	fb03 ee06 	mla	lr, r3, r6, lr
 8022952:	9b04      	ldr	r3, [sp, #16]
 8022954:	0a12      	lsrs	r2, r2, #8
 8022956:	fb0c ee09 	mla	lr, ip, r9, lr
 802295a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 802295e:	9b05      	ldr	r3, [sp, #20]
 8022960:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022964:	fb00 ee04 	mla	lr, r0, r4, lr
 8022968:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802296c:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 8022970:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 8022974:	9b01      	ldr	r3, [sp, #4]
 8022976:	fb07 fe0e 	mul.w	lr, r7, lr
 802297a:	fb07 f70b 	mul.w	r7, r7, fp
 802297e:	fb03 ee06 	mla	lr, r3, r6, lr
 8022982:	fb03 730a 	mla	r3, r3, sl, r7
 8022986:	fb09 e202 	mla	r2, r9, r2, lr
 802298a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802298e:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022992:	fb04 3408 	mla	r4, r4, r8, r3
 8022996:	9b02      	ldr	r3, [sp, #8]
 8022998:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802299c:	fb09 4903 	mla	r9, r9, r3, r4
 80229a0:	780b      	ldrb	r3, [r1, #0]
 80229a2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80229a6:	ea6f 2929 	mvn.w	r9, r9, asr #8
 80229aa:	ea40 0e0e 	orr.w	lr, r0, lr
 80229ae:	fa5f f989 	uxtb.w	r9, r9
 80229b2:	fb03 f209 	mul.w	r2, r3, r9
 80229b6:	1c53      	adds	r3, r2, #1
 80229b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80229bc:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 80229c0:	700b      	strb	r3, [r1, #0]
 80229c2:	784b      	ldrb	r3, [r1, #1]
 80229c4:	fb03 f309 	mul.w	r3, r3, r9
 80229c8:	1c5a      	adds	r2, r3, #1
 80229ca:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80229ce:	ea4f 231e 	mov.w	r3, lr, lsr #8
 80229d2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 80229d6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80229da:	704b      	strb	r3, [r1, #1]
 80229dc:	788b      	ldrb	r3, [r1, #2]
 80229de:	fb03 f909 	mul.w	r9, r3, r9
 80229e2:	f109 0301 	add.w	r3, r9, #1
 80229e6:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80229ea:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 80229ee:	f881 e002 	strb.w	lr, [r1, #2]
 80229f2:	b007      	add	sp, #28
 80229f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229f8:	2600      	movs	r6, #0
 80229fa:	e700      	b.n	80227fe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 80229fc:	2000      	movs	r0, #0
 80229fe:	4606      	mov	r6, r0
 8022a00:	e708      	b.n	8022814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022a02:	2000      	movs	r0, #0
 8022a04:	e706      	b.n	8022814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022a06:	4620      	mov	r0, r4
 8022a08:	e704      	b.n	8022814 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022a0a:	2500      	movs	r5, #0
 8022a0c:	e714      	b.n	8022838 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8022a0e:	2200      	movs	r2, #0
 8022a10:	4615      	mov	r5, r2
 8022a12:	e71d      	b.n	8022850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022a14:	4672      	mov	r2, lr
 8022a16:	4675      	mov	r5, lr
 8022a18:	e71a      	b.n	8022850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022a1a:	2200      	movs	r2, #0
 8022a1c:	e718      	b.n	8022850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022a1e:	4622      	mov	r2, r4
 8022a20:	e716      	b.n	8022850 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08022a22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022a22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a26:	b099      	sub	sp, #100	; 0x64
 8022a28:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 8022a2c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022a2e:	9017      	str	r0, [sp, #92]	; 0x5c
 8022a30:	9306      	str	r3, [sp, #24]
 8022a32:	6850      	ldr	r0, [r2, #4]
 8022a34:	6812      	ldr	r2, [r2, #0]
 8022a36:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022a3a:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 8022a3e:	fb00 1303 	mla	r3, r0, r3, r1
 8022a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022a46:	18d3      	adds	r3, r2, r3
 8022a48:	9309      	str	r3, [sp, #36]	; 0x24
 8022a4a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	930e      	str	r3, [sp, #56]	; 0x38
 8022a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	dc03      	bgt.n	8022a5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022a56:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	f340 8360 	ble.w	802311e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022a5e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022a60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022a64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022a68:	1e48      	subs	r0, r1, #1
 8022a6a:	1e57      	subs	r7, r2, #1
 8022a6c:	9b06      	ldr	r3, [sp, #24]
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	f340 817b 	ble.w	8022d6a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8022a74:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022a78:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022a7c:	d406      	bmi.n	8022a8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022a7e:	4584      	cmp	ip, r0
 8022a80:	da04      	bge.n	8022a8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	db02      	blt.n	8022a8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022a86:	42bb      	cmp	r3, r7
 8022a88:	f2c0 8170 	blt.w	8022d6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022a8c:	f11c 0c01 	adds.w	ip, ip, #1
 8022a90:	f100 8160 	bmi.w	8022d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022a94:	4561      	cmp	r1, ip
 8022a96:	f2c0 815d 	blt.w	8022d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022a9a:	3301      	adds	r3, #1
 8022a9c:	f100 815a 	bmi.w	8022d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022aa0:	429a      	cmp	r2, r3
 8022aa2:	f2c0 8157 	blt.w	8022d54 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022aa6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022aaa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022aac:	f1b8 0f00 	cmp.w	r8, #0
 8022ab0:	f340 8179 	ble.w	8022da6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022ab4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022ab6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022aba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022abc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022ac0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022ac4:	142a      	asrs	r2, r5, #16
 8022ac6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022aca:	689b      	ldr	r3, [r3, #8]
 8022acc:	f100 81be 	bmi.w	8022e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022ad0:	f103 39ff 	add.w	r9, r3, #4294967295
 8022ad4:	454a      	cmp	r2, r9
 8022ad6:	f280 81b9 	bge.w	8022e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022ada:	f1bc 0f00 	cmp.w	ip, #0
 8022ade:	f2c0 81b5 	blt.w	8022e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022ae2:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022ae6:	45cc      	cmp	ip, r9
 8022ae8:	f280 81b0 	bge.w	8022e4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022aec:	b21b      	sxth	r3, r3
 8022aee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022af0:	fb0c 2203 	mla	r2, ip, r3, r2
 8022af4:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022af8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022afc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022b00:	2900      	cmp	r1, #0
 8022b02:	f000 8197 	beq.w	8022e34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022b06:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022b0a:	940a      	str	r4, [sp, #40]	; 0x28
 8022b0c:	0e24      	lsrs	r4, r4, #24
 8022b0e:	9411      	str	r4, [sp, #68]	; 0x44
 8022b10:	b180      	cbz	r0, 8022b34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022b12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8022b16:	3b01      	subs	r3, #1
 8022b18:	009b      	lsls	r3, r3, #2
 8022b1a:	3304      	adds	r3, #4
 8022b1c:	eb09 0c03 	add.w	ip, r9, r3
 8022b20:	f859 3003 	ldr.w	r3, [r9, r3]
 8022b24:	9307      	str	r3, [sp, #28]
 8022b26:	0e1b      	lsrs	r3, r3, #24
 8022b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8022b2a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8022b30:	0e1b      	lsrs	r3, r3, #24
 8022b32:	9312      	str	r3, [sp, #72]	; 0x48
 8022b34:	b289      	uxth	r1, r1
 8022b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022b38:	b280      	uxth	r0, r0
 8022b3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022b3c:	fb01 fa00 	mul.w	sl, r1, r0
 8022b40:	0109      	lsls	r1, r1, #4
 8022b42:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022b46:	eba1 090a 	sub.w	r9, r1, sl
 8022b4a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8022b4e:	b280      	uxth	r0, r0
 8022b50:	fa1f f989 	uxth.w	r9, r9
 8022b54:	1a09      	subs	r1, r1, r0
 8022b56:	fb09 f303 	mul.w	r3, r9, r3
 8022b5a:	b289      	uxth	r1, r1
 8022b5c:	fb01 330e 	mla	r3, r1, lr, r3
 8022b60:	fb00 3304 	mla	r3, r0, r4, r3
 8022b64:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022b66:	fb0a 3304 	mla	r3, sl, r4, r3
 8022b6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	f000 80e8 	beq.w	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022b74:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022b78:	d01b      	beq.n	8022bb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022b7a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 8022b7e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022b82:	fb0e fb0b 	mul.w	fp, lr, fp
 8022b86:	fb0e fe02 	mul.w	lr, lr, r2
 8022b8a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022b8e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8022b92:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022b96:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022b9a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022b9e:	445a      	add	r2, fp
 8022ba0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022ba4:	0a12      	lsrs	r2, r2, #8
 8022ba6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022baa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8022bae:	ea42 020c 	orr.w	r2, r2, ip
 8022bb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bb4:	2cff      	cmp	r4, #255	; 0xff
 8022bb6:	d021      	beq.n	8022bfc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022bb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022bba:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022bbe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bc0:	fb04 fc0c 	mul.w	ip, r4, ip
 8022bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022bc6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022bca:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022bce:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022bd0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022bd4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bd8:	fb04 fb0b 	mul.w	fp, r4, fp
 8022bdc:	44e6      	add	lr, ip
 8022bde:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022be2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022be6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022bea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022bee:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022bf2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022bf6:	ea4e 040b 	orr.w	r4, lr, fp
 8022bfa:	940a      	str	r4, [sp, #40]	; 0x28
 8022bfc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022bfe:	2cff      	cmp	r4, #255	; 0xff
 8022c00:	d021      	beq.n	8022c46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022c02:	9c07      	ldr	r4, [sp, #28]
 8022c04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022c08:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022c0a:	fb04 fc0c 	mul.w	ip, r4, ip
 8022c0e:	9c07      	ldr	r4, [sp, #28]
 8022c10:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022c14:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022c18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022c1a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022c1e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c22:	fb04 fb0b 	mul.w	fp, r4, fp
 8022c26:	44e6      	add	lr, ip
 8022c28:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022c2c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c30:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022c34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c38:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022c3c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022c40:	ea4e 040b 	orr.w	r4, lr, fp
 8022c44:	9407      	str	r4, [sp, #28]
 8022c46:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c48:	2cff      	cmp	r4, #255	; 0xff
 8022c4a:	d021      	beq.n	8022c90 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022c4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c4e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022c52:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c54:	fb04 fc0c 	mul.w	ip, r4, ip
 8022c58:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c5a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022c5e:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 8022c62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022c64:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022c68:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c6c:	fb04 fb0b 	mul.w	fp, r4, fp
 8022c70:	44e6      	add	lr, ip
 8022c72:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8022c76:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022c7a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022c7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022c82:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022c86:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8022c8a:	ea4e 040b 	orr.w	r4, lr, fp
 8022c8e:	940b      	str	r4, [sp, #44]	; 0x2c
 8022c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022c92:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8022c96:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022c9a:	2bff      	cmp	r3, #255	; 0xff
 8022c9c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022ca0:	9c07      	ldr	r4, [sp, #28]
 8022ca2:	fb09 fc0c 	mul.w	ip, r9, ip
 8022ca6:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022caa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022cae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022cb0:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022cb4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8022cb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022cba:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022cbe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022cc2:	fb09 f90e 	mul.w	r9, r9, lr
 8022cc6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022cca:	fb01 9202 	mla	r2, r1, r2, r9
 8022cce:	9907      	ldr	r1, [sp, #28]
 8022cd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022cd4:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 8022cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022cda:	fb00 220b 	mla	r2, r0, fp, r2
 8022cde:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8022ce2:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022ce6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022cea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022cee:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022cf2:	fa5f f08c 	uxtb.w	r0, ip
 8022cf6:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022cfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022cfe:	f000 80a2 	beq.w	8022e46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8022d02:	43db      	mvns	r3, r3
 8022d04:	783a      	ldrb	r2, [r7, #0]
 8022d06:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022d0a:	b2db      	uxtb	r3, r3
 8022d0c:	fb02 fe03 	mul.w	lr, r2, r3
 8022d10:	fb0a fa03 	mul.w	sl, sl, r3
 8022d14:	f10e 0201 	add.w	r2, lr, #1
 8022d18:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022d1c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022d20:	703a      	strb	r2, [r7, #0]
 8022d22:	787a      	ldrb	r2, [r7, #1]
 8022d24:	fb02 f003 	mul.w	r0, r2, r3
 8022d28:	f10a 0301 	add.w	r3, sl, #1
 8022d2c:	1c42      	adds	r2, r0, #1
 8022d2e:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022d32:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022d36:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022d3a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022d3e:	707a      	strb	r2, [r7, #1]
 8022d40:	f887 c002 	strb.w	ip, [r7, #2]
 8022d44:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022d46:	3703      	adds	r7, #3
 8022d48:	f108 38ff 	add.w	r8, r8, #4294967295
 8022d4c:	441d      	add	r5, r3
 8022d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022d50:	441e      	add	r6, r3
 8022d52:	e6ab      	b.n	8022aac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022d54:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022d56:	441d      	add	r5, r3
 8022d58:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022d5a:	441e      	add	r6, r3
 8022d5c:	9b06      	ldr	r3, [sp, #24]
 8022d5e:	3b01      	subs	r3, #1
 8022d60:	9306      	str	r3, [sp, #24]
 8022d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d64:	3303      	adds	r3, #3
 8022d66:	9309      	str	r3, [sp, #36]	; 0x24
 8022d68:	e680      	b.n	8022a6c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022d6a:	d024      	beq.n	8022db6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022d6c:	9b06      	ldr	r3, [sp, #24]
 8022d6e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8022d70:	3b01      	subs	r3, #1
 8022d72:	fb00 5003 	mla	r0, r0, r3, r5
 8022d76:	1400      	asrs	r0, r0, #16
 8022d78:	f53f ae95 	bmi.w	8022aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d7c:	3901      	subs	r1, #1
 8022d7e:	4288      	cmp	r0, r1
 8022d80:	f6bf ae91 	bge.w	8022aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d84:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022d86:	fb01 6303 	mla	r3, r1, r3, r6
 8022d8a:	141b      	asrs	r3, r3, #16
 8022d8c:	f53f ae8b 	bmi.w	8022aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d90:	3a01      	subs	r2, #1
 8022d92:	4293      	cmp	r3, r2
 8022d94:	f6bf ae87 	bge.w	8022aa6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d9a:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022d9e:	1cdf      	adds	r7, r3, #3
 8022da0:	f1bb 0f00 	cmp.w	fp, #0
 8022da4:	dc6e      	bgt.n	8022e84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022da6:	9b06      	ldr	r3, [sp, #24]
 8022da8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022db2:	4423      	add	r3, r4
 8022db4:	9309      	str	r3, [sp, #36]	; 0x24
 8022db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	f340 81b0 	ble.w	802311e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022dc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022dc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022dc8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022dcc:	eef0 6a62 	vmov.f32	s13, s5
 8022dd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022dd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022dd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022ddc:	ee16 5a90 	vmov	r5, s13
 8022de0:	eef0 6a43 	vmov.f32	s13, s6
 8022de4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022de8:	ee16 6a90 	vmov	r6, s13
 8022dec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022df0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022df4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022df8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022dfc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e04:	ee12 2a90 	vmov	r2, s5
 8022e08:	eef0 2a47 	vmov.f32	s5, s14
 8022e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e10:	ee13 2a10 	vmov	r2, s6
 8022e14:	9325      	str	r3, [sp, #148]	; 0x94
 8022e16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022e18:	eeb0 3a67 	vmov.f32	s6, s15
 8022e1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e20:	9326      	str	r3, [sp, #152]	; 0x98
 8022e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022e24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8022e26:	3b01      	subs	r3, #1
 8022e28:	9315      	str	r3, [sp, #84]	; 0x54
 8022e2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022e2c:	bf08      	it	eq
 8022e2e:	4613      	moveq	r3, r2
 8022e30:	9306      	str	r3, [sp, #24]
 8022e32:	e60d      	b.n	8022a50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022e34:	2800      	cmp	r0, #0
 8022e36:	f43f ae7d 	beq.w	8022b34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022e3a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8022e3e:	9307      	str	r3, [sp, #28]
 8022e40:	0e1b      	lsrs	r3, r3, #24
 8022e42:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e44:	e676      	b.n	8022b34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022e46:	7038      	strb	r0, [r7, #0]
 8022e48:	7079      	strb	r1, [r7, #1]
 8022e4a:	e779      	b.n	8022d40 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8022e4c:	f112 0901 	adds.w	r9, r2, #1
 8022e50:	f53f af78 	bmi.w	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e54:	454b      	cmp	r3, r9
 8022e56:	f6ff af75 	blt.w	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e5a:	f11c 0901 	adds.w	r9, ip, #1
 8022e5e:	f53f af71 	bmi.w	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e62:	45ce      	cmp	lr, r9
 8022e64:	f6ff af6e 	blt.w	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e68:	b21b      	sxth	r3, r3
 8022e6a:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8022e6e:	fa0f f28e 	sxth.w	r2, lr
 8022e72:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022e76:	9200      	str	r2, [sp, #0]
 8022e78:	4639      	mov	r1, r7
 8022e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022e7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8022e7e:	f7ff fca1 	bl	80227c4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8022e82:	e75f      	b.n	8022d44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022e84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022e86:	1429      	asrs	r1, r5, #16
 8022e88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022e8a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8022e8e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8022e92:	1433      	asrs	r3, r6, #16
 8022e94:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022e98:	fb0c 1303 	mla	r3, ip, r3, r1
 8022e9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022e9e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022ea2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022ea6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8022eaa:	2a00      	cmp	r2, #0
 8022eac:	f000 8129 	beq.w	8023102 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8022eb0:	684c      	ldr	r4, [r1, #4]
 8022eb2:	940c      	str	r4, [sp, #48]	; 0x30
 8022eb4:	0e24      	lsrs	r4, r4, #24
 8022eb6:	9413      	str	r4, [sp, #76]	; 0x4c
 8022eb8:	b198      	cbz	r0, 8022ee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8022eba:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8022ebe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8022ec2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8022ec6:	f10c 0c04 	add.w	ip, ip, #4
 8022eca:	eb01 080c 	add.w	r8, r1, ip
 8022ece:	f851 100c 	ldr.w	r1, [r1, ip]
 8022ed2:	9108      	str	r1, [sp, #32]
 8022ed4:	0e09      	lsrs	r1, r1, #24
 8022ed6:	9110      	str	r1, [sp, #64]	; 0x40
 8022ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022edc:	910d      	str	r1, [sp, #52]	; 0x34
 8022ede:	0e09      	lsrs	r1, r1, #24
 8022ee0:	9114      	str	r1, [sp, #80]	; 0x50
 8022ee2:	b292      	uxth	r2, r2
 8022ee4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022ee6:	b280      	uxth	r0, r0
 8022ee8:	fb02 f900 	mul.w	r9, r2, r0
 8022eec:	0112      	lsls	r2, r2, #4
 8022eee:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022ef2:	eba2 0809 	sub.w	r8, r2, r9
 8022ef6:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8022efa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022efc:	b280      	uxth	r0, r0
 8022efe:	fa1f f888 	uxth.w	r8, r8
 8022f02:	1a09      	subs	r1, r1, r0
 8022f04:	fb08 f202 	mul.w	r2, r8, r2
 8022f08:	b289      	uxth	r1, r1
 8022f0a:	fb01 220e 	mla	r2, r1, lr, r2
 8022f0e:	fb00 2204 	mla	r2, r0, r4, r2
 8022f12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022f14:	fb09 2204 	mla	r2, r9, r4, r2
 8022f18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8022f1c:	2a00      	cmp	r2, #0
 8022f1e:	f000 80e8 	beq.w	80230f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 8022f22:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8022f26:	d01b      	beq.n	8022f60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 8022f28:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022f2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022f30:	fb0e fa0a 	mul.w	sl, lr, sl
 8022f34:	fb0e fe03 	mul.w	lr, lr, r3
 8022f38:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022f3c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022f40:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8022f44:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f48:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022f4c:	4453      	add	r3, sl
 8022f4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022f52:	0a1b      	lsrs	r3, r3, #8
 8022f54:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022f58:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f5c:	ea43 030c 	orr.w	r3, r3, ip
 8022f60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f62:	2cff      	cmp	r4, #255	; 0xff
 8022f64:	d021      	beq.n	8022faa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8022f66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f68:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022f6c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f6e:	fb04 fc0c 	mul.w	ip, r4, ip
 8022f72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f74:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022f78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8022f7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022f7e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022f82:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f86:	fb04 fa0a 	mul.w	sl, r4, sl
 8022f8a:	44e6      	add	lr, ip
 8022f8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022f90:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022f94:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022f98:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022f9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fa0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fa4:	ea4e 040a 	orr.w	r4, lr, sl
 8022fa8:	940c      	str	r4, [sp, #48]	; 0x30
 8022faa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022fac:	2cff      	cmp	r4, #255	; 0xff
 8022fae:	d021      	beq.n	8022ff4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8022fb0:	9c08      	ldr	r4, [sp, #32]
 8022fb2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8022fb6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022fb8:	fb04 fc0c 	mul.w	ip, r4, ip
 8022fbc:	9c08      	ldr	r4, [sp, #32]
 8022fbe:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8022fc2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022fc4:	fb04 fa0e 	mul.w	sl, r4, lr
 8022fc8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022fcc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8022fd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fd4:	44e6      	add	lr, ip
 8022fd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8022fda:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022fde:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022fe2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022fe6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8022fea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022fee:	ea4e 040a 	orr.w	r4, lr, sl
 8022ff2:	9408      	str	r4, [sp, #32]
 8022ff4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022ff6:	2cff      	cmp	r4, #255	; 0xff
 8022ff8:	d021      	beq.n	802303e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8022ffa:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022ffc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8023000:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023002:	fb04 fc0c 	mul.w	ip, r4, ip
 8023006:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023008:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802300c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8023010:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023012:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023016:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802301a:	fb04 fa0a 	mul.w	sl, r4, sl
 802301e:	44e6      	add	lr, ip
 8023020:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8023024:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023028:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802302c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023030:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023034:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023038:	ea4e 040a 	orr.w	r4, lr, sl
 802303c:	940d      	str	r4, [sp, #52]	; 0x34
 802303e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023040:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023048:	2aff      	cmp	r2, #255	; 0xff
 802304a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802304e:	9c08      	ldr	r4, [sp, #32]
 8023050:	fb08 fc0c 	mul.w	ip, r8, ip
 8023054:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023058:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802305c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802305e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023062:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8023066:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8023068:	fb09 cc0e 	mla	ip, r9, lr, ip
 802306c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8023070:	fb08 f80e 	mul.w	r8, r8, lr
 8023074:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023078:	fb01 8303 	mla	r3, r1, r3, r8
 802307c:	9908      	ldr	r1, [sp, #32]
 802307e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023082:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8023086:	990d      	ldr	r1, [sp, #52]	; 0x34
 8023088:	fb00 330a 	mla	r3, r0, sl, r3
 802308c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 8023090:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023094:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023098:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802309c:	ea4c 0c0e 	orr.w	ip, ip, lr
 80230a0:	fa5f f08c 	uxtb.w	r0, ip
 80230a4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 80230a8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80230ac:	d032      	beq.n	8023114 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 80230ae:	43d2      	mvns	r2, r2
 80230b0:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 80230b4:	b2d2      	uxtb	r2, r2
 80230b6:	fb0e fe02 	mul.w	lr, lr, r2
 80230ba:	f10e 0301 	add.w	r3, lr, #1
 80230be:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80230c2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80230c6:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 80230ca:	4350      	muls	r0, r2
 80230cc:	f807 3c03 	strb.w	r3, [r7, #-3]
 80230d0:	1c43      	adds	r3, r0, #1
 80230d2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80230d6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80230da:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80230de:	4353      	muls	r3, r2
 80230e0:	f807 1c02 	strb.w	r1, [r7, #-2]
 80230e4:	1c5a      	adds	r2, r3, #1
 80230e6:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80230ea:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80230ee:	f807 cc01 	strb.w	ip, [r7, #-1]
 80230f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80230f4:	3703      	adds	r7, #3
 80230f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80230fa:	441d      	add	r5, r3
 80230fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80230fe:	441e      	add	r6, r3
 8023100:	e64e      	b.n	8022da0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8023102:	2800      	cmp	r0, #0
 8023104:	f43f aeed 	beq.w	8022ee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023108:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 802310c:	9108      	str	r1, [sp, #32]
 802310e:	0e09      	lsrs	r1, r1, #24
 8023110:	9110      	str	r1, [sp, #64]	; 0x40
 8023112:	e6e6      	b.n	8022ee2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 8023114:	f807 0c03 	strb.w	r0, [r7, #-3]
 8023118:	f807 1c02 	strb.w	r1, [r7, #-2]
 802311c:	e7e7      	b.n	80230ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 802311e:	b019      	add	sp, #100	; 0x64
 8023120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023124 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 8023124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023128:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802312c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023130:	2c00      	cmp	r4, #0
 8023132:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023136:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802313a:	fb00 4e03 	mla	lr, r0, r3, r4
 802313e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8023142:	f2c0 80b8 	blt.w	80232b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023146:	45a1      	cmp	r9, r4
 8023148:	f340 80b5 	ble.w	80232b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802314c:	2800      	cmp	r0, #0
 802314e:	f2c0 80b2 	blt.w	80232b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023152:	4580      	cmp	r8, r0
 8023154:	f340 80af 	ble.w	80232b6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023158:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802315c:	f01e 0f01 	tst.w	lr, #1
 8023160:	5d56      	ldrb	r6, [r2, r5]
 8023162:	bf0c      	ite	eq
 8023164:	f006 060f 	andeq.w	r6, r6, #15
 8023168:	1136      	asrne	r6, r6, #4
 802316a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802316e:	b2f6      	uxtb	r6, r6
 8023170:	f114 0a01 	adds.w	sl, r4, #1
 8023174:	f100 80a1 	bmi.w	80232ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023178:	45d1      	cmp	r9, sl
 802317a:	f340 809e 	ble.w	80232ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802317e:	2800      	cmp	r0, #0
 8023180:	f2c0 809b 	blt.w	80232ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023184:	4580      	cmp	r8, r0
 8023186:	f340 8098 	ble.w	80232ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802318a:	2f00      	cmp	r7, #0
 802318c:	f000 8097 	beq.w	80232be <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8023190:	f10e 0b01 	add.w	fp, lr, #1
 8023194:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023198:	f01b 0f01 	tst.w	fp, #1
 802319c:	5d55      	ldrb	r5, [r2, r5]
 802319e:	bf0c      	ite	eq
 80231a0:	f005 050f 	andeq.w	r5, r5, #15
 80231a4:	112d      	asrne	r5, r5, #4
 80231a6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80231aa:	b2ed      	uxtb	r5, r5
 80231ac:	f1bc 0f00 	cmp.w	ip, #0
 80231b0:	f000 8089 	beq.w	80232c6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 80231b4:	2c00      	cmp	r4, #0
 80231b6:	f100 0001 	add.w	r0, r0, #1
 80231ba:	f2c0 8082 	blt.w	80232c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80231be:	45a1      	cmp	r9, r4
 80231c0:	dd7f      	ble.n	80232c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80231c2:	2800      	cmp	r0, #0
 80231c4:	db7d      	blt.n	80232c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80231c6:	4580      	cmp	r8, r0
 80231c8:	dd7b      	ble.n	80232c2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 80231ca:	eb03 0b0e 	add.w	fp, r3, lr
 80231ce:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80231d2:	f01b 0f01 	tst.w	fp, #1
 80231d6:	5d14      	ldrb	r4, [r2, r4]
 80231d8:	bf0c      	ite	eq
 80231da:	f004 040f 	andeq.w	r4, r4, #15
 80231de:	1124      	asrne	r4, r4, #4
 80231e0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80231e4:	b2e4      	uxtb	r4, r4
 80231e6:	f1ba 0f00 	cmp.w	sl, #0
 80231ea:	db6f      	blt.n	80232cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80231ec:	45d1      	cmp	r9, sl
 80231ee:	dd6d      	ble.n	80232cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80231f0:	2800      	cmp	r0, #0
 80231f2:	db6b      	blt.n	80232cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80231f4:	4580      	cmp	r8, r0
 80231f6:	dd69      	ble.n	80232cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80231f8:	2f00      	cmp	r7, #0
 80231fa:	d069      	beq.n	80232d0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80231fc:	3301      	adds	r3, #1
 80231fe:	449e      	add	lr, r3
 8023200:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023204:	f01e 0f01 	tst.w	lr, #1
 8023208:	5cd0      	ldrb	r0, [r2, r3]
 802320a:	bf0c      	ite	eq
 802320c:	f000 000f 	andeq.w	r0, r0, #15
 8023210:	1100      	asrne	r0, r0, #4
 8023212:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023216:	b2c3      	uxtb	r3, r0
 8023218:	b2ba      	uxth	r2, r7
 802321a:	fa1f fc8c 	uxth.w	ip, ip
 802321e:	fb02 f00c 	mul.w	r0, r2, ip
 8023222:	0112      	lsls	r2, r2, #4
 8023224:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8023228:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802322c:	1a12      	subs	r2, r2, r0
 802322e:	fa1f fc8c 	uxth.w	ip, ip
 8023232:	b292      	uxth	r2, r2
 8023234:	eba7 070c 	sub.w	r7, r7, ip
 8023238:	436a      	muls	r2, r5
 802323a:	b2bf      	uxth	r7, r7
 802323c:	fb06 2207 	mla	r2, r6, r7, r2
 8023240:	fb0c 2404 	mla	r4, ip, r4, r2
 8023244:	fb00 4303 	mla	r3, r0, r3, r4
 8023248:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802324c:	b38b      	cbz	r3, 80232b2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 802324e:	4a21      	ldr	r2, [pc, #132]	; (80232d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8023250:	6814      	ldr	r4, [r2, #0]
 8023252:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 8023256:	b2e5      	uxtb	r5, r4
 8023258:	4353      	muls	r3, r2
 802325a:	1c5a      	adds	r2, r3, #1
 802325c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023260:	1212      	asrs	r2, r2, #8
 8023262:	b290      	uxth	r0, r2
 8023264:	43d2      	mvns	r2, r2
 8023266:	fb15 f500 	smulbb	r5, r5, r0
 802326a:	b2d3      	uxtb	r3, r2
 802326c:	780a      	ldrb	r2, [r1, #0]
 802326e:	fb02 5203 	mla	r2, r2, r3, r5
 8023272:	b292      	uxth	r2, r2
 8023274:	1c55      	adds	r5, r2, #1
 8023276:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802327a:	784d      	ldrb	r5, [r1, #1]
 802327c:	fb15 f503 	smulbb	r5, r5, r3
 8023280:	1212      	asrs	r2, r2, #8
 8023282:	700a      	strb	r2, [r1, #0]
 8023284:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8023288:	f3c4 4407 	ubfx	r4, r4, #16, #8
 802328c:	fb02 5200 	mla	r2, r2, r0, r5
 8023290:	b292      	uxth	r2, r2
 8023292:	1c55      	adds	r5, r2, #1
 8023294:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8023298:	1212      	asrs	r2, r2, #8
 802329a:	704a      	strb	r2, [r1, #1]
 802329c:	788a      	ldrb	r2, [r1, #2]
 802329e:	fb12 f303 	smulbb	r3, r2, r3
 80232a2:	fb04 3300 	mla	r3, r4, r0, r3
 80232a6:	b29b      	uxth	r3, r3
 80232a8:	1c5a      	adds	r2, r3, #1
 80232aa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80232ae:	121b      	asrs	r3, r3, #8
 80232b0:	708b      	strb	r3, [r1, #2]
 80232b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232b6:	2600      	movs	r6, #0
 80232b8:	e75a      	b.n	8023170 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 80232ba:	2500      	movs	r5, #0
 80232bc:	e776      	b.n	80231ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80232be:	463d      	mov	r5, r7
 80232c0:	e774      	b.n	80231ac <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 80232c2:	2400      	movs	r4, #0
 80232c4:	e78f      	b.n	80231e6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 80232c6:	4663      	mov	r3, ip
 80232c8:	4664      	mov	r4, ip
 80232ca:	e7a5      	b.n	8023218 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80232cc:	2300      	movs	r3, #0
 80232ce:	e7a3      	b.n	8023218 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80232d0:	463b      	mov	r3, r7
 80232d2:	e7a1      	b.n	8023218 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 80232d4:	24010070 	.word	0x24010070

080232d8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232dc:	b097      	sub	sp, #92	; 0x5c
 80232de:	9214      	str	r2, [sp, #80]	; 0x50
 80232e0:	9309      	str	r3, [sp, #36]	; 0x24
 80232e2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80232e4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80232e8:	9015      	str	r0, [sp, #84]	; 0x54
 80232ea:	910c      	str	r1, [sp, #48]	; 0x30
 80232ec:	6850      	ldr	r0, [r2, #4]
 80232ee:	930e      	str	r3, [sp, #56]	; 0x38
 80232f0:	6812      	ldr	r2, [r2, #0]
 80232f2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80232f6:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 80232fa:	fb00 1303 	mla	r3, r0, r3, r1
 80232fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023302:	eb02 0a03 	add.w	sl, r2, r3
 8023306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023308:	689b      	ldr	r3, [r3, #8]
 802330a:	3301      	adds	r3, #1
 802330c:	f023 0301 	bic.w	r3, r3, #1
 8023310:	930f      	str	r3, [sp, #60]	; 0x3c
 8023312:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023314:	681f      	ldr	r7, [r3, #0]
 8023316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023318:	2b00      	cmp	r3, #0
 802331a:	dc03      	bgt.n	8023324 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802331c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802331e:	2b00      	cmp	r3, #0
 8023320:	f340 8247 	ble.w	80237b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 8023324:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023326:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802332a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802332e:	1e48      	subs	r0, r1, #1
 8023330:	f102 3cff 	add.w	ip, r2, #4294967295
 8023334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023336:	2b00      	cmp	r3, #0
 8023338:	f340 80e5 	ble.w	8023506 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802333c:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8023340:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023344:	d406      	bmi.n	8023354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023346:	4586      	cmp	lr, r0
 8023348:	da04      	bge.n	8023354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802334a:	2b00      	cmp	r3, #0
 802334c:	db02      	blt.n	8023354 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802334e:	4563      	cmp	r3, ip
 8023350:	f2c0 80da 	blt.w	8023508 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023354:	f11e 0e01 	adds.w	lr, lr, #1
 8023358:	f100 80cb 	bmi.w	80234f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802335c:	4571      	cmp	r1, lr
 802335e:	f2c0 80c8 	blt.w	80234f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023362:	3301      	adds	r3, #1
 8023364:	f100 80c5 	bmi.w	80234f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023368:	429a      	cmp	r2, r3
 802336a:	f2c0 80c2 	blt.w	80234f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802336e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023370:	46d0      	mov	r8, sl
 8023372:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023376:	930d      	str	r3, [sp, #52]	; 0x34
 8023378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802337a:	2b00      	cmp	r3, #0
 802337c:	f340 80e3 	ble.w	8023546 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023380:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023382:	1430      	asrs	r0, r6, #16
 8023384:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023388:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802338c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023390:	142b      	asrs	r3, r5, #16
 8023392:	f100 812e 	bmi.w	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023396:	f10c 3bff 	add.w	fp, ip, #4294967295
 802339a:	455b      	cmp	r3, fp
 802339c:	f280 8129 	bge.w	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80233a0:	2800      	cmp	r0, #0
 80233a2:	f2c0 8126 	blt.w	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80233a6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80233aa:	4558      	cmp	r0, fp
 80233ac:	f280 8121 	bge.w	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80233b0:	fb00 3309 	mla	r3, r0, r9, r3
 80233b4:	0858      	lsrs	r0, r3, #1
 80233b6:	07dc      	lsls	r4, r3, #31
 80233b8:	f817 c000 	ldrb.w	ip, [r7, r0]
 80233bc:	bf54      	ite	pl
 80233be:	f00c 0c0f 	andpl.w	ip, ip, #15
 80233c2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80233c6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80233ca:	fa5f fc8c 	uxtb.w	ip, ip
 80233ce:	2a00      	cmp	r2, #0
 80233d0:	f000 80fe 	beq.w	80235d0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80233d4:	1c58      	adds	r0, r3, #1
 80233d6:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80233da:	07c0      	lsls	r0, r0, #31
 80233dc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80233e0:	bf54      	ite	pl
 80233e2:	f00e 0e0f 	andpl.w	lr, lr, #15
 80233e6:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80233ea:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80233ee:	fa5f f08e 	uxtb.w	r0, lr
 80233f2:	9010      	str	r0, [sp, #64]	; 0x40
 80233f4:	b1d9      	cbz	r1, 802342e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80233f6:	444b      	add	r3, r9
 80233f8:	0858      	lsrs	r0, r3, #1
 80233fa:	07dc      	lsls	r4, r3, #31
 80233fc:	f103 0301 	add.w	r3, r3, #1
 8023400:	5c38      	ldrb	r0, [r7, r0]
 8023402:	bf54      	ite	pl
 8023404:	f000 000f 	andpl.w	r0, r0, #15
 8023408:	1100      	asrmi	r0, r0, #4
 802340a:	07dc      	lsls	r4, r3, #31
 802340c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023410:	b2c0      	uxtb	r0, r0
 8023412:	900a      	str	r0, [sp, #40]	; 0x28
 8023414:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8023418:	f817 e000 	ldrb.w	lr, [r7, r0]
 802341c:	bf54      	ite	pl
 802341e:	f00e 030f 	andpl.w	r3, lr, #15
 8023422:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8023426:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802342a:	b2db      	uxtb	r3, r3
 802342c:	9311      	str	r3, [sp, #68]	; 0x44
 802342e:	b292      	uxth	r2, r2
 8023430:	b289      	uxth	r1, r1
 8023432:	0113      	lsls	r3, r2, #4
 8023434:	fb02 f001 	mul.w	r0, r2, r1
 8023438:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802343a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802343e:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8023442:	1a1b      	subs	r3, r3, r0
 8023444:	b289      	uxth	r1, r1
 8023446:	b29b      	uxth	r3, r3
 8023448:	ebae 0e01 	sub.w	lr, lr, r1
 802344c:	4353      	muls	r3, r2
 802344e:	fa1f fe8e 	uxth.w	lr, lr
 8023452:	fb0c 320e 	mla	r2, ip, lr, r3
 8023456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023458:	fb01 2203 	mla	r2, r1, r3, r2
 802345c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802345e:	fb00 2203 	mla	r2, r0, r3, r2
 8023462:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8023466:	2a00      	cmp	r2, #0
 8023468:	d039      	beq.n	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802346a:	4bc7      	ldr	r3, [pc, #796]	; (8023788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802346c:	6819      	ldr	r1, [r3, #0]
 802346e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023470:	fa5f fc81 	uxtb.w	ip, r1
 8023474:	435a      	muls	r2, r3
 8023476:	1c53      	adds	r3, r2, #1
 8023478:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802347c:	1212      	asrs	r2, r2, #8
 802347e:	b290      	uxth	r0, r2
 8023480:	43d2      	mvns	r2, r2
 8023482:	fb1c fc00 	smulbb	ip, ip, r0
 8023486:	b2d3      	uxtb	r3, r2
 8023488:	f898 2000 	ldrb.w	r2, [r8]
 802348c:	fb02 c203 	mla	r2, r2, r3, ip
 8023490:	b292      	uxth	r2, r2
 8023492:	f102 0c01 	add.w	ip, r2, #1
 8023496:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802349a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802349e:	fb1c fc03 	smulbb	ip, ip, r3
 80234a2:	1212      	asrs	r2, r2, #8
 80234a4:	f888 2000 	strb.w	r2, [r8]
 80234a8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80234ac:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80234b0:	fb02 c200 	mla	r2, r2, r0, ip
 80234b4:	b292      	uxth	r2, r2
 80234b6:	f102 0c01 	add.w	ip, r2, #1
 80234ba:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 80234be:	1212      	asrs	r2, r2, #8
 80234c0:	f888 2001 	strb.w	r2, [r8, #1]
 80234c4:	f898 2002 	ldrb.w	r2, [r8, #2]
 80234c8:	fb12 f303 	smulbb	r3, r2, r3
 80234cc:	fb01 3300 	mla	r3, r1, r0, r3
 80234d0:	b29b      	uxth	r3, r3
 80234d2:	1c5a      	adds	r2, r3, #1
 80234d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80234d8:	121b      	asrs	r3, r3, #8
 80234da:	f888 3002 	strb.w	r3, [r8, #2]
 80234de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80234e0:	f108 0803 	add.w	r8, r8, #3
 80234e4:	441d      	add	r5, r3
 80234e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80234e8:	441e      	add	r6, r3
 80234ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234ec:	3b01      	subs	r3, #1
 80234ee:	930d      	str	r3, [sp, #52]	; 0x34
 80234f0:	e742      	b.n	8023378 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80234f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80234f4:	f10a 0a03 	add.w	sl, sl, #3
 80234f8:	441d      	add	r5, r3
 80234fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80234fc:	441e      	add	r6, r3
 80234fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023500:	3b01      	subs	r3, #1
 8023502:	9309      	str	r3, [sp, #36]	; 0x24
 8023504:	e716      	b.n	8023334 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023506:	d024      	beq.n	8023552 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802350a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802350c:	3b01      	subs	r3, #1
 802350e:	fb00 5003 	mla	r0, r0, r3, r5
 8023512:	1400      	asrs	r0, r0, #16
 8023514:	f53f af2b 	bmi.w	802336e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023518:	3901      	subs	r1, #1
 802351a:	4288      	cmp	r0, r1
 802351c:	f6bf af27 	bge.w	802336e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023520:	9924      	ldr	r1, [sp, #144]	; 0x90
 8023522:	fb01 6303 	mla	r3, r1, r3, r6
 8023526:	141b      	asrs	r3, r3, #16
 8023528:	f53f af21 	bmi.w	802336e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802352c:	3a01      	subs	r2, #1
 802352e:	4293      	cmp	r3, r2
 8023530:	f6bf af1d 	bge.w	802336e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023534:	f10a 0e03 	add.w	lr, sl, #3
 8023538:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 802353c:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 8023540:	f1b8 0f00 	cmp.w	r8, #0
 8023544:	dc76      	bgt.n	8023634 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023548:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802354c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023550:	44a2      	add	sl, r4
 8023552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023554:	2b00      	cmp	r3, #0
 8023556:	f340 812c 	ble.w	80237b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802355a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802355e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023560:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023564:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023568:	eef0 6a62 	vmov.f32	s13, s5
 802356c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023570:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023574:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023578:	ee16 5a90 	vmov	r5, s13
 802357c:	eef0 6a43 	vmov.f32	s13, s6
 8023580:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023584:	ee16 6a90 	vmov	r6, s13
 8023588:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802358c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023590:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023594:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023598:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802359c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80235a0:	ee12 2a90 	vmov	r2, s5
 80235a4:	eef0 2a47 	vmov.f32	s5, s14
 80235a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235ac:	ee13 2a10 	vmov	r2, s6
 80235b0:	9323      	str	r3, [sp, #140]	; 0x8c
 80235b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235b4:	eeb0 3a67 	vmov.f32	s6, s15
 80235b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80235bc:	9324      	str	r3, [sp, #144]	; 0x90
 80235be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80235c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80235c2:	3b01      	subs	r3, #1
 80235c4:	930c      	str	r3, [sp, #48]	; 0x30
 80235c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80235c8:	bf08      	it	eq
 80235ca:	4613      	moveq	r3, r2
 80235cc:	9309      	str	r3, [sp, #36]	; 0x24
 80235ce:	e6a2      	b.n	8023316 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80235d0:	2900      	cmp	r1, #0
 80235d2:	f43f af2c 	beq.w	802342e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80235d6:	eb09 0003 	add.w	r0, r9, r3
 80235da:	0843      	lsrs	r3, r0, #1
 80235dc:	07c0      	lsls	r0, r0, #31
 80235de:	5cfb      	ldrb	r3, [r7, r3]
 80235e0:	bf54      	ite	pl
 80235e2:	f003 030f 	andpl.w	r3, r3, #15
 80235e6:	111b      	asrmi	r3, r3, #4
 80235e8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80235ec:	b2db      	uxtb	r3, r3
 80235ee:	930a      	str	r3, [sp, #40]	; 0x28
 80235f0:	e71d      	b.n	802342e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80235f2:	f113 0b01 	adds.w	fp, r3, #1
 80235f6:	f53f af72 	bmi.w	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80235fa:	45dc      	cmp	ip, fp
 80235fc:	f6ff af6f 	blt.w	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023600:	f110 0b01 	adds.w	fp, r0, #1
 8023604:	f53f af6b 	bmi.w	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023608:	45de      	cmp	lr, fp
 802360a:	f6ff af68 	blt.w	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802360e:	9302      	str	r3, [sp, #8]
 8023610:	fa0f f38e 	sxth.w	r3, lr
 8023614:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023616:	9301      	str	r3, [sp, #4]
 8023618:	fa0f f38c 	sxth.w	r3, ip
 802361c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023620:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023624:	9300      	str	r3, [sp, #0]
 8023626:	463a      	mov	r2, r7
 8023628:	464b      	mov	r3, r9
 802362a:	4641      	mov	r1, r8
 802362c:	9815      	ldr	r0, [sp, #84]	; 0x54
 802362e:	f7ff fd79 	bl	8023124 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 8023632:	e754      	b.n	80234de <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023634:	142a      	asrs	r2, r5, #16
 8023636:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802363a:	1433      	asrs	r3, r6, #16
 802363c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023640:	fb09 2303 	mla	r3, r9, r3, r2
 8023644:	085a      	lsrs	r2, r3, #1
 8023646:	07dc      	lsls	r4, r3, #31
 8023648:	5cba      	ldrb	r2, [r7, r2]
 802364a:	bf54      	ite	pl
 802364c:	f002 020f 	andpl.w	r2, r2, #15
 8023650:	1112      	asrmi	r2, r2, #4
 8023652:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023656:	b2d2      	uxtb	r2, r2
 8023658:	2900      	cmp	r1, #0
 802365a:	f000 8097 	beq.w	802378c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 802365e:	f103 0b01 	add.w	fp, r3, #1
 8023662:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 8023666:	f01b 0f01 	tst.w	fp, #1
 802366a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802366e:	bf0c      	ite	eq
 8023670:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023674:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8023678:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802367c:	fa5f f48c 	uxtb.w	r4, ip
 8023680:	9412      	str	r4, [sp, #72]	; 0x48
 8023682:	b300      	cbz	r0, 80236c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023684:	444b      	add	r3, r9
 8023686:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802368a:	07dc      	lsls	r4, r3, #31
 802368c:	f103 0301 	add.w	r3, r3, #1
 8023690:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023694:	bf54      	ite	pl
 8023696:	f00c 0c0f 	andpl.w	ip, ip, #15
 802369a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802369e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80236a2:	fa5f f48c 	uxtb.w	r4, ip
 80236a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80236aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80236ac:	07dc      	lsls	r4, r3, #31
 80236ae:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80236b2:	bf54      	ite	pl
 80236b4:	f00c 0c0f 	andpl.w	ip, ip, #15
 80236b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80236bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80236c0:	fa5f f38c 	uxtb.w	r3, ip
 80236c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80236c6:	b289      	uxth	r1, r1
 80236c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80236ca:	b280      	uxth	r0, r0
 80236cc:	fb01 f300 	mul.w	r3, r1, r0
 80236d0:	0109      	lsls	r1, r1, #4
 80236d2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80236d6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80236da:	1ac9      	subs	r1, r1, r3
 80236dc:	b280      	uxth	r0, r0
 80236de:	b289      	uxth	r1, r1
 80236e0:	ebac 0c00 	sub.w	ip, ip, r0
 80236e4:	4361      	muls	r1, r4
 80236e6:	fa1f fc8c 	uxth.w	ip, ip
 80236ea:	fb02 120c 	mla	r2, r2, ip, r1
 80236ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80236f0:	fb00 2001 	mla	r0, r0, r1, r2
 80236f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80236f6:	fb03 0302 	mla	r3, r3, r2, r0
 80236fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80236fe:	2b00      	cmp	r3, #0
 8023700:	d039      	beq.n	8023776 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023702:	4a21      	ldr	r2, [pc, #132]	; (8023788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023704:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8023708:	6810      	ldr	r0, [r2, #0]
 802370a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802370c:	fa5f fc80 	uxtb.w	ip, r0
 8023710:	4353      	muls	r3, r2
 8023712:	1c5a      	adds	r2, r3, #1
 8023714:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023718:	121b      	asrs	r3, r3, #8
 802371a:	b29a      	uxth	r2, r3
 802371c:	43db      	mvns	r3, r3
 802371e:	fb1c fc02 	smulbb	ip, ip, r2
 8023722:	b2db      	uxtb	r3, r3
 8023724:	fb01 c103 	mla	r1, r1, r3, ip
 8023728:	b289      	uxth	r1, r1
 802372a:	f101 0c01 	add.w	ip, r1, #1
 802372e:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023732:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 8023736:	fb1c fc03 	smulbb	ip, ip, r3
 802373a:	1209      	asrs	r1, r1, #8
 802373c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023740:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023744:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8023748:	fb01 c102 	mla	r1, r1, r2, ip
 802374c:	b289      	uxth	r1, r1
 802374e:	f101 0c01 	add.w	ip, r1, #1
 8023752:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 8023756:	1209      	asrs	r1, r1, #8
 8023758:	f80e 1c02 	strb.w	r1, [lr, #-2]
 802375c:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023760:	fb11 f303 	smulbb	r3, r1, r3
 8023764:	fb00 3002 	mla	r0, r0, r2, r3
 8023768:	b280      	uxth	r0, r0
 802376a:	1c42      	adds	r2, r0, #1
 802376c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023770:	1200      	asrs	r0, r0, #8
 8023772:	f80e 0c01 	strb.w	r0, [lr, #-1]
 8023776:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8023778:	f10e 0e03 	add.w	lr, lr, #3
 802377c:	f108 38ff 	add.w	r8, r8, #4294967295
 8023780:	441d      	add	r5, r3
 8023782:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023784:	441e      	add	r6, r3
 8023786:	e6db      	b.n	8023540 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8023788:	24010070 	.word	0x24010070
 802378c:	2800      	cmp	r0, #0
 802378e:	d09a      	beq.n	80236c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023790:	444b      	add	r3, r9
 8023792:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8023796:	07db      	lsls	r3, r3, #31
 8023798:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802379c:	bf54      	ite	pl
 802379e:	f00c 0c0f 	andpl.w	ip, ip, #15
 80237a2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80237a6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80237aa:	fa5f f38c 	uxtb.w	r3, ip
 80237ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80237b0:	e789      	b.n	80236c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 80237b2:	b017      	add	sp, #92	; 0x5c
 80237b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080237b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 80237b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237bc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 80237c0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80237c4:	2d00      	cmp	r5, #0
 80237c6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80237ca:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80237ce:	fb04 5e03 	mla	lr, r4, r3, r5
 80237d2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80237d6:	f2c0 80b1 	blt.w	802393c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80237da:	45a9      	cmp	r9, r5
 80237dc:	f340 80ae 	ble.w	802393c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80237e0:	2c00      	cmp	r4, #0
 80237e2:	f2c0 80ab 	blt.w	802393c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80237e6:	45a0      	cmp	r8, r4
 80237e8:	f340 80a8 	ble.w	802393c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80237ec:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80237f0:	f01e 0f01 	tst.w	lr, #1
 80237f4:	5d97      	ldrb	r7, [r2, r6]
 80237f6:	bf0c      	ite	eq
 80237f8:	f007 070f 	andeq.w	r7, r7, #15
 80237fc:	113f      	asrne	r7, r7, #4
 80237fe:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 8023802:	b2ff      	uxtb	r7, r7
 8023804:	f115 0a01 	adds.w	sl, r5, #1
 8023808:	f100 809a 	bmi.w	8023940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802380c:	45d1      	cmp	r9, sl
 802380e:	f340 8097 	ble.w	8023940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023812:	2c00      	cmp	r4, #0
 8023814:	f2c0 8094 	blt.w	8023940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 8023818:	45a0      	cmp	r8, r4
 802381a:	f340 8091 	ble.w	8023940 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 802381e:	2800      	cmp	r0, #0
 8023820:	f000 8090 	beq.w	8023944 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 8023824:	f10e 0b01 	add.w	fp, lr, #1
 8023828:	ea4f 065b 	mov.w	r6, fp, lsr #1
 802382c:	f01b 0f01 	tst.w	fp, #1
 8023830:	5d96      	ldrb	r6, [r2, r6]
 8023832:	bf0c      	ite	eq
 8023834:	f006 060f 	andeq.w	r6, r6, #15
 8023838:	1136      	asrne	r6, r6, #4
 802383a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802383e:	b2f6      	uxtb	r6, r6
 8023840:	f1bc 0f00 	cmp.w	ip, #0
 8023844:	f000 8082 	beq.w	802394c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8023848:	2d00      	cmp	r5, #0
 802384a:	f104 0401 	add.w	r4, r4, #1
 802384e:	db7b      	blt.n	8023948 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023850:	45a9      	cmp	r9, r5
 8023852:	dd79      	ble.n	8023948 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023854:	2c00      	cmp	r4, #0
 8023856:	db77      	blt.n	8023948 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023858:	45a0      	cmp	r8, r4
 802385a:	dd75      	ble.n	8023948 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 802385c:	eb03 0b0e 	add.w	fp, r3, lr
 8023860:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023864:	f01b 0f01 	tst.w	fp, #1
 8023868:	5d55      	ldrb	r5, [r2, r5]
 802386a:	bf0c      	ite	eq
 802386c:	f005 050f 	andeq.w	r5, r5, #15
 8023870:	112d      	asrne	r5, r5, #4
 8023872:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023876:	b2ed      	uxtb	r5, r5
 8023878:	f1ba 0f00 	cmp.w	sl, #0
 802387c:	db69      	blt.n	8023952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802387e:	45d1      	cmp	r9, sl
 8023880:	dd67      	ble.n	8023952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023882:	2c00      	cmp	r4, #0
 8023884:	db65      	blt.n	8023952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023886:	45a0      	cmp	r8, r4
 8023888:	dd63      	ble.n	8023952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 802388a:	2800      	cmp	r0, #0
 802388c:	d063      	beq.n	8023956 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 802388e:	3301      	adds	r3, #1
 8023890:	449e      	add	lr, r3
 8023892:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023896:	f01e 0f01 	tst.w	lr, #1
 802389a:	5cd4      	ldrb	r4, [r2, r3]
 802389c:	bf0c      	ite	eq
 802389e:	f004 040f 	andeq.w	r4, r4, #15
 80238a2:	1124      	asrne	r4, r4, #4
 80238a4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80238a8:	b2e3      	uxtb	r3, r4
 80238aa:	b282      	uxth	r2, r0
 80238ac:	fa1f fc8c 	uxth.w	ip, ip
 80238b0:	fb02 f40c 	mul.w	r4, r2, ip
 80238b4:	0112      	lsls	r2, r2, #4
 80238b6:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 80238ba:	fa1f f08c 	uxth.w	r0, ip
 80238be:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 80238c2:	1b12      	subs	r2, r2, r4
 80238c4:	ebac 0c00 	sub.w	ip, ip, r0
 80238c8:	b292      	uxth	r2, r2
 80238ca:	fa1f fc8c 	uxth.w	ip, ip
 80238ce:	4372      	muls	r2, r6
 80238d0:	fb07 220c 	mla	r2, r7, ip, r2
 80238d4:	fb00 2005 	mla	r0, r0, r5, r2
 80238d8:	fb04 0303 	mla	r3, r4, r3, r0
 80238dc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238e0:	b353      	cbz	r3, 8023938 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 80238e2:	4a1e      	ldr	r2, [pc, #120]	; (802395c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 80238e4:	7808      	ldrb	r0, [r1, #0]
 80238e6:	6814      	ldr	r4, [r2, #0]
 80238e8:	b29a      	uxth	r2, r3
 80238ea:	43db      	mvns	r3, r3
 80238ec:	b2e5      	uxtb	r5, r4
 80238ee:	b2db      	uxtb	r3, r3
 80238f0:	fb15 f502 	smulbb	r5, r5, r2
 80238f4:	fb00 5003 	mla	r0, r0, r3, r5
 80238f8:	b280      	uxth	r0, r0
 80238fa:	1c45      	adds	r5, r0, #1
 80238fc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023900:	784d      	ldrb	r5, [r1, #1]
 8023902:	fb15 f503 	smulbb	r5, r5, r3
 8023906:	1200      	asrs	r0, r0, #8
 8023908:	7008      	strb	r0, [r1, #0]
 802390a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 802390e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023912:	fb00 5002 	mla	r0, r0, r2, r5
 8023916:	b280      	uxth	r0, r0
 8023918:	1c45      	adds	r5, r0, #1
 802391a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802391e:	1200      	asrs	r0, r0, #8
 8023920:	7048      	strb	r0, [r1, #1]
 8023922:	7888      	ldrb	r0, [r1, #2]
 8023924:	fb10 f303 	smulbb	r3, r0, r3
 8023928:	fb04 3202 	mla	r2, r4, r2, r3
 802392c:	b292      	uxth	r2, r2
 802392e:	1c53      	adds	r3, r2, #1
 8023930:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023934:	1212      	asrs	r2, r2, #8
 8023936:	708a      	strb	r2, [r1, #2]
 8023938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802393c:	2700      	movs	r7, #0
 802393e:	e761      	b.n	8023804 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8023940:	2600      	movs	r6, #0
 8023942:	e77d      	b.n	8023840 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023944:	4606      	mov	r6, r0
 8023946:	e77b      	b.n	8023840 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023948:	2500      	movs	r5, #0
 802394a:	e795      	b.n	8023878 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 802394c:	4663      	mov	r3, ip
 802394e:	4665      	mov	r5, ip
 8023950:	e7ab      	b.n	80238aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023952:	2300      	movs	r3, #0
 8023954:	e7a9      	b.n	80238aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023956:	4603      	mov	r3, r0
 8023958:	e7a7      	b.n	80238aa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 802395a:	bf00      	nop
 802395c:	24010070 	.word	0x24010070

08023960 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023964:	b093      	sub	sp, #76	; 0x4c
 8023966:	461c      	mov	r4, r3
 8023968:	920c      	str	r2, [sp, #48]	; 0x30
 802396a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802396c:	9011      	str	r0, [sp, #68]	; 0x44
 802396e:	9107      	str	r1, [sp, #28]
 8023970:	6850      	ldr	r0, [r2, #4]
 8023972:	6812      	ldr	r2, [r2, #0]
 8023974:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023978:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 802397c:	fb00 1303 	mla	r3, r0, r3, r1
 8023980:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023984:	eb02 0b03 	add.w	fp, r2, r3
 8023988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802398a:	689b      	ldr	r3, [r3, #8]
 802398c:	3301      	adds	r3, #1
 802398e:	f023 0301 	bic.w	r3, r3, #1
 8023992:	9309      	str	r3, [sp, #36]	; 0x24
 8023994:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023996:	f8d3 8000 	ldr.w	r8, [r3]
 802399a:	9b07      	ldr	r3, [sp, #28]
 802399c:	2b00      	cmp	r3, #0
 802399e:	dc03      	bgt.n	80239a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80239a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239a2:	2b00      	cmp	r3, #0
 80239a4:	f340 822b 	ble.w	8023dfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80239a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80239aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80239ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80239b2:	1e48      	subs	r0, r1, #1
 80239b4:	1e57      	subs	r7, r2, #1
 80239b6:	2c00      	cmp	r4, #0
 80239b8:	f340 80d7 	ble.w	8023b6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80239bc:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80239c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80239c4:	d406      	bmi.n	80239d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80239c6:	4584      	cmp	ip, r0
 80239c8:	da04      	bge.n	80239d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	db02      	blt.n	80239d4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80239ce:	42bb      	cmp	r3, r7
 80239d0:	f2c0 80cc 	blt.w	8023b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80239d4:	f11c 0c01 	adds.w	ip, ip, #1
 80239d8:	f100 80bf 	bmi.w	8023b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80239dc:	4561      	cmp	r1, ip
 80239de:	f2c0 80bc 	blt.w	8023b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80239e2:	3301      	adds	r3, #1
 80239e4:	f100 80b9 	bmi.w	8023b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80239e8:	429a      	cmp	r2, r3
 80239ea:	f2c0 80b6 	blt.w	8023b5a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80239ee:	46a2      	mov	sl, r4
 80239f0:	465f      	mov	r7, fp
 80239f2:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80239f6:	f1ba 0f00 	cmp.w	sl, #0
 80239fa:	f340 80d4 	ble.w	8023ba6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80239fe:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023a02:	1430      	asrs	r0, r6, #16
 8023a04:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023a08:	9308      	str	r3, [sp, #32]
 8023a0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023a0c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023a10:	142b      	asrs	r3, r5, #16
 8023a12:	f100 8124 	bmi.w	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023a16:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023a1a:	4293      	cmp	r3, r2
 8023a1c:	f280 811f 	bge.w	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023a20:	2800      	cmp	r0, #0
 8023a22:	f2c0 811c 	blt.w	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023a26:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023a2a:	4290      	cmp	r0, r2
 8023a2c:	f280 8117 	bge.w	8023c5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023a30:	fb00 3309 	mla	r3, r0, r9, r3
 8023a34:	0858      	lsrs	r0, r3, #1
 8023a36:	07da      	lsls	r2, r3, #31
 8023a38:	9a08      	ldr	r2, [sp, #32]
 8023a3a:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023a3e:	bf54      	ite	pl
 8023a40:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023a44:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023a48:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023a4c:	fa5f fc8c 	uxtb.w	ip, ip
 8023a50:	2a00      	cmp	r2, #0
 8023a52:	f000 80ed 	beq.w	8023c30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8023a56:	1c58      	adds	r0, r3, #1
 8023a58:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023a5c:	07c0      	lsls	r0, r0, #31
 8023a5e:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023a62:	bf54      	ite	pl
 8023a64:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023a68:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023a6c:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023a70:	fa5f fe8e 	uxtb.w	lr, lr
 8023a74:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8023a78:	b1c9      	cbz	r1, 8023aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023a7a:	444b      	add	r3, r9
 8023a7c:	0858      	lsrs	r0, r3, #1
 8023a7e:	07da      	lsls	r2, r3, #31
 8023a80:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023a84:	bf54      	ite	pl
 8023a86:	f000 000f 	andpl.w	r0, r0, #15
 8023a8a:	1100      	asrmi	r0, r0, #4
 8023a8c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023a90:	b2c0      	uxtb	r0, r0
 8023a92:	900a      	str	r0, [sp, #40]	; 0x28
 8023a94:	1c58      	adds	r0, r3, #1
 8023a96:	0843      	lsrs	r3, r0, #1
 8023a98:	07c2      	lsls	r2, r0, #31
 8023a9a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023a9e:	bf54      	ite	pl
 8023aa0:	f003 030f 	andpl.w	r3, r3, #15
 8023aa4:	111b      	asrmi	r3, r3, #4
 8023aa6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023aaa:	b2db      	uxtb	r3, r3
 8023aac:	930e      	str	r3, [sp, #56]	; 0x38
 8023aae:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023ab2:	b289      	uxth	r1, r1
 8023ab4:	fb02 f301 	mul.w	r3, r2, r1
 8023ab8:	0112      	lsls	r2, r2, #4
 8023aba:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023abe:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8023ac2:	1ad2      	subs	r2, r2, r3
 8023ac4:	b289      	uxth	r1, r1
 8023ac6:	b292      	uxth	r2, r2
 8023ac8:	1a40      	subs	r0, r0, r1
 8023aca:	fa1f fe80 	uxth.w	lr, r0
 8023ace:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023ad0:	4342      	muls	r2, r0
 8023ad2:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ad8:	fb01 c102 	mla	r1, r1, r2, ip
 8023adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023ade:	fb03 1302 	mla	r3, r3, r2, r1
 8023ae2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023ae6:	b383      	cbz	r3, 8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023ae8:	4ac6      	ldr	r2, [pc, #792]	; (8023e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023aea:	2bff      	cmp	r3, #255	; 0xff
 8023aec:	6812      	ldr	r2, [r2, #0]
 8023aee:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8023af2:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023af6:	b2d2      	uxtb	r2, r2
 8023af8:	f000 80ac 	beq.w	8023c54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023afc:	b299      	uxth	r1, r3
 8023afe:	43db      	mvns	r3, r3
 8023b00:	f897 c000 	ldrb.w	ip, [r7]
 8023b04:	fb12 f201 	smulbb	r2, r2, r1
 8023b08:	b2db      	uxtb	r3, r3
 8023b0a:	fb10 f001 	smulbb	r0, r0, r1
 8023b0e:	fb0c 2203 	mla	r2, ip, r3, r2
 8023b12:	fb1e f101 	smulbb	r1, lr, r1
 8023b16:	b292      	uxth	r2, r2
 8023b18:	f102 0c01 	add.w	ip, r2, #1
 8023b1c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023b20:	1212      	asrs	r2, r2, #8
 8023b22:	703a      	strb	r2, [r7, #0]
 8023b24:	787a      	ldrb	r2, [r7, #1]
 8023b26:	fb02 0003 	mla	r0, r2, r3, r0
 8023b2a:	b280      	uxth	r0, r0
 8023b2c:	1c42      	adds	r2, r0, #1
 8023b2e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023b32:	78ba      	ldrb	r2, [r7, #2]
 8023b34:	fb02 1303 	mla	r3, r2, r3, r1
 8023b38:	1200      	asrs	r0, r0, #8
 8023b3a:	b29b      	uxth	r3, r3
 8023b3c:	7078      	strb	r0, [r7, #1]
 8023b3e:	f103 0e01 	add.w	lr, r3, #1
 8023b42:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023b46:	121b      	asrs	r3, r3, #8
 8023b48:	70bb      	strb	r3, [r7, #2]
 8023b4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023b4c:	3703      	adds	r7, #3
 8023b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023b52:	441d      	add	r5, r3
 8023b54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b56:	441e      	add	r6, r3
 8023b58:	e74d      	b.n	80239f6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023b5c:	3c01      	subs	r4, #1
 8023b5e:	f10b 0b03 	add.w	fp, fp, #3
 8023b62:	441d      	add	r5, r3
 8023b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b66:	441e      	add	r6, r3
 8023b68:	e725      	b.n	80239b6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023b6a:	d021      	beq.n	8023bb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023b6c:	1e63      	subs	r3, r4, #1
 8023b6e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8023b70:	fb00 5003 	mla	r0, r0, r3, r5
 8023b74:	1400      	asrs	r0, r0, #16
 8023b76:	f53f af3a 	bmi.w	80239ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b7a:	3901      	subs	r1, #1
 8023b7c:	4288      	cmp	r0, r1
 8023b7e:	f6bf af36 	bge.w	80239ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b82:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023b84:	fb01 6303 	mla	r3, r1, r3, r6
 8023b88:	141b      	asrs	r3, r3, #16
 8023b8a:	f53f af30 	bmi.w	80239ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b8e:	3a01      	subs	r2, #1
 8023b90:	4293      	cmp	r3, r2
 8023b92:	f6bf af2c 	bge.w	80239ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023b96:	f10b 0c03 	add.w	ip, fp, #3
 8023b9a:	46a6      	mov	lr, r4
 8023b9c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8023ba0:	f1be 0f00 	cmp.w	lr, #0
 8023ba4:	dc79      	bgt.n	8023c9a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023ba6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023baa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023bae:	44a3      	add	fp, r4
 8023bb0:	9b07      	ldr	r3, [sp, #28]
 8023bb2:	2b00      	cmp	r3, #0
 8023bb4:	f340 8123 	ble.w	8023dfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023bbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023bbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023bc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023bc6:	eef0 6a62 	vmov.f32	s13, s5
 8023bca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023bce:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023bd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023bd6:	ee16 5a90 	vmov	r5, s13
 8023bda:	eef0 6a43 	vmov.f32	s13, s6
 8023bde:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023be2:	ee16 6a90 	vmov	r6, s13
 8023be6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023bea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023bee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023bf2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023bf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023bfa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023bfe:	ee12 2a90 	vmov	r2, s5
 8023c02:	eef0 2a47 	vmov.f32	s5, s14
 8023c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c0a:	ee13 2a10 	vmov	r2, s6
 8023c0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8023c10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c12:	eeb0 3a67 	vmov.f32	s6, s15
 8023c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8023c1a:	9320      	str	r3, [sp, #128]	; 0x80
 8023c1c:	9b07      	ldr	r3, [sp, #28]
 8023c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023c20:	3b01      	subs	r3, #1
 8023c22:	9307      	str	r3, [sp, #28]
 8023c24:	bf08      	it	eq
 8023c26:	4614      	moveq	r4, r2
 8023c28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023c2a:	bf18      	it	ne
 8023c2c:	461c      	movne	r4, r3
 8023c2e:	e6b4      	b.n	802399a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023c30:	2900      	cmp	r1, #0
 8023c32:	f43f af3c 	beq.w	8023aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023c36:	eb09 0003 	add.w	r0, r9, r3
 8023c3a:	0843      	lsrs	r3, r0, #1
 8023c3c:	07c0      	lsls	r0, r0, #31
 8023c3e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023c42:	bf54      	ite	pl
 8023c44:	f003 030f 	andpl.w	r3, r3, #15
 8023c48:	111b      	asrmi	r3, r3, #4
 8023c4a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023c4e:	b2db      	uxtb	r3, r3
 8023c50:	930a      	str	r3, [sp, #40]	; 0x28
 8023c52:	e72c      	b.n	8023aae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023c54:	703a      	strb	r2, [r7, #0]
 8023c56:	7078      	strb	r0, [r7, #1]
 8023c58:	f887 e002 	strb.w	lr, [r7, #2]
 8023c5c:	e775      	b.n	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c5e:	1c5a      	adds	r2, r3, #1
 8023c60:	f53f af73 	bmi.w	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c64:	4594      	cmp	ip, r2
 8023c66:	f6ff af70 	blt.w	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c6a:	1c42      	adds	r2, r0, #1
 8023c6c:	f53f af6d 	bmi.w	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c70:	4596      	cmp	lr, r2
 8023c72:	f6ff af6a 	blt.w	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c76:	9302      	str	r3, [sp, #8]
 8023c78:	fa0f f38e 	sxth.w	r3, lr
 8023c7c:	9a08      	ldr	r2, [sp, #32]
 8023c7e:	9301      	str	r3, [sp, #4]
 8023c80:	fa0f f38c 	sxth.w	r3, ip
 8023c84:	9105      	str	r1, [sp, #20]
 8023c86:	4639      	mov	r1, r7
 8023c88:	9300      	str	r3, [sp, #0]
 8023c8a:	464b      	mov	r3, r9
 8023c8c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023c90:	4642      	mov	r2, r8
 8023c92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023c94:	f7ff fd90 	bl	80237b8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023c98:	e757      	b.n	8023b4a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023c9a:	142a      	asrs	r2, r5, #16
 8023c9c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023ca0:	1433      	asrs	r3, r6, #16
 8023ca2:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023ca6:	fb09 2303 	mla	r3, r9, r3, r2
 8023caa:	085a      	lsrs	r2, r3, #1
 8023cac:	07d9      	lsls	r1, r3, #31
 8023cae:	f818 2002 	ldrb.w	r2, [r8, r2]
 8023cb2:	bf54      	ite	pl
 8023cb4:	f002 020f 	andpl.w	r2, r2, #15
 8023cb8:	1112      	asrmi	r2, r2, #4
 8023cba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023cbe:	b2d2      	uxtb	r2, r2
 8023cc0:	2800      	cmp	r0, #0
 8023cc2:	f000 8085 	beq.w	8023dd0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8023cc6:	f103 0a01 	add.w	sl, r3, #1
 8023cca:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8023cce:	f01a 0f01 	tst.w	sl, #1
 8023cd2:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023cd6:	bf0c      	ite	eq
 8023cd8:	f001 010f 	andeq.w	r1, r1, #15
 8023cdc:	1109      	asrne	r1, r1, #4
 8023cde:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ce2:	b2c9      	uxtb	r1, r1
 8023ce4:	910f      	str	r1, [sp, #60]	; 0x3c
 8023ce6:	b1df      	cbz	r7, 8023d20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023ce8:	444b      	add	r3, r9
 8023cea:	0859      	lsrs	r1, r3, #1
 8023cec:	f013 0f01 	tst.w	r3, #1
 8023cf0:	f103 0301 	add.w	r3, r3, #1
 8023cf4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023cf8:	bf0c      	ite	eq
 8023cfa:	f001 010f 	andeq.w	r1, r1, #15
 8023cfe:	1109      	asrne	r1, r1, #4
 8023d00:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023d04:	b2c9      	uxtb	r1, r1
 8023d06:	910b      	str	r1, [sp, #44]	; 0x2c
 8023d08:	0859      	lsrs	r1, r3, #1
 8023d0a:	07db      	lsls	r3, r3, #31
 8023d0c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023d10:	bf54      	ite	pl
 8023d12:	f001 010f 	andpl.w	r1, r1, #15
 8023d16:	1109      	asrmi	r1, r1, #4
 8023d18:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023d1c:	b2c9      	uxtb	r1, r1
 8023d1e:	9110      	str	r1, [sp, #64]	; 0x40
 8023d20:	b280      	uxth	r0, r0
 8023d22:	b2bf      	uxth	r7, r7
 8023d24:	fb00 f307 	mul.w	r3, r0, r7
 8023d28:	0100      	lsls	r0, r0, #4
 8023d2a:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8023d2e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8023d32:	1ac0      	subs	r0, r0, r3
 8023d34:	b2bf      	uxth	r7, r7
 8023d36:	b280      	uxth	r0, r0
 8023d38:	1bc9      	subs	r1, r1, r7
 8023d3a:	fa1f fa81 	uxth.w	sl, r1
 8023d3e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023d40:	4348      	muls	r0, r1
 8023d42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023d44:	fb02 020a 	mla	r2, r2, sl, r0
 8023d48:	fb07 2701 	mla	r7, r7, r1, r2
 8023d4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d4e:	fb03 7302 	mla	r3, r3, r2, r7
 8023d52:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023d56:	b393      	cbz	r3, 8023dbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023d58:	4a2a      	ldr	r2, [pc, #168]	; (8023e04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023d5a:	2bff      	cmp	r3, #255	; 0xff
 8023d5c:	6811      	ldr	r1, [r2, #0]
 8023d5e:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8023d62:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023d66:	b2c9      	uxtb	r1, r1
 8023d68:	d042      	beq.n	8023df0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023d6a:	b298      	uxth	r0, r3
 8023d6c:	43db      	mvns	r3, r3
 8023d6e:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8023d72:	fb11 f100 	smulbb	r1, r1, r0
 8023d76:	b2db      	uxtb	r3, r3
 8023d78:	fb17 f700 	smulbb	r7, r7, r0
 8023d7c:	fb02 1103 	mla	r1, r2, r3, r1
 8023d80:	fb1a f000 	smulbb	r0, sl, r0
 8023d84:	b289      	uxth	r1, r1
 8023d86:	1c4a      	adds	r2, r1, #1
 8023d88:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023d8c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023d90:	fb02 7703 	mla	r7, r2, r3, r7
 8023d94:	1209      	asrs	r1, r1, #8
 8023d96:	b2bf      	uxth	r7, r7
 8023d98:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023d9c:	1c7a      	adds	r2, r7, #1
 8023d9e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023da2:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023da6:	fb02 0303 	mla	r3, r2, r3, r0
 8023daa:	123f      	asrs	r7, r7, #8
 8023dac:	b29b      	uxth	r3, r3
 8023dae:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023db2:	1c5a      	adds	r2, r3, #1
 8023db4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023db8:	121b      	asrs	r3, r3, #8
 8023dba:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8023dbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023dc0:	f10c 0c03 	add.w	ip, ip, #3
 8023dc4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023dc8:	441d      	add	r5, r3
 8023dca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023dcc:	441e      	add	r6, r3
 8023dce:	e6e7      	b.n	8023ba0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023dd0:	2f00      	cmp	r7, #0
 8023dd2:	d0a5      	beq.n	8023d20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023dd4:	444b      	add	r3, r9
 8023dd6:	0859      	lsrs	r1, r3, #1
 8023dd8:	07db      	lsls	r3, r3, #31
 8023dda:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023dde:	bf54      	ite	pl
 8023de0:	f001 010f 	andpl.w	r1, r1, #15
 8023de4:	1109      	asrmi	r1, r1, #4
 8023de6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023dea:	b2c9      	uxtb	r1, r1
 8023dec:	910b      	str	r1, [sp, #44]	; 0x2c
 8023dee:	e797      	b.n	8023d20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023df0:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023df4:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023df8:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023dfc:	e7df      	b.n	8023dbe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023dfe:	b013      	add	sp, #76	; 0x4c
 8023e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e04:	24010070 	.word	0x24010070

08023e08 <CRC_Lock>:
 8023e08:	4a20      	ldr	r2, [pc, #128]	; (8023e8c <CRC_Lock+0x84>)
 8023e0a:	b530      	push	{r4, r5, lr}
 8023e0c:	6813      	ldr	r3, [r2, #0]
 8023e0e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8023e12:	f24c 2540 	movw	r5, #49728	; 0xc240
 8023e16:	f023 0301 	bic.w	r3, r3, #1
 8023e1a:	6013      	str	r3, [r2, #0]
 8023e1c:	4b1c      	ldr	r3, [pc, #112]	; (8023e90 <CRC_Lock+0x88>)
 8023e1e:	681a      	ldr	r2, [r3, #0]
 8023e20:	4022      	ands	r2, r4
 8023e22:	42aa      	cmp	r2, r5
 8023e24:	d005      	beq.n	8023e32 <CRC_Lock+0x2a>
 8023e26:	681b      	ldr	r3, [r3, #0]
 8023e28:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023e2c:	4023      	ands	r3, r4
 8023e2e:	4293      	cmp	r3, r2
 8023e30:	d124      	bne.n	8023e7c <CRC_Lock+0x74>
 8023e32:	4b18      	ldr	r3, [pc, #96]	; (8023e94 <CRC_Lock+0x8c>)
 8023e34:	681b      	ldr	r3, [r3, #0]
 8023e36:	bb0b      	cbnz	r3, 8023e7c <CRC_Lock+0x74>
 8023e38:	4b17      	ldr	r3, [pc, #92]	; (8023e98 <CRC_Lock+0x90>)
 8023e3a:	681a      	ldr	r2, [r3, #0]
 8023e3c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023e40:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8023e44:	d00d      	beq.n	8023e62 <CRC_Lock+0x5a>
 8023e46:	681a      	ldr	r2, [r3, #0]
 8023e48:	f240 4483 	movw	r4, #1155	; 0x483
 8023e4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023e50:	42a2      	cmp	r2, r4
 8023e52:	d006      	beq.n	8023e62 <CRC_Lock+0x5a>
 8023e54:	681b      	ldr	r3, [r3, #0]
 8023e56:	f240 4285 	movw	r2, #1157	; 0x485
 8023e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023e5e:	4293      	cmp	r3, r2
 8023e60:	d10c      	bne.n	8023e7c <CRC_Lock+0x74>
 8023e62:	4b0e      	ldr	r3, [pc, #56]	; (8023e9c <CRC_Lock+0x94>)
 8023e64:	2201      	movs	r2, #1
 8023e66:	601a      	str	r2, [r3, #0]
 8023e68:	681a      	ldr	r2, [r3, #0]
 8023e6a:	2a00      	cmp	r2, #0
 8023e6c:	d1fc      	bne.n	8023e68 <CRC_Lock+0x60>
 8023e6e:	4b0c      	ldr	r3, [pc, #48]	; (8023ea0 <CRC_Lock+0x98>)
 8023e70:	6018      	str	r0, [r3, #0]
 8023e72:	6818      	ldr	r0, [r3, #0]
 8023e74:	1a43      	subs	r3, r0, r1
 8023e76:	4258      	negs	r0, r3
 8023e78:	4158      	adcs	r0, r3
 8023e7a:	bd30      	pop	{r4, r5, pc}
 8023e7c:	4b09      	ldr	r3, [pc, #36]	; (8023ea4 <CRC_Lock+0x9c>)
 8023e7e:	2201      	movs	r2, #1
 8023e80:	601a      	str	r2, [r3, #0]
 8023e82:	681a      	ldr	r2, [r3, #0]
 8023e84:	2a00      	cmp	r2, #0
 8023e86:	d1fc      	bne.n	8023e82 <CRC_Lock+0x7a>
 8023e88:	4b07      	ldr	r3, [pc, #28]	; (8023ea8 <CRC_Lock+0xa0>)
 8023e8a:	e7f1      	b.n	8023e70 <CRC_Lock+0x68>
 8023e8c:	e0002000 	.word	0xe0002000
 8023e90:	e000ed00 	.word	0xe000ed00
 8023e94:	e0042000 	.word	0xe0042000
 8023e98:	5c001000 	.word	0x5c001000
 8023e9c:	58024c08 	.word	0x58024c08
 8023ea0:	58024c00 	.word	0x58024c00
 8023ea4:	40023008 	.word	0x40023008
 8023ea8:	40023000 	.word	0x40023000

08023eac <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8023eac:	6101      	str	r1, [r0, #16]
 8023eae:	4770      	bx	lr

08023eb0 <_ZN8touchgfx8Gestures4tickEv>:
 8023eb0:	7b83      	ldrb	r3, [r0, #14]
 8023eb2:	b14b      	cbz	r3, 8023ec8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8023eb4:	8903      	ldrh	r3, [r0, #8]
 8023eb6:	3301      	adds	r3, #1
 8023eb8:	b29b      	uxth	r3, r3
 8023eba:	2b07      	cmp	r3, #7
 8023ebc:	8103      	strh	r3, [r0, #8]
 8023ebe:	bf81      	itttt	hi
 8023ec0:	2300      	movhi	r3, #0
 8023ec2:	8143      	strhhi	r3, [r0, #10]
 8023ec4:	8183      	strhhi	r3, [r0, #12]
 8023ec6:	7383      	strbhi	r3, [r0, #14]
 8023ec8:	4770      	bx	lr
	...

08023ecc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8023ecc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8023ed0:	4698      	mov	r8, r3
 8023ed2:	8883      	ldrh	r3, [r0, #4]
 8023ed4:	4604      	mov	r4, r0
 8023ed6:	4617      	mov	r7, r2
 8023ed8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8023edc:	eba8 0303 	sub.w	r3, r8, r3
 8023ee0:	4a19      	ldr	r2, [pc, #100]	; (8023f48 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8023ee2:	460e      	mov	r6, r1
 8023ee4:	b21b      	sxth	r3, r3
 8023ee6:	88c1      	ldrh	r1, [r0, #6]
 8023ee8:	9200      	str	r2, [sp, #0]
 8023eea:	2000      	movs	r0, #0
 8023eec:	2b00      	cmp	r3, #0
 8023eee:	8aa2      	ldrh	r2, [r4, #20]
 8023ef0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8023ef4:	bfb8      	it	lt
 8023ef6:	425b      	neglt	r3, r3
 8023ef8:	f88d 0004 	strb.w	r0, [sp, #4]
 8023efc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023f00:	b21b      	sxth	r3, r3
 8023f02:	f8ad 800a 	strh.w	r8, [sp, #10]
 8023f06:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023f0a:	4293      	cmp	r3, r2
 8023f0c:	dc07      	bgt.n	8023f1e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8023f0e:	1a69      	subs	r1, r5, r1
 8023f10:	b209      	sxth	r1, r1
 8023f12:	2900      	cmp	r1, #0
 8023f14:	bfb8      	it	lt
 8023f16:	4249      	neglt	r1, r1
 8023f18:	b209      	sxth	r1, r1
 8023f1a:	428a      	cmp	r2, r1
 8023f1c:	da10      	bge.n	8023f40 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8023f1e:	6920      	ldr	r0, [r4, #16]
 8023f20:	4669      	mov	r1, sp
 8023f22:	eba8 0606 	sub.w	r6, r8, r6
 8023f26:	1bef      	subs	r7, r5, r7
 8023f28:	6803      	ldr	r3, [r0, #0]
 8023f2a:	685b      	ldr	r3, [r3, #4]
 8023f2c:	4798      	blx	r3
 8023f2e:	2300      	movs	r3, #0
 8023f30:	2001      	movs	r0, #1
 8023f32:	8166      	strh	r6, [r4, #10]
 8023f34:	8123      	strh	r3, [r4, #8]
 8023f36:	81a7      	strh	r7, [r4, #12]
 8023f38:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023f3c:	80e5      	strh	r5, [r4, #6]
 8023f3e:	73a0      	strb	r0, [r4, #14]
 8023f40:	b004      	add	sp, #16
 8023f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f46:	bf00      	nop
 8023f48:	08028148 	.word	0x08028148

08023f4c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f4e:	461e      	mov	r6, r3
 8023f50:	1e4b      	subs	r3, r1, #1
 8023f52:	b085      	sub	sp, #20
 8023f54:	4604      	mov	r4, r0
 8023f56:	2b01      	cmp	r3, #1
 8023f58:	460d      	mov	r5, r1
 8023f5a:	4617      	mov	r7, r2
 8023f5c:	d84b      	bhi.n	8023ff6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023f5e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023f62:	1cd3      	adds	r3, r2, #3
 8023f64:	b29b      	uxth	r3, r3
 8023f66:	2b06      	cmp	r3, #6
 8023f68:	d916      	bls.n	8023f98 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023f6a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802400c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023f6e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023f72:	f8cd c004 	str.w	ip, [sp, #4]
 8023f76:	f04f 0c00 	mov.w	ip, #0
 8023f7a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023f7e:	6900      	ldr	r0, [r0, #16]
 8023f80:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023f84:	a901      	add	r1, sp, #4
 8023f86:	f88d c008 	strb.w	ip, [sp, #8]
 8023f8a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023f8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023f92:	6803      	ldr	r3, [r0, #0]
 8023f94:	689b      	ldr	r3, [r3, #8]
 8023f96:	4798      	blx	r3
 8023f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023f9c:	1cd3      	adds	r3, r2, #3
 8023f9e:	b29b      	uxth	r3, r3
 8023fa0:	2b06      	cmp	r3, #6
 8023fa2:	d916      	bls.n	8023fd2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023fa4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802400c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023fa8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023fac:	f8cd c004 	str.w	ip, [sp, #4]
 8023fb0:	f04f 0c01 	mov.w	ip, #1
 8023fb4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023fb8:	6920      	ldr	r0, [r4, #16]
 8023fba:	f8ad 100c 	strh.w	r1, [sp, #12]
 8023fbe:	a901      	add	r1, sp, #4
 8023fc0:	f88d c008 	strb.w	ip, [sp, #8]
 8023fc4:	f8ad 200a 	strh.w	r2, [sp, #10]
 8023fc8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023fcc:	6803      	ldr	r3, [r0, #0]
 8023fce:	689b      	ldr	r3, [r3, #8]
 8023fd0:	4798      	blx	r3
 8023fd2:	4b0d      	ldr	r3, [pc, #52]	; (8024008 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8023fd4:	a901      	add	r1, sp, #4
 8023fd6:	6920      	ldr	r0, [r4, #16]
 8023fd8:	9301      	str	r3, [sp, #4]
 8023fda:	2300      	movs	r3, #0
 8023fdc:	f88d 5008 	strb.w	r5, [sp, #8]
 8023fe0:	f8ad 700a 	strh.w	r7, [sp, #10]
 8023fe4:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023fe8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023fec:	6803      	ldr	r3, [r0, #0]
 8023fee:	681b      	ldr	r3, [r3, #0]
 8023ff0:	4798      	blx	r3
 8023ff2:	b005      	add	sp, #20
 8023ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023ff6:	2900      	cmp	r1, #0
 8023ff8:	d1eb      	bne.n	8023fd2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023ffa:	80a2      	strh	r2, [r4, #4]
 8023ffc:	80c6      	strh	r6, [r0, #6]
 8023ffe:	60a1      	str	r1, [r4, #8]
 8024000:	81a1      	strh	r1, [r4, #12]
 8024002:	73a1      	strb	r1, [r4, #14]
 8024004:	e7e5      	b.n	8023fd2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024006:	bf00      	nop
 8024008:	08028134 	.word	0x08028134
 802400c:	0802815c 	.word	0x0802815c

08024010 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8024010:	10c9      	asrs	r1, r1, #3
 8024012:	2900      	cmp	r1, #0
 8024014:	bfb8      	it	lt
 8024016:	4249      	neglt	r1, r1
 8024018:	2801      	cmp	r0, #1
 802401a:	d108      	bne.n	802402e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802401c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8024020:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8024024:	4601      	mov	r1, r0
 8024026:	dd02      	ble.n	802402e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8024028:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802402c:	4770      	bx	lr
 802402e:	29ff      	cmp	r1, #255	; 0xff
 8024030:	bfa8      	it	ge
 8024032:	21ff      	movge	r1, #255	; 0xff
 8024034:	4608      	mov	r0, r1
 8024036:	4770      	bx	lr

08024038 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8024038:	b410      	push	{r4}
 802403a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802403e:	429c      	cmp	r4, r3
 8024040:	d803      	bhi.n	802404a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8024042:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024046:	f7f2 bf3b 	b.w	8016ec0 <_ZN8touchgfx7Outline6lineToEii>
 802404a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802404e:	4770      	bx	lr

08024050 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8024050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024054:	b08b      	sub	sp, #44	; 0x2c
 8024056:	4606      	mov	r6, r0
 8024058:	468a      	mov	sl, r1
 802405a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802405e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8024062:	9308      	str	r3, [sp, #32]
 8024064:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8024068:	9309      	str	r3, [sp, #36]	; 0x24
 802406a:	f7f3 f894 	bl	8017196 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802406e:	68b5      	ldr	r5, [r6, #8]
 8024070:	4604      	mov	r4, r0
 8024072:	2d00      	cmp	r5, #0
 8024074:	d044      	beq.n	8024100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8024076:	6873      	ldr	r3, [r6, #4]
 8024078:	42ab      	cmp	r3, r5
 802407a:	d33d      	bcc.n	80240f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802407c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8024080:	f04f 0800 	mov.w	r8, #0
 8024084:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 8024088:	eb02 0b03 	add.w	fp, r2, r3
 802408c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8024090:	fb02 1203 	mla	r2, r2, r3, r1
 8024094:	9205      	str	r2, [sp, #20]
 8024096:	1e6a      	subs	r2, r5, #1
 8024098:	9204      	str	r2, [sp, #16]
 802409a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802409e:	f9b4 7000 	ldrsh.w	r7, [r4]
 80240a2:	454b      	cmp	r3, r9
 80240a4:	463a      	mov	r2, r7
 80240a6:	d008      	beq.n	80240ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80240a8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 80240ac:	eb03 0b09 	add.w	fp, r3, r9
 80240b0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80240b4:	fb03 1309 	mla	r3, r3, r9, r1
 80240b8:	9305      	str	r3, [sp, #20]
 80240ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80240be:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80240c2:	4498      	add	r8, r3
 80240c4:	9b04      	ldr	r3, [sp, #16]
 80240c6:	3b01      	subs	r3, #1
 80240c8:	9304      	str	r3, [sp, #16]
 80240ca:	9b04      	ldr	r3, [sp, #16]
 80240cc:	3301      	adds	r3, #1
 80240ce:	d015      	beq.n	80240fc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80240d0:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 80240d4:	42bb      	cmp	r3, r7
 80240d6:	d117      	bne.n	8024108 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 80240d8:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80240dc:	9b04      	ldr	r3, [sp, #16]
 80240de:	4548      	cmp	r0, r9
 80240e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80240e4:	d17d      	bne.n	80241e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80240e6:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80240ea:	4401      	add	r1, r0
 80240ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80240f0:	4480      	add	r8, r0
 80240f2:	e7e9      	b.n	80240c8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80240f4:	461f      	mov	r7, r3
 80240f6:	e042      	b.n	802417e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80240f8:	2000      	movs	r0, #0
 80240fa:	e002      	b.n	8024102 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80240fc:	2900      	cmp	r1, #0
 80240fe:	d16d      	bne.n	80241dc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8024100:	2001      	movs	r0, #1
 8024102:	b00b      	add	sp, #44	; 0x2c
 8024104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024108:	b379      	cbz	r1, 802416a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802410a:	2f00      	cmp	r7, #0
 802410c:	db29      	blt.n	8024162 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802410e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8024112:	42bb      	cmp	r3, r7
 8024114:	dd25      	ble.n	8024162 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024116:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802411a:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802411e:	f7ff ff77 	bl	8024010 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8024122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024124:	fb10 f003 	smulbb	r0, r0, r3
 8024128:	b280      	uxth	r0, r0
 802412a:	1c41      	adds	r1, r0, #1
 802412c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8024130:	1209      	asrs	r1, r1, #8
 8024132:	f011 0fff 	tst.w	r1, #255	; 0xff
 8024136:	d014      	beq.n	8024162 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8024138:	b2c9      	uxtb	r1, r1
 802413a:	9808      	ldr	r0, [sp, #32]
 802413c:	b2ba      	uxth	r2, r7
 802413e:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8024140:	9102      	str	r1, [sp, #8]
 8024142:	2101      	movs	r1, #1
 8024144:	4413      	add	r3, r2
 8024146:	4402      	add	r2, r0
 8024148:	9101      	str	r1, [sp, #4]
 802414a:	fa0f f18b 	sxth.w	r1, fp
 802414e:	f8da 0000 	ldr.w	r0, [sl]
 8024152:	b21b      	sxth	r3, r3
 8024154:	9100      	str	r1, [sp, #0]
 8024156:	b212      	sxth	r2, r2
 8024158:	6941      	ldr	r1, [r0, #20]
 802415a:	4650      	mov	r0, sl
 802415c:	460d      	mov	r5, r1
 802415e:	9905      	ldr	r1, [sp, #20]
 8024160:	47a8      	blx	r5
 8024162:	9b04      	ldr	r3, [sp, #16]
 8024164:	1c7a      	adds	r2, r7, #1
 8024166:	3301      	adds	r3, #1
 8024168:	d0ca      	beq.n	8024100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802416a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802416e:	1abb      	subs	r3, r7, r2
 8024170:	2b00      	cmp	r3, #0
 8024172:	dd31      	ble.n	80241d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8024174:	2a00      	cmp	r2, #0
 8024176:	dabd      	bge.n	80240f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 8024178:	2f00      	cmp	r7, #0
 802417a:	dd2d      	ble.n	80241d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802417c:	2200      	movs	r2, #0
 802417e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8024182:	19d1      	adds	r1, r2, r7
 8024184:	4299      	cmp	r1, r3
 8024186:	db02      	blt.n	802418e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8024188:	1a9f      	subs	r7, r3, r2
 802418a:	2f00      	cmp	r7, #0
 802418c:	dd24      	ble.n	80241d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802418e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8024192:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8024196:	f7ff ff3b 	bl	8024010 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802419a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802419c:	fb10 f003 	smulbb	r0, r0, r3
 80241a0:	b280      	uxth	r0, r0
 80241a2:	1c41      	adds	r1, r0, #1
 80241a4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80241a8:	1209      	asrs	r1, r1, #8
 80241aa:	f011 0fff 	tst.w	r1, #255	; 0xff
 80241ae:	d013      	beq.n	80241d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241b0:	b292      	uxth	r2, r2
 80241b2:	9808      	ldr	r0, [sp, #32]
 80241b4:	b2c9      	uxtb	r1, r1
 80241b6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80241b8:	b23f      	sxth	r7, r7
 80241ba:	4413      	add	r3, r2
 80241bc:	9102      	str	r1, [sp, #8]
 80241be:	4402      	add	r2, r0
 80241c0:	fa0f f18b 	sxth.w	r1, fp
 80241c4:	f8da 0000 	ldr.w	r0, [sl]
 80241c8:	b21b      	sxth	r3, r3
 80241ca:	9100      	str	r1, [sp, #0]
 80241cc:	b212      	sxth	r2, r2
 80241ce:	9701      	str	r7, [sp, #4]
 80241d0:	9905      	ldr	r1, [sp, #20]
 80241d2:	6947      	ldr	r7, [r0, #20]
 80241d4:	4650      	mov	r0, sl
 80241d6:	47b8      	blx	r7
 80241d8:	464b      	mov	r3, r9
 80241da:	e75e      	b.n	802409a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80241dc:	2f00      	cmp	r7, #0
 80241de:	da96      	bge.n	802410e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80241e0:	e78e      	b.n	8024100 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80241e2:	2900      	cmp	r1, #0
 80241e4:	d0f8      	beq.n	80241d8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80241e6:	e790      	b.n	802410a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080241e8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80241e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80241ec:	4b4a      	ldr	r3, [pc, #296]	; (8024318 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x130>)
 80241ee:	2500      	movs	r5, #0
 80241f0:	f100 0620 	add.w	r6, r0, #32
 80241f4:	4604      	mov	r4, r0
 80241f6:	4690      	mov	r8, r2
 80241f8:	f100 0718 	add.w	r7, r0, #24
 80241fc:	e9c0 3100 	strd	r3, r1, [r0]
 8024200:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8024204:	e9c0 5504 	strd	r5, r5, [r0, #16]
 8024208:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802420c:	4630      	mov	r0, r6
 802420e:	f7f2 f99d 	bl	801654c <_ZN8touchgfx7OutlineC1Ev>
 8024212:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8024216:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802421a:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802421e:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8024222:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8024226:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802422a:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802422e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8024232:	9500      	str	r5, [sp, #0]
 8024234:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 8024238:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802423c:	f9b8 2000 	ldrsh.w	r2, [r8]
 8024240:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8024244:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 8024248:	4410      	add	r0, r2
 802424a:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802424e:	b280      	uxth	r0, r0
 8024250:	fa0f fa80 	sxth.w	sl, r0
 8024254:	45aa      	cmp	sl, r5
 8024256:	dd5c      	ble.n	8024312 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8024258:	4591      	cmp	r9, r2
 802425a:	dd5a      	ble.n	8024312 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802425c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8024260:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8024264:	440b      	add	r3, r1
 8024266:	b29b      	uxth	r3, r3
 8024268:	b21d      	sxth	r5, r3
 802426a:	2d00      	cmp	r5, #0
 802426c:	dd51      	ble.n	8024312 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 802426e:	458e      	cmp	lr, r1
 8024270:	dd4f      	ble.n	8024312 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12a>
 8024272:	45d1      	cmp	r9, sl
 8024274:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8024278:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802427c:	bfb8      	it	lt
 802427e:	fa1f f089 	uxthlt.w	r0, r9
 8024282:	45ae      	cmp	lr, r5
 8024284:	f8ad 2000 	strh.w	r2, [sp]
 8024288:	bfb8      	it	lt
 802428a:	fa1f f38e 	uxthlt.w	r3, lr
 802428e:	1a80      	subs	r0, r0, r2
 8024290:	f8ad 1002 	strh.w	r1, [sp, #2]
 8024294:	1a5b      	subs	r3, r3, r1
 8024296:	f8ad 0004 	strh.w	r0, [sp, #4]
 802429a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802429e:	466d      	mov	r5, sp
 80242a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80242a4:	e887 0003 	stmia.w	r7, {r0, r1}
 80242a8:	f8dc 3000 	ldr.w	r3, [ip]
 80242ac:	4660      	mov	r0, ip
 80242ae:	4639      	mov	r1, r7
 80242b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242b2:	4798      	blx	r3
 80242b4:	6861      	ldr	r1, [r4, #4]
 80242b6:	4628      	mov	r0, r5
 80242b8:	3104      	adds	r1, #4
 80242ba:	f7f4 fb17 	bl	80188ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80242be:	4638      	mov	r0, r7
 80242c0:	f7f4 faec 	bl	801889c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80242c4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80242c8:	f8bd 2000 	ldrh.w	r2, [sp]
 80242cc:	4630      	mov	r0, r6
 80242ce:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 80242d2:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80242d6:	f7f2 f91d 	bl	8016514 <_ZN8touchgfx7Outline5resetEv>
 80242da:	f9bd 3000 	ldrsh.w	r3, [sp]
 80242de:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80242e2:	4620      	mov	r0, r4
 80242e4:	015b      	lsls	r3, r3, #5
 80242e6:	60a3      	str	r3, [r4, #8]
 80242e8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80242ec:	015b      	lsls	r3, r3, #5
 80242ee:	60e3      	str	r3, [r4, #12]
 80242f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80242f4:	015b      	lsls	r3, r3, #5
 80242f6:	6123      	str	r3, [r4, #16]
 80242f8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80242fc:	015b      	lsls	r3, r3, #5
 80242fe:	6163      	str	r3, [r4, #20]
 8024300:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8024304:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8024308:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802430c:	b002      	add	sp, #8
 802430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024312:	2300      	movs	r3, #0
 8024314:	9301      	str	r3, [sp, #4]
 8024316:	e7c2      	b.n	802429e <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb6>
 8024318:	0802838c 	.word	0x0802838c

0802431c <_ZN8touchgfx6Canvas5closeEv>:
 802431c:	b538      	push	{r3, r4, r5, lr}
 802431e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8024322:	4604      	mov	r4, r0
 8024324:	b193      	cbz	r3, 802434c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024326:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802432a:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802432e:	4213      	tst	r3, r2
 8024330:	d10c      	bne.n	802434c <_ZN8touchgfx6Canvas5closeEv+0x30>
 8024332:	f100 0520 	add.w	r5, r0, #32
 8024336:	b123      	cbz	r3, 8024342 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8024338:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802433c:	4628      	mov	r0, r5
 802433e:	f7ff fe7b 	bl	8024038 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024342:	4628      	mov	r0, r5
 8024344:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8024348:	f7ff fe76 	bl	8024038 <_ZN8touchgfx10Rasterizer6lineToEii>
 802434c:	2300      	movs	r3, #0
 802434e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8024352:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8024356:	4298      	cmp	r0, r3
 8024358:	bf34      	ite	cc
 802435a:	2000      	movcc	r0, #0
 802435c:	2001      	movcs	r0, #1
 802435e:	bd38      	pop	{r3, r4, r5, pc}

08024360 <_ZN8touchgfx6Canvas6renderEh>:
 8024360:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024364:	4604      	mov	r4, r0
 8024366:	6840      	ldr	r0, [r0, #4]
 8024368:	460d      	mov	r5, r1
 802436a:	6803      	ldr	r3, [r0, #0]
 802436c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802436e:	4798      	blx	r3
 8024370:	fb10 f105 	smulbb	r1, r0, r5
 8024374:	b289      	uxth	r1, r1
 8024376:	1c4d      	adds	r5, r1, #1
 8024378:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802437c:	122d      	asrs	r5, r5, #8
 802437e:	f000 8097 	beq.w	80244b0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8024382:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8024386:	2b00      	cmp	r3, #0
 8024388:	f000 8092 	beq.w	80244b0 <_ZN8touchgfx6Canvas6renderEh+0x150>
 802438c:	4620      	mov	r0, r4
 802438e:	f7ff ffc5 	bl	802431c <_ZN8touchgfx6Canvas5closeEv>
 8024392:	4607      	mov	r7, r0
 8024394:	2800      	cmp	r0, #0
 8024396:	d043      	beq.n	8024420 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8024398:	6863      	ldr	r3, [r4, #4]
 802439a:	4e46      	ldr	r6, [pc, #280]	; (80244b4 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 802439c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802439e:	6837      	ldr	r7, [r6, #0]
 80243a0:	6803      	ldr	r3, [r0, #0]
 80243a2:	689b      	ldr	r3, [r3, #8]
 80243a4:	4798      	blx	r3
 80243a6:	4601      	mov	r1, r0
 80243a8:	4638      	mov	r0, r7
 80243aa:	f7ef f9e7 	bl	801377c <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80243ae:	4607      	mov	r7, r0
 80243b0:	f7ee fda8 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80243b4:	6803      	ldr	r3, [r0, #0]
 80243b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80243b8:	4798      	blx	r3
 80243ba:	4680      	mov	r8, r0
 80243bc:	f7ee fda2 	bl	8012f04 <_ZN8touchgfx3HAL3lcdEv>
 80243c0:	6803      	ldr	r3, [r0, #0]
 80243c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80243c4:	4798      	blx	r3
 80243c6:	280b      	cmp	r0, #11
 80243c8:	d857      	bhi.n	802447a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 80243ca:	e8df f000 	tbb	[pc, r0]
 80243ce:	584d      	.short	0x584d
 80243d0:	2d560668 	.word	0x2d560668
 80243d4:	6161613d 	.word	0x6161613d
 80243d8:	6161      	.short	0x6161
 80243da:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 80243de:	2208      	movs	r2, #8
 80243e0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80243e4:	fb91 f2f2 	sdiv	r2, r1, r2
 80243e8:	fb08 2303 	mla	r3, r8, r3, r2
 80243ec:	441f      	add	r7, r3
 80243ee:	424b      	negs	r3, r1
 80243f0:	f001 0107 	and.w	r1, r1, #7
 80243f4:	f003 0307 	and.w	r3, r3, #7
 80243f8:	bf58      	it	pl
 80243fa:	4259      	negpl	r1, r3
 80243fc:	b2c9      	uxtb	r1, r1
 80243fe:	6860      	ldr	r0, [r4, #4]
 8024400:	b2ed      	uxtb	r5, r5
 8024402:	fa0f f388 	sxth.w	r3, r8
 8024406:	463a      	mov	r2, r7
 8024408:	e9cd 1500 	strd	r1, r5, [sp]
 802440c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802440e:	f104 0020 	add.w	r0, r4, #32
 8024412:	f7ff fe1d 	bl	8024050 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8024416:	4607      	mov	r7, r0
 8024418:	6830      	ldr	r0, [r6, #0]
 802441a:	6803      	ldr	r3, [r0, #0]
 802441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802441e:	4798      	blx	r3
 8024420:	4638      	mov	r0, r7
 8024422:	b002      	add	sp, #8
 8024424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024428:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802442c:	2204      	movs	r2, #4
 802442e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8024432:	fb91 f2f2 	sdiv	r2, r1, r2
 8024436:	fb08 2303 	mla	r3, r8, r3, r2
 802443a:	441f      	add	r7, r3
 802443c:	424b      	negs	r3, r1
 802443e:	f001 0103 	and.w	r1, r1, #3
 8024442:	f003 0303 	and.w	r3, r3, #3
 8024446:	e7d7      	b.n	80243f8 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8024448:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802444c:	2202      	movs	r2, #2
 802444e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8024452:	2900      	cmp	r1, #0
 8024454:	fb91 f2f2 	sdiv	r2, r1, r2
 8024458:	f001 0101 	and.w	r1, r1, #1
 802445c:	fb08 2303 	mla	r3, r8, r3, r2
 8024460:	bfb8      	it	lt
 8024462:	4249      	neglt	r1, r1
 8024464:	441f      	add	r7, r3
 8024466:	e7c9      	b.n	80243fc <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8024468:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802446c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8024470:	fb08 f303 	mul.w	r3, r8, r3
 8024474:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8024478:	441f      	add	r7, r3
 802447a:	2100      	movs	r1, #0
 802447c:	e7bf      	b.n	80243fe <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802447e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8024482:	2103      	movs	r1, #3
 8024484:	fb08 f203 	mul.w	r2, r8, r3
 8024488:	8b23      	ldrh	r3, [r4, #24]
 802448a:	fb13 2301 	smlabb	r3, r3, r1, r2
 802448e:	e7f3      	b.n	8024478 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8024490:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8024494:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8024498:	fb08 2303 	mla	r3, r8, r3, r2
 802449c:	e7ec      	b.n	8024478 <_ZN8touchgfx6Canvas6renderEh+0x118>
 802449e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 80244a2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80244a6:	fb08 f303 	mul.w	r3, r8, r3
 80244aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80244ae:	e7e3      	b.n	8024478 <_ZN8touchgfx6Canvas6renderEh+0x118>
 80244b0:	2701      	movs	r7, #1
 80244b2:	e7b5      	b.n	8024420 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 80244b4:	24010060 	.word	0x24010060

080244b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80244b8:	4b07      	ldr	r3, [pc, #28]	; (80244d8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80244ba:	b510      	push	{r4, lr}
 80244bc:	781b      	ldrb	r3, [r3, #0]
 80244be:	2b01      	cmp	r3, #1
 80244c0:	d108      	bne.n	80244d4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80244c2:	6843      	ldr	r3, [r0, #4]
 80244c4:	6814      	ldr	r4, [r2, #0]
 80244c6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80244ca:	680b      	ldr	r3, [r1, #0]
 80244cc:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80244d0:	6013      	str	r3, [r2, #0]
 80244d2:	600c      	str	r4, [r1, #0]
 80244d4:	bd10      	pop	{r4, pc}
 80244d6:	bf00      	nop
 80244d8:	24010058 	.word	0x24010058

080244dc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80244dc:	b513      	push	{r0, r1, r4, lr}
 80244de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80244e2:	4604      	mov	r4, r0
 80244e4:	e9cd 2100 	strd	r2, r1, [sp]
 80244e8:	b9a3      	cbnz	r3, 8024514 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80244ea:	466a      	mov	r2, sp
 80244ec:	a901      	add	r1, sp, #4
 80244ee:	4620      	mov	r0, r4
 80244f0:	f7ff ffe2 	bl	80244b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80244f4:	68a3      	ldr	r3, [r4, #8]
 80244f6:	9901      	ldr	r1, [sp, #4]
 80244f8:	9a00      	ldr	r2, [sp, #0]
 80244fa:	1ac9      	subs	r1, r1, r3
 80244fc:	68e3      	ldr	r3, [r4, #12]
 80244fe:	1ad2      	subs	r2, r2, r3
 8024500:	9101      	str	r1, [sp, #4]
 8024502:	2a00      	cmp	r2, #0
 8024504:	9200      	str	r2, [sp, #0]
 8024506:	da0b      	bge.n	8024520 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8024508:	2301      	movs	r3, #1
 802450a:	2900      	cmp	r1, #0
 802450c:	da0e      	bge.n	802452c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802450e:	f043 0304 	orr.w	r3, r3, #4
 8024512:	e013      	b.n	802453c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8024514:	f7ff ff02 	bl	802431c <_ZN8touchgfx6Canvas5closeEv>
 8024518:	2800      	cmp	r0, #0
 802451a:	d1e6      	bne.n	80244ea <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802451c:	b002      	add	sp, #8
 802451e:	bd10      	pop	{r4, pc}
 8024520:	6963      	ldr	r3, [r4, #20]
 8024522:	429a      	cmp	r2, r3
 8024524:	bfac      	ite	ge
 8024526:	2302      	movge	r3, #2
 8024528:	2300      	movlt	r3, #0
 802452a:	e7ee      	b.n	802450a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802452c:	6920      	ldr	r0, [r4, #16]
 802452e:	4281      	cmp	r1, r0
 8024530:	bfac      	ite	ge
 8024532:	2008      	movge	r0, #8
 8024534:	2000      	movlt	r0, #0
 8024536:	4318      	orrs	r0, r3
 8024538:	b2c3      	uxtb	r3, r0
 802453a:	b158      	cbz	r0, 8024554 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802453c:	2200      	movs	r2, #0
 802453e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8024542:	9901      	ldr	r1, [sp, #4]
 8024544:	9a00      	ldr	r2, [sp, #0]
 8024546:	66a1      	str	r1, [r4, #104]	; 0x68
 8024548:	66e2      	str	r2, [r4, #108]	; 0x6c
 802454a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802454e:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8024552:	e7e3      	b.n	802451c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8024554:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8024558:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802455c:	4298      	cmp	r0, r3
 802455e:	d803      	bhi.n	8024568 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8024560:	f104 0020 	add.w	r0, r4, #32
 8024564:	f7f2 fcc6 	bl	8016ef4 <_ZN8touchgfx7Outline6moveToEii>
 8024568:	2301      	movs	r3, #1
 802456a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802456e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8024572:	2300      	movs	r3, #0
 8024574:	e7e5      	b.n	8024542 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08024576 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8024576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024578:	ab02      	add	r3, sp, #8
 802457a:	4604      	mov	r4, r0
 802457c:	9101      	str	r1, [sp, #4]
 802457e:	a901      	add	r1, sp, #4
 8024580:	f843 2d08 	str.w	r2, [r3, #-8]!
 8024584:	461a      	mov	r2, r3
 8024586:	f7ff ff97 	bl	80244b8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802458a:	68a3      	ldr	r3, [r4, #8]
 802458c:	9901      	ldr	r1, [sp, #4]
 802458e:	9a00      	ldr	r2, [sp, #0]
 8024590:	1ac9      	subs	r1, r1, r3
 8024592:	68e3      	ldr	r3, [r4, #12]
 8024594:	1ad2      	subs	r2, r2, r3
 8024596:	9101      	str	r1, [sp, #4]
 8024598:	2a00      	cmp	r2, #0
 802459a:	9200      	str	r2, [sp, #0]
 802459c:	db1c      	blt.n	80245d8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802459e:	6963      	ldr	r3, [r4, #20]
 80245a0:	429a      	cmp	r2, r3
 80245a2:	bfac      	ite	ge
 80245a4:	2002      	movge	r0, #2
 80245a6:	2000      	movlt	r0, #0
 80245a8:	2900      	cmp	r1, #0
 80245aa:	db17      	blt.n	80245dc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80245ac:	6923      	ldr	r3, [r4, #16]
 80245ae:	4299      	cmp	r1, r3
 80245b0:	bfac      	ite	ge
 80245b2:	2308      	movge	r3, #8
 80245b4:	2300      	movlt	r3, #0
 80245b6:	4303      	orrs	r3, r0
 80245b8:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80245bc:	b2dd      	uxtb	r5, r3
 80245be:	b978      	cbnz	r0, 80245e0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 80245c0:	f104 0020 	add.w	r0, r4, #32
 80245c4:	f7ff fd38 	bl	8024038 <_ZN8touchgfx10Rasterizer6lineToEii>
 80245c8:	9b01      	ldr	r3, [sp, #4]
 80245ca:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 80245ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80245d0:	9b00      	ldr	r3, [sp, #0]
 80245d2:	6623      	str	r3, [r4, #96]	; 0x60
 80245d4:	b002      	add	sp, #8
 80245d6:	bd70      	pop	{r4, r5, r6, pc}
 80245d8:	2001      	movs	r0, #1
 80245da:	e7e5      	b.n	80245a8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 80245dc:	2304      	movs	r3, #4
 80245de:	e7ea      	b.n	80245b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 80245e0:	b113      	cbz	r3, 80245e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 80245e2:	ea10 0305 	ands.w	r3, r0, r5
 80245e6:	d11c      	bne.n	8024622 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 80245e8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80245ec:	f104 0620 	add.w	r6, r4, #32
 80245f0:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 80245f4:	b98b      	cbnz	r3, 802461a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 80245f6:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 80245fa:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 80245fe:	4298      	cmp	r0, r3
 8024600:	d802      	bhi.n	8024608 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8024602:	4630      	mov	r0, r6
 8024604:	f7f2 fc76 	bl	8016ef4 <_ZN8touchgfx7Outline6moveToEii>
 8024608:	2301      	movs	r3, #1
 802460a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802460e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8024612:	4630      	mov	r0, r6
 8024614:	e9dd 2100 	ldrd	r2, r1, [sp]
 8024618:	e7d4      	b.n	80245c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802461a:	4630      	mov	r0, r6
 802461c:	f7ff fd0c 	bl	8024038 <_ZN8touchgfx10Rasterizer6lineToEii>
 8024620:	e7f7      	b.n	8024612 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8024622:	461d      	mov	r5, r3
 8024624:	e7d0      	b.n	80245c8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08024628 <_ZN8touchgfx6CanvasD1Ev>:
 8024628:	4b04      	ldr	r3, [pc, #16]	; (802463c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802462a:	b510      	push	{r4, lr}
 802462c:	4604      	mov	r4, r0
 802462e:	f840 3b20 	str.w	r3, [r0], #32
 8024632:	f7f1 ff67 	bl	8016504 <_ZN8touchgfx7OutlineD1Ev>
 8024636:	4620      	mov	r0, r4
 8024638:	bd10      	pop	{r4, pc}
 802463a:	bf00      	nop
 802463c:	0802838c 	.word	0x0802838c

08024640 <_ZN8touchgfx6CanvasD0Ev>:
 8024640:	b510      	push	{r4, lr}
 8024642:	4604      	mov	r4, r0
 8024644:	f7ff fff0 	bl	8024628 <_ZN8touchgfx6CanvasD1Ev>
 8024648:	2170      	movs	r1, #112	; 0x70
 802464a:	4620      	mov	r0, r4
 802464c:	f000 f807 	bl	802465e <_ZdlPvj>
 8024650:	4620      	mov	r0, r4
 8024652:	bd10      	pop	{r4, pc}

08024654 <__aeabi_atexit>:
 8024654:	460b      	mov	r3, r1
 8024656:	4601      	mov	r1, r0
 8024658:	4618      	mov	r0, r3
 802465a:	f000 b931 	b.w	80248c0 <__cxa_atexit>

0802465e <_ZdlPvj>:
 802465e:	f000 b812 	b.w	8024686 <_ZdlPv>

08024662 <__cxa_guard_acquire>:
 8024662:	6803      	ldr	r3, [r0, #0]
 8024664:	07db      	lsls	r3, r3, #31
 8024666:	d406      	bmi.n	8024676 <__cxa_guard_acquire+0x14>
 8024668:	7843      	ldrb	r3, [r0, #1]
 802466a:	b103      	cbz	r3, 802466e <__cxa_guard_acquire+0xc>
 802466c:	deff      	udf	#255	; 0xff
 802466e:	2301      	movs	r3, #1
 8024670:	7043      	strb	r3, [r0, #1]
 8024672:	4618      	mov	r0, r3
 8024674:	4770      	bx	lr
 8024676:	2000      	movs	r0, #0
 8024678:	4770      	bx	lr

0802467a <__cxa_guard_release>:
 802467a:	2301      	movs	r3, #1
 802467c:	6003      	str	r3, [r0, #0]
 802467e:	4770      	bx	lr

08024680 <__cxa_pure_virtual>:
 8024680:	b508      	push	{r3, lr}
 8024682:	f000 f80f 	bl	80246a4 <_ZSt9terminatev>

08024686 <_ZdlPv>:
 8024686:	f000 b96d 	b.w	8024964 <free>

0802468a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802468a:	b508      	push	{r3, lr}
 802468c:	4780      	blx	r0
 802468e:	f000 f8eb 	bl	8024868 <abort>
	...

08024694 <_ZSt13get_terminatev>:
 8024694:	4b02      	ldr	r3, [pc, #8]	; (80246a0 <_ZSt13get_terminatev+0xc>)
 8024696:	6818      	ldr	r0, [r3, #0]
 8024698:	f3bf 8f5b 	dmb	ish
 802469c:	4770      	bx	lr
 802469e:	bf00      	nop
 80246a0:	240000b0 	.word	0x240000b0

080246a4 <_ZSt9terminatev>:
 80246a4:	b508      	push	{r3, lr}
 80246a6:	f7ff fff5 	bl	8024694 <_ZSt13get_terminatev>
 80246aa:	f7ff ffee 	bl	802468a <_ZN10__cxxabiv111__terminateEPFvvE>

080246ae <with_errnof>:
 80246ae:	b513      	push	{r0, r1, r4, lr}
 80246b0:	4604      	mov	r4, r0
 80246b2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80246b6:	f000 f911 	bl	80248dc <__errno>
 80246ba:	ed9d 0a01 	vldr	s0, [sp, #4]
 80246be:	6004      	str	r4, [r0, #0]
 80246c0:	b002      	add	sp, #8
 80246c2:	bd10      	pop	{r4, pc}

080246c4 <__math_invalidf>:
 80246c4:	eef0 7a40 	vmov.f32	s15, s0
 80246c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80246cc:	eef4 7a67 	vcmp.f32	s15, s15
 80246d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80246d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80246d8:	d602      	bvs.n	80246e0 <__math_invalidf+0x1c>
 80246da:	2021      	movs	r0, #33	; 0x21
 80246dc:	f7ff bfe7 	b.w	80246ae <with_errnof>
 80246e0:	4770      	bx	lr

080246e2 <sinf_poly>:
 80246e2:	07cb      	lsls	r3, r1, #31
 80246e4:	d412      	bmi.n	802470c <sinf_poly+0x2a>
 80246e6:	ee21 5b00 	vmul.f64	d5, d1, d0
 80246ea:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 80246ee:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 80246f2:	eea6 7b01 	vfma.f64	d7, d6, d1
 80246f6:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 80246fa:	ee21 1b05 	vmul.f64	d1, d1, d5
 80246fe:	eea6 0b05 	vfma.f64	d0, d6, d5
 8024702:	eea7 0b01 	vfma.f64	d0, d7, d1
 8024706:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802470a:	4770      	bx	lr
 802470c:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 8024710:	ee21 5b01 	vmul.f64	d5, d1, d1
 8024714:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8024718:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802471c:	eea1 7b06 	vfma.f64	d7, d1, d6
 8024720:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8024724:	eea1 0b06 	vfma.f64	d0, d1, d6
 8024728:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 802472c:	ee21 1b05 	vmul.f64	d1, d1, d5
 8024730:	eea5 0b06 	vfma.f64	d0, d5, d6
 8024734:	e7e5      	b.n	8024702 <sinf_poly+0x20>
	...

08024738 <sinf>:
 8024738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802473a:	ee10 4a10 	vmov	r4, s0
 802473e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8024742:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8024746:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802474a:	eef0 7a40 	vmov.f32	s15, s0
 802474e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8024752:	d218      	bcs.n	8024786 <sinf+0x4e>
 8024754:	ee26 1b06 	vmul.f64	d1, d6, d6
 8024758:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802475c:	d20a      	bcs.n	8024774 <sinf+0x3c>
 802475e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8024762:	d103      	bne.n	802476c <sinf+0x34>
 8024764:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8024768:	ed8d 1a01 	vstr	s2, [sp, #4]
 802476c:	eeb0 0a67 	vmov.f32	s0, s15
 8024770:	b003      	add	sp, #12
 8024772:	bd30      	pop	{r4, r5, pc}
 8024774:	483a      	ldr	r0, [pc, #232]	; (8024860 <sinf+0x128>)
 8024776:	eeb0 0b46 	vmov.f64	d0, d6
 802477a:	2100      	movs	r1, #0
 802477c:	b003      	add	sp, #12
 802477e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024782:	f7ff bfae 	b.w	80246e2 <sinf_poly>
 8024786:	f240 422e 	movw	r2, #1070	; 0x42e
 802478a:	4293      	cmp	r3, r2
 802478c:	d824      	bhi.n	80247d8 <sinf+0xa0>
 802478e:	4b34      	ldr	r3, [pc, #208]	; (8024860 <sinf+0x128>)
 8024790:	ed93 7b08 	vldr	d7, [r3, #32]
 8024794:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024798:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802479c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80247a0:	ee17 1a90 	vmov	r1, s15
 80247a4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80247a8:	1609      	asrs	r1, r1, #24
 80247aa:	ee07 1a90 	vmov	s15, r1
 80247ae:	f001 0203 	and.w	r2, r1, #3
 80247b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80247b6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80247ba:	ed92 0b00 	vldr	d0, [r2]
 80247be:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80247c2:	f011 0f02 	tst.w	r1, #2
 80247c6:	eea5 6b47 	vfms.f64	d6, d5, d7
 80247ca:	bf08      	it	eq
 80247cc:	4618      	moveq	r0, r3
 80247ce:	ee26 1b06 	vmul.f64	d1, d6, d6
 80247d2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80247d6:	e7d1      	b.n	802477c <sinf+0x44>
 80247d8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 80247dc:	d237      	bcs.n	802484e <sinf+0x116>
 80247de:	4a21      	ldr	r2, [pc, #132]	; (8024864 <sinf+0x12c>)
 80247e0:	f3c4 6183 	ubfx	r1, r4, #26, #4
 80247e4:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 80247e8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80247ec:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 80247f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80247f4:	4083      	lsls	r3, r0
 80247f6:	6a28      	ldr	r0, [r5, #32]
 80247f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80247fc:	fba3 1000 	umull	r1, r0, r3, r0
 8024800:	6929      	ldr	r1, [r5, #16]
 8024802:	435a      	muls	r2, r3
 8024804:	fbe3 0201 	umlal	r0, r2, r3, r1
 8024808:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 802480c:	0f8d      	lsrs	r5, r1, #30
 802480e:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 8024812:	1a51      	subs	r1, r2, r1
 8024814:	f7db ff42 	bl	800069c <__aeabi_l2d>
 8024818:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802481c:	4b10      	ldr	r3, [pc, #64]	; (8024860 <sinf+0x128>)
 802481e:	f004 0203 	and.w	r2, r4, #3
 8024822:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8024826:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8024858 <sinf+0x120>
 802482a:	ed92 0b00 	vldr	d0, [r2]
 802482e:	ec41 0b16 	vmov	d6, r0, r1
 8024832:	f014 0f02 	tst.w	r4, #2
 8024836:	ee26 7b07 	vmul.f64	d7, d6, d7
 802483a:	f103 0070 	add.w	r0, r3, #112	; 0x70
 802483e:	4629      	mov	r1, r5
 8024840:	bf08      	it	eq
 8024842:	4618      	moveq	r0, r3
 8024844:	ee27 1b07 	vmul.f64	d1, d7, d7
 8024848:	ee20 0b07 	vmul.f64	d0, d0, d7
 802484c:	e796      	b.n	802477c <sinf+0x44>
 802484e:	b003      	add	sp, #12
 8024850:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024854:	f7ff bf36 	b.w	80246c4 <__math_invalidf>
 8024858:	54442d18 	.word	0x54442d18
 802485c:	3c1921fb 	.word	0x3c1921fb
 8024860:	080283f8 	.word	0x080283f8
 8024864:	08028398 	.word	0x08028398

08024868 <abort>:
 8024868:	b508      	push	{r3, lr}
 802486a:	2006      	movs	r0, #6
 802486c:	f000 fcdc 	bl	8025228 <raise>
 8024870:	2001      	movs	r0, #1
 8024872:	f7dc fe31 	bl	80014d8 <_exit>
	...

08024878 <__assert_func>:
 8024878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802487a:	4614      	mov	r4, r2
 802487c:	461a      	mov	r2, r3
 802487e:	4b09      	ldr	r3, [pc, #36]	; (80248a4 <__assert_func+0x2c>)
 8024880:	681b      	ldr	r3, [r3, #0]
 8024882:	4605      	mov	r5, r0
 8024884:	68d8      	ldr	r0, [r3, #12]
 8024886:	b14c      	cbz	r4, 802489c <__assert_func+0x24>
 8024888:	4b07      	ldr	r3, [pc, #28]	; (80248a8 <__assert_func+0x30>)
 802488a:	9100      	str	r1, [sp, #0]
 802488c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024890:	4906      	ldr	r1, [pc, #24]	; (80248ac <__assert_func+0x34>)
 8024892:	462b      	mov	r3, r5
 8024894:	f000 f828 	bl	80248e8 <fiprintf>
 8024898:	f7ff ffe6 	bl	8024868 <abort>
 802489c:	4b04      	ldr	r3, [pc, #16]	; (80248b0 <__assert_func+0x38>)
 802489e:	461c      	mov	r4, r3
 80248a0:	e7f3      	b.n	802488a <__assert_func+0x12>
 80248a2:	bf00      	nop
 80248a4:	240000b4 	.word	0x240000b4
 80248a8:	080284d8 	.word	0x080284d8
 80248ac:	080284e5 	.word	0x080284e5
 80248b0:	08028513 	.word	0x08028513

080248b4 <atexit>:
 80248b4:	2300      	movs	r3, #0
 80248b6:	4601      	mov	r1, r0
 80248b8:	461a      	mov	r2, r3
 80248ba:	4618      	mov	r0, r3
 80248bc:	f000 bd90 	b.w	80253e0 <__register_exitproc>

080248c0 <__cxa_atexit>:
 80248c0:	b510      	push	{r4, lr}
 80248c2:	4c05      	ldr	r4, [pc, #20]	; (80248d8 <__cxa_atexit+0x18>)
 80248c4:	4613      	mov	r3, r2
 80248c6:	b12c      	cbz	r4, 80248d4 <__cxa_atexit+0x14>
 80248c8:	460a      	mov	r2, r1
 80248ca:	4601      	mov	r1, r0
 80248cc:	2002      	movs	r0, #2
 80248ce:	f000 fd87 	bl	80253e0 <__register_exitproc>
 80248d2:	bd10      	pop	{r4, pc}
 80248d4:	4620      	mov	r0, r4
 80248d6:	e7fc      	b.n	80248d2 <__cxa_atexit+0x12>
 80248d8:	080253e1 	.word	0x080253e1

080248dc <__errno>:
 80248dc:	4b01      	ldr	r3, [pc, #4]	; (80248e4 <__errno+0x8>)
 80248de:	6818      	ldr	r0, [r3, #0]
 80248e0:	4770      	bx	lr
 80248e2:	bf00      	nop
 80248e4:	240000b4 	.word	0x240000b4

080248e8 <fiprintf>:
 80248e8:	b40e      	push	{r1, r2, r3}
 80248ea:	b503      	push	{r0, r1, lr}
 80248ec:	4601      	mov	r1, r0
 80248ee:	ab03      	add	r3, sp, #12
 80248f0:	4805      	ldr	r0, [pc, #20]	; (8024908 <fiprintf+0x20>)
 80248f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80248f6:	6800      	ldr	r0, [r0, #0]
 80248f8:	9301      	str	r3, [sp, #4]
 80248fa:	f000 f95b 	bl	8024bb4 <_vfiprintf_r>
 80248fe:	b002      	add	sp, #8
 8024900:	f85d eb04 	ldr.w	lr, [sp], #4
 8024904:	b003      	add	sp, #12
 8024906:	4770      	bx	lr
 8024908:	240000b4 	.word	0x240000b4

0802490c <__libc_init_array>:
 802490c:	b570      	push	{r4, r5, r6, lr}
 802490e:	4d0d      	ldr	r5, [pc, #52]	; (8024944 <__libc_init_array+0x38>)
 8024910:	4c0d      	ldr	r4, [pc, #52]	; (8024948 <__libc_init_array+0x3c>)
 8024912:	1b64      	subs	r4, r4, r5
 8024914:	10a4      	asrs	r4, r4, #2
 8024916:	2600      	movs	r6, #0
 8024918:	42a6      	cmp	r6, r4
 802491a:	d109      	bne.n	8024930 <__libc_init_array+0x24>
 802491c:	4d0b      	ldr	r5, [pc, #44]	; (802494c <__libc_init_array+0x40>)
 802491e:	4c0c      	ldr	r4, [pc, #48]	; (8024950 <__libc_init_array+0x44>)
 8024920:	f001 f898 	bl	8025a54 <_init>
 8024924:	1b64      	subs	r4, r4, r5
 8024926:	10a4      	asrs	r4, r4, #2
 8024928:	2600      	movs	r6, #0
 802492a:	42a6      	cmp	r6, r4
 802492c:	d105      	bne.n	802493a <__libc_init_array+0x2e>
 802492e:	bd70      	pop	{r4, r5, r6, pc}
 8024930:	f855 3b04 	ldr.w	r3, [r5], #4
 8024934:	4798      	blx	r3
 8024936:	3601      	adds	r6, #1
 8024938:	e7ee      	b.n	8024918 <__libc_init_array+0xc>
 802493a:	f855 3b04 	ldr.w	r3, [r5], #4
 802493e:	4798      	blx	r3
 8024940:	3601      	adds	r6, #1
 8024942:	e7f2      	b.n	802492a <__libc_init_array+0x1e>
 8024944:	080290cc 	.word	0x080290cc
 8024948:	080290cc 	.word	0x080290cc
 802494c:	080290cc 	.word	0x080290cc
 8024950:	080290e4 	.word	0x080290e4

08024954 <malloc>:
 8024954:	4b02      	ldr	r3, [pc, #8]	; (8024960 <malloc+0xc>)
 8024956:	4601      	mov	r1, r0
 8024958:	6818      	ldr	r0, [r3, #0]
 802495a:	f000 b88d 	b.w	8024a78 <_malloc_r>
 802495e:	bf00      	nop
 8024960:	240000b4 	.word	0x240000b4

08024964 <free>:
 8024964:	4b02      	ldr	r3, [pc, #8]	; (8024970 <free+0xc>)
 8024966:	4601      	mov	r1, r0
 8024968:	6818      	ldr	r0, [r3, #0]
 802496a:	f000 b819 	b.w	80249a0 <_free_r>
 802496e:	bf00      	nop
 8024970:	240000b4 	.word	0x240000b4

08024974 <memcpy>:
 8024974:	440a      	add	r2, r1
 8024976:	4291      	cmp	r1, r2
 8024978:	f100 33ff 	add.w	r3, r0, #4294967295
 802497c:	d100      	bne.n	8024980 <memcpy+0xc>
 802497e:	4770      	bx	lr
 8024980:	b510      	push	{r4, lr}
 8024982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024986:	f803 4f01 	strb.w	r4, [r3, #1]!
 802498a:	4291      	cmp	r1, r2
 802498c:	d1f9      	bne.n	8024982 <memcpy+0xe>
 802498e:	bd10      	pop	{r4, pc}

08024990 <memset>:
 8024990:	4402      	add	r2, r0
 8024992:	4603      	mov	r3, r0
 8024994:	4293      	cmp	r3, r2
 8024996:	d100      	bne.n	802499a <memset+0xa>
 8024998:	4770      	bx	lr
 802499a:	f803 1b01 	strb.w	r1, [r3], #1
 802499e:	e7f9      	b.n	8024994 <memset+0x4>

080249a0 <_free_r>:
 80249a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80249a2:	2900      	cmp	r1, #0
 80249a4:	d044      	beq.n	8024a30 <_free_r+0x90>
 80249a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80249aa:	9001      	str	r0, [sp, #4]
 80249ac:	2b00      	cmp	r3, #0
 80249ae:	f1a1 0404 	sub.w	r4, r1, #4
 80249b2:	bfb8      	it	lt
 80249b4:	18e4      	addlt	r4, r4, r3
 80249b6:	f000 ff95 	bl	80258e4 <__malloc_lock>
 80249ba:	4a1e      	ldr	r2, [pc, #120]	; (8024a34 <_free_r+0x94>)
 80249bc:	9801      	ldr	r0, [sp, #4]
 80249be:	6813      	ldr	r3, [r2, #0]
 80249c0:	b933      	cbnz	r3, 80249d0 <_free_r+0x30>
 80249c2:	6063      	str	r3, [r4, #4]
 80249c4:	6014      	str	r4, [r2, #0]
 80249c6:	b003      	add	sp, #12
 80249c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80249cc:	f000 bf90 	b.w	80258f0 <__malloc_unlock>
 80249d0:	42a3      	cmp	r3, r4
 80249d2:	d908      	bls.n	80249e6 <_free_r+0x46>
 80249d4:	6825      	ldr	r5, [r4, #0]
 80249d6:	1961      	adds	r1, r4, r5
 80249d8:	428b      	cmp	r3, r1
 80249da:	bf01      	itttt	eq
 80249dc:	6819      	ldreq	r1, [r3, #0]
 80249de:	685b      	ldreq	r3, [r3, #4]
 80249e0:	1949      	addeq	r1, r1, r5
 80249e2:	6021      	streq	r1, [r4, #0]
 80249e4:	e7ed      	b.n	80249c2 <_free_r+0x22>
 80249e6:	461a      	mov	r2, r3
 80249e8:	685b      	ldr	r3, [r3, #4]
 80249ea:	b10b      	cbz	r3, 80249f0 <_free_r+0x50>
 80249ec:	42a3      	cmp	r3, r4
 80249ee:	d9fa      	bls.n	80249e6 <_free_r+0x46>
 80249f0:	6811      	ldr	r1, [r2, #0]
 80249f2:	1855      	adds	r5, r2, r1
 80249f4:	42a5      	cmp	r5, r4
 80249f6:	d10b      	bne.n	8024a10 <_free_r+0x70>
 80249f8:	6824      	ldr	r4, [r4, #0]
 80249fa:	4421      	add	r1, r4
 80249fc:	1854      	adds	r4, r2, r1
 80249fe:	42a3      	cmp	r3, r4
 8024a00:	6011      	str	r1, [r2, #0]
 8024a02:	d1e0      	bne.n	80249c6 <_free_r+0x26>
 8024a04:	681c      	ldr	r4, [r3, #0]
 8024a06:	685b      	ldr	r3, [r3, #4]
 8024a08:	6053      	str	r3, [r2, #4]
 8024a0a:	4421      	add	r1, r4
 8024a0c:	6011      	str	r1, [r2, #0]
 8024a0e:	e7da      	b.n	80249c6 <_free_r+0x26>
 8024a10:	d902      	bls.n	8024a18 <_free_r+0x78>
 8024a12:	230c      	movs	r3, #12
 8024a14:	6003      	str	r3, [r0, #0]
 8024a16:	e7d6      	b.n	80249c6 <_free_r+0x26>
 8024a18:	6825      	ldr	r5, [r4, #0]
 8024a1a:	1961      	adds	r1, r4, r5
 8024a1c:	428b      	cmp	r3, r1
 8024a1e:	bf04      	itt	eq
 8024a20:	6819      	ldreq	r1, [r3, #0]
 8024a22:	685b      	ldreq	r3, [r3, #4]
 8024a24:	6063      	str	r3, [r4, #4]
 8024a26:	bf04      	itt	eq
 8024a28:	1949      	addeq	r1, r1, r5
 8024a2a:	6021      	streq	r1, [r4, #0]
 8024a2c:	6054      	str	r4, [r2, #4]
 8024a2e:	e7ca      	b.n	80249c6 <_free_r+0x26>
 8024a30:	b003      	add	sp, #12
 8024a32:	bd30      	pop	{r4, r5, pc}
 8024a34:	24010144 	.word	0x24010144

08024a38 <sbrk_aligned>:
 8024a38:	b570      	push	{r4, r5, r6, lr}
 8024a3a:	4e0e      	ldr	r6, [pc, #56]	; (8024a74 <sbrk_aligned+0x3c>)
 8024a3c:	460c      	mov	r4, r1
 8024a3e:	6831      	ldr	r1, [r6, #0]
 8024a40:	4605      	mov	r5, r0
 8024a42:	b911      	cbnz	r1, 8024a4a <sbrk_aligned+0x12>
 8024a44:	f000 fbb8 	bl	80251b8 <_sbrk_r>
 8024a48:	6030      	str	r0, [r6, #0]
 8024a4a:	4621      	mov	r1, r4
 8024a4c:	4628      	mov	r0, r5
 8024a4e:	f000 fbb3 	bl	80251b8 <_sbrk_r>
 8024a52:	1c43      	adds	r3, r0, #1
 8024a54:	d00a      	beq.n	8024a6c <sbrk_aligned+0x34>
 8024a56:	1cc4      	adds	r4, r0, #3
 8024a58:	f024 0403 	bic.w	r4, r4, #3
 8024a5c:	42a0      	cmp	r0, r4
 8024a5e:	d007      	beq.n	8024a70 <sbrk_aligned+0x38>
 8024a60:	1a21      	subs	r1, r4, r0
 8024a62:	4628      	mov	r0, r5
 8024a64:	f000 fba8 	bl	80251b8 <_sbrk_r>
 8024a68:	3001      	adds	r0, #1
 8024a6a:	d101      	bne.n	8024a70 <sbrk_aligned+0x38>
 8024a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8024a70:	4620      	mov	r0, r4
 8024a72:	bd70      	pop	{r4, r5, r6, pc}
 8024a74:	24010148 	.word	0x24010148

08024a78 <_malloc_r>:
 8024a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a7c:	1ccd      	adds	r5, r1, #3
 8024a7e:	f025 0503 	bic.w	r5, r5, #3
 8024a82:	3508      	adds	r5, #8
 8024a84:	2d0c      	cmp	r5, #12
 8024a86:	bf38      	it	cc
 8024a88:	250c      	movcc	r5, #12
 8024a8a:	2d00      	cmp	r5, #0
 8024a8c:	4607      	mov	r7, r0
 8024a8e:	db01      	blt.n	8024a94 <_malloc_r+0x1c>
 8024a90:	42a9      	cmp	r1, r5
 8024a92:	d905      	bls.n	8024aa0 <_malloc_r+0x28>
 8024a94:	230c      	movs	r3, #12
 8024a96:	603b      	str	r3, [r7, #0]
 8024a98:	2600      	movs	r6, #0
 8024a9a:	4630      	mov	r0, r6
 8024a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024aa0:	4e2e      	ldr	r6, [pc, #184]	; (8024b5c <_malloc_r+0xe4>)
 8024aa2:	f000 ff1f 	bl	80258e4 <__malloc_lock>
 8024aa6:	6833      	ldr	r3, [r6, #0]
 8024aa8:	461c      	mov	r4, r3
 8024aaa:	bb34      	cbnz	r4, 8024afa <_malloc_r+0x82>
 8024aac:	4629      	mov	r1, r5
 8024aae:	4638      	mov	r0, r7
 8024ab0:	f7ff ffc2 	bl	8024a38 <sbrk_aligned>
 8024ab4:	1c43      	adds	r3, r0, #1
 8024ab6:	4604      	mov	r4, r0
 8024ab8:	d14d      	bne.n	8024b56 <_malloc_r+0xde>
 8024aba:	6834      	ldr	r4, [r6, #0]
 8024abc:	4626      	mov	r6, r4
 8024abe:	2e00      	cmp	r6, #0
 8024ac0:	d140      	bne.n	8024b44 <_malloc_r+0xcc>
 8024ac2:	6823      	ldr	r3, [r4, #0]
 8024ac4:	4631      	mov	r1, r6
 8024ac6:	4638      	mov	r0, r7
 8024ac8:	eb04 0803 	add.w	r8, r4, r3
 8024acc:	f000 fb74 	bl	80251b8 <_sbrk_r>
 8024ad0:	4580      	cmp	r8, r0
 8024ad2:	d13a      	bne.n	8024b4a <_malloc_r+0xd2>
 8024ad4:	6821      	ldr	r1, [r4, #0]
 8024ad6:	3503      	adds	r5, #3
 8024ad8:	1a6d      	subs	r5, r5, r1
 8024ada:	f025 0503 	bic.w	r5, r5, #3
 8024ade:	3508      	adds	r5, #8
 8024ae0:	2d0c      	cmp	r5, #12
 8024ae2:	bf38      	it	cc
 8024ae4:	250c      	movcc	r5, #12
 8024ae6:	4629      	mov	r1, r5
 8024ae8:	4638      	mov	r0, r7
 8024aea:	f7ff ffa5 	bl	8024a38 <sbrk_aligned>
 8024aee:	3001      	adds	r0, #1
 8024af0:	d02b      	beq.n	8024b4a <_malloc_r+0xd2>
 8024af2:	6823      	ldr	r3, [r4, #0]
 8024af4:	442b      	add	r3, r5
 8024af6:	6023      	str	r3, [r4, #0]
 8024af8:	e00e      	b.n	8024b18 <_malloc_r+0xa0>
 8024afa:	6822      	ldr	r2, [r4, #0]
 8024afc:	1b52      	subs	r2, r2, r5
 8024afe:	d41e      	bmi.n	8024b3e <_malloc_r+0xc6>
 8024b00:	2a0b      	cmp	r2, #11
 8024b02:	d916      	bls.n	8024b32 <_malloc_r+0xba>
 8024b04:	1961      	adds	r1, r4, r5
 8024b06:	42a3      	cmp	r3, r4
 8024b08:	6025      	str	r5, [r4, #0]
 8024b0a:	bf18      	it	ne
 8024b0c:	6059      	strne	r1, [r3, #4]
 8024b0e:	6863      	ldr	r3, [r4, #4]
 8024b10:	bf08      	it	eq
 8024b12:	6031      	streq	r1, [r6, #0]
 8024b14:	5162      	str	r2, [r4, r5]
 8024b16:	604b      	str	r3, [r1, #4]
 8024b18:	4638      	mov	r0, r7
 8024b1a:	f104 060b 	add.w	r6, r4, #11
 8024b1e:	f000 fee7 	bl	80258f0 <__malloc_unlock>
 8024b22:	f026 0607 	bic.w	r6, r6, #7
 8024b26:	1d23      	adds	r3, r4, #4
 8024b28:	1af2      	subs	r2, r6, r3
 8024b2a:	d0b6      	beq.n	8024a9a <_malloc_r+0x22>
 8024b2c:	1b9b      	subs	r3, r3, r6
 8024b2e:	50a3      	str	r3, [r4, r2]
 8024b30:	e7b3      	b.n	8024a9a <_malloc_r+0x22>
 8024b32:	6862      	ldr	r2, [r4, #4]
 8024b34:	42a3      	cmp	r3, r4
 8024b36:	bf0c      	ite	eq
 8024b38:	6032      	streq	r2, [r6, #0]
 8024b3a:	605a      	strne	r2, [r3, #4]
 8024b3c:	e7ec      	b.n	8024b18 <_malloc_r+0xa0>
 8024b3e:	4623      	mov	r3, r4
 8024b40:	6864      	ldr	r4, [r4, #4]
 8024b42:	e7b2      	b.n	8024aaa <_malloc_r+0x32>
 8024b44:	4634      	mov	r4, r6
 8024b46:	6876      	ldr	r6, [r6, #4]
 8024b48:	e7b9      	b.n	8024abe <_malloc_r+0x46>
 8024b4a:	230c      	movs	r3, #12
 8024b4c:	603b      	str	r3, [r7, #0]
 8024b4e:	4638      	mov	r0, r7
 8024b50:	f000 fece 	bl	80258f0 <__malloc_unlock>
 8024b54:	e7a1      	b.n	8024a9a <_malloc_r+0x22>
 8024b56:	6025      	str	r5, [r4, #0]
 8024b58:	e7de      	b.n	8024b18 <_malloc_r+0xa0>
 8024b5a:	bf00      	nop
 8024b5c:	24010144 	.word	0x24010144

08024b60 <__sfputc_r>:
 8024b60:	6893      	ldr	r3, [r2, #8]
 8024b62:	3b01      	subs	r3, #1
 8024b64:	2b00      	cmp	r3, #0
 8024b66:	b410      	push	{r4}
 8024b68:	6093      	str	r3, [r2, #8]
 8024b6a:	da08      	bge.n	8024b7e <__sfputc_r+0x1e>
 8024b6c:	6994      	ldr	r4, [r2, #24]
 8024b6e:	42a3      	cmp	r3, r4
 8024b70:	db01      	blt.n	8024b76 <__sfputc_r+0x16>
 8024b72:	290a      	cmp	r1, #10
 8024b74:	d103      	bne.n	8024b7e <__sfputc_r+0x1e>
 8024b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b7a:	f000 bb71 	b.w	8025260 <__swbuf_r>
 8024b7e:	6813      	ldr	r3, [r2, #0]
 8024b80:	1c58      	adds	r0, r3, #1
 8024b82:	6010      	str	r0, [r2, #0]
 8024b84:	7019      	strb	r1, [r3, #0]
 8024b86:	4608      	mov	r0, r1
 8024b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b8c:	4770      	bx	lr

08024b8e <__sfputs_r>:
 8024b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024b90:	4606      	mov	r6, r0
 8024b92:	460f      	mov	r7, r1
 8024b94:	4614      	mov	r4, r2
 8024b96:	18d5      	adds	r5, r2, r3
 8024b98:	42ac      	cmp	r4, r5
 8024b9a:	d101      	bne.n	8024ba0 <__sfputs_r+0x12>
 8024b9c:	2000      	movs	r0, #0
 8024b9e:	e007      	b.n	8024bb0 <__sfputs_r+0x22>
 8024ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ba4:	463a      	mov	r2, r7
 8024ba6:	4630      	mov	r0, r6
 8024ba8:	f7ff ffda 	bl	8024b60 <__sfputc_r>
 8024bac:	1c43      	adds	r3, r0, #1
 8024bae:	d1f3      	bne.n	8024b98 <__sfputs_r+0xa>
 8024bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024bb4 <_vfiprintf_r>:
 8024bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024bb8:	460d      	mov	r5, r1
 8024bba:	b09d      	sub	sp, #116	; 0x74
 8024bbc:	4614      	mov	r4, r2
 8024bbe:	4698      	mov	r8, r3
 8024bc0:	4606      	mov	r6, r0
 8024bc2:	b118      	cbz	r0, 8024bcc <_vfiprintf_r+0x18>
 8024bc4:	6983      	ldr	r3, [r0, #24]
 8024bc6:	b90b      	cbnz	r3, 8024bcc <_vfiprintf_r+0x18>
 8024bc8:	f000 fd86 	bl	80256d8 <__sinit>
 8024bcc:	4b89      	ldr	r3, [pc, #548]	; (8024df4 <_vfiprintf_r+0x240>)
 8024bce:	429d      	cmp	r5, r3
 8024bd0:	d11b      	bne.n	8024c0a <_vfiprintf_r+0x56>
 8024bd2:	6875      	ldr	r5, [r6, #4]
 8024bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024bd6:	07d9      	lsls	r1, r3, #31
 8024bd8:	d405      	bmi.n	8024be6 <_vfiprintf_r+0x32>
 8024bda:	89ab      	ldrh	r3, [r5, #12]
 8024bdc:	059a      	lsls	r2, r3, #22
 8024bde:	d402      	bmi.n	8024be6 <_vfiprintf_r+0x32>
 8024be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024be2:	f000 fe17 	bl	8025814 <__retarget_lock_acquire_recursive>
 8024be6:	89ab      	ldrh	r3, [r5, #12]
 8024be8:	071b      	lsls	r3, r3, #28
 8024bea:	d501      	bpl.n	8024bf0 <_vfiprintf_r+0x3c>
 8024bec:	692b      	ldr	r3, [r5, #16]
 8024bee:	b9eb      	cbnz	r3, 8024c2c <_vfiprintf_r+0x78>
 8024bf0:	4629      	mov	r1, r5
 8024bf2:	4630      	mov	r0, r6
 8024bf4:	f000 fb86 	bl	8025304 <__swsetup_r>
 8024bf8:	b1c0      	cbz	r0, 8024c2c <_vfiprintf_r+0x78>
 8024bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024bfc:	07dc      	lsls	r4, r3, #31
 8024bfe:	d50e      	bpl.n	8024c1e <_vfiprintf_r+0x6a>
 8024c00:	f04f 30ff 	mov.w	r0, #4294967295
 8024c04:	b01d      	add	sp, #116	; 0x74
 8024c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c0a:	4b7b      	ldr	r3, [pc, #492]	; (8024df8 <_vfiprintf_r+0x244>)
 8024c0c:	429d      	cmp	r5, r3
 8024c0e:	d101      	bne.n	8024c14 <_vfiprintf_r+0x60>
 8024c10:	68b5      	ldr	r5, [r6, #8]
 8024c12:	e7df      	b.n	8024bd4 <_vfiprintf_r+0x20>
 8024c14:	4b79      	ldr	r3, [pc, #484]	; (8024dfc <_vfiprintf_r+0x248>)
 8024c16:	429d      	cmp	r5, r3
 8024c18:	bf08      	it	eq
 8024c1a:	68f5      	ldreq	r5, [r6, #12]
 8024c1c:	e7da      	b.n	8024bd4 <_vfiprintf_r+0x20>
 8024c1e:	89ab      	ldrh	r3, [r5, #12]
 8024c20:	0598      	lsls	r0, r3, #22
 8024c22:	d4ed      	bmi.n	8024c00 <_vfiprintf_r+0x4c>
 8024c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024c26:	f000 fdf7 	bl	8025818 <__retarget_lock_release_recursive>
 8024c2a:	e7e9      	b.n	8024c00 <_vfiprintf_r+0x4c>
 8024c2c:	2300      	movs	r3, #0
 8024c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8024c30:	2320      	movs	r3, #32
 8024c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8024c3a:	2330      	movs	r3, #48	; 0x30
 8024c3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024e00 <_vfiprintf_r+0x24c>
 8024c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024c44:	f04f 0901 	mov.w	r9, #1
 8024c48:	4623      	mov	r3, r4
 8024c4a:	469a      	mov	sl, r3
 8024c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024c50:	b10a      	cbz	r2, 8024c56 <_vfiprintf_r+0xa2>
 8024c52:	2a25      	cmp	r2, #37	; 0x25
 8024c54:	d1f9      	bne.n	8024c4a <_vfiprintf_r+0x96>
 8024c56:	ebba 0b04 	subs.w	fp, sl, r4
 8024c5a:	d00b      	beq.n	8024c74 <_vfiprintf_r+0xc0>
 8024c5c:	465b      	mov	r3, fp
 8024c5e:	4622      	mov	r2, r4
 8024c60:	4629      	mov	r1, r5
 8024c62:	4630      	mov	r0, r6
 8024c64:	f7ff ff93 	bl	8024b8e <__sfputs_r>
 8024c68:	3001      	adds	r0, #1
 8024c6a:	f000 80aa 	beq.w	8024dc2 <_vfiprintf_r+0x20e>
 8024c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c70:	445a      	add	r2, fp
 8024c72:	9209      	str	r2, [sp, #36]	; 0x24
 8024c74:	f89a 3000 	ldrb.w	r3, [sl]
 8024c78:	2b00      	cmp	r3, #0
 8024c7a:	f000 80a2 	beq.w	8024dc2 <_vfiprintf_r+0x20e>
 8024c7e:	2300      	movs	r3, #0
 8024c80:	f04f 32ff 	mov.w	r2, #4294967295
 8024c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024c88:	f10a 0a01 	add.w	sl, sl, #1
 8024c8c:	9304      	str	r3, [sp, #16]
 8024c8e:	9307      	str	r3, [sp, #28]
 8024c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024c94:	931a      	str	r3, [sp, #104]	; 0x68
 8024c96:	4654      	mov	r4, sl
 8024c98:	2205      	movs	r2, #5
 8024c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c9e:	4858      	ldr	r0, [pc, #352]	; (8024e00 <_vfiprintf_r+0x24c>)
 8024ca0:	f7db fb1e 	bl	80002e0 <memchr>
 8024ca4:	9a04      	ldr	r2, [sp, #16]
 8024ca6:	b9d8      	cbnz	r0, 8024ce0 <_vfiprintf_r+0x12c>
 8024ca8:	06d1      	lsls	r1, r2, #27
 8024caa:	bf44      	itt	mi
 8024cac:	2320      	movmi	r3, #32
 8024cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024cb2:	0713      	lsls	r3, r2, #28
 8024cb4:	bf44      	itt	mi
 8024cb6:	232b      	movmi	r3, #43	; 0x2b
 8024cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8024cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8024cc2:	d015      	beq.n	8024cf0 <_vfiprintf_r+0x13c>
 8024cc4:	9a07      	ldr	r2, [sp, #28]
 8024cc6:	4654      	mov	r4, sl
 8024cc8:	2000      	movs	r0, #0
 8024cca:	f04f 0c0a 	mov.w	ip, #10
 8024cce:	4621      	mov	r1, r4
 8024cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024cd4:	3b30      	subs	r3, #48	; 0x30
 8024cd6:	2b09      	cmp	r3, #9
 8024cd8:	d94e      	bls.n	8024d78 <_vfiprintf_r+0x1c4>
 8024cda:	b1b0      	cbz	r0, 8024d0a <_vfiprintf_r+0x156>
 8024cdc:	9207      	str	r2, [sp, #28]
 8024cde:	e014      	b.n	8024d0a <_vfiprintf_r+0x156>
 8024ce0:	eba0 0308 	sub.w	r3, r0, r8
 8024ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8024ce8:	4313      	orrs	r3, r2
 8024cea:	9304      	str	r3, [sp, #16]
 8024cec:	46a2      	mov	sl, r4
 8024cee:	e7d2      	b.n	8024c96 <_vfiprintf_r+0xe2>
 8024cf0:	9b03      	ldr	r3, [sp, #12]
 8024cf2:	1d19      	adds	r1, r3, #4
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	9103      	str	r1, [sp, #12]
 8024cf8:	2b00      	cmp	r3, #0
 8024cfa:	bfbb      	ittet	lt
 8024cfc:	425b      	neglt	r3, r3
 8024cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8024d02:	9307      	strge	r3, [sp, #28]
 8024d04:	9307      	strlt	r3, [sp, #28]
 8024d06:	bfb8      	it	lt
 8024d08:	9204      	strlt	r2, [sp, #16]
 8024d0a:	7823      	ldrb	r3, [r4, #0]
 8024d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8024d0e:	d10c      	bne.n	8024d2a <_vfiprintf_r+0x176>
 8024d10:	7863      	ldrb	r3, [r4, #1]
 8024d12:	2b2a      	cmp	r3, #42	; 0x2a
 8024d14:	d135      	bne.n	8024d82 <_vfiprintf_r+0x1ce>
 8024d16:	9b03      	ldr	r3, [sp, #12]
 8024d18:	1d1a      	adds	r2, r3, #4
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	9203      	str	r2, [sp, #12]
 8024d1e:	2b00      	cmp	r3, #0
 8024d20:	bfb8      	it	lt
 8024d22:	f04f 33ff 	movlt.w	r3, #4294967295
 8024d26:	3402      	adds	r4, #2
 8024d28:	9305      	str	r3, [sp, #20]
 8024d2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024e10 <_vfiprintf_r+0x25c>
 8024d2e:	7821      	ldrb	r1, [r4, #0]
 8024d30:	2203      	movs	r2, #3
 8024d32:	4650      	mov	r0, sl
 8024d34:	f7db fad4 	bl	80002e0 <memchr>
 8024d38:	b140      	cbz	r0, 8024d4c <_vfiprintf_r+0x198>
 8024d3a:	2340      	movs	r3, #64	; 0x40
 8024d3c:	eba0 000a 	sub.w	r0, r0, sl
 8024d40:	fa03 f000 	lsl.w	r0, r3, r0
 8024d44:	9b04      	ldr	r3, [sp, #16]
 8024d46:	4303      	orrs	r3, r0
 8024d48:	3401      	adds	r4, #1
 8024d4a:	9304      	str	r3, [sp, #16]
 8024d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d50:	482c      	ldr	r0, [pc, #176]	; (8024e04 <_vfiprintf_r+0x250>)
 8024d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024d56:	2206      	movs	r2, #6
 8024d58:	f7db fac2 	bl	80002e0 <memchr>
 8024d5c:	2800      	cmp	r0, #0
 8024d5e:	d03f      	beq.n	8024de0 <_vfiprintf_r+0x22c>
 8024d60:	4b29      	ldr	r3, [pc, #164]	; (8024e08 <_vfiprintf_r+0x254>)
 8024d62:	bb1b      	cbnz	r3, 8024dac <_vfiprintf_r+0x1f8>
 8024d64:	9b03      	ldr	r3, [sp, #12]
 8024d66:	3307      	adds	r3, #7
 8024d68:	f023 0307 	bic.w	r3, r3, #7
 8024d6c:	3308      	adds	r3, #8
 8024d6e:	9303      	str	r3, [sp, #12]
 8024d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d72:	443b      	add	r3, r7
 8024d74:	9309      	str	r3, [sp, #36]	; 0x24
 8024d76:	e767      	b.n	8024c48 <_vfiprintf_r+0x94>
 8024d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8024d7c:	460c      	mov	r4, r1
 8024d7e:	2001      	movs	r0, #1
 8024d80:	e7a5      	b.n	8024cce <_vfiprintf_r+0x11a>
 8024d82:	2300      	movs	r3, #0
 8024d84:	3401      	adds	r4, #1
 8024d86:	9305      	str	r3, [sp, #20]
 8024d88:	4619      	mov	r1, r3
 8024d8a:	f04f 0c0a 	mov.w	ip, #10
 8024d8e:	4620      	mov	r0, r4
 8024d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d94:	3a30      	subs	r2, #48	; 0x30
 8024d96:	2a09      	cmp	r2, #9
 8024d98:	d903      	bls.n	8024da2 <_vfiprintf_r+0x1ee>
 8024d9a:	2b00      	cmp	r3, #0
 8024d9c:	d0c5      	beq.n	8024d2a <_vfiprintf_r+0x176>
 8024d9e:	9105      	str	r1, [sp, #20]
 8024da0:	e7c3      	b.n	8024d2a <_vfiprintf_r+0x176>
 8024da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8024da6:	4604      	mov	r4, r0
 8024da8:	2301      	movs	r3, #1
 8024daa:	e7f0      	b.n	8024d8e <_vfiprintf_r+0x1da>
 8024dac:	ab03      	add	r3, sp, #12
 8024dae:	9300      	str	r3, [sp, #0]
 8024db0:	462a      	mov	r2, r5
 8024db2:	4b16      	ldr	r3, [pc, #88]	; (8024e0c <_vfiprintf_r+0x258>)
 8024db4:	a904      	add	r1, sp, #16
 8024db6:	4630      	mov	r0, r6
 8024db8:	f3af 8000 	nop.w
 8024dbc:	4607      	mov	r7, r0
 8024dbe:	1c78      	adds	r0, r7, #1
 8024dc0:	d1d6      	bne.n	8024d70 <_vfiprintf_r+0x1bc>
 8024dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024dc4:	07d9      	lsls	r1, r3, #31
 8024dc6:	d405      	bmi.n	8024dd4 <_vfiprintf_r+0x220>
 8024dc8:	89ab      	ldrh	r3, [r5, #12]
 8024dca:	059a      	lsls	r2, r3, #22
 8024dcc:	d402      	bmi.n	8024dd4 <_vfiprintf_r+0x220>
 8024dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024dd0:	f000 fd22 	bl	8025818 <__retarget_lock_release_recursive>
 8024dd4:	89ab      	ldrh	r3, [r5, #12]
 8024dd6:	065b      	lsls	r3, r3, #25
 8024dd8:	f53f af12 	bmi.w	8024c00 <_vfiprintf_r+0x4c>
 8024ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024dde:	e711      	b.n	8024c04 <_vfiprintf_r+0x50>
 8024de0:	ab03      	add	r3, sp, #12
 8024de2:	9300      	str	r3, [sp, #0]
 8024de4:	462a      	mov	r2, r5
 8024de6:	4b09      	ldr	r3, [pc, #36]	; (8024e0c <_vfiprintf_r+0x258>)
 8024de8:	a904      	add	r1, sp, #16
 8024dea:	4630      	mov	r0, r6
 8024dec:	f000 f880 	bl	8024ef0 <_printf_i>
 8024df0:	e7e4      	b.n	8024dbc <_vfiprintf_r+0x208>
 8024df2:	bf00      	nop
 8024df4:	080285e4 	.word	0x080285e4
 8024df8:	08028604 	.word	0x08028604
 8024dfc:	080285c4 	.word	0x080285c4
 8024e00:	08028518 	.word	0x08028518
 8024e04:	08028522 	.word	0x08028522
 8024e08:	00000000 	.word	0x00000000
 8024e0c:	08024b8f 	.word	0x08024b8f
 8024e10:	0802851e 	.word	0x0802851e

08024e14 <_printf_common>:
 8024e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e18:	4616      	mov	r6, r2
 8024e1a:	4699      	mov	r9, r3
 8024e1c:	688a      	ldr	r2, [r1, #8]
 8024e1e:	690b      	ldr	r3, [r1, #16]
 8024e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024e24:	4293      	cmp	r3, r2
 8024e26:	bfb8      	it	lt
 8024e28:	4613      	movlt	r3, r2
 8024e2a:	6033      	str	r3, [r6, #0]
 8024e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024e30:	4607      	mov	r7, r0
 8024e32:	460c      	mov	r4, r1
 8024e34:	b10a      	cbz	r2, 8024e3a <_printf_common+0x26>
 8024e36:	3301      	adds	r3, #1
 8024e38:	6033      	str	r3, [r6, #0]
 8024e3a:	6823      	ldr	r3, [r4, #0]
 8024e3c:	0699      	lsls	r1, r3, #26
 8024e3e:	bf42      	ittt	mi
 8024e40:	6833      	ldrmi	r3, [r6, #0]
 8024e42:	3302      	addmi	r3, #2
 8024e44:	6033      	strmi	r3, [r6, #0]
 8024e46:	6825      	ldr	r5, [r4, #0]
 8024e48:	f015 0506 	ands.w	r5, r5, #6
 8024e4c:	d106      	bne.n	8024e5c <_printf_common+0x48>
 8024e4e:	f104 0a19 	add.w	sl, r4, #25
 8024e52:	68e3      	ldr	r3, [r4, #12]
 8024e54:	6832      	ldr	r2, [r6, #0]
 8024e56:	1a9b      	subs	r3, r3, r2
 8024e58:	42ab      	cmp	r3, r5
 8024e5a:	dc26      	bgt.n	8024eaa <_printf_common+0x96>
 8024e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024e60:	1e13      	subs	r3, r2, #0
 8024e62:	6822      	ldr	r2, [r4, #0]
 8024e64:	bf18      	it	ne
 8024e66:	2301      	movne	r3, #1
 8024e68:	0692      	lsls	r2, r2, #26
 8024e6a:	d42b      	bmi.n	8024ec4 <_printf_common+0xb0>
 8024e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024e70:	4649      	mov	r1, r9
 8024e72:	4638      	mov	r0, r7
 8024e74:	47c0      	blx	r8
 8024e76:	3001      	adds	r0, #1
 8024e78:	d01e      	beq.n	8024eb8 <_printf_common+0xa4>
 8024e7a:	6823      	ldr	r3, [r4, #0]
 8024e7c:	68e5      	ldr	r5, [r4, #12]
 8024e7e:	6832      	ldr	r2, [r6, #0]
 8024e80:	f003 0306 	and.w	r3, r3, #6
 8024e84:	2b04      	cmp	r3, #4
 8024e86:	bf08      	it	eq
 8024e88:	1aad      	subeq	r5, r5, r2
 8024e8a:	68a3      	ldr	r3, [r4, #8]
 8024e8c:	6922      	ldr	r2, [r4, #16]
 8024e8e:	bf0c      	ite	eq
 8024e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024e94:	2500      	movne	r5, #0
 8024e96:	4293      	cmp	r3, r2
 8024e98:	bfc4      	itt	gt
 8024e9a:	1a9b      	subgt	r3, r3, r2
 8024e9c:	18ed      	addgt	r5, r5, r3
 8024e9e:	2600      	movs	r6, #0
 8024ea0:	341a      	adds	r4, #26
 8024ea2:	42b5      	cmp	r5, r6
 8024ea4:	d11a      	bne.n	8024edc <_printf_common+0xc8>
 8024ea6:	2000      	movs	r0, #0
 8024ea8:	e008      	b.n	8024ebc <_printf_common+0xa8>
 8024eaa:	2301      	movs	r3, #1
 8024eac:	4652      	mov	r2, sl
 8024eae:	4649      	mov	r1, r9
 8024eb0:	4638      	mov	r0, r7
 8024eb2:	47c0      	blx	r8
 8024eb4:	3001      	adds	r0, #1
 8024eb6:	d103      	bne.n	8024ec0 <_printf_common+0xac>
 8024eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8024ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ec0:	3501      	adds	r5, #1
 8024ec2:	e7c6      	b.n	8024e52 <_printf_common+0x3e>
 8024ec4:	18e1      	adds	r1, r4, r3
 8024ec6:	1c5a      	adds	r2, r3, #1
 8024ec8:	2030      	movs	r0, #48	; 0x30
 8024eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024ece:	4422      	add	r2, r4
 8024ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024ed8:	3302      	adds	r3, #2
 8024eda:	e7c7      	b.n	8024e6c <_printf_common+0x58>
 8024edc:	2301      	movs	r3, #1
 8024ede:	4622      	mov	r2, r4
 8024ee0:	4649      	mov	r1, r9
 8024ee2:	4638      	mov	r0, r7
 8024ee4:	47c0      	blx	r8
 8024ee6:	3001      	adds	r0, #1
 8024ee8:	d0e6      	beq.n	8024eb8 <_printf_common+0xa4>
 8024eea:	3601      	adds	r6, #1
 8024eec:	e7d9      	b.n	8024ea2 <_printf_common+0x8e>
	...

08024ef0 <_printf_i>:
 8024ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024ef4:	7e0f      	ldrb	r7, [r1, #24]
 8024ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024ef8:	2f78      	cmp	r7, #120	; 0x78
 8024efa:	4691      	mov	r9, r2
 8024efc:	4680      	mov	r8, r0
 8024efe:	460c      	mov	r4, r1
 8024f00:	469a      	mov	sl, r3
 8024f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024f06:	d807      	bhi.n	8024f18 <_printf_i+0x28>
 8024f08:	2f62      	cmp	r7, #98	; 0x62
 8024f0a:	d80a      	bhi.n	8024f22 <_printf_i+0x32>
 8024f0c:	2f00      	cmp	r7, #0
 8024f0e:	f000 80d8 	beq.w	80250c2 <_printf_i+0x1d2>
 8024f12:	2f58      	cmp	r7, #88	; 0x58
 8024f14:	f000 80a3 	beq.w	802505e <_printf_i+0x16e>
 8024f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024f20:	e03a      	b.n	8024f98 <_printf_i+0xa8>
 8024f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024f26:	2b15      	cmp	r3, #21
 8024f28:	d8f6      	bhi.n	8024f18 <_printf_i+0x28>
 8024f2a:	a101      	add	r1, pc, #4	; (adr r1, 8024f30 <_printf_i+0x40>)
 8024f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024f30:	08024f89 	.word	0x08024f89
 8024f34:	08024f9d 	.word	0x08024f9d
 8024f38:	08024f19 	.word	0x08024f19
 8024f3c:	08024f19 	.word	0x08024f19
 8024f40:	08024f19 	.word	0x08024f19
 8024f44:	08024f19 	.word	0x08024f19
 8024f48:	08024f9d 	.word	0x08024f9d
 8024f4c:	08024f19 	.word	0x08024f19
 8024f50:	08024f19 	.word	0x08024f19
 8024f54:	08024f19 	.word	0x08024f19
 8024f58:	08024f19 	.word	0x08024f19
 8024f5c:	080250a9 	.word	0x080250a9
 8024f60:	08024fcd 	.word	0x08024fcd
 8024f64:	0802508b 	.word	0x0802508b
 8024f68:	08024f19 	.word	0x08024f19
 8024f6c:	08024f19 	.word	0x08024f19
 8024f70:	080250cb 	.word	0x080250cb
 8024f74:	08024f19 	.word	0x08024f19
 8024f78:	08024fcd 	.word	0x08024fcd
 8024f7c:	08024f19 	.word	0x08024f19
 8024f80:	08024f19 	.word	0x08024f19
 8024f84:	08025093 	.word	0x08025093
 8024f88:	682b      	ldr	r3, [r5, #0]
 8024f8a:	1d1a      	adds	r2, r3, #4
 8024f8c:	681b      	ldr	r3, [r3, #0]
 8024f8e:	602a      	str	r2, [r5, #0]
 8024f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024f98:	2301      	movs	r3, #1
 8024f9a:	e0a3      	b.n	80250e4 <_printf_i+0x1f4>
 8024f9c:	6820      	ldr	r0, [r4, #0]
 8024f9e:	6829      	ldr	r1, [r5, #0]
 8024fa0:	0606      	lsls	r6, r0, #24
 8024fa2:	f101 0304 	add.w	r3, r1, #4
 8024fa6:	d50a      	bpl.n	8024fbe <_printf_i+0xce>
 8024fa8:	680e      	ldr	r6, [r1, #0]
 8024faa:	602b      	str	r3, [r5, #0]
 8024fac:	2e00      	cmp	r6, #0
 8024fae:	da03      	bge.n	8024fb8 <_printf_i+0xc8>
 8024fb0:	232d      	movs	r3, #45	; 0x2d
 8024fb2:	4276      	negs	r6, r6
 8024fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024fb8:	485e      	ldr	r0, [pc, #376]	; (8025134 <_printf_i+0x244>)
 8024fba:	230a      	movs	r3, #10
 8024fbc:	e019      	b.n	8024ff2 <_printf_i+0x102>
 8024fbe:	680e      	ldr	r6, [r1, #0]
 8024fc0:	602b      	str	r3, [r5, #0]
 8024fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024fc6:	bf18      	it	ne
 8024fc8:	b236      	sxthne	r6, r6
 8024fca:	e7ef      	b.n	8024fac <_printf_i+0xbc>
 8024fcc:	682b      	ldr	r3, [r5, #0]
 8024fce:	6820      	ldr	r0, [r4, #0]
 8024fd0:	1d19      	adds	r1, r3, #4
 8024fd2:	6029      	str	r1, [r5, #0]
 8024fd4:	0601      	lsls	r1, r0, #24
 8024fd6:	d501      	bpl.n	8024fdc <_printf_i+0xec>
 8024fd8:	681e      	ldr	r6, [r3, #0]
 8024fda:	e002      	b.n	8024fe2 <_printf_i+0xf2>
 8024fdc:	0646      	lsls	r6, r0, #25
 8024fde:	d5fb      	bpl.n	8024fd8 <_printf_i+0xe8>
 8024fe0:	881e      	ldrh	r6, [r3, #0]
 8024fe2:	4854      	ldr	r0, [pc, #336]	; (8025134 <_printf_i+0x244>)
 8024fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8024fe6:	bf0c      	ite	eq
 8024fe8:	2308      	moveq	r3, #8
 8024fea:	230a      	movne	r3, #10
 8024fec:	2100      	movs	r1, #0
 8024fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024ff2:	6865      	ldr	r5, [r4, #4]
 8024ff4:	60a5      	str	r5, [r4, #8]
 8024ff6:	2d00      	cmp	r5, #0
 8024ff8:	bfa2      	ittt	ge
 8024ffa:	6821      	ldrge	r1, [r4, #0]
 8024ffc:	f021 0104 	bicge.w	r1, r1, #4
 8025000:	6021      	strge	r1, [r4, #0]
 8025002:	b90e      	cbnz	r6, 8025008 <_printf_i+0x118>
 8025004:	2d00      	cmp	r5, #0
 8025006:	d04d      	beq.n	80250a4 <_printf_i+0x1b4>
 8025008:	4615      	mov	r5, r2
 802500a:	fbb6 f1f3 	udiv	r1, r6, r3
 802500e:	fb03 6711 	mls	r7, r3, r1, r6
 8025012:	5dc7      	ldrb	r7, [r0, r7]
 8025014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025018:	4637      	mov	r7, r6
 802501a:	42bb      	cmp	r3, r7
 802501c:	460e      	mov	r6, r1
 802501e:	d9f4      	bls.n	802500a <_printf_i+0x11a>
 8025020:	2b08      	cmp	r3, #8
 8025022:	d10b      	bne.n	802503c <_printf_i+0x14c>
 8025024:	6823      	ldr	r3, [r4, #0]
 8025026:	07de      	lsls	r6, r3, #31
 8025028:	d508      	bpl.n	802503c <_printf_i+0x14c>
 802502a:	6923      	ldr	r3, [r4, #16]
 802502c:	6861      	ldr	r1, [r4, #4]
 802502e:	4299      	cmp	r1, r3
 8025030:	bfde      	ittt	le
 8025032:	2330      	movle	r3, #48	; 0x30
 8025034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025038:	f105 35ff 	addle.w	r5, r5, #4294967295
 802503c:	1b52      	subs	r2, r2, r5
 802503e:	6122      	str	r2, [r4, #16]
 8025040:	f8cd a000 	str.w	sl, [sp]
 8025044:	464b      	mov	r3, r9
 8025046:	aa03      	add	r2, sp, #12
 8025048:	4621      	mov	r1, r4
 802504a:	4640      	mov	r0, r8
 802504c:	f7ff fee2 	bl	8024e14 <_printf_common>
 8025050:	3001      	adds	r0, #1
 8025052:	d14c      	bne.n	80250ee <_printf_i+0x1fe>
 8025054:	f04f 30ff 	mov.w	r0, #4294967295
 8025058:	b004      	add	sp, #16
 802505a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802505e:	4835      	ldr	r0, [pc, #212]	; (8025134 <_printf_i+0x244>)
 8025060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025064:	6829      	ldr	r1, [r5, #0]
 8025066:	6823      	ldr	r3, [r4, #0]
 8025068:	f851 6b04 	ldr.w	r6, [r1], #4
 802506c:	6029      	str	r1, [r5, #0]
 802506e:	061d      	lsls	r5, r3, #24
 8025070:	d514      	bpl.n	802509c <_printf_i+0x1ac>
 8025072:	07df      	lsls	r7, r3, #31
 8025074:	bf44      	itt	mi
 8025076:	f043 0320 	orrmi.w	r3, r3, #32
 802507a:	6023      	strmi	r3, [r4, #0]
 802507c:	b91e      	cbnz	r6, 8025086 <_printf_i+0x196>
 802507e:	6823      	ldr	r3, [r4, #0]
 8025080:	f023 0320 	bic.w	r3, r3, #32
 8025084:	6023      	str	r3, [r4, #0]
 8025086:	2310      	movs	r3, #16
 8025088:	e7b0      	b.n	8024fec <_printf_i+0xfc>
 802508a:	6823      	ldr	r3, [r4, #0]
 802508c:	f043 0320 	orr.w	r3, r3, #32
 8025090:	6023      	str	r3, [r4, #0]
 8025092:	2378      	movs	r3, #120	; 0x78
 8025094:	4828      	ldr	r0, [pc, #160]	; (8025138 <_printf_i+0x248>)
 8025096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802509a:	e7e3      	b.n	8025064 <_printf_i+0x174>
 802509c:	0659      	lsls	r1, r3, #25
 802509e:	bf48      	it	mi
 80250a0:	b2b6      	uxthmi	r6, r6
 80250a2:	e7e6      	b.n	8025072 <_printf_i+0x182>
 80250a4:	4615      	mov	r5, r2
 80250a6:	e7bb      	b.n	8025020 <_printf_i+0x130>
 80250a8:	682b      	ldr	r3, [r5, #0]
 80250aa:	6826      	ldr	r6, [r4, #0]
 80250ac:	6961      	ldr	r1, [r4, #20]
 80250ae:	1d18      	adds	r0, r3, #4
 80250b0:	6028      	str	r0, [r5, #0]
 80250b2:	0635      	lsls	r5, r6, #24
 80250b4:	681b      	ldr	r3, [r3, #0]
 80250b6:	d501      	bpl.n	80250bc <_printf_i+0x1cc>
 80250b8:	6019      	str	r1, [r3, #0]
 80250ba:	e002      	b.n	80250c2 <_printf_i+0x1d2>
 80250bc:	0670      	lsls	r0, r6, #25
 80250be:	d5fb      	bpl.n	80250b8 <_printf_i+0x1c8>
 80250c0:	8019      	strh	r1, [r3, #0]
 80250c2:	2300      	movs	r3, #0
 80250c4:	6123      	str	r3, [r4, #16]
 80250c6:	4615      	mov	r5, r2
 80250c8:	e7ba      	b.n	8025040 <_printf_i+0x150>
 80250ca:	682b      	ldr	r3, [r5, #0]
 80250cc:	1d1a      	adds	r2, r3, #4
 80250ce:	602a      	str	r2, [r5, #0]
 80250d0:	681d      	ldr	r5, [r3, #0]
 80250d2:	6862      	ldr	r2, [r4, #4]
 80250d4:	2100      	movs	r1, #0
 80250d6:	4628      	mov	r0, r5
 80250d8:	f7db f902 	bl	80002e0 <memchr>
 80250dc:	b108      	cbz	r0, 80250e2 <_printf_i+0x1f2>
 80250de:	1b40      	subs	r0, r0, r5
 80250e0:	6060      	str	r0, [r4, #4]
 80250e2:	6863      	ldr	r3, [r4, #4]
 80250e4:	6123      	str	r3, [r4, #16]
 80250e6:	2300      	movs	r3, #0
 80250e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250ec:	e7a8      	b.n	8025040 <_printf_i+0x150>
 80250ee:	6923      	ldr	r3, [r4, #16]
 80250f0:	462a      	mov	r2, r5
 80250f2:	4649      	mov	r1, r9
 80250f4:	4640      	mov	r0, r8
 80250f6:	47d0      	blx	sl
 80250f8:	3001      	adds	r0, #1
 80250fa:	d0ab      	beq.n	8025054 <_printf_i+0x164>
 80250fc:	6823      	ldr	r3, [r4, #0]
 80250fe:	079b      	lsls	r3, r3, #30
 8025100:	d413      	bmi.n	802512a <_printf_i+0x23a>
 8025102:	68e0      	ldr	r0, [r4, #12]
 8025104:	9b03      	ldr	r3, [sp, #12]
 8025106:	4298      	cmp	r0, r3
 8025108:	bfb8      	it	lt
 802510a:	4618      	movlt	r0, r3
 802510c:	e7a4      	b.n	8025058 <_printf_i+0x168>
 802510e:	2301      	movs	r3, #1
 8025110:	4632      	mov	r2, r6
 8025112:	4649      	mov	r1, r9
 8025114:	4640      	mov	r0, r8
 8025116:	47d0      	blx	sl
 8025118:	3001      	adds	r0, #1
 802511a:	d09b      	beq.n	8025054 <_printf_i+0x164>
 802511c:	3501      	adds	r5, #1
 802511e:	68e3      	ldr	r3, [r4, #12]
 8025120:	9903      	ldr	r1, [sp, #12]
 8025122:	1a5b      	subs	r3, r3, r1
 8025124:	42ab      	cmp	r3, r5
 8025126:	dcf2      	bgt.n	802510e <_printf_i+0x21e>
 8025128:	e7eb      	b.n	8025102 <_printf_i+0x212>
 802512a:	2500      	movs	r5, #0
 802512c:	f104 0619 	add.w	r6, r4, #25
 8025130:	e7f5      	b.n	802511e <_printf_i+0x22e>
 8025132:	bf00      	nop
 8025134:	08028529 	.word	0x08028529
 8025138:	0802853a 	.word	0x0802853a

0802513c <rand>:
 802513c:	4b16      	ldr	r3, [pc, #88]	; (8025198 <rand+0x5c>)
 802513e:	b510      	push	{r4, lr}
 8025140:	681c      	ldr	r4, [r3, #0]
 8025142:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025144:	b9b3      	cbnz	r3, 8025174 <rand+0x38>
 8025146:	2018      	movs	r0, #24
 8025148:	f7ff fc04 	bl	8024954 <malloc>
 802514c:	63a0      	str	r0, [r4, #56]	; 0x38
 802514e:	b928      	cbnz	r0, 802515c <rand+0x20>
 8025150:	4602      	mov	r2, r0
 8025152:	4b12      	ldr	r3, [pc, #72]	; (802519c <rand+0x60>)
 8025154:	4812      	ldr	r0, [pc, #72]	; (80251a0 <rand+0x64>)
 8025156:	214e      	movs	r1, #78	; 0x4e
 8025158:	f7ff fb8e 	bl	8024878 <__assert_func>
 802515c:	4a11      	ldr	r2, [pc, #68]	; (80251a4 <rand+0x68>)
 802515e:	4b12      	ldr	r3, [pc, #72]	; (80251a8 <rand+0x6c>)
 8025160:	e9c0 2300 	strd	r2, r3, [r0]
 8025164:	4b11      	ldr	r3, [pc, #68]	; (80251ac <rand+0x70>)
 8025166:	6083      	str	r3, [r0, #8]
 8025168:	230b      	movs	r3, #11
 802516a:	8183      	strh	r3, [r0, #12]
 802516c:	2201      	movs	r2, #1
 802516e:	2300      	movs	r3, #0
 8025170:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025174:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025176:	4a0e      	ldr	r2, [pc, #56]	; (80251b0 <rand+0x74>)
 8025178:	6920      	ldr	r0, [r4, #16]
 802517a:	6963      	ldr	r3, [r4, #20]
 802517c:	490d      	ldr	r1, [pc, #52]	; (80251b4 <rand+0x78>)
 802517e:	4342      	muls	r2, r0
 8025180:	fb01 2203 	mla	r2, r1, r3, r2
 8025184:	fba0 0101 	umull	r0, r1, r0, r1
 8025188:	1c43      	adds	r3, r0, #1
 802518a:	eb42 0001 	adc.w	r0, r2, r1
 802518e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8025192:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025196:	bd10      	pop	{r4, pc}
 8025198:	240000b4 	.word	0x240000b4
 802519c:	08028550 	.word	0x08028550
 80251a0:	08028567 	.word	0x08028567
 80251a4:	abcd330e 	.word	0xabcd330e
 80251a8:	e66d1234 	.word	0xe66d1234
 80251ac:	0005deec 	.word	0x0005deec
 80251b0:	5851f42d 	.word	0x5851f42d
 80251b4:	4c957f2d 	.word	0x4c957f2d

080251b8 <_sbrk_r>:
 80251b8:	b538      	push	{r3, r4, r5, lr}
 80251ba:	4d06      	ldr	r5, [pc, #24]	; (80251d4 <_sbrk_r+0x1c>)
 80251bc:	2300      	movs	r3, #0
 80251be:	4604      	mov	r4, r0
 80251c0:	4608      	mov	r0, r1
 80251c2:	602b      	str	r3, [r5, #0]
 80251c4:	f7dc f9b6 	bl	8001534 <_sbrk>
 80251c8:	1c43      	adds	r3, r0, #1
 80251ca:	d102      	bne.n	80251d2 <_sbrk_r+0x1a>
 80251cc:	682b      	ldr	r3, [r5, #0]
 80251ce:	b103      	cbz	r3, 80251d2 <_sbrk_r+0x1a>
 80251d0:	6023      	str	r3, [r4, #0]
 80251d2:	bd38      	pop	{r3, r4, r5, pc}
 80251d4:	240102e8 	.word	0x240102e8

080251d8 <_raise_r>:
 80251d8:	291f      	cmp	r1, #31
 80251da:	b538      	push	{r3, r4, r5, lr}
 80251dc:	4604      	mov	r4, r0
 80251de:	460d      	mov	r5, r1
 80251e0:	d904      	bls.n	80251ec <_raise_r+0x14>
 80251e2:	2316      	movs	r3, #22
 80251e4:	6003      	str	r3, [r0, #0]
 80251e6:	f04f 30ff 	mov.w	r0, #4294967295
 80251ea:	bd38      	pop	{r3, r4, r5, pc}
 80251ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80251ee:	b112      	cbz	r2, 80251f6 <_raise_r+0x1e>
 80251f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80251f4:	b94b      	cbnz	r3, 802520a <_raise_r+0x32>
 80251f6:	4620      	mov	r0, r4
 80251f8:	f000 f830 	bl	802525c <_getpid_r>
 80251fc:	462a      	mov	r2, r5
 80251fe:	4601      	mov	r1, r0
 8025200:	4620      	mov	r0, r4
 8025202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025206:	f000 b817 	b.w	8025238 <_kill_r>
 802520a:	2b01      	cmp	r3, #1
 802520c:	d00a      	beq.n	8025224 <_raise_r+0x4c>
 802520e:	1c59      	adds	r1, r3, #1
 8025210:	d103      	bne.n	802521a <_raise_r+0x42>
 8025212:	2316      	movs	r3, #22
 8025214:	6003      	str	r3, [r0, #0]
 8025216:	2001      	movs	r0, #1
 8025218:	e7e7      	b.n	80251ea <_raise_r+0x12>
 802521a:	2400      	movs	r4, #0
 802521c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025220:	4628      	mov	r0, r5
 8025222:	4798      	blx	r3
 8025224:	2000      	movs	r0, #0
 8025226:	e7e0      	b.n	80251ea <_raise_r+0x12>

08025228 <raise>:
 8025228:	4b02      	ldr	r3, [pc, #8]	; (8025234 <raise+0xc>)
 802522a:	4601      	mov	r1, r0
 802522c:	6818      	ldr	r0, [r3, #0]
 802522e:	f7ff bfd3 	b.w	80251d8 <_raise_r>
 8025232:	bf00      	nop
 8025234:	240000b4 	.word	0x240000b4

08025238 <_kill_r>:
 8025238:	b538      	push	{r3, r4, r5, lr}
 802523a:	4d07      	ldr	r5, [pc, #28]	; (8025258 <_kill_r+0x20>)
 802523c:	2300      	movs	r3, #0
 802523e:	4604      	mov	r4, r0
 8025240:	4608      	mov	r0, r1
 8025242:	4611      	mov	r1, r2
 8025244:	602b      	str	r3, [r5, #0]
 8025246:	f7dc f93f 	bl	80014c8 <_kill>
 802524a:	1c43      	adds	r3, r0, #1
 802524c:	d102      	bne.n	8025254 <_kill_r+0x1c>
 802524e:	682b      	ldr	r3, [r5, #0]
 8025250:	b103      	cbz	r3, 8025254 <_kill_r+0x1c>
 8025252:	6023      	str	r3, [r4, #0]
 8025254:	bd38      	pop	{r3, r4, r5, pc}
 8025256:	bf00      	nop
 8025258:	240102e8 	.word	0x240102e8

0802525c <_getpid_r>:
 802525c:	f7dc b932 	b.w	80014c4 <_getpid>

08025260 <__swbuf_r>:
 8025260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025262:	460e      	mov	r6, r1
 8025264:	4614      	mov	r4, r2
 8025266:	4605      	mov	r5, r0
 8025268:	b118      	cbz	r0, 8025272 <__swbuf_r+0x12>
 802526a:	6983      	ldr	r3, [r0, #24]
 802526c:	b90b      	cbnz	r3, 8025272 <__swbuf_r+0x12>
 802526e:	f000 fa33 	bl	80256d8 <__sinit>
 8025272:	4b21      	ldr	r3, [pc, #132]	; (80252f8 <__swbuf_r+0x98>)
 8025274:	429c      	cmp	r4, r3
 8025276:	d12b      	bne.n	80252d0 <__swbuf_r+0x70>
 8025278:	686c      	ldr	r4, [r5, #4]
 802527a:	69a3      	ldr	r3, [r4, #24]
 802527c:	60a3      	str	r3, [r4, #8]
 802527e:	89a3      	ldrh	r3, [r4, #12]
 8025280:	071a      	lsls	r2, r3, #28
 8025282:	d52f      	bpl.n	80252e4 <__swbuf_r+0x84>
 8025284:	6923      	ldr	r3, [r4, #16]
 8025286:	b36b      	cbz	r3, 80252e4 <__swbuf_r+0x84>
 8025288:	6923      	ldr	r3, [r4, #16]
 802528a:	6820      	ldr	r0, [r4, #0]
 802528c:	1ac0      	subs	r0, r0, r3
 802528e:	6963      	ldr	r3, [r4, #20]
 8025290:	b2f6      	uxtb	r6, r6
 8025292:	4283      	cmp	r3, r0
 8025294:	4637      	mov	r7, r6
 8025296:	dc04      	bgt.n	80252a2 <__swbuf_r+0x42>
 8025298:	4621      	mov	r1, r4
 802529a:	4628      	mov	r0, r5
 802529c:	f000 f988 	bl	80255b0 <_fflush_r>
 80252a0:	bb30      	cbnz	r0, 80252f0 <__swbuf_r+0x90>
 80252a2:	68a3      	ldr	r3, [r4, #8]
 80252a4:	3b01      	subs	r3, #1
 80252a6:	60a3      	str	r3, [r4, #8]
 80252a8:	6823      	ldr	r3, [r4, #0]
 80252aa:	1c5a      	adds	r2, r3, #1
 80252ac:	6022      	str	r2, [r4, #0]
 80252ae:	701e      	strb	r6, [r3, #0]
 80252b0:	6963      	ldr	r3, [r4, #20]
 80252b2:	3001      	adds	r0, #1
 80252b4:	4283      	cmp	r3, r0
 80252b6:	d004      	beq.n	80252c2 <__swbuf_r+0x62>
 80252b8:	89a3      	ldrh	r3, [r4, #12]
 80252ba:	07db      	lsls	r3, r3, #31
 80252bc:	d506      	bpl.n	80252cc <__swbuf_r+0x6c>
 80252be:	2e0a      	cmp	r6, #10
 80252c0:	d104      	bne.n	80252cc <__swbuf_r+0x6c>
 80252c2:	4621      	mov	r1, r4
 80252c4:	4628      	mov	r0, r5
 80252c6:	f000 f973 	bl	80255b0 <_fflush_r>
 80252ca:	b988      	cbnz	r0, 80252f0 <__swbuf_r+0x90>
 80252cc:	4638      	mov	r0, r7
 80252ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80252d0:	4b0a      	ldr	r3, [pc, #40]	; (80252fc <__swbuf_r+0x9c>)
 80252d2:	429c      	cmp	r4, r3
 80252d4:	d101      	bne.n	80252da <__swbuf_r+0x7a>
 80252d6:	68ac      	ldr	r4, [r5, #8]
 80252d8:	e7cf      	b.n	802527a <__swbuf_r+0x1a>
 80252da:	4b09      	ldr	r3, [pc, #36]	; (8025300 <__swbuf_r+0xa0>)
 80252dc:	429c      	cmp	r4, r3
 80252de:	bf08      	it	eq
 80252e0:	68ec      	ldreq	r4, [r5, #12]
 80252e2:	e7ca      	b.n	802527a <__swbuf_r+0x1a>
 80252e4:	4621      	mov	r1, r4
 80252e6:	4628      	mov	r0, r5
 80252e8:	f000 f80c 	bl	8025304 <__swsetup_r>
 80252ec:	2800      	cmp	r0, #0
 80252ee:	d0cb      	beq.n	8025288 <__swbuf_r+0x28>
 80252f0:	f04f 37ff 	mov.w	r7, #4294967295
 80252f4:	e7ea      	b.n	80252cc <__swbuf_r+0x6c>
 80252f6:	bf00      	nop
 80252f8:	080285e4 	.word	0x080285e4
 80252fc:	08028604 	.word	0x08028604
 8025300:	080285c4 	.word	0x080285c4

08025304 <__swsetup_r>:
 8025304:	4b32      	ldr	r3, [pc, #200]	; (80253d0 <__swsetup_r+0xcc>)
 8025306:	b570      	push	{r4, r5, r6, lr}
 8025308:	681d      	ldr	r5, [r3, #0]
 802530a:	4606      	mov	r6, r0
 802530c:	460c      	mov	r4, r1
 802530e:	b125      	cbz	r5, 802531a <__swsetup_r+0x16>
 8025310:	69ab      	ldr	r3, [r5, #24]
 8025312:	b913      	cbnz	r3, 802531a <__swsetup_r+0x16>
 8025314:	4628      	mov	r0, r5
 8025316:	f000 f9df 	bl	80256d8 <__sinit>
 802531a:	4b2e      	ldr	r3, [pc, #184]	; (80253d4 <__swsetup_r+0xd0>)
 802531c:	429c      	cmp	r4, r3
 802531e:	d10f      	bne.n	8025340 <__swsetup_r+0x3c>
 8025320:	686c      	ldr	r4, [r5, #4]
 8025322:	89a3      	ldrh	r3, [r4, #12]
 8025324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025328:	0719      	lsls	r1, r3, #28
 802532a:	d42c      	bmi.n	8025386 <__swsetup_r+0x82>
 802532c:	06dd      	lsls	r5, r3, #27
 802532e:	d411      	bmi.n	8025354 <__swsetup_r+0x50>
 8025330:	2309      	movs	r3, #9
 8025332:	6033      	str	r3, [r6, #0]
 8025334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025338:	81a3      	strh	r3, [r4, #12]
 802533a:	f04f 30ff 	mov.w	r0, #4294967295
 802533e:	e03e      	b.n	80253be <__swsetup_r+0xba>
 8025340:	4b25      	ldr	r3, [pc, #148]	; (80253d8 <__swsetup_r+0xd4>)
 8025342:	429c      	cmp	r4, r3
 8025344:	d101      	bne.n	802534a <__swsetup_r+0x46>
 8025346:	68ac      	ldr	r4, [r5, #8]
 8025348:	e7eb      	b.n	8025322 <__swsetup_r+0x1e>
 802534a:	4b24      	ldr	r3, [pc, #144]	; (80253dc <__swsetup_r+0xd8>)
 802534c:	429c      	cmp	r4, r3
 802534e:	bf08      	it	eq
 8025350:	68ec      	ldreq	r4, [r5, #12]
 8025352:	e7e6      	b.n	8025322 <__swsetup_r+0x1e>
 8025354:	0758      	lsls	r0, r3, #29
 8025356:	d512      	bpl.n	802537e <__swsetup_r+0x7a>
 8025358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802535a:	b141      	cbz	r1, 802536e <__swsetup_r+0x6a>
 802535c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025360:	4299      	cmp	r1, r3
 8025362:	d002      	beq.n	802536a <__swsetup_r+0x66>
 8025364:	4630      	mov	r0, r6
 8025366:	f7ff fb1b 	bl	80249a0 <_free_r>
 802536a:	2300      	movs	r3, #0
 802536c:	6363      	str	r3, [r4, #52]	; 0x34
 802536e:	89a3      	ldrh	r3, [r4, #12]
 8025370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025374:	81a3      	strh	r3, [r4, #12]
 8025376:	2300      	movs	r3, #0
 8025378:	6063      	str	r3, [r4, #4]
 802537a:	6923      	ldr	r3, [r4, #16]
 802537c:	6023      	str	r3, [r4, #0]
 802537e:	89a3      	ldrh	r3, [r4, #12]
 8025380:	f043 0308 	orr.w	r3, r3, #8
 8025384:	81a3      	strh	r3, [r4, #12]
 8025386:	6923      	ldr	r3, [r4, #16]
 8025388:	b94b      	cbnz	r3, 802539e <__swsetup_r+0x9a>
 802538a:	89a3      	ldrh	r3, [r4, #12]
 802538c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025394:	d003      	beq.n	802539e <__swsetup_r+0x9a>
 8025396:	4621      	mov	r1, r4
 8025398:	4630      	mov	r0, r6
 802539a:	f000 fa63 	bl	8025864 <__smakebuf_r>
 802539e:	89a0      	ldrh	r0, [r4, #12]
 80253a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80253a4:	f010 0301 	ands.w	r3, r0, #1
 80253a8:	d00a      	beq.n	80253c0 <__swsetup_r+0xbc>
 80253aa:	2300      	movs	r3, #0
 80253ac:	60a3      	str	r3, [r4, #8]
 80253ae:	6963      	ldr	r3, [r4, #20]
 80253b0:	425b      	negs	r3, r3
 80253b2:	61a3      	str	r3, [r4, #24]
 80253b4:	6923      	ldr	r3, [r4, #16]
 80253b6:	b943      	cbnz	r3, 80253ca <__swsetup_r+0xc6>
 80253b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80253bc:	d1ba      	bne.n	8025334 <__swsetup_r+0x30>
 80253be:	bd70      	pop	{r4, r5, r6, pc}
 80253c0:	0781      	lsls	r1, r0, #30
 80253c2:	bf58      	it	pl
 80253c4:	6963      	ldrpl	r3, [r4, #20]
 80253c6:	60a3      	str	r3, [r4, #8]
 80253c8:	e7f4      	b.n	80253b4 <__swsetup_r+0xb0>
 80253ca:	2000      	movs	r0, #0
 80253cc:	e7f7      	b.n	80253be <__swsetup_r+0xba>
 80253ce:	bf00      	nop
 80253d0:	240000b4 	.word	0x240000b4
 80253d4:	080285e4 	.word	0x080285e4
 80253d8:	08028604 	.word	0x08028604
 80253dc:	080285c4 	.word	0x080285c4

080253e0 <__register_exitproc>:
 80253e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80254a0 <__register_exitproc+0xc0>
 80253e8:	4606      	mov	r6, r0
 80253ea:	f8d8 0000 	ldr.w	r0, [r8]
 80253ee:	461f      	mov	r7, r3
 80253f0:	460d      	mov	r5, r1
 80253f2:	4691      	mov	r9, r2
 80253f4:	f000 fa0e 	bl	8025814 <__retarget_lock_acquire_recursive>
 80253f8:	4b25      	ldr	r3, [pc, #148]	; (8025490 <__register_exitproc+0xb0>)
 80253fa:	681c      	ldr	r4, [r3, #0]
 80253fc:	b934      	cbnz	r4, 802540c <__register_exitproc+0x2c>
 80253fe:	4c25      	ldr	r4, [pc, #148]	; (8025494 <__register_exitproc+0xb4>)
 8025400:	601c      	str	r4, [r3, #0]
 8025402:	4b25      	ldr	r3, [pc, #148]	; (8025498 <__register_exitproc+0xb8>)
 8025404:	b113      	cbz	r3, 802540c <__register_exitproc+0x2c>
 8025406:	681b      	ldr	r3, [r3, #0]
 8025408:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802540c:	6863      	ldr	r3, [r4, #4]
 802540e:	2b1f      	cmp	r3, #31
 8025410:	dd07      	ble.n	8025422 <__register_exitproc+0x42>
 8025412:	f8d8 0000 	ldr.w	r0, [r8]
 8025416:	f000 f9ff 	bl	8025818 <__retarget_lock_release_recursive>
 802541a:	f04f 30ff 	mov.w	r0, #4294967295
 802541e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025422:	b34e      	cbz	r6, 8025478 <__register_exitproc+0x98>
 8025424:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8025428:	b988      	cbnz	r0, 802544e <__register_exitproc+0x6e>
 802542a:	4b1c      	ldr	r3, [pc, #112]	; (802549c <__register_exitproc+0xbc>)
 802542c:	b923      	cbnz	r3, 8025438 <__register_exitproc+0x58>
 802542e:	f8d8 0000 	ldr.w	r0, [r8]
 8025432:	f000 f9f0 	bl	8025816 <__retarget_lock_release>
 8025436:	e7f0      	b.n	802541a <__register_exitproc+0x3a>
 8025438:	f44f 7084 	mov.w	r0, #264	; 0x108
 802543c:	f7ff fa8a 	bl	8024954 <malloc>
 8025440:	2800      	cmp	r0, #0
 8025442:	d0f4      	beq.n	802542e <__register_exitproc+0x4e>
 8025444:	2300      	movs	r3, #0
 8025446:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802544a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802544e:	6863      	ldr	r3, [r4, #4]
 8025450:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8025454:	2201      	movs	r2, #1
 8025456:	409a      	lsls	r2, r3
 8025458:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802545c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8025460:	4313      	orrs	r3, r2
 8025462:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8025466:	2e02      	cmp	r6, #2
 8025468:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802546c:	bf02      	ittt	eq
 802546e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8025472:	4313      	orreq	r3, r2
 8025474:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8025478:	6863      	ldr	r3, [r4, #4]
 802547a:	f8d8 0000 	ldr.w	r0, [r8]
 802547e:	1c5a      	adds	r2, r3, #1
 8025480:	3302      	adds	r3, #2
 8025482:	6062      	str	r2, [r4, #4]
 8025484:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8025488:	f000 f9c6 	bl	8025818 <__retarget_lock_release_recursive>
 802548c:	2000      	movs	r0, #0
 802548e:	e7c6      	b.n	802541e <__register_exitproc+0x3e>
 8025490:	240102e0 	.word	0x240102e0
 8025494:	24010254 	.word	0x24010254
 8025498:	0802854c 	.word	0x0802854c
 802549c:	08024955 	.word	0x08024955
 80254a0:	24000118 	.word	0x24000118

080254a4 <__sflush_r>:
 80254a4:	898a      	ldrh	r2, [r1, #12]
 80254a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80254aa:	4605      	mov	r5, r0
 80254ac:	0710      	lsls	r0, r2, #28
 80254ae:	460c      	mov	r4, r1
 80254b0:	d458      	bmi.n	8025564 <__sflush_r+0xc0>
 80254b2:	684b      	ldr	r3, [r1, #4]
 80254b4:	2b00      	cmp	r3, #0
 80254b6:	dc05      	bgt.n	80254c4 <__sflush_r+0x20>
 80254b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80254ba:	2b00      	cmp	r3, #0
 80254bc:	dc02      	bgt.n	80254c4 <__sflush_r+0x20>
 80254be:	2000      	movs	r0, #0
 80254c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80254c6:	2e00      	cmp	r6, #0
 80254c8:	d0f9      	beq.n	80254be <__sflush_r+0x1a>
 80254ca:	2300      	movs	r3, #0
 80254cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80254d0:	682f      	ldr	r7, [r5, #0]
 80254d2:	602b      	str	r3, [r5, #0]
 80254d4:	d032      	beq.n	802553c <__sflush_r+0x98>
 80254d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80254d8:	89a3      	ldrh	r3, [r4, #12]
 80254da:	075a      	lsls	r2, r3, #29
 80254dc:	d505      	bpl.n	80254ea <__sflush_r+0x46>
 80254de:	6863      	ldr	r3, [r4, #4]
 80254e0:	1ac0      	subs	r0, r0, r3
 80254e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80254e4:	b10b      	cbz	r3, 80254ea <__sflush_r+0x46>
 80254e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80254e8:	1ac0      	subs	r0, r0, r3
 80254ea:	2300      	movs	r3, #0
 80254ec:	4602      	mov	r2, r0
 80254ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80254f0:	6a21      	ldr	r1, [r4, #32]
 80254f2:	4628      	mov	r0, r5
 80254f4:	47b0      	blx	r6
 80254f6:	1c43      	adds	r3, r0, #1
 80254f8:	89a3      	ldrh	r3, [r4, #12]
 80254fa:	d106      	bne.n	802550a <__sflush_r+0x66>
 80254fc:	6829      	ldr	r1, [r5, #0]
 80254fe:	291d      	cmp	r1, #29
 8025500:	d82c      	bhi.n	802555c <__sflush_r+0xb8>
 8025502:	4a2a      	ldr	r2, [pc, #168]	; (80255ac <__sflush_r+0x108>)
 8025504:	40ca      	lsrs	r2, r1
 8025506:	07d6      	lsls	r6, r2, #31
 8025508:	d528      	bpl.n	802555c <__sflush_r+0xb8>
 802550a:	2200      	movs	r2, #0
 802550c:	6062      	str	r2, [r4, #4]
 802550e:	04d9      	lsls	r1, r3, #19
 8025510:	6922      	ldr	r2, [r4, #16]
 8025512:	6022      	str	r2, [r4, #0]
 8025514:	d504      	bpl.n	8025520 <__sflush_r+0x7c>
 8025516:	1c42      	adds	r2, r0, #1
 8025518:	d101      	bne.n	802551e <__sflush_r+0x7a>
 802551a:	682b      	ldr	r3, [r5, #0]
 802551c:	b903      	cbnz	r3, 8025520 <__sflush_r+0x7c>
 802551e:	6560      	str	r0, [r4, #84]	; 0x54
 8025520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025522:	602f      	str	r7, [r5, #0]
 8025524:	2900      	cmp	r1, #0
 8025526:	d0ca      	beq.n	80254be <__sflush_r+0x1a>
 8025528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802552c:	4299      	cmp	r1, r3
 802552e:	d002      	beq.n	8025536 <__sflush_r+0x92>
 8025530:	4628      	mov	r0, r5
 8025532:	f7ff fa35 	bl	80249a0 <_free_r>
 8025536:	2000      	movs	r0, #0
 8025538:	6360      	str	r0, [r4, #52]	; 0x34
 802553a:	e7c1      	b.n	80254c0 <__sflush_r+0x1c>
 802553c:	6a21      	ldr	r1, [r4, #32]
 802553e:	2301      	movs	r3, #1
 8025540:	4628      	mov	r0, r5
 8025542:	47b0      	blx	r6
 8025544:	1c41      	adds	r1, r0, #1
 8025546:	d1c7      	bne.n	80254d8 <__sflush_r+0x34>
 8025548:	682b      	ldr	r3, [r5, #0]
 802554a:	2b00      	cmp	r3, #0
 802554c:	d0c4      	beq.n	80254d8 <__sflush_r+0x34>
 802554e:	2b1d      	cmp	r3, #29
 8025550:	d001      	beq.n	8025556 <__sflush_r+0xb2>
 8025552:	2b16      	cmp	r3, #22
 8025554:	d101      	bne.n	802555a <__sflush_r+0xb6>
 8025556:	602f      	str	r7, [r5, #0]
 8025558:	e7b1      	b.n	80254be <__sflush_r+0x1a>
 802555a:	89a3      	ldrh	r3, [r4, #12]
 802555c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025560:	81a3      	strh	r3, [r4, #12]
 8025562:	e7ad      	b.n	80254c0 <__sflush_r+0x1c>
 8025564:	690f      	ldr	r7, [r1, #16]
 8025566:	2f00      	cmp	r7, #0
 8025568:	d0a9      	beq.n	80254be <__sflush_r+0x1a>
 802556a:	0793      	lsls	r3, r2, #30
 802556c:	680e      	ldr	r6, [r1, #0]
 802556e:	bf08      	it	eq
 8025570:	694b      	ldreq	r3, [r1, #20]
 8025572:	600f      	str	r7, [r1, #0]
 8025574:	bf18      	it	ne
 8025576:	2300      	movne	r3, #0
 8025578:	eba6 0807 	sub.w	r8, r6, r7
 802557c:	608b      	str	r3, [r1, #8]
 802557e:	f1b8 0f00 	cmp.w	r8, #0
 8025582:	dd9c      	ble.n	80254be <__sflush_r+0x1a>
 8025584:	6a21      	ldr	r1, [r4, #32]
 8025586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8025588:	4643      	mov	r3, r8
 802558a:	463a      	mov	r2, r7
 802558c:	4628      	mov	r0, r5
 802558e:	47b0      	blx	r6
 8025590:	2800      	cmp	r0, #0
 8025592:	dc06      	bgt.n	80255a2 <__sflush_r+0xfe>
 8025594:	89a3      	ldrh	r3, [r4, #12]
 8025596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802559a:	81a3      	strh	r3, [r4, #12]
 802559c:	f04f 30ff 	mov.w	r0, #4294967295
 80255a0:	e78e      	b.n	80254c0 <__sflush_r+0x1c>
 80255a2:	4407      	add	r7, r0
 80255a4:	eba8 0800 	sub.w	r8, r8, r0
 80255a8:	e7e9      	b.n	802557e <__sflush_r+0xda>
 80255aa:	bf00      	nop
 80255ac:	20400001 	.word	0x20400001

080255b0 <_fflush_r>:
 80255b0:	b538      	push	{r3, r4, r5, lr}
 80255b2:	690b      	ldr	r3, [r1, #16]
 80255b4:	4605      	mov	r5, r0
 80255b6:	460c      	mov	r4, r1
 80255b8:	b913      	cbnz	r3, 80255c0 <_fflush_r+0x10>
 80255ba:	2500      	movs	r5, #0
 80255bc:	4628      	mov	r0, r5
 80255be:	bd38      	pop	{r3, r4, r5, pc}
 80255c0:	b118      	cbz	r0, 80255ca <_fflush_r+0x1a>
 80255c2:	6983      	ldr	r3, [r0, #24]
 80255c4:	b90b      	cbnz	r3, 80255ca <_fflush_r+0x1a>
 80255c6:	f000 f887 	bl	80256d8 <__sinit>
 80255ca:	4b14      	ldr	r3, [pc, #80]	; (802561c <_fflush_r+0x6c>)
 80255cc:	429c      	cmp	r4, r3
 80255ce:	d11b      	bne.n	8025608 <_fflush_r+0x58>
 80255d0:	686c      	ldr	r4, [r5, #4]
 80255d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	d0ef      	beq.n	80255ba <_fflush_r+0xa>
 80255da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80255dc:	07d0      	lsls	r0, r2, #31
 80255de:	d404      	bmi.n	80255ea <_fflush_r+0x3a>
 80255e0:	0599      	lsls	r1, r3, #22
 80255e2:	d402      	bmi.n	80255ea <_fflush_r+0x3a>
 80255e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80255e6:	f000 f915 	bl	8025814 <__retarget_lock_acquire_recursive>
 80255ea:	4628      	mov	r0, r5
 80255ec:	4621      	mov	r1, r4
 80255ee:	f7ff ff59 	bl	80254a4 <__sflush_r>
 80255f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80255f4:	07da      	lsls	r2, r3, #31
 80255f6:	4605      	mov	r5, r0
 80255f8:	d4e0      	bmi.n	80255bc <_fflush_r+0xc>
 80255fa:	89a3      	ldrh	r3, [r4, #12]
 80255fc:	059b      	lsls	r3, r3, #22
 80255fe:	d4dd      	bmi.n	80255bc <_fflush_r+0xc>
 8025600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025602:	f000 f909 	bl	8025818 <__retarget_lock_release_recursive>
 8025606:	e7d9      	b.n	80255bc <_fflush_r+0xc>
 8025608:	4b05      	ldr	r3, [pc, #20]	; (8025620 <_fflush_r+0x70>)
 802560a:	429c      	cmp	r4, r3
 802560c:	d101      	bne.n	8025612 <_fflush_r+0x62>
 802560e:	68ac      	ldr	r4, [r5, #8]
 8025610:	e7df      	b.n	80255d2 <_fflush_r+0x22>
 8025612:	4b04      	ldr	r3, [pc, #16]	; (8025624 <_fflush_r+0x74>)
 8025614:	429c      	cmp	r4, r3
 8025616:	bf08      	it	eq
 8025618:	68ec      	ldreq	r4, [r5, #12]
 802561a:	e7da      	b.n	80255d2 <_fflush_r+0x22>
 802561c:	080285e4 	.word	0x080285e4
 8025620:	08028604 	.word	0x08028604
 8025624:	080285c4 	.word	0x080285c4

08025628 <std>:
 8025628:	2300      	movs	r3, #0
 802562a:	b510      	push	{r4, lr}
 802562c:	4604      	mov	r4, r0
 802562e:	e9c0 3300 	strd	r3, r3, [r0]
 8025632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025636:	6083      	str	r3, [r0, #8]
 8025638:	8181      	strh	r1, [r0, #12]
 802563a:	6643      	str	r3, [r0, #100]	; 0x64
 802563c:	81c2      	strh	r2, [r0, #14]
 802563e:	6183      	str	r3, [r0, #24]
 8025640:	4619      	mov	r1, r3
 8025642:	2208      	movs	r2, #8
 8025644:	305c      	adds	r0, #92	; 0x5c
 8025646:	f7ff f9a3 	bl	8024990 <memset>
 802564a:	4b05      	ldr	r3, [pc, #20]	; (8025660 <std+0x38>)
 802564c:	6263      	str	r3, [r4, #36]	; 0x24
 802564e:	4b05      	ldr	r3, [pc, #20]	; (8025664 <std+0x3c>)
 8025650:	62a3      	str	r3, [r4, #40]	; 0x28
 8025652:	4b05      	ldr	r3, [pc, #20]	; (8025668 <std+0x40>)
 8025654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025656:	4b05      	ldr	r3, [pc, #20]	; (802566c <std+0x44>)
 8025658:	6224      	str	r4, [r4, #32]
 802565a:	6323      	str	r3, [r4, #48]	; 0x30
 802565c:	bd10      	pop	{r4, pc}
 802565e:	bf00      	nop
 8025660:	080258fd 	.word	0x080258fd
 8025664:	0802591f 	.word	0x0802591f
 8025668:	08025957 	.word	0x08025957
 802566c:	0802597b 	.word	0x0802597b

08025670 <_cleanup_r>:
 8025670:	4901      	ldr	r1, [pc, #4]	; (8025678 <_cleanup_r+0x8>)
 8025672:	f000 b8af 	b.w	80257d4 <_fwalk_reent>
 8025676:	bf00      	nop
 8025678:	080255b1 	.word	0x080255b1

0802567c <__sfmoreglue>:
 802567c:	b570      	push	{r4, r5, r6, lr}
 802567e:	2268      	movs	r2, #104	; 0x68
 8025680:	1e4d      	subs	r5, r1, #1
 8025682:	4355      	muls	r5, r2
 8025684:	460e      	mov	r6, r1
 8025686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802568a:	f7ff f9f5 	bl	8024a78 <_malloc_r>
 802568e:	4604      	mov	r4, r0
 8025690:	b140      	cbz	r0, 80256a4 <__sfmoreglue+0x28>
 8025692:	2100      	movs	r1, #0
 8025694:	e9c0 1600 	strd	r1, r6, [r0]
 8025698:	300c      	adds	r0, #12
 802569a:	60a0      	str	r0, [r4, #8]
 802569c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80256a0:	f7ff f976 	bl	8024990 <memset>
 80256a4:	4620      	mov	r0, r4
 80256a6:	bd70      	pop	{r4, r5, r6, pc}

080256a8 <__sfp_lock_acquire>:
 80256a8:	4801      	ldr	r0, [pc, #4]	; (80256b0 <__sfp_lock_acquire+0x8>)
 80256aa:	f000 b8b3 	b.w	8025814 <__retarget_lock_acquire_recursive>
 80256ae:	bf00      	nop
 80256b0:	240102e6 	.word	0x240102e6

080256b4 <__sfp_lock_release>:
 80256b4:	4801      	ldr	r0, [pc, #4]	; (80256bc <__sfp_lock_release+0x8>)
 80256b6:	f000 b8af 	b.w	8025818 <__retarget_lock_release_recursive>
 80256ba:	bf00      	nop
 80256bc:	240102e6 	.word	0x240102e6

080256c0 <__sinit_lock_acquire>:
 80256c0:	4801      	ldr	r0, [pc, #4]	; (80256c8 <__sinit_lock_acquire+0x8>)
 80256c2:	f000 b8a7 	b.w	8025814 <__retarget_lock_acquire_recursive>
 80256c6:	bf00      	nop
 80256c8:	240102e7 	.word	0x240102e7

080256cc <__sinit_lock_release>:
 80256cc:	4801      	ldr	r0, [pc, #4]	; (80256d4 <__sinit_lock_release+0x8>)
 80256ce:	f000 b8a3 	b.w	8025818 <__retarget_lock_release_recursive>
 80256d2:	bf00      	nop
 80256d4:	240102e7 	.word	0x240102e7

080256d8 <__sinit>:
 80256d8:	b510      	push	{r4, lr}
 80256da:	4604      	mov	r4, r0
 80256dc:	f7ff fff0 	bl	80256c0 <__sinit_lock_acquire>
 80256e0:	69a3      	ldr	r3, [r4, #24]
 80256e2:	b11b      	cbz	r3, 80256ec <__sinit+0x14>
 80256e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80256e8:	f7ff bff0 	b.w	80256cc <__sinit_lock_release>
 80256ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80256f0:	6523      	str	r3, [r4, #80]	; 0x50
 80256f2:	4b13      	ldr	r3, [pc, #76]	; (8025740 <__sinit+0x68>)
 80256f4:	4a13      	ldr	r2, [pc, #76]	; (8025744 <__sinit+0x6c>)
 80256f6:	681b      	ldr	r3, [r3, #0]
 80256f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80256fa:	42a3      	cmp	r3, r4
 80256fc:	bf04      	itt	eq
 80256fe:	2301      	moveq	r3, #1
 8025700:	61a3      	streq	r3, [r4, #24]
 8025702:	4620      	mov	r0, r4
 8025704:	f000 f820 	bl	8025748 <__sfp>
 8025708:	6060      	str	r0, [r4, #4]
 802570a:	4620      	mov	r0, r4
 802570c:	f000 f81c 	bl	8025748 <__sfp>
 8025710:	60a0      	str	r0, [r4, #8]
 8025712:	4620      	mov	r0, r4
 8025714:	f000 f818 	bl	8025748 <__sfp>
 8025718:	2200      	movs	r2, #0
 802571a:	60e0      	str	r0, [r4, #12]
 802571c:	2104      	movs	r1, #4
 802571e:	6860      	ldr	r0, [r4, #4]
 8025720:	f7ff ff82 	bl	8025628 <std>
 8025724:	68a0      	ldr	r0, [r4, #8]
 8025726:	2201      	movs	r2, #1
 8025728:	2109      	movs	r1, #9
 802572a:	f7ff ff7d 	bl	8025628 <std>
 802572e:	68e0      	ldr	r0, [r4, #12]
 8025730:	2202      	movs	r2, #2
 8025732:	2112      	movs	r1, #18
 8025734:	f7ff ff78 	bl	8025628 <std>
 8025738:	2301      	movs	r3, #1
 802573a:	61a3      	str	r3, [r4, #24]
 802573c:	e7d2      	b.n	80256e4 <__sinit+0xc>
 802573e:	bf00      	nop
 8025740:	08028514 	.word	0x08028514
 8025744:	08025671 	.word	0x08025671

08025748 <__sfp>:
 8025748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802574a:	4607      	mov	r7, r0
 802574c:	f7ff ffac 	bl	80256a8 <__sfp_lock_acquire>
 8025750:	4b1e      	ldr	r3, [pc, #120]	; (80257cc <__sfp+0x84>)
 8025752:	681e      	ldr	r6, [r3, #0]
 8025754:	69b3      	ldr	r3, [r6, #24]
 8025756:	b913      	cbnz	r3, 802575e <__sfp+0x16>
 8025758:	4630      	mov	r0, r6
 802575a:	f7ff ffbd 	bl	80256d8 <__sinit>
 802575e:	3648      	adds	r6, #72	; 0x48
 8025760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025764:	3b01      	subs	r3, #1
 8025766:	d503      	bpl.n	8025770 <__sfp+0x28>
 8025768:	6833      	ldr	r3, [r6, #0]
 802576a:	b30b      	cbz	r3, 80257b0 <__sfp+0x68>
 802576c:	6836      	ldr	r6, [r6, #0]
 802576e:	e7f7      	b.n	8025760 <__sfp+0x18>
 8025770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025774:	b9d5      	cbnz	r5, 80257ac <__sfp+0x64>
 8025776:	4b16      	ldr	r3, [pc, #88]	; (80257d0 <__sfp+0x88>)
 8025778:	60e3      	str	r3, [r4, #12]
 802577a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802577e:	6665      	str	r5, [r4, #100]	; 0x64
 8025780:	f000 f847 	bl	8025812 <__retarget_lock_init_recursive>
 8025784:	f7ff ff96 	bl	80256b4 <__sfp_lock_release>
 8025788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802578c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8025790:	6025      	str	r5, [r4, #0]
 8025792:	61a5      	str	r5, [r4, #24]
 8025794:	2208      	movs	r2, #8
 8025796:	4629      	mov	r1, r5
 8025798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802579c:	f7ff f8f8 	bl	8024990 <memset>
 80257a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80257a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80257a8:	4620      	mov	r0, r4
 80257aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80257ac:	3468      	adds	r4, #104	; 0x68
 80257ae:	e7d9      	b.n	8025764 <__sfp+0x1c>
 80257b0:	2104      	movs	r1, #4
 80257b2:	4638      	mov	r0, r7
 80257b4:	f7ff ff62 	bl	802567c <__sfmoreglue>
 80257b8:	4604      	mov	r4, r0
 80257ba:	6030      	str	r0, [r6, #0]
 80257bc:	2800      	cmp	r0, #0
 80257be:	d1d5      	bne.n	802576c <__sfp+0x24>
 80257c0:	f7ff ff78 	bl	80256b4 <__sfp_lock_release>
 80257c4:	230c      	movs	r3, #12
 80257c6:	603b      	str	r3, [r7, #0]
 80257c8:	e7ee      	b.n	80257a8 <__sfp+0x60>
 80257ca:	bf00      	nop
 80257cc:	08028514 	.word	0x08028514
 80257d0:	ffff0001 	.word	0xffff0001

080257d4 <_fwalk_reent>:
 80257d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80257d8:	4606      	mov	r6, r0
 80257da:	4688      	mov	r8, r1
 80257dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80257e0:	2700      	movs	r7, #0
 80257e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80257e6:	f1b9 0901 	subs.w	r9, r9, #1
 80257ea:	d505      	bpl.n	80257f8 <_fwalk_reent+0x24>
 80257ec:	6824      	ldr	r4, [r4, #0]
 80257ee:	2c00      	cmp	r4, #0
 80257f0:	d1f7      	bne.n	80257e2 <_fwalk_reent+0xe>
 80257f2:	4638      	mov	r0, r7
 80257f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80257f8:	89ab      	ldrh	r3, [r5, #12]
 80257fa:	2b01      	cmp	r3, #1
 80257fc:	d907      	bls.n	802580e <_fwalk_reent+0x3a>
 80257fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025802:	3301      	adds	r3, #1
 8025804:	d003      	beq.n	802580e <_fwalk_reent+0x3a>
 8025806:	4629      	mov	r1, r5
 8025808:	4630      	mov	r0, r6
 802580a:	47c0      	blx	r8
 802580c:	4307      	orrs	r7, r0
 802580e:	3568      	adds	r5, #104	; 0x68
 8025810:	e7e9      	b.n	80257e6 <_fwalk_reent+0x12>

08025812 <__retarget_lock_init_recursive>:
 8025812:	4770      	bx	lr

08025814 <__retarget_lock_acquire_recursive>:
 8025814:	4770      	bx	lr

08025816 <__retarget_lock_release>:
 8025816:	4770      	bx	lr

08025818 <__retarget_lock_release_recursive>:
 8025818:	4770      	bx	lr

0802581a <__swhatbuf_r>:
 802581a:	b570      	push	{r4, r5, r6, lr}
 802581c:	460e      	mov	r6, r1
 802581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025822:	2900      	cmp	r1, #0
 8025824:	b096      	sub	sp, #88	; 0x58
 8025826:	4614      	mov	r4, r2
 8025828:	461d      	mov	r5, r3
 802582a:	da08      	bge.n	802583e <__swhatbuf_r+0x24>
 802582c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025830:	2200      	movs	r2, #0
 8025832:	602a      	str	r2, [r5, #0]
 8025834:	061a      	lsls	r2, r3, #24
 8025836:	d410      	bmi.n	802585a <__swhatbuf_r+0x40>
 8025838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802583c:	e00e      	b.n	802585c <__swhatbuf_r+0x42>
 802583e:	466a      	mov	r2, sp
 8025840:	f000 f8c2 	bl	80259c8 <_fstat_r>
 8025844:	2800      	cmp	r0, #0
 8025846:	dbf1      	blt.n	802582c <__swhatbuf_r+0x12>
 8025848:	9a01      	ldr	r2, [sp, #4]
 802584a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802584e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025852:	425a      	negs	r2, r3
 8025854:	415a      	adcs	r2, r3
 8025856:	602a      	str	r2, [r5, #0]
 8025858:	e7ee      	b.n	8025838 <__swhatbuf_r+0x1e>
 802585a:	2340      	movs	r3, #64	; 0x40
 802585c:	2000      	movs	r0, #0
 802585e:	6023      	str	r3, [r4, #0]
 8025860:	b016      	add	sp, #88	; 0x58
 8025862:	bd70      	pop	{r4, r5, r6, pc}

08025864 <__smakebuf_r>:
 8025864:	898b      	ldrh	r3, [r1, #12]
 8025866:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025868:	079d      	lsls	r5, r3, #30
 802586a:	4606      	mov	r6, r0
 802586c:	460c      	mov	r4, r1
 802586e:	d507      	bpl.n	8025880 <__smakebuf_r+0x1c>
 8025870:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025874:	6023      	str	r3, [r4, #0]
 8025876:	6123      	str	r3, [r4, #16]
 8025878:	2301      	movs	r3, #1
 802587a:	6163      	str	r3, [r4, #20]
 802587c:	b002      	add	sp, #8
 802587e:	bd70      	pop	{r4, r5, r6, pc}
 8025880:	ab01      	add	r3, sp, #4
 8025882:	466a      	mov	r2, sp
 8025884:	f7ff ffc9 	bl	802581a <__swhatbuf_r>
 8025888:	9900      	ldr	r1, [sp, #0]
 802588a:	4605      	mov	r5, r0
 802588c:	4630      	mov	r0, r6
 802588e:	f7ff f8f3 	bl	8024a78 <_malloc_r>
 8025892:	b948      	cbnz	r0, 80258a8 <__smakebuf_r+0x44>
 8025894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025898:	059a      	lsls	r2, r3, #22
 802589a:	d4ef      	bmi.n	802587c <__smakebuf_r+0x18>
 802589c:	f023 0303 	bic.w	r3, r3, #3
 80258a0:	f043 0302 	orr.w	r3, r3, #2
 80258a4:	81a3      	strh	r3, [r4, #12]
 80258a6:	e7e3      	b.n	8025870 <__smakebuf_r+0xc>
 80258a8:	4b0d      	ldr	r3, [pc, #52]	; (80258e0 <__smakebuf_r+0x7c>)
 80258aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80258ac:	89a3      	ldrh	r3, [r4, #12]
 80258ae:	6020      	str	r0, [r4, #0]
 80258b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80258b4:	81a3      	strh	r3, [r4, #12]
 80258b6:	9b00      	ldr	r3, [sp, #0]
 80258b8:	6163      	str	r3, [r4, #20]
 80258ba:	9b01      	ldr	r3, [sp, #4]
 80258bc:	6120      	str	r0, [r4, #16]
 80258be:	b15b      	cbz	r3, 80258d8 <__smakebuf_r+0x74>
 80258c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80258c4:	4630      	mov	r0, r6
 80258c6:	f000 f891 	bl	80259ec <_isatty_r>
 80258ca:	b128      	cbz	r0, 80258d8 <__smakebuf_r+0x74>
 80258cc:	89a3      	ldrh	r3, [r4, #12]
 80258ce:	f023 0303 	bic.w	r3, r3, #3
 80258d2:	f043 0301 	orr.w	r3, r3, #1
 80258d6:	81a3      	strh	r3, [r4, #12]
 80258d8:	89a0      	ldrh	r0, [r4, #12]
 80258da:	4305      	orrs	r5, r0
 80258dc:	81a5      	strh	r5, [r4, #12]
 80258de:	e7cd      	b.n	802587c <__smakebuf_r+0x18>
 80258e0:	08025671 	.word	0x08025671

080258e4 <__malloc_lock>:
 80258e4:	4801      	ldr	r0, [pc, #4]	; (80258ec <__malloc_lock+0x8>)
 80258e6:	f7ff bf95 	b.w	8025814 <__retarget_lock_acquire_recursive>
 80258ea:	bf00      	nop
 80258ec:	240102e5 	.word	0x240102e5

080258f0 <__malloc_unlock>:
 80258f0:	4801      	ldr	r0, [pc, #4]	; (80258f8 <__malloc_unlock+0x8>)
 80258f2:	f7ff bf91 	b.w	8025818 <__retarget_lock_release_recursive>
 80258f6:	bf00      	nop
 80258f8:	240102e5 	.word	0x240102e5

080258fc <__sread>:
 80258fc:	b510      	push	{r4, lr}
 80258fe:	460c      	mov	r4, r1
 8025900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025904:	f000 f894 	bl	8025a30 <_read_r>
 8025908:	2800      	cmp	r0, #0
 802590a:	bfab      	itete	ge
 802590c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802590e:	89a3      	ldrhlt	r3, [r4, #12]
 8025910:	181b      	addge	r3, r3, r0
 8025912:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8025916:	bfac      	ite	ge
 8025918:	6563      	strge	r3, [r4, #84]	; 0x54
 802591a:	81a3      	strhlt	r3, [r4, #12]
 802591c:	bd10      	pop	{r4, pc}

0802591e <__swrite>:
 802591e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025922:	461f      	mov	r7, r3
 8025924:	898b      	ldrh	r3, [r1, #12]
 8025926:	05db      	lsls	r3, r3, #23
 8025928:	4605      	mov	r5, r0
 802592a:	460c      	mov	r4, r1
 802592c:	4616      	mov	r6, r2
 802592e:	d505      	bpl.n	802593c <__swrite+0x1e>
 8025930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025934:	2302      	movs	r3, #2
 8025936:	2200      	movs	r2, #0
 8025938:	f000 f868 	bl	8025a0c <_lseek_r>
 802593c:	89a3      	ldrh	r3, [r4, #12]
 802593e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025942:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8025946:	81a3      	strh	r3, [r4, #12]
 8025948:	4632      	mov	r2, r6
 802594a:	463b      	mov	r3, r7
 802594c:	4628      	mov	r0, r5
 802594e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8025952:	f000 b817 	b.w	8025984 <_write_r>

08025956 <__sseek>:
 8025956:	b510      	push	{r4, lr}
 8025958:	460c      	mov	r4, r1
 802595a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802595e:	f000 f855 	bl	8025a0c <_lseek_r>
 8025962:	1c43      	adds	r3, r0, #1
 8025964:	89a3      	ldrh	r3, [r4, #12]
 8025966:	bf15      	itete	ne
 8025968:	6560      	strne	r0, [r4, #84]	; 0x54
 802596a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802596e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8025972:	81a3      	strheq	r3, [r4, #12]
 8025974:	bf18      	it	ne
 8025976:	81a3      	strhne	r3, [r4, #12]
 8025978:	bd10      	pop	{r4, pc}

0802597a <__sclose>:
 802597a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802597e:	f000 b813 	b.w	80259a8 <_close_r>
	...

08025984 <_write_r>:
 8025984:	b538      	push	{r3, r4, r5, lr}
 8025986:	4d07      	ldr	r5, [pc, #28]	; (80259a4 <_write_r+0x20>)
 8025988:	4604      	mov	r4, r0
 802598a:	4608      	mov	r0, r1
 802598c:	4611      	mov	r1, r2
 802598e:	2200      	movs	r2, #0
 8025990:	602a      	str	r2, [r5, #0]
 8025992:	461a      	mov	r2, r3
 8025994:	f7db fdb4 	bl	8001500 <_write>
 8025998:	1c43      	adds	r3, r0, #1
 802599a:	d102      	bne.n	80259a2 <_write_r+0x1e>
 802599c:	682b      	ldr	r3, [r5, #0]
 802599e:	b103      	cbz	r3, 80259a2 <_write_r+0x1e>
 80259a0:	6023      	str	r3, [r4, #0]
 80259a2:	bd38      	pop	{r3, r4, r5, pc}
 80259a4:	240102e8 	.word	0x240102e8

080259a8 <_close_r>:
 80259a8:	b538      	push	{r3, r4, r5, lr}
 80259aa:	4d06      	ldr	r5, [pc, #24]	; (80259c4 <_close_r+0x1c>)
 80259ac:	2300      	movs	r3, #0
 80259ae:	4604      	mov	r4, r0
 80259b0:	4608      	mov	r0, r1
 80259b2:	602b      	str	r3, [r5, #0]
 80259b4:	f7db fdb2 	bl	800151c <_close>
 80259b8:	1c43      	adds	r3, r0, #1
 80259ba:	d102      	bne.n	80259c2 <_close_r+0x1a>
 80259bc:	682b      	ldr	r3, [r5, #0]
 80259be:	b103      	cbz	r3, 80259c2 <_close_r+0x1a>
 80259c0:	6023      	str	r3, [r4, #0]
 80259c2:	bd38      	pop	{r3, r4, r5, pc}
 80259c4:	240102e8 	.word	0x240102e8

080259c8 <_fstat_r>:
 80259c8:	b538      	push	{r3, r4, r5, lr}
 80259ca:	4d07      	ldr	r5, [pc, #28]	; (80259e8 <_fstat_r+0x20>)
 80259cc:	2300      	movs	r3, #0
 80259ce:	4604      	mov	r4, r0
 80259d0:	4608      	mov	r0, r1
 80259d2:	4611      	mov	r1, r2
 80259d4:	602b      	str	r3, [r5, #0]
 80259d6:	f7db fda4 	bl	8001522 <_fstat>
 80259da:	1c43      	adds	r3, r0, #1
 80259dc:	d102      	bne.n	80259e4 <_fstat_r+0x1c>
 80259de:	682b      	ldr	r3, [r5, #0]
 80259e0:	b103      	cbz	r3, 80259e4 <_fstat_r+0x1c>
 80259e2:	6023      	str	r3, [r4, #0]
 80259e4:	bd38      	pop	{r3, r4, r5, pc}
 80259e6:	bf00      	nop
 80259e8:	240102e8 	.word	0x240102e8

080259ec <_isatty_r>:
 80259ec:	b538      	push	{r3, r4, r5, lr}
 80259ee:	4d06      	ldr	r5, [pc, #24]	; (8025a08 <_isatty_r+0x1c>)
 80259f0:	2300      	movs	r3, #0
 80259f2:	4604      	mov	r4, r0
 80259f4:	4608      	mov	r0, r1
 80259f6:	602b      	str	r3, [r5, #0]
 80259f8:	f7db fd98 	bl	800152c <_isatty>
 80259fc:	1c43      	adds	r3, r0, #1
 80259fe:	d102      	bne.n	8025a06 <_isatty_r+0x1a>
 8025a00:	682b      	ldr	r3, [r5, #0]
 8025a02:	b103      	cbz	r3, 8025a06 <_isatty_r+0x1a>
 8025a04:	6023      	str	r3, [r4, #0]
 8025a06:	bd38      	pop	{r3, r4, r5, pc}
 8025a08:	240102e8 	.word	0x240102e8

08025a0c <_lseek_r>:
 8025a0c:	b538      	push	{r3, r4, r5, lr}
 8025a0e:	4d07      	ldr	r5, [pc, #28]	; (8025a2c <_lseek_r+0x20>)
 8025a10:	4604      	mov	r4, r0
 8025a12:	4608      	mov	r0, r1
 8025a14:	4611      	mov	r1, r2
 8025a16:	2200      	movs	r2, #0
 8025a18:	602a      	str	r2, [r5, #0]
 8025a1a:	461a      	mov	r2, r3
 8025a1c:	f7db fd88 	bl	8001530 <_lseek>
 8025a20:	1c43      	adds	r3, r0, #1
 8025a22:	d102      	bne.n	8025a2a <_lseek_r+0x1e>
 8025a24:	682b      	ldr	r3, [r5, #0]
 8025a26:	b103      	cbz	r3, 8025a2a <_lseek_r+0x1e>
 8025a28:	6023      	str	r3, [r4, #0]
 8025a2a:	bd38      	pop	{r3, r4, r5, pc}
 8025a2c:	240102e8 	.word	0x240102e8

08025a30 <_read_r>:
 8025a30:	b538      	push	{r3, r4, r5, lr}
 8025a32:	4d07      	ldr	r5, [pc, #28]	; (8025a50 <_read_r+0x20>)
 8025a34:	4604      	mov	r4, r0
 8025a36:	4608      	mov	r0, r1
 8025a38:	4611      	mov	r1, r2
 8025a3a:	2200      	movs	r2, #0
 8025a3c:	602a      	str	r2, [r5, #0]
 8025a3e:	461a      	mov	r2, r3
 8025a40:	f7db fd50 	bl	80014e4 <_read>
 8025a44:	1c43      	adds	r3, r0, #1
 8025a46:	d102      	bne.n	8025a4e <_read_r+0x1e>
 8025a48:	682b      	ldr	r3, [r5, #0]
 8025a4a:	b103      	cbz	r3, 8025a4e <_read_r+0x1e>
 8025a4c:	6023      	str	r3, [r4, #0]
 8025a4e:	bd38      	pop	{r3, r4, r5, pc}
 8025a50:	240102e8 	.word	0x240102e8

08025a54 <_init>:
 8025a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a56:	bf00      	nop
 8025a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a5a:	bc08      	pop	{r3}
 8025a5c:	469e      	mov	lr, r3
 8025a5e:	4770      	bx	lr

08025a60 <_fini>:
 8025a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025a62:	bf00      	nop
 8025a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025a66:	bc08      	pop	{r3}
 8025a68:	469e      	mov	lr, r3
 8025a6a:	4770      	bx	lr
