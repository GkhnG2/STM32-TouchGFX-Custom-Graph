
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022304  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004958  080225a8  080225a8  000325a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00003bfe  08026f00  08026f00  00036f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000254  0802ab00  0802ab00  0003ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00119400  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000038  90119400  90119400  00169400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802ad54  0802ad54  00169438  2**0
                  CONTENTS
  8 .ARM          00000008  0802ad54  0802ad54  0003ad54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802ad5c  0802ad5c  00169438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  0802ad5c  0802ad5c  0003ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802ad74  0802ad74  0003ad74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000180  24000000  0802ad7c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0000f2e4  24000180  0802aefc  00040180  2**2
                  ALLOC
 14 ._user_heap_stack 00002004  2400f464  0802aefc  0004f464  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  00169438  2**0
                  CONTENTS, READONLY
 16 .debug_info   000feca7  00000000  00000000  00169466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000173bf  00000000  00000000  0026810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003518  00000000  00000000  0027f4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00007098  00000000  00000000  002829e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00052252  00000000  00000000  00289a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   000626b8  00000000  00000000  002dbcd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001dc9fb  00000000  00000000  0033e38a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0051ad85  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a3d0  00000000  00000000  0051ae54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    00039078  00000000  00000000  00525224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000180 	.word	0x24000180
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802258c 	.word	0x0802258c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000184 	.word	0x24000184
 80002dc:	0802258c 	.word	0x0802258c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strcmp>:
 8000380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000384:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000388:	2a01      	cmp	r2, #1
 800038a:	bf28      	it	cs
 800038c:	429a      	cmpcs	r2, r3
 800038e:	d0f7      	beq.n	8000380 <strcmp>
 8000390:	1ad0      	subs	r0, r2, r3
 8000392:	4770      	bx	lr

08000394 <strlen>:
 8000394:	4603      	mov	r3, r0
 8000396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800039a:	2a00      	cmp	r2, #0
 800039c:	d1fb      	bne.n	8000396 <strlen+0x2>
 800039e:	1a18      	subs	r0, r3, r0
 80003a0:	3801      	subs	r0, #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ldivmod>:
 80003a4:	b97b      	cbnz	r3, 80003c6 <__aeabi_ldivmod+0x22>
 80003a6:	b972      	cbnz	r2, 80003c6 <__aeabi_ldivmod+0x22>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bfbe      	ittt	lt
 80003ac:	2000      	movlt	r0, #0
 80003ae:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80003b2:	e006      	blt.n	80003c2 <__aeabi_ldivmod+0x1e>
 80003b4:	bf08      	it	eq
 80003b6:	2800      	cmpeq	r0, #0
 80003b8:	bf1c      	itt	ne
 80003ba:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80003be:	f04f 30ff 	movne.w	r0, #4294967295
 80003c2:	f000 b9a7 	b.w	8000714 <__aeabi_idiv0>
 80003c6:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ca:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ce:	2900      	cmp	r1, #0
 80003d0:	db09      	blt.n	80003e6 <__aeabi_ldivmod+0x42>
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	db1a      	blt.n	800040c <__aeabi_ldivmod+0x68>
 80003d6:	f000 f835 	bl	8000444 <__udivmoddi4>
 80003da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003e2:	b004      	add	sp, #16
 80003e4:	4770      	bx	lr
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db1b      	blt.n	8000428 <__aeabi_ldivmod+0x84>
 80003f0:	f000 f828 	bl	8000444 <__udivmoddi4>
 80003f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003fc:	b004      	add	sp, #16
 80003fe:	4240      	negs	r0, r0
 8000400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000404:	4252      	negs	r2, r2
 8000406:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800040a:	4770      	bx	lr
 800040c:	4252      	negs	r2, r2
 800040e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000412:	f000 f817 	bl	8000444 <__udivmoddi4>
 8000416:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800041e:	b004      	add	sp, #16
 8000420:	4240      	negs	r0, r0
 8000422:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000426:	4770      	bx	lr
 8000428:	4252      	negs	r2, r2
 800042a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800042e:	f000 f809 	bl	8000444 <__udivmoddi4>
 8000432:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800043a:	b004      	add	sp, #16
 800043c:	4252      	negs	r2, r2
 800043e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000442:	4770      	bx	lr

08000444 <__udivmoddi4>:
 8000444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000448:	9d08      	ldr	r5, [sp, #32]
 800044a:	4604      	mov	r4, r0
 800044c:	468e      	mov	lr, r1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d14d      	bne.n	80004ee <__udivmoddi4+0xaa>
 8000452:	428a      	cmp	r2, r1
 8000454:	4694      	mov	ip, r2
 8000456:	d969      	bls.n	800052c <__udivmoddi4+0xe8>
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	b152      	cbz	r2, 8000474 <__udivmoddi4+0x30>
 800045e:	fa01 f302 	lsl.w	r3, r1, r2
 8000462:	f1c2 0120 	rsb	r1, r2, #32
 8000466:	fa20 f101 	lsr.w	r1, r0, r1
 800046a:	fa0c fc02 	lsl.w	ip, ip, r2
 800046e:	ea41 0e03 	orr.w	lr, r1, r3
 8000472:	4094      	lsls	r4, r2
 8000474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000478:	0c21      	lsrs	r1, r4, #16
 800047a:	fbbe f6f8 	udiv	r6, lr, r8
 800047e:	fa1f f78c 	uxth.w	r7, ip
 8000482:	fb08 e316 	mls	r3, r8, r6, lr
 8000486:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800048a:	fb06 f107 	mul.w	r1, r6, r7
 800048e:	4299      	cmp	r1, r3
 8000490:	d90a      	bls.n	80004a8 <__udivmoddi4+0x64>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f106 30ff 	add.w	r0, r6, #4294967295
 800049a:	f080 811f 	bcs.w	80006dc <__udivmoddi4+0x298>
 800049e:	4299      	cmp	r1, r3
 80004a0:	f240 811c 	bls.w	80006dc <__udivmoddi4+0x298>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b0:	fb08 3310 	mls	r3, r8, r0, r3
 80004b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004b8:	fb00 f707 	mul.w	r7, r0, r7
 80004bc:	42a7      	cmp	r7, r4
 80004be:	d90a      	bls.n	80004d6 <__udivmoddi4+0x92>
 80004c0:	eb1c 0404 	adds.w	r4, ip, r4
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	f080 810a 	bcs.w	80006e0 <__udivmoddi4+0x29c>
 80004cc:	42a7      	cmp	r7, r4
 80004ce:	f240 8107 	bls.w	80006e0 <__udivmoddi4+0x29c>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004da:	1be4      	subs	r4, r4, r7
 80004dc:	2600      	movs	r6, #0
 80004de:	b11d      	cbz	r5, 80004e8 <__udivmoddi4+0xa4>
 80004e0:	40d4      	lsrs	r4, r2
 80004e2:	2300      	movs	r3, #0
 80004e4:	e9c5 4300 	strd	r4, r3, [r5]
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d909      	bls.n	8000506 <__udivmoddi4+0xc2>
 80004f2:	2d00      	cmp	r5, #0
 80004f4:	f000 80ef 	beq.w	80006d6 <__udivmoddi4+0x292>
 80004f8:	2600      	movs	r6, #0
 80004fa:	e9c5 0100 	strd	r0, r1, [r5]
 80004fe:	4630      	mov	r0, r6
 8000500:	4631      	mov	r1, r6
 8000502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000506:	fab3 f683 	clz	r6, r3
 800050a:	2e00      	cmp	r6, #0
 800050c:	d14a      	bne.n	80005a4 <__udivmoddi4+0x160>
 800050e:	428b      	cmp	r3, r1
 8000510:	d302      	bcc.n	8000518 <__udivmoddi4+0xd4>
 8000512:	4282      	cmp	r2, r0
 8000514:	f200 80f9 	bhi.w	800070a <__udivmoddi4+0x2c6>
 8000518:	1a84      	subs	r4, r0, r2
 800051a:	eb61 0303 	sbc.w	r3, r1, r3
 800051e:	2001      	movs	r0, #1
 8000520:	469e      	mov	lr, r3
 8000522:	2d00      	cmp	r5, #0
 8000524:	d0e0      	beq.n	80004e8 <__udivmoddi4+0xa4>
 8000526:	e9c5 4e00 	strd	r4, lr, [r5]
 800052a:	e7dd      	b.n	80004e8 <__udivmoddi4+0xa4>
 800052c:	b902      	cbnz	r2, 8000530 <__udivmoddi4+0xec>
 800052e:	deff      	udf	#255	; 0xff
 8000530:	fab2 f282 	clz	r2, r2
 8000534:	2a00      	cmp	r2, #0
 8000536:	f040 8092 	bne.w	800065e <__udivmoddi4+0x21a>
 800053a:	eba1 010c 	sub.w	r1, r1, ip
 800053e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000542:	fa1f fe8c 	uxth.w	lr, ip
 8000546:	2601      	movs	r6, #1
 8000548:	0c20      	lsrs	r0, r4, #16
 800054a:	fbb1 f3f7 	udiv	r3, r1, r7
 800054e:	fb07 1113 	mls	r1, r7, r3, r1
 8000552:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000556:	fb0e f003 	mul.w	r0, lr, r3
 800055a:	4288      	cmp	r0, r1
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x12c>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f103 38ff 	add.w	r8, r3, #4294967295
 8000566:	d202      	bcs.n	800056e <__udivmoddi4+0x12a>
 8000568:	4288      	cmp	r0, r1
 800056a:	f200 80cb 	bhi.w	8000704 <__udivmoddi4+0x2c0>
 800056e:	4643      	mov	r3, r8
 8000570:	1a09      	subs	r1, r1, r0
 8000572:	b2a4      	uxth	r4, r4
 8000574:	fbb1 f0f7 	udiv	r0, r1, r7
 8000578:	fb07 1110 	mls	r1, r7, r0, r1
 800057c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000580:	fb0e fe00 	mul.w	lr, lr, r0
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x156>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d202      	bcs.n	8000598 <__udivmoddi4+0x154>
 8000592:	45a6      	cmp	lr, r4
 8000594:	f200 80bb 	bhi.w	800070e <__udivmoddi4+0x2ca>
 8000598:	4608      	mov	r0, r1
 800059a:	eba4 040e 	sub.w	r4, r4, lr
 800059e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80005a2:	e79c      	b.n	80004de <__udivmoddi4+0x9a>
 80005a4:	f1c6 0720 	rsb	r7, r6, #32
 80005a8:	40b3      	lsls	r3, r6
 80005aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80005ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80005b2:	fa20 f407 	lsr.w	r4, r0, r7
 80005b6:	fa01 f306 	lsl.w	r3, r1, r6
 80005ba:	431c      	orrs	r4, r3
 80005bc:	40f9      	lsrs	r1, r7
 80005be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80005c2:	fa00 f306 	lsl.w	r3, r0, r6
 80005c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80005ca:	0c20      	lsrs	r0, r4, #16
 80005cc:	fa1f fe8c 	uxth.w	lr, ip
 80005d0:	fb09 1118 	mls	r1, r9, r8, r1
 80005d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005d8:	fb08 f00e 	mul.w	r0, r8, lr
 80005dc:	4288      	cmp	r0, r1
 80005de:	fa02 f206 	lsl.w	r2, r2, r6
 80005e2:	d90b      	bls.n	80005fc <__udivmoddi4+0x1b8>
 80005e4:	eb1c 0101 	adds.w	r1, ip, r1
 80005e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80005ec:	f080 8088 	bcs.w	8000700 <__udivmoddi4+0x2bc>
 80005f0:	4288      	cmp	r0, r1
 80005f2:	f240 8085 	bls.w	8000700 <__udivmoddi4+0x2bc>
 80005f6:	f1a8 0802 	sub.w	r8, r8, #2
 80005fa:	4461      	add	r1, ip
 80005fc:	1a09      	subs	r1, r1, r0
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb1 f0f9 	udiv	r0, r1, r9
 8000604:	fb09 1110 	mls	r1, r9, r0, r1
 8000608:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800060c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000610:	458e      	cmp	lr, r1
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x1e2>
 8000614:	eb1c 0101 	adds.w	r1, ip, r1
 8000618:	f100 34ff 	add.w	r4, r0, #4294967295
 800061c:	d26c      	bcs.n	80006f8 <__udivmoddi4+0x2b4>
 800061e:	458e      	cmp	lr, r1
 8000620:	d96a      	bls.n	80006f8 <__udivmoddi4+0x2b4>
 8000622:	3802      	subs	r0, #2
 8000624:	4461      	add	r1, ip
 8000626:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800062a:	fba0 9402 	umull	r9, r4, r0, r2
 800062e:	eba1 010e 	sub.w	r1, r1, lr
 8000632:	42a1      	cmp	r1, r4
 8000634:	46c8      	mov	r8, r9
 8000636:	46a6      	mov	lr, r4
 8000638:	d356      	bcc.n	80006e8 <__udivmoddi4+0x2a4>
 800063a:	d053      	beq.n	80006e4 <__udivmoddi4+0x2a0>
 800063c:	b15d      	cbz	r5, 8000656 <__udivmoddi4+0x212>
 800063e:	ebb3 0208 	subs.w	r2, r3, r8
 8000642:	eb61 010e 	sbc.w	r1, r1, lr
 8000646:	fa01 f707 	lsl.w	r7, r1, r7
 800064a:	fa22 f306 	lsr.w	r3, r2, r6
 800064e:	40f1      	lsrs	r1, r6
 8000650:	431f      	orrs	r7, r3
 8000652:	e9c5 7100 	strd	r7, r1, [r5]
 8000656:	2600      	movs	r6, #0
 8000658:	4631      	mov	r1, r6
 800065a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800065e:	f1c2 0320 	rsb	r3, r2, #32
 8000662:	40d8      	lsrs	r0, r3
 8000664:	fa0c fc02 	lsl.w	ip, ip, r2
 8000668:	fa21 f303 	lsr.w	r3, r1, r3
 800066c:	4091      	lsls	r1, r2
 800066e:	4301      	orrs	r1, r0
 8000670:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000674:	fa1f fe8c 	uxth.w	lr, ip
 8000678:	fbb3 f0f7 	udiv	r0, r3, r7
 800067c:	fb07 3610 	mls	r6, r7, r0, r3
 8000680:	0c0b      	lsrs	r3, r1, #16
 8000682:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000686:	fb00 f60e 	mul.w	r6, r0, lr
 800068a:	429e      	cmp	r6, r3
 800068c:	fa04 f402 	lsl.w	r4, r4, r2
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0x260>
 8000692:	eb1c 0303 	adds.w	r3, ip, r3
 8000696:	f100 38ff 	add.w	r8, r0, #4294967295
 800069a:	d22f      	bcs.n	80006fc <__udivmoddi4+0x2b8>
 800069c:	429e      	cmp	r6, r3
 800069e:	d92d      	bls.n	80006fc <__udivmoddi4+0x2b8>
 80006a0:	3802      	subs	r0, #2
 80006a2:	4463      	add	r3, ip
 80006a4:	1b9b      	subs	r3, r3, r6
 80006a6:	b289      	uxth	r1, r1
 80006a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80006ac:	fb07 3316 	mls	r3, r7, r6, r3
 80006b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006b4:	fb06 f30e 	mul.w	r3, r6, lr
 80006b8:	428b      	cmp	r3, r1
 80006ba:	d908      	bls.n	80006ce <__udivmoddi4+0x28a>
 80006bc:	eb1c 0101 	adds.w	r1, ip, r1
 80006c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80006c4:	d216      	bcs.n	80006f4 <__udivmoddi4+0x2b0>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d914      	bls.n	80006f4 <__udivmoddi4+0x2b0>
 80006ca:	3e02      	subs	r6, #2
 80006cc:	4461      	add	r1, ip
 80006ce:	1ac9      	subs	r1, r1, r3
 80006d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006d4:	e738      	b.n	8000548 <__udivmoddi4+0x104>
 80006d6:	462e      	mov	r6, r5
 80006d8:	4628      	mov	r0, r5
 80006da:	e705      	b.n	80004e8 <__udivmoddi4+0xa4>
 80006dc:	4606      	mov	r6, r0
 80006de:	e6e3      	b.n	80004a8 <__udivmoddi4+0x64>
 80006e0:	4618      	mov	r0, r3
 80006e2:	e6f8      	b.n	80004d6 <__udivmoddi4+0x92>
 80006e4:	454b      	cmp	r3, r9
 80006e6:	d2a9      	bcs.n	800063c <__udivmoddi4+0x1f8>
 80006e8:	ebb9 0802 	subs.w	r8, r9, r2
 80006ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006f0:	3801      	subs	r0, #1
 80006f2:	e7a3      	b.n	800063c <__udivmoddi4+0x1f8>
 80006f4:	4646      	mov	r6, r8
 80006f6:	e7ea      	b.n	80006ce <__udivmoddi4+0x28a>
 80006f8:	4620      	mov	r0, r4
 80006fa:	e794      	b.n	8000626 <__udivmoddi4+0x1e2>
 80006fc:	4640      	mov	r0, r8
 80006fe:	e7d1      	b.n	80006a4 <__udivmoddi4+0x260>
 8000700:	46d0      	mov	r8, sl
 8000702:	e77b      	b.n	80005fc <__udivmoddi4+0x1b8>
 8000704:	3b02      	subs	r3, #2
 8000706:	4461      	add	r1, ip
 8000708:	e732      	b.n	8000570 <__udivmoddi4+0x12c>
 800070a:	4630      	mov	r0, r6
 800070c:	e709      	b.n	8000522 <__udivmoddi4+0xde>
 800070e:	4464      	add	r4, ip
 8000710:	3802      	subs	r0, #2
 8000712:	e742      	b.n	800059a <__udivmoddi4+0x156>

08000714 <__aeabi_idiv0>:
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop

08000718 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000718:	4901      	ldr	r1, [pc, #4]	; (8000720 <vApplicationIdleHook+0x8>)
 800071a:	2000      	movs	r0, #0
 800071c:	f00b bdec 	b.w	800c2f8 <vTaskSetApplicationTaskTag>
 8000720:	08001d91 	.word	0x08001d91

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000726:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000728:	224c      	movs	r2, #76	; 0x4c
 800072a:	2100      	movs	r1, #0
 800072c:	a809      	add	r0, sp, #36	; 0x24
 800072e:	f01f feb1 	bl	8020494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	a801      	add	r0, sp, #4
 8000738:	f01f feac 	bl	8020494 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800073c:	2004      	movs	r0, #4
 800073e:	f008 f8ab 	bl	8008898 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000742:	2300      	movs	r3, #0
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <SystemClock_Config+0xcc>)
 8000748:	699a      	ldr	r2, [r3, #24]
 800074a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	699a      	ldr	r2, [r3, #24]
 8000752:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000756:	9200      	str	r2, [sp, #0]
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800075c:	f041 0101 	orr.w	r1, r1, #1
 8000760:	62d1      	str	r1, [r2, #44]	; 0x2c
 8000762:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000764:	f002 0201 	and.w	r2, r2, #1
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800076c:	699a      	ldr	r2, [r3, #24]
 800076e:	0491      	lsls	r1, r2, #18
 8000770:	d5fc      	bpl.n	800076c <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000772:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000776:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2402      	movs	r4, #2
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800077a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077c:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000780:	f023 0303 	bic.w	r3, r3, #3
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 160;
 800078e:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000792:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000796:	2301      	movs	r3, #1
 8000798:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 800079c:	23a0      	movs	r3, #160	; 0xa0
 800079e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a4:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ac:	e9cd 6319 	strd	r6, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007b0:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f008 fb5f 	bl	8008e74 <HAL_RCC_OscConfig>
 80007b6:	b108      	cbz	r0, 80007bc <SystemClock_Config+0x98>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	233f      	movs	r3, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c8:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007cc:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ce:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d2:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d6:	f008 fecd 	bl	8009574 <HAL_RCC_ClockConfig>
 80007da:	4601      	mov	r1, r0
 80007dc:	b108      	cbz	r0, 80007e2 <SystemClock_Config+0xbe>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <SystemClock_Config+0xbc>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007e6:	f008 fdd7 	bl	8009398 <HAL_RCC_MCOConfig>
}
 80007ea:	b01d      	add	sp, #116	; 0x74
 80007ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58024800 	.word	0x58024800
 80007f4:	58000400 	.word	0x58000400
 80007f8:	58024400 	.word	0x58024400

080007fc <main>:
{
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	b0bd      	sub	sp, #244	; 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000802:	2210      	movs	r2, #16
 8000804:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000806:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000808:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800080a:	f04f 4710 	mov.w	r7, #2415919104	; 0x90000000
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080e:	f01f fe41 	bl	8020494 <memset>
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000812:	2504      	movs	r5, #4
  HAL_MPU_Disable();
 8000814:	f006 fac6 	bl	8006da4 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000818:	4bb6      	ldr	r3, [pc, #728]	; (8000af4 <main+0x2f8>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081a:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081c:	f8ad 40bc 	strh.w	r4, [sp, #188]	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000820:	9432      	str	r4, [sp, #200]	; 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000822:	e9cd 7330 	strd	r7, r3, [sp, #192]	; 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000826:	f006 fadb 	bl	8006de0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 800082a:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800082e:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000832:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000836:	f006 fad3 	bl	8006de0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800083a:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800083e:	f88d 40ca 	strb.w	r4, [sp, #202]	; 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000842:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000846:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800084a:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800084c:	2318      	movs	r3, #24
 800084e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f006 fac5 	bl	8006de0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000856:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800085a:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 800085e:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000862:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000864:	2312      	movs	r3, #18
 8000866:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000870:	f006 fab6 	bl	8006de0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000874:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000878:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 800087a:	f88d 50bd 	strb.w	r5, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 800087e:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000880:	2311      	movs	r3, #17
 8000882:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000886:	f006 faab 	bl	8006de0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800088a:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800088c:	a82f      	add	r0, sp, #188	; 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800088e:	f88d 40c8 	strb.w	r4, [sp, #200]	; 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000892:	f88d 30bd 	strb.w	r3, [sp, #189]	; 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000896:	4b98      	ldr	r3, [pc, #608]	; (8000af8 <main+0x2fc>)
 8000898:	9330      	str	r3, [sp, #192]	; 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800089a:	230e      	movs	r3, #14
 800089c:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008a0:	f006 fa9e 	bl	8006de0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008a4:	4628      	mov	r0, r5
 80008a6:	f006 fa8b 	bl	8006dc0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008aa:	4b94      	ldr	r3, [pc, #592]	; (8000afc <main+0x300>)
 80008ac:	695a      	ldr	r2, [r3, #20]
 80008ae:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80008b2:	d111      	bne.n	80008d8 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008bc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008ce:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d8:	4a88      	ldr	r2, [pc, #544]	; (8000afc <main+0x300>)
 80008da:	6953      	ldr	r3, [r2, #20]
 80008dc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008e0:	d123      	bne.n	800092a <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008e6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008ea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ee:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008f2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008f6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008fa:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008fc:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000900:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000902:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000906:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000908:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 800090c:	d2f9      	bcs.n	8000902 <main+0x106>
    } while(sets-- != 0U);
 800090e:	3b20      	subs	r3, #32
 8000910:	f113 0f20 	cmn.w	r3, #32
 8000914:	d1f2      	bne.n	80008fc <main+0x100>
 8000916:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800091a:	6953      	ldr	r3, [r2, #20]
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	6153      	str	r3, [r2, #20]
 8000922:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000926:	f3bf 8f6f 	isb	sy
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800092a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092e:	4d74      	ldr	r5, [pc, #464]	; (8000b00 <main+0x304>)
 8000930:	682c      	ldr	r4, [r5, #0]
 8000932:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
 8000936:	f000 830e 	beq.w	8000f56 <main+0x75a>
 800093a:	3b01      	subs	r3, #1
 800093c:	d1f8      	bne.n	8000930 <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
  while (1)
 8000940:	e7fe      	b.n	8000940 <main+0x144>
 8000942:	b672      	cpsid	i
 8000944:	e7fe      	b.n	8000944 <main+0x148>
  BSP_SDRAM_DeInit(0);
 8000946:	f005 febd 	bl	80066c4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800094a:	4640      	mov	r0, r8
 800094c:	f005 ff08 	bl	8006760 <BSP_SDRAM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	b108      	cbz	r0, 8000958 <main+0x15c>
 8000954:	b672      	cpsid	i
  while (1)
 8000956:	e7fe      	b.n	8000956 <main+0x15a>
  hqspi.Instance = QUADSPI;
 8000958:	486a      	ldr	r0, [pc, #424]	; (8000b04 <main+0x308>)
 800095a:	4a6b      	ldr	r2, [pc, #428]	; (8000b08 <main+0x30c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800095c:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 800095e:	6205      	str	r5, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000960:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000964:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000968:	e9c0 4304 	strd	r4, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800096c:	f008 f8a8 	bl	8008ac0 <HAL_QSPI_Init>
 8000970:	b108      	cbz	r0, 8000976 <main+0x17a>
 8000972:	b672      	cpsid	i
  while (1)
 8000974:	e7fe      	b.n	8000974 <main+0x178>
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000976:	a92f      	add	r1, sp, #188	; 0xbc
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000978:	f88d 70bc 	strb.w	r7, [sp, #188]	; 0xbc
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800097c:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000980:	f88d 50be 	strb.w	r5, [sp, #190]	; 0xbe
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000984:	f005 fce4 	bl	8006350 <BSP_QSPI_Init>
 8000988:	b108      	cbz	r0, 800098e <main+0x192>
 800098a:	b672      	cpsid	i
  while (1)
 800098c:	e7fe      	b.n	800098c <main+0x190>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 800098e:	f005 fc8b 	bl	80062a8 <BSP_QSPI_EnableMemoryMappedMode>
 8000992:	4603      	mov	r3, r0
 8000994:	b108      	cbz	r0, 800099a <main+0x19e>
 8000996:	b672      	cpsid	i
  while (1)
 8000998:	e7fe      	b.n	8000998 <main+0x19c>
  hdma2d.Instance = DMA2D;
 800099a:	485c      	ldr	r0, [pc, #368]	; (8000b0c <main+0x310>)
  hdma2d.Init.Mode = DMA2D_R2M;
 800099c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009a0:	4d5b      	ldr	r5, [pc, #364]	; (8000b10 <main+0x314>)
  hdma2d.Init.OutputOffset = 0;
 80009a2:	e9c0 4302 	strd	r4, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 80009a6:	e9c0 5200 	strd	r5, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009aa:	f006 faa3 	bl	8006ef4 <HAL_DMA2D_Init>
 80009ae:	4605      	mov	r5, r0
 80009b0:	b108      	cbz	r0, 80009b6 <main+0x1ba>
 80009b2:	b672      	cpsid	i
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x1b8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 80009b6:	4602      	mov	r2, r0
 80009b8:	4631      	mov	r1, r6
 80009ba:	4856      	ldr	r0, [pc, #344]	; (8000b14 <main+0x318>)
 80009bc:	f007 f946 	bl	8007c4c <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80009c0:	2014      	movs	r0, #20
 80009c2:	f006 f971 	bl	8006ca8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 80009c6:	4631      	mov	r1, r6
 80009c8:	4622      	mov	r2, r4
 80009ca:	4852      	ldr	r0, [pc, #328]	; (8000b14 <main+0x318>)
 80009cc:	f007 f93e 	bl	8007c4c <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80009d0:	200a      	movs	r0, #10
 80009d2:	f006 f969 	bl	8006ca8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009d6:	2224      	movs	r2, #36	; 0x24
 80009d8:	4629      	mov	r1, r5
 80009da:	a819      	add	r0, sp, #100	; 0x64
  DSI_PLLInitTypeDef PLLInit = {0};
 80009dc:	9512      	str	r5, [sp, #72]	; 0x48
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009de:	f01f fd59 	bl	8020494 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009e2:	2218      	movs	r2, #24
 80009e4:	4629      	mov	r1, r5
 80009e6:	a813      	add	r0, sp, #76	; 0x4c
  hdsi.Instance = DSI;
 80009e8:	4e4b      	ldr	r6, [pc, #300]	; (8000b18 <main+0x31c>)
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009ea:	f01f fd53 	bl	8020494 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009ee:	2234      	movs	r2, #52	; 0x34
 80009f0:	4629      	mov	r1, r5
 80009f2:	a82f      	add	r0, sp, #188	; 0xbc
 80009f4:	f01f fd4e 	bl	8020494 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009f8:	4629      	mov	r1, r5
 80009fa:	222c      	movs	r2, #44	; 0x2c
 80009fc:	a822      	add	r0, sp, #136	; 0x88
 80009fe:	f01f fd49 	bl	8020494 <memset>
  hdsi.Instance = DSI;
 8000a02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a06:	2063      	movs	r0, #99	; 0x63
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a08:	a910      	add	r1, sp, #64	; 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a0a:	e9c6 3500 	strd	r3, r5, [r6]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a0e:	2304      	movs	r3, #4
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a10:	e9c6 3402 	strd	r3, r4, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8000a14:	2305      	movs	r3, #5
 8000a16:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f006 fbb6 	bl	800718c <HAL_DSI_Init>
 8000a20:	b108      	cbz	r0, 8000a26 <main+0x22a>
 8000a22:	b672      	cpsid	i
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x228>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a26:	e9cd 4019 	strd	r4, r0, [sp, #100]	; 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a2a:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a2e:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a32:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  HostTimeouts.BTATimeout = 0;
 8000a36:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a38:	a919      	add	r1, sp, #100	; 0x64
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	f006 fdd2 	bl	80075e4 <HAL_DSI_ConfigHostTimeouts>
 8000a40:	b108      	cbz	r0, 8000a46 <main+0x24a>
 8000a42:	b672      	cpsid	i
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <main+0x248>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a46:	2321      	movs	r3, #33	; 0x21
 8000a48:	221c      	movs	r2, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a4a:	210f      	movs	r1, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a4c:	4832      	ldr	r0, [pc, #200]	; (8000b18 <main+0x31c>)
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a4e:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a52:	2319      	movs	r3, #25
 8000a54:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a58:	2300      	movs	r3, #0
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a5a:	a913      	add	r1, sp, #76	; 0x4c
  PhyTimings.StopWaitTime = 0;
 8000a5c:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a60:	f006 fd83 	bl	800756a <HAL_DSI_ConfigPhyTimer>
 8000a64:	b108      	cbz	r0, 8000a6a <main+0x26e>
 8000a66:	b672      	cpsid	i
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <main+0x26c>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	482a      	ldr	r0, [pc, #168]	; (8000b18 <main+0x31c>)
 8000a6e:	f006 fd6b 	bl	8007548 <HAL_DSI_ConfigFlowControl>
 8000a72:	b108      	cbz	r0, 8000a78 <main+0x27c>
 8000a74:	b672      	cpsid	i
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <main+0x27a>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a7c:	4826      	ldr	r0, [pc, #152]	; (8000b18 <main+0x31c>)
 8000a7e:	f006 ff3b 	bl	80078f8 <HAL_DSI_SetLowPowerRXFilter>
 8000a82:	4601      	mov	r1, r0
 8000a84:	b108      	cbz	r0, 8000a8a <main+0x28e>
 8000a86:	b672      	cpsid	i
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <main+0x28c>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a8a:	4823      	ldr	r0, [pc, #140]	; (8000b18 <main+0x31c>)
 8000a8c:	f006 fb1c 	bl	80070c8 <HAL_DSI_ConfigErrorMonitor>
 8000a90:	b108      	cbz	r0, 8000a96 <main+0x29a>
 8000a92:	b672      	cpsid	i
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <main+0x298>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a96:	f44f 7880 	mov.w	r8, #256	; 0x100
 8000a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a9e:	f44f 6980 	mov.w	r9, #1024	; 0x400
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000aa2:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000aa6:	f44f 3a00 	mov.w	sl, #131072	; 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000aaa:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aae:	a92f      	add	r1, sp, #188	; 0xbc
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <main+0x31c>)
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000ab2:	e9cd 832f 	strd	r8, r3, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000ab6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000aba:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000abe:	e9cd 9331 	strd	r9, r3, [sp, #196]	; 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ac6:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000aca:	e9cd 7335 	strd	r7, r3, [sp, #212]	; 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000ace:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ad2:	e9cd a337 	strd	sl, r3, [sp, #220]	; 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000ad6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ada:	e9cd b339 	strd	fp, r3, [sp, #228]	; 0xe4
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000ade:	f04f 0b02 	mov.w	fp, #2
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000ae2:	e9cd 9833 	strd	r9, r8, [sp, #204]	; 0xcc
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000ae6:	f8cd b0ec 	str.w	fp, [sp, #236]	; 0xec
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000aea:	f006 fcf9 	bl	80074e0 <HAL_DSI_ConfigCommand>
 8000aee:	b1a8      	cbz	r0, 8000b1c <main+0x320>
 8000af0:	b672      	cpsid	i
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <main+0x2f6>
 8000af4:	0300001b 	.word	0x0300001b
 8000af8:	10040000 	.word	0x10040000
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	58024400 	.word	0x58024400
 8000b04:	24000320 	.word	0x24000320
 8000b08:	52005000 	.word	0x52005000
 8000b0c:	240001f4 	.word	0x240001f4
 8000b10:	52001000 	.word	0x52001000
 8000b14:	58021800 	.word	0x58021800
 8000b18:	2400025c 	.word	0x2400025c
  CmdCfg.CommandSize = 400;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	f44f 74c8 	mov.w	r4, #400	; 0x190
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b22:	f04f 0a10 	mov.w	sl, #16
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b26:	2501      	movs	r5, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b28:	a922      	add	r1, sp, #136	; 0x88
  CmdCfg.VirtualChannelID = 0;
 8000b2a:	9022      	str	r0, [sp, #136]	; 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b2c:	9029      	str	r0, [sp, #164]	; 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b2e:	952c      	str	r5, [sp, #176]	; 0xb0
  CmdCfg.CommandSize = 400;
 8000b30:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000b34:	2380      	movs	r3, #128	; 0x80
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b36:	e9cd a025 	strd	sl, r0, [sp, #148]	; 0x94
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000b3a:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000b3e:	e9cd 302a 	strd	r3, r0, [sp, #168]	; 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b42:	4888      	ldr	r0, [pc, #544]	; (8000d64 <main+0x568>)
 8000b44:	f006 fc5a 	bl	80073fc <HAL_DSI_ConfigAdaptedCommandMode>
 8000b48:	4601      	mov	r1, r0
 8000b4a:	b108      	cbz	r0, 8000b50 <main+0x354>
 8000b4c:	b672      	cpsid	i
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <main+0x352>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b50:	4884      	ldr	r0, [pc, #528]	; (8000d64 <main+0x568>)
 8000b52:	f006 fc42 	bl	80073da <HAL_DSI_SetGenericVCID>
 8000b56:	4601      	mov	r1, r0
 8000b58:	b108      	cbz	r0, 8000b5e <main+0x362>
 8000b5a:	b672      	cpsid	i
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <main+0x360>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b5e:	9003      	str	r0, [sp, #12]
 8000b60:	2234      	movs	r2, #52	; 0x34
 8000b62:	a822      	add	r0, sp, #136	; 0x88
  hltdc.Instance = LTDC;
 8000b64:	4e80      	ldr	r6, [pc, #512]	; (8000d68 <main+0x56c>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b66:	f01f fc95 	bl	8020494 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b6a:	4880      	ldr	r0, [pc, #512]	; (8000d6c <main+0x570>)
 8000b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b70:	f44f 7cc9 	mov.w	ip, #402	; 0x192
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b74:	9903      	ldr	r1, [sp, #12]
  hltdc.Init.TotalHeigh = 483;
 8000b76:	f240 1e93 	movw	lr, #403	; 0x193
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b7a:	e9c6 0300 	strd	r0, r3, [r6]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b82:	4630      	mov	r0, r6
  hltdc.Init.Backcolor.Blue = 0;
 8000b84:	86b1      	strh	r1, [r6, #52]	; 0x34
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b86:	60b3      	str	r3, [r6, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b88:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
  hltdc.Init.Backcolor.Red = 0;
 8000b8c:	f886 1036 	strb.w	r1, [r6, #54]	; 0x36
  hltdc.Init.AccumulatedActiveH = 482;
 8000b90:	e9c6 c309 	strd	ip, r3, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b94:	f240 13e3 	movw	r3, #483	; 0x1e3
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b98:	e9c6 1103 	strd	r1, r1, [r6, #12]
  hltdc.Init.VerticalSync = 0;
 8000b9c:	e9c6 1105 	strd	r1, r1, [r6, #20]
  hltdc.Init.AccumulatedVBP = 2;
 8000ba0:	e9c6 bb07 	strd	fp, fp, [r6, #28]
  hltdc.Init.TotalHeigh = 483;
 8000ba4:	e9c6 e30b 	strd	lr, r3, [r6, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ba8:	f007 fcb2 	bl	8008510 <HAL_LTDC_Init>
 8000bac:	b108      	cbz	r0, 8000bb2 <main+0x3b6>
 8000bae:	b672      	cpsid	i
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <main+0x3b4>
  pLayerCfg.Alpha = 255;
 8000bb2:	22ff      	movs	r2, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowY1 = 480;
 8000bb8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000bbc:	9024      	str	r0, [sp, #144]	; 0x90
  pLayerCfg.Backcolor.Blue = 0;
 8000bbe:	f8ad 00b8 	strh.w	r0, [sp, #184]	; 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000bc2:	f88d 00ba 	strb.w	r0, [sp, #186]	; 0xba
  pLayerCfg.ImageHeight = 480;
 8000bc6:	932d      	str	r3, [sp, #180]	; 0xb4
  pLayerCfg.Alpha0 = 0;
 8000bc8:	e9cd 2027 	strd	r2, r0, [sp, #156]	; 0x9c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000bcc:	2207      	movs	r2, #7
 8000bce:	e9cd 1229 	strd	r1, r2, [sp, #164]	; 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000bd2:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bd6:	a922      	add	r1, sp, #136	; 0x88
  pLayerCfg.WindowX1 = 400;
 8000bd8:	e9cd 0422 	strd	r0, r4, [sp, #136]	; 0x88
  pLayerCfg.ImageWidth = 400;
 8000bdc:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be0:	4602      	mov	r2, r0
 8000be2:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000be4:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000be8:	f007 fd5e 	bl	80086a8 <HAL_LTDC_ConfigLayer>
 8000bec:	4604      	mov	r4, r0
 8000bee:	b108      	cbz	r0, 8000bf4 <main+0x3f8>
 8000bf0:	b672      	cpsid	i
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <main+0x3f6>
  __HAL_LTDC_DISABLE(&hltdc);
 8000bf4:	6832      	ldr	r2, [r6, #0]
  HAL_DSI_Start(&hdsi);
 8000bf6:	485b      	ldr	r0, [pc, #364]	; (8000d64 <main+0x568>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bf8:	6993      	ldr	r3, [r2, #24]
 8000bfa:	f023 0301 	bic.w	r3, r3, #1
 8000bfe:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000c00:	f006 fd56 	bl	80076b0 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000c04:	495a      	ldr	r1, [pc, #360]	; (8000d70 <main+0x574>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c06:	4b5b      	ldr	r3, [pc, #364]	; (8000d74 <main+0x578>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c08:	485b      	ldr	r0, [pc, #364]	; (8000d78 <main+0x57c>)
  IOCtx.GetTick     = BSP_GetTick;
 8000c0a:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c0c:	4b5b      	ldr	r3, [pc, #364]	; (8000d7c <main+0x580>)
  IOCtx.Address     = 0;
 8000c0e:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000c10:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000c12:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <main+0x584>)
 8000c14:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000c16:	f005 f93b 	bl	8005e90 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000c1a:	462a      	mov	r2, r5
 8000c1c:	4621      	mov	r1, r4
 8000c1e:	4856      	ldr	r0, [pc, #344]	; (8000d78 <main+0x57c>)
 8000c20:	f004 fd92 	bl	8005748 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000c24:	2328      	movs	r3, #40	; 0x28
 8000c26:	2215      	movs	r2, #21
 8000c28:	4621      	mov	r1, r4
 8000c2a:	484e      	ldr	r0, [pc, #312]	; (8000d64 <main+0x568>)
 8000c2c:	9400      	str	r4, [sp, #0]
 8000c2e:	f006 fd72 	bl	8007716 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c32:	a92f      	add	r1, sp, #188	; 0xbc
 8000c34:	484b      	ldr	r0, [pc, #300]	; (8000d64 <main+0x568>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c36:	9439      	str	r4, [sp, #228]	; 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c38:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c3c:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c40:	e9cd 4433 	strd	r4, r4, [sp, #204]	; 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c44:	e9cd 4435 	strd	r4, r4, [sp, #212]	; 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c48:	e9cd 4437 	strd	r4, r4, [sp, #220]	; 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c4c:	f006 fc48 	bl	80074e0 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c50:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000c54:	4622      	mov	r2, r4
 8000c56:	4630      	mov	r0, r6
 8000c58:	f007 fd54 	bl	8008704 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c5c:	6832      	ldr	r2, [r6, #0]
	GPIO_InitStruct.Pin = LED4_Blue_Pin;
 8000c5e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
  __HAL_LTDC_ENABLE(&hltdc);
 8000c62:	6993      	ldr	r3, [r2, #24]
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
  MX_TouchGFX_Init();
 8000c6a:	f000 fd10 	bl	800168e <MX_TouchGFX_Init>
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <main+0x588>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	9433      	str	r4, [sp, #204]	; 0xcc
	HAL_GPIO_Init(LED1_Green_Port, &GPIO_InitStruct);
 8000c72:	a92f      	add	r1, sp, #188	; 0xbc
 8000c74:	4844      	ldr	r0, [pc, #272]	; (8000d88 <main+0x58c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000c7e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000c82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c8a:	9532      	str	r5, [sp, #200]	; 0xc8
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8000c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c90:	9322      	str	r3, [sp, #136]	; 0x88
 8000c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	e9cd 952f 	strd	r9, r5, [sp, #188]	; 0xbc
	HAL_GPIO_Init(LED1_Green_Port, &GPIO_InitStruct);
 8000c98:	f006 fe44 	bl	8007924 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED1_Green_Port, LED1_Green_Pin, GPIO_PIN_SET);
 8000c9c:	462a      	mov	r2, r5
 8000c9e:	4649      	mov	r1, r9
 8000ca0:	4839      	ldr	r0, [pc, #228]	; (8000d88 <main+0x58c>)
 8000ca2:	f006 ffd3 	bl	8007c4c <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED2_Orange_Port, &GPIO_InitStruct);
 8000ca6:	a92f      	add	r1, sp, #188	; 0xbc
 8000ca8:	4837      	ldr	r0, [pc, #220]	; (8000d88 <main+0x58c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	e9cd 852f 	strd	r8, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cae:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED2_Orange_Port, &GPIO_InitStruct);
 8000cb2:	f006 fe37 	bl	8007924 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED2_Orange_Port, LED2_Orange_Pin, GPIO_PIN_SET);
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4641      	mov	r1, r8
 8000cba:	4833      	ldr	r0, [pc, #204]	; (8000d88 <main+0x58c>)
 8000cbc:	f006 ffc6 	bl	8007c4c <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED3_Red_Port, &GPIO_InitStruct);
 8000cc0:	a92f      	add	r1, sp, #188	; 0xbc
 8000cc2:	4831      	ldr	r0, [pc, #196]	; (8000d88 <main+0x58c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	e9cd 752f 	strd	r7, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cc8:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED3_Red_Port, &GPIO_InitStruct);
 8000ccc:	f006 fe2a 	bl	8007924 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED3_Red_Port, LED3_Red_Pin, GPIO_PIN_SET);
 8000cd0:	462a      	mov	r2, r5
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	482c      	ldr	r0, [pc, #176]	; (8000d88 <main+0x58c>)
 8000cd6:	f006 ffb9 	bl	8007c4c <HAL_GPIO_WritePin>
	HAL_GPIO_Init(LED4_Blue_Port, &GPIO_InitStruct);
 8000cda:	a92f      	add	r1, sp, #188	; 0xbc
 8000cdc:	482a      	ldr	r0, [pc, #168]	; (8000d88 <main+0x58c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	e9cd 652f 	strd	r6, r5, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce2:	e9cd 4531 	strd	r4, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(LED4_Blue_Port, &GPIO_InitStruct);
 8000ce6:	f006 fe1d 	bl	8007924 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(LED4_Blue_Port, LED4_Blue_Pin, GPIO_PIN_SET);
 8000cea:	462a      	mov	r2, r5
 8000cec:	4631      	mov	r1, r6
 8000cee:	4826      	ldr	r0, [pc, #152]	; (8000d88 <main+0x58c>)
 8000cf0:	f006 ffac 	bl	8007c4c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000cf4:	2304      	movs	r3, #4
	HAL_GPIO_Init(JOY_SEL_Port, &GPIO_InitStruct);
 8000cf6:	a92f      	add	r1, sp, #188	; 0xbc
 8000cf8:	4824      	ldr	r0, [pc, #144]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfa:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cfe:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_SEL_Port, &GPIO_InitStruct);
 8000d02:	f006 fe0f 	bl	8007924 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000d06:	2308      	movs	r3, #8
	HAL_GPIO_Init(JOY_DOWN_Port, &GPIO_InitStruct);
 8000d08:	a92f      	add	r1, sp, #188	; 0xbc
 8000d0a:	4820      	ldr	r0, [pc, #128]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d10:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_DOWN_Port, &GPIO_InitStruct);
 8000d14:	f006 fe06 	bl	8007924 <HAL_GPIO_Init>
	HAL_GPIO_Init(JOY_LEFT_Port, &GPIO_InitStruct);
 8000d18:	a92f      	add	r1, sp, #188	; 0xbc
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	e9cd a42f 	strd	sl, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d20:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_LEFT_Port, &GPIO_InitStruct);
 8000d24:	f006 fdfe 	bl	8007924 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8000d28:	2320      	movs	r3, #32
	HAL_GPIO_Init(JOY_RIGHT_Port, &GPIO_InitStruct);
 8000d2a:	a92f      	add	r1, sp, #188	; 0xbc
 8000d2c:	4817      	ldr	r0, [pc, #92]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d32:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_RIGHT_Port, &GPIO_InitStruct);
 8000d36:	f006 fdf5 	bl	8007924 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = JOY_UP_Pin;
 8000d3a:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(JOY_UP_Port, &GPIO_InitStruct);
 8000d3c:	a92f      	add	r1, sp, #188	; 0xbc
 8000d3e:	4813      	ldr	r0, [pc, #76]	; (8000d8c <main+0x590>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d44:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
	HAL_GPIO_Init(JOY_UP_Port, &GPIO_InitStruct);
 8000d48:	f006 fdec 	bl	8007924 <HAL_GPIO_Init>
  osKernelInitialize();
 8000d4c:	f009 fe4a 	bl	800a9e4 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d50:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <main+0x594>)
 8000d52:	4621      	mov	r1, r4
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <main+0x598>)
 8000d56:	f009 fe71 	bl	800aa3c <osThreadNew>
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <main+0x59c>)
 8000d5c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d5e:	f009 fe53 	bl	800aa08 <osKernelStart>
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <main+0x566>
 8000d64:	2400025c 	.word	0x2400025c
 8000d68:	24000278 	.word	0x24000278
 8000d6c:	50001000 	.word	0x50001000
 8000d70:	2400019c 	.word	0x2400019c
 8000d74:	08006279 	.word	0x08006279
 8000d78:	240001ac 	.word	0x240001ac
 8000d7c:	08001ac5 	.word	0x08001ac5
 8000d80:	08001afd 	.word	0x08001afd
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58022000 	.word	0x58022000
 8000d8c:	58022800 	.word	0x58022800
 8000d90:	08022604 	.word	0x08022604
 8000d94:	08001693 	.word	0x08001693
 8000d98:	240001cc 	.word	0x240001cc
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2214      	movs	r2, #20
 8000d9e:	2100      	movs	r1, #0
 8000da0:	a82f      	add	r0, sp, #188	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2500      	movs	r5, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f01f fb76 	bl	8020494 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000db6:	4879      	ldr	r0, [pc, #484]	; (8000f9c <main+0x7a0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000dba:	2608      	movs	r6, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dbc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000dc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc8:	9306      	str	r3, [sp, #24]
 8000dca:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000dd8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	9307      	str	r3, [sp, #28]
 8000de2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000df0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	9308      	str	r3, [sp, #32]
 8000dfa:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e10:	9309      	str	r3, [sp, #36]	; 0x24
 8000e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e24:	f003 0304 	and.w	r3, r3, #4
 8000e28:	930a      	str	r3, [sp, #40]	; 0x28
 8000e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e34:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e54:	f003 0308 	and.w	r3, r3, #8
 8000e58:	930c      	str	r3, [sp, #48]	; 0x30
 8000e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	930d      	str	r3, [sp, #52]	; 0x34
 8000e72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e78:	f043 0320 	orr.w	r3, r3, #32
 8000e7c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e84:	f003 0320 	and.w	r3, r3, #32
 8000e88:	930e      	str	r3, [sp, #56]	; 0x38
 8000e8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000e98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000ea6:	f006 fed1 	bl	8007c4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	483c      	ldr	r0, [pc, #240]	; (8000fa0 <main+0x7a4>)
 8000eb0:	f006 fecc 	bl	8007c4c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	a92f      	add	r1, sp, #188	; 0xbc
 8000eba:	4838      	ldr	r0, [pc, #224]	; (8000f9c <main+0x7a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebc:	e9cd 342f 	strd	r3, r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	e9cd 5731 	strd	r5, r7, [sp, #196]	; 0xc4
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f006 fd2e 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	a92f      	add	r1, sp, #188	; 0xbc
 8000ed0:	4834      	ldr	r0, [pc, #208]	; (8000fa4 <main+0x7a8>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ed2:	9533      	str	r5, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	e9cd 232f 	strd	r2, r3, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f006 fd22 	bl	8007924 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	a92f      	add	r1, sp, #188	; 0xbc
 8000ee2:	482f      	ldr	r0, [pc, #188]	; (8000fa0 <main+0x7a4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	e9cd 642f 	strd	r6, r4, [sp, #188]	; 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	e9cd 4731 	strd	r4, r7, [sp, #196]	; 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f006 fd1a 	bl	8007924 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000ef0:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <main+0x7ac>)
 8000ef2:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <main+0x7b0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ef4:	8085      	strh	r5, [r0, #4]
  hcrc.Instance = CRC;
 8000ef6:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ef8:	6204      	str	r4, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000efa:	e9c0 5505 	strd	r5, r5, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efe:	f005 ff9b 	bl	8006e38 <HAL_CRC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f47f ad1c 	bne.w	8000942 <main+0x146>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000f0a:	4929      	ldr	r1, [pc, #164]	; (8000fb0 <main+0x7b4>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f0c:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f0e:	4829      	ldr	r0, [pc, #164]	; (8000fb4 <main+0x7b8>)
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000f10:	680a      	ldr	r2, [r1, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	600a      	str	r2, [r1, #0]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f18:	a92f      	add	r1, sp, #188	; 0xbc
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <main+0x7bc>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f1c:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000f1e:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000f22:	2220      	movs	r2, #32
 8000f24:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000f28:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000f2a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000f2e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000f32:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 16;
 8000f36:	2310      	movs	r3, #16
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000f38:	e9cd 332f 	strd	r3, r3, [sp, #188]	; 0xbc
  SdramTiming.RowCycleDelay = 16;
 8000f3c:	e9cd 3331 	strd	r3, r3, [sp, #196]	; 0xc4
  SdramTiming.RPDelay = 16;
 8000f40:	e9cd 3333 	strd	r3, r3, [sp, #204]	; 0xcc
  SdramTiming.RCDDelay = 16;
 8000f44:	9335      	str	r3, [sp, #212]	; 0xd4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f46:	f009 fa71 	bl	800a42c <HAL_SDRAM_Init>
 8000f4a:	4680      	mov	r8, r0
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	f43f acfa 	beq.w	8000946 <main+0x14a>
 8000f52:	b672      	cpsid	i
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <main+0x758>
  HAL_Init();
 8000f56:	f005 fe67 	bl	8006c28 <HAL_Init>
  SystemClock_Config();
 8000f5a:	f7ff fbe3 	bl	8000724 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f5e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f62:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f68:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8000f6c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	9305      	str	r3, [sp, #20]
 8000f76:	9b05      	ldr	r3, [sp, #20]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f78:	f006 fe6e 	bl	8007c58 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f7c:	4621      	mov	r1, r4
 8000f7e:	4620      	mov	r0, r4
 8000f80:	f006 fe78 	bl	8007c74 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f84:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <main+0x7c0>)
 8000f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	0416      	lsls	r6, r2, #16
 8000f8e:	f53f af05 	bmi.w	8000d9c <main+0x5a0>
 8000f92:	3b01      	subs	r3, #1
 8000f94:	d1f9      	bne.n	8000f8a <main+0x78e>
 8000f96:	b672      	cpsid	i
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <main+0x79c>
 8000f9a:	bf00      	nop
 8000f9c:	58022400 	.word	0x58022400
 8000fa0:	58021800 	.word	0x58021800
 8000fa4:	58020000 	.word	0x58020000
 8000fa8:	240001d0 	.word	0x240001d0
 8000fac:	58024c00 	.word	0x58024c00
 8000fb0:	52004000 	.word	0x52004000
 8000fb4:	2400036c 	.word	0x2400036c
 8000fb8:	52004140 	.word	0x52004140
 8000fbc:	58024400 	.word	0x58024400

08000fc0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000fc0:	6802      	ldr	r2, [r0, #0]
 8000fc2:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d101      	bne.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000fc8:	f005 be5c 	b.w	8006c84 <HAL_IncTick>
}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40001000 	.word	0x40001000

08000fd4 <Error_Handler>:
 8000fd4:	b672      	cpsid	i
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <Error_Handler+0x2>

08000fd8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_MspInit+0x2c>)
{
 8000fda:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fdc:	210f      	movs	r1, #15
 8000fde:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000fe6:	f042 0202 	orr.w	r2, r2, #2
 8000fea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fee:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ffe:	f005 be7d 	b.w	8006cfc <HAL_NVIC_SetPriority>
 8001002:	bf00      	nop
 8001004:	58024400 	.word	0x58024400

08001008 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001008:	6802      	ldr	r2, [r0, #0]
{
 800100a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_CRC_MspInit+0x2c>)
 800100e:	429a      	cmp	r2, r3
 8001010:	d10d      	bne.n	800102e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001012:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001016:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800101a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800101e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800102e:	b002      	add	sp, #8
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	58024c00 	.word	0x58024c00

08001038 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_DMA2D_MspInit+0x40>)
{
 800103a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800103c:	6802      	ldr	r2, [r0, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d117      	bne.n	8001072 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001044:	2107      	movs	r1, #7
 8001046:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001048:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800104c:	f042 0210 	orr.w	r2, r2, #16
 8001050:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001054:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001056:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001062:	f005 fe4b 	bl	8006cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001066:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001068:	b003      	add	sp, #12
 800106a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800106e:	f005 be77 	b.w	8006d60 <HAL_NVIC_EnableIRQ>
}
 8001072:	b003      	add	sp, #12
 8001074:	f85d fb04 	ldr.w	pc, [sp], #4
 8001078:	52001000 	.word	0x52001000
 800107c:	58024400 	.word	0x58024400

08001080 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001080:	b510      	push	{r4, lr}
 8001082:	b0b8      	sub	sp, #224	; 0xe0
 8001084:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	2214      	movs	r2, #20
 8001088:	2100      	movs	r1, #0
 800108a:	a803      	add	r0, sp, #12
 800108c:	f01f fa02 	bl	8020494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001090:	22c0      	movs	r2, #192	; 0xc0
 8001092:	2100      	movs	r1, #0
 8001094:	a808      	add	r0, sp, #32
 8001096:	f01f f9fd 	bl	8020494 <memset>
  if(hdsi->Instance==DSI)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010a0:	d136      	bne.n	8001110 <HAL_DSI_MspInit+0x90>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80010a8:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	f008 fce9 	bl	8009a80 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	b108      	cbz	r0, 80010b4 <HAL_DSI_MspInit+0x34>
    {
      Error_Handler();
 80010b0:	f7ff ff90 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_DSI_MspInit+0x94>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010b8:	a903      	add	r1, sp, #12
 80010ba:	4817      	ldr	r0, [pc, #92]	; (8001118 <HAL_DSI_MspInit+0x98>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80010bc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80010c0:	f042 0210 	orr.w	r2, r2, #16
 80010c4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80010c8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80010cc:	f002 0210 	and.w	r2, r2, #16
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80010f4:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80010fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80010fc:	f006 fc12 	bl	8007924 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001100:	207b      	movs	r0, #123	; 0x7b
 8001102:	4622      	mov	r2, r4
 8001104:	2107      	movs	r1, #7
 8001106:	f005 fdf9 	bl	8006cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800110a:	207b      	movs	r0, #123	; 0x7b
 800110c:	f005 fe28 	bl	8006d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001110:	b038      	add	sp, #224	; 0xe0
 8001112:	bd10      	pop	{r4, pc}
 8001114:	58024400 	.word	0x58024400
 8001118:	58022400 	.word	0x58022400

0800111c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800111c:	b510      	push	{r4, lr}
 800111e:	b0b2      	sub	sp, #200	; 0xc8
 8001120:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001122:	22c0      	movs	r2, #192	; 0xc0
 8001124:	2100      	movs	r1, #0
 8001126:	a802      	add	r0, sp, #8
 8001128:	f01f f9b4 	bl	8020494 <memset>
  if(hltdc->Instance==LTDC)
 800112c:	6822      	ldr	r2, [r4, #0]
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_LTDC_MspInit+0x70>)
 8001130:	429a      	cmp	r2, r3
 8001132:	d129      	bne.n	8001188 <HAL_LTDC_MspInit+0x6c>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001134:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001138:	2105      	movs	r1, #5
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800113a:	2015      	movs	r0, #21
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800113c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 800113e:	23a1      	movs	r3, #161	; 0xa1
 8001140:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001144:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001146:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800114a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800114e:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	a802      	add	r0, sp, #8
 8001154:	f008 fc94 	bl	8009a80 <HAL_RCCEx_PeriphCLKConfig>
 8001158:	b108      	cbz	r0, 800115e <HAL_LTDC_MspInit+0x42>
    {
      Error_Handler();
 800115a:	f7ff ff3b 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_LTDC_MspInit+0x74>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001160:	2058      	movs	r0, #88	; 0x58
 8001162:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001164:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001168:	f042 0208 	orr.w	r2, r2, #8
 800116c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001170:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001172:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 800117e:	f005 fdbd 	bl	8006cfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001182:	2058      	movs	r0, #88	; 0x58
 8001184:	f005 fdec 	bl	8006d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001188:	b032      	add	sp, #200	; 0xc8
 800118a:	bd10      	pop	{r4, pc}
 800118c:	50001000 	.word	0x50001000
 8001190:	58024400 	.word	0x58024400

08001194 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b0bd      	sub	sp, #244	; 0xf4
 8001198:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	2214      	movs	r2, #20
 800119c:	2100      	movs	r1, #0
 800119e:	a807      	add	r0, sp, #28
 80011a0:	f01f f978 	bl	8020494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a4:	22c0      	movs	r2, #192	; 0xc0
 80011a6:	2100      	movs	r1, #0
 80011a8:	a80c      	add	r0, sp, #48	; 0x30
 80011aa:	f01f f973 	bl	8020494 <memset>
  if(hqspi->Instance==QUADSPI)
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	4b52      	ldr	r3, [pc, #328]	; (80012fc <HAL_QSPI_MspInit+0x168>)
 80011b2:	429a      	cmp	r2, r3
 80011b4:	f040 809f 	bne.w	80012f6 <HAL_QSPI_MspInit+0x162>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80011b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80011be:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	f008 fc5e 	bl	8009a80 <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	b108      	cbz	r0, 80011ca <HAL_QSPI_MspInit+0x36>
    {
      Error_Handler();
 80011c6:	f7ff ff05 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011ca:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_QSPI_MspInit+0x16c>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80011d0:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	a907      	add	r1, sp, #28
 80011d8:	484a      	ldr	r0, [pc, #296]	; (8001304 <HAL_QSPI_MspInit+0x170>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80011da:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80011dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80011e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80011e8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80011ec:	9201      	str	r2, [sp, #4]
 80011ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80011fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001200:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001204:	9202      	str	r2, [sp, #8]
 8001206:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800120c:	f042 0220 	orr.w	r2, r2, #32
 8001210:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001214:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001218:	f002 0220 	and.w	r2, r2, #32
 800121c:	9203      	str	r2, [sp, #12]
 800121e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001220:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001224:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001228:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800122c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001230:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001234:	9204      	str	r2, [sp, #16]
 8001236:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800123c:	f042 0202 	orr.w	r2, r2, #2
 8001240:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001244:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001248:	f002 0202 	and.w	r2, r2, #2
 800124c:	9205      	str	r2, [sp, #20]
 800124e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001254:	f042 0208 	orr.w	r2, r2, #8
 8001258:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	9306      	str	r3, [sp, #24]
 8001266:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800126c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001274:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001276:	f006 fb55 	bl	8007924 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800127a:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127c:	a907      	add	r1, sp, #28
 800127e:	4821      	ldr	r0, [pc, #132]	; (8001304 <HAL_QSPI_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001280:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128a:	f006 fb4b 	bl	8007924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128e:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001290:	a907      	add	r1, sp, #28
 8001292:	481d      	ldr	r0, [pc, #116]	; (8001308 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001294:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800129e:	f006 fb41 	bl	8007924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a6:	a907      	add	r1, sp, #28
 80012a8:	4817      	ldr	r0, [pc, #92]	; (8001308 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012aa:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b4:	f006 fb36 	bl	8007924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012b8:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ba:	a907      	add	r1, sp, #28
 80012bc:	4813      	ldr	r0, [pc, #76]	; (800130c <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012be:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c8:	f006 fb2c 	bl	8007924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012cc:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	a907      	add	r1, sp, #28
 80012d0:	480f      	ldr	r0, [pc, #60]	; (8001310 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012d2:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f006 fb22 	bl	8007924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	a907      	add	r1, sp, #28
 80012e6:	480b      	ldr	r0, [pc, #44]	; (8001314 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012e8:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f2:	f006 fb17 	bl	8007924 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80012f6:	b03d      	add	sp, #244	; 0xf4
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	52005000 	.word	0x52005000
 8001300:	58024400 	.word	0x58024400
 8001304:	58021800 	.word	0x58021800
 8001308:	58021400 	.word	0x58021400
 800130c:	58021c00 	.word	0x58021c00
 8001310:	58020400 	.word	0x58020400
 8001314:	58020c00 	.word	0x58020c00

08001318 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b0b7      	sub	sp, #220	; 0xdc
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800131c:	2100      	movs	r1, #0
 800131e:	2214      	movs	r2, #20
 8001320:	a801      	add	r0, sp, #4
 8001322:	f01f f8b7 	bl	8020494 <memset>
  if (FMC_Initialized) {
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_SDRAM_MspInit+0xf4>)
 8001328:	6819      	ldr	r1, [r3, #0]
 800132a:	2900      	cmp	r1, #0
 800132c:	d16b      	bne.n	8001406 <HAL_SDRAM_MspInit+0xee>
  FMC_Initialized = 1;
 800132e:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	a807      	add	r0, sp, #28
  FMC_Initialized = 1;
 8001332:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001334:	22bc      	movs	r2, #188	; 0xbc
 8001336:	f01f f8ad 	bl	8020494 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800133a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001340:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001342:	f008 fb9d 	bl	8009a80 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	b108      	cbz	r0, 800134c <HAL_SDRAM_MspInit+0x34>
      Error_Handler();
 8001348:	f7ff fe44 	bl	8000fd4 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_SDRAM_MspInit+0xf8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2600      	movs	r6, #0
 8001352:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001354:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001358:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800135a:	a901      	add	r1, sp, #4
 800135c:	482d      	ldr	r0, [pc, #180]	; (8001414 <HAL_SDRAM_MspInit+0xfc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800135e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001362:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001366:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800136c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	f240 63ff 	movw	r3, #1791	; 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001380:	f006 fad0 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001384:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	a901      	add	r1, sp, #4
 800138a:	4823      	ldr	r0, [pc, #140]	; (8001418 <HAL_SDRAM_MspInit+0x100>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f006 fac5 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800139a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800139e:	a901      	add	r1, sp, #4
 80013a0:	481e      	ldr	r0, [pc, #120]	; (800141c <HAL_SDRAM_MspInit+0x104>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ac:	f006 faba 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80013b0:	f248 1331 	movw	r3, #33073	; 0x8131
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b4:	a901      	add	r1, sp, #4
 80013b6:	481a      	ldr	r0, [pc, #104]	; (8001420 <HAL_SDRAM_MspInit+0x108>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c2:	f006 faaf 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80013c6:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	a901      	add	r1, sp, #4
 80013cc:	4815      	ldr	r0, [pc, #84]	; (8001424 <HAL_SDRAM_MspInit+0x10c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ce:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f006 faa4 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80013dc:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e0:	a901      	add	r1, sp, #4
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ee:	f006 fa99 	bl	8007924 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80013f2:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f4:	a901      	add	r1, sp, #4
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <HAL_SDRAM_MspInit+0x114>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001402:	f006 fa8f 	bl	8007924 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001406:	b037      	add	sp, #220	; 0xdc
 8001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140a:	bf00      	nop
 800140c:	240003a4 	.word	0x240003a4
 8001410:	58024400 	.word	0x58024400
 8001414:	58022000 	.word	0x58022000
 8001418:	58021000 	.word	0x58021000
 800141c:	58021c00 	.word	0x58021c00
 8001420:	58021800 	.word	0x58021800
 8001424:	58020c00 	.word	0x58020c00
 8001428:	58021400 	.word	0x58021400
 800142c:	58020800 	.word	0x58020800

08001430 <HAL_SDRAM_MspDeInit>:
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001430:	b508      	push	{r3, lr}
  if (FMC_DeInitialized) {
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_SDRAM_MspDeInit+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	bb62      	cbnz	r2, 8001492 <HAL_SDRAM_MspDeInit+0x62>
  FMC_DeInitialized = 1;
 8001438:	2201      	movs	r2, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 800143a:	f240 61ff 	movw	r1, #1791	; 0x6ff
 800143e:	4816      	ldr	r0, [pc, #88]	; (8001498 <HAL_SDRAM_MspDeInit+0x68>)
  FMC_DeInitialized = 1;
 8001440:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001442:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_SDRAM_MspDeInit+0x6c>)
 8001444:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
 8001448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800144c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001450:	f006 fb54 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001454:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001458:	4811      	ldr	r0, [pc, #68]	; (80014a0 <HAL_SDRAM_MspDeInit+0x70>)
 800145a:	f006 fb4f 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800145e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001462:	4810      	ldr	r0, [pc, #64]	; (80014a4 <HAL_SDRAM_MspDeInit+0x74>)
 8001464:	f006 fb4a 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001468:	f248 1131 	movw	r1, #33073	; 0x8131
 800146c:	480e      	ldr	r0, [pc, #56]	; (80014a8 <HAL_SDRAM_MspDeInit+0x78>)
 800146e:	f006 fb45 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001472:	f24c 7103 	movw	r1, #50947	; 0xc703
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <HAL_SDRAM_MspDeInit+0x7c>)
 8001478:	f006 fb40 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800147c:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <HAL_SDRAM_MspDeInit+0x80>)
 8001482:	f006 fb3b 	bl	8007afc <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 8001486:	210d      	movs	r1, #13
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <HAL_SDRAM_MspDeInit+0x84>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800148a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3);
 800148e:	f006 bb35 	b.w	8007afc <HAL_GPIO_DeInit>
}
 8001492:	bd08      	pop	{r3, pc}
 8001494:	240003a0 	.word	0x240003a0
 8001498:	58022000 	.word	0x58022000
 800149c:	58024400 	.word	0x58024400
 80014a0:	58021000 	.word	0x58021000
 80014a4:	58021c00 	.word	0x58021c00
 80014a8:	58021800 	.word	0x58021800
 80014ac:	58020c00 	.word	0x58020c00
 80014b0:	58021400 	.word	0x58021400
 80014b4:	58020800 	.word	0x58020800

080014b8 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b8:	280f      	cmp	r0, #15
{
 80014ba:	b510      	push	{r4, lr}
 80014bc:	4604      	mov	r4, r0
 80014be:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c0:	d902      	bls.n	80014c8 <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80014c4:	b00a      	add	sp, #40	; 0x28
 80014c6:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014c8:	4601      	mov	r1, r0
 80014ca:	2200      	movs	r2, #0
 80014cc:	2036      	movs	r0, #54	; 0x36
 80014ce:	f005 fc15 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014d2:	2036      	movs	r0, #54	; 0x36
 80014d4:	f005 fc44 	bl	8006d60 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014da:	4669      	mov	r1, sp
 80014dc:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80014de:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_InitTick+0x88>)
 80014e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80014e6:	f042 0210 	orr.w	r2, r2, #16
 80014ea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80014ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014fa:	f008 f9a7 	bl	800984c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014fe:	9b07      	ldr	r3, [sp, #28]
 8001500:	b9c3      	cbnz	r3, 8001534 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001502:	f008 f97f 	bl	8009804 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001506:	4c0f      	ldr	r4, [pc, #60]	; (8001544 <HAL_InitTick+0x8c>)
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_InitTick+0x90>)
 800150a:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800150c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001510:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <HAL_InitTick+0x94>)
 8001514:	fbb0 f0f3 	udiv	r0, r0, r3
 8001518:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800151a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800151c:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800151e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001520:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001524:	f009 f982 	bl	800a82c <HAL_TIM_Base_Init>
 8001528:	2800      	cmp	r0, #0
 800152a:	d1ca      	bne.n	80014c2 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 800152c:	4620      	mov	r0, r4
 800152e:	f009 f825 	bl	800a57c <HAL_TIM_Base_Start_IT>
 8001532:	e7c7      	b.n	80014c4 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001534:	f008 f966 	bl	8009804 <HAL_RCC_GetPCLK1Freq>
 8001538:	0040      	lsls	r0, r0, #1
 800153a:	e7e4      	b.n	8001506 <HAL_InitTick+0x4e>
 800153c:	24000058 	.word	0x24000058
 8001540:	58024400 	.word	0x58024400
 8001544:	240003a8 	.word	0x240003a8
 8001548:	40001000 	.word	0x40001000
 800154c:	000f4240 	.word	0x000f4240

08001550 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler>

08001552 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler>

08001554 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler>

08001556 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler>

08001558 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler>

0800155a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	4770      	bx	lr

0800155c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <TIM6_DAC_IRQHandler+0x8>)
 800155e:	f009 b84f 	b.w	800a600 <HAL_TIM_IRQHandler>
 8001562:	bf00      	nop
 8001564:	240003a8 	.word	0x240003a8

08001568 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001568:	4801      	ldr	r0, [pc, #4]	; (8001570 <LTDC_IRQHandler+0x8>)
 800156a:	f007 b840 	b.w	80085ee <HAL_LTDC_IRQHandler>
 800156e:	bf00      	nop
 8001570:	24000278 	.word	0x24000278

08001574 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001574:	4801      	ldr	r0, [pc, #4]	; (800157c <DMA2D_IRQHandler+0x8>)
 8001576:	f005 bcfc 	b.w	8006f72 <HAL_DMA2D_IRQHandler>
 800157a:	bf00      	nop
 800157c:	240001f4 	.word	0x240001f4

08001580 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001580:	4801      	ldr	r0, [pc, #4]	; (8001588 <DSI_IRQHandler+0x8>)
 8001582:	f005 beb8 	b.w	80072f6 <HAL_DSI_IRQHandler>
 8001586:	bf00      	nop
 8001588:	2400025c 	.word	0x2400025c

0800158c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800158c:	2001      	movs	r0, #1
 800158e:	4770      	bx	lr

08001590 <_kill>:

int _kill(int pid, int sig)
{
 8001590:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001592:	f01e fe31 	bl	80201f8 <__errno>
 8001596:	2316      	movs	r3, #22
 8001598:	6003      	str	r3, [r0, #0]
	return -1;
}
 800159a:	f04f 30ff 	mov.w	r0, #4294967295
 800159e:	bd08      	pop	{r3, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b508      	push	{r3, lr}
	errno = EINVAL;
 80015a2:	f01e fe29 	bl	80201f8 <__errno>
 80015a6:	2316      	movs	r3, #22
 80015a8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80015aa:	e7fe      	b.n	80015aa <_exit+0xa>

080015ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ac:	b570      	push	{r4, r5, r6, lr}
 80015ae:	460d      	mov	r5, r1
 80015b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	460e      	mov	r6, r1
 80015b4:	1b73      	subs	r3, r6, r5
 80015b6:	429c      	cmp	r4, r3
 80015b8:	dc01      	bgt.n	80015be <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80015ba:	4620      	mov	r0, r4
 80015bc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80015be:	f3af 8000 	nop.w
 80015c2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	e7f5      	b.n	80015b4 <_read+0x8>

080015c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c8:	b570      	push	{r4, r5, r6, lr}
 80015ca:	460d      	mov	r5, r1
 80015cc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	460e      	mov	r6, r1
 80015d0:	1b73      	subs	r3, r6, r5
 80015d2:	429c      	cmp	r4, r3
 80015d4:	dc01      	bgt.n	80015da <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80015d6:	4620      	mov	r0, r4
 80015d8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80015da:	f816 0b01 	ldrb.w	r0, [r6], #1
 80015de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	e7f5      	b.n	80015d0 <_write+0x8>

080015e4 <_close>:

int _close(int file)
{
	return -1;
}
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	4770      	bx	lr

080015ea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80015ee:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80015f0:	604b      	str	r3, [r1, #4]
}
 80015f2:	4770      	bx	lr

080015f4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80015f4:	2001      	movs	r0, #1
 80015f6:	4770      	bx	lr

080015f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80015f8:	2000      	movs	r0, #0
 80015fa:	4770      	bx	lr

080015fc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <_sbrk+0x30>)
{
 80015fe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001600:	6811      	ldr	r1, [r2, #0]
{
 8001602:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001604:	b909      	cbnz	r1, 800160a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001606:	490a      	ldr	r1, [pc, #40]	; (8001630 <_sbrk+0x34>)
 8001608:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800160a:	6810      	ldr	r0, [r2, #0]
 800160c:	4909      	ldr	r1, [pc, #36]	; (8001634 <_sbrk+0x38>)
 800160e:	4c0a      	ldr	r4, [pc, #40]	; (8001638 <_sbrk+0x3c>)
 8001610:	4403      	add	r3, r0
 8001612:	1b09      	subs	r1, r1, r4
 8001614:	428b      	cmp	r3, r1
 8001616:	d906      	bls.n	8001626 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001618:	f01e fdee 	bl	80201f8 <__errno>
 800161c:	230c      	movs	r3, #12
 800161e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001620:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001624:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001626:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001628:	e7fc      	b.n	8001624 <_sbrk+0x28>
 800162a:	bf00      	nop
 800162c:	240003f8 	.word	0x240003f8
 8001630:	2400f468 	.word	0x2400f468
 8001634:	24080000 	.word	0x24080000
 8001638:	00001000 	.word	0x00001000

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001640:	f005 fa82 	bl	8006b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f01e fddd 	bl	8020228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f8c5 	bl	80007fc <main>
  bx  lr
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001678:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800167c:	24000180 	.word	0x24000180
  ldr r2, =_sidata
 8001680:	0802ad7c 	.word	0x0802ad7c
  ldr r2, =_sbss
 8001684:	24000180 	.word	0x24000180
  ldr r4, =_ebss
 8001688:	2400f464 	.word	0x2400f464

0800168c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC3_IRQHandler>

0800168e <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800168e:	f000 be17 	b.w	80022c0 <touchgfx_init>

08001692 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8001692:	f000 be89 	b.w	80023a8 <touchgfx_taskEntry>

08001696 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001696:	6840      	ldr	r0, [r0, #4]
    }
 8001698:	4770      	bx	lr

0800169a <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 800169a:	6041      	str	r1, [r0, #4]
    }
 800169c:	4770      	bx	lr

0800169e <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 800169e:	1a51      	subs	r1, r2, r1
 80016a0:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80016a4:	fbb1 f0f3 	udiv	r0, r1, r3
 80016a8:	4770      	bx	lr
	...

080016ac <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80016ae:	68c0      	ldr	r0, [r0, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80016b4:	4358      	muls	r0, r3
 80016b6:	4770      	bx	lr
 80016b8:	240003fc 	.word	0x240003fc

080016bc <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80016bc:	4770      	bx	lr
	...

080016c0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80016c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	4a1e      	ldr	r2, [pc, #120]	; (800173c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80016c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
{
 80016c8:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ce:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016da:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80016e8:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80016ec:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ee:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f0:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80016f2:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80016f4:	2101      	movs	r1, #1
 80016f6:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80016f8:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fa:	2210      	movs	r2, #16
 80016fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001700:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001704:	fab2 f282 	clz	r2, r2
 8001708:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 800170a:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	b983      	cbnz	r3, 8001732 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001710:	f008 f856 	bl	80097c0 <HAL_RCC_GetHCLKFreq>
 8001714:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001716:	f007 fe8d 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 800171a:	fbb0 f0f4 	udiv	r0, r0, r4
 800171e:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001722:	f009 f883 	bl	800a82c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001728:	b003      	add	sp, #12
 800172a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 800172e:	f008 beeb 	b.w	800a508 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001732:	f008 f867 	bl	8009804 <HAL_RCC_GetPCLK1Freq>
 8001736:	0044      	lsls	r4, r0, #1
 8001738:	e7ed      	b.n	8001716 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 800173a:	bf00      	nop
 800173c:	58024400 	.word	0x58024400
 8001740:	240003fc 	.word	0x240003fc
 8001744:	08023d24 	.word	0x08023d24

08001748 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001748:	b510      	push	{r4, lr}
 800174a:	4604      	mov	r4, r0
 800174c:	2110      	movs	r1, #16
 800174e:	f01d fefa 	bl	801f546 <_ZdlPvj>
 8001752:	4620      	mov	r0, r4
 8001754:	bd10      	pop	{r4, pc}

08001756 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001756:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001758:	6803      	ldr	r3, [r0, #0]
{
 800175a:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 800175c:	691a      	ldr	r2, [r3, #16]
    if (active) //idle task sched out
 800175e:	b131      	cbz	r1, 800176e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001760:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001762:	4790      	blx	r2
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	1b5b      	subs	r3, r3, r5
 8001768:	4418      	add	r0, r3
 800176a:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 800176c:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 800176e:	4790      	blx	r2
 8001770:	60a0      	str	r0, [r4, #8]
}
 8001772:	e7fb      	b.n	800176c <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001774 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001774:	4770      	bx	lr

08001776 <_ZN20STM32TouchControllerD0Ev>:
 8001776:	b510      	push	{r4, lr}
 8001778:	4604      	mov	r4, r0
 800177a:	2104      	movs	r1, #4
 800177c:	f01d fee3 	bl	801f546 <_ZdlPvj>
 8001780:	4620      	mov	r0, r4
 8001782:	bd10      	pop	{r4, pc}

08001784 <_ZN20STM32TouchController4initEv>:
static bool bsp_ts_initialized = false;
TS_Init_t* hTS;
TS_State_t  TS_State = {0};

void STM32TouchController::init()
{
 8001784:	b508      	push	{r3, lr}
    /**
     * Initialize touch controller and driver
     *
     */
    hTS->Width = 800;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001788:	f44f 7248 	mov.w	r2, #800	; 0x320
    hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
    hTS->Accuracy = 0;
 800178c:	2000      	movs	r0, #0
    hTS->Width = 800;
 800178e:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001790:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001794:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001798:	230c      	movs	r3, #12
 800179a:	e9c1 3002 	strd	r3, r0, [r1, #8]

    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 800179e:	f005 f8df 	bl	8006960 <BSP_TS_Init>
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_ZN20STM32TouchController4initEv+0x40>)
 80017a4:	b910      	cbnz	r0, 80017ac <_ZN20STM32TouchController4initEv+0x28>
    {
        bsp_ts_initialized = true;
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
    }

    assert(bsp_ts_initialized);
}
 80017aa:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1fb      	bne.n	80017aa <_ZN20STM32TouchController4initEv+0x26>
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <_ZN20STM32TouchController4initEv+0x44>)
 80017b4:	212e      	movs	r1, #46	; 0x2e
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <_ZN20STM32TouchController4initEv+0x48>)
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <_ZN20STM32TouchController4initEv+0x4c>)
 80017ba:	f01e fceb 	bl	8020194 <__assert_func>
 80017be:	bf00      	nop
 80017c0:	24000458 	.word	0x24000458
 80017c4:	24000454 	.word	0x24000454
 80017c8:	08022650 	.word	0x08022650
 80017cc:	08022663 	.word	0x08022663
 80017d0:	0802268d 	.word	0x0802268d

080017d4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 80017d8:	460f      	mov	r7, r1
 80017da:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 80017dc:	781d      	ldrb	r5, [r3, #0]
 80017de:	b915      	cbnz	r5, 80017e6 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 80017e0:	2500      	movs	r5, #0
}
 80017e2:	4628      	mov	r0, r5
 80017e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 80017e6:	4c07      	ldr	r4, [pc, #28]	; (8001804 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 80017e8:	2000      	movs	r0, #0
 80017ea:	4621      	mov	r1, r4
 80017ec:	f005 f94c 	bl	8006a88 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f4      	beq.n	80017e0 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 80017f6:	6863      	ldr	r3, [r4, #4]
 80017f8:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 80017fa:	68a3      	ldr	r3, [r4, #8]
 80017fc:	6033      	str	r3, [r6, #0]
            return true;
 80017fe:	e7f0      	b.n	80017e2 <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001800:	24000454 	.word	0x24000454
 8001804:	24000448 	.word	0x24000448

08001808 <_ZN8touchgfx4GPIO4initEv>:
            {
                GPIO_InvertedLevels[id] = 1;
            }
        }
    }
}
 8001808:	4770      	bx	lr

0800180a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    }
}
 800180a:	4770      	bx	lr

0800180c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 800180c:	4770      	bx	lr

0800180e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 800180e:	4770      	bx	lr

08001810 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001810:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001812:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001816:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800181a:	4770      	bx	lr

0800181c <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 800181c:	2000      	movs	r0, #0
 800181e:	4770      	bx	lr

08001820 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001820:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001822:	3900      	subs	r1, #0
 8001824:	4b02      	ldr	r3, [pc, #8]	; (8001830 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001826:	bf18      	it	ne
 8001828:	2101      	movne	r1, #1
 800182a:	7019      	strb	r1, [r3, #0]
    }
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	2400f197 	.word	0x2400f197

08001834 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001834:	2000      	movs	r0, #0
 8001836:	4770      	bx	lr

08001838 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001838:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800183a:	b10b      	cbz	r3, 8001840 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800183c:	4608      	mov	r0, r1
 800183e:	4718      	bx	r3
        }
    }
 8001840:	4770      	bx	lr

08001842 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001842:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001846:	4770      	bx	lr

08001848 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001848:	6840      	ldr	r0, [r0, #4]
 800184a:	6803      	ldr	r3, [r0, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4718      	bx	r3

08001850 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001850:	4b01      	ldr	r3, [pc, #4]	; (8001858 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	2400045c 	.word	0x2400045c

0800185c <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800185c:	4770      	bx	lr

0800185e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800185e:	f000 be23 	b.w	80024a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001862 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001862:	f000 bdd1 	b.w	8002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001866 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001866:	f000 be39 	b.w	80024dc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800186a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 800186a:	f000 be2b 	b.w	80024c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800186e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800186e:	f000 bdd3 	b.w	8002418 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001872 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001872:	b510      	push	{r4, lr}
 8001874:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001876:	f00c fb61 	bl	800df3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	4620      	mov	r0, r4
 800187e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001886:	4718      	bx	r3

08001888 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001888:	f00b bce4 	b.w	800d254 <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800188c <_ZN11TouchGFXHALD0Ev>:
 800188c:	b510      	push	{r4, lr}
 800188e:	4604      	mov	r4, r0
 8001890:	217c      	movs	r1, #124	; 0x7c
 8001892:	f01d fe58 	bl	801f546 <_ZdlPvj>
 8001896:	4620      	mov	r0, r4
 8001898:	bd10      	pop	{r4, pc}
	...

0800189c <_ZN11TouchGFXHAL10beginFrameEv>:
    HAL::setFrameBufferStartAddresses(frameBuffer, doubleBuffer, animationStorage);
}

bool TouchGFXHAL::beginFrame()
{
    refreshRequested = false;
 800189c:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 80018a2:	f00b bd13 	b.w	800d2cc <_ZN8touchgfx3HAL10beginFrameEv>
 80018a6:	bf00      	nop
 80018a8:	24000010 	.word	0x24000010

080018ac <_ZN11TouchGFXHAL8endFrameEv>:
}

void TouchGFXHAL::endFrame()
{
 80018ac:	b510      	push	{r4, lr}
 80018ae:	4604      	mov	r4, r0
    HAL::endFrame();
 80018b0:	f00b fd18 	bl	800d2e4 <_ZN8touchgfx3HAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 80018b4:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80018b8:	b113      	cbz	r3, 80018c0 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 80018ba:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
    }
}
 80018c0:	bd10      	pop	{r4, pc}
 80018c2:	bf00      	nop
 80018c4:	24000010 	.word	0x24000010

080018c8 <_ZN11TouchGFXHAL10initializeEv>:
{
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4604      	mov	r4, r0
    GPIO::init();
 80018cc:	f7ff ff9c 	bl	8001808 <_ZN8touchgfx4GPIO4initEv>
    mcuInstr.init();
 80018d0:	4d07      	ldr	r5, [pc, #28]	; (80018f0 <_ZN11TouchGFXHAL10initializeEv+0x28>)
    TouchGFXGeneratedHAL::initialize();
 80018d2:	4620      	mov	r0, r4
 80018d4:	f000 fda1 	bl	800241a <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 80018d8:	2300      	movs	r3, #0
    mcuInstr.init();
 80018da:	4628      	mov	r0, r5
 80018dc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 80018e0:	f7ff feee 	bl	80016c0 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 80018e4:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 80018e6:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 80018e8:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
 80018ec:	bd38      	pop	{r3, r4, r5, pc}
 80018ee:	bf00      	nop
 80018f0:	24000464 	.word	0x24000464

080018f4 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 80018f4:	6803      	ldr	r3, [r0, #0]
{
 80018f6:	4604      	mov	r4, r0
 80018f8:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 80018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018fe:	4798      	blx	r3
    enableInterrupts();
 8001900:	6823      	ldr	r3, [r4, #0]
 8001902:	4620      	mov	r0, r4
 8001904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001906:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001908:	f000 faa6 	bl	8001e58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	4620      	mov	r0, r4
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001914:	2100      	movs	r1, #0
 8001916:	2329      	movs	r3, #41	; 0x29
 8001918:	2215      	movs	r2, #21
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 800191c:	9100      	str	r1, [sp, #0]
 800191e:	f005 fefa 	bl	8007716 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001922:	f000 fa99 	bl	8001e58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	4620      	mov	r0, r4
 800192a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192c:	4798      	blx	r3
    for (;;)
 800192e:	e7f8      	b.n	8001922 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001930:	2400025c 	.word	0x2400025c

08001934 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001934:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001938:	b11b      	cbz	r3, 8001942 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 800193a:	6840      	ldr	r0, [r0, #4]
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4718      	bx	r3
    }
 8001942:	4618      	mov	r0, r3
 8001944:	4770      	bx	lr
	...

08001948 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001948:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 800194c:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 800194e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001950:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 8001954:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001956:	428c      	cmp	r4, r1
 8001958:	d009      	beq.n	800196e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 800195a:	b93a      	cbnz	r2, 800196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800195c:	490a      	ldr	r1, [pc, #40]	; (8001988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800195e:	4a0b      	ldr	r2, [pc, #44]	; (800198c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001960:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001962:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001964:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001966:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001968:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 800196a:	701a      	strb	r2, [r3, #0]
        }
    }
 800196c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800196e:	2a00      	cmp	r2, #0
 8001970:	d0fc      	beq.n	800196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001974:	4904      	ldr	r1, [pc, #16]	; (8001988 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001976:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001978:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800197a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 800197c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800197e:	2200      	movs	r2, #0
 8001980:	e7f3      	b.n	800196a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001982:	bf00      	nop
 8001984:	2400f190 	.word	0x2400f190
 8001988:	2400f18e 	.word	0x2400f18e
 800198c:	2400f18c 	.word	0x2400f18c

08001990 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001990:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	428b      	cmp	r3, r1
 8001998:	d803      	bhi.n	80019a2 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	4293      	cmp	r3, r2
 80019a0:	d905      	bls.n	80019ae <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80019a4:	219e      	movs	r1, #158	; 0x9e
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80019a8:	4807      	ldr	r0, [pc, #28]	; (80019c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80019aa:	f01e fbf3 	bl	8020194 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80019b0:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 80019b4:	801a      	strh	r2, [r3, #0]
    }
 80019b6:	bd08      	pop	{r3, pc}
 80019b8:	2400f18c 	.word	0x2400f18c
 80019bc:	2400f18e 	.word	0x2400f18e
 80019c0:	080226f4 	.word	0x080226f4
 80019c4:	08022757 	.word	0x08022757
 80019c8:	0802279a 	.word	0x0802279a
 80019cc:	2400f192 	.word	0x2400f192
 80019d0:	2400f194 	.word	0x2400f194

080019d4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	460d      	mov	r5, r1
 80019d8:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 80019dc:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80019de:	b935      	cbnz	r5, 80019ee <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 80019e2:	f240 21bb 	movw	r1, #699	; 0x2bb
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 80019e8:	480a      	ldr	r0, [pc, #40]	; (8001a14 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 80019ea:	f01e fbd3 	bl	8020194 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80019ee:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80019f2:	3a00      	subs	r2, #0
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 80019f6:	bf18      	it	ne
 80019f8:	2201      	movne	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80019fc:	6803      	ldr	r3, [r0, #0]
}
 80019fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a06:	4718      	bx	r3
 8001a08:	2400045c 	.word	0x2400045c
 8001a0c:	080227ed 	.word	0x080227ed
 8001a10:	08022825 	.word	0x08022825
 8001a14:	0802279a 	.word	0x0802279a
 8001a18:	2400f196 	.word	0x2400f196

08001a1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lastRenderMethod(HARDWARE)
 8001a1c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8001a20:	60c3      	str	r3, [r0, #12]
 8001a22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a26:	2300      	movs	r3, #0
 8001a28:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8001a2e:	8503      	strh	r3, [r0, #40]	; 0x28
 8001a30:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001a34:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001a36:	8603      	strh	r3, [r0, #48]	; 0x30
 8001a38:	6603      	str	r3, [r0, #96]	; 0x60
 8001a3a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
 8001a3e:	6703      	str	r3, [r0, #112]	; 0x70
 8001a40:	e9c0 2319 	strd	r2, r3, [r0, #100]	; 0x64
 8001a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a48:	6742      	str	r2, [r0, #116]	; 0x74
 8001a4a:	2201      	movs	r2, #1
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a52:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8001a56:	f8bd 6014 	ldrh.w	r6, [sp, #20]
              inProgress(false)
 8001a5a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001a5e:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001a62:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
 8001a66:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001a6a:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
 8001a6e:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8001a72:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001a76:	42b5      	cmp	r5, r6
        instance = this;
 8001a78:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
 8001a7a:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
 8001a7e:	8015      	strh	r5, [r2, #0]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001a82:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001a84:	bf28      	it	cs
 8001a86:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001a8a:	bf38      	it	cc
 8001a8c:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001a8e:	8016      	strh	r6, [r2, #0]
 8001a90:	4a09      	ldr	r2, [pc, #36]	; (8001ab8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001a92:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001a96:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
 8001a9a:	7013      	strb	r3, [r2, #0]
                           height)
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001a9e:	6003      	str	r3, [r0, #0]
}
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
 8001aa2:	bf00      	nop
 8001aa4:	01000001 	.word	0x01000001
 8001aa8:	2400f198 	.word	0x2400f198
 8001aac:	2400f18c 	.word	0x2400f18c
 8001ab0:	2400f192 	.word	0x2400f192
 8001ab4:	2400f18e 	.word	0x2400f18e
 8001ab8:	2400f194 	.word	0x2400f194
 8001abc:	2400f190 	.word	0x2400f190
 8001ac0:	0802287c 	.word	0x0802287c

08001ac4 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001ac4:	2b01      	cmp	r3, #1
    {
 8001ac6:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001ac8:	d80e      	bhi.n	8001ae8 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	2215      	movs	r2, #21
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <DSI_IO_Write+0x34>)
 8001ad6:	f005 fe1e 	bl	8007716 <HAL_DSI_ShortWrite>
 8001ada:	b118      	cbz	r0, 8001ae4 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001adc:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001ae0:	b002      	add	sp, #8
 8001ae2:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	e7fb      	b.n	8001ae0 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001ae8:	e9cd 1200 	strd	r1, r2, [sp]
 8001aec:	4601      	mov	r1, r0
 8001aee:	2239      	movs	r2, #57	; 0x39
 8001af0:	4801      	ldr	r0, [pc, #4]	; (8001af8 <DSI_IO_Write+0x34>)
 8001af2:	f005 fe21 	bl	8007738 <HAL_DSI_LongWrite>
 8001af6:	e7f0      	b.n	8001ada <DSI_IO_Write+0x16>
 8001af8:	2400025c 	.word	0x2400025c

08001afc <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001afe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001b02:	2106      	movs	r1, #6
 8001b04:	9100      	str	r1, [sp, #0]
 8001b06:	4601      	mov	r1, r0
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <DSI_IO_Read+0x24>)
 8001b0a:	f005 fe76 	bl	80077fa <HAL_DSI_Read>
        {
            ret = BSP_ERROR_BUS_FAILURE;
 8001b0e:	2800      	cmp	r0, #0
        }

        return ret;
    }
 8001b10:	bf14      	ite	ne
 8001b12:	f06f 0007 	mvnne.w	r0, #7
 8001b16:	2000      	moveq	r0, #0
 8001b18:	b005      	add	sp, #20
 8001b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b1e:	bf00      	nop
 8001b20:	2400025c 	.word	0x2400025c

08001b24 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001b24:	b530      	push	{r4, r5, lr}
 8001b26:	b085      	sub	sp, #20
        uint16_t scanline = 533;

        ScanLineParams[0] = scanline >> 8;
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001b28:	4c0c      	ldr	r4, [pc, #48]	; (8001b5c <LCD_ReqTear+0x38>)
        ScanLineParams[0] = scanline >> 8;
 8001b2a:	2302      	movs	r3, #2
        ScanLineParams[1] = scanline & 0x00FF;
 8001b2c:	2515      	movs	r5, #21
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001b2e:	aa03      	add	r2, sp, #12
 8001b30:	2100      	movs	r1, #0
 8001b32:	4620      	mov	r0, r4
        ScanLineParams[0] = scanline >> 8;
 8001b34:	f88d 300c 	strb.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001b38:	9201      	str	r2, [sp, #4]
 8001b3a:	2244      	movs	r2, #68	; 0x44
        ScanLineParams[1] = scanline & 0x00FF;
 8001b3c:	f88d 500d 	strb.w	r5, [sp, #13]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	2239      	movs	r2, #57	; 0x39
 8001b44:	f005 fdf8 	bl	8007738 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2335      	movs	r3, #53	; 0x35
 8001b4c:	462a      	mov	r2, r5
 8001b4e:	4620      	mov	r0, r4
 8001b50:	9100      	str	r1, [sp, #0]
 8001b52:	f005 fde0 	bl	8007716 <HAL_DSI_ShortWrite>
    }
 8001b56:	b005      	add	sp, #20
 8001b58:	bd30      	pop	{r4, r5, pc}
 8001b5a:	bf00      	nop
 8001b5c:	2400025c 	.word	0x2400025c

08001b60 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001b60:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001b62:	f7ff ffdf 	bl	8001b24 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001b76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001b82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001b86:	f042 0202 	orr.w	r2, r2, #2
 8001b8a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001b92:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b94:	bd08      	pop	{r3, pc}
 8001b96:	bf00      	nop
 8001b98:	2400025c 	.word	0x2400025c
 8001b9c:	50001000 	.word	0x50001000

08001ba0 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001ba0:	4b07      	ldr	r3, [pc, #28]	; (8001bc0 <LCD_ReqEnable+0x20>)
    {
 8001ba2:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001ba4:	7819      	ldrb	r1, [r3, #0]
 8001ba6:	b939      	cbnz	r1, 8001bb8 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001ba8:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001bac:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001bae:	2329      	movs	r3, #41	; 0x29
 8001bb0:	2215      	movs	r2, #21
 8001bb2:	9100      	str	r1, [sp, #0]
 8001bb4:	f005 fdaf 	bl	8007716 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001bb8:	b003      	add	sp, #12
 8001bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bbe:	bf00      	nop
 8001bc0:	24000474 	.word	0x24000474
 8001bc4:	2400025c 	.word	0x2400025c

08001bc8 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001bca:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	232a      	movs	r3, #42	; 0x2a
 8001bd0:	2239      	movs	r2, #57	; 0x39
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <LCD_SetUpdateRegionLeft+0x20>)
 8001bda:	f005 fdad 	bl	8007738 <HAL_DSI_LongWrite>
    }
 8001bde:	b003      	add	sp, #12
 8001be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be4:	24000008 	.word	0x24000008
 8001be8:	2400025c 	.word	0x2400025c

08001bec <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001bee:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	232a      	movs	r3, #42	; 0x2a
 8001bf4:	2239      	movs	r2, #57	; 0x39
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <LCD_SetUpdateRegionRight+0x20>)
 8001bfe:	f005 fd9b 	bl	8007738 <HAL_DSI_LongWrite>
    }
 8001c02:	b003      	add	sp, #12
 8001c04:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c08:	2400000c 	.word	0x2400000c
 8001c0c:	2400025c 	.word	0x2400025c

08001c10 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001c10:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001c12:	4d14      	ldr	r5, [pc, #80]	; (8001c64 <HAL_DSI_TearingEffectCallback+0x54>)
 8001c14:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fdf7 	bl	800180a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001c1c:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001c1e:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8001c22:	3301      	adds	r3, #1
 8001c24:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001c28:	f000 f90a 	bl	8001e40 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001c2e:	682a      	ldr	r2, [r5, #0]
 8001c30:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001c38:	b173      	cbz	r3, 8001c58 <HAL_DSI_TearingEffectCallback+0x48>
 8001c3a:	4d0c      	ldr	r5, [pc, #48]	; (8001c6c <HAL_DSI_TearingEffectCallback+0x5c>)
 8001c3c:	782b      	ldrb	r3, [r5, #0]
 8001c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c42:	b94b      	cbnz	r3, 8001c58 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_DSI_TearingEffectCallback+0x60>)
 8001c46:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001c48:	f7ff ffbe 	bl	8001bc8 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f005 fd52 	bl	80076f6 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001c52:	2301      	movs	r3, #1
 8001c54:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001c58:	2000      	movs	r0, #0
    }
 8001c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001c5e:	f7ff bdd5 	b.w	800180c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001c62:	bf00      	nop
 8001c64:	2400f198 	.word	0x2400f198
 8001c68:	24000010 	.word	0x24000010
 8001c6c:	24000475 	.word	0x24000475
 8001c70:	24000460 	.word	0x24000460

08001c74 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001c78:	4e3f      	ldr	r6, [pc, #252]	; (8001d78 <HAL_DSI_EndOfRefreshCallback+0x104>)
    {
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001c7e:	7833      	ldrb	r3, [r6, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d076      	beq.n	8001d72 <HAL_DSI_EndOfRefreshCallback+0xfe>
        {
            if (updateRegion == 0)
 8001c84:	4d3d      	ldr	r5, [pc, #244]	; (8001d7c <HAL_DSI_EndOfRefreshCallback+0x108>)
 8001c86:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8001d8c <HAL_DSI_EndOfRefreshCallback+0x118>
 8001c8a:	f8d5 9000 	ldr.w	r9, [r5]
 8001c8e:	4f3c      	ldr	r7, [pc, #240]	; (8001d80 <HAL_DSI_EndOfRefreshCallback+0x10c>)
 8001c90:	f1b9 0f00 	cmp.w	r9, #0
 8001c94:	d139      	bne.n	8001d0a <HAL_DSI_EndOfRefreshCallback+0x96>
            {
                HAL_Delay(1);
 8001c96:	2001      	movs	r0, #1
 8001c98:	f005 f806 	bl	8006ca8 <HAL_Delay>

                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	f8cd 9000 	str.w	r9, [sp]
 8001ca2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001ca6:	f8d8 1000 	ldr.w	r1, [r8]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001caa:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001cae:	6838      	ldr	r0, [r7, #0]
 8001cb0:	f101 0684 	add.w	r6, r1, #132	; 0x84
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001cb4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001cb8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001cbc:	f002 0208 	and.w	r2, r2, #8
 8001cc0:	9200      	str	r2, [sp, #0]
 8001cc2:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + (HAL::FRAME_BUFFER_WIDTH / 2) * 3;
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <HAL_DSI_EndOfRefreshCallback+0x110>)
 8001cc6:	8812      	ldrh	r2, [r2, #0]
 8001cc8:	0852      	lsrs	r2, r2, #1
 8001cca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001cce:	4402      	add	r2, r0
 8001cd0:	62b2      	str	r2, [r6, #40]	; 0x28
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001cd2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	624a      	str	r2, [r1, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001cda:	f8cd 9004 	str.w	r9, [sp, #4]
 8001cde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001ce2:	f042 0208 	orr.w	r2, r2, #8
 8001ce6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001cea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 400-799
 8001cf6:	f7ff ff79 	bl	8001bec <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001cfa:	2301      	movs	r3, #1
                HAL_DSI_Refresh(hdsi);
 8001cfc:	4620      	mov	r0, r4
                updateRegion = 1;
 8001cfe:	602b      	str	r3, [r5, #0]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001d00:	b005      	add	sp, #20
 8001d02:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001d06:	f005 bcf6 	b.w	80076f6 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d0a:	6803      	ldr	r3, [r0, #0]
 8001d0c:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001d0e:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001d10:	9502      	str	r5, [sp, #8]
 8001d12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d22:	f002 0208 	and.w	r2, r2, #8
 8001d26:	9202      	str	r2, [sp, #8]
 8001d28:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001d2a:	f8d8 2000 	ldr.w	r2, [r8]
 8001d2e:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001d32:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001d34:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001d36:	f041 0101 	orr.w	r1, r1, #1
 8001d3a:	6251      	str	r1, [r2, #36]	; 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001d3c:	9503      	str	r5, [sp, #12]
 8001d3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001d4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001d56:	f7ff fd59 	bl	800180c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001d5a:	f7ff ff21 	bl	8001ba0 <LCD_ReqEnable>
        return instance;
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_DSI_EndOfRefreshCallback+0x114>)
                displayRefreshing = false;
 8001d60:	7035      	strb	r5, [r6, #0]
 8001d62:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001d64:	b128      	cbz	r0, 8001d72 <HAL_DSI_EndOfRefreshCallback+0xfe>
        allowDMATransfers();
 8001d66:	6803      	ldr	r3, [r0, #0]
 8001d68:	6a1b      	ldr	r3, [r3, #32]
    }
 8001d6a:	b005      	add	sp, #20
 8001d6c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d70:	4718      	bx	r3
 8001d72:	b005      	add	sp, #20
 8001d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d78:	24000475 	.word	0x24000475
 8001d7c:	24000460 	.word	0x24000460
 8001d80:	2400045c 	.word	0x2400045c
 8001d84:	2400f192 	.word	0x2400f192
 8001d88:	2400f198 	.word	0x2400f198
 8001d8c:	24000278 	.word	0x24000278

08001d90 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001d90:	4601      	mov	r1, r0
 8001d92:	b508      	push	{r3, lr}
        return instance;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <IdleTaskHook+0x14>)
 8001d96:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001d98:	b101      	cbz	r1, 8001d9c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001d9a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001d9c:	f00c f8e8 	bl	800df70 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001da0:	2001      	movs	r0, #1
 8001da2:	bd08      	pop	{r3, pc}
 8001da4:	2400f198 	.word	0x2400f198

08001da8 <_GLOBAL__sub_I_displayRefreshing>:
          cc_in(0)
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	4a02      	ldr	r2, [pc, #8]	; (8001dbc <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001db2:	601a      	str	r2, [r3, #0]

}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	24000464 	.word	0x24000464
 8001dbc:	08022630 	.word	0x08022630

08001dc0 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	2200      	movs	r2, #0
{
 8001dc4:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	f008 fe81 	bl	800aace <osSemaphoreNew>
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001dce:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001dd0:	b928      	cbnz	r0, 8001dde <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001dd4:	2128      	movs	r1, #40	; 0x28
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dd8:	480a      	ldr	r0, [pc, #40]	; (8001e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001dda:	f01e f9db 	bl	8020194 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2104      	movs	r1, #4
 8001de2:	2001      	movs	r0, #1
 8001de4:	f008 ff10 	bl	800ac08 <osMessageQueueNew>
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001dea:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001dec:	b918      	cbnz	r0, 8001df6 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001df4:	e7f0      	b.n	8001dd8 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001df6:	bd08      	pop	{r3, pc}
 8001df8:	2400047c 	.word	0x2400047c
 8001dfc:	0802294c 	.word	0x0802294c
 8001e00:	08022995 	.word	0x08022995
 8001e04:	080229c4 	.word	0x080229c4
 8001e08:	24000478 	.word	0x24000478
 8001e0c:	08022a13 	.word	0x08022a13

08001e10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001e12:	f04f 31ff 	mov.w	r1, #4294967295
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	f008 bea3 	b.w	800ab62 <osSemaphoreAcquire>
 8001e1c:	2400047c 	.word	0x2400047c

08001e20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001e20:	4b01      	ldr	r3, [pc, #4]	; (8001e28 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	f008 bec8 	b.w	800abb8 <osSemaphoreRelease>
 8001e28:	2400047c 	.word	0x2400047c

08001e2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001e2c:	4b02      	ldr	r3, [pc, #8]	; (8001e38 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	f008 be96 	b.w	800ab62 <osSemaphoreAcquire>
 8001e36:	bf00      	nop
 8001e38:	2400047c 	.word	0x2400047c

08001e3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001e3c:	f7ff bff0 	b.w	8001e20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001e40 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001e40:	2300      	movs	r3, #0
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001e44:	4903      	ldr	r1, [pc, #12]	; (8001e54 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001e46:	461a      	mov	r2, r3
 8001e48:	6800      	ldr	r0, [r0, #0]
 8001e4a:	f008 bf18 	b.w	800ac7e <osMessageQueuePut>
 8001e4e:	bf00      	nop
 8001e50:	24000478 	.word	0x24000478
 8001e54:	24000014 	.word	0x24000014

08001e58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001e58:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	4c07      	ldr	r4, [pc, #28]	; (8001e7c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001e5e:	a901      	add	r1, sp, #4
 8001e60:	461a      	mov	r2, r3
 8001e62:	6820      	ldr	r0, [r4, #0]
 8001e64:	f008 ff3b 	bl	800acde <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	a901      	add	r1, sp, #4
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	f008 ff34 	bl	800acde <osMessageQueueGet>
}
 8001e76:	b002      	add	sp, #8
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	bf00      	nop
 8001e7c:	24000478 	.word	0x24000478

08001e80 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001e80:	6803      	ldr	r3, [r0, #0]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	4718      	bx	r3

08001e86 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001e86:	2001      	movs	r0, #1
 8001e88:	4770      	bx	lr

08001e8a <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001e8a:	6803      	ldr	r3, [r0, #0]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	4718      	bx	r3

08001e90 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001e90:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001e94:	4770      	bx	lr
	...

08001e98 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e9e:	6003      	str	r3, [r0, #0]
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <_ZN8STM32DMAD1Ev+0x1c>)
 8001ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001eaa:	f3bf 8f6f 	isb	sy
}
 8001eae:	4770      	bx	lr
 8001eb0:	08022bb4 	.word	0x08022bb4
 8001eb4:	e000e100 	.word	0xe000e100

08001eb8 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001eb8:	b510      	push	{r4, lr}
 8001eba:	4604      	mov	r4, r0
}
 8001ebc:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001ec0:	f7ff ffea 	bl	8001e98 <_ZN8STM32DMAD1Ev>
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f01d fb3e 	bl	801f546 <_ZdlPvj>
 8001eca:	4620      	mov	r0, r4
 8001ecc:	bd10      	pop	{r4, pc}
	...

08001ed0 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001ed2:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ed4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001ed8:	f042 0210 	orr.w	r2, r2, #16
 8001edc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001ee0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001ee4:	f002 0210 	and.w	r2, r2, #16
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001eec:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001eee:	f042 0210 	orr.w	r2, r2, #16
 8001ef2:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001ef4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ef6:	f022 0210 	bic.w	r2, r2, #16
 8001efa:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <_ZN8STM32DMA10initializeEv+0x44>)
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <_ZN8STM32DMA10initializeEv+0x48>)
 8001f00:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <_ZN8STM32DMA10initializeEv+0x4c>)
 8001f04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f08:	609a      	str	r2, [r3, #8]
}
 8001f0a:	b002      	add	sp, #8
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	58024400 	.word	0x58024400
 8001f14:	240001f4 	.word	0x240001f4
 8001f18:	08001f21 	.word	0x08001f21
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <DMA2D_XferCpltCallback>:
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <DMA2D_XferCpltCallback+0xc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001f26:	6803      	ldr	r3, [r0, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	4718      	bx	r3
 8001f2c:	2400f198 	.word	0x2400f198

08001f30 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <_ZN8STM32DMAC1Ev+0x30>)
 8001f36:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001f38:	2600      	movs	r6, #0
 8001f3a:	4625      	mov	r5, r4
 8001f3c:	2260      	movs	r2, #96	; 0x60
 8001f3e:	6060      	str	r0, [r4, #4]
 8001f40:	7226      	strb	r6, [r4, #8]
 8001f42:	7266      	strb	r6, [r4, #9]
 8001f44:	f845 3b20 	str.w	r3, [r5], #32
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f00c f977 	bl	800e23c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001f4e:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
        : color(0)
 8001f52:	60ee      	str	r6, [r5, #12]
 8001f54:	3524      	adds	r5, #36	; 0x24
 8001f56:	42ab      	cmp	r3, r5
 8001f58:	d1fb      	bne.n	8001f52 <_ZN8STM32DMAC1Ev+0x22>
}
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	bd70      	pop	{r4, r5, r6, pc}
 8001f5e:	bf00      	nop
 8001f60:	08022bb4 	.word	0x08022bb4

08001f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001f64:	b508      	push	{r3, lr}
    switch (format)
 8001f66:	290b      	cmp	r1, #11
 8001f68:	d80b      	bhi.n	8001f82 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001f6a:	e8df f001 	tbb	[pc, r1]
 8001f6e:	0612      	.short	0x0612
 8001f70:	0a0a0a10 	.word	0x0a0a0a10
 8001f74:	0808080a 	.word	0x0808080a
 8001f78:	0808      	.short	0x0808
 8001f7a:	2001      	movs	r0, #1
}
 8001f7c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001f7e:	2005      	movs	r0, #5
        break;
 8001f80:	e7fc      	b.n	8001f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001f84:	2166      	movs	r1, #102	; 0x66
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001f8a:	f01e f903 	bl	8020194 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001f8e:	2000      	movs	r0, #0
 8001f90:	e7f4      	b.n	8001f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001f92:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001f94:	e7f2      	b.n	8001f7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001f96:	bf00      	nop
 8001f98:	08022a55 	.word	0x08022a55
 8001f9c:	08022a70 	.word	0x08022a70
 8001fa0:	08022aba 	.word	0x08022aba

08001fa4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001fa4:	b508      	push	{r3, lr}
    switch (format)
 8001fa6:	290a      	cmp	r1, #10
 8001fa8:	d809      	bhi.n	8001fbe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001faa:	e8df f001 	tbb	[pc, r1]
 8001fae:	0610      	.short	0x0610
 8001fb0:	0808080e 	.word	0x0808080e
 8001fb4:	06060608 	.word	0x06060608
 8001fb8:	06          	.byte	0x06
 8001fb9:	00          	.byte	0x00
 8001fba:	2001      	movs	r0, #1
}
 8001fbc:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001fc0:	2187      	movs	r1, #135	; 0x87
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001fc6:	f01e f8e5 	bl	8020194 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001fca:	2000      	movs	r0, #0
 8001fcc:	e7f6      	b.n	8001fbc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001fce:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001fd0:	e7f4      	b.n	8001fbc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001fd2:	bf00      	nop
 8001fd4:	08022a55 	.word	0x08022a55
 8001fd8:	08022b07 	.word	0x08022b07
 8001fdc:	08022aba 	.word	0x08022aba

08001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fe4:	7f4f      	ldrb	r7, [r1, #29]
{
 8001fe6:	460c      	mov	r4, r1
 8001fe8:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001fea:	4639      	mov	r1, r7
 8001fec:	f7ff ffba 	bl	8001f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff0:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ff4:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff6:	4648      	mov	r0, r9
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	f7ff ffb3 	bl	8001f64 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ffe:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002000:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002002:	4648      	mov	r0, r9
 8002004:	f7ff ffce 	bl	8001fa4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002008:	8aa1      	ldrh	r1, [r4, #20]
 800200a:	8b62      	ldrh	r2, [r4, #26]
 800200c:	4b42      	ldr	r3, [pc, #264]	; (8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 800200e:	1a52      	subs	r2, r2, r1
 8002010:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002012:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002014:	8b22      	ldrh	r2, [r4, #24]
 8002016:	1a52      	subs	r2, r2, r1
 8002018:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800201a:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800201c:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800201e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002022:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002026:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002028:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800202a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800202c:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800202e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8002032:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002034:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8002038:	d026      	beq.n	8002088 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 800203a:	d810      	bhi.n	800205e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 800203c:	2920      	cmp	r1, #32
 800203e:	ea45 0402 	orr.w	r4, r5, r2
 8002042:	d062      	beq.n	800210a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002044:	2940      	cmp	r1, #64	; 0x40
 8002046:	d060      	beq.n	800210a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8002048:	2904      	cmp	r1, #4
 800204a:	d05e      	beq.n	800210a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800204c:	432a      	orrs	r2, r5
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002050:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002052:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002056:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002058:	d05b      	beq.n	8002112 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800205a:	4a30      	ldr	r2, [pc, #192]	; (800211c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 800205c:	e040      	b.n	80020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 800205e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002062:	d007      	beq.n	8002074 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8002064:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002068:	d1f0      	bne.n	800204c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800206a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800206e:	f042 0209 	orr.w	r2, r2, #9
 8002072:	e003      	b.n	800207c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002074:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002078:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800207c:	61da      	str	r2, [r3, #28]
        return color;
 800207e:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002080:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002082:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002084:	6158      	str	r0, [r3, #20]
 8002086:	e02a      	b.n	80020de <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002088:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800208a:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800208c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002090:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002092:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002094:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002096:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800209a:	7822      	ldrb	r2, [r4, #0]
 800209c:	b142      	cbz	r2, 80020b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800209e:	2a01      	cmp	r2, #1
 80020a0:	d021      	beq.n	80020e6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 80020a4:	f240 1101 	movw	r1, #257	; 0x101
 80020a8:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80020aa:	481f      	ldr	r0, [pc, #124]	; (8002128 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80020ac:	f01e f872 	bl	8020194 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020b0:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 80020b2:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020b4:	8861      	ldrh	r1, [r4, #2]
 80020b6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020ba:	3901      	subs	r1, #1
 80020bc:	f022 0210 	bic.w	r2, r2, #16
 80020c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020c4:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	0692      	lsls	r2, r2, #26
 80020d4:	d4fc      	bmi.n	80020d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80020d6:	2210      	movs	r2, #16
 80020d8:	609a      	str	r2, [r3, #8]
            if (blend)
 80020da:	2800      	cmp	r0, #0
 80020dc:	d0bd      	beq.n	800205a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80020e0:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 80020e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020e6:	8862      	ldrh	r2, [r4, #2]
                if (blitOp.alpha == 255)
 80020e8:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020ec:	69d9      	ldr	r1, [r3, #28]
 80020ee:	f102 34ff 	add.w	r4, r2, #4294967295
                if (blitOp.alpha == 255)
 80020f2:	bf18      	it	ne
 80020f4:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80020f6:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 80020fa:	f022 0210 	bic.w	r2, r2, #16
 80020fe:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8002102:	f042 0210 	orr.w	r2, r2, #16
 8002106:	61da      	str	r2, [r3, #28]
                break;
 8002108:	e7dd      	b.n	80020c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800210a:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 800210e:	61dc      	str	r4, [r3, #28]
 8002110:	e7b7      	b.n	8002082 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8002112:	f240 2201 	movw	r2, #513	; 0x201
 8002116:	e7e3      	b.n	80020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002118:	52001000 	.word	0x52001000
 800211c:	00010201 	.word	0x00010201
 8002120:	08022b52 	.word	0x08022b52
 8002124:	08022b6c 	.word	0x08022b6c
 8002128:	08022aba 	.word	0x08022aba
 800212c:	00020201 	.word	0x00020201

08002130 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002134:	7f89      	ldrb	r1, [r1, #30]
 8002136:	f7ff ff35 	bl	8001fa4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800213c:	8aa5      	ldrh	r5, [r4, #20]
 800213e:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002140:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002142:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002146:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002148:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800214a:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800214c:	6921      	ldr	r1, [r4, #16]
 800214e:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002152:	6826      	ldr	r6, [r4, #0]
 8002154:	68e5      	ldr	r5, [r4, #12]
 8002156:	2e08      	cmp	r6, #8
 8002158:	d10d      	bne.n	8002176 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800215a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800215c:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800215e:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002160:	4a09      	ldr	r2, [pc, #36]	; (8002188 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002162:	7f20      	ldrb	r0, [r4, #28]
 8002164:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002168:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800216c:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800216e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002170:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002172:	601a      	str	r2, [r3, #0]
    }
}
 8002174:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002176:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002178:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800217a:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800217e:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002180:	e7f7      	b.n	8002172 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002182:	bf00      	nop
 8002184:	52001000 	.word	0x52001000
 8002188:	00010009 	.word	0x00010009
 800218c:	00020201 	.word	0x00020201
 8002190:	00030201 	.word	0x00030201

08002194 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002194:	2001      	movs	r0, #1
 8002196:	4770      	bx	lr

08002198 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002198:	200c      	movs	r0, #12
 800219a:	4770      	bx	lr

0800219c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 800219c:	230c      	movs	r3, #12
 800219e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021a2:	3008      	adds	r0, #8
 80021a4:	4770      	bx	lr

080021a6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80021a6:	230c      	movs	r3, #12
 80021a8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021ac:	3008      	adds	r0, #8
 80021ae:	4770      	bx	lr

080021b0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80021b0:	2001      	movs	r0, #1
 80021b2:	4770      	bx	lr

080021b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80021b4:	f244 20c0 	movw	r0, #17088	; 0x42c0
 80021b8:	4770      	bx	lr

080021ba <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021ba:	f244 23c0 	movw	r3, #17088	; 0x42c0
 80021be:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021c2:	3008      	adds	r0, #8
 80021c4:	4770      	bx	lr

080021c6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021c6:	f244 23c0 	movw	r3, #17088	; 0x42c0
 80021ca:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80021ce:	3008      	adds	r0, #8
 80021d0:	4770      	bx	lr

080021d2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80021d2:	2001      	movs	r0, #1
 80021d4:	4770      	bx	lr

080021d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80021d6:	2010      	movs	r0, #16
 80021d8:	4770      	bx	lr

080021da <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021da:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80021de:	3008      	adds	r0, #8
 80021e0:	4770      	bx	lr

080021e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80021e2:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80021e6:	3008      	adds	r0, #8
 80021e8:	4770      	bx	lr

080021ea <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 80021ea:	4608      	mov	r0, r1
 80021ec:	f000 bb16 	b.w	800281c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

080021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80021f2:	b510      	push	{r4, lr}
 80021f4:	4604      	mov	r4, r0
 80021f6:	6003      	str	r3, [r0, #0]
 80021f8:	f00a fd56 	bl	800cca8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80021fc:	4620      	mov	r0, r4
 80021fe:	bd10      	pop	{r4, pc}
 8002200:	08022c6c 	.word	0x08022c6c

08002204 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002204:	b510      	push	{r4, lr}
 8002206:	4604      	mov	r4, r0
 8002208:	f7ff fff2 	bl	80021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800220c:	2114      	movs	r1, #20
 800220e:	4620      	mov	r0, r4
 8002210:	f01d f999 	bl	801f546 <_ZdlPvj>
 8002214:	4620      	mov	r0, r4
 8002216:	bd10      	pop	{r4, pc}

08002218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800221a:	b510      	push	{r4, lr}
 800221c:	4604      	mov	r4, r0
 800221e:	6003      	str	r3, [r0, #0]
 8002220:	f00a fd42 	bl	800cca8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002224:	4620      	mov	r0, r4
 8002226:	bd10      	pop	{r4, pc}
 8002228:	08022c38 	.word	0x08022c38

0800222c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800222c:	b510      	push	{r4, lr}
 800222e:	4604      	mov	r4, r0
 8002230:	f7ff fff2 	bl	8002218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002234:	f244 21c8 	movw	r1, #17096	; 0x42c8
 8002238:	4620      	mov	r0, r4
 800223a:	f01d f984 	bl	801f546 <_ZdlPvj>
 800223e:	4620      	mov	r0, r4
 8002240:	bd10      	pop	{r4, pc}
	...

08002244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002246:	b510      	push	{r4, lr}
 8002248:	4604      	mov	r4, r0
 800224a:	6003      	str	r3, [r0, #0]
 800224c:	f00a fd2c 	bl	800cca8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002250:	4620      	mov	r0, r4
 8002252:	bd10      	pop	{r4, pc}
 8002254:	08022c04 	.word	0x08022c04

08002258 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002258:	b510      	push	{r4, lr}
 800225a:	4604      	mov	r4, r0
 800225c:	f7ff fff2 	bl	8002244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002260:	2118      	movs	r1, #24
 8002262:	4620      	mov	r0, r4
 8002264:	f01d f96f 	bl	801f546 <_ZdlPvj>
 8002268:	4620      	mov	r0, r4
 800226a:	bd10      	pop	{r4, pc}

0800226c <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <_ZN12FrontendHeapD1Ev+0x28>)
 800226e:	b510      	push	{r4, lr}
 8002270:	4604      	mov	r4, r0
 8002272:	6003      	str	r3, [r0, #0]
 8002274:	f500 4085 	add.w	r0, r0, #17024	; 0x4280
 8002278:	3074      	adds	r0, #116	; 0x74
 800227a:	f7ff ffb9 	bl	80021f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800227e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002282:	f7ff ffc9 	bl	8002218 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002286:	f104 0014 	add.w	r0, r4, #20
 800228a:	f7ff ffdb 	bl	8002244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800228e:	4620      	mov	r0, r4
 8002290:	bd10      	pop	{r4, pc}
 8002292:	bf00      	nop
 8002294:	08022ca0 	.word	0x08022ca0

08002298 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002298:	b508      	push	{r3, lr}
 800229a:	4802      	ldr	r0, [pc, #8]	; (80022a4 <__tcf_0+0xc>)
 800229c:	f7ff ffe6 	bl	800226c <_ZN12FrontendHeapD1Ev>
 80022a0:	bd08      	pop	{r3, pc}
 80022a2:	bf00      	nop
 80022a4:	24000484 	.word	0x24000484

080022a8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4604      	mov	r4, r0
 80022ac:	f7ff ffde 	bl	800226c <_ZN12FrontendHeapD1Ev>
 80022b0:	f244 4164 	movw	r1, #17508	; 0x4464
 80022b4:	4620      	mov	r0, r4
 80022b6:	f01d f946 	bl	801f546 <_ZdlPvj>
 80022ba:	4620      	mov	r0, r4
 80022bc:	bd10      	pop	{r4, pc}
	...

080022c0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80022c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80022c4:	f000 f934 	bl	8002530 <_ZN14BitmapDatabase11getInstanceEv>
 80022c8:	2400      	movs	r4, #0
 80022ca:	4605      	mov	r5, r0
 80022cc:	f000 f934 	bl	8002538 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80022d0:	4623      	mov	r3, r4
 80022d2:	4601      	mov	r1, r0
 80022d4:	4622      	mov	r2, r4
 80022d6:	4628      	mov	r0, r5
 80022d8:	9400      	str	r4, [sp, #0]
 80022da:	f013 f9b5 	bl	8015648 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <touchgfx_init+0xb8>)
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <touchgfx_init+0xbc>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80022e2:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80022e4:	4d26      	ldr	r5, [pc, #152]	; (8002380 <touchgfx_init+0xc0>)
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f000 fd38 	bl	8002d5c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80022ec:	4825      	ldr	r0, [pc, #148]	; (8002384 <touchgfx_init+0xc4>)
 80022ee:	f013 f847 	bl	8015380 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 80022f2:	782b      	ldrb	r3, [r5, #0]
 80022f4:	f3bf 8f5b 	dmb	ish
 80022f8:	07db      	lsls	r3, r3, #31
 80022fa:	d436      	bmi.n	800236a <touchgfx_init+0xaa>
 80022fc:	4628      	mov	r0, r5
 80022fe:	f01d f924 	bl	801f54a <__cxa_guard_acquire>
 8002302:	b390      	cbz	r0, 800236a <touchgfx_init+0xaa>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002304:	4c20      	ldr	r4, [pc, #128]	; (8002388 <touchgfx_init+0xc8>)
 8002306:	4f21      	ldr	r7, [pc, #132]	; (800238c <touchgfx_init+0xcc>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <touchgfx_init+0xd0>)
 800230a:	f104 0014 	add.w	r0, r4, #20
 800230e:	f107 0618 	add.w	r6, r7, #24
 8002312:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	6060      	str	r0, [r4, #4]
 800231a:	f8c4 8008 	str.w	r8, [r4, #8]
 800231e:	60e7      	str	r7, [r4, #12]
 8002320:	6126      	str	r6, [r4, #16]
 8002322:	f00a fcc3 	bl	800ccac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <touchgfx_init+0xd4>)
 8002328:	4640      	mov	r0, r8
 800232a:	6163      	str	r3, [r4, #20]
 800232c:	f00a fcbe 	bl	800ccac <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002330:	4b19      	ldr	r3, [pc, #100]	; (8002398 <touchgfx_init+0xd8>)
 8002332:	4638      	mov	r0, r7
 8002334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002336:	f00a fcb9 	bl	800ccac <_ZN8touchgfx17AbstractPartitionC1Ev>
 800233a:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 800233e:	4a17      	ldr	r2, [pc, #92]	; (800239c <touchgfx_init+0xdc>)
 8002340:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8002344:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
 8002348:	f001 fd50 	bl	8003dec <_ZN5ModelC1Ev>
 800234c:	4622      	mov	r2, r4
 800234e:	f107 0114 	add.w	r1, r7, #20
 8002352:	4630      	mov	r0, r6
 8002354:	f001 fd40 	bl	8003dd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8002358:	4630      	mov	r0, r6
 800235a:	f000 fa5f 	bl	800281c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 800235e:	4810      	ldr	r0, [pc, #64]	; (80023a0 <touchgfx_init+0xe0>)
 8002360:	f01d ff36 	bl	80201d0 <atexit>
 8002364:	4628      	mov	r0, r5
 8002366:	f01d f8fc 	bl	801f562 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <touchgfx_init+0xe4>)
}
 800236c:	b002      	add	sp, #8
 800236e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002372:	f7ff baa9 	b.w	80018c8 <_ZN11TouchGFXHAL10initializeEv>
 8002376:	bf00      	nop
 8002378:	2400f214 	.word	0x2400f214
 800237c:	24005708 	.word	0x24005708
 8002380:	24000480 	.word	0x24000480
 8002384:	24000018 	.word	0x24000018
 8002388:	24000484 	.word	0x24000484
 800238c:	24004778 	.word	0x24004778
 8002390:	08022ca0 	.word	0x08022ca0
 8002394:	08022c04 	.word	0x08022c04
 8002398:	08022c38 	.word	0x08022c38
 800239c:	08022c6c 	.word	0x08022c6c
 80023a0:	08002299 	.word	0x08002299
 80023a4:	2400568c 	.word	0x2400568c

080023a8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80023a8:	4801      	ldr	r0, [pc, #4]	; (80023b0 <touchgfx_taskEntry+0x8>)
 80023aa:	f7ff baa3 	b.w	80018f4 <_ZN11TouchGFXHAL9taskEntryEv>
 80023ae:	bf00      	nop
 80023b0:	2400568c 	.word	0x2400568c

080023b4 <_GLOBAL__sub_I_touchgfx_init>:
}
 80023b4:	b513      	push	{r0, r1, r4, lr}
static STM32DMA dma;
 80023b6:	490c      	ldr	r1, [pc, #48]	; (80023e8 <_GLOBAL__sub_I_touchgfx_init+0x34>)
{
public:

    STM32TouchController() {}
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <_GLOBAL__sub_I_touchgfx_init+0x38>)
 80023ba:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
 80023bc:	4608      	mov	r0, r1
 80023be:	6023      	str	r3, [r4, #0]
 80023c0:	f7ff fdb6 	bl	8001f30 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80023c6:	4610      	mov	r0, r2
 80023c8:	f015 fc0c 	bl	8017be4 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80023cc:	f44f 7348 	mov.w	r3, #800	; 0x320
 80023d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <_GLOBAL__sub_I_touchgfx_init+0x34>)
 80023d6:	4808      	ldr	r0, [pc, #32]	; (80023f8 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80023d8:	e9cd 3200 	strd	r3, r2, [sp]
 80023dc:	4623      	mov	r3, r4
 80023de:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80023e0:	f7ff fb1c 	bl	8001a1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80023e4:	b002      	add	sp, #8
 80023e6:	bd10      	pop	{r4, pc}
 80023e8:	240048ec 	.word	0x240048ec
 80023ec:	080226e4 	.word	0x080226e4
 80023f0:	240048e8 	.word	0x240048e8
 80023f4:	2400570c 	.word	0x2400570c
 80023f8:	2400568c 	.word	0x2400568c

080023fc <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80023fc:	4801      	ldr	r0, [pc, #4]	; (8002404 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80023fe:	f7ff bd4b 	b.w	8001e98 <_ZN8STM32DMAD1Ev>
 8002402:	bf00      	nop
 8002404:	240048ec 	.word	0x240048ec

08002408 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800240a:	2290      	movs	r2, #144	; 0x90
 800240c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8002418:	4770      	bx	lr

0800241a <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800241a:	b570      	push	{r4, r5, r6, lr}
 800241c:	4604      	mov	r4, r0
    HAL::initialize();
 800241e:	f00a ff6e 	bl	800d2fe <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002422:	6823      	ldr	r3, [r4, #0]
 8002424:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8002426:	f00f ff8d 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 800242a:	4601      	mov	r1, r0
 800242c:	4620      	mov	r0, r4
 800242e:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	4620      	mov	r0, r4
 8002434:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8002438:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800243c:	2300      	movs	r3, #0
 800243e:	46ac      	mov	ip, r5
 8002440:	461a      	mov	r2, r3
}
 8002442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 8002446:	4760      	bx	ip

08002448 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8002448:	f00b b865 	b.w	800d516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800244c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>:
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800244c:	4910      	ldr	r1, [pc, #64]	; (8002490 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x44>)
 800244e:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002456:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800245a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800245e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002462:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002466:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800246a:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800246c:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002470:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002472:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002476:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002478:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800247c:	d2f9      	bcs.n	8002472 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 800247e:	3b20      	subs	r3, #32
 8002480:	f113 0f20 	cmn.w	r3, #32
 8002484:	d1f2      	bne.n	800246c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x20>
 8002486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800248a:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	03db      	lsls	r3, r3, #15
 800249a:	d501      	bpl.n	80024a0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 800249c:	f7ff bfd6 	b.w	800244c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 80024a8:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 80024aa:	f00a fed9 	bl	800d260 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	03db      	lsls	r3, r3, #15
 80024b4:	d503      	bpl.n	80024be <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 80024b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80024ba:	f7ff bfc7 	b.w	800244c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
 80024be:	bd08      	pop	{r3, pc}
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80024c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80024ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80024d2:	f3bf 8f6f 	isb	sy
}
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100

080024dc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024dc:	4b02      	ldr	r3, [pc, #8]	; (80024e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80024de:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId CUSTOMSMALL = 2;   // verdana_12_4bpp
    static const touchgfx::FontId CUSTOMMEDIUM = 3;  // verdana_14_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80024ec:	4770      	bx	lr

080024ee <_ZN23ApplicationFontProviderD0Ev>:
 80024ee:	b510      	push	{r4, lr}
 80024f0:	4604      	mov	r4, r0
 80024f2:	2104      	movs	r1, #4
 80024f4:	f01d f827 	bl	801f546 <_ZdlPvj>
 80024f8:	4620      	mov	r0, r4
 80024fa:	bd10      	pop	{r4, pc}

080024fc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80024fc:	b508      	push	{r3, lr}
    switch (typography)
 80024fe:	2903      	cmp	r1, #3
 8002500:	d813      	bhi.n	800252a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002502:	e8df f001 	tbb	[pc, r1]
 8002506:	0602      	.short	0x0602
 8002508:	0e0a      	.short	0x0e0a
    {
    case Typography::CUSTOMDEFAULT:
        // verdana_16_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800250a:	f000 fc73 	bl	8002df4 <_ZN17TypedTextDatabase8getFontsEv>
 800250e:	6800      	ldr	r0, [r0, #0]
        // verdana_14_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002510:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002512:	f000 fc6f 	bl	8002df4 <_ZN17TypedTextDatabase8getFontsEv>
 8002516:	6840      	ldr	r0, [r0, #4]
 8002518:	e7fa      	b.n	8002510 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800251a:	f000 fc6b 	bl	8002df4 <_ZN17TypedTextDatabase8getFontsEv>
 800251e:	6880      	ldr	r0, [r0, #8]
 8002520:	e7f6      	b.n	8002510 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002522:	f000 fc67 	bl	8002df4 <_ZN17TypedTextDatabase8getFontsEv>
 8002526:	68c0      	ldr	r0, [r0, #12]
 8002528:	e7f2      	b.n	8002510 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800252a:	2000      	movs	r0, #0
 800252c:	e7f0      	b.n	8002510 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002530 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002530:	4800      	ldr	r0, [pc, #0]	; (8002534 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002532:	4770      	bx	lr
 8002534:	08022cc0 	.word	0x08022cc0

08002538 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002538:	2001      	movs	r0, #1
 800253a:	4770      	bx	lr

0800253c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800253c:	b513      	push	{r0, r1, r4, lr}
 800253e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002540:	b151      	cbz	r1, 8002558 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002542:	6803      	ldr	r3, [r0, #0]
 8002544:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8002546:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8002548:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800254c:	689c      	ldr	r4, [r3, #8]
 800254e:	f10d 0303 	add.w	r3, sp, #3
 8002552:	47a0      	blx	r4
        return glyph;
    }
 8002554:	b002      	add	sp, #8
 8002556:	bd10      	pop	{r4, pc}
            return 0;
 8002558:	4608      	mov	r0, r1
 800255a:	e7fb      	b.n	8002554 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

0800255c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 800255c:	8940      	ldrh	r0, [r0, #10]
 800255e:	4770      	bx	lr

08002560 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002560:	8980      	ldrh	r0, [r0, #12]
 8002562:	4770      	bx	lr

08002564 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002564:	8880      	ldrh	r0, [r0, #4]
 8002566:	4770      	bx	lr

08002568 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 8002568:	7983      	ldrb	r3, [r0, #6]
 800256a:	8880      	ldrh	r0, [r0, #4]
 800256c:	4418      	add	r0, r3
    }
 800256e:	b280      	uxth	r0, r0
 8002570:	4770      	bx	lr

08002572 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002572:	79c0      	ldrb	r0, [r0, #7]
    }
 8002574:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8002578:	4770      	bx	lr

0800257a <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800257a:	79c0      	ldrb	r0, [r0, #7]
    }
 800257c:	09c0      	lsrs	r0, r0, #7
 800257e:	4770      	bx	lr

08002580 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002580:	4770      	bx	lr

08002582 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002582:	b510      	push	{r4, lr}
 8002584:	4604      	mov	r4, r0
    }
 8002586:	2108      	movs	r1, #8
 8002588:	f01c ffdd 	bl	801f546 <_ZdlPvj>
 800258c:	4620      	mov	r0, r4
 800258e:	bd10      	pop	{r4, pc}

08002590 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002590:	4770      	bx	lr

08002592 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 8002592:	4770      	bx	lr

08002594 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002594:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 8002598:	6808      	ldr	r0, [r1, #0]
 800259a:	6849      	ldr	r1, [r1, #4]
 800259c:	c303      	stmia	r3!, {r0, r1}
    }
 800259e:	4770      	bx	lr

080025a0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80025a0:	4770      	bx	lr

080025a2 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80025a2:	4770      	bx	lr

080025a4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80025a4:	6041      	str	r1, [r0, #4]
    }
 80025a6:	4770      	bx	lr

080025a8 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80025a8:	4770      	bx	lr
	...

080025ac <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80025ae:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80025b2:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80025bc:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80025c0:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	0800266d 	.word	0x0800266d

080025cc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80025cc:	2301      	movs	r3, #1
 80025ce:	7203      	strb	r3, [r0, #8]
    }
 80025d0:	4770      	bx	lr

080025d2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80025d2:	4770      	bx	lr

080025d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80025d4:	4770      	bx	lr

080025d6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80025d6:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 80025d8:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80025da:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 80025dc:	68c2      	ldr	r2, [r0, #12]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	1054      	asrs	r4, r2, #1
 80025e2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80025e6:	07d2      	lsls	r2, r2, #31
 80025e8:	bf48      	it	mi
 80025ea:	590a      	ldrmi	r2, [r1, r4]
    }
 80025ec:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 80025f0:	bf48      	it	mi
 80025f2:	58d3      	ldrmi	r3, [r2, r3]
 80025f4:	4718      	bx	r3

080025f6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80025f6:	6843      	ldr	r3, [r0, #4]
 80025f8:	b12b      	cbz	r3, 8002606 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 80025fa:	6883      	ldr	r3, [r0, #8]
 80025fc:	b92b      	cbnz	r3, 800260a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80025fe:	68c0      	ldr	r0, [r0, #12]
 8002600:	f000 0001 	and.w	r0, r0, #1
 8002604:	4770      	bx	lr
 8002606:	4618      	mov	r0, r3
 8002608:	4770      	bx	lr
 800260a:	2001      	movs	r0, #1
    }
 800260c:	4770      	bx	lr

0800260e <_ZN8touchgfx12NoTransitionD0Ev>:
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	210c      	movs	r1, #12
 8002614:	f01c ff97 	bl	801f546 <_ZdlPvj>
 8002618:	4620      	mov	r0, r4
 800261a:	bd10      	pop	{r4, pc}

0800261c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800261c:	b510      	push	{r4, lr}
 800261e:	4604      	mov	r4, r0
 8002620:	2110      	movs	r1, #16
 8002622:	f01c ff90 	bl	801f546 <_ZdlPvj>
 8002626:	4620      	mov	r0, r4
 8002628:	bd10      	pop	{r4, pc}

0800262a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800262a:	b510      	push	{r4, lr}
 800262c:	4604      	mov	r4, r0
 800262e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002632:	f01c ff88 	bl	801f546 <_ZdlPvj>
 8002636:	4620      	mov	r0, r4
 8002638:	bd10      	pop	{r4, pc}

0800263a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800263a:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 800263c:	f00f fe82 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002644:	f010 ba46 	b.w	8012ad4 <_ZN8touchgfx11Application10invalidateEv>

08002648 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002648:	b510      	push	{r4, lr}
 800264a:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800264c:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002650:	b158      	cbz	r0, 800266a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002652:	6803      	ldr	r3, [r0, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4798      	blx	r3
 8002658:	b138      	cbz	r0, 800266a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800265a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 800265e:	6803      	ldr	r3, [r0, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800266a:	bd10      	pop	{r4, pc}

0800266c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800266c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002670:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8002674:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002676:	68a8      	ldr	r0, [r5, #8]
 8002678:	6803      	ldr	r3, [r0, #0]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4798      	blx	r3
 800267e:	f244 23bf 	movw	r3, #17087	; 0x42bf
 8002682:	4298      	cmp	r0, r3
 8002684:	d805      	bhi.n	8002692 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x26>
 8002686:	4b45      	ldr	r3, [pc, #276]	; (800279c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002688:	21a3      	movs	r1, #163	; 0xa3
 800268a:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800268c:	4845      	ldr	r0, [pc, #276]	; (80027a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800268e:	f01d fd81 	bl	8020194 <__assert_func>
 8002692:	6868      	ldr	r0, [r5, #4]
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4798      	blx	r3
 800269a:	280f      	cmp	r0, #15
 800269c:	d803      	bhi.n	80026a6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x3a>
 800269e:	4b42      	ldr	r3, [pc, #264]	; (80027a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80026a0:	21a4      	movs	r1, #164	; 0xa4
 80026a2:	4a3f      	ldr	r2, [pc, #252]	; (80027a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80026a4:	e7f2      	b.n	800268c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80026a6:	68e8      	ldr	r0, [r5, #12]
 80026a8:	6803      	ldr	r3, [r0, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	4798      	blx	r3
 80026ae:	280b      	cmp	r0, #11
 80026b0:	d803      	bhi.n	80026ba <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4e>
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80026b4:	21a5      	movs	r1, #165	; 0xa5
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 80026b8:	e7e8      	b.n	800268c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 80026ba:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80027b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
    Application::getInstance()->clearAllTimerWidgets();
 80026be:	f00f fe41 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 80026c2:	f00f fe45 	bl	8012350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80026c6:	f8d9 0000 	ldr.w	r0, [r9]
 80026ca:	b110      	cbz	r0, 80026d2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80026cc:	6803      	ldr	r3, [r0, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4798      	blx	r3
    if (*currentTrans)
 80026d2:	f8d9 0000 	ldr.w	r0, [r9]
 80026d6:	b110      	cbz	r0, 80026de <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80026d8:	6803      	ldr	r3, [r0, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4798      	blx	r3
    if (*currentScreen)
 80026de:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80027b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x14c>
 80026e2:	f8d8 0000 	ldr.w	r0, [r8]
 80026e6:	b110      	cbz	r0, 80026ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80026e8:	6803      	ldr	r3, [r0, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	4798      	blx	r3
    if (*currentPresenter)
 80026ee:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 80026f2:	b110      	cbz	r0, 80026fa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80026f4:	6803      	ldr	r3, [r0, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4798      	blx	r3
    if (*currentScreen)
 80026fa:	f8d8 0000 	ldr.w	r0, [r8]
 80026fe:	b110      	cbz	r0, 8002706 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8002700:	6803      	ldr	r3, [r0, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4798      	blx	r3
    if (*currentPresenter)
 8002706:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800270a:	b110      	cbz	r0, 8002712 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002712:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002714:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002716:	f04f 0b00 	mov.w	fp, #0
 800271a:	6803      	ldr	r3, [r0, #0]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	4798      	blx	r3
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>)
 8002722:	4604      	mov	r4, r0
 8002724:	f8c0 b004 	str.w	fp, [r0, #4]
 8002728:	6003      	str	r3, [r0, #0]
 800272a:	4659      	mov	r1, fp
 800272c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002730:	68a8      	ldr	r0, [r5, #8]
 8002732:	6803      	ldr	r3, [r0, #0]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	4798      	blx	r3
 8002738:	4606      	mov	r6, r0
 800273a:	f001 fc31 	bl	8003fa0 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800273e:	6868      	ldr	r0, [r5, #4]
 8002740:	4659      	mov	r1, fp
 8002742:	6803      	ldr	r3, [r0, #0]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	4798      	blx	r3
 8002748:	4605      	mov	r5, r0
 800274a:	4631      	mov	r1, r6
 800274c:	f001 fb60 	bl	8003e10 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002750:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002754:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8002758:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800275c:	b1e5      	cbz	r5, 8002798 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>
 800275e:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002760:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002764:	4630      	mov	r0, r6
 8002766:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002768:	f8c5 a008 	str.w	sl, [r5, #8]
 800276c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 800276e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002770:	4798      	blx	r3
    newPresenter->activate();
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	4628      	mov	r0, r5
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800277a:	4621      	mov	r1, r4
 800277c:	4630      	mov	r0, r6
 800277e:	f011 fa8f 	bl	8013ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002782:	6823      	ldr	r3, [r4, #0]
 8002784:	4620      	mov	r0, r4
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	4798      	blx	r3
    newTransition->invalidate();
 800278a:	6823      	ldr	r3, [r4, #0]
 800278c:	4620      	mov	r0, r4
 800278e:	695b      	ldr	r3, [r3, #20]
}
 8002790:	b001      	add	sp, #4
 8002792:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002796:	4718      	bx	r3
    model->bind(newPresenter);
 8002798:	462b      	mov	r3, r5
 800279a:	e7e1      	b.n	8002760 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf4>
 800279c:	08022ce4 	.word	0x08022ce4
 80027a0:	08022d72 	.word	0x08022d72
 80027a4:	08022e76 	.word	0x08022e76
 80027a8:	08022ecb 	.word	0x08022ecb
 80027ac:	08022f6e 	.word	0x08022f6e
 80027b0:	08023080 	.word	0x08023080
 80027b4:	2400f1f8 	.word	0x2400f1f8
 80027b8:	2400f1f4 	.word	0x2400f1f4

080027bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80027bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	4617      	mov	r7, r2
 80027c2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80027c4:	f00f fde0 	bl	8012388 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80027ca:	2500      	movs	r5, #0
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80027cc:	2101      	movs	r1, #1
        instance = this;
 80027ce:	601c      	str	r4, [r3, #0]
      model(m)
 80027d0:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80027d2:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80027d6:	4e0f      	ldr	r6, [pc, #60]	; (8002814 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80027d8:	6023      	str	r3, [r4, #0]
 80027da:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80027de:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80027e2:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80027e6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80027e8:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80027f0:	4628      	mov	r0, r5
 80027f2:	f000 fab3 	bl	8002d5c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80027f6:	6833      	ldr	r3, [r6, #0]
 80027f8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80027fc:	b10a      	cbz	r2, 8002802 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80027fe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002800:	b900      	cbnz	r0, 8002804 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002802:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002804:	f016 fadb 	bl	8018dbe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002808:	4620      	mov	r0, r4
 800280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800280c:	2400f204 	.word	0x2400f204
 8002810:	08023034 	.word	0x08023034
 8002814:	2400f198 	.word	0x2400f198
 8002818:	0802301c 	.word	0x0802301c

0800281c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800281e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002822:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002826:	2300      	movs	r3, #0
 8002828:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800282c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002830:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	0800266d 	.word	0x0800266d

0800283c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800283c:	6a00      	ldr	r0, [r0, #32]
 800283e:	4770      	bx	lr

08002840 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002840:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002842:	4770      	bx	lr

08002844 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002844:	4770      	bx	lr

08002846 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002846:	888b      	ldrh	r3, [r1, #4]
 8002848:	6980      	ldr	r0, [r0, #24]
 800284a:	0adb      	lsrs	r3, r3, #11
 800284c:	680a      	ldr	r2, [r1, #0]
 800284e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002852:	4410      	add	r0, r2
 8002854:	4770      	bx	lr

08002856 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002856:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002858:	b1c2      	cbz	r2, 800288c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800285a:	7b13      	ldrb	r3, [r2, #12]
 800285c:	b1b3      	cbz	r3, 800288c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800285e:	7b54      	ldrb	r4, [r2, #13]
 8002860:	7ad2      	ldrb	r2, [r2, #11]
 8002862:	0224      	lsls	r4, r4, #8
 8002864:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002868:	4314      	orrs	r4, r2
 800286a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800286c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800286e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002872:	8813      	ldrh	r3, [r2, #0]
 8002874:	428b      	cmp	r3, r1
 8002876:	d102      	bne.n	800287e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002878:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800287c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800287e:	d805      	bhi.n	800288c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002880:	3801      	subs	r0, #1
 8002882:	3204      	adds	r2, #4
 8002884:	b280      	uxth	r0, r0
 8002886:	2800      	cmp	r0, #0
 8002888:	d1f3      	bne.n	8002872 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800288a:	e7f7      	b.n	800287c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800288c:	2000      	movs	r0, #0
 800288e:	e7f5      	b.n	800287c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002890 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002890:	b510      	push	{r4, lr}
 8002892:	4604      	mov	r4, r0
 8002894:	2128      	movs	r1, #40	; 0x28
 8002896:	f01c fe56 	bl	801f546 <_ZdlPvj>
 800289a:	4620      	mov	r0, r4
 800289c:	bd10      	pop	{r4, pc}
	...

080028a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80028a0:	b530      	push	{r4, r5, lr}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80028a6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80028aa:	9506      	str	r5, [sp, #24]
 80028ac:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80028b0:	9505      	str	r5, [sp, #20]
 80028b2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80028b6:	9504      	str	r5, [sp, #16]
 80028b8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80028bc:	9503      	str	r5, [sp, #12]
 80028be:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80028c2:	9502      	str	r5, [sp, #8]
 80028c4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80028c8:	9501      	str	r5, [sp, #4]
 80028ca:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80028ce:	9500      	str	r5, [sp, #0]
 80028d0:	f010 fd74 	bl	80133bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80028d6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028dc:	61a3      	str	r3, [r4, #24]
 80028de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80028e0:	61e3      	str	r3, [r4, #28]
 80028e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80028e4:	6223      	str	r3, [r4, #32]
 80028e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80028e8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80028ea:	b009      	add	sp, #36	; 0x24
 80028ec:	bd30      	pop	{r4, r5, pc}
 80028ee:	bf00      	nop
 80028f0:	080230a4 	.word	0x080230a4

080028f4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80028f4:	2000      	movs	r0, #0
 80028f6:	4770      	bx	lr

080028f8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80028f8:	8081      	strh	r1, [r0, #4]
    }
 80028fa:	4770      	bx	lr

080028fc <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80028fc:	80c1      	strh	r1, [r0, #6]
    }
 80028fe:	4770      	bx	lr

08002900 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002900:	8101      	strh	r1, [r0, #8]
    }
 8002902:	4770      	bx	lr

08002904 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002904:	8141      	strh	r1, [r0, #10]
    }
 8002906:	4770      	bx	lr

08002908 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002908:	4770      	bx	lr

0800290a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 800290a:	4770      	bx	lr

0800290c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 800290c:	4770      	bx	lr

0800290e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 800290e:	4770      	bx	lr

08002910 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002910:	4770      	bx	lr

08002912 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002912:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002914:	88c4      	ldrh	r4, [r0, #6]
 8002916:	6803      	ldr	r3, [r0, #0]
 8002918:	1b12      	subs	r2, r2, r4
 800291a:	8884      	ldrh	r4, [r0, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	1b09      	subs	r1, r1, r4
 8002920:	b212      	sxth	r2, r2
    }
 8002922:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002926:	b209      	sxth	r1, r1
 8002928:	4718      	bx	r3

0800292a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800292a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800293a:	6010      	str	r0, [r2, #0]
    }
 800293c:	4770      	bx	lr

0800293e <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800293e:	4770      	bx	lr

08002940 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002940:	4770      	bx	lr

08002942 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002942:	4770      	bx	lr

08002944 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002944:	4770      	bx	lr

08002946 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 8002946:	4770      	bx	lr

08002948 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8002948:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800294c:	b11a      	cbz	r2, 8002956 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 800294e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002952:	b102      	cbz	r2, 8002956 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002954:	6018      	str	r0, [r3, #0]
        }
    }
 8002956:	4770      	bx	lr

08002958 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002958:	4770      	bx	lr

0800295a <_ZN15Screen1ViewBaseD0Ev>:
 800295a:	b510      	push	{r4, lr}
 800295c:	4604      	mov	r4, r0
 800295e:	f244 21b0 	movw	r1, #17072	; 0x42b0
 8002962:	f01c fdf0 	bl	801f546 <_ZdlPvj>
 8002966:	4620      	mov	r0, r4
 8002968:	bd10      	pop	{r4, pc}

0800296a <_ZN15Screen1ViewBase11setupScreenEv>:
    add(customGraph1);
}

void Screen1ViewBase::setupScreen()
{
    customGraph1.initialize();
 800296a:	3098      	adds	r0, #152	; 0x98
 800296c:	f002 bac6 	b.w	8004efc <_ZN11customGraph10initializeEv>

08002970 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002970:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002974:	b112      	cbz	r2, 800297c <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002976:	6803      	ldr	r3, [r0, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4718      	bx	r3
    }
 800297c:	4770      	bx	lr

0800297e <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 800297e:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002980:	b570      	push	{r4, r5, r6, lr}
 8002982:	4604      	mov	r4, r0
        setX(x);
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8002986:	4615      	mov	r5, r2
        setX(x);
 8002988:	4798      	blx	r3
        setY(y);
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8002992:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002996:	4718      	bx	r3

08002998 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8002998:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800299c:	4604      	mov	r4, r0
        : presenter(0)
 800299e:	2500      	movs	r5, #0
 80029a0:	f010 ffd2 	bl	8013948 <_ZN8touchgfx6ScreenC1Ev>
 80029a4:	4b38      	ldr	r3, [pc, #224]	; (8002a88 <_ZN15Screen1ViewBaseC1Ev+0xf0>)
 80029a6:	4626      	mov	r6, r4
 80029a8:	63e5      	str	r5, [r4, #60]	; 0x3c
          visible(true)
 80029aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ae:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 80029b2:	f846 3b40 	str.w	r3, [r6], #64
 80029b6:	f104 0898 	add.w	r8, r4, #152	; 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80029ba:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <_ZN15Screen1ViewBaseC1Ev+0xf4>)
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
 80029bc:	a903      	add	r1, sp, #12
 80029be:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
 80029c2:	4638      	mov	r0, r7
 80029c4:	f8a4 2090 	strh.w	r2, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
 80029c8:	4a31      	ldr	r2, [pc, #196]	; (8002a90 <_ZN15Screen1ViewBaseC1Ev+0xf8>)
 80029ca:	6625      	str	r5, [r4, #96]	; 0x60
 80029cc:	66e2      	str	r2, [r4, #108]	; 0x6c
        : color(col)
 80029ce:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
 80029d0:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
 80029d4:	23ff      	movs	r3, #255	; 0xff
 80029d6:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 80029da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029de:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029e2:	f8a4 3092 	strh.w	r3, [r4, #146]	; 0x92
 80029e6:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
 80029ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 80029ee:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
 80029f2:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
 80029f6:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
 80029fa:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
 80029fe:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
 8002a02:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        Image::setBitmap(bmp);
 8002a06:	f00d fedc 	bl	80107c2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f001 ff3a 	bl	8004884 <_ZN11customGraphC1Ev>
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8002a10:	f504 501a 	add.w	r0, r4, #9856	; 0x2680
 8002a14:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
 8002a18:	3010      	adds	r0, #16
 8002a1a:	f00d ff4f 	bl	80108bc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
        setXY(x, y);
 8002a1e:	462a      	mov	r2, r5
 8002a20:	4629      	mov	r1, r5
 8002a22:	4630      	mov	r0, r6
 8002a24:	f7ff ffab 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002a28:	4630      	mov	r0, r6
 8002a2a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002a2e:	f7ff ff67 	bl	8002900 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002a32:	4630      	mov	r0, r6
 8002a34:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002a38:	f7ff ff64 	bl	8002904 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8002a3c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    image1.setXY(0, 0);
 8002a40:	462a      	mov	r2, r5
 8002a42:	4629      	mov	r1, r5
 8002a44:	66a3      	str	r3, [r4, #104]	; 0x68
 8002a46:	4638      	mov	r0, r7
 8002a48:	f7ff ff99 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_PORTRAIT_TEXTURE_480X800PX_ID));
 8002a4c:	a903      	add	r1, sp, #12
 8002a4e:	4638      	mov	r0, r7
 8002a50:	f8ad 500c 	strh.w	r5, [sp, #12]
 8002a54:	f00d feb5 	bl	80107c2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    customGraph1.setXY(85, 300);
 8002a58:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5c:	4640      	mov	r0, r8
 8002a5e:	2155      	movs	r1, #85	; 0x55
 8002a60:	f7ff ff8d 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002a64:	1d20      	adds	r0, r4, #4
 8002a66:	4631      	mov	r1, r6
 8002a68:	9001      	str	r0, [sp, #4]
 8002a6a:	f00a f9a1 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002a6e:	4639      	mov	r1, r7
 8002a70:	9801      	ldr	r0, [sp, #4]
 8002a72:	f00a f99d 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002a76:	9801      	ldr	r0, [sp, #4]
 8002a78:	4641      	mov	r1, r8
 8002a7a:	f00a f999 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002a7e:	4620      	mov	r0, r4
 8002a80:	b004      	add	sp, #16
 8002a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a86:	bf00      	nop
 8002a88:	080230fc 	.word	0x080230fc
 8002a8c:	08024fcc 	.word	0x08024fcc
 8002a90:	08025064 	.word	0x08025064

08002a94 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 95, 12, 3, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002a94:	4770      	bx	lr
	...

08002a98 <_Z23getFont_verdana_12_4bppv>:
{
 8002a98:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 95, 12, 3, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002a9a:	4d16      	ldr	r5, [pc, #88]	; (8002af4 <_Z23getFont_verdana_12_4bppv+0x5c>)
{
 8002a9c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 95, 12, 3, 4, 1, 1, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 58, 0, 0, 0);
 8002a9e:	782c      	ldrb	r4, [r5, #0]
 8002aa0:	f3bf 8f5b 	dmb	ish
 8002aa4:	f014 0401 	ands.w	r4, r4, #1
 8002aa8:	d120      	bne.n	8002aec <_Z23getFont_verdana_12_4bppv+0x54>
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f01c fd4d 	bl	801f54a <__cxa_guard_acquire>
 8002ab0:	b1e0      	cbz	r0, 8002aec <_Z23getFont_verdana_12_4bppv+0x54>
 8002ab2:	233a      	movs	r3, #58	; 0x3a
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	4910      	ldr	r1, [pc, #64]	; (8002af8 <_Z23getFont_verdana_12_4bppv+0x60>)
 8002ab8:	9307      	str	r3, [sp, #28]
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_Z23getFont_verdana_12_4bppv+0x64>)
 8002abc:	4810      	ldr	r0, [pc, #64]	; (8002b00 <_Z23getFont_verdana_12_4bppv+0x68>)
 8002abe:	9306      	str	r3, [sp, #24]
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_Z23getFont_verdana_12_4bppv+0x6c>)
 8002ac2:	9408      	str	r4, [sp, #32]
 8002ac4:	9305      	str	r3, [sp, #20]
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002acc:	9302      	str	r3, [sp, #8]
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002ad4:	e9cd 3200 	strd	r3, r2, [sp]
 8002ad8:	230c      	movs	r3, #12
 8002ada:	225f      	movs	r2, #95	; 0x5f
 8002adc:	f7ff fee0 	bl	80028a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <_Z23getFont_verdana_12_4bppv+0x70>)
 8002ae2:	f01d fb75 	bl	80201d0 <atexit>
 8002ae6:	4628      	mov	r0, r5
 8002ae8:	f01c fd3b 	bl	801f562 <__cxa_guard_release>
    return verdana_12_4bpp;
}
 8002aec:	4804      	ldr	r0, [pc, #16]	; (8002b00 <_Z23getFont_verdana_12_4bppv+0x68>)
 8002aee:	b00d      	add	sp, #52	; 0x34
 8002af0:	bd30      	pop	{r4, r5, pc}
 8002af2:	bf00      	nop
 8002af4:	24005764 	.word	0x24005764
 8002af8:	08029b54 	.word	0x08029b54
 8002afc:	0802ab00 	.word	0x0802ab00
 8002b00:	24005768 	.word	0x24005768
 8002b04:	0802ad44 	.word	0x0802ad44
 8002b08:	08002a95 	.word	0x08002a95

08002b0c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_14_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_14_4bpp();

touchgfx::GeneratedFont& getFont_verdana_14_4bpp()
{
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 95, 14, 3, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002b0c:	4770      	bx	lr
	...

08002b10 <_Z23getFont_verdana_14_4bppv>:
{
 8002b10:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 95, 14, 3, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002b12:	4d16      	ldr	r5, [pc, #88]	; (8002b6c <_Z23getFont_verdana_14_4bppv+0x5c>)
{
 8002b14:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_14_4bpp(glyphs_verdana_14_4bpp, 95, 14, 3, 4, 1, 1, 1, unicodes_verdana_14_4bpp, kerning_verdana_14_4bpp, 58, 0, 0, 0);
 8002b16:	782c      	ldrb	r4, [r5, #0]
 8002b18:	f3bf 8f5b 	dmb	ish
 8002b1c:	f014 0401 	ands.w	r4, r4, #1
 8002b20:	d120      	bne.n	8002b64 <_Z23getFont_verdana_14_4bppv+0x54>
 8002b22:	4628      	mov	r0, r5
 8002b24:	f01c fd11 	bl	801f54a <__cxa_guard_acquire>
 8002b28:	b1e0      	cbz	r0, 8002b64 <_Z23getFont_verdana_14_4bppv+0x54>
 8002b2a:	233a      	movs	r3, #58	; 0x3a
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	4910      	ldr	r1, [pc, #64]	; (8002b70 <_Z23getFont_verdana_14_4bppv+0x60>)
 8002b30:	9307      	str	r3, [sp, #28]
 8002b32:	4b10      	ldr	r3, [pc, #64]	; (8002b74 <_Z23getFont_verdana_14_4bppv+0x64>)
 8002b34:	4810      	ldr	r0, [pc, #64]	; (8002b78 <_Z23getFont_verdana_14_4bppv+0x68>)
 8002b36:	9306      	str	r3, [sp, #24]
 8002b38:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <_Z23getFont_verdana_14_4bppv+0x6c>)
 8002b3a:	9408      	str	r4, [sp, #32]
 8002b3c:	9305      	str	r3, [sp, #20]
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002b44:	9302      	str	r3, [sp, #8]
 8002b46:	2303      	movs	r3, #3
 8002b48:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002b4c:	e9cd 3200 	strd	r3, r2, [sp]
 8002b50:	230e      	movs	r3, #14
 8002b52:	225f      	movs	r2, #95	; 0x5f
 8002b54:	f7ff fea4 	bl	80028a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002b58:	4809      	ldr	r0, [pc, #36]	; (8002b80 <_Z23getFont_verdana_14_4bppv+0x70>)
 8002b5a:	f01d fb39 	bl	80201d0 <atexit>
 8002b5e:	4628      	mov	r0, r5
 8002b60:	f01c fcff 	bl	801f562 <__cxa_guard_release>
    return verdana_14_4bpp;
}
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <_Z23getFont_verdana_14_4bppv+0x68>)
 8002b66:	b00d      	add	sp, #52	; 0x34
 8002b68:	bd30      	pop	{r4, r5, pc}
 8002b6a:	bf00      	nop
 8002b6c:	24005790 	.word	0x24005790
 8002b70:	0802a088 	.word	0x0802a088
 8002b74:	0802ab84 	.word	0x0802ab84
 8002b78:	24005794 	.word	0x24005794
 8002b7c:	0802ad48 	.word	0x0802ad48
 8002b80:	08002b0d 	.word	0x08002b0d

08002b84 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_16_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_16_4bpp();

touchgfx::GeneratedFont& getFont_verdana_16_4bpp()
{
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 95, 16, 3, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002b84:	4770      	bx	lr
	...

08002b88 <_Z23getFont_verdana_16_4bppv>:
{
 8002b88:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 95, 16, 3, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002b8a:	4d16      	ldr	r5, [pc, #88]	; (8002be4 <_Z23getFont_verdana_16_4bppv+0x5c>)
{
 8002b8c:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_16_4bpp(glyphs_verdana_16_4bpp, 95, 16, 3, 4, 1, 1, 1, unicodes_verdana_16_4bpp, kerning_verdana_16_4bpp, 58, 0, 0, 0);
 8002b8e:	782c      	ldrb	r4, [r5, #0]
 8002b90:	f3bf 8f5b 	dmb	ish
 8002b94:	f014 0401 	ands.w	r4, r4, #1
 8002b98:	d120      	bne.n	8002bdc <_Z23getFont_verdana_16_4bppv+0x54>
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f01c fcd5 	bl	801f54a <__cxa_guard_acquire>
 8002ba0:	b1e0      	cbz	r0, 8002bdc <_Z23getFont_verdana_16_4bppv+0x54>
 8002ba2:	233a      	movs	r3, #58	; 0x3a
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4910      	ldr	r1, [pc, #64]	; (8002be8 <_Z23getFont_verdana_16_4bppv+0x60>)
 8002ba8:	9307      	str	r3, [sp, #28]
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <_Z23getFont_verdana_16_4bppv+0x64>)
 8002bac:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <_Z23getFont_verdana_16_4bppv+0x68>)
 8002bae:	9306      	str	r3, [sp, #24]
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_Z23getFont_verdana_16_4bppv+0x6c>)
 8002bb2:	9408      	str	r4, [sp, #32]
 8002bb4:	9305      	str	r3, [sp, #20]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002bbc:	9302      	str	r3, [sp, #8]
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002bc4:	e9cd 3200 	strd	r3, r2, [sp]
 8002bc8:	2310      	movs	r3, #16
 8002bca:	225f      	movs	r2, #95	; 0x5f
 8002bcc:	f7ff fe68 	bl	80028a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002bd0:	4809      	ldr	r0, [pc, #36]	; (8002bf8 <_Z23getFont_verdana_16_4bppv+0x70>)
 8002bd2:	f01d fafd 	bl	80201d0 <atexit>
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f01c fcc3 	bl	801f562 <__cxa_guard_release>
    return verdana_16_4bpp;
}
 8002bdc:	4804      	ldr	r0, [pc, #16]	; (8002bf0 <_Z23getFont_verdana_16_4bppv+0x68>)
 8002bde:	b00d      	add	sp, #52	; 0x34
 8002be0:	bd30      	pop	{r4, r5, pc}
 8002be2:	bf00      	nop
 8002be4:	240057bc 	.word	0x240057bc
 8002be8:	0802a5bc 	.word	0x0802a5bc
 8002bec:	0802ac34 	.word	0x0802ac34
 8002bf0:	240057c0 	.word	0x240057c0
 8002bf4:	0802ad4c 	.word	0x0802ad4c
 8002bf8:	08002b85 	.word	0x08002b85

08002bfc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002bfc:	4770      	bx	lr
	...

08002c00 <_Z23getFont_verdana_40_4bppv>:
{
 8002c00:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002c02:	4d15      	ldr	r5, [pc, #84]	; (8002c58 <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8002c04:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002c06:	782c      	ldrb	r4, [r5, #0]
 8002c08:	f3bf 8f5b 	dmb	ish
 8002c0c:	f014 0401 	ands.w	r4, r4, #1
 8002c10:	d11e      	bne.n	8002c50 <_Z23getFont_verdana_40_4bppv+0x50>
 8002c12:	4628      	mov	r0, r5
 8002c14:	f01c fc99 	bl	801f54a <__cxa_guard_acquire>
 8002c18:	b1d0      	cbz	r0, 8002c50 <_Z23getFont_verdana_40_4bppv+0x50>
 8002c1a:	233f      	movs	r3, #63	; 0x3f
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	490f      	ldr	r1, [pc, #60]	; (8002c5c <_Z23getFont_verdana_40_4bppv+0x5c>)
 8002c20:	9307      	str	r3, [sp, #28]
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002c24:	480f      	ldr	r0, [pc, #60]	; (8002c64 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002c26:	9306      	str	r3, [sp, #24]
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <_Z23getFont_verdana_40_4bppv+0x68>)
 8002c2a:	9408      	str	r4, [sp, #32]
 8002c2c:	9403      	str	r4, [sp, #12]
 8002c2e:	9400      	str	r4, [sp, #0]
 8002c30:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002c34:	2304      	movs	r3, #4
 8002c36:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002c3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002c3e:	2328      	movs	r3, #40	; 0x28
 8002c40:	f7ff fe2e 	bl	80028a0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002c44:	4809      	ldr	r0, [pc, #36]	; (8002c6c <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002c46:	f01d fac3 	bl	80201d0 <atexit>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f01c fc89 	bl	801f562 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002c50:	4804      	ldr	r0, [pc, #16]	; (8002c64 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002c52:	b00d      	add	sp, #52	; 0x34
 8002c54:	bd30      	pop	{r4, r5, pc}
 8002c56:	bf00      	nop
 8002c58:	240057e8 	.word	0x240057e8
 8002c5c:	0802aaf0 	.word	0x0802aaf0
 8002c60:	0802ad40 	.word	0x0802ad40
 8002c64:	240057ec 	.word	0x240057ec
 8002c68:	0802ad50 	.word	0x0802ad50
 8002c6c:	08002bfd 	.word	0x08002bfd

08002c70 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002c70:	2000      	movs	r0, #0
 8002c72:	4770      	bx	lr

08002c74 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002c74:	2000      	movs	r0, #0
 8002c76:	4770      	bx	lr

08002c78 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002c78:	b40e      	push	{r1, r2, r3}
 8002c7a:	b503      	push	{r0, r1, lr}
 8002c7c:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002c7e:	2100      	movs	r1, #0
{
 8002c80:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002c84:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002c86:	f010 f9c9 	bl	801301c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002c8a:	b002      	add	sp, #8
 8002c8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c90:	b003      	add	sp, #12
 8002c92:	4770      	bx	lr

08002c94 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002c94:	b40c      	push	{r2, r3}
 8002c96:	b507      	push	{r0, r1, r2, lr}
 8002c98:	ab04      	add	r3, sp, #16
 8002c9a:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002c9e:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002ca0:	f010 f9bc 	bl	801301c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002ca4:	b003      	add	sp, #12
 8002ca6:	f85d eb04 	ldr.w	lr, [sp], #4
 8002caa:	b002      	add	sp, #8
 8002cac:	4770      	bx	lr
	...

08002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002cb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002cb2:	b510      	push	{r4, lr}
 8002cb4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002cb6:	b373      	cbz	r3, 8002d16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002cb8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002cba:	b92b      	cbnz	r3, 8002cc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002cbc:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002cbe:	21c0      	movs	r1, #192	; 0xc0
 8002cc0:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002cc2:	4819      	ldr	r0, [pc, #100]	; (8002d28 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002cc4:	f01d fa66 	bl	8020194 <__assert_func>
            return buffer[pos];
 8002cc8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002cca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002cce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002cd0:	b30b      	cbz	r3, 8002d16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002cd2:	f011 fd7f 	bl	80147d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002cd6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d803      	bhi.n	8002ce4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002cdc:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002cde:	21c5      	movs	r1, #197	; 0xc5
 8002ce0:	4a13      	ldr	r2, [pc, #76]	; (8002d30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002ce2:	e7ee      	b.n	8002cc2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002ce4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002ce6:	f640 103f 	movw	r0, #2367	; 0x93f
 8002cea:	1c53      	adds	r3, r2, #1
 8002cec:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002cee:	2b09      	cmp	r3, #9
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	bf88      	it	hi
 8002cf4:	f1a3 010a 	subhi.w	r1, r3, #10
 8002cf8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002cfc:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002cfe:	4281      	cmp	r1, r0
 8002d00:	d109      	bne.n	8002d16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002d02:	2b0a      	cmp	r3, #10
 8002d04:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002d08:	bf28      	it	cs
 8002d0a:	2300      	movcs	r3, #0
            return buffer[pos];
 8002d0c:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002d0e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002d12:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002d14:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002d16:	4620      	mov	r0, r4
}
 8002d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002d1c:	f011 bc3e 	b.w	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002d20:	08023128 	.word	0x08023128
 8002d24:	08023131 	.word	0x08023131
 8002d28:	080231dc 	.word	0x080231dc
 8002d2c:	08023234 	.word	0x08023234
 8002d30:	08023242 	.word	0x08023242

08002d34 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002d34:	f011 bbea 	b.w	801450c <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002d38 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002d38:	b510      	push	{r4, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	ac02      	add	r4, sp, #8
 8002d3e:	e884 0006 	stmia.w	r4, {r1, r2}
 8002d42:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002d44:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002d46:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002d48:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	9b08      	ldr	r3, [sp, #32]
 8002d52:	f00e fe80 	bl	8011a56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8002d56:	b006      	add	sp, #24
 8002d58:	bd10      	pop	{r4, pc}
	...

08002d5c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002d5c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002d5e:	bb18      	cbnz	r0, 8002da8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8002d62:	4813      	ldr	r0, [pc, #76]	; (8002db0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4913      	ldr	r1, [pc, #76]	; (8002db4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002d68:	b1b3      	cbz	r3, 8002d98 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002d6a:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002d6c:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002d6e:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002d70:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002d72:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	441a      	add	r2, r3
 8002d78:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002d80:	f000 f838 	bl	8002df4 <_ZN17TypedTextDatabase8getFontsEv>
 8002d84:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002d86:	f000 f833 	bl	8002df0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002d8c:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002d90:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002d94:	8018      	strh	r0, [r3, #0]
    }
}
 8002d96:	e007      	b.n	8002da8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002d9a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002d9e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002da2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8002da4:	2c00      	cmp	r4, #0
 8002da6:	d1e8      	bne.n	8002d7a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8002da8:	bd38      	pop	{r3, r4, r5, pc}
 8002daa:	bf00      	nop
 8002dac:	24005814 	.word	0x24005814
 8002db0:	24005818 	.word	0x24005818
 8002db4:	2400581c 	.word	0x2400581c
 8002db8:	24005820 	.word	0x24005820
 8002dbc:	2400f208 	.word	0x2400f208
 8002dc0:	2400f210 	.word	0x2400f210
 8002dc4:	2400f20c 	.word	0x2400f20c
 8002dc8:	90119420 	.word	0x90119420
 8002dcc:	90119400 	.word	0x90119400
 8002dd0:	90119434 	.word	0x90119434

08002dd4 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2400581c 	.word	0x2400581c
 8002dec:	24005818 	.word	0x24005818

08002df0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8002df0:	2008      	movs	r0, #8
 8002df2:	4770      	bx	lr

08002df4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002df4:	4800      	ldr	r0, [pc, #0]	; (8002df8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002df6:	4770      	bx	lr
 8002df8:	24005824 	.word	0x24005824

08002dfc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_14_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002dfc:	b510      	push	{r4, lr}
};
 8002dfe:	4c07      	ldr	r4, [pc, #28]	; (8002e1c <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_16_4bpp()),
 8002e00:	f7ff fec2 	bl	8002b88 <_Z23getFont_verdana_16_4bppv>
};
 8002e04:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002e06:	f7ff fefb 	bl	8002c00 <_Z23getFont_verdana_40_4bppv>
};
 8002e0a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_12_4bpp()),
 8002e0c:	f7ff fe44 	bl	8002a98 <_Z23getFont_verdana_12_4bppv>
};
 8002e10:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_14_4bpp())
 8002e12:	f7ff fe7d 	bl	8002b10 <_Z23getFont_verdana_14_4bppv>
};
 8002e16:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8002e18:	bd10      	pop	{r4, pc}
 8002e1a:	bf00      	nop
 8002e1c:	24005824 	.word	0x24005824

08002e20 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002e20:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002e22:	4770      	bx	lr

08002e24 <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
    {
        return xScale;
    }
 8002e24:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002e26:	4770      	bx	lr

08002e28 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
    {
        return yScale;
    }
 8002e28:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002e2a:	4770      	bx	lr

08002e2c <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002e2c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    }
 8002e30:	4770      	bx	lr

08002e32 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 8002e32:	b410      	push	{r4}
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002e34:	6803      	ldr	r3, [r0, #0]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 8002e36:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e3c:	4362      	muls	r2, r4
 8002e3e:	4361      	muls	r1, r4
    }
 8002e40:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 8002e44:	4718      	bx	r3

08002e46 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
     *
     * @return The product of the two numbers, rounded to nearest integer value.
     */
    FORCE_INLINE_FUNCTION static int float2scaled(float f, int scale)
    {
        const float fs = f * scale;
 8002e46:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002e4a:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8002e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
        const float fs = f * scale;
 8002e54:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002e58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	db17      	blt.n	8002e92 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4c>
        {
            return int(fs + 0.5f);
 8002e62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002e66:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002e6a:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002e6e:	ee17 1a10 	vmov	r1, s14
        const float fs = f * scale;
 8002e72:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002e76:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	db1c      	blt.n	8002eba <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x74>
            return int(fs + 0.5f);
 8002e80:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002e84:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002e88:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002e8c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 8002e90:	4718      	bx	r3
        }
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8002e92:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002e96:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002e9a:	ee17 2a10 	vmov	r2, s14
 8002e9e:	1e51      	subs	r1, r2, #1
 8002ea0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002ea4:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002ea8:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002eac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002eb0:	ee10 2a10 	vmov	r2, s0
 8002eb4:	440a      	add	r2, r1
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	e7db      	b.n	8002e72 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x2c>
 8002eba:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ec2:	ee17 2a90 	vmov	r2, s15
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002ecc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ed0:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002ed4:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002ed8:	ee10 ca90 	vmov	ip, s1
 8002edc:	4494      	add	ip, r2
 8002ede:	4662      	mov	r2, ip
 8002ee0:	e7d6      	b.n	8002e90 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x4a>

08002ee2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 8002ee2:	b410      	push	{r4}
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ee4:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002ee6:	6b04      	ldr	r4, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eec:	4362      	muls	r2, r4
    }
 8002eee:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 8002ef2:	4718      	bx	r3

08002ef4 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
        const float fs = f * scale;
 8002ef4:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002ef8:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
        const float fs = f * scale;
 8002f02:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 8002f06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	db08      	blt.n	8002f22 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2e>
            return int(fs + 0.5f);
 8002f10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f14:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002f18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f1c:	ee17 2a90 	vmov	r2, s15
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 8002f20:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8002f22:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f2a:	ee17 2a90 	vmov	r2, s15
 8002f2e:	3a01      	subs	r2, #1
 8002f30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f34:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002f38:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002f40:	ee10 ca10 	vmov	ip, s0
 8002f44:	4494      	add	ip, r2
 8002f46:	4662      	mov	r2, ip
 8002f48:	e7ea      	b.n	8002f20 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x2c>

08002f4a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 8002f4a:	b410      	push	{r4}
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002f4c:	6803      	ldr	r3, [r0, #0]
        return int2scaled(i, yScale);
 8002f4e:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002f50:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f54:	4362      	muls	r2, r4
 8002f56:	4361      	muls	r1, r4
    }
 8002f58:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 8002f5c:	4718      	bx	r3

08002f5e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
        const float fs = f * scale;
 8002f5e:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002f62:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8002f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002f68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
        const float fs = f * scale;
 8002f6c:	ee20 0a27 	vmul.f32	s0, s0, s15
        if (fs >= 0)
 8002f70:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	db17      	blt.n	8002faa <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4c>
            return int(fs + 0.5f);
 8002f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f7e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002f82:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002f86:	ee17 1a10 	vmov	r1, s14
        const float fs = f * scale;
 8002f8a:	ee60 0aa7 	vmul.f32	s1, s1, s15
        if (fs >= 0)
 8002f8e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8002f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f96:	db1c      	blt.n	8002fd2 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x74>
            return int(fs + 0.5f);
 8002f98:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002f9c:	ee70 0aa7 	vadd.f32	s1, s1, s15
 8002fa0:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002fa4:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 8002fa8:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8002faa:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8002fae:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002fb2:	ee17 2a10 	vmov	r2, s14
 8002fb6:	1e51      	subs	r1, r2, #1
 8002fb8:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002fbc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8002fc0:	ee30 0a26 	vadd.f32	s0, s0, s13
 8002fc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8002fc8:	ee10 2a10 	vmov	r2, s0
 8002fcc:	440a      	add	r2, r1
 8002fce:	4611      	mov	r1, r2
 8002fd0:	e7db      	b.n	8002f8a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x2c>
 8002fd2:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8002fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fda:	ee17 2a90 	vmov	r2, s15
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	ee70 0ac7 	vsub.f32	s1, s1, s14
 8002fe4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002fe8:	ee70 0a87 	vadd.f32	s1, s1, s14
 8002fec:	eefd 0ae0 	vcvt.s32.f32	s1, s1
 8002ff0:	ee10 ca90 	vmov	ip, s1
 8002ff4:	4494      	add	ip, r2
 8002ff6:	4662      	mov	r2, ip
 8002ff8:	e7d6      	b.n	8002fa8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x4a>

08002ffa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 8002ffa:	b410      	push	{r4}
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8002ffc:	6803      	ldr	r3, [r0, #0]
        return i * scale;
 8002ffe:	6b44      	ldr	r4, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8003000:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003004:	4362      	muls	r2, r4
    }
 8003006:	f85d 4b04 	ldr.w	r4, [sp], #4
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 800300a:	4718      	bx	r3

0800300c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
        const float fs = f * scale;
 800300c:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003010:	6803      	ldr	r3, [r0, #0]
        const float fs = f * scale;
 8003012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003016:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
        const float fs = f * scale;
 800301a:	ee27 0a80 	vmul.f32	s0, s15, s0
        if (fs >= 0)
 800301e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	db08      	blt.n	800303a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2e>
            return int(fs + 0.5f);
 8003028:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800302c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003030:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003034:	ee17 2a90 	vmov	r2, s15
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 8003038:	4718      	bx	r3
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 800303a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800303e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003042:	ee17 2a90 	vmov	r2, s15
 8003046:	3a01      	subs	r2, #1
 8003048:	ee30 0a47 	vsub.f32	s0, s0, s14
 800304c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003050:	ee30 0a07 	vadd.f32	s0, s0, s14
 8003054:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003058:	ee10 ca10 	vmov	ip, s0
 800305c:	4494      	add	ip, r2
 800305e:	4662      	mov	r2, ip
 8003060:	e7ea      	b.n	8003038 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x2c>

08003062 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
        return scaled2intX(graphRangeMinX);
 8003062:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 8003066:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 8003068:	2b00      	cmp	r3, #0
 800306a:	db07      	blt.n	800307c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 800306c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8003070:	fb93 f0f2 	sdiv	r0, r3, r2
 8003074:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003078:	1040      	asrs	r0, r0, #1
 800307a:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 800307c:	f06f 0001 	mvn.w	r0, #1
 8003080:	fb00 2003 	mla	r0, r0, r3, r2
 8003084:	3801      	subs	r0, #1
 8003086:	fb90 f0f2 	sdiv	r0, r0, r2
 800308a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800308e:	1040      	asrs	r0, r0, #1
 8003090:	4240      	negs	r0, r0
    }
 8003092:	4770      	bx	lr

08003094 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
     *
     * @return The number divided by the scale.
     */
    FORCE_INLINE_FUNCTION static float scaled2float(int i, int scale)
    {
        return (float)i / (float)scale;
 8003094:	edd0 7a4b 	vldr	s15, [r0, #300]	; 0x12c
 8003098:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800309c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80030a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80030a4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80030a8:	4770      	bx	lr

080030aa <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    }
 80030aa:	f8d0 012c 	ldr.w	r0, [r0, #300]	; 0x12c
 80030ae:	4770      	bx	lr

080030b0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
        return scaled2intX(graphRangeMaxX);
 80030b0:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
        return scaled2int(i, xScale);
 80030b4:	6b02      	ldr	r2, [r0, #48]	; 0x30
        if (i >= 0)
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	db07      	blt.n	80030ca <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 80030ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80030be:	fb93 f0f2 	sdiv	r0, r3, r2
 80030c2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80030c6:	1040      	asrs	r0, r0, #1
 80030c8:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80030ca:	f06f 0001 	mvn.w	r0, #1
 80030ce:	fb00 2003 	mla	r0, r0, r3, r2
 80030d2:	3801      	subs	r0, #1
 80030d4:	fb90 f0f2 	sdiv	r0, r0, r2
 80030d8:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80030dc:	1040      	asrs	r0, r0, #1
 80030de:	4240      	negs	r0, r0
    }
 80030e0:	4770      	bx	lr

080030e2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
        return (float)i / (float)scale;
 80030e2:	edd0 7a4c 	vldr	s15, [r0, #304]	; 0x130
 80030e6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80030ea:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 80030ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 80030f2:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80030f6:	4770      	bx	lr

080030f8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    }
 80030f8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
 80030fc:	4770      	bx	lr

080030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
        return scaled2intY(graphRangeMinY);
 80030fe:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
        return scaled2int(i, yScale);
 8003102:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8003104:	2b00      	cmp	r3, #0
 8003106:	db07      	blt.n	8003118 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003108:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800310c:	fb93 f0f2 	sdiv	r0, r3, r2
 8003110:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003114:	1040      	asrs	r0, r0, #1
 8003116:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003118:	f06f 0001 	mvn.w	r0, #1
 800311c:	fb00 2003 	mla	r0, r0, r3, r2
 8003120:	3801      	subs	r0, #1
 8003122:	fb90 f0f2 	sdiv	r0, r0, r2
 8003126:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800312a:	1040      	asrs	r0, r0, #1
 800312c:	4240      	negs	r0, r0
    }
 800312e:	4770      	bx	lr

08003130 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
        return (float)i / (float)scale;
 8003130:	edd0 7a4d 	vldr	s15, [r0, #308]	; 0x134
 8003134:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003138:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 800313c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 8003140:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003144:	4770      	bx	lr

08003146 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    }
 8003146:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
 800314a:	4770      	bx	lr

0800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
        return scaled2intY(graphRangeMaxY);
 800314c:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
        return scaled2int(i, yScale);
 8003150:	6b42      	ldr	r2, [r0, #52]	; 0x34
        if (i >= 0)
 8003152:	2b00      	cmp	r3, #0
 8003154:	db07      	blt.n	8003166 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x1a>
            return ((i * 2 + scale) / scale) / 2;
 8003156:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800315a:	fb93 f0f2 	sdiv	r0, r3, r2
 800315e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003162:	1040      	asrs	r0, r0, #1
 8003164:	4770      	bx	lr
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8003166:	f06f 0001 	mvn.w	r0, #1
 800316a:	fb00 2003 	mla	r0, r0, r3, r2
 800316e:	3801      	subs	r0, #1
 8003170:	fb90 f0f2 	sdiv	r0, r0, r2
 8003174:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8003178:	1040      	asrs	r0, r0, #1
 800317a:	4240      	negs	r0, r0
    }
 800317c:	4770      	bx	lr

0800317e <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
        return (float)i / (float)scale;
 800317e:	edd0 7a4e 	vldr	s15, [r0, #312]	; 0x138
 8003182:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8003186:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 800318a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    }
 800318e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8003192:	4770      	bx	lr

08003194 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    }
 8003194:	f8d0 0138 	ldr.w	r0, [r0, #312]	; 0x138
 8003198:	4770      	bx	lr

0800319a <_ZNK8touchgfx15StaticDataGraph12indexToXAxisEii>:
    virtual int16_t deleteIndex(int index);

    virtual int indexToXAxis(const int /*valueScaled*/, const int labelScaled) const
    {
        return labelScaled;
    }
 800319a:	4610      	mov	r0, r2
 800319c:	4770      	bx	lr

0800319e <_ZNK8touchgfx15StaticDataGraph16indexToScreenXQ5Es>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
    {
        return valueToScreenXQ5(xValues[index]);
 800319e:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 80031a2:	6803      	ldr	r3, [r0, #0]
 80031a4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80031a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80031ac:	4718      	bx	r3

080031ae <_ZNK8touchgfx15StaticDataGraph16indexToScreenYQ5Es>:
    }

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
    {
        return valueToScreenYQ5(yValues[index]);
 80031ae:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
 80031b2:	6803      	ldr	r3, [r0, #0]
 80031b4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80031b8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80031bc:	4718      	bx	r3

080031be <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    virtual AbstractPainter& getPainter() const;

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80031be:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
    }
 80031c2:	4770      	bx	lr

080031c4 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80031c4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80031c8:	4770      	bx	lr

080031ca <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
    {
        color = newColor;
 80031ca:	6301      	str	r1, [r0, #48]	; 0x30
    }
 80031cc:	4770      	bx	lr

080031ce <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     * @see setColor
     */
    virtual colortype getColor() const
    {
        return color;
    }
 80031ce:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80031d0:	4770      	bx	lr

080031d2 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
    {
        return true;
    }
 80031d2:	2001      	movs	r0, #1
 80031d4:	4770      	bx	lr

080031d6 <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
    /**
     * Protected function to prevent users from setting a painter.
     *
     * @param [in] painter The painter.
     */
    virtual void setPainter(AbstractPainter& painter){};
 80031d6:	4770      	bx	lr

080031d8 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
    {
    }
 80031d8:	4770      	bx	lr

080031da <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80031da:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80031dc:	b118      	cbz	r0, 80031e6 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 80031de:	6803      	ldr	r3, [r0, #0]
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e4:	4718      	bx	r3
    }
 80031e6:	4770      	bx	lr

080031e8 <_ZNK8touchgfx17GraphElementGridX13enclosingAreaEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80031e8:	f8b2 111a 	ldrh.w	r1, [r2, #282]	; 0x11a
    {
        return convertToGraphScaleX(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 80031ec:	b530      	push	{r4, r5, lr}
        return topPadding;
 80031ee:	f9b2 4114 	ldrsh.w	r4, [r2, #276]	; 0x114
        return rect.width;
 80031f2:	f9b2 5040 	ldrsh.w	r5, [r2, #64]	; 0x40
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80031f6:	4421      	add	r1, r4
 80031f8:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
     * @param  y      The y coordinate.
     * @param  width  The width.
     * @param  height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
        : x(x), y(y), width(width), height(height)
 80031fc:	8044      	strh	r4, [r0, #2]
 80031fe:	1a52      	subs	r2, r2, r1
 8003200:	2100      	movs	r1, #0
 8003202:	8085      	strh	r5, [r0, #4]
 8003204:	8001      	strh	r1, [r0, #0]
 8003206:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(0, graph->getGraphAreaPaddingTop(), graph->getGraphAreaWidthIncludingPadding(), graph->getGraphAreaHeight());
    }
 8003208:	bd30      	pop	{r4, r5, pc}

0800320a <_ZNK8touchgfx17GraphElementGridX8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 800320a:	b510      	push	{r4, lr}
 800320c:	8042      	strh	r2, [r0, #2]
 800320e:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8003212:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8003216:	8004      	strh	r4, [r0, #0]
 8003218:	8082      	strh	r2, [r0, #4]
 800321a:	80c3      	strh	r3, [r0, #6]
    {
        return Rect(pos, start, width, length);
    }
 800321c:	bd10      	pop	{r4, pc}

0800321e <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMinScaled();
 800321e:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 8003220:	4608      	mov	r0, r1
        return graph->getGraphRangeXMinScaled();
 8003222:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003226:	4718      	bx	r3

08003228 <_ZNK8touchgfx17GraphElementGridX22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeXMaxScaled();
 8003228:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 800322a:	4608      	mov	r0, r1
        return graph->getGraphRangeXMaxScaled();
 800322c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003230:	4718      	bx	r3

08003232 <_ZNK8touchgfx17GraphElementGridX17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 8003232:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 8003236:	4770      	bx	lr

08003238 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 8003238:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 800323c:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 8003240:	4403      	add	r3, r0
 8003242:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 8003246:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 8003248:	b200      	sxth	r0, r0
 800324a:	4770      	bx	lr

0800324c <_ZNK8touchgfx17GraphElementGridX20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 800324c:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 8003250:	4770      	bx	lr

08003252 <_ZNK8touchgfx17GraphElementGridX18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8003252:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 8003256:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 800325a:	4403      	add	r3, r0
 800325c:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 8003260:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 8003262:	b200      	sxth	r0, r0
 8003264:	4770      	bx	lr

08003266 <_ZNK8touchgfx17GraphElementGridX15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenXQ5(x);
 8003266:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 8003268:	4608      	mov	r0, r1
        return graph->valueToScreenXQ5(x);
 800326a:	4611      	mov	r1, r2
 800326c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003270:	4718      	bx	r3

08003272 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:
 8003272:	f8b2 1118 	ldrh.w	r1, [r2, #280]	; 0x118
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
    }

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8003276:	b530      	push	{r4, r5, lr}
        return leftPadding;
 8003278:	f9b2 5116 	ldrsh.w	r5, [r2, #278]	; 0x116
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800327c:	186c      	adds	r4, r5, r1
 800327e:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
        return rect.height;
 8003282:	f9b2 2042 	ldrsh.w	r2, [r2, #66]	; 0x42
 8003286:	1b09      	subs	r1, r1, r4
 8003288:	2400      	movs	r4, #0
 800328a:	8005      	strh	r5, [r0, #0]
 800328c:	8044      	strh	r4, [r0, #2]
 800328e:	8081      	strh	r1, [r0, #4]
 8003290:	80c2      	strh	r2, [r0, #6]
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
    }
 8003292:	bd30      	pop	{r4, r5, pc}

08003294 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:
 8003294:	8002      	strh	r2, [r0, #0]
 8003296:	8083      	strh	r3, [r0, #4]
 8003298:	f9bd 2000 	ldrsh.w	r2, [sp]
 800329c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80032a0:	8042      	strh	r2, [r0, #2]
 80032a2:	80c3      	strh	r3, [r0, #6]

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
    {
        return Rect(start, pos, length, width);
    }
 80032a4:	4770      	bx	lr

080032a6 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMinScaled();
 80032a6:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80032a8:	4608      	mov	r0, r1
        return graph->getGraphRangeYMinScaled();
 80032aa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80032ae:	4718      	bx	r3

080032b0 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
    {
        return graph->getGraphRangeYMaxScaled();
 80032b0:	680b      	ldr	r3, [r1, #0]
    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80032b2:	4608      	mov	r0, r1
        return graph->getGraphRangeYMaxScaled();
 80032b4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80032b8:	4718      	bx	r3

080032ba <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:
    }

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingLeft();
    }
 80032ba:	f9b1 0116 	ldrsh.w	r0, [r1, #278]	; 0x116
 80032be:	4770      	bx	lr

080032c0 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:
 80032c0:	f8b1 0116 	ldrh.w	r0, [r1, #278]	; 0x116
 80032c4:	f8b1 3118 	ldrh.w	r3, [r1, #280]	; 0x118
 80032c8:	4403      	add	r3, r0
 80032ca:	f8b1 0040 	ldrh.w	r0, [r1, #64]	; 0x40
 80032ce:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaWidth();
    }
 80032d0:	b200      	sxth	r0, r0
 80032d2:	4770      	bx	lr

080032d4 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaPaddingTop();
    }
 80032d4:	f9b1 0114 	ldrsh.w	r0, [r1, #276]	; 0x114
 80032d8:	4770      	bx	lr

080032da <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80032da:	f8b1 0114 	ldrh.w	r0, [r1, #276]	; 0x114
 80032de:	f8b1 311a 	ldrh.w	r3, [r1, #282]	; 0x11a
 80032e2:	4403      	add	r3, r0
 80032e4:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
 80032e8:	1ac0      	subs	r0, r0, r3

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
    {
        return graph->getGraphAreaHeight();
    }
 80032ea:	b200      	sxth	r0, r0
 80032ec:	4770      	bx	lr

080032ee <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:
        return graph->valueToScreenYQ5(y);
 80032ee:	680b      	ldr	r3, [r1, #0]

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80032f0:	4608      	mov	r0, r1
        return graph->valueToScreenYQ5(y);
 80032f2:	4611      	mov	r1, r2
 80032f4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80032f8:	4718      	bx	r3

080032fa <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80032fa:	b530      	push	{r4, r5, lr}
 80032fc:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80032fe:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 8003300:	4604      	mov	r4, r0
        rect.width = width;
 8003302:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 8003304:	466d      	mov	r5, sp
 8003306:	4601      	mov	r1, r0
 8003308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330c:	343c      	adds	r4, #60	; 0x3c
 800330e:	4628      	mov	r0, r5
 8003310:	4798      	blx	r3
 8003312:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800331a:	b005      	add	sp, #20
 800331c:	bd30      	pop	{r4, r5, pc}

0800331e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800331e:	b530      	push	{r4, r5, lr}
 8003320:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8003322:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 8003324:	4604      	mov	r4, r0
        rect.height = height;
 8003326:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 8003328:	466d      	mov	r5, sp
 800332a:	4601      	mov	r1, r0
 800332c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003330:	343c      	adds	r4, #60	; 0x3c
 8003332:	4628      	mov	r0, r5
 8003334:	4798      	blx	r3
 8003336:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800333a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800333e:	b005      	add	sp, #20
 8003340:	bd30      	pop	{r4, r5, pc}

08003342 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003342:	2200      	movs	r2, #0
 8003344:	8002      	strh	r2, [r0, #0]
 8003346:	8042      	strh	r2, [r0, #2]
 8003348:	8082      	strh	r2, [r0, #4]
 800334a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800334c:	4770      	bx	lr

0800334e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800334e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
 8003352:	4770      	bx	lr

08003354 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 8003354:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	4604      	mov	r4, r0
        setX(x);
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800335c:	4615      	mov	r5, r2
        setX(x);
 800335e:	4798      	blx	r3
        setBaselineY(baselineY);
 8003360:	6823      	ldr	r3, [r4, #0]
 8003362:	4620      	mov	r0, r4
 8003364:	4629      	mov	r1, r5
 8003366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
 8003368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800336c:	4718      	bx	r3

0800336e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800336e:	2000      	movs	r0, #0
 8003370:	4770      	bx	lr

08003372 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8003372:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003374:	4770      	bx	lr

08003376 <_ZN15customGraphBaseD1Ev>:

class customGraphBase : public touchgfx::Container
{
public:
    customGraphBase();
    virtual ~customGraphBase() {}
 8003376:	4770      	bx	lr

08003378 <_ZN15customGraphBase13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8003378:	b082      	sub	sp, #8
 800337a:	ab02      	add	r3, sp, #8
 800337c:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 8003380:	b002      	add	sp, #8
 8003382:	4770      	bx	lr

08003384 <_ZN15customGraphBase13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:

    virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8003384:	b082      	sub	sp, #8
 8003386:	ab02      	add	r3, sp, #8
 8003388:	e903 0006 	stmdb	r3, {r1, r2}
    {
        // Override and implement this function in customGraph
    }
 800338c:	b002      	add	sp, #8
 800338e:	4770      	bx	lr

08003390 <_ZN15customGraphBase10initializeEv>:
}

void customGraphBase::initialize()
{

}
 8003390:	4770      	bx	lr

08003392 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8003392:	4770      	bx	lr

08003394 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED1Ev>:
 8003394:	4770      	bx	lr

08003396 <_ZN8touchgfx5GraphILs1000EED1Ev>:
 * The Graph will show a graph of data points, drawn from lower x valut to highest x value.
 *
 * @tparam CAPACITY The maximum number of data points on the graph.
 */
template <int16_t CAPACITY>
class Graph : public GraphData
 8003396:	4770      	bx	lr

08003398 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8003398:	4770      	bx	lr

0800339a <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 800339a:	4770      	bx	lr

0800339c <_ZN8touchgfx17GraphElementGridXD1Ev>:
class GraphElementGridX : public GraphElementGridBase
 800339c:	4770      	bx	lr

0800339e <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 800339e:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 80033a0:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80033a2:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 80033a4:	68c4      	ldr	r4, [r0, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	1066      	asrs	r6, r4, #1
 80033aa:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80033ae:	07e4      	lsls	r4, r4, #31
 80033b0:	bf44      	itt	mi
 80033b2:	59ac      	ldrmi	r4, [r5, r6]
 80033b4:	58e3      	ldrmi	r3, [r4, r3]
    }
 80033b6:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 80033b8:	4718      	bx	r3

080033ba <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun_2 != 0);
 80033ba:	6843      	ldr	r3, [r0, #4]
 80033bc:	b12b      	cbz	r3, 80033ca <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x10>
 80033be:	6883      	ldr	r3, [r0, #8]
 80033c0:	b92b      	cbnz	r3, 80033ce <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvE7isValidEv+0x14>
 80033c2:	68c0      	ldr	r0, [r0, #12]
 80033c4:	f000 0001 	and.w	r0, r0, #1
 80033c8:	4770      	bx	lr
 80033ca:	4618      	mov	r0, r3
 80033cc:	4770      	bx	lr
 80033ce:	2001      	movs	r0, #1
    }
 80033d0:	4770      	bx	lr

080033d2 <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7executeES4_S7_>:
    virtual void execute(T1 t1, T2 t2)
 80033d2:	b470      	push	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 80033d4:	6845      	ldr	r5, [r0, #4]
    virtual void execute(T1 t1, T2 t2)
 80033d6:	4603      	mov	r3, r0
        (pobject->*pmemfun_2)(t1, t2);
 80033d8:	68c4      	ldr	r4, [r0, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	1066      	asrs	r6, r4, #1
 80033de:	eb05 0064 	add.w	r0, r5, r4, asr #1
 80033e2:	07e4      	lsls	r4, r4, #31
 80033e4:	bf44      	itt	mi
 80033e6:	59ac      	ldrmi	r4, [r5, r6]
 80033e8:	58e3      	ldrmi	r3, [r4, r3]
    }
 80033ea:	bc70      	pop	{r4, r5, r6}
        (pobject->*pmemfun_2)(t1, t2);
 80033ec:	4718      	bx	r3

080033ee <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv>:
        return (pobject != 0) && (pmemfun_2 != 0);
 80033ee:	6843      	ldr	r3, [r0, #4]
 80033f0:	b12b      	cbz	r3, 80033fe <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x10>
 80033f2:	6883      	ldr	r3, [r0, #8]
 80033f4:	b92b      	cbnz	r3, 8003402 <_ZNK8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvE7isValidEv+0x14>
 80033f6:	68c0      	ldr	r0, [r0, #12]
 80033f8:	f000 0001 	and.w	r0, r0, #1
 80033fc:	4770      	bx	lr
 80033fe:	4618      	mov	r0, r3
 8003400:	4770      	bx	lr
 8003402:	2001      	movs	r0, #1
    }
 8003404:	4770      	bx	lr

08003406 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
        if (alpha > 0)
 8003406:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800340a:	b10b      	cbz	r3, 8003410 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0xa>
            Container::invalidateContent();
 800340c:	f009 bc8c 	b.w	800cd28 <_ZNK8touchgfx9Container17invalidateContentEv>
    }
 8003410:	4770      	bx	lr

08003412 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8003412:	b510      	push	{r4, lr}
 8003414:	4604      	mov	r4, r0
 8003416:	214c      	movs	r1, #76	; 0x4c
 8003418:	f01c f895 	bl	801f546 <_ZdlPvj>
 800341c:	4620      	mov	r0, r4
 800341e:	bd10      	pop	{r4, pc}

08003420 <_ZN8touchgfx17GraphElementGridXD0Ev>:
 8003420:	b510      	push	{r4, lr}
 8003422:	4604      	mov	r4, r0
 8003424:	2144      	movs	r1, #68	; 0x44
 8003426:	f01c f88e 	bl	801f546 <_ZdlPvj>
 800342a:	4620      	mov	r0, r4
 800342c:	bd10      	pop	{r4, pc}

0800342e <_ZN8touchgfx17GraphElementGridYD0Ev>:
class GraphElementGridY : public GraphElementGridBase
 800342e:	b510      	push	{r4, lr}
 8003430:	4604      	mov	r4, r0
 8003432:	2144      	movs	r1, #68	; 0x44
 8003434:	f01c f887 	bl	801f546 <_ZdlPvj>
 8003438:	4620      	mov	r0, r4
 800343a:	bd10      	pop	{r4, pc}

0800343c <_ZN8touchgfx5GraphILs1000EED0Ev>:
 800343c:	b510      	push	{r4, lr}
 800343e:	4604      	mov	r4, r0
 8003440:	f242 0184 	movw	r1, #8324	; 0x2084
 8003444:	f01c f87f 	bl	801f546 <_ZdlPvj>
 8003448:	4620      	mov	r0, r4
 800344a:	bd10      	pop	{r4, pc}

0800344c <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_15GraphClickEventEvED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 800344c:	b510      	push	{r4, lr}
 800344e:	4604      	mov	r4, r0
 8003450:	2110      	movs	r1, #16
 8003452:	f01c f878 	bl	801f546 <_ZdlPvj>
 8003456:	4620      	mov	r0, r4
 8003458:	bd10      	pop	{r4, pc}

0800345a <_ZN8touchgfx8CallbackI15customGraphBaseRKNS_17AbstractDataGraphERKNS2_14GraphDragEventEvED0Ev>:
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	2110      	movs	r1, #16
 8003460:	f01c f871 	bl	801f546 <_ZdlPvj>
 8003464:	4620      	mov	r0, r4
 8003466:	bd10      	pop	{r4, pc}

08003468 <_ZN15customGraphBaseD0Ev>:
    virtual ~customGraphBase() {}
 8003468:	b510      	push	{r4, lr}
 800346a:	4604      	mov	r4, r0
 800346c:	f242 41d0 	movw	r1, #9424	; 0x24d0
 8003470:	f01c f869 	bl	801f546 <_ZdlPvj>
 8003474:	4620      	mov	r0, r4
 8003476:	bd10      	pop	{r4, pc}

08003478 <_ZNK8touchgfx17GraphElementGridX30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 8003478:	b513      	push	{r0, r1, r4, lr}
 800347a:	4603      	mov	r3, r0
 800347c:	4608      	mov	r0, r1
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 800347e:	e9d3 140d 	ldrd	r1, r4, [r3, #52]	; 0x34
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003482:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleX(graph, gridInterval, dataScale);
 8003484:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800348a:	4798      	blx	r3
 800348c:	9901      	ldr	r1, [sp, #4]
 800348e:	4602      	mov	r2, r0
 8003490:	4620      	mov	r0, r4
    }
 8003492:	b002      	add	sp, #8
 8003494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleX());
 8003498:	f00b bd66 	b.w	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800349c <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 800349c:	b513      	push	{r0, r1, r4, lr}
 800349e:	4603      	mov	r3, r0
 80034a0:	4608      	mov	r0, r1
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80034a2:	e9d3 140d 	ldrd	r1, r4, [r3, #52]	; 0x34
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80034a6:	6803      	ldr	r3, [r0, #0]
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80034a8:	9101      	str	r1, [sp, #4]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ae:	4798      	blx	r3
 80034b0:	9901      	ldr	r1, [sp, #4]
 80034b2:	4602      	mov	r2, r0
 80034b4:	4620      	mov	r0, r4
    }
 80034b6:	b002      	add	sp, #8
 80034b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 80034bc:	f00b bd54 	b.w	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

080034c0 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE>:

void customGraphBase::graphClickedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphClickEvent& value)
{
 80034c0:	b410      	push	{r4}
    if (&src == &graph1)
 80034c2:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80034c6:	428c      	cmp	r4, r1
 80034c8:	d106      	bne.n	80034d8 <_ZN15customGraphBase27graphClickedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_15GraphClickEventE+0x18>
    {
        //Interaction2
        //When graph1 clicked call virtual function
        //Call graph1clicked
        graph1clicked(value);
 80034ca:	6803      	ldr	r3, [r0, #0]
    }
}
 80034cc:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1clicked(value);
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	ca06      	ldmia	r2, {r1, r2}
 80034d6:	4718      	bx	r3
}
 80034d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE>:

void customGraphBase::graphDraggedCallbackHandler(const touchgfx::AbstractDataGraph& src, const touchgfx::AbstractDataGraph::GraphDragEvent& value)
{
 80034de:	b410      	push	{r4}
    if (&src == &graph1)
 80034e0:	f100 0458 	add.w	r4, r0, #88	; 0x58
 80034e4:	428c      	cmp	r4, r1
 80034e6:	d106      	bne.n	80034f6 <_ZN15customGraphBase27graphDraggedCallbackHandlerERKN8touchgfx17AbstractDataGraphERKNS1_14GraphDragEventE+0x18>
    {
        //Interaction1
        //When graph1 dragged call virtual function
        //Call graph1Dragged
        graph1Dragged(value);
 80034e8:	6803      	ldr	r3, [r0, #0]
    }
}
 80034ea:	f85d 4b04 	ldr.w	r4, [sp], #4
        graph1Dragged(value);
 80034ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f2:	ca06      	ldmia	r2, {r1, r2}
 80034f4:	4718      	bx	r3
}
 80034f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 80034fc:	2900      	cmp	r1, #0
    virtual int indexToDataPointYScaled(int16_t index) const
 80034fe:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003500:	db03      	blt.n	800350a <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0xe>
 8003502:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 8003506:	428b      	cmp	r3, r1
 8003508:	dc06      	bgt.n	8003518 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x1c>
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x28>)
 800350c:	f240 61eb 	movw	r1, #1771	; 0x6eb
 8003510:	4a05      	ldr	r2, [pc, #20]	; (8003528 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x2c>)
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointYScaledEs+0x30>)
 8003514:	f01c fe3e 	bl	8020194 <__assert_func>
        return yValues[index];
 8003518:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
    }
 800351c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003520:	bd08      	pop	{r3, pc}
 8003522:	bf00      	nop
 8003524:	08023314 	.word	0x08023314
 8003528:	08023337 	.word	0x08023337
 800352c:	08023385 	.word	0x08023385

08003530 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs>:
        assert(index >= 0 && index < usedCapacity);
 8003530:	2900      	cmp	r1, #0
    virtual int indexToDataPointXScaled(int16_t index) const
 8003532:	b508      	push	{r3, lr}
        assert(index >= 0 && index < usedCapacity);
 8003534:	db03      	blt.n	800353e <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0xe>
 8003536:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800353a:	428b      	cmp	r3, r1
 800353c:	dc06      	bgt.n	800354c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x1c>
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x28>)
 8003540:	f240 61db 	movw	r1, #1755	; 0x6db
 8003544:	4a05      	ldr	r2, [pc, #20]	; (800355c <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x2c>)
 8003546:	4806      	ldr	r0, [pc, #24]	; (8003560 <_ZNK8touchgfx15StaticDataGraph23indexToDataPointXScaledEs+0x30>)
 8003548:	f01c fe24 	bl	8020194 <__assert_func>
        return xValues[index];
 800354c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
    }
 8003550:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003554:	bd08      	pop	{r3, pc}
 8003556:	bf00      	nop
 8003558:	08023314 	.word	0x08023314
 800355c:	080233f0 	.word	0x080233f0
 8003560:	08023385 	.word	0x08023385

08003564 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8003564:	6803      	ldr	r3, [r0, #0]
class TypedText
 8003566:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    virtual void setBaselineY(int16_t baselineY)
 8003568:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800356a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
    virtual void setBaselineY(int16_t baselineY)
 800356c:	4604      	mov	r4, r0
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8003570:	b28d      	uxth	r5, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b92b      	cbnz	r3, 8003582 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8003578:	21ae      	movs	r1, #174	; 0xae
 800357a:	4a10      	ldr	r2, [pc, #64]	; (80035bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800357c:	4810      	ldr	r0, [pc, #64]	; (80035c0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 800357e:	f01c fe09 	bl	8020194 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003584:	8809      	ldrh	r1, [r1, #0]
 8003586:	4291      	cmp	r1, r2
 8003588:	d803      	bhi.n	8003592 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 800358c:	21af      	movs	r1, #175	; 0xaf
 800358e:	4a0b      	ldr	r2, [pc, #44]	; (80035bc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8003590:	e7f4      	b.n	800357c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003592:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800359e:	6803      	ldr	r3, [r0, #0]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	4798      	blx	r3
 80035a4:	1a28      	subs	r0, r5, r0
 80035a6:	4633      	mov	r3, r6
 80035a8:	b201      	sxth	r1, r0
 80035aa:	4620      	mov	r0, r4
    }
 80035ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 80035b0:	4718      	bx	r3
 80035b2:	bf00      	nop
 80035b4:	2400f208 	.word	0x2400f208
 80035b8:	0802343e 	.word	0x0802343e
 80035bc:	08023480 	.word	0x08023480
 80035c0:	080234ae 	.word	0x080234ae
 80035c4:	2400f20c 	.word	0x2400f20c
 80035c8:	08023503 	.word	0x08023503
 80035cc:	2400f210 	.word	0x2400f210

080035d0 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80035d0:	2200      	movs	r2, #0
 80035d2:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80035d6:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80035d8:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80035dc:	4770      	bx	lr
	...

080035e0 <_ZN8touchgfx8DrawableC1Ev>:
          visible(true)
 80035e0:	4a07      	ldr	r2, [pc, #28]	; (8003600 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 80035e2:	6002      	str	r2, [r0, #0]
 80035e4:	2200      	movs	r2, #0
 80035e6:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80035ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80035ee:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80035f2:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80035f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fa:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	080254a0 	.word	0x080254a0

08003604 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	461d      	mov	r5, r3
 800360a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 800360e:	f7ff f9b6 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	4629      	mov	r1, r5
 8003616:	4620      	mov	r0, r4
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4798      	blx	r3
        setHeight(height);
 800361c:	6823      	ldr	r3, [r4, #0]
 800361e:	4631      	mov	r1, r6
 8003620:	4620      	mov	r0, r4
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8003624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8003628:	4718      	bx	r3

0800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800362a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800362c:	ab01      	add	r3, sp, #4
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800362e:	4615      	mov	r5, r2
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 8003630:	f00f ffc0 	bl	80135b4 <_ZN8touchgfx6muldivElllRl>
        if (result >= 0)
 8003634:	2800      	cmp	r0, #0
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 8003636:	462a      	mov	r2, r5
 8003638:	9901      	ldr	r1, [sp, #4]
 800363a:	ea4f 1440 	mov.w	r4, r0, lsl #5
 800363e:	f04f 0020 	mov.w	r0, #32
        if (result >= 0)
 8003642:	db04      	blt.n	800364e <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x24>
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 8003644:	f00f ffd5 	bl	80135f2 <_ZN8touchgfx6muldivElll>
            return Q5(v + q5.v);
 8003648:	4420      	add	r0, r4
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
    }
 800364a:	b003      	add	sp, #12
 800364c:	bd30      	pop	{r4, r5, pc}
        return Q5(muldiv(int(factor1), int(factor2), int(divisor)));
 800364e:	f00f ffd0 	bl	80135f2 <_ZN8touchgfx6muldivElll>
            return Q5(v - q5.v);
 8003652:	1a20      	subs	r0, r4, r0
 8003654:	e7f9      	b.n	800364a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x20>

08003656 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 8003656:	b570      	push	{r4, r5, r6, lr}
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8003658:	f9b0 4114 	ldrsh.w	r4, [r0, #276]	; 0x114
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 800365c:	460e      	mov	r6, r1
        return graphArea.getHeight() - (topPadding + bottomPadding);
 800365e:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
 8003662:	1963      	adds	r3, r4, r5
 8003664:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
 8003668:	1aed      	subs	r5, r5, r3
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 800366a:	b22d      	sxth	r5, r5
 800366c:	442c      	add	r4, r5
 800366e:	1e69      	subs	r1, r5, #1
 8003670:	e9d0 324d 	ldrd	r3, r2, [r0, #308]	; 0x134
 8003674:	3c01      	subs	r4, #1
 8003676:	1ad2      	subs	r2, r2, r3
 8003678:	1af0      	subs	r0, r6, r3
 800367a:	f7ff ffd6 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
    }
 800367e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8003682:	bd70      	pop	{r4, r5, r6, pc}

08003684 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	4604      	mov	r4, r0
 8003688:	4608      	mov	r0, r1
        return graphArea.getWidth() - (leftPadding + rightPadding);
 800368a:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
 800368e:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
 8003692:	440b      	add	r3, r1
 8003694:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8003698:	1ac9      	subs	r1, r1, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 800369a:	e9d4 524b 	ldrd	r5, r2, [r4, #300]	; 0x12c
 800369e:	b209      	sxth	r1, r1
 80036a0:	1b52      	subs	r2, r2, r5
 80036a2:	1b40      	subs	r0, r0, r5
 80036a4:	3901      	subs	r1, #1
 80036a6:	f7ff ffc0 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
            return Q5(v + q5.v);
 80036aa:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	; 0x116
    }
 80036ae:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80036b2:	bd38      	pop	{r3, r4, r5, pc}

080036b4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 80036b4:	b570      	push	{r4, r5, r6, lr}
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
        : areaOffsetX(0),
          areaOffsetY(0),
          widgetAlpha(255)
 80036b6:	2300      	movs	r3, #0
 80036b8:	22ff      	movs	r2, #255	; 0xff
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80036ba:	4e14      	ldr	r6, [pc, #80]	; (800370c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80036bc:	4604      	mov	r4, r0
 80036be:	7202      	strb	r2, [r0, #8]
 80036c0:	6043      	str	r3, [r0, #4]
        : AbstractPainter(), currentX(0), currentY(0)
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80036c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	6002      	str	r2, [r0, #0]
 80036cc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80036d0:	b10a      	cbz	r2, 80036d6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x22>
 80036d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036d4:	b900      	cbnz	r0, 80036d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x24>
        return instance->lcdRef;
 80036d6:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4798      	blx	r3
 80036de:	1e43      	subs	r3, r0, #1
 80036e0:	425d      	negs	r5, r3
 80036e2:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80036e8:	b130      	cbz	r0, 80036f8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x44>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	4798      	blx	r3
 80036f0:	2801      	cmp	r0, #1
 80036f2:	bf08      	it	eq
 80036f4:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80036f8:	b92d      	cbnz	r5, 8003706 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x52>
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80036fc:	2128      	movs	r1, #40	; 0x28
 80036fe:	4a06      	ldr	r2, [pc, #24]	; (8003718 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x64>)
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x68>)
 8003702:	f01c fd47 	bl	8020194 <__assert_func>
    }
 8003706:	4620      	mov	r0, r4
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	bf00      	nop
 800370c:	2400f198 	.word	0x2400f198
 8003710:	08024884 	.word	0x08024884
 8003714:	08023541 	.word	0x08023541
 8003718:	0802359f 	.word	0x0802359f
 800371c:	080235d8 	.word	0x080235d8

08003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
    TextAreaWithOneWildcard()
 8003720:	b510      	push	{r4, lr}
 8003722:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003724:	2226      	movs	r2, #38	; 0x26
 8003726:	2100      	movs	r1, #0
 8003728:	f01c feb4 	bl	8020494 <memset>
class Widget : public Drawable
 800372c:	4620      	mov	r0, r4
 800372e:	f7ff ff57 	bl	80035e0 <_ZN8touchgfx8DrawableC1Ev>
        : typedTextId(id)
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x3c>)
 8003734:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    }
 8003738:	4620      	mov	r0, r4
 800373a:	62a3      	str	r3, [r4, #40]	; 0x28
 800373c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003740:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8003742:	2300      	movs	r3, #0
 8003744:	e9c4 320c 	strd	r3, r2, [r4, #48]	; 0x30
        : TextAreaWithWildcardBase(), wc1(0)
 8003748:	4a05      	ldr	r2, [pc, #20]	; (8003760 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x40>)
 800374a:	8723      	strh	r3, [r4, #56]	; 0x38
 800374c:	6022      	str	r2, [r4, #0]
        : x(x), y(y), width(width), height(height)
 800374e:	f04f 32ff 	mov.w	r2, #4294967295
 8003752:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003754:	64a3      	str	r3, [r4, #72]	; 0x48
              text(0)
 8003756:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
    }
 800375a:	bd10      	pop	{r4, pc}
 800375c:	08022cdc 	.word	0x08022cdc
 8003760:	080237c8 	.word	0x080237c8

08003764 <_ZN15customGraphBaseC1Ev>:
customGraphBase::customGraphBase() :
 8003764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003768:	4605      	mov	r5, r0
          firstChild(0)
 800376a:	2700      	movs	r7, #0
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800376c:	f04f 0901 	mov.w	r9, #1
 8003770:	f04f 080a 	mov.w	r8, #10
    graphDraggedCallback(this, &customGraphBase::graphDraggedCallbackHandler)
 8003774:	f105 0658 	add.w	r6, r5, #88	; 0x58
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
        : lineWidth(2)
 8003778:	f505 5400 	add.w	r4, r5, #8192	; 0x2000
 800377c:	f505 5a07 	add.w	sl, r5, #8640	; 0x21c0
 8003780:	f505 5b0d 	add.w	fp, r5, #9024	; 0x2340
customGraphBase::customGraphBase() :
 8003784:	ed2d 8b08 	vpush	{d8-d11}
 8003788:	b08d      	sub	sp, #52	; 0x34
    graphDraggedCallback(this, &customGraphBase::graphDraggedCallbackHandler)
 800378a:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
 800378e:	f7ff ff27 	bl	80035e0 <_ZN8touchgfx8DrawableC1Ev>
 8003792:	4be7      	ldr	r3, [pc, #924]	; (8003b30 <_ZN15customGraphBaseC1Ev+0x3cc>)
 8003794:	462a      	mov	r2, r5
 8003796:	62af      	str	r7, [r5, #40]	; 0x28
        : Widget(), alpha(255), color(0)
 8003798:	4639      	mov	r1, r7
 800379a:	f10b 0b38 	add.w	fp, fp, #56	; 0x38
 800379e:	f842 3b2c 	str.w	r3, [r2], #44
 80037a2:	ee0a 2a90 	vmov	s21, r2
 80037a6:	2226      	movs	r2, #38	; 0x26
 80037a8:	ee1a 0a90 	vmov	r0, s21
 80037ac:	f01c fe72 	bl	8020494 <memset>
 80037b0:	ee1a 0a90 	vmov	r0, s21
 80037b4:	f7ff ff14 	bl	80035e0 <_ZN8touchgfx8DrawableC1Ev>
 80037b8:	4bde      	ldr	r3, [pc, #888]	; (8003b34 <_ZN15customGraphBaseC1Ev+0x3d0>)
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80037ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037be:	4630      	mov	r0, r6
 80037c0:	62eb      	str	r3, [r5, #44]	; 0x2c
 80037c2:	23ff      	movs	r3, #255	; 0xff
        : color(col)
 80037c4:	656f      	str	r7, [r5, #84]	; 0x54
 80037c6:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
 80037ca:	f00b fb5b 	bl	800ee84 <_ZN8touchgfx17AbstractDataGraphC1Es>
 80037ce:	4bda      	ldr	r3, [pc, #872]	; (8003b38 <_ZN15customGraphBaseC1Ev+0x3d4>)
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80037d0:	4639      	mov	r1, r7
 80037d2:	f240 32e7 	movw	r2, #999	; 0x3e7
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80037d6:	65ab      	str	r3, [r5, #88]	; 0x58
{
public:
    Graph()
        : GraphData(CAPACITY, xValues, yValues)
 80037d8:	f505 73ce 	add.w	r3, r5, #412	; 0x19c
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80037dc:	4630      	mov	r0, r6
        : AbstractDataGraph(capacity), xValues(xvalues), yValues(yvalues)
 80037de:	f8c5 3194 	str.w	r3, [r5, #404]	; 0x194
 80037e2:	f506 5387 	add.w	r3, r6, #4320	; 0x10e0
 80037e6:	3304      	adds	r3, #4
 80037e8:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
        StaticDataGraph::setGraphRangeX(0, capacity - 1);
 80037ec:	f7ff fb21 	bl	8002e32 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 80037f0:	4bd2      	ldr	r3, [pc, #840]	; (8003b3c <_ZN15customGraphBaseC1Ev+0x3d8>)
 80037f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80037f4:	f505 5303 	add.w	r3, r5, #8384	; 0x20c0
 80037f8:	331c      	adds	r3, #28
        : CanvasWidget()
 80037fa:	4618      	mov	r0, r3
 80037fc:	ee0b 3a10 	vmov	s22, r3
 8003800:	f00a ff66 	bl	800e6d0 <_ZN8touchgfx12CanvasWidgetC1Ev>
        : lineWidth(2)
 8003804:	4bce      	ldr	r3, [pc, #824]	; (8003b40 <_ZN15customGraphBaseC1Ev+0x3dc>)
 8003806:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800380a:	f04f 0302 	mov.w	r3, #2
 800380e:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
 8003812:	f505 5304 	add.w	r3, r5, #8448	; 0x2100
 8003816:	330c      	adds	r3, #12
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), painterRed(0), painterGreen(0), painterBlue(0)
 8003818:	4618      	mov	r0, r3
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	f7ff ff4a 	bl	80036b4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003820:	4bc8      	ldr	r3, [pc, #800]	; (8003b44 <_ZN15customGraphBaseC1Ev+0x3e0>)
 8003822:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
 8003826:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 800382a:	f505 5304 	add.w	r3, r5, #8448	; 0x2100
 800382e:	f884 7122 	strb.w	r7, [r4, #290]	; 0x122
 8003832:	3324      	adds	r3, #36	; 0x24
        : CanvasWidget()
 8003834:	4618      	mov	r0, r3
 8003836:	9303      	str	r3, [sp, #12]
 8003838:	f00a ff4a 	bl	800e6d0 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphElementGridX : public GraphElementGridBase
 800383c:	4bc2      	ldr	r3, [pc, #776]	; (8003b48 <_ZN15customGraphBaseC1Ev+0x3e4>)
 800383e:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
 8003842:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003846:	f505 5305 	add.w	r3, r5, #8512	; 0x2140
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800384a:	f884 9160 	strb.w	r9, [r4, #352]	; 0x160
 800384e:	3328      	adds	r3, #40	; 0x28
 8003850:	f8c4 7164 	str.w	r7, [r4, #356]	; 0x164
 8003854:	e9c4 9856 	strd	r9, r8, [r4, #344]	; 0x158
        : CanvasWidget()
 8003858:	4618      	mov	r0, r3
 800385a:	9304      	str	r3, [sp, #16]
 800385c:	f00a ff38 	bl	800e6d0 <_ZN8touchgfx12CanvasWidgetC1Ev>
class GraphElementGridY : public GraphElementGridBase
 8003860:	4bba      	ldr	r3, [pc, #744]	; (8003b4c <_ZN15customGraphBaseC1Ev+0x3e8>)
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8003862:	f8c4 81a0 	str.w	r8, [r4, #416]	; 0x1a0
class GraphElementGridY : public GraphElementGridBase
 8003866:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
 800386a:	f505 5306 	add.w	r3, r5, #8576	; 0x2180
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800386e:	f884 91a4 	strb.w	r9, [r4, #420]	; 0x1a4
 8003872:	332c      	adds	r3, #44	; 0x2c
 8003874:	f8c4 71a8 	str.w	r7, [r4, #424]	; 0x1a8
        : CanvasWidget()
 8003878:	4618      	mov	r0, r3
 800387a:	9305      	str	r3, [sp, #20]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 800387c:	e9c4 7966 	strd	r7, r9, [r4, #408]	; 0x198
        : CanvasWidget()
 8003880:	f00a ff26 	bl	800e6d0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003884:	4bb2      	ldr	r3, [pc, #712]	; (8003b50 <_ZN15customGraphBaseC1Ev+0x3ec>)
 8003886:	4650      	mov	r0, sl
class GraphLabelsBase : public AbstractGraphDecoration
{
public:
    GraphLabelsBase()
        : AbstractGraphDecoration(),
          dataScale(1), labelInterval(0), labelTypedText(TypedText(TYPED_TEXT_INVALID)), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 8003888:	f8c4 71e4 	str.w	r7, [r4, #484]	; 0x1e4
 800388c:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
 8003890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003894:	f884 71f0 	strb.w	r7, [r4, #496]	; 0x1f0
 8003898:	f8a4 31ec 	strh.w	r3, [r4, #492]	; 0x1ec
 800389c:	232e      	movs	r3, #46	; 0x2e
 800389e:	f8a4 71f2 	strh.w	r7, [r4, #498]	; 0x1f2
 80038a2:	f8a4 31f4 	strh.w	r3, [r4, #500]	; 0x1f4

/**
 * GraphLabelsY will draw labels along the Y axis at given intervals. By combining two
 * GraphLabelsY it is possible to have different appearance for major and minor y offsets.
 */
class GraphLabelsY : public GraphLabelsBase
 80038a6:	4bab      	ldr	r3, [pc, #684]	; (8003b54 <_ZN15customGraphBaseC1Ev+0x3f0>)
          dataScale(1), labelInterval(0), labelTypedText(TypedText(TYPED_TEXT_INVALID)), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80038a8:	f8c4 71f8 	str.w	r7, [r4, #504]	; 0x1f8
class GraphLabelsY : public GraphLabelsBase
 80038ac:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
          dataScale(1), labelInterval(0), labelTypedText(TypedText(TYPED_TEXT_INVALID)), labelRotation(TEXT_ROTATE_0), labelDecimals(0), labelDecimalPoint('.'), majorLabel(0)
 80038b0:	e9c4 7977 	strd	r7, r9, [r4, #476]	; 0x1dc
 80038b4:	f7ff ff34 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038b8:	f505 5209 	add.w	r2, r5, #8768	; 0x2240
 80038bc:	3208      	adds	r2, #8
 80038be:	4610      	mov	r0, r2
 80038c0:	ee08 2a10 	vmov	s16, r2
 80038c4:	f7ff ff2c 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038c8:	f505 520a 	add.w	r2, r5, #8832	; 0x2280
 80038cc:	3214      	adds	r2, #20
 80038ce:	4610      	mov	r0, r2
 80038d0:	ee08 2a90 	vmov	s17, r2
 80038d4:	f7ff ff24 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038d8:	f505 520b 	add.w	r2, r5, #8896	; 0x22c0
 80038dc:	3220      	adds	r2, #32
 80038de:	4610      	mov	r0, r2
 80038e0:	ee09 2a10 	vmov	s18, r2
 80038e4:	f7ff ff1c 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038e8:	f505 520c 	add.w	r2, r5, #8960	; 0x2300
 80038ec:	322c      	adds	r2, #44	; 0x2c
 80038ee:	4610      	mov	r0, r2
 80038f0:	ee09 2a90 	vmov	s19, r2
 80038f4:	f7ff ff14 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038f8:	4658      	mov	r0, fp
 80038fa:	f7ff ff11 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80038fe:	f505 520f 	add.w	r2, r5, #9152	; 0x23c0
 8003902:	3204      	adds	r2, #4
 8003904:	4610      	mov	r0, r2
 8003906:	ee0a 2a10 	vmov	s20, r2
 800390a:	f7ff ff09 	bl	8003720 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
        : pobject(pobject), pmemfun_2(pmemfun_2)
 800390e:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <_ZN15customGraphBaseC1Ev+0x3f4>)
    box1.setPosition(0, 0, 310, 200);
 8003910:	22c8      	movs	r2, #200	; 0xc8
 8003912:	f8c4 54b4 	str.w	r5, [r4, #1204]	; 0x4b4
 8003916:	f8c4 34b0 	str.w	r3, [r4, #1200]	; 0x4b0
 800391a:	4639      	mov	r1, r7
 800391c:	4b8f      	ldr	r3, [pc, #572]	; (8003b5c <_ZN15customGraphBaseC1Ev+0x3f8>)
 800391e:	ee1a 0a90 	vmov	r0, s21
 8003922:	f8c4 74bc 	str.w	r7, [r4, #1212]	; 0x4bc
 8003926:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
 800392a:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <_ZN15customGraphBaseC1Ev+0x3fc>)
 800392c:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
 8003930:	f8c4 34c0 	str.w	r3, [r4, #1216]	; 0x4c0
 8003934:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <_ZN15customGraphBaseC1Ev+0x400>)
 8003936:	f8c4 74cc 	str.w	r7, [r4, #1228]	; 0x4cc
 800393a:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
        rect.width = width;
 800393e:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <_ZN15customGraphBaseC1Ev+0x404>)
 8003940:	9200      	str	r2, [sp, #0]
 8003942:	463a      	mov	r2, r7
 8003944:	60ab      	str	r3, [r5, #8]
 8003946:	f44f 739b 	mov.w	r3, #310	; 0x136
 800394a:	f7ff fe5b 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
        this->color = color;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
    graph1.setScaleX(1);
 8003952:	463a      	mov	r2, r7
 8003954:	4649      	mov	r1, r9
 8003956:	656b      	str	r3, [r5, #84]	; 0x54
 8003958:	4630      	mov	r0, r6
 800395a:	f00b fb0d 	bl	800ef78 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>
    graph1.setScaleY(10);
 800395e:	463a      	mov	r2, r7
 8003960:	4641      	mov	r1, r8
 8003962:	4630      	mov	r0, r6
 8003964:	f00b fb2b 	bl	800efbe <_ZN8touchgfx15StaticDataGraph9setScaleYEib>
    graph1.setPosition(0, 0, 310, 200);
 8003968:	22c8      	movs	r2, #200	; 0xc8
 800396a:	4639      	mov	r1, r7
 800396c:	4630      	mov	r0, r6
 800396e:	9200      	str	r2, [sp, #0]
 8003970:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003974:	463a      	mov	r2, r7
 8003976:	f7ff fe45 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
    graph1.setGraphAreaMargin(30, 55, 5, 19);
 800397a:	2313      	movs	r3, #19
 800397c:	4630      	mov	r0, r6
 800397e:	2237      	movs	r2, #55	; 0x37
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	211e      	movs	r1, #30
 8003984:	2305      	movs	r3, #5
 8003986:	f00b fa2e 	bl	800ede6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    graph1.setGraphAreaPadding(0, 0, 0, 0);
 800398a:	463b      	mov	r3, r7
 800398c:	463a      	mov	r2, r7
 800398e:	4639      	mov	r1, r7
 8003990:	4630      	mov	r0, r6
 8003992:	9700      	str	r7, [sp, #0]
 8003994:	f00b f938 	bl	800ec08 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    graph1.setGraphRangeX(0, 60);
 8003998:	4639      	mov	r1, r7
 800399a:	4630      	mov	r0, r6
 800399c:	223c      	movs	r2, #60	; 0x3c
 800399e:	f7ff fa48 	bl	8002e32 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    graph1.setGraphRangeY(0, 40000);
 80039a2:	4639      	mov	r1, r7
 80039a4:	4630      	mov	r0, r6
 80039a6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80039aa:	f7ff face 	bl	8002f4a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    graph1.setClickAction(graphClickedCallback);
 80039ae:	f505 5312 	add.w	r3, r5, #9344	; 0x2480
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80039b2:	464a      	mov	r2, r9
 80039b4:	3330      	adds	r3, #48	; 0x30
        clickAction = &callback;
 80039b6:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
    graph1.setDragAction(graphDraggedCallback);
 80039ba:	f505 5313 	add.w	r3, r5, #9408	; 0x24c0
 80039be:	e9d4 1056 	ldrd	r1, r0, [r4, #344]	; 0x158
        dragAction = &callback;
 80039c2:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
 80039c6:	f00b facf 	bl	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        color = newColor;
 80039ca:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <_ZN15customGraphBaseC1Ev+0x408>)
        gridInterval = abs(interval);
 80039cc:	220f      	movs	r2, #15
    graph1.addGraphElement(graph1MajorXAxisGrid);
 80039ce:	9903      	ldr	r1, [sp, #12]
        color = newColor;
 80039d0:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
 80039d4:	4630      	mov	r0, r6
        gridInterval = abs(interval);
 80039d6:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
        dataScale = scale;
 80039da:	f8c4 9158 	str.w	r9, [r4, #344]	; 0x158
        lineWidth = width;
 80039de:	f884 9160 	strb.w	r9, [r4, #352]	; 0x160
 80039e2:	f00b f91c 	bl	800ec1e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 80039e6:	4642      	mov	r2, r8
 80039e8:	e9d4 1067 	ldrd	r1, r0, [r4, #412]	; 0x19c
 80039ec:	f00b fabc 	bl	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        color = newColor;
 80039f0:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <_ZN15customGraphBaseC1Ev+0x408>)
    graph1.addGraphElement(graph1MajorYAxisGrid);
 80039f2:	9904      	ldr	r1, [sp, #16]
 80039f4:	4630      	mov	r0, r6
 80039f6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        gridInterval = abs(interval);
 80039fa:	4b5d      	ldr	r3, [pc, #372]	; (8003b70 <_ZN15customGraphBaseC1Ev+0x40c>)
        dataScale = scale;
 80039fc:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
        gridInterval = abs(interval);
 8003a00:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
        lineWidth = width;
 8003a04:	f884 91a4 	strb.w	r9, [r4, #420]	; 0x1a4
 8003a08:	f00b f909 	bl	800ec1e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
        labelInterval = AbstractDataGraph::convertToNewScale(labelInterval, dataScale, scale);
 8003a0c:	4642      	mov	r2, r8
 8003a0e:	e9d4 1078 	ldrd	r1, r0, [r4, #480]	; 0x1e0
 8003a12:	f00b faa9 	bl	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
        color = newColor;
 8003a16:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        labelInterval = abs(interval);
 8003a1a:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <_ZN15customGraphBaseC1Ev+0x40c>)
    graph1.addLeftElement(graph1MajorYAxisLabel);
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f8c4 21dc 	str.w	r2, [r4, #476]	; 0x1dc
 8003a22:	9905      	ldr	r1, [sp, #20]
        dataScale = scale;
 8003a24:	f8c4 81e0 	str.w	r8, [r4, #480]	; 0x1e0
        boundingArea = calculateBoundingArea();
 8003a28:	f10d 0818 	add.w	r8, sp, #24
        labelInterval = abs(interval);
 8003a2c:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
class TypedText
 8003a30:	f8a4 71ec 	strh.w	r7, [r4, #492]	; 0x1ec
        labelDecimals = decimals;
 8003a34:	f8a4 91f2 	strh.w	r9, [r4, #498]	; 0x1f2
 8003a38:	f00b f903 	bl	800ec42 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>
     *
     * @param  color The color.
     */
    void setColor(colortype color)
    {
        painterRed = Color::getRed(color);
 8003a3c:	f24c 2332 	movw	r3, #49714	; 0xc232
    graph1Line1.setPainter(graph1Line1Painter);
 8003a40:	9902      	ldr	r1, [sp, #8]
 8003a42:	ee1b 0a10 	vmov	r0, s22
 8003a46:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
        painterGreen = Color::getGreen(color);
        painterBlue = Color::getBlue(color);
 8003a4a:	2337      	movs	r3, #55	; 0x37
 8003a4c:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
 8003a50:	f00a fd3a 	bl	800e4c8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 8003a54:	f04f 0204 	mov.w	r2, #4
    graph1.addGraphElement(graph1Line1);
 8003a58:	ee1b 1a10 	vmov	r1, s22
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f884 210a 	strb.w	r2, [r4, #266]	; 0x10a
 8003a62:	f00b f8dc 	bl	800ec1e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>
    debugText.setXY(126, 0);
 8003a66:	463a      	mov	r2, r7
 8003a68:	4650      	mov	r0, sl
 8003a6a:	217e      	movs	r1, #126	; 0x7e
 8003a6c:	f7fe ff87 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003a70:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003a74:	f8d4 31fc 	ldr.w	r3, [r4, #508]	; 0x1fc
 8003a78:	4651      	mov	r1, sl
 8003a7a:	4640      	mov	r0, r8
        this->color = color;
 8003a7c:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
        boundingArea = calculateBoundingArea();
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        visible = vis;
 8003a84:	f884 7221 	strb.w	r7, [r4, #545]	; 0x221
        linespace = space;
 8003a88:	f8a4 7230 	strh.w	r7, [r4, #560]	; 0x230
        boundingArea = calculateBoundingArea();
 8003a8c:	4798      	blx	r3
 8003a8e:	f10a 033c 	add.w	r3, sl, #60	; 0x3c
 8003a92:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    debugText.setWildcard(debugTextBuffer);
 8003a9a:	f505 5310 	add.w	r3, r5, #9216	; 0x2400
    debugText.resizeToCurrentText();
 8003a9e:	4650      	mov	r0, sl
    debugTextBuffer[0] = 0;
 8003aa0:	f8a4 7410 	strh.w	r7, [r4, #1040]	; 0x410
    debugText.setWildcard(debugTextBuffer);
 8003aa4:	3310      	adds	r3, #16
        wc1 = value;
 8003aa6:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    debugText.resizeToCurrentText();
 8003aaa:	f00c fd0d 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <_ZN15customGraphBaseC1Ev+0x3ec>)
    debugText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PLIR));
 8003ab0:	a90a      	add	r1, sp, #40	; 0x28
 8003ab2:	4650      	mov	r0, sl
 8003ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8003ab6:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8003aba:	f00c fd25 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    timeLabel4.setXY(278, 183);
 8003abe:	ee18 0a10 	vmov	r0, s16
 8003ac2:	22b7      	movs	r2, #183	; 0xb7
 8003ac4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8003ac8:	f7fe ff59 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003acc:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003ad0:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
 8003ad4:	ee18 1a10 	vmov	r1, s16
 8003ad8:	4640      	mov	r0, r8
        this->color = color;
 8003ada:	f8c4 2278 	str.w	r2, [r4, #632]	; 0x278
        boundingArea = calculateBoundingArea();
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003ae2:	f8a4 727c 	strh.w	r7, [r4, #636]	; 0x27c
        boundingArea = calculateBoundingArea();
 8003ae6:	4798      	blx	r3
 8003ae8:	ee18 2a10 	vmov	r2, s16
 8003aec:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8003af0:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003af4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003af8:	f505 5310 	add.w	r3, r5, #9216	; 0x2400
    timeLabel4.resizeToCurrentText();
 8003afc:	ee18 0a10 	vmov	r0, s16
    timeLabel4Buffer[0] = 0;
 8003b00:	f8a4 7424 	strh.w	r7, [r4, #1060]	; 0x424
    timeLabel4.setWildcard(timeLabel4Buffer);
 8003b04:	3324      	adds	r3, #36	; 0x24
 8003b06:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
    timeLabel4.resizeToCurrentText();
 8003b0a:	f00c fcdd 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <_ZN15customGraphBaseC1Ev+0x3ec>)
 8003b10:	f04f 0202 	mov.w	r2, #2
    timeLabel4.setTypedText(touchgfx::TypedText(T_TIMEL4));
 8003b14:	a90a      	add	r1, sp, #40	; 0x28
 8003b16:	ee18 0a10 	vmov	r0, s16
 8003b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b1c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8003b20:	f00c fcf2 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    timeLabel3.setXY(215, 183);
 8003b24:	ee18 0a90 	vmov	r0, s17
 8003b28:	22b7      	movs	r2, #183	; 0xb7
 8003b2a:	21d7      	movs	r1, #215	; 0xd7
 8003b2c:	e022      	b.n	8003b74 <_ZN15customGraphBaseC1Ev+0x410>
 8003b2e:	bf00      	nop
 8003b30:	080239c4 	.word	0x080239c4
 8003b34:	08024fcc 	.word	0x08024fcc
 8003b38:	08024a58 	.word	0x08024a58
 8003b3c:	08023858 	.word	0x08023858
 8003b40:	08024e48 	.word	0x08024e48
 8003b44:	080248a4 	.word	0x080248a4
 8003b48:	08023650 	.word	0x08023650
 8003b4c:	0802370c 	.word	0x0802370c
 8003b50:	08022cdc 	.word	0x08022cdc
 8003b54:	08024ecc 	.word	0x08024ecc
 8003b58:	08023994 	.word	0x08023994
 8003b5c:	080034c1 	.word	0x080034c1
 8003b60:	080239ac 	.word	0x080239ac
 8003b64:	080034df 	.word	0x080034df
 8003b68:	00c80136 	.word	0x00c80136
 8003b6c:	ff0061aa 	.word	0xff0061aa
 8003b70:	000186a0 	.word	0x000186a0
 8003b74:	f7fe ff03 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003b78:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003b7c:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8003b80:	ee18 1a90 	vmov	r1, s17
 8003b84:	4640      	mov	r0, r8
        this->color = color;
 8003b86:	f8c4 22c4 	str.w	r2, [r4, #708]	; 0x2c4
        boundingArea = calculateBoundingArea();
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003b8e:	f8a4 72c8 	strh.w	r7, [r4, #712]	; 0x2c8
        boundingArea = calculateBoundingArea();
 8003b92:	4798      	blx	r3
 8003b94:	ee18 2a90 	vmov	r2, s17
 8003b98:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 8003b9c:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003ba4:	f505 5310 	add.w	r3, r5, #9216	; 0x2400
    timeLabel3.resizeToCurrentText();
 8003ba8:	ee18 0a90 	vmov	r0, s17
    timeLabel3Buffer[0] = 0;
 8003bac:	f8a4 7438 	strh.w	r7, [r4, #1080]	; 0x438
    timeLabel3.setWildcard(timeLabel3Buffer);
 8003bb0:	3338      	adds	r3, #56	; 0x38
 8003bb2:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
    timeLabel3.resizeToCurrentText();
 8003bb6:	f00c fc87 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003bba:	4b7c      	ldr	r3, [pc, #496]	; (8003dac <_ZN15customGraphBaseC1Ev+0x648>)
    timeLabel3.setTypedText(touchgfx::TypedText(T_TIMEL3));
 8003bbc:	a90a      	add	r1, sp, #40	; 0x28
 8003bbe:	ee18 0a90 	vmov	r0, s17
 8003bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8003bca:	f00c fc9d 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    timeLabel2.setXY(151, 183);
 8003bce:	ee19 0a10 	vmov	r0, s18
 8003bd2:	22b7      	movs	r2, #183	; 0xb7
 8003bd4:	2197      	movs	r1, #151	; 0x97
 8003bd6:	f7fe fed2 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003bda:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003bde:	ee19 1a10 	vmov	r1, s18
 8003be2:	4640      	mov	r0, r8
        this->color = color;
 8003be4:	f8c4 2310 	str.w	r2, [r4, #784]	; 0x310
        boundingArea = calculateBoundingArea();
 8003be8:	f8d4 22e0 	ldr.w	r2, [r4, #736]	; 0x2e0
        linespace = space;
 8003bec:	f8a4 7314 	strh.w	r7, [r4, #788]	; 0x314
        boundingArea = calculateBoundingArea();
 8003bf0:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003bf4:	4790      	blx	r2
 8003bf6:	ee19 2a10 	vmov	r2, s18
 8003bfa:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 8003bfe:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c02:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003c06:	f505 5211 	add.w	r2, r5, #9280	; 0x2440
    timeLabel2.resizeToCurrentText();
 8003c0a:	ee19 0a10 	vmov	r0, s18
    timeLabel2Buffer[0] = 0;
 8003c0e:	f8a4 744c 	strh.w	r7, [r4, #1100]	; 0x44c
    timeLabel2.setWildcard(timeLabel2Buffer);
 8003c12:	320c      	adds	r2, #12
 8003c14:	f8c4 2328 	str.w	r2, [r4, #808]	; 0x328
    timeLabel2.resizeToCurrentText();
 8003c18:	f00c fc56 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003c1c:	4b63      	ldr	r3, [pc, #396]	; (8003dac <_ZN15customGraphBaseC1Ev+0x648>)
 8003c1e:	f04f 0204 	mov.w	r2, #4
    timeLabel2.setTypedText(touchgfx::TypedText(T_TIMEL2));
 8003c22:	a90a      	add	r1, sp, #40	; 0x28
 8003c24:	ee19 0a10 	vmov	r0, s18
 8003c28:	930a      	str	r3, [sp, #40]	; 0x28
 8003c2a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8003c2e:	f00c fc6b 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    timeLabel1.setXY(84, 183);
 8003c32:	ee19 0a90 	vmov	r0, s19
 8003c36:	22b7      	movs	r2, #183	; 0xb7
 8003c38:	2154      	movs	r1, #84	; 0x54
 8003c3a:	f7fe fea0 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003c3e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003c42:	ee19 1a90 	vmov	r1, s19
 8003c46:	4640      	mov	r0, r8
        this->color = color;
 8003c48:	f8c4 235c 	str.w	r2, [r4, #860]	; 0x35c
        boundingArea = calculateBoundingArea();
 8003c4c:	f8d4 232c 	ldr.w	r2, [r4, #812]	; 0x32c
        linespace = space;
 8003c50:	f8a4 7360 	strh.w	r7, [r4, #864]	; 0x360
        boundingArea = calculateBoundingArea();
 8003c54:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003c58:	4790      	blx	r2
 8003c5a:	ee19 2a90 	vmov	r2, s19
 8003c5e:	f102 0c3c 	add.w	ip, r2, #60	; 0x3c
 8003c62:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003c66:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003c6a:	f505 5211 	add.w	r2, r5, #9280	; 0x2440
    timeLabel1.resizeToCurrentText();
 8003c6e:	ee19 0a90 	vmov	r0, s19
    timeLabel1Buffer[0] = 0;
 8003c72:	f8a4 7460 	strh.w	r7, [r4, #1120]	; 0x460
    timeLabel1.setWildcard(timeLabel1Buffer);
 8003c76:	3220      	adds	r2, #32
 8003c78:	f8c4 2374 	str.w	r2, [r4, #884]	; 0x374
    timeLabel1.resizeToCurrentText();
 8003c7c:	f00c fc24 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003c80:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <_ZN15customGraphBaseC1Ev+0x648>)
 8003c82:	2205      	movs	r2, #5
    timeLabel1.setTypedText(touchgfx::TypedText(T_TIMEL1));
 8003c84:	a90a      	add	r1, sp, #40	; 0x28
 8003c86:	ee19 0a90 	vmov	r0, s19
 8003c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003c8c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8003c90:	f00c fc3a 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    dateLabel.setXY(248, 3);
 8003c94:	2303      	movs	r3, #3
 8003c96:	4658      	mov	r0, fp
 8003c98:	21f8      	movs	r1, #248	; 0xf8
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fe fe6f 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003ca0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003ca4:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003ca8:	4659      	mov	r1, fp
 8003caa:	4640      	mov	r0, r8
        this->color = color;
 8003cac:	f8c4 23a8 	str.w	r2, [r4, #936]	; 0x3a8
        boundingArea = calculateBoundingArea();
 8003cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003cb4:	f8a4 73ac 	strh.w	r7, [r4, #940]	; 0x3ac
        boundingArea = calculateBoundingArea();
 8003cb8:	4798      	blx	r3
 8003cba:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
 8003cbe:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003cc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    dateLabel.setWildcard(dateLabelBuffer);
 8003cc6:	f505 5311 	add.w	r3, r5, #9280	; 0x2440
    dateLabel.resizeToCurrentText();
 8003cca:	4658      	mov	r0, fp
    dateLabelBuffer[0] = 0;
 8003ccc:	f8a4 7474 	strh.w	r7, [r4, #1140]	; 0x474
    dateLabel.setWildcard(dateLabelBuffer);
 8003cd0:	3334      	adds	r3, #52	; 0x34
 8003cd2:	f8c4 33c0 	str.w	r3, [r4, #960]	; 0x3c0
    dateLabel.resizeToCurrentText();
 8003cd6:	f00c fbf7 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <_ZN15customGraphBaseC1Ev+0x648>)
    dateLabel.setTypedText(touchgfx::TypedText(T_DATE));
 8003cdc:	a90a      	add	r1, sp, #40	; 0x28
 8003cde:	4658      	mov	r0, fp
 8003ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8003ce2:	2306      	movs	r3, #6
 8003ce4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8003ce8:	f00c fc0e 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    y_axisName.setXY(29, 1);
 8003cec:	464a      	mov	r2, r9
 8003cee:	ee1a 0a10 	vmov	r0, s20
 8003cf2:	211d      	movs	r1, #29
 8003cf4:	f7fe fe43 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
        this->color = color;
 8003cf8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        boundingArea = calculateBoundingArea();
 8003cfc:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003d00:	ee1a 1a10 	vmov	r1, s20
 8003d04:	4640      	mov	r0, r8
        this->color = color;
 8003d06:	f8c4 23f4 	str.w	r2, [r4, #1012]	; 0x3f4
        boundingArea = calculateBoundingArea();
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
        linespace = space;
 8003d0e:	f8a4 73f8 	strh.w	r7, [r4, #1016]	; 0x3f8
        boundingArea = calculateBoundingArea();
 8003d12:	4798      	blx	r3
 8003d14:	f505 5310 	add.w	r3, r5, #9216	; 0x2400
 8003d18:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8003d1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    y_axisName.setWildcard(y_axisNameBuffer);
 8003d20:	f505 5312 	add.w	r3, r5, #9344	; 0x2480
    y_axisName.resizeToCurrentText();
 8003d24:	ee1a 0a10 	vmov	r0, s20
    y_axisNameBuffer[0] = 0;
 8003d28:	f8a4 7488 	strh.w	r7, [r4, #1160]	; 0x488
    y_axisName.setWildcard(y_axisNameBuffer);
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
    y_axisName.resizeToCurrentText();
 8003d32:	f00c fbc9 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8003d36:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <_ZN15customGraphBaseC1Ev+0x648>)
    y_axisName.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8JSV));
 8003d38:	a90a      	add	r1, sp, #40	; 0x28
 8003d3a:	ee1a 0a10 	vmov	r0, s20
 8003d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d40:	2307      	movs	r3, #7
 8003d42:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8003d46:	f00c fbdf 	bl	8010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    add(box1);
 8003d4a:	ee1a 1a90 	vmov	r1, s21
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f009 f82e 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(graph1);
 8003d54:	4631      	mov	r1, r6
 8003d56:	4628      	mov	r0, r5
 8003d58:	f009 f82a 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(debugText);
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f009 f826 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(timeLabel4);
 8003d64:	ee18 1a10 	vmov	r1, s16
 8003d68:	4628      	mov	r0, r5
 8003d6a:	f009 f821 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(timeLabel3);
 8003d6e:	ee18 1a90 	vmov	r1, s17
 8003d72:	4628      	mov	r0, r5
 8003d74:	f009 f81c 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(timeLabel2);
 8003d78:	ee19 1a10 	vmov	r1, s18
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	f009 f817 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(timeLabel1);
 8003d82:	ee19 1a90 	vmov	r1, s19
 8003d86:	4628      	mov	r0, r5
 8003d88:	f009 f812 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(dateLabel);
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f009 f80e 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(y_axisName);
 8003d94:	4628      	mov	r0, r5
 8003d96:	ee1a 1a10 	vmov	r1, s20
 8003d9a:	f009 f809 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003d9e:	4628      	mov	r0, r5
 8003da0:	b00d      	add	sp, #52	; 0x34
 8003da2:	ecbd 8b08 	vpop	{d8-d11}
 8003da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	08022cdc 	.word	0x08022cdc

08003db0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003db0:	4770      	bx	lr

08003db2 <_ZN19FrontendApplicationD0Ev>:
 8003db2:	b510      	push	{r4, lr}
 8003db4:	4604      	mov	r4, r0
 8003db6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003dba:	f01b fbc4 	bl	801f546 <_ZdlPvj>
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	bd10      	pop	{r4, pc}

08003dc2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003dc2:	b510      	push	{r4, lr}
 8003dc4:	4604      	mov	r4, r0
    {
        model.tick();
 8003dc6:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8003dca:	f000 f812 	bl	8003df2 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003dce:	4620      	mov	r0, r4
    }
 8003dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003dd4:	f00e b99e 	b.w	8012114 <_ZN8touchgfx11Application15handleTickEventEv>

08003dd8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003ddc:	f7fe fcee 	bl	80027bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003de0:	4b01      	ldr	r3, [pc, #4]	; (8003de8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8003de2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8003de4:	6023      	str	r3, [r4, #0]
}
 8003de6:	bd10      	pop	{r4, pc}
 8003de8:	08023a60 	.word	0x08023a60

08003dec <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8003dec:	2200      	movs	r2, #0
 8003dee:	6002      	str	r2, [r0, #0]
{

}
 8003df0:	4770      	bx	lr

08003df2 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8003df2:	4770      	bx	lr

08003df4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8003df4:	4770      	bx	lr

08003df6 <_ZThn4_N16Screen1PresenterD1Ev>:
 8003df6:	3804      	subs	r0, #4
 8003df8:	4770      	bx	lr

08003dfa <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8003dfa:	4770      	bx	lr

08003dfc <_ZN16Screen1PresenterD0Ev>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4604      	mov	r4, r0
 8003e00:	2110      	movs	r1, #16
 8003e02:	f01b fba0 	bl	801f546 <_ZdlPvj>
 8003e06:	4620      	mov	r0, r4
 8003e08:	bd10      	pop	{r4, pc}

08003e0a <_ZThn4_N16Screen1PresenterD0Ev>:
 8003e0a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e0e:	e7f5      	b.n	8003dfc <_ZN16Screen1PresenterD0Ev>

08003e10 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8003e10:	2200      	movs	r2, #0
    : view(v)
 8003e12:	60c1      	str	r1, [r0, #12]
 8003e14:	6082      	str	r2, [r0, #8]
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8003e18:	b510      	push	{r4, lr}
    : view(v)
 8003e1a:	f102 0408 	add.w	r4, r2, #8
 8003e1e:	3220      	adds	r2, #32
 8003e20:	6004      	str	r4, [r0, #0]
 8003e22:	6042      	str	r2, [r0, #4]
}
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	bf00      	nop
 8003e28:	08023aa4 	.word	0x08023aa4

08003e2c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003e2c:	4770      	bx	lr

08003e2e <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8003e2e:	4770      	bx	lr

08003e30 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003e30:	f7fe bd9b 	b.w	800296a <_ZN15Screen1ViewBase11setupScreenEv>
 8003e34:	0000      	movs	r0, r0
	...

08003e38 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
 8003e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e3a:	4604      	mov	r4, r0
	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_2) == 0x00)
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	484e      	ldr	r0, [pc, #312]	; (8003f78 <_ZN11Screen1View15handleTickEventEv+0x140>)
 8003e40:	f003 fefe 	bl	8007c40 <HAL_GPIO_ReadPin>
 8003e44:	bb80      	cbnz	r0, 8003ea8 <_ZN11Screen1View15handleTickEventEv+0x70>
	{
		if(testCNTR < 500){
 8003e46:	f504 4580 	add.w	r5, r4, #16384	; 0x4000
 8003e4a:	f8d5 12b0 	ldr.w	r1, [r5, #688]	; 0x2b0
 8003e4e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8003e52:	d276      	bcs.n	8003f42 <_ZN11Screen1View15handleTickEventEv+0x10a>
			customGraph1.addPoint(firstTime+testCNTR*180, 20000+10000*cos(testCNTR*(PI/180.0)));
 8003e54:	f504 4385 	add.w	r3, r4, #17024	; 0x4280
 8003e58:	22b4      	movs	r2, #180	; 0xb4
 8003e5a:	ee07 1a90 	vmov	s15, r1
 8003e5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e60:	434a      	muls	r2, r1
 8003e62:	3340      	adds	r3, #64	; 0x40
 8003e64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003e68:	1812      	adds	r2, r2, r0
 8003e6a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8003e6e:	9201      	str	r2, [sp, #4]
 8003e70:	f143 0300 	adc.w	r3, r3, #0
 8003e74:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8003f60 <_ZN11Screen1View15handleTickEventEv+0x128>
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	ee27 0b00 	vmul.f64	d0, d7, d0
 8003e7e:	f01b fb8b 	bl	801f598 <cos>
 8003e82:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003e86:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8003f68 <_ZN11Screen1View15handleTickEventEv+0x130>
 8003e8a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8003f70 <_ZN11Screen1View15handleTickEventEv+0x138>
 8003e8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003e92:	eea0 7b06 	vfma.f64	d7, d0, d6
 8003e96:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8003e9a:	f000 fd23 	bl	80048e4 <_ZN11customGraph8addPointExf>
			testCNTR++;
 8003e9e:	f8d5 32b0 	ldr.w	r3, [r5, #688]	; 0x2b0
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	f8c5 32b0 	str.w	r3, [r5, #688]	; 0x2b0
			customGraph1.setLineColor(0xFFFF00);
			customGraph1.setTimeRange(8);
		}
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_5) == 0x00)
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	4833      	ldr	r0, [pc, #204]	; (8003f78 <_ZN11Screen1View15handleTickEventEv+0x140>)
 8003eac:	f003 fec8 	bl	8007c40 <HAL_GPIO_ReadPin>
 8003eb0:	4605      	mov	r5, r0
 8003eb2:	b938      	cbnz	r0, 8003ec4 <_ZN11Screen1View15handleTickEventEv+0x8c>
	{
		customGraph1.clearAllData();
 8003eb4:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003eb8:	f001 f83d 	bl	8004f36 <_ZN11customGraph12clearAllDataEv>
		testCNTR = 0;
 8003ebc:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8003ec0:	f8c3 52b0 	str.w	r5, [r3, #688]	; 0x2b0
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_3) == 0x00)
 8003ec4:	2108      	movs	r1, #8
 8003ec6:	482c      	ldr	r0, [pc, #176]	; (8003f78 <_ZN11Screen1View15handleTickEventEv+0x140>)
 8003ec8:	f003 feba 	bl	8007c40 <HAL_GPIO_ReadPin>
 8003ecc:	b970      	cbnz	r0, 8003eec <_ZN11Screen1View15handleTickEventEv+0xb4>
	{
		customGraph1.setLineColor(0xFF0000);
 8003ece:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003ed2:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
 8003ed6:	9000      	str	r0, [sp, #0]
 8003ed8:	f001 f820 	bl	8004f1c <_ZN11customGraph12setLineColorEm>
		customGraph1.setYAxisLabel("Current");
 8003edc:	4927      	ldr	r1, [pc, #156]	; (8003f7c <_ZN11Screen1View15handleTickEventEv+0x144>)
 8003ede:	9800      	ldr	r0, [sp, #0]
 8003ee0:	f000 ffe2 	bl	8004ea8 <_ZN11customGraph13setYAxisLabelEPKc>
		customGraph1.setTimeRange(24);
 8003ee4:	2118      	movs	r1, #24
 8003ee6:	9800      	ldr	r0, [sp, #0]
 8003ee8:	f000 fdce 	bl	8004a88 <_ZN11customGraph12setTimeRangeEi>
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_6) == 0x00)
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	4822      	ldr	r0, [pc, #136]	; (8003f78 <_ZN11Screen1View15handleTickEventEv+0x140>)
 8003ef0:	f003 fea6 	bl	8007c40 <HAL_GPIO_ReadPin>
 8003ef4:	b970      	cbnz	r0, 8003f14 <_ZN11Screen1View15handleTickEventEv+0xdc>
	{
		customGraph1.setLineColor(0x00FF00);
 8003ef6:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003efa:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003efe:	9000      	str	r0, [sp, #0]
 8003f00:	f001 f80c 	bl	8004f1c <_ZN11customGraph12setLineColorEm>
		customGraph1.setYAxisLabel("CO2");
 8003f04:	491e      	ldr	r1, [pc, #120]	; (8003f80 <_ZN11Screen1View15handleTickEventEv+0x148>)
 8003f06:	9800      	ldr	r0, [sp, #0]
 8003f08:	f000 ffce 	bl	8004ea8 <_ZN11customGraph13setYAxisLabelEPKc>
		customGraph1.setTimeRange(8);
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	9800      	ldr	r0, [sp, #0]
 8003f10:	f000 fdba 	bl	8004a88 <_ZN11customGraph12setTimeRangeEi>
	}

	if(HAL_GPIO_ReadPin(GPIOK, GPIO_PIN_4) == 0x00)
 8003f14:	2110      	movs	r1, #16
 8003f16:	4818      	ldr	r0, [pc, #96]	; (8003f78 <_ZN11Screen1View15handleTickEventEv+0x140>)
 8003f18:	f003 fe92 	bl	8007c40 <HAL_GPIO_ReadPin>
 8003f1c:	b9e8      	cbnz	r0, 8003f5a <_ZN11Screen1View15handleTickEventEv+0x122>
	{
		customGraph1.setLineColor(0x00FFFF);
 8003f1e:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f26:	9000      	str	r0, [sp, #0]
 8003f28:	f000 fff8 	bl	8004f1c <_ZN11customGraph12setLineColorEm>
		customGraph1.setYAxisLabel("Voltage");
 8003f2c:	9800      	ldr	r0, [sp, #0]
 8003f2e:	4915      	ldr	r1, [pc, #84]	; (8003f84 <_ZN11Screen1View15handleTickEventEv+0x14c>)
 8003f30:	f000 ffba 	bl	8004ea8 <_ZN11customGraph13setYAxisLabelEPKc>
		customGraph1.setTimeRange(1);
 8003f34:	2101      	movs	r1, #1
 8003f36:	9800      	ldr	r0, [sp, #0]
	}
}
 8003f38:	b003      	add	sp, #12
 8003f3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		customGraph1.setTimeRange(1);
 8003f3e:	f000 bda3 	b.w	8004a88 <_ZN11customGraph12setTimeRangeEi>
		else if(testCNTR == 500)
 8003f42:	d1b1      	bne.n	8003ea8 <_ZN11Screen1View15handleTickEventEv+0x70>
			customGraph1.setLineColor(0xFFFF00);
 8003f44:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8003f48:	490f      	ldr	r1, [pc, #60]	; (8003f88 <_ZN11Screen1View15handleTickEventEv+0x150>)
 8003f4a:	9000      	str	r0, [sp, #0]
 8003f4c:	f000 ffe6 	bl	8004f1c <_ZN11customGraph12setLineColorEm>
			customGraph1.setTimeRange(8);
 8003f50:	2108      	movs	r1, #8
 8003f52:	9800      	ldr	r0, [sp, #0]
 8003f54:	f000 fd98 	bl	8004a88 <_ZN11customGraph12setTimeRangeEi>
 8003f58:	e7a6      	b.n	8003ea8 <_ZN11Screen1View15handleTickEventEv+0x70>
}
 8003f5a:	b003      	add	sp, #12
 8003f5c:	bd30      	pop	{r4, r5, pc}
 8003f5e:	bf00      	nop
 8003f60:	aaaaaaab 	.word	0xaaaaaaab
 8003f64:	3f91df46 	.word	0x3f91df46
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	40c38800 	.word	0x40c38800
 8003f70:	00000000 	.word	0x00000000
 8003f74:	40d38800 	.word	0x40d38800
 8003f78:	58022800 	.word	0x58022800
 8003f7c:	08023acc 	.word	0x08023acc
 8003f80:	08023ad4 	.word	0x08023ad4
 8003f84:	08023ad8 	.word	0x08023ad8
 8003f88:	00ffff00 	.word	0x00ffff00

08003f8c <_ZN11Screen1ViewD0Ev>:
 8003f8c:	b510      	push	{r4, lr}
 8003f8e:	4604      	mov	r4, r0
 8003f90:	f244 21c0 	movw	r1, #17088	; 0x42c0
 8003f94:	f01b fad7 	bl	801f546 <_ZdlPvj>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd10      	pop	{r4, pc}
 8003f9c:	0000      	movs	r0, r0
	...

08003fa0 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	f7fe fcf8 	bl	8002998 <_ZN15Screen1ViewBaseC1Ev>
 8003fa8:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <_ZN11Screen1ViewC1Ev+0x30>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	f504 4380 	add.w	r3, r4, #16384	; 0x4000
 8003fb2:	a105      	add	r1, pc, #20	; (adr r1, 8003fc8 <_ZN11Screen1ViewC1Ev+0x28>)
 8003fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fb8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
 8003fbc:	f504 4385 	add.w	r3, r4, #17024	; 0x4280
 8003fc0:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
}
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	bd10      	pop	{r4, pc}
 8003fc8:	64398b44 	.word	0x64398b44
 8003fcc:	00000000 	.word	0x00000000
 8003fd0:	08023ae8 	.word	0x08023ae8

08003fd4 <_ZN11customGraphD1Ev>:

class customGraph : public customGraphBase
{
public:
    customGraph();
    virtual ~customGraph() {}
 8003fd4:	4770      	bx	lr

08003fd6 <_ZN11customGraph13graph1clickedEN8touchgfx17AbstractDataGraph15GraphClickEventE>:
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);

	}

	virtual void graph1clicked(AbstractDataGraph::GraphClickEvent value)
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	ab02      	add	r3, sp, #8
 8003fda:	e903 0006 	stmdb	r3, {r1, r2}
//			debugText.invalidate();
		}
		if(value.clickEvent.getType() == ClickEvent::RELEASED){

		}
	}
 8003fde:	b002      	add	sp, #8
 8003fe0:	4770      	bx	lr

08003fe2 <_ZN11customGraphD0Ev>:
    virtual ~customGraph() {}
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	f242 51f8 	movw	r1, #9720	; 0x25f8
 8003fea:	f01b faac 	bl	801f546 <_ZdlPvj>
 8003fee:	4620      	mov	r0, r4
 8003ff0:	bd10      	pop	{r4, pc}

08003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
            return v < 0 ? Q5((v + 1) - toQ5(1).v / 2).to<int>() : Q5(v + toQ5(1).v / 2).to<int>();
 8003ff2:	6803      	ldr	r3, [r0, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	da02      	bge.n	8003ffe <_ZNK8touchgfx7CWRUtil2Q55roundEv+0xc>
            return (T)((T)v / (T)Rasterizer::POLY_BASE_SIZE);
 8003ff8:	f1b3 000f 	subs.w	r0, r3, #15
 8003ffc:	d501      	bpl.n	8004002 <_ZNK8touchgfx7CWRUtil2Q55roundEv+0x10>
 8003ffe:	f103 0010 	add.w	r0, r3, #16
 8004002:	1140      	asrs	r0, r0, #5
 8004004:	4770      	bx	lr
	...

08004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>:
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 8004008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800400a:	4615      	mov	r5, r2
    	Unicode::snprintf(timeLabelBuf, 10, "%02d:%02d",time->tm_hour, time->tm_min);
 800400c:	685a      	ldr	r2, [r3, #4]
    void updateTimeLabel(touchgfx::TextAreaWithOneWildcard * timelabel, touchgfx::Unicode::UnicodeChar * timeLabelBuf, struct tm * time)
 800400e:	460c      	mov	r4, r1
    	Unicode::snprintf(timeLabelBuf, 10, "%02d:%02d",time->tm_hour, time->tm_min);
 8004010:	210a      	movs	r1, #10
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	4628      	mov	r0, r5
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm+0x34>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f011 f9a3 	bl	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    	timelabel->invalidate();
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	4620      	mov	r0, r4
 8004022:	64a5      	str	r5, [r4, #72]	; 0x48
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	4798      	blx	r3
    	timelabel->resizeToCurrentText();
 8004028:	4620      	mov	r0, r4
 800402a:	f00c fa4d 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    	timelabel->invalidate();
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	4620      	mov	r0, r4
 8004032:	695b      	ldr	r3, [r3, #20]
    }
 8004034:	b003      	add	sp, #12
 8004036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    	timelabel->invalidate();
 800403a:	4718      	bx	r3
 800403c:	08023b14 	.word	0x08023b14

08004040 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE>:
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004044:	ed2d 8b02 	vpush	{d8}
 8004048:	b087      	sub	sp, #28
 800404a:	f500 590c 	add.w	r9, r0, #8960	; 0x2300
 800404e:	f500 580b 	add.w	r8, r0, #8896	; 0x22c0
 8004052:	f500 570a 	add.w	r7, r0, #8832	; 0x2280
 8004056:	ab06      	add	r3, sp, #24
 8004058:	f500 5a09 	add.w	sl, r0, #8768	; 0x2240
 800405c:	4604      	mov	r4, r0
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 800405e:	f100 0658 	add.w	r6, r0, #88	; 0x58
 8004062:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
 8004066:	f109 092c 	add.w	r9, r9, #44	; 0x2c
 800406a:	f108 0820 	add.w	r8, r8, #32
 800406e:	3714      	adds	r7, #20
 8004070:	f10a 0a08 	add.w	sl, sl, #8
    virtual void graph1Dragged(AbstractDataGraph::GraphDragEvent value)
 8004074:	e903 0006 	stmdb	r3, {r1, r2}
 8004078:	4613      	mov	r3, r2
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
    {
        return dragNewX;
 800407a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
        return dragOldX;
 800407e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0.0){
 8004082:	4293      	cmp	r3, r2
 8004084:	f280 8290 	bge.w	80045a8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x568>
 8004088:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	f340 80dc 	ble.w	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
			scrollCounter -= (customGraphTimeRange/float(2.0));
 800409c:	f8d5 25e8 	ldr.w	r2, [r5, #1512]	; 0x5e8
 80040a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80040a4:	f8b0 116e 	ldrh.w	r1, [r0, #366]	; 0x16e
 80040a8:	ee07 2a10 	vmov	s14, r2
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80040ac:	f9b5 2330 	ldrsh.w	r2, [r5, #816]	; 0x330
			scrollCounter -= (customGraphTimeRange/float(2.0));
 80040b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80040b4:	3210      	adds	r2, #16
			scrollCounter -= (customGraphTimeRange/float(2.0));
 80040b6:	eee7 7a66 	vfms.f32	s15, s14, s13
 80040ba:	edc3 7a00 	vstr	s15, [r3]
 80040be:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
 80040c2:	4419      	add	r1, r3
 80040c4:	f8b0 3098 	ldrh.w	r3, [r0, #152]	; 0x98
 80040c8:	1a5b      	subs	r3, r3, r1
			if(timeLabel1.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80040ca:	f9b0 105c 	ldrsh.w	r1, [r0, #92]	; 0x5c
 80040ce:	f9b0 00c4 	ldrsh.w	r0, [r0, #196]	; 0xc4
 80040d2:	4401      	add	r1, r0
 80040d4:	fa01 f383 	sxtah	r3, r1, r3
 80040d8:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80040dc:	1a5b      	subs	r3, r3, r1
 80040de:	429a      	cmp	r2, r3
 80040e0:	f280 8279 	bge.w	80045d6 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x596>
 80040e4:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80040e8:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel2.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80040ec:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80040f0:	4419      	add	r1, r3
 80040f2:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80040f6:	f9b5 22e4 	ldrsh.w	r2, [r5, #740]	; 0x2e4
 80040fa:	1a5b      	subs	r3, r3, r1
 80040fc:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 8004100:	3210      	adds	r2, #16
 8004102:	4401      	add	r1, r0
 8004104:	fa01 f383 	sxtah	r3, r1, r3
 8004108:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 800410c:	1a5b      	subs	r3, r3, r1
 800410e:	429a      	cmp	r2, r3
 8004110:	db26      	blt.n	8004160 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x120>
				if(timeLabel2_pageCNTR > 0){
 8004112:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
 8004116:	2b00      	cmp	r3, #0
 8004118:	dd22      	ble.n	8004160 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x120>
					timeLabel2_pageCNTR--;
 800411a:	3b01      	subs	r3, #1
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 800411c:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 8004120:	f504 5b15 	add.w	fp, r4, #9536	; 0x2540
    	localtime_r(timestamp, date_time);
 8004124:	f504 5015 	add.w	r0, r4, #9536	; 0x2540
					timeLabel2_pageCNTR--;
 8004128:	f8c5 34e8 	str.w	r3, [r5, #1256]	; 0x4e8
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 800412c:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
    	localtime_r(timestamp, date_time);
 8004130:	3018      	adds	r0, #24
					timeLabel2_time = timeLabel2_time - customGraphInterval*numberofGrid*60;
 8004132:	4353      	muls	r3, r2
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	4353      	muls	r3, r2
 8004138:	e9db 2106 	ldrd	r2, r1, [fp, #24]
 800413c:	1ad2      	subs	r2, r2, r3
 800413e:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 8004142:	e9cb 2306 	strd	r2, r3, [fp, #24]
 8004146:	f10b 0b20 	add.w	fp, fp, #32
    	localtime_r(timestamp, date_time);
 800414a:	4659      	mov	r1, fp
 800414c:	f01c f890 	bl	8020270 <localtime_r>
					updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004150:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 8004154:	465b      	mov	r3, fp
 8004156:	4641      	mov	r1, r8
 8004158:	320c      	adds	r2, #12
 800415a:	4620      	mov	r0, r4
 800415c:	f7ff ff54 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004160:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004164:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel3.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 8004168:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 800416c:	4419      	add	r1, r3
 800416e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004172:	f9b5 2298 	ldrsh.w	r2, [r5, #664]	; 0x298
 8004176:	1a5b      	subs	r3, r3, r1
 8004178:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 800417c:	3210      	adds	r2, #16
 800417e:	4401      	add	r1, r0
 8004180:	fa01 f383 	sxtah	r3, r1, r3
 8004184:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004188:	1a5b      	subs	r3, r3, r1
 800418a:	429a      	cmp	r2, r3
 800418c:	db26      	blt.n	80041dc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x19c>
				if(timeLabel3_pageCNTR > 0){
 800418e:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
 8004192:	2b00      	cmp	r3, #0
 8004194:	dd22      	ble.n	80041dc <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x19c>
					timeLabel3_pageCNTR--;
 8004196:	3b01      	subs	r3, #1
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 8004198:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 800419c:	f504 5b16 	add.w	fp, r4, #9600	; 0x2580
    	localtime_r(timestamp, date_time);
 80041a0:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
					timeLabel3_pageCNTR--;
 80041a4:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80041a8:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
    	localtime_r(timestamp, date_time);
 80041ac:	3008      	adds	r0, #8
					timeLabel3_time = timeLabel3_time - customGraphInterval*numberofGrid*60;
 80041ae:	4353      	muls	r3, r2
 80041b0:	223c      	movs	r2, #60	; 0x3c
 80041b2:	4353      	muls	r3, r2
 80041b4:	e9db 2102 	ldrd	r2, r1, [fp, #8]
 80041b8:	1ad2      	subs	r2, r2, r3
 80041ba:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 80041be:	e9cb 2302 	strd	r2, r3, [fp, #8]
 80041c2:	f10b 0b10 	add.w	fp, fp, #16
    	localtime_r(timestamp, date_time);
 80041c6:	4659      	mov	r1, fp
 80041c8:	f01c f852 	bl	8020270 <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 80041cc:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 80041d0:	465b      	mov	r3, fp
 80041d2:	4639      	mov	r1, r7
 80041d4:	3238      	adds	r2, #56	; 0x38
 80041d6:	4620      	mov	r0, r4
 80041d8:	f7ff ff16 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 80041dc:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80041e0:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
			if(timeLabel4.getX() + 16 >= graph1.getX() + graph1.getGraphAreaMarginLeft() + graph1.getGraphAreaWidth() - graph1.getGraphAreaMarginRight()){
 80041e4:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
 80041e8:	4419      	add	r1, r3
 80041ea:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 80041ee:	f9b5 224c 	ldrsh.w	r2, [r5, #588]	; 0x24c
 80041f2:	1a5b      	subs	r3, r3, r1
 80041f4:	f9b4 105c 	ldrsh.w	r1, [r4, #92]	; 0x5c
 80041f8:	3210      	adds	r2, #16
 80041fa:	4401      	add	r1, r0
 80041fc:	fa01 f383 	sxtah	r3, r1, r3
 8004200:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004204:	1a5b      	subs	r3, r3, r1
 8004206:	429a      	cmp	r2, r3
 8004208:	db24      	blt.n	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
				if(timeLabel4_pageCNTR > 0){
 800420a:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
 800420e:	2b00      	cmp	r3, #0
 8004210:	dd20      	ble.n	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
					timeLabel4_pageCNTR--;
 8004212:	3b01      	subs	r3, #1
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004214:	f8d5 25ec 	ldr.w	r2, [r5, #1516]	; 0x5ec
 8004218:	f504 5b17 	add.w	fp, r4, #9664	; 0x25c0
    	localtime_r(timestamp, date_time);
 800421c:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
					timeLabel4_pageCNTR--;
 8004220:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 8004224:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
    	localtime_r(timestamp, date_time);
 8004228:	3038      	adds	r0, #56	; 0x38
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 800422a:	435a      	muls	r2, r3
 800422c:	233c      	movs	r3, #60	; 0x3c
 800422e:	435a      	muls	r2, r3
 8004230:	e95b 3102 	ldrd	r3, r1, [fp, #-8]
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	eb61 72e2 	sbc.w	r2, r1, r2, asr #31
    	localtime_r(timestamp, date_time);
 800423a:	4659      	mov	r1, fp
					timeLabel4_time = timeLabel4_time - customGraphInterval*numberofGrid*60;
 800423c:	e94b 3202 	strd	r3, r2, [fp, #-8]
    	localtime_r(timestamp, date_time);
 8004240:	f01c f816 	bl	8020270 <localtime_r>
					updateTimeLabel(&timeLabel3, timeLabel4Buffer, &timeLabel4_time_tm);
 8004244:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 8004248:	465b      	mov	r3, fp
 800424a:	4639      	mov	r1, r7
 800424c:	3224      	adds	r2, #36	; 0x24
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff feda 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
		graph1.setGraphRangeX(0 + int(scrollCounter), (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + int(scrollCounter));
 8004254:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
 8004258:	4630      	mov	r0, r6
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004262:	ee17 ba90 	vmov	fp, s15
 8004266:	f7fe ff23 	bl	80030b0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
        return scaled2intX(graphRangeMinX);
 800426a:	f8d4 3184 	ldr.w	r3, [r4, #388]	; 0x184
        return scaled2int(i, xScale);
 800426e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        if (i >= 0)
 8004272:	2b00      	cmp	r3, #0
 8004274:	f2c0 82d2 	blt.w	800481c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x7dc>
            return ((i * 2 + scale) / scale) / 2;
 8004278:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800427c:	fb93 f2f1 	sdiv	r2, r3, r1
 8004280:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8004284:	1052      	asrs	r2, r2, #1
 8004286:	1a82      	subs	r2, r0, r2
 8004288:	4659      	mov	r1, fp
 800428a:	4630      	mov	r0, r6
 800428c:	445a      	add	r2, fp
		Unicode::snprintf(debugTextBuffer, 10, "%d", (graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 800428e:	f504 5b10 	add.w	fp, r4, #9216	; 0x2400
		graph1.setGraphRangeX(0 + int(scrollCounter), (graph1.getGraphRangeXMaxAsInt() - graph1.getGraphRangeXMinAsInt()) + int(scrollCounter));
 8004292:	f7fe fdce 	bl	8002e32 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
		Unicode::snprintf(debugTextBuffer, 10, "%d", (graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004296:	4630      	mov	r0, r6
 8004298:	f7fe ff58 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800429c:	9003      	str	r0, [sp, #12]
 800429e:	4630      	mov	r0, r6
 80042a0:	f10b 0b10 	add.w	fp, fp, #16
 80042a4:	f7fe ff2b 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	4adf      	ldr	r2, [pc, #892]	; (8004628 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5e8>)
 80042ac:	210a      	movs	r1, #10
 80042ae:	1a1b      	subs	r3, r3, r0
 80042b0:	4658      	mov	r0, fp
 80042b2:	ee07 3a90 	vmov	s15, r3
 80042b6:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 80042ba:	ee07 3a10 	vmov	s14, r3
 80042be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042c2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80042c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80042ce:	ed8d 7b00 	vstr	d7, [sp]
 80042d2:	f011 f847 	bl	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
		debugText.invalidate();
 80042d6:	f504 5007 	add.w	r0, r4, #8640	; 0x21c0
 80042da:	f8c5 b244 	str.w	fp, [r5, #580]	; 0x244
 80042de:	303c      	adds	r0, #60	; 0x3c
 80042e0:	9003      	str	r0, [sp, #12]
 80042e2:	f00e ffbd 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
		debugText.resizeToCurrentText();
 80042e6:	9803      	ldr	r0, [sp, #12]
 80042e8:	f00c f8ee 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
		debugText.invalidate();
 80042ec:	9803      	ldr	r0, [sp, #12]
 80042ee:	f00e ffb7 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
		graph1.setGraphRangeYAuto(true,(graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7fe ff2a 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 80042f8:	4683      	mov	fp, r0
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7fe feff 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004300:	ebab 0300 	sub.w	r3, fp, r0
 8004304:	2101      	movs	r1, #1
 8004306:	4630      	mov	r0, r6
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 8004310:	ee07 3a10 	vmov	s14, r3
 8004314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004318:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800431c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004320:	f7fe fe74 	bl	800300c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>
		graph1MajorYAxisLabel.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004324:	4630      	mov	r0, r6
 8004326:	f7fe ff11 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 800432a:	4683      	mov	fp, r0
 800432c:	4630      	mov	r0, r6
 800432e:	f7fe fee6 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004332:	f505 63be 	add.w	r3, r5, #1520	; 0x5f0
 8004336:	ed93 8a00 	vldr	s16, [r3]
 800433a:	ebab 0300 	sub.w	r3, fp, r0
 800433e:	ee07 3a10 	vmov	s14, r3
 8004342:	eef8 8ac8 	vcvt.f32.s32	s17, s16
 8004346:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800434a:	eec7 7a28 	vdiv.f32	s15, s14, s17
        const float fs = f * scale;
 800434e:	ed95 7a78 	vldr	s14, [r5, #480]	; 0x1e0
 8004352:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004356:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800435a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004362:	f2c0 8267 	blt.w	8004834 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x7f4>
            return int(fs + 0.5f);
 8004366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800436a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800436e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004372:	ee17 3a90 	vmov	r3, s15
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
{
    return (d < 0) ? -d : d;
 8004376:	2b00      	cmp	r3, #0
		graph1MajorYAxisGrid.setInterval((graph1.getGraphRangeYMaxAsInt() - graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004378:	4630      	mov	r0, r6
 800437a:	bfb8      	it	lt
 800437c:	425b      	neglt	r3, r3
        labelInterval = abs(interval);
 800437e:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
 8004382:	f7fe fee3 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004386:	4683      	mov	fp, r0
 8004388:	4630      	mov	r0, r6
 800438a:	f7fe feb8 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 800438e:	ebab 0300 	sub.w	r3, fp, r0
        const float fs = f * scale;
 8004392:	edd5 7a67 	vldr	s15, [r5, #412]	; 0x19c
 8004396:	ee07 3a10 	vmov	s14, r3
 800439a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800439e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043a2:	eec7 6a28 	vdiv.f32	s13, s14, s17
 80043a6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80043aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ae:	bf48      	it	mi
 80043b0:	eef1 6a66 	vnegmi.f32	s13, s13
 80043b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
        if (fs >= 0)
 80043b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	f2c0 824c 	blt.w	800485c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x81c>
            return int(fs + 0.5f);
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80043c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 3a90 	vmov	r3, s15
 80043d4:	2b00      	cmp	r3, #0
        return graphArea.getWidth() - (leftPadding + rightPadding);
 80043d6:	f8b4 116e 	ldrh.w	r1, [r4, #366]	; 0x16e
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*numberofGrid)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80043da:	f8d5 65ec 	ldr.w	r6, [r5, #1516]	; 0x5ec
 80043de:	ee18 ca10 	vmov	ip, s16
 80043e2:	bfb8      	it	lt
 80043e4:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 80043e6:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
 80043ea:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 80043ee:	440b      	add	r3, r1
 80043f0:	f8b4 1098 	ldrh.w	r1, [r4, #152]	; 0x98
 80043f4:	1ac9      	subs	r1, r1, r3
 80043f6:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
 80043fa:	4373      	muls	r3, r6
 80043fc:	b209      	sxth	r1, r1
 80043fe:	fb0c 6603 	mla	r6, ip, r3, r6
 8004402:	3901      	subs	r1, #1
 8004404:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004408:	1a12      	subs	r2, r2, r0
 800440a:	1a30      	subs	r0, r6, r0
 800440c:	f7ff f90d 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004410:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004414:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
            return Q5(v + q5.v);
 8004418:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800441c:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8004420:	4431      	add	r1, r6
 8004422:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel1_Pos = CWRUtil::muldiv_toQ5(((timeLabel1_pageCNTR*customGraphInterval*numberofGrid)+1*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004426:	f8c5 04d0 	str.w	r0, [r5, #1232]	; 0x4d0
 800442a:	1a71      	subs	r1, r6, r1
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800442c:	f8d5 64e8 	ldr.w	r6, [r5, #1256]	; 0x4e8
 8004430:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004434:	435e      	muls	r6, r3
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	9203      	str	r2, [sp, #12]
 800443a:	b209      	sxth	r1, r1
 800443c:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 8004440:	3901      	subs	r1, #1
 8004442:	fb02 3306 	mla	r3, r2, r6, r3
 8004446:	9a03      	ldr	r2, [sp, #12]
 8004448:	1a12      	subs	r2, r2, r0
 800444a:	1a18      	subs	r0, r3, r0
 800444c:	f7ff f8ed 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004450:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004454:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 8004458:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800445c:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8004460:	4431      	add	r1, r6
 8004462:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel2_Pos = CWRUtil::muldiv_toQ5(((timeLabel2_pageCNTR*customGraphInterval*numberofGrid)+2*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 8004466:	f8c5 04d4 	str.w	r0, [r5, #1236]	; 0x4d4
 800446a:	1a71      	subs	r1, r6, r1
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800446c:	f8d5 64ec 	ldr.w	r6, [r5, #1260]	; 0x4ec
 8004470:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 8004474:	435e      	muls	r6, r3
 8004476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800447a:	9203      	str	r2, [sp, #12]
 800447c:	b209      	sxth	r1, r1
 800447e:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 8004482:	3901      	subs	r1, #1
 8004484:	fb02 3306 	mla	r3, r2, r6, r3
 8004488:	9a03      	ldr	r2, [sp, #12]
 800448a:	1a12      	subs	r2, r2, r0
 800448c:	1a18      	subs	r0, r3, r0
 800448e:	f7ff f8cc 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
        return leftPadding;
 8004492:	f9b4 116e 	ldrsh.w	r1, [r4, #366]	; 0x16e
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004496:	f8b4 6170 	ldrh.w	r6, [r4, #368]	; 0x170
 800449a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*numberofGrid)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 800449e:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 80044a2:	4431      	add	r1, r6
 80044a4:	f8b4 6098 	ldrh.w	r6, [r4, #152]	; 0x98
		timeLabel3_Pos = CWRUtil::muldiv_toQ5(((timeLabel3_pageCNTR*customGraphInterval*numberofGrid)+3*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80044a8:	f8c5 04d8 	str.w	r0, [r5, #1240]	; 0x4d8
 80044ac:	1a71      	subs	r1, r6, r1
		timeLabel4_Pos = CWRUtil::muldiv_toQ5(((timeLabel4_pageCNTR*customGraphInterval*numberofGrid)+4*customGraphInterval) - graph1.getGraphRangeXMinScaled(), graph1.getGraphAreaWidth() - 1, graph1.getGraphRangeXMaxScaled() - graph1.getGraphRangeXMinScaled()) + CWRUtil::toQ5(graph1.getGraphAreaPaddingLeft());
 80044ae:	f8d5 64f0 	ldr.w	r6, [r5, #1264]	; 0x4f0
 80044b2:	e9d4 0261 	ldrd	r0, r2, [r4, #388]	; 0x184
 80044b6:	435e      	muls	r6, r3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	9203      	str	r2, [sp, #12]
 80044bc:	b209      	sxth	r1, r1
 80044be:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 80044c2:	3901      	subs	r1, #1
 80044c4:	fb02 3306 	mla	r3, r2, r6, r3
 80044c8:	9a03      	ldr	r2, [sp, #12]
 80044ca:	1a12      	subs	r2, r2, r0
 80044cc:	1a18      	subs	r0, r3, r0
 80044ce:	f7ff f8ac 	bl	800362a <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 80044d2:	f9b4 316e 	ldrsh.w	r3, [r4, #366]	; 0x16e
 80044d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80044da:	f8c5 04dc 	str.w	r0, [r5, #1244]	; 0x4dc
		timeLabel1.setX(graph1.getX() + timeLabel1_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel1.getTextWidth()/2) + 1);
 80044de:	f504 5013 	add.w	r0, r4, #9408	; 0x24c0
 80044e2:	3010      	adds	r0, #16
 80044e4:	f7ff fd85 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80044e8:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 80044ec:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80044f0:	4683      	mov	fp, r0
 80044f2:	4648      	mov	r0, r9
 80044f4:	4433      	add	r3, r6
 80044f6:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 80044fa:	3301      	adds	r3, #1
 80044fc:	1b9b      	subs	r3, r3, r6
 80044fe:	b29e      	uxth	r6, r3
 8004500:	f00b fcfa 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004504:	445e      	add	r6, fp
 8004506:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel2.setX(graph1.getX() + timeLabel2_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel2.getTextWidth()/2) + 1);
 800450a:	f504 5013 	add.w	r0, r4, #9408	; 0x24c0
        rect.x = x;
 800450e:	f8a5 6330 	strh.w	r6, [r5, #816]	; 0x330
 8004512:	3014      	adds	r0, #20
 8004514:	f7ff fd6d 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004518:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 800451c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004520:	4681      	mov	r9, r0
 8004522:	4640      	mov	r0, r8
 8004524:	4433      	add	r3, r6
 8004526:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 800452a:	3301      	adds	r3, #1
 800452c:	1b9b      	subs	r3, r3, r6
 800452e:	b29e      	uxth	r6, r3
 8004530:	f00b fce2 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004534:	444e      	add	r6, r9
 8004536:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel3.setX(graph1.getX() + timeLabel3_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 800453a:	f504 5013 	add.w	r0, r4, #9408	; 0x24c0
 800453e:	f8a5 62e4 	strh.w	r6, [r5, #740]	; 0x2e4
 8004542:	3018      	adds	r0, #24
 8004544:	f7ff fd55 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004548:	f8b4 60c4 	ldrh.w	r6, [r4, #196]	; 0xc4
 800454c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004550:	4680      	mov	r8, r0
 8004552:	4638      	mov	r0, r7
 8004554:	4433      	add	r3, r6
 8004556:	f8b4 60f0 	ldrh.w	r6, [r4, #240]	; 0xf0
 800455a:	3301      	adds	r3, #1
 800455c:	1b9b      	subs	r3, r3, r6
 800455e:	b29e      	uxth	r6, r3
 8004560:	f00b fcca 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004564:	4446      	add	r6, r8
 8004566:	eba6 0650 	sub.w	r6, r6, r0, lsr #1
		timeLabel4.setX(graph1.getX() + timeLabel4_Pos.round()  + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 800456a:	f504 5013 	add.w	r0, r4, #9408	; 0x24c0
 800456e:	f8a5 6298 	strh.w	r6, [r5, #664]	; 0x298
 8004572:	301c      	adds	r0, #28
 8004574:	f7ff fd3d 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8004578:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 800457c:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004580:	4606      	mov	r6, r0
        return rect.width;
 8004582:	f8b4 40f0 	ldrh.w	r4, [r4, #240]	; 0xf0
 8004586:	4650      	mov	r0, sl
 8004588:	4413      	add	r3, r2
 800458a:	3301      	adds	r3, #1
 800458c:	1b1b      	subs	r3, r3, r4
 800458e:	b29c      	uxth	r4, r3
 8004590:	f00b fcb2 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004594:	4434      	add	r4, r6
 8004596:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
        rect.x = x;
 800459a:	f8a5 424c 	strh.w	r4, [r5, #588]	; 0x24c
	}
 800459e:	b007      	add	sp, #28
 80045a0:	ecbd 8b02 	vpop	{d8}
 80045a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 80045a8:	f77f ae54 	ble.w	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
 80045ac:	4630      	mov	r0, r6
 80045ae:	f7fe fd7f 	bl	80030b0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>
        return usedCapacity;
 80045b2:	f9b4 1176 	ldrsh.w	r1, [r4, #374]	; 0x176
 80045b6:	f8d5 25ec 	ldr.w	r2, [r5, #1516]	; 0x5ec
 80045ba:	1e4b      	subs	r3, r1, #1
 80045bc:	1a80      	subs	r0, r0, r2
 80045be:	b21b      	sxth	r3, r3
        assert(index >= 0 && index < usedCapacity);
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db01      	blt.n	80045c8 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x588>
 80045c4:	428b      	cmp	r3, r1
 80045c6:	db37      	blt.n	8004638 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5f8>
 80045c8:	4b18      	ldr	r3, [pc, #96]	; (800462c <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5ec>)
 80045ca:	f240 61db 	movw	r1, #1755	; 0x6db
 80045ce:	4a18      	ldr	r2, [pc, #96]	; (8004630 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5f0>)
 80045d0:	4818      	ldr	r0, [pc, #96]	; (8004634 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x5f4>)
 80045d2:	f01b fddf 	bl	8020194 <__assert_func>
				if(timeLabel1_pageCNTR > 0){
 80045d6:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f77f ad82 	ble.w	80040e4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xa4>
					timeLabel1_pageCNTR--;
 80045e0:	3b01      	subs	r3, #1
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 80045e2:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
 80045e6:	f504 5b14 	add.w	fp, r4, #9472	; 0x2500
    	localtime_r(timestamp, date_time);
 80045ea:	f504 5014 	add.w	r0, r4, #9472	; 0x2500
					timeLabel1_pageCNTR--;
 80045ee:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 80045f2:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
    	localtime_r(timestamp, date_time);
 80045f6:	3028      	adds	r0, #40	; 0x28
					timeLabel1_time = timeLabel1_time - customGraphInterval*numberofGrid*60;
 80045f8:	4353      	muls	r3, r2
 80045fa:	223c      	movs	r2, #60	; 0x3c
 80045fc:	4353      	muls	r3, r2
 80045fe:	e9db 210a 	ldrd	r2, r1, [fp, #40]	; 0x28
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	eb61 73e3 	sbc.w	r3, r1, r3, asr #31
 8004608:	e9cb 230a 	strd	r2, r3, [fp, #40]	; 0x28
 800460c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
    	localtime_r(timestamp, date_time);
 8004610:	4659      	mov	r1, fp
 8004612:	f01b fe2d 	bl	8020270 <localtime_r>
					updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004616:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 800461a:	465b      	mov	r3, fp
 800461c:	4649      	mov	r1, r9
 800461e:	3220      	adds	r2, #32
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff fcf1 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
 8004626:	e55d      	b.n	80040e4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0xa4>
 8004628:	08023b1e 	.word	0x08023b1e
 800462c:	08023314 	.word	0x08023314
 8004630:	080233f0 	.word	0x080233f0
 8004634:	08023385 	.word	0x08023385
        return xValues[index];
 8004638:	f8d4 1194 	ldr.w	r1, [r4, #404]	; 0x194
 800463c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
        return scaled2int(i, xScale);
 8004640:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
        if (i >= 0)
 8004644:	2b00      	cmp	r3, #0
 8004646:	f2c0 80dd 	blt.w	8004804 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x7c4>
            return ((i * 2 + scale) / scale) / 2;
 800464a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800464e:	fb93 f3f1 	sdiv	r3, r3, r1
 8004652:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004656:	105b      	asrs	r3, r3, #1
		else if(value.dragEvent.getNewX() < value.dragEvent.getOldX() && (graph1.getGraphRangeXMaxAsInt()-customGraphInterval) < graph1.indexToDataPointXAsInt(graph1.getUsedCapacity()-1)){
 8004658:	4298      	cmp	r0, r3
 800465a:	f6bf adfb 	bge.w	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
			scrollCounter += (customGraphTimeRange/float(2.0));
 800465e:	f8d5 35e8 	ldr.w	r3, [r5, #1512]	; 0x5e8
 8004662:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004666:	f9b4 00c4 	ldrsh.w	r0, [r4, #196]	; 0xc4
			scrollCounter += (customGraphTimeRange/float(2.0));
 800466a:	ee07 3a90 	vmov	s15, r3
		if(value.dragEvent.getNewX() > value.dragEvent.getOldX() && scrollCounter>0.0){
 800466e:	f505 639c 	add.w	r3, r5, #1248	; 0x4e0
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004672:	f9b5 1330 	ldrsh.w	r1, [r5, #816]	; 0x330
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004676:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800467a:	edd3 7a00 	vldr	s15, [r3]
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 800467e:	310f      	adds	r1, #15
			scrollCounter += (customGraphTimeRange/float(2.0));
 8004680:	eee7 7a26 	vfma.f32	s15, s14, s13
 8004684:	edc3 7a00 	vstr	s15, [r3]
			if(timeLabel1.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004688:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800468c:	4403      	add	r3, r0
 800468e:	f9b4 00f0 	ldrsh.w	r0, [r4, #240]	; 0xf0
 8004692:	1a1b      	subs	r3, r3, r0
 8004694:	4299      	cmp	r1, r3
 8004696:	da22      	bge.n	80046de <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x69e>
				timeLabel1_pageCNTR++;
 8004698:	f8d5 34e4 	ldr.w	r3, [r5, #1252]	; 0x4e4
				timeLabel1_time = timeLabel1_time + customGraphInterval*numberofGrid*60;
 800469c:	f504 5b14 	add.w	fp, r4, #9472	; 0x2500
    	localtime_r(timestamp, date_time);
 80046a0:	f504 5014 	add.w	r0, r4, #9472	; 0x2500
				timeLabel1_pageCNTR++;
 80046a4:	3301      	adds	r3, #1
    	localtime_r(timestamp, date_time);
 80046a6:	3028      	adds	r0, #40	; 0x28
				timeLabel1_pageCNTR++;
 80046a8:	f8c5 34e4 	str.w	r3, [r5, #1252]	; 0x4e4
				timeLabel1_time = timeLabel1_time + customGraphInterval*numberofGrid*60;
 80046ac:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 80046b0:	435a      	muls	r2, r3
 80046b2:	233c      	movs	r3, #60	; 0x3c
 80046b4:	435a      	muls	r2, r3
 80046b6:	e9db 310a 	ldrd	r3, r1, [fp, #40]	; 0x28
 80046ba:	18d3      	adds	r3, r2, r3
 80046bc:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
 80046c0:	e9cb 320a 	strd	r3, r2, [fp, #40]	; 0x28
 80046c4:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
    	localtime_r(timestamp, date_time);
 80046c8:	4659      	mov	r1, fp
 80046ca:	f01b fdd1 	bl	8020270 <localtime_r>
				updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 80046ce:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 80046d2:	465b      	mov	r3, fp
 80046d4:	4649      	mov	r1, r9
 80046d6:	3220      	adds	r2, #32
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff fc95 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel2.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 80046de:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 80046e2:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80046e6:	f9b5 22e4 	ldrsh.w	r2, [r5, #740]	; 0x2e4
 80046ea:	440b      	add	r3, r1
 80046ec:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80046f0:	320f      	adds	r2, #15
 80046f2:	1a5b      	subs	r3, r3, r1
 80046f4:	429a      	cmp	r2, r3
 80046f6:	da24      	bge.n	8004742 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x702>
				timeLabel2_pageCNTR++;
 80046f8:	f8d5 34e8 	ldr.w	r3, [r5, #1256]	; 0x4e8
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 80046fc:	f504 5b15 	add.w	fp, r4, #9536	; 0x2540
 8004700:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
    	localtime_r(timestamp, date_time);
 8004704:	f504 5015 	add.w	r0, r4, #9536	; 0x2540
				timeLabel2_pageCNTR++;
 8004708:	3301      	adds	r3, #1
    	localtime_r(timestamp, date_time);
 800470a:	3018      	adds	r0, #24
				timeLabel2_pageCNTR++;
 800470c:	f8c5 34e8 	str.w	r3, [r5, #1256]	; 0x4e8
				timeLabel2_time = timeLabel2_time + customGraphInterval*numberofGrid*60;
 8004710:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8004714:	4353      	muls	r3, r2
 8004716:	223c      	movs	r2, #60	; 0x3c
 8004718:	4353      	muls	r3, r2
 800471a:	e9db 2106 	ldrd	r2, r1, [fp, #24]
 800471e:	189a      	adds	r2, r3, r2
 8004720:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8004724:	e9cb 2306 	strd	r2, r3, [fp, #24]
 8004728:	f10b 0b20 	add.w	fp, fp, #32
    	localtime_r(timestamp, date_time);
 800472c:	4659      	mov	r1, fp
 800472e:	f01b fd9f 	bl	8020270 <localtime_r>
				updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004732:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 8004736:	465b      	mov	r3, fp
 8004738:	4641      	mov	r1, r8
 800473a:	320c      	adds	r2, #12
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff fc63 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel3.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 8004742:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 8004746:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 800474a:	f9b5 2298 	ldrsh.w	r2, [r5, #664]	; 0x298
 800474e:	440b      	add	r3, r1
 8004750:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 8004754:	320f      	adds	r2, #15
 8004756:	1a5b      	subs	r3, r3, r1
 8004758:	429a      	cmp	r2, r3
 800475a:	da24      	bge.n	80047a6 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x766>
				timeLabel3_pageCNTR++;
 800475c:	f8d5 34ec 	ldr.w	r3, [r5, #1260]	; 0x4ec
				timeLabel3_time = timeLabel3_time + customGraphInterval*numberofGrid*60;
 8004760:	f504 5b16 	add.w	fp, r4, #9600	; 0x2580
 8004764:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
    	localtime_r(timestamp, date_time);
 8004768:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
				timeLabel3_pageCNTR++;
 800476c:	3301      	adds	r3, #1
    	localtime_r(timestamp, date_time);
 800476e:	3008      	adds	r0, #8
				timeLabel3_pageCNTR++;
 8004770:	f8c5 34ec 	str.w	r3, [r5, #1260]	; 0x4ec
				timeLabel3_time = timeLabel3_time + customGraphInterval*numberofGrid*60;
 8004774:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8004778:	4353      	muls	r3, r2
 800477a:	223c      	movs	r2, #60	; 0x3c
 800477c:	4353      	muls	r3, r2
 800477e:	e9db 2102 	ldrd	r2, r1, [fp, #8]
 8004782:	189a      	adds	r2, r3, r2
 8004784:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8004788:	e9cb 2302 	strd	r2, r3, [fp, #8]
 800478c:	f10b 0b10 	add.w	fp, fp, #16
    	localtime_r(timestamp, date_time);
 8004790:	4659      	mov	r1, fp
 8004792:	f01b fd6d 	bl	8020270 <localtime_r>
				updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004796:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 800479a:	465b      	mov	r3, fp
 800479c:	4639      	mov	r1, r7
 800479e:	3238      	adds	r2, #56	; 0x38
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff fc31 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
			if(timeLabel4.getX() + 16 <= graph1.getX() + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight()){
 80047a6:	f9b4 10c4 	ldrsh.w	r1, [r4, #196]	; 0xc4
 80047aa:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 80047ae:	f9b5 224c 	ldrsh.w	r2, [r5, #588]	; 0x24c
 80047b2:	440b      	add	r3, r1
 80047b4:	f9b4 10f0 	ldrsh.w	r1, [r4, #240]	; 0xf0
 80047b8:	320f      	adds	r2, #15
 80047ba:	1a5b      	subs	r3, r3, r1
 80047bc:	429a      	cmp	r2, r3
 80047be:	f6bf ad49 	bge.w	8004254 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x214>
				timeLabel4_pageCNTR++;
 80047c2:	f8d5 34f0 	ldr.w	r3, [r5, #1264]	; 0x4f0
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 80047c6:	f504 5b17 	add.w	fp, r4, #9664	; 0x25c0
 80047ca:	f8d5 25ec 	ldr.w	r2, [r5, #1516]	; 0x5ec
    	localtime_r(timestamp, date_time);
 80047ce:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
				timeLabel4_pageCNTR++;
 80047d2:	3301      	adds	r3, #1
    	localtime_r(timestamp, date_time);
 80047d4:	3038      	adds	r0, #56	; 0x38
				timeLabel4_pageCNTR++;
 80047d6:	f8c5 34f0 	str.w	r3, [r5, #1264]	; 0x4f0
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 80047da:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 80047de:	435a      	muls	r2, r3
 80047e0:	233c      	movs	r3, #60	; 0x3c
 80047e2:	435a      	muls	r2, r3
 80047e4:	e95b 3102 	ldrd	r3, r1, [fp, #-8]
 80047e8:	18d3      	adds	r3, r2, r3
 80047ea:	eb41 72e2 	adc.w	r2, r1, r2, asr #31
    	localtime_r(timestamp, date_time);
 80047ee:	4659      	mov	r1, fp
				timeLabel4_time = timeLabel4_time + customGraphInterval*numberofGrid*60;
 80047f0:	e94b 3202 	strd	r3, r2, [fp, #-8]
    	localtime_r(timestamp, date_time);
 80047f4:	f01b fd3c 	bl	8020270 <localtime_r>
				updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 80047f8:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 80047fc:	465b      	mov	r3, fp
 80047fe:	4651      	mov	r1, sl
 8004800:	3224      	adds	r2, #36	; 0x24
 8004802:	e524      	b.n	800424e <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x20e>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8004804:	f06f 0c01 	mvn.w	ip, #1
 8004808:	fb0c 1303 	mla	r3, ip, r3, r1
 800480c:	3b01      	subs	r3, #1
 800480e:	fb93 f3f1 	sdiv	r3, r3, r1
 8004812:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8004816:	105b      	asrs	r3, r3, #1
 8004818:	425b      	negs	r3, r3
 800481a:	e71d      	b.n	8004658 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x618>
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	fb02 1203 	mla	r2, r2, r3, r1
 8004824:	3a01      	subs	r2, #1
 8004826:	fb92 f2f1 	sdiv	r2, r2, r1
 800482a:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800482e:	1052      	asrs	r2, r2, #1
 8004830:	4252      	negs	r2, r2
 8004832:	e528      	b.n	8004286 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x246>
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8004834:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004838:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800483c:	ee17 3a10 	vmov	r3, s14
 8004840:	3b01      	subs	r3, #1
 8004842:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004846:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800484e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004852:	ee17 2a90 	vmov	r2, s15
 8004856:	441a      	add	r2, r3
 8004858:	4613      	mov	r3, r2
 800485a:	e58c      	b.n	8004376 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x336>
 800485c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004860:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004864:	ee17 3a10 	vmov	r3, s14
 8004868:	3b01      	subs	r3, #1
 800486a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800486e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004876:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800487a:	ee17 2a90 	vmov	r2, s15
 800487e:	441a      	add	r2, r3
 8004880:	4613      	mov	r3, r2
 8004882:	e5a7      	b.n	80043d4 <_ZN11customGraph13graph1DraggedEN8touchgfx17AbstractDataGraph14GraphDragEventE+0x394>

08004884 <_ZN11customGraphC1Ev>:
#include <gui/containers/customGraph.hpp>

customGraph::customGraph()
 8004884:	b510      	push	{r4, lr}
 8004886:	4604      	mov	r4, r0
 8004888:	f7fe ff6c 	bl	8003764 <_ZN15customGraphBaseC1Ev>
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <_ZN11customGraphC1Ev+0x5c>)
            : v(0)
 800488e:	2200      	movs	r2, #0
 8004890:	2000      	movs	r0, #0
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	f504 5300 	add.w	r3, r4, #8192	; 0x2000
 8004898:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800489c:	f8c3 24d0 	str.w	r2, [r3, #1232]	; 0x4d0
 80048a0:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4
 80048a4:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
 80048a8:	f8c3 24dc 	str.w	r2, [r3, #1244]	; 0x4dc
 80048ac:	6008      	str	r0, [r1, #0]
{

}
 80048ae:	4620      	mov	r0, r4
customGraph::customGraph()
 80048b0:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
 80048b4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
 80048b8:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
 80048bc:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 80048c0:	f883 2524 	strb.w	r2, [r3, #1316]	; 0x524
 80048c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048c8:	f8a3 25e4 	strh.w	r2, [r3, #1508]	; 0x5e4
 80048cc:	2218      	movs	r2, #24
 80048ce:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
 80048d2:	227d      	movs	r2, #125	; 0x7d
 80048d4:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
 80048d8:	2204      	movs	r2, #4
 80048da:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
}
 80048de:	bd10      	pop	{r4, pc}
 80048e0:	08023b40 	.word	0x08023b40

080048e4 <_ZN11customGraph8addPointExf>:
	setYAxisLabel("y_Title");
}


void customGraph::addPoint(time_t x, float y)
{
 80048e4:	b530      	push	{r4, r5, lr}
 80048e6:	4604      	mov	r4, r0
	struct tm x_tm;
	float x_axisVal;

	if(graph1.getUsedCapacity() < customGraphMaxPoint){
 80048e8:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
 80048ec:	f9b4 1176 	ldrsh.w	r1, [r4, #374]	; 0x176
 80048f0:	f9b5 05e4 	ldrsh.w	r0, [r5, #1508]	; 0x5e4
{
 80048f4:	ed2d 8b02 	vpush	{d8}
	if(graph1.getUsedCapacity() < customGraphMaxPoint){
 80048f8:	4288      	cmp	r0, r1
{
 80048fa:	b08d      	sub	sp, #52	; 0x34
 80048fc:	eeb0 8a40 	vmov.f32	s16, s0
 8004900:	e9cd 2300 	strd	r2, r3, [sp]
	if(graph1.getUsedCapacity() < customGraphMaxPoint){
 8004904:	dd3b      	ble.n	800497e <_ZN11customGraph8addPointExf+0x9a>
		if(firstDataTaken == 0)
 8004906:	f895 1524 	ldrb.w	r1, [r5, #1316]	; 0x524
 800490a:	2900      	cmp	r1, #0
 800490c:	d14f      	bne.n	80049ae <_ZN11customGraph8addPointExf+0xca>
		{
			firstDataTaken = 1;
 800490e:	2101      	movs	r1, #1
    	localtime_r(timestamp, date_time);
 8004910:	f504 5013 	add.w	r0, r4, #9408	; 0x24c0
 8004914:	f885 1524 	strb.w	r1, [r5, #1316]	; 0x524
			firstDataTime = x;
 8004918:	f504 5114 	add.w	r1, r4, #9472	; 0x2500
 800491c:	3038      	adds	r0, #56	; 0x38
 800491e:	e941 2302 	strd	r2, r3, [r1, #-8]
 8004922:	f01b fca5 	bl	8020270 <localtime_r>
        const float fs = f * scale;
 8004926:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 800492a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8004a84 <_ZN11customGraph8addPointExf+0x1a0>
			convert_timeStampToDateTime(&firstDataTime, &firstDataTime_tm);
			graph1.addDataPoint(float(0.0), y);
 800492e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004936:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 800493a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	db20      	blt.n	8004986 <_ZN11customGraph8addPointExf+0xa2>
            return int(fs + 0.5f);
 8004944:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800494c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004950:	ee17 1a90 	vmov	r1, s15
        const float fs = f * scale;
 8004954:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
 8004958:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800495c:	ee20 0a08 	vmul.f32	s0, s0, s16
        if (fs >= 0)
 8004960:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004968:	db78      	blt.n	8004a5c <_ZN11customGraph8addPointExf+0x178>
            return int(fs + 0.5f);
 800496a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800496e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004972:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004976:	ee17 2a90 	vmov	r2, s15
        return addValue(float2scaledX(x), float2scaledY(y));
 800497a:	f00a fb43 	bl	800f004 <_ZN8touchgfx9GraphData8addValueEii>
				x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
				graph1.addDataPoint(float(x_axisVal), y);
			}
		}
	}
}
 800497e:	b00d      	add	sp, #52	; 0x34
 8004980:	ecbd 8b02 	vpop	{d8}
 8004984:	bd30      	pop	{r4, r5, pc}
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8004986:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800498a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800498e:	ee17 3a10 	vmov	r3, s14
 8004992:	1e59      	subs	r1, r3, #1
 8004994:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004998:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800499c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049a4:	ee17 3a90 	vmov	r3, s15
 80049a8:	440b      	add	r3, r1
 80049aa:	4619      	mov	r1, r3
 80049ac:	e7d2      	b.n	8004954 <_ZN11customGraph8addPointExf+0x70>
 80049ae:	a903      	add	r1, sp, #12
 80049b0:	4668      	mov	r0, sp
 80049b2:	f01b fc5d 	bl	8020270 <localtime_r>
			if(x_tm.tm_year == firstDataTime_tm.tm_year && x_tm.tm_mon == firstDataTime_tm.tm_mon && (x_tm.tm_mday - firstDataTime_tm.tm_mday) < 2)
 80049b6:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
 80049ba:	9a08      	ldr	r2, [sp, #32]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1de      	bne.n	800497e <_ZN11customGraph8addPointExf+0x9a>
 80049c0:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
 80049c4:	9a07      	ldr	r2, [sp, #28]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d1d9      	bne.n	800497e <_ZN11customGraph8addPointExf+0x9a>
 80049ca:	f8d5 250c 	ldr.w	r2, [r5, #1292]	; 0x50c
 80049ce:	9b06      	ldr	r3, [sp, #24]
 80049d0:	1a9b      	subs	r3, r3, r2
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	dcd3      	bgt.n	800497e <_ZN11customGraph8addPointExf+0x9a>
				x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 80049d6:	f8d5 1508 	ldr.w	r1, [r5, #1288]	; 0x508
				graph1.addDataPoint(float(x_axisVal), y);
 80049da:	f104 0058 	add.w	r0, r4, #88	; 0x58
				x_axisVal = ((x_tm.tm_mday - firstDataTime_tm.tm_mday)*24*60) + ((x_tm.tm_hour - firstDataTime_tm.tm_hour)*60) + (x_tm.tm_min - firstDataTime_tm.tm_min);
 80049de:	9a05      	ldr	r2, [sp, #20]
        const float fs = f * scale;
 80049e0:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80049e4:	1a52      	subs	r2, r2, r1
 80049e6:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80049ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80049ee:	434b      	muls	r3, r1
 80049f0:	213c      	movs	r1, #60	; 0x3c
 80049f2:	fb01 3302 	mla	r3, r1, r2, r3
 80049f6:	f8d5 1504 	ldr.w	r1, [r5, #1284]	; 0x504
 80049fa:	9a04      	ldr	r2, [sp, #16]
 80049fc:	1a52      	subs	r2, r2, r1
 80049fe:	4413      	add	r3, r2
 8004a00:	ee07 3a90 	vmov	s15, r3
 8004a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a08:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a14:	db0e      	blt.n	8004a34 <_ZN11customGraph8addPointExf+0x150>
            return int(fs + 0.5f);
 8004a16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a22:	ee17 1a90 	vmov	r1, s15
        const float fs = f * scale;
 8004a26:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 8004a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2e:	ee27 0a88 	vmul.f32	s0, s15, s16
 8004a32:	e795      	b.n	8004960 <_ZN11customGraph8addPointExf+0x7c>
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8004a34:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004a38:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004a3c:	ee17 3a10 	vmov	r3, s14
 8004a40:	1e59      	subs	r1, r3, #1
 8004a42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004a46:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a52:	ee17 3a90 	vmov	r3, s15
 8004a56:	440b      	add	r3, r1
 8004a58:	4619      	mov	r1, r3
 8004a5a:	e7e4      	b.n	8004a26 <_ZN11customGraph8addPointExf+0x142>
 8004a5c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a64:	ee17 3a90 	vmov	r3, s15
 8004a68:	1e5a      	subs	r2, r3, #1
 8004a6a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004a6e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8004a72:	ee30 0a07 	vadd.f32	s0, s0, s14
 8004a76:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004a7a:	ee10 3a10 	vmov	r3, s0
 8004a7e:	4413      	add	r3, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	e77a      	b.n	800497a <_ZN11customGraph8addPointExf+0x96>
 8004a84:	00000000 	.word	0x00000000

08004a88 <_ZN11customGraph12setTimeRangeEi>:


void customGraph::setTimeRange(int hours)
{

	if(hours == 1 || hours ==8 || hours == 24)
 8004a88:	2901      	cmp	r1, #1
{
 8004a8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	ed2d 8b02 	vpush	{d8}
 8004a94:	b085      	sub	sp, #20
	if(hours == 1 || hours ==8 || hours == 24)
 8004a96:	f000 81db 	beq.w	8004e50 <_ZN11customGraph12setTimeRangeEi+0x3c8>
		customGraphTimeRange = hours;
 8004a9a:	2908      	cmp	r1, #8
 8004a9c:	bf14      	ite	ne
 8004a9e:	2318      	movne	r3, #24
 8004aa0:	2308      	moveq	r3, #8
 8004aa2:	f504 5500 	add.w	r5, r4, #8192	; 0x2000
	else
		customGraphTimeRange = 24;

	customGraphInterval = (hours*60)/numberofGrid;
 8004aa6:	f04f 093c 	mov.w	r9, #60	; 0x3c

	timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004aaa:	f504 5814 	add.w	r8, r4, #9472	; 0x2500
 8004aae:	f504 5014 	add.w	r0, r4, #9472	; 0x2500
	customGraphInterval = (hours*60)/numberofGrid;
 8004ab2:	fb09 fb01 	mul.w	fp, r9, r1
	convert_timeStampToDateTime(&timeLabel1_time, &timeLabel1_time_tm);

	timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004ab6:	f504 5715 	add.w	r7, r4, #9536	; 0x2540
 8004aba:	f8c5 35e8 	str.w	r3, [r5, #1512]	; 0x5e8
 8004abe:	3028      	adds	r0, #40	; 0x28
	customGraphInterval = (hours*60)/numberofGrid;
 8004ac0:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
	convert_timeStampToDateTime(&timeLabel2_time, &timeLabel2_time_tm);

	timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 8004ac4:	f504 5616 	add.w	r6, r4, #9600	; 0x2580
	convert_timeStampToDateTime(&timeLabel3_time, &timeLabel3_time_tm);

	timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 8004ac8:	f504 5a17 	add.w	sl, r4, #9664	; 0x25c0
	customGraphInterval = (hours*60)/numberofGrid;
 8004acc:	fb9b f3f3 	sdiv	r3, fp, r3
	timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004ad0:	e958 2102 	ldrd	r2, r1, [r8, #-8]
	customGraphInterval = (hours*60)/numberofGrid;
 8004ad4:	f8c5 35ec 	str.w	r3, [r5, #1516]	; 0x5ec
	timeLabel1_time = firstDataTime + customGraphInterval*60;
 8004ad8:	fb09 f303 	mul.w	r3, r9, r3
 8004adc:	18d2      	adds	r2, r2, r3
 8004ade:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
 8004ae2:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
 8004ae6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8004aea:	4641      	mov	r1, r8
 8004aec:	f01b fbc0 	bl	8020270 <localtime_r>
	timeLabel2_time = timeLabel1_time + customGraphInterval*60;
 8004af0:	f8d5 15ec 	ldr.w	r1, [r5, #1516]	; 0x5ec
 8004af4:	f504 5015 	add.w	r0, r4, #9536	; 0x2540
 8004af8:	fb09 f101 	mul.w	r1, r9, r1
 8004afc:	3018      	adds	r0, #24
 8004afe:	e958 3202 	ldrd	r3, r2, [r8, #-8]
 8004b02:	185b      	adds	r3, r3, r1
 8004b04:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8004b08:	e9c7 3206 	strd	r3, r2, [r7, #24]
 8004b0c:	3720      	adds	r7, #32
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f01b fbae 	bl	8020270 <localtime_r>
	timeLabel3_time = timeLabel2_time + customGraphInterval*60;
 8004b14:	f8d5 15ec 	ldr.w	r1, [r5, #1516]	; 0x5ec
 8004b18:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
 8004b1c:	fb09 f101 	mul.w	r1, r9, r1
 8004b20:	3008      	adds	r0, #8
 8004b22:	e957 3202 	ldrd	r3, r2, [r7, #-8]
 8004b26:	185b      	adds	r3, r3, r1
 8004b28:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8004b2c:	e9c6 3202 	strd	r3, r2, [r6, #8]
 8004b30:	3610      	adds	r6, #16
 8004b32:	4631      	mov	r1, r6
 8004b34:	f01b fb9c 	bl	8020270 <localtime_r>
	timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 8004b38:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
 8004b3c:	f504 5016 	add.w	r0, r4, #9600	; 0x2580
 8004b40:	4651      	mov	r1, sl
 8004b42:	fb09 f903 	mul.w	r9, r9, r3
 8004b46:	3038      	adds	r0, #56	; 0x38
 8004b48:	e956 3202 	ldrd	r3, r2, [r6, #-8]
 8004b4c:	eb13 0309 	adds.w	r3, r3, r9
 8004b50:	eb42 72e9 	adc.w	r2, r2, r9, asr #31
	convert_timeStampToDateTime(&timeLabel4_time, &timeLabel4_time_tm);

	Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 8004b54:	f504 5911 	add.w	r9, r4, #9280	; 0x2440
	timeLabel4_time = timeLabel3_time + customGraphInterval*60;
 8004b58:	e94a 3202 	strd	r3, r2, [sl, #-8]
 8004b5c:	f01b fb88 	bl	8020270 <localtime_r>
	Unicode::snprintf(dateLabelBuffer, 10, "%02d-%02d-%02d",firstDataTime_tm.tm_mday, firstDataTime_tm.tm_mon, firstDataTime_tm.tm_year-100);
 8004b60:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
 8004b64:	f109 0934 	add.w	r9, r9, #52	; 0x34
 8004b68:	4ace      	ldr	r2, [pc, #824]	; (8004ea4 <_ZN11customGraph12setTimeRangeEi+0x41c>)
 8004b6a:	3b64      	subs	r3, #100	; 0x64
 8004b6c:	210a      	movs	r1, #10
 8004b6e:	4648      	mov	r0, r9
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
 8004b7c:	f010 fbf2 	bl	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	dateLabel.setWildcard(dateLabelBuffer);
	dateLabel.invalidate();
 8004b80:	f504 500d 	add.w	r0, r4, #9024	; 0x2340
 8004b84:	f8c5 93c0 	str.w	r9, [r5, #960]	; 0x3c0
	dateLabel.resizeToCurrentText();
	dateLabel.invalidate();

	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004b88:	f504 590c 	add.w	r9, r4, #8960	; 0x2300
	dateLabel.invalidate();
 8004b8c:	3038      	adds	r0, #56	; 0x38
	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004b8e:	f109 092c 	add.w	r9, r9, #44	; 0x2c
	dateLabel.invalidate();
 8004b92:	9003      	str	r0, [sp, #12]
 8004b94:	f00e fb64 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
	dateLabel.resizeToCurrentText();
 8004b98:	9803      	ldr	r0, [sp, #12]
 8004b9a:	f00b fc95 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	dateLabel.invalidate();
 8004b9e:	9803      	ldr	r0, [sp, #12]
 8004ba0:	f00e fb5e 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004ba4:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 8004ba8:	4643      	mov	r3, r8
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004baa:	f504 580b 	add.w	r8, r4, #8896	; 0x22c0
	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004bae:	3220      	adds	r2, #32
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	4620      	mov	r0, r4
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004bb4:	f108 0820 	add.w	r8, r8, #32
	updateTimeLabel(&timeLabel1, timeLabel1Buffer, &timeLabel1_time_tm);
 8004bb8:	f7ff fa26 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004bbc:	f504 5211 	add.w	r2, r4, #9280	; 0x2440
 8004bc0:	463b      	mov	r3, r7
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004bc2:	f504 570a 	add.w	r7, r4, #8832	; 0x2280
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004bc6:	320c      	adds	r2, #12
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4620      	mov	r0, r4
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004bcc:	3714      	adds	r7, #20
	updateTimeLabel(&timeLabel2, timeLabel2Buffer, &timeLabel2_time_tm);
 8004bce:	f7ff fa1b 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004bd2:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 8004bd6:	4633      	mov	r3, r6
	updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004bd8:	f504 5609 	add.w	r6, r4, #8768	; 0x2240
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004bdc:	3238      	adds	r2, #56	; 0x38
 8004bde:	4639      	mov	r1, r7
 8004be0:	4620      	mov	r0, r4
	updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004be2:	3608      	adds	r6, #8
	updateTimeLabel(&timeLabel3, timeLabel3Buffer, &timeLabel3_time_tm);
 8004be4:	f7ff fa10 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004be8:	f504 5210 	add.w	r2, r4, #9216	; 0x2400
 8004bec:	4653      	mov	r3, sl

	customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004bee:	f104 0a58 	add.w	sl, r4, #88	; 0x58
	updateTimeLabel(&timeLabel4, timeLabel4Buffer, &timeLabel4_time_tm);
 8004bf2:	3224      	adds	r2, #36	; 0x24
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff fa06 	bl	8004008 <_ZN11customGraph15updateTimeLabelEPN8touchgfx23TextAreaWithOneWildcardEPtP2tm>
	customGraphBase::graph1.setGraphRangeX(0, hours*60);
 8004bfc:	465a      	mov	r2, fp
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4650      	mov	r0, sl
 8004c02:	f7fe f916 	bl	8002e32 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
 8004c06:	f8d5 35ec 	ldr.w	r3, [r5, #1516]	; 0x5ec
        setIntervalScaled(abs(interval) * dataScale);
 8004c0a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bfb8      	it	lt
 8004c12:	425b      	neglt	r3, r3
 8004c14:	4353      	muls	r3, r2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bfb8      	it	lt
 8004c1a:	425b      	neglt	r3, r3
        gridInterval = abs(interval);
 8004c1c:	f8c5 315c 	str.w	r3, [r5, #348]	; 0x15c
 8004c20:	230a      	movs	r3, #10
	customGraphBase::graph1MajorXAxisGrid.setInterval(customGraphInterval);
	for(int i=0; i<10; i++)
		customGraphBase::graph1.setGraphRangeYAuto(true, (customGraphBase::graph1.getGraphRangeYMaxAsInt() - customGraphBase::graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004c22:	4650      	mov	r0, sl
 8004c24:	9303      	str	r3, [sp, #12]
 8004c26:	f7fe fa91 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004c2a:	4683      	mov	fp, r0
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	f7fe fa66 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004c32:	ebab 0300 	sub.w	r3, fp, r0
 8004c36:	2101      	movs	r1, #1
 8004c38:	4650      	mov	r0, sl
 8004c3a:	ee07 3a90 	vmov	s15, r3
 8004c3e:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 8004c42:	ee07 3a10 	vmov	s14, r3
 8004c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c4a:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 8004c4e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004c52:	f7fe f9db 	bl	800300c <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>
	for(int i=0; i<10; i++)
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	d1e2      	bne.n	8004c22 <_ZN11customGraph12setTimeRangeEi+0x19a>
	customGraphBase::graph1MajorYAxisLabel.setInterval((customGraphBase::graph1.getGraphRangeYMaxAsInt() - customGraphBase::graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004c5c:	4650      	mov	r0, sl
 8004c5e:	f7fe fa75 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004c62:	4683      	mov	fp, r0
 8004c64:	4650      	mov	r0, sl
 8004c66:	f7fe fa4a 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004c6a:	f505 63be 	add.w	r3, r5, #1520	; 0x5f0
 8004c6e:	ed93 8a00 	vldr	s16, [r3]
 8004c72:	ebab 0300 	sub.w	r3, fp, r0
 8004c76:	ee07 3a10 	vmov	s14, r3
 8004c7a:	eef8 8ac8 	vcvt.f32.s32	s17, s16
 8004c7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c82:	eec7 7a28 	vdiv.f32	s15, s14, s17
        const float fs = f * scale;
 8004c86:	ed95 7a78 	vldr	s14, [r5, #480]	; 0x1e0
 8004c8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (fs >= 0)
 8004c92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	f2c0 80db 	blt.w	8004e54 <_ZN11customGraph12setTimeRangeEi+0x3cc>
            return int(fs + 0.5f);
 8004c9e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004ca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ca6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004caa:	ee17 3a90 	vmov	r3, s15
 8004cae:	2b00      	cmp	r3, #0
	customGraphBase::graph1MajorYAxisGrid.setInterval((customGraphBase::graph1.getGraphRangeYMaxAsInt() - customGraphBase::graph1.getGraphRangeYMinAsInt())/float(numberofGrid));
 8004cb0:	4650      	mov	r0, sl
 8004cb2:	bfb8      	it	lt
 8004cb4:	425b      	neglt	r3, r3
 8004cb6:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
 8004cba:	f7fe fa47 	bl	800314c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>
 8004cbe:	4683      	mov	fp, r0
 8004cc0:	4650      	mov	r0, sl
 8004cc2:	f7fe fa1c 	bl	80030fe <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>
 8004cc6:	ebab 0300 	sub.w	r3, fp, r0
        const float fs = f * scale;
 8004cca:	edd5 7a67 	vldr	s15, [r5, #412]	; 0x19c
 8004cce:	ee07 3a10 	vmov	s14, r3
 8004cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cda:	eec7 6a28 	vdiv.f32	s13, s14, s17
 8004cde:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8004ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce6:	bf48      	it	mi
 8004ce8:	eef1 6a66 	vnegmi.f32	s13, s13
 8004cec:	ee67 7aa6 	vmul.f32	s15, s15, s13
        if (fs >= 0)
 8004cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	f2c0 80c0 	blt.w	8004e7c <_ZN11customGraph12setTimeRangeEi+0x3f4>
            return int(fs + 0.5f);
 8004cfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d08:	ee17 3a90 	vmov	r3, s15
 8004d0c:	2b00      	cmp	r3, #0
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8004d0e:	f8b4 a170 	ldrh.w	sl, [r4, #368]	; 0x170

	customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel1.getTextWidth()/2) + 1);
 8004d12:	ee18 2a10 	vmov	r2, s16
 8004d16:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
 8004d1a:	bfb8      	it	lt
 8004d1c:	425b      	neglt	r3, r3
 8004d1e:	4648      	mov	r0, r9
 8004d20:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
 8004d24:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 8004d28:	449a      	add	sl, r3
 8004d2a:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004d2e:	eba3 030a 	sub.w	r3, r3, sl
 8004d32:	b21b      	sxth	r3, r3
 8004d34:	fb93 faf2 	sdiv	sl, r3, r2
 8004d38:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 8004d3c:	fa1f fa8a 	uxth.w	sl, sl
        return rect.width;
 8004d40:	449b      	add	fp, r3
 8004d42:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 8004d46:	f10b 0b01 	add.w	fp, fp, #1
 8004d4a:	ebab 0b03 	sub.w	fp, fp, r3
 8004d4e:	f00b f8d3 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004d52:	f8b4 916e 	ldrh.w	r9, [r4, #366]	; 0x16e
 8004d56:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004d5a:	fa1f fb8b 	uxth.w	fp, fp
 8004d5e:	444b      	add	r3, r9
 8004d60:	f8b4 9098 	ldrh.w	r9, [r4, #152]	; 0x98
 8004d64:	44da      	add	sl, fp
 8004d66:	eba9 0903 	sub.w	r9, r9, r3
	customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel2.getTextWidth()/2) + 1);
 8004d6a:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
	customGraphBase::timeLabel1.setX(graph1.getX() + (graph1.getGraphAreaWidth()*1/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel1.getTextWidth()/2) + 1);
 8004d6e:	ebaa 0a50 	sub.w	sl, sl, r0, lsr #1
	customGraphBase::timeLabel2.setX(graph1.getX() + (graph1.getGraphAreaWidth()*2/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel2.getTextWidth()/2) + 1);
 8004d72:	4640      	mov	r0, r8
 8004d74:	fa0f f989 	sxth.w	r9, r9
        rect.x = x;
 8004d78:	f8a5 a330 	strh.w	sl, [r5, #816]	; 0x330
 8004d7c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8004d80:	f8b4 a05c 	ldrh.w	sl, [r4, #92]	; 0x5c
 8004d84:	fb99 f9f3 	sdiv	r9, r9, r3
 8004d88:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 8004d8c:	fa1f f989 	uxth.w	r9, r9
        return rect.width;
 8004d90:	449a      	add	sl, r3
 8004d92:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 8004d96:	f10a 0a01 	add.w	sl, sl, #1
 8004d9a:	ebaa 0a03 	sub.w	sl, sl, r3
 8004d9e:	f00b f8ab 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004da2:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
 8004da6:	f8b4 2170 	ldrh.w	r2, [r4, #368]	; 0x170
 8004daa:	fa1f fa8a 	uxth.w	sl, sl
 8004dae:	441a      	add	r2, r3
 8004db0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004db4:	44d1      	add	r9, sl
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	eba9 0950 	sub.w	r9, r9, r0, lsr #1
	customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	b21b      	sxth	r3, r3
        rect.x = x;
 8004dc0:	f8a5 92e4 	strh.w	r9, [r5, #740]	; 0x2e4
 8004dc4:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8004dc8:	f8d5 35f0 	ldr.w	r3, [r5, #1520]	; 0x5f0
 8004dcc:	f8b4 905c 	ldrh.w	r9, [r4, #92]	; 0x5c
 8004dd0:	fb98 f8f3 	sdiv	r8, r8, r3
 8004dd4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
 8004dd8:	fa1f f888 	uxth.w	r8, r8
        return rect.width;
 8004ddc:	4499      	add	r9, r3
 8004dde:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
 8004de2:	f109 0901 	add.w	r9, r9, #1
 8004de6:	eba9 0903 	sub.w	r9, r9, r3
 8004dea:	f00b f885 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004dee:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
 8004df2:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8004df6:	fa1f f989 	uxth.w	r9, r9
 8004dfa:	441a      	add	r2, r3
 8004dfc:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8004e00:	44c8      	add	r8, r9
 8004e02:	1a9b      	subs	r3, r3, r2
	customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004e04:	f8d5 25f0 	ldr.w	r2, [r5, #1520]	; 0x5f0
	customGraphBase::timeLabel3.setX(graph1.getX() + (graph1.getGraphAreaWidth()*3/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel3.getTextWidth()/2) + 1);
 8004e08:	eba8 0850 	sub.w	r8, r8, r0, lsr #1
	customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	b21b      	sxth	r3, r3
        rect.x = x;
 8004e10:	f8a5 8298 	strh.w	r8, [r5, #664]	; 0x298
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e1a:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
 8004e1e:	b29f      	uxth	r7, r3
        return rect.width;
 8004e20:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8004e24:	f8b4 40f0 	ldrh.w	r4, [r4, #240]	; 0xf0
 8004e28:	4413      	add	r3, r2
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	1b1c      	subs	r4, r3, r4
 8004e2e:	f00b f863 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>

	scrollCounter = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	b2a4      	uxth	r4, r4
	customGraphBase::timeLabel4.setX(graph1.getX() + (graph1.getGraphAreaWidth()*4/numberofGrid) + graph1.getGraphAreaMarginLeft() - graph1.getGraphAreaMarginRight() - (timeLabel4.getTextWidth()/2) + 1);
 8004e36:	443c      	add	r4, r7
 8004e38:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
        rect.x = x;
 8004e3c:	f8a5 424c 	strh.w	r4, [r5, #588]	; 0x24c
	scrollCounter = 0;
 8004e40:	f505 659c 	add.w	r5, r5, #1248	; 0x4e0
 8004e44:	602b      	str	r3, [r5, #0]
}
 8004e46:	b005      	add	sp, #20
 8004e48:	ecbd 8b02 	vpop	{d8}
 8004e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		customGraphTimeRange = hours;
 8004e50:	460b      	mov	r3, r1
 8004e52:	e626      	b.n	8004aa2 <_ZN11customGraph12setTimeRangeEi+0x1a>
        return (int(fs) - 1) + int(1.5f + (fs - int(fs)));
 8004e54:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004e58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004e5c:	ee17 3a10 	vmov	r3, s14
 8004e60:	3b01      	subs	r3, #1
 8004e62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e66:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e72:	ee17 2a90 	vmov	r2, s15
 8004e76:	441a      	add	r2, r3
 8004e78:	4613      	mov	r3, r2
 8004e7a:	e718      	b.n	8004cae <_ZN11customGraph12setTimeRangeEi+0x226>
 8004e7c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004e80:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8004e84:	ee17 3a10 	vmov	r3, s14
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004e8e:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9a:	ee17 2a90 	vmov	r2, s15
 8004e9e:	441a      	add	r2, r3
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	e733      	b.n	8004d0c <_ZN11customGraph12setTimeRangeEi+0x284>
 8004ea4:	08023b21 	.word	0x08023b21

08004ea8 <_ZN11customGraph13setYAxisLabelEPKc>:


void customGraph::setYAxisLabel(const char* name){
 8004ea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	Unicode::snprintf(y_axisNameBuffer, 10, name);
 8004eaa:	f500 5412 	add.w	r4, r0, #9344	; 0x2480
void customGraph::setYAxisLabel(const char* name){
 8004eae:	4605      	mov	r5, r0
 8004eb0:	460a      	mov	r2, r1
	Unicode::snprintf(y_axisNameBuffer, 10, name);
 8004eb2:	210a      	movs	r1, #10
 8004eb4:	3408      	adds	r4, #8
 8004eb6:	f505 5600 	add.w	r6, r5, #8192	; 0x2000
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f010 fa52 	bl	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	y_axisName.setWildcard(y_axisNameBuffer);
	y_axisName.invalidate();
 8004ec0:	f505 500f 	add.w	r0, r5, #9152	; 0x23c0
 8004ec4:	f8c6 440c 	str.w	r4, [r6, #1036]	; 0x40c
 8004ec8:	3004      	adds	r0, #4
 8004eca:	9001      	str	r0, [sp, #4]
 8004ecc:	f00e f9c8 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
	y_axisName.resizeToCurrentText();
 8004ed0:	9801      	ldr	r0, [sp, #4]
 8004ed2:	f00b faf9 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
	y_axisName.invalidate();
 8004ed6:	9801      	ldr	r0, [sp, #4]
 8004ed8:	f00e f9c2 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>

	y_axisName.setX(graph1.getX() + graph1.getGraphAreaMarginLeft() - (y_axisName.getTextWidth()/2));
 8004edc:	f8b5 405c 	ldrh.w	r4, [r5, #92]	; 0x5c
 8004ee0:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
 8004ee4:	9801      	ldr	r0, [sp, #4]
 8004ee6:	441c      	add	r4, r3
 8004ee8:	f00b f806 	bl	800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>
 8004eec:	b2a4      	uxth	r4, r4
 8004eee:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8004ef2:	f8a6 03c8 	strh.w	r0, [r6, #968]	; 0x3c8
}
 8004ef6:	b002      	add	sp, #8
 8004ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004efc <_ZN11customGraph10initializeEv>:
{
 8004efc:	b510      	push	{r4, lr}
 8004efe:	4604      	mov	r4, r0
    customGraphBase::initialize();
 8004f00:	f7fe fa46 	bl	8003390 <_ZN15customGraphBase10initializeEv>
	setTimeRange(24);
 8004f04:	2118      	movs	r1, #24
 8004f06:	4620      	mov	r0, r4
 8004f08:	f7ff fdbe 	bl	8004a88 <_ZN11customGraph12setTimeRangeEi>
	setYAxisLabel("y_Title");
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4902      	ldr	r1, [pc, #8]	; (8004f18 <_ZN11customGraph10initializeEv+0x1c>)
}
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	setYAxisLabel("y_Title");
 8004f14:	f7ff bfc8 	b.w	8004ea8 <_ZN11customGraph13setYAxisLabelEPKc>
 8004f18:	08023b30 	.word	0x08023b30

08004f1c <_ZN11customGraph12setLineColorEm>:
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8004f1c:	f041 417f 	orr.w	r1, r1, #4278190080	; 0xff000000
        painterRed = Color::getRed(color);
 8004f20:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
     *
     * @return The red part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 8004f24:	0c0b      	lsrs	r3, r1, #16
     *
     * @return The blue part of the color.
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 8004f26:	f880 1122 	strb.w	r1, [r0, #290]	; 0x122
        return color >> 16;
 8004f2a:	f880 3120 	strb.w	r3, [r0, #288]	; 0x120
        return color >> 8;
 8004f2e:	0a0b      	lsrs	r3, r1, #8
 8004f30:	f880 3121 	strb.w	r3, [r0, #289]	; 0x121


void customGraph::setLineColor(uint32_t colorCode)
{
	graph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB((colorCode&0x00FF0000) >> 16, (colorCode&0x0000FF00) >> 8, colorCode&0x000000FF));
}
 8004f34:	4770      	bx	lr

08004f36 <_ZN11customGraph12clearAllDataEv>:

void customGraph::clearAllData()
{
 8004f36:	b510      	push	{r4, lr}
 8004f38:	4604      	mov	r4, r0
	graph1.clear();
 8004f3a:	3058      	adds	r0, #88	; 0x58
 8004f3c:	f009 fc68 	bl	800e810 <_ZN8touchgfx17AbstractDataGraph5clearEv>
	firstDataTaken = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f504 5400 	add.w	r4, r4, #8192	; 0x2000
 8004f46:	f884 3524 	strb.w	r3, [r4, #1316]	; 0x524
}
 8004f4a:	bd10      	pop	{r4, pc}

08004f4c <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004f4c:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004f4e:	f44f 7248 	mov.w	r2, #800	; 0x320
  
  return FT6X06_OK;
}
 8004f52:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004f54:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004f56:	2302      	movs	r3, #2
 8004f58:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004f5a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8004f5e:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004f62:	4770      	bx	lr

08004f64 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004f64:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004f68:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004f6a:	bf04      	itt	eq
 8004f6c:	2300      	moveq	r3, #0
 8004f6e:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }
  
  return FT6X06_OK;
}
 8004f72:	2000      	movs	r0, #0
 8004f74:	4770      	bx	lr

08004f76 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004f76:	2000      	movs	r0, #0
 8004f78:	4770      	bx	lr

08004f7a <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004f7a:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f7c:	6904      	ldr	r4, [r0, #16]
 8004f7e:	8900      	ldrh	r0, [r0, #8]
 8004f80:	46a4      	mov	ip, r4
}
 8004f82:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004f86:	4760      	bx	ip

08004f88 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004f88:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004f8a:	68c4      	ldr	r4, [r0, #12]
 8004f8c:	8900      	ldrh	r0, [r0, #8]
 8004f8e:	46a4      	mov	ip, r4
}
 8004f90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004f94:	4760      	bx	ip

08004f96 <FT6X06_GestureConfig>:
{
 8004f96:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004f9a:	f100 0818 	add.w	r8, r0, #24
{
 8004f9e:	4689      	mov	r9, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004fa0:	7809      	ldrb	r1, [r1, #0]
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	f000 f918 	bl	80051d8 <ft6x06_radian_value>
 8004fa8:	4605      	mov	r5, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004faa:	f899 1004 	ldrb.w	r1, [r9, #4]
 8004fae:	4640      	mov	r0, r8
 8004fb0:	f000 f91e 	bl	80051f0 <ft6x06_offset_left_right>
 8004fb4:	4405      	add	r5, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004fb6:	f899 1008 	ldrb.w	r1, [r9, #8]
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f000 f924 	bl	8005208 <ft6x06_offset_up_down>
 8004fc0:	4405      	add	r5, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004fc2:	f899 100c 	ldrb.w	r1, [r9, #12]
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f000 f92a 	bl	8005220 <ft6x06_disatnce_left_right>
 8004fcc:	4405      	add	r5, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8004fce:	f899 1010 	ldrb.w	r1, [r9, #16]
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f000 f930 	bl	8005238 <ft6x06_distance_up_down>
 8004fd8:	4405      	add	r5, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004fda:	f899 1014 	ldrb.w	r1, [r9, #20]
 8004fde:	4640      	mov	r0, r8
 8004fe0:	f000 f936 	bl	8005250 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004fe4:	42c5      	cmn	r5, r0
}
 8004fe6:	bf14      	ite	ne
 8004fe8:	f04f 30ff 	movne.w	r0, #4294967295
 8004fec:	2000      	moveq	r0, #0
 8004fee:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

08004ff2 <FT6X06_ReadID>:
{
 8004ff2:	b513      	push	{r0, r1, r4, lr}
 8004ff4:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004ff6:	3018      	adds	r0, #24
 8004ff8:	f10d 0107 	add.w	r1, sp, #7
 8004ffc:	f000 f940 	bl	8005280 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005000:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005004:	6023      	str	r3, [r4, #0]
}
 8005006:	b002      	add	sp, #8
 8005008:	bd10      	pop	{r4, pc}

0800500a <FT6X06_GetState>:
{
 800500a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800500c:	f100 0518 	add.w	r5, r0, #24
{
 8005010:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005012:	a901      	add	r1, sp, #4
 8005014:	4628      	mov	r0, r5
 8005016:	f000 f8d2 	bl	80051be <ft6x06_td_status>
 800501a:	bb08      	cbnz	r0, 8005060 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 800501c:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005020:	2b02      	cmp	r3, #2
 8005022:	bf98      	it	ls
 8005024:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005026:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005028:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800502a:	2103      	movs	r1, #3
 800502c:	4628      	mov	r0, r5
 800502e:	eb0d 0203 	add.w	r2, sp, r3
 8005032:	f000 f8b1 	bl	8005198 <ft6x06_read_reg>
 8005036:	b9b0      	cbnz	r0, 8005066 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005038:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800503c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005046:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005048:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800504c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800504e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005058:	4313      	orrs	r3, r2
 800505a:	60a3      	str	r3, [r4, #8]
}
 800505c:	b003      	add	sp, #12
 800505e:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e7df      	b.n	8005026 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005066:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800506a:	e7f7      	b.n	800505c <FT6X06_GetState+0x52>

0800506c <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800506c:	3018      	adds	r0, #24
 800506e:	f000 b8a1 	b.w	80051b4 <ft6x06_gest_id>

08005072 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005072:	2101      	movs	r1, #1
 8005074:	3018      	adds	r0, #24
 8005076:	f000 b8f7 	b.w	8005268 <ft6x06_g_mode>

0800507a <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800507a:	2100      	movs	r1, #0
 800507c:	3018      	adds	r0, #24
 800507e:	f000 b8f3 	b.w	8005268 <ft6x06_g_mode>

08005082 <FT6X06_Init>:
{
 8005082:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005084:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8005088:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800508a:	b96b      	cbnz	r3, 80050a8 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff fff2 	bl	800507a <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005096:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8005098:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800509c:	bf18      	it	ne
 800509e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80050a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT6X06_OK)
 80050a4:	4240      	negs	r0, r0
}
 80050a6:	bd10      	pop	{r4, pc}
  int32_t ret = FT6X06_OK;
 80050a8:	2000      	movs	r0, #0
  return ret;
 80050aa:	e7fc      	b.n	80050a6 <FT6X06_Init+0x24>

080050ac <FT6X06_ClearIT>:
 80050ac:	2000      	movs	r0, #0
 80050ae:	4770      	bx	lr

080050b0 <FT6X06_GetMultiTouchState>:
{
 80050b0:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80050b2:	f100 0518 	add.w	r5, r0, #24
{
 80050b6:	b085      	sub	sp, #20
 80050b8:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80050ba:	4628      	mov	r0, r5
 80050bc:	a901      	add	r1, sp, #4
 80050be:	f000 f87e 	bl	80051be <ft6x06_td_status>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d145      	bne.n	8005152 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80050c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	bf98      	it	ls
 80050ce:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80050d0:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80050d2:	230c      	movs	r3, #12
 80050d4:	aa01      	add	r2, sp, #4
 80050d6:	2103      	movs	r1, #3
 80050d8:	4628      	mov	r0, r5
 80050da:	f000 f85d 	bl	8005198 <ft6x06_read_reg>
 80050de:	2800      	cmp	r0, #0
 80050e0:	d13a      	bne.n	8005158 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80050e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80050e6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80050ea:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80050ec:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80050ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80050f2:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80050f4:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80050f6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80050fa:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80050fe:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005100:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800510a:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800510c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005110:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8005112:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005116:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005118:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800511c:	091b      	lsrs	r3, r3, #4
 800511e:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005120:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005122:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005124:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005128:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800512a:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800512c:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005130:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005132:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800513c:	430b      	orrs	r3, r1
 800513e:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005140:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005144:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005146:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800514a:	091b      	lsrs	r3, r3, #4
 800514c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800514e:	b005      	add	sp, #20
 8005150:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	e7bb      	b.n	80050d0 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005158:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800515c:	e7f7      	b.n	800514e <FT6X06_GetMultiTouchState+0x9e>
	...

08005160 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005160:	b190      	cbz	r0, 8005188 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005162:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005164:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005166:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005168:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800516a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800516c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800516e:	68ca      	ldr	r2, [r1, #12]
 8005170:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005172:	690a      	ldr	r2, [r1, #16]
 8005174:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005176:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005178:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800517a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <FT6X06_RegisterBusIO+0x30>)
 800517e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005180:	4a04      	ldr	r2, [pc, #16]	; (8005194 <FT6X06_RegisterBusIO+0x34>)
 8005182:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005184:	b103      	cbz	r3, 8005188 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005186:	4718      	bx	r3
}
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	08004f7b 	.word	0x08004f7b
 8005194:	08004f89 	.word	0x08004f89

08005198 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005198:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800519a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800519e:	46a4      	mov	ip, r4
}
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80051a4:	4760      	bx	ip

080051a6 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80051a6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80051a8:	6804      	ldr	r4, [r0, #0]
 80051aa:	6880      	ldr	r0, [r0, #8]
 80051ac:	46a4      	mov	ip, r4
}
 80051ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80051b2:	4760      	bx	ip

080051b4 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80051b4:	2301      	movs	r3, #1
{
 80051b6:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80051b8:	4619      	mov	r1, r3
 80051ba:	f7ff bfed 	b.w	8005198 <ft6x06_read_reg>

080051be <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80051be:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80051c0:	460a      	mov	r2, r1
{
 80051c2:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 80051c4:	2301      	movs	r3, #1
 80051c6:	2102      	movs	r1, #2
 80051c8:	f7ff ffe6 	bl	8005198 <ft6x06_read_reg>
  
  if(ret == 0)
 80051cc:	b918      	cbnz	r0, 80051d6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 80051ce:	7823      	ldrb	r3, [r4, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80051d6:	bd10      	pop	{r4, pc}

080051d8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80051d8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80051da:	2301      	movs	r3, #1
{
 80051dc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80051e0:	f10d 0207 	add.w	r2, sp, #7
 80051e4:	2191      	movs	r1, #145	; 0x91
 80051e6:	f7ff ffde 	bl	80051a6 <ft6x06_write_reg>
}
 80051ea:	b003      	add	sp, #12
 80051ec:	f85d fb04 	ldr.w	pc, [sp], #4

080051f0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80051f0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80051f2:	2301      	movs	r3, #1
{
 80051f4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80051f8:	f10d 0207 	add.w	r2, sp, #7
 80051fc:	2192      	movs	r1, #146	; 0x92
 80051fe:	f7ff ffd2 	bl	80051a6 <ft6x06_write_reg>
}
 8005202:	b003      	add	sp, #12
 8005204:	f85d fb04 	ldr.w	pc, [sp], #4

08005208 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005208:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 800520a:	2301      	movs	r3, #1
{
 800520c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005210:	f10d 0207 	add.w	r2, sp, #7
 8005214:	2193      	movs	r1, #147	; 0x93
 8005216:	f7ff ffc6 	bl	80051a6 <ft6x06_write_reg>
}
 800521a:	b003      	add	sp, #12
 800521c:	f85d fb04 	ldr.w	pc, [sp], #4

08005220 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005220:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005222:	2301      	movs	r3, #1
{
 8005224:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005228:	f10d 0207 	add.w	r2, sp, #7
 800522c:	2194      	movs	r1, #148	; 0x94
 800522e:	f7ff ffba 	bl	80051a6 <ft6x06_write_reg>
}
 8005232:	b003      	add	sp, #12
 8005234:	f85d fb04 	ldr.w	pc, [sp], #4

08005238 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005238:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800523a:	2301      	movs	r3, #1
{
 800523c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005240:	f10d 0207 	add.w	r2, sp, #7
 8005244:	2195      	movs	r1, #149	; 0x95
 8005246:	f7ff ffae 	bl	80051a6 <ft6x06_write_reg>
}
 800524a:	b003      	add	sp, #12
 800524c:	f85d fb04 	ldr.w	pc, [sp], #4

08005250 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005250:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005252:	2301      	movs	r3, #1
{
 8005254:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005258:	f10d 0207 	add.w	r2, sp, #7
 800525c:	2196      	movs	r1, #150	; 0x96
 800525e:	f7ff ffa2 	bl	80051a6 <ft6x06_write_reg>
}
 8005262:	b003      	add	sp, #12
 8005264:	f85d fb04 	ldr.w	pc, [sp], #4

08005268 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005268:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800526a:	2301      	movs	r3, #1
{
 800526c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005270:	f10d 0207 	add.w	r2, sp, #7
 8005274:	21a4      	movs	r1, #164	; 0xa4
 8005276:	f7ff ff96 	bl	80051a6 <ft6x06_write_reg>
}
 800527a:	b003      	add	sp, #12
 800527c:	f85d fb04 	ldr.w	pc, [sp], #4

08005280 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005280:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005282:	2301      	movs	r3, #1
 8005284:	21a8      	movs	r1, #168	; 0xa8
 8005286:	f7ff bf87 	b.w	8005198 <ft6x06_read_reg>
	...

0800528c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800528c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800528e:	2201      	movs	r2, #1
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005292:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005296:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005298:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800529a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800529c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800529e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052a2:	f005 f8f9 	bl	800a498 <HAL_SDRAM_SendCommand>
 80052a6:	3800      	subs	r0, #0
 80052a8:	bf18      	it	ne
 80052aa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80052ac:	4240      	negs	r0, r0
 80052ae:	bd08      	pop	{r3, pc}
 80052b0:	24005834 	.word	0x24005834

080052b4 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80052b4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80052b6:	2202      	movs	r2, #2
 80052b8:	4b08      	ldr	r3, [pc, #32]	; (80052dc <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 80052ba:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 80052be:	2101      	movs	r1, #1
 80052c0:	2200      	movs	r2, #0
 80052c2:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80052c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ca:	4619      	mov	r1, r3
 80052cc:	f005 f8e4 	bl	800a498 <HAL_SDRAM_SendCommand>
 80052d0:	3800      	subs	r0, #0
 80052d2:	bf18      	it	ne
 80052d4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80052d6:	4240      	negs	r0, r0
 80052d8:	bd08      	pop	{r3, pc}
 80052da:	bf00      	nop
 80052dc:	24005834 	.word	0x24005834

080052e0 <IS42S32800J_ModeRegConfig>:
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80052e0:	e9d1 3203 	ldrd	r3, r2, [r1, #12]
{
 80052e4:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80052e6:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
 80052e8:	694a      	ldr	r2, [r1, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80052ea:	4c0b      	ldr	r4, [pc, #44]	; (8005318 <IS42S32800J_ModeRegConfig+0x38>)
                     pRegMode->BurstType     |\
 80052ec:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
 80052ee:	698a      	ldr	r2, [r1, #24]
 80052f0:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80052f2:	69ca      	ldr	r2, [r1, #28]
 80052f4:	4313      	orrs	r3, r2
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80052f6:	2204      	movs	r2, #4
 80052f8:	6022      	str	r2, [r4, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 80052fa:	680a      	ldr	r2, [r1, #0]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80052fc:	4621      	mov	r1, r4
  Command.CommandTarget          = pRegMode->TargetBank;
 80052fe:	6062      	str	r2, [r4, #4]
  Command.AutoRefreshNumber      = 1;
 8005300:	2201      	movs	r2, #1
  Command.ModeRegisterDefinition = tmpmrd;
 8005302:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800530a:	f005 f8c5 	bl	800a498 <HAL_SDRAM_SendCommand>
 800530e:	3800      	subs	r0, #0
 8005310:	bf18      	it	ne
 8005312:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005314:	4240      	negs	r0, r0
 8005316:	bd10      	pop	{r4, pc}
 8005318:	24005834 	.word	0x24005834

0800531c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800531c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8005320:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8005324:	2108      	movs	r1, #8
 8005326:	2200      	movs	r2, #0
 8005328:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800532c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005330:	4619      	mov	r1, r3
 8005332:	f005 f8b1 	bl	800a498 <HAL_SDRAM_SendCommand>
 8005336:	3800      	subs	r0, #0
 8005338:	bf18      	it	ne
 800533a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800533c:	4240      	negs	r0, r0
 800533e:	bd08      	pop	{r3, pc}
 8005340:	24005834 	.word	0x24005834

08005344 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005344:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005346:	f005 f8c6 	bl	800a4d6 <HAL_SDRAM_ProgramRefreshRate>
 800534a:	3800      	subs	r0, #0
 800534c:	bf18      	it	ne
 800534e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005350:	4240      	negs	r0, r0
 8005352:	bd08      	pop	{r3, pc}

08005354 <IS42S32800J_Init>:
{
 8005354:	b570      	push	{r4, r5, r6, lr}
 8005356:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005358:	6809      	ldr	r1, [r1, #0]
{
 800535a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800535c:	f7ff ff96 	bl	800528c <IS42S32800J_ClockEnable>
 8005360:	b110      	cbz	r0, 8005368 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005362:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005366:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005368:	f001 fc98 	bl	8006c9c <HAL_GetTick>
 800536c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800536e:	f001 fc95 	bl	8006c9c <HAL_GetTick>
 8005372:	4286      	cmp	r6, r0
 8005374:	d0fb      	beq.n	800536e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005376:	6821      	ldr	r1, [r4, #0]
 8005378:	4628      	mov	r0, r5
 800537a:	f7ff ff9b 	bl	80052b4 <IS42S32800J_Precharge>
 800537e:	2800      	cmp	r0, #0
 8005380:	d1ef      	bne.n	8005362 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005382:	4628      	mov	r0, r5
 8005384:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005388:	f7ff ffc8 	bl	800531c <IS42S32800J_RefreshMode>
 800538c:	2800      	cmp	r0, #0
 800538e:	d1e8      	bne.n	8005362 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005390:	4621      	mov	r1, r4
 8005392:	4628      	mov	r0, r5
 8005394:	f7ff ffa4 	bl	80052e0 <IS42S32800J_ModeRegConfig>
 8005398:	2800      	cmp	r0, #0
 800539a:	d1e2      	bne.n	8005362 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800539c:	68a1      	ldr	r1, [r4, #8]
 800539e:	4628      	mov	r0, r5
 80053a0:	f7ff ffd0 	bl	8005344 <IS42S32800J_RefreshRate>
 80053a4:	3800      	subs	r0, #0
 80053a6:	bf18      	it	ne
 80053a8:	2001      	movne	r0, #1
 80053aa:	4240      	negs	r0, r0
  return ret;
 80053ac:	e7db      	b.n	8005366 <IS42S32800J_Init+0x12>

080053ae <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80053ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80053b6:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80053ba:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80053be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053c2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 80053c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80053ca:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 80053cc:	2000      	movs	r0, #0
 80053ce:	4770      	bx	lr

080053d0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80053d0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80053d2:	f44f 7340 	mov.w	r3, #768	; 0x300
{
 80053d6:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80053d8:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80053dc:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80053de:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80053e0:	920f      	str	r2, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 2;
 80053e2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80053e4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80053e6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80053e8:	920b      	str	r2, [sp, #44]	; 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053ea:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80053ec:	9313      	str	r3, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 80053ee:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80053f0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80053f2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80053f4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80053f6:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80053fa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 80053fe:	2310      	movs	r3, #16
 8005400:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005406:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8005408:	f240 1301 	movw	r3, #257	; 0x101
 800540c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800540e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005412:	f003 fc9e 	bl	8008d52 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8005416:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;

}
 8005418:	bf14      	ite	ne
 800541a:	f06f 0004 	mvnne.w	r0, #4
 800541e:	2000      	moveq	r0, #0
 8005420:	b015      	add	sp, #84	; 0x54
 8005422:	f85d fb04 	ldr.w	pc, [sp], #4

08005426 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005426:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005428:	f241 3288 	movw	r2, #5000	; 0x1388
{
 800542c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800542e:	bf08      	it	eq
 8005430:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 8005434:	b095      	sub	sp, #84	; 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005436:	bf18      	it	ne
 8005438:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 800543c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800543e:	a906      	add	r1, sp, #24
{
 8005440:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005442:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005444:	2306      	movs	r3, #6
 8005446:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005448:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800544a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800544e:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8005450:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005452:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005454:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005458:	f003 fb80 	bl	8008b5c <HAL_QSPI_Command>
 800545c:	bb20      	cbnz	r0, 80054a8 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800545e:	f240 2302 	movw	r3, #514	; 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8005462:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005464:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005466:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800546a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800546c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800546e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005472:	f04f 0310 	mov.w	r3, #16
 8005476:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800547a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800547e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005480:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005484:	bf0c      	ite	eq
 8005486:	f04f 7340 	moveq.w	r3, #50331648	; 0x3000000
 800548a:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800548e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005490:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005492:	f241 3388 	movw	r3, #5000	; 0x1388
 8005496:	f003 fc5c 	bl	8008d52 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800549a:	2800      	cmp	r0, #0
 800549c:	bf0c      	ite	eq
 800549e:	2000      	moveq	r0, #0
 80054a0:	f06f 0004 	mvnne.w	r0, #4
  }

  return MT25TL01G_OK;
}
 80054a4:	b015      	add	sp, #84	; 0x54
 80054a6:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 80054a8:	f06f 0001 	mvn.w	r0, #1
 80054ac:	e7fa      	b.n	80054a4 <MT25TL01G_WriteEnable+0x7e>

080054ae <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80054ae:	2903      	cmp	r1, #3
{
 80054b0:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80054b2:	bf08      	it	eq
 80054b4:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80054b8:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80054ba:	bf18      	it	ne
 80054bc:	f44f 7380 	movne.w	r3, #256	; 0x100
{
 80054c0:	4604      	mov	r4, r0
 80054c2:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80054c4:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 80054c6:	23b7      	movs	r3, #183	; 0xb7
 80054c8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80054ca:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80054cc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80054d2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80054d4:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80054d6:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80054da:	f7ff ffa4 	bl	8005426 <MT25TL01G_WriteEnable>
 80054de:	b958      	cbnz	r0, 80054f8 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	4669      	mov	r1, sp
 80054e6:	4620      	mov	r0, r4
 80054e8:	f003 fb38 	bl	8008b5c <HAL_QSPI_Command>
 80054ec:	b920      	cbnz	r0, 80054f8 <MT25TL01G_Enter4BytesAddressMode+0x4a>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80054ee:	4629      	mov	r1, r5
 80054f0:	4620      	mov	r0, r4
 80054f2:	f7ff ff6d 	bl	80053d0 <MT25TL01G_AutoPollingMemReady>
 80054f6:	b108      	cbz	r0, 80054fc <MT25TL01G_Enter4BytesAddressMode+0x4e>
    return MT25TL01G_ERROR_COMMAND;
 80054f8:	f06f 0001 	mvn.w	r0, #1
}
 80054fc:	b00f      	add	sp, #60	; 0x3c
 80054fe:	bd30      	pop	{r4, r5, pc}

08005500 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005500:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005502:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 8005506:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800550c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800550e:	2335      	movs	r3, #53	; 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005510:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005512:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005514:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005516:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800551a:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 800551c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800551e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005520:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005524:	f003 fb1a 	bl	8008b5c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005528:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800552a:	bf14      	ite	ne
 800552c:	f06f 0001 	mvnne.w	r0, #1
 8005530:	2000      	moveq	r0, #0
 8005532:	b00f      	add	sp, #60	; 0x3c
 8005534:	f85d fb04 	ldr.w	pc, [sp], #4

08005538 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005538:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800553a:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 800553e:	b08f      	sub	sp, #60	; 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005544:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005546:	23f5      	movs	r3, #245	; 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005548:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800554a:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800554c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800554e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 8005554:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005556:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005558:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800555c:	f003 fafe 	bl	8008b5c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005560:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005562:	bf14      	ite	ne
 8005564:	f06f 0001 	mvnne.w	r0, #1
 8005568:	2000      	moveq	r0, #0
 800556a:	b00f      	add	sp, #60	; 0x3c
 800556c:	f85d fb04 	ldr.w	pc, [sp], #4

08005570 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005570:	b500      	push	{lr}
 8005572:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005574:	2903      	cmp	r1, #3
 8005576:	d80e      	bhi.n	8005596 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005578:	e8df f001 	tbb	[pc, r1]
 800557c:	3f342902 	.word	0x3f342902
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005584:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005586:	230e      	movs	r3, #14
 8005588:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800558a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800558e:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005594:	930b      	str	r3, [sp, #44]	; 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8005596:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005598:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800559c:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80055a0:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 80055a2:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80055a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80055a8:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80055aa:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 80055ac:	e9cd c20d 	strd	ip, r2, [sp, #52]	; 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80055b0:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80055b2:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80055b4:	930f      	str	r3, [sp, #60]	; 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80055b6:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80055ba:	f003 fc1a 	bl	8008df2 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 80055be:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80055c0:	bf14      	ite	ne
 80055c2:	f06f 0005 	mvnne.w	r0, #5
 80055c6:	2000      	moveq	r0, #0
 80055c8:	b011      	add	sp, #68	; 0x44
 80055ca:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80055ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055d2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80055d4:	233d      	movs	r3, #61	; 0x3d
 80055d6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80055d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055dc:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80055de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e2:	e7d7      	b.n	8005594 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80055e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80055ea:	23ee      	movs	r3, #238	; 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80055ec:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80055ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80055f2:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80055f4:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80055f8:	e7cc      	b.n	8005594 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80055fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80055fe:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005600:	23ed      	movs	r3, #237	; 0xed
 8005602:	e7f3      	b.n	80055ec <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08005604 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005604:	b500      	push	{lr}
 8005606:	b091      	sub	sp, #68	; 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005608:	2903      	cmp	r1, #3
 800560a:	d80e      	bhi.n	800562a <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 800560c:	e8df f001 	tbb	[pc, r1]
 8005610:	3b302502 	.word	0x3b302502
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005614:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005618:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800561a:	230c      	movs	r3, #12
 800561c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800561e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005622:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8005624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005628:	930b      	str	r3, [sp, #44]	; 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800562a:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800562c:	466a      	mov	r2, sp
 800562e:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005630:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8005632:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005636:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005638:	2300      	movs	r3, #0
 800563a:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800563c:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800563e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8005642:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005646:	f003 fbd4 	bl	8008df2 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800564a:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 800564c:	bf14      	ite	ne
 800564e:	f06f 0005 	mvnne.w	r0, #5
 8005652:	2000      	moveq	r0, #0
 8005654:	b011      	add	sp, #68	; 0x44
 8005656:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800565a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800565e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005660:	23bc      	movs	r3, #188	; 0xbc
 8005662:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8005664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005668:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800566a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800566e:	e7db      	b.n	8005628 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005674:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005676:	23ec      	movs	r3, #236	; 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005678:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800567a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800567e:	9309      	str	r3, [sp, #36]	; 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005680:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8005684:	e7d0      	b.n	8005628 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800568a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800568c:	23eb      	movs	r3, #235	; 0xeb
 800568e:	e7f3      	b.n	8005678 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08005690 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005690:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005692:	f241 3288 	movw	r2, #5000	; 0x1388
{
 8005696:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005698:	bf08      	it	eq
 800569a:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 800569e:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056a0:	bf18      	it	ne
 80056a2:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056a6:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056a8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80056aa:	2366      	movs	r3, #102	; 0x66
 80056ac:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80056ae:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80056b0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80056b4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80056b6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80056b8:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80056ba:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056be:	f003 fa4d 	bl	8008b5c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 80056c2:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 80056c4:	bf14      	ite	ne
 80056c6:	f06f 0001 	mvnne.w	r0, #1
 80056ca:	2000      	moveq	r0, #0
 80056cc:	b00f      	add	sp, #60	; 0x3c
 80056ce:	f85d fb04 	ldr.w	pc, [sp], #4

080056d2 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056d2:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
{
 80056d8:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056da:	bf08      	it	eq
 80056dc:	f44f 7340 	moveq.w	r3, #768	; 0x300
{
 80056e0:	b08f      	sub	sp, #60	; 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056e2:	bf18      	it	ne
 80056e4:	f44f 7380 	movne.w	r3, #256	; 0x100
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80056e8:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80056ea:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80056ec:	2399      	movs	r3, #153	; 0x99
 80056ee:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80056f0:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80056f2:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80056f6:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.DummyCycles       = 0;
 80056f8:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80056fa:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80056fc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005700:	f003 fa2c 	bl	8008b5c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
 8005704:	2800      	cmp	r0, #0
  }

  return MT25TL01G_OK;
}
 8005706:	bf14      	ite	ne
 8005708:	f06f 0001 	mvnne.w	r0, #1
 800570c:	2000      	moveq	r0, #0
 800570e:	b00f      	add	sp, #60	; 0x3c
 8005710:	f85d fb04 	ldr.w	pc, [sp], #4

08005714 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8005714:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005716:	6884      	ldr	r4, [r0, #8]
 8005718:	8800      	ldrh	r0, [r0, #0]
 800571a:	46a4      	mov	ip, r4
}
 800571c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005720:	4760      	bx	ip

08005722 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005722:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005724:	6844      	ldr	r4, [r0, #4]
 8005726:	8800      	ldrh	r0, [r0, #0]
 8005728:	46a4      	mov	ip, r4
}
 800572a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800572e:	4760      	bx	ip

08005730 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8005730:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005732:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8005734:	4604      	mov	r4, r0
 8005736:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8005738:	4798      	blx	r3
 800573a:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800573c:	68e3      	ldr	r3, [r4, #12]
 800573e:	4798      	blx	r3
 8005740:	1b83      	subs	r3, r0, r6
 8005742:	42ab      	cmp	r3, r5
 8005744:	d3fa      	bcc.n	800573c <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005746:	bd70      	pop	{r4, r5, r6, pc}

08005748 <OTM8009A_Init>:
{
 8005748:	e92d 4f37 	stmdb	sp!, {r0, r1, r2, r4, r5, r8, r9, sl, fp, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800574c:	2300      	movs	r3, #0
 800574e:	f100 0810 	add.w	r8, r0, #16
{
 8005752:	4682      	mov	sl, r0
 8005754:	4689      	mov	r9, r1
 8005756:	4693      	mov	fp, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005758:	4619      	mov	r1, r3
 800575a:	4add      	ldr	r2, [pc, #884]	; (8005ad0 <OTM8009A_Init+0x388>)
 800575c:	4640      	mov	r0, r8
 800575e:	f000 fbad 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005762:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005764:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005766:	4adb      	ldr	r2, [pc, #876]	; (8005ad4 <OTM8009A_Init+0x38c>)
 8005768:	21ff      	movs	r1, #255	; 0xff
 800576a:	4640      	mov	r0, r8
 800576c:	f000 fba6 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005770:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005772:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005774:	4ad8      	ldr	r2, [pc, #864]	; (8005ad8 <OTM8009A_Init+0x390>)
 8005776:	4619      	mov	r1, r3
 8005778:	4640      	mov	r0, r8
 800577a:	f000 fb9f 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800577e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005780:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8005782:	4ad6      	ldr	r2, [pc, #856]	; (8005adc <OTM8009A_Init+0x394>)
 8005784:	21ff      	movs	r1, #255	; 0xff
 8005786:	4640      	mov	r0, r8
 8005788:	f000 fb98 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800578c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800578e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005790:	4ad1      	ldr	r2, [pc, #836]	; (8005ad8 <OTM8009A_Init+0x390>)
 8005792:	4619      	mov	r1, r3
 8005794:	4640      	mov	r0, r8
 8005796:	f000 fb91 	bl	8005ebc <otm8009a_write_reg>
 800579a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800579c:	2300      	movs	r3, #0
 800579e:	4ad0      	ldr	r2, [pc, #832]	; (8005ae0 <OTM8009A_Init+0x398>)
 80057a0:	21c4      	movs	r1, #196	; 0xc4
 80057a2:	4640      	mov	r0, r8
 80057a4:	f000 fb8a 	bl	8005ebc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80057a8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80057aa:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80057ac:	4650      	mov	r0, sl
 80057ae:	f7ff ffbf 	bl	8005730 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80057b2:	2300      	movs	r3, #0
 80057b4:	4acb      	ldr	r2, [pc, #812]	; (8005ae4 <OTM8009A_Init+0x39c>)
 80057b6:	4640      	mov	r0, r8
 80057b8:	4619      	mov	r1, r3
 80057ba:	4dcb      	ldr	r5, [pc, #812]	; (8005ae8 <OTM8009A_Init+0x3a0>)
 80057bc:	f000 fb7e 	bl	8005ebc <otm8009a_write_reg>
 80057c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80057c2:	2300      	movs	r3, #0
 80057c4:	4ac9      	ldr	r2, [pc, #804]	; (8005aec <OTM8009A_Init+0x3a4>)
 80057c6:	21c4      	movs	r1, #196	; 0xc4
 80057c8:	4640      	mov	r0, r8
 80057ca:	f000 fb77 	bl	8005ebc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80057ce:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80057d0:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80057d2:	4650      	mov	r0, sl
 80057d4:	f7ff ffac 	bl	8005730 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80057d8:	2300      	movs	r3, #0
 80057da:	4ac5      	ldr	r2, [pc, #788]	; (8005af0 <OTM8009A_Init+0x3a8>)
 80057dc:	4640      	mov	r0, r8
 80057de:	4619      	mov	r1, r3
 80057e0:	f000 fb6c 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80057e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80057e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80057e8:	4ac2      	ldr	r2, [pc, #776]	; (8005af4 <OTM8009A_Init+0x3ac>)
 80057ea:	21c5      	movs	r1, #197	; 0xc5
 80057ec:	4640      	mov	r0, r8
 80057ee:	f000 fb65 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80057f2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80057f4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 80057f6:	4ac0      	ldr	r2, [pc, #768]	; (8005af8 <OTM8009A_Init+0x3b0>)
 80057f8:	4619      	mov	r1, r3
 80057fa:	4640      	mov	r0, r8
 80057fc:	f000 fb5e 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005800:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005802:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005804:	4abd      	ldr	r2, [pc, #756]	; (8005afc <OTM8009A_Init+0x3b4>)
 8005806:	21c5      	movs	r1, #197	; 0xc5
 8005808:	4640      	mov	r0, r8
 800580a:	f000 fb57 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800580e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8005810:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005812:	4abb      	ldr	r2, [pc, #748]	; (8005b00 <OTM8009A_Init+0x3b8>)
 8005814:	4619      	mov	r1, r3
 8005816:	4640      	mov	r0, r8
 8005818:	f000 fb50 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800581c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800581e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005820:	4ab8      	ldr	r2, [pc, #736]	; (8005b04 <OTM8009A_Init+0x3bc>)
 8005822:	21c0      	movs	r1, #192	; 0xc0
 8005824:	4640      	mov	r0, r8
 8005826:	f000 fb49 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800582a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800582c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800582e:	4aa8      	ldr	r2, [pc, #672]	; (8005ad0 <OTM8009A_Init+0x388>)
 8005830:	4619      	mov	r1, r3
 8005832:	4640      	mov	r0, r8
 8005834:	f000 fb42 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005838:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800583a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800583c:	4ab2      	ldr	r2, [pc, #712]	; (8005b08 <OTM8009A_Init+0x3c0>)
 800583e:	21d9      	movs	r1, #217	; 0xd9
 8005840:	4640      	mov	r0, r8
 8005842:	f000 fb3b 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005846:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005848:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800584a:	4ab0      	ldr	r2, [pc, #704]	; (8005b0c <OTM8009A_Init+0x3c4>)
 800584c:	4619      	mov	r1, r3
 800584e:	4640      	mov	r0, r8
 8005850:	f000 fb34 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005854:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005856:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005858:	4aad      	ldr	r2, [pc, #692]	; (8005b10 <OTM8009A_Init+0x3c8>)
 800585a:	21c1      	movs	r1, #193	; 0xc1
 800585c:	4640      	mov	r0, r8
 800585e:	f000 fb2d 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005862:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 8005864:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005866:	4aab      	ldr	r2, [pc, #684]	; (8005b14 <OTM8009A_Init+0x3cc>)
 8005868:	4619      	mov	r1, r3
 800586a:	4640      	mov	r0, r8
 800586c:	f000 fb26 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005870:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005872:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005874:	4aa8      	ldr	r2, [pc, #672]	; (8005b18 <OTM8009A_Init+0x3d0>)
 8005876:	21c1      	movs	r1, #193	; 0xc1
 8005878:	4640      	mov	r0, r8
 800587a:	f000 fb1f 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800587e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005880:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005882:	4aa6      	ldr	r2, [pc, #664]	; (8005b1c <OTM8009A_Init+0x3d4>)
 8005884:	4619      	mov	r1, r3
 8005886:	4640      	mov	r0, r8
 8005888:	f000 fb18 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800588c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800588e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8005890:	4aa3      	ldr	r2, [pc, #652]	; (8005b20 <OTM8009A_Init+0x3d8>)
 8005892:	21c5      	movs	r1, #197	; 0xc5
 8005894:	4640      	mov	r0, r8
 8005896:	f000 fb11 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800589a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800589c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800589e:	4aa1      	ldr	r2, [pc, #644]	; (8005b24 <OTM8009A_Init+0x3dc>)
 80058a0:	4619      	mov	r1, r3
 80058a2:	4640      	mov	r0, r8
 80058a4:	f000 fb0a 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80058a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80058aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80058ac:	4a93      	ldr	r2, [pc, #588]	; (8005afc <OTM8009A_Init+0x3b4>)
 80058ae:	21c5      	movs	r1, #197	; 0xc5
 80058b0:	4640      	mov	r0, r8
 80058b2:	f000 fb03 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80058b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80058b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80058ba:	4a85      	ldr	r2, [pc, #532]	; (8005ad0 <OTM8009A_Init+0x388>)
 80058bc:	4619      	mov	r1, r3
 80058be:	4640      	mov	r0, r8
 80058c0:	f000 fafc 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80058c4:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80058c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80058c8:	4a97      	ldr	r2, [pc, #604]	; (8005b28 <OTM8009A_Init+0x3e0>)
 80058ca:	21d8      	movs	r1, #216	; 0xd8
 80058cc:	4640      	mov	r0, r8
 80058ce:	f000 faf5 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80058d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80058d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80058d6:	4a95      	ldr	r2, [pc, #596]	; (8005b2c <OTM8009A_Init+0x3e4>)
 80058d8:	4619      	mov	r1, r3
 80058da:	4640      	mov	r0, r8
 80058dc:	f000 faee 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80058e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80058e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80058e4:	4a92      	ldr	r2, [pc, #584]	; (8005b30 <OTM8009A_Init+0x3e8>)
 80058e6:	21c5      	movs	r1, #197	; 0xc5
 80058e8:	4640      	mov	r0, r8
 80058ea:	f000 fae7 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80058ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80058f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80058f2:	4a90      	ldr	r2, [pc, #576]	; (8005b34 <OTM8009A_Init+0x3ec>)
 80058f4:	4619      	mov	r1, r3
 80058f6:	4640      	mov	r0, r8
 80058f8:	f000 fae0 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80058fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80058fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8005900:	4a8d      	ldr	r2, [pc, #564]	; (8005b38 <OTM8009A_Init+0x3f0>)
 8005902:	21c0      	movs	r1, #192	; 0xc0
 8005904:	4640      	mov	r0, r8
 8005906:	f000 fad9 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800590a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800590c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800590e:	4a8b      	ldr	r2, [pc, #556]	; (8005b3c <OTM8009A_Init+0x3f4>)
 8005910:	4619      	mov	r1, r3
 8005912:	4640      	mov	r0, r8
 8005914:	f000 fad2 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005918:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800591a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800591c:	4a88      	ldr	r2, [pc, #544]	; (8005b40 <OTM8009A_Init+0x3f8>)
 800591e:	21c5      	movs	r1, #197	; 0xc5
 8005920:	4640      	mov	r0, r8
 8005922:	f000 facb 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005926:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005928:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800592a:	4a78      	ldr	r2, [pc, #480]	; (8005b0c <OTM8009A_Init+0x3c4>)
 800592c:	4619      	mov	r1, r3
 800592e:	4640      	mov	r0, r8
 8005930:	f000 fac4 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005934:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005936:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005938:	4a82      	ldr	r2, [pc, #520]	; (8005b44 <OTM8009A_Init+0x3fc>)
 800593a:	21c4      	movs	r1, #196	; 0xc4
 800593c:	4640      	mov	r0, r8
 800593e:	f000 fabd 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005942:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005944:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005946:	4a73      	ldr	r2, [pc, #460]	; (8005b14 <OTM8009A_Init+0x3cc>)
 8005948:	4619      	mov	r1, r3
 800594a:	4640      	mov	r0, r8
 800594c:	f000 fab6 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005950:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005952:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005954:	4a7c      	ldr	r2, [pc, #496]	; (8005b48 <OTM8009A_Init+0x400>)
 8005956:	21c1      	movs	r1, #193	; 0xc1
 8005958:	4640      	mov	r0, r8
 800595a:	f000 faaf 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800595e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005960:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005962:	4a7a      	ldr	r2, [pc, #488]	; (8005b4c <OTM8009A_Init+0x404>)
 8005964:	4619      	mov	r1, r3
 8005966:	4640      	mov	r0, r8
 8005968:	f000 faa8 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800596c:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800596e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8005970:	4a77      	ldr	r2, [pc, #476]	; (8005b50 <OTM8009A_Init+0x408>)
 8005972:	21b3      	movs	r1, #179	; 0xb3
 8005974:	4640      	mov	r0, r8
 8005976:	f000 faa1 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800597a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800597c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800597e:	4a56      	ldr	r2, [pc, #344]	; (8005ad8 <OTM8009A_Init+0x390>)
 8005980:	4619      	mov	r1, r3
 8005982:	4640      	mov	r0, r8
 8005984:	f000 fa9a 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005988:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800598a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800598c:	4a71      	ldr	r2, [pc, #452]	; (8005b54 <OTM8009A_Init+0x40c>)
 800598e:	21ce      	movs	r1, #206	; 0xce
 8005990:	4640      	mov	r0, r8
 8005992:	f000 fa93 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005996:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005998:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800599a:	4a6f      	ldr	r2, [pc, #444]	; (8005b58 <OTM8009A_Init+0x410>)
 800599c:	4619      	mov	r1, r3
 800599e:	4640      	mov	r0, r8
 80059a0:	f000 fa8c 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80059a4:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80059a6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80059a8:	4a6c      	ldr	r2, [pc, #432]	; (8005b5c <OTM8009A_Init+0x414>)
 80059aa:	21ce      	movs	r1, #206	; 0xce
 80059ac:	4640      	mov	r0, r8
 80059ae:	f000 fa85 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80059b2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80059b4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80059b6:	4a6a      	ldr	r2, [pc, #424]	; (8005b60 <OTM8009A_Init+0x418>)
 80059b8:	4619      	mov	r1, r3
 80059ba:	4640      	mov	r0, r8
 80059bc:	f000 fa7e 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80059c0:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80059c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80059c4:	4a67      	ldr	r2, [pc, #412]	; (8005b64 <OTM8009A_Init+0x41c>)
 80059c6:	21ce      	movs	r1, #206	; 0xce
 80059c8:	4640      	mov	r0, r8
 80059ca:	f000 fa77 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80059ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80059d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80059d2:	4a65      	ldr	r2, [pc, #404]	; (8005b68 <OTM8009A_Init+0x420>)
 80059d4:	4619      	mov	r1, r3
 80059d6:	4640      	mov	r0, r8
 80059d8:	f000 fa70 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80059dc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80059de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80059e0:	4a62      	ldr	r2, [pc, #392]	; (8005b6c <OTM8009A_Init+0x424>)
 80059e2:	21cf      	movs	r1, #207	; 0xcf
 80059e4:	4640      	mov	r0, r8
 80059e6:	f000 fa69 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80059ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80059ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80059ee:	4a60      	ldr	r2, [pc, #384]	; (8005b70 <OTM8009A_Init+0x428>)
 80059f0:	4619      	mov	r1, r3
 80059f2:	4640      	mov	r0, r8
 80059f4:	f000 fa62 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80059f8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80059fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80059fc:	4a5d      	ldr	r2, [pc, #372]	; (8005b74 <OTM8009A_Init+0x42c>)
 80059fe:	21cf      	movs	r1, #207	; 0xcf
 8005a00:	4640      	mov	r0, r8
 8005a02:	f000 fa5b 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a06:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005a08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a0a:	4a33      	ldr	r2, [pc, #204]	; (8005ad8 <OTM8009A_Init+0x390>)
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4640      	mov	r0, r8
 8005a10:	f000 fa54 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005a14:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005a16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005a18:	4a57      	ldr	r2, [pc, #348]	; (8005b78 <OTM8009A_Init+0x430>)
 8005a1a:	21cb      	movs	r1, #203	; 0xcb
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	f000 fa4d 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005a22:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005a24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005a26:	4a55      	ldr	r2, [pc, #340]	; (8005b7c <OTM8009A_Init+0x434>)
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f000 fa46 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005a30:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005a32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005a34:	4a52      	ldr	r2, [pc, #328]	; (8005b80 <OTM8009A_Init+0x438>)
 8005a36:	21cb      	movs	r1, #203	; 0xcb
 8005a38:	4640      	mov	r0, r8
 8005a3a:	f000 fa3f 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005a3e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005a40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005a42:	4a45      	ldr	r2, [pc, #276]	; (8005b58 <OTM8009A_Init+0x410>)
 8005a44:	4619      	mov	r1, r3
 8005a46:	4640      	mov	r0, r8
 8005a48:	f000 fa38 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005a4c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005a4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005a50:	4a4c      	ldr	r2, [pc, #304]	; (8005b84 <OTM8009A_Init+0x43c>)
 8005a52:	21cb      	movs	r1, #203	; 0xcb
 8005a54:	4640      	mov	r0, r8
 8005a56:	f000 fa31 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005a5a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005a5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005a5e:	4a40      	ldr	r2, [pc, #256]	; (8005b60 <OTM8009A_Init+0x418>)
 8005a60:	4619      	mov	r1, r3
 8005a62:	4640      	mov	r0, r8
 8005a64:	f000 fa2a 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005a68:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005a6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005a6c:	4a46      	ldr	r2, [pc, #280]	; (8005b88 <OTM8009A_Init+0x440>)
 8005a6e:	21cb      	movs	r1, #203	; 0xcb
 8005a70:	4640      	mov	r0, r8
 8005a72:	f000 fa23 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005a76:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005a78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005a7a:	4a3b      	ldr	r2, [pc, #236]	; (8005b68 <OTM8009A_Init+0x420>)
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4640      	mov	r0, r8
 8005a80:	f000 fa1c 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005a84:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005a86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005a88:	4a40      	ldr	r2, [pc, #256]	; (8005b8c <OTM8009A_Init+0x444>)
 8005a8a:	21cb      	movs	r1, #203	; 0xcb
 8005a8c:	4640      	mov	r0, r8
 8005a8e:	f000 fa15 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005a92:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005a94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005a96:	4a36      	ldr	r2, [pc, #216]	; (8005b70 <OTM8009A_Init+0x428>)
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	f000 fa0e 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005aa0:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005aa2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005aa4:	4a3a      	ldr	r2, [pc, #232]	; (8005b90 <OTM8009A_Init+0x448>)
 8005aa6:	21cb      	movs	r1, #203	; 0xcb
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	f000 fa07 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005aae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8005ab0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005ab2:	4a38      	ldr	r2, [pc, #224]	; (8005b94 <OTM8009A_Init+0x44c>)
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4640      	mov	r0, r8
 8005ab8:	f000 fa00 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005abc:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8005abe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005ac0:	4a35      	ldr	r2, [pc, #212]	; (8005b98 <OTM8009A_Init+0x450>)
 8005ac2:	21cb      	movs	r1, #203	; 0xcb
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	f000 f9f9 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005aca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8005acc:	4404      	add	r4, r0
 8005ace:	e065      	b.n	8005b9c <OTM8009A_Init+0x454>
 8005ad0:	08023ce9 	.word	0x08023ce9
 8005ad4:	08023bdc 	.word	0x08023bdc
 8005ad8:	08023cea 	.word	0x08023cea
 8005adc:	08023c57 	.word	0x08023c57
 8005ae0:	08023ceb 	.word	0x08023ceb
 8005ae4:	08023cec 	.word	0x08023cec
 8005ae8:	24005844 	.word	0x24005844
 8005aec:	08023ced 	.word	0x08023ced
 8005af0:	08023cee 	.word	0x08023cee
 8005af4:	08023cef 	.word	0x08023cef
 8005af8:	08023cf0 	.word	0x08023cf0
 8005afc:	08023cf1 	.word	0x08023cf1
 8005b00:	08023cf2 	.word	0x08023cf2
 8005b04:	08023cf3 	.word	0x08023cf3
 8005b08:	08023cf4 	.word	0x08023cf4
 8005b0c:	08023cf5 	.word	0x08023cf5
 8005b10:	08023cf6 	.word	0x08023cf6
 8005b14:	08023cf7 	.word	0x08023cf7
 8005b18:	08023cf8 	.word	0x08023cf8
 8005b1c:	08023cf9 	.word	0x08023cf9
 8005b20:	08023cfa 	.word	0x08023cfa
 8005b24:	08023cfb 	.word	0x08023cfb
 8005b28:	08023cc2 	.word	0x08023cc2
 8005b2c:	08023cfc 	.word	0x08023cfc
 8005b30:	08023cfd 	.word	0x08023cfd
 8005b34:	08023cfe 	.word	0x08023cfe
 8005b38:	08023cff 	.word	0x08023cff
 8005b3c:	08023d00 	.word	0x08023d00
 8005b40:	08023d01 	.word	0x08023d01
 8005b44:	08023d02 	.word	0x08023d02
 8005b48:	08023d03 	.word	0x08023d03
 8005b4c:	08023d04 	.word	0x08023d04
 8005b50:	08023cc4 	.word	0x08023cc4
 8005b54:	08023cc6 	.word	0x08023cc6
 8005b58:	08023d05 	.word	0x08023d05
 8005b5c:	08023ccc 	.word	0x08023ccc
 8005b60:	08023d06 	.word	0x08023d06
 8005b64:	08023cda 	.word	0x08023cda
 8005b68:	08023d07 	.word	0x08023d07
 8005b6c:	08023bdf 	.word	0x08023bdf
 8005b70:	08023d08 	.word	0x08023d08
 8005b74:	08023d15 	.word	0x08023d15
 8005b78:	08023be9 	.word	0x08023be9
 8005b7c:	08023d09 	.word	0x08023d09
 8005b80:	08023bf3 	.word	0x08023bf3
 8005b84:	08023c02 	.word	0x08023c02
 8005b88:	08023c11 	.word	0x08023c11
 8005b8c:	08023c1b 	.word	0x08023c1b
 8005b90:	08023c2a 	.word	0x08023c2a
 8005b94:	08023d0a 	.word	0x08023d0a
 8005b98:	08023c39 	.word	0x08023c39
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005b9c:	4a99      	ldr	r2, [pc, #612]	; (8005e04 <OTM8009A_Init+0x6bc>)
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	f000 f98b 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005ba6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005ba8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005baa:	4a97      	ldr	r2, [pc, #604]	; (8005e08 <OTM8009A_Init+0x6c0>)
 8005bac:	21cb      	movs	r1, #203	; 0xcb
 8005bae:	4640      	mov	r0, r8
 8005bb0:	f000 f984 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005bb4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8005bb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005bb8:	4a94      	ldr	r2, [pc, #592]	; (8005e0c <OTM8009A_Init+0x6c4>)
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	f000 f97d 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005bc2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005bc4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005bc6:	4a92      	ldr	r2, [pc, #584]	; (8005e10 <OTM8009A_Init+0x6c8>)
 8005bc8:	21cc      	movs	r1, #204	; 0xcc
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f000 f976 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005bd0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005bd2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005bd4:	4a8f      	ldr	r2, [pc, #572]	; (8005e14 <OTM8009A_Init+0x6cc>)
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4640      	mov	r0, r8
 8005bda:	f000 f96f 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005bde:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005be0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005be2:	4a8d      	ldr	r2, [pc, #564]	; (8005e18 <OTM8009A_Init+0x6d0>)
 8005be4:	21cc      	movs	r1, #204	; 0xcc
 8005be6:	4640      	mov	r0, r8
 8005be8:	f000 f968 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005bec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005bee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005bf0:	4a8a      	ldr	r2, [pc, #552]	; (8005e1c <OTM8009A_Init+0x6d4>)
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	f000 f961 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005bfa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005bfc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005bfe:	4a88      	ldr	r2, [pc, #544]	; (8005e20 <OTM8009A_Init+0x6d8>)
 8005c00:	21cc      	movs	r1, #204	; 0xcc
 8005c02:	4640      	mov	r0, r8
 8005c04:	f000 f95a 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c08:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005c0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c0c:	4a85      	ldr	r2, [pc, #532]	; (8005e24 <OTM8009A_Init+0x6dc>)
 8005c0e:	4619      	mov	r1, r3
 8005c10:	4640      	mov	r0, r8
 8005c12:	f000 f953 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005c16:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005c18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005c1a:	4a83      	ldr	r2, [pc, #524]	; (8005e28 <OTM8009A_Init+0x6e0>)
 8005c1c:	21cc      	movs	r1, #204	; 0xcc
 8005c1e:	4640      	mov	r0, r8
 8005c20:	f000 f94c 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005c26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c28:	4a80      	ldr	r2, [pc, #512]	; (8005e2c <OTM8009A_Init+0x6e4>)
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	f000 f945 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005c32:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005c34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005c36:	4a7e      	ldr	r2, [pc, #504]	; (8005e30 <OTM8009A_Init+0x6e8>)
 8005c38:	21cc      	movs	r1, #204	; 0xcc
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	f000 f93e 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005c42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c44:	4a7b      	ldr	r2, [pc, #492]	; (8005e34 <OTM8009A_Init+0x6ec>)
 8005c46:	4619      	mov	r1, r3
 8005c48:	4640      	mov	r0, r8
 8005c4a:	f000 f937 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005c4e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005c50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005c52:	4a79      	ldr	r2, [pc, #484]	; (8005e38 <OTM8009A_Init+0x6f0>)
 8005c54:	21cc      	movs	r1, #204	; 0xcc
 8005c56:	4640      	mov	r0, r8
 8005c58:	f000 f930 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005c5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c60:	4a76      	ldr	r2, [pc, #472]	; (8005e3c <OTM8009A_Init+0x6f4>)
 8005c62:	4619      	mov	r1, r3
 8005c64:	4640      	mov	r0, r8
 8005c66:	f000 f929 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005c6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005c6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005c6e:	4a74      	ldr	r2, [pc, #464]	; (8005e40 <OTM8009A_Init+0x6f8>)
 8005c70:	21c5      	movs	r1, #197	; 0xc5
 8005c72:	4640      	mov	r0, r8
 8005c74:	f000 f922 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005c78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005c7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005c7c:	4a71      	ldr	r2, [pc, #452]	; (8005e44 <OTM8009A_Init+0x6fc>)
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4640      	mov	r0, r8
 8005c82:	f000 f91b 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005c86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005c88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005c8a:	4a6f      	ldr	r2, [pc, #444]	; (8005e48 <OTM8009A_Init+0x700>)
 8005c8c:	21f5      	movs	r1, #245	; 0xf5
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f000 f914 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005c94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005c96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005c98:	4a6c      	ldr	r2, [pc, #432]	; (8005e4c <OTM8009A_Init+0x704>)
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	f000 f90d 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005ca2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005ca4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005ca6:	4a6a      	ldr	r2, [pc, #424]	; (8005e50 <OTM8009A_Init+0x708>)
 8005ca8:	21c6      	movs	r1, #198	; 0xc6
 8005caa:	4640      	mov	r0, r8
 8005cac:	f000 f906 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8005cb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cb4:	4a67      	ldr	r2, [pc, #412]	; (8005e54 <OTM8009A_Init+0x70c>)
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4640      	mov	r0, r8
 8005cba:	f000 f8ff 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005cbe:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cc0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005cc2:	4a65      	ldr	r2, [pc, #404]	; (8005e58 <OTM8009A_Init+0x710>)
 8005cc4:	21ff      	movs	r1, #255	; 0xff
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	f000 f8f8 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005ccc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005cce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cd0:	4a60      	ldr	r2, [pc, #384]	; (8005e54 <OTM8009A_Init+0x70c>)
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	f000 f8f1 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cdc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cde:	4a5d      	ldr	r2, [pc, #372]	; (8005e54 <OTM8009A_Init+0x70c>)
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4640      	mov	r0, r8
 8005ce4:	f000 f8ea 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005ce8:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005cec:	4a5b      	ldr	r2, [pc, #364]	; (8005e5c <OTM8009A_Init+0x714>)
 8005cee:	21e1      	movs	r1, #225	; 0xe1
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f000 f8e3 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cf6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8005cf8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005cfa:	4a56      	ldr	r2, [pc, #344]	; (8005e54 <OTM8009A_Init+0x70c>)
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4640      	mov	r0, r8
 8005d00:	f000 f8dc 	bl	8005ebc <otm8009a_write_reg>
 8005d04:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005d06:	2310      	movs	r3, #16
 8005d08:	4a55      	ldr	r2, [pc, #340]	; (8005e60 <OTM8009A_Init+0x718>)
 8005d0a:	21e2      	movs	r1, #226	; 0xe2
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f000 f8d5 	bl	8005ebc <otm8009a_write_reg>
 8005d12:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005d14:	2300      	movs	r3, #0
 8005d16:	4a53      	ldr	r2, [pc, #332]	; (8005e64 <OTM8009A_Init+0x71c>)
 8005d18:	2111      	movs	r1, #17
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	f000 f8ce 	bl	8005ebc <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005d20:	2178      	movs	r1, #120	; 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005d22:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005d24:	4650      	mov	r0, sl
 8005d26:	f7ff fd03 	bl	8005730 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005d2a:	f1b9 0f00 	cmp.w	r9, #0
 8005d2e:	d062      	beq.n	8005df6 <OTM8009A_Init+0x6ae>
 8005d30:	f1b9 0f02 	cmp.w	r9, #2
 8005d34:	d108      	bne.n	8005d48 <OTM8009A_Init+0x600>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005d36:	2300      	movs	r3, #0
 8005d38:	4a4b      	ldr	r2, [pc, #300]	; (8005e68 <OTM8009A_Init+0x720>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005d3a:	213a      	movs	r1, #58	; 0x3a
 8005d3c:	4640      	mov	r0, r8
 8005d3e:	f000 f8bd 	bl	8005ebc <otm8009a_write_reg>
 8005d42:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005d44:	f8c5 9004 	str.w	r9, [r5, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005d48:	f1bb 0f01 	cmp.w	fp, #1
 8005d4c:	d156      	bne.n	8005dfc <OTM8009A_Init+0x6b4>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005d4e:	2360      	movs	r3, #96	; 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005d50:	f10d 0207 	add.w	r2, sp, #7
 8005d54:	2136      	movs	r1, #54	; 0x36
 8005d56:	4640      	mov	r0, r8
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005d58:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f000 f8ad 	bl	8005ebc <otm8009a_write_reg>
 8005d62:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005d64:	2304      	movs	r3, #4
 8005d66:	4a41      	ldr	r2, [pc, #260]	; (8005e6c <OTM8009A_Init+0x724>)
 8005d68:	212a      	movs	r1, #42	; 0x2a
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	f000 f8a6 	bl	8005ebc <otm8009a_write_reg>
 8005d70:	4404      	add	r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005d72:	2304      	movs	r3, #4
 8005d74:	4a3e      	ldr	r2, [pc, #248]	; (8005e70 <OTM8009A_Init+0x728>)
 8005d76:	212b      	movs	r1, #43	; 0x2b
 8005d78:	4640      	mov	r0, r8
 8005d7a:	f000 f89f 	bl	8005ebc <otm8009a_write_reg>
 8005d7e:	4404      	add	r4, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005d80:	f8c5 b000 	str.w	fp, [r5]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005d84:	2300      	movs	r3, #0
 8005d86:	4a3b      	ldr	r2, [pc, #236]	; (8005e74 <OTM8009A_Init+0x72c>)
 8005d88:	2151      	movs	r1, #81	; 0x51
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	f000 f896 	bl	8005ebc <otm8009a_write_reg>
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005d90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005d92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005d94:	4a38      	ldr	r2, [pc, #224]	; (8005e78 <OTM8009A_Init+0x730>)
 8005d96:	2153      	movs	r1, #83	; 0x53
 8005d98:	4640      	mov	r0, r8
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005d9a:	60ab      	str	r3, [r5, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005d9c:	f000 f88e 	bl	8005ebc <otm8009a_write_reg>
 8005da0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8005da2:	2300      	movs	r3, #0
 8005da4:	4a35      	ldr	r2, [pc, #212]	; (8005e7c <OTM8009A_Init+0x734>)
 8005da6:	2155      	movs	r1, #85	; 0x55
 8005da8:	4640      	mov	r0, r8
 8005daa:	f000 f887 	bl	8005ebc <otm8009a_write_reg>
 8005dae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005db0:	2300      	movs	r3, #0
 8005db2:	4a33      	ldr	r2, [pc, #204]	; (8005e80 <OTM8009A_Init+0x738>)
 8005db4:	215e      	movs	r1, #94	; 0x5e
 8005db6:	4640      	mov	r0, r8
 8005db8:	f000 f880 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005dbc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005dbe:	1825      	adds	r5, r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005dc0:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <OTM8009A_Init+0x73c>)
 8005dc2:	2129      	movs	r1, #41	; 0x29
 8005dc4:	4640      	mov	r0, r8
 8005dc6:	f000 f879 	bl	8005ebc <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005dca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005dcc:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005dce:	4a21      	ldr	r2, [pc, #132]	; (8005e54 <OTM8009A_Init+0x70c>)
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4640      	mov	r0, r8
 8005dd4:	f000 f872 	bl	8005ebc <otm8009a_write_reg>
 8005dd8:	4405      	add	r5, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <OTM8009A_Init+0x740>)
 8005dde:	212c      	movs	r1, #44	; 0x2c
 8005de0:	4640      	mov	r0, r8
 8005de2:	f000 f86b 	bl	8005ebc <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005de6:	42c5      	cmn	r5, r0
}
 8005de8:	bf14      	ite	ne
 8005dea:	f04f 30ff 	movne.w	r0, #4294967295
 8005dee:	2000      	moveq	r0, #0
 8005df0:	b003      	add	sp, #12
 8005df2:	e8bd 8f30 	ldmia.w	sp!, {r4, r5, r8, r9, sl, fp, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005df6:	464b      	mov	r3, r9
 8005df8:	4a24      	ldr	r2, [pc, #144]	; (8005e8c <OTM8009A_Init+0x744>)
 8005dfa:	e79e      	b.n	8005d3a <OTM8009A_Init+0x5f2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	602b      	str	r3, [r5, #0]
 8005e00:	e7c0      	b.n	8005d84 <OTM8009A_Init+0x63c>
 8005e02:	bf00      	nop
 8005e04:	08023d0b 	.word	0x08023d0b
 8005e08:	08023c43 	.word	0x08023c43
 8005e0c:	08023cea 	.word	0x08023cea
 8005e10:	08023c4d 	.word	0x08023c4d
 8005e14:	08023d09 	.word	0x08023d09
 8005e18:	08023c59 	.word	0x08023c59
 8005e1c:	08023d05 	.word	0x08023d05
 8005e20:	08023c68 	.word	0x08023c68
 8005e24:	08023d06 	.word	0x08023d06
 8005e28:	08023c77 	.word	0x08023c77
 8005e2c:	08023d07 	.word	0x08023d07
 8005e30:	08023c81 	.word	0x08023c81
 8005e34:	08023d08 	.word	0x08023d08
 8005e38:	08023c90 	.word	0x08023c90
 8005e3c:	08023cf5 	.word	0x08023cf5
 8005e40:	08023d16 	.word	0x08023d16
 8005e44:	08023d17 	.word	0x08023d17
 8005e48:	08023d18 	.word	0x08023d18
 8005e4c:	08023d19 	.word	0x08023d19
 8005e50:	08023d1a 	.word	0x08023d1a
 8005e54:	08023ce9 	.word	0x08023ce9
 8005e58:	08023c9f 	.word	0x08023c9f
 8005e5c:	08023ca2 	.word	0x08023ca2
 8005e60:	08023cb2 	.word	0x08023cb2
 8005e64:	08023d0c 	.word	0x08023d0c
 8005e68:	08023d0d 	.word	0x08023d0d
 8005e6c:	08023bd4 	.word	0x08023bd4
 8005e70:	08023bd8 	.word	0x08023bd8
 8005e74:	08023d0f 	.word	0x08023d0f
 8005e78:	08023d10 	.word	0x08023d10
 8005e7c:	08023d11 	.word	0x08023d11
 8005e80:	08023d12 	.word	0x08023d12
 8005e84:	08023d13 	.word	0x08023d13
 8005e88:	08023d14 	.word	0x08023d14
 8005e8c:	08023d0e 	.word	0x08023d0e

08005e90 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005e90:	b160      	cbz	r0, 8005eac <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005e92:	684b      	ldr	r3, [r1, #4]
 8005e94:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005e96:	688b      	ldr	r3, [r1, #8]
 8005e98:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8005e9a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005e9c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005e9e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005ea0:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <OTM8009A_RegisterBusIO+0x24>)
 8005ea2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <OTM8009A_RegisterBusIO+0x28>)
 8005ea6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005eb0:	4770      	bx	lr
 8005eb2:	bf00      	nop
 8005eb4:	08005715 	.word	0x08005715
 8005eb8:	08005723 	.word	0x08005723

08005ebc <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8005ebc:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005ebe:	6804      	ldr	r4, [r0, #0]
 8005ec0:	6880      	ldr	r0, [r0, #8]
 8005ec2:	46a4      	mov	ip, r4
}
 8005ec4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005ec8:	4760      	bx	ip
	...

08005ecc <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 8005ecc:	4a10      	ldr	r2, [pc, #64]	; (8005f10 <BSP_I2C4_DeInit+0x44>)
{
 8005ece:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005ed0:	6813      	ldr	r3, [r2, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005ed6:	b10b      	cbz	r3, 8005edc <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005ed8:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005eda:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ee0:	480c      	ldr	r0, [pc, #48]	; (8005f14 <BSP_I2C4_DeInit+0x48>)
 8005ee2:	f001 fe0b 	bl	8007afc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005ee6:	480b      	ldr	r0, [pc, #44]	; (8005f14 <BSP_I2C4_DeInit+0x48>)
 8005ee8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005eec:	f001 fe06 	bl	8007afc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005ef2:	480a      	ldr	r0, [pc, #40]	; (8005f1c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8005ef4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 8005ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005efc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005f00:	f002 f8a4 	bl	800804c <HAL_I2C_DeInit>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d0e7      	beq.n	8005ed8 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8005f08:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005f0c:	e7e5      	b.n	8005eda <BSP_I2C4_DeInit+0xe>
 8005f0e:	bf00      	nop
 8005f10:	24005850 	.word	0x24005850
 8005f14:	58020c00 	.word	0x58020c00
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	24006258 	.word	0x24006258

08005f20 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005f20:	2300      	movs	r3, #0
 8005f22:	2201      	movs	r2, #1
{
 8005f24:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8005f26:	6041      	str	r1, [r0, #4]
{
 8005f28:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005f2a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005f2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005f30:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005f34:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005f38:	f002 f836 	bl	8007fa8 <HAL_I2C_Init>
 8005f3c:	4601      	mov	r1, r0
 8005f3e:	b108      	cbz	r0, 8005f44 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005f40:	2001      	movs	r0, #1
}
 8005f42:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005f44:	4620      	mov	r0, r4
 8005f46:	f002 fa12 	bl	800836e <HAL_I2CEx_ConfigAnalogFilter>
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d1f7      	bne.n	8005f40 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005f50:	4620      	mov	r0, r4
 8005f52:	f002 fa32 	bl	80083ba <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 8005f56:	3800      	subs	r0, #0
 8005f58:	bf18      	it	ne
 8005f5a:	2001      	movne	r0, #1
 8005f5c:	e7f1      	b.n	8005f42 <MX_I2C4_Init+0x22>
	...

08005f60 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005f60:	4ba3      	ldr	r3, [pc, #652]	; (80061f0 <BSP_I2C4_Init+0x290>)
 8005f62:	48a4      	ldr	r0, [pc, #656]	; (80061f4 <BSP_I2C4_Init+0x294>)
{
 8005f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005f68:	6003      	str	r3, [r0, #0]
{
 8005f6a:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter == 0U)
 8005f6c:	4ba2      	ldr	r3, [pc, #648]	; (80061f8 <BSP_I2C4_Init+0x298>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	f040 80cf 	bne.w	8006116 <BSP_I2C4_Init+0x1b6>
    I2c4InitCounter++;
 8005f78:	2201      	movs	r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005f7c:	f002 f9f2 	bl	8008364 <HAL_I2C_GetState>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f040 80c8 	bne.w	8006116 <BSP_I2C4_Init+0x1b6>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005f86:	4d9d      	ldr	r5, [pc, #628]	; (80061fc <BSP_I2C4_Init+0x29c>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005f88:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005f8c:	2702      	movs	r7, #2
 8005f8e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005f90:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005f94:	a90d      	add	r1, sp, #52	; 0x34
 8005f96:	489a      	ldr	r0, [pc, #616]	; (8006200 <BSP_I2C4_Init+0x2a0>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005f98:	f043 0308 	orr.w	r3, r3, #8
 8005f9c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005fa0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005fa4:	f003 0308 	and.w	r3, r3, #8
 8005fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8005faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005fac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005fb0:	f043 0308 	orr.w	r3, r3, #8
 8005fb4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005fb8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc8:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005fcc:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005fce:	e9cd 7610 	strd	r7, r6, [sp, #64]	; 0x40
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005fd2:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005fd4:	f001 fca6 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005fdc:	a90d      	add	r1, sp, #52	; 0x34
 8005fde:	4888      	ldr	r0, [pc, #544]	; (8006200 <BSP_I2C4_Init+0x2a0>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005fe0:	9611      	str	r6, [sp, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005fe2:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005fe6:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005fe8:	e9cd 370f 	strd	r3, r7, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005fec:	f001 fc9a 	bl	8007924 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005ff0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8005ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8005ffc:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	930c      	str	r3, [sp, #48]	; 0x30
 8006006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8006008:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800600c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006010:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 8006014:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8006018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006020:	f003 fc02 	bl	8009828 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006024:	2800      	cmp	r0, #0
 8006026:	d070      	beq.n	800610a <BSP_I2C4_Init+0x1aa>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006028:	4b76      	ldr	r3, [pc, #472]	; (8006204 <BSP_I2C4_Init+0x2a4>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 800602a:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800602e:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800620c <BSP_I2C4_Init+0x2ac>
 8006032:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006036:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800603a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800603e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006042:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006046:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006048:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800604c:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006050:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006054:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006058:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 800605a:	9302      	str	r3, [sp, #8]
 800605c:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <BSP_I2C4_Init+0x2a8>)
 800605e:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006062:	9a00      	ldr	r2, [sp, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4696      	mov	lr, r2
{
 8006068:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800606a:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 800606c:	f240 3479 	movw	r4, #889	; 0x379
 8006070:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006072:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8006074:	45a4      	cmp	ip, r4
 8006076:	d959      	bls.n	800612c <BSP_I2C4_Init+0x1cc>
 8006078:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800607a:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800607c:	45ab      	cmp	fp, r5
 800607e:	d851      	bhi.n	8006124 <BSP_I2C4_Init+0x1c4>
 8006080:	9c02      	ldr	r4, [sp, #8]
 8006082:	42ac      	cmp	r4, r5
 8006084:	d34e      	bcc.n	8006124 <BSP_I2C4_Init+0x1c4>
            if(presc != prev_presc)
 8006086:	4590      	cmp	r8, r2
 8006088:	d04c      	beq.n	8006124 <BSP_I2C4_Init+0x1c4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800608a:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 800608e:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006090:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006092:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006098:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800609c:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80060a0:	d93d      	bls.n	800611e <BSP_I2C4_Init+0x1be>
 80060a2:	4a59      	ldr	r2, [pc, #356]	; (8006208 <BSP_I2C4_Init+0x2a8>)
 80060a4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80060a6:	4b58      	ldr	r3, [pc, #352]	; (8006208 <BSP_I2C4_Init+0x2a8>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80060a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80060ac:	4957      	ldr	r1, [pc, #348]	; (800620c <BSP_I2C4_Init+0x2ac>)
 80060ae:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80060b0:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80060b2:	9203      	str	r2, [sp, #12]
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80060b8:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80060ba:	0043      	lsls	r3, r0, #1
 80060bc:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80060c0:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 80060c4:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 80060c8:	f10b 0b0c 	add.w	fp, fp, #12
 80060cc:	9409      	str	r4, [sp, #36]	; 0x24
 80060ce:	3b0a      	subs	r3, #10
 80060d0:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	429f      	cmp	r7, r3
 80060d6:	d134      	bne.n	8006142 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80060d8:	2a7f      	cmp	r2, #127	; 0x7f
 80060da:	d816      	bhi.n	800610a <BSP_I2C4_Init+0x1aa>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80060dc:	2314      	movs	r3, #20
 80060de:	435a      	muls	r2, r3
 80060e0:	4b4a      	ldr	r3, [pc, #296]	; (800620c <BSP_I2C4_Init+0x2ac>)
 80060e2:	1899      	adds	r1, r3, r2
 80060e4:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80060e6:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80060e8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80060ec:	684b      	ldr	r3, [r1, #4]
 80060ee:	051b      	lsls	r3, r3, #20
 80060f0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80060f4:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80060f6:	688b      	ldr	r3, [r1, #8]
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80060fe:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006100:	68cb      	ldr	r3, [r1, #12]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006106:	4323      	orrs	r3, r4
 8006108:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800610a:	9900      	ldr	r1, [sp, #0]
 800610c:	4839      	ldr	r0, [pc, #228]	; (80061f4 <BSP_I2C4_Init+0x294>)
 800610e:	f7ff ff07 	bl	8005f20 <MX_I2C4_Init>
 8006112:	2800      	cmp	r0, #0
 8006114:	d169      	bne.n	80061ea <BSP_I2C4_Init+0x28a>
  int32_t ret = BSP_ERROR_NONE;
 8006116:	2000      	movs	r0, #0
}
 8006118:	b013      	add	sp, #76	; 0x4c
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	4690      	mov	r8, r2
 8006120:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006124:	3701      	adds	r7, #1
 8006126:	440d      	add	r5, r1
 8006128:	2f10      	cmp	r7, #16
 800612a:	d1a7      	bne.n	800607c <BSP_I2C4_Init+0x11c>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800612c:	2e10      	cmp	r6, #16
 800612e:	448c      	add	ip, r1
 8006130:	d19c      	bne.n	800606c <BSP_I2C4_Init+0x10c>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006132:	3201      	adds	r2, #1
 8006134:	4401      	add	r1, r0
 8006136:	2a10      	cmp	r2, #16
 8006138:	d196      	bne.n	8006068 <BSP_I2C4_Init+0x108>
 800613a:	f1be 0f00 	cmp.w	lr, #0
 800613e:	d1b0      	bne.n	80060a2 <BSP_I2C4_Init+0x142>
 8006140:	e7b1      	b.n	80060a6 <BSP_I2C4_Init+0x146>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006142:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006144:	f04f 0c00 	mov.w	ip, #0
 8006148:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800614a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800614e:	441c      	add	r4, r3
 8006150:	ebab 0503 	sub.w	r5, fp, r3
 8006154:	9404      	str	r4, [sp, #16]
 8006156:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006158:	9d04      	ldr	r5, [sp, #16]
 800615a:	9401      	str	r4, [sp, #4]
 800615c:	9c02      	ldr	r4, [sp, #8]
 800615e:	441c      	add	r4, r3
 8006160:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006162:	f241 245c 	movw	r4, #4700	; 0x125c
 8006166:	f8cd c018 	str.w	ip, [sp, #24]
 800616a:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800616e:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006172:	42a5      	cmp	r5, r4
 8006174:	d92e      	bls.n	80061d4 <BSP_I2C4_Init+0x274>
 8006176:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800617a:	d22b      	bcs.n	80061d4 <BSP_I2C4_Init+0x274>
 800617c:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800617e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006182:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006186:	1966      	adds	r6, r4, r5
 8006188:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800618c:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8006190:	f241 0447 	movw	r4, #4167	; 0x1047
 8006194:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006198:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800619c:	45a2      	cmp	sl, r4
 800619e:	d812      	bhi.n	80061c6 <BSP_I2C4_Init+0x266>
 80061a0:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 80061a4:	d30f      	bcc.n	80061c6 <BSP_I2C4_Init+0x266>
 80061a6:	4540      	cmp	r0, r8
 80061a8:	d20d      	bcs.n	80061c6 <BSP_I2C4_Init+0x266>
              error = -error;
 80061aa:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80061ae:	bf28      	it	cs
 80061b0:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80061b2:	9c03      	ldr	r4, [sp, #12]
 80061b4:	45a2      	cmp	sl, r4
 80061b6:	d206      	bcs.n	80061c6 <BSP_I2C4_Init+0x266>
              I2c_valid_timing[count].scll = scll;
 80061b8:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 80061ba:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 80061be:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80061c0:	9a07      	ldr	r2, [sp, #28]
 80061c2:	60ca      	str	r2, [r1, #12]
 80061c4:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80061c6:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 80061ca:	eba9 0903 	sub.w	r9, r9, r3
 80061ce:	441e      	add	r6, r3
 80061d0:	4498      	add	r8, r3
 80061d2:	d1db      	bne.n	800618c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80061d4:	9c01      	ldr	r4, [sp, #4]
 80061d6:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 80061da:	441d      	add	r5, r3
 80061dc:	eba4 0403 	sub.w	r4, r4, r3
 80061e0:	9401      	str	r4, [sp, #4]
 80061e2:	d1be      	bne.n	8006162 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80061e4:	3701      	adds	r7, #1
 80061e6:	3114      	adds	r1, #20
 80061e8:	e773      	b.n	80060d2 <BSP_I2C4_Init+0x172>
          ret = BSP_ERROR_BUS_FAILURE;
 80061ea:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80061ee:	e793      	b.n	8006118 <BSP_I2C4_Init+0x1b8>
 80061f0:	58001c00 	.word	0x58001c00
 80061f4:	24006258 	.word	0x24006258
 80061f8:	24005850 	.word	0x24005850
 80061fc:	58024400 	.word	0x58024400
 8006200:	58020c00 	.word	0x58020c00
 8006204:	3b9aca00 	.word	0x3b9aca00
 8006208:	24006254 	.word	0x24006254
 800620c:	24005854 	.word	0x24005854

08006210 <BSP_I2C4_WriteReg>:
{
 8006210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006212:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8006216:	9200      	str	r2, [sp, #0]
 8006218:	460a      	mov	r2, r1
 800621a:	4601      	mov	r1, r0
 800621c:	4808      	ldr	r0, [pc, #32]	; (8006240 <BSP_I2C4_WriteReg+0x30>)
 800621e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006222:	2301      	movs	r3, #1
 8006224:	f001 ff2b 	bl	800807e <HAL_I2C_Mem_Write>
 8006228:	b140      	cbz	r0, 800623c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800622a:	4805      	ldr	r0, [pc, #20]	; (8006240 <BSP_I2C4_WriteReg+0x30>)
 800622c:	f002 f89d 	bl	800836a <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006230:	2804      	cmp	r0, #4
 8006232:	bf0c      	ite	eq
 8006234:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8006238:	f06f 0003 	mvnne.w	r0, #3
}
 800623c:	b004      	add	sp, #16
 800623e:	bd10      	pop	{r4, pc}
 8006240:	24006258 	.word	0x24006258

08006244 <BSP_I2C4_ReadReg>:
{
 8006244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006246:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800624a:	9200      	str	r2, [sp, #0]
 800624c:	460a      	mov	r2, r1
 800624e:	4601      	mov	r1, r0
 8006250:	4808      	ldr	r0, [pc, #32]	; (8006274 <BSP_I2C4_ReadReg+0x30>)
 8006252:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006256:	2301      	movs	r3, #1
 8006258:	f001 ffc8 	bl	80081ec <HAL_I2C_Mem_Read>
 800625c:	b140      	cbz	r0, 8006270 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <BSP_I2C4_ReadReg+0x30>)
 8006260:	f002 f883 	bl	800836a <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8006264:	2804      	cmp	r0, #4
 8006266:	bf0c      	ite	eq
 8006268:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 800626c:	f06f 0003 	mvnne.w	r0, #3
}
 8006270:	b004      	add	sp, #16
 8006272:	bd10      	pop	{r4, pc}
 8006274:	24006258 	.word	0x24006258

08006278 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006278:	f000 bd10 	b.w	8006c9c <HAL_GetTick>

0800627c <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800627c:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800627e:	f44f 7c40 	mov.w	ip, #768	; 0x300
  hQspi->Instance                = QUADSPI;
 8006282:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006284:	684a      	ldr	r2, [r1, #4]
 8006286:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006288:	2201      	movs	r2, #1
 800628a:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800628c:	688a      	ldr	r2, [r1, #8]
 800628e:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006290:	680a      	ldr	r2, [r1, #0]
 8006292:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006294:	2200      	movs	r2, #0
 8006296:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800629a:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800629c:	68ca      	ldr	r2, [r1, #12]
 800629e:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80062a0:	f002 bc0e 	b.w	8008ac0 <HAL_QSPI_Init>
 80062a4:	52005000 	.word	0x52005000

080062a8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 80062a8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80062aa:	b988      	cbnz	r0, 80062d0 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062ac:	4c0a      	ldr	r4, [pc, #40]	; (80062d8 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 80062ae:	480b      	ldr	r0, [pc, #44]	; (80062dc <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80062b0:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062b2:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80062b4:	b94b      	cbnz	r3, 80062ca <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062b6:	f7ff f9a5 	bl	8005604 <MT25TL01G_EnableMemoryMappedModeSTR>
 80062ba:	b110      	cbz	r0, 80062c2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80062bc:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80062c0:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80062c2:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80062c4:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80062c6:	7023      	strb	r3, [r4, #0]
 80062c8:	e7fa      	b.n	80062c0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80062ca:	f7ff f951 	bl	8005570 <MT25TL01G_EnableMemoryMappedModeDTR>
 80062ce:	e7f4      	b.n	80062ba <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80062d0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80062d4:	e7f4      	b.n	80062c0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80062d6:	bf00      	nop
 80062d8:	240062a4 	.word	0x240062a4
 80062dc:	24000320 	.word	0x24000320

080062e0 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80062e6:	bb28      	cbnz	r0, 8006334 <BSP_QSPI_ConfigFlash+0x54>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80062e8:	4d17      	ldr	r5, [pc, #92]	; (8006348 <BSP_QSPI_ConfigFlash+0x68>)
 80062ea:	782b      	ldrb	r3, [r5, #0]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d024      	beq.n	800633a <BSP_QSPI_ConfigFlash+0x5a>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80062f0:	2a00      	cmp	r2, #0
 80062f2:	4e16      	ldr	r6, [pc, #88]	; (800634c <BSP_QSPI_ConfigFlash+0x6c>)
 80062f4:	bf08      	it	eq
 80062f6:	2010      	moveq	r0, #16
 80062f8:	60f0      	str	r0, [r6, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80062fa:	4630      	mov	r0, r6
 80062fc:	f002 fbe0 	bl	8008ac0 <HAL_QSPI_Init>
 8006300:	b9f0      	cbnz	r0, 8006340 <BSP_QSPI_ConfigFlash+0x60>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006302:	786b      	ldrb	r3, [r5, #1]
 8006304:	2b03      	cmp	r3, #3
 8006306:	d10f      	bne.n	8006328 <BSP_QSPI_ConfigFlash+0x48>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006308:	2c03      	cmp	r4, #3
 800630a:	d105      	bne.n	8006318 <BSP_QSPI_ConfigFlash+0x38>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800630c:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800630e:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8006310:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006312:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006314:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8006316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8006318:	4630      	mov	r0, r6
 800631a:	f7ff f90d 	bl	8005538 <MT25TL01G_ExitQPIMode>
 800631e:	2800      	cmp	r0, #0
 8006320:	d0f4      	beq.n	800630c <BSP_QSPI_ConfigFlash+0x2c>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006322:	f06f 0004 	mvn.w	r0, #4
 8006326:	e7f6      	b.n	8006316 <BSP_QSPI_ConfigFlash+0x36>
          if(Mode == MT25TL01G_QPI_MODE)
 8006328:	2c03      	cmp	r4, #3
 800632a:	d1ef      	bne.n	800630c <BSP_QSPI_ConfigFlash+0x2c>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800632c:	4630      	mov	r0, r6
 800632e:	f7ff f8e7 	bl	8005500 <MT25TL01G_EnterQPIMode>
 8006332:	e7f4      	b.n	800631e <BSP_QSPI_ConfigFlash+0x3e>
    ret = BSP_ERROR_WRONG_PARAM;
 8006334:	f06f 0001 	mvn.w	r0, #1
 8006338:	e7ed      	b.n	8006316 <BSP_QSPI_ConfigFlash+0x36>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800633a:	f06f 0019 	mvn.w	r0, #25
 800633e:	e7ea      	b.n	8006316 <BSP_QSPI_ConfigFlash+0x36>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006340:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006344:	e7e7      	b.n	8006316 <BSP_QSPI_ConfigFlash+0x36>
 8006346:	bf00      	nop
 8006348:	240062a4 	.word	0x240062a4
 800634c:	24000320 	.word	0x24000320

08006350 <BSP_QSPI_Init>:
{
 8006350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006354:	460d      	mov	r5, r1
 8006356:	b0a4      	sub	sp, #144	; 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006358:	4604      	mov	r4, r0
 800635a:	2800      	cmp	r0, #0
 800635c:	f040 81ac 	bne.w	80066b8 <BSP_QSPI_Init+0x368>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8006360:	4e03      	ldr	r6, [pc, #12]	; (8006370 <BSP_QSPI_Init+0x20>)
 8006362:	7833      	ldrb	r3, [r6, #0]
 8006364:	b133      	cbz	r3, 8006374 <BSP_QSPI_Init+0x24>
  int32_t ret = BSP_ERROR_NONE;
 8006366:	2000      	movs	r0, #0
}
 8006368:	b024      	add	sp, #144	; 0x90
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	bf00      	nop
 8006370:	240062a4 	.word	0x240062a4
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006374:	4bc2      	ldr	r3, [pc, #776]	; (8006680 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006376:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800637a:	2709      	movs	r7, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800637c:	a916      	add	r1, sp, #88	; 0x58
  QSPI_CLK_ENABLE();
 800637e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006382:	f04f 0840 	mov.w	r8, #64	; 0x40
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006386:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 800638a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800638e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006392:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006396:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800639a:	9201      	str	r2, [sp, #4]
 800639c:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 800639e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80063a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063a4:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 80063a6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80063a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063ac:	67da      	str	r2, [r3, #124]	; 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 80063ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063b2:	f042 0202 	orr.w	r2, r2, #2
 80063b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80063ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063be:	f002 0202 	and.w	r2, r2, #2
 80063c2:	9202      	str	r2, [sp, #8]
 80063c4:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80063c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80063d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063d6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80063da:	9203      	str	r2, [sp, #12]
 80063dc:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80063de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063e2:	f042 0208 	orr.w	r2, r2, #8
 80063e6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80063ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063ee:	f002 0208 	and.w	r2, r2, #8
 80063f2:	9204      	str	r2, [sp, #16]
 80063f4:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 80063f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80063fa:	f042 0220 	orr.w	r2, r2, #32
 80063fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006402:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006406:	f002 0220 	and.w	r2, r2, #32
 800640a:	9205      	str	r2, [sp, #20]
 800640c:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800640e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006412:	f042 0220 	orr.w	r2, r2, #32
 8006416:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800641a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800641e:	f002 0220 	and.w	r2, r2, #32
 8006422:	9206      	str	r2, [sp, #24]
 8006424:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8006426:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800642a:	f042 0220 	orr.w	r2, r2, #32
 800642e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006432:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006436:	f002 0220 	and.w	r2, r2, #32
 800643a:	9207      	str	r2, [sp, #28]
 800643c:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800643e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006446:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800644a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800644e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006452:	9208      	str	r2, [sp, #32]
 8006454:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8006456:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800645a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800645e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006462:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006466:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800646a:	9209      	str	r2, [sp, #36]	; 0x24
 800646c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800646e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006472:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006476:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800647a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800647e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8006482:	920a      	str	r2, [sp, #40]	; 0x28
 8006484:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006486:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800648a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006492:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006496:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800649a:	920b      	str	r2, [sp, #44]	; 0x2c
 800649c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800649e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80064a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80064aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	930c      	str	r3, [sp, #48]	; 0x30
 80064b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80064b6:	2302      	movs	r3, #2
 80064b8:	e9cd 9316 	strd	r9, r3, [sp, #88]	; 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80064bc:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80064be:	971a      	str	r7, [sp, #104]	; 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80064c0:	e9cd 0318 	strd	r0, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80064c4:	486f      	ldr	r0, [pc, #444]	; (8006684 <BSP_QSPI_Init+0x334>)
 80064c6:	f001 fa2d 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80064ca:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80064cc:	a916      	add	r1, sp, #88	; 0x58
 80064ce:	486e      	ldr	r0, [pc, #440]	; (8006688 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80064d0:	9318      	str	r3, [sp, #96]	; 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 80064d2:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80064d6:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 80064da:	f001 fa23 	bl	8007924 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80064de:	f44f 6300 	mov.w	r3, #2048	; 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80064e2:	a916      	add	r1, sp, #88	; 0x58
 80064e4:	4869      	ldr	r0, [pc, #420]	; (800668c <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 80064e6:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80064e8:	9418      	str	r4, [sp, #96]	; 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80064ea:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 80064ec:	f001 fa1a 	bl	8007924 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80064f0:	a916      	add	r1, sp, #88	; 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80064f2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80064f6:	4866      	ldr	r0, [pc, #408]	; (8006690 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80064f8:	f44f 7900 	mov.w	r9, #512	; 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80064fc:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80064fe:	f001 fa11 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006502:	a916      	add	r1, sp, #88	; 0x58
 8006504:	4863      	ldr	r0, [pc, #396]	; (8006694 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006506:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800650a:	f8cd a068 	str.w	sl, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800650e:	f001 fa09 	bl	8007924 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006512:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006514:	a916      	add	r1, sp, #88	; 0x58
 8006516:	485e      	ldr	r0, [pc, #376]	; (8006690 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006518:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800651a:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800651c:	f001 fa02 	bl	8007924 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006520:	2380      	movs	r3, #128	; 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006522:	a916      	add	r1, sp, #88	; 0x58
 8006524:	485b      	ldr	r0, [pc, #364]	; (8006694 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006526:	9316      	str	r3, [sp, #88]	; 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006528:	971a      	str	r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800652a:	f001 f9fb 	bl	8007924 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800652e:	a916      	add	r1, sp, #88	; 0x58
 8006530:	4855      	ldr	r0, [pc, #340]	; (8006688 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8006532:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006536:	f001 f9f5 	bl	8007924 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800653a:	a916      	add	r1, sp, #88	; 0x58
 800653c:	4855      	ldr	r0, [pc, #340]	; (8006694 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800653e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006542:	f001 f9ef 	bl	8007924 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800654a:	a916      	add	r1, sp, #88	; 0x58
 800654c:	484e      	ldr	r0, [pc, #312]	; (8006688 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800654e:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006550:	f001 f9e8 	bl	8007924 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006554:	4622      	mov	r2, r4
 8006556:	210f      	movs	r1, #15
 8006558:	205c      	movs	r0, #92	; 0x5c
 800655a:	f000 fbcf 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800655e:	205c      	movs	r0, #92	; 0x5c
 8006560:	f000 fbfe 	bl	8006d60 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8006564:	a811      	add	r0, sp, #68	; 0x44
 8006566:	f7fe ff22 	bl	80053ae <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800656a:	786a      	ldrb	r2, [r5, #1]
 800656c:	4b4a      	ldr	r3, [pc, #296]	; (8006698 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800656e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	930e      	str	r3, [sp, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800657a:	fa93 f3a3 	rbit	r3, r3
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800657e:	2a00      	cmp	r2, #0
  return __builtin_clz(value);
 8006580:	fab3 f383 	clz	r3, r3
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006584:	a90d      	add	r1, sp, #52	; 0x34
 8006586:	4845      	ldr	r0, [pc, #276]	; (800669c <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006588:	bf08      	it	eq
 800658a:	2410      	moveq	r4, #16
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800658c:	3b01      	subs	r3, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800658e:	940f      	str	r4, [sp, #60]	; 0x3c
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006590:	930d      	str	r3, [sp, #52]	; 0x34
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006592:	f7ff fe73 	bl	800627c <MX_QSPI_Init>
 8006596:	2800      	cmp	r0, #0
 8006598:	f040 8091 	bne.w	80066be <BSP_QSPI_Init+0x36e>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800659c:	2103      	movs	r1, #3
 800659e:	483f      	ldr	r0, [pc, #252]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065a0:	f7ff f876 	bl	8005690 <MT25TL01G_ResetEnable>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d17c      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 80065a8:	2103      	movs	r1, #3
 80065aa:	483c      	ldr	r0, [pc, #240]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065ac:	f7ff f891 	bl	80056d2 <MT25TL01G_ResetMemory>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d176      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80065b4:	7871      	ldrb	r1, [r6, #1]
 80065b6:	4839      	ldr	r0, [pc, #228]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065b8:	f7fe ff0a 	bl	80053d0 <MT25TL01G_AutoPollingMemReady>
 80065bc:	4601      	mov	r1, r0
 80065be:	2800      	cmp	r0, #0
 80065c0:	d16f      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80065c2:	4836      	ldr	r0, [pc, #216]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065c4:	f7ff f864 	bl	8005690 <MT25TL01G_ResetEnable>
 80065c8:	4601      	mov	r1, r0
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d169      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 80065ce:	4833      	ldr	r0, [pc, #204]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065d0:	f7ff f87f 	bl	80056d2 <MT25TL01G_ResetMemory>
 80065d4:	4601      	mov	r1, r0
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d163      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80065da:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80065dc:	70b0      	strb	r0, [r6, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80065de:	482f      	ldr	r0, [pc, #188]	; (800669c <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80065e0:	8033      	strh	r3, [r6, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80065e2:	f7fe fef5 	bl	80053d0 <MT25TL01G_AutoPollingMemReady>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d15b      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80065ea:	7871      	ldrb	r1, [r6, #1]
 80065ec:	482b      	ldr	r0, [pc, #172]	; (800669c <BSP_QSPI_Init+0x34c>)
 80065ee:	f7fe ff5e 	bl	80054ae <MT25TL01G_Enter4BytesAddressMode>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d155      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80065f6:	f44f 7340 	mov.w	r3, #768	; 0x300
  uint16_t reg=0;
 80065fa:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80065fe:	901b      	str	r0, [sp, #108]	; 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006604:	931c      	str	r3, [sp, #112]	; 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8006606:	2385      	movs	r3, #133	; 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006608:	a916      	add	r1, sp, #88	; 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800660a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800660c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8006610:	931f      	str	r3, [sp, #124]	; 0x7c
  s_command.NbData            = 2;
 8006612:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006614:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006618:	e9cd 3020 	strd	r3, r0, [sp, #128]	; 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800661c:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006620:	481e      	ldr	r0, [pc, #120]	; (800669c <BSP_QSPI_Init+0x34c>)
 8006622:	f002 fa9b 	bl	8008b5c <HAL_QSPI_Command>
 8006626:	2800      	cmp	r0, #0
 8006628:	d13b      	bne.n	80066a2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800662a:	f241 3288 	movw	r2, #5000	; 0x1388
 800662e:	f10d 0102 	add.w	r1, sp, #2
 8006632:	481a      	ldr	r0, [pc, #104]	; (800669c <BSP_QSPI_Init+0x34c>)
 8006634:	f002 fb2e 	bl	8008c94 <HAL_QSPI_Receive>
 8006638:	bb98      	cbnz	r0, 80066a2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800663a:	7871      	ldrb	r1, [r6, #1]
 800663c:	4817      	ldr	r0, [pc, #92]	; (800669c <BSP_QSPI_Init+0x34c>)
 800663e:	f7fe fef2 	bl	8005426 <MT25TL01G_WriteEnable>
 8006642:	bb70      	cbnz	r0, 80066a2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8006644:	2381      	movs	r3, #129	; 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	a916      	add	r1, sp, #88	; 0x58
 800664c:	4813      	ldr	r0, [pc, #76]	; (800669c <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800664e:	9316      	str	r3, [sp, #88]	; 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8006650:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006658:	051b      	lsls	r3, r3, #20
 800665a:	0d1b      	lsrs	r3, r3, #20
 800665c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006668:	f002 fa78 	bl	8008b5c <HAL_QSPI_Command>
 800666c:	b9c8      	cbnz	r0, 80066a2 <BSP_QSPI_Init+0x352>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	f10d 0102 	add.w	r1, sp, #2
 8006676:	4809      	ldr	r0, [pc, #36]	; (800669c <BSP_QSPI_Init+0x34c>)
 8006678:	f002 fab3 	bl	8008be2 <HAL_QSPI_Transmit>
 800667c:	e010      	b.n	80066a0 <BSP_QSPI_Init+0x350>
 800667e:	bf00      	nop
 8006680:	58024400 	.word	0x58024400
 8006684:	58020400 	.word	0x58020400
 8006688:	58021800 	.word	0x58021800
 800668c:	58020c00 	.word	0x58020c00
 8006690:	58021c00 	.word	0x58021c00
 8006694:	58021400 	.word	0x58021400
 8006698:	08023d1c 	.word	0x08023d1c
 800669c:	24000320 	.word	0x24000320
 80066a0:	b110      	cbz	r0, 80066a8 <BSP_QSPI_Init+0x358>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80066a2:	f06f 0004 	mvn.w	r0, #4
 80066a6:	e65f      	b.n	8006368 <BSP_QSPI_Init+0x18>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80066a8:	786a      	ldrb	r2, [r5, #1]
 80066aa:	7829      	ldrb	r1, [r5, #0]
 80066ac:	f7ff fe18 	bl	80062e0 <BSP_QSPI_ConfigFlash>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	f43f ae58 	beq.w	8006366 <BSP_QSPI_Init+0x16>
 80066b6:	e7f4      	b.n	80066a2 <BSP_QSPI_Init+0x352>
    ret = BSP_ERROR_WRONG_PARAM;
 80066b8:	f06f 0001 	mvn.w	r0, #1
 80066bc:	e654      	b.n	8006368 <BSP_QSPI_Init+0x18>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80066be:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80066c2:	e651      	b.n	8006368 <BSP_QSPI_Init+0x18>

080066c4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80066c4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80066c6:	4604      	mov	r4, r0
 80066c8:	b970      	cbnz	r0, 80066e8 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80066ca:	4b09      	ldr	r3, [pc, #36]	; (80066f0 <BSP_SDRAM_DeInit+0x2c>)
 80066cc:	4809      	ldr	r0, [pc, #36]	; (80066f4 <BSP_SDRAM_DeInit+0x30>)
 80066ce:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80066d0:	f003 fed4 	bl	800a47c <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80066d4:	207a      	movs	r0, #122	; 0x7a
 80066d6:	f000 fb51 	bl	8006d7c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80066da:	4807      	ldr	r0, [pc, #28]	; (80066f8 <BSP_SDRAM_DeInit+0x34>)
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <BSP_SDRAM_DeInit+0x38>)
 80066de:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80066e0:	f002 f8bb 	bl	800885a <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80066e4:	4620      	mov	r0, r4
}
 80066e6:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80066e8:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80066ec:	e7fb      	b.n	80066e6 <BSP_SDRAM_DeInit+0x22>
 80066ee:	bf00      	nop
 80066f0:	52004140 	.word	0x52004140
 80066f4:	240062b0 	.word	0x240062b0
 80066f8:	240062e4 	.word	0x240062e4
 80066fc:	52000040 	.word	0x52000040

08006700 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006700:	2201      	movs	r2, #1
 8006702:	4915      	ldr	r1, [pc, #84]	; (8006758 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006704:	4b15      	ldr	r3, [pc, #84]	; (800675c <MX_SDRAM_Init+0x5c>)
{
 8006706:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8006708:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800670c:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800670e:	2104      	movs	r1, #4
 8006710:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006712:	2440      	movs	r4, #64	; 0x40
{
 8006714:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006716:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800671a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800671e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8006722:	2200      	movs	r2, #0
 8006724:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8006728:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800672c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8006730:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006732:	629a      	str	r2, [r3, #40]	; 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006734:	2207      	movs	r2, #7
 8006736:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8006738:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800673c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800673e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006740:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8006744:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006748:	f003 fe70 	bl	800a42c <HAL_SDRAM_Init>
}
 800674c:	3800      	subs	r0, #0
 800674e:	bf18      	it	ne
 8006750:	2001      	movne	r0, #1
 8006752:	b008      	add	sp, #32
 8006754:	bd10      	pop	{r4, pc}
 8006756:	bf00      	nop
 8006758:	52004140 	.word	0x52004140
 800675c:	240062b0 	.word	0x240062b0

08006760 <BSP_SDRAM_Init>:
{
 8006760:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006762:	4605      	mov	r5, r0
{
 8006764:	b08f      	sub	sp, #60	; 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 80dd 	bne.w	8006926 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 800676c:	4b71      	ldr	r3, [pc, #452]	; (8006934 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800676e:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006770:	a909      	add	r1, sp, #36	; 0x24
 8006772:	4871      	ldr	r0, [pc, #452]	; (8006938 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006774:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006778:	4c70      	ldr	r4, [pc, #448]	; (800693c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800677a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800677e:	4e70      	ldr	r6, [pc, #448]	; (8006940 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006780:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006784:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006788:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800678c:	9201      	str	r2, [sp, #4]
 800678e:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8006790:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006794:	f042 0201 	orr.w	r2, r2, #1
 8006798:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800679c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80067a0:	f002 0201 	and.w	r2, r2, #1
 80067a4:	9202      	str	r2, [sp, #8]
 80067a6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067ac:	f042 0208 	orr.w	r2, r2, #8
 80067b0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067b8:	f002 0208 	and.w	r2, r2, #8
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067c4:	f042 0210 	orr.w	r2, r2, #16
 80067c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067d0:	f002 0210 	and.w	r2, r2, #16
 80067d4:	9204      	str	r2, [sp, #16]
 80067d6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80067d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067dc:	f042 0220 	orr.w	r2, r2, #32
 80067e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067e8:	f002 0220 	and.w	r2, r2, #32
 80067ec:	9205      	str	r2, [sp, #20]
 80067ee:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80067f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80067f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80067fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006800:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8006804:	9206      	str	r2, [sp, #24]
 8006806:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006808:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800680c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006810:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006814:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006818:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800681c:	9207      	str	r2, [sp, #28]
 800681e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006820:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006828:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800682c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800682e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	9308      	str	r3, [sp, #32]
 8006838:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800683a:	2301      	movs	r3, #1
 800683c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8006840:	230c      	movs	r3, #12
 8006842:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006846:	f24c 7303 	movw	r3, #50947	; 0xc703
 800684a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800684c:	f001 f86a 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006850:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006854:	a909      	add	r1, sp, #36	; 0x24
 8006856:	483b      	ldr	r0, [pc, #236]	; (8006944 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006858:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800685a:	f001 f863 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800685e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006862:	a909      	add	r1, sp, #36	; 0x24
 8006864:	4838      	ldr	r0, [pc, #224]	; (8006948 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006866:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006868:	f001 f85c 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 800686c:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006870:	a909      	add	r1, sp, #36	; 0x24
 8006872:	4836      	ldr	r0, [pc, #216]	; (800694c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006874:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006876:	f001 f855 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800687a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800687e:	a909      	add	r1, sp, #36	; 0x24
 8006880:	4833      	ldr	r0, [pc, #204]	; (8006950 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006882:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006884:	f001 f84e 	bl	8007924 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006888:	f240 63ff 	movw	r3, #1791	; 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800688c:	a909      	add	r1, sp, #36	; 0x24
 800688e:	4831      	ldr	r0, [pc, #196]	; (8006954 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006892:	f001 f847 	bl	8007924 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006896:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800689a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800689e:	f240 2002 	movw	r0, #514	; 0x202
 80068a2:	f640 0208 	movw	r2, #2056	; 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80068a6:	6334      	str	r4, [r6, #48]	; 0x30
 80068a8:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80068aa:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80068ae:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80068b2:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80068b4:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80068b6:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80068b8:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80068ba:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80068be:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80068c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80068c6:	4b24      	ldr	r3, [pc, #144]	; (8006958 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80068c8:	6262      	str	r2, [r4, #36]	; 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80068ca:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80068cc:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80068d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80068d4:	f001 ffc1 	bl	800885a <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80068d8:	4620      	mov	r0, r4
 80068da:	f001 ff4f 	bl	800877c <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80068de:	462a      	mov	r2, r5
 80068e0:	210f      	movs	r1, #15
 80068e2:	207a      	movs	r0, #122	; 0x7a
 80068e4:	f000 fa0a 	bl	8006cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80068e8:	207a      	movs	r0, #122	; 0x7a
 80068ea:	f000 fa39 	bl	8006d60 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80068ee:	4630      	mov	r0, r6
 80068f0:	f7ff ff06 	bl	8006700 <MX_SDRAM_Init>
 80068f4:	b9d0      	cbnz	r0, 800692c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80068f6:	4919      	ldr	r1, [pc, #100]	; (800695c <BSP_SDRAM_Init+0x1fc>)
 80068f8:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80068fa:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80068fe:	f240 6303 	movw	r3, #1539	; 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8006902:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8006904:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8006908:	2330      	movs	r3, #48	; 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 800690a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800690e:	f44f 7300 	mov.w	r3, #512	; 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006912:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006914:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006916:	f7fe fd1d 	bl	8005354 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800691a:	2800      	cmp	r0, #0
 800691c:	bf18      	it	ne
 800691e:	f06f 0004 	mvnne.w	r0, #4
}
 8006922:	b00f      	add	sp, #60	; 0x3c
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006926:	f06f 0001 	mvn.w	r0, #1
 800692a:	e7fa      	b.n	8006922 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 800692c:	f04f 30ff 	mov.w	r0, #4294967295
 8006930:	e7f7      	b.n	8006922 <BSP_SDRAM_Init+0x1c2>
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400
 8006938:	58020c00 	.word	0x58020c00
 800693c:	24006350 	.word	0x24006350
 8006940:	240062b0 	.word	0x240062b0
 8006944:	58021000 	.word	0x58021000
 8006948:	58021400 	.word	0x58021400
 800694c:	58021800 	.word	0x58021800
 8006950:	58021c00 	.word	0x58021c00
 8006954:	58022000 	.word	0x58022000
 8006958:	52000040 	.word	0x52000040
 800695c:	240063bc 	.word	0x240063bc

08006960 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8006960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	460c      	mov	r4, r1
 8006966:	b08c      	sub	sp, #48	; 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006968:	4606      	mov	r6, r0
 800696a:	2800      	cmp	r0, #0
 800696c:	d171      	bne.n	8006a52 <BSP_TS_Init+0xf2>
 800696e:	680b      	ldr	r3, [r1, #0]
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 8006976:	d26c      	bcs.n	8006a52 <BSP_TS_Init+0xf2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006978:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800697a:	1e51      	subs	r1, r2, #1
 800697c:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 8006980:	d267      	bcs.n	8006a52 <BSP_TS_Init+0xf2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8006982:	4293      	cmp	r3, r2
 8006984:	bf28      	it	cs
 8006986:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006988:	68e2      	ldr	r2, [r4, #12]
 800698a:	429a      	cmp	r2, r3
 800698c:	d861      	bhi.n	8006a52 <BSP_TS_Init+0xf2>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800698e:	2370      	movs	r3, #112	; 0x70
 8006990:	2254      	movs	r2, #84	; 0x54
 8006992:	f10d 0a04 	add.w	sl, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006996:	4f32      	ldr	r7, [pc, #200]	; (8006a60 <BSP_TS_Init+0x100>)
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
      Ts_CompObj[Instance] = &FT6X06Obj;
 8006998:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8006a80 <BSP_TS_Init+0x120>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800699c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006a84 <BSP_TS_Init+0x124>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80069a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80069a4:	4b2f      	ldr	r3, [pc, #188]	; (8006a64 <BSP_TS_Init+0x104>)
 80069a6:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80069a8:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <BSP_TS_Init+0x108>)
 80069aa:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80069ac:	4b2f      	ldr	r3, [pc, #188]	; (8006a6c <BSP_TS_Init+0x10c>)
 80069ae:	930a      	str	r3, [sp, #40]	; 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80069b0:	4b2f      	ldr	r3, [pc, #188]	; (8006a70 <BSP_TS_Init+0x110>)
 80069b2:	9309      	str	r3, [sp, #36]	; 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80069b4:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <BSP_TS_Init+0x114>)
 80069b6:	930b      	str	r3, [sp, #44]	; 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80069b8:	f85a 3b04 	ldr.w	r3, [sl], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80069bc:	a906      	add	r1, sp, #24
 80069be:	4828      	ldr	r0, [pc, #160]	; (8006a60 <BSP_TS_Init+0x100>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80069c0:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80069c4:	f7fe fbcc 	bl	8005160 <FT6X06_RegisterBusIO>
 80069c8:	b118      	cbz	r0, 80069d2 <BSP_TS_Init+0x72>
  for(i = 0; i < 2UL; i++)
 80069ca:	2e01      	cmp	r6, #1
 80069cc:	d044      	beq.n	8006a58 <BSP_TS_Init+0xf8>
 80069ce:	2601      	movs	r6, #1
 80069d0:	e7f2      	b.n	80069b8 <BSP_TS_Init+0x58>
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80069d2:	4669      	mov	r1, sp
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7fe fb0c 	bl	8004ff2 <FT6X06_ReadID>
 80069da:	2800      	cmp	r0, #0
 80069dc:	d1f5      	bne.n	80069ca <BSP_TS_Init+0x6a>
    else if(id != FT6X06_ID)
 80069de:	9b00      	ldr	r3, [sp, #0]
 80069e0:	2b11      	cmp	r3, #17
 80069e2:	d1f2      	bne.n	80069ca <BSP_TS_Init+0x6a>
      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80069e4:	a903      	add	r1, sp, #12
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7fe fab0 	bl	8004f4c <FT6X06_GetCapabilities>
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80069ec:	4b22      	ldr	r3, [pc, #136]	; (8006a78 <BSP_TS_Init+0x118>)

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80069ee:	4638      	mov	r0, r7
      Ts_CompObj[Instance] = &FT6X06Obj;
 80069f0:	f8c8 7000 	str.w	r7, [r8]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80069f4:	f8c9 3000 	str.w	r3, [r9]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4798      	blx	r3
 80069fc:	4605      	mov	r5, r0
 80069fe:	2800      	cmp	r0, #0
 8006a00:	d1e3      	bne.n	80069ca <BSP_TS_Init+0x6a>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006a02:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006a04:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006a06:	4e1d      	ldr	r6, [pc, #116]	; (8006a7c <BSP_TS_Init+0x11c>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006a08:	f8d8 0000 	ldr.w	r0, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006a0c:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006a1a:	f8d9 3000 	ldr.w	r3, [r9]
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	4798      	blx	r3
 8006a22:	2800      	cmp	r0, #0
 8006a24:	da02      	bge.n	8006a2c <BSP_TS_Init+0xcc>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006a26:	f06f 0504 	mvn.w	r5, #4
 8006a2a:	e00e      	b.n	8006a4a <BSP_TS_Init+0xea>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006a2c:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006a2e:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006a30:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006a32:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006a34:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006a36:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006a38:	68e3      	ldr	r3, [r4, #12]
 8006a3a:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006a3c:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006a3e:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006a40:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006a42:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006a44:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006a46:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	b00c      	add	sp, #48	; 0x30
 8006a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006a52:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006a56:	e7f8      	b.n	8006a4a <BSP_TS_Init+0xea>
      ret = BSP_ERROR_NO_INIT;
 8006a58:	f04f 35ff 	mov.w	r5, #4294967295
 8006a5c:	e7f5      	b.n	8006a4a <BSP_TS_Init+0xea>
 8006a5e:	bf00      	nop
 8006a60:	240063dc 	.word	0x240063dc
 8006a64:	08005f61 	.word	0x08005f61
 8006a68:	08005ecd 	.word	0x08005ecd
 8006a6c:	08006245 	.word	0x08006245
 8006a70:	08006211 	.word	0x08006211
 8006a74:	08006279 	.word	0x08006279
 8006a78:	2400001c 	.word	0x2400001c
 8006a7c:	24006408 	.word	0x24006408
 8006a80:	24006404 	.word	0x24006404
 8006a84:	24006430 	.word	0x24006430

08006a88 <BSP_TS_GetState>:
{
 8006a88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8006a8c:	460e      	mov	r6, r1
  if(Instance >= TS_INSTANCES_NBR)
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	d151      	bne.n	8006b36 <BSP_TS_GetState+0xae>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006a92:	4b2a      	ldr	r3, [pc, #168]	; (8006b3c <BSP_TS_GetState+0xb4>)
 8006a94:	a901      	add	r1, sp, #4
 8006a96:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <BSP_TS_GetState+0xb8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	6810      	ldr	r0, [r2, #0]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	4798      	blx	r3
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	db45      	blt.n	8006b30 <BSP_TS_GetState+0xa8>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006aa4:	4927      	ldr	r1, [pc, #156]	; (8006b44 <BSP_TS_GetState+0xbc>)
    else if(state.TouchDetected != 0U)
 8006aa6:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006aa8:	f8d1 c018 	ldr.w	ip, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8006aac:	6a0f      	ldr	r7, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d03a      	beq.n	8006b28 <BSP_TS_GetState+0xa0>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006ab2:	688b      	ldr	r3, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006ab4:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006ab8:	071c      	lsls	r4, r3, #28
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006aba:	f8d1 e014 	ldr.w	lr, [r1, #20]
      y_oriented = state.TouchY;
 8006abe:	e9dd 5202 	ldrd	r5, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006ac2:	bf42      	ittt	mi
 8006ac4:	462c      	movmi	r4, r5
        x_oriented = state.TouchY;
 8006ac6:	4615      	movmi	r5, r2
        y_oriented = state.TouchX;
 8006ac8:	4622      	movmi	r2, r4
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8006aca:	079c      	lsls	r4, r3, #30
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006acc:	bf44      	itt	mi
 8006ace:	f108 34ff 	addmi.w	r4, r8, #4294967295
 8006ad2:	1b65      	submi	r5, r4, r5
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8006ad4:	075b      	lsls	r3, r3, #29
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006ad6:	680c      	ldr	r4, [r1, #0]
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006ad8:	bf48      	it	mi
 8006ada:	f10e 33ff 	addmi.w	r3, lr, #4294967295
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006ade:	fb05 f404 	mul.w	r4, r5, r4
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8006ae2:	bf48      	it	mi
 8006ae4:	1a9a      	submi	r2, r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006ae6:	684b      	ldr	r3, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006ae8:	6030      	str	r0, [r6, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006aea:	4353      	muls	r3, r2
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006aec:	68c8      	ldr	r0, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006aee:	fbb4 f4f8 	udiv	r4, r4, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006af2:	fbb3 f3fe 	udiv	r3, r3, lr
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006af6:	4564      	cmp	r4, ip
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006af8:	6074      	str	r4, [r6, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006afa:	60b3      	str	r3, [r6, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006afc:	bf8c      	ite	hi
 8006afe:	eba4 050c 	subhi.w	r5, r4, ip
 8006b02:	ebac 0504 	subls.w	r5, ip, r4
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8006b06:	42bb      	cmp	r3, r7
 8006b08:	bf8c      	ite	hi
 8006b0a:	1bda      	subhi	r2, r3, r7
 8006b0c:	1afa      	subls	r2, r7, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006b0e:	42a8      	cmp	r0, r5
 8006b10:	d301      	bcc.n	8006b16 <BSP_TS_GetState+0x8e>
 8006b12:	4290      	cmp	r0, r2
 8006b14:	d205      	bcs.n	8006b22 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8006b16:	618c      	str	r4, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006b18:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006b1a:	2000      	movs	r0, #0
}
 8006b1c:	b004      	add	sp, #16
 8006b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006b22:	e9c6 c701 	strd	ip, r7, [r6, #4]
 8006b26:	e7f8      	b.n	8006b1a <BSP_TS_GetState+0x92>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8006b28:	e9c6 0c00 	strd	r0, ip, [r6]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006b2c:	60b7      	str	r7, [r6, #8]
 8006b2e:	e7f5      	b.n	8006b1c <BSP_TS_GetState+0x94>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006b30:	f06f 0004 	mvn.w	r0, #4
 8006b34:	e7f2      	b.n	8006b1c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006b36:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006b3a:	e7ef      	b.n	8006b1c <BSP_TS_GetState+0x94>
 8006b3c:	24006430 	.word	0x24006430
 8006b40:	24006404 	.word	0x24006404
 8006b44:	24006408 	.word	0x24006408

08006b48 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006b48:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <SystemInit+0xb8>)
 8006b4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b4e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	f042 0210 	orr.w	r2, r2, #16
 8006b5c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006b5e:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <SystemInit+0xbc>)
 8006b60:	6813      	ldr	r3, [r2, #0]
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	d805      	bhi.n	8006b76 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	f023 030f 	bic.w	r3, r3, #15
 8006b70:	f043 0307 	orr.w	r3, r3, #7
 8006b74:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006b76:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <SystemInit+0xc0>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006b80:	2200      	movs	r2, #0
 8006b82:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006b84:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <SystemInit+0xc4>)
 8006b86:	6819      	ldr	r1, [r3, #0]
 8006b88:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006b8a:	491e      	ldr	r1, [pc, #120]	; (8006c04 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006b8c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006b8e:	680a      	ldr	r2, [r1, #0]
 8006b90:	0712      	lsls	r2, r2, #28
 8006b92:	d505      	bpl.n	8006ba0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006b94:	680a      	ldr	r2, [r1, #0]
 8006b96:	f022 020f 	bic.w	r2, r2, #15
 8006b9a:	f042 0207 	orr.w	r2, r2, #7
 8006b9e:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006ba0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006ba2:	491b      	ldr	r1, [pc, #108]	; (8006c10 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006ba4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006ba6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006ba8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006baa:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006bac:	4919      	ldr	r1, [pc, #100]	; (8006c14 <SystemInit+0xcc>)
 8006bae:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006bb0:	4919      	ldr	r1, [pc, #100]	; (8006c18 <SystemInit+0xd0>)
 8006bb2:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006bb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006bb6:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006bba:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006bbc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006bc4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bcc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8006bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bd4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006bd8:	4b10      	ldr	r3, [pc, #64]	; (8006c1c <SystemInit+0xd4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be4:	d203      	bcs.n	8006bee <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006be6:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <SystemInit+0xd8>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006bee:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <SystemInit+0xdc>)
 8006bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006bf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bfa:	4b01      	ldr	r3, [pc, #4]	; (8006c00 <SystemInit+0xb8>)
 8006bfc:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8006bfe:	4770      	bx	lr
 8006c00:	e000ed00 	.word	0xe000ed00
 8006c04:	52002000 	.word	0x52002000
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006c10:	02020200 	.word	0x02020200
 8006c14:	01ff0000 	.word	0x01ff0000
 8006c18:	01010280 	.word	0x01010280
 8006c1c:	5c001000 	.word	0x5c001000
 8006c20:	51008000 	.word	0x51008000
 8006c24:	52004000 	.word	0x52004000

08006c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c28:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006c2a:	2003      	movs	r0, #3
 8006c2c:	f000 f854 	bl	8006cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c30:	f002 fc00 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 8006c34:	490f      	ldr	r1, [pc, #60]	; (8006c74 <HAL_Init+0x4c>)
 8006c36:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <HAL_Init+0x50>)
 8006c38:	698b      	ldr	r3, [r1, #24]
 8006c3a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006c3e:	5cd3      	ldrb	r3, [r2, r3]
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c46:	698b      	ldr	r3, [r1, #24]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	5cd3      	ldrb	r3, [r2, r3]
 8006c4e:	4a0b      	ldr	r2, [pc, #44]	; (8006c7c <HAL_Init+0x54>)
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	fa20 f303 	lsr.w	r3, r0, r3
 8006c58:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c5a:	4b09      	ldr	r3, [pc, #36]	; (8006c80 <HAL_Init+0x58>)
 8006c5c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c5e:	2000      	movs	r0, #0
 8006c60:	f7fa fc2a 	bl	80014b8 <HAL_InitTick>
 8006c64:	4604      	mov	r4, r0
 8006c66:	b918      	cbnz	r0, 8006c70 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006c68:	f7fa f9b6 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006c70:	2401      	movs	r4, #1
 8006c72:	e7fb      	b.n	8006c6c <HAL_Init+0x44>
 8006c74:	58024400 	.word	0x58024400
 8006c78:	08023d24 	.word	0x08023d24
 8006c7c:	24000050 	.word	0x24000050
 8006c80:	2400004c 	.word	0x2400004c

08006c84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006c84:	4a03      	ldr	r2, [pc, #12]	; (8006c94 <HAL_IncTick+0x10>)
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <HAL_IncTick+0x14>)
 8006c88:	6811      	ldr	r1, [r2, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	6013      	str	r3, [r2, #0]
}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	24006434 	.word	0x24006434
 8006c98:	24000054 	.word	0x24000054

08006c9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006c9c:	4b01      	ldr	r3, [pc, #4]	; (8006ca4 <HAL_GetTick+0x8>)
 8006c9e:	6818      	ldr	r0, [r3, #0]
}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	24006434 	.word	0x24006434

08006ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006cac:	f7ff fff6 	bl	8006c9c <HAL_GetTick>
 8006cb0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cb2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006cb4:	bf1e      	ittt	ne
 8006cb6:	4b04      	ldrne	r3, [pc, #16]	; (8006cc8 <HAL_Delay+0x20>)
 8006cb8:	781b      	ldrbne	r3, [r3, #0]
 8006cba:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cbc:	f7ff ffee 	bl	8006c9c <HAL_GetTick>
 8006cc0:	1b43      	subs	r3, r0, r5
 8006cc2:	42a3      	cmp	r3, r4
 8006cc4:	d3fa      	bcc.n	8006cbc <HAL_Delay+0x14>
  {
  }
}
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	24000054 	.word	0x24000054

08006ccc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8006ccc:	4b01      	ldr	r3, [pc, #4]	; (8006cd4 <HAL_GetREVID+0x8>)
 8006cce:	6818      	ldr	r0, [r3, #0]
}
 8006cd0:	0c00      	lsrs	r0, r0, #16
 8006cd2:	4770      	bx	lr
 8006cd4:	5c001000 	.word	0x5c001000

08006cd8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cd8:	4907      	ldr	r1, [pc, #28]	; (8006cf8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cda:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cdc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cde:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ce6:	0412      	lsls	r2, r2, #16
 8006ce8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8006cf4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006cf6:	4770      	bx	lr
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cfc:	4b16      	ldr	r3, [pc, #88]	; (8006d58 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cfe:	b530      	push	{r4, r5, lr}
 8006d00:	68dc      	ldr	r4, [r3, #12]
 8006d02:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d06:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d0a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d0c:	2d04      	cmp	r5, #4
 8006d0e:	bf28      	it	cs
 8006d10:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d12:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d18:	bf8c      	ite	hi
 8006d1a:	3c03      	subhi	r4, #3
 8006d1c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d1e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8006d22:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d24:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d28:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d2c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d30:	fa01 f104 	lsl.w	r1, r1, r4
 8006d34:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006d3c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006d3e:	db06      	blt.n	8006d4e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d40:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006d44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006d48:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d4c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d4e:	f000 000f 	and.w	r0, r0, #15
 8006d52:	4a02      	ldr	r2, [pc, #8]	; (8006d5c <HAL_NVIC_SetPriority+0x60>)
 8006d54:	5413      	strb	r3, [r2, r0]
 8006d56:	e7f9      	b.n	8006d4c <HAL_NVIC_SetPriority+0x50>
 8006d58:	e000ed00 	.word	0xe000ed00
 8006d5c:	e000ed14 	.word	0xe000ed14

08006d60 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d60:	2800      	cmp	r0, #0
 8006d62:	db08      	blt.n	8006d76 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d64:	2301      	movs	r3, #1
 8006d66:	0942      	lsrs	r2, r0, #5
 8006d68:	f000 001f 	and.w	r0, r0, #31
 8006d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d70:	4b01      	ldr	r3, [pc, #4]	; (8006d78 <HAL_NVIC_EnableIRQ+0x18>)
 8006d72:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d76:	4770      	bx	lr
 8006d78:	e000e100 	.word	0xe000e100

08006d7c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	db0d      	blt.n	8006d9c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d80:	0943      	lsrs	r3, r0, #5
 8006d82:	2201      	movs	r2, #1
 8006d84:	f000 001f 	and.w	r0, r0, #31
 8006d88:	3320      	adds	r3, #32
 8006d8a:	fa02 f000 	lsl.w	r0, r2, r0
 8006d8e:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <HAL_NVIC_DisableIRQ+0x24>)
 8006d90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d98:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	e000e100 	.word	0xe000e100

08006da4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006da4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006da8:	4b04      	ldr	r3, [pc, #16]	; (8006dbc <HAL_MPU_Disable+0x18>)
 8006daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006db0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	e000ed00 	.word	0xe000ed00

08006dc0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_MPU_Enable+0x1c>)
 8006dc2:	f040 0001 	orr.w	r0, r0, #1
 8006dc6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006dd0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006dd6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006dda:	4770      	bx	lr
 8006ddc:	e000ed00 	.word	0xe000ed00

08006de0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006de0:	7843      	ldrb	r3, [r0, #1]
 8006de2:	4a14      	ldr	r2, [pc, #80]	; (8006e34 <HAL_MPU_ConfigRegion+0x54>)
{
 8006de4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8006de6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8006dea:	7801      	ldrb	r1, [r0, #0]
 8006dec:	b1e9      	cbz	r1, 8006e2a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8006dee:	6843      	ldr	r3, [r0, #4]
 8006df0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006df4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006df6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006df8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006dfa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006dfe:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006e00:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e02:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006e06:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e08:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006e0c:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e0e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e12:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e18:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e1a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e1e:	7a01      	ldrb	r1, [r0, #8]
 8006e20:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e24:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8006e28:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8006e2a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8006e2e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8006e32:	e7f9      	b.n	8006e28 <HAL_MPU_ConfigRegion+0x48>
 8006e34:	e000ed00 	.word	0xe000ed00

08006e38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006e38:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	b908      	cbnz	r0, 8006e42 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006e3e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006e40:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006e42:	7f43      	ldrb	r3, [r0, #29]
 8006e44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e48:	b913      	cbnz	r3, 8006e50 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006e4a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006e4c:	f7fa f8dc 	bl	8001008 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006e50:	2302      	movs	r3, #2
 8006e52:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006e54:	7923      	ldrb	r3, [r4, #4]
 8006e56:	b9e3      	cbnz	r3, 8006e92 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	4a13      	ldr	r2, [pc, #76]	; (8006ea8 <HAL_CRC_Init+0x70>)
 8006e5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	f022 0218 	bic.w	r2, r2, #24
 8006e64:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006e66:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006e68:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006e6a:	b9d2      	cbnz	r2, 8006ea2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006e6c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006e70:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006e72:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	6961      	ldr	r1, [r4, #20]
 8006e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e7c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006e7e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e80:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006e90:	e7d6      	b.n	8006e40 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006e92:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f808 	bl	8006eac <HAL_CRCEx_Polynomial_Set>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d0e2      	beq.n	8006e66 <HAL_CRC_Init+0x2e>
 8006ea0:	e7cd      	b.n	8006e3e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006ea2:	6922      	ldr	r2, [r4, #16]
 8006ea4:	e7e4      	b.n	8006e70 <HAL_CRC_Init+0x38>
 8006ea6:	bf00      	nop
 8006ea8:	04c11db7 	.word	0x04c11db7

08006eac <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006eac:	231f      	movs	r3, #31
{
 8006eae:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	d31c      	bcc.n	8006eee <HAL_CRCEx_Polynomial_Set+0x42>
 8006eb4:	fa21 f403 	lsr.w	r4, r1, r3
 8006eb8:	07e4      	lsls	r4, r4, #31
 8006eba:	d5f9      	bpl.n	8006eb0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8006ebc:	2a10      	cmp	r2, #16
 8006ebe:	d012      	beq.n	8006ee6 <HAL_CRCEx_Polynomial_Set+0x3a>
 8006ec0:	d804      	bhi.n	8006ecc <HAL_CRCEx_Polynomial_Set+0x20>
 8006ec2:	b13a      	cbz	r2, 8006ed4 <HAL_CRCEx_Polynomial_Set+0x28>
 8006ec4:	2a08      	cmp	r2, #8
 8006ec6:	d010      	beq.n	8006eea <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8006ec8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006eca:	e00b      	b.n	8006ee4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8006ecc:	2a18      	cmp	r2, #24
 8006ece:	d1fb      	bne.n	8006ec8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8006ed0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8006ed2:	d8f9      	bhi.n	8006ec8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006ed4:	6800      	ldr	r0, [r0, #0]
 8006ed6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006ed8:	6883      	ldr	r3, [r0, #8]
 8006eda:	f023 0318 	bic.w	r3, r3, #24
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	6082      	str	r2, [r0, #8]
 8006ee2:	2000      	movs	r0, #0
}
 8006ee4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8006ee6:	2b07      	cmp	r3, #7
 8006ee8:	e7f3      	b.n	8006ed2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	e7f1      	b.n	8006ed2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8006eee:	2a00      	cmp	r2, #0
 8006ef0:	d1ea      	bne.n	8006ec8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8006ef2:	e7ef      	b.n	8006ed4 <HAL_CRCEx_Polynomial_Set+0x28>

08006ef4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006ef4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d036      	beq.n	8006f6a <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006efc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8006f00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006f04:	b91b      	cbnz	r3, 8006f0e <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006f06:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006f0a:	f7fa f895 	bl	8001038 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f0e:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f10:	69e0      	ldr	r0, [r4, #28]
 8006f12:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f14:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f1c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006f1e:	6819      	ldr	r1, [r3, #0]
 8006f20:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006f24:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f2e:	68a2      	ldr	r2, [r4, #8]
 8006f30:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8006f34:	4302      	orrs	r2, r0
 8006f36:	f021 0101 	bic.w	r1, r1, #1
 8006f3a:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f3c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006f3e:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f42:	0c12      	lsrs	r2, r2, #16
 8006f44:	0412      	lsls	r2, r2, #16
 8006f46:	430a      	orrs	r2, r1
 8006f48:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006f4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f4c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006f50:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006f54:	0552      	lsls	r2, r2, #21
 8006f56:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f5a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f60:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006f62:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006f64:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8006f68:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	e7fc      	b.n	8006f68 <HAL_DMA2D_Init+0x74>

08006f6e <HAL_DMA2D_LineEventCallback>:
 8006f6e:	4770      	bx	lr

08006f70 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8006f70:	4770      	bx	lr

08006f72 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f72:	6803      	ldr	r3, [r0, #0]
{
 8006f74:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f76:	685e      	ldr	r6, [r3, #4]
{
 8006f78:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006f7a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f7c:	07f2      	lsls	r2, r6, #31
 8006f7e:	d514      	bpl.n	8006faa <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006f80:	05e9      	lsls	r1, r5, #23
 8006f82:	d512      	bpl.n	8006faa <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f8a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f8c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006f94:	2201      	movs	r2, #1
 8006f96:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006fa6:	b103      	cbz	r3, 8006faa <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fa8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006faa:	06b2      	lsls	r2, r6, #26
 8006fac:	d516      	bpl.n	8006fdc <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006fae:	04ab      	lsls	r3, r5, #18
 8006fb0:	d514      	bpl.n	8006fdc <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fba:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fc2:	f043 0302 	orr.w	r3, r3, #2
 8006fc6:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8006fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd6:	b10b      	cbz	r3, 8006fdc <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006fdc:	0730      	lsls	r0, r6, #28
 8006fde:	d516      	bpl.n	800700e <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006fe0:	0529      	lsls	r1, r5, #20
 8006fe2:	d514      	bpl.n	800700e <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006fee:	2208      	movs	r2, #8
 8006ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ff4:	f043 0304 	orr.w	r3, r3, #4
 8006ff8:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007000:	2300      	movs	r3, #0
 8007002:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007008:	b10b      	cbz	r3, 800700e <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800700a:	4620      	mov	r0, r4
 800700c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800700e:	0772      	lsls	r2, r6, #29
 8007010:	d50b      	bpl.n	800702a <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007012:	056b      	lsls	r3, r5, #21
 8007014:	d509      	bpl.n	800702a <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007016:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007018:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007020:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007022:	2204      	movs	r2, #4
 8007024:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007026:	f7ff ffa2 	bl	8006f6e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800702a:	07b0      	lsls	r0, r6, #30
 800702c:	d514      	bpl.n	8007058 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800702e:	05a9      	lsls	r1, r5, #22
 8007030:	d512      	bpl.n	8007058 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800703a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800703c:	2202      	movs	r2, #2
 800703e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007042:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007044:	2301      	movs	r3, #1
 8007046:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800704a:	2300      	movs	r3, #0
 800704c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007050:	6a23      	ldr	r3, [r4, #32]
 8007052:	b10b      	cbz	r3, 8007058 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007054:	4620      	mov	r0, r4
 8007056:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007058:	06f2      	lsls	r2, r6, #27
 800705a:	d513      	bpl.n	8007084 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800705c:	04eb      	lsls	r3, r5, #19
 800705e:	d511      	bpl.n	8007084 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007060:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007062:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800706a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800706c:	2210      	movs	r2, #16
 800706e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007072:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007074:	2301      	movs	r3, #1
 8007076:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800707a:	2300      	movs	r3, #0
 800707c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007080:	f7ff ff76 	bl	8006f70 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007084:	bd70      	pop	{r4, r5, r6, pc}

08007086 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8007086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708a:	4607      	mov	r7, r0
 800708c:	460d      	mov	r5, r1
 800708e:	4614      	mov	r4, r2
 8007090:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007092:	f7ff fe03 	bl	8006c9c <HAL_GetTick>
 8007096:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800709c:	07d2      	lsls	r2, r2, #31
 800709e:	d50a      	bpl.n	80070b6 <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80070a0:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 80070a4:	9906      	ldr	r1, [sp, #24]

  return HAL_OK;
 80070a6:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80070a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80070ac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80070b0:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80070b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80070b6:	f7ff fdf1 	bl	8006c9c <HAL_GetTick>
 80070ba:	eba0 0008 	sub.w	r0, r0, r8
 80070be:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80070c2:	d9e9      	bls.n	8007098 <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 80070c4:	2003      	movs	r0, #3
 80070c6:	e7f4      	b.n	80070b2 <DSI_ShortWrite+0x2c>

080070c8 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070c8:	7c03      	ldrb	r3, [r0, #16]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d05c      	beq.n	8007188 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 80070ce:	2200      	movs	r2, #0
 80070d0:	6803      	ldr	r3, [r0, #0]
 80070d2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80070d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80070da:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 80070dc:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80070de:	d507      	bpl.n	80070f0 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80070e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80070e4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 80070e8:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 80070ec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80070f0:	078a      	lsls	r2, r1, #30
 80070f2:	d505      	bpl.n	8007100 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80070f4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80070f8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80070fc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007100:	074a      	lsls	r2, r1, #29
 8007102:	d505      	bpl.n	8007110 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007104:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007108:	f042 0201 	orr.w	r2, r2, #1
 800710c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007110:	070a      	lsls	r2, r1, #28
 8007112:	d505      	bpl.n	8007120 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007114:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007118:	f042 0202 	orr.w	r2, r2, #2
 800711c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8007120:	06ca      	lsls	r2, r1, #27
 8007122:	d505      	bpl.n	8007130 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007124:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007128:	f042 020c 	orr.w	r2, r2, #12
 800712c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007130:	068a      	lsls	r2, r1, #26
 8007132:	d505      	bpl.n	8007140 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007134:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007138:	f042 0210 	orr.w	r2, r2, #16
 800713c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007140:	064a      	lsls	r2, r1, #25
 8007142:	d505      	bpl.n	8007150 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007144:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007148:	f042 0220 	orr.w	r2, r2, #32
 800714c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007150:	060a      	lsls	r2, r1, #24
 8007152:	d505      	bpl.n	8007160 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007154:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007158:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800715c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007160:	05ca      	lsls	r2, r1, #23
 8007162:	d505      	bpl.n	8007170 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8007164:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800716c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007170:	058a      	lsls	r2, r1, #22
 8007172:	d505      	bpl.n	8007180 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8007174:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8007178:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 800717c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8007180:	2300      	movs	r3, #0
 8007182:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007184:	4618      	mov	r0, r3
 8007186:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007188:	2002      	movs	r0, #2
}
 800718a:	4770      	bx	lr

0800718c <HAL_DSI_Init>:
{
 800718c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800718e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8007190:	4604      	mov	r4, r0
 8007192:	2800      	cmp	r0, #0
 8007194:	f000 80a9 	beq.w	80072ea <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8007198:	7c43      	ldrb	r3, [r0, #17]
 800719a:	b90b      	cbnz	r3, 80071a0 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 800719c:	f7f9 ff70 	bl	8001080 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80071a0:	2303      	movs	r3, #3
 80071a2:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80071ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80071b2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80071b6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80071ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 80071c2:	f7ff fd6b 	bl	8006c9c <HAL_GetTick>
 80071c6:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 80071ce:	04d9      	lsls	r1, r3, #19
 80071d0:	d57a      	bpl.n	80072c8 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80071d2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80071d6:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 80071da:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 80071de:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80071e2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80071e6:	e9d5 0300 	ldrd	r0, r3, [r5]
 80071ea:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80071ec:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80071f0:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80071f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 80071f6:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80071f8:	430b      	orrs	r3, r1
 80071fa:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80071fe:	2300      	movs	r3, #0
 8007200:	9301      	str	r3, [sp, #4]
 8007202:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800720e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 800721a:	f7ff fd45 	bl	8006ca8 <HAL_Delay>
  tickstart = HAL_GetTick();
 800721e:	f7ff fd3d 	bl	8006c9c <HAL_GetTick>
 8007222:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800722a:	05d2      	lsls	r2, r2, #23
 800722c:	d556      	bpl.n	80072dc <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800722e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007232:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007236:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8007238:	f042 0206 	orr.w	r2, r2, #6
 800723c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007240:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007244:	f022 0203 	bic.w	r2, r2, #3
 8007248:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800724c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007250:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007252:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007254:	f042 0201 	orr.w	r2, r2, #1
 8007258:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800725c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8007260:	f022 0203 	bic.w	r2, r2, #3
 8007264:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007268:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800726c:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800726e:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8007270:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007274:	689a      	ldr	r2, [r3, #8]
 8007276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800727a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007280:	491b      	ldr	r1, [pc, #108]	; (80072f0 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8007282:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007284:	686a      	ldr	r2, [r5, #4]
 8007286:	2a01      	cmp	r2, #1
 8007288:	bf38      	it	cc
 800728a:	2201      	movcc	r2, #1
 800728c:	434a      	muls	r2, r1
 800728e:	68a9      	ldr	r1, [r5, #8]
 8007290:	f001 0103 	and.w	r1, r1, #3
 8007294:	408a      	lsls	r2, r1
 8007296:	6829      	ldr	r1, [r5, #0]
 8007298:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 800729a:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800729c:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80072a0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80072a4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80072a8:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80072ac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80072b0:	430a      	orrs	r2, r1
 80072b2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 80072b6:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80072ba:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 80072be:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80072c0:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 80072c2:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 80072c4:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 80072c6:	e007      	b.n	80072d8 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80072c8:	f7ff fce8 	bl	8006c9c <HAL_GetTick>
 80072cc:	1b80      	subs	r0, r0, r6
 80072ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80072d2:	f67f af79 	bls.w	80071c8 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 80072d6:	2003      	movs	r0, #3
}
 80072d8:	b002      	add	sp, #8
 80072da:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80072dc:	f7ff fcde 	bl	8006c9c <HAL_GetTick>
 80072e0:	1b80      	subs	r0, r0, r6
 80072e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80072e6:	d99d      	bls.n	8007224 <HAL_DSI_Init+0x98>
 80072e8:	e7f5      	b.n	80072d6 <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 80072ea:	2001      	movs	r0, #1
 80072ec:	e7f4      	b.n	80072d8 <HAL_DSI_Init+0x14c>
 80072ee:	bf00      	nop
 80072f0:	003d0900 	.word	0x003d0900

080072f4 <HAL_DSI_ErrorCallback>:
 80072f4:	4770      	bx	lr

080072f6 <HAL_DSI_IRQHandler>:
{
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80072f6:	6803      	ldr	r3, [r0, #0]
 80072f8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80072fc:	07d1      	lsls	r1, r2, #31
{
 80072fe:	b510      	push	{r4, lr}
 8007300:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8007302:	d508      	bpl.n	8007316 <HAL_DSI_IRQHandler+0x20>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8007304:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007308:	07d2      	lsls	r2, r2, #31
 800730a:	d504      	bpl.n	8007316 <HAL_DSI_IRQHandler+0x20>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800730c:	2201      	movs	r2, #1
 800730e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8007312:	f7fa fc7d 	bl	8001c10 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800731c:	0791      	lsls	r1, r2, #30
 800731e:	d509      	bpl.n	8007334 <HAL_DSI_IRQHandler+0x3e>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8007320:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8007324:	0792      	lsls	r2, r2, #30
 8007326:	d505      	bpl.n	8007334 <HAL_DSI_IRQHandler+0x3e>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8007328:	2202      	movs	r2, #2
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800732a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800732c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007330:	f7fa fca0 	bl	8001c74 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8007334:	69a3      	ldr	r3, [r4, #24]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d04e      	beq.n	80073d8 <HAL_DSI_IRQHandler+0xe2>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800733a:	6821      	ldr	r1, [r4, #0]
 800733c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007340:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007344:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007348:	401a      	ands	r2, r3
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800734a:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800734e:	b291      	uxth	r1, r2
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007350:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007352:	b119      	cbz	r1, 800735c <HAL_DSI_IRQHandler+0x66>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007354:	6961      	ldr	r1, [r4, #20]
 8007356:	f041 0101 	orr.w	r1, r1, #1
 800735a:	6161      	str	r1, [r4, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800735c:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 8007360:	d003      	beq.n	800736a <HAL_DSI_IRQHandler+0x74>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007362:	6962      	ldr	r2, [r4, #20]
 8007364:	f042 0202 	orr.w	r2, r2, #2
 8007368:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800736a:	07d8      	lsls	r0, r3, #31
 800736c:	d503      	bpl.n	8007376 <HAL_DSI_IRQHandler+0x80>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800736e:	6962      	ldr	r2, [r4, #20]
 8007370:	f042 0204 	orr.w	r2, r2, #4
 8007374:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007376:	0799      	lsls	r1, r3, #30
 8007378:	d503      	bpl.n	8007382 <HAL_DSI_IRQHandler+0x8c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800737a:	6962      	ldr	r2, [r4, #20]
 800737c:	f042 0208 	orr.w	r2, r2, #8
 8007380:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8007382:	f013 0f0c 	tst.w	r3, #12
 8007386:	d003      	beq.n	8007390 <HAL_DSI_IRQHandler+0x9a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007388:	6962      	ldr	r2, [r4, #20]
 800738a:	f042 0210 	orr.w	r2, r2, #16
 800738e:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8007390:	06da      	lsls	r2, r3, #27
 8007392:	d503      	bpl.n	800739c <HAL_DSI_IRQHandler+0xa6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007394:	6962      	ldr	r2, [r4, #20]
 8007396:	f042 0220 	orr.w	r2, r2, #32
 800739a:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800739c:	0698      	lsls	r0, r3, #26
 800739e:	d503      	bpl.n	80073a8 <HAL_DSI_IRQHandler+0xb2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80073a0:	6962      	ldr	r2, [r4, #20]
 80073a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073a6:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80073a8:	0659      	lsls	r1, r3, #25
 80073aa:	d503      	bpl.n	80073b4 <HAL_DSI_IRQHandler+0xbe>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80073ac:	6962      	ldr	r2, [r4, #20]
 80073ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073b2:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80073b4:	061a      	lsls	r2, r3, #24
 80073b6:	d503      	bpl.n	80073c0 <HAL_DSI_IRQHandler+0xca>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80073b8:	6962      	ldr	r2, [r4, #20]
 80073ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073be:	6162      	str	r2, [r4, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80073c0:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 80073c4:	d003      	beq.n	80073ce <HAL_DSI_IRQHandler+0xd8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80073c6:	6963      	ldr	r3, [r4, #20]
 80073c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073cc:	6163      	str	r3, [r4, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80073ce:	6963      	ldr	r3, [r4, #20]
 80073d0:	b113      	cbz	r3, 80073d8 <HAL_DSI_IRQHandler+0xe2>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 80073d2:	4620      	mov	r0, r4
 80073d4:	f7ff ff8e 	bl	80072f4 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 80073d8:	bd10      	pop	{r4, pc}

080073da <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073da:	7c03      	ldrb	r3, [r0, #16]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d00b      	beq.n	80073f8 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80073e0:	6803      	ldr	r3, [r0, #0]
 80073e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e4:	f022 0203 	bic.w	r2, r2, #3
 80073e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80073ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073ec:	4311      	orrs	r1, r2
 80073ee:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80073f0:	2300      	movs	r3, #0
 80073f2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80073f4:	4618      	mov	r0, r3
 80073f6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80073f8:	2002      	movs	r0, #2
}
 80073fa:	4770      	bx	lr

080073fc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80073fc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073fe:	7c03      	ldrb	r3, [r0, #16]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d06a      	beq.n	80074da <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007404:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007406:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740a:	f042 0201 	orr.w	r2, r2, #1
 800740e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007410:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800741c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	f022 0203 	bic.w	r2, r2, #3
 800742e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	4322      	orrs	r2, r4
 8007434:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007436:	695a      	ldr	r2, [r3, #20]
 8007438:	f022 0207 	bic.w	r2, r2, #7
 800743c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800743e:	695c      	ldr	r4, [r3, #20]
 8007440:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007444:	432a      	orrs	r2, r5
 8007446:	694d      	ldr	r5, [r1, #20]
 8007448:	432a      	orrs	r2, r5

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800744a:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800744c:	4322      	orrs	r2, r4
 800744e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	f022 020f 	bic.w	r2, r2, #15
 8007456:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007458:	691c      	ldr	r4, [r3, #16]
 800745a:	432c      	orrs	r4, r5
 800745c:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800745e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007462:	f024 040e 	bic.w	r4, r4, #14
 8007466:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800746a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800746e:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007470:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8007474:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007478:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800747a:	0c12      	lsrs	r2, r2, #16
 800747c:	0412      	lsls	r2, r2, #16
 800747e:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007480:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007482:	4322      	orrs	r2, r4
 8007484:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007486:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800748a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800748e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007492:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8007496:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 800749a:	432a      	orrs	r2, r5
 800749c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800749e:	432a      	orrs	r2, r5
 80074a0:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80074a2:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80074a4:	432a      	orrs	r2, r5
 80074a6:	4322      	orrs	r2, r4
 80074a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80074ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80074b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80074b6:	430a      	orrs	r2, r1
 80074b8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80074ba:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80074c6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80074ca:	f042 0202 	orr.w	r2, r2, #2
 80074ce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80074d2:	2300      	movs	r3, #0
 80074d4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80074d6:	4618      	mov	r0, r3
}
 80074d8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80074da:	2002      	movs	r0, #2
 80074dc:	e7fc      	b.n	80074d8 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080074e0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80074e0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80074e2:	7c03      	ldrb	r3, [r0, #16]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d02a      	beq.n	800753e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80074e8:	6802      	ldr	r2, [r0, #0]
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <HAL_DSI_ConfigCommand+0x64>)
 80074ec:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80074ee:	4023      	ands	r3, r4
 80074f0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80074f2:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80074f4:	e9d1 3500 	ldrd	r3, r5, [r1]
 80074f8:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80074fa:	688d      	ldr	r5, [r1, #8]
 80074fc:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80074fe:	68cd      	ldr	r5, [r1, #12]
 8007500:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007502:	690d      	ldr	r5, [r1, #16]
 8007504:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007506:	694d      	ldr	r5, [r1, #20]
 8007508:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800750a:	698d      	ldr	r5, [r1, #24]
 800750c:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800750e:	69cd      	ldr	r5, [r1, #28]
 8007510:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007512:	6a0d      	ldr	r5, [r1, #32]
 8007514:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007516:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8007518:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800751a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800751c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800751e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007520:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007522:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007524:	4323      	orrs	r3, r4
 8007526:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007528:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800752a:	f023 0302 	bic.w	r3, r3, #2
 800752e:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007530:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8007532:	430b      	orrs	r3, r1
 8007534:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007536:	2300      	movs	r3, #0
 8007538:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800753a:	4618      	mov	r0, r3
}
 800753c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800753e:	2002      	movs	r0, #2
 8007540:	e7fc      	b.n	800753c <HAL_DSI_ConfigCommand+0x5c>
 8007542:	bf00      	nop
 8007544:	fef080ff 	.word	0xfef080ff

08007548 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007548:	7c03      	ldrb	r3, [r0, #16]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d00b      	beq.n	8007566 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800754e:	6803      	ldr	r3, [r0, #0]
 8007550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007552:	f022 021f 	bic.w	r2, r2, #31
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755a:	4311      	orrs	r1, r2
 800755c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800755e:	2300      	movs	r3, #0
 8007560:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8007562:	4618      	mov	r0, r3
 8007564:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007566:	2002      	movs	r0, #2
}
 8007568:	4770      	bx	lr

0800756a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800756a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800756c:	7c03      	ldrb	r3, [r0, #16]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d035      	beq.n	80075de <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007572:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007574:	e9d1 2400 	ldrd	r2, r4, [r1]
 8007578:	4294      	cmp	r4, r2
 800757a:	bf38      	it	cc
 800757c:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800757e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007582:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8007586:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800758a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800758e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007592:	4322      	orrs	r2, r4
 8007594:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007598:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800759c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80075a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80075a4:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80075a8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80075ac:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80075ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80075b2:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80075b4:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80075b6:	432a      	orrs	r2, r5
 80075b8:	4322      	orrs	r2, r4
 80075ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80075be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80075c2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80075c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80075ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80075ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80075d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075d6:	2300      	movs	r3, #0
 80075d8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80075da:	4618      	mov	r0, r3
}
 80075dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80075de:	2002      	movs	r0, #2
 80075e0:	e7fc      	b.n	80075dc <HAL_DSI_ConfigPhyTimer+0x72>
	...

080075e4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80075e4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075e6:	7c03      	ldrb	r3, [r0, #16]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d05c      	beq.n	80076a6 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80075ec:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80075ee:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80075f0:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80075f2:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80075f4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80075f8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007600:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007602:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007604:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007606:	b292      	uxth	r2, r2
 8007608:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800760a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800760c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007610:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007612:	4a26      	ldr	r2, [pc, #152]	; (80076ac <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007614:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8007616:	4014      	ands	r4, r2
 8007618:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800761a:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800761c:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800761e:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007620:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007622:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8007624:	4014      	ands	r4, r2
 8007626:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007628:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800762a:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800762c:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800762e:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007630:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007634:	4014      	ands	r4, r2
 8007636:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800763a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800763e:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007640:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007642:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007646:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800764a:	4014      	ands	r4, r2
 800764c:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007650:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007654:	432c      	orrs	r4, r5
 8007656:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800765a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800765e:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8007662:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007666:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800766a:	698d      	ldr	r5, [r1, #24]
 800766c:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800766e:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007670:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007672:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007676:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 800767a:	4014      	ands	r4, r2
 800767c:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007680:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8007684:	432c      	orrs	r4, r5
 8007686:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800768a:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800768e:	4022      	ands	r2, r4
 8007690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007694:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007698:	430a      	orrs	r2, r1
 800769a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800769e:	2300      	movs	r3, #0
 80076a0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80076a2:	4618      	mov	r0, r3
}
 80076a4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80076a6:	2002      	movs	r0, #2
 80076a8:	e7fc      	b.n	80076a4 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80076aa:	bf00      	nop
 80076ac:	ffff0000 	.word	0xffff0000

080076b0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076b0:	7c03      	ldrb	r3, [r0, #16]
{
 80076b2:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d01c      	beq.n	80076f2 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80076b8:	6802      	ldr	r2, [r0, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	6851      	ldr	r1, [r2, #4]
 80076c0:	f041 0101 	orr.w	r1, r1, #1
 80076c4:	6051      	str	r1, [r2, #4]
 80076c6:	6851      	ldr	r1, [r2, #4]
 80076c8:	f001 0101 	and.w	r1, r1, #1
 80076cc:	9100      	str	r1, [sp, #0]
 80076ce:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80076d6:	f041 0108 	orr.w	r1, r1, #8
 80076da:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80076de:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80076e2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80076e4:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80076e6:	f002 0208 	and.w	r2, r2, #8
 80076ea:	9201      	str	r2, [sp, #4]
 80076ec:	9a01      	ldr	r2, [sp, #4]
}
 80076ee:	b002      	add	sp, #8
 80076f0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80076f2:	2002      	movs	r0, #2
 80076f4:	e7fb      	b.n	80076ee <HAL_DSI_Start+0x3e>

080076f6 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076f6:	7c03      	ldrb	r3, [r0, #16]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d00a      	beq.n	8007712 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80076fc:	6802      	ldr	r2, [r0, #0]
 80076fe:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8007702:	f043 0304 	orr.w	r3, r3, #4
 8007706:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800770a:	2300      	movs	r3, #0
 800770c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800770e:	4618      	mov	r0, r3
 8007710:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007712:	2002      	movs	r0, #2
}
 8007714:	4770      	bx	lr

08007716 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007716:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007718:	7c05      	ldrb	r5, [r0, #16]
{
 800771a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800771c:	2d01      	cmp	r5, #1
 800771e:	d009      	beq.n	8007734 <HAL_DSI_ShortWrite+0x1e>
 8007720:	2501      	movs	r5, #1
 8007722:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007724:	9d06      	ldr	r5, [sp, #24]
 8007726:	9500      	str	r5, [sp, #0]
 8007728:	f7ff fcad 	bl	8007086 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800772c:	2300      	movs	r3, #0
 800772e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007730:	b003      	add	sp, #12
 8007732:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007734:	2002      	movs	r0, #2
 8007736:	e7fb      	b.n	8007730 <HAL_DSI_ShortWrite+0x1a>

08007738 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8007738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800773e:	7c03      	ldrb	r3, [r0, #16]
{
 8007740:	4606      	mov	r6, r0
 8007742:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007744:	2b01      	cmp	r3, #1
{
 8007746:	4615      	mov	r5, r2
 8007748:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 800774c:	d053      	beq.n	80077f6 <HAL_DSI_LongWrite+0xbe>
 800774e:	2301      	movs	r3, #1
 8007750:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007752:	f7ff faa3 	bl	8006c9c <HAL_GetTick>
 8007756:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007758:	6831      	ldr	r1, [r6, #0]
 800775a:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 800775c:	f013 0a01 	ands.w	sl, r3, #1
 8007760:	d01a      	beq.n	8007798 <HAL_DSI_LongWrite+0x60>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007762:	2c03      	cmp	r4, #3
 8007764:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007766:	f04f 0200 	mov.w	r2, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800776a:	bf28      	it	cs
 800776c:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800776e:	4282      	cmp	r2, r0
 8007770:	d11e      	bne.n	80077b0 <HAL_DSI_LongWrite+0x78>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007772:	1aa3      	subs	r3, r4, r2
  pparams += nbBytes;
 8007774:	4442      	add	r2, r8
  hdsi->Instance->GPDR = fifoword;
 8007776:	f8c1 9070 	str.w	r9, [r1, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800777a:	bb1b      	cbnz	r3, 80077c4 <HAL_DSI_LongWrite+0x8c>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800777c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800777e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
 8007782:	4618      	mov	r0, r3
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007784:	0222      	lsls	r2, r4, #8
 8007786:	0224      	lsls	r4, r4, #8
 8007788:	b292      	uxth	r2, r2
 800778a:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 800778e:	4315      	orrs	r5, r2
 8007790:	432c      	orrs	r4, r5
 8007792:	66cc      	str	r4, [r1, #108]	; 0x6c
  __HAL_UNLOCK(hdsi);
 8007794:	7433      	strb	r3, [r6, #16]
  return HAL_OK;
 8007796:	e009      	b.n	80077ac <HAL_DSI_LongWrite+0x74>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007798:	f7ff fa80 	bl	8006c9c <HAL_GetTick>
 800779c:	eba0 000b 	sub.w	r0, r0, fp
 80077a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80077a4:	d9d8      	bls.n	8007758 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80077a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80077a8:	f886 a010 	strb.w	sl, [r6, #16]
}
 80077ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80077b0:	f818 3002 	ldrb.w	r3, [r8, r2]
 80077b4:	3201      	adds	r2, #1
 80077b6:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80077ba:	fa03 f30c 	lsl.w	r3, r3, ip
 80077be:	ea49 0903 	orr.w	r9, r9, r3
  for (count = 0U; count < nbBytes; count++)
 80077c2:	e7d4      	b.n	800776e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80077c4:	2b04      	cmp	r3, #4
    fifoword = 0U;
 80077c6:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80077ca:	469e      	mov	lr, r3
    for (count = 0U; count < nbBytes; count++)
 80077cc:	4660      	mov	r0, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80077ce:	bf28      	it	cs
 80077d0:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80077d4:	f812 8000 	ldrb.w	r8, [r2, r0]
 80077d8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80077dc:	3001      	adds	r0, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80077de:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80077e2:	4586      	cmp	lr, r0
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80077e4:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80077e8:	d1f4      	bne.n	80077d4 <HAL_DSI_LongWrite+0x9c>
    uicounter -= nbBytes;
 80077ea:	eba3 030e 	sub.w	r3, r3, lr
    pparams += nbBytes;
 80077ee:	4472      	add	r2, lr
    hdsi->Instance->GPDR = fifoword;
 80077f0:	f8c1 c070 	str.w	ip, [r1, #112]	; 0x70
    pparams += nbBytes;
 80077f4:	e7c1      	b.n	800777a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80077f6:	2002      	movs	r0, #2
 80077f8:	e7d8      	b.n	80077ac <HAL_DSI_LongWrite+0x74>

080077fa <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80077fa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077fe:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007800:	7c03      	ldrb	r3, [r0, #16]
{
 8007802:	4605      	mov	r5, r0
 8007804:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007806:	2b01      	cmp	r3, #1
{
 8007808:	4617      	mov	r7, r2
 800780a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800780e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  __HAL_LOCK(hdsi);
 8007812:	d06f      	beq.n	80078f4 <HAL_DSI_Read+0xfa>
 8007814:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007816:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007818:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 800781a:	d90d      	bls.n	8007838 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800781c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8007820:	2237      	movs	r2, #55	; 0x37
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	b2f3      	uxtb	r3, r6
 8007826:	f7ff fc2e 	bl	8007086 <DSI_ShortWrite>
 800782a:	b128      	cbz	r0, 8007838 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800782c:	2300      	movs	r3, #0

      return HAL_ERROR;
 800782e:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8007830:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007838:	f1b9 0f06 	cmp.w	r9, #6
 800783c:	d10f      	bne.n	800785e <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800783e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8007840:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
 8007848:	f044 0406 	orr.w	r4, r4, #6
 800784c:	66d4      	str	r4, [r2, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800784e:	f7ff fa25 	bl	8006c9c <HAL_GetTick>
 8007852:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007854:	2e00      	cmp	r6, #0
 8007856:	dc27      	bgt.n	80078a8 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007858:	2000      	movs	r0, #0
 800785a:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800785c:	e7e9      	b.n	8007832 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800785e:	f1b9 0f04 	cmp.w	r9, #4
 8007862:	d105      	bne.n	8007870 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007864:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007866:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007868:	f044 0404 	orr.w	r4, r4, #4
 800786c:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 800786e:	e7ee      	b.n	800784e <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8007870:	f1b9 0f14 	cmp.w	r9, #20
 8007874:	d108      	bne.n	8007888 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007876:	f898 1000 	ldrb.w	r1, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800787a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800787c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800787e:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
 8007882:	f044 0414 	orr.w	r4, r4, #20
 8007886:	e7f1      	b.n	800786c <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007888:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800788c:	d1ce      	bne.n	800782c <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800788e:	f898 1001 	ldrb.w	r1, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007892:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007894:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007898:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800789c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800789e:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80078a2:	f044 0424 	orr.w	r4, r4, #36	; 0x24
 80078a6:	e7e1      	b.n	800786c <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80078a8:	682a      	ldr	r2, [r5, #0]
 80078aa:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80078ac:	f013 0310 	ands.w	r3, r3, #16
 80078b0:	d10d      	bne.n	80078ce <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80078b2:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80078b4:	6f10      	ldr	r0, [r2, #112]	; 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80078b6:	4632      	mov	r2, r6
 80078b8:	bf28      	it	cs
 80078ba:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80078bc:	00d9      	lsls	r1, r3, #3
 80078be:	fa20 f101 	lsr.w	r1, r0, r1
 80078c2:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80078c4:	3301      	adds	r3, #1
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d1f8      	bne.n	80078bc <HAL_DSI_Read+0xc2>
        pdata++;
 80078ca:	4417      	add	r7, r2
        datasize--;
 80078cc:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80078ce:	f7ff f9e5 	bl	8006c9c <HAL_GetTick>
 80078d2:	1b00      	subs	r0, r0, r4
 80078d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80078d8:	d903      	bls.n	80078e2 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 80078da:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80078dc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80078de:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 80078e0:	e7a7      	b.n	8007832 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80078e6:	0652      	lsls	r2, r2, #25
 80078e8:	d4b4      	bmi.n	8007854 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80078ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80078ee:	069b      	lsls	r3, r3, #26
 80078f0:	d49c      	bmi.n	800782c <HAL_DSI_Read+0x32>
 80078f2:	e7af      	b.n	8007854 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 80078f4:	2002      	movs	r0, #2
 80078f6:	e79c      	b.n	8007832 <HAL_DSI_Read+0x38>

080078f8 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80078f8:	7c03      	ldrb	r3, [r0, #16]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d010      	beq.n	8007920 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80078fe:	6803      	ldr	r3, [r0, #0]
 8007900:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007904:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8007908:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800790c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8007910:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8007914:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007918:	2300      	movs	r3, #0
 800791a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800791c:	4618      	mov	r0, r3
 800791e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007920:	2002      	movs	r0, #2
}
 8007922:	4770      	bx	lr

08007924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007928:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800792a:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8007af8 <HAL_GPIO_Init+0x1d4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800792e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007932:	680a      	ldr	r2, [r1, #0]
 8007934:	fa32 f503 	lsrs.w	r5, r2, r3
 8007938:	d102      	bne.n	8007940 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007940:	f04f 0e01 	mov.w	lr, #1
 8007944:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 8007948:	ea1e 0202 	ands.w	r2, lr, r2
 800794c:	f000 80bd 	beq.w	8007aca <HAL_GPIO_Init+0x1a6>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007950:	684e      	ldr	r6, [r1, #4]
 8007952:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007956:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800795a:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800795e:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007962:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007964:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007968:	2f01      	cmp	r7, #1
 800796a:	d834      	bhi.n	80079d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800796c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800796e:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007972:	68cf      	ldr	r7, [r1, #12]
 8007974:	fa07 f708 	lsl.w	r7, r7, r8
 8007978:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800797c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800797e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007980:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007984:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007988:	409f      	lsls	r7, r3
 800798a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800798e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007990:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007992:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007994:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007998:	688f      	ldr	r7, [r1, #8]
 800799a:	fa07 f708 	lsl.w	r7, r7, r8
 800799e:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 80079a2:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079a4:	d119      	bne.n	80079da <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80079a6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079aa:	f003 0b07 	and.w	fp, r3, #7
 80079ae:	f04f 0e0f 	mov.w	lr, #15
 80079b2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80079b6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80079ba:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079be:	fa0e fe0b 	lsl.w	lr, lr, fp
 80079c2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80079c6:	690f      	ldr	r7, [r1, #16]
 80079c8:	fa07 f70b 	lsl.w	r7, r7, fp
 80079cc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80079d0:	f8ca 7020 	str.w	r7, [sl, #32]
 80079d4:	e001      	b.n	80079da <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079d6:	2d03      	cmp	r5, #3
 80079d8:	d1da      	bne.n	8007990 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 80079da:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079dc:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079e0:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80079e4:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80079e8:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 80079ec:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80079ee:	d06c      	beq.n	8007aca <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079f0:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 80079f4:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079f8:	f003 0c03 	and.w	ip, r3, #3
 80079fc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a00:	f045 0502 	orr.w	r5, r5, #2
 8007a04:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a0c:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8007a10:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8007a14:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8007a18:	f005 0502 	and.w	r5, r5, #2
 8007a1c:	9501      	str	r5, [sp, #4]
 8007a1e:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a20:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8007a24:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007a28:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a2c:	4d31      	ldr	r5, [pc, #196]	; (8007af4 <HAL_GPIO_Init+0x1d0>)
 8007a2e:	42a8      	cmp	r0, r5
 8007a30:	d04d      	beq.n	8007ace <HAL_GPIO_Init+0x1aa>
 8007a32:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a36:	42a8      	cmp	r0, r5
 8007a38:	d04b      	beq.n	8007ad2 <HAL_GPIO_Init+0x1ae>
 8007a3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a3e:	42a8      	cmp	r0, r5
 8007a40:	d049      	beq.n	8007ad6 <HAL_GPIO_Init+0x1b2>
 8007a42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a46:	42a8      	cmp	r0, r5
 8007a48:	d047      	beq.n	8007ada <HAL_GPIO_Init+0x1b6>
 8007a4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a4e:	42a8      	cmp	r0, r5
 8007a50:	d045      	beq.n	8007ade <HAL_GPIO_Init+0x1ba>
 8007a52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a56:	42a8      	cmp	r0, r5
 8007a58:	d043      	beq.n	8007ae2 <HAL_GPIO_Init+0x1be>
 8007a5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a5e:	42a8      	cmp	r0, r5
 8007a60:	d041      	beq.n	8007ae6 <HAL_GPIO_Init+0x1c2>
 8007a62:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a66:	42a8      	cmp	r0, r5
 8007a68:	d03f      	beq.n	8007aea <HAL_GPIO_Init+0x1c6>
 8007a6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a6e:	42a8      	cmp	r0, r5
 8007a70:	d03d      	beq.n	8007aee <HAL_GPIO_Init+0x1ca>
 8007a72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007a76:	42a8      	cmp	r0, r5
 8007a78:	bf0c      	ite	eq
 8007a7a:	2509      	moveq	r5, #9
 8007a7c:	250a      	movne	r5, #10
 8007a7e:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a82:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007a86:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a8a:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007a8c:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007a90:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007a92:	bf0c      	ite	eq
 8007a94:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007a96:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a98:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8007a9c:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007a9e:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007aa0:	bf0c      	ite	eq
 8007aa2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007aa4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007aa6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8007aaa:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007aac:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8007ab0:	bf0c      	ite	eq
 8007ab2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007ab4:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ab6:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8007ab8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007abc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8007ac0:	bf54      	ite	pl
 8007ac2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8007ac4:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8007ac6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8007aca:	3301      	adds	r3, #1
 8007acc:	e731      	b.n	8007932 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ace:	2500      	movs	r5, #0
 8007ad0:	e7d5      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ad2:	2501      	movs	r5, #1
 8007ad4:	e7d3      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ad6:	2502      	movs	r5, #2
 8007ad8:	e7d1      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ada:	2503      	movs	r5, #3
 8007adc:	e7cf      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ade:	2504      	movs	r5, #4
 8007ae0:	e7cd      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ae2:	2505      	movs	r5, #5
 8007ae4:	e7cb      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007ae6:	2506      	movs	r5, #6
 8007ae8:	e7c9      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007aea:	2507      	movs	r5, #7
 8007aec:	e7c7      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007aee:	2508      	movs	r5, #8
 8007af0:	e7c5      	b.n	8007a7e <HAL_GPIO_Init+0x15a>
 8007af2:	bf00      	nop
 8007af4:	58020000 	.word	0x58020000
 8007af8:	58024400 	.word	0x58024400

08007afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007b00:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b02:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8007c30 <HAL_GPIO_DeInit+0x134>
 8007b06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8007c34 <HAL_GPIO_DeInit+0x138>
 8007b0a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007c38 <HAL_GPIO_DeInit+0x13c>
 8007b0e:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007c3c <HAL_GPIO_DeInit+0x140>
  while ((GPIO_Pin >> position) != 0x00U)
 8007b12:	fa31 f302 	lsrs.w	r3, r1, r2
 8007b16:	d101      	bne.n	8007b1c <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8007b22:	ea1c 0601 	ands.w	r6, ip, r1
 8007b26:	d06d      	beq.n	8007c04 <HAL_GPIO_DeInit+0x108>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007b28:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007b2c:	f002 0703 	and.w	r7, r2, #3
 8007b30:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b32:	4b3e      	ldr	r3, [pc, #248]	; (8007c2c <HAL_GPIO_DeInit+0x130>)
 8007b34:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007b38:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b3a:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007b3c:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007b40:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007b44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007b48:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007b4c:	d05c      	beq.n	8007c08 <HAL_GPIO_DeInit+0x10c>
 8007b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b52:	4298      	cmp	r0, r3
 8007b54:	d05a      	beq.n	8007c0c <HAL_GPIO_DeInit+0x110>
 8007b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	d058      	beq.n	8007c10 <HAL_GPIO_DeInit+0x114>
 8007b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b62:	4298      	cmp	r0, r3
 8007b64:	d056      	beq.n	8007c14 <HAL_GPIO_DeInit+0x118>
 8007b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	d054      	beq.n	8007c18 <HAL_GPIO_DeInit+0x11c>
 8007b6e:	4540      	cmp	r0, r8
 8007b70:	d054      	beq.n	8007c1c <HAL_GPIO_DeInit+0x120>
 8007b72:	4548      	cmp	r0, r9
 8007b74:	d054      	beq.n	8007c20 <HAL_GPIO_DeInit+0x124>
 8007b76:	4550      	cmp	r0, sl
 8007b78:	d054      	beq.n	8007c24 <HAL_GPIO_DeInit+0x128>
 8007b7a:	4558      	cmp	r0, fp
 8007b7c:	d054      	beq.n	8007c28 <HAL_GPIO_DeInit+0x12c>
 8007b7e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8007b82:	4298      	cmp	r0, r3
 8007b84:	bf0c      	ite	eq
 8007b86:	2309      	moveq	r3, #9
 8007b88:	230a      	movne	r3, #10
 8007b8a:	40bb      	lsls	r3, r7
 8007b8c:	4573      	cmp	r3, lr
 8007b8e:	d119      	bne.n	8007bc4 <HAL_GPIO_DeInit+0xc8>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b94:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8007b98:	ea27 0706 	bic.w	r7, r7, r6
 8007b9c:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007ba0:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8007ba4:	ea27 0706 	bic.w	r7, r7, r6
 8007ba8:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007bac:	685f      	ldr	r7, [r3, #4]
 8007bae:	ea27 0706 	bic.w	r7, r7, r6
 8007bb2:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007bb4:	681f      	ldr	r7, [r3, #0]
 8007bb6:	ea27 0606 	bic.w	r6, r7, r6
 8007bba:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007bbc:	68a3      	ldr	r3, [r4, #8]
 8007bbe:	ea23 0305 	bic.w	r3, r3, r5
 8007bc2:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007bc4:	2503      	movs	r5, #3
 8007bc6:	0053      	lsls	r3, r2, #1
 8007bc8:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007bca:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007bce:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007bd2:	260f      	movs	r6, #15
 8007bd4:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007bd6:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007bd8:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007bda:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007bdc:	fa22 f405 	lsr.w	r4, r2, r5
 8007be0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8007be4:	6a25      	ldr	r5, [r4, #32]
 8007be6:	ea25 0606 	bic.w	r6, r5, r6
 8007bea:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bec:	68c4      	ldr	r4, [r0, #12]
 8007bee:	ea24 0403 	bic.w	r4, r4, r3
 8007bf2:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bf4:	6844      	ldr	r4, [r0, #4]
 8007bf6:	ea24 040c 	bic.w	r4, r4, ip
 8007bfa:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bfc:	6884      	ldr	r4, [r0, #8]
 8007bfe:	ea24 0303 	bic.w	r3, r4, r3
 8007c02:	6083      	str	r3, [r0, #8]
    position++;
 8007c04:	3201      	adds	r2, #1
 8007c06:	e784      	b.n	8007b12 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e7be      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e7bc      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e7ba      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c14:	2303      	movs	r3, #3
 8007c16:	e7b8      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c18:	2304      	movs	r3, #4
 8007c1a:	e7b6      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c1c:	2305      	movs	r3, #5
 8007c1e:	e7b4      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c20:	2306      	movs	r3, #6
 8007c22:	e7b2      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c24:	2307      	movs	r3, #7
 8007c26:	e7b0      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	e7ae      	b.n	8007b8a <HAL_GPIO_DeInit+0x8e>
 8007c2c:	58020000 	.word	0x58020000
 8007c30:	58021400 	.word	0x58021400
 8007c34:	58021800 	.word	0x58021800
 8007c38:	58021c00 	.word	0x58021c00
 8007c3c:	58022000 	.word	0x58022000

08007c40 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007c40:	6903      	ldr	r3, [r0, #16]
 8007c42:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007c44:	bf14      	ite	ne
 8007c46:	2001      	movne	r0, #1
 8007c48:	2000      	moveq	r0, #0
 8007c4a:	4770      	bx	lr

08007c4c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c4c:	b10a      	cbz	r2, 8007c52 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c4e:	6181      	str	r1, [r0, #24]
  }
}
 8007c50:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c52:	0409      	lsls	r1, r1, #16
 8007c54:	e7fb      	b.n	8007c4e <HAL_GPIO_WritePin+0x2>
	...

08007c58 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <HAL_HSEM_FastTake+0x14>)
 8007c5a:	3020      	adds	r0, #32
 8007c5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007c60:	4b03      	ldr	r3, [pc, #12]	; (8007c70 <HAL_HSEM_FastTake+0x18>)
 8007c62:	1ac0      	subs	r0, r0, r3
 8007c64:	bf18      	it	ne
 8007c66:	2001      	movne	r0, #1
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	58026400 	.word	0x58026400
 8007c70:	80000300 	.word	0x80000300

08007c74 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007c74:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8007c78:	4b01      	ldr	r3, [pc, #4]	; (8007c80 <HAL_HSEM_Release+0xc>)
 8007c7a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007c7e:	4770      	bx	lr
 8007c80:	58026400 	.word	0x58026400

08007c84 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	699a      	ldr	r2, [r3, #24]
 8007c88:	0791      	lsls	r1, r2, #30
 8007c8a:	d501      	bpl.n	8007c90 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c90:	699a      	ldr	r2, [r3, #24]
 8007c92:	07d2      	lsls	r2, r2, #31
 8007c94:	d403      	bmi.n	8007c9e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c96:	699a      	ldr	r2, [r3, #24]
 8007c98:	f042 0201 	orr.w	r2, r2, #1
 8007c9c:	619a      	str	r2, [r3, #24]
  }
}
 8007c9e:	4770      	bx	lr

08007ca0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ca0:	b530      	push	{r4, r5, lr}
 8007ca2:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ca4:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ca8:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007caa:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cac:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cb2:	4a05      	ldr	r2, [pc, #20]	; (8007cc8 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cb4:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cb6:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cbe:	ea20 0002 	bic.w	r0, r0, r2
 8007cc2:	4303      	orrs	r3, r0
 8007cc4:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cc6:	bd30      	pop	{r4, r5, pc}
 8007cc8:	03ff63ff 	.word	0x03ff63ff

08007ccc <I2C_IsErrorOccurred>:
{
 8007ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cd0:	6803      	ldr	r3, [r0, #0]
{
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	4688      	mov	r8, r1
 8007cd6:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8007cd8:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007cda:	f014 0410 	ands.w	r4, r4, #16
 8007cde:	d079      	beq.n	8007dd4 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce0:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007ce2:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8007ce4:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	699a      	ldr	r2, [r3, #24]
 8007cee:	0694      	lsls	r4, r2, #26
 8007cf0:	d436      	bmi.n	8007d60 <I2C_IsErrorOccurred+0x94>
 8007cf2:	b10e      	cbz	r6, 8007cf8 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8007cf4:	2404      	movs	r4, #4
 8007cf6:	e039      	b.n	8007d6c <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8007cf8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007cfc:	d0f6      	beq.n	8007cec <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fe ffcd 	bl	8006c9c <HAL_GetTick>
 8007d02:	1bc0      	subs	r0, r0, r7
 8007d04:	4540      	cmp	r0, r8
 8007d06:	d802      	bhi.n	8007d0e <I2C_IsErrorOccurred+0x42>
 8007d08:	f1b8 0f00 	cmp.w	r8, #0
 8007d0c:	d1ed      	bne.n	8007cea <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d0e:	682b      	ldr	r3, [r5, #0]
 8007d10:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007d12:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d16:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007d18:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d1a:	0400      	lsls	r0, r0, #16
 8007d1c:	d50a      	bpl.n	8007d34 <I2C_IsErrorOccurred+0x68>
 8007d1e:	0449      	lsls	r1, r1, #17
 8007d20:	d408      	bmi.n	8007d34 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8007d22:	2a20      	cmp	r2, #32
 8007d24:	d006      	beq.n	8007d34 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d2c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007d2e:	f7fe ffb5 	bl	8006c9c <HAL_GetTick>
 8007d32:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	699c      	ldr	r4, [r3, #24]
 8007d38:	f014 0420 	ands.w	r4, r4, #32
 8007d3c:	d1d5      	bne.n	8007cea <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d3e:	f7fe ffad 	bl	8006c9c <HAL_GetTick>
 8007d42:	1bc0      	subs	r0, r0, r7
 8007d44:	2819      	cmp	r0, #25
 8007d46:	d9f5      	bls.n	8007d34 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8007d4a:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8007d4c:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d50:	f043 0320 	orr.w	r3, r3, #32
 8007d54:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007d56:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d5a:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8007d5e:	e7e9      	b.n	8007d34 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8007d60:	2e00      	cmp	r6, #0
 8007d62:	d1c7      	bne.n	8007cf4 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d64:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8007d66:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8007d68:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d6a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007d70:	05d0      	lsls	r0, r2, #23
 8007d72:	d505      	bpl.n	8007d80 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d74:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007d78:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007d7c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007d7e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007d80:	0551      	lsls	r1, r2, #21
 8007d82:	d505      	bpl.n	8007d90 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007d88:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007d8c:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007d8e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007d90:	0592      	lsls	r2, r2, #22
 8007d92:	d521      	bpl.n	8007dd8 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d94:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007d98:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007d9c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8007d9e:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 8007da0:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 8007da2:	f7ff ff6f 	bl	8007c84 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007da6:	682a      	ldr	r2, [r5, #0]
 8007da8:	6853      	ldr	r3, [r2, #4]
 8007daa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8007dae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8007db2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8007dbc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007dbe:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc0:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8007dc2:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007dc4:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8007dce:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8007dd2:	e003      	b.n	8007ddc <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8007dd4:	4626      	mov	r6, r4
 8007dd6:	e7c9      	b.n	8007d6c <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	d1e0      	bne.n	8007d9e <I2C_IsErrorOccurred+0xd2>
}
 8007ddc:	4630      	mov	r0, r6
 8007dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007de2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007de2:	b570      	push	{r4, r5, r6, lr}
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	079b      	lsls	r3, r3, #30
 8007df0:	d501      	bpl.n	8007df6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007df2:	2000      	movs	r0, #0
}
 8007df4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df6:	4632      	mov	r2, r6
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f7ff ff66 	bl	8007ccc <I2C_IsErrorOccurred>
 8007e00:	b9a0      	cbnz	r0, 8007e2c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8007e02:	1c6a      	adds	r2, r5, #1
 8007e04:	d0f1      	beq.n	8007dea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e06:	f7fe ff49 	bl	8006c9c <HAL_GetTick>
 8007e0a:	1b80      	subs	r0, r0, r6
 8007e0c:	42a8      	cmp	r0, r5
 8007e0e:	d801      	bhi.n	8007e14 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007e10:	2d00      	cmp	r5, #0
 8007e12:	d1ea      	bne.n	8007dea <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e16:	f043 0320 	orr.w	r3, r3, #32
 8007e1a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007e28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007e2c:	2001      	movs	r0, #1
 8007e2e:	e7e1      	b.n	8007df4 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08007e30 <I2C_WaitOnFlagUntilTimeout>:
{
 8007e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e34:	9f06      	ldr	r7, [sp, #24]
 8007e36:	4604      	mov	r4, r0
 8007e38:	4688      	mov	r8, r1
 8007e3a:	4616      	mov	r6, r2
 8007e3c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e3e:	6822      	ldr	r2, [r4, #0]
 8007e40:	6993      	ldr	r3, [r2, #24]
 8007e42:	ea38 0303 	bics.w	r3, r8, r3
 8007e46:	bf0c      	ite	eq
 8007e48:	2301      	moveq	r3, #1
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	42b3      	cmp	r3, r6
 8007e4e:	d001      	beq.n	8007e54 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8007e50:	2000      	movs	r0, #0
 8007e52:	e015      	b.n	8007e80 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8007e54:	1c6b      	adds	r3, r5, #1
 8007e56:	d0f3      	beq.n	8007e40 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e58:	f7fe ff20 	bl	8006c9c <HAL_GetTick>
 8007e5c:	1bc0      	subs	r0, r0, r7
 8007e5e:	42a8      	cmp	r0, r5
 8007e60:	d801      	bhi.n	8007e66 <I2C_WaitOnFlagUntilTimeout+0x36>
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	d1eb      	bne.n	8007e3e <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007e68:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e6a:	f043 0320 	orr.w	r3, r3, #32
 8007e6e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e70:	2320      	movs	r3, #32
 8007e72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007e7c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007e84 <I2C_RequestMemoryWrite>:
{
 8007e84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007e88:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e8a:	4b18      	ldr	r3, [pc, #96]	; (8007eec <I2C_RequestMemoryWrite+0x68>)
{
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	b2f2      	uxtb	r2, r6
 8007e94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 8007e98:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007e9c:	f7ff ff00 	bl	8007ca0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	4639      	mov	r1, r7
 8007ea6:	f7ff ff9c 	bl	8007de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007eaa:	b118      	cbz	r0, 8007eb4 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8007eac:	2001      	movs	r0, #1
}
 8007eae:	b002      	add	sp, #8
 8007eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eb4:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb6:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eb8:	d10d      	bne.n	8007ed6 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eba:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2180      	movs	r1, #128	; 0x80
 8007ec0:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ec2:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec4:	463b      	mov	r3, r7
 8007ec6:	f8cd 8000 	str.w	r8, [sp]
 8007eca:	f7ff ffb1 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007ece:	3800      	subs	r0, #0
 8007ed0:	bf18      	it	ne
 8007ed2:	2001      	movne	r0, #1
 8007ed4:	e7eb      	b.n	8007eae <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ed6:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed8:	4639      	mov	r1, r7
 8007eda:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007edc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ede:	4642      	mov	r2, r8
 8007ee0:	f7ff ff7f 	bl	8007de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d1e1      	bne.n	8007eac <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	e7e6      	b.n	8007eba <I2C_RequestMemoryWrite+0x36>
 8007eec:	80002000 	.word	0x80002000

08007ef0 <I2C_RequestMemoryRead>:
{
 8007ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007ef4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ef6:	4b18      	ldr	r3, [pc, #96]	; (8007f58 <I2C_RequestMemoryRead+0x68>)
{
 8007ef8:	4605      	mov	r5, r0
 8007efa:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	b2f2      	uxtb	r2, r6
 8007f00:	2300      	movs	r3, #0
{
 8007f02:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007f06:	f7ff fecb 	bl	8007ca0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	4639      	mov	r1, r7
 8007f10:	f7ff ff67 	bl	8007de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f14:	b118      	cbz	r0, 8007f1e <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 8007f16:	2001      	movs	r0, #1
}
 8007f18:	b002      	add	sp, #8
 8007f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f1e:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f20:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f22:	d10d      	bne.n	8007f40 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f24:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007f26:	2200      	movs	r2, #0
 8007f28:	2140      	movs	r1, #64	; 0x40
 8007f2a:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f2c:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007f2e:	463b      	mov	r3, r7
 8007f30:	f8cd 8000 	str.w	r8, [sp]
 8007f34:	f7ff ff7c 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8007f38:	3800      	subs	r0, #0
 8007f3a:	bf18      	it	ne
 8007f3c:	2001      	movne	r0, #1
 8007f3e:	e7eb      	b.n	8007f18 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f40:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f42:	4639      	mov	r1, r7
 8007f44:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f48:	4642      	mov	r2, r8
 8007f4a:	f7ff ff4a 	bl	8007de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1e1      	bne.n	8007f16 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f52:	682b      	ldr	r3, [r5, #0]
 8007f54:	e7e6      	b.n	8007f24 <I2C_RequestMemoryRead+0x34>
 8007f56:	bf00      	nop
 8007f58:	80002000 	.word	0x80002000

08007f5c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
 8007f62:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	069b      	lsls	r3, r3, #26
 8007f6a:	d501      	bpl.n	8007f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007f6c:	2000      	movs	r0, #0
}
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f70:	4632      	mov	r2, r6
 8007f72:	4629      	mov	r1, r5
 8007f74:	4620      	mov	r0, r4
 8007f76:	f7ff fea9 	bl	8007ccc <I2C_IsErrorOccurred>
 8007f7a:	b990      	cbnz	r0, 8007fa2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7c:	f7fe fe8e 	bl	8006c9c <HAL_GetTick>
 8007f80:	1b80      	subs	r0, r0, r6
 8007f82:	42a8      	cmp	r0, r5
 8007f84:	d801      	bhi.n	8007f8a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	d1ec      	bne.n	8007f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007f8c:	f043 0320 	orr.w	r3, r3, #32
 8007f90:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f92:	2320      	movs	r3, #32
 8007f94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8007f9e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	e7e3      	b.n	8007f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08007fa6 <HAL_I2C_MspInit>:
}
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_I2C_Init>:
{
 8007fa8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007faa:	4604      	mov	r4, r0
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d04a      	beq.n	8008046 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fb0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8007fb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007fb8:	b91b      	cbnz	r3, 8007fc2 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007fba:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8007fbe:	f7ff fff2 	bl	8007fa6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fc2:	2324      	movs	r3, #36	; 0x24
 8007fc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fd8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fe0:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fe2:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fe6:	2901      	cmp	r1, #1
 8007fe8:	d124      	bne.n	8008034 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fee:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ff0:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ff2:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ff4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ffc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008004:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008006:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800800a:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800800c:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800800e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008012:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008014:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008018:	430a      	orrs	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008024:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008026:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008028:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800802c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800802e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8008032:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008034:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008038:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800803a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800803c:	d1d8      	bne.n	8007ff0 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800803e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	e7d4      	b.n	8007ff0 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8008046:	2001      	movs	r0, #1
 8008048:	e7f3      	b.n	8008032 <HAL_I2C_Init+0x8a>

0800804a <HAL_I2C_MspDeInit>:
 800804a:	4770      	bx	lr

0800804c <HAL_I2C_DeInit>:
{
 800804c:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800804e:	4604      	mov	r4, r0
 8008050:	b198      	cbz	r0, 800807a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008052:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008054:	2324      	movs	r3, #36	; 0x24
 8008056:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800805a:	6813      	ldr	r3, [r2, #0]
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008062:	f7ff fff2 	bl	800804a <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008066:	2000      	movs	r0, #0
 8008068:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800806a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800806e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008072:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008074:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8008078:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800807a:	2001      	movs	r0, #1
 800807c:	e7fc      	b.n	8008078 <HAL_I2C_DeInit+0x2c>

0800807e <HAL_I2C_Mem_Write>:
{
 800807e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008082:	b085      	sub	sp, #20
 8008084:	469b      	mov	fp, r3
 8008086:	4604      	mov	r4, r0
 8008088:	460f      	mov	r7, r1
 800808a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800808e:	4692      	mov	sl, r2
 8008090:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8008094:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008096:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800809a:	2b20      	cmp	r3, #32
 800809c:	f040 80a3 	bne.w	80081e6 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80080a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a2:	b10b      	cbz	r3, 80080a8 <HAL_I2C_Mem_Write+0x2a>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	b933      	cbnz	r3, 80080b6 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80080a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ac:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80080ae:	2001      	movs	r0, #1
}
 80080b0:	b005      	add	sp, #20
 80080b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80080b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	f000 8093 	beq.w	80081e6 <HAL_I2C_Mem_Write+0x168>
 80080c0:	2501      	movs	r5, #1
 80080c2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80080c6:	f7fe fde9 	bl	8006c9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080ca:	2319      	movs	r3, #25
 80080cc:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80080ce:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80080d0:	462a      	mov	r2, r5
 80080d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080d6:	4620      	mov	r0, r4
 80080d8:	f7ff feaa 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 80080dc:	4680      	mov	r8, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	d1e5      	bne.n	80080ae <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080e2:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80080e4:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080e6:	4652      	mov	r2, sl
 80080e8:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80080ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80080f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f6:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080f8:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80080fa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80080fc:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080fe:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8008102:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008104:	465b      	mov	r3, fp
 8008106:	f7ff febd 	bl	8007e84 <I2C_RequestMemoryWrite>
 800810a:	b110      	cbz	r0, 8008112 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 800810c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8008110:	e7cd      	b.n	80080ae <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008112:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008114:	b29b      	uxth	r3, r3
 8008116:	2bff      	cmp	r3, #255	; 0xff
 8008118:	d955      	bls.n	80081c6 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800811a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800811c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008120:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008122:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008124:	4639      	mov	r1, r7
 8008126:	4620      	mov	r0, r4
 8008128:	f7ff fdba 	bl	8007ca0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800812c:	4632      	mov	r2, r6
 800812e:	4649      	mov	r1, r9
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff fe56 	bl	8007de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1b9      	bne.n	80080ae <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800813a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813c:	6822      	ldr	r2, [r4, #0]
 800813e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008142:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8008144:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8008146:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008148:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800814a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800814c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800814e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8008150:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8008152:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008154:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008156:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008158:	b29b      	uxth	r3, r3
 800815a:	b1ab      	cbz	r3, 8008188 <HAL_I2C_Mem_Write+0x10a>
 800815c:	b9a2      	cbnz	r2, 8008188 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800815e:	464b      	mov	r3, r9
 8008160:	2180      	movs	r1, #128	; 0x80
 8008162:	4620      	mov	r0, r4
 8008164:	9600      	str	r6, [sp, #0]
 8008166:	f7ff fe63 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 800816a:	2800      	cmp	r0, #0
 800816c:	d19f      	bne.n	80080ae <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800816e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008170:	b29b      	uxth	r3, r3
 8008172:	2bff      	cmp	r3, #255	; 0xff
 8008174:	d92f      	bls.n	80081d6 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008176:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008178:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800817c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800817e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008180:	4639      	mov	r1, r7
 8008182:	4620      	mov	r0, r4
 8008184:	f7ff fd8c 	bl	8007ca0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8008188:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800818a:	b29b      	uxth	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1cd      	bne.n	800812c <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008190:	4632      	mov	r2, r6
 8008192:	4649      	mov	r1, r9
 8008194:	4620      	mov	r0, r4
 8008196:	f7ff fee1 	bl	8007f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 800819a:	2800      	cmp	r0, #0
 800819c:	d187      	bne.n	80080ae <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	2120      	movs	r1, #32
 80081a2:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80081aa:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80081ae:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80081b8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80081bc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081c0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80081c4:	e774      	b.n	80080b0 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80081c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081cc:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80081ce:	b292      	uxth	r2, r2
 80081d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80081d2:	b2d2      	uxtb	r2, r2
 80081d4:	e7a6      	b.n	8008124 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80081d6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081dc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80081de:	b292      	uxth	r2, r2
 80081e0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	e7cc      	b.n	8008180 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80081e6:	2002      	movs	r0, #2
 80081e8:	e762      	b.n	80080b0 <HAL_I2C_Mem_Write+0x32>
	...

080081ec <HAL_I2C_Mem_Read>:
{
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	b085      	sub	sp, #20
 80081f2:	469b      	mov	fp, r3
 80081f4:	4604      	mov	r4, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80081fc:	4692      	mov	sl, r2
 80081fe:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8008202:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008204:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008208:	2b20      	cmp	r3, #32
 800820a:	f040 80a7 	bne.w	800835c <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 800820e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008210:	b10b      	cbz	r3, 8008216 <HAL_I2C_Mem_Read+0x2a>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	b933      	cbnz	r3, 8008224 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800821a:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800821c:	2001      	movs	r0, #1
}
 800821e:	b005      	add	sp, #20
 8008220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008224:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8008228:	2b01      	cmp	r3, #1
 800822a:	f000 8097 	beq.w	800835c <HAL_I2C_Mem_Read+0x170>
 800822e:	2501      	movs	r5, #1
 8008230:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8008234:	f7fe fd32 	bl	8006c9c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008238:	2319      	movs	r3, #25
 800823a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800823c:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800823e:	462a      	mov	r2, r5
 8008240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008244:	4620      	mov	r0, r4
 8008246:	f7ff fdf3 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 800824a:	4680      	mov	r8, r0
 800824c:	2800      	cmp	r0, #0
 800824e:	d1e5      	bne.n	800821c <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008250:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8008252:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008254:	4652      	mov	r2, sl
 8008256:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008258:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800825c:	2340      	movs	r3, #64	; 0x40
 800825e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8008262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008264:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008266:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008268:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800826a:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800826c:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8008270:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008272:	465b      	mov	r3, fp
 8008274:	f7ff fe3c 	bl	8007ef0 <I2C_RequestMemoryRead>
 8008278:	b110      	cbz	r0, 8008280 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 800827a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 800827e:	e7cd      	b.n	800821c <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008280:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008282:	b29b      	uxth	r3, r3
 8008284:	2bff      	cmp	r3, #255	; 0xff
 8008286:	4b36      	ldr	r3, [pc, #216]	; (8008360 <HAL_I2C_Mem_Read+0x174>)
 8008288:	d958      	bls.n	800833c <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800828a:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008292:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008294:	4639      	mov	r1, r7
 8008296:	4620      	mov	r0, r4
 8008298:	f7ff fd02 	bl	8007ca0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800829c:	464b      	mov	r3, r9
 800829e:	2200      	movs	r2, #0
 80082a0:	2104      	movs	r1, #4
 80082a2:	4620      	mov	r0, r4
 80082a4:	9600      	str	r6, [sp, #0]
 80082a6:	f7ff fdc3 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d1b6      	bne.n	800821c <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082b4:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80082b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80082b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80082ba:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80082bc:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80082be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80082c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80082c2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80082c4:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80082c6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80082cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	b1ab      	cbz	r3, 80082fe <HAL_I2C_Mem_Read+0x112>
 80082d2:	b9a2      	cbnz	r2, 80082fe <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80082d4:	464b      	mov	r3, r9
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	4620      	mov	r0, r4
 80082da:	9600      	str	r6, [sp, #0]
 80082dc:	f7ff fda8 	bl	8007e30 <I2C_WaitOnFlagUntilTimeout>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d19b      	bne.n	800821c <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80082e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	2bff      	cmp	r3, #255	; 0xff
 80082ea:	d92f      	bls.n	800834c <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082ec:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80082ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082f2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80082f4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082f6:	4639      	mov	r1, r7
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7ff fcd1 	bl	8007ca0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80082fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1ca      	bne.n	800829c <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008306:	4632      	mov	r2, r6
 8008308:	4649      	mov	r1, r9
 800830a:	4620      	mov	r0, r4
 800830c:	f7ff fe26 	bl	8007f5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008310:	2800      	cmp	r0, #0
 8008312:	d183      	bne.n	800821c <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	2120      	movs	r1, #32
 8008318:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8008320:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8008324:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8008328:	f022 0201 	bic.w	r2, r2, #1
 800832c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800832e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8008332:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008336:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800833a:	e770      	b.n	800821e <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 800833c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008344:	b292      	uxth	r2, r2
 8008346:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008348:	b2d2      	uxtb	r2, r2
 800834a:	e7a3      	b.n	8008294 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 800834c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800834e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008352:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8008354:	b292      	uxth	r2, r2
 8008356:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	e7cc      	b.n	80082f6 <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 800835c:	2002      	movs	r0, #2
 800835e:	e75e      	b.n	800821e <HAL_I2C_Mem_Read+0x32>
 8008360:	80002400 	.word	0x80002400

08008364 <HAL_I2C_GetState>:
  return hi2c->State;
 8008364:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8008368:	4770      	bx	lr

0800836a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800836a:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 800836c:	4770      	bx	lr

0800836e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800836e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008370:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8008374:	2b20      	cmp	r3, #32
 8008376:	b2dc      	uxtb	r4, r3
 8008378:	d11d      	bne.n	80083b6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800837a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800837e:	2b01      	cmp	r3, #1
 8008380:	d019      	beq.n	80083b6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008382:	2324      	movs	r3, #36	; 0x24
 8008384:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008388:	6803      	ldr	r3, [r0, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	f022 0201 	bic.w	r2, r2, #1
 8008390:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008398:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	4311      	orrs	r1, r2
 800839e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	f042 0201 	orr.w	r2, r2, #1
 80083a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80083aa:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80083ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80083b2:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80083b4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80083b6:	2002      	movs	r0, #2
 80083b8:	e7fc      	b.n	80083b4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080083ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083ba:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083bc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80083c0:	2b20      	cmp	r3, #32
 80083c2:	b2dc      	uxtb	r4, r3
 80083c4:	d11c      	bne.n	8008400 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083c6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d018      	beq.n	8008400 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083ce:	2324      	movs	r3, #36	; 0x24
 80083d0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083d4:	6803      	ldr	r3, [r0, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083de:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083e0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80083e4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80083e8:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	f042 0201 	orr.w	r2, r2, #1
 80083f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083f2:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80083f4:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80083f8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80083fc:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80083fe:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008400:	2002      	movs	r0, #2
 8008402:	e7fc      	b.n	80083fe <HAL_I2CEx_ConfigDigitalFilter+0x44>

08008404 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008404:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008406:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008408:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800840c:	3284      	adds	r2, #132	; 0x84
 800840e:	1883      	adds	r3, r0, r2
{
 8008410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008414:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008416:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800841a:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800841c:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008420:	684c      	ldr	r4, [r1, #4]
 8008422:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008426:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800842a:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800842e:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008430:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008432:	68c5      	ldr	r5, [r0, #12]
 8008434:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008438:	443d      	add	r5, r7
 800843a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800843e:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008440:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008442:	68c5      	ldr	r5, [r0, #12]
 8008444:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8008448:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800844a:	689d      	ldr	r5, [r3, #8]
 800844c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8008450:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008452:	688d      	ldr	r5, [r1, #8]
 8008454:	68c7      	ldr	r7, [r0, #12]
 8008456:	3501      	adds	r5, #1
 8008458:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800845c:	443d      	add	r5, r7
 800845e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008462:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008464:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008466:	691d      	ldr	r5, [r3, #16]
 8008468:	f025 0507 	bic.w	r5, r5, #7
 800846c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800846e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008470:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008472:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008476:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800847a:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800847e:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8008482:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8008486:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800848a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800848e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008490:	695d      	ldr	r5, [r3, #20]
 8008492:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8008496:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008498:	694d      	ldr	r5, [r1, #20]
 800849a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800849c:	69dd      	ldr	r5, [r3, #28]
 800849e:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80084a2:	f025 0507 	bic.w	r5, r5, #7
 80084a6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084a8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80084ac:	433d      	orrs	r5, r7
 80084ae:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084b0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084b2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084b4:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80084b8:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084ba:	b31e      	cbz	r6, 8008504 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084bc:	2e01      	cmp	r6, #1
 80084be:	d023      	beq.n	8008508 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084c0:	1eb5      	subs	r5, r6, #2
 80084c2:	2d02      	cmp	r5, #2
 80084c4:	d922      	bls.n	800850c <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80084c6:	2e07      	cmp	r6, #7
 80084c8:	bf0c      	ite	eq
 80084ca:	2502      	moveq	r5, #2
 80084cc:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084ce:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80084d0:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084d4:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80084d8:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084da:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80084dc:	3407      	adds	r4, #7
 80084de:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80084e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80084e2:	436e      	muls	r6, r5
 80084e4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80084e8:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80084ea:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80084ec:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80084f0:	f024 0407 	bic.w	r4, r4, #7
 80084f4:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80084f6:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80084f8:	5883      	ldr	r3, [r0, r2]
 80084fa:	f043 0301 	orr.w	r3, r3, #1
 80084fe:	5083      	str	r3, [r0, r2]
}
 8008500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8008504:	2504      	movs	r5, #4
 8008506:	e7e2      	b.n	80084ce <LTDC_SetConfig+0xca>
    tmp = 3U;
 8008508:	2503      	movs	r5, #3
 800850a:	e7e0      	b.n	80084ce <LTDC_SetConfig+0xca>
    tmp = 2U;
 800850c:	2502      	movs	r5, #2
 800850e:	e7de      	b.n	80084ce <LTDC_SetConfig+0xca>

08008510 <HAL_LTDC_Init>:
{
 8008510:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8008512:	4604      	mov	r4, r0
 8008514:	2800      	cmp	r0, #0
 8008516:	d063      	beq.n	80085e0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008518:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800851c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008520:	b91b      	cbnz	r3, 800852a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8008522:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008526:	f7f8 fdf9 	bl	800111c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800852a:	2302      	movs	r3, #2
 800852c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008538:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800853a:	6999      	ldr	r1, [r3, #24]
 800853c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008540:	4302      	orrs	r2, r0
 8008542:	68e0      	ldr	r0, [r4, #12]
 8008544:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008546:	6920      	ldr	r0, [r4, #16]
 8008548:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800854a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800854c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800854e:	4925      	ldr	r1, [pc, #148]	; (80085e4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008550:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	400a      	ands	r2, r1
 8008556:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800855e:	69a0      	ldr	r0, [r4, #24]
 8008560:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008562:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008564:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	400a      	ands	r2, r1
 800856a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008572:	6a20      	ldr	r0, [r4, #32]
 8008574:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008576:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008578:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800857a:	691a      	ldr	r2, [r3, #16]
 800857c:	400a      	ands	r2, r1
 800857e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8008588:	4302      	orrs	r2, r0
 800858a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800858c:	695a      	ldr	r2, [r3, #20]
 800858e:	4011      	ands	r1, r2
 8008590:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008592:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008594:	695a      	ldr	r2, [r3, #20]
 8008596:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800859a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800859c:	430a      	orrs	r2, r1
 800859e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80085a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80085a2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80085a6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80085aa:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80085ae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80085b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085b2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80085b6:	430a      	orrs	r2, r1
 80085b8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80085bc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80085c0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80085c2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80085c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085c6:	f042 0206 	orr.w	r2, r2, #6
 80085ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80085d4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80085d6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80085da:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80085de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80085e0:	2001      	movs	r0, #1
 80085e2:	e7fc      	b.n	80085de <HAL_LTDC_Init+0xce>
 80085e4:	f000f800 	.word	0xf000f800

080085e8 <HAL_LTDC_ErrorCallback>:
 80085e8:	4770      	bx	lr

080085ea <HAL_LTDC_LineEventCallback>:
 80085ea:	4770      	bx	lr

080085ec <HAL_LTDC_ReloadEventCallback>:
 80085ec:	4770      	bx	lr

080085ee <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80085ee:	6803      	ldr	r3, [r0, #0]
{
 80085f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80085f2:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 80085f4:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80085f6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80085f8:	0772      	lsls	r2, r6, #29
 80085fa:	d514      	bpl.n	8008626 <HAL_LTDC_IRQHandler+0x38>
 80085fc:	0769      	lsls	r1, r5, #29
 80085fe:	d512      	bpl.n	8008626 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008602:	f022 0204 	bic.w	r2, r2, #4
 8008606:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008608:	2204      	movs	r2, #4
 800860a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800860c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8008610:	f043 0301 	orr.w	r3, r3, #1
 8008614:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8008618:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800861a:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800861e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008622:	f7ff ffe1 	bl	80085e8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008626:	07b2      	lsls	r2, r6, #30
 8008628:	d516      	bpl.n	8008658 <HAL_LTDC_IRQHandler+0x6a>
 800862a:	07ab      	lsls	r3, r5, #30
 800862c:	d514      	bpl.n	8008658 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800862e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008630:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008634:	f022 0202 	bic.w	r2, r2, #2
 8008638:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800863a:	2202      	movs	r2, #2
 800863c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800863e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008648:	2304      	movs	r3, #4
 800864a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800864e:	2300      	movs	r3, #0
 8008650:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008654:	f7ff ffc8 	bl	80085e8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008658:	07f0      	lsls	r0, r6, #31
 800865a:	d510      	bpl.n	800867e <HAL_LTDC_IRQHandler+0x90>
 800865c:	07e9      	lsls	r1, r5, #31
 800865e:	d50e      	bpl.n	800867e <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008660:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008662:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008666:	f022 0201 	bic.w	r2, r2, #1
 800866a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800866c:	2201      	movs	r2, #1
 800866e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8008670:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008672:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8008676:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800867a:	f7ff ffb6 	bl	80085ea <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800867e:	0732      	lsls	r2, r6, #28
 8008680:	d511      	bpl.n	80086a6 <HAL_LTDC_IRQHandler+0xb8>
 8008682:	072b      	lsls	r3, r5, #28
 8008684:	d50f      	bpl.n	80086a6 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008686:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008688:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868c:	f022 0208 	bic.w	r2, r2, #8
 8008690:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008692:	2208      	movs	r2, #8
 8008694:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008696:	2301      	movs	r3, #1
 8008698:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800869c:	2300      	movs	r3, #0
 800869e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80086a2:	f7ff ffa3 	bl	80085ec <HAL_LTDC_ReloadEventCallback>
}
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <HAL_LTDC_ConfigLayer>:
{
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80086ac:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80086b0:	4606      	mov	r6, r0
 80086b2:	460f      	mov	r7, r1
 80086b4:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	f04f 0002 	mov.w	r0, #2
 80086bc:	d01f      	beq.n	80086fe <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80086be:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80086c0:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80086c4:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80086c6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80086ca:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80086ce:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80086d2:	3438      	adds	r4, #56	; 0x38
 80086d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086e0:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80086e2:	4630      	mov	r0, r6
 80086e4:	4662      	mov	r2, ip
 80086e6:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80086e8:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80086ea:	f7ff fe8b 	bl	8008404 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80086ee:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80086f0:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80086f2:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80086f6:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80086fa:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80086fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008704 <HAL_LTDC_SetPitch>:
{
 8008704:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008706:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800870a:	2b01      	cmp	r3, #1
 800870c:	f04f 0302 	mov.w	r3, #2
 8008710:	d02c      	beq.n	800876c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008712:	2434      	movs	r4, #52	; 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008714:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008718:	fb04 0402 	mla	r4, r4, r2, r0
 800871c:	6ca4      	ldr	r4, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800871e:	b33c      	cbz	r4, 8008770 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008720:	2c01      	cmp	r4, #1
 8008722:	d027      	beq.n	8008774 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008724:	1ea5      	subs	r5, r4, #2
 8008726:	429d      	cmp	r5, r3
 8008728:	d902      	bls.n	8008730 <HAL_LTDC_SetPitch+0x2c>
    tmp = 1U;
 800872a:	2c07      	cmp	r4, #7
 800872c:	bf18      	it	ne
 800872e:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008730:	01d2      	lsls	r2, r2, #7
 8008732:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8008734:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008736:	3284      	adds	r2, #132	; 0x84
 8008738:	4422      	add	r2, r4
 800873a:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800873c:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8008740:	f424 14f8 	bic.w	r4, r4, #2031616	; 0x1f0000
 8008744:	62d4      	str	r4, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008746:	4c0c      	ldr	r4, [pc, #48]	; (8008778 <HAL_LTDC_SetPitch+0x74>)
 8008748:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800874a:	f045 0501 	orr.w	r5, r5, #1
 800874e:	6265      	str	r5, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008750:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8008752:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8008756:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800875a:	f043 0301 	orr.w	r3, r3, #1
 800875e:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008760:	2301      	movs	r3, #1
 8008762:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8008766:	2300      	movs	r3, #0
 8008768:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
}
 800876c:	4618      	mov	r0, r3
 800876e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008770:	2304      	movs	r3, #4
 8008772:	e7dd      	b.n	8008730 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8008774:	2303      	movs	r3, #3
 8008776:	e7db      	b.n	8008730 <HAL_LTDC_SetPitch+0x2c>
 8008778:	50001000 	.word	0x50001000

0800877c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008780:	f7fe fa8c 	bl	8006c9c <HAL_GetTick>
 8008784:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8008786:	2c00      	cmp	r4, #0
 8008788:	d061      	beq.n	800884e <HAL_MDMA_Init+0xd2>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800878a:	2300      	movs	r3, #0

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800878c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800878e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008792:	2302      	movs	r3, #2
 8008794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8008798:	68d3      	ldr	r3, [r2, #12]
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	60d3      	str	r3, [r2, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	07d2      	lsls	r2, r2, #31
 80087a6:	d448      	bmi.n	800883a <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80087a8:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80087b0:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	69e1      	ldr	r1, [r4, #28]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	6a21      	ldr	r1, [r4, #32]
 80087bc:	430a      	orrs	r2, r1
 80087be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80087c0:	430a      	orrs	r2, r1
 80087c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80087c4:	430a      	orrs	r2, r1
 80087c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80087c8:	430a      	orrs	r2, r1
 80087ca:	68a1      	ldr	r1, [r4, #8]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80087d0:	3901      	subs	r1, #1
 80087d2:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80087d6:	6861      	ldr	r1, [r4, #4]
 80087d8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80087dc:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80087de:	d103      	bne.n	80087e8 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80087e0:	691a      	ldr	r2, [r3, #16]
 80087e2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80087e6:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80087e8:	2200      	movs	r2, #0
 80087ea:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80087ec:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	da04      	bge.n	80087fc <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80087f2:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80087f4:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80087f6:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80087fa:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80087fc:	b292      	uxth	r2, r2
 80087fe:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008800:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008802:	2a00      	cmp	r2, #0
 8008804:	da25      	bge.n	8008852 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008806:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8008808:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800880a:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
 800880e:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008810:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008812:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8008816:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800881a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800881c:	f04f 0200 	mov.w	r2, #0
 8008820:	d019      	beq.n	8008856 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8008822:	b2c9      	uxtb	r1, r1
 8008824:	6299      	str	r1, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8008826:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
 8008828:	2000      	movs	r0, #0
  hmdma->State = HAL_MDMA_STATE_READY;
 800882a:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800882c:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800882e:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 8008830:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8008834:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
 8008838:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800883a:	f7fe fa2f 	bl	8006c9c <HAL_GetTick>
 800883e:	1b40      	subs	r0, r0, r5
 8008840:	2805      	cmp	r0, #5
 8008842:	d9ad      	bls.n	80087a0 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8008844:	2340      	movs	r3, #64	; 0x40
 8008846:	66a3      	str	r3, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008848:	2303      	movs	r3, #3
 800884a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_ERROR;
 800884e:	2001      	movs	r0, #1
 8008850:	e7f2      	b.n	8008838 <HAL_MDMA_Init+0xbc>
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008852:	6a18      	ldr	r0, [r3, #32]
 8008854:	e7dd      	b.n	8008812 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8008856:	629a      	str	r2, [r3, #40]	; 0x28
 8008858:	e7e5      	b.n	8008826 <HAL_MDMA_Init+0xaa>

0800885a <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800885a:	b1d8      	cbz	r0, 8008894 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800885c:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800885e:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 8008860:	68d3      	ldr	r3, [r2, #12]
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800886c:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800886e:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 8008870:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 8008872:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 8008874:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8008876:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 8008878:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800887a:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800887c:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800887e:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008880:	6683      	str	r3, [r0, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008882:	6643      	str	r3, [r0, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008884:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
 8008888:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800888c:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8008890:	4618      	mov	r0, r3
 8008892:	4770      	bx	lr
    return HAL_ERROR;
 8008894:	2001      	movs	r0, #1
}
 8008896:	4770      	bx	lr

08008898 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008898:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800889a:	4d1c      	ldr	r5, [pc, #112]	; (800890c <HAL_PWREx_ConfigSupply+0x74>)
{
 800889c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800889e:	68eb      	ldr	r3, [r5, #12]
 80088a0:	f003 0307 	and.w	r3, r3, #7
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	d006      	beq.n	80088b6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80088a8:	68e8      	ldr	r0, [r5, #12]
 80088aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80088ae:	1b00      	subs	r0, r0, r4
 80088b0:	bf18      	it	ne
 80088b2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80088b4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80088b6:	68eb      	ldr	r3, [r5, #12]
 80088b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088bc:	4303      	orrs	r3, r0
 80088be:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 80088c0:	f7fe f9ec 	bl	8006c9c <HAL_GetTick>
 80088c4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80088c6:	686b      	ldr	r3, [r5, #4]
 80088c8:	049a      	lsls	r2, r3, #18
 80088ca:	d508      	bpl.n	80088de <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80088cc:	f1a4 031d 	sub.w	r3, r4, #29
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d90c      	bls.n	80088ee <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80088d4:	3c2d      	subs	r4, #45	; 0x2d
 80088d6:	2c01      	cmp	r4, #1
 80088d8:	d909      	bls.n	80088ee <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 80088da:	2000      	movs	r0, #0
 80088dc:	e7ea      	b.n	80088b4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80088de:	f7fe f9dd 	bl	8006c9c <HAL_GetTick>
 80088e2:	1b80      	subs	r0, r0, r6
 80088e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80088e8:	d9ed      	bls.n	80088c6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7e2      	b.n	80088b4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 80088ee:	f7fe f9d5 	bl	8006c9c <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80088f2:	4d06      	ldr	r5, [pc, #24]	; (800890c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 80088f4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80088f6:	68eb      	ldr	r3, [r5, #12]
 80088f8:	03db      	lsls	r3, r3, #15
 80088fa:	d4ee      	bmi.n	80088da <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80088fc:	f7fe f9ce 	bl	8006c9c <HAL_GetTick>
 8008900:	1b00      	subs	r0, r0, r4
 8008902:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8008906:	d9f6      	bls.n	80088f6 <HAL_PWREx_ConfigSupply+0x5e>
 8008908:	e7ef      	b.n	80088ea <HAL_PWREx_ConfigSupply+0x52>
 800890a:	bf00      	nop
 800890c:	58024800 	.word	0x58024800

08008910 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008914:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8008916:	b136      	cbz	r6, 8008926 <QSPI_Config+0x16>
 8008918:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 800891c:	d003      	beq.n	8008926 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800891e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008920:	6804      	ldr	r4, [r0, #0]
 8008922:	3b01      	subs	r3, #1
 8008924:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008926:	f8d1 9018 	ldr.w	r9, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800892a:	e9d1 7507 	ldrd	r7, r5, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800892e:	f1b9 0f00 	cmp.w	r9, #0
 8008932:	d04f      	beq.n	80089d4 <QSPI_Config+0xc4>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008934:	694b      	ldr	r3, [r1, #20]
 8008936:	ea46 0909 	orr.w	r9, r6, r9
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800893a:	6800      	ldr	r0, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800893c:	f8d1 a000 	ldr.w	sl, [r1]
 8008940:	ea4f 4c83 	mov.w	ip, r3, lsl #18
 8008944:	f8d1 e034 	ldr.w	lr, [r1, #52]	; 0x34
 8008948:	ea49 0902 	orr.w	r9, r9, r2
 800894c:	e9d1 480b 	ldrd	r4, r8, [r1, #44]	; 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008950:	b335      	cbz	r5, 80089a0 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008952:	688b      	ldr	r3, [r1, #8]
 8008954:	ea49 0505 	orr.w	r5, r9, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008958:	690e      	ldr	r6, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800895a:	61c3      	str	r3, [r0, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800895c:	b19f      	cbz	r7, 8008986 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800895e:	ea4a 0307 	orr.w	r3, sl, r7
 8008962:	4323      	orrs	r3, r4
 8008964:	68cc      	ldr	r4, [r1, #12]
 8008966:	ea43 0308 	orr.w	r3, r3, r8
 800896a:	ea43 030e 	orr.w	r3, r3, lr
 800896e:	4333      	orrs	r3, r6
 8008970:	4323      	orrs	r3, r4
 8008972:	ea43 030c 	orr.w	r3, r3, ip
 8008976:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize |
                                         cmd->AddressMode | cmd->InstructionMode | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008978:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800897c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800897e:	d00d      	beq.n	800899c <QSPI_Config+0x8c>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008980:	684b      	ldr	r3, [r1, #4]
 8008982:	6183      	str	r3, [r0, #24]
 8008984:	e00a      	b.n	800899c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008986:	ea4a 0304 	orr.w	r3, sl, r4
 800898a:	ea43 0308 	orr.w	r3, r3, r8
 800898e:	ea43 030e 	orr.w	r3, r3, lr
 8008992:	4333      	orrs	r3, r6
 8008994:	ea43 030c 	orr.w	r3, r3, ip
 8008998:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800899a:	6143      	str	r3, [r0, #20]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800899c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80089a0:	b16f      	cbz	r7, 80089be <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089a2:	ea4a 0307 	orr.w	r3, sl, r7
 80089a6:	4323      	orrs	r3, r4
 80089a8:	68cc      	ldr	r4, [r1, #12]
 80089aa:	ea43 0308 	orr.w	r3, r3, r8
 80089ae:	ea43 030e 	orr.w	r3, r3, lr
 80089b2:	4323      	orrs	r3, r4
 80089b4:	ea43 030c 	orr.w	r3, r3, ip
 80089b8:	ea43 0309 	orr.w	r3, r3, r9
 80089bc:	e7dc      	b.n	8008978 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089be:	ea4a 0304 	orr.w	r3, sl, r4
 80089c2:	ea43 0308 	orr.w	r3, r3, r8
 80089c6:	ea43 030e 	orr.w	r3, r3, lr
 80089ca:	ea43 030c 	orr.w	r3, r3, ip
 80089ce:	ea43 0309 	orr.w	r3, r3, r9
 80089d2:	e7e2      	b.n	800899a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80089d4:	b365      	cbz	r5, 8008a30 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80089d6:	6804      	ldr	r4, [r0, #0]
 80089d8:	688b      	ldr	r3, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089da:	6908      	ldr	r0, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80089dc:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80089de:	ea46 0305 	orr.w	r3, r6, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089e2:	694e      	ldr	r6, [r1, #20]
 80089e4:	ea43 0502 	orr.w	r5, r3, r2
 80089e8:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 80089ec:	04b6      	lsls	r6, r6, #18
 80089ee:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80089f2:	b1a7      	cbz	r7, 8008a1e <QSPI_Config+0x10e>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089f4:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80089f6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80089fa:	ea40 0008 	orr.w	r0, r0, r8
 80089fe:	ea43 0300 	orr.w	r3, r3, r0
 8008a02:	68c8      	ldr	r0, [r1, #12]
 8008a04:	ea43 030c 	orr.w	r3, r3, ip
 8008a08:	ea43 0300 	orr.w	r3, r3, r0
 8008a0c:	ea43 0306 	orr.w	r3, r3, r6
 8008a10:	ea43 0305 	orr.w	r3, r3, r5
 8008a14:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008a16:	d0c1      	beq.n	800899c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008a18:	684b      	ldr	r3, [r1, #4]
 8008a1a:	61a3      	str	r3, [r4, #24]
 8008a1c:	e7be      	b.n	800899c <QSPI_Config+0x8c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a1e:	ea40 0008 	orr.w	r0, r0, r8
 8008a22:	4303      	orrs	r3, r0
 8008a24:	ea43 030c 	orr.w	r3, r3, ip
 8008a28:	4333      	orrs	r3, r6
 8008a2a:	432b      	orrs	r3, r5
 8008a2c:	6163      	str	r3, [r4, #20]
 8008a2e:	e7b5      	b.n	800899c <QSPI_Config+0x8c>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008a30:	b17f      	cbz	r7, 8008a52 <QSPI_Config+0x142>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a32:	ea46 0307 	orr.w	r3, r6, r7
 8008a36:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8008a38:	6800      	ldr	r0, [r0, #0]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	4323      	orrs	r3, r4
 8008a3e:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8008a40:	4323      	orrs	r3, r4
 8008a42:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8008a44:	4323      	orrs	r3, r4
 8008a46:	68cc      	ldr	r4, [r1, #12]
 8008a48:	4323      	orrs	r3, r4
 8008a4a:	694c      	ldr	r4, [r1, #20]
 8008a4c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008a50:	e792      	b.n	8008978 <QSPI_Config+0x68>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008a52:	2e00      	cmp	r6, #0
 8008a54:	d0a2      	beq.n	800899c <QSPI_Config+0x8c>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008a56:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8008a58:	6800      	ldr	r0, [r0, #0]
 8008a5a:	4333      	orrs	r3, r6
 8008a5c:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	694b      	ldr	r3, [r1, #20]
 8008a62:	4332      	orrs	r2, r6
 8008a64:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8008a66:	4332      	orrs	r2, r6
 8008a68:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8008a6c:	6142      	str	r2, [r0, #20]
}
 8008a6e:	e795      	b.n	800899c <QSPI_Config+0x8c>

08008a70 <QSPI_WaitFlagStateUntilTimeout>:
{
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460e      	mov	r6, r1
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008a80:	6822      	ldr	r2, [r4, #0]
 8008a82:	6893      	ldr	r3, [r2, #8]
 8008a84:	4233      	tst	r3, r6
 8008a86:	bf14      	ite	ne
 8008a88:	2301      	movne	r3, #1
 8008a8a:	2300      	moveq	r3, #0
 8008a8c:	42ab      	cmp	r3, r5
 8008a8e:	d101      	bne.n	8008a94 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008a90:	2000      	movs	r0, #0
 8008a92:	e012      	b.n	8008aba <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008a98:	d0f3      	beq.n	8008a82 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9a:	f7fe f8ff 	bl	8006c9c <HAL_GetTick>
 8008a9e:	1bc0      	subs	r0, r0, r7
 8008aa0:	4540      	cmp	r0, r8
 8008aa2:	d802      	bhi.n	8008aaa <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008aa4:	f1b8 0f00 	cmp.w	r8, #0
 8008aa8:	d1ea      	bne.n	8008a80 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008aaa:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008aac:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008aae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008ab4:	f043 0301 	orr.w	r3, r3, #1
 8008ab8:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008ac0 <HAL_QSPI_Init>:
{
 8008ac0:	b530      	push	{r4, r5, lr}
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8008ac6:	f7fe f8e9 	bl	8006c9c <HAL_GetTick>
 8008aca:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8008acc:	2c00      	cmp	r4, #0
 8008ace:	d040      	beq.n	8008b52 <HAL_QSPI_Init+0x92>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008ad0:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008ad4:	b93a      	cbnz	r2, 8008ae6 <HAL_QSPI_Init+0x26>
 8008ad6:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f7f8 fb5b 	bl	8001194 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8008ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008ae6:	6820      	ldr	r0, [r4, #0]
 8008ae8:	68a1      	ldr	r1, [r4, #8]
 8008aea:	6802      	ldr	r2, [r0, #0]
 8008aec:	3901      	subs	r1, #1
 8008aee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008af2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008af6:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008af8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008afa:	4620      	mov	r0, r4
 8008afc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8008afe:	9200      	str	r2, [sp, #0]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f7ff ffb5 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008b06:	bb10      	cbnz	r0, 8008b4e <HAL_QSPI_Init+0x8e>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	69e5      	ldr	r5, [r4, #28]
 8008b0c:	68e3      	ldr	r3, [r4, #12]
 8008b0e:	6811      	ldr	r1, [r2, #0]
 8008b10:	432b      	orrs	r3, r5
 8008b12:	6a25      	ldr	r5, [r4, #32]
 8008b14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008b18:	432b      	orrs	r3, r5
 8008b1a:	6865      	ldr	r5, [r4, #4]
 8008b1c:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8008b20:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008b24:	430b      	orrs	r3, r1
 8008b26:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008b28:	6855      	ldr	r5, [r2, #4]
 8008b2a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	6921      	ldr	r1, [r4, #16]
 8008b32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b36:	4908      	ldr	r1, [pc, #32]	; (8008b58 <HAL_QSPI_Init+0x98>)
 8008b38:	4029      	ands	r1, r5
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008b3e:	6813      	ldr	r3, [r2, #0]
 8008b40:	f043 0301 	orr.w	r3, r3, #1
 8008b44:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8008b46:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b48:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008b4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8008b4e:	b005      	add	sp, #20
 8008b50:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008b52:	2001      	movs	r0, #1
 8008b54:	e7fb      	b.n	8008b4e <HAL_QSPI_Init+0x8e>
 8008b56:	bf00      	nop
 8008b58:	ffe0f8fe 	.word	0xffe0f8fe

08008b5c <HAL_QSPI_Command>:
{
 8008b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b60:	4604      	mov	r4, r0
 8008b62:	b085      	sub	sp, #20
 8008b64:	4617      	mov	r7, r2
 8008b66:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 8008b68:	f7fe f898 	bl	8006c9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008b6c:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008b70:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008b72:	2a01      	cmp	r2, #1
 8008b74:	d033      	beq.n	8008bde <HAL_QSPI_Command+0x82>
 8008b76:	2201      	movs	r2, #1
 8008b78:	2602      	movs	r6, #2
 8008b7a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008b7e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008b82:	2a01      	cmp	r2, #1
 8008b84:	fa5f f882 	uxtb.w	r8, r2
 8008b88:	d127      	bne.n	8008bda <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b8a:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008b8c:	9003      	str	r0, [sp, #12]
 8008b8e:	2120      	movs	r1, #32
 8008b90:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008b92:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008b94:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008b96:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008b9a:	f7ff ff69 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	b9a0      	cbnz	r0, 8008bcc <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff feb2 	bl	8008910 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008bac:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8008bb0:	9b03      	ldr	r3, [sp, #12]
 8008bb2:	b94a      	cbnz	r2, 8008bc8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4620      	mov	r0, r4
 8008bba:	9700      	str	r7, [sp, #0]
 8008bbc:	f7ff ff58 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	b918      	cbnz	r0, 8008bcc <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008bc8:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008bcc:	2300      	movs	r3, #0
 8008bce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	b005      	add	sp, #20
 8008bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8008bda:	4635      	mov	r5, r6
 8008bdc:	e7f6      	b.n	8008bcc <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8008bde:	2502      	movs	r5, #2
 8008be0:	e7f7      	b.n	8008bd2 <HAL_QSPI_Command+0x76>

08008be2 <HAL_QSPI_Transmit>:
{
 8008be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be4:	4604      	mov	r4, r0
 8008be6:	b085      	sub	sp, #20
 8008be8:	4616      	mov	r6, r2
 8008bea:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008bec:	f7fe f856 	bl	8006c9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008bf0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008bf4:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8008bf6:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8008bf8:	2a01      	cmp	r2, #1
 8008bfa:	d049      	beq.n	8008c90 <HAL_QSPI_Transmit+0xae>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008c02:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008c06:	2a01      	cmp	r2, #1
 8008c08:	b2d0      	uxtb	r0, r2
 8008c0a:	d13f      	bne.n	8008c8c <HAL_QSPI_Transmit+0xaa>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	d036      	beq.n	8008c82 <HAL_QSPI_Transmit+0xa0>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8008c14:	2212      	movs	r2, #18
 8008c16:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008c1a:	692a      	ldr	r2, [r5, #16]
 8008c1c:	3201      	adds	r2, #1
 8008c1e:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008c20:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8008c22:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008c24:	3201      	adds	r2, #1
 8008c26:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008c28:	696a      	ldr	r2, [r5, #20]
 8008c2a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8008c2e:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8008c30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c32:	b98a      	cbnz	r2, 8008c58 <HAL_QSPI_Transmit+0x76>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008c34:	2201      	movs	r2, #1
 8008c36:	2102      	movs	r1, #2
 8008c38:	4620      	mov	r0, r4
 8008c3a:	9600      	str	r6, [sp, #0]
 8008c3c:	f7ff ff18 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008c40:	b910      	cbnz	r0, 8008c48 <HAL_QSPI_Transmit+0x66>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	2202      	movs	r2, #2
 8008c46:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008c54:	b005      	add	sp, #20
 8008c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8008c58:	2201      	movs	r2, #1
 8008c5a:	2104      	movs	r1, #4
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	9600      	str	r6, [sp, #0]
 8008c60:	9303      	str	r3, [sp, #12]
 8008c62:	f7ff ff05 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1ee      	bne.n	8008c48 <HAL_QSPI_Transmit+0x66>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008c6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008c6c:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8008c6e:	7812      	ldrb	r2, [r2, #0]
 8008c70:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 8008c74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008c76:	3201      	adds	r2, #1
 8008c78:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 8008c7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8008c80:	e7d6      	b.n	8008c30 <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008c82:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008c84:	f043 0308 	orr.w	r3, r3, #8
 8008c88:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8008c8a:	e7e0      	b.n	8008c4e <HAL_QSPI_Transmit+0x6c>
    status = HAL_BUSY;
 8008c8c:	2002      	movs	r0, #2
 8008c8e:	e7de      	b.n	8008c4e <HAL_QSPI_Transmit+0x6c>
  __HAL_LOCK(hqspi);
 8008c90:	2002      	movs	r0, #2
 8008c92:	e7df      	b.n	8008c54 <HAL_QSPI_Transmit+0x72>

08008c94 <HAL_QSPI_Receive>:
{
 8008c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c96:	4604      	mov	r4, r0
 8008c98:	b085      	sub	sp, #20
 8008c9a:	4616      	mov	r6, r2
 8008c9c:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008c9e:	f7fd fffd 	bl	8006c9c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008ca2:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8008ca4:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8008ca6:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 8008caa:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008cae:	2a01      	cmp	r2, #1
 8008cb0:	d04d      	beq.n	8008d4e <HAL_QSPI_Receive+0xba>
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008cb8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008cbc:	2a01      	cmp	r2, #1
 8008cbe:	b2d0      	uxtb	r0, r2
 8008cc0:	d143      	bne.n	8008d4a <HAL_QSPI_Receive+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 8008cc6:	2f00      	cmp	r7, #0
 8008cc8:	d03a      	beq.n	8008d40 <HAL_QSPI_Receive+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8008cca:	2222      	movs	r2, #34	; 0x22
 8008ccc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8008cd0:	692a      	ldr	r2, [r5, #16]
 8008cd2:	3201      	adds	r2, #1
 8008cd4:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008cd6:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8008cd8:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8008cda:	3201      	adds	r2, #1
 8008cdc:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8008cde:	6969      	ldr	r1, [r5, #20]
 8008ce0:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8008ce4:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8008ce8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8008cea:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8008cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008cf0:	b98a      	cbnz	r2, 8008d16 <HAL_QSPI_Receive+0x82>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	2102      	movs	r1, #2
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	9600      	str	r6, [sp, #0]
 8008cfa:	f7ff feb9 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8008cfe:	b910      	cbnz	r0, 8008d06 <HAL_QSPI_Receive+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	2202      	movs	r2, #2
 8008d04:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008d12:	b005      	add	sp, #20
 8008d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8008d16:	2201      	movs	r2, #1
 8008d18:	2106      	movs	r1, #6
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	9600      	str	r6, [sp, #0]
 8008d1e:	9303      	str	r3, [sp, #12]
 8008d20:	f7ff fea6 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d1ee      	bne.n	8008d06 <HAL_QSPI_Receive+0x72>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008d28:	f895 1020 	ldrb.w	r1, [r5, #32]
 8008d2c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8008d2e:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8008d30:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 8008d32:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008d34:	3201      	adds	r2, #1
 8008d36:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 8008d38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008d3a:	3a01      	subs	r2, #1
 8008d3c:	63a2      	str	r2, [r4, #56]	; 0x38
 8008d3e:	e7d6      	b.n	8008cee <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8008d40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d42:	f043 0308 	orr.w	r3, r3, #8
 8008d46:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 8008d48:	e7e0      	b.n	8008d0c <HAL_QSPI_Receive+0x78>
    status = HAL_BUSY;
 8008d4a:	2002      	movs	r0, #2
 8008d4c:	e7de      	b.n	8008d0c <HAL_QSPI_Receive+0x78>
  __HAL_LOCK(hqspi);
 8008d4e:	2002      	movs	r0, #2
 8008d50:	e7df      	b.n	8008d12 <HAL_QSPI_Receive+0x7e>

08008d52 <HAL_QSPI_AutoPolling>:
{
 8008d52:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008d56:	4604      	mov	r4, r0
 8008d58:	4615      	mov	r5, r2
 8008d5a:	461e      	mov	r6, r3
 8008d5c:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8008d5e:	f7fd ff9d 	bl	8006c9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008d62:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008d66:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008d68:	2a01      	cmp	r2, #1
 8008d6a:	d040      	beq.n	8008dee <HAL_QSPI_AutoPolling+0x9c>
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008d72:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008d76:	2a01      	cmp	r2, #1
 8008d78:	b2d7      	uxtb	r7, r2
 8008d7a:	d136      	bne.n	8008dea <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008d7c:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008d7e:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008d80:	9003      	str	r0, [sp, #12]
 8008d82:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008d84:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008d86:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8008d88:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008d8c:	2120      	movs	r1, #32
 8008d8e:	f7ff fe6f 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008d92:	bb20      	cbnz	r0, 8008dde <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008d94:	6821      	ldr	r1, [r4, #0]
 8008d96:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008d98:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8008d9a:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8008d9c:	686a      	ldr	r2, [r5, #4]
 8008d9e:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8008da0:	68aa      	ldr	r2, [r5, #8]
 8008da2:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008da4:	680a      	ldr	r2, [r1, #0]
 8008da6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8008daa:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008dac:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8008dae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008db2:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008db4:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 8008db6:	68ea      	ldr	r2, [r5, #12]
 8008db8:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8008dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008dc0:	f7ff fda6 	bl	8008910 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8008dc4:	9b03      	ldr	r3, [sp, #12]
 8008dc6:	463a      	mov	r2, r7
 8008dc8:	2108      	movs	r1, #8
 8008dca:	4620      	mov	r0, r4
 8008dcc:	9600      	str	r6, [sp, #0]
 8008dce:	f7ff fe4f 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8008dd2:	b920      	cbnz	r0, 8008dde <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008dda:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8008dde:	2300      	movs	r3, #0
 8008de0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008de4:	b004      	add	sp, #16
 8008de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8008dea:	2002      	movs	r0, #2
 8008dec:	e7f7      	b.n	8008dde <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8008dee:	2002      	movs	r0, #2
 8008df0:	e7f8      	b.n	8008de4 <HAL_QSPI_AutoPolling+0x92>

08008df2 <HAL_QSPI_MemoryMapped>:
{
 8008df2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008df4:	4604      	mov	r4, r0
 8008df6:	4616      	mov	r6, r2
 8008df8:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8008dfa:	f7fd ff4f 	bl	8006c9c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008dfe:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8008e02:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8008e04:	2a01      	cmp	r2, #1
 8008e06:	d033      	beq.n	8008e70 <HAL_QSPI_MemoryMapped+0x7e>
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008e0e:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8008e12:	2a01      	cmp	r2, #1
 8008e14:	d12a      	bne.n	8008e6c <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e16:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008e18:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e1a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008e1c:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8008e1e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e22:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e24:	9100      	str	r1, [sp, #0]
 8008e26:	2120      	movs	r1, #32
 8008e28:	f7ff fe22 	bl	8008a70 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	b9b8      	cbnz	r0, 8008e60 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	6872      	ldr	r2, [r6, #4]
 8008e34:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008e36:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8008e38:	f020 0008 	bic.w	r0, r0, #8
 8008e3c:	ea40 0002 	orr.w	r0, r0, r2
 8008e40:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8008e42:	d107      	bne.n	8008e54 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8008e44:	6832      	ldr	r2, [r6, #0]
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8008e48:	2210      	movs	r2, #16
 8008e4a:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e52:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8008e54:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8008e58:	4639      	mov	r1, r7
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f7ff fd58 	bl	8008910 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8008e60:	2300      	movs	r3, #0
 8008e62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8008e66:	4628      	mov	r0, r5
 8008e68:	b003      	add	sp, #12
 8008e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8008e6c:	2502      	movs	r5, #2
 8008e6e:	e7f7      	b.n	8008e60 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8008e70:	2502      	movs	r5, #2
 8008e72:	e7f8      	b.n	8008e66 <HAL_QSPI_MemoryMapped+0x74>

08008e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e76:	4604      	mov	r4, r0
 8008e78:	b908      	cbnz	r0, 8008e7e <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8008e7a:	2001      	movs	r0, #1
 8008e7c:	e08b      	b.n	8008f96 <HAL_RCC_OscConfig+0x122>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e7e:	6803      	ldr	r3, [r0, #0]
 8008e80:	07df      	lsls	r7, r3, #31
 8008e82:	d45e      	bmi.n	8008f42 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e84:	6823      	ldr	r3, [r4, #0]
 8008e86:	079e      	lsls	r6, r3, #30
 8008e88:	f100 80af 	bmi.w	8008fea <HAL_RCC_OscConfig+0x176>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	06da      	lsls	r2, r3, #27
 8008e90:	d527      	bpl.n	8008ee2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e92:	4b9e      	ldr	r3, [pc, #632]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008e94:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e96:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e98:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008e9c:	2a08      	cmp	r2, #8
 8008e9e:	d007      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x3c>
 8008ea0:	2a18      	cmp	r2, #24
 8008ea2:	f040 8107 	bne.w	80090b4 <HAL_RCC_OscConfig+0x240>
 8008ea6:	f001 0203 	and.w	r2, r1, #3
 8008eaa:	2a01      	cmp	r2, #1
 8008eac:	f040 8102 	bne.w	80090b4 <HAL_RCC_OscConfig+0x240>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	05db      	lsls	r3, r3, #23
 8008eb4:	d502      	bpl.n	8008ebc <HAL_RCC_OscConfig+0x48>
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	2b80      	cmp	r3, #128	; 0x80
 8008eba:	d1de      	bne.n	8008e7a <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008ebc:	f7fd ff06 	bl	8006ccc <HAL_GetREVID>
 8008ec0:	f241 0303 	movw	r3, #4099	; 0x1003
 8008ec4:	6a21      	ldr	r1, [r4, #32]
 8008ec6:	4298      	cmp	r0, r3
 8008ec8:	4b90      	ldr	r3, [pc, #576]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008eca:	f200 80ec 	bhi.w	80090a6 <HAL_RCC_OscConfig+0x232>
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	2920      	cmp	r1, #32
 8008ed2:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 8008ed6:	bf0c      	ite	eq
 8008ed8:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 8008edc:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8008ee0:	605a      	str	r2, [r3, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	0719      	lsls	r1, r3, #28
 8008ee6:	f100 8127 	bmi.w	8009138 <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	069a      	lsls	r2, r3, #26
 8008eee:	f100 8148 	bmi.w	8009182 <HAL_RCC_OscConfig+0x30e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	075d      	lsls	r5, r3, #29
 8008ef6:	d51e      	bpl.n	8008f36 <HAL_RCC_OscConfig+0xc2>
    PWR->CR1 |= PWR_CR1_DBP;
 8008ef8:	4d85      	ldr	r5, [pc, #532]	; (8009110 <HAL_RCC_OscConfig+0x29c>)
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f00:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8008f02:	f7fd fecb 	bl	8006c9c <HAL_GetTick>
 8008f06:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	05da      	lsls	r2, r3, #23
 8008f0c:	f140 815e 	bpl.w	80091cc <HAL_RCC_OscConfig+0x358>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f10:	68a3      	ldr	r3, [r4, #8]
 8008f12:	4d7e      	ldr	r5, [pc, #504]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	f040 8160 	bne.w	80091da <HAL_RCC_OscConfig+0x366>
 8008f1a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f22:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008f26:	f7fd feb9 	bl	8006c9c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2a:	4e78      	ldr	r6, [pc, #480]	; (800910c <HAL_RCC_OscConfig+0x298>)
      tickstart = HAL_GetTick();
 8008f2c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f2e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8008f30:	079b      	lsls	r3, r3, #30
 8008f32:	f140 8178 	bpl.w	8009226 <HAL_RCC_OscConfig+0x3b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	f040 817b 	bne.w	8009234 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }
  return HAL_OK;
 8008f3e:	2000      	movs	r0, #0
 8008f40:	e029      	b.n	8008f96 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f42:	4b72      	ldr	r3, [pc, #456]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008f44:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f46:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f48:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f4c:	2a10      	cmp	r2, #16
 8008f4e:	d005      	beq.n	8008f5c <HAL_RCC_OscConfig+0xe8>
 8008f50:	2a18      	cmp	r2, #24
 8008f52:	d10a      	bne.n	8008f6a <HAL_RCC_OscConfig+0xf6>
 8008f54:	f001 0203 	and.w	r2, r1, #3
 8008f58:	2a02      	cmp	r2, #2
 8008f5a:	d106      	bne.n	8008f6a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	039d      	lsls	r5, r3, #14
 8008f60:	d590      	bpl.n	8008e84 <HAL_RCC_OscConfig+0x10>
 8008f62:	6863      	ldr	r3, [r4, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d18d      	bne.n	8008e84 <HAL_RCC_OscConfig+0x10>
 8008f68:	e787      	b.n	8008e7a <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f6a:	6862      	ldr	r2, [r4, #4]
 8008f6c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8008f70:	d112      	bne.n	8008f98 <HAL_RCC_OscConfig+0x124>
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008f78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008f7a:	f7fd fe8f 	bl	8006c9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f7e:	4e63      	ldr	r6, [pc, #396]	; (800910c <HAL_RCC_OscConfig+0x298>)
        tickstart = HAL_GetTick();
 8008f80:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f82:	6833      	ldr	r3, [r6, #0]
 8008f84:	0398      	lsls	r0, r3, #14
 8008f86:	f53f af7d 	bmi.w	8008e84 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f8a:	f7fd fe87 	bl	8006c9c <HAL_GetTick>
 8008f8e:	1b40      	subs	r0, r0, r5
 8008f90:	2864      	cmp	r0, #100	; 0x64
 8008f92:	d9f6      	bls.n	8008f82 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8008f94:	2003      	movs	r0, #3
}
 8008f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f98:	4d5c      	ldr	r5, [pc, #368]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008f9a:	682b      	ldr	r3, [r5, #0]
 8008f9c:	b99a      	cbnz	r2, 8008fc6 <HAL_RCC_OscConfig+0x152>
 8008f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fa2:	602b      	str	r3, [r5, #0]
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008faa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008fac:	f7fd fe76 	bl	8006c9c <HAL_GetTick>
 8008fb0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008fb2:	682b      	ldr	r3, [r5, #0]
 8008fb4:	0399      	lsls	r1, r3, #14
 8008fb6:	f57f af65 	bpl.w	8008e84 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fba:	f7fd fe6f 	bl	8006c9c <HAL_GetTick>
 8008fbe:	1b80      	subs	r0, r0, r6
 8008fc0:	2864      	cmp	r0, #100	; 0x64
 8008fc2:	d9f6      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x13e>
 8008fc4:	e7e6      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fc6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8008fca:	d107      	bne.n	8008fdc <HAL_RCC_OscConfig+0x168>
 8008fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	e7ce      	b.n	8008f7a <HAL_RCC_OscConfig+0x106>
 8008fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fe0:	602b      	str	r3, [r5, #0]
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fe8:	e7f6      	b.n	8008fd8 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fea:	4b48      	ldr	r3, [pc, #288]	; (800910c <HAL_RCC_OscConfig+0x298>)
 8008fec:	68e1      	ldr	r1, [r4, #12]
 8008fee:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ff0:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008ff2:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8008ff6:	d003      	beq.n	8009000 <HAL_RCC_OscConfig+0x18c>
 8008ff8:	2a18      	cmp	r2, #24
 8008ffa:	d12b      	bne.n	8009054 <HAL_RCC_OscConfig+0x1e0>
 8008ffc:	0782      	lsls	r2, r0, #30
 8008ffe:	d129      	bne.n	8009054 <HAL_RCC_OscConfig+0x1e0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	075b      	lsls	r3, r3, #29
 8009004:	d502      	bpl.n	800900c <HAL_RCC_OscConfig+0x198>
 8009006:	2900      	cmp	r1, #0
 8009008:	f43f af37 	beq.w	8008e7a <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800900c:	4d3f      	ldr	r5, [pc, #252]	; (800910c <HAL_RCC_OscConfig+0x298>)
 800900e:	682a      	ldr	r2, [r5, #0]
 8009010:	f022 0219 	bic.w	r2, r2, #25
 8009014:	430a      	orrs	r2, r1
 8009016:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8009018:	f7fd fe40 	bl	8006c9c <HAL_GetTick>
 800901c:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800901e:	682b      	ldr	r3, [r5, #0]
 8009020:	075f      	lsls	r7, r3, #29
 8009022:	d511      	bpl.n	8009048 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009024:	f7fd fe52 	bl	8006ccc <HAL_GetREVID>
 8009028:	f241 0303 	movw	r3, #4099	; 0x1003
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	4298      	cmp	r0, r3
 8009030:	686b      	ldr	r3, [r5, #4]
 8009032:	d822      	bhi.n	800907a <HAL_RCC_OscConfig+0x206>
 8009034:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009038:	2a40      	cmp	r2, #64	; 0x40
 800903a:	bf0c      	ite	eq
 800903c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8009040:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009044:	606b      	str	r3, [r5, #4]
 8009046:	e721      	b.n	8008e8c <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009048:	f7fd fe28 	bl	8006c9c <HAL_GetTick>
 800904c:	1b80      	subs	r0, r0, r6
 800904e:	2802      	cmp	r0, #2
 8009050:	d9e5      	bls.n	800901e <HAL_RCC_OscConfig+0x1aa>
 8009052:	e79f      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009054:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009056:	b1a9      	cbz	r1, 8009084 <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009058:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800905c:	4d2b      	ldr	r5, [pc, #172]	; (800910c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800905e:	430a      	orrs	r2, r1
 8009060:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8009062:	f7fd fe1b 	bl	8006c9c <HAL_GetTick>
 8009066:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	0758      	lsls	r0, r3, #29
 800906c:	d4da      	bmi.n	8009024 <HAL_RCC_OscConfig+0x1b0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800906e:	f7fd fe15 	bl	8006c9c <HAL_GetTick>
 8009072:	1b80      	subs	r0, r0, r6
 8009074:	2802      	cmp	r0, #2
 8009076:	d9f7      	bls.n	8009068 <HAL_RCC_OscConfig+0x1f4>
 8009078:	e78c      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800907a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800907e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009082:	e7df      	b.n	8009044 <HAL_RCC_OscConfig+0x1d0>
        __HAL_RCC_HSI_DISABLE();
 8009084:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009088:	4e20      	ldr	r6, [pc, #128]	; (800910c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_HSI_DISABLE();
 800908a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800908c:	f7fd fe06 	bl	8006c9c <HAL_GetTick>
 8009090:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009092:	6833      	ldr	r3, [r6, #0]
 8009094:	0759      	lsls	r1, r3, #29
 8009096:	f57f aef9 	bpl.w	8008e8c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800909a:	f7fd fdff 	bl	8006c9c <HAL_GetTick>
 800909e:	1b40      	subs	r0, r0, r5
 80090a0:	2802      	cmp	r0, #2
 80090a2:	d9f6      	bls.n	8009092 <HAL_RCC_OscConfig+0x21e>
 80090a4:	e776      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090a6:	68da      	ldr	r2, [r3, #12]
 80090a8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80090ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80090b0:	60da      	str	r2, [r3, #12]
 80090b2:	e716      	b.n	8008ee2 <HAL_RCC_OscConfig+0x6e>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80090b4:	69e2      	ldr	r2, [r4, #28]
 80090b6:	b36a      	cbz	r2, 8009114 <HAL_RCC_OscConfig+0x2a0>
        __HAL_RCC_CSI_ENABLE();
 80090b8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090ba:	4d14      	ldr	r5, [pc, #80]	; (800910c <HAL_RCC_OscConfig+0x298>)
        __HAL_RCC_CSI_ENABLE();
 80090bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80090c2:	f7fd fdeb 	bl	8006c9c <HAL_GetTick>
 80090c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	05df      	lsls	r7, r3, #23
 80090cc:	d511      	bpl.n	80090f2 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090ce:	f7fd fdfd 	bl	8006ccc <HAL_GetREVID>
 80090d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80090d6:	6a22      	ldr	r2, [r4, #32]
 80090d8:	4298      	cmp	r0, r3
 80090da:	d810      	bhi.n	80090fe <HAL_RCC_OscConfig+0x28a>
 80090dc:	686b      	ldr	r3, [r5, #4]
 80090de:	2a20      	cmp	r2, #32
 80090e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80090e4:	bf0c      	ite	eq
 80090e6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80090ea:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80090ee:	606b      	str	r3, [r5, #4]
 80090f0:	e6f7      	b.n	8008ee2 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090f2:	f7fd fdd3 	bl	8006c9c <HAL_GetTick>
 80090f6:	1b80      	subs	r0, r0, r6
 80090f8:	2802      	cmp	r0, #2
 80090fa:	d9e5      	bls.n	80090c8 <HAL_RCC_OscConfig+0x254>
 80090fc:	e74a      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090fe:	68eb      	ldr	r3, [r5, #12]
 8009100:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8009104:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009108:	60eb      	str	r3, [r5, #12]
 800910a:	e6ea      	b.n	8008ee2 <HAL_RCC_OscConfig+0x6e>
 800910c:	58024400 	.word	0x58024400
 8009110:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009114:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009116:	4e9f      	ldr	r6, [pc, #636]	; (8009394 <HAL_RCC_OscConfig+0x520>)
        __HAL_RCC_CSI_DISABLE();
 8009118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800911c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800911e:	f7fd fdbd 	bl	8006c9c <HAL_GetTick>
 8009122:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009124:	6833      	ldr	r3, [r6, #0]
 8009126:	05d8      	lsls	r0, r3, #23
 8009128:	f57f aedb 	bpl.w	8008ee2 <HAL_RCC_OscConfig+0x6e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800912c:	f7fd fdb6 	bl	8006c9c <HAL_GetTick>
 8009130:	1b40      	subs	r0, r0, r5
 8009132:	2802      	cmp	r0, #2
 8009134:	d9f6      	bls.n	8009124 <HAL_RCC_OscConfig+0x2b0>
 8009136:	e72d      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009138:	6963      	ldr	r3, [r4, #20]
 800913a:	4d96      	ldr	r5, [pc, #600]	; (8009394 <HAL_RCC_OscConfig+0x520>)
 800913c:	b183      	cbz	r3, 8009160 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_ENABLE();
 800913e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009140:	f043 0301 	orr.w	r3, r3, #1
 8009144:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009146:	f7fd fda9 	bl	8006c9c <HAL_GetTick>
 800914a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800914c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800914e:	079b      	lsls	r3, r3, #30
 8009150:	f53f aecb 	bmi.w	8008eea <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009154:	f7fd fda2 	bl	8006c9c <HAL_GetTick>
 8009158:	1b80      	subs	r0, r0, r6
 800915a:	2802      	cmp	r0, #2
 800915c:	d9f6      	bls.n	800914c <HAL_RCC_OscConfig+0x2d8>
 800915e:	e719      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8009160:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009162:	f023 0301 	bic.w	r3, r3, #1
 8009166:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8009168:	f7fd fd98 	bl	8006c9c <HAL_GetTick>
 800916c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800916e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8009170:	079f      	lsls	r7, r3, #30
 8009172:	f57f aeba 	bpl.w	8008eea <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009176:	f7fd fd91 	bl	8006c9c <HAL_GetTick>
 800917a:	1b80      	subs	r0, r0, r6
 800917c:	2802      	cmp	r0, #2
 800917e:	d9f6      	bls.n	800916e <HAL_RCC_OscConfig+0x2fa>
 8009180:	e708      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009182:	69a3      	ldr	r3, [r4, #24]
 8009184:	4d83      	ldr	r5, [pc, #524]	; (8009394 <HAL_RCC_OscConfig+0x520>)
 8009186:	b183      	cbz	r3, 80091aa <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI48_ENABLE();
 8009188:	682b      	ldr	r3, [r5, #0]
 800918a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800918e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009190:	f7fd fd84 	bl	8006c9c <HAL_GetTick>
 8009194:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	0498      	lsls	r0, r3, #18
 800919a:	f53f aeaa 	bmi.w	8008ef2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800919e:	f7fd fd7d 	bl	8006c9c <HAL_GetTick>
 80091a2:	1b80      	subs	r0, r0, r6
 80091a4:	2802      	cmp	r0, #2
 80091a6:	d9f6      	bls.n	8009196 <HAL_RCC_OscConfig+0x322>
 80091a8:	e6f4      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80091b2:	f7fd fd73 	bl	8006c9c <HAL_GetTick>
 80091b6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	0499      	lsls	r1, r3, #18
 80091bc:	f57f ae99 	bpl.w	8008ef2 <HAL_RCC_OscConfig+0x7e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091c0:	f7fd fd6c 	bl	8006c9c <HAL_GetTick>
 80091c4:	1b80      	subs	r0, r0, r6
 80091c6:	2802      	cmp	r0, #2
 80091c8:	d9f6      	bls.n	80091b8 <HAL_RCC_OscConfig+0x344>
 80091ca:	e6e3      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091cc:	f7fd fd66 	bl	8006c9c <HAL_GetTick>
 80091d0:	1b80      	subs	r0, r0, r6
 80091d2:	2864      	cmp	r0, #100	; 0x64
 80091d4:	f67f ae98 	bls.w	8008f08 <HAL_RCC_OscConfig+0x94>
 80091d8:	e6dc      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091da:	b9b3      	cbnz	r3, 800920a <HAL_RCC_OscConfig+0x396>
 80091dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091de:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	672b      	str	r3, [r5, #112]	; 0x70
 80091e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80091ea:	f023 0304 	bic.w	r3, r3, #4
 80091ee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80091f0:	f7fd fd54 	bl	8006c9c <HAL_GetTick>
 80091f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80091f8:	0798      	lsls	r0, r3, #30
 80091fa:	f57f ae9c 	bpl.w	8008f36 <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091fe:	f7fd fd4d 	bl	8006c9c <HAL_GetTick>
 8009202:	1b80      	subs	r0, r0, r6
 8009204:	42b8      	cmp	r0, r7
 8009206:	d9f6      	bls.n	80091f6 <HAL_RCC_OscConfig+0x382>
 8009208:	e6c4      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800920a:	2b05      	cmp	r3, #5
 800920c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800920e:	d103      	bne.n	8009218 <HAL_RCC_OscConfig+0x3a4>
 8009210:	f043 0304 	orr.w	r3, r3, #4
 8009214:	672b      	str	r3, [r5, #112]	; 0x70
 8009216:	e680      	b.n	8008f1a <HAL_RCC_OscConfig+0xa6>
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	672b      	str	r3, [r5, #112]	; 0x70
 800921e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009220:	f023 0304 	bic.w	r3, r3, #4
 8009224:	e67c      	b.n	8008f20 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009226:	f7fd fd39 	bl	8006c9c <HAL_GetTick>
 800922a:	1b40      	subs	r0, r0, r5
 800922c:	42b8      	cmp	r0, r7
 800922e:	f67f ae7e 	bls.w	8008f2e <HAL_RCC_OscConfig+0xba>
 8009232:	e6af      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009234:	4d57      	ldr	r5, [pc, #348]	; (8009394 <HAL_RCC_OscConfig+0x520>)
 8009236:	692b      	ldr	r3, [r5, #16]
 8009238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800923c:	2b18      	cmp	r3, #24
 800923e:	d07a      	beq.n	8009336 <HAL_RCC_OscConfig+0x4c2>
        __HAL_RCC_PLL_DISABLE();
 8009240:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009242:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8009244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009248:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800924a:	d167      	bne.n	800931c <HAL_RCC_OscConfig+0x4a8>
        tickstart = HAL_GetTick();
 800924c:	f7fd fd26 	bl	8006c9c <HAL_GetTick>
 8009250:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	0199      	lsls	r1, r3, #6
 8009256:	d45b      	bmi.n	8009310 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009258:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800925a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800925c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8009260:	f023 0303 	bic.w	r3, r3, #3
 8009264:	4313      	orrs	r3, r2
 8009266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009268:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800926c:	62ab      	str	r3, [r5, #40]	; 0x28
 800926e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009270:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009272:	3b01      	subs	r3, #1
 8009274:	3a01      	subs	r2, #1
 8009276:	025b      	lsls	r3, r3, #9
 8009278:	0412      	lsls	r2, r2, #16
 800927a:	b29b      	uxth	r3, r3
 800927c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009280:	4313      	orrs	r3, r2
 8009282:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009284:	3a01      	subs	r2, #1
 8009286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800928a:	4313      	orrs	r3, r2
 800928c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800928e:	3a01      	subs	r2, #1
 8009290:	0612      	lsls	r2, r2, #24
 8009292:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009296:	4313      	orrs	r3, r2
 8009298:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800929a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80092a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80092a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80092ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80092b2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092b4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80092b8:	f023 030c 	bic.w	r3, r3, #12
 80092bc:	4313      	orrs	r3, r2
 80092be:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092c2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80092c4:	f023 0302 	bic.w	r3, r3, #2
 80092c8:	4313      	orrs	r3, r2
 80092ca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092d4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092da:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80092e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80092f4:	f7fd fcd2 	bl	8006c9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092f8:	4d26      	ldr	r5, [pc, #152]	; (8009394 <HAL_RCC_OscConfig+0x520>)
        tickstart = HAL_GetTick();
 80092fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	019a      	lsls	r2, r3, #6
 8009300:	f53f ae1d 	bmi.w	8008f3e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009304:	f7fd fcca 	bl	8006c9c <HAL_GetTick>
 8009308:	1b00      	subs	r0, r0, r4
 800930a:	2802      	cmp	r0, #2
 800930c:	d9f6      	bls.n	80092fc <HAL_RCC_OscConfig+0x488>
 800930e:	e641      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009310:	f7fd fcc4 	bl	8006c9c <HAL_GetTick>
 8009314:	1b80      	subs	r0, r0, r6
 8009316:	2802      	cmp	r0, #2
 8009318:	d99b      	bls.n	8009252 <HAL_RCC_OscConfig+0x3de>
 800931a:	e63b      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800931c:	f7fd fcbe 	bl	8006c9c <HAL_GetTick>
 8009320:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	019b      	lsls	r3, r3, #6
 8009326:	f57f ae0a 	bpl.w	8008f3e <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800932a:	f7fd fcb7 	bl	8006c9c <HAL_GetTick>
 800932e:	1b00      	subs	r0, r0, r4
 8009330:	2802      	cmp	r0, #2
 8009332:	d9f6      	bls.n	8009322 <HAL_RCC_OscConfig+0x4ae>
 8009334:	e62e      	b.n	8008f94 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009336:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009338:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800933a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800933c:	f43f ae2b 	beq.w	8008f96 <HAL_RCC_OscConfig+0x122>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009340:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009344:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009346:	4281      	cmp	r1, r0
 8009348:	f47f ad97 	bne.w	8008e7a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800934c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009350:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009352:	428a      	cmp	r2, r1
 8009354:	f47f ad91 	bne.w	8008e7a <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009358:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800935a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800935e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009360:	4291      	cmp	r1, r2
 8009362:	f47f ad8a 	bne.w	8008e7a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009366:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009368:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800936c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800936e:	4291      	cmp	r1, r2
 8009370:	f47f ad83 	bne.w	8008e7a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009374:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009376:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800937a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800937c:	4291      	cmp	r1, r2
 800937e:	f47f ad7c 	bne.w	8008e7a <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009382:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009384:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009388:	3801      	subs	r0, #1
  return HAL_OK;
 800938a:	1a18      	subs	r0, r3, r0
 800938c:	bf18      	it	ne
 800938e:	2001      	movne	r0, #1
 8009390:	e601      	b.n	8008f96 <HAL_RCC_OscConfig+0x122>
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400

08009398 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	4c23      	ldr	r4, [pc, #140]	; (8009428 <HAL_RCC_MCOConfig+0x90>)
 800939c:	b088      	sub	sp, #32
 800939e:	460e      	mov	r6, r1
 80093a0:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80093a2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  if(RCC_MCOx == RCC_MCO1)
 80093a6:	b9f8      	cbnz	r0, 80093e8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80093a8:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ac:	f44f 7c80 	mov.w	ip, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80093b0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 80093b2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80093b6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80093ba:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093c4:	2302      	movs	r3, #2
 80093c6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093ca:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093cc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80093d0:	4816      	ldr	r0, [pc, #88]	; (800942c <HAL_RCC_MCOConfig+0x94>)
 80093d2:	f7fe faa7 	bl	8007924 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80093d6:	6923      	ldr	r3, [r4, #16]
 80093d8:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80093dc:	ea43 0106 	orr.w	r1, r3, r6
 80093e0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80093e2:	6121      	str	r1, [r4, #16]
  }
}
 80093e4:	b008      	add	sp, #32
 80093e6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 80093e8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093ec:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093f0:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80093f2:	480f      	ldr	r0, [pc, #60]	; (8009430 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80093f4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80093f8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80093fc:	f003 0304 	and.w	r3, r3, #4
 8009400:	9302      	str	r3, [sp, #8]
 8009402:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009404:	2302      	movs	r3, #2
 8009406:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940a:	2300      	movs	r3, #0
 800940c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009410:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009412:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009414:	f7fe fa86 	bl	8007924 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800941e:	ea43 0106 	orr.w	r1, r3, r6
 8009422:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 8009426:	e7dc      	b.n	80093e2 <HAL_RCC_MCOConfig+0x4a>
 8009428:	58024400 	.word	0x58024400
 800942c:	58020000 	.word	0x58020000
 8009430:	58020800 	.word	0x58020800

08009434 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009434:	4b48      	ldr	r3, [pc, #288]	; (8009558 <HAL_RCC_GetSysClockFreq+0x124>)
 8009436:	691a      	ldr	r2, [r3, #16]
 8009438:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800943c:	2a10      	cmp	r2, #16
{
 800943e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009440:	f000 8086 	beq.w	8009550 <HAL_RCC_GetSysClockFreq+0x11c>
 8009444:	2a18      	cmp	r2, #24
 8009446:	d00c      	beq.n	8009462 <HAL_RCC_GetSysClockFreq+0x2e>
 8009448:	2a00      	cmp	r2, #0
 800944a:	f040 8083 	bne.w	8009554 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	4842      	ldr	r0, [pc, #264]	; (800955c <HAL_RCC_GetSysClockFreq+0x128>)
 8009452:	f012 0f20 	tst.w	r2, #32
 8009456:	d003      	beq.n	8009460 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800945e:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8009460:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009462:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009464:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009466:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8009468:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800946c:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 8009472:	d0f5      	beq.n	8009460 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009474:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009478:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800947c:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009480:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009484:	4362      	muls	r2, r4
 8009486:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800948a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800948e:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009490:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009494:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8009498:	d04c      	beq.n	8009534 <HAL_RCC_GetSysClockFreq+0x100>
 800949a:	2902      	cmp	r1, #2
 800949c:	d03c      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0xe4>
 800949e:	2900      	cmp	r1, #0
 80094a0:	d148      	bne.n	8009534 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	0692      	lsls	r2, r2, #26
 80094a6:	d527      	bpl.n	80094f8 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	4a2c      	ldr	r2, [pc, #176]	; (800955c <HAL_RCC_GetSysClockFreq+0x128>)
 80094ac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094b2:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b8:	ee07 2a10 	vmov	s14, r2
 80094bc:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80094c0:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80094c4:	ee06 3a90 	vmov	s13, r3
 80094c8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80094cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094d0:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094d4:	4b20      	ldr	r3, [pc, #128]	; (8009558 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094d6:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80094da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80094e0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80094e2:	ee07 3a10 	vmov	s14, r3
 80094e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80094ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80094ee:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80094f2:	ee17 0a90 	vmov	r0, s15
 80094f6:	e7b3      	b.n	8009460 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80094f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094fe:	ee07 3a10 	vmov	s14, r3
 8009502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800950a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800950e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8009560 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009512:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8009516:	e7dd      	b.n	80094d4 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800951e:	ee07 3a10 	vmov	s14, r3
 8009522:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800952a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800952e:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8009564 <HAL_RCC_GetSysClockFreq+0x130>
 8009532:	e7ee      	b.n	8009512 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953a:	ee07 3a10 	vmov	s14, r3
 800953e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009546:	ee77 7a86 	vadd.f32	s15, s15, s12
 800954a:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8009568 <HAL_RCC_GetSysClockFreq+0x134>
 800954e:	e7e0      	b.n	8009512 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <HAL_RCC_GetSysClockFreq+0x138>)
 8009552:	e785      	b.n	8009460 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8009554:	4806      	ldr	r0, [pc, #24]	; (8009570 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009556:	e783      	b.n	8009460 <HAL_RCC_GetSysClockFreq+0x2c>
 8009558:	58024400 	.word	0x58024400
 800955c:	03d09000 	.word	0x03d09000
 8009560:	4c742400 	.word	0x4c742400
 8009564:	4bbebc20 	.word	0x4bbebc20
 8009568:	4a742400 	.word	0x4a742400
 800956c:	017d7840 	.word	0x017d7840
 8009570:	003d0900 	.word	0x003d0900

08009574 <HAL_RCC_ClockConfig>:
{
 8009574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009578:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800957a:	4604      	mov	r4, r0
 800957c:	b910      	cbnz	r0, 8009584 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800957e:	2001      	movs	r0, #1
}
 8009580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009584:	4a88      	ldr	r2, [pc, #544]	; (80097a8 <HAL_RCC_ClockConfig+0x234>)
 8009586:	6813      	ldr	r3, [r2, #0]
 8009588:	f003 030f 	and.w	r3, r3, #15
 800958c:	428b      	cmp	r3, r1
 800958e:	f0c0 8093 	bcc.w	80096b8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	075f      	lsls	r7, r3, #29
 8009596:	f100 809b 	bmi.w	80096d0 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800959a:	071e      	lsls	r6, r3, #28
 800959c:	d50b      	bpl.n	80095b6 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800959e:	4983      	ldr	r1, [pc, #524]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80095a0:	6966      	ldr	r6, [r4, #20]
 80095a2:	69c8      	ldr	r0, [r1, #28]
 80095a4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80095a8:	4286      	cmp	r6, r0
 80095aa:	d904      	bls.n	80095b6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095ac:	69ca      	ldr	r2, [r1, #28]
 80095ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80095b2:	4332      	orrs	r2, r6
 80095b4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b6:	06d8      	lsls	r0, r3, #27
 80095b8:	d50b      	bpl.n	80095d2 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095ba:	497c      	ldr	r1, [pc, #496]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80095bc:	69a6      	ldr	r6, [r4, #24]
 80095be:	69c8      	ldr	r0, [r1, #28]
 80095c0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80095c4:	4286      	cmp	r6, r0
 80095c6:	d904      	bls.n	80095d2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095c8:	69ca      	ldr	r2, [r1, #28]
 80095ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095ce:	4332      	orrs	r2, r6
 80095d0:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095d2:	0699      	lsls	r1, r3, #26
 80095d4:	d50b      	bpl.n	80095ee <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095d6:	4975      	ldr	r1, [pc, #468]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80095d8:	69e6      	ldr	r6, [r4, #28]
 80095da:	6a08      	ldr	r0, [r1, #32]
 80095dc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80095e0:	4286      	cmp	r6, r0
 80095e2:	d904      	bls.n	80095ee <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095e4:	6a0a      	ldr	r2, [r1, #32]
 80095e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80095ea:	4332      	orrs	r2, r6
 80095ec:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095ee:	079a      	lsls	r2, r3, #30
 80095f0:	d50b      	bpl.n	800960a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095f2:	496e      	ldr	r1, [pc, #440]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80095f4:	68e6      	ldr	r6, [r4, #12]
 80095f6:	6988      	ldr	r0, [r1, #24]
 80095f8:	f000 000f 	and.w	r0, r0, #15
 80095fc:	4286      	cmp	r6, r0
 80095fe:	d904      	bls.n	800960a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009600:	698a      	ldr	r2, [r1, #24]
 8009602:	f022 020f 	bic.w	r2, r2, #15
 8009606:	4332      	orrs	r2, r6
 8009608:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800960a:	07df      	lsls	r7, r3, #31
 800960c:	d46e      	bmi.n	80096ec <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	079e      	lsls	r6, r3, #30
 8009612:	f100 80a1 	bmi.w	8009758 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009616:	4964      	ldr	r1, [pc, #400]	; (80097a8 <HAL_RCC_ClockConfig+0x234>)
 8009618:	680a      	ldr	r2, [r1, #0]
 800961a:	f002 020f 	and.w	r2, r2, #15
 800961e:	42aa      	cmp	r2, r5
 8009620:	f200 80a8 	bhi.w	8009774 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009624:	0758      	lsls	r0, r3, #29
 8009626:	f100 80b1 	bmi.w	800978c <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800962a:	0719      	lsls	r1, r3, #28
 800962c:	d50b      	bpl.n	8009646 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800962e:	495f      	ldr	r1, [pc, #380]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 8009630:	6965      	ldr	r5, [r4, #20]
 8009632:	69c8      	ldr	r0, [r1, #28]
 8009634:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009638:	4285      	cmp	r5, r0
 800963a:	d204      	bcs.n	8009646 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800963c:	69ca      	ldr	r2, [r1, #28]
 800963e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009642:	432a      	orrs	r2, r5
 8009644:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009646:	06da      	lsls	r2, r3, #27
 8009648:	d50b      	bpl.n	8009662 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800964a:	4958      	ldr	r1, [pc, #352]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 800964c:	69a5      	ldr	r5, [r4, #24]
 800964e:	69c8      	ldr	r0, [r1, #28]
 8009650:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8009654:	4285      	cmp	r5, r0
 8009656:	d204      	bcs.n	8009662 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009658:	69ca      	ldr	r2, [r1, #28]
 800965a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800965e:	432a      	orrs	r2, r5
 8009660:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009662:	069b      	lsls	r3, r3, #26
 8009664:	d50b      	bpl.n	800967e <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009666:	4a51      	ldr	r2, [pc, #324]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 8009668:	69e0      	ldr	r0, [r4, #28]
 800966a:	6a11      	ldr	r1, [r2, #32]
 800966c:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8009670:	4288      	cmp	r0, r1
 8009672:	d204      	bcs.n	800967e <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009674:	6a13      	ldr	r3, [r2, #32]
 8009676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967a:	4303      	orrs	r3, r0
 800967c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800967e:	f7ff fed9 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 8009682:	494a      	ldr	r1, [pc, #296]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 8009684:	4a4a      	ldr	r2, [pc, #296]	; (80097b0 <HAL_RCC_ClockConfig+0x23c>)
 8009686:	698b      	ldr	r3, [r1, #24]
 8009688:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800968c:	5cd3      	ldrb	r3, [r2, r3]
 800968e:	f003 031f 	and.w	r3, r3, #31
 8009692:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009694:	698b      	ldr	r3, [r1, #24]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	5cd3      	ldrb	r3, [r2, r3]
 800969c:	4a45      	ldr	r2, [pc, #276]	; (80097b4 <HAL_RCC_ClockConfig+0x240>)
 800969e:	f003 031f 	and.w	r3, r3, #31
 80096a2:	fa20 f303 	lsr.w	r3, r0, r3
 80096a6:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80096a8:	4b43      	ldr	r3, [pc, #268]	; (80097b8 <HAL_RCC_ClockConfig+0x244>)
 80096aa:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80096ac:	4b43      	ldr	r3, [pc, #268]	; (80097bc <HAL_RCC_ClockConfig+0x248>)
}
 80096ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	f7f7 bf00 	b.w	80014b8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096b8:	6813      	ldr	r3, [r2, #0]
 80096ba:	f023 030f 	bic.w	r3, r3, #15
 80096be:	430b      	orrs	r3, r1
 80096c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096c2:	6813      	ldr	r3, [r2, #0]
 80096c4:	f003 030f 	and.w	r3, r3, #15
 80096c8:	428b      	cmp	r3, r1
 80096ca:	f47f af58 	bne.w	800957e <HAL_RCC_ClockConfig+0xa>
 80096ce:	e760      	b.n	8009592 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096d0:	4936      	ldr	r1, [pc, #216]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80096d2:	6926      	ldr	r6, [r4, #16]
 80096d4:	6988      	ldr	r0, [r1, #24]
 80096d6:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80096da:	4286      	cmp	r6, r0
 80096dc:	f67f af5d 	bls.w	800959a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096e0:	698a      	ldr	r2, [r1, #24]
 80096e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80096e6:	4332      	orrs	r2, r6
 80096e8:	618a      	str	r2, [r1, #24]
 80096ea:	e756      	b.n	800959a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096ec:	4b2f      	ldr	r3, [pc, #188]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 80096ee:	68a1      	ldr	r1, [r4, #8]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80096f6:	430a      	orrs	r2, r1
 80096f8:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096fa:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096fc:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096fe:	2a02      	cmp	r2, #2
 8009700:	d11d      	bne.n	800973e <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009702:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009706:	f43f af3a 	beq.w	800957e <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800970a:	4e28      	ldr	r6, [pc, #160]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800970c:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009710:	6933      	ldr	r3, [r6, #16]
 8009712:	f023 0307 	bic.w	r3, r3, #7
 8009716:	4313      	orrs	r3, r2
 8009718:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800971a:	f7fd fabf 	bl	8006c9c <HAL_GetTick>
 800971e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009720:	6933      	ldr	r3, [r6, #16]
 8009722:	6862      	ldr	r2, [r4, #4]
 8009724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009728:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800972c:	f43f af6f 	beq.w	800960e <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009730:	f7fd fab4 	bl	8006c9c <HAL_GetTick>
 8009734:	1bc0      	subs	r0, r0, r7
 8009736:	4540      	cmp	r0, r8
 8009738:	d9f2      	bls.n	8009720 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 800973a:	2003      	movs	r0, #3
 800973c:	e720      	b.n	8009580 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800973e:	2a03      	cmp	r2, #3
 8009740:	d102      	bne.n	8009748 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009742:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8009746:	e7de      	b.n	8009706 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009748:	2a01      	cmp	r2, #1
 800974a:	d102      	bne.n	8009752 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800974c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8009750:	e7d9      	b.n	8009706 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009752:	f013 0f04 	tst.w	r3, #4
 8009756:	e7d6      	b.n	8009706 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009758:	4914      	ldr	r1, [pc, #80]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 800975a:	68e6      	ldr	r6, [r4, #12]
 800975c:	6988      	ldr	r0, [r1, #24]
 800975e:	f000 000f 	and.w	r0, r0, #15
 8009762:	4286      	cmp	r6, r0
 8009764:	f4bf af57 	bcs.w	8009616 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009768:	698a      	ldr	r2, [r1, #24]
 800976a:	f022 020f 	bic.w	r2, r2, #15
 800976e:	4332      	orrs	r2, r6
 8009770:	618a      	str	r2, [r1, #24]
 8009772:	e750      	b.n	8009616 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009774:	680a      	ldr	r2, [r1, #0]
 8009776:	f022 020f 	bic.w	r2, r2, #15
 800977a:	432a      	orrs	r2, r5
 800977c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800977e:	680a      	ldr	r2, [r1, #0]
 8009780:	f002 020f 	and.w	r2, r2, #15
 8009784:	42aa      	cmp	r2, r5
 8009786:	f47f aefa 	bne.w	800957e <HAL_RCC_ClockConfig+0xa>
 800978a:	e74b      	b.n	8009624 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800978c:	4907      	ldr	r1, [pc, #28]	; (80097ac <HAL_RCC_ClockConfig+0x238>)
 800978e:	6925      	ldr	r5, [r4, #16]
 8009790:	6988      	ldr	r0, [r1, #24]
 8009792:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8009796:	4285      	cmp	r5, r0
 8009798:	f4bf af47 	bcs.w	800962a <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800979c:	698a      	ldr	r2, [r1, #24]
 800979e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80097a2:	432a      	orrs	r2, r5
 80097a4:	618a      	str	r2, [r1, #24]
 80097a6:	e740      	b.n	800962a <HAL_RCC_ClockConfig+0xb6>
 80097a8:	52002000 	.word	0x52002000
 80097ac:	58024400 	.word	0x58024400
 80097b0:	08023d24 	.word	0x08023d24
 80097b4:	24000050 	.word	0x24000050
 80097b8:	2400004c 	.word	0x2400004c
 80097bc:	24000058 	.word	0x24000058

080097c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097c0:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097c2:	4c0c      	ldr	r4, [pc, #48]	; (80097f4 <HAL_RCC_GetHCLKFreq+0x34>)
 80097c4:	f7ff fe36 	bl	8009434 <HAL_RCC_GetSysClockFreq>
 80097c8:	490b      	ldr	r1, [pc, #44]	; (80097f8 <HAL_RCC_GetHCLKFreq+0x38>)
 80097ca:	69a3      	ldr	r3, [r4, #24]
 80097cc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80097d0:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097d2:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097d4:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097d8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097dc:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80097e0:	5ccb      	ldrb	r3, [r1, r3]
 80097e2:	f003 031f 	and.w	r3, r3, #31
 80097e6:	fa22 f003 	lsr.w	r0, r2, r3
 80097ea:	4b04      	ldr	r3, [pc, #16]	; (80097fc <HAL_RCC_GetHCLKFreq+0x3c>)
 80097ec:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80097ee:	4b04      	ldr	r3, [pc, #16]	; (8009800 <HAL_RCC_GetHCLKFreq+0x40>)
 80097f0:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80097f2:	bd10      	pop	{r4, pc}
 80097f4:	58024400 	.word	0x58024400
 80097f8:	08023d24 	.word	0x08023d24
 80097fc:	24000050 	.word	0x24000050
 8009800:	2400004c 	.word	0x2400004c

08009804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009804:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009806:	f7ff ffdb 	bl	80097c0 <HAL_RCC_GetHCLKFreq>
 800980a:	4b05      	ldr	r3, [pc, #20]	; (8009820 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800980c:	4a05      	ldr	r2, [pc, #20]	; (8009824 <HAL_RCC_GetPCLK1Freq+0x20>)
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009814:	5cd3      	ldrb	r3, [r2, r3]
 8009816:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800981a:	40d8      	lsrs	r0, r3
 800981c:	bd08      	pop	{r3, pc}
 800981e:	bf00      	nop
 8009820:	58024400 	.word	0x58024400
 8009824:	08023d24 	.word	0x08023d24

08009828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009828:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800982a:	f7ff ffc9 	bl	80097c0 <HAL_RCC_GetHCLKFreq>
 800982e:	4b05      	ldr	r3, [pc, #20]	; (8009844 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009830:	4a05      	ldr	r2, [pc, #20]	; (8009848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009838:	5cd3      	ldrb	r3, [r2, r3]
 800983a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800983e:	40d8      	lsrs	r0, r3
 8009840:	bd08      	pop	{r3, pc}
 8009842:	bf00      	nop
 8009844:	58024400 	.word	0x58024400
 8009848:	08023d24 	.word	0x08023d24

0800984c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800984c:	233f      	movs	r3, #63	; 0x3f
 800984e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009850:	4b11      	ldr	r3, [pc, #68]	; (8009898 <HAL_RCC_GetClockConfig+0x4c>)
 8009852:	691a      	ldr	r2, [r3, #16]
 8009854:	f002 0207 	and.w	r2, r2, #7
 8009858:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8009860:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009862:	699a      	ldr	r2, [r3, #24]
 8009864:	f002 020f 	and.w	r2, r2, #15
 8009868:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800986a:	699a      	ldr	r2, [r3, #24]
 800986c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009870:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8009878:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800987a:	69da      	ldr	r2, [r3, #28]
 800987c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009880:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009882:	6a1b      	ldr	r3, [r3, #32]
 8009884:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009888:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800988a:	4b04      	ldr	r3, [pc, #16]	; (800989c <HAL_RCC_GetClockConfig+0x50>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	600b      	str	r3, [r1, #0]
}
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
 800989c:	52002000 	.word	0x52002000

080098a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098a2:	4c3a      	ldr	r4, [pc, #232]	; (800998c <RCCEx_PLL2_Config+0xec>)
{
 80098a4:	4606      	mov	r6, r0
 80098a6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80098a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d069      	beq.n	8009986 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80098b8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ba:	f7fd f9ef 	bl	8006c9c <HAL_GetTick>
 80098be:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80098c0:	6823      	ldr	r3, [r4, #0]
 80098c2:	011a      	lsls	r2, r3, #4
 80098c4:	d44b      	bmi.n	800995e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80098c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80098c8:	6832      	ldr	r2, [r6, #0]
 80098ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098ce:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80098d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d4:	68b3      	ldr	r3, [r6, #8]
 80098d6:	68f2      	ldr	r2, [r6, #12]
 80098d8:	3b01      	subs	r3, #1
 80098da:	3a01      	subs	r2, #1
 80098dc:	025b      	lsls	r3, r3, #9
 80098de:	0412      	lsls	r2, r2, #16
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80098e6:	4313      	orrs	r3, r2
 80098e8:	6872      	ldr	r2, [r6, #4]
 80098ea:	3a01      	subs	r2, #1
 80098ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098f0:	4313      	orrs	r3, r2
 80098f2:	6932      	ldr	r2, [r6, #16]
 80098f4:	3a01      	subs	r2, #1
 80098f6:	0612      	lsls	r2, r2, #24
 80098f8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80098fc:	4313      	orrs	r3, r2
 80098fe:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009900:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009902:	6972      	ldr	r2, [r6, #20]
 8009904:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009908:	4313      	orrs	r3, r2
 800990a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800990c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800990e:	69b2      	ldr	r2, [r6, #24]
 8009910:	f023 0320 	bic.w	r3, r3, #32
 8009914:	4313      	orrs	r3, r2
 8009916:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009918:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800991a:	f023 0310 	bic.w	r3, r3, #16
 800991e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009922:	69f2      	ldr	r2, [r6, #28]
 8009924:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009928:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800992c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009930:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009934:	f043 0310 	orr.w	r3, r3, #16
 8009938:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800993a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800993c:	b9b5      	cbnz	r5, 800996c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800993e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009942:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009944:	4c11      	ldr	r4, [pc, #68]	; (800998c <RCCEx_PLL2_Config+0xec>)
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800994c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994e:	f7fd f9a5 	bl	8006c9c <HAL_GetTick>
 8009952:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	011b      	lsls	r3, r3, #4
 8009958:	d50f      	bpl.n	800997a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800995a:	2000      	movs	r0, #0
 800995c:	e005      	b.n	800996a <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800995e:	f7fd f99d 	bl	8006c9c <HAL_GetTick>
 8009962:	1bc0      	subs	r0, r0, r7
 8009964:	2802      	cmp	r0, #2
 8009966:	d9ab      	bls.n	80098c0 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009968:	2003      	movs	r0, #3
}
 800996a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800996c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800996e:	bf0c      	ite	eq
 8009970:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009974:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8009978:	e7e3      	b.n	8009942 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800997a:	f7fd f98f 	bl	8006c9c <HAL_GetTick>
 800997e:	1b40      	subs	r0, r0, r5
 8009980:	2802      	cmp	r0, #2
 8009982:	d9e7      	bls.n	8009954 <RCCEx_PLL2_Config+0xb4>
 8009984:	e7f0      	b.n	8009968 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009986:	2001      	movs	r0, #1
 8009988:	e7ef      	b.n	800996a <RCCEx_PLL2_Config+0xca>
 800998a:	bf00      	nop
 800998c:	58024400 	.word	0x58024400

08009990 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009992:	4c3a      	ldr	r4, [pc, #232]	; (8009a7c <RCCEx_PLL3_Config+0xec>)
{
 8009994:	4606      	mov	r6, r0
 8009996:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800999a:	f003 0303 	and.w	r3, r3, #3
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d069      	beq.n	8009a76 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80099a2:	6823      	ldr	r3, [r4, #0]
 80099a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099aa:	f7fd f977 	bl	8006c9c <HAL_GetTick>
 80099ae:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	009a      	lsls	r2, r3, #2
 80099b4:	d44b      	bmi.n	8009a4e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80099b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80099b8:	6832      	ldr	r2, [r6, #0]
 80099ba:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80099be:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80099c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c4:	68b3      	ldr	r3, [r6, #8]
 80099c6:	68f2      	ldr	r2, [r6, #12]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	3a01      	subs	r2, #1
 80099cc:	025b      	lsls	r3, r3, #9
 80099ce:	0412      	lsls	r2, r2, #16
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80099d6:	4313      	orrs	r3, r2
 80099d8:	6872      	ldr	r2, [r6, #4]
 80099da:	3a01      	subs	r2, #1
 80099dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099e0:	4313      	orrs	r3, r2
 80099e2:	6932      	ldr	r2, [r6, #16]
 80099e4:	3a01      	subs	r2, #1
 80099e6:	0612      	lsls	r2, r2, #24
 80099e8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80099ec:	4313      	orrs	r3, r2
 80099ee:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099f2:	6972      	ldr	r2, [r6, #20]
 80099f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80099f8:	4313      	orrs	r3, r2
 80099fa:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80099fe:	69b2      	ldr	r2, [r6, #24]
 8009a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a04:	4313      	orrs	r3, r2
 8009a06:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a0e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009a12:	69f2      	ldr	r2, [r6, #28]
 8009a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009a1c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009a20:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a28:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8009a2c:	b9b5      	cbnz	r5, 8009a5c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a32:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a34:	4c11      	ldr	r4, [pc, #68]	; (8009a7c <RCCEx_PLL3_Config+0xec>)
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a3e:	f7fd f92d 	bl	8006c9c <HAL_GetTick>
 8009a42:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	d50f      	bpl.n	8009a6a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e005      	b.n	8009a5a <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a4e:	f7fd f925 	bl	8006c9c <HAL_GetTick>
 8009a52:	1bc0      	subs	r0, r0, r7
 8009a54:	2802      	cmp	r0, #2
 8009a56:	d9ab      	bls.n	80099b0 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009a58:	2003      	movs	r0, #3
}
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8009a5c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a5e:	bf0c      	ite	eq
 8009a60:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a64:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8009a68:	e7e3      	b.n	8009a32 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009a6a:	f7fd f917 	bl	8006c9c <HAL_GetTick>
 8009a6e:	1b40      	subs	r0, r0, r5
 8009a70:	2802      	cmp	r0, #2
 8009a72:	d9e7      	bls.n	8009a44 <RCCEx_PLL3_Config+0xb4>
 8009a74:	e7f0      	b.n	8009a58 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009a76:	2001      	movs	r0, #1
 8009a78:	e7ef      	b.n	8009a5a <RCCEx_PLL3_Config+0xca>
 8009a7a:	bf00      	nop
 8009a7c:	58024400 	.word	0x58024400

08009a80 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a84:	6806      	ldr	r6, [r0, #0]
{
 8009a86:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009a88:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8009a8c:	d009      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009a8e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8009a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a94:	d02e      	beq.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009a96:	d813      	bhi.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009a98:	b1f3      	cbz	r3, 8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8009a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a9e:	d021      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009aa0:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009aa2:	682b      	ldr	r3, [r5, #0]
 8009aa4:	05db      	lsls	r3, r3, #23
 8009aa6:	f140 8102 	bpl.w	8009cae <HAL_RCCEx_PeriphCLKConfig+0x22e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009aaa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	f200 80fd 	bhi.w	8009cac <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8009ab2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009ab6:	0024      	.short	0x0024
 8009ab8:	00f5002b 	.word	0x00f5002b
 8009abc:	00290029 	.word	0x00290029
    switch(PeriphClkInit->SpdifrxClockSelection)
 8009ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ac4:	d1ec      	bne.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ac6:	4aa8      	ldr	r2, [pc, #672]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009ac8:	2600      	movs	r6, #0
 8009aca:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8009acc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009ace:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6513      	str	r3, [r2, #80]	; 0x50
 8009ad6:	e7e4      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad8:	4aa3      	ldr	r2, [pc, #652]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009ada:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ae2:	e7f0      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	3004      	adds	r0, #4
 8009ae8:	f7ff feda 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009aec:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1d7      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8009af2:	e7e8      	b.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009af4:	2102      	movs	r1, #2
 8009af6:	3024      	adds	r0, #36	; 0x24
 8009af8:	f7ff ff4a 	bl	8009990 <RCCEx_PLL3_Config>
 8009afc:	e7f6      	b.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009afe:	4a9a      	ldr	r2, [pc, #616]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009b00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009b02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b06:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8009b08:	4634      	mov	r4, r6
 8009b0a:	e004      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	1d28      	adds	r0, r5, #4
 8009b10:	f7ff fec6 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b14:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009b16:	2c00      	cmp	r4, #0
 8009b18:	f040 80cb 	bne.w	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x232>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b1c:	4a92      	ldr	r2, [pc, #584]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009b1e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8009b20:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009b22:	f023 0307 	bic.w	r3, r3, #7
 8009b26:	430b      	orrs	r3, r1
 8009b28:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009b2a:	682b      	ldr	r3, [r5, #0]
 8009b2c:	059f      	lsls	r7, r3, #22
 8009b2e:	d50d      	bpl.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009b30:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	f000 80da 	beq.w	8009cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009b38:	f200 80bd 	bhi.w	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 80c9 	beq.w	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009b42:	2b40      	cmp	r3, #64	; 0x40
 8009b44:	f000 80cc 	beq.w	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>
 8009b48:	2601      	movs	r6, #1
 8009b4a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	0558      	lsls	r0, r3, #21
 8009b50:	d510      	bpl.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009b52:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8009b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b5a:	f000 80ec 	beq.w	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8009b5e:	f200 80cd 	bhi.w	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 80db 	beq.w	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8009b68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b6c:	f000 80dd 	beq.w	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8009b70:	2601      	movs	r6, #1
 8009b72:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b74:	682b      	ldr	r3, [r5, #0]
 8009b76:	0519      	lsls	r1, r3, #20
 8009b78:	d510      	bpl.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b7a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8009b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b82:	f000 80ff 	beq.w	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8009b86:	f200 80de 	bhi.w	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80ee 	beq.w	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8009b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b94:	f000 80f0 	beq.w	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8009b98:	2601      	movs	r6, #1
 8009b9a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009b9c:	682b      	ldr	r3, [r5, #0]
 8009b9e:	019a      	lsls	r2, r3, #6
 8009ba0:	d50d      	bpl.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->QspiClockSelection)
 8009ba2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8009ba4:	2b20      	cmp	r3, #32
 8009ba6:	f000 8107 	beq.w	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8009baa:	f200 80f3 	bhi.w	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80f3 	beq.w	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8009bb4:	2b10      	cmp	r3, #16
 8009bb6:	f000 80f9 	beq.w	8009dac <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8009bba:	2601      	movs	r6, #1
 8009bbc:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009bbe:	682b      	ldr	r3, [r5, #0]
 8009bc0:	04db      	lsls	r3, r3, #19
 8009bc2:	d50f      	bpl.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009bc4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bca:	f000 8119 	beq.w	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x380>
 8009bce:	f200 80fb 	bhi.w	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 8108 	beq.w	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bdc:	f000 810a 	beq.w	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009be0:	2601      	movs	r6, #1
 8009be2:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	049f      	lsls	r7, r3, #18
 8009be8:	d50f      	bpl.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bf0:	f000 8126 	beq.w	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8009bf4:	f200 810c 	bhi.w	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 8112 	beq.w	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8009bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c02:	f000 8117 	beq.w	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 8009c06:	2601      	movs	r6, #1
 8009c08:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	0458      	lsls	r0, r3, #17
 8009c0e:	d510      	bpl.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009c10:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8009c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c18:	f000 8133 	beq.w	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x402>
 8009c1c:	f200 8118 	bhi.w	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 811e 	beq.w	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8009c26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c2a:	f000 8124 	beq.w	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8009c2e:	2601      	movs	r6, #1
 8009c30:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009c32:	682b      	ldr	r3, [r5, #0]
 8009c34:	0159      	lsls	r1, r3, #5
 8009c36:	d514      	bpl.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    switch(PeriphClkInit->DsiClockSelection)
 8009c38:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8009c3a:	b143      	cbz	r3, 8009c4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8009c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c40:	f040 8127 	bne.w	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x412>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c44:	2101      	movs	r1, #1
 8009c46:	1d28      	adds	r0, r5, #4
 8009c48:	f7ff fe2a 	bl	80098a0 <RCCEx_PLL2_Config>
 8009c4c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8009c4e:	2c00      	cmp	r4, #0
 8009c50:	f040 8122 	bne.w	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x418>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009c54:	4a44      	ldr	r2, [pc, #272]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009c56:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8009c58:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c62:	682b      	ldr	r3, [r5, #0]
 8009c64:	041a      	lsls	r2, r3, #16
 8009c66:	d50d      	bpl.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x204>
    switch(PeriphClkInit->FdcanClockSelection)
 8009c68:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8009c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c6e:	f000 8115 	beq.w	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8009c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c76:	f000 811f 	beq.w	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 8113 	beq.w	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009c80:	2601      	movs	r6, #1
 8009c82:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	01db      	lsls	r3, r3, #7
 8009c88:	f140 812c 	bpl.w	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x464>
    switch(PeriphClkInit->FmcClockSelection)
 8009c8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8009c8e:	2b03      	cmp	r3, #3
 8009c90:	f200 816c 	bhi.w	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8009c94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009c98:	0118011d 	.word	0x0118011d
 8009c9c:	011d0164 	.word	0x011d0164
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009ca6:	f7ff fe73 	bl	8009990 <RCCEx_PLL3_Config>
 8009caa:	e733      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8009cac:	2601      	movs	r6, #1
 8009cae:	4634      	mov	r4, r6
 8009cb0:	e73b      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8009cb2:	4626      	mov	r6, r4
 8009cb4:	e739      	b.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai23ClockSelection)
 8009cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cbe:	f47f af43 	bne.w	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    if(ret == HAL_OK)
 8009cc2:	b9cc      	cbnz	r4, 8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009cc4:	4a28      	ldr	r2, [pc, #160]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009cc6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8009cc8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009cca:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8009cce:	430b      	orrs	r3, r1
 8009cd0:	6513      	str	r3, [r2, #80]	; 0x50
 8009cd2:	e73b      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd4:	4a24      	ldr	r2, [pc, #144]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009cd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cdc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009cde:	e7f0      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	1d28      	adds	r0, r5, #4
 8009ce4:	f7ff fddc 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009ce8:	4604      	mov	r4, r0
      break;
 8009cea:	e7ea      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cec:	2100      	movs	r1, #0
 8009cee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009cf2:	f7ff fe4d 	bl	8009990 <RCCEx_PLL3_Config>
 8009cf6:	e7f7      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8009cf8:	4626      	mov	r6, r4
 8009cfa:	e727      	b.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    switch(PeriphClkInit->Sai4AClockSelection)
 8009cfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d00:	d003      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8009d02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d06:	f47f af33 	bne.w	8009b70 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    if(ret == HAL_OK)
 8009d0a:	b9d4      	cbnz	r4, 8009d42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009d0c:	4a16      	ldr	r2, [pc, #88]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009d0e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8009d12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d14:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8009d18:	430b      	orrs	r3, r1
 8009d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8009d1c:	e72a      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d1e:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009d20:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d26:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009d28:	e7ef      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	1d28      	adds	r0, r5, #4
 8009d2e:	f7ff fdb7 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d32:	4604      	mov	r4, r0
      break;
 8009d34:	e7e9      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x28a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d36:	2100      	movs	r1, #0
 8009d38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009d3c:	f7ff fe28 	bl	8009990 <RCCEx_PLL3_Config>
 8009d40:	e7f7      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8009d42:	4626      	mov	r6, r4
 8009d44:	e716      	b.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d4a:	d003      	beq.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d50:	f47f af22 	bne.w	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if(ret == HAL_OK)
 8009d54:	b9e4      	cbnz	r4, 8009d90 <HAL_RCCEx_PeriphCLKConfig+0x310>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d56:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8009d58:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8009d5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009d5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009d62:	430b      	orrs	r3, r1
 8009d64:	6593      	str	r3, [r2, #88]	; 0x58
 8009d66:	e719      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8009d68:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d6c:	4a9d      	ldr	r2, [pc, #628]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009d6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d74:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009d76:	e7ed      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d78:	2100      	movs	r1, #0
 8009d7a:	1d28      	adds	r0, r5, #4
 8009d7c:	f7ff fd90 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d80:	4604      	mov	r4, r0
      break;
 8009d82:	e7e7      	b.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d84:	2100      	movs	r1, #0
 8009d86:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009d8a:	f7ff fe01 	bl	8009990 <RCCEx_PLL3_Config>
 8009d8e:	e7f7      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009d90:	4626      	mov	r6, r4
 8009d92:	e703      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    switch(PeriphClkInit->QspiClockSelection)
 8009d94:	2b30      	cmp	r3, #48	; 0x30
 8009d96:	f47f af10 	bne.w	8009bba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8009d9a:	b99c      	cbnz	r4, 8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d9c:	4a91      	ldr	r2, [pc, #580]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009d9e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8009da0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009da2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009da6:	430b      	orrs	r3, r1
 8009da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009daa:	e708      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dac:	4a8d      	ldr	r2, [pc, #564]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009dae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009db4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009db6:	e7f0      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009db8:	2102      	movs	r1, #2
 8009dba:	1d28      	adds	r0, r5, #4
 8009dbc:	f7ff fd70 	bl	80098a0 <RCCEx_PLL2_Config>
 8009dc0:	4604      	mov	r4, r0
      break;
 8009dc2:	e7ea      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8009dc4:	4626      	mov	r6, r4
 8009dc6:	e6fa      	b.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8009dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dcc:	d003      	beq.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8009dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dd2:	f47f af05 	bne.w	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8009dd6:	b9cc      	cbnz	r4, 8009e0c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009dd8:	4a82      	ldr	r2, [pc, #520]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009dda:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8009ddc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de2:	430b      	orrs	r3, r1
 8009de4:	6513      	str	r3, [r2, #80]	; 0x50
 8009de6:	e6fd      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009de8:	4a7e      	ldr	r2, [pc, #504]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009dea:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8009df2:	e7f0      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009df4:	2100      	movs	r1, #0
 8009df6:	1d28      	adds	r0, r5, #4
 8009df8:	f7ff fd52 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009dfc:	4604      	mov	r4, r0
      break;
 8009dfe:	e7ea      	b.n	8009dd6 <HAL_RCCEx_PeriphCLKConfig+0x356>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e00:	2100      	movs	r1, #0
 8009e02:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009e06:	f7ff fdc3 	bl	8009990 <RCCEx_PLL3_Config>
 8009e0a:	e7f7      	b.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8009e0c:	4626      	mov	r6, r4
 8009e0e:	e6e9      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8009e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e14:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8009e18:	d003      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8009e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009e1e:	f47f aef2 	bne.w	8009c06 <HAL_RCCEx_PeriphCLKConfig+0x186>
    if(ret == HAL_OK)
 8009e22:	b99c      	cbnz	r4, 8009e4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009e24:	4a6f      	ldr	r2, [pc, #444]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009e26:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8009e28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009e2a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009e2e:	430b      	orrs	r3, r1
 8009e30:	6513      	str	r3, [r2, #80]	; 0x50
 8009e32:	e6ea      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e34:	2101      	movs	r1, #1
 8009e36:	1d28      	adds	r0, r5, #4
 8009e38:	f7ff fd32 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e3c:	4604      	mov	r4, r0
      break;
 8009e3e:	e7f0      	b.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e40:	2101      	movs	r1, #1
 8009e42:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009e46:	f7ff fda3 	bl	8009990 <RCCEx_PLL3_Config>
 8009e4a:	e7f7      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009e4c:	4626      	mov	r6, r4
 8009e4e:	e6dc      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
    switch(PeriphClkInit->Spi6ClockSelection)
 8009e50:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009e58:	d003      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8009e5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e5e:	f47f aee6 	bne.w	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    if(ret == HAL_OK)
 8009e62:	b9a4      	cbnz	r4, 8009e8e <HAL_RCCEx_PeriphCLKConfig+0x40e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e64:	4a5f      	ldr	r2, [pc, #380]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009e66:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8009e6a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009e6c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6593      	str	r3, [r2, #88]	; 0x58
 8009e74:	e6dd      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e76:	2101      	movs	r1, #1
 8009e78:	1d28      	adds	r0, r5, #4
 8009e7a:	f7ff fd11 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e7e:	4604      	mov	r4, r0
      break;
 8009e80:	e7ef      	b.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e82:	2101      	movs	r1, #1
 8009e84:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009e88:	f7ff fd82 	bl	8009990 <RCCEx_PLL3_Config>
 8009e8c:	e7f7      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009e8e:	4626      	mov	r6, r4
 8009e90:	e6cf      	b.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    switch(PeriphClkInit->DsiClockSelection)
 8009e92:	2601      	movs	r6, #1
 8009e94:	4634      	mov	r4, r6
 8009e96:	e6e4      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009e98:	4626      	mov	r6, r4
 8009e9a:	e6e2      	b.n	8009c62 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e9c:	4a51      	ldr	r2, [pc, #324]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009e9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ea6:	b96c      	cbnz	r4, 8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x444>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ea8:	4a4e      	ldr	r2, [pc, #312]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009eaa:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8009eac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009eae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8009eb2:	430b      	orrs	r3, r1
 8009eb4:	6513      	str	r3, [r2, #80]	; 0x50
 8009eb6:	e6e5      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x204>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eb8:	2101      	movs	r1, #1
 8009eba:	1d28      	adds	r0, r5, #4
 8009ebc:	f7ff fcf0 	bl	80098a0 <RCCEx_PLL2_Config>
 8009ec0:	4604      	mov	r4, r0
      break;
 8009ec2:	e7f0      	b.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8009ec4:	4626      	mov	r6, r4
 8009ec6:	e6dd      	b.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec8:	4a46      	ldr	r2, [pc, #280]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8009ed2:	2c00      	cmp	r4, #0
 8009ed4:	d14d      	bne.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ed6:	4a43      	ldr	r2, [pc, #268]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009ed8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009eda:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8009edc:	f023 0303 	bic.w	r3, r3, #3
 8009ee0:	430b      	orrs	r3, r1
 8009ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	025f      	lsls	r7, r3, #9
 8009ee8:	d54d      	bpl.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x506>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009eea:	4f3f      	ldr	r7, [pc, #252]	; (8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ef2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8009ef4:	f7fc fed2 	bl	8006c9c <HAL_GetTick>
 8009ef8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	05d8      	lsls	r0, r3, #23
 8009efe:	d53a      	bpl.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    if(ret == HAL_OK)
 8009f00:	2c00      	cmp	r4, #0
 8009f02:	d16d      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x560>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f04:	4b37      	ldr	r3, [pc, #220]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009f06:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8009f0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f0c:	4042      	eors	r2, r0
 8009f0e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8009f12:	d00b      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f16:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f1c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8009f20:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f22:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009f24:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8009f28:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8009f2a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f2c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009f30:	d041      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x536>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f32:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
 8009f36:	492b      	ldr	r1, [pc, #172]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009f38:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009f3c:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8009f40:	d14a      	bne.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x558>
 8009f42:	6908      	ldr	r0, [r1, #16]
 8009f44:	4a29      	ldr	r2, [pc, #164]	; (8009fec <HAL_RCCEx_PeriphCLKConfig+0x56c>)
 8009f46:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8009f4a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8009f4e:	4302      	orrs	r2, r0
 8009f50:	610a      	str	r2, [r1, #16]
 8009f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f56:	4a23      	ldr	r2, [pc, #140]	; (8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009f58:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009f5a:	430b      	orrs	r3, r1
 8009f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f5e:	e012      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x506>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f60:	2102      	movs	r1, #2
 8009f62:	1d28      	adds	r0, r5, #4
 8009f64:	f7ff fc9c 	bl	80098a0 <RCCEx_PLL2_Config>
 8009f68:	4604      	mov	r4, r0
      break;
 8009f6a:	e7b2      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    switch(PeriphClkInit->FmcClockSelection)
 8009f6c:	2601      	movs	r6, #1
 8009f6e:	4634      	mov	r4, r6
 8009f70:	e7b8      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009f72:	4626      	mov	r6, r4
 8009f74:	e7b6      	b.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0x464>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f76:	f7fc fe91 	bl	8006c9c <HAL_GetTick>
 8009f7a:	eba0 0008 	sub.w	r0, r0, r8
 8009f7e:	2864      	cmp	r0, #100	; 0x64
 8009f80:	d9bb      	bls.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x47a>
        ret = HAL_TIMEOUT;
 8009f82:	2603      	movs	r6, #3
 8009f84:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	07da      	lsls	r2, r3, #31
 8009f8a:	d509      	bpl.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f8c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8009f8e:	2b10      	cmp	r3, #16
 8009f90:	d043      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009f92:	d82d      	bhi.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d031      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d038      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8009f9c:	2601      	movs	r6, #1
 8009f9e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	079b      	lsls	r3, r3, #30
 8009fa4:	d54e      	bpl.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009fa6:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8009fa8:	2b05      	cmp	r3, #5
 8009faa:	d861      	bhi.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8009fac:	e8df f003 	tbb	[pc, r3]
 8009fb0:	425a3d42 	.word	0x425a3d42
 8009fb4:	4242      	.short	0x4242
        tickstart = HAL_GetTick();
 8009fb6:	f7fc fe71 	bl	8006c9c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fba:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x564>
        tickstart = HAL_GetTick();
 8009fbe:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fc0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fc4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8009fc8:	0799      	lsls	r1, r3, #30
 8009fca:	d4b2      	bmi.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fcc:	f7fc fe66 	bl	8006c9c <HAL_GetTick>
 8009fd0:	1bc0      	subs	r0, r0, r7
 8009fd2:	4548      	cmp	r0, r9
 8009fd4:	d9f6      	bls.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8009fd6:	e7d4      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x502>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fd8:	690a      	ldr	r2, [r1, #16]
 8009fda:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8009fde:	e7b7      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009fe0:	4626      	mov	r6, r4
 8009fe2:	e7d0      	b.n	8009f86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009fe4:	58024400 	.word	0x58024400
 8009fe8:	58024800 	.word	0x58024800
 8009fec:	00ffffcf 	.word	0x00ffffcf
    switch(PeriphClkInit->Usart16ClockSelection)
 8009ff0:	f023 0208 	bic.w	r2, r3, #8
 8009ff4:	2a20      	cmp	r2, #32
 8009ff6:	d001      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009ff8:	2b18      	cmp	r3, #24
 8009ffa:	d1cf      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    if(ret == HAL_OK)
 8009ffc:	b99c      	cbnz	r4, 800a026 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009ffe:	4a1f      	ldr	r2, [pc, #124]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800a000:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 800a002:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a004:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a008:	430b      	orrs	r3, r1
 800a00a:	6553      	str	r3, [r2, #84]	; 0x54
 800a00c:	e7c8      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a00e:	2101      	movs	r1, #1
 800a010:	1d28      	adds	r0, r5, #4
 800a012:	f7ff fc45 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a016:	4604      	mov	r4, r0
      break;
 800a018:	e7f0      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x57c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a01a:	2101      	movs	r1, #1
 800a01c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a020:	f7ff fcb6 	bl	8009990 <RCCEx_PLL3_Config>
 800a024:	e7f7      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800a026:	4626      	mov	r6, r4
 800a028:	e7ba      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x520>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a02a:	2101      	movs	r1, #1
 800a02c:	1d28      	adds	r0, r5, #4
 800a02e:	f7ff fc37 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a032:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800a034:	b9fc      	cbnz	r4, 800a076 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a036:	4a11      	ldr	r2, [pc, #68]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x5fc>)
 800a038:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 800a03a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a03c:	f023 0307 	bic.w	r3, r3, #7
 800a040:	430b      	orrs	r3, r1
 800a042:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	075f      	lsls	r7, r3, #29
 800a048:	d52a      	bpl.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a04a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 800a04e:	2b05      	cmp	r3, #5
 800a050:	f200 813d 	bhi.w	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a054:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a058:	00140019 	.word	0x00140019
 800a05c:	00190135 	.word	0x00190135
 800a060:	00190019 	.word	0x00190019
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a064:	2101      	movs	r1, #1
 800a066:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a06a:	f7ff fc91 	bl	8009990 <RCCEx_PLL3_Config>
 800a06e:	e7e0      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a070:	2601      	movs	r6, #1
 800a072:	4634      	mov	r4, r6
 800a074:	e7e6      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a076:	4626      	mov	r6, r4
 800a078:	e7e4      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a07a:	bf00      	nop
 800a07c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a080:	2101      	movs	r1, #1
 800a082:	1d28      	adds	r0, r5, #4
 800a084:	f7ff fc0c 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a088:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	f040 8122 	bne.w	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a090:	4aab      	ldr	r2, [pc, #684]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a092:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 800a096:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	430b      	orrs	r3, r1
 800a09e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a0a0:	682b      	ldr	r3, [r5, #0]
 800a0a2:	0698      	lsls	r0, r3, #26
 800a0a4:	d510      	bpl.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a0a6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ae:	f000 812c 	beq.w	800a30a <HAL_RCCEx_PeriphCLKConfig+0x88a>
 800a0b2:	f200 8111 	bhi.w	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x858>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f000 8117 	beq.w	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800a0bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0c0:	f000 811d 	beq.w	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x87e>
 800a0c4:	2601      	movs	r6, #1
 800a0c6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	0659      	lsls	r1, r3, #25
 800a0cc:	d510      	bpl.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a0ce:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 800a0d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0d6:	f000 813b 	beq.w	800a350 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800a0da:	f200 811e 	bhi.w	800a31a <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 8124 	beq.w	800a32c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800a0e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0e8:	f000 812c 	beq.w	800a344 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a0ec:	2601      	movs	r6, #1
 800a0ee:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	061a      	lsls	r2, r3, #24
 800a0f4:	d510      	bpl.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x698>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a0f6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 800a0fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0fe:	f000 8148 	beq.w	800a392 <HAL_RCCEx_PeriphCLKConfig+0x912>
 800a102:	f200 812d 	bhi.w	800a360 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 8133 	beq.w	800a372 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800a10c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a110:	f000 8139 	beq.w	800a386 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800a114:	2601      	movs	r6, #1
 800a116:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	071b      	lsls	r3, r3, #28
 800a11c:	d514      	bpl.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a11e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	d107      	bne.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a128:	2102      	movs	r1, #2
 800a12a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a12e:	f7ff fc2f 	bl	8009990 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 800a132:	2800      	cmp	r0, #0
 800a134:	bf18      	it	ne
 800a136:	2601      	movne	r6, #1
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a138:	4a81      	ldr	r2, [pc, #516]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a13a:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 800a13e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a140:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a144:	430b      	orrs	r3, r1
 800a146:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	06df      	lsls	r7, r3, #27
 800a14c:	d514      	bpl.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a14e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800a152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a156:	d107      	bne.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a158:	2102      	movs	r1, #2
 800a15a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a15e:	f7ff fc17 	bl	8009990 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a162:	2800      	cmp	r0, #0
 800a164:	bf18      	it	ne
 800a166:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a168:	4a75      	ldr	r2, [pc, #468]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a16a:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800a16e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a174:	430b      	orrs	r3, r1
 800a176:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	0318      	lsls	r0, r3, #12
 800a17c:	d51a      	bpl.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x734>
    switch(PeriphClkInit->AdcClockSelection)
 800a17e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800a182:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a186:	f000 810c 	beq.w	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x922>
 800a18a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800a18e:	d006      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800a190:	2900      	cmp	r1, #0
 800a192:	f040 810c 	bne.w	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x92e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a196:	1d28      	adds	r0, r5, #4
 800a198:	f7ff fb82 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a19c:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800a19e:	2c00      	cmp	r4, #0
 800a1a0:	f040 8108 	bne.w	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a1a4:	4a66      	ldr	r2, [pc, #408]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a1a6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800a1aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a1ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a1b4:	682b      	ldr	r3, [r5, #0]
 800a1b6:	0359      	lsls	r1, r3, #13
 800a1b8:	d51c      	bpl.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x774>
    switch(PeriphClkInit->UsbClockSelection)
 800a1ba:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800a1be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1c2:	f000 80f9 	beq.w	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a1c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a1ca:	d008      	beq.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x75e>
 800a1cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d0:	f040 80f9 	bne.w	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x946>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1d4:	4a5a      	ldr	r2, [pc, #360]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a1d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a1d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a1de:	2c00      	cmp	r4, #0
 800a1e0:	f040 80f4 	bne.w	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x94c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a1e4:	4a56      	ldr	r2, [pc, #344]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a1e6:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 800a1ea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a1ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a1f0:	430b      	orrs	r3, r1
 800a1f2:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	03da      	lsls	r2, r3, #15
 800a1f8:	d509      	bpl.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    switch(PeriphClkInit->SdmmcClockSelection)
 800a1fa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f000 80e7 	beq.w	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a206:	f000 80f1 	beq.w	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x96c>
 800a20a:	2601      	movs	r6, #1
 800a20c:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	d507      	bpl.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a214:	2102      	movs	r1, #2
 800a216:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a21a:	f7ff fbb9 	bl	8009990 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 800a21e:	2800      	cmp	r0, #0
 800a220:	bf18      	it	ne
 800a222:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	039f      	lsls	r7, r3, #14
 800a228:	d50b      	bpl.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    switch(PeriphClkInit->RngClockSelection)
 800a22a:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 800a22e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a232:	f000 80f1 	beq.w	800a418 <HAL_RCCEx_PeriphCLKConfig+0x998>
 800a236:	f200 80e1 	bhi.w	800a3fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800a23a:	2900      	cmp	r1, #0
 800a23c:	f000 80e4 	beq.w	800a408 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a240:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a242:	02dc      	lsls	r4, r3, #11
 800a244:	d506      	bpl.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a246:	493e      	ldr	r1, [pc, #248]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a248:	6f68      	ldr	r0, [r5, #116]	; 0x74
 800a24a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a24c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a250:	4302      	orrs	r2, r0
 800a252:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a254:	00d8      	lsls	r0, r3, #3
 800a256:	d507      	bpl.n	800a268 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a258:	4939      	ldr	r1, [pc, #228]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a25a:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 800a25e:	690a      	ldr	r2, [r1, #16]
 800a260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a264:	4302      	orrs	r2, r0
 800a266:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a268:	0299      	lsls	r1, r3, #10
 800a26a:	d506      	bpl.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a26c:	4934      	ldr	r1, [pc, #208]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a26e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 800a270:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800a272:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800a276:	4302      	orrs	r2, r0
 800a278:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a27a:	005a      	lsls	r2, r3, #1
 800a27c:	d509      	bpl.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x812>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a27e:	4a30      	ldr	r2, [pc, #192]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a280:	6911      	ldr	r1, [r2, #16]
 800a282:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800a286:	6111      	str	r1, [r2, #16]
 800a288:	6911      	ldr	r1, [r2, #16]
 800a28a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
 800a28e:	4301      	orrs	r1, r0
 800a290:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a292:	2b00      	cmp	r3, #0
 800a294:	da06      	bge.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x824>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a296:	492a      	ldr	r1, [pc, #168]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a298:	6d68      	ldr	r0, [r5, #84]	; 0x54
 800a29a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800a29c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2a0:	4302      	orrs	r2, r0
 800a2a2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	d507      	bpl.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x838>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a2a8:	4a25      	ldr	r2, [pc, #148]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a2aa:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 800a2ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a2b0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	6553      	str	r3, [r2, #84]	; 0x54
}
 800a2b8:	1e30      	subs	r0, r6, #0
 800a2ba:	bf18      	it	ne
 800a2bc:	2001      	movne	r0, #1
 800a2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a2c8:	f7ff fb62 	bl	8009990 <RCCEx_PLL3_Config>
 800a2cc:	e6dc      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a2ce:	2601      	movs	r6, #1
 800a2d0:	4634      	mov	r4, r6
 800a2d2:	e6e5      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800a2d4:	4626      	mov	r6, r4
 800a2d6:	e6e3      	b.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a2d8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a2dc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a2e0:	d003      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
 800a2e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2e6:	f47f aeed 	bne.w	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    if(ret == HAL_OK)
 800a2ea:	b9a4      	cbnz	r4, 800a316 <HAL_RCCEx_PeriphCLKConfig+0x896>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ec:	4a14      	ldr	r2, [pc, #80]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a2ee:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800a2f2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a2f4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	6553      	str	r3, [r2, #84]	; 0x54
 800a2fc:	e6e4      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2fe:	2100      	movs	r1, #0
 800a300:	1d28      	adds	r0, r5, #4
 800a302:	f7ff facd 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a306:	4604      	mov	r4, r0
      break;
 800a308:	e7ef      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a30a:	2102      	movs	r1, #2
 800a30c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a310:	f7ff fb3e 	bl	8009990 <RCCEx_PLL3_Config>
 800a314:	e7f7      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x886>
 800a316:	4626      	mov	r6, r4
 800a318:	e6d6      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a31a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a31e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a322:	d003      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800a324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a328:	f47f aee0 	bne.w	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if(ret == HAL_OK)
 800a32c:	b9b4      	cbnz	r4, 800a35c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800a330:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 800a334:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a336:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800a33a:	430b      	orrs	r3, r1
 800a33c:	6593      	str	r3, [r2, #88]	; 0x58
 800a33e:	e6d7      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800a340:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a344:	2100      	movs	r1, #0
 800a346:	1d28      	adds	r0, r5, #4
 800a348:	f7ff faaa 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a34c:	4604      	mov	r4, r0
      break;
 800a34e:	e7ed      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a350:	2102      	movs	r1, #2
 800a352:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a356:	f7ff fb1b 	bl	8009990 <RCCEx_PLL3_Config>
 800a35a:	e7f7      	b.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 800a35c:	4626      	mov	r6, r4
 800a35e:	e6c7      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a364:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800a368:	d003      	beq.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800a36a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a36e:	f47f aed1 	bne.w	800a114 <HAL_RCCEx_PeriphCLKConfig+0x694>
    if(ret == HAL_OK)
 800a372:	b9a4      	cbnz	r4, 800a39e <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a374:	4a2c      	ldr	r2, [pc, #176]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a376:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 800a37a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800a37c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800a380:	430b      	orrs	r3, r1
 800a382:	6593      	str	r3, [r2, #88]	; 0x58
 800a384:	e6c8      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a386:	2100      	movs	r1, #0
 800a388:	1d28      	adds	r0, r5, #4
 800a38a:	f7ff fa89 	bl	80098a0 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a38e:	4604      	mov	r4, r0
      break;
 800a390:	e7ef      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a392:	2102      	movs	r1, #2
 800a394:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a398:	f7ff fafa 	bl	8009990 <RCCEx_PLL3_Config>
 800a39c:	e7f7      	b.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x90e>
 800a39e:	4626      	mov	r6, r4
 800a3a0:	e6ba      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a3a8:	f7ff faf2 	bl	8009990 <RCCEx_PLL3_Config>
 800a3ac:	e6f6      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x71c>
    switch(PeriphClkInit->AdcClockSelection)
 800a3ae:	2601      	movs	r6, #1
 800a3b0:	4634      	mov	r4, r6
 800a3b2:	e6ff      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x734>
 800a3b4:	4626      	mov	r6, r4
 800a3b6:	e6fd      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a3be:	f7ff fae7 	bl	8009990 <RCCEx_PLL3_Config>
 800a3c2:	4604      	mov	r4, r0
      break;
 800a3c4:	e70b      	b.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x75e>
    switch(PeriphClkInit->UsbClockSelection)
 800a3c6:	2601      	movs	r6, #1
 800a3c8:	4634      	mov	r4, r6
 800a3ca:	e713      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x774>
 800a3cc:	4626      	mov	r6, r4
 800a3ce:	e711      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x774>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d0:	4a15      	ldr	r2, [pc, #84]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a3d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a3d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800a3da:	b96c      	cbnz	r4, 800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x978>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3dc:	4a12      	ldr	r2, [pc, #72]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a3de:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800a3e0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800a3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e6:	430b      	orrs	r3, r1
 800a3e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3ea:	e710      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a3ec:	2102      	movs	r1, #2
 800a3ee:	1d28      	adds	r0, r5, #4
 800a3f0:	f7ff fa56 	bl	80098a0 <RCCEx_PLL2_Config>
 800a3f4:	4604      	mov	r4, r0
      break;
 800a3f6:	e7f0      	b.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800a3f8:	4626      	mov	r6, r4
 800a3fa:	e708      	b.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    switch(PeriphClkInit->RngClockSelection)
 800a3fc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800a400:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800a404:	f47f af1c 	bne.w	800a240 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
    if(ret == HAL_OK)
 800a408:	b964      	cbnz	r4, 800a424 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a40a:	4807      	ldr	r0, [pc, #28]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a40c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800a40e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a412:	430a      	orrs	r2, r1
 800a414:	6542      	str	r2, [r0, #84]	; 0x54
 800a416:	e714      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a418:	4803      	ldr	r0, [pc, #12]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800a41a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800a41c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a420:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 800a422:	e7f1      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800a424:	4626      	mov	r6, r4
 800a426:	e70c      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
 800a428:	58024400 	.word	0x58024400

0800a42c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a430:	4604      	mov	r4, r0
 800a432:	b1f0      	cbz	r0, 800a472 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a434:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a438:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a43c:	b91b      	cbnz	r3, 800a446 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a43e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a442:	f7f6 ff69 	bl	8001318 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a446:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a448:	1d21      	adds	r1, r4, #4
 800a44a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a44c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a450:	f000 fa1f 	bl	800a892 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a454:	6862      	ldr	r2, [r4, #4]
 800a456:	4629      	mov	r1, r5
 800a458:	6820      	ldr	r0, [r4, #0]
 800a45a:	f000 fa55 	bl	800a908 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a45e:	4a06      	ldr	r2, [pc, #24]	; (800a478 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800a460:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a468:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800a470:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a472:	2001      	movs	r0, #1
 800a474:	e7fc      	b.n	800a470 <HAL_SDRAM_Init+0x44>
 800a476:	bf00      	nop
 800a478:	52004000 	.word	0x52004000

0800a47c <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800a47c:	b510      	push	{r4, lr}
 800a47e:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800a480:	f7f6 ffd6 	bl	8001430 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800a484:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a488:	f000 fa74 	bl	800a974 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800a48c:	2000      	movs	r0, #0
 800a48e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800a492:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
 800a496:	bd10      	pop	{r4, pc}

0800a498 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a498:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a49a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a49e:	4605      	mov	r5, r0
 800a4a0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a4a2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a4a4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a4a6:	d010      	beq.n	800a4ca <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a4a8:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800a4ac:	2c01      	cmp	r4, #1
 800a4ae:	d110      	bne.n	800a4d2 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4b0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4b2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4b4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a4b8:	f000 fa6b 	bl	800a992 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a4bc:	6833      	ldr	r3, [r6, #0]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d104      	bne.n	800a4cc <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a4c2:	2305      	movs	r3, #5
 800a4c4:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a4c8:	2000      	movs	r0, #0
}
 800a4ca:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a4cc:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800a4d0:	e7fa      	b.n	800a4c8 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	e7f9      	b.n	800a4ca <HAL_SDRAM_SendCommand+0x32>

0800a4d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a4d6:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4d8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800a4dc:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	b2d8      	uxtb	r0, r3
 800a4e2:	d00d      	beq.n	800a500 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a4e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	b2dd      	uxtb	r5, r3
 800a4ec:	d109      	bne.n	800a502 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4ee:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a4f0:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a4f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a4f6:	f000 fa5e 	bl	800a9b6 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a4fa:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a4fc:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800a500:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a502:	2001      	movs	r0, #1
 800a504:	e7fc      	b.n	800a500 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800a506 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a506:	4770      	bx	lr

0800a508 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a508:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d12f      	bne.n	800a570 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a512:	4a18      	ldr	r2, [pc, #96]	; (800a574 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a514:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a518:	6803      	ldr	r3, [r0, #0]
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d01a      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d017      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a524:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a528:	4293      	cmp	r3, r2
 800a52a:	d013      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a52c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a530:	4293      	cmp	r3, r2
 800a532:	d00f      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a534:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00b      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a53c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a540:	4293      	cmp	r3, r2
 800a542:	d007      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a544:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a548:	4293      	cmp	r3, r2
 800a54a:	d003      	beq.n	800a554 <HAL_TIM_Base_Start+0x4c>
 800a54c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a550:	4293      	cmp	r3, r2
 800a552:	d107      	bne.n	800a564 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a554:	6899      	ldr	r1, [r3, #8]
 800a556:	4a08      	ldr	r2, [pc, #32]	; (800a578 <HAL_TIM_Base_Start+0x70>)
 800a558:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55a:	2a06      	cmp	r2, #6
 800a55c:	d006      	beq.n	800a56c <HAL_TIM_Base_Start+0x64>
 800a55e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a562:	d003      	beq.n	800a56c <HAL_TIM_Base_Start+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	f042 0201 	orr.w	r2, r2, #1
 800a56a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a56c:	2000      	movs	r0, #0
}
 800a56e:	4770      	bx	lr
    return HAL_ERROR;
 800a570:	2001      	movs	r0, #1
 800a572:	4770      	bx	lr
 800a574:	40010000 	.word	0x40010000
 800a578:	00010007 	.word	0x00010007

0800a57c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a57c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a580:	2b01      	cmp	r3, #1
 800a582:	d133      	bne.n	800a5ec <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a584:	2302      	movs	r3, #2
 800a586:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a58a:	6803      	ldr	r3, [r0, #0]
 800a58c:	68da      	ldr	r2, [r3, #12]
 800a58e:	f042 0201 	orr.w	r2, r2, #1
 800a592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a594:	4a16      	ldr	r2, [pc, #88]	; (800a5f0 <HAL_TIM_Base_Start_IT+0x74>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d01a      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a59a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a59e:	d017      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5a0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d013      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d00f      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d00b      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5b8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d007      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5c0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d003      	beq.n	800a5d0 <HAL_TIM_Base_Start_IT+0x54>
 800a5c8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d107      	bne.n	800a5e0 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d0:	6899      	ldr	r1, [r3, #8]
 800a5d2:	4a08      	ldr	r2, [pc, #32]	; (800a5f4 <HAL_TIM_Base_Start_IT+0x78>)
 800a5d4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d6:	2a06      	cmp	r2, #6
 800a5d8:	d006      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
 800a5da:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a5de:	d003      	beq.n	800a5e8 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5e8:	2000      	movs	r0, #0
}
 800a5ea:	4770      	bx	lr
    return HAL_ERROR;
 800a5ec:	2001      	movs	r0, #1
 800a5ee:	4770      	bx	lr
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	00010007 	.word	0x00010007

0800a5f8 <HAL_TIM_OC_DelayElapsedCallback>:
 800a5f8:	4770      	bx	lr

0800a5fa <HAL_TIM_IC_CaptureCallback>:
 800a5fa:	4770      	bx	lr

0800a5fc <HAL_TIM_PWM_PulseFinishedCallback>:
 800a5fc:	4770      	bx	lr

0800a5fe <HAL_TIM_TriggerCallback>:
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a600:	6803      	ldr	r3, [r0, #0]
 800a602:	691a      	ldr	r2, [r3, #16]
 800a604:	0791      	lsls	r1, r2, #30
{
 800a606:	b510      	push	{r4, lr}
 800a608:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a60a:	d50f      	bpl.n	800a62c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a60c:	68da      	ldr	r2, [r3, #12]
 800a60e:	0792      	lsls	r2, r2, #30
 800a610:	d50c      	bpl.n	800a62c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a612:	f06f 0202 	mvn.w	r2, #2
 800a616:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a618:	2201      	movs	r2, #1
 800a61a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	0799      	lsls	r1, r3, #30
 800a620:	f000 8085 	beq.w	800a72e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a624:	f7ff ffe9 	bl	800a5fa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a628:	2300      	movs	r3, #0
 800a62a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	0752      	lsls	r2, r2, #29
 800a632:	d510      	bpl.n	800a656 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	0750      	lsls	r0, r2, #29
 800a638:	d50d      	bpl.n	800a656 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a63a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a63e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a642:	2202      	movs	r2, #2
 800a644:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a64c:	d075      	beq.n	800a73a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800a64e:	f7ff ffd4 	bl	800a5fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a652:	2300      	movs	r3, #0
 800a654:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	0711      	lsls	r1, r2, #28
 800a65c:	d50f      	bpl.n	800a67e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a65e:	68da      	ldr	r2, [r3, #12]
 800a660:	0712      	lsls	r2, r2, #28
 800a662:	d50c      	bpl.n	800a67e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a664:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a668:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a66a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a66c:	2204      	movs	r2, #4
 800a66e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	079b      	lsls	r3, r3, #30
 800a674:	d067      	beq.n	800a746 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800a676:	f7ff ffc0 	bl	800a5fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a67a:	2300      	movs	r3, #0
 800a67c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	691a      	ldr	r2, [r3, #16]
 800a682:	06d0      	lsls	r0, r2, #27
 800a684:	d510      	bpl.n	800a6a8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	06d1      	lsls	r1, r2, #27
 800a68a:	d50d      	bpl.n	800a6a8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a68c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a690:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a692:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a694:	2208      	movs	r2, #8
 800a696:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a69e:	d058      	beq.n	800a752 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800a6a0:	f7ff ffab 	bl	800a5fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	691a      	ldr	r2, [r3, #16]
 800a6ac:	07d2      	lsls	r2, r2, #31
 800a6ae:	d508      	bpl.n	800a6c2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	07d0      	lsls	r0, r2, #31
 800a6b4:	d505      	bpl.n	800a6c2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6b6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a6bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6be:	f7f6 fc7f 	bl	8000fc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	691a      	ldr	r2, [r3, #16]
 800a6c6:	0611      	lsls	r1, r2, #24
 800a6c8:	d508      	bpl.n	800a6dc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	0612      	lsls	r2, r2, #24
 800a6ce:	d505      	bpl.n	800a6dc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6d4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a6d8:	f000 f8d9 	bl	800a88e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	691a      	ldr	r2, [r3, #16]
 800a6e0:	05d0      	lsls	r0, r2, #23
 800a6e2:	d508      	bpl.n	800a6f6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	0611      	lsls	r1, r2, #24
 800a6e8:	d505      	bpl.n	800a6f6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a6ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a6f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a6f2:	f000 f8cd 	bl	800a890 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	691a      	ldr	r2, [r3, #16]
 800a6fa:	0652      	lsls	r2, r2, #25
 800a6fc:	d508      	bpl.n	800a710 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6fe:	68da      	ldr	r2, [r3, #12]
 800a700:	0650      	lsls	r0, r2, #25
 800a702:	d505      	bpl.n	800a710 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a704:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a708:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a70a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a70c:	f7ff ff77 	bl	800a5fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	691a      	ldr	r2, [r3, #16]
 800a714:	0691      	lsls	r1, r2, #26
 800a716:	d522      	bpl.n	800a75e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	0692      	lsls	r2, r2, #26
 800a71c:	d51f      	bpl.n	800a75e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a71e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a722:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a724:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800a72a:	f000 b8af 	b.w	800a88c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72e:	f7ff ff63 	bl	800a5f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff ff62 	bl	800a5fc <HAL_TIM_PWM_PulseFinishedCallback>
 800a738:	e776      	b.n	800a628 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a73a:	f7ff ff5d 	bl	800a5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a73e:	4620      	mov	r0, r4
 800a740:	f7ff ff5c 	bl	800a5fc <HAL_TIM_PWM_PulseFinishedCallback>
 800a744:	e785      	b.n	800a652 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a746:	f7ff ff57 	bl	800a5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a74a:	4620      	mov	r0, r4
 800a74c:	f7ff ff56 	bl	800a5fc <HAL_TIM_PWM_PulseFinishedCallback>
 800a750:	e793      	b.n	800a67a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a752:	f7ff ff51 	bl	800a5f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a756:	4620      	mov	r0, r4
 800a758:	f7ff ff50 	bl	800a5fc <HAL_TIM_PWM_PulseFinishedCallback>
 800a75c:	e7a2      	b.n	800a6a4 <HAL_TIM_IRQHandler+0xa4>
}
 800a75e:	bd10      	pop	{r4, pc}

0800a760 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a760:	4a30      	ldr	r2, [pc, #192]	; (800a824 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800a762:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a764:	4290      	cmp	r0, r2
 800a766:	d012      	beq.n	800a78e <TIM_Base_SetConfig+0x2e>
 800a768:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a76c:	d00f      	beq.n	800a78e <TIM_Base_SetConfig+0x2e>
 800a76e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a772:	4290      	cmp	r0, r2
 800a774:	d00b      	beq.n	800a78e <TIM_Base_SetConfig+0x2e>
 800a776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a77a:	4290      	cmp	r0, r2
 800a77c:	d007      	beq.n	800a78e <TIM_Base_SetConfig+0x2e>
 800a77e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a782:	4290      	cmp	r0, r2
 800a784:	d003      	beq.n	800a78e <TIM_Base_SetConfig+0x2e>
 800a786:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a78a:	4290      	cmp	r0, r2
 800a78c:	d119      	bne.n	800a7c2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800a78e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a794:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a796:	4a23      	ldr	r2, [pc, #140]	; (800a824 <TIM_Base_SetConfig+0xc4>)
 800a798:	4290      	cmp	r0, r2
 800a79a:	d01d      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a79c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a7a0:	d01a      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7a2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800a7a6:	4290      	cmp	r0, r2
 800a7a8:	d016      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7ae:	4290      	cmp	r0, r2
 800a7b0:	d012      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7b6:	4290      	cmp	r0, r2
 800a7b8:	d00e      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7ba:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800a7be:	4290      	cmp	r0, r2
 800a7c0:	d00a      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7c2:	4a19      	ldr	r2, [pc, #100]	; (800a828 <TIM_Base_SetConfig+0xc8>)
 800a7c4:	4290      	cmp	r0, r2
 800a7c6:	d007      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7cc:	4290      	cmp	r0, r2
 800a7ce:	d003      	beq.n	800a7d8 <TIM_Base_SetConfig+0x78>
 800a7d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a7d4:	4290      	cmp	r0, r2
 800a7d6:	d103      	bne.n	800a7e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7dc:	68ca      	ldr	r2, [r1, #12]
 800a7de:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7e0:	694a      	ldr	r2, [r1, #20]
 800a7e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7e6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800a7e8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7ea:	688b      	ldr	r3, [r1, #8]
 800a7ec:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7ee:	680b      	ldr	r3, [r1, #0]
 800a7f0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7f2:	4b0c      	ldr	r3, [pc, #48]	; (800a824 <TIM_Base_SetConfig+0xc4>)
 800a7f4:	4298      	cmp	r0, r3
 800a7f6:	d00f      	beq.n	800a818 <TIM_Base_SetConfig+0xb8>
 800a7f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	d00b      	beq.n	800a818 <TIM_Base_SetConfig+0xb8>
 800a800:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800a804:	4298      	cmp	r0, r3
 800a806:	d007      	beq.n	800a818 <TIM_Base_SetConfig+0xb8>
 800a808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a80c:	4298      	cmp	r0, r3
 800a80e:	d003      	beq.n	800a818 <TIM_Base_SetConfig+0xb8>
 800a810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a814:	4298      	cmp	r0, r3
 800a816:	d101      	bne.n	800a81c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a818:	690b      	ldr	r3, [r1, #16]
 800a81a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a81c:	2301      	movs	r3, #1
 800a81e:	6143      	str	r3, [r0, #20]
}
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	40010000 	.word	0x40010000
 800a828:	40014000 	.word	0x40014000

0800a82c <HAL_TIM_Base_Init>:
{
 800a82c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800a82e:	4604      	mov	r4, r0
 800a830:	b350      	cbz	r0, 800a888 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800a832:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a836:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a83a:	b91b      	cbnz	r3, 800a844 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800a83c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a840:	f7ff fe61 	bl	800a506 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800a84a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a84e:	f7ff ff87 	bl	800a760 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a852:	2301      	movs	r3, #1
  return HAL_OK;
 800a854:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a856:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a85e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a862:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a866:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a86a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a872:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a87a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a87e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a882:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800a886:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a888:	2001      	movs	r0, #1
 800a88a:	e7fc      	b.n	800a886 <HAL_TIM_Base_Init+0x5a>

0800a88c <HAL_TIMEx_CommutCallback>:
 800a88c:	4770      	bx	lr

0800a88e <HAL_TIMEx_BreakCallback>:
 800a88e:	4770      	bx	lr

0800a890 <HAL_TIMEx_Break2Callback>:
 800a890:	4770      	bx	lr

0800a892 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a896:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a898:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800a89c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800a8a0:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800a8a4:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800a8a8:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800a8ac:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8ae:	b9a2      	cbnz	r2, 800a8da <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8b0:	ea43 0209 	orr.w	r2, r3, r9
 800a8b4:	6801      	ldr	r1, [r0, #0]
 800a8b6:	432a      	orrs	r2, r5
 800a8b8:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800a8bc:	ea42 0308 	orr.w	r3, r2, r8
 800a8c0:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800a8c4:	ea43 030e 	orr.w	r3, r3, lr
 800a8c8:	ea43 030c 	orr.w	r3, r3, ip
 800a8cc:	433b      	orrs	r3, r7
 800a8ce:	4333      	orrs	r3, r6
 800a8d0:	430b      	orrs	r3, r1
 800a8d2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8da:	6802      	ldr	r2, [r0, #0]
 800a8dc:	ea43 0309 	orr.w	r3, r3, r9
 800a8e0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a8e8:	ea45 0308 	orr.w	r3, r5, r8
 800a8ec:	6842      	ldr	r2, [r0, #4]
 800a8ee:	ea43 030e 	orr.w	r3, r3, lr
 800a8f2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800a8f6:	ea43 030c 	orr.w	r3, r3, ip
 800a8fa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800a8fe:	433b      	orrs	r3, r7
 800a900:	4333      	orrs	r3, r6
 800a902:	4313      	orrs	r3, r2
 800a904:	6043      	str	r3, [r0, #4]
 800a906:	e7e5      	b.n	800a8d4 <FMC_SDRAM_Init+0x42>

0800a908 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a908:	68cb      	ldr	r3, [r1, #12]
 800a90a:	f103 3cff 	add.w	ip, r3, #4294967295
 800a90e:	694b      	ldr	r3, [r1, #20]
{
 800a910:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a912:	3b01      	subs	r3, #1
 800a914:	680f      	ldr	r7, [r1, #0]
 800a916:	684c      	ldr	r4, [r1, #4]
 800a918:	688e      	ldr	r6, [r1, #8]
 800a91a:	051b      	lsls	r3, r3, #20
 800a91c:	690d      	ldr	r5, [r1, #16]
 800a91e:	3c01      	subs	r4, #1
 800a920:	6989      	ldr	r1, [r1, #24]
 800a922:	3e01      	subs	r6, #1
 800a924:	3d01      	subs	r5, #1
 800a926:	3f01      	subs	r7, #1
 800a928:	3901      	subs	r1, #1
 800a92a:	0124      	lsls	r4, r4, #4
 800a92c:	0236      	lsls	r6, r6, #8
 800a92e:	042d      	lsls	r5, r5, #16
 800a930:	0609      	lsls	r1, r1, #24
 800a932:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800a936:	b95a      	cbnz	r2, 800a950 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a938:	433b      	orrs	r3, r7
 800a93a:	6882      	ldr	r2, [r0, #8]
 800a93c:	4323      	orrs	r3, r4
 800a93e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a942:	4333      	orrs	r3, r6
 800a944:	432b      	orrs	r3, r5
 800a946:	430b      	orrs	r3, r1
 800a948:	4313      	orrs	r3, r2
 800a94a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800a94c:	2000      	movs	r0, #0
 800a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a950:	6882      	ldr	r2, [r0, #8]
 800a952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a956:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800a95a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a95c:	ea44 0306 	orr.w	r3, r4, r6
 800a960:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a962:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a964:	68c2      	ldr	r2, [r0, #12]
 800a966:	432b      	orrs	r3, r5
 800a968:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800a96c:	430b      	orrs	r3, r1
 800a96e:	4313      	orrs	r3, r2
 800a970:	60c3      	str	r3, [r0, #12]
 800a972:	e7eb      	b.n	800a94c <FMC_SDRAM_Timing_Init+0x44>

0800a974 <FMC_SDRAM_DeInit>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800a974:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800a978:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800a97c:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800a980:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a984:	609a      	str	r2, [r3, #8]
  Device->SDCMR      = 0x00000000U;
 800a986:	2300      	movs	r3, #0
 800a988:	6103      	str	r3, [r0, #16]
  Device->SDRTR      = 0x00000000U;
 800a98a:	6143      	str	r3, [r0, #20]
  Device->SDSR       = 0x00000000U;
 800a98c:	6183      	str	r3, [r0, #24]

  return HAL_OK;
}
 800a98e:	4618      	mov	r0, r3
 800a990:	4770      	bx	lr

0800a992 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a992:	6902      	ldr	r2, [r0, #16]
{
 800a994:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a996:	e9d1 3400 	ldrd	r3, r4, [r1]
 800a99a:	0d92      	lsrs	r2, r2, #22
 800a99c:	4323      	orrs	r3, r4
 800a99e:	68cc      	ldr	r4, [r1, #12]
 800a9a0:	0592      	lsls	r2, r2, #22
 800a9a2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	688a      	ldr	r2, [r1, #8]
 800a9aa:	3a01      	subs	r2, #1
 800a9ac:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800a9b0:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a9b6:	6943      	ldr	r3, [r0, #20]
 800a9b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800a9bc:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800a9c0:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800a9c4:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	4770      	bx	lr

0800a9ca <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a9ca:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800a9cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a9d0:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a9d2:	f001 fe09 	bl	800c5e8 <xTaskGetSchedulerState>
 800a9d6:	2801      	cmp	r0, #1
 800a9d8:	d003      	beq.n	800a9e2 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800a9da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800a9de:	f000 bbd1 	b.w	800b184 <xPortSysTickHandler>
}
 800a9e2:	bd08      	pop	{r3, pc}

0800a9e4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9e4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9e8:	b92b      	cbnz	r3, 800a9f6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9ea:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <osKernelInitialize+0x20>)
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	b928      	cbnz	r0, 800a9fc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9f4:	4770      	bx	lr
    stat = osErrorISR;
 800a9f6:	f06f 0005 	mvn.w	r0, #5
 800a9fa:	4770      	bx	lr
    } else {
      stat = osError;
 800a9fc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	24006698 	.word	0x24006698

0800aa08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800aa0e:	b95c      	cbnz	r4, 800aa28 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800aa10:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <osKernelStart+0x2c>)
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	2a01      	cmp	r2, #1
 800aa16:	d10a      	bne.n	800aa2e <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa18:	4a07      	ldr	r2, [pc, #28]	; (800aa38 <osKernelStart+0x30>)
 800aa1a:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aa1c:	2202      	movs	r2, #2
 800aa1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa20:	f001 fc86 	bl	800c330 <vTaskStartScheduler>
      stat = osOK;
 800aa24:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800aa26:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800aa28:	f06f 0005 	mvn.w	r0, #5
 800aa2c:	e7fb      	b.n	800aa26 <osKernelStart+0x1e>
      stat = osError;
 800aa2e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800aa32:	e7f8      	b.n	800aa26 <osKernelStart+0x1e>
 800aa34:	24006698 	.word	0x24006698
 800aa38:	e000ed00 	.word	0xe000ed00

0800aa3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa3e:	4614      	mov	r4, r2
 800aa40:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa42:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa44:	460b      	mov	r3, r1
  hTask = NULL;
 800aa46:	9205      	str	r2, [sp, #20]
 800aa48:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800aa4c:	b9d2      	cbnz	r2, 800aa84 <osThreadNew+0x48>
 800aa4e:	b1c8      	cbz	r0, 800aa84 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800aa50:	2c00      	cmp	r4, #0
 800aa52:	d02f      	beq.n	800aab4 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800aa54:	69a5      	ldr	r5, [r4, #24]
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	bf08      	it	eq
 800aa5a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa5c:	1e69      	subs	r1, r5, #1
 800aa5e:	46ac      	mov	ip, r5
 800aa60:	2937      	cmp	r1, #55	; 0x37
 800aa62:	d82b      	bhi.n	800aabc <osThreadNew+0x80>
 800aa64:	6861      	ldr	r1, [r4, #4]
 800aa66:	07c9      	lsls	r1, r1, #31
 800aa68:	d428      	bmi.n	800aabc <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800aa6a:	6966      	ldr	r6, [r4, #20]
 800aa6c:	b16e      	cbz	r6, 800aa8a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa6e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800aa70:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa72:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800aa76:	b157      	cbz	r7, 800aa8e <osThreadNew+0x52>
 800aa78:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800aa7c:	d902      	bls.n	800aa84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa7e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aa80:	b104      	cbz	r4, 800aa84 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aa82:	b9ee      	cbnz	r6, 800aac0 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800aa84:	9805      	ldr	r0, [sp, #20]
}
 800aa86:	b007      	add	sp, #28
 800aa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800aa8a:	2280      	movs	r2, #128	; 0x80
 800aa8c:	e7f0      	b.n	800aa70 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aa8e:	f1be 0f00 	cmp.w	lr, #0
 800aa92:	d1f7      	bne.n	800aa84 <osThreadNew+0x48>
      if (mem == 0) {
 800aa94:	6924      	ldr	r4, [r4, #16]
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	d1f4      	bne.n	800aa84 <osThreadNew+0x48>
 800aa9a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800aa9c:	a905      	add	r1, sp, #20
 800aa9e:	b292      	uxth	r2, r2
 800aaa0:	e9cd c100 	strd	ip, r1, [sp]
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	f001 fae2 	bl	800c06e <xTaskCreate>
 800aaaa:	2801      	cmp	r0, #1
            hTask = NULL;
 800aaac:	bf1c      	itt	ne
 800aaae:	2300      	movne	r3, #0
 800aab0:	9305      	strne	r3, [sp, #20]
 800aab2:	e7e7      	b.n	800aa84 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 800aab4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800aab8:	2280      	movs	r2, #128	; 0x80
 800aaba:	e7ef      	b.n	800aa9c <osThreadNew+0x60>
        return (NULL);
 800aabc:	4610      	mov	r0, r2
 800aabe:	e7e2      	b.n	800aa86 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aac0:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800aac4:	9500      	str	r5, [sp, #0]
 800aac6:	f001 fa9a 	bl	800bffe <xTaskCreateStatic>
 800aaca:	9005      	str	r0, [sp, #20]
 800aacc:	e7da      	b.n	800aa84 <osThreadNew+0x48>

0800aace <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aace:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad0:	4604      	mov	r4, r0
 800aad2:	460e      	mov	r6, r1
 800aad4:	4615      	mov	r5, r2
 800aad6:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aada:	b11a      	cbz	r2, 800aae4 <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 800aadc:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800aade:	4620      	mov	r0, r4
 800aae0:	b003      	add	sp, #12
 800aae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d0f9      	beq.n	800aadc <osSemaphoreNew+0xe>
 800aae8:	4288      	cmp	r0, r1
 800aaea:	d3f7      	bcc.n	800aadc <osSemaphoreNew+0xe>
    if (attr != NULL) {
 800aaec:	b1e5      	cbz	r5, 800ab28 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aaee:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800aaf2:	b1bb      	cbz	r3, 800ab24 <osSemaphoreNew+0x56>
 800aaf4:	2f4f      	cmp	r7, #79	; 0x4f
 800aaf6:	d9f1      	bls.n	800aadc <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800aaf8:	2801      	cmp	r0, #1
 800aafa:	d12a      	bne.n	800ab52 <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aafc:	2103      	movs	r1, #3
 800aafe:	9100      	str	r1, [sp, #0]
 800ab00:	4611      	mov	r1, r2
 800ab02:	f000 fce7 	bl	800b4d4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ab06:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d0e7      	beq.n	800aadc <osSemaphoreNew+0xe>
 800ab0c:	b1de      	cbz	r6, 800ab46 <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab0e:	2300      	movs	r3, #0
 800ab10:	461a      	mov	r2, r3
 800ab12:	4619      	mov	r1, r3
 800ab14:	f000 fd93 	bl	800b63e <xQueueGenericSend>
 800ab18:	2801      	cmp	r0, #1
 800ab1a:	d014      	beq.n	800ab46 <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f001 f8cf 	bl	800bcc0 <vQueueDelete>
 800ab22:	e7db      	b.n	800aadc <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	d1d9      	bne.n	800aadc <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 800ab28:	2c01      	cmp	r4, #1
 800ab2a:	d105      	bne.n	800ab38 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 800ab2c:	2203      	movs	r2, #3
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 fd1d 	bl	800b570 <xQueueGenericCreate>
 800ab36:	e7e6      	b.n	800ab06 <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ab38:	4620      	mov	r0, r4
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	f000 fd61 	bl	800b602 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800ab40:	4604      	mov	r4, r0
 800ab42:	2800      	cmp	r0, #0
 800ab44:	d0ca      	beq.n	800aadc <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800ab46:	b955      	cbnz	r5, 800ab5e <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 800ab48:	4629      	mov	r1, r5
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f001 f892 	bl	800bc74 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800ab50:	e7c5      	b.n	800aade <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ab52:	461a      	mov	r2, r3
 800ab54:	f000 fd33 	bl	800b5be <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800ab58:	4604      	mov	r4, r0
 800ab5a:	2800      	cmp	r0, #0
 800ab5c:	d0be      	beq.n	800aadc <osSemaphoreNew+0xe>
          name = attr->name;
 800ab5e:	682d      	ldr	r5, [r5, #0]
 800ab60:	e7f2      	b.n	800ab48 <osSemaphoreNew+0x7a>

0800ab62 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ab62:	b513      	push	{r0, r1, r4, lr}
 800ab64:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ab66:	b308      	cbz	r0, 800abac <osSemaphoreAcquire+0x4a>
 800ab68:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ab6c:	b1b3      	cbz	r3, 800ab9c <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 800ab6e:	b9e9      	cbnz	r1, 800abac <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ab70:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ab72:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ab74:	f001 f82e 	bl	800bbd4 <xQueueReceiveFromISR>
 800ab78:	2801      	cmp	r0, #1
 800ab7a:	d114      	bne.n	800aba6 <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ab7c:	9b01      	ldr	r3, [sp, #4]
 800ab7e:	b913      	cbnz	r3, 800ab86 <osSemaphoreAcquire+0x24>
  stat = osOK;
 800ab80:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ab82:	b002      	add	sp, #8
 800ab84:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800ab86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ab92:	f3bf 8f4f 	dsb	sy
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	e7f1      	b.n	800ab80 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ab9c:	f000 ff57 	bl	800ba4e <xQueueSemaphoreTake>
 800aba0:	2801      	cmp	r0, #1
 800aba2:	d0ed      	beq.n	800ab80 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800aba4:	b92c      	cbnz	r4, 800abb2 <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800aba6:	f06f 0002 	mvn.w	r0, #2
 800abaa:	e7ea      	b.n	800ab82 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800abac:	f06f 0003 	mvn.w	r0, #3
 800abb0:	e7e7      	b.n	800ab82 <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800abb2:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800abb6:	e7e4      	b.n	800ab82 <osSemaphoreAcquire+0x20>

0800abb8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800abb8:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800abba:	b310      	cbz	r0, 800ac02 <osSemaphoreRelease+0x4a>
 800abbc:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800abc0:	b1b3      	cbz	r3, 800abf0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800abc2:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800abc4:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800abc6:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800abc8:	f000 fe4e 	bl	800b868 <xQueueGiveFromISR>
 800abcc:	2801      	cmp	r0, #1
 800abce:	d115      	bne.n	800abfc <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800abd0:	9b01      	ldr	r3, [sp, #4]
 800abd2:	b913      	cbnz	r3, 800abda <osSemaphoreRelease+0x22>
  stat = osOK;
 800abd4:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800abd6:	b002      	add	sp, #8
 800abd8:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 800abda:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800abde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abe2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	e7f1      	b.n	800abd4 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800abf0:	461a      	mov	r2, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	f000 fd23 	bl	800b63e <xQueueGenericSend>
 800abf8:	2801      	cmp	r0, #1
 800abfa:	d0eb      	beq.n	800abd4 <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 800abfc:	f06f 0002 	mvn.w	r0, #2
 800ac00:	e7e9      	b.n	800abd6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ac02:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ac06:	e7e6      	b.n	800abd6 <osSemaphoreRelease+0x1e>

0800ac08 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	460e      	mov	r6, r1
 800ac0e:	4614      	mov	r4, r2
 800ac10:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac14:	b11f      	cbz	r7, 800ac1e <osMessageQueueNew+0x16>
  hQueue = NULL;
 800ac16:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800ac18:	4628      	mov	r0, r5
 800ac1a:	b003      	add	sp, #12
 800ac1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	d0f9      	beq.n	800ac16 <osMessageQueueNew+0xe>
 800ac22:	2900      	cmp	r1, #0
 800ac24:	d0f7      	beq.n	800ac16 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800ac26:	b1da      	cbz	r2, 800ac60 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac28:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800ac2c:	b183      	cbz	r3, 800ac50 <osMessageQueueNew+0x48>
 800ac2e:	2a4f      	cmp	r2, #79	; 0x4f
 800ac30:	d9f1      	bls.n	800ac16 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac32:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac34:	2a00      	cmp	r2, #0
 800ac36:	d0ee      	beq.n	800ac16 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac38:	434d      	muls	r5, r1
 800ac3a:	6966      	ldr	r6, [r4, #20]
 800ac3c:	42ae      	cmp	r6, r5
 800ac3e:	d3ea      	bcc.n	800ac16 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac40:	9700      	str	r7, [sp, #0]
 800ac42:	f000 fc47 	bl	800b4d4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800ac46:	4605      	mov	r5, r0
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d0e4      	beq.n	800ac16 <osMessageQueueNew+0xe>
        name = attr->name;
 800ac4c:	6824      	ldr	r4, [r4, #0]
 800ac4e:	e011      	b.n	800ac74 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d1e0      	bne.n	800ac16 <osMessageQueueNew+0xe>
 800ac54:	6923      	ldr	r3, [r4, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1dd      	bne.n	800ac16 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac5a:	6963      	ldr	r3, [r4, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1da      	bne.n	800ac16 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac60:	4628      	mov	r0, r5
 800ac62:	2200      	movs	r2, #0
 800ac64:	4631      	mov	r1, r6
 800ac66:	f000 fc83 	bl	800b570 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	d0d2      	beq.n	800ac16 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800ac70:	2c00      	cmp	r4, #0
 800ac72:	d1eb      	bne.n	800ac4c <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800ac74:	4621      	mov	r1, r4
 800ac76:	4628      	mov	r0, r5
 800ac78:	f000 fffc 	bl	800bc74 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800ac7c:	e7cc      	b.n	800ac18 <osMessageQueueNew+0x10>

0800ac7e <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac80:	461c      	mov	r4, r3
 800ac82:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ac86:	b1c6      	cbz	r6, 800acba <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac88:	b318      	cbz	r0, 800acd2 <osMessageQueuePut+0x54>
 800ac8a:	b311      	cbz	r1, 800acd2 <osMessageQueuePut+0x54>
 800ac8c:	bb0b      	cbnz	r3, 800acd2 <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac8e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ac90:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac92:	f000 fd87 	bl	800b7a4 <xQueueGenericSendFromISR>
 800ac96:	2801      	cmp	r0, #1
 800ac98:	d118      	bne.n	800accc <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	b913      	cbnz	r3, 800aca4 <osMessageQueuePut+0x26>
  stat = osOK;
 800ac9e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800aca0:	b002      	add	sp, #8
 800aca2:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800aca4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	e7f1      	b.n	800ac9e <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800acba:	b150      	cbz	r0, 800acd2 <osMessageQueuePut+0x54>
 800acbc:	b149      	cbz	r1, 800acd2 <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800acbe:	4633      	mov	r3, r6
 800acc0:	4622      	mov	r2, r4
 800acc2:	f000 fcbc 	bl	800b63e <xQueueGenericSend>
 800acc6:	2801      	cmp	r0, #1
 800acc8:	d0e9      	beq.n	800ac9e <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 800acca:	b92c      	cbnz	r4, 800acd8 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 800accc:	f06f 0002 	mvn.w	r0, #2
 800acd0:	e7e6      	b.n	800aca0 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 800acd2:	f06f 0003 	mvn.w	r0, #3
 800acd6:	e7e3      	b.n	800aca0 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 800acd8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800acdc:	e7e0      	b.n	800aca0 <osMessageQueuePut+0x22>

0800acde <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800acde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ace0:	461c      	mov	r4, r3
 800ace2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800ace6:	b1c3      	cbz	r3, 800ad1a <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ace8:	b310      	cbz	r0, 800ad30 <osMessageQueueGet+0x52>
 800acea:	b309      	cbz	r1, 800ad30 <osMessageQueueGet+0x52>
 800acec:	bb04      	cbnz	r4, 800ad30 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800acee:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800acf0:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800acf2:	f000 ff6f 	bl	800bbd4 <xQueueReceiveFromISR>
 800acf6:	2801      	cmp	r0, #1
 800acf8:	d117      	bne.n	800ad2a <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	b913      	cbnz	r3, 800ad04 <osMessageQueueGet+0x26>
  stat = osOK;
 800acfe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800ad00:	b003      	add	sp, #12
 800ad02:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800ad04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ad08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad0c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	e7f1      	b.n	800acfe <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad1a:	b148      	cbz	r0, 800ad30 <osMessageQueueGet+0x52>
 800ad1c:	b141      	cbz	r1, 800ad30 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad1e:	4622      	mov	r2, r4
 800ad20:	f000 fdf6 	bl	800b910 <xQueueReceive>
 800ad24:	2801      	cmp	r0, #1
 800ad26:	d0ea      	beq.n	800acfe <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 800ad28:	b92c      	cbnz	r4, 800ad36 <osMessageQueueGet+0x58>
          stat = osErrorResource;
 800ad2a:	f06f 0002 	mvn.w	r0, #2
 800ad2e:	e7e7      	b.n	800ad00 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 800ad30:	f06f 0003 	mvn.w	r0, #3
 800ad34:	e7e4      	b.n	800ad00 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 800ad36:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800ad3a:	e7e1      	b.n	800ad00 <osMessageQueueGet+0x22>

0800ad3c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad3c:	4b03      	ldr	r3, [pc, #12]	; (800ad4c <vApplicationGetIdleTaskMemory+0x10>)
 800ad3e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad40:	4b03      	ldr	r3, [pc, #12]	; (800ad50 <vApplicationGetIdleTaskMemory+0x14>)
 800ad42:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	6013      	str	r3, [r2, #0]
}
 800ad48:	4770      	bx	lr
 800ad4a:	bf00      	nop
 800ad4c:	24006638 	.word	0x24006638
 800ad50:	24006438 	.word	0x24006438

0800ad54 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <vApplicationGetTimerTaskMemory+0x10>)
 800ad56:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad58:	4b03      	ldr	r3, [pc, #12]	; (800ad68 <vApplicationGetTimerTaskMemory+0x14>)
 800ad5a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad60:	6013      	str	r3, [r2, #0]
}
 800ad62:	4770      	bx	lr
 800ad64:	24006a9c 	.word	0x24006a9c
 800ad68:	2400669c 	.word	0x2400669c

0800ad6c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad6c:	4b0f      	ldr	r3, [pc, #60]	; (800adac <prvInsertBlockIntoFreeList+0x40>)
{
 800ad6e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad70:	461a      	mov	r2, r3
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4283      	cmp	r3, r0
 800ad76:	d3fb      	bcc.n	800ad70 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad78:	6854      	ldr	r4, [r2, #4]
 800ad7a:	1911      	adds	r1, r2, r4
 800ad7c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad7e:	bf01      	itttt	eq
 800ad80:	6841      	ldreq	r1, [r0, #4]
 800ad82:	4610      	moveq	r0, r2
 800ad84:	1909      	addeq	r1, r1, r4
 800ad86:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad88:	6844      	ldr	r4, [r0, #4]
 800ad8a:	1901      	adds	r1, r0, r4
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	d107      	bne.n	800ada0 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad90:	4907      	ldr	r1, [pc, #28]	; (800adb0 <prvInsertBlockIntoFreeList+0x44>)
 800ad92:	6809      	ldr	r1, [r1, #0]
 800ad94:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad96:	bf1f      	itttt	ne
 800ad98:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad9a:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad9c:	1909      	addne	r1, r1, r4
 800ad9e:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ada0:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ada2:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ada4:	bf18      	it	ne
 800ada6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	bf00      	nop
 800adac:	2400eb14 	.word	0x2400eb14
 800adb0:	24006afc 	.word	0x24006afc

0800adb4 <pvPortMalloc>:
{
 800adb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800adba:	f001 f985 	bl	800c0c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800adbe:	4842      	ldr	r0, [pc, #264]	; (800aec8 <pvPortMalloc+0x114>)
 800adc0:	4d42      	ldr	r5, [pc, #264]	; (800aecc <pvPortMalloc+0x118>)
 800adc2:	6803      	ldr	r3, [r0, #0]
 800adc4:	bb0b      	cbnz	r3, 800ae0a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800adc6:	4942      	ldr	r1, [pc, #264]	; (800aed0 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adc8:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adca:	4e42      	ldr	r6, [pc, #264]	; (800aed4 <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adcc:	bf1b      	ittet	ne
 800adce:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800add0:	f501 4200 	addne.w	r2, r1, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800add4:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800add8:	f023 0307 	bicne.w	r3, r3, #7
 800addc:	bf1c      	itt	ne
 800adde:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ade0:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 800ade2:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ade4:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ade6:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ade8:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 800adea:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adec:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 800adf0:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800adf4:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 800adf6:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800adf8:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adfc:	4a36      	ldr	r2, [pc, #216]	; (800aed8 <pvPortMalloc+0x124>)
 800adfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae00:	4a36      	ldr	r2, [pc, #216]	; (800aedc <pvPortMalloc+0x128>)
 800ae02:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae08:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae0a:	682f      	ldr	r7, [r5, #0]
 800ae0c:	4227      	tst	r7, r4
 800ae0e:	d155      	bne.n	800aebc <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 800ae10:	2c00      	cmp	r4, #0
 800ae12:	d046      	beq.n	800aea2 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 800ae14:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae18:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae1a:	bf1c      	itt	ne
 800ae1c:	f023 0307 	bicne.w	r3, r3, #7
 800ae20:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d04a      	beq.n	800aebc <pvPortMalloc+0x108>
 800ae26:	4c2d      	ldr	r4, [pc, #180]	; (800aedc <pvPortMalloc+0x128>)
 800ae28:	6826      	ldr	r6, [r4, #0]
 800ae2a:	429e      	cmp	r6, r3
 800ae2c:	d346      	bcc.n	800aebc <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 800ae2e:	4a29      	ldr	r2, [pc, #164]	; (800aed4 <pvPortMalloc+0x120>)
 800ae30:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae32:	6869      	ldr	r1, [r5, #4]
 800ae34:	4299      	cmp	r1, r3
 800ae36:	d204      	bcs.n	800ae42 <pvPortMalloc+0x8e>
 800ae38:	f8d5 c000 	ldr.w	ip, [r5]
 800ae3c:	f1bc 0f00 	cmp.w	ip, #0
 800ae40:	d115      	bne.n	800ae6e <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800ae42:	6800      	ldr	r0, [r0, #0]
 800ae44:	42a8      	cmp	r0, r5
 800ae46:	d039      	beq.n	800aebc <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae48:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae4a:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae4c:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae50:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae52:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae54:	d912      	bls.n	800ae7c <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae56:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae58:	0742      	lsls	r2, r0, #29
 800ae5a:	d00b      	beq.n	800ae74 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	e7fe      	b.n	800ae6c <pvPortMalloc+0xb8>
 800ae6e:	462a      	mov	r2, r5
 800ae70:	4665      	mov	r5, ip
 800ae72:	e7de      	b.n	800ae32 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae74:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae76:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae78:	f7ff ff78 	bl	800ad6c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae7c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae7e:	4916      	ldr	r1, [pc, #88]	; (800aed8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae80:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae82:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 800ae84:	4a16      	ldr	r2, [pc, #88]	; (800aee0 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 800ae86:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae88:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800ae8a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800ae8c:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae8e:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae90:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae92:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 800ae96:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae9a:	bf38      	it	cc
 800ae9c:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae9e:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800aea0:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800aea2:	f001 f9b5 	bl	800c210 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aea6:	0763      	lsls	r3, r4, #29
 800aea8:	d00a      	beq.n	800aec0 <pvPortMalloc+0x10c>
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	e7fe      	b.n	800aeba <pvPortMalloc+0x106>
void *pvReturn = NULL;
 800aebc:	2400      	movs	r4, #0
 800aebe:	e7f0      	b.n	800aea2 <pvPortMalloc+0xee>
}
 800aec0:	4620      	mov	r0, r4
 800aec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec6:	bf00      	nop
 800aec8:	24006afc 	.word	0x24006afc
 800aecc:	2400eb00 	.word	0x2400eb00
 800aed0:	24006b00 	.word	0x24006b00
 800aed4:	2400eb14 	.word	0x2400eb14
 800aed8:	2400eb08 	.word	0x2400eb08
 800aedc:	2400eb04 	.word	0x2400eb04
 800aee0:	2400eb0c 	.word	0x2400eb0c

0800aee4 <vPortFree>:
{
 800aee4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800aee6:	4604      	mov	r4, r0
 800aee8:	b390      	cbz	r0, 800af50 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aeea:	4a1a      	ldr	r2, [pc, #104]	; (800af54 <vPortFree+0x70>)
 800aeec:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800aef0:	6812      	ldr	r2, [r2, #0]
 800aef2:	4213      	tst	r3, r2
 800aef4:	d108      	bne.n	800af08 <vPortFree+0x24>
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	e7fe      	b.n	800af06 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af08:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800af0c:	b141      	cbz	r1, 800af20 <vPortFree+0x3c>
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	e7fe      	b.n	800af1e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af20:	ea23 0302 	bic.w	r3, r3, r2
 800af24:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800af28:	f001 f8ce 	bl	800c0c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af2c:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <vPortFree+0x74>)
 800af2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af32:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af36:	6811      	ldr	r1, [r2, #0]
 800af38:	440b      	add	r3, r1
 800af3a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af3c:	f7ff ff16 	bl	800ad6c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af40:	4a06      	ldr	r2, [pc, #24]	; (800af5c <vPortFree+0x78>)
 800af42:	6813      	ldr	r3, [r2, #0]
 800af44:	3301      	adds	r3, #1
}
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800af4a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800af4c:	f001 b960 	b.w	800c210 <xTaskResumeAll>
}
 800af50:	bd10      	pop	{r4, pc}
 800af52:	bf00      	nop
 800af54:	2400eb00 	.word	0x2400eb00
 800af58:	2400eb04 	.word	0x2400eb04
 800af5c:	2400eb10 	.word	0x2400eb10

0800af60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af60:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af64:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af68:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af6a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af6c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af74:	4770      	bx	lr

0800af76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af7a:	4770      	bx	lr

0800af7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800af7c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af7e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800af80:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800af8a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800af8c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800af8e:	3301      	adds	r3, #1
 800af90:	6003      	str	r3, [r0, #0]
}
 800af92:	4770      	bx	lr

0800af94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af94:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af96:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af98:	1c63      	adds	r3, r4, #1
 800af9a:	d10a      	bne.n	800afb2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af9c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afa2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afa4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800afa6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800afa8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800afaa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800afac:	3301      	adds	r3, #1
 800afae:	6003      	str	r3, [r0, #0]
}
 800afb0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afb2:	f100 0208 	add.w	r2, r0, #8
 800afb6:	4613      	mov	r3, r2
 800afb8:	6852      	ldr	r2, [r2, #4]
 800afba:	6815      	ldr	r5, [r2, #0]
 800afbc:	42a5      	cmp	r5, r4
 800afbe:	d9fa      	bls.n	800afb6 <vListInsert+0x22>
 800afc0:	e7ed      	b.n	800af9e <vListInsert+0xa>

0800afc2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800afc2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800afc4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800afc8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800afca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800afcc:	6859      	ldr	r1, [r3, #4]
 800afce:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800afd0:	bf08      	it	eq
 800afd2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afd4:	2200      	movs	r2, #0
 800afd6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	3a01      	subs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800afde:	6818      	ldr	r0, [r3, #0]
}
 800afe0:	4770      	bx	lr
	...

0800afe4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800afe4:	4808      	ldr	r0, [pc, #32]	; (800b008 <prvPortStartFirstTask+0x24>)
 800afe6:	6800      	ldr	r0, [r0, #0]
 800afe8:	6800      	ldr	r0, [r0, #0]
 800afea:	f380 8808 	msr	MSP, r0
 800afee:	f04f 0000 	mov.w	r0, #0
 800aff2:	f380 8814 	msr	CONTROL, r0
 800aff6:	b662      	cpsie	i
 800aff8:	b661      	cpsie	f
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	df00      	svc	0
 800b004:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b006:	0000      	.short	0x0000
 800b008:	e000ed08 	.word	0xe000ed08

0800b00c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b00c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b01c <vPortEnableVFP+0x10>
 800b010:	6801      	ldr	r1, [r0, #0]
 800b012:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b016:	6001      	str	r1, [r0, #0]
 800b018:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b01a:	0000      	.short	0x0000
 800b01c:	e000ed88 	.word	0xe000ed88

0800b020 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b020:	2300      	movs	r3, #0
{
 800b022:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b024:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b026:	4b0d      	ldr	r3, [pc, #52]	; (800b05c <prvTaskExitError+0x3c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3301      	adds	r3, #1
 800b02c:	d008      	beq.n	800b040 <prvTaskExitError+0x20>
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	e7fe      	b.n	800b03e <prvTaskExitError+0x1e>
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0fc      	beq.n	800b050 <prvTaskExitError+0x30>
}
 800b056:	b002      	add	sp, #8
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	2400005c 	.word	0x2400005c

0800b060 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b064:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b068:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b06c:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b06e:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b070:	4b03      	ldr	r3, [pc, #12]	; (800b080 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b072:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b074:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b076:	f06f 0302 	mvn.w	r3, #2
 800b07a:	6203      	str	r3, [r0, #32]
}
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	0800b021 	.word	0x0800b021
	...

0800b090 <SVC_Handler>:
	__asm volatile (
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <pxCurrentTCBConst2>)
 800b092:	6819      	ldr	r1, [r3, #0]
 800b094:	6808      	ldr	r0, [r1, #0]
 800b096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b09a:	f380 8809 	msr	PSP, r0
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f04f 0000 	mov.w	r0, #0
 800b0a6:	f380 8811 	msr	BASEPRI, r0
 800b0aa:	4770      	bx	lr
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <pxCurrentTCBConst2>:
 800b0b0:	2400eb64 	.word	0x2400eb64

0800b0b4 <vPortEnterCritical>:
 800b0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b8:	f383 8811 	msr	BASEPRI, r3
 800b0bc:	f3bf 8f6f 	isb	sy
 800b0c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b0c4:	4a0a      	ldr	r2, [pc, #40]	; (800b0f0 <vPortEnterCritical+0x3c>)
 800b0c6:	6813      	ldr	r3, [r2, #0]
 800b0c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b0ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b0cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b0ce:	d10e      	bne.n	800b0ee <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b0d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	b143      	cbz	r3, 800b0ee <vPortEnterCritical+0x3a>
 800b0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	e7fe      	b.n	800b0ec <vPortEnterCritical+0x38>
}
 800b0ee:	4770      	bx	lr
 800b0f0:	2400005c 	.word	0x2400005c

0800b0f4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b0f4:	4a08      	ldr	r2, [pc, #32]	; (800b118 <vPortExitCritical+0x24>)
 800b0f6:	6813      	ldr	r3, [r2, #0]
 800b0f8:	b943      	cbnz	r3, 800b10c <vPortExitCritical+0x18>
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	e7fe      	b.n	800b10a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b10c:	3b01      	subs	r3, #1
 800b10e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b110:	b90b      	cbnz	r3, 800b116 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b112:	f383 8811 	msr	BASEPRI, r3
}
 800b116:	4770      	bx	lr
 800b118:	2400005c 	.word	0x2400005c
 800b11c:	00000000 	.word	0x00000000

0800b120 <PendSV_Handler>:
	__asm volatile
 800b120:	f3ef 8009 	mrs	r0, PSP
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	4b15      	ldr	r3, [pc, #84]	; (800b180 <pxCurrentTCBConst>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	f01e 0f10 	tst.w	lr, #16
 800b130:	bf08      	it	eq
 800b132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13a:	6010      	str	r0, [r2, #0]
 800b13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b140:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b144:	f380 8811 	msr	BASEPRI, r0
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	f3bf 8f6f 	isb	sy
 800b150:	f001 f93c 	bl	800c3cc <vTaskSwitchContext>
 800b154:	f04f 0000 	mov.w	r0, #0
 800b158:	f380 8811 	msr	BASEPRI, r0
 800b15c:	bc09      	pop	{r0, r3}
 800b15e:	6819      	ldr	r1, [r3, #0]
 800b160:	6808      	ldr	r0, [r1, #0]
 800b162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b166:	f01e 0f10 	tst.w	lr, #16
 800b16a:	bf08      	it	eq
 800b16c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b170:	f380 8809 	msr	PSP, r0
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	f3af 8000 	nop.w

0800b180 <pxCurrentTCBConst>:
 800b180:	2400eb64 	.word	0x2400eb64

0800b184 <xPortSysTickHandler>:
{
 800b184:	b508      	push	{r3, lr}
	__asm volatile
 800b186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b196:	f000 ffa5 	bl	800c0e4 <xTaskIncrementTick>
 800b19a:	b128      	cbz	r0, 800b1a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b19c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f383 8811 	msr	BASEPRI, r3
}
 800b1ae:	bd08      	pop	{r3, pc}

0800b1b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800b1b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b1ba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1be:	4b04      	ldr	r3, [pc, #16]	; (800b1d0 <vPortSetupTimerInterrupt+0x20>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1ca:	2307      	movs	r3, #7
 800b1cc:	6113      	str	r3, [r2, #16]
}
 800b1ce:	4770      	bx	lr
 800b1d0:	2400004c 	.word	0x2400004c

0800b1d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800b1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1da:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 800b1de:	4a3a      	ldr	r2, [pc, #232]	; (800b2c8 <xPortStartScheduler+0xf4>)
 800b1e0:	4291      	cmp	r1, r2
 800b1e2:	d108      	bne.n	800b1f6 <xPortStartScheduler+0x22>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	e7fe      	b.n	800b1f4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b1f6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800b1fa:	4b34      	ldr	r3, [pc, #208]	; (800b2cc <xPortStartScheduler+0xf8>)
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d108      	bne.n	800b212 <xPortStartScheduler+0x3e>
 800b200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b204:	f383 8811 	msr	BASEPRI, r3
 800b208:	f3bf 8f6f 	isb	sy
 800b20c:	f3bf 8f4f 	dsb	sy
 800b210:	e7fe      	b.n	800b210 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b212:	4b2f      	ldr	r3, [pc, #188]	; (800b2d0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b214:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b216:	781a      	ldrb	r2, [r3, #0]
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b21c:	22ff      	movs	r2, #255	; 0xff
 800b21e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b220:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b222:	4a2c      	ldr	r2, [pc, #176]	; (800b2d4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b224:	b2db      	uxtb	r3, r3
 800b226:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b22a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b22e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b232:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b234:	2307      	movs	r3, #7
 800b236:	4a28      	ldr	r2, [pc, #160]	; (800b2d8 <xPortStartScheduler+0x104>)
 800b238:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b23a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800b23e:	1e5c      	subs	r4, r3, #1
 800b240:	0600      	lsls	r0, r0, #24
 800b242:	d40c      	bmi.n	800b25e <xPortStartScheduler+0x8a>
 800b244:	b111      	cbz	r1, 800b24c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b246:	2b03      	cmp	r3, #3
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	d011      	beq.n	800b270 <xPortStartScheduler+0x9c>
 800b24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	e7fe      	b.n	800b25c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b25e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b262:	2101      	movs	r1, #1
 800b264:	005b      	lsls	r3, r3, #1
 800b266:	b2db      	uxtb	r3, r3
 800b268:	f88d 3003 	strb.w	r3, [sp, #3]
 800b26c:	4623      	mov	r3, r4
 800b26e:	e7e4      	b.n	800b23a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b270:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b274:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 800b278:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b27a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b27c:	9b01      	ldr	r3, [sp, #4]
 800b27e:	4a14      	ldr	r2, [pc, #80]	; (800b2d0 <xPortStartScheduler+0xfc>)
 800b280:	b2db      	uxtb	r3, r3
 800b282:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b284:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b28c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b290:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 800b294:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b298:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800b29c:	f7ff ff88 	bl	800b1b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b2a0:	4b0e      	ldr	r3, [pc, #56]	; (800b2dc <xPortStartScheduler+0x108>)
 800b2a2:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b2a4:	f7ff feb2 	bl	800b00c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2a8:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 800b2ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b2b0:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 800b2b4:	f7ff fe96 	bl	800afe4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b2b8:	f001 f888 	bl	800c3cc <vTaskSwitchContext>
}
 800b2bc:	4628      	mov	r0, r5
	prvTaskExitError();
 800b2be:	f7ff feaf 	bl	800b020 <prvTaskExitError>
}
 800b2c2:	b003      	add	sp, #12
 800b2c4:	bd30      	pop	{r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	410fc271 	.word	0x410fc271
 800b2cc:	410fc270 	.word	0x410fc270
 800b2d0:	e000e400 	.word	0xe000e400
 800b2d4:	2400eb1c 	.word	0x2400eb1c
 800b2d8:	2400eb20 	.word	0x2400eb20
 800b2dc:	2400005c 	.word	0x2400005c

0800b2e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b2e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2e4:	2b0f      	cmp	r3, #15
 800b2e6:	d90e      	bls.n	800b306 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2e8:	4a11      	ldr	r2, [pc, #68]	; (800b330 <vPortValidateInterruptPriority+0x50>)
 800b2ea:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2ec:	4a11      	ldr	r2, [pc, #68]	; (800b334 <vPortValidateInterruptPriority+0x54>)
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d908      	bls.n	800b306 <vPortValidateInterruptPriority+0x26>
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	e7fe      	b.n	800b304 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b306:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b30a:	4a0b      	ldr	r2, [pc, #44]	; (800b338 <vPortValidateInterruptPriority+0x58>)
 800b30c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800b310:	6812      	ldr	r2, [r2, #0]
 800b312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b316:	4293      	cmp	r3, r2
 800b318:	d908      	bls.n	800b32c <vPortValidateInterruptPriority+0x4c>
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	e7fe      	b.n	800b32a <vPortValidateInterruptPriority+0x4a>
	}
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	e000e3f0 	.word	0xe000e3f0
 800b334:	2400eb1c 	.word	0x2400eb1c
 800b338:	2400eb20 	.word	0x2400eb20

0800b33c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b33c:	b510      	push	{r4, lr}
 800b33e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b340:	f7ff feb8 	bl	800b0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b344:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b346:	f7ff fed5 	bl	800b0f4 <vPortExitCritical>

	return xReturn;
}
 800b34a:	fab4 f084 	clz	r0, r4
 800b34e:	0940      	lsrs	r0, r0, #5
 800b350:	bd10      	pop	{r4, pc}

0800b352 <prvCopyDataToQueue>:
{
 800b352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b354:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b356:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800b358:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b35a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b35c:	b952      	cbnz	r2, 800b374 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b35e:	6807      	ldr	r7, [r0, #0]
 800b360:	bb47      	cbnz	r7, 800b3b4 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b362:	6880      	ldr	r0, [r0, #8]
 800b364:	f001 f990 	bl	800c688 <xTaskPriorityDisinherit>
 800b368:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b36a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b36c:	3601      	adds	r6, #1
}
 800b36e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b370:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800b372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b374:	b965      	cbnz	r5, 800b390 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b376:	6840      	ldr	r0, [r0, #4]
 800b378:	f015 f87e 	bl	8020478 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b37c:	6863      	ldr	r3, [r4, #4]
 800b37e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b380:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b382:	68a2      	ldr	r2, [r4, #8]
 800b384:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b386:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b388:	d3f0      	bcc.n	800b36c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	6063      	str	r3, [r4, #4]
 800b38e:	e7ed      	b.n	800b36c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b390:	68c0      	ldr	r0, [r0, #12]
 800b392:	f015 f871 	bl	8020478 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b396:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b398:	68e3      	ldr	r3, [r4, #12]
 800b39a:	4251      	negs	r1, r2
 800b39c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b39e:	6822      	ldr	r2, [r4, #0]
 800b3a0:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b3a2:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b3a4:	bf3e      	ittt	cc
 800b3a6:	68a3      	ldrcc	r3, [r4, #8]
 800b3a8:	185b      	addcc	r3, r3, r1
 800b3aa:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b3ac:	2d02      	cmp	r5, #2
 800b3ae:	d101      	bne.n	800b3b4 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3b0:	b116      	cbz	r6, 800b3b8 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800b3b2:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	e7d9      	b.n	800b36c <prvCopyDataToQueue+0x1a>
 800b3b8:	4635      	mov	r5, r6
 800b3ba:	e7d7      	b.n	800b36c <prvCopyDataToQueue+0x1a>

0800b3bc <prvCopyDataFromQueue>:
{
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800b3c2:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b3c4:	b162      	cbz	r2, 800b3e0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3c6:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3c8:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ca:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b3cc:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3ce:	60dc      	str	r4, [r3, #12]
}
 800b3d0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b3d4:	bf24      	itt	cs
 800b3d6:	6819      	ldrcs	r1, [r3, #0]
 800b3d8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3da:	68d9      	ldr	r1, [r3, #12]
 800b3dc:	f015 b84c 	b.w	8020478 <memcpy>
}
 800b3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <prvUnlockQueue>:
{
 800b3e6:	b570      	push	{r4, r5, r6, lr}
 800b3e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b3ea:	f7ff fe63 	bl	800b0b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b3ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3f2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b3f6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3f8:	2d00      	cmp	r5, #0
 800b3fa:	dc14      	bgt.n	800b426 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b3fc:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3fe:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b402:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800b406:	f7ff fe75 	bl	800b0f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b40a:	f7ff fe53 	bl	800b0b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b40e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800b412:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b414:	2d00      	cmp	r5, #0
 800b416:	dc12      	bgt.n	800b43e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b418:	23ff      	movs	r3, #255	; 0xff
 800b41a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800b41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b422:	f7ff be67 	b.w	800b0f4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0e7      	beq.n	800b3fc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b42c:	4630      	mov	r0, r6
 800b42e:	f001 f849 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b432:	b108      	cbz	r0, 800b438 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b434:	f001 f8d2 	bl	800c5dc <vTaskMissedYield>
			--cTxLock;
 800b438:	3d01      	subs	r5, #1
 800b43a:	b26d      	sxtb	r5, r5
 800b43c:	e7dc      	b.n	800b3f8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b43e:	6923      	ldr	r3, [r4, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d0e9      	beq.n	800b418 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b444:	4630      	mov	r0, r6
 800b446:	f001 f83d 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b44a:	b108      	cbz	r0, 800b450 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b44c:	f001 f8c6 	bl	800c5dc <vTaskMissedYield>
				--cRxLock;
 800b450:	3d01      	subs	r5, #1
 800b452:	b26d      	sxtb	r5, r5
 800b454:	e7de      	b.n	800b414 <prvUnlockQueue+0x2e>

0800b456 <xQueueGenericReset>:
{
 800b456:	b538      	push	{r3, r4, r5, lr}
 800b458:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b45a:	4604      	mov	r4, r0
 800b45c:	b940      	cbnz	r0, 800b470 <xQueueGenericReset+0x1a>
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	e7fe      	b.n	800b46e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800b470:	f7ff fe20 	bl	800b0b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b474:	6822      	ldr	r2, [r4, #0]
 800b476:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b47a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b47c:	434b      	muls	r3, r1
 800b47e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b480:	1a5b      	subs	r3, r3, r1
 800b482:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b484:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b486:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b488:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b48a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b48c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800b48e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800b496:	b9a5      	cbnz	r5, 800b4c2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	b173      	cbz	r3, 800b4ba <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b49c:	f104 0010 	add.w	r0, r4, #16
 800b4a0:	f001 f810 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b4a4:	b148      	cbz	r0, 800b4ba <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800b4a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800b4ba:	f7ff fe1b 	bl	800b0f4 <vPortExitCritical>
}
 800b4be:	2001      	movs	r0, #1
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4c2:	f104 0010 	add.w	r0, r4, #16
 800b4c6:	f7ff fd4b 	bl	800af60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b4ce:	f7ff fd47 	bl	800af60 <vListInitialise>
 800b4d2:	e7f2      	b.n	800b4ba <xQueueGenericReset+0x64>

0800b4d4 <xQueueGenericCreateStatic>:
	{
 800b4d4:	b513      	push	{r0, r1, r4, lr}
 800b4d6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4d8:	b940      	cbnz	r0, 800b4ec <xQueueGenericCreateStatic+0x18>
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	e7fe      	b.n	800b4ea <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800b4ec:	b943      	cbnz	r3, 800b500 <xQueueGenericCreateStatic+0x2c>
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	e7fe      	b.n	800b4fe <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b500:	b14a      	cbz	r2, 800b516 <xQueueGenericCreateStatic+0x42>
 800b502:	b991      	cbnz	r1, 800b52a <xQueueGenericCreateStatic+0x56>
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	e7fe      	b.n	800b514 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b516:	b141      	cbz	r1, 800b52a <xQueueGenericCreateStatic+0x56>
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	f383 8811 	msr	BASEPRI, r3
 800b520:	f3bf 8f6f 	isb	sy
 800b524:	f3bf 8f4f 	dsb	sy
 800b528:	e7fe      	b.n	800b528 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b52a:	2350      	movs	r3, #80	; 0x50
 800b52c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	2b50      	cmp	r3, #80	; 0x50
 800b532:	d008      	beq.n	800b546 <xQueueGenericCreateStatic+0x72>
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	e7fe      	b.n	800b544 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b546:	2900      	cmp	r1, #0
 800b548:	bf08      	it	eq
 800b54a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b54c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b54e:	2301      	movs	r3, #1
 800b550:	6022      	str	r2, [r4, #0]
 800b552:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800b556:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b55a:	4619      	mov	r1, r3
 800b55c:	4620      	mov	r0, r4
 800b55e:	f7ff ff7a 	bl	800b456 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b562:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800b566:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800b568:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800b56c:	b002      	add	sp, #8
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <xQueueGenericCreate>:
	{
 800b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b572:	460d      	mov	r5, r1
 800b574:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b576:	4606      	mov	r6, r0
 800b578:	b940      	cbnz	r0, 800b58c <xQueueGenericCreate+0x1c>
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	e7fe      	b.n	800b58a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b58c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b58e:	3050      	adds	r0, #80	; 0x50
 800b590:	f7ff fc10 	bl	800adb4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b594:	4604      	mov	r4, r0
 800b596:	b170      	cbz	r0, 800b5b6 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b598:	2300      	movs	r3, #0
 800b59a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b59e:	b165      	cbz	r5, 800b5ba <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5a0:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	4620      	mov	r0, r4
 800b5a8:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800b5aa:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b5ae:	f7ff ff52 	bl	800b456 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b5b2:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	e7f2      	b.n	800b5a4 <xQueueGenericCreate+0x34>

0800b5be <xQueueCreateCountingSemaphoreStatic>:
	{
 800b5be:	b513      	push	{r0, r1, r4, lr}
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b5c4:	b940      	cbnz	r0, 800b5d8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800b5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ca:	f383 8811 	msr	BASEPRI, r3
 800b5ce:	f3bf 8f6f 	isb	sy
 800b5d2:	f3bf 8f4f 	dsb	sy
 800b5d6:	e7fe      	b.n	800b5d6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b5d8:	4288      	cmp	r0, r1
 800b5da:	d208      	bcs.n	800b5ee <xQueueCreateCountingSemaphoreStatic+0x30>
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	e7fe      	b.n	800b5ec <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	9200      	str	r2, [sp, #0]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	f7ff ff6d 	bl	800b4d4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800b5fa:	b100      	cbz	r0, 800b5fe <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b5fc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b5fe:	b002      	add	sp, #8
 800b600:	bd10      	pop	{r4, pc}

0800b602 <xQueueCreateCountingSemaphore>:
	{
 800b602:	b510      	push	{r4, lr}
 800b604:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800b606:	b940      	cbnz	r0, 800b61a <xQueueCreateCountingSemaphore+0x18>
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	e7fe      	b.n	800b618 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b61a:	4288      	cmp	r0, r1
 800b61c:	d208      	bcs.n	800b630 <xQueueCreateCountingSemaphore+0x2e>
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	e7fe      	b.n	800b62e <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b630:	2202      	movs	r2, #2
 800b632:	2100      	movs	r1, #0
 800b634:	f7ff ff9c 	bl	800b570 <xQueueGenericCreate>
		if( xHandle != NULL )
 800b638:	b100      	cbz	r0, 800b63c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b63a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800b63c:	bd10      	pop	{r4, pc}

0800b63e <xQueueGenericSend>:
{
 800b63e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b642:	b085      	sub	sp, #20
 800b644:	4688      	mov	r8, r1
 800b646:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b648:	4604      	mov	r4, r0
{
 800b64a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b64c:	b940      	cbnz	r0, 800b660 <xQueueGenericSend+0x22>
 800b64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	e7fe      	b.n	800b65e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b660:	b951      	cbnz	r1, 800b678 <xQueueGenericSend+0x3a>
 800b662:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b664:	b143      	cbz	r3, 800b678 <xQueueGenericSend+0x3a>
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	e7fe      	b.n	800b676 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b678:	2f02      	cmp	r7, #2
 800b67a:	d10b      	bne.n	800b694 <xQueueGenericSend+0x56>
 800b67c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d008      	beq.n	800b694 <xQueueGenericSend+0x56>
 800b682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	e7fe      	b.n	800b692 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b694:	f000 ffa8 	bl	800c5e8 <xTaskGetSchedulerState>
 800b698:	4606      	mov	r6, r0
 800b69a:	b950      	cbnz	r0, 800b6b2 <xQueueGenericSend+0x74>
 800b69c:	9b01      	ldr	r3, [sp, #4]
 800b69e:	b14b      	cbz	r3, 800b6b4 <xQueueGenericSend+0x76>
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	e7fe      	b.n	800b6b0 <xQueueGenericSend+0x72>
 800b6b2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b6b4:	f04f 0900 	mov.w	r9, #0
 800b6b8:	e037      	b.n	800b72a <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6ba:	9d01      	ldr	r5, [sp, #4]
 800b6bc:	b91d      	cbnz	r5, 800b6c6 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800b6be:	f7ff fd19 	bl	800b0f4 <vPortExitCritical>
			return errQUEUE_FULL;
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	e052      	b.n	800b76c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800b6c6:	b916      	cbnz	r6, 800b6ce <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6c8:	a802      	add	r0, sp, #8
 800b6ca:	f000 ff3f 	bl	800c54c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b6ce:	f7ff fd11 	bl	800b0f4 <vPortExitCritical>
		vTaskSuspendAll();
 800b6d2:	f000 fcf9 	bl	800c0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6d6:	f7ff fced 	bl	800b0b4 <vPortEnterCritical>
 800b6da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b6de:	2bff      	cmp	r3, #255	; 0xff
 800b6e0:	d101      	bne.n	800b6e6 <xQueueGenericSend+0xa8>
 800b6e2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800b6e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b6ea:	2bff      	cmp	r3, #255	; 0xff
 800b6ec:	d101      	bne.n	800b6f2 <xQueueGenericSend+0xb4>
 800b6ee:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800b6f2:	f7ff fcff 	bl	800b0f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6f6:	a901      	add	r1, sp, #4
 800b6f8:	a802      	add	r0, sp, #8
 800b6fa:	f000 ff33 	bl	800c564 <xTaskCheckForTimeOut>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	d14a      	bne.n	800b798 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b702:	f7ff fcd7 	bl	800b0b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b706:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b708:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d131      	bne.n	800b772 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b70e:	f7ff fcf1 	bl	800b0f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b712:	9901      	ldr	r1, [sp, #4]
 800b714:	f104 0010 	add.w	r0, r4, #16
 800b718:	f000 fe9c 	bl	800c454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b71c:	4620      	mov	r0, r4
 800b71e:	f7ff fe62 	bl	800b3e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b722:	f000 fd75 	bl	800c210 <xTaskResumeAll>
 800b726:	b360      	cbz	r0, 800b782 <xQueueGenericSend+0x144>
 800b728:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b72a:	f7ff fcc3 	bl	800b0b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b72e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b732:	429a      	cmp	r2, r3
 800b734:	d301      	bcc.n	800b73a <xQueueGenericSend+0xfc>
 800b736:	2f02      	cmp	r7, #2
 800b738:	d1bf      	bne.n	800b6ba <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b73a:	463a      	mov	r2, r7
 800b73c:	4641      	mov	r1, r8
 800b73e:	4620      	mov	r0, r4
 800b740:	f7ff fe07 	bl	800b352 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b744:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b746:	b11b      	cbz	r3, 800b750 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b748:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b74c:	f000 feba 	bl	800c4c4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800b750:	b148      	cbz	r0, 800b766 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800b752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b75a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b766:	f7ff fcc5 	bl	800b0f4 <vPortExitCritical>
				return pdPASS;
 800b76a:	2001      	movs	r0, #1
}
 800b76c:	b005      	add	sp, #20
 800b76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800b772:	f7ff fcbf 	bl	800b0f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff fe35 	bl	800b3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b77c:	f000 fd48 	bl	800c210 <xTaskResumeAll>
 800b780:	e7d2      	b.n	800b728 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800b782:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	e7c7      	b.n	800b728 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff fe24 	bl	800b3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b79e:	f000 fd37 	bl	800c210 <xTaskResumeAll>
 800b7a2:	e78e      	b.n	800b6c2 <xQueueGenericSend+0x84>

0800b7a4 <xQueueGenericSendFromISR>:
{
 800b7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	4689      	mov	r9, r1
 800b7aa:	4690      	mov	r8, r2
 800b7ac:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	b940      	cbnz	r0, 800b7c4 <xQueueGenericSendFromISR+0x20>
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	e7fe      	b.n	800b7c2 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7c4:	b951      	cbnz	r1, 800b7dc <xQueueGenericSendFromISR+0x38>
 800b7c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b7c8:	b143      	cbz	r3, 800b7dc <xQueueGenericSendFromISR+0x38>
 800b7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	e7fe      	b.n	800b7da <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7dc:	2f02      	cmp	r7, #2
 800b7de:	d10b      	bne.n	800b7f8 <xQueueGenericSendFromISR+0x54>
 800b7e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d008      	beq.n	800b7f8 <xQueueGenericSendFromISR+0x54>
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	e7fe      	b.n	800b7f6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7f8:	f7ff fd72 	bl	800b2e0 <vPortValidateInterruptPriority>
	__asm volatile
 800b7fc:	f3ef 8611 	mrs	r6, BASEPRI
 800b800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b810:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800b812:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b814:	429a      	cmp	r2, r3
 800b816:	d301      	bcc.n	800b81c <xQueueGenericSendFromISR+0x78>
 800b818:	2f02      	cmp	r7, #2
 800b81a:	d123      	bne.n	800b864 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b81c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b820:	463a      	mov	r2, r7
 800b822:	4649      	mov	r1, r9
 800b824:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800b826:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b828:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b82a:	f7ff fd92 	bl	800b352 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b82e:	1c6b      	adds	r3, r5, #1
 800b830:	d113      	bne.n	800b85a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b834:	b90b      	cbnz	r3, 800b83a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800b836:	2001      	movs	r0, #1
 800b838:	e00b      	b.n	800b852 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b83a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b83e:	f000 fe41 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b842:	2800      	cmp	r0, #0
 800b844:	d0f7      	beq.n	800b836 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800b846:	f1b8 0f00 	cmp.w	r8, #0
 800b84a:	d0f4      	beq.n	800b836 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b84c:	2001      	movs	r0, #1
 800b84e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800b852:	f386 8811 	msr	BASEPRI, r6
}
 800b856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b85a:	3501      	adds	r5, #1
 800b85c:	b26d      	sxtb	r5, r5
 800b85e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800b862:	e7e8      	b.n	800b836 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800b864:	2000      	movs	r0, #0
 800b866:	e7f4      	b.n	800b852 <xQueueGenericSendFromISR+0xae>

0800b868 <xQueueGiveFromISR>:
{
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b86c:	4604      	mov	r4, r0
 800b86e:	b940      	cbnz	r0, 800b882 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	e7fe      	b.n	800b880 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800b882:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b884:	b143      	cbz	r3, 800b898 <xQueueGiveFromISR+0x30>
 800b886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b88a:	f383 8811 	msr	BASEPRI, r3
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	f3bf 8f4f 	dsb	sy
 800b896:	e7fe      	b.n	800b896 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b898:	6803      	ldr	r3, [r0, #0]
 800b89a:	b953      	cbnz	r3, 800b8b2 <xQueueGiveFromISR+0x4a>
 800b89c:	6883      	ldr	r3, [r0, #8]
 800b89e:	b143      	cbz	r3, 800b8b2 <xQueueGiveFromISR+0x4a>
 800b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a4:	f383 8811 	msr	BASEPRI, r3
 800b8a8:	f3bf 8f6f 	isb	sy
 800b8ac:	f3bf 8f4f 	dsb	sy
 800b8b0:	e7fe      	b.n	800b8b0 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8b2:	f7ff fd15 	bl	800b2e0 <vPortValidateInterruptPriority>
	__asm volatile
 800b8b6:	f3ef 8611 	mrs	r6, BASEPRI
 800b8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b8cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d91c      	bls.n	800b90c <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8d6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800b8d8:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800b8da:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b8dc:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800b8de:	d110      	bne.n	800b902 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e2:	b90b      	cbnz	r3, 800b8e8 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	e009      	b.n	800b8fc <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b8ec:	f000 fdea 	bl	800c4c4 <xTaskRemoveFromEventList>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d0f7      	beq.n	800b8e4 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800b8f4:	2d00      	cmp	r5, #0
 800b8f6:	d0f5      	beq.n	800b8e4 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	6028      	str	r0, [r5, #0]
	__asm volatile
 800b8fc:	f386 8811 	msr	BASEPRI, r6
}
 800b900:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b902:	3301      	adds	r3, #1
 800b904:	b25b      	sxtb	r3, r3
 800b906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b90a:	e7eb      	b.n	800b8e4 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800b90c:	2000      	movs	r0, #0
 800b90e:	e7f5      	b.n	800b8fc <xQueueGiveFromISR+0x94>

0800b910 <xQueueReceive>:
{
 800b910:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b914:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800b916:	4604      	mov	r4, r0
{
 800b918:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b91a:	b940      	cbnz	r0, 800b92e <xQueueReceive+0x1e>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	e7fe      	b.n	800b92c <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b92e:	b951      	cbnz	r1, 800b946 <xQueueReceive+0x36>
 800b930:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800b932:	b143      	cbz	r3, 800b946 <xQueueReceive+0x36>
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	f383 8811 	msr	BASEPRI, r3
 800b93c:	f3bf 8f6f 	isb	sy
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	e7fe      	b.n	800b944 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b946:	f000 fe4f 	bl	800c5e8 <xTaskGetSchedulerState>
 800b94a:	4606      	mov	r6, r0
 800b94c:	b950      	cbnz	r0, 800b964 <xQueueReceive+0x54>
 800b94e:	9b01      	ldr	r3, [sp, #4]
 800b950:	b14b      	cbz	r3, 800b966 <xQueueReceive+0x56>
 800b952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	e7fe      	b.n	800b962 <xQueueReceive+0x52>
 800b964:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800b966:	f04f 0800 	mov.w	r8, #0
 800b96a:	e03d      	b.n	800b9e8 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b96c:	9d01      	ldr	r5, [sp, #4]
 800b96e:	b91d      	cbnz	r5, 800b978 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800b970:	f7ff fbc0 	bl	800b0f4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800b974:	2000      	movs	r0, #0
 800b976:	e056      	b.n	800ba26 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800b978:	b916      	cbnz	r6, 800b980 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b97a:	a802      	add	r0, sp, #8
 800b97c:	f000 fde6 	bl	800c54c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800b980:	f7ff fbb8 	bl	800b0f4 <vPortExitCritical>
		vTaskSuspendAll();
 800b984:	f000 fba0 	bl	800c0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b988:	f7ff fb94 	bl	800b0b4 <vPortEnterCritical>
 800b98c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b990:	2bff      	cmp	r3, #255	; 0xff
 800b992:	d101      	bne.n	800b998 <xQueueReceive+0x88>
 800b994:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800b998:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b99c:	2bff      	cmp	r3, #255	; 0xff
 800b99e:	d101      	bne.n	800b9a4 <xQueueReceive+0x94>
 800b9a0:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800b9a4:	f7ff fba6 	bl	800b0f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9a8:	a901      	add	r1, sp, #4
 800b9aa:	a802      	add	r0, sp, #8
 800b9ac:	f000 fdda 	bl	800c564 <xTaskCheckForTimeOut>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d141      	bne.n	800ba38 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff fcc1 	bl	800b33c <prvIsQueueEmpty>
 800b9ba:	b3b8      	cbz	r0, 800ba2c <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b9c2:	f000 fd47 	bl	800c454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7ff fd0d 	bl	800b3e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9cc:	f000 fc20 	bl	800c210 <xTaskResumeAll>
 800b9d0:	b948      	cbnz	r0, 800b9e6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800b9d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b9de:	f3bf 8f4f 	dsb	sy
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800b9e8:	f7ff fb64 	bl	800b0b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b9ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9ee:	2d00      	cmp	r5, #0
 800b9f0:	d0bc      	beq.n	800b96c <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9f2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b9f4:	4639      	mov	r1, r7
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f7ff fce0 	bl	800b3bc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b9fc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9fe:	6923      	ldr	r3, [r4, #16]
 800ba00:	b173      	cbz	r3, 800ba20 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba02:	f104 0010 	add.w	r0, r4, #16
 800ba06:	f000 fd5d 	bl	800c4c4 <xTaskRemoveFromEventList>
 800ba0a:	b148      	cbz	r0, 800ba20 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800ba0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800ba10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800ba18:	f3bf 8f4f 	dsb	sy
 800ba1c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ba20:	f7ff fb68 	bl	800b0f4 <vPortExitCritical>
				return pdPASS;
 800ba24:	2001      	movs	r0, #1
}
 800ba26:	b004      	add	sp, #16
 800ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff fcda 	bl	800b3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba32:	f000 fbed 	bl	800c210 <xTaskResumeAll>
 800ba36:	e7d6      	b.n	800b9e6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f7ff fcd4 	bl	800b3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba3e:	f000 fbe7 	bl	800c210 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff fc7a 	bl	800b33c <prvIsQueueEmpty>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d0cc      	beq.n	800b9e6 <xQueueReceive+0xd6>
 800ba4c:	e792      	b.n	800b974 <xQueueReceive+0x64>

0800ba4e <xQueueSemaphoreTake>:
{
 800ba4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba50:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800ba52:	4604      	mov	r4, r0
{
 800ba54:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ba56:	b940      	cbnz	r0, 800ba6a <xQueueSemaphoreTake+0x1c>
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	e7fe      	b.n	800ba68 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba6a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800ba6c:	b145      	cbz	r5, 800ba80 <xQueueSemaphoreTake+0x32>
 800ba6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba72:	f383 8811 	msr	BASEPRI, r3
 800ba76:	f3bf 8f6f 	isb	sy
 800ba7a:	f3bf 8f4f 	dsb	sy
 800ba7e:	e7fe      	b.n	800ba7e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba80:	f000 fdb2 	bl	800c5e8 <xTaskGetSchedulerState>
 800ba84:	4606      	mov	r6, r0
 800ba86:	b950      	cbnz	r0, 800ba9e <xQueueSemaphoreTake+0x50>
 800ba88:	9b01      	ldr	r3, [sp, #4]
 800ba8a:	b15b      	cbz	r3, 800baa4 <xQueueSemaphoreTake+0x56>
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	f383 8811 	msr	BASEPRI, r3
 800ba94:	f3bf 8f6f 	isb	sy
 800ba98:	f3bf 8f4f 	dsb	sy
 800ba9c:	e7fe      	b.n	800ba9c <xQueueSemaphoreTake+0x4e>
 800ba9e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800baa0:	2700      	movs	r7, #0
 800baa2:	e053      	b.n	800bb4c <xQueueSemaphoreTake+0xfe>
 800baa4:	4605      	mov	r5, r0
 800baa6:	e7fb      	b.n	800baa0 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800baa8:	9b01      	ldr	r3, [sp, #4]
 800baaa:	b963      	cbnz	r3, 800bac6 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800baac:	b145      	cbz	r5, 800bac0 <xQueueSemaphoreTake+0x72>
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	e7fe      	b.n	800babe <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800bac0:	f7ff fb18 	bl	800b0f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bac4:	e062      	b.n	800bb8c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800bac6:	b916      	cbnz	r6, 800bace <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bac8:	a802      	add	r0, sp, #8
 800baca:	f000 fd3f 	bl	800c54c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bace:	f7ff fb11 	bl	800b0f4 <vPortExitCritical>
		vTaskSuspendAll();
 800bad2:	f000 faf9 	bl	800c0c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bad6:	f7ff faed 	bl	800b0b4 <vPortEnterCritical>
 800bada:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bade:	2bff      	cmp	r3, #255	; 0xff
 800bae0:	d101      	bne.n	800bae6 <xQueueSemaphoreTake+0x98>
 800bae2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800bae6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800baea:	2bff      	cmp	r3, #255	; 0xff
 800baec:	d101      	bne.n	800baf2 <xQueueSemaphoreTake+0xa4>
 800baee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800baf2:	f7ff faff 	bl	800b0f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baf6:	a901      	add	r1, sp, #4
 800baf8:	a802      	add	r0, sp, #8
 800bafa:	f000 fd33 	bl	800c564 <xTaskCheckForTimeOut>
 800bafe:	2800      	cmp	r0, #0
 800bb00:	d14d      	bne.n	800bb9e <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb02:	4620      	mov	r0, r4
 800bb04:	f7ff fc1a 	bl	800b33c <prvIsQueueEmpty>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d042      	beq.n	800bb92 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	b93b      	cbnz	r3, 800bb20 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800bb10:	f7ff fad0 	bl	800b0b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb14:	68a0      	ldr	r0, [r4, #8]
 800bb16:	f000 fd77 	bl	800c608 <xTaskPriorityInherit>
 800bb1a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800bb1c:	f7ff faea 	bl	800b0f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb20:	9901      	ldr	r1, [sp, #4]
 800bb22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bb26:	f000 fc95 	bl	800c454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	f7ff fc5b 	bl	800b3e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb30:	f000 fb6e 	bl	800c210 <xTaskResumeAll>
 800bb34:	b948      	cbnz	r0, 800bb4a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800bb36:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	f3bf 8f6f 	isb	sy
 800bb4a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800bb4c:	f7ff fab2 	bl	800b0b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bb50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0a8      	beq.n	800baa8 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bb56:	3b01      	subs	r3, #1
 800bb58:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	b913      	cbnz	r3, 800bb64 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bb5e:	f000 fe29 	bl	800c7b4 <pvTaskIncrementMutexHeldCount>
 800bb62:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	b173      	cbz	r3, 800bb86 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb68:	f104 0010 	add.w	r0, r4, #16
 800bb6c:	f000 fcaa 	bl	800c4c4 <xTaskRemoveFromEventList>
 800bb70:	b148      	cbz	r0, 800bb86 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800bb72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800bb86:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800bb88:	f7ff fab4 	bl	800b0f4 <vPortExitCritical>
}
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	b005      	add	sp, #20
 800bb90:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7ff fc27 	bl	800b3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb98:	f000 fb3a 	bl	800c210 <xTaskResumeAll>
 800bb9c:	e7d5      	b.n	800bb4a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f7ff fc21 	bl	800b3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bba4:	f000 fb34 	bl	800c210 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bba8:	4620      	mov	r0, r4
 800bbaa:	f7ff fbc7 	bl	800b33c <prvIsQueueEmpty>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d0cb      	beq.n	800bb4a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	d0ea      	beq.n	800bb8c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800bbb6:	f7ff fa7d 	bl	800b0b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bbba:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbbc:	b119      	cbz	r1, 800bbc6 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bbbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bbc0:	6819      	ldr	r1, [r3, #0]
 800bbc2:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bbc6:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800bbc8:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bbca:	f000 fda1 	bl	800c710 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800bbce:	f7ff fa91 	bl	800b0f4 <vPortExitCritical>
 800bbd2:	e7db      	b.n	800bb8c <xQueueSemaphoreTake+0x13e>

0800bbd4 <xQueueReceiveFromISR>:
{
 800bbd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd8:	4689      	mov	r9, r1
 800bbda:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800bbdc:	4605      	mov	r5, r0
 800bbde:	b940      	cbnz	r0, 800bbf2 <xQueueReceiveFromISR+0x1e>
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbf2:	b951      	cbnz	r1, 800bc0a <xQueueReceiveFromISR+0x36>
 800bbf4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800bbf6:	b143      	cbz	r3, 800bc0a <xQueueReceiveFromISR+0x36>
 800bbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	e7fe      	b.n	800bc08 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc0a:	f7ff fb69 	bl	800b2e0 <vPortValidateInterruptPriority>
	__asm volatile
 800bc0e:	f3ef 8711 	mrs	r7, BASEPRI
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc22:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc24:	b31c      	cbz	r4, 800bc6e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc26:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc2e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc30:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc32:	f7ff fbc3 	bl	800b3bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc36:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800bc38:	1c73      	adds	r3, r6, #1
 800bc3a:	d113      	bne.n	800bc64 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc3c:	692b      	ldr	r3, [r5, #16]
 800bc3e:	b90b      	cbnz	r3, 800bc44 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800bc40:	2001      	movs	r0, #1
 800bc42:	e00b      	b.n	800bc5c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc44:	f105 0010 	add.w	r0, r5, #16
 800bc48:	f000 fc3c 	bl	800c4c4 <xTaskRemoveFromEventList>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d0f7      	beq.n	800bc40 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	d0f4      	beq.n	800bc40 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc56:	2001      	movs	r0, #1
 800bc58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800bc5c:	f387 8811 	msr	BASEPRI, r7
}
 800bc60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bc64:	3601      	adds	r6, #1
 800bc66:	b276      	sxtb	r6, r6
 800bc68:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800bc6c:	e7e8      	b.n	800bc40 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800bc6e:	4620      	mov	r0, r4
 800bc70:	e7f4      	b.n	800bc5c <xQueueReceiveFromISR+0x88>
	...

0800bc74 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc74:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc76:	4a07      	ldr	r2, [pc, #28]	; (800bc94 <vQueueAddToRegistry+0x20>)
	{
 800bc78:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bc7a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800bc7e:	b92c      	cbnz	r4, 800bc8c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bc80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bc84:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc88:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bc8a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	2b08      	cmp	r3, #8
 800bc90:	d1f3      	bne.n	800bc7a <vQueueAddToRegistry+0x6>
 800bc92:	e7fa      	b.n	800bc8a <vQueueAddToRegistry+0x16>
 800bc94:	2400eb24 	.word	0x2400eb24

0800bc98 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bc98:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc9a:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <vQueueUnregisterQueue+0x24>)
	{
 800bc9c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bc9e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800bca2:	684c      	ldr	r4, [r1, #4]
 800bca4:	4284      	cmp	r4, r0
 800bca6:	d104      	bne.n	800bcb2 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bca8:	2000      	movs	r0, #0
 800bcaa:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bcae:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bcb0:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	2b08      	cmp	r3, #8
 800bcb6:	d1f2      	bne.n	800bc9e <vQueueUnregisterQueue+0x6>
 800bcb8:	e7fa      	b.n	800bcb0 <vQueueUnregisterQueue+0x18>
 800bcba:	bf00      	nop
 800bcbc:	2400eb24 	.word	0x2400eb24

0800bcc0 <vQueueDelete>:
{
 800bcc0:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b940      	cbnz	r0, 800bcd8 <vQueueDelete+0x18>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcca:	f383 8811 	msr	BASEPRI, r3
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f3bf 8f4f 	dsb	sy
 800bcd6:	e7fe      	b.n	800bcd6 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800bcd8:	f7ff ffde 	bl	800bc98 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bcdc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bce0:	b923      	cbnz	r3, 800bcec <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800bce2:	4620      	mov	r0, r4
}
 800bce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800bce8:	f7ff b8fc 	b.w	800aee4 <vPortFree>
}
 800bcec:	bd10      	pop	{r4, pc}

0800bcee <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bcee:	b570      	push	{r4, r5, r6, lr}
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bcf6:	f7ff f9dd 	bl	800b0b4 <vPortEnterCritical>
 800bcfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bcfe:	2bff      	cmp	r3, #255	; 0xff
 800bd00:	d102      	bne.n	800bd08 <vQueueWaitForMessageRestricted+0x1a>
 800bd02:	2300      	movs	r3, #0
 800bd04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800bd08:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bd0c:	2bff      	cmp	r3, #255	; 0xff
 800bd0e:	d102      	bne.n	800bd16 <vQueueWaitForMessageRestricted+0x28>
 800bd10:	2300      	movs	r3, #0
 800bd12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd16:	f7ff f9ed 	bl	800b0f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd1c:	b92b      	cbnz	r3, 800bd2a <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd1e:	4632      	mov	r2, r6
 800bd20:	4629      	mov	r1, r5
 800bd22:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800bd26:	f000 fbaf 	bl	800c488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bd2a:	4620      	mov	r0, r4
	}
 800bd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800bd30:	f7ff bb59 	b.w	800b3e6 <prvUnlockQueue>

0800bd34 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd38:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bd3a:	f7ff f9bb 	bl	800b0b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bd3e:	4b2f      	ldr	r3, [pc, #188]	; (800bdfc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800bd40:	4e2f      	ldr	r6, [pc, #188]	; (800be00 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4f2f      	ldr	r7, [pc, #188]	; (800be04 <prvAddNewTaskToReadyList+0xd0>)
 800bd46:	3201      	adds	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800bd4a:	6835      	ldr	r5, [r6, #0]
 800bd4c:	2d00      	cmp	r5, #0
 800bd4e:	d14a      	bne.n	800bde6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bd50:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d11f      	bne.n	800bd98 <prvAddNewTaskToReadyList+0x64>
 800bd58:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd5c:	4640      	mov	r0, r8
 800bd5e:	f7ff f8ff 	bl	800af60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd62:	f108 0814 	add.w	r8, r8, #20
 800bd66:	2d38      	cmp	r5, #56	; 0x38
 800bd68:	d1f7      	bne.n	800bd5a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd6a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800be2c <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800bd6e:	4d26      	ldr	r5, [pc, #152]	; (800be08 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800bd70:	4640      	mov	r0, r8
 800bd72:	f7ff f8f5 	bl	800af60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd76:	4628      	mov	r0, r5
 800bd78:	f7ff f8f2 	bl	800af60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd7c:	4823      	ldr	r0, [pc, #140]	; (800be0c <prvAddNewTaskToReadyList+0xd8>)
 800bd7e:	f7ff f8ef 	bl	800af60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd82:	4823      	ldr	r0, [pc, #140]	; (800be10 <prvAddNewTaskToReadyList+0xdc>)
 800bd84:	f7ff f8ec 	bl	800af60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd88:	4822      	ldr	r0, [pc, #136]	; (800be14 <prvAddNewTaskToReadyList+0xe0>)
 800bd8a:	f7ff f8e9 	bl	800af60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd8e:	4b22      	ldr	r3, [pc, #136]	; (800be18 <prvAddNewTaskToReadyList+0xe4>)
 800bd90:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd94:	4b21      	ldr	r3, [pc, #132]	; (800be1c <prvAddNewTaskToReadyList+0xe8>)
 800bd96:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800bd98:	4a21      	ldr	r2, [pc, #132]	; (800be20 <prvAddNewTaskToReadyList+0xec>)
 800bd9a:	6813      	ldr	r3, [r2, #0]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800bda0:	4a20      	ldr	r2, [pc, #128]	; (800be24 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bda2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800bda4:	6811      	ldr	r1, [r2, #0]
 800bda6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bda8:	428b      	cmp	r3, r1
 800bdaa:	d900      	bls.n	800bdae <prvAddNewTaskToReadyList+0x7a>
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	2014      	movs	r0, #20
 800bdb0:	1d21      	adds	r1, r4, #4
 800bdb2:	fb00 7003 	mla	r0, r0, r3, r7
 800bdb6:	f7ff f8e1 	bl	800af7c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800bdba:	f7ff f99b 	bl	800b0f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	; (800be28 <prvAddNewTaskToReadyList+0xf4>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	b173      	cbz	r3, 800bde2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bdc4:	6833      	ldr	r3, [r6, #0]
 800bdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d209      	bcs.n	800bde2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800bdce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bdda:	f3bf 8f4f 	dsb	sy
 800bdde:	f3bf 8f6f 	isb	sy
}
 800bde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800bde6:	4b10      	ldr	r3, [pc, #64]	; (800be28 <prvAddNewTaskToReadyList+0xf4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1d4      	bne.n	800bd98 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bdee:	6833      	ldr	r3, [r6, #0]
 800bdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d8cf      	bhi.n	800bd98 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800bdf8:	6034      	str	r4, [r6, #0]
 800bdfa:	e7cd      	b.n	800bd98 <prvAddNewTaskToReadyList+0x64>
 800bdfc:	2400efd0 	.word	0x2400efd0
 800be00:	2400eb64 	.word	0x2400eb64
 800be04:	2400eb70 	.word	0x2400eb70
 800be08:	2400eff8 	.word	0x2400eff8
 800be0c:	2400f018 	.word	0x2400f018
 800be10:	2400f044 	.word	0x2400f044
 800be14:	2400f030 	.word	0x2400f030
 800be18:	2400eb68 	.word	0x2400eb68
 800be1c:	2400eb6c 	.word	0x2400eb6c
 800be20:	2400efdc 	.word	0x2400efdc
 800be24:	2400efe0 	.word	0x2400efe0
 800be28:	2400f02c 	.word	0x2400f02c
 800be2c:	2400efe4 	.word	0x2400efe4

0800be30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be32:	4b15      	ldr	r3, [pc, #84]	; (800be88 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800be34:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be36:	4e15      	ldr	r6, [pc, #84]	; (800be8c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800be38:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800be3a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be3c:	6830      	ldr	r0, [r6, #0]
 800be3e:	3004      	adds	r0, #4
 800be40:	f7ff f8bf 	bl	800afc2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be44:	1c63      	adds	r3, r4, #1
 800be46:	d107      	bne.n	800be58 <prvAddCurrentTaskToDelayedList+0x28>
 800be48:	b137      	cbz	r7, 800be58 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be4a:	6831      	ldr	r1, [r6, #0]
 800be4c:	4810      	ldr	r0, [pc, #64]	; (800be90 <prvAddCurrentTaskToDelayedList+0x60>)
 800be4e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be54:	f7ff b892 	b.w	800af7c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be58:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be5a:	6833      	ldr	r3, [r6, #0]
 800be5c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be5e:	d307      	bcc.n	800be70 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be60:	4b0c      	ldr	r3, [pc, #48]	; (800be94 <prvAddCurrentTaskToDelayedList+0x64>)
 800be62:	6818      	ldr	r0, [r3, #0]
 800be64:	6831      	ldr	r1, [r6, #0]
}
 800be66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be6a:	3104      	adds	r1, #4
 800be6c:	f7ff b892 	b.w	800af94 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <prvAddCurrentTaskToDelayedList+0x68>)
 800be72:	6818      	ldr	r0, [r3, #0]
 800be74:	6831      	ldr	r1, [r6, #0]
 800be76:	3104      	adds	r1, #4
 800be78:	f7ff f88c 	bl	800af94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be7c:	4b07      	ldr	r3, [pc, #28]	; (800be9c <prvAddCurrentTaskToDelayedList+0x6c>)
 800be7e:	681a      	ldr	r2, [r3, #0]
 800be80:	42a2      	cmp	r2, r4
 800be82:	d900      	bls.n	800be86 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800be84:	601c      	str	r4, [r3, #0]
}
 800be86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be88:	2400f058 	.word	0x2400f058
 800be8c:	2400eb64 	.word	0x2400eb64
 800be90:	2400f030 	.word	0x2400f030
 800be94:	2400eb6c 	.word	0x2400eb6c
 800be98:	2400eb68 	.word	0x2400eb68
 800be9c:	2400f00c 	.word	0x2400f00c

0800bea0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea0:	4a06      	ldr	r2, [pc, #24]	; (800bebc <prvResetNextTaskUnblockTime+0x1c>)
 800bea2:	6813      	ldr	r3, [r2, #0]
 800bea4:	6819      	ldr	r1, [r3, #0]
 800bea6:	4b06      	ldr	r3, [pc, #24]	; (800bec0 <prvResetNextTaskUnblockTime+0x20>)
 800bea8:	b919      	cbnz	r1, 800beb2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800beaa:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beae:	601a      	str	r2, [r3, #0]
}
 800beb0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beb2:	6812      	ldr	r2, [r2, #0]
 800beb4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800beb6:	68d2      	ldr	r2, [r2, #12]
 800beb8:	6852      	ldr	r2, [r2, #4]
 800beba:	e7f8      	b.n	800beae <prvResetNextTaskUnblockTime+0xe>
 800bebc:	2400eb68 	.word	0x2400eb68
 800bec0:	2400f00c 	.word	0x2400f00c

0800bec4 <prvDeleteTCB>:
	{
 800bec4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bec6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 800beca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800becc:	b93b      	cbnz	r3, 800bede <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800bece:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800bed0:	f7ff f808 	bl	800aee4 <vPortFree>
				vPortFree( pxTCB );
 800bed4:	4620      	mov	r0, r4
	}
 800bed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800beda:	f7ff b803 	b.w	800aee4 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d0f9      	beq.n	800bed6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d008      	beq.n	800bef8 <prvDeleteTCB+0x34>
 800bee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	e7fe      	b.n	800bef6 <prvDeleteTCB+0x32>
	}
 800bef8:	bd10      	pop	{r4, pc}
	...

0800befc <prvIdleTask>:
{
 800befc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800befe:	4c14      	ldr	r4, [pc, #80]	; (800bf50 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf00:	4f14      	ldr	r7, [pc, #80]	; (800bf54 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800bf02:	4d15      	ldr	r5, [pc, #84]	; (800bf58 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	b983      	cbnz	r3, 800bf2a <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf08:	4b14      	ldr	r3, [pc, #80]	; (800bf5c <prvIdleTask+0x60>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d909      	bls.n	800bf24 <prvIdleTask+0x28>
				taskYIELD();
 800bf10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800bf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800bf24:	f7f4 fbf8 	bl	8000718 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800bf28:	e7eb      	b.n	800bf02 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800bf2a:	f7ff f8c3 	bl	800b0b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf32:	1d30      	adds	r0, r6, #4
 800bf34:	f7ff f845 	bl	800afc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	3b01      	subs	r3, #1
 800bf3c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800bf44:	f7ff f8d6 	bl	800b0f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7ff ffbb 	bl	800bec4 <prvDeleteTCB>
 800bf4e:	e7d9      	b.n	800bf04 <prvIdleTask+0x8>
 800bf50:	2400efd4 	.word	0x2400efd4
 800bf54:	2400f044 	.word	0x2400f044
 800bf58:	2400efd0 	.word	0x2400efd0
 800bf5c:	2400eb70 	.word	0x2400eb70

0800bf60 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf64:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf68:	4606      	mov	r6, r0
 800bf6a:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf6c:	21a5      	movs	r1, #165	; 0xa5
 800bf6e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf70:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf72:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800bf76:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf7a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bf7c:	f014 fa8a 	bl	8020494 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bf82:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf84:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800bf88:	b3b5      	cbz	r5, 800bff8 <prvInitialiseNewTask.constprop.0+0x98>
 800bf8a:	1e6b      	subs	r3, r5, #1
 800bf8c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800bf90:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf92:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800bf96:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800bf9a:	b108      	cbz	r0, 800bfa0 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf9c:	42ab      	cmp	r3, r5
 800bf9e:	d1f8      	bne.n	800bf92 <prvInitialiseNewTask.constprop.0+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfa6:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800bfa8:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfac:	1d20      	adds	r0, r4, #4
 800bfae:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800bfb0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800bfb4:	bf28      	it	cs
 800bfb6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800bfb8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800bfba:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfbc:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfc0:	f7fe ffd9 	bl	800af76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfc4:	f104 0018 	add.w	r0, r4, #24
 800bfc8:	f7fe ffd5 	bl	800af76 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800bfcc:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfd0:	463a      	mov	r2, r7
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfd6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfda:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800bfdc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bfe0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bfe4:	f7ff f83c 	bl	800b060 <pxPortInitialiseStack>
 800bfe8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800bfea:	f1b8 0f00 	cmp.w	r8, #0
 800bfee:	d001      	beq.n	800bff4 <prvInitialiseNewTask.constprop.0+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bff0:	f8c8 4000 	str.w	r4, [r8]
}
 800bff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bff8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800bffc:	e7d3      	b.n	800bfa6 <prvInitialiseNewTask.constprop.0+0x46>

0800bffe <xTaskCreateStatic>:
	{
 800bffe:	b570      	push	{r4, r5, r6, lr}
 800c000:	b086      	sub	sp, #24
 800c002:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c006:	b945      	cbnz	r5, 800c01a <xTaskCreateStatic+0x1c>
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	e7fe      	b.n	800c018 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c01a:	b944      	cbnz	r4, 800c02e <xTaskCreateStatic+0x30>
 800c01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c020:	f383 8811 	msr	BASEPRI, r3
 800c024:	f3bf 8f6f 	isb	sy
 800c028:	f3bf 8f4f 	dsb	sy
 800c02c:	e7fe      	b.n	800c02c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c02e:	2660      	movs	r6, #96	; 0x60
 800c030:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c032:	9e05      	ldr	r6, [sp, #20]
 800c034:	2e60      	cmp	r6, #96	; 0x60
 800c036:	d008      	beq.n	800c04a <xTaskCreateStatic+0x4c>
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	e7fe      	b.n	800c048 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c04a:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c04c:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c04e:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c050:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c054:	ad04      	add	r5, sp, #16
 800c056:	9402      	str	r4, [sp, #8]
 800c058:	9501      	str	r5, [sp, #4]
 800c05a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c05c:	9500      	str	r5, [sp, #0]
 800c05e:	f7ff ff7f 	bl	800bf60 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c062:	4620      	mov	r0, r4
 800c064:	f7ff fe66 	bl	800bd34 <prvAddNewTaskToReadyList>
	}
 800c068:	9804      	ldr	r0, [sp, #16]
 800c06a:	b006      	add	sp, #24
 800c06c:	bd70      	pop	{r4, r5, r6, pc}

0800c06e <xTaskCreate>:
	{
 800c06e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c072:	4607      	mov	r7, r0
 800c074:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c076:	0090      	lsls	r0, r2, #2
	{
 800c078:	4688      	mov	r8, r1
 800c07a:	4616      	mov	r6, r2
 800c07c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c07e:	f7fe fe99 	bl	800adb4 <pvPortMalloc>
			if( pxStack != NULL )
 800c082:	4605      	mov	r5, r0
 800c084:	b1e8      	cbz	r0, 800c0c2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c086:	2060      	movs	r0, #96	; 0x60
 800c088:	f7fe fe94 	bl	800adb4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c08c:	4604      	mov	r4, r0
 800c08e:	b1a8      	cbz	r0, 800c0bc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c090:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c092:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c094:	4632      	mov	r2, r6
 800c096:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c098:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c09c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c09e:	9002      	str	r0, [sp, #8]
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	9301      	str	r3, [sp, #4]
 800c0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	f7ff ff59 	bl	800bf60 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f7ff fe40 	bl	800bd34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0b4:	2001      	movs	r0, #1
	}
 800c0b6:	b005      	add	sp, #20
 800c0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800c0bc:	4628      	mov	r0, r5
 800c0be:	f7fe ff11 	bl	800aee4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0c2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800c0c6:	e7f6      	b.n	800c0b6 <xTaskCreate+0x48>

0800c0c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c0c8:	4a02      	ldr	r2, [pc, #8]	; (800c0d4 <vTaskSuspendAll+0xc>)
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	6013      	str	r3, [r2, #0]
}
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	2400efd8 	.word	0x2400efd8

0800c0d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c0d8:	4b01      	ldr	r3, [pc, #4]	; (800c0e0 <xTaskGetTickCount+0x8>)
 800c0da:	6818      	ldr	r0, [r3, #0]
}
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	2400f058 	.word	0x2400f058

0800c0e4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0e4:	4b3f      	ldr	r3, [pc, #252]	; (800c1e4 <xTaskIncrementTick+0x100>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
{
 800c0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d172      	bne.n	800c1d6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0f0:	4b3d      	ldr	r3, [pc, #244]	; (800c1e8 <xTaskIncrementTick+0x104>)
 800c0f2:	681d      	ldr	r5, [r3, #0]
 800c0f4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800c0f6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0f8:	b9bd      	cbnz	r5, 800c12a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c0fa:	4b3c      	ldr	r3, [pc, #240]	; (800c1ec <xTaskIncrementTick+0x108>)
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	6812      	ldr	r2, [r2, #0]
 800c100:	b142      	cbz	r2, 800c114 <xTaskIncrementTick+0x30>
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	e7fe      	b.n	800c112 <xTaskIncrementTick+0x2e>
 800c114:	4a36      	ldr	r2, [pc, #216]	; (800c1f0 <xTaskIncrementTick+0x10c>)
 800c116:	6819      	ldr	r1, [r3, #0]
 800c118:	6810      	ldr	r0, [r2, #0]
 800c11a:	6018      	str	r0, [r3, #0]
 800c11c:	6011      	str	r1, [r2, #0]
 800c11e:	4a35      	ldr	r2, [pc, #212]	; (800c1f4 <xTaskIncrementTick+0x110>)
 800c120:	6813      	ldr	r3, [r2, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	f7ff febb 	bl	800bea0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c12a:	4e33      	ldr	r6, [pc, #204]	; (800c1f8 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c12c:	2400      	movs	r4, #0
 800c12e:	4f33      	ldr	r7, [pc, #204]	; (800c1fc <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c130:	6833      	ldr	r3, [r6, #0]
 800c132:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800c208 <xTaskIncrementTick+0x124>
 800c136:	429d      	cmp	r5, r3
 800c138:	d211      	bcs.n	800c15e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c13a:	f8d8 3000 	ldr.w	r3, [r8]
 800c13e:	2214      	movs	r2, #20
 800c140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c142:	4353      	muls	r3, r2
 800c144:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800c146:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800c148:	4b2d      	ldr	r3, [pc, #180]	; (800c200 <xTaskIncrementTick+0x11c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800c14c:	bf28      	it	cs
 800c14e:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800c150:	2b00      	cmp	r3, #0
 800c152:	bf18      	it	ne
 800c154:	2401      	movne	r4, #1
}
 800c156:	4620      	mov	r0, r4
 800c158:	b003      	add	sp, #12
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c15e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c1ec <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c162:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800c20c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c166:	f8d9 3000 	ldr.w	r3, [r9]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	b91b      	cbnz	r3, 800c176 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c16e:	f04f 33ff 	mov.w	r3, #4294967295
 800c172:	6033      	str	r3, [r6, #0]
					break;
 800c174:	e7e1      	b.n	800c13a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c176:	f8d9 3000 	ldr.w	r3, [r9]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c180:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800c184:	4295      	cmp	r5, r2
 800c186:	d201      	bcs.n	800c18c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800c188:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c18a:	e7d6      	b.n	800c13a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c18c:	f10b 0104 	add.w	r1, fp, #4
 800c190:	4608      	mov	r0, r1
 800c192:	9101      	str	r1, [sp, #4]
 800c194:	f7fe ff15 	bl	800afc2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c198:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800c19c:	9901      	ldr	r1, [sp, #4]
 800c19e:	b122      	cbz	r2, 800c1aa <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1a0:	f10b 0018 	add.w	r0, fp, #24
 800c1a4:	f7fe ff0d 	bl	800afc2 <uxListRemove>
 800c1a8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800c1aa:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800c1ae:	f8da 2000 	ldr.w	r2, [sl]
 800c1b2:	4290      	cmp	r0, r2
 800c1b4:	d901      	bls.n	800c1ba <xTaskIncrementTick+0xd6>
 800c1b6:	f8ca 0000 	str.w	r0, [sl]
 800c1ba:	2314      	movs	r3, #20
 800c1bc:	fb03 7000 	mla	r0, r3, r0, r7
 800c1c0:	f7fe fedc 	bl	800af7c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1c4:	f8d8 1000 	ldr.w	r1, [r8]
 800c1c8:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800c1cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	bf28      	it	cs
 800c1d2:	2401      	movcs	r4, #1
 800c1d4:	e7c7      	b.n	800c166 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800c1d6:	4a0b      	ldr	r2, [pc, #44]	; (800c204 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800c1d8:	2400      	movs	r4, #0
		++xPendedTicks;
 800c1da:	6813      	ldr	r3, [r2, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800c1e0:	e7b9      	b.n	800c156 <xTaskIncrementTick+0x72>
 800c1e2:	bf00      	nop
 800c1e4:	2400efd8 	.word	0x2400efd8
 800c1e8:	2400f058 	.word	0x2400f058
 800c1ec:	2400eb68 	.word	0x2400eb68
 800c1f0:	2400eb6c 	.word	0x2400eb6c
 800c1f4:	2400f010 	.word	0x2400f010
 800c1f8:	2400f00c 	.word	0x2400f00c
 800c1fc:	2400eb70 	.word	0x2400eb70
 800c200:	2400f05c 	.word	0x2400f05c
 800c204:	2400f014 	.word	0x2400f014
 800c208:	2400eb64 	.word	0x2400eb64
 800c20c:	2400efe0 	.word	0x2400efe0

0800c210 <xTaskResumeAll>:
{
 800c210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800c212:	4c31      	ldr	r4, [pc, #196]	; (800c2d8 <xTaskResumeAll+0xc8>)
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	b943      	cbnz	r3, 800c22a <xTaskResumeAll+0x1a>
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	e7fe      	b.n	800c228 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800c22a:	f7fe ff43 	bl	800b0b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	3b01      	subs	r3, #1
 800c232:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c234:	6824      	ldr	r4, [r4, #0]
 800c236:	b12c      	cbz	r4, 800c244 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800c238:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c23a:	f7fe ff5b 	bl	800b0f4 <vPortExitCritical>
}
 800c23e:	4620      	mov	r0, r4
 800c240:	b003      	add	sp, #12
 800c242:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c244:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <xTaskResumeAll+0xcc>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0f5      	beq.n	800c238 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c24c:	4d24      	ldr	r5, [pc, #144]	; (800c2e0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800c24e:	4e25      	ldr	r6, [pc, #148]	; (800c2e4 <xTaskResumeAll+0xd4>)
 800c250:	4f25      	ldr	r7, [pc, #148]	; (800c2e8 <xTaskResumeAll+0xd8>)
 800c252:	e01e      	b.n	800c292 <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c254:	68eb      	ldr	r3, [r5, #12]
 800c256:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c258:	f104 0018 	add.w	r0, r4, #24
 800c25c:	f7fe feb1 	bl	800afc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c260:	1d21      	adds	r1, r4, #4
 800c262:	4608      	mov	r0, r1
 800c264:	9101      	str	r1, [sp, #4]
 800c266:	f7fe feac 	bl	800afc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c26a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c26c:	6832      	ldr	r2, [r6, #0]
 800c26e:	9901      	ldr	r1, [sp, #4]
 800c270:	4293      	cmp	r3, r2
 800c272:	d900      	bls.n	800c276 <xTaskResumeAll+0x66>
 800c274:	6033      	str	r3, [r6, #0]
 800c276:	2014      	movs	r0, #20
 800c278:	fb00 7003 	mla	r0, r0, r3, r7
 800c27c:	f7fe fe7e 	bl	800af7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c280:	4b1a      	ldr	r3, [pc, #104]	; (800c2ec <xTaskResumeAll+0xdc>)
 800c282:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	429a      	cmp	r2, r3
 800c28a:	d302      	bcc.n	800c292 <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800c28c:	4b18      	ldr	r3, [pc, #96]	; (800c2f0 <xTaskResumeAll+0xe0>)
 800c28e:	2201      	movs	r2, #1
 800c290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1dd      	bne.n	800c254 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800c298:	b10c      	cbz	r4, 800c29e <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800c29a:	f7ff fe01 	bl	800bea0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c29e:	4d15      	ldr	r5, [pc, #84]	; (800c2f4 <xTaskResumeAll+0xe4>)
 800c2a0:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c2a2:	b144      	cbz	r4, 800c2b6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800c2a4:	4e12      	ldr	r6, [pc, #72]	; (800c2f0 <xTaskResumeAll+0xe0>)
 800c2a6:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c2a8:	f7ff ff1c 	bl	800c0e4 <xTaskIncrementTick>
 800c2ac:	b100      	cbz	r0, 800c2b0 <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800c2ae:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2b0:	3c01      	subs	r4, #1
 800c2b2:	d1f9      	bne.n	800c2a8 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800c2b4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c2b6:	4b0e      	ldr	r3, [pc, #56]	; (800c2f0 <xTaskResumeAll+0xe0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0bc      	beq.n	800c238 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800c2be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800c2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c2d2:	2401      	movs	r4, #1
 800c2d4:	e7b1      	b.n	800c23a <xTaskResumeAll+0x2a>
 800c2d6:	bf00      	nop
 800c2d8:	2400efd8 	.word	0x2400efd8
 800c2dc:	2400efd0 	.word	0x2400efd0
 800c2e0:	2400f018 	.word	0x2400f018
 800c2e4:	2400efe0 	.word	0x2400efe0
 800c2e8:	2400eb70 	.word	0x2400eb70
 800c2ec:	2400eb64 	.word	0x2400eb64
 800c2f0:	2400f05c 	.word	0x2400f05c
 800c2f4:	2400f014 	.word	0x2400f014

0800c2f8 <vTaskSetApplicationTaskTag>:
	{
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	b908      	cbnz	r0, 800c304 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c300:	4b04      	ldr	r3, [pc, #16]	; (800c314 <vTaskSetApplicationTaskTag+0x1c>)
 800c302:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c304:	f7fe fed6 	bl	800b0b4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c308:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800c30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c30e:	f7fe bef1 	b.w	800b0f4 <vPortExitCritical>
 800c312:	bf00      	nop
 800c314:	2400eb64 	.word	0x2400eb64

0800c318 <xTaskCallApplicationTaskHook>:
	{
 800c318:	4603      	mov	r3, r0
 800c31a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c31c:	b90b      	cbnz	r3, 800c322 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c31e:	4b03      	ldr	r3, [pc, #12]	; (800c32c <xTaskCallApplicationTaskHook+0x14>)
 800c320:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c324:	b103      	cbz	r3, 800c328 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c326:	4718      	bx	r3
	}
 800c328:	4618      	mov	r0, r3
 800c32a:	4770      	bx	lr
 800c32c:	2400eb64 	.word	0x2400eb64

0800c330 <vTaskStartScheduler>:
{
 800c330:	b510      	push	{r4, lr}
 800c332:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c334:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c336:	aa07      	add	r2, sp, #28
 800c338:	a906      	add	r1, sp, #24
 800c33a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c33c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c340:	f7fe fcfc 	bl	800ad3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c344:	9b05      	ldr	r3, [sp, #20]
 800c346:	9a07      	ldr	r2, [sp, #28]
 800c348:	9302      	str	r3, [sp, #8]
 800c34a:	9b06      	ldr	r3, [sp, #24]
 800c34c:	4919      	ldr	r1, [pc, #100]	; (800c3b4 <vTaskStartScheduler+0x84>)
 800c34e:	481a      	ldr	r0, [pc, #104]	; (800c3b8 <vTaskStartScheduler+0x88>)
 800c350:	e9cd 4300 	strd	r4, r3, [sp]
 800c354:	4623      	mov	r3, r4
 800c356:	f7ff fe52 	bl	800bffe <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c35a:	b340      	cbz	r0, 800c3ae <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800c35c:	f000 fa88 	bl	800c870 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c360:	2801      	cmp	r0, #1
 800c362:	d119      	bne.n	800c398 <vTaskStartScheduler+0x68>
 800c364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c374:	f04f 32ff 	mov.w	r2, #4294967295
 800c378:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800c37a:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c37c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c37e:	4b10      	ldr	r3, [pc, #64]	; (800c3c0 <vTaskStartScheduler+0x90>)
 800c380:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c382:	4b10      	ldr	r3, [pc, #64]	; (800c3c4 <vTaskStartScheduler+0x94>)
 800c384:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c386:	4b10      	ldr	r3, [pc, #64]	; (800c3c8 <vTaskStartScheduler+0x98>)
 800c388:	6818      	ldr	r0, [r3, #0]
 800c38a:	f7ff ffc5 	bl	800c318 <xTaskCallApplicationTaskHook>
}
 800c38e:	b008      	add	sp, #32
 800c390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c394:	f7fe bf1e 	b.w	800b1d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c398:	3001      	adds	r0, #1
 800c39a:	d108      	bne.n	800c3ae <vTaskStartScheduler+0x7e>
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	e7fe      	b.n	800c3ac <vTaskStartScheduler+0x7c>
}
 800c3ae:	b008      	add	sp, #32
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	bf00      	nop
 800c3b4:	08023d34 	.word	0x08023d34
 800c3b8:	0800befd 	.word	0x0800befd
 800c3bc:	2400f00c 	.word	0x2400f00c
 800c3c0:	2400f02c 	.word	0x2400f02c
 800c3c4:	2400f058 	.word	0x2400f058
 800c3c8:	2400eb64 	.word	0x2400eb64

0800c3cc <vTaskSwitchContext>:
{
 800c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3ce:	4b1c      	ldr	r3, [pc, #112]	; (800c440 <vTaskSwitchContext+0x74>)
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <vTaskSwitchContext+0x78>)
 800c3d4:	b112      	cbz	r2, 800c3dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	601a      	str	r2, [r3, #0]
}
 800c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800c3dc:	4c1a      	ldr	r4, [pc, #104]	; (800c448 <vTaskSwitchContext+0x7c>)
 800c3de:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3e0:	4e1a      	ldr	r6, [pc, #104]	; (800c44c <vTaskSwitchContext+0x80>)
 800c3e2:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800c3e4:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	f7ff ff96 	bl	800c318 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ec:	6832      	ldr	r2, [r6, #0]
 800c3ee:	4918      	ldr	r1, [pc, #96]	; (800c450 <vTaskSwitchContext+0x84>)
 800c3f0:	fb07 f302 	mul.w	r3, r7, r2
 800c3f4:	58cd      	ldr	r5, [r1, r3]
 800c3f6:	18c8      	adds	r0, r1, r3
 800c3f8:	b1ad      	cbz	r5, 800c426 <vTaskSwitchContext+0x5a>
 800c3fa:	6845      	ldr	r5, [r0, #4]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	686d      	ldr	r5, [r5, #4]
 800c400:	440b      	add	r3, r1
 800c402:	429d      	cmp	r5, r3
 800c404:	6045      	str	r5, [r0, #4]
 800c406:	bf04      	itt	eq
 800c408:	686b      	ldreq	r3, [r5, #4]
 800c40a:	6043      	streq	r3, [r0, #4]
 800c40c:	2314      	movs	r3, #20
 800c40e:	fb03 1102 	mla	r1, r3, r2, r1
 800c412:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800c414:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	6023      	str	r3, [r4, #0]
 800c41a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800c41c:	6820      	ldr	r0, [r4, #0]
}
 800c41e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800c422:	f7ff bf79 	b.w	800c318 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c426:	b942      	cbnz	r2, 800c43a <vTaskSwitchContext+0x6e>
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	e7fe      	b.n	800c438 <vTaskSwitchContext+0x6c>
 800c43a:	3a01      	subs	r2, #1
 800c43c:	e7d8      	b.n	800c3f0 <vTaskSwitchContext+0x24>
 800c43e:	bf00      	nop
 800c440:	2400efd8 	.word	0x2400efd8
 800c444:	2400f05c 	.word	0x2400f05c
 800c448:	2400eb64 	.word	0x2400eb64
 800c44c:	2400efe0 	.word	0x2400efe0
 800c450:	2400eb70 	.word	0x2400eb70

0800c454 <vTaskPlaceOnEventList>:
{
 800c454:	b510      	push	{r4, lr}
 800c456:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800c458:	b940      	cbnz	r0, 800c46c <vTaskPlaceOnEventList+0x18>
 800c45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	e7fe      	b.n	800c46a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c46c:	4b05      	ldr	r3, [pc, #20]	; (800c484 <vTaskPlaceOnEventList+0x30>)
 800c46e:	6819      	ldr	r1, [r3, #0]
 800c470:	3118      	adds	r1, #24
 800c472:	f7fe fd8f 	bl	800af94 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c476:	4620      	mov	r0, r4
 800c478:	2101      	movs	r1, #1
}
 800c47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c47e:	f7ff bcd7 	b.w	800be30 <prvAddCurrentTaskToDelayedList>
 800c482:	bf00      	nop
 800c484:	2400eb64 	.word	0x2400eb64

0800c488 <vTaskPlaceOnEventListRestricted>:
	{
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	460d      	mov	r5, r1
 800c48c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800c48e:	b940      	cbnz	r0, 800c4a2 <vTaskPlaceOnEventListRestricted+0x1a>
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	e7fe      	b.n	800c4a0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4a2:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <vTaskPlaceOnEventListRestricted+0x38>)
 800c4a4:	6819      	ldr	r1, [r3, #0]
 800c4a6:	3118      	adds	r1, #24
 800c4a8:	f7fe fd68 	bl	800af7c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800c4ac:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	bf0c      	ite	eq
 800c4b2:	4628      	moveq	r0, r5
 800c4b4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800c4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4bc:	f7ff bcb8 	b.w	800be30 <prvAddCurrentTaskToDelayedList>
 800c4c0:	2400eb64 	.word	0x2400eb64

0800c4c4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c4:	68c3      	ldr	r3, [r0, #12]
{
 800c4c6:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800c4ca:	b944      	cbnz	r4, 800c4de <xTaskRemoveFromEventList+0x1a>
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	e7fe      	b.n	800c4dc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4de:	f104 0118 	add.w	r1, r4, #24
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	9101      	str	r1, [sp, #4]
 800c4e6:	f7fe fd6c 	bl	800afc2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ea:	4b12      	ldr	r3, [pc, #72]	; (800c534 <xTaskRemoveFromEventList+0x70>)
 800c4ec:	9901      	ldr	r1, [sp, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	b9e3      	cbnz	r3, 800c52c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4f2:	1d21      	adds	r1, r4, #4
 800c4f4:	4608      	mov	r0, r1
 800c4f6:	9101      	str	r1, [sp, #4]
 800c4f8:	f7fe fd63 	bl	800afc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c4fc:	4a0e      	ldr	r2, [pc, #56]	; (800c538 <xTaskRemoveFromEventList+0x74>)
 800c4fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c500:	6810      	ldr	r0, [r2, #0]
 800c502:	9901      	ldr	r1, [sp, #4]
 800c504:	4283      	cmp	r3, r0
 800c506:	d900      	bls.n	800c50a <xTaskRemoveFromEventList+0x46>
 800c508:	6013      	str	r3, [r2, #0]
 800c50a:	4a0c      	ldr	r2, [pc, #48]	; (800c53c <xTaskRemoveFromEventList+0x78>)
 800c50c:	2014      	movs	r0, #20
 800c50e:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c512:	f7fe fd33 	bl	800af7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c516:	4b0a      	ldr	r3, [pc, #40]	; (800c540 <xTaskRemoveFromEventList+0x7c>)
 800c518:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51e:	429a      	cmp	r2, r3
 800c520:	d906      	bls.n	800c530 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800c522:	2001      	movs	r0, #1
 800c524:	4b07      	ldr	r3, [pc, #28]	; (800c544 <xTaskRemoveFromEventList+0x80>)
 800c526:	6018      	str	r0, [r3, #0]
}
 800c528:	b002      	add	sp, #8
 800c52a:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c52c:	4806      	ldr	r0, [pc, #24]	; (800c548 <xTaskRemoveFromEventList+0x84>)
 800c52e:	e7f0      	b.n	800c512 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800c530:	2000      	movs	r0, #0
	return xReturn;
 800c532:	e7f9      	b.n	800c528 <xTaskRemoveFromEventList+0x64>
 800c534:	2400efd8 	.word	0x2400efd8
 800c538:	2400efe0 	.word	0x2400efe0
 800c53c:	2400eb70 	.word	0x2400eb70
 800c540:	2400eb64 	.word	0x2400eb64
 800c544:	2400f05c 	.word	0x2400f05c
 800c548:	2400f018 	.word	0x2400f018

0800c54c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c54c:	4b03      	ldr	r3, [pc, #12]	; (800c55c <vTaskInternalSetTimeOutState+0x10>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c552:	4b03      	ldr	r3, [pc, #12]	; (800c560 <vTaskInternalSetTimeOutState+0x14>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6043      	str	r3, [r0, #4]
}
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	2400f010 	.word	0x2400f010
 800c560:	2400f058 	.word	0x2400f058

0800c564 <xTaskCheckForTimeOut>:
{
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800c568:	4605      	mov	r5, r0
 800c56a:	b940      	cbnz	r0, 800c57e <xTaskCheckForTimeOut+0x1a>
 800c56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	e7fe      	b.n	800c57c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800c57e:	b941      	cbnz	r1, 800c592 <xTaskCheckForTimeOut+0x2e>
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	e7fe      	b.n	800c590 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800c592:	f7fe fd8f 	bl	800b0b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800c596:	4b0f      	ldr	r3, [pc, #60]	; (800c5d4 <xTaskCheckForTimeOut+0x70>)
 800c598:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	1c5a      	adds	r2, r3, #1
 800c59e:	d010      	beq.n	800c5c2 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5a0:	480d      	ldr	r0, [pc, #52]	; (800c5d8 <xTaskCheckForTimeOut+0x74>)
 800c5a2:	682e      	ldr	r6, [r5, #0]
 800c5a4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5a6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5a8:	4286      	cmp	r6, r0
 800c5aa:	d001      	beq.n	800c5b0 <xTaskCheckForTimeOut+0x4c>
 800c5ac:	428a      	cmp	r2, r1
 800c5ae:	d90f      	bls.n	800c5d0 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5b0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	d90a      	bls.n	800c5cc <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800c5b6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5b8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800c5ba:	4413      	add	r3, r2
 800c5bc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5be:	f7ff ffc5 	bl	800c54c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800c5c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c5c4:	f7fe fd96 	bl	800b0f4 <vPortExitCritical>
}
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800c5d0:	2401      	movs	r4, #1
 800c5d2:	e7f7      	b.n	800c5c4 <xTaskCheckForTimeOut+0x60>
 800c5d4:	2400f058 	.word	0x2400f058
 800c5d8:	2400f010 	.word	0x2400f010

0800c5dc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800c5dc:	4b01      	ldr	r3, [pc, #4]	; (800c5e4 <vTaskMissedYield+0x8>)
 800c5de:	2201      	movs	r2, #1
 800c5e0:	601a      	str	r2, [r3, #0]
}
 800c5e2:	4770      	bx	lr
 800c5e4:	2400f05c 	.word	0x2400f05c

0800c5e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800c5e8:	4b05      	ldr	r3, [pc, #20]	; (800c600 <xTaskGetSchedulerState+0x18>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	b133      	cbz	r3, 800c5fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5ee:	4b05      	ldr	r3, [pc, #20]	; (800c604 <xTaskGetSchedulerState+0x1c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	bf0c      	ite	eq
 800c5f6:	2002      	moveq	r0, #2
 800c5f8:	2000      	movne	r0, #0
 800c5fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c5fc:	2001      	movs	r0, #1
	}
 800c5fe:	4770      	bx	lr
 800c600:	2400f02c 	.word	0x2400f02c
 800c604:	2400efd8 	.word	0x2400efd8

0800c608 <xTaskPriorityInherit>:
	{
 800c608:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800c60a:	4604      	mov	r4, r0
 800c60c:	b340      	cbz	r0, 800c660 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c60e:	4d1b      	ldr	r5, [pc, #108]	; (800c67c <xTaskPriorityInherit+0x74>)
 800c610:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c612:	682a      	ldr	r2, [r5, #0]
 800c614:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c616:	4293      	cmp	r3, r2
 800c618:	d228      	bcs.n	800c66c <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c61a:	6982      	ldr	r2, [r0, #24]
 800c61c:	2a00      	cmp	r2, #0
 800c61e:	db04      	blt.n	800c62a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c620:	682a      	ldr	r2, [r5, #0]
 800c622:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c624:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800c628:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c62a:	2214      	movs	r2, #20
 800c62c:	4e14      	ldr	r6, [pc, #80]	; (800c680 <xTaskPriorityInherit+0x78>)
 800c62e:	fb02 6303 	mla	r3, r2, r3, r6
 800c632:	6962      	ldr	r2, [r4, #20]
 800c634:	429a      	cmp	r2, r3
 800c636:	d115      	bne.n	800c664 <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c638:	1d21      	adds	r1, r4, #4
 800c63a:	4608      	mov	r0, r1
 800c63c:	9101      	str	r1, [sp, #4]
 800c63e:	f7fe fcc0 	bl	800afc2 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c642:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c644:	4a0f      	ldr	r2, [pc, #60]	; (800c684 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c648:	6810      	ldr	r0, [r2, #0]
 800c64a:	9901      	ldr	r1, [sp, #4]
 800c64c:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c64e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c650:	d900      	bls.n	800c654 <xTaskPriorityInherit+0x4c>
 800c652:	6013      	str	r3, [r2, #0]
 800c654:	2014      	movs	r0, #20
 800c656:	fb00 6003 	mla	r0, r0, r3, r6
 800c65a:	f7fe fc8f 	bl	800af7c <vListInsertEnd>
				xReturn = pdTRUE;
 800c65e:	2001      	movs	r0, #1
	}
 800c660:	b002      	add	sp, #8
 800c662:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c66a:	e7f8      	b.n	800c65e <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c66c:	682b      	ldr	r3, [r5, #0]
 800c66e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c670:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800c672:	42a0      	cmp	r0, r4
 800c674:	bf2c      	ite	cs
 800c676:	2000      	movcs	r0, #0
 800c678:	2001      	movcc	r0, #1
 800c67a:	e7f1      	b.n	800c660 <xTaskPriorityInherit+0x58>
 800c67c:	2400eb64 	.word	0x2400eb64
 800c680:	2400eb70 	.word	0x2400eb70
 800c684:	2400efe0 	.word	0x2400efe0

0800c688 <xTaskPriorityDisinherit>:
	{
 800c688:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800c68a:	b910      	cbnz	r0, 800c692 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800c68c:	2000      	movs	r0, #0
	}
 800c68e:	b002      	add	sp, #8
 800c690:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800c692:	4b1c      	ldr	r3, [pc, #112]	; (800c704 <xTaskPriorityDisinherit+0x7c>)
 800c694:	681c      	ldr	r4, [r3, #0]
 800c696:	4284      	cmp	r4, r0
 800c698:	d008      	beq.n	800c6ac <xTaskPriorityDisinherit+0x24>
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	e7fe      	b.n	800c6aa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800c6ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c6ae:	b943      	cbnz	r3, 800c6c2 <xTaskPriorityDisinherit+0x3a>
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	e7fe      	b.n	800c6c0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800c6c4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800c6c8:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c6ca:	4291      	cmp	r1, r2
 800c6cc:	d0de      	beq.n	800c68c <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1dc      	bne.n	800c68c <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6d2:	1d21      	adds	r1, r4, #4
 800c6d4:	4608      	mov	r0, r1
 800c6d6:	9101      	str	r1, [sp, #4]
 800c6d8:	f7fe fc73 	bl	800afc2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6dc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800c6de:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6e4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6e6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6e8:	4a07      	ldr	r2, [pc, #28]	; (800c708 <xTaskPriorityDisinherit+0x80>)
 800c6ea:	6810      	ldr	r0, [r2, #0]
 800c6ec:	4283      	cmp	r3, r0
 800c6ee:	d900      	bls.n	800c6f2 <xTaskPriorityDisinherit+0x6a>
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	4a06      	ldr	r2, [pc, #24]	; (800c70c <xTaskPriorityDisinherit+0x84>)
 800c6f4:	2014      	movs	r0, #20
 800c6f6:	fb00 2003 	mla	r0, r0, r3, r2
 800c6fa:	f7fe fc3f 	bl	800af7c <vListInsertEnd>
					xReturn = pdTRUE;
 800c6fe:	2001      	movs	r0, #1
		return xReturn;
 800c700:	e7c5      	b.n	800c68e <xTaskPriorityDisinherit+0x6>
 800c702:	bf00      	nop
 800c704:	2400eb64 	.word	0x2400eb64
 800c708:	2400efe0 	.word	0x2400efe0
 800c70c:	2400eb70 	.word	0x2400eb70

0800c710 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800c710:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800c712:	4604      	mov	r4, r0
 800c714:	2800      	cmp	r0, #0
 800c716:	d044      	beq.n	800c7a2 <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800c718:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800c71a:	b942      	cbnz	r2, 800c72e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	e7fe      	b.n	800c72c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c72e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800c730:	4299      	cmp	r1, r3
 800c732:	bf38      	it	cc
 800c734:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c738:	428b      	cmp	r3, r1
 800c73a:	d032      	beq.n	800c7a2 <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c73c:	2a01      	cmp	r2, #1
 800c73e:	d130      	bne.n	800c7a2 <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800c740:	4a19      	ldr	r2, [pc, #100]	; (800c7a8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800c742:	6812      	ldr	r2, [r2, #0]
 800c744:	4282      	cmp	r2, r0
 800c746:	d108      	bne.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800c748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74c:	f383 8811 	msr	BASEPRI, r3
 800c750:	f3bf 8f6f 	isb	sy
 800c754:	f3bf 8f4f 	dsb	sy
 800c758:	e7fe      	b.n	800c758 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c75a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c75c:	4d13      	ldr	r5, [pc, #76]	; (800c7ac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c75e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c760:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800c764:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c766:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c76a:	bfa8      	it	ge
 800c76c:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c770:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c772:	bfa8      	it	ge
 800c774:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c776:	429a      	cmp	r2, r3
 800c778:	d113      	bne.n	800c7a2 <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c77a:	1d01      	adds	r1, r0, #4
 800c77c:	4608      	mov	r0, r1
 800c77e:	9101      	str	r1, [sp, #4]
 800c780:	f7fe fc1f 	bl	800afc2 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800c784:	4a0a      	ldr	r2, [pc, #40]	; (800c7b0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800c786:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c788:	6810      	ldr	r0, [r2, #0]
 800c78a:	9901      	ldr	r1, [sp, #4]
 800c78c:	4283      	cmp	r3, r0
 800c78e:	d900      	bls.n	800c792 <vTaskPriorityDisinheritAfterTimeout+0x82>
 800c790:	6013      	str	r3, [r2, #0]
 800c792:	2014      	movs	r0, #20
 800c794:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800c798:	b003      	add	sp, #12
 800c79a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800c79e:	f7fe bbed 	b.w	800af7c <vListInsertEnd>
	}
 800c7a2:	b003      	add	sp, #12
 800c7a4:	bd30      	pop	{r4, r5, pc}
 800c7a6:	bf00      	nop
 800c7a8:	2400eb64 	.word	0x2400eb64
 800c7ac:	2400eb70 	.word	0x2400eb70
 800c7b0:	2400efe0 	.word	0x2400efe0

0800c7b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <pvTaskIncrementMutexHeldCount+0x14>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	b11a      	cbz	r2, 800c7c2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800c7ba:	6819      	ldr	r1, [r3, #0]
 800c7bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800c7be:	3201      	adds	r2, #1
 800c7c0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800c7c2:	6818      	ldr	r0, [r3, #0]
	}
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	2400eb64 	.word	0x2400eb64

0800c7cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800c7ce:	4c11      	ldr	r4, [pc, #68]	; (800c814 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800c7d0:	f7fe fc70 	bl	800b0b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800c7d4:	6825      	ldr	r5, [r4, #0]
 800c7d6:	b9bd      	cbnz	r5, 800c808 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7d8:	4f0f      	ldr	r7, [pc, #60]	; (800c818 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800c7da:	4e10      	ldr	r6, [pc, #64]	; (800c81c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800c7dc:	4638      	mov	r0, r7
 800c7de:	f7fe fbbf 	bl	800af60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7fe fbbc 	bl	800af60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7e8:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7ea:	4a0e      	ldr	r2, [pc, #56]	; (800c824 <prvCheckForValidListAndQueue+0x58>)
 800c7ec:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800c7ee:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7f0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <prvCheckForValidListAndQueue+0x5c>)
 800c7f4:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7f6:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <prvCheckForValidListAndQueue+0x60>)
 800c7f8:	9500      	str	r5, [sp, #0]
 800c7fa:	f7fe fe6b 	bl	800b4d4 <xQueueGenericCreateStatic>
 800c7fe:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c800:	b110      	cbz	r0, 800c808 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c802:	490b      	ldr	r1, [pc, #44]	; (800c830 <prvCheckForValidListAndQueue+0x64>)
 800c804:	f7ff fa36 	bl	800bc74 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800c808:	b003      	add	sp, #12
 800c80a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800c80e:	f7fe bc71 	b.w	800b0f4 <vPortExitCritical>
 800c812:	bf00      	nop
 800c814:	2400f184 	.word	0x2400f184
 800c818:	2400f108 	.word	0x2400f108
 800c81c:	2400f11c 	.word	0x2400f11c
 800c820:	2400f060 	.word	0x2400f060
 800c824:	2400f068 	.word	0x2400f068
 800c828:	2400f064 	.word	0x2400f064
 800c82c:	2400f134 	.word	0x2400f134
 800c830:	08023d39 	.word	0x08023d39

0800c834 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800c834:	4291      	cmp	r1, r2
{
 800c836:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c838:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c83a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800c83c:	d80a      	bhi.n	800c854 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	6983      	ldr	r3, [r0, #24]
 800c842:	429a      	cmp	r2, r3
 800c844:	d20d      	bcs.n	800c862 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c846:	1d01      	adds	r1, r0, #4
 800c848:	4b07      	ldr	r3, [pc, #28]	; (800c868 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	f7fe fba2 	bl	800af94 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800c850:	2000      	movs	r0, #0
}
 800c852:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c854:	429a      	cmp	r2, r3
 800c856:	d201      	bcs.n	800c85c <prvInsertTimerInActiveList+0x28>
 800c858:	4299      	cmp	r1, r3
 800c85a:	d202      	bcs.n	800c862 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c85c:	1d01      	adds	r1, r0, #4
 800c85e:	4b03      	ldr	r3, [pc, #12]	; (800c86c <prvInsertTimerInActiveList+0x38>)
 800c860:	e7f3      	b.n	800c84a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800c862:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800c864:	e7f5      	b.n	800c852 <prvInsertTimerInActiveList+0x1e>
 800c866:	bf00      	nop
 800c868:	2400f064 	.word	0x2400f064
 800c86c:	2400f060 	.word	0x2400f060

0800c870 <xTimerCreateTimerTask>:
{
 800c870:	b510      	push	{r4, lr}
 800c872:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800c874:	f7ff ffaa 	bl	800c7cc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800c878:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <xTimerCreateTimerTask+0x54>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	b1b3      	cbz	r3, 800c8ac <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c87e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c880:	aa07      	add	r2, sp, #28
 800c882:	a906      	add	r1, sp, #24
 800c884:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c886:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c88a:	f7fe fa63 	bl	800ad54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	9a07      	ldr	r2, [sp, #28]
 800c892:	9302      	str	r3, [sp, #8]
 800c894:	9b06      	ldr	r3, [sp, #24]
 800c896:	490c      	ldr	r1, [pc, #48]	; (800c8c8 <xTimerCreateTimerTask+0x58>)
 800c898:	9301      	str	r3, [sp, #4]
 800c89a:	2302      	movs	r3, #2
 800c89c:	480b      	ldr	r0, [pc, #44]	; (800c8cc <xTimerCreateTimerTask+0x5c>)
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	f7ff fbac 	bl	800bffe <xTaskCreateStatic>
 800c8a6:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <xTimerCreateTimerTask+0x60>)
 800c8a8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800c8aa:	b940      	cbnz	r0, 800c8be <xTimerCreateTimerTask+0x4e>
 800c8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800c8bc:	e7fe      	b.n	800c8bc <xTimerCreateTimerTask+0x4c>
}
 800c8be:	2001      	movs	r0, #1
 800c8c0:	b008      	add	sp, #32
 800c8c2:	bd10      	pop	{r4, pc}
 800c8c4:	2400f184 	.word	0x2400f184
 800c8c8:	08023d3e 	.word	0x08023d3e
 800c8cc:	0800c9d5 	.word	0x0800c9d5
 800c8d0:	2400f188 	.word	0x2400f188

0800c8d4 <xTimerGenericCommand>:
{
 800c8d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c8d6:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800c8d8:	4604      	mov	r4, r0
{
 800c8da:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800c8dc:	b940      	cbnz	r0, 800c8f0 <xTimerGenericCommand+0x1c>
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	e7fe      	b.n	800c8ee <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800c8f0:	4d0c      	ldr	r5, [pc, #48]	; (800c924 <xTimerGenericCommand+0x50>)
 800c8f2:	6828      	ldr	r0, [r5, #0]
 800c8f4:	b178      	cbz	r0, 800c916 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8f6:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c8f8:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c8fa:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c8fe:	dc0c      	bgt.n	800c91a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c900:	f7ff fe72 	bl	800c5e8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c904:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c906:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c908:	4669      	mov	r1, sp
 800c90a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c90c:	bf0c      	ite	eq
 800c90e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c910:	461a      	movne	r2, r3
 800c912:	f7fe fe94 	bl	800b63e <xQueueGenericSend>
}
 800c916:	b004      	add	sp, #16
 800c918:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c91a:	2300      	movs	r3, #0
 800c91c:	4669      	mov	r1, sp
 800c91e:	f7fe ff41 	bl	800b7a4 <xQueueGenericSendFromISR>
 800c922:	e7f8      	b.n	800c916 <xTimerGenericCommand+0x42>
 800c924:	2400f184 	.word	0x2400f184

0800c928 <prvSampleTimeNow>:
{
 800c928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800c92c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c9d0 <prvSampleTimeNow+0xa8>
{
 800c930:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800c932:	f7ff fbd1 	bl	800c0d8 <xTaskGetTickCount>
 800c936:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800c938:	f8d8 3000 	ldr.w	r3, [r8]
 800c93c:	4283      	cmp	r3, r0
 800c93e:	d940      	bls.n	800c9c2 <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c940:	4f21      	ldr	r7, [pc, #132]	; (800c9c8 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c942:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	b95a      	cbnz	r2, 800c964 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800c94c:	4a1f      	ldr	r2, [pc, #124]	; (800c9cc <prvSampleTimeNow+0xa4>)
 800c94e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c950:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800c952:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800c954:	6039      	str	r1, [r7, #0]
}
 800c956:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800c958:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800c95a:	f8c8 5000 	str.w	r5, [r8]
}
 800c95e:	b004      	add	sp, #16
 800c960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c964:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c966:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c968:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c96c:	1d21      	adds	r1, r4, #4
 800c96e:	4608      	mov	r0, r1
 800c970:	9103      	str	r1, [sp, #12]
 800c972:	f7fe fb26 	bl	800afc2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c976:	6a23      	ldr	r3, [r4, #32]
 800c978:	4620      	mov	r0, r4
 800c97a:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c97c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c980:	9903      	ldr	r1, [sp, #12]
 800c982:	f013 0f04 	tst.w	r3, #4
 800c986:	d0de      	beq.n	800c946 <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c988:	69a3      	ldr	r3, [r4, #24]
 800c98a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800c98c:	459a      	cmp	sl, r3
 800c98e:	d205      	bcs.n	800c99c <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c990:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c992:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c994:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c996:	f7fe fafd 	bl	800af94 <vListInsert>
 800c99a:	e7d4      	b.n	800c946 <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c99c:	2300      	movs	r3, #0
 800c99e:	4652      	mov	r2, sl
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	f8cd 9000 	str.w	r9, [sp]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	f7ff ff94 	bl	800c8d4 <xTimerGenericCommand>
				configASSERT( xResult );
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1ca      	bne.n	800c946 <prvSampleTimeNow+0x1e>
 800c9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	e7fe      	b.n	800c9c0 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e7c7      	b.n	800c956 <prvSampleTimeNow+0x2e>
 800c9c6:	bf00      	nop
 800c9c8:	2400f060 	.word	0x2400f060
 800c9cc:	2400f064 	.word	0x2400f064
 800c9d0:	2400f130 	.word	0x2400f130

0800c9d4 <prvTimerTask>:
{
 800c9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9d8:	4d6e      	ldr	r5, [pc, #440]	; (800cb94 <prvTimerTask+0x1c0>)
{
 800c9da:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c9dc:	4e6e      	ldr	r6, [pc, #440]	; (800cb98 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9de:	682b      	ldr	r3, [r5, #0]
 800c9e0:	f8d3 8000 	ldr.w	r8, [r3]
 800c9e4:	f1b8 0f00 	cmp.w	r8, #0
 800c9e8:	d035      	beq.n	800ca56 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ea:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c9ec:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9ee:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800c9f2:	f7ff fb69 	bl	800c0c8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9f6:	a804      	add	r0, sp, #16
 800c9f8:	f7ff ff96 	bl	800c928 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800c9fc:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9fe:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d169      	bne.n	800cad8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca04:	2c00      	cmp	r4, #0
 800ca06:	d14c      	bne.n	800caa2 <prvTimerTask+0xce>
 800ca08:	4540      	cmp	r0, r8
 800ca0a:	d350      	bcc.n	800caae <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800ca0c:	f7ff fc00 	bl	800c210 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca16:	1d38      	adds	r0, r7, #4
 800ca18:	f7fe fad3 	bl	800afc2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca20:	0758      	lsls	r0, r3, #29
 800ca22:	d51a      	bpl.n	800ca5a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca24:	69b9      	ldr	r1, [r7, #24]
 800ca26:	4643      	mov	r3, r8
 800ca28:	464a      	mov	r2, r9
 800ca2a:	4638      	mov	r0, r7
 800ca2c:	4441      	add	r1, r8
 800ca2e:	f7ff ff01 	bl	800c834 <prvInsertTimerInActiveList>
 800ca32:	b1b0      	cbz	r0, 800ca62 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca34:	4623      	mov	r3, r4
 800ca36:	4642      	mov	r2, r8
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4638      	mov	r0, r7
 800ca3c:	9400      	str	r4, [sp, #0]
 800ca3e:	f7ff ff49 	bl	800c8d4 <xTimerGenericCommand>
			configASSERT( xResult );
 800ca42:	b970      	cbnz	r0, 800ca62 <prvTimerTask+0x8e>
 800ca44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	e7fe      	b.n	800ca54 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ca56:	2401      	movs	r4, #1
 800ca58:	e7cb      	b.n	800c9f2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca5a:	f023 0301 	bic.w	r3, r3, #1
 800ca5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	4638      	mov	r0, r7
 800ca66:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca68:	2200      	movs	r2, #0
 800ca6a:	a904      	add	r1, sp, #16
 800ca6c:	6830      	ldr	r0, [r6, #0]
 800ca6e:	f7fe ff4f 	bl	800b910 <xQueueReceive>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	d0b3      	beq.n	800c9de <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca76:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ca78:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	db2f      	blt.n	800cade <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ca7e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ca80:	6963      	ldr	r3, [r4, #20]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d132      	bne.n	800caec <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca86:	a803      	add	r0, sp, #12
 800ca88:	f7ff ff4e 	bl	800c928 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ca8c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca8e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800ca90:	2b09      	cmp	r3, #9
 800ca92:	d8e9      	bhi.n	800ca68 <prvTimerTask+0x94>
 800ca94:	e8df f003 	tbb	[pc, r3]
 800ca98:	572e2e2e 	.word	0x572e2e2e
 800ca9c:	2e2e765e 	.word	0x2e2e765e
 800caa0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800caa2:	4b3e      	ldr	r3, [pc, #248]	; (800cb9c <prvTimerTask+0x1c8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681c      	ldr	r4, [r3, #0]
 800caa8:	fab4 f484 	clz	r4, r4
 800caac:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800caae:	4622      	mov	r2, r4
 800cab0:	eba8 0109 	sub.w	r1, r8, r9
 800cab4:	6830      	ldr	r0, [r6, #0]
 800cab6:	f7ff f91a 	bl	800bcee <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800caba:	f7ff fba9 	bl	800c210 <xTaskResumeAll>
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d1d2      	bne.n	800ca68 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800cac2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800cac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caca:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	e7c7      	b.n	800ca68 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800cad8:	f7ff fb9a 	bl	800c210 <xTaskResumeAll>
}
 800cadc:	e7c4      	b.n	800ca68 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cade:	9b05      	ldr	r3, [sp, #20]
 800cae0:	9907      	ldr	r1, [sp, #28]
 800cae2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	dbbe      	blt.n	800ca68 <prvTimerTask+0x94>
 800caea:	e7c8      	b.n	800ca7e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800caec:	1d20      	adds	r0, r4, #4
 800caee:	f7fe fa68 	bl	800afc2 <uxListRemove>
 800caf2:	e7c8      	b.n	800ca86 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800caf4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800caf8:	4620      	mov	r0, r4
 800cafa:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cafc:	f043 0301 	orr.w	r3, r3, #1
 800cb00:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb04:	9b05      	ldr	r3, [sp, #20]
 800cb06:	4419      	add	r1, r3
 800cb08:	f7ff fe94 	bl	800c834 <prvInsertTimerInActiveList>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d0ab      	beq.n	800ca68 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb10:	6a23      	ldr	r3, [r4, #32]
 800cb12:	4620      	mov	r0, r4
 800cb14:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb16:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cb1a:	0759      	lsls	r1, r3, #29
 800cb1c:	d5a4      	bpl.n	800ca68 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb1e:	69a2      	ldr	r2, [r4, #24]
 800cb20:	2300      	movs	r3, #0
 800cb22:	9905      	ldr	r1, [sp, #20]
 800cb24:	4620      	mov	r0, r4
 800cb26:	9300      	str	r3, [sp, #0]
 800cb28:	440a      	add	r2, r1
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f7ff fed2 	bl	800c8d4 <xTimerGenericCommand>
							configASSERT( xResult );
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d199      	bne.n	800ca68 <prvTimerTask+0x94>
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	f383 8811 	msr	BASEPRI, r3
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f3bf 8f4f 	dsb	sy
 800cb44:	e7fe      	b.n	800cb44 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb4a:	f023 0301 	bic.w	r3, r3, #1
 800cb4e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800cb52:	e789      	b.n	800ca68 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb54:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cb58:	f043 0301 	orr.w	r3, r3, #1
 800cb5c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cb60:	9905      	ldr	r1, [sp, #20]
 800cb62:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cb64:	b941      	cbnz	r1, 800cb78 <prvTimerTask+0x1a4>
 800cb66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	e7fe      	b.n	800cb76 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cb78:	4603      	mov	r3, r0
 800cb7a:	4401      	add	r1, r0
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f7ff fe59 	bl	800c834 <prvInsertTimerInActiveList>
					break;
 800cb82:	e771      	b.n	800ca68 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb84:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800cb88:	079a      	lsls	r2, r3, #30
 800cb8a:	d4de      	bmi.n	800cb4a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f7fe f9a9 	bl	800aee4 <vPortFree>
 800cb92:	e769      	b.n	800ca68 <prvTimerTask+0x94>
 800cb94:	2400f060 	.word	0x2400f060
 800cb98:	2400f184 	.word	0x2400f184
 800cb9c:	2400f064 	.word	0x2400f064

0800cba0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800cba0:	8880      	ldrh	r0, [r0, #4]
 800cba2:	4770      	bx	lr

0800cba4 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800cba4:	2300      	movs	r3, #0
 800cba6:	8083      	strh	r3, [r0, #4]
 800cba8:	4770      	bx	lr
	...

0800cbac <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	6803      	ldr	r3, [r0, #0]
 800cbb0:	460e      	mov	r6, r1
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	4798      	blx	r3
 800cbba:	4604      	mov	r4, r0
 800cbbc:	682b      	ldr	r3, [r5, #0]
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	1b34      	subs	r4, r6, r4
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	b2a4      	uxth	r4, r4
 800cbc6:	4798      	blx	r3
 800cbc8:	88ab      	ldrh	r3, [r5, #4]
 800cbca:	fbb4 f4f0 	udiv	r4, r4, r0
 800cbce:	42a3      	cmp	r3, r4
 800cbd0:	d805      	bhi.n	800cbde <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 800cbd2:	4b0e      	ldr	r3, [pc, #56]	; (800cc0c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 800cbd4:	211d      	movs	r1, #29
 800cbd6:	4a0e      	ldr	r2, [pc, #56]	; (800cc10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800cbd8:	480e      	ldr	r0, [pc, #56]	; (800cc14 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 800cbda:	f013 fadb 	bl	8020194 <__assert_func>
 800cbde:	682b      	ldr	r3, [r5, #0]
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	4798      	blx	r3
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	4607      	mov	r7, r0
 800cbec:	4628      	mov	r0, r5
 800cbee:	6a1b      	ldr	r3, [r3, #32]
 800cbf0:	4798      	blx	r3
 800cbf2:	1bf3      	subs	r3, r6, r7
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	fbb3 f2f0 	udiv	r2, r3, r0
 800cbfa:	fb02 3010 	mls	r0, r2, r0, r3
 800cbfe:	b118      	cbz	r0, 800cc08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 800cc00:	4b05      	ldr	r3, [pc, #20]	; (800cc18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 800cc02:	211e      	movs	r1, #30
 800cc04:	4a02      	ldr	r2, [pc, #8]	; (800cc10 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 800cc06:	e7e7      	b.n	800cbd8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 800cc08:	4620      	mov	r0, r4
 800cc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc0c:	08023d46 	.word	0x08023d46
 800cc10:	08023eb2 	.word	0x08023eb2
 800cc14:	08023d5b 	.word	0x08023d5b
 800cc18:	08023d89 	.word	0x08023d89

0800cc1c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	6803      	ldr	r3, [r0, #0]
 800cc20:	460d      	mov	r5, r1
 800cc22:	4604      	mov	r4, r0
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	4798      	blx	r3
 800cc28:	4285      	cmp	r5, r0
 800cc2a:	d905      	bls.n	800cc38 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 800cc2c:	4b0c      	ldr	r3, [pc, #48]	; (800cc60 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 800cc2e:	212f      	movs	r1, #47	; 0x2f
 800cc30:	4a0c      	ldr	r2, [pc, #48]	; (800cc64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800cc32:	480d      	ldr	r0, [pc, #52]	; (800cc68 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 800cc34:	f013 faae 	bl	8020194 <__assert_func>
 800cc38:	6823      	ldr	r3, [r4, #0]
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	88a5      	ldrh	r5, [r4, #4]
 800cc3e:	69db      	ldr	r3, [r3, #28]
 800cc40:	4798      	blx	r3
 800cc42:	4285      	cmp	r5, r0
 800cc44:	d303      	bcc.n	800cc4e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 800cc46:	4b09      	ldr	r3, [pc, #36]	; (800cc6c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 800cc48:	2130      	movs	r1, #48	; 0x30
 800cc4a:	4a06      	ldr	r2, [pc, #24]	; (800cc64 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 800cc4c:	e7f1      	b.n	800cc32 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	4620      	mov	r0, r4
 800cc52:	88a1      	ldrh	r1, [r4, #4]
 800cc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc56:	4798      	blx	r3
 800cc58:	88a3      	ldrh	r3, [r4, #4]
 800cc5a:	3301      	adds	r3, #1
 800cc5c:	80a3      	strh	r3, [r4, #4]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	08023e03 	.word	0x08023e03
 800cc64:	08023ef5 	.word	0x08023ef5
 800cc68:	08023d5b 	.word	0x08023d5b
 800cc6c:	08023e1a 	.word	0x08023e1a

0800cc70 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	6803      	ldr	r3, [r0, #0]
 800cc74:	4616      	mov	r6, r2
 800cc76:	4604      	mov	r4, r0
 800cc78:	460d      	mov	r5, r1
 800cc7a:	6a1b      	ldr	r3, [r3, #32]
 800cc7c:	4798      	blx	r3
 800cc7e:	4286      	cmp	r6, r0
 800cc80:	d905      	bls.n	800cc8e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 800cc82:	4b06      	ldr	r3, [pc, #24]	; (800cc9c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 800cc84:	2139      	movs	r1, #57	; 0x39
 800cc86:	4a06      	ldr	r2, [pc, #24]	; (800cca0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 800cc88:	4806      	ldr	r0, [pc, #24]	; (800cca4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 800cc8a:	f013 fa83 	bl	8020194 <__assert_func>
 800cc8e:	6823      	ldr	r3, [r4, #0]
 800cc90:	4629      	mov	r1, r5
 800cc92:	4620      	mov	r0, r4
 800cc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cc9a:	4718      	bx	r3
 800cc9c:	08023e03 	.word	0x08023e03
 800cca0:	08023e68 	.word	0x08023e68
 800cca4:	08023d5b 	.word	0x08023d5b

0800cca8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800cca8:	4770      	bx	lr
	...

0800ccac <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800ccac:	4a02      	ldr	r2, [pc, #8]	; (800ccb8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800ccae:	6002      	str	r2, [r0, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	8082      	strh	r2, [r0, #4]
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop
 800ccb8:	08023e3c 	.word	0x08023e3c

0800ccbc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800ccbc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ccbe:	2000      	movs	r0, #0
 800ccc0:	b12b      	cbz	r3, 800ccce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ccc2:	b920      	cbnz	r0, 800ccce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ccc4:	1a5a      	subs	r2, r3, r1
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	4250      	negs	r0, r2
 800ccca:	4150      	adcs	r0, r2
 800cccc:	e7f8      	b.n	800ccc0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ccce:	4770      	bx	lr

0800ccd0 <_ZN8touchgfx9Container9removeAllEv>:
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ccd4:	b123      	cbz	r3, 800cce0 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ccd6:	6999      	ldr	r1, [r3, #24]
 800ccd8:	6281      	str	r1, [r0, #40]	; 0x28
 800ccda:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ccde:	e7f8      	b.n	800ccd2 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800cce0:	4770      	bx	lr

0800cce2 <_ZN8touchgfx9Container6unlinkEv>:
 800cce2:	2300      	movs	r3, #0
 800cce4:	6283      	str	r3, [r0, #40]	; 0x28
 800cce6:	4770      	bx	lr

0800cce8 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800cce8:	2200      	movs	r2, #0
 800ccea:	8002      	strh	r2, [r0, #0]
 800ccec:	8042      	strh	r2, [r0, #2]
 800ccee:	8082      	strh	r2, [r0, #4]
 800ccf0:	80c2      	strh	r2, [r0, #6]
 800ccf2:	4770      	bx	lr

0800ccf4 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	460d      	mov	r5, r1
 800ccf8:	4616      	mov	r6, r2
 800ccfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ccfc:	b13c      	cbz	r4, 800cd0e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	4620      	mov	r0, r4
 800cd02:	4632      	mov	r2, r6
 800cd04:	4629      	mov	r1, r5
 800cd06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd08:	4798      	blx	r3
 800cd0a:	69a4      	ldr	r4, [r4, #24]
 800cd0c:	e7f6      	b.n	800ccfc <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}

0800cd10 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	460d      	mov	r5, r1
 800cd14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cd16:	b134      	cbz	r4, 800cd26 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	689b      	ldr	r3, [r3, #8]
 800cd20:	4798      	blx	r3
 800cd22:	69a4      	ldr	r4, [r4, #24]
 800cd24:	e7f7      	b.n	800cd16 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800cd26:	bd38      	pop	{r3, r4, r5, pc}

0800cd28 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800cd28:	b510      	push	{r4, lr}
 800cd2a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800cd2c:	b12c      	cbz	r4, 800cd3a <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800cd2e:	6823      	ldr	r3, [r4, #0]
 800cd30:	4620      	mov	r0, r4
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	4798      	blx	r3
 800cd36:	69a4      	ldr	r4, [r4, #24]
 800cd38:	e7f8      	b.n	800cd2c <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800cd3a:	bd10      	pop	{r4, pc}

0800cd3c <_ZN8touchgfx9ContainerD1Ev>:
 800cd3c:	4770      	bx	lr

0800cd3e <_ZN8touchgfx9ContainerD0Ev>:
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	212c      	movs	r1, #44	; 0x2c
 800cd44:	f012 fbff 	bl	801f546 <_ZdlPvj>
 800cd48:	4620      	mov	r0, r4
 800cd4a:	bd10      	pop	{r4, pc}

0800cd4c <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800cd4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cd4e:	b19b      	cbz	r3, 800cd78 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800cd50:	428b      	cmp	r3, r1
 800cd52:	d109      	bne.n	800cd68 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800cd54:	699a      	ldr	r2, [r3, #24]
 800cd56:	2100      	movs	r1, #0
 800cd58:	6159      	str	r1, [r3, #20]
 800cd5a:	6282      	str	r2, [r0, #40]	; 0x28
 800cd5c:	b902      	cbnz	r2, 800cd60 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800cd5e:	4770      	bx	lr
 800cd60:	6199      	str	r1, [r3, #24]
 800cd62:	4770      	bx	lr
 800cd64:	4613      	mov	r3, r2
 800cd66:	b13a      	cbz	r2, 800cd78 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800cd68:	699a      	ldr	r2, [r3, #24]
 800cd6a:	428a      	cmp	r2, r1
 800cd6c:	d1fa      	bne.n	800cd64 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800cd6e:	698a      	ldr	r2, [r1, #24]
 800cd70:	619a      	str	r2, [r3, #24]
 800cd72:	2300      	movs	r3, #0
 800cd74:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800cd78:	4770      	bx	lr

0800cd7a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800cd7a:	b410      	push	{r4}
 800cd7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cd7e:	4604      	mov	r4, r0
 800cd80:	b92b      	cbnz	r3, 800cd8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800cd82:	6803      	ldr	r3, [r0, #0]
 800cd84:	4611      	mov	r1, r2
 800cd86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd8c:	4718      	bx	r3
 800cd8e:	b941      	cbnz	r1, 800cda2 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800cd90:	6193      	str	r3, [r2, #24]
 800cd92:	6282      	str	r2, [r0, #40]	; 0x28
 800cd94:	6154      	str	r4, [r2, #20]
 800cd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd9a:	4770      	bx	lr
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2800      	cmp	r0, #0
 800cda0:	d0f9      	beq.n	800cd96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800cda2:	4299      	cmp	r1, r3
 800cda4:	6998      	ldr	r0, [r3, #24]
 800cda6:	d1f9      	bne.n	800cd9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800cda8:	6190      	str	r0, [r2, #24]
 800cdaa:	618a      	str	r2, [r1, #24]
 800cdac:	e7f2      	b.n	800cd94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

0800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800cdb0:	4288      	cmp	r0, r1
 800cdb2:	b508      	push	{r3, lr}
 800cdb4:	d105      	bne.n	800cdc2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 800cdb6:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 800cdb8:	2120      	movs	r1, #32
 800cdba:	4a11      	ldr	r2, [pc, #68]	; (800ce00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800cdbc:	4811      	ldr	r0, [pc, #68]	; (800ce04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 800cdbe:	f013 f9e9 	bl	8020194 <__assert_func>
 800cdc2:	694b      	ldr	r3, [r1, #20]
 800cdc4:	b11b      	cbz	r3, 800cdce <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800cdc6:	4b10      	ldr	r3, [pc, #64]	; (800ce08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 800cdc8:	2121      	movs	r1, #33	; 0x21
 800cdca:	4a0d      	ldr	r2, [pc, #52]	; (800ce00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800cdcc:	e7f6      	b.n	800cdbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800cdce:	e9c1 0305 	strd	r0, r3, [r1, #20]
 800cdd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800cdd4:	b913      	cbnz	r3, 800cddc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 800cdd6:	6281      	str	r1, [r0, #40]	; 0x28
 800cdd8:	bd08      	pop	{r3, pc}
 800cdda:	4613      	mov	r3, r2
 800cddc:	699a      	ldr	r2, [r3, #24]
 800cdde:	b12a      	cbz	r2, 800cdec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 800cde0:	428b      	cmp	r3, r1
 800cde2:	d1fa      	bne.n	800cdda <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 800cde4:	4b09      	ldr	r3, [pc, #36]	; (800ce0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800cde6:	2132      	movs	r1, #50	; 0x32
 800cde8:	4a05      	ldr	r2, [pc, #20]	; (800ce00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800cdea:	e7e7      	b.n	800cdbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800cdec:	428b      	cmp	r3, r1
 800cdee:	d103      	bne.n	800cdf8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 800cdf0:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 800cdf2:	2135      	movs	r1, #53	; 0x35
 800cdf4:	4a02      	ldr	r2, [pc, #8]	; (800ce00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 800cdf6:	e7e1      	b.n	800cdbc <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 800cdf8:	6199      	str	r1, [r3, #24]
 800cdfa:	e7ed      	b.n	800cdd8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 800cdfc:	08023f33 	.word	0x08023f33
 800ce00:	0802408c 	.word	0x0802408c
 800ce04:	08023f5f 	.word	0x08023f5f
 800ce08:	08023f92 	.word	0x08023f92
 800ce0c:	08023fc8 	.word	0x08023fc8

0800ce10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800ce10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce14:	461f      	mov	r7, r3
 800ce16:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	4616      	mov	r6, r2
 800ce1e:	b103      	cbz	r3, 800ce22 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ce20:	6038      	str	r0, [r7, #0]
 800ce22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ce24:	b314      	cbz	r4, 800ce6c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ce26:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800ce2a:	b1eb      	cbz	r3, 800ce68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ce2c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ce30:	428d      	cmp	r5, r1
 800ce32:	db19      	blt.n	800ce68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ce34:	b289      	uxth	r1, r1
 800ce36:	8923      	ldrh	r3, [r4, #8]
 800ce38:	440b      	add	r3, r1
 800ce3a:	b21b      	sxth	r3, r3
 800ce3c:	429d      	cmp	r5, r3
 800ce3e:	da13      	bge.n	800ce68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ce40:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ce44:	4296      	cmp	r6, r2
 800ce46:	db0f      	blt.n	800ce68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ce48:	b292      	uxth	r2, r2
 800ce4a:	8963      	ldrh	r3, [r4, #10]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	b21b      	sxth	r3, r3
 800ce50:	429e      	cmp	r6, r3
 800ce52:	da09      	bge.n	800ce68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ce54:	6823      	ldr	r3, [r4, #0]
 800ce56:	1ab2      	subs	r2, r6, r2
 800ce58:	1a69      	subs	r1, r5, r1
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800ce60:	b212      	sxth	r2, r2
 800ce62:	463b      	mov	r3, r7
 800ce64:	b209      	sxth	r1, r1
 800ce66:	47c0      	blx	r8
 800ce68:	69a4      	ldr	r4, [r4, #24]
 800ce6a:	e7db      	b.n	800ce24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ce70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4c6d      	ldr	r4, [pc, #436]	; (800d02c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ce76:	b0a1      	sub	sp, #132	; 0x84
 800ce78:	4606      	mov	r6, r0
 800ce7a:	6824      	ldr	r4, [r4, #0]
 800ce7c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800ce7e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800ce82:	2400      	movs	r4, #0
 800ce84:	9303      	str	r3, [sp, #12]
 800ce86:	802c      	strh	r4, [r5, #0]
 800ce88:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800ce8a:	802c      	strh	r4, [r5, #0]
 800ce8c:	601c      	str	r4, [r3, #0]
 800ce8e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ce92:	f7ff ffbd 	bl	800ce10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ce96:	f1b9 0f03 	cmp.w	r9, #3
 800ce9a:	f340 80c1 	ble.w	800d020 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ce9e:	4631      	mov	r1, r6
 800cea0:	a80c      	add	r0, sp, #48	; 0x30
 800cea2:	f006 fa79 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cea6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800ceaa:	9306      	str	r3, [sp, #24]
 800ceac:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800ceb0:	9307      	str	r3, [sp, #28]
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	f8d3 a000 	ldr.w	sl, [r3]
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	f000 80b3 	beq.w	800d026 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800cec0:	4651      	mov	r1, sl
 800cec2:	a810      	add	r0, sp, #64	; 0x40
 800cec4:	f006 fa68 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cec8:	2002      	movs	r0, #2
 800ceca:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800cece:	9b01      	ldr	r3, [sp, #4]
 800ced0:	9a06      	ldr	r2, [sp, #24]
 800ced2:	fb91 f1f0 	sdiv	r1, r1, r0
 800ced6:	189d      	adds	r5, r3, r2
 800ced8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800cedc:	9a07      	ldr	r2, [sp, #28]
 800cede:	4419      	add	r1, r3
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	4413      	add	r3, r2
 800cee4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800cee8:	1a6d      	subs	r5, r5, r1
 800ceea:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800ceee:	fb92 f2f0 	sdiv	r2, r2, r0
 800cef2:	440a      	add	r2, r1
 800cef4:	1a9b      	subs	r3, r3, r2
 800cef6:	435b      	muls	r3, r3
 800cef8:	fb05 3505 	mla	r5, r5, r5, r3
 800cefc:	4f4c      	ldr	r7, [pc, #304]	; (800d030 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800cefe:	ac10      	add	r4, sp, #64	; 0x40
 800cf00:	f1b9 0f0c 	cmp.w	r9, #12
 800cf04:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cf06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf08:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cf0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf0c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cf0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf10:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800cf14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf18:	f04f 0303 	mov.w	r3, #3
 800cf1c:	bfd8      	it	le
 800cf1e:	f109 32ff 	addle.w	r2, r9, #4294967295
 800cf22:	f04f 0400 	mov.w	r4, #0
 800cf26:	f8cd 9000 	str.w	r9, [sp]
 800cf2a:	bfcc      	ite	gt
 800cf2c:	4698      	movgt	r8, r3
 800cf2e:	fb92 f8f3 	sdivle	r8, r2, r3
 800cf32:	1c63      	adds	r3, r4, #1
 800cf34:	aa10      	add	r2, sp, #64	; 0x40
 800cf36:	f004 0401 	and.w	r4, r4, #1
 800cf3a:	f04f 0b00 	mov.w	fp, #0
 800cf3e:	9308      	str	r3, [sp, #32]
 800cf40:	9b00      	ldr	r3, [sp, #0]
 800cf42:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800cf46:	fb93 f3f8 	sdiv	r3, r3, r8
 800cf4a:	3404      	adds	r4, #4
 800cf4c:	b29b      	uxth	r3, r3
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	9a04      	ldr	r2, [sp, #16]
 800cf52:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cf56:	fb13 f302 	smulbb	r3, r3, r2
 800cf5a:	9a01      	ldr	r2, [sp, #4]
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	1899      	adds	r1, r3, r2
 800cf60:	9305      	str	r3, [sp, #20]
 800cf62:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800cf66:	b209      	sxth	r1, r1
 800cf68:	4299      	cmp	r1, r3
 800cf6a:	db4d      	blt.n	800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cf6c:	8932      	ldrh	r2, [r6, #8]
 800cf6e:	4413      	add	r3, r2
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	4299      	cmp	r1, r3
 800cf74:	da48      	bge.n	800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cf76:	9b04      	ldr	r3, [sp, #16]
 800cf78:	6827      	ldr	r7, [r4, #0]
 800cf7a:	fb17 f703 	smulbb	r7, r7, r3
 800cf7e:	9b02      	ldr	r3, [sp, #8]
 800cf80:	b2bf      	uxth	r7, r7
 800cf82:	18fa      	adds	r2, r7, r3
 800cf84:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800cf88:	b212      	sxth	r2, r2
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	db3c      	blt.n	800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cf8e:	8970      	ldrh	r0, [r6, #10]
 800cf90:	4403      	add	r3, r0
 800cf92:	b21b      	sxth	r3, r3
 800cf94:	429a      	cmp	r2, r3
 800cf96:	da37      	bge.n	800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf9e:	ab0b      	add	r3, sp, #44	; 0x2c
 800cfa0:	f7ff ff36 	bl	800ce10 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800cfa4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfa6:	b37a      	cbz	r2, 800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cfa8:	4552      	cmp	r2, sl
 800cfaa:	d02d      	beq.n	800d008 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800cfac:	4611      	mov	r1, r2
 800cfae:	a80e      	add	r0, sp, #56	; 0x38
 800cfb0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfb2:	f006 f9f1 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800cfb6:	f04f 0e02 	mov.w	lr, #2
 800cfba:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800cfbe:	9a06      	ldr	r2, [sp, #24]
 800cfc0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800cfc4:	9b01      	ldr	r3, [sp, #4]
 800cfc6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800cfca:	4413      	add	r3, r2
 800cfcc:	9a07      	ldr	r2, [sp, #28]
 800cfce:	fb91 f1fe 	sdiv	r1, r1, lr
 800cfd2:	fb9c fcfe 	sdiv	ip, ip, lr
 800cfd6:	4401      	add	r1, r0
 800cfd8:	1a58      	subs	r0, r3, r1
 800cfda:	9b02      	ldr	r3, [sp, #8]
 800cfdc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800cfe0:	4413      	add	r3, r2
 800cfe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfe4:	448c      	add	ip, r1
 800cfe6:	eba3 030c 	sub.w	r3, r3, ip
 800cfea:	435b      	muls	r3, r3
 800cfec:	fb00 3300 	mla	r3, r0, r0, r3
 800cff0:	42ab      	cmp	r3, r5
 800cff2:	d208      	bcs.n	800d006 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800cff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cff6:	461d      	mov	r5, r3
 800cff8:	9803      	ldr	r0, [sp, #12]
 800cffa:	6001      	str	r1, [r0, #0]
 800cffc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800cffe:	9805      	ldr	r0, [sp, #20]
 800d000:	8008      	strh	r0, [r1, #0]
 800d002:	992b      	ldr	r1, [sp, #172]	; 0xac
 800d004:	800f      	strh	r7, [r1, #0]
 800d006:	4692      	mov	sl, r2
 800d008:	f10b 0b01 	add.w	fp, fp, #1
 800d00c:	3408      	adds	r4, #8
 800d00e:	f1bb 0f04 	cmp.w	fp, #4
 800d012:	d19d      	bne.n	800cf50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d014:	9b00      	ldr	r3, [sp, #0]
 800d016:	9c08      	ldr	r4, [sp, #32]
 800d018:	444b      	add	r3, r9
 800d01a:	4544      	cmp	r4, r8
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	d188      	bne.n	800cf32 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d020:	b021      	add	sp, #132	; 0x84
 800d022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d026:	f04f 35ff 	mov.w	r5, #4294967295
 800d02a:	e767      	b.n	800cefc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d02c:	2400f198 	.word	0x2400f198
 800d030:	080225a8 	.word	0x080225a8

0800d034 <_ZN8touchgfx4RectaNERKS0_>:
 800d034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d038:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d03c:	888c      	ldrh	r4, [r1, #4]
 800d03e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d042:	443c      	add	r4, r7
 800d044:	b2a4      	uxth	r4, r4
 800d046:	fa0f f884 	sxth.w	r8, r4
 800d04a:	45c1      	cmp	r9, r8
 800d04c:	da2f      	bge.n	800d0ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d04e:	8882      	ldrh	r2, [r0, #4]
 800d050:	444a      	add	r2, r9
 800d052:	b292      	uxth	r2, r2
 800d054:	fa0f fe82 	sxth.w	lr, r2
 800d058:	4577      	cmp	r7, lr
 800d05a:	da28      	bge.n	800d0ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d05c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d060:	88cb      	ldrh	r3, [r1, #6]
 800d062:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d066:	442b      	add	r3, r5
 800d068:	b21b      	sxth	r3, r3
 800d06a:	429e      	cmp	r6, r3
 800d06c:	da1f      	bge.n	800d0ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d06e:	88c3      	ldrh	r3, [r0, #6]
 800d070:	4433      	add	r3, r6
 800d072:	b29b      	uxth	r3, r3
 800d074:	fa0f fc83 	sxth.w	ip, r3
 800d078:	4565      	cmp	r5, ip
 800d07a:	da18      	bge.n	800d0ae <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d07c:	454f      	cmp	r7, r9
 800d07e:	bfb8      	it	lt
 800d080:	464f      	movlt	r7, r9
 800d082:	42b5      	cmp	r5, r6
 800d084:	bfb8      	it	lt
 800d086:	4635      	movlt	r5, r6
 800d088:	45f0      	cmp	r8, lr
 800d08a:	bfd8      	it	le
 800d08c:	4622      	movle	r2, r4
 800d08e:	1bd2      	subs	r2, r2, r7
 800d090:	8082      	strh	r2, [r0, #4]
 800d092:	884a      	ldrh	r2, [r1, #2]
 800d094:	88c9      	ldrh	r1, [r1, #6]
 800d096:	8007      	strh	r7, [r0, #0]
 800d098:	440a      	add	r2, r1
 800d09a:	8045      	strh	r5, [r0, #2]
 800d09c:	b292      	uxth	r2, r2
 800d09e:	b211      	sxth	r1, r2
 800d0a0:	458c      	cmp	ip, r1
 800d0a2:	bfa8      	it	ge
 800d0a4:	4613      	movge	r3, r2
 800d0a6:	1b5b      	subs	r3, r3, r5
 800d0a8:	80c3      	strh	r3, [r0, #6]
 800d0aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	8003      	strh	r3, [r0, #0]
 800d0b2:	8043      	strh	r3, [r0, #2]
 800d0b4:	8083      	strh	r3, [r0, #4]
 800d0b6:	80c3      	strh	r3, [r0, #6]
 800d0b8:	e7f7      	b.n	800d0aa <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d0ba:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	dd06      	ble.n	800d0d0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d0c2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	bfcc      	ite	gt
 800d0ca:	2000      	movgt	r0, #0
 800d0cc:	2001      	movle	r0, #1
 800d0ce:	4770      	bx	lr
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	4770      	bx	lr

0800d0d4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4604      	mov	r4, r0
 800d0dc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800d0de:	8003      	strh	r3, [r0, #0]
 800d0e0:	8043      	strh	r3, [r0, #2]
 800d0e2:	8083      	strh	r3, [r0, #4]
 800d0e4:	80c3      	strh	r3, [r0, #6]
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	d040      	beq.n	800d16c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d0ea:	1d28      	adds	r0, r5, #4
 800d0ec:	f7ff ffe5 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0f0:	b988      	cbnz	r0, 800d116 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f7ff ffe1 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800d0f8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d0fc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d100:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d104:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d108:	b138      	cbz	r0, 800d11a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d10a:	8022      	strh	r2, [r4, #0]
 800d10c:	8063      	strh	r3, [r4, #2]
 800d10e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d112:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d116:	69ad      	ldr	r5, [r5, #24]
 800d118:	e7e5      	b.n	800d0e6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d11a:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d11e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d122:	4290      	cmp	r0, r2
 800d124:	4607      	mov	r7, r0
 800d126:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d12a:	460e      	mov	r6, r1
 800d12c:	bfa8      	it	ge
 800d12e:	4617      	movge	r7, r2
 800d130:	4299      	cmp	r1, r3
 800d132:	4472      	add	r2, lr
 800d134:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800d138:	bfa8      	it	ge
 800d13a:	461e      	movge	r6, r3
 800d13c:	4440      	add	r0, r8
 800d13e:	4471      	add	r1, lr
 800d140:	4463      	add	r3, ip
 800d142:	b200      	sxth	r0, r0
 800d144:	8027      	strh	r7, [r4, #0]
 800d146:	b212      	sxth	r2, r2
 800d148:	8066      	strh	r6, [r4, #2]
 800d14a:	b209      	sxth	r1, r1
 800d14c:	b21b      	sxth	r3, r3
 800d14e:	4290      	cmp	r0, r2
 800d150:	bfac      	ite	ge
 800d152:	ebc7 0200 	rsbge	r2, r7, r0
 800d156:	ebc7 0202 	rsblt	r2, r7, r2
 800d15a:	4299      	cmp	r1, r3
 800d15c:	bfac      	ite	ge
 800d15e:	ebc6 0301 	rsbge	r3, r6, r1
 800d162:	ebc6 0303 	rsblt	r3, r6, r3
 800d166:	80a2      	strh	r2, [r4, #4]
 800d168:	80e3      	strh	r3, [r4, #6]
 800d16a:	e7d4      	b.n	800d116 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d16c:	4620      	mov	r0, r4
 800d16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d172 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800d172:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d176:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d17a:	b383      	cbz	r3, 800d1de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d17c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d17e:	b374      	cbz	r4, 800d1de <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800d180:	f9b1 5000 	ldrsh.w	r5, [r1]
 800d184:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800d188:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800d18c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800d190:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d194:	b303      	cbz	r3, 800d1d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d196:	4668      	mov	r0, sp
 800d198:	1d21      	adds	r1, r4, #4
 800d19a:	f8ad 5000 	strh.w	r5, [sp]
 800d19e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800d1a2:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d1a6:	f8ad 8006 	strh.w	r8, [sp, #6]
 800d1aa:	f7ff ff43 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800d1ae:	4668      	mov	r0, sp
 800d1b0:	f7ff ff83 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800d1b4:	b980      	cbnz	r0, 800d1d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800d1b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1ba:	4669      	mov	r1, sp
 800d1bc:	88a2      	ldrh	r2, [r4, #4]
 800d1be:	4620      	mov	r0, r4
 800d1c0:	1a9b      	subs	r3, r3, r2
 800d1c2:	88e2      	ldrh	r2, [r4, #6]
 800d1c4:	f8ad 3000 	strh.w	r3, [sp]
 800d1c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d1cc:	1a9b      	subs	r3, r3, r2
 800d1ce:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	4798      	blx	r3
 800d1d8:	69a4      	ldr	r4, [r4, #24]
 800d1da:	2c00      	cmp	r4, #0
 800d1dc:	d1d8      	bne.n	800d190 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800d1de:	b002      	add	sp, #8
 800d1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d1e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800d1e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	4616      	mov	r6, r2
 800d1ee:	b323      	cbz	r3, 800d23a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d1f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d1f2:	b314      	cbz	r4, 800d23a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800d1f4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d1f8:	b1eb      	cbz	r3, 800d236 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d1fa:	6828      	ldr	r0, [r5, #0]
 800d1fc:	466b      	mov	r3, sp
 800d1fe:	6869      	ldr	r1, [r5, #4]
 800d200:	c303      	stmia	r3!, {r0, r1}
 800d202:	4668      	mov	r0, sp
 800d204:	1d21      	adds	r1, r4, #4
 800d206:	f7ff ff15 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800d20a:	4668      	mov	r0, sp
 800d20c:	f7ff ff55 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800d210:	b988      	cbnz	r0, 800d236 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800d212:	f8bd 3000 	ldrh.w	r3, [sp]
 800d216:	4669      	mov	r1, sp
 800d218:	88a2      	ldrh	r2, [r4, #4]
 800d21a:	4620      	mov	r0, r4
 800d21c:	1a9b      	subs	r3, r3, r2
 800d21e:	88e2      	ldrh	r2, [r4, #6]
 800d220:	f8ad 3000 	strh.w	r3, [sp]
 800d224:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800d228:	1a9b      	subs	r3, r3, r2
 800d22a:	4632      	mov	r2, r6
 800d22c:	f8ad 3002 	strh.w	r3, [sp, #2]
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d234:	4798      	blx	r3
 800d236:	69a4      	ldr	r4, [r4, #24]
 800d238:	e7db      	b.n	800d1f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800d23a:	b002      	add	sp, #8
 800d23c:	bd70      	pop	{r4, r5, r6, pc}

0800d23e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800d23e:	6803      	ldr	r3, [r0, #0]
 800d240:	b513      	push	{r0, r1, r4, lr}
 800d242:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800d246:	2300      	movs	r3, #0
 800d248:	e9cd 3300 	strd	r3, r3, [sp]
 800d24c:	466b      	mov	r3, sp
 800d24e:	47a0      	blx	r4
 800d250:	b002      	add	sp, #8
 800d252:	bd10      	pop	{r4, pc}

0800d254 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800d254:	2301      	movs	r3, #1
 800d256:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d25a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d25e:	4770      	bx	lr

0800d260 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800d260:	2301      	movs	r3, #1
 800d262:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800d266:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800d26a:	4770      	bx	lr

0800d26c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800d26c:	6843      	ldr	r3, [r0, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	725a      	strb	r2, [r3, #9]
 800d272:	6840      	ldr	r0, [r0, #4]
 800d274:	6803      	ldr	r3, [r0, #0]
 800d276:	691b      	ldr	r3, [r3, #16]
 800d278:	4718      	bx	r3

0800d27a <_ZN8touchgfx3HAL8flushDMAEv>:
 800d27a:	6840      	ldr	r0, [r0, #4]
 800d27c:	6803      	ldr	r3, [r0, #0]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	4718      	bx	r3

0800d282 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800d282:	b530      	push	{r4, r5, lr}
 800d284:	b08b      	sub	sp, #44	; 0x2c
 800d286:	6804      	ldr	r4, [r0, #0]
 800d288:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800d28c:	9509      	str	r5, [sp, #36]	; 0x24
 800d28e:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800d292:	9508      	str	r5, [sp, #32]
 800d294:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800d298:	9507      	str	r5, [sp, #28]
 800d29a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800d29e:	9506      	str	r5, [sp, #24]
 800d2a0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800d2a4:	9505      	str	r5, [sp, #20]
 800d2a6:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800d2aa:	9504      	str	r5, [sp, #16]
 800d2ac:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800d2b0:	9503      	str	r5, [sp, #12]
 800d2b2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800d2b6:	9502      	str	r5, [sp, #8]
 800d2b8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800d2bc:	e9cd 3500 	strd	r3, r5, [sp]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	47a0      	blx	r4
 800d2c8:	b00b      	add	sp, #44	; 0x2c
 800d2ca:	bd30      	pop	{r4, r5, pc}

0800d2cc <_ZN8touchgfx3HAL10beginFrameEv>:
 800d2cc:	4b04      	ldr	r3, [pc, #16]	; (800d2e0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	b123      	cbz	r3, 800d2dc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800d2d2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800d2d6:	f080 0001 	eor.w	r0, r0, #1
 800d2da:	4770      	bx	lr
 800d2dc:	2001      	movs	r0, #1
 800d2de:	4770      	bx	lr
 800d2e0:	2400f196 	.word	0x2400f196

0800d2e4 <_ZN8touchgfx3HAL8endFrameEv>:
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	4604      	mov	r4, r0
 800d2e8:	6840      	ldr	r0, [r0, #4]
 800d2ea:	6803      	ldr	r3, [r0, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	4798      	blx	r3
 800d2f0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800d2f4:	b113      	cbz	r3, 800d2fc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800d2fc:	bd10      	pop	{r4, pc}

0800d2fe <_ZN8touchgfx3HAL10initializeEv>:
 800d2fe:	b510      	push	{r4, lr}
 800d300:	4604      	mov	r4, r0
 800d302:	f7f4 fd5d 	bl	8001dc0 <_ZN8touchgfx10OSWrappers10initializeEv>
 800d306:	6860      	ldr	r0, [r4, #4]
 800d308:	6803      	ldr	r3, [r0, #0]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	4798      	blx	r3
 800d30e:	68e0      	ldr	r0, [r4, #12]
 800d310:	6803      	ldr	r3, [r0, #0]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	4798      	blx	r3
 800d316:	6823      	ldr	r3, [r4, #0]
 800d318:	4620      	mov	r0, r4
 800d31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d320:	4718      	bx	r3
	...

0800d324 <_ZN8touchgfx3HAL4tickEv>:
 800d324:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d326:	6803      	ldr	r3, [r0, #0]
 800d328:	4604      	mov	r4, r0
 800d32a:	4d5b      	ldr	r5, [pc, #364]	; (800d498 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800d32c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d330:	4798      	blx	r3
 800d332:	2800      	cmp	r0, #0
 800d334:	f000 8095 	beq.w	800d462 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800d338:	2001      	movs	r0, #1
 800d33a:	2600      	movs	r6, #0
 800d33c:	f7f4 fa65 	bl	800180a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d340:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800d344:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800d348:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d34c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 800d350:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 800d354:	b133      	cbz	r3, 800d364 <_ZN8touchgfx3HAL4tickEv+0x40>
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	4620      	mov	r0, r4
 800d35a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800d35e:	4798      	blx	r3
 800d360:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 800d364:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800d368:	2601      	movs	r6, #1
 800d36a:	6862      	ldr	r2, [r4, #4]
 800d36c:	f083 0301 	eor.w	r3, r3, #1
 800d370:	702e      	strb	r6, [r5, #0]
 800d372:	7253      	strb	r3, [r2, #9]
 800d374:	f004 ffe6 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 800d378:	6803      	ldr	r3, [r0, #0]
 800d37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37c:	4798      	blx	r3
 800d37e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d382:	b90b      	cbnz	r3, 800d388 <_ZN8touchgfx3HAL4tickEv+0x64>
 800d384:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 800d388:	f004 ffdc 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 800d38c:	6803      	ldr	r3, [r0, #0]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	4798      	blx	r3
 800d392:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d394:	6803      	ldr	r3, [r0, #0]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	4798      	blx	r3
 800d39a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 800d39e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 800d3aa:	b10a      	cbz	r2, 800d3b0 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1eb      	bne.n	800d388 <_ZN8touchgfx3HAL4tickEv+0x64>
 800d3b0:	4a3a      	ldr	r2, [pc, #232]	; (800d49c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800d3b2:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 800d3b6:	7813      	ldrb	r3, [r2, #0]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	b25b      	sxtb	r3, r3
 800d3bc:	4299      	cmp	r1, r3
 800d3be:	7013      	strb	r3, [r2, #0]
 800d3c0:	dc10      	bgt.n	800d3e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	68e0      	ldr	r0, [r4, #12]
 800d3c6:	a902      	add	r1, sp, #8
 800d3c8:	7013      	strb	r3, [r2, #0]
 800d3ca:	aa03      	add	r2, sp, #12
 800d3cc:	6803      	ldr	r3, [r0, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	4798      	blx	r3
 800d3d2:	6823      	ldr	r3, [r4, #0]
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d050      	beq.n	800d47a <_ZN8touchgfx3HAL4tickEv+0x156>
 800d3d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d3dc:	4620      	mov	r0, r4
 800d3de:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d3e2:	4798      	blx	r3
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6960      	ldr	r0, [r4, #20]
 800d3e8:	f88d 3007 	strb.w	r3, [sp, #7]
 800d3ec:	b158      	cbz	r0, 800d406 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d3ee:	6803      	ldr	r3, [r0, #0]
 800d3f0:	f10d 0107 	add.w	r1, sp, #7
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	4798      	blx	r3
 800d3f8:	b128      	cbz	r0, 800d406 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800d3fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3fc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d400:	6803      	ldr	r3, [r0, #0]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	4798      	blx	r3
 800d406:	f104 001c 	add.w	r0, r4, #28
 800d40a:	f010 fbcf 	bl	801dbac <_ZN8touchgfx8Gestures4tickEv>
 800d40e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 800d412:	b30b      	cbz	r3, 800d458 <_ZN8touchgfx3HAL4tickEv+0x134>
 800d414:	6920      	ldr	r0, [r4, #16]
 800d416:	6803      	ldr	r3, [r0, #0]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	4798      	blx	r3
 800d41c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d41e:	4606      	mov	r6, r0
 800d420:	b903      	cbnz	r3, 800d424 <_ZN8touchgfx3HAL4tickEv+0x100>
 800d422:	6720      	str	r0, [r4, #112]	; 0x70
 800d424:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d426:	4a1e      	ldr	r2, [pc, #120]	; (800d4a0 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800d428:	1af3      	subs	r3, r6, r3
 800d42a:	4293      	cmp	r3, r2
 800d42c:	d914      	bls.n	800d458 <_ZN8touchgfx3HAL4tickEv+0x134>
 800d42e:	6920      	ldr	r0, [r4, #16]
 800d430:	6803      	ldr	r3, [r0, #0]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	4798      	blx	r3
 800d436:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d438:	2264      	movs	r2, #100	; 0x64
 800d43a:	1af3      	subs	r3, r6, r3
 800d43c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d440:	fbb0 f0f3 	udiv	r0, r0, r3
 800d444:	2800      	cmp	r0, #0
 800d446:	dc1d      	bgt.n	800d484 <_ZN8touchgfx3HAL4tickEv+0x160>
 800d448:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 800d44c:	6920      	ldr	r0, [r4, #16]
 800d44e:	2100      	movs	r1, #0
 800d450:	6803      	ldr	r3, [r0, #0]
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	4798      	blx	r3
 800d456:	6726      	str	r6, [r4, #112]	; 0x70
 800d458:	f004 ff74 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 800d45c:	6803      	ldr	r3, [r0, #0]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d460:	4798      	blx	r3
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	4620      	mov	r0, r4
 800d466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d46a:	4798      	blx	r3
 800d46c:	2001      	movs	r0, #1
 800d46e:	f7f4 f9cd 	bl	800180c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d472:	2300      	movs	r3, #0
 800d474:	702b      	strb	r3, [r5, #0]
 800d476:	b004      	add	sp, #16
 800d478:	bd70      	pop	{r4, r5, r6, pc}
 800d47a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d47e:	4620      	mov	r0, r4
 800d480:	4798      	blx	r3
 800d482:	e7af      	b.n	800d3e4 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800d484:	2863      	cmp	r0, #99	; 0x63
 800d486:	bfcb      	itete	gt
 800d488:	2300      	movgt	r3, #0
 800d48a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800d48e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 800d492:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 800d496:	e7d9      	b.n	800d44c <_ZN8touchgfx3HAL4tickEv+0x128>
 800d498:	2400f19c 	.word	0x2400f19c
 800d49c:	2400f19d 	.word	0x2400f19d
 800d4a0:	05f5e100 	.word	0x05f5e100

0800d4a4 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800d4a4:	f7f4 bcbc 	b.w	8001e20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800d4a8 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800d4a8:	6581      	str	r1, [r0, #88]	; 0x58
 800d4aa:	301c      	adds	r0, #28
 800d4ac:	f010 bb7c 	b.w	801dba8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800d4b0 <_ZN8touchgfx3HAL5touchEll>:
 800d4b0:	b530      	push	{r4, r5, lr}
 800d4b2:	b087      	sub	sp, #28
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	a804      	add	r0, sp, #16
 800d4b8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d4bc:	f004 fd08 	bl	8011ed0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800d4c0:	9b04      	ldr	r3, [sp, #16]
 800d4c2:	a906      	add	r1, sp, #24
 800d4c4:	a803      	add	r0, sp, #12
 800d4c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d4ca:	9b05      	ldr	r3, [sp, #20]
 800d4cc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800d4d0:	f004 fd50 	bl	8011f74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800d4d4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800d4d8:	f104 001c 	add.w	r0, r4, #28
 800d4dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800d4e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800d4e4:	b189      	cbz	r1, 800d50a <_ZN8touchgfx3HAL5touchEll+0x5a>
 800d4e6:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d4f2:	462a      	mov	r2, r5
 800d4f4:	f010 fb68 	bl	801dbc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800d4f8:	b128      	cbz	r0, 800d506 <_ZN8touchgfx3HAL5touchEll+0x56>
 800d4fa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800d4fe:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d500:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800d504:	6623      	str	r3, [r4, #96]	; 0x60
 800d506:	b007      	add	sp, #28
 800d508:	bd30      	pop	{r4, r5, pc}
 800d50a:	f010 fb9d 	bl	801dc48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d50e:	2301      	movs	r3, #1
 800d510:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d514:	e7f1      	b.n	800d4fa <_ZN8touchgfx3HAL5touchEll+0x4a>

0800d516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800d516:	b510      	push	{r4, lr}
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d046      	beq.n	800d5aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d51c:	ea81 0002 	eor.w	r0, r1, r2
 800d520:	07c4      	lsls	r4, r0, #31
 800d522:	d508      	bpl.n	800d536 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800d524:	440b      	add	r3, r1
 800d526:	3a01      	subs	r2, #1
 800d528:	428b      	cmp	r3, r1
 800d52a:	d93e      	bls.n	800d5aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d52c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d530:	f801 0b01 	strb.w	r0, [r1], #1
 800d534:	e7f8      	b.n	800d528 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800d536:	07d0      	lsls	r0, r2, #31
 800d538:	bf42      	ittt	mi
 800d53a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800d53e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800d542:	f801 0b01 	strbmi.w	r0, [r1], #1
 800d546:	2b01      	cmp	r3, #1
 800d548:	d911      	bls.n	800d56e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d54a:	ea81 0402 	eor.w	r4, r1, r2
 800d54e:	4610      	mov	r0, r2
 800d550:	07a4      	lsls	r4, r4, #30
 800d552:	d022      	beq.n	800d59a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800d554:	f023 0401 	bic.w	r4, r3, #1
 800d558:	440c      	add	r4, r1
 800d55a:	428c      	cmp	r4, r1
 800d55c:	4602      	mov	r2, r0
 800d55e:	d904      	bls.n	800d56a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800d560:	8812      	ldrh	r2, [r2, #0]
 800d562:	3002      	adds	r0, #2
 800d564:	f821 2b02 	strh.w	r2, [r1], #2
 800d568:	e7f7      	b.n	800d55a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	f023 0003 	bic.w	r0, r3, #3
 800d572:	4408      	add	r0, r1
 800d574:	4288      	cmp	r0, r1
 800d576:	4614      	mov	r4, r2
 800d578:	d904      	bls.n	800d584 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800d57a:	6824      	ldr	r4, [r4, #0]
 800d57c:	3204      	adds	r2, #4
 800d57e:	f841 4b04 	str.w	r4, [r1], #4
 800d582:	e7f7      	b.n	800d574 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	3a01      	subs	r2, #1
 800d58a:	440b      	add	r3, r1
 800d58c:	428b      	cmp	r3, r1
 800d58e:	d90c      	bls.n	800d5aa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800d590:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800d594:	f801 0b01 	strb.w	r0, [r1], #1
 800d598:	e7f8      	b.n	800d58c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800d59a:	0790      	lsls	r0, r2, #30
 800d59c:	d0e7      	beq.n	800d56e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d59e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d5a2:	3b02      	subs	r3, #2
 800d5a4:	f821 0b02 	strh.w	r0, [r1], #2
 800d5a8:	e7e1      	b.n	800d56e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800d5aa:	2001      	movs	r0, #1
 800d5ac:	bd10      	pop	{r4, pc}

0800d5ae <_ZN8touchgfx3HAL7noTouchEv>:
 800d5ae:	b510      	push	{r4, lr}
 800d5b0:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	b153      	cbz	r3, 800d5ce <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800d5b8:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 800d5c2:	301c      	adds	r0, #28
 800d5c4:	f010 fb40 	bl	801dc48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800d5ce:	bd10      	pop	{r4, pc}

0800d5d0 <_ZN8touchgfx3HAL3lcdEv>:
 800d5d0:	4b04      	ldr	r3, [pc, #16]	; (800d5e4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800d5d8:	b10a      	cbz	r2, 800d5de <_ZN8touchgfx3HAL3lcdEv+0xe>
 800d5da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d5dc:	b900      	cbnz	r0, 800d5e0 <_ZN8touchgfx3HAL3lcdEv+0x10>
 800d5de:	6898      	ldr	r0, [r3, #8]
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	2400f198 	.word	0x2400f198

0800d5e8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800d5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	4604      	mov	r4, r0
 800d5ee:	6980      	ldr	r0, [r0, #24]
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	460f      	mov	r7, r1
 800d5f4:	4690      	mov	r8, r2
 800d5f6:	4699      	mov	r9, r3
 800d5f8:	b930      	cbnz	r0, 800d608 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 800d5fa:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 800d5fc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800d600:	4a1b      	ldr	r2, [pc, #108]	; (800d670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800d602:	481c      	ldr	r0, [pc, #112]	; (800d674 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 800d604:	f012 fdc6 	bl	8020194 <__assert_func>
 800d608:	ad04      	add	r5, sp, #16
 800d60a:	2600      	movs	r6, #0
 800d60c:	f845 6d04 	str.w	r6, [r5, #-4]!
 800d610:	6806      	ldr	r6, [r0, #0]
 800d612:	9501      	str	r5, [sp, #4]
 800d614:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800d618:	9500      	str	r5, [sp, #0]
 800d61a:	6835      	ldr	r5, [r6, #0]
 800d61c:	47a8      	blx	r5
 800d61e:	4d16      	ldr	r5, [pc, #88]	; (800d678 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 800d620:	4606      	mov	r6, r0
 800d622:	f8a5 9000 	strh.w	r9, [r5]
 800d626:	f7ff ffd3 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800d62a:	6803      	ldr	r3, [r0, #0]
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	4798      	blx	r3
 800d630:	2801      	cmp	r0, #1
 800d632:	d012      	beq.n	800d65a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 800d634:	d306      	bcc.n	800d644 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 800d636:	280d      	cmp	r0, #13
 800d638:	d80b      	bhi.n	800d652 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 800d63c:	f240 115b 	movw	r1, #347	; 0x15b
 800d640:	4a0b      	ldr	r2, [pc, #44]	; (800d670 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 800d642:	e7de      	b.n	800d602 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 800d644:	882b      	ldrh	r3, [r5, #0]
 800d646:	fb08 7203 	mla	r2, r8, r3, r7
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800d650:	63e3      	str	r3, [r4, #60]	; 0x3c
 800d652:	4630      	mov	r0, r6
 800d654:	b005      	add	sp, #20
 800d656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65a:	882a      	ldrh	r2, [r5, #0]
 800d65c:	9b03      	ldr	r3, [sp, #12]
 800d65e:	fb08 7202 	mla	r2, r8, r2, r7
 800d662:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d666:	1a9a      	subs	r2, r3, r2
 800d668:	63e2      	str	r2, [r4, #60]	; 0x3c
 800d66a:	e7f2      	b.n	800d652 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 800d66c:	0802422d 	.word	0x0802422d
 800d670:	080244eb 	.word	0x080244eb
 800d674:	08024272 	.word	0x08024272
 800d678:	2400f192 	.word	0x2400f192
 800d67c:	08024298 	.word	0x08024298

0800d680 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800d680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d682:	b08b      	sub	sp, #44	; 0x2c
 800d684:	4617      	mov	r7, r2
 800d686:	4604      	mov	r4, r0
 800d688:	460e      	mov	r6, r1
 800d68a:	461d      	mov	r5, r3
 800d68c:	f7ff ffa0 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800d690:	6803      	ldr	r3, [r0, #0]
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	4798      	blx	r3
 800d696:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d69a:	9007      	str	r0, [sp, #28]
 800d69c:	4631      	mov	r1, r6
 800d69e:	6822      	ldr	r2, [r4, #0]
 800d6a0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d6a4:	4b0c      	ldr	r3, [pc, #48]	; (800d6d8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	9306      	str	r3, [sp, #24]
 800d6ac:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800d6b0:	9305      	str	r3, [sp, #20]
 800d6b2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d6bc:	9303      	str	r3, [sp, #12]
 800d6be:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d6c2:	9302      	str	r3, [sp, #8]
 800d6c4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d6c8:	e9cd 5300 	strd	r5, r3, [sp]
 800d6cc:	463b      	mov	r3, r7
 800d6ce:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	47a8      	blx	r5
 800d6d4:	b00b      	add	sp, #44	; 0x2c
 800d6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6d8:	2400f192 	.word	0x2400f192

0800d6dc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800d6dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6e0:	4698      	mov	r8, r3
 800d6e2:	6803      	ldr	r3, [r0, #0]
 800d6e4:	b08b      	sub	sp, #44	; 0x2c
 800d6e6:	4617      	mov	r7, r2
 800d6e8:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800d6ea:	460e      	mov	r6, r1
 800d6ec:	4b13      	ldr	r3, [pc, #76]	; (800d73c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800d6ee:	4604      	mov	r4, r0
 800d6f0:	f8b3 9000 	ldrh.w	r9, [r3]
 800d6f4:	f7ff ff6c 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800d6f8:	6803      	ldr	r3, [r0, #0]
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	4798      	blx	r3
 800d6fe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800d702:	2200      	movs	r2, #0
 800d704:	4631      	mov	r1, r6
 800d706:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800d70a:	2302      	movs	r3, #2
 800d70c:	4620      	mov	r0, r4
 800d70e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800d712:	2301      	movs	r3, #1
 800d714:	9305      	str	r3, [sp, #20]
 800d716:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d720:	9303      	str	r3, [sp, #12]
 800d722:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800d726:	9302      	str	r3, [sp, #8]
 800d728:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800d72c:	e9cd 8300 	strd	r8, r3, [sp]
 800d730:	463b      	mov	r3, r7
 800d732:	47a8      	blx	r5
 800d734:	b00b      	add	sp, #44	; 0x2c
 800d736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d73a:	bf00      	nop
 800d73c:	2400f192 	.word	0x2400f192

0800d740 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800d740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d744:	4698      	mov	r8, r3
 800d746:	6803      	ldr	r3, [r0, #0]
 800d748:	b087      	sub	sp, #28
 800d74a:	460e      	mov	r6, r1
 800d74c:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800d74e:	4617      	mov	r7, r2
 800d750:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800d752:	4604      	mov	r4, r0
 800d754:	f8b3 9000 	ldrh.w	r9, [r3]
 800d758:	f7ff ff3a 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800d75c:	6803      	ldr	r3, [r0, #0]
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	4798      	blx	r3
 800d762:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800d766:	463a      	mov	r2, r7
 800d768:	4631      	mov	r1, r6
 800d76a:	f8cd 900c 	str.w	r9, [sp, #12]
 800d76e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800d772:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800d776:	4620      	mov	r0, r4
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800d77e:	9301      	str	r3, [sp, #4]
 800d780:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	4643      	mov	r3, r8
 800d788:	47a8      	blx	r5
 800d78a:	b007      	add	sp, #28
 800d78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d790:	2400f192 	.word	0x2400f192

0800d794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800d794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d798:	4604      	mov	r4, r0
 800d79a:	b08f      	sub	sp, #60	; 0x3c
 800d79c:	4610      	mov	r0, r2
 800d79e:	460d      	mov	r5, r1
 800d7a0:	4691      	mov	r9, r2
 800d7a2:	461e      	mov	r6, r3
 800d7a4:	f007 fe04 	bl	80153b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	f000 809c 	beq.w	800d8e6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f8df b194 	ldr.w	fp, [pc, #404]	; 800d948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 800d7b6:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7bc:	4798      	blx	r3
 800d7be:	6823      	ldr	r3, [r4, #0]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f8df a188 	ldr.w	sl, [pc, #392]	; 800d94c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800d7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c8:	4798      	blx	r3
 800d7ca:	f8bb 3000 	ldrh.w	r3, [fp]
 800d7ce:	4f5b      	ldr	r7, [pc, #364]	; (800d93c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	f8ba 3000 	ldrh.w	r3, [sl]
 800d7d6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800d7da:	4640      	mov	r0, r8
 800d7dc:	9302      	str	r3, [sp, #8]
 800d7de:	883b      	ldrh	r3, [r7, #0]
 800d7e0:	9303      	str	r3, [sp, #12]
 800d7e2:	4b57      	ldr	r3, [pc, #348]	; (800d940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d7e4:	881a      	ldrh	r2, [r3, #0]
 800d7e6:	9305      	str	r3, [sp, #20]
 800d7e8:	9204      	str	r2, [sp, #16]
 800d7ea:	f007 ff41 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d7ee:	8038      	strh	r0, [r7, #0]
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	f007 ff81 	bl	80156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d7f6:	9b05      	ldr	r3, [sp, #20]
 800d7f8:	8018      	strh	r0, [r3, #0]
 800d7fa:	4b52      	ldr	r3, [pc, #328]	; (800d944 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d174      	bne.n	800d8ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 800d802:	883b      	ldrh	r3, [r7, #0]
 800d804:	f8aa 0000 	strh.w	r0, [sl]
 800d808:	f8ab 3000 	strh.w	r3, [fp]
 800d80c:	4648      	mov	r0, r9
 800d80e:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800d812:	f007 fdcd 	bl	80153b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800d816:	2200      	movs	r2, #0
 800d818:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800d81c:	4611      	mov	r1, r2
 800d81e:	4628      	mov	r0, r5
 800d820:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800d824:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800d828:	f7f5 f8a9 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
 800d82c:	2301      	movs	r3, #1
 800d82e:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800d832:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d836:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dd5c      	ble.n	800d8f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d83e:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d842:	2b00      	cmp	r3, #0
 800d844:	dd58      	ble.n	800d8f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 800d846:	462a      	mov	r2, r5
 800d848:	ab0a      	add	r3, sp, #40	; 0x28
 800d84a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d84e:	6851      	ldr	r1, [r2, #4]
 800d850:	c303      	stmia	r3!, {r0, r1}
 800d852:	4631      	mov	r1, r6
 800d854:	a80a      	add	r0, sp, #40	; 0x28
 800d856:	f7ff fbed 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800d85a:	4b38      	ldr	r3, [pc, #224]	; (800d93c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d85c:	2100      	movs	r1, #0
 800d85e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800d862:	4b37      	ldr	r3, [pc, #220]	; (800d940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d864:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800d868:	aa0a      	add	r2, sp, #40	; 0x28
 800d86a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d86e:	910c      	str	r1, [sp, #48]	; 0x30
 800d870:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800d874:	ab08      	add	r3, sp, #32
 800d876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d87a:	e883 0003 	stmia.w	r3, {r0, r1}
 800d87e:	4618      	mov	r0, r3
 800d880:	a90c      	add	r1, sp, #48	; 0x30
 800d882:	f7ff fbd7 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800d886:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d13c      	bne.n	800d906 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 800d88c:	2000      	movs	r0, #0
 800d88e:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 800d892:	2600      	movs	r6, #0
 800d894:	696b      	ldr	r3, [r5, #20]
 800d896:	a908      	add	r1, sp, #32
 800d898:	682a      	ldr	r2, [r5, #0]
 800d89a:	4628      	mov	r0, r5
 800d89c:	9305      	str	r3, [sp, #20]
 800d89e:	616e      	str	r6, [r5, #20]
 800d8a0:	6892      	ldr	r2, [r2, #8]
 800d8a2:	4790      	blx	r2
 800d8a4:	9b05      	ldr	r3, [sp, #20]
 800d8a6:	4652      	mov	r2, sl
 800d8a8:	4649      	mov	r1, r9
 800d8aa:	616b      	str	r3, [r5, #20]
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 800d8b2:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800d8b6:	f7f5 f862 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
 800d8ba:	9a01      	ldr	r2, [sp, #4]
 800d8bc:	4b22      	ldr	r3, [pc, #136]	; (800d948 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800d8be:	4620      	mov	r0, r4
 800d8c0:	801a      	strh	r2, [r3, #0]
 800d8c2:	9a02      	ldr	r2, [sp, #8]
 800d8c4:	4b21      	ldr	r3, [pc, #132]	; (800d94c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800d8c6:	801a      	strh	r2, [r3, #0]
 800d8c8:	9a03      	ldr	r2, [sp, #12]
 800d8ca:	4b1c      	ldr	r3, [pc, #112]	; (800d93c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 800d8cc:	801a      	strh	r2, [r3, #0]
 800d8ce:	4b1c      	ldr	r3, [pc, #112]	; (800d940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800d8d0:	9a04      	ldr	r2, [sp, #16]
 800d8d2:	801a      	strh	r2, [r3, #0]
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800d8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8dc:	4798      	blx	r3
 800d8de:	6823      	ldr	r3, [r4, #0]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	4798      	blx	r3
 800d8e6:	b00f      	add	sp, #60	; 0x3c
 800d8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ec:	883b      	ldrh	r3, [r7, #0]
 800d8ee:	f8ab 0000 	strh.w	r0, [fp]
 800d8f2:	f8aa 3000 	strh.w	r3, [sl]
 800d8f6:	e789      	b.n	800d80c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 800d8f8:	462a      	mov	r2, r5
 800d8fa:	ab0a      	add	r3, sp, #40	; 0x28
 800d8fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800d900:	6851      	ldr	r1, [r2, #4]
 800d902:	c303      	stmia	r3!, {r0, r1}
 800d904:	e7a9      	b.n	800d85a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 800d906:	a807      	add	r0, sp, #28
 800d908:	f008 f81e 	bl	8015948 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d90c:	4606      	mov	r6, r0
 800d90e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800d910:	6803      	ldr	r3, [r0, #0]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	4798      	blx	r3
 800d916:	4286      	cmp	r6, r0
 800d918:	d1b8      	bne.n	800d88c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 800d91a:	f7ff fe59 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800d91e:	6803      	ldr	r3, [r0, #0]
 800d920:	4606      	mov	r6, r0
 800d922:	a807      	add	r0, sp, #28
 800d924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d926:	9305      	str	r3, [sp, #20]
 800d928:	f008 f80e 	bl	8015948 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800d92c:	9b05      	ldr	r3, [sp, #20]
 800d92e:	4601      	mov	r1, r0
 800d930:	4630      	mov	r0, r6
 800d932:	4798      	blx	r3
 800d934:	f080 0001 	eor.w	r0, r0, #1
 800d938:	b2c0      	uxtb	r0, r0
 800d93a:	e7a8      	b.n	800d88e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800d93c:	2400f18c 	.word	0x2400f18c
 800d940:	2400f18e 	.word	0x2400f18e
 800d944:	2400f190 	.word	0x2400f190
 800d948:	2400f192 	.word	0x2400f192
 800d94c:	2400f194 	.word	0x2400f194

0800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800d952:	b510      	push	{r4, lr}
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	4604      	mov	r4, r0
 800d958:	b13b      	cbz	r3, 800d96a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d95a:	6803      	ldr	r3, [r0, #0]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	4798      	blx	r3
 800d960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d962:	4283      	cmp	r3, r0
 800d964:	d101      	bne.n	800d96a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800d966:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800d968:	bd10      	pop	{r4, pc}
 800d96a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d96c:	e7fc      	b.n	800d968 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800d96e:	bf00      	nop
 800d970:	2400f196 	.word	0x2400f196

0800d974 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800d974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d978:	b08a      	sub	sp, #40	; 0x28
 800d97a:	4692      	mov	sl, r2
 800d97c:	461d      	mov	r5, r3
 800d97e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d982:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 800d986:	2400      	movs	r4, #0
 800d988:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 800d98c:	4606      	mov	r6, r0
 800d98e:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 800d992:	fb09 a505 	mla	r5, r9, r5, sl
 800d996:	9404      	str	r4, [sp, #16]
 800d998:	f8ad 8018 	strh.w	r8, [sp, #24]
 800d99c:	f8ad 701a 	strh.w	r7, [sp, #26]
 800d9a0:	f88d 4020 	strb.w	r4, [sp, #32]
 800d9a4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d9a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800d9ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d9b0:	f7ff ffce 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800d9b4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800d9b8:	f8ad 901e 	strh.w	r9, [sp, #30]
 800d9bc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800d9c0:	9505      	str	r5, [sp, #20]
 800d9c2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800d9c6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800d9ca:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800d9ce:	f1b8 0f00 	cmp.w	r8, #0
 800d9d2:	d000      	beq.n	800d9d6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x62>
 800d9d4:	b937      	cbnz	r7, 800d9e4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x70>
 800d9d6:	4b0d      	ldr	r3, [pc, #52]	; (800da0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 800d9d8:	f240 2102 	movw	r1, #514	; 0x202
 800d9dc:	4a0c      	ldr	r2, [pc, #48]	; (800da10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d9de:	480d      	ldr	r0, [pc, #52]	; (800da14 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 800d9e0:	f012 fbd8 	bl	8020194 <__assert_func>
 800d9e4:	6833      	ldr	r3, [r6, #0]
 800d9e6:	4630      	mov	r0, r6
 800d9e8:	9c01      	ldr	r4, [sp, #4]
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	4798      	blx	r3
 800d9ee:	4220      	tst	r0, r4
 800d9f0:	d104      	bne.n	800d9fc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x88>
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa4>)
 800d9f4:	f240 2103 	movw	r1, #515	; 0x203
 800d9f8:	4a05      	ldr	r2, [pc, #20]	; (800da10 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 800d9fa:	e7f0      	b.n	800d9de <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6a>
 800d9fc:	6870      	ldr	r0, [r6, #4]
 800d9fe:	a901      	add	r1, sp, #4
 800da00:	6803      	ldr	r3, [r0, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	4798      	blx	r3
 800da06:	b00a      	add	sp, #40	; 0x28
 800da08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da0c:	080240c7 	.word	0x080240c7
 800da10:	08024320 	.word	0x08024320
 800da14:	08024272 	.word	0x08024272
 800da18:	080240ff 	.word	0x080240ff

0800da1c <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800da1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da20:	b08b      	sub	sp, #44	; 0x2c
 800da22:	4693      	mov	fp, r2
 800da24:	461d      	mov	r5, r3
 800da26:	2400      	movs	r4, #0
 800da28:	f8bd 9058 	ldrh.w	r9, [sp, #88]	; 0x58
 800da2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da30:	468a      	mov	sl, r1
 800da32:	f8bd 8050 	ldrh.w	r8, [sp, #80]	; 0x50
 800da36:	fb09 b505 	mla	r5, r9, r5, fp
 800da3a:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800da3e:	4606      	mov	r6, r0
 800da40:	9404      	str	r4, [sp, #16]
 800da42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da46:	f7ff ff83 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800da4a:	f8ad 8018 	strh.w	r8, [sp, #24]
 800da4e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800da52:	f8ad 701a 	strh.w	r7, [sp, #26]
 800da56:	f8ad 401c 	strh.w	r4, [sp, #28]
 800da5a:	9505      	str	r5, [sp, #20]
 800da5c:	f8ad 901e 	strh.w	r9, [sp, #30]
 800da60:	f8cd a010 	str.w	sl, [sp, #16]
 800da64:	f8ad 4020 	strh.w	r4, [sp, #32]
 800da68:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800da6c:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800da70:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800da74:	f1b8 0f00 	cmp.w	r8, #0
 800da78:	d000      	beq.n	800da7c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x60>
 800da7a:	b937      	cbnz	r7, 800da8a <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6e>
 800da7c:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 800da7e:	f240 2119 	movw	r1, #537	; 0x219
 800da82:	4a0d      	ldr	r2, [pc, #52]	; (800dab8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800da84:	480d      	ldr	r0, [pc, #52]	; (800dabc <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 800da86:	f012 fb85 	bl	8020194 <__assert_func>
 800da8a:	6833      	ldr	r3, [r6, #0]
 800da8c:	4630      	mov	r0, r6
 800da8e:	9c01      	ldr	r4, [sp, #4]
 800da90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da92:	4798      	blx	r3
 800da94:	4220      	tst	r0, r4
 800da96:	d104      	bne.n	800daa2 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x86>
 800da98:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa4>)
 800da9a:	f240 211a 	movw	r1, #538	; 0x21a
 800da9e:	4a06      	ldr	r2, [pc, #24]	; (800dab8 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 800daa0:	e7f0      	b.n	800da84 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x68>
 800daa2:	6870      	ldr	r0, [r6, #4]
 800daa4:	a901      	add	r1, sp, #4
 800daa6:	6803      	ldr	r3, [r0, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	4798      	blx	r3
 800daac:	b00b      	add	sp, #44	; 0x2c
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	bf00      	nop
 800dab4:	08024144 	.word	0x08024144
 800dab8:	08024396 	.word	0x08024396
 800dabc:	08024272 	.word	0x08024272
 800dac0:	0802417c 	.word	0x0802417c

0800dac4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 800dac4:	b508      	push	{r3, lr}
 800dac6:	290d      	cmp	r1, #13
 800dac8:	d817      	bhi.n	800dafa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 800daca:	e8df f001 	tbb	[pc, r1]
 800dace:	090b      	.short	0x090b
 800dad0:	0d0d0d07 	.word	0x0d0d0d07
 800dad4:	1414140d 	.word	0x1414140d
 800dad8:	0d0d1414 	.word	0x0d0d1414
 800dadc:	2020      	movs	r0, #32
 800dade:	bd08      	pop	{r3, pc}
 800dae0:	2018      	movs	r0, #24
 800dae2:	e7fc      	b.n	800dade <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800dae4:	2010      	movs	r0, #16
 800dae6:	e7fa      	b.n	800dade <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800dae8:	4b05      	ldr	r3, [pc, #20]	; (800db00 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 800daea:	f240 2183 	movw	r1, #643	; 0x283
 800daee:	4a05      	ldr	r2, [pc, #20]	; (800db04 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 800daf0:	4805      	ldr	r0, [pc, #20]	; (800db08 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 800daf2:	f012 fb4f 	bl	8020194 <__assert_func>
 800daf6:	2008      	movs	r0, #8
 800daf8:	e7f1      	b.n	800dade <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800dafa:	2000      	movs	r0, #0
 800dafc:	e7ef      	b.n	800dade <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 800dafe:	bf00      	nop
 800db00:	080242ee 	.word	0x080242ee
 800db04:	080246c1 	.word	0x080246c1
 800db08:	08024272 	.word	0x08024272

0800db0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 800db0c:	b570      	push	{r4, r5, r6, lr}
 800db0e:	460d      	mov	r5, r1
 800db10:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800db14:	4616      	mov	r6, r2
 800db16:	461c      	mov	r4, r3
 800db18:	f7ff ffd4 	bl	800dac4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 800db1c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800db20:	10c0      	asrs	r0, r0, #3
 800db22:	fb06 5101 	mla	r1, r6, r1, r5
 800db26:	fb00 4001 	mla	r0, r0, r1, r4
 800db2a:	bd70      	pop	{r4, r5, r6, pc}

0800db2c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800db2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db30:	b08c      	sub	sp, #48	; 0x30
 800db32:	f04f 0c00 	mov.w	ip, #0
 800db36:	4604      	mov	r4, r0
 800db38:	469a      	mov	sl, r3
 800db3a:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 800db3e:	f8bd 7054 	ldrh.w	r7, [sp, #84]	; 0x54
 800db42:	2d0b      	cmp	r5, #11
 800db44:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
 800db48:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800db4c:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
 800db50:	f8bd 9068 	ldrh.w	r9, [sp, #104]	; 0x68
 800db54:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 800db58:	f8cd c018 	str.w	ip, [sp, #24]
 800db5c:	d130      	bne.n	800dbc0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x94>
 800db5e:	2080      	movs	r0, #128	; 0x80
 800db60:	9205      	str	r2, [sp, #20]
 800db62:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800db66:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800db6a:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800db6e:	f8ad 7020 	strh.w	r7, [sp, #32]
 800db72:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 800db76:	e9cd 0103 	strd	r0, r1, [sp, #12]
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7ff fee8 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800db80:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 800db84:	4603      	mov	r3, r0
 800db86:	4651      	mov	r1, sl
 800db88:	4620      	mov	r0, r4
 800db8a:	e9cd 9800 	strd	r9, r8, [sp]
 800db8e:	f7ff ffbd 	bl	800db0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800db92:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800db96:	9007      	str	r0, [sp, #28]
 800db98:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800db9c:	2300      	movs	r3, #0
 800db9e:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 800dba2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 800dba6:	f88d 802a 	strb.w	r8, [sp, #42]	; 0x2a
 800dbaa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800dbae:	b107      	cbz	r7, 800dbb2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x86>
 800dbb0:	b9d6      	cbnz	r6, 800dbe8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbc>
 800dbb2:	4b17      	ldr	r3, [pc, #92]	; (800dc10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 800dbb4:	f240 11c9 	movw	r1, #457	; 0x1c9
 800dbb8:	4a16      	ldr	r2, [pc, #88]	; (800dc14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800dbba:	4817      	ldr	r0, [pc, #92]	; (800dc18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 800dbbc:	f012 faea 	bl	8020194 <__assert_func>
 800dbc0:	2d02      	cmp	r5, #2
 800dbc2:	d108      	bne.n	800dbd6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800dbc4:	2bff      	cmp	r3, #255	; 0xff
 800dbc6:	d104      	bne.n	800dbd2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa6>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	bf14      	ite	ne
 800dbcc:	2040      	movne	r0, #64	; 0x40
 800dbce:	2020      	moveq	r0, #32
 800dbd0:	e7c6      	b.n	800db60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800dbd2:	2040      	movs	r0, #64	; 0x40
 800dbd4:	e7c4      	b.n	800db60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800dbd6:	2bff      	cmp	r3, #255	; 0xff
 800dbd8:	d104      	bne.n	800dbe4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb8>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	bf14      	ite	ne
 800dbde:	2004      	movne	r0, #4
 800dbe0:	2001      	moveq	r0, #1
 800dbe2:	e7bd      	b.n	800db60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800dbe4:	2004      	movs	r0, #4
 800dbe6:	e7bb      	b.n	800db60 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	4620      	mov	r0, r4
 800dbec:	9d03      	ldr	r5, [sp, #12]
 800dbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf0:	4798      	blx	r3
 800dbf2:	4228      	tst	r0, r5
 800dbf4:	d104      	bne.n	800dc00 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xd4>
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xf0>)
 800dbf8:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 800dbfc:	4a05      	ldr	r2, [pc, #20]	; (800dc14 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 800dbfe:	e7dc      	b.n	800dbba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 800dc00:	6860      	ldr	r0, [r4, #4]
 800dc02:	a903      	add	r1, sp, #12
 800dc04:	6803      	ldr	r3, [r0, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4798      	blx	r3
 800dc0a:	b00c      	add	sp, #48	; 0x30
 800dc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc10:	080240c7 	.word	0x080240c7
 800dc14:	0802454f 	.word	0x0802454f
 800dc18:	08024272 	.word	0x08024272
 800dc1c:	080240ff 	.word	0x080240ff

0800dc20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	b08d      	sub	sp, #52	; 0x34
 800dc26:	469b      	mov	fp, r3
 800dc28:	2500      	movs	r5, #0
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 800dc30:	4692      	mov	sl, r2
 800dc32:	f89d 6068 	ldrb.w	r6, [sp, #104]	; 0x68
 800dc36:	4689      	mov	r9, r1
 800dc38:	2fff      	cmp	r7, #255	; 0xff
 800dc3a:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 800dc3e:	9506      	str	r5, [sp, #24]
 800dc40:	bf14      	ite	ne
 800dc42:	2308      	movne	r3, #8
 800dc44:	2302      	moveq	r3, #2
 800dc46:	e9cd 3503 	strd	r3, r5, [sp, #12]
 800dc4a:	f7ff fe81 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dc4e:	465a      	mov	r2, fp
 800dc50:	4603      	mov	r3, r0
 800dc52:	4651      	mov	r1, sl
 800dc54:	4620      	mov	r0, r4
 800dc56:	e9cd 8600 	strd	r8, r6, [sp]
 800dc5a:	f7ff ff57 	bl	800db0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800dc5e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800dc62:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 800dc66:	f8ad 3020 	strh.w	r3, [sp, #32]
 800dc6a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800dc6e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800dc72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800dc76:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800dc7a:	9d03      	ldr	r5, [sp, #12]
 800dc7c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	9007      	str	r0, [sp, #28]
 800dc84:	4620      	mov	r0, r4
 800dc86:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 800dc8a:	f8cd 9018 	str.w	r9, [sp, #24]
 800dc8e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 800dc92:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800dc96:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800dc9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9c:	4798      	blx	r3
 800dc9e:	4228      	tst	r0, r5
 800dca0:	d106      	bne.n	800dcb0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x90>
 800dca2:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 800dca4:	f44f 710c 	mov.w	r1, #560	; 0x230
 800dca8:	4a06      	ldr	r2, [pc, #24]	; (800dcc4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 800dcaa:	4807      	ldr	r0, [pc, #28]	; (800dcc8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa8>)
 800dcac:	f012 fa72 	bl	8020194 <__assert_func>
 800dcb0:	6860      	ldr	r0, [r4, #4]
 800dcb2:	a903      	add	r1, sp, #12
 800dcb4:	6803      	ldr	r3, [r0, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	4798      	blx	r3
 800dcba:	b00d      	add	sp, #52	; 0x34
 800dcbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcc0:	080240ff 	.word	0x080240ff
 800dcc4:	08024626 	.word	0x08024626
 800dcc8:	08024272 	.word	0x08024272

0800dccc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800dccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dcd0:	461f      	mov	r7, r3
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	; (800dd00 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800dcd4:	460d      	mov	r5, r1
 800dcd6:	4616      	mov	r6, r2
 800dcd8:	f8b3 8000 	ldrh.w	r8, [r3]
 800dcdc:	4604      	mov	r4, r0
 800dcde:	f7ff fc77 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce6:	4798      	blx	r3
 800dce8:	463b      	mov	r3, r7
 800dcea:	4632      	mov	r2, r6
 800dcec:	4629      	mov	r1, r5
 800dcee:	e9cd 8000 	strd	r8, r0, [sp]
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	f7ff ff0a 	bl	800db0c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 800dcf8:	b002      	add	sp, #8
 800dcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfe:	bf00      	nop
 800dd00:	2400f192 	.word	0x2400f192

0800dd04 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800dd04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd08:	b08b      	sub	sp, #44	; 0x2c
 800dd0a:	4699      	mov	r9, r3
 800dd0c:	4690      	mov	r8, r2
 800dd0e:	4604      	mov	r4, r0
 800dd10:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 800dd14:	2500      	movs	r5, #0
 800dd16:	f8bd 7048 	ldrh.w	r7, [sp, #72]	; 0x48
 800dd1a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800dd1e:	9504      	str	r5, [sp, #16]
 800dd20:	f8ad 7018 	strh.w	r7, [sp, #24]
 800dd24:	f8ad 601a 	strh.w	r6, [sp, #26]
 800dd28:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800dd2c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800dd30:	f8ad 301c 	strh.w	r3, [sp, #28]
 800dd34:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800dd38:	f88d 3020 	strb.w	r3, [sp, #32]
 800dd3c:	f7ff fe08 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dd40:	464a      	mov	r2, r9
 800dd42:	4603      	mov	r3, r0
 800dd44:	4641      	mov	r1, r8
 800dd46:	4620      	mov	r0, r4
 800dd48:	f7ff ffc0 	bl	800dccc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dd4c:	4b19      	ldr	r3, [pc, #100]	; (800ddb4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 800dd4e:	9005      	str	r0, [sp, #20]
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dd56:	f7ff fc3b 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800dd5a:	6803      	ldr	r3, [r0, #0]
 800dd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5e:	4798      	blx	r3
 800dd60:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800dd64:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800dd68:	b107      	cbz	r7, 800dd6c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 800dd6a:	b936      	cbnz	r6, 800dd7a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 800dd6c:	4b12      	ldr	r3, [pc, #72]	; (800ddb8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 800dd6e:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
 800dd72:	4a12      	ldr	r2, [pc, #72]	; (800ddbc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800dd74:	4812      	ldr	r0, [pc, #72]	; (800ddc0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 800dd76:	f012 fa0d 	bl	8020194 <__assert_func>
 800dd7a:	6823      	ldr	r3, [r4, #0]
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	9e01      	ldr	r6, [sp, #4]
 800dd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd82:	4798      	blx	r3
 800dd84:	4230      	tst	r0, r6
 800dd86:	d104      	bne.n	800dd92 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 800dd88:	4b0e      	ldr	r3, [pc, #56]	; (800ddc4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xc0>)
 800dd8a:	f240 11e7 	movw	r1, #487	; 0x1e7
 800dd8e:	4a0b      	ldr	r2, [pc, #44]	; (800ddbc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 800dd90:	e7f0      	b.n	800dd74 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 800dd92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd94:	a901      	add	r1, sp, #4
 800dd96:	6860      	ldr	r0, [r4, #4]
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800dd9e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800dda2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800dda6:	6803      	ldr	r3, [r0, #0]
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	4798      	blx	r3
 800ddac:	b00b      	add	sp, #44	; 0x2c
 800ddae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	bf00      	nop
 800ddb4:	2400f192 	.word	0x2400f192
 800ddb8:	080240c7 	.word	0x080240c7
 800ddbc:	080243fb 	.word	0x080243fb
 800ddc0:	08024272 	.word	0x08024272
 800ddc4:	080240ff 	.word	0x080240ff

0800ddc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ddc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddca:	b08d      	sub	sp, #52	; 0x34
 800ddcc:	4604      	mov	r4, r0
 800ddce:	466b      	mov	r3, sp
 800ddd0:	e883 0006 	stmia.w	r3, {r1, r2}
 800ddd4:	4b21      	ldr	r3, [pc, #132]	; (800de5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b933      	cbnz	r3, 800dde8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 800ddda:	4b21      	ldr	r3, [pc, #132]	; (800de60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 800dddc:	f240 2141 	movw	r1, #577	; 0x241
 800dde0:	4a20      	ldr	r2, [pc, #128]	; (800de64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 800dde2:	4821      	ldr	r0, [pc, #132]	; (800de68 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 800dde4:	f012 f9d6 	bl	8020194 <__assert_func>
 800dde8:	2300      	movs	r3, #0
 800ddea:	2501      	movs	r5, #1
 800ddec:	f8bd 6000 	ldrh.w	r6, [sp]
 800ddf0:	9306      	str	r3, [sp, #24]
 800ddf2:	6803      	ldr	r3, [r0, #0]
 800ddf4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ddf8:	9503      	str	r5, [sp, #12]
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddfc:	4798      	blx	r3
 800ddfe:	463a      	mov	r2, r7
 800de00:	4631      	mov	r1, r6
 800de02:	4603      	mov	r3, r0
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff ff61 	bl	800dccc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800de0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800de0c:	9004      	str	r0, [sp, #16]
 800de0e:	9307      	str	r3, [sp, #28]
 800de10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800de14:	f8ad 3020 	strh.w	r3, [sp, #32]
 800de18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de1c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800de20:	4b12      	ldr	r3, [pc, #72]	; (800de6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa4>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800de28:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800de2c:	f7ff fbd0 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800de30:	6803      	ldr	r3, [r0, #0]
 800de32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de34:	4798      	blx	r3
 800de36:	23ff      	movs	r3, #255	; 0xff
 800de38:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800de3c:	a903      	add	r1, sp, #12
 800de3e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800de42:	6860      	ldr	r0, [r4, #4]
 800de44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800de48:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800de4c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800de50:	6803      	ldr	r3, [r0, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	4798      	blx	r3
 800de56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800de58:	b00d      	add	sp, #52	; 0x34
 800de5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de5c:	2400f197 	.word	0x2400f197
 800de60:	080241c6 	.word	0x080241c6
 800de64:	080244a5 	.word	0x080244a5
 800de68:	08024272 	.word	0x08024272
 800de6c:	2400f192 	.word	0x2400f192

0800de70 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800de70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de74:	b08c      	sub	sp, #48	; 0x30
 800de76:	461e      	mov	r6, r3
 800de78:	2300      	movs	r3, #0
 800de7a:	4604      	mov	r4, r0
 800de7c:	466d      	mov	r5, sp
 800de7e:	9306      	str	r3, [sp, #24]
 800de80:	6803      	ldr	r3, [r0, #0]
 800de82:	e885 0006 	stmia.w	r5, {r1, r2}
 800de86:	2501      	movs	r5, #1
 800de88:	f8bd 7000 	ldrh.w	r7, [sp]
 800de8c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800de90:	9503      	str	r5, [sp, #12]
 800de92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de94:	4798      	blx	r3
 800de96:	4642      	mov	r2, r8
 800de98:	4639      	mov	r1, r7
 800de9a:	4603      	mov	r3, r0
 800de9c:	4620      	mov	r0, r4
 800de9e:	f7ff ff15 	bl	800dccc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800dea2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800dea6:	9004      	str	r0, [sp, #16]
 800dea8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800deac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800deb0:	9607      	str	r6, [sp, #28]
 800deb2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800deb6:	4b10      	ldr	r3, [pc, #64]	; (800def8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800debe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dec0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800dec4:	f7ff fb84 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800dec8:	6803      	ldr	r3, [r0, #0]
 800deca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800decc:	4798      	blx	r3
 800dece:	23ff      	movs	r3, #255	; 0xff
 800ded0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800ded4:	a903      	add	r1, sp, #12
 800ded6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800deda:	6860      	ldr	r0, [r4, #4]
 800dedc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800dee0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800dee4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800dee8:	6803      	ldr	r3, [r0, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	4798      	blx	r3
 800deee:	4630      	mov	r0, r6
 800def0:	b00c      	add	sp, #48	; 0x30
 800def2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def6:	bf00      	nop
 800def8:	2400f192 	.word	0x2400f192

0800defc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800defc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800defe:	b085      	sub	sp, #20
 800df00:	4605      	mov	r5, r0
 800df02:	ac02      	add	r4, sp, #8
 800df04:	e884 0006 	stmia.w	r4, {r1, r2}
 800df08:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800df0c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800df10:	f7ff fd1e 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df14:	4631      	mov	r1, r6
 800df16:	4603      	mov	r3, r0
 800df18:	463a      	mov	r2, r7
 800df1a:	4628      	mov	r0, r5
 800df1c:	f7ff fed6 	bl	800dccc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800df20:	4a05      	ldr	r2, [pc, #20]	; (800df38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800df22:	682b      	ldr	r3, [r5, #0]
 800df24:	8812      	ldrh	r2, [r2, #0]
 800df26:	9200      	str	r2, [sp, #0]
 800df28:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800df2a:	4603      	mov	r3, r0
 800df2c:	4628      	mov	r0, r5
 800df2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 800df32:	47b0      	blx	r6
 800df34:	b005      	add	sp, #20
 800df36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df38:	2400f192 	.word	0x2400f192

0800df3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800df3c:	b570      	push	{r4, r5, r6, lr}
 800df3e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800df42:	4604      	mov	r4, r0
 800df44:	b19b      	cbz	r3, 800df6e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800df46:	2002      	movs	r0, #2
 800df48:	f7f3 fc61 	bl	800180e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800df4c:	2300      	movs	r3, #0
 800df4e:	4620      	mov	r0, r4
 800df50:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800df54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 800df58:	6823      	ldr	r3, [r4, #0]
 800df5a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800df5e:	f7ff fcf7 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800df62:	4601      	mov	r1, r0
 800df64:	4620      	mov	r0, r4
 800df66:	462b      	mov	r3, r5
 800df68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df6c:	4718      	bx	r3
 800df6e:	bd70      	pop	{r4, r5, r6, pc}

0800df70 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	4605      	mov	r5, r0
 800df74:	460c      	mov	r4, r1
 800df76:	2003      	movs	r0, #3
 800df78:	b149      	cbz	r1, 800df8e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800df7a:	f7f3 fc46 	bl	800180a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800df7e:	6928      	ldr	r0, [r5, #16]
 800df80:	b168      	cbz	r0, 800df9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800df82:	6803      	ldr	r3, [r0, #0]
 800df84:	2101      	movs	r1, #1
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800df8c:	4718      	bx	r3
 800df8e:	f7f3 fc3d 	bl	800180c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800df92:	6928      	ldr	r0, [r5, #16]
 800df94:	b118      	cbz	r0, 800df9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800df96:	6803      	ldr	r3, [r0, #0]
 800df98:	4621      	mov	r1, r4
 800df9a:	695b      	ldr	r3, [r3, #20]
 800df9c:	e7f4      	b.n	800df88 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800df9e:	bd70      	pop	{r4, r5, r6, pc}

0800dfa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	460d      	mov	r5, r1
 800dfaa:	428b      	cmp	r3, r1
 800dfac:	d006      	beq.n	800dfbc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800dfae:	6803      	ldr	r3, [r0, #0]
 800dfb0:	b929      	cbnz	r1, 800dfbe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800dfb2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dfb6:	4798      	blx	r3
 800dfb8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 800dfbc:	bd38      	pop	{r3, r4, r5, pc}
 800dfbe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800dfc2:	e7f8      	b.n	800dfb6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800dfc4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800dfc4:	4b0d      	ldr	r3, [pc, #52]	; (800dffc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800dfc6:	b510      	push	{r4, lr}
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	4604      	mov	r4, r0
 800dfcc:	b95b      	cbnz	r3, 800dfe6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800dfce:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800dfd2:	2b02      	cmp	r3, #2
 800dfd4:	d007      	beq.n	800dfe6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800dfd6:	6840      	ldr	r0, [r0, #4]
 800dfd8:	f000 f93c 	bl	800e254 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800dfdc:	b118      	cbz	r0, 800dfe6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800dfde:	6862      	ldr	r2, [r4, #4]
 800dfe0:	7a53      	ldrb	r3, [r2, #9]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d0fc      	beq.n	800dfe0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800dfe6:	f7f3 ff13 	bl	8001e10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800dfea:	4620      	mov	r0, r4
 800dfec:	2100      	movs	r1, #0
 800dfee:	f7ff ffd7 	bl	800dfa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800dff2:	4620      	mov	r0, r4
 800dff4:	f7ff fcac 	bl	800d950 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800dff8:	bd10      	pop	{r4, pc}
 800dffa:	bf00      	nop
 800dffc:	2400f196 	.word	0x2400f196

0800e000 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e000:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e004:	1a13      	subs	r3, r2, r0
 800e006:	4258      	negs	r0, r3
 800e008:	4158      	adcs	r0, r3
 800e00a:	4770      	bx	lr

0800e00c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e00c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e010:	1a9b      	subs	r3, r3, r2
 800e012:	2b00      	cmp	r3, #0
 800e014:	bfdc      	itt	le
 800e016:	6882      	ldrle	r2, [r0, #8]
 800e018:	189b      	addle	r3, r3, r2
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	bfcc      	ite	gt
 800e01e:	2000      	movgt	r0, #0
 800e020:	2001      	movle	r0, #1
 800e022:	4770      	bx	lr

0800e024 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e024:	6902      	ldr	r2, [r0, #16]
 800e026:	6843      	ldr	r3, [r0, #4]
 800e028:	2024      	movs	r0, #36	; 0x24
 800e02a:	fb00 3002 	mla	r0, r0, r2, r3
 800e02e:	4770      	bx	lr

0800e030 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e030:	6803      	ldr	r3, [r0, #0]
 800e032:	691b      	ldr	r3, [r3, #16]
 800e034:	4718      	bx	r3

0800e036 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e036:	4770      	bx	lr

0800e038 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e038:	4770      	bx	lr

0800e03a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e03a:	4770      	bx	lr

0800e03c <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e03c:	2301      	movs	r3, #1
 800e03e:	b570      	push	{r4, r5, r6, lr}
 800e040:	7203      	strb	r3, [r0, #8]
 800e042:	4604      	mov	r4, r0
 800e044:	6840      	ldr	r0, [r0, #4]
 800e046:	6803      	ldr	r3, [r0, #0]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	4798      	blx	r3
 800e04c:	6803      	ldr	r3, [r0, #0]
 800e04e:	4605      	mov	r5, r0
 800e050:	2b40      	cmp	r3, #64	; 0x40
 800e052:	d039      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e054:	d815      	bhi.n	800e082 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 800e056:	2b04      	cmp	r3, #4
 800e058:	d022      	beq.n	800e0a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e05a:	d808      	bhi.n	800e06e <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d033      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e060:	2b02      	cmp	r3, #2
 800e062:	d108      	bne.n	800e076 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	4620      	mov	r0, r4
 800e068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06a:	4798      	blx	r3
 800e06c:	e025      	b.n	800e0ba <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 800e06e:	2b08      	cmp	r3, #8
 800e070:	d01e      	beq.n	800e0b0 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 800e072:	2b20      	cmp	r3, #32
 800e074:	d028      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e076:	4b17      	ldr	r3, [pc, #92]	; (800e0d4 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 800e078:	2188      	movs	r1, #136	; 0x88
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 800e07c:	4817      	ldr	r0, [pc, #92]	; (800e0dc <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 800e07e:	f012 f889 	bl	8020194 <__assert_func>
 800e082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e086:	d01f      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e088:	d804      	bhi.n	800e094 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 800e08a:	2b80      	cmp	r3, #128	; 0x80
 800e08c:	d01c      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e092:	e7ef      	b.n	800e074 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 800e094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e098:	d016      	beq.n	800e0c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 800e09a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e09e:	e7e0      	b.n	800e062 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e0a0:	6823      	ldr	r3, [r4, #0]
 800e0a2:	7f01      	ldrb	r1, [r0, #28]
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a8:	4798      	blx	r3
 800e0aa:	6823      	ldr	r3, [r4, #0]
 800e0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ae:	e006      	b.n	800e0be <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	7f01      	ldrb	r1, [r0, #28]
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b8:	4798      	blx	r3
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0c6:	4718      	bx	r3
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ce:	4798      	blx	r3
 800e0d0:	e7eb      	b.n	800e0aa <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 800e0d2:	bf00      	nop
 800e0d4:	0802470a 	.word	0x0802470a
 800e0d8:	080247cc 	.word	0x080247cc
 800e0dc:	0802472f 	.word	0x0802472f

0800e0e0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	460e      	mov	r6, r1
 800e0e6:	6860      	ldr	r0, [r4, #4]
 800e0e8:	6803      	ldr	r3, [r0, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	4798      	blx	r3
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d1f9      	bne.n	800e0e6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e0f2:	4d0d      	ldr	r5, [pc, #52]	; (800e128 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e0f4:	6828      	ldr	r0, [r5, #0]
 800e0f6:	6803      	ldr	r3, [r0, #0]
 800e0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0fa:	4798      	blx	r3
 800e0fc:	f7f3 fe96 	bl	8001e2c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e100:	6828      	ldr	r0, [r5, #0]
 800e102:	2101      	movs	r1, #1
 800e104:	f7ff ff4c 	bl	800dfa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e108:	6860      	ldr	r0, [r4, #4]
 800e10a:	4631      	mov	r1, r6
 800e10c:	6803      	ldr	r3, [r0, #0]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	4798      	blx	r3
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	4620      	mov	r0, r4
 800e116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e118:	4798      	blx	r3
 800e11a:	6828      	ldr	r0, [r5, #0]
 800e11c:	6803      	ldr	r3, [r0, #0]
 800e11e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e124:	4718      	bx	r3
 800e126:	bf00      	nop
 800e128:	2400f198 	.word	0x2400f198

0800e12c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e12c:	b508      	push	{r3, lr}
 800e12e:	f7f3 fe6f 	bl	8001e10 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e132:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e136:	f7f3 be73 	b.w	8001e20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e13a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e13a:	b510      	push	{r4, lr}
 800e13c:	4604      	mov	r4, r0
 800e13e:	2114      	movs	r1, #20
 800e140:	f011 fa01 	bl	801f546 <_ZdlPvj>
 800e144:	4620      	mov	r0, r4
 800e146:	bd10      	pop	{r4, pc}

0800e148 <_ZN8touchgfx13DMA_Interface5startEv>:
 800e148:	b510      	push	{r4, lr}
 800e14a:	4604      	mov	r4, r0
 800e14c:	6840      	ldr	r0, [r0, #4]
 800e14e:	6803      	ldr	r3, [r0, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4798      	blx	r3
 800e154:	b948      	cbnz	r0, 800e16a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e156:	7a63      	ldrb	r3, [r4, #9]
 800e158:	b13b      	cbz	r3, 800e16a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e15a:	7a23      	ldrb	r3, [r4, #8]
 800e15c:	b92b      	cbnz	r3, 800e16a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800e15e:	6823      	ldr	r3, [r4, #0]
 800e160:	4620      	mov	r0, r4
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e168:	4718      	bx	r3
 800e16a:	bd10      	pop	{r4, pc}

0800e16c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e16c:	b510      	push	{r4, lr}
 800e16e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e172:	1ad2      	subs	r2, r2, r3
 800e174:	2a00      	cmp	r2, #0
 800e176:	bfdc      	itt	le
 800e178:	6884      	ldrle	r4, [r0, #8]
 800e17a:	1912      	addle	r2, r2, r4
 800e17c:	2a01      	cmp	r2, #1
 800e17e:	dd17      	ble.n	800e1b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 800e180:	6842      	ldr	r2, [r0, #4]
 800e182:	2424      	movs	r4, #36	; 0x24
 800e184:	fb04 2303 	mla	r3, r4, r3, r2
 800e188:	f101 0220 	add.w	r2, r1, #32
 800e18c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e190:	4291      	cmp	r1, r2
 800e192:	f843 4b04 	str.w	r4, [r3], #4
 800e196:	d1f9      	bne.n	800e18c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e198:	780a      	ldrb	r2, [r1, #0]
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	68c3      	ldr	r3, [r0, #12]
 800e19e:	6882      	ldr	r2, [r0, #8]
 800e1a0:	f3bf 8f5b 	dmb	ish
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	bfd8      	it	le
 800e1aa:	1a9b      	suble	r3, r3, r2
 800e1ac:	60c3      	str	r3, [r0, #12]
 800e1ae:	bd10      	pop	{r4, pc}
 800e1b0:	4b02      	ldr	r3, [pc, #8]	; (800e1bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 800e1b2:	2136      	movs	r1, #54	; 0x36
 800e1b4:	4a02      	ldr	r2, [pc, #8]	; (800e1c0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 800e1b6:	4803      	ldr	r0, [pc, #12]	; (800e1c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 800e1b8:	f011 ffec 	bl	8020194 <__assert_func>
 800e1bc:	08024755 	.word	0x08024755
 800e1c0:	080247fc 	.word	0x080247fc
 800e1c4:	0802472f 	.word	0x0802472f

0800e1c8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e1c8:	b510      	push	{r4, lr}
 800e1ca:	6803      	ldr	r3, [r0, #0]
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	4798      	blx	r3
 800e1d2:	b128      	cbz	r0, 800e1e0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 800e1d4:	4b07      	ldr	r3, [pc, #28]	; (800e1f4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 800e1d6:	213c      	movs	r1, #60	; 0x3c
 800e1d8:	4a07      	ldr	r2, [pc, #28]	; (800e1f8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 800e1da:	4808      	ldr	r0, [pc, #32]	; (800e1fc <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 800e1dc:	f011 ffda 	bl	8020194 <__assert_func>
 800e1e0:	6923      	ldr	r3, [r4, #16]
 800e1e2:	68a2      	ldr	r2, [r4, #8]
 800e1e4:	f3bf 8f5b 	dmb	ish
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	bfd8      	it	le
 800e1ee:	1a9b      	suble	r3, r3, r2
 800e1f0:	6123      	str	r3, [r4, #16]
 800e1f2:	bd10      	pop	{r4, pc}
 800e1f4:	08024778 	.word	0x08024778
 800e1f8:	0802484a 	.word	0x0802484a
 800e1fc:	0802472f 	.word	0x0802472f

0800e200 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	4604      	mov	r4, r0
 800e204:	6840      	ldr	r0, [r0, #4]
 800e206:	6803      	ldr	r3, [r0, #0]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4798      	blx	r3
 800e20c:	4605      	mov	r5, r0
 800e20e:	b930      	cbnz	r0, 800e21e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e210:	7a23      	ldrb	r3, [r4, #8]
 800e212:	b123      	cbz	r3, 800e21e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e214:	6860      	ldr	r0, [r4, #4]
 800e216:	6803      	ldr	r3, [r0, #0]
 800e218:	695b      	ldr	r3, [r3, #20]
 800e21a:	4798      	blx	r3
 800e21c:	7225      	strb	r5, [r4, #8]
 800e21e:	6860      	ldr	r0, [r4, #4]
 800e220:	6803      	ldr	r3, [r0, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4798      	blx	r3
 800e226:	b928      	cbnz	r0, 800e234 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e228:	6823      	ldr	r3, [r4, #0]
 800e22a:	4620      	mov	r0, r4
 800e22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e232:	4718      	bx	r3
 800e234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e238:	f7f3 be00 	b.w	8001e3c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e23c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	6082      	str	r2, [r0, #8]
 800e240:	2200      	movs	r2, #0
 800e242:	4c03      	ldr	r4, [pc, #12]	; (800e250 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e244:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e248:	e9c0 4100 	strd	r4, r1, [r0]
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	bf00      	nop
 800e250:	080247b0 	.word	0x080247b0

0800e254 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e254:	6840      	ldr	r0, [r0, #4]
 800e256:	6803      	ldr	r3, [r0, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4718      	bx	r3

0800e25c <_ZN8touchgfx21AbstractPainterRGB88810renderInitEv>:
 800e25c:	2001      	movs	r0, #1
 800e25e:	4770      	bx	lr

0800e260 <_ZN8touchgfx21AbstractPainterRGB88810renderNextERhS1_S1_S1_>:
 800e260:	2000      	movs	r0, #0
 800e262:	4770      	bx	lr

0800e264 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh>:
 800e264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e268:	460d      	mov	r5, r1
 800e26a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800e26e:	b085      	sub	sp, #20
 800e270:	4690      	mov	r8, r2
 800e272:	4411      	add	r1, r2
 800e274:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800e278:	4699      	mov	r9, r3
 800e27a:	6803      	ldr	r3, [r0, #0]
 800e27c:	60c1      	str	r1, [r0, #12]
 800e27e:	4604      	mov	r4, r0
 800e280:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e282:	440a      	add	r2, r1
 800e284:	6102      	str	r2, [r0, #16]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	e9dd 670d 	ldrd	r6, r7, [sp, #52]	; 0x34
 800e28c:	4798      	blx	r3
 800e28e:	2800      	cmp	r0, #0
 800e290:	d03a      	beq.n	800e308 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xa4>
 800e292:	44c8      	add	r8, r9
 800e294:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e298:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 800e29c:	4445      	add	r5, r8
 800e29e:	442e      	add	r6, r5
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	f10d 020f 	add.w	r2, sp, #15
 800e2a6:	a903      	add	r1, sp, #12
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	9200      	str	r2, [sp, #0]
 800e2ac:	f10d 020d 	add.w	r2, sp, #13
 800e2b0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800e2b4:	f10d 030e 	add.w	r3, sp, #14
 800e2b8:	47c0      	blx	r8
 800e2ba:	b1f0      	cbz	r0, 800e2fa <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x96>
 800e2bc:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800e2c0:	7a20      	ldrb	r0, [r4, #8]
 800e2c2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800e2c6:	4358      	muls	r0, r3
 800e2c8:	f89d 100e 	ldrb.w	r1, [sp, #14]
 800e2cc:	1c43      	adds	r3, r0, #1
 800e2ce:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 800e2d2:	7838      	ldrb	r0, [r7, #0]
 800e2d4:	121b      	asrs	r3, r3, #8
 800e2d6:	fb10 f003 	smulbb	r0, r0, r3
 800e2da:	b283      	uxth	r3, r0
 800e2dc:	1c58      	adds	r0, r3, #1
 800e2de:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800e2e2:	6823      	ldr	r3, [r4, #0]
 800e2e4:	1200      	asrs	r0, r0, #8
 800e2e6:	f8d3 8014 	ldr.w	r8, [r3, #20]
 800e2ea:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e2ee:	28ff      	cmp	r0, #255	; 0xff
 800e2f0:	d10d      	bne.n	800e30e <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0xaa>
 800e2f2:	9100      	str	r1, [sp, #0]
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	47c0      	blx	r8
 800e2fa:	68e3      	ldr	r3, [r4, #12]
 800e2fc:	3503      	adds	r5, #3
 800e2fe:	3701      	adds	r7, #1
 800e300:	3301      	adds	r3, #1
 800e302:	42ae      	cmp	r6, r5
 800e304:	60e3      	str	r3, [r4, #12]
 800e306:	d8cb      	bhi.n	800e2a0 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x3c>
 800e308:	b005      	add	sp, #20
 800e30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e30e:	fa1f fc80 	uxth.w	ip, r0
 800e312:	43c0      	mvns	r0, r0
 800e314:	f895 e002 	ldrb.w	lr, [r5, #2]
 800e318:	fb12 f20c 	smulbb	r2, r2, ip
 800e31c:	b2c0      	uxtb	r0, r0
 800e31e:	fb13 f30c 	smulbb	r3, r3, ip
 800e322:	fb0e 2200 	mla	r2, lr, r0, r2
 800e326:	f895 e001 	ldrb.w	lr, [r5, #1]
 800e32a:	fb11 f10c 	smulbb	r1, r1, ip
 800e32e:	fb0e 3300 	mla	r3, lr, r0, r3
 800e332:	f895 e000 	ldrb.w	lr, [r5]
 800e336:	b292      	uxth	r2, r2
 800e338:	b29b      	uxth	r3, r3
 800e33a:	fb0e 1000 	mla	r0, lr, r0, r1
 800e33e:	1c59      	adds	r1, r3, #1
 800e340:	b280      	uxth	r0, r0
 800e342:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 800e346:	1c51      	adds	r1, r2, #1
 800e348:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800e34c:	1c41      	adds	r1, r0, #1
 800e34e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800e352:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 800e356:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800e35a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800e35e:	9000      	str	r0, [sp, #0]
 800e360:	e7c8      	b.n	800e2f4 <_ZN8touchgfx21AbstractPainterRGB8886renderEPhiiijPKh+0x90>

0800e362 <_ZN8touchgfx21AbstractPainterRGB88811renderPixelEPthhh>:
 800e362:	f89d 0000 	ldrb.w	r0, [sp]
 800e366:	704b      	strb	r3, [r1, #1]
 800e368:	7008      	strb	r0, [r1, #0]
 800e36a:	708a      	strb	r2, [r1, #2]
 800e36c:	4770      	bx	lr

0800e36e <_ZN8touchgfx21AbstractPainterRGB888D1Ev>:
 800e36e:	4770      	bx	lr

0800e370 <_ZN8touchgfx21AbstractPainterRGB888D0Ev>:
 800e370:	b510      	push	{r4, lr}
 800e372:	4604      	mov	r4, r0
 800e374:	2114      	movs	r1, #20
 800e376:	f011 f8e6 	bl	801f546 <_ZdlPvj>
 800e37a:	4620      	mov	r0, r4
 800e37c:	bd10      	pop	{r4, pc}

0800e37e <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh>:
 800e37e:	4413      	add	r3, r2
 800e380:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e386:	4419      	add	r1, r3
 800e388:	7a03      	ldrb	r3, [r0, #8]
 800e38a:	e9dd 6406 	ldrd	r6, r4, [sp, #24]
 800e38e:	2bff      	cmp	r3, #255	; 0xff
 800e390:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800e394:	440e      	add	r6, r1
 800e396:	d13d      	bne.n	800e414 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x96>
 800e398:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e39c:	3103      	adds	r1, #3
 800e39e:	7d87      	ldrb	r7, [r0, #22]
 800e3a0:	2bff      	cmp	r3, #255	; 0xff
 800e3a2:	d10a      	bne.n	800e3ba <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3c>
 800e3a4:	f801 7c03 	strb.w	r7, [r1, #-3]
 800e3a8:	7d43      	ldrb	r3, [r0, #21]
 800e3aa:	f801 3c02 	strb.w	r3, [r1, #-2]
 800e3ae:	7d03      	ldrb	r3, [r0, #20]
 800e3b0:	f801 3c01 	strb.w	r3, [r1, #-1]
 800e3b4:	428e      	cmp	r6, r1
 800e3b6:	d8ef      	bhi.n	800e398 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x1a>
 800e3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	43db      	mvns	r3, r3
 800e3be:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 800e3c2:	fb17 f702 	smulbb	r7, r7, r2
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	fb05 7503 	mla	r5, r5, r3, r7
 800e3cc:	b2ad      	uxth	r5, r5
 800e3ce:	1c6f      	adds	r7, r5, #1
 800e3d0:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800e3d4:	f811 7c02 	ldrb.w	r7, [r1, #-2]
 800e3d8:	fb17 f703 	smulbb	r7, r7, r3
 800e3dc:	122d      	asrs	r5, r5, #8
 800e3de:	f801 5c03 	strb.w	r5, [r1, #-3]
 800e3e2:	7d45      	ldrb	r5, [r0, #21]
 800e3e4:	fb05 7502 	mla	r5, r5, r2, r7
 800e3e8:	b2ad      	uxth	r5, r5
 800e3ea:	1c6f      	adds	r7, r5, #1
 800e3ec:	eb07 2515 	add.w	r5, r7, r5, lsr #8
 800e3f0:	122d      	asrs	r5, r5, #8
 800e3f2:	f801 5c02 	strb.w	r5, [r1, #-2]
 800e3f6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800e3fa:	7d07      	ldrb	r7, [r0, #20]
 800e3fc:	fb15 f303 	smulbb	r3, r5, r3
 800e400:	fb07 3202 	mla	r2, r7, r2, r3
 800e404:	b292      	uxth	r2, r2
 800e406:	1c53      	adds	r3, r2, #1
 800e408:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 800e40c:	1212      	asrs	r2, r2, #8
 800e40e:	f801 2c01 	strb.w	r2, [r1, #-1]
 800e412:	e7cf      	b.n	800e3b4 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x36>
 800e414:	3103      	adds	r1, #3
 800e416:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e41a:	428e      	cmp	r6, r1
 800e41c:	7a03      	ldrb	r3, [r0, #8]
 800e41e:	f101 0103 	add.w	r1, r1, #3
 800e422:	f811 cc06 	ldrb.w	ip, [r1, #-6]
 800e426:	fb02 f303 	mul.w	r3, r2, r3
 800e42a:	f103 0201 	add.w	r2, r3, #1
 800e42e:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 800e432:	ea4f 2222 	mov.w	r2, r2, asr #8
 800e436:	b295      	uxth	r5, r2
 800e438:	ea6f 0202 	mvn.w	r2, r2
 800e43c:	b2d3      	uxtb	r3, r2
 800e43e:	7d82      	ldrb	r2, [r0, #22]
 800e440:	fb1c fc03 	smulbb	ip, ip, r3
 800e444:	fb02 c205 	mla	r2, r2, r5, ip
 800e448:	b292      	uxth	r2, r2
 800e44a:	f102 0c01 	add.w	ip, r2, #1
 800e44e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800e452:	f811 cc05 	ldrb.w	ip, [r1, #-5]
 800e456:	fb1c fc03 	smulbb	ip, ip, r3
 800e45a:	ea4f 2222 	mov.w	r2, r2, asr #8
 800e45e:	f801 2c06 	strb.w	r2, [r1, #-6]
 800e462:	7d42      	ldrb	r2, [r0, #21]
 800e464:	fb02 c205 	mla	r2, r2, r5, ip
 800e468:	b292      	uxth	r2, r2
 800e46a:	f102 0c01 	add.w	ip, r2, #1
 800e46e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 800e472:	ea4f 2222 	mov.w	r2, r2, asr #8
 800e476:	f801 2c05 	strb.w	r2, [r1, #-5]
 800e47a:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 800e47e:	f890 c014 	ldrb.w	ip, [r0, #20]
 800e482:	fb12 f303 	smulbb	r3, r2, r3
 800e486:	fb0c 3305 	mla	r3, ip, r5, r3
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	f103 0201 	add.w	r2, r3, #1
 800e490:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 800e494:	ea4f 2323 	mov.w	r3, r3, asr #8
 800e498:	f801 3c04 	strb.w	r3, [r1, #-4]
 800e49c:	d8bb      	bhi.n	800e416 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x98>
 800e49e:	e78b      	b.n	800e3b8 <_ZN8touchgfx13PainterRGB8886renderEPhiiijPKh+0x3a>

0800e4a0 <_ZN8touchgfx13PainterRGB88810renderNextERhS1_S1_S1_>:
 800e4a0:	b510      	push	{r4, lr}
 800e4a2:	7d04      	ldrb	r4, [r0, #20]
 800e4a4:	700c      	strb	r4, [r1, #0]
 800e4a6:	7d41      	ldrb	r1, [r0, #21]
 800e4a8:	7011      	strb	r1, [r2, #0]
 800e4aa:	7d82      	ldrb	r2, [r0, #22]
 800e4ac:	2001      	movs	r0, #1
 800e4ae:	701a      	strb	r2, [r3, #0]
 800e4b0:	22ff      	movs	r2, #255	; 0xff
 800e4b2:	9b02      	ldr	r3, [sp, #8]
 800e4b4:	701a      	strb	r2, [r3, #0]
 800e4b6:	bd10      	pop	{r4, pc}

0800e4b8 <_ZN8touchgfx13PainterRGB888D1Ev>:
 800e4b8:	4770      	bx	lr

0800e4ba <_ZN8touchgfx13PainterRGB888D0Ev>:
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	4604      	mov	r4, r0
 800e4be:	2118      	movs	r1, #24
 800e4c0:	f011 f841 	bl	801f546 <_ZdlPvj>
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	bd10      	pop	{r4, pc}

0800e4c8 <_ZN8touchgfx12CanvasWidget10setPainterERNS_15AbstractPainterE>:
 800e4c8:	6281      	str	r1, [r0, #40]	; 0x28
 800e4ca:	4770      	bx	lr

0800e4cc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800e4d4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800e4d8:	8002      	strh	r2, [r0, #0]
 800e4da:	8042      	strh	r2, [r0, #2]
 800e4dc:	8084      	strh	r4, [r0, #4]
 800e4de:	80c1      	strh	r1, [r0, #6]
 800e4e0:	bd10      	pop	{r4, pc}

0800e4e2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	8002      	strh	r2, [r0, #0]
 800e4e6:	8042      	strh	r2, [r0, #2]
 800e4e8:	8082      	strh	r2, [r0, #4]
 800e4ea:	80c2      	strh	r2, [r0, #6]
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <_ZNK8touchgfx12CanvasWidget10getPainterEv>:
 800e4f0:	b508      	push	{r3, lr}
 800e4f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800e4f4:	b928      	cbnz	r0, 800e502 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x12>
 800e4f6:	4b03      	ldr	r3, [pc, #12]	; (800e504 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x14>)
 800e4f8:	2123      	movs	r1, #35	; 0x23
 800e4fa:	4a03      	ldr	r2, [pc, #12]	; (800e508 <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x18>)
 800e4fc:	4803      	ldr	r0, [pc, #12]	; (800e50c <_ZNK8touchgfx12CanvasWidget10getPainterEv+0x1c>)
 800e4fe:	f011 fe49 	bl	8020194 <__assert_func>
 800e502:	bd08      	pop	{r3, pc}
 800e504:	080248bc 	.word	0x080248bc
 800e508:	080249a0 	.word	0x080249a0
 800e50c:	080248e3 	.word	0x080248e3

0800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800e510:	b510      	push	{r4, lr}
 800e512:	f9b1 4000 	ldrsh.w	r4, [r1]
 800e516:	888a      	ldrh	r2, [r1, #4]
 800e518:	f9b0 3000 	ldrsh.w	r3, [r0]
 800e51c:	4422      	add	r2, r4
 800e51e:	b212      	sxth	r2, r2
 800e520:	4293      	cmp	r3, r2
 800e522:	da15      	bge.n	800e550 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e524:	8882      	ldrh	r2, [r0, #4]
 800e526:	4413      	add	r3, r2
 800e528:	b21b      	sxth	r3, r3
 800e52a:	429c      	cmp	r4, r3
 800e52c:	da10      	bge.n	800e550 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e52e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800e532:	88c9      	ldrh	r1, [r1, #6]
 800e534:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800e538:	4419      	add	r1, r3
 800e53a:	b209      	sxth	r1, r1
 800e53c:	428a      	cmp	r2, r1
 800e53e:	da07      	bge.n	800e550 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800e540:	88c0      	ldrh	r0, [r0, #6]
 800e542:	4410      	add	r0, r2
 800e544:	b200      	sxth	r0, r0
 800e546:	4283      	cmp	r3, r0
 800e548:	bfac      	ite	ge
 800e54a:	2000      	movge	r0, #0
 800e54c:	2001      	movlt	r0, #1
 800e54e:	bd10      	pop	{r4, pc}
 800e550:	2000      	movs	r0, #0
 800e552:	e7fc      	b.n	800e54e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800e554 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800e554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	b08b      	sub	sp, #44	; 0x2c
 800e55a:	4604      	mov	r4, r0
 800e55c:	6808      	ldr	r0, [r1, #0]
 800e55e:	f04f 0a00 	mov.w	sl, #0
 800e562:	6849      	ldr	r1, [r1, #4]
 800e564:	ab04      	add	r3, sp, #16
 800e566:	f647 7bff 	movw	fp, #32767	; 0x7fff
 800e56a:	c303      	stmia	r3!, {r0, r1}
 800e56c:	4b35      	ldr	r3, [pc, #212]	; (800e644 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf0>)
 800e56e:	4621      	mov	r1, r4
 800e570:	a806      	add	r0, sp, #24
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	2b01      	cmp	r3, #1
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e57a:	bf1f      	itttt	ne
 800e57c:	f10d 090e 	addne.w	r9, sp, #14
 800e580:	ae05      	addne	r6, sp, #20
 800e582:	f10d 0516 	addne.w	r5, sp, #22
 800e586:	f10d 0812 	addne.w	r8, sp, #18
 800e58a:	bf01      	itttt	eq
 800e58c:	f10d 0916 	addeq.w	r9, sp, #22
 800e590:	f10d 060e 	addeq.w	r6, sp, #14
 800e594:	ad05      	addeq	r5, sp, #20
 800e596:	f10d 0810 	addeq.w	r8, sp, #16
 800e59a:	4798      	blx	r3
 800e59c:	f9b5 3000 	ldrsh.w	r3, [r5]
 800e5a0:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d042      	beq.n	800e62e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xda>
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	bfa8      	it	ge
 800e5ac:	4613      	movge	r3, r2
 800e5ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e5b2:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 800e5b6:	2f00      	cmp	r7, #0
 800e5b8:	dd21      	ble.n	800e5fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xaa>
 800e5ba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 800e5be:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 800e5c2:	f9b6 2000 	ldrsh.w	r2, [r6]
 800e5c6:	f9b9 3000 	ldrsh.w	r3, [r9]
 800e5ca:	f8ad 0020 	strh.w	r0, [sp, #32]
 800e5ce:	a808      	add	r0, sp, #32
 800e5d0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 800e5d4:	a906      	add	r1, sp, #24
 800e5d6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 800e5da:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e5de:	f7ff ff97 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e5e2:	9001      	str	r0, [sp, #4]
 800e5e4:	b1d0      	cbz	r0, 800e61c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800e5e6:	6822      	ldr	r2, [r4, #0]
 800e5e8:	a908      	add	r1, sp, #32
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e5ee:	4790      	blx	r2
 800e5f0:	b9a0      	cbnz	r0, 800e61c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800e5f2:	107f      	asrs	r7, r7, #1
 800e5f4:	9b01      	ldr	r3, [sp, #4]
 800e5f6:	f8ad 700e 	strh.w	r7, [sp, #14]
 800e5fa:	469a      	mov	sl, r3
 800e5fc:	e7d9      	b.n	800e5b2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800e5fe:	d10d      	bne.n	800e61c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xc8>
 800e600:	2301      	movs	r3, #1
 800e602:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e606:	f8b8 2000 	ldrh.w	r2, [r8]
 800e60a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800e60e:	440a      	add	r2, r1
 800e610:	f8a8 2000 	strh.w	r2, [r8]
 800e614:	882b      	ldrh	r3, [r5, #0]
 800e616:	1a5b      	subs	r3, r3, r1
 800e618:	802b      	strh	r3, [r5, #0]
 800e61a:	e7bf      	b.n	800e59c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800e61c:	f1ba 0f00 	cmp.w	sl, #0
 800e620:	d0f1      	beq.n	800e606 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800e622:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 800e626:	455b      	cmp	r3, fp
 800e628:	bf08      	it	eq
 800e62a:	85a7      	strheq	r7, [r4, #44]	; 0x2c
 800e62c:	e7eb      	b.n	800e606 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb2>
 800e62e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e632:	429a      	cmp	r2, r3
 800e634:	bf04      	itt	eq
 800e636:	f647 73fe 	movweq	r3, #32766	; 0x7ffe
 800e63a:	85a3      	strheq	r3, [r4, #44]	; 0x2c
 800e63c:	b00b      	add	sp, #44	; 0x2c
 800e63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e642:	bf00      	nop
 800e644:	2400f190 	.word	0x2400f190

0800e648 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800e648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e64a:	b085      	sub	sp, #20
 800e64c:	6803      	ldr	r3, [r0, #0]
 800e64e:	4604      	mov	r4, r0
 800e650:	4601      	mov	r1, r0
 800e652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e654:	4668      	mov	r0, sp
 800e656:	4798      	blx	r3
 800e658:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 800e65c:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 800e660:	2300      	movs	r3, #0
 800e662:	a902      	add	r1, sp, #8
 800e664:	4668      	mov	r0, sp
 800e666:	9302      	str	r3, [sp, #8]
 800e668:	f8ad 600c 	strh.w	r6, [sp, #12]
 800e66c:	f8ad 500e 	strh.w	r5, [sp, #14]
 800e670:	f7ff ff4e 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e674:	b340      	cbz	r0, 800e6c8 <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x80>
 800e676:	f9bd 2000 	ldrsh.w	r2, [sp]
 800e67a:	f8bd 7004 	ldrh.w	r7, [sp, #4]
 800e67e:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800e682:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800e686:	443a      	add	r2, r7
 800e688:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800e68c:	f8ad 0000 	strh.w	r0, [sp]
 800e690:	b292      	uxth	r2, r2
 800e692:	f8ad 1002 	strh.w	r1, [sp, #2]
 800e696:	b217      	sxth	r7, r2
 800e698:	42be      	cmp	r6, r7
 800e69a:	bfd8      	it	le
 800e69c:	b2b2      	uxthle	r2, r6
 800e69e:	1a12      	subs	r2, r2, r0
 800e6a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e6a4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	b21a      	sxth	r2, r3
 800e6ae:	4295      	cmp	r5, r2
 800e6b0:	bfd8      	it	le
 800e6b2:	b2ab      	uxthle	r3, r5
 800e6b4:	1a5b      	subs	r3, r3, r1
 800e6b6:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e6ba:	6823      	ldr	r3, [r4, #0]
 800e6bc:	4669      	mov	r1, sp
 800e6be:	4620      	mov	r0, r4
 800e6c0:	691b      	ldr	r3, [r3, #16]
 800e6c2:	4798      	blx	r3
 800e6c4:	b005      	add	sp, #20
 800e6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6c8:	e9cd 0000 	strd	r0, r0, [sp]
 800e6cc:	e7f5      	b.n	800e6ba <_ZNK8touchgfx12CanvasWidget10invalidateEv+0x72>
	...

0800e6d0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800e6d8:	490c      	ldr	r1, [pc, #48]	; (800e70c <_ZN8touchgfx12CanvasWidgetC1Ev+0x3c>)
 800e6da:	8082      	strh	r2, [r0, #4]
 800e6dc:	80c2      	strh	r2, [r0, #6]
 800e6de:	8102      	strh	r2, [r0, #8]
 800e6e0:	8142      	strh	r2, [r0, #10]
 800e6e2:	8182      	strh	r2, [r0, #12]
 800e6e4:	81c2      	strh	r2, [r0, #14]
 800e6e6:	8202      	strh	r2, [r0, #16]
 800e6e8:	8242      	strh	r2, [r0, #18]
 800e6ea:	61c2      	str	r2, [r0, #28]
 800e6ec:	8402      	strh	r2, [r0, #32]
 800e6ee:	8442      	strh	r2, [r0, #34]	; 0x22
 800e6f0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800e6f4:	6001      	str	r1, [r0, #0]
 800e6f6:	21ff      	movs	r1, #255	; 0xff
 800e6f8:	6282      	str	r2, [r0, #40]	; 0x28
 800e6fa:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 800e6fe:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800e702:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e706:	8582      	strh	r2, [r0, #44]	; 0x2c
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	08024928 	.word	0x08024928

0800e710 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 800e710:	b530      	push	{r4, r5, lr}
 800e712:	460d      	mov	r5, r1
 800e714:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e716:	8949      	ldrh	r1, [r1, #10]
 800e718:	b085      	sub	sp, #20
 800e71a:	4604      	mov	r4, r0
 800e71c:	1ac9      	subs	r1, r1, r3
 800e71e:	6803      	ldr	r3, [r0, #0]
 800e720:	f10d 0206 	add.w	r2, sp, #6
 800e724:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e728:	b209      	sxth	r1, r1
 800e72a:	4798      	blx	r3
 800e72c:	b1a0      	cbz	r0, 800e758 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e72e:	792b      	ldrb	r3, [r5, #4]
 800e730:	b993      	cbnz	r3, 800e758 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e732:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800e736:	b178      	cbz	r0, 800e758 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e738:	6803      	ldr	r3, [r0, #0]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	4798      	blx	r3
 800e73e:	b158      	cbz	r0, 800e758 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 800e740:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e744:	aa02      	add	r2, sp, #8
 800e746:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 800e74a:	4621      	mov	r1, r4
 800e74c:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e750:	9503      	str	r5, [sp, #12]
 800e752:	6803      	ldr	r3, [r0, #0]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	4798      	blx	r3
 800e758:	b005      	add	sp, #20
 800e75a:	bd30      	pop	{r4, r5, pc}

0800e75c <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi>:
 800e75c:	b430      	push	{r4, r5}
 800e75e:	f9b0 511e 	ldrsh.w	r5, [r0, #286]	; 0x11e
 800e762:	b1cd      	cbz	r5, 800e798 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800e764:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800e768:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800e76c:	3d01      	subs	r5, #1
 800e76e:	6823      	ldr	r3, [r4, #0]
 800e770:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 800e774:	b139      	cbz	r1, 800e786 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x2a>
 800e776:	4293      	cmp	r3, r2
 800e778:	f1c2 0100 	rsb	r1, r2, #0
 800e77c:	bfa8      	it	ge
 800e77e:	4613      	movge	r3, r2
 800e780:	428c      	cmp	r4, r1
 800e782:	bfb8      	it	lt
 800e784:	460c      	movlt	r4, r1
 800e786:	1a99      	subs	r1, r3, r2
 800e788:	4422      	add	r2, r4
 800e78a:	4291      	cmp	r1, r2
 800e78c:	d004      	beq.n	800e798 <_ZN8touchgfx15StaticDataGraph24setGraphRangeXAutoScaledEbi+0x3c>
 800e78e:	6803      	ldr	r3, [r0, #0]
 800e790:	bc30      	pop	{r4, r5}
 800e792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e796:	4718      	bx	r3
 800e798:	bc30      	pop	{r4, r5}
 800e79a:	4770      	bx	lr

0800e79c <_ZN8touchgfx15StaticDataGraph11deleteValueEi>:
 800e79c:	b410      	push	{r4}
 800e79e:	2300      	movs	r3, #0
 800e7a0:	f9b0 211e 	ldrsh.w	r2, [r0, #286]	; 0x11e
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	dd0e      	ble.n	800e7c6 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x2a>
 800e7a8:	f8d0 413c 	ldr.w	r4, [r0, #316]	; 0x13c
 800e7ac:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800e7b0:	428c      	cmp	r4, r1
 800e7b2:	d106      	bne.n	800e7c2 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x26>
 800e7b4:	6802      	ldr	r2, [r0, #0]
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7bc:	f8d2 2130 	ldr.w	r2, [r2, #304]	; 0x130
 800e7c0:	4710      	bx	r2
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	e7ee      	b.n	800e7a4 <_ZN8touchgfx15StaticDataGraph11deleteValueEi+0x8>
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 800e7d0:	b508      	push	{r3, lr}
 800e7d2:	b929      	cbnz	r1, 800e7e0 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x10>
 800e7d4:	4b03      	ldr	r3, [pc, #12]	; (800e7e4 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x14>)
 800e7d6:	2171      	movs	r1, #113	; 0x71
 800e7d8:	4a03      	ldr	r2, [pc, #12]	; (800e7e8 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x18>)
 800e7da:	4804      	ldr	r0, [pc, #16]	; (800e7ec <_ZN8touchgfx17AbstractDataGraph9setScaleXEib+0x1c>)
 800e7dc:	f011 fcda 	bl	8020194 <__assert_func>
 800e7e0:	6301      	str	r1, [r0, #48]	; 0x30
 800e7e2:	bd08      	pop	{r3, pc}
 800e7e4:	08024a37 	.word	0x08024a37
 800e7e8:	08024d8a 	.word	0x08024d8a
 800e7ec:	080233b1 	.word	0x080233b1

0800e7f0 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 800e7f0:	b508      	push	{r3, lr}
 800e7f2:	b929      	cbnz	r1, 800e800 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x10>
 800e7f4:	4b03      	ldr	r3, [pc, #12]	; (800e804 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x14>)
 800e7f6:	2193      	movs	r1, #147	; 0x93
 800e7f8:	4a03      	ldr	r2, [pc, #12]	; (800e808 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x18>)
 800e7fa:	4804      	ldr	r0, [pc, #16]	; (800e80c <_ZN8touchgfx17AbstractDataGraph9setScaleYEib+0x1c>)
 800e7fc:	f011 fcca 	bl	8020194 <__assert_func>
 800e800:	6341      	str	r1, [r0, #52]	; 0x34
 800e802:	bd08      	pop	{r3, pc}
 800e804:	08024a37 	.word	0x08024a37
 800e808:	08024dc9 	.word	0x08024dc9
 800e80c:	080233b1 	.word	0x080233b1

0800e810 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 800e810:	2300      	movs	r3, #0
 800e812:	3038      	adds	r0, #56	; 0x38
 800e814:	f8a0 30e6 	strh.w	r3, [r0, #230]	; 0xe6
 800e818:	f004 bd22 	b.w	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>

0800e81c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi>:
 800e81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e820:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800e824:	4604      	mov	r4, r0
 800e826:	4688      	mov	r8, r1
 800e828:	4616      	mov	r6, r2
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d04c      	beq.n	800e8c8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e82e:	6803      	ldr	r3, [r0, #0]
 800e830:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e834:	4798      	blx	r3
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	4605      	mov	r5, r0
 800e83a:	4620      	mov	r0, r4
 800e83c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e840:	4798      	blx	r3
 800e842:	4285      	cmp	r5, r0
 800e844:	f8d4 e13c 	ldr.w	lr, [r4, #316]	; 0x13c
 800e848:	bfc2      	ittt	gt
 800e84a:	b22b      	sxthgt	r3, r5
 800e84c:	4605      	movgt	r5, r0
 800e84e:	4618      	movgt	r0, r3
 800e850:	2300      	movs	r3, #0
 800e852:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 800e856:	0099      	lsls	r1, r3, #2
 800e858:	42aa      	cmp	r2, r5
 800e85a:	da05      	bge.n	800e868 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e85c:	f9b4 711e 	ldrsh.w	r7, [r4, #286]	; 0x11e
 800e860:	42bb      	cmp	r3, r7
 800e862:	da01      	bge.n	800e868 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x4c>
 800e864:	3301      	adds	r3, #1
 800e866:	e7f4      	b.n	800e852 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x36>
 800e868:	4282      	cmp	r2, r0
 800e86a:	dc2d      	bgt.n	800e8c8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e86c:	f8d4 c140 	ldr.w	ip, [r4, #320]	; 0x140
 800e870:	3301      	adds	r3, #1
 800e872:	f85c 5001 	ldr.w	r5, [ip, r1]
 800e876:	462a      	mov	r2, r5
 800e878:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800e87c:	4288      	cmp	r0, r1
 800e87e:	dd0d      	ble.n	800e89c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e880:	f9b4 111e 	ldrsh.w	r1, [r4, #286]	; 0x11e
 800e884:	428b      	cmp	r3, r1
 800e886:	da09      	bge.n	800e89c <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x80>
 800e888:	f85c 7023 	ldr.w	r7, [ip, r3, lsl #2]
 800e88c:	3301      	adds	r3, #1
 800e88e:	42bd      	cmp	r5, r7
 800e890:	bfa8      	it	ge
 800e892:	463d      	movge	r5, r7
 800e894:	42ba      	cmp	r2, r7
 800e896:	bfb8      	it	lt
 800e898:	463a      	movlt	r2, r7
 800e89a:	e7ed      	b.n	800e878 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x5c>
 800e89c:	f1b8 0f00 	cmp.w	r8, #0
 800e8a0:	d007      	beq.n	800e8b2 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0x96>
 800e8a2:	42b5      	cmp	r5, r6
 800e8a4:	f1c6 0300 	rsb	r3, r6, #0
 800e8a8:	bfa8      	it	ge
 800e8aa:	4635      	movge	r5, r6
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	bfb8      	it	lt
 800e8b0:	461a      	movlt	r2, r3
 800e8b2:	1ba9      	subs	r1, r5, r6
 800e8b4:	4432      	add	r2, r6
 800e8b6:	4291      	cmp	r1, r2
 800e8b8:	d006      	beq.n	800e8c8 <_ZN8touchgfx15StaticDataGraph24setGraphRangeYAutoScaledEbi+0xac>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c6:	4718      	bx	r3
 800e8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e8cc <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 800e8cc:	4291      	cmp	r1, r2
 800e8ce:	b510      	push	{r4, lr}
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	d106      	bne.n	800e8e2 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x16>
 800e8d4:	4b12      	ldr	r3, [pc, #72]	; (800e920 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x54>)
 800e8d6:	f240 1111 	movw	r1, #273	; 0x111
 800e8da:	4a12      	ldr	r2, [pc, #72]	; (800e924 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x58>)
 800e8dc:	4812      	ldr	r0, [pc, #72]	; (800e928 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x5c>)
 800e8de:	f011 fc59 	bl	8020194 <__assert_func>
 800e8e2:	bfc2      	ittt	gt
 800e8e4:	460b      	movgt	r3, r1
 800e8e6:	4611      	movgt	r1, r2
 800e8e8:	461a      	movgt	r2, r3
 800e8ea:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
 800e8ee:	428b      	cmp	r3, r1
 800e8f0:	d103      	bne.n	800e8fa <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x2e>
 800e8f2:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
 800e8f6:	4293      	cmp	r3, r2
 800e8f8:	d011      	beq.n	800e91e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x52>
 800e8fa:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
 800e8fe:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800e902:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
 800e906:	f004 fcab 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e90a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e90e:	f004 fca7 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e912:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800e916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e91a:	f004 bca1 	b.w	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e91e:	bd10      	pop	{r4, pc}
 800e920:	080249ee 	.word	0x080249ee
 800e924:	08024cf8 	.word	0x08024cf8
 800e928:	080249f9 	.word	0x080249f9

0800e92c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 800e92c:	4291      	cmp	r1, r2
 800e92e:	b510      	push	{r4, lr}
 800e930:	4604      	mov	r4, r0
 800e932:	d106      	bne.n	800e942 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x16>
 800e934:	4b12      	ldr	r3, [pc, #72]	; (800e980 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x54>)
 800e936:	f44f 7192 	mov.w	r1, #292	; 0x124
 800e93a:	4a12      	ldr	r2, [pc, #72]	; (800e984 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x58>)
 800e93c:	4812      	ldr	r0, [pc, #72]	; (800e988 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x5c>)
 800e93e:	f011 fc29 	bl	8020194 <__assert_func>
 800e942:	bfc2      	ittt	gt
 800e944:	460b      	movgt	r3, r1
 800e946:	4611      	movgt	r1, r2
 800e948:	461a      	movgt	r2, r3
 800e94a:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800e94e:	428b      	cmp	r3, r1
 800e950:	d103      	bne.n	800e95a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x2e>
 800e952:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 800e956:	4293      	cmp	r3, r2
 800e958:	d011      	beq.n	800e97e <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x52>
 800e95a:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
 800e95e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800e962:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 800e966:	f004 fc7b 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e96a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800e96e:	f004 fc77 	bl	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e972:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800e976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e97a:	f004 bc71 	b.w	8013260 <_ZNK8touchgfx8Drawable10invalidateEv>
 800e97e:	bd10      	pop	{r4, pc}
 800e980:	080249ee 	.word	0x080249ee
 800e984:	08024d41 	.word	0x08024d41
 800e988:	080249f9 	.word	0x080249f9

0800e98c <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 800e98c:	b530      	push	{r4, r5, lr}
 800e98e:	790b      	ldrb	r3, [r1, #4]
 800e990:	b085      	sub	sp, #20
 800e992:	4604      	mov	r4, r0
 800e994:	460d      	mov	r5, r1
 800e996:	2b02      	cmp	r3, #2
 800e998:	d020      	beq.n	800e9dc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e99a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 800e99c:	f10d 0206 	add.w	r2, sp, #6
 800e9a0:	88c9      	ldrh	r1, [r1, #6]
 800e9a2:	1ac9      	subs	r1, r1, r3
 800e9a4:	6803      	ldr	r3, [r0, #0]
 800e9a6:	b209      	sxth	r1, r1
 800e9a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800e9ac:	4798      	blx	r3
 800e9ae:	b1a8      	cbz	r0, 800e9dc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e9b0:	792b      	ldrb	r3, [r5, #4]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d812      	bhi.n	800e9dc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e9b6:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e9ba:	b178      	cbz	r0, 800e9dc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e9bc:	6803      	ldr	r3, [r0, #0]
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	4798      	blx	r3
 800e9c2:	b158      	cbz	r0, 800e9dc <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 800e9c4:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800e9c8:	aa02      	add	r2, sp, #8
 800e9ca:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	f8ad 3008 	strh.w	r3, [sp, #8]
 800e9d4:	9503      	str	r5, [sp, #12]
 800e9d6:	6803      	ldr	r3, [r0, #0]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	4798      	blx	r3
 800e9dc:	b005      	add	sp, #20
 800e9de:	bd30      	pop	{r4, r5, pc}

0800e9e0 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 800e9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800e9ea:	4690      	mov	r8, r2
 800e9ec:	461e      	mov	r6, r3
 800e9ee:	9f06      	ldr	r7, [sp, #24]
 800e9f0:	b928      	cbnz	r0, 800e9fe <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 800e9f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e9f6:	803b      	strh	r3, [r7, #0]
 800e9f8:	8033      	strh	r3, [r6, #0]
 800e9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9fe:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800ea02:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800ea06:	1883      	adds	r3, r0, r2
 800ea08:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800ea0c:	1ad2      	subs	r2, r2, r3
 800ea0e:	b212      	sxth	r2, r2
 800ea10:	2a01      	cmp	r2, #1
 800ea12:	dc07      	bgt.n	800ea24 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 800ea14:	2300      	movs	r3, #0
 800ea16:	8033      	strh	r3, [r6, #0]
 800ea18:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800ea1c:	3b01      	subs	r3, #1
 800ea1e:	803b      	strh	r3, [r7, #0]
 800ea20:	2001      	movs	r0, #1
 800ea22:	e7ea      	b.n	800e9fa <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800ea24:	f8d4 5130 	ldr.w	r5, [r4, #304]	; 0x130
 800ea28:	1a08      	subs	r0, r1, r0
 800ea2a:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ea2e:	3a01      	subs	r2, #1
 800ea30:	0140      	lsls	r0, r0, #5
 800ea32:	1ae9      	subs	r1, r5, r3
 800ea34:	f004 fddd 	bl	80135f2 <_ZN8touchgfx6muldivElll>
 800ea38:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
 800ea3c:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
 800ea40:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 800ea44:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	; 0x116
 800ea48:	1883      	adds	r3, r0, r2
 800ea4a:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800ea4e:	eba8 0000 	sub.w	r0, r8, r0
 800ea52:	1ad2      	subs	r2, r2, r3
 800ea54:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800ea58:	0140      	lsls	r0, r0, #5
 800ea5a:	b212      	sxth	r2, r2
 800ea5c:	1a59      	subs	r1, r3, r1
 800ea5e:	3a01      	subs	r2, #1
 800ea60:	f004 fdc7 	bl	80135f2 <_ZN8touchgfx6muldivElll>
 800ea64:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ea68:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800ea6c:	4285      	cmp	r5, r0
 800ea6e:	bfde      	ittt	le
 800ea70:	4603      	movle	r3, r0
 800ea72:	4628      	movle	r0, r5
 800ea74:	461d      	movle	r5, r3
 800ea76:	2320      	movs	r3, #32
 800ea78:	2d00      	cmp	r5, #0
 800ea7a:	bfa8      	it	ge
 800ea7c:	351f      	addge	r5, #31
 800ea7e:	fb90 f0f3 	sdiv	r0, r0, r3
 800ea82:	bfb4      	ite	lt
 800ea84:	fb95 f5f3 	sdivlt	r5, r5, r3
 800ea88:	116d      	asrge	r5, r5, #5
 800ea8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ea8e:	8033      	strh	r3, [r6, #0]
 800ea90:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	; 0x11e
 800ea94:	f9b6 3000 	ldrsh.w	r3, [r6]
 800ea98:	1e51      	subs	r1, r2, #1
 800ea9a:	428b      	cmp	r3, r1
 800ea9c:	da06      	bge.n	800eaac <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xcc>
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800eaa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eaa8:	4288      	cmp	r0, r1
 800eaaa:	daf0      	bge.n	800ea8e <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xae>
 800eaac:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800eab0:	803a      	strh	r2, [r7, #0]
 800eab2:	f9b7 3000 	ldrsh.w	r3, [r7]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	dd23      	ble.n	800eb02 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x122>
 800eaba:	181a      	adds	r2, r3, r0
 800eabc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800eac0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800eac4:	42aa      	cmp	r2, r5
 800eac6:	db10      	blt.n	800eaea <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10a>
 800eac8:	3b01      	subs	r3, #1
 800eaca:	803b      	strh	r3, [r7, #0]
 800eacc:	e7f1      	b.n	800eab2 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd2>
 800eace:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ead2:	8032      	strh	r2, [r6, #0]
 800ead4:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ead8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eadc:	4293      	cmp	r3, r2
 800eade:	bfdc      	itt	le
 800eae0:	f103 33ff 	addle.w	r3, r3, #4294967295
 800eae4:	b21a      	sxthle	r2, r3
 800eae6:	803a      	strh	r2, [r7, #0]
 800eae8:	e79a      	b.n	800ea20 <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>
 800eaea:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800eaee:	f9b6 2000 	ldrsh.w	r2, [r6]
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	dbea      	blt.n	800eace <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xee>
 800eaf8:	b21b      	sxth	r3, r3
 800eafa:	2000      	movs	r0, #0
 800eafc:	803b      	strh	r3, [r7, #0]
 800eafe:	8033      	strh	r3, [r6, #0]
 800eb00:	e77b      	b.n	800e9fa <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 800eb02:	2000      	movs	r0, #0
 800eb04:	8038      	strh	r0, [r7, #0]
 800eb06:	8030      	strh	r0, [r6, #0]
 800eb08:	e777      	b.n	800e9fa <_ZNK8touchgfx15StaticDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
	...

0800eb0c <_ZN8touchgfx9ContainerC1Ev>:
 800eb0c:	2101      	movs	r1, #1
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 800eb14:	4909      	ldr	r1, [pc, #36]	; (800eb3c <_ZN8touchgfx9ContainerC1Ev+0x30>)
 800eb16:	8082      	strh	r2, [r0, #4]
 800eb18:	80c2      	strh	r2, [r0, #6]
 800eb1a:	8102      	strh	r2, [r0, #8]
 800eb1c:	8142      	strh	r2, [r0, #10]
 800eb1e:	8182      	strh	r2, [r0, #12]
 800eb20:	81c2      	strh	r2, [r0, #14]
 800eb22:	8202      	strh	r2, [r0, #16]
 800eb24:	8242      	strh	r2, [r0, #18]
 800eb26:	61c2      	str	r2, [r0, #28]
 800eb28:	8402      	strh	r2, [r0, #32]
 800eb2a:	8442      	strh	r2, [r0, #34]	; 0x22
 800eb2c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 800eb30:	6001      	str	r1, [r0, #0]
 800eb32:	6282      	str	r2, [r0, #40]	; 0x28
 800eb34:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800eb38:	4770      	bx	lr
 800eb3a:	bf00      	nop
 800eb3c:	08024004 	.word	0x08024004

0800eb40 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 800eb40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	4605      	mov	r5, r0
 800eb46:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800eb4a:	4688      	mov	r8, r1
 800eb4c:	4691      	mov	r9, r2
 800eb4e:	469a      	mov	sl, r3
 800eb50:	b360      	cbz	r0, 800ebac <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 800eb52:	2700      	movs	r7, #0
 800eb54:	f04f 3bff 	mov.w	fp, #4294967295
 800eb58:	b23e      	sxth	r6, r7
 800eb5a:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	; 0x11e
 800eb5e:	42b3      	cmp	r3, r6
 800eb60:	dd23      	ble.n	800ebaa <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 800eb62:	682b      	ldr	r3, [r5, #0]
 800eb64:	4631      	mov	r1, r6
 800eb66:	4628      	mov	r0, r5
 800eb68:	3701      	adds	r7, #1
 800eb6a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800eb6e:	4798      	blx	r3
 800eb70:	9001      	str	r0, [sp, #4]
 800eb72:	a801      	add	r0, sp, #4
 800eb74:	f7f5 fa3d 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eb78:	682b      	ldr	r3, [r5, #0]
 800eb7a:	eba0 0008 	sub.w	r0, r0, r8
 800eb7e:	4631      	mov	r1, r6
 800eb80:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800eb84:	b204      	sxth	r4, r0
 800eb86:	4628      	mov	r0, r5
 800eb88:	4798      	blx	r3
 800eb8a:	9001      	str	r0, [sp, #4]
 800eb8c:	a801      	add	r0, sp, #4
 800eb8e:	f7f5 fa30 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800eb92:	eba0 0009 	sub.w	r0, r0, r9
 800eb96:	fb10 f000 	smulbb	r0, r0, r0
 800eb9a:	fb04 0404 	mla	r4, r4, r4, r0
 800eb9e:	455c      	cmp	r4, fp
 800eba0:	bf3c      	itt	cc
 800eba2:	f8aa 6000 	strhcc.w	r6, [sl]
 800eba6:	46a3      	movcc	fp, r4
 800eba8:	e7d6      	b.n	800eb58 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 800ebaa:	2001      	movs	r0, #1
 800ebac:	b003      	add	sp, #12
 800ebae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebb2 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 800ebb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	; 0x11e
 800ebbc:	4688      	mov	r8, r1
 800ebbe:	4691      	mov	r9, r2
 800ebc0:	b1f8      	cbz	r0, 800ec02 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x50>
 800ebc2:	2500      	movs	r5, #0
 800ebc4:	f04f 37ff 	mov.w	r7, #4294967295
 800ebc8:	b22e      	sxth	r6, r5
 800ebca:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ebce:	42b3      	cmp	r3, r6
 800ebd0:	dd16      	ble.n	800ec00 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x4e>
 800ebd2:	6823      	ldr	r3, [r4, #0]
 800ebd4:	4631      	mov	r1, r6
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	3501      	adds	r5, #1
 800ebda:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800ebde:	4798      	blx	r3
 800ebe0:	9001      	str	r0, [sp, #4]
 800ebe2:	a801      	add	r0, sp, #4
 800ebe4:	f7f5 fa05 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800ebe8:	b200      	sxth	r0, r0
 800ebea:	eba0 0008 	sub.w	r0, r0, r8
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	bfb8      	it	lt
 800ebf2:	4240      	neglt	r0, r0
 800ebf4:	42b8      	cmp	r0, r7
 800ebf6:	bf3c      	itt	cc
 800ebf8:	f8a9 6000 	strhcc.w	r6, [r9]
 800ebfc:	4607      	movcc	r7, r0
 800ebfe:	e7e3      	b.n	800ebc8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x16>
 800ec00:	2001      	movs	r0, #1
 800ec02:	b003      	add	sp, #12
 800ec04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800ec08 <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 800ec08:	f8a0 3118 	strh.w	r3, [r0, #280]	; 0x118
 800ec0c:	f9bd 3000 	ldrsh.w	r3, [sp]
 800ec10:	f8a0 1114 	strh.w	r1, [r0, #276]	; 0x114
 800ec14:	f8a0 2116 	strh.w	r2, [r0, #278]	; 0x116
 800ec18:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
 800ec1c:	4770      	bx	lr

0800ec1e <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 800ec1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec20:	4604      	mov	r4, r0
 800ec22:	3038      	adds	r0, #56	; 0x38
 800ec24:	460d      	mov	r5, r1
 800ec26:	f7fe f8c3 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ec2a:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800ec2e:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ec32:	4628      	mov	r0, r5
 800ec34:	9200      	str	r2, [sp, #0]
 800ec36:	2200      	movs	r2, #0
 800ec38:	4611      	mov	r1, r2
 800ec3a:	f7f4 fce3 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec3e:	b003      	add	sp, #12
 800ec40:	bd30      	pop	{r4, r5, pc}

0800ec42 <_ZN8touchgfx17AbstractDataGraph14addLeftElementERNS_23AbstractGraphDecorationE>:
 800ec42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec44:	4604      	mov	r4, r0
 800ec46:	3064      	adds	r0, #100	; 0x64
 800ec48:	460d      	mov	r5, r1
 800ec4a:	f7fe f8b1 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ec4e:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800ec52:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800ec56:	4628      	mov	r0, r5
 800ec58:	9200      	str	r2, [sp, #0]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	f7f4 fcd1 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ec62:	b003      	add	sp, #12
 800ec64:	bd30      	pop	{r4, r5, pc}

0800ec66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 800ec66:	b538      	push	{r3, r4, r5, lr}
 800ec68:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800ec6c:	460d      	mov	r5, r1
 800ec6e:	428b      	cmp	r3, r1
 800ec70:	dd08      	ble.n	800ec84 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800ec72:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800ec74:	b134      	cbz	r4, 800ec84 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	4620      	mov	r0, r4
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec7e:	4798      	blx	r3
 800ec80:	69a4      	ldr	r4, [r4, #24]
 800ec82:	e7f7      	b.n	800ec74 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 800ec84:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ec88 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	1e0c      	subs	r4, r1, #0
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	db03      	blt.n	800ec98 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x10>
 800ec90:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800ec94:	42a3      	cmp	r3, r4
 800ec96:	dc06      	bgt.n	800eca6 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x1e>
 800ec98:	4b11      	ldr	r3, [pc, #68]	; (800ece0 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x58>)
 800ec9a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800ec9e:	4a11      	ldr	r2, [pc, #68]	; (800ece4 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x5c>)
 800eca0:	4811      	ldr	r0, [pc, #68]	; (800ece8 <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x60>)
 800eca2:	f011 fa77 	bl	8020194 <__assert_func>
 800eca6:	b226      	sxth	r6, r4
 800eca8:	4631      	mov	r1, r6
 800ecaa:	f7ff ffdc 	bl	800ec66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800ecae:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800ecb8:	00a3      	lsls	r3, r4, #2
 800ecba:	f9b5 111e 	ldrsh.w	r1, [r5, #286]	; 0x11e
 800ecbe:	1d1a      	adds	r2, r3, #4
 800ecc0:	42a1      	cmp	r1, r4
 800ecc2:	dd0a      	ble.n	800ecda <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x52>
 800ecc4:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 800ecc8:	3401      	adds	r4, #1
 800ecca:	5888      	ldr	r0, [r1, r2]
 800eccc:	50c8      	str	r0, [r1, r3]
 800ecce:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 800ecd2:	5888      	ldr	r0, [r1, r2]
 800ecd4:	50c8      	str	r0, [r1, r3]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	e7ef      	b.n	800ecba <_ZN8touchgfx15StaticDataGraph11deleteIndexEi+0x32>
 800ecda:	4630      	mov	r0, r6
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}
 800ecde:	bf00      	nop
 800ece0:	08023314 	.word	0x08023314
 800ece4:	08024cbc 	.word	0x08024cbc
 800ece8:	080249f9 	.word	0x080249f9

0800ecec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 800ecec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecee:	4604      	mov	r4, r0
 800ecf0:	6e05      	ldr	r5, [r0, #96]	; 0x60
 800ecf2:	b15d      	cbz	r5, 800ed0c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 800ecf4:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800ecfe:	9200      	str	r2, [sp, #0]
 800ed00:	2200      	movs	r2, #0
 800ed02:	4611      	mov	r1, r2
 800ed04:	f7f4 fc7e 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed08:	69ad      	ldr	r5, [r5, #24]
 800ed0a:	e7f2      	b.n	800ecf2 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 800ed0c:	f8d4 50e4 	ldr.w	r5, [r4, #228]	; 0xe4
 800ed10:	b15d      	cbz	r5, 800ed2a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 800ed12:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	; 0xc6
 800ed16:	4628      	mov	r0, r5
 800ed18:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	; 0xc4
 800ed1c:	9200      	str	r2, [sp, #0]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	4611      	mov	r1, r2
 800ed22:	f7f4 fc6f 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed26:	69ad      	ldr	r5, [r5, #24]
 800ed28:	e7f2      	b.n	800ed10 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 800ed2a:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
 800ed2e:	b15d      	cbz	r5, 800ed48 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 800ed30:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	; 0x6e
 800ed34:	4628      	mov	r0, r5
 800ed36:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	; 0x6c
 800ed3a:	9200      	str	r2, [sp, #0]
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4611      	mov	r1, r2
 800ed40:	f7f4 fc60 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed44:	69ad      	ldr	r5, [r5, #24]
 800ed46:	e7f2      	b.n	800ed2e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 800ed48:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800ed4c:	b15d      	cbz	r5, 800ed66 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 800ed4e:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
 800ed52:	4628      	mov	r0, r5
 800ed54:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	; 0x98
 800ed58:	9200      	str	r2, [sp, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4611      	mov	r1, r2
 800ed5e:	f7f4 fc51 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed62:	69ad      	ldr	r5, [r5, #24]
 800ed64:	e7f2      	b.n	800ed4c <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 800ed66:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 800ed6a:	b15d      	cbz	r5, 800ed84 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 800ed6c:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	; 0xf2
 800ed70:	4628      	mov	r0, r5
 800ed72:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	; 0xf0
 800ed76:	9200      	str	r2, [sp, #0]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	f7f4 fc42 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ed80:	69ad      	ldr	r5, [r5, #24]
 800ed82:	e7f2      	b.n	800ed6a <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	4620      	mov	r0, r4
 800ed88:	695b      	ldr	r3, [r3, #20]
 800ed8a:	b003      	add	sp, #12
 800ed8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed90:	4718      	bx	r3

0800ed92 <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 800ed92:	b430      	push	{r4, r5}
 800ed94:	b28a      	uxth	r2, r1
 800ed96:	f8b0 4098 	ldrh.w	r4, [r0, #152]	; 0x98
 800ed9a:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 800ed9e:	1b15      	subs	r5, r2, r4
 800eda0:	f8a0 10f0 	strh.w	r1, [r0, #240]	; 0xf0
 800eda4:	8101      	strh	r1, [r0, #8]
 800eda6:	f8a0 5094 	strh.w	r5, [r0, #148]	; 0x94
 800edaa:	f8b0 506c 	ldrh.w	r5, [r0, #108]	; 0x6c
 800edae:	442c      	add	r4, r5
 800edb0:	1b12      	subs	r2, r2, r4
 800edb2:	bc30      	pop	{r4, r5}
 800edb4:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800edb8:	f7ff bf98 	b.w	800ecec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800edbc <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 800edbc:	b430      	push	{r4, r5}
 800edbe:	b28a      	uxth	r2, r1
 800edc0:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	; 0xf2
 800edc4:	f8a0 106e 	strh.w	r1, [r0, #110]	; 0x6e
 800edc8:	1b15      	subs	r5, r2, r4
 800edca:	f8a0 109a 	strh.w	r1, [r0, #154]	; 0x9a
 800edce:	8141      	strh	r1, [r0, #10]
 800edd0:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
 800edd4:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	; 0xc6
 800edd8:	442c      	add	r4, r5
 800edda:	1b12      	subs	r2, r2, r4
 800eddc:	bc30      	pop	{r4, r5}
 800edde:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
 800ede2:	f7ff bf83 	b.w	800ecec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

0800ede6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 800ede6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800edea:	fa1f fa83 	uxth.w	sl, r3
 800edee:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 800edf2:	4615      	mov	r5, r2
 800edf4:	4699      	mov	r9, r3
 800edf6:	fa1f f887 	uxth.w	r8, r7
 800edfa:	8903      	ldrh	r3, [r0, #8]
 800edfc:	4452      	add	r2, sl
 800edfe:	4604      	mov	r4, r0
 800ee00:	8940      	ldrh	r0, [r0, #10]
 800ee02:	460e      	mov	r6, r1
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	eb08 0201 	add.w	r2, r8, r1
 800ee0a:	1a80      	subs	r0, r0, r2
 800ee0c:	b21b      	sxth	r3, r3
 800ee0e:	460a      	mov	r2, r1
 800ee10:	4629      	mov	r1, r5
 800ee12:	b200      	sxth	r0, r0
 800ee14:	9000      	str	r0, [sp, #0]
 800ee16:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800ee1a:	f7f4 fbf3 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ee24:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 800ee28:	4611      	mov	r1, r2
 800ee2a:	9600      	str	r6, [sp, #0]
 800ee2c:	f7f4 fbea 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee30:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	462b      	mov	r3, r5
 800ee3e:	4611      	mov	r1, r2
 800ee40:	f7f4 fbe0 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee44:	8921      	ldrh	r1, [r4, #8]
 800ee46:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800ee4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
 800ee4e:	eba1 010a 	sub.w	r1, r1, sl
 800ee52:	2200      	movs	r2, #0
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	464b      	mov	r3, r9
 800ee58:	b209      	sxth	r1, r1
 800ee5a:	f7f4 fbd3 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee5e:	8962      	ldrh	r2, [r4, #10]
 800ee60:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800ee64:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ee68:	eba2 0208 	sub.w	r2, r2, r8
 800ee6c:	9700      	str	r7, [sp, #0]
 800ee6e:	2100      	movs	r1, #0
 800ee70:	b212      	sxth	r2, r2
 800ee72:	f7f4 fbc7 	bl	8003604 <_ZN8touchgfx8Drawable11setPositionEssss>
 800ee76:	4620      	mov	r0, r4
 800ee78:	b002      	add	sp, #8
 800ee7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7e:	f7ff bf35 	b.w	800ecec <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>
	...

0800ee84 <_ZN8touchgfx17AbstractDataGraphC1Es>:
 800ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee88:	b085      	sub	sp, #20
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	2601      	movs	r6, #1
 800ee8e:	2500      	movs	r5, #0
 800ee90:	9103      	str	r1, [sp, #12]
 800ee92:	f7ff fe3b 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800ee96:	4b30      	ldr	r3, [pc, #192]	; (800ef58 <_ZN8touchgfx17AbstractDataGraphC1Es+0xd4>)
 800ee98:	f104 0b38 	add.w	fp, r4, #56	; 0x38
 800ee9c:	f104 0964 	add.w	r9, r4, #100	; 0x64
 800eea0:	f104 0890 	add.w	r8, r4, #144	; 0x90
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	23ff      	movs	r3, #255	; 0xff
 800eea8:	4658      	mov	r0, fp
 800eeaa:	f104 0abc 	add.w	sl, r4, #188	; 0xbc
 800eeae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 800eeb2:	f104 07e8 	add.w	r7, r4, #232	; 0xe8
 800eeb6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 800eeba:	f7ff fe27 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800eebe:	4648      	mov	r0, r9
 800eec0:	f7ff fe24 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800eec4:	4640      	mov	r0, r8
 800eec6:	f7ff fe21 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800eeca:	4650      	mov	r0, sl
 800eecc:	f7ff fe1e 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800eed0:	4638      	mov	r0, r7
 800eed2:	f7ff fe1b 	bl	800eb0c <_ZN8touchgfx9ContainerC1Ev>
 800eed6:	9903      	ldr	r1, [sp, #12]
 800eed8:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 800eedc:	42a9      	cmp	r1, r5
 800eede:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800eee2:	f8a4 111c 	strh.w	r1, [r4, #284]	; 0x11c
 800eee6:	f8a4 511e 	strh.w	r5, [r4, #286]	; 0x11e
 800eeea:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800eeee:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800eef2:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
 800eef6:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800eefa:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800eefe:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800ef02:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800ef06:	dc05      	bgt.n	800ef14 <_ZN8touchgfx17AbstractDataGraphC1Es+0x90>
 800ef08:	4b14      	ldr	r3, [pc, #80]	; (800ef5c <_ZN8touchgfx17AbstractDataGraphC1Es+0xd8>)
 800ef0a:	211d      	movs	r1, #29
 800ef0c:	4a14      	ldr	r2, [pc, #80]	; (800ef60 <_ZN8touchgfx17AbstractDataGraphC1Es+0xdc>)
 800ef0e:	4815      	ldr	r0, [pc, #84]	; (800ef64 <_ZN8touchgfx17AbstractDataGraphC1Es+0xe0>)
 800ef10:	f011 f940 	bl	8020194 <__assert_func>
 800ef14:	4659      	mov	r1, fp
 800ef16:	4620      	mov	r0, r4
 800ef18:	f7fd ff4a 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef1c:	4651      	mov	r1, sl
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7fd ff46 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef24:	4649      	mov	r1, r9
 800ef26:	4620      	mov	r0, r4
 800ef28:	f7fd ff42 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef2c:	4641      	mov	r1, r8
 800ef2e:	4620      	mov	r0, r4
 800ef30:	f7fd ff3e 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef34:	4639      	mov	r1, r7
 800ef36:	4620      	mov	r0, r4
 800ef38:	f7fd ff3a 	bl	800cdb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	9500      	str	r5, [sp, #0]
 800ef40:	462b      	mov	r3, r5
 800ef42:	462a      	mov	r2, r5
 800ef44:	4629      	mov	r1, r5
 800ef46:	f7ff ff4e 	bl	800ede6 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
 800ef50:	b005      	add	sp, #20
 800ef52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef56:	bf00      	nop
 800ef58:	08024b94 	.word	0x08024b94
 800ef5c:	08024a42 	.word	0x08024a42
 800ef60:	08024e08 	.word	0x08024e08
 800ef64:	080249f9 	.word	0x080249f9

0800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 800ef68:	4291      	cmp	r1, r2
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	d003      	beq.n	800ef76 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 800ef6e:	460a      	mov	r2, r1
 800ef70:	4619      	mov	r1, r3
 800ef72:	f004 bb3e 	b.w	80135f2 <_ZN8touchgfx6muldivElll>
 800ef76:	4770      	bx	lr

0800ef78 <_ZN8touchgfx15StaticDataGraph9setScaleXEib>:
 800ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	460f      	mov	r7, r1
 800ef80:	b1b2      	cbz	r2, 800efb0 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800ef82:	6803      	ldr	r3, [r0, #0]
 800ef84:	2600      	movs	r6, #0
 800ef86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef8a:	4798      	blx	r3
 800ef8c:	4681      	mov	r9, r0
 800ef8e:	b235      	sxth	r5, r6
 800ef90:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800ef94:	3601      	adds	r6, #1
 800ef96:	42ab      	cmp	r3, r5
 800ef98:	dd0a      	ble.n	800efb0 <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x38>
 800ef9a:	f8d4 813c 	ldr.w	r8, [r4, #316]	; 0x13c
 800ef9e:	463a      	mov	r2, r7
 800efa0:	4649      	mov	r1, r9
 800efa2:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800efa6:	f7ff ffdf 	bl	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800efaa:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800efae:	e7ee      	b.n	800ef8e <_ZN8touchgfx15StaticDataGraph9setScaleXEib+0x16>
 800efb0:	2200      	movs	r2, #0
 800efb2:	4639      	mov	r1, r7
 800efb4:	4620      	mov	r0, r4
 800efb6:	f7ff fc0b 	bl	800e7d0 <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>
 800efba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800efbe <_ZN8touchgfx15StaticDataGraph9setScaleYEib>:
 800efbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc2:	4604      	mov	r4, r0
 800efc4:	460f      	mov	r7, r1
 800efc6:	b1b2      	cbz	r2, 800eff6 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800efc8:	6803      	ldr	r3, [r0, #0]
 800efca:	2600      	movs	r6, #0
 800efcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800efd0:	4798      	blx	r3
 800efd2:	4681      	mov	r9, r0
 800efd4:	b235      	sxth	r5, r6
 800efd6:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800efda:	3601      	adds	r6, #1
 800efdc:	42ab      	cmp	r3, r5
 800efde:	dd0a      	ble.n	800eff6 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x38>
 800efe0:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800efe4:	463a      	mov	r2, r7
 800efe6:	4649      	mov	r1, r9
 800efe8:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 800efec:	f7ff ffbc 	bl	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 800eff0:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 800eff4:	e7ee      	b.n	800efd4 <_ZN8touchgfx15StaticDataGraph9setScaleYEib+0x16>
 800eff6:	2200      	movs	r2, #0
 800eff8:	4639      	mov	r1, r7
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff fbf8 	bl	800e7f0 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>
 800f000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f004 <_ZN8touchgfx9GraphData8addValueEii>:
 800f004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f008:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	; 0x11e
 800f00c:	4605      	mov	r5, r0
 800f00e:	4617      	mov	r7, r2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d03e      	beq.n	800f092 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800f014:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
 800f018:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800f01c:	3801      	subs	r0, #1
 800f01e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800f022:	4288      	cmp	r0, r1
 800f024:	db35      	blt.n	800f092 <_ZN8touchgfx9GraphData8addValueEii+0x8e>
 800f026:	2000      	movs	r0, #0
 800f028:	b204      	sxth	r4, r0
 800f02a:	42a3      	cmp	r3, r4
 800f02c:	dd16      	ble.n	800f05c <_ZN8touchgfx9GraphData8addValueEii+0x58>
 800f02e:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800f032:	3001      	adds	r0, #1
 800f034:	f852 6008 	ldr.w	r6, [r2, r8]
 800f038:	428e      	cmp	r6, r1
 800f03a:	dbf5      	blt.n	800f028 <_ZN8touchgfx9GraphData8addValueEii+0x24>
 800f03c:	d10f      	bne.n	800f05e <_ZN8touchgfx9GraphData8addValueEii+0x5a>
 800f03e:	4621      	mov	r1, r4
 800f040:	4628      	mov	r0, r5
 800f042:	f7ff fe10 	bl	800ec66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800f046:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800f04a:	f843 7008 	str.w	r7, [r3, r8]
 800f04e:	4621      	mov	r1, r4
 800f050:	4628      	mov	r0, r5
 800f052:	f7ff fe08 	bl	800ec66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 800f056:	4620      	mov	r0, r4
 800f058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f05c:	d01a      	beq.n	800f094 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800f05e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800f062:	428a      	cmp	r2, r1
 800f064:	dc16      	bgt.n	800f094 <_ZN8touchgfx9GraphData8addValueEii+0x90>
 800f066:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800f06a:	3801      	subs	r0, #1
 800f06c:	0080      	lsls	r0, r0, #2
 800f06e:	42a3      	cmp	r3, r4
 800f070:	f8d5 613c 	ldr.w	r6, [r5, #316]	; 0x13c
 800f074:	dd15      	ble.n	800f0a2 <_ZN8touchgfx9GraphData8addValueEii+0x9e>
 800f076:	5832      	ldr	r2, [r6, r0]
 800f078:	f100 0c04 	add.w	ip, r0, #4
 800f07c:	3b01      	subs	r3, #1
 800f07e:	f846 200c 	str.w	r2, [r6, ip]
 800f082:	f8d5 6140 	ldr.w	r6, [r5, #320]	; 0x140
 800f086:	b21b      	sxth	r3, r3
 800f088:	5832      	ldr	r2, [r6, r0]
 800f08a:	3804      	subs	r0, #4
 800f08c:	f846 200c 	str.w	r2, [r6, ip]
 800f090:	e7ed      	b.n	800f06e <_ZN8touchgfx9GraphData8addValueEii+0x6a>
 800f092:	461c      	mov	r4, r3
 800f094:	f9b5 211c 	ldrsh.w	r2, [r5, #284]	; 0x11c
 800f098:	429a      	cmp	r2, r3
 800f09a:	d1e4      	bne.n	800f066 <_ZN8touchgfx9GraphData8addValueEii+0x62>
 800f09c:	f04f 34ff 	mov.w	r4, #4294967295
 800f0a0:	e7d9      	b.n	800f056 <_ZN8touchgfx9GraphData8addValueEii+0x52>
 800f0a2:	f8b5 311e 	ldrh.w	r3, [r5, #286]	; 0x11e
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	f8a5 311e 	strh.w	r3, [r5, #286]	; 0x11e
 800f0ac:	f846 1024 	str.w	r1, [r6, r4, lsl #2]
 800f0b0:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
 800f0b4:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800f0b8:	e7c9      	b.n	800f04e <_ZN8touchgfx9GraphData8addValueEii+0x4a>

0800f0ba <_ZN8touchgfx16GraphElementLineD1Ev>:
 800f0ba:	4770      	bx	lr

0800f0bc <_ZN8touchgfx16GraphElementLineD0Ev>:
 800f0bc:	b510      	push	{r4, lr}
 800f0be:	4604      	mov	r4, r0
 800f0c0:	2130      	movs	r1, #48	; 0x30
 800f0c2:	f010 fa40 	bl	801f546 <_ZdlPvj>
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	bd10      	pop	{r4, pc}

0800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800f0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	4608      	mov	r0, r1
 800f0d0:	460d      	mov	r5, r1
 800f0d2:	f7fd fff2 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0d6:	b978      	cbnz	r0, 800f0f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f7fd ffee 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0de:	f9b5 6000 	ldrsh.w	r6, [r5]
 800f0e2:	b150      	cbz	r0, 800f0fa <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800f0e4:	8026      	strh	r6, [r4, #0]
 800f0e6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800f0ea:	8063      	strh	r3, [r4, #2]
 800f0ec:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800f0f0:	80a3      	strh	r3, [r4, #4]
 800f0f2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800f0f6:	80e3      	strh	r3, [r4, #6]
 800f0f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 800f0fe:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800f102:	42b1      	cmp	r1, r6
 800f104:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800f108:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800f10c:	460f      	mov	r7, r1
 800f10e:	88ed      	ldrh	r5, [r5, #6]
 800f110:	bfa8      	it	ge
 800f112:	4637      	movge	r7, r6
 800f114:	4293      	cmp	r3, r2
 800f116:	4618      	mov	r0, r3
 800f118:	4466      	add	r6, ip
 800f11a:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800f11e:	bfa8      	it	ge
 800f120:	4610      	movge	r0, r2
 800f122:	442a      	add	r2, r5
 800f124:	88e5      	ldrh	r5, [r4, #6]
 800f126:	4461      	add	r1, ip
 800f128:	b236      	sxth	r6, r6
 800f12a:	8027      	strh	r7, [r4, #0]
 800f12c:	442b      	add	r3, r5
 800f12e:	b209      	sxth	r1, r1
 800f130:	b212      	sxth	r2, r2
 800f132:	8060      	strh	r0, [r4, #2]
 800f134:	b21b      	sxth	r3, r3
 800f136:	428e      	cmp	r6, r1
 800f138:	bfac      	ite	ge
 800f13a:	ebc7 0106 	rsbge	r1, r7, r6
 800f13e:	ebc7 0101 	rsblt	r1, r7, r1
 800f142:	429a      	cmp	r2, r3
 800f144:	bfac      	ite	ge
 800f146:	ebc0 0202 	rsbge	r2, r0, r2
 800f14a:	ebc0 0203 	rsblt	r2, r0, r3
 800f14e:	80a1      	strh	r1, [r4, #4]
 800f150:	80e2      	strh	r2, [r4, #6]
 800f152:	e7d1      	b.n	800f0f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0800f154 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 800f154:	6800      	ldr	r0, [r0, #0]
 800f156:	2800      	cmp	r0, #0
 800f158:	bfb9      	ittee	lt
 800f15a:	2320      	movlt	r3, #32
 800f15c:	fb90 f0f3 	sdivlt	r0, r0, r3
 800f160:	301f      	addge	r0, #31
 800f162:	1140      	asrge	r0, r0, #5
 800f164:	4770      	bx	lr

0800f166 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 800f166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16a:	6803      	ldr	r3, [r0, #0]
 800f16c:	b093      	sub	sp, #76	; 0x4c
 800f16e:	6945      	ldr	r5, [r0, #20]
 800f170:	4604      	mov	r4, r0
 800f172:	460f      	mov	r7, r1
 800f174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f176:	2d00      	cmp	r5, #0
 800f178:	f000 81ad 	beq.w	800f4d6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 800f17c:	696d      	ldr	r5, [r5, #20]
 800f17e:	4798      	blx	r3
 800f180:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f184:	2b00      	cmp	r3, #0
 800f186:	d077      	beq.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f188:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f18c:	fb13 f000 	smulbb	r0, r3, r0
 800f190:	b283      	uxth	r3, r0
 800f192:	1c58      	adds	r0, r3, #1
 800f194:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 800f198:	1200      	asrs	r0, r0, #8
 800f19a:	d06d      	beq.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f19c:	b2c3      	uxtb	r3, r0
 800f19e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800f1a2:	462a      	mov	r2, r5
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	9308      	str	r3, [sp, #32]
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	ae0e      	add	r6, sp, #56	; 0x38
 800f1ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1b2:	4798      	blx	r3
 800f1b4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f1b8:	e886 0003 	stmia.w	r6, {r0, r1}
 800f1bc:	4639      	mov	r1, r7
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f7fd ff38 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	4629      	mov	r1, r5
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ce:	4798      	blx	r3
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	4607      	mov	r7, r0
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1da:	4620      	mov	r0, r4
 800f1dc:	4798      	blx	r3
 800f1de:	4681      	mov	r9, r0
 800f1e0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	0103      	lsls	r3, r0, #4
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f1f2:	4798      	blx	r3
 800f1f4:	4629      	mov	r1, r5
 800f1f6:	b203      	sxth	r3, r0
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	9306      	str	r3, [sp, #24]
 800f1fc:	6823      	ldr	r3, [r4, #0]
 800f1fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f202:	4798      	blx	r3
 800f204:	2f00      	cmp	r7, #0
 800f206:	b203      	sxth	r3, r0
 800f208:	9307      	str	r3, [sp, #28]
 800f20a:	d138      	bne.n	800f27e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 800f20c:	f1b9 0f00 	cmp.w	r9, #0
 800f210:	d132      	bne.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	464a      	mov	r2, r9
 800f216:	4629      	mov	r1, r5
 800f218:	4620      	mov	r0, r4
 800f21a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f21e:	4798      	blx	r3
 800f220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f222:	1ac0      	subs	r0, r0, r3
 800f224:	9010      	str	r0, [sp, #64]	; 0x40
 800f226:	4640      	mov	r0, r8
 800f228:	f7f4 fee3 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	4607      	mov	r7, r0
 800f230:	4629      	mov	r1, r5
 800f232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f236:	4620      	mov	r0, r4
 800f238:	4798      	blx	r3
 800f23a:	1a38      	subs	r0, r7, r0
 800f23c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f240:	fa0f f880 	sxth.w	r8, r0
 800f244:	eb13 0f08 	cmn.w	r3, r8
 800f248:	d416      	bmi.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f24a:	6823      	ldr	r3, [r4, #0]
 800f24c:	4629      	mov	r1, r5
 800f24e:	4620      	mov	r0, r4
 800f250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f254:	4798      	blx	r3
 800f256:	4580      	cmp	r8, r0
 800f258:	da0e      	bge.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f25a:	9a08      	ldr	r2, [sp, #32]
 800f25c:	b23f      	sxth	r7, r7
 800f25e:	6823      	ldr	r3, [r4, #0]
 800f260:	4631      	mov	r1, r6
 800f262:	9202      	str	r2, [sp, #8]
 800f264:	4620      	mov	r0, r4
 800f266:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f26a:	9700      	str	r7, [sp, #0]
 800f26c:	9201      	str	r2, [sp, #4]
 800f26e:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800f272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f276:	47a8      	blx	r5
 800f278:	b013      	add	sp, #76	; 0x4c
 800f27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27e:	ddfb      	ble.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f280:	6823      	ldr	r3, [r4, #0]
 800f282:	4629      	mov	r1, r5
 800f284:	4620      	mov	r0, r4
 800f286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f28a:	4798      	blx	r3
 800f28c:	6823      	ldr	r3, [r4, #0]
 800f28e:	4683      	mov	fp, r0
 800f290:	4629      	mov	r1, r5
 800f292:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f296:	4620      	mov	r0, r4
 800f298:	4798      	blx	r3
 800f29a:	eba0 030b 	sub.w	r3, r0, fp
 800f29e:	4680      	mov	r8, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfb8      	it	lt
 800f2a4:	425b      	neglt	r3, r3
 800f2a6:	fb93 f3f7 	sdiv	r3, r3, r7
 800f2aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f2ae:	dce3      	bgt.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	465a      	mov	r2, fp
 800f2b4:	4629      	mov	r1, r5
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f2bc:	4798      	blx	r3
 800f2be:	6823      	ldr	r3, [r4, #0]
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	4642      	mov	r2, r8
 800f2c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	4798      	blx	r3
 800f2ce:	42b0      	cmp	r0, r6
 800f2d0:	bfa2      	ittt	ge
 800f2d2:	4643      	movge	r3, r8
 800f2d4:	46d8      	movge	r8, fp
 800f2d6:	469b      	movge	fp, r3
 800f2d8:	fb98 f6f7 	sdiv	r6, r8, r7
 800f2dc:	fb9b f2f7 	sdiv	r2, fp, r7
 800f2e0:	45d8      	cmp	r8, fp
 800f2e2:	bfac      	ite	ge
 800f2e4:	f04f 33ff 	movge.w	r3, #4294967295
 800f2e8:	2301      	movlt	r3, #1
 800f2ea:	1af6      	subs	r6, r6, r3
 800f2ec:	441a      	add	r2, r3
 800f2ee:	4296      	cmp	r6, r2
 800f2f0:	bfac      	ite	ge
 800f2f2:	f04f 3aff 	movge.w	sl, #4294967295
 800f2f6:	f04f 0a01 	movlt.w	sl, #1
 800f2fa:	f1b9 0f00 	cmp.w	r9, #0
 800f2fe:	d13e      	bne.n	800f37e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 800f300:	fb07 fb0a 	mul.w	fp, r7, sl
 800f304:	eb0a 0802 	add.w	r8, sl, r2
 800f308:	4377      	muls	r7, r6
 800f30a:	45b0      	cmp	r8, r6
 800f30c:	d0b4      	beq.n	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	463a      	mov	r2, r7
 800f312:	4629      	mov	r1, r5
 800f314:	4620      	mov	r0, r4
 800f316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f31a:	4798      	blx	r3
 800f31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f31e:	1ac0      	subs	r0, r0, r3
 800f320:	9010      	str	r0, [sp, #64]	; 0x40
 800f322:	a810      	add	r0, sp, #64	; 0x40
 800f324:	f7f4 fe65 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f328:	6823      	ldr	r3, [r4, #0]
 800f32a:	4681      	mov	r9, r0
 800f32c:	4629      	mov	r1, r5
 800f32e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f332:	4620      	mov	r0, r4
 800f334:	4798      	blx	r3
 800f336:	eba9 0000 	sub.w	r0, r9, r0
 800f33a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f33e:	b203      	sxth	r3, r0
 800f340:	42da      	cmn	r2, r3
 800f342:	9304      	str	r3, [sp, #16]
 800f344:	d418      	bmi.n	800f378 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800f346:	6822      	ldr	r2, [r4, #0]
 800f348:	4629      	mov	r1, r5
 800f34a:	4620      	mov	r0, r4
 800f34c:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800f350:	4790      	blx	r2
 800f352:	9b04      	ldr	r3, [sp, #16]
 800f354:	4283      	cmp	r3, r0
 800f356:	da0f      	bge.n	800f378 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 800f358:	9b08      	ldr	r3, [sp, #32]
 800f35a:	a90e      	add	r1, sp, #56	; 0x38
 800f35c:	6822      	ldr	r2, [r4, #0]
 800f35e:	4620      	mov	r0, r4
 800f360:	9302      	str	r3, [sp, #8]
 800f362:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f366:	9301      	str	r3, [sp, #4]
 800f368:	fa0f f389 	sxth.w	r3, r9
 800f36c:	9300      	str	r3, [sp, #0]
 800f36e:	f8d2 908c 	ldr.w	r9, [r2, #140]	; 0x8c
 800f372:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f376:	47c8      	blx	r9
 800f378:	4456      	add	r6, sl
 800f37a:	445f      	add	r7, fp
 800f37c:	e7c5      	b.n	800f30a <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 800f37e:	fb98 f8f9 	sdiv	r8, r8, r9
 800f382:	eba8 0203 	sub.w	r2, r8, r3
 800f386:	4629      	mov	r1, r5
 800f388:	4620      	mov	r0, r4
 800f38a:	9204      	str	r2, [sp, #16]
 800f38c:	fb9b f8f9 	sdiv	r8, fp, r9
 800f390:	4498      	add	r8, r3
 800f392:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
 800f396:	4542      	cmp	r2, r8
 800f398:	bfac      	ite	ge
 800f39a:	f04f 33ff 	movge.w	r3, #4294967295
 800f39e:	2301      	movlt	r3, #1
 800f3a0:	fb02 f209 	mul.w	r2, r2, r9
 800f3a4:	930a      	str	r3, [sp, #40]	; 0x28
 800f3a6:	6823      	ldr	r3, [r4, #0]
 800f3a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f3ac:	4798      	blx	r3
 800f3ae:	f84b 0d08 	str.w	r0, [fp, #-8]!
 800f3b2:	4658      	mov	r0, fp
 800f3b4:	f7f4 fe1d 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f3b8:	fb06 f207 	mul.w	r2, r6, r7
 800f3bc:	b203      	sxth	r3, r0
 800f3be:	4629      	mov	r1, r5
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	9305      	str	r3, [sp, #20]
 800f3c4:	6823      	ldr	r3, [r4, #0]
 800f3c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f3ca:	4798      	blx	r3
 800f3cc:	9010      	str	r0, [sp, #64]	; 0x40
 800f3ce:	4658      	mov	r0, fp
 800f3d0:	f7f4 fe0f 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f3d4:	fb07 f20a 	mul.w	r2, r7, sl
 800f3d8:	b203      	sxth	r3, r0
 800f3da:	920b      	str	r2, [sp, #44]	; 0x2c
 800f3dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f3de:	4442      	add	r2, r8
 800f3e0:	920c      	str	r2, [sp, #48]	; 0x30
 800f3e2:	9a05      	ldr	r2, [sp, #20]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	dc16      	bgt.n	800f416 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 800f3e8:	eb06 080a 	add.w	r8, r6, sl
 800f3ec:	fb07 f808 	mul.w	r8, r7, r8
 800f3f0:	9a05      	ldr	r2, [sp, #20]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	db54      	blt.n	800f4a0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	4642      	mov	r2, r8
 800f3fa:	4629      	mov	r1, r5
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f402:	4456      	add	r6, sl
 800f404:	4798      	blx	r3
 800f406:	9010      	str	r0, [sp, #64]	; 0x40
 800f408:	4658      	mov	r0, fp
 800f40a:	f7f4 fdf2 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f40e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f410:	b203      	sxth	r3, r0
 800f412:	4490      	add	r8, r2
 800f414:	e7ec      	b.n	800f3f0 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 800f416:	6823      	ldr	r3, [r4, #0]
 800f418:	fb07 f206 	mul.w	r2, r7, r6
 800f41c:	4629      	mov	r1, r5
 800f41e:	4620      	mov	r0, r4
 800f420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f424:	4798      	blx	r3
 800f426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f428:	1ac0      	subs	r0, r0, r3
 800f42a:	9010      	str	r0, [sp, #64]	; 0x40
 800f42c:	4658      	mov	r0, fp
 800f42e:	f7f4 fde0 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f432:	6823      	ldr	r3, [r4, #0]
 800f434:	4680      	mov	r8, r0
 800f436:	4629      	mov	r1, r5
 800f438:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f43c:	4620      	mov	r0, r4
 800f43e:	4798      	blx	r3
 800f440:	eba8 0000 	sub.w	r0, r8, r0
 800f444:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800f448:	b203      	sxth	r3, r0
 800f44a:	42da      	cmn	r2, r3
 800f44c:	930d      	str	r3, [sp, #52]	; 0x34
 800f44e:	d418      	bmi.n	800f482 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800f450:	6822      	ldr	r2, [r4, #0]
 800f452:	4629      	mov	r1, r5
 800f454:	4620      	mov	r0, r4
 800f456:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 800f45a:	4790      	blx	r2
 800f45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f45e:	4283      	cmp	r3, r0
 800f460:	da0f      	bge.n	800f482 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 800f462:	9b08      	ldr	r3, [sp, #32]
 800f464:	a90e      	add	r1, sp, #56	; 0x38
 800f466:	6822      	ldr	r2, [r4, #0]
 800f468:	4620      	mov	r0, r4
 800f46a:	9302      	str	r3, [sp, #8]
 800f46c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f470:	9301      	str	r3, [sp, #4]
 800f472:	fa0f f388 	sxth.w	r3, r8
 800f476:	9300      	str	r3, [sp, #0]
 800f478:	f8d2 808c 	ldr.w	r8, [r2, #140]	; 0x8c
 800f47c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f480:	47c0      	blx	r8
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	4456      	add	r6, sl
 800f486:	4629      	mov	r1, r5
 800f488:	4620      	mov	r0, r4
 800f48a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f48e:	fb06 f207 	mul.w	r2, r6, r7
 800f492:	4798      	blx	r3
 800f494:	9010      	str	r0, [sp, #64]	; 0x40
 800f496:	4658      	mov	r0, fp
 800f498:	f7f4 fdab 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f49c:	b203      	sxth	r3, r0
 800f49e:	e7a0      	b.n	800f3e2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800f4a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f4a2:	930d      	str	r3, [sp, #52]	; 0x34
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	4413      	add	r3, r2
 800f4a8:	9304      	str	r3, [sp, #16]
 800f4aa:	9a04      	ldr	r2, [sp, #16]
 800f4ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	f43f aee2 	beq.w	800f278 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 800f4b4:	9b04      	ldr	r3, [sp, #16]
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	6822      	ldr	r2, [r4, #0]
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f8d2 80b0 	ldr.w	r8, [r2, #176]	; 0xb0
 800f4c0:	fb03 f209 	mul.w	r2, r3, r9
 800f4c4:	47c0      	blx	r8
 800f4c6:	9010      	str	r0, [sp, #64]	; 0x40
 800f4c8:	4658      	mov	r0, fp
 800f4ca:	f7f4 fd92 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f4ce:	b203      	sxth	r3, r0
 800f4d0:	9305      	str	r3, [sp, #20]
 800f4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4d4:	e785      	b.n	800f3e2 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 800f4d6:	4798      	blx	r3
 800f4d8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f4dc:	deff      	udf	#255	; 0xff

0800f4de <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 800f4de:	b510      	push	{r4, lr}
 800f4e0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800f4e4:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800f4e8:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800f4ec:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 800f4f0:	139b      	asrs	r3, r3, #14
 800f4f2:	13a4      	asrs	r4, r4, #14
 800f4f4:	429c      	cmp	r4, r3
 800f4f6:	bfb8      	it	lt
 800f4f8:	461c      	movlt	r4, r3
 800f4fa:	2c01      	cmp	r4, #1
 800f4fc:	dd07      	ble.n	800f50e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 800f4fe:	fb91 f1f4 	sdiv	r1, r1, r4
 800f502:	fb90 f0f4 	sdiv	r0, r0, r4
 800f506:	f7ff ffea 	bl	800f4de <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800f50a:	4360      	muls	r0, r4
 800f50c:	bd10      	pop	{r4, pc}
 800f50e:	4340      	muls	r0, r0
 800f510:	fb01 0101 	mla	r1, r1, r1, r0
 800f514:	2000      	movs	r0, #0
 800f516:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800f51a:	bfb4      	ite	lt
 800f51c:	f44f 4380 	movlt.w	r3, #16384	; 0x4000
 800f520:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
 800f524:	18c2      	adds	r2, r0, r3
 800f526:	428a      	cmp	r2, r1
 800f528:	bf9c      	itt	ls
 800f52a:	1898      	addls	r0, r3, r2
 800f52c:	1a89      	subls	r1, r1, r2
 800f52e:	089b      	lsrs	r3, r3, #2
 800f530:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800f534:	d1f6      	bne.n	800f524 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 800f536:	e7e9      	b.n	800f50c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0800f538 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 800f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53a:	9906      	ldr	r1, [sp, #24]
 800f53c:	4606      	mov	r6, r0
 800f53e:	461c      	mov	r4, r3
 800f540:	2020      	movs	r0, #32
 800f542:	4291      	cmp	r1, r2
 800f544:	bfbc      	itt	lt
 800f546:	9206      	strlt	r2, [sp, #24]
 800f548:	460a      	movlt	r2, r1
 800f54a:	9907      	ldr	r1, [sp, #28]
 800f54c:	428b      	cmp	r3, r1
 800f54e:	bfc4      	itt	gt
 800f550:	460c      	movgt	r4, r1
 800f552:	9307      	strgt	r3, [sp, #28]
 800f554:	fb92 f5f0 	sdiv	r5, r2, r0
 800f558:	fb94 f4f0 	sdiv	r4, r4, r0
 800f55c:	a806      	add	r0, sp, #24
 800f55e:	f7ff fdf9 	bl	800f154 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f562:	4607      	mov	r7, r0
 800f564:	a807      	add	r0, sp, #28
 800f566:	f7ff fdf5 	bl	800f154 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f56a:	1b7a      	subs	r2, r7, r5
 800f56c:	1b00      	subs	r0, r0, r4
 800f56e:	8035      	strh	r5, [r6, #0]
 800f570:	8074      	strh	r4, [r6, #2]
 800f572:	80f0      	strh	r0, [r6, #6]
 800f574:	4630      	mov	r0, r6
 800f576:	80b2      	strh	r2, [r6, #4]
 800f578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f57a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 800f57a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f57c:	9c08      	ldr	r4, [sp, #32]
 800f57e:	2602      	movs	r6, #2
 800f580:	4605      	mov	r5, r0
 800f582:	3401      	adds	r4, #1
 800f584:	fb94 f4f6 	sdiv	r4, r4, r6
 800f588:	18a6      	adds	r6, r4, r2
 800f58a:	191f      	adds	r7, r3, r4
 800f58c:	1b12      	subs	r2, r2, r4
 800f58e:	1b1b      	subs	r3, r3, r4
 800f590:	e9cd 6700 	strd	r6, r7, [sp]
 800f594:	f7ff ffd0 	bl	800f538 <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 800f598:	4628      	mov	r0, r5
 800f59a:	b003      	add	sp, #12
 800f59c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f59e <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 800f59e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a2:	6943      	ldr	r3, [r0, #20]
 800f5a4:	b089      	sub	sp, #36	; 0x24
 800f5a6:	4680      	mov	r8, r0
 800f5a8:	460d      	mov	r5, r1
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f000 8082 	beq.w	800f6b4 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x116>
 800f5b0:	695c      	ldr	r4, [r3, #20]
 800f5b2:	af02      	add	r7, sp, #8
 800f5b4:	f890 902e 	ldrb.w	r9, [r0, #46]	; 0x2e
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	ea4f 1949 	mov.w	r9, r9, lsl #5
 800f5c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f5c4:	4798      	blx	r3
 800f5c6:	6823      	ldr	r3, [r4, #0]
 800f5c8:	4606      	mov	r6, r0
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	4798      	blx	r3
 800f5d4:	4632      	mov	r2, r6
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f8cd 9000 	str.w	r9, [sp]
 800f5dc:	4641      	mov	r1, r8
 800f5de:	4638      	mov	r0, r7
 800f5e0:	f7ff ffcb 	bl	800f57a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f5e4:	2d00      	cmp	r5, #0
 800f5e6:	ae06      	add	r6, sp, #24
 800f5e8:	dd1c      	ble.n	800f624 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x86>
 800f5ea:	f105 3aff 	add.w	sl, r5, #4294967295
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	fa0f fa8a 	sxth.w	sl, sl
 800f5f6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f5fa:	4651      	mov	r1, sl
 800f5fc:	4798      	blx	r3
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	4683      	mov	fp, r0
 800f602:	4651      	mov	r1, sl
 800f604:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f608:	4620      	mov	r0, r4
 800f60a:	4798      	blx	r3
 800f60c:	4641      	mov	r1, r8
 800f60e:	4603      	mov	r3, r0
 800f610:	f8cd 9000 	str.w	r9, [sp]
 800f614:	4630      	mov	r0, r6
 800f616:	465a      	mov	r2, fp
 800f618:	f7ff ffaf 	bl	800f57a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f61c:	4631      	mov	r1, r6
 800f61e:	4638      	mov	r0, r7
 800f620:	f7ff fd53 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f624:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f628:	3b01      	subs	r3, #1
 800f62a:	429d      	cmp	r5, r3
 800f62c:	da1a      	bge.n	800f664 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xc6>
 800f62e:	3501      	adds	r5, #1
 800f630:	6823      	ldr	r3, [r4, #0]
 800f632:	4620      	mov	r0, r4
 800f634:	b22d      	sxth	r5, r5
 800f636:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f63a:	4629      	mov	r1, r5
 800f63c:	4798      	blx	r3
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	4682      	mov	sl, r0
 800f642:	4629      	mov	r1, r5
 800f644:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f648:	4620      	mov	r0, r4
 800f64a:	4798      	blx	r3
 800f64c:	4641      	mov	r1, r8
 800f64e:	4603      	mov	r3, r0
 800f650:	f8cd 9000 	str.w	r9, [sp]
 800f654:	4630      	mov	r0, r6
 800f656:	4652      	mov	r2, sl
 800f658:	f7ff ff8f 	bl	800f57a <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 800f65c:	4631      	mov	r1, r6
 800f65e:	4638      	mov	r0, r7
 800f660:	f7ff fd33 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800f664:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800f668:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800f66c:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800f670:	18ca      	adds	r2, r1, r3
 800f672:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f676:	f8ad 1012 	strh.w	r1, [sp, #18]
 800f67a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800f67e:	1a9b      	subs	r3, r3, r2
 800f680:	2200      	movs	r2, #0
 800f682:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f686:	f8ad 2010 	strh.w	r2, [sp, #16]
 800f68a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f68e:	e886 0003 	stmia.w	r6, {r0, r1}
 800f692:	a904      	add	r1, sp, #16
 800f694:	4630      	mov	r0, r6
 800f696:	f7fd fccd 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800f69a:	f8d8 3000 	ldr.w	r3, [r8]
 800f69e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f6a2:	691b      	ldr	r3, [r3, #16]
 800f6a4:	e887 0003 	stmia.w	r7, {r0, r1}
 800f6a8:	4639      	mov	r1, r7
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	4798      	blx	r3
 800f6ae:	b009      	add	sp, #36	; 0x24
 800f6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	deff      	udf	#255	; 0xff

0800f6b8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 800f6b8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da05      	bge.n	800f6cc <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	880a      	ldrh	r2, [r1, #0]
 800f6c4:	441a      	add	r2, r3
 800f6c6:	425b      	negs	r3, r3
 800f6c8:	800a      	strh	r2, [r1, #0]
 800f6ca:	808b      	strh	r3, [r1, #4]
 800f6cc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da05      	bge.n	800f6e0 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	884a      	ldrh	r2, [r1, #2]
 800f6d8:	441a      	add	r2, r3
 800f6da:	425b      	negs	r3, r3
 800f6dc:	804a      	strh	r2, [r1, #2]
 800f6de:	80cb      	strh	r3, [r1, #6]
 800f6e0:	4770      	bx	lr

0800f6e2 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 800f6e2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	460d      	mov	r5, r1
 800f6e8:	6801      	ldr	r1, [r0, #0]
 800f6ea:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
 800f6ee:	9001      	str	r0, [sp, #4]
 800f6f0:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 800f6f4:	9000      	str	r0, [sp, #0]
 800f6f6:	a802      	add	r0, sp, #8
 800f6f8:	f8d1 6094 	ldr.w	r6, [r1, #148]	; 0x94
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	47b0      	blx	r6
 800f700:	a902      	add	r1, sp, #8
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff ffd8 	bl	800f6b8 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 800f708:	a802      	add	r0, sp, #8
 800f70a:	4629      	mov	r1, r5
 800f70c:	f7fd fc92 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800f710:	a802      	add	r0, sp, #8
 800f712:	f7fd fcd2 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 800f716:	b968      	cbnz	r0, 800f734 <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 800f718:	6823      	ldr	r3, [r4, #0]
 800f71a:	a902      	add	r1, sp, #8
 800f71c:	4620      	mov	r0, r4
 800f71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f720:	4798      	blx	r3
 800f722:	f7fd ff55 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800f726:	6803      	ldr	r3, [r0, #0]
 800f728:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f72a:	a902      	add	r1, sp, #8
 800f72c:	6a1d      	ldr	r5, [r3, #32]
 800f72e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f732:	47a8      	blx	r5
 800f734:	b004      	add	sp, #16
 800f736:	bd70      	pop	{r4, r5, r6, pc}

0800f738 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	b08b      	sub	sp, #44	; 0x2c
 800f73e:	461e      	mov	r6, r3
 800f740:	4689      	mov	r9, r1
 800f742:	4615      	mov	r5, r2
 800f744:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
 800f748:	429e      	cmp	r6, r3
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	d072      	beq.n	800f834 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 800f74e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800f752:	4631      	mov	r1, r6
 800f754:	4610      	mov	r0, r2
 800f756:	4634      	mov	r4, r6
 800f758:	015b      	lsls	r3, r3, #5
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	6813      	ldr	r3, [r2, #0]
 800f75e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f762:	4798      	blx	r3
 800f764:	ab0a      	add	r3, sp, #40	; 0x28
 800f766:	f843 0d10 	str.w	r0, [r3, #-16]!
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f4 fc41 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	4631      	mov	r1, r6
 800f774:	0147      	lsls	r7, r0, #5
 800f776:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f77a:	4628      	mov	r0, r5
 800f77c:	4798      	blx	r3
 800f77e:	ab0a      	add	r3, sp, #40	; 0x28
 800f780:	f843 0d0c 	str.w	r0, [r3, #-12]!
 800f784:	4618      	mov	r0, r3
 800f786:	f7f4 fc34 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f78a:	4639      	mov	r1, r7
 800f78c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f790:	4648      	mov	r0, r9
 800f792:	4642      	mov	r2, r8
 800f794:	f00e fcd5 	bl	801e142 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f798:	2301      	movs	r3, #1
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	4628      	mov	r0, r5
 800f79e:	9b00      	ldr	r3, [sp, #0]
 800f7a0:	441c      	add	r4, r3
 800f7a2:	682b      	ldr	r3, [r5, #0]
 800f7a4:	b224      	sxth	r4, r4
 800f7a6:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4798      	blx	r3
 800f7ae:	9008      	str	r0, [sp, #32]
 800f7b0:	a808      	add	r0, sp, #32
 800f7b2:	f7f4 fc1e 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f7b6:	4621      	mov	r1, r4
 800f7b8:	0143      	lsls	r3, r0, #5
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	682b      	ldr	r3, [r5, #0]
 800f7c0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f7c4:	4798      	blx	r3
 800f7c6:	9009      	str	r0, [sp, #36]	; 0x24
 800f7c8:	a809      	add	r0, sp, #36	; 0x24
 800f7ca:	f7f4 fc12 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800f7ce:	0143      	lsls	r3, r0, #5
 800f7d0:	9302      	str	r3, [sp, #8]
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	eba3 0b07 	sub.w	fp, r3, r7
 800f7d8:	9b02      	ldr	r3, [sp, #8]
 800f7da:	eba3 0a08 	sub.w	sl, r3, r8
 800f7de:	4658      	mov	r0, fp
 800f7e0:	4651      	mov	r1, sl
 800f7e2:	f7ff fe7c 	bl	800f4de <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 800f7e6:	b318      	cbz	r0, 800f830 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xf8>
 800f7e8:	4602      	mov	r2, r0
 800f7ea:	4651      	mov	r1, sl
 800f7ec:	9005      	str	r0, [sp, #20]
 800f7ee:	9803      	ldr	r0, [sp, #12]
 800f7f0:	f003 feff 	bl	80135f2 <_ZN8touchgfx6muldivElll>
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	4659      	mov	r1, fp
 800f7f8:	fb90 faf3 	sdiv	sl, r0, r3
 800f7fc:	9b05      	ldr	r3, [sp, #20]
 800f7fe:	9803      	ldr	r0, [sp, #12]
 800f800:	461a      	mov	r2, r3
 800f802:	f003 fef6 	bl	80135f2 <_ZN8touchgfx6muldivElll>
 800f806:	2302      	movs	r3, #2
 800f808:	eba7 010a 	sub.w	r1, r7, sl
 800f80c:	fb90 fbf3 	sdiv	fp, r0, r3
 800f810:	4648      	mov	r0, r9
 800f812:	eb0b 0208 	add.w	r2, fp, r8
 800f816:	f00e fc23 	bl	801e060 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	4648      	mov	r0, r9
 800f81e:	eb03 020b 	add.w	r2, r3, fp
 800f822:	9b01      	ldr	r3, [sp, #4]
 800f824:	eba3 010a 	sub.w	r1, r3, sl
 800f828:	f00e fc1a 	bl	801e060 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 800f82c:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
 800f830:	42a6      	cmp	r6, r4
 800f832:	db02      	blt.n	800f83a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x102>
 800f834:	b00b      	add	sp, #44	; 0x2c
 800f836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83a:	9b00      	ldr	r3, [sp, #0]
 800f83c:	9a04      	ldr	r2, [sp, #16]
 800f83e:	42a2      	cmp	r2, r4
 800f840:	bf08      	it	eq
 800f842:	f04f 33ff 	moveq.w	r3, #4294967295
 800f846:	e7a8      	b.n	800f79a <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x62>

0800f848 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 800f848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f84c:	6943      	ldr	r3, [r0, #20]
 800f84e:	b0b4      	sub	sp, #208	; 0xd0
 800f850:	4606      	mov	r6, r0
 800f852:	460f      	mov	r7, r1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d06a      	beq.n	800f92e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 800f858:	695c      	ldr	r4, [r3, #20]
 800f85a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	; 0x11e
 800f85e:	2b01      	cmp	r3, #1
 800f860:	dc04      	bgt.n	800f86c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 800f862:	2401      	movs	r4, #1
 800f864:	4620      	mov	r0, r4
 800f866:	b034      	add	sp, #208	; 0xd0
 800f868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f86c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 800f870:	ad34      	add	r5, sp, #208	; 0xd0
 800f872:	011b      	lsls	r3, r3, #4
 800f874:	f845 3dbc 	str.w	r3, [r5, #-188]!
 800f878:	4628      	mov	r0, r5
 800f87a:	f7ff fc6b 	bl	800f154 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 800f87e:	8839      	ldrh	r1, [r7, #0]
 800f880:	88ba      	ldrh	r2, [r7, #4]
 800f882:	b280      	uxth	r0, r0
 800f884:	6823      	ldr	r3, [r4, #0]
 800f886:	440a      	add	r2, r1
 800f888:	1a09      	subs	r1, r1, r0
 800f88a:	4402      	add	r2, r0
 800f88c:	f10d 000a 	add.w	r0, sp, #10
 800f890:	b209      	sxth	r1, r1
 800f892:	9000      	str	r0, [sp, #0]
 800f894:	b212      	sxth	r2, r2
 800f896:	f8d3 8124 	ldr.w	r8, [r3, #292]	; 0x124
 800f89a:	4620      	mov	r0, r4
 800f89c:	ab02      	add	r3, sp, #8
 800f89e:	47c0      	blx	r8
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	d0de      	beq.n	800f862 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 800f8a4:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	; 0x114
 800f8a8:	f8b4 311a 	ldrh.w	r3, [r4, #282]	; 0x11a
 800f8ac:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
 800f8b0:	18ca      	adds	r2, r1, r3
 800f8b2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800f8b6:	f8ad 100e 	strh.w	r1, [sp, #14]
 800f8ba:	4639      	mov	r1, r7
 800f8bc:	1a9b      	subs	r3, r3, r2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f8ad 0010 	strh.w	r0, [sp, #16]
 800f8c4:	a803      	add	r0, sp, #12
 800f8c6:	f8ad 3012 	strh.w	r3, [sp, #18]
 800f8ca:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f8ce:	f7fd fbb1 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800f8d2:	aa03      	add	r2, sp, #12
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	f00e fa68 	bl	801ddac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 800f8dc:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	; 0x120
 800f8e0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 800f8e4:	2f00      	cmp	r7, #0
 800f8e6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800f8ea:	dd03      	ble.n	800f8f4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800f8ec:	42bb      	cmp	r3, r7
 800f8ee:	da01      	bge.n	800f8f4 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xac>
 800f8f0:	42ba      	cmp	r2, r7
 800f8f2:	da0f      	bge.n	800f914 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xcc>
 800f8f4:	9200      	str	r2, [sp, #0]
 800f8f6:	4622      	mov	r2, r4
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f7ff ff1c 	bl	800f738 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800f900:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800f904:	4628      	mov	r0, r5
 800f906:	f00e fd20 	bl	801e34a <_ZN8touchgfx6Canvas6renderEh>
 800f90a:	4604      	mov	r4, r0
 800f90c:	4628      	mov	r0, r5
 800f90e:	f00e fd5b 	bl	801e3c8 <_ZN8touchgfx6CanvasD1Ev>
 800f912:	e7a7      	b.n	800f864 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 800f914:	1e7a      	subs	r2, r7, #1
 800f916:	4629      	mov	r1, r5
 800f918:	4630      	mov	r0, r6
 800f91a:	b212      	sxth	r2, r2
 800f91c:	9200      	str	r2, [sp, #0]
 800f91e:	4622      	mov	r2, r4
 800f920:	f7ff ff0a 	bl	800f738 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 800f924:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f928:	9300      	str	r3, [sp, #0]
 800f92a:	463b      	mov	r3, r7
 800f92c:	e7e3      	b.n	800f8f6 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xae>
 800f92e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 800f932:	deff      	udf	#255	; 0xff

0800f934 <_ZN8touchgfx15GraphLabelsBase22invalidateGraphPointAtEs>:
 800f934:	4770      	bx	lr

0800f936 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
 800f936:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800f938:	b118      	cbz	r0, 800f942 <_ZNK8touchgfx15GraphLabelsBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0xc>
 800f93a:	6803      	ldr	r3, [r0, #0]
 800f93c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f940:	4718      	bx	r3
 800f942:	4770      	bx	lr

0800f944 <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:
 800f944:	680b      	ldr	r3, [r1, #0]
 800f946:	4608      	mov	r0, r1
 800f948:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800f94c:	4718      	bx	r3

0800f94e <_ZNK8touchgfx12GraphLabelsY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:
 800f94e:	680b      	ldr	r3, [r1, #0]
 800f950:	4608      	mov	r0, r1
 800f952:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800f956:	4718      	bx	r3

0800f958 <_ZN8touchgfx12GraphLabelsYD1Ev>:
 800f958:	4770      	bx	lr

0800f95a <_ZNK8touchgfx12GraphLabelsY31getCorrectlyScaledLabelIntervalEPKNS_17AbstractDataGraphE>:
 800f95a:	b538      	push	{r3, r4, r5, lr}
 800f95c:	680a      	ldr	r2, [r1, #0]
 800f95e:	e9d0 540d 	ldrd	r5, r4, [r0, #52]	; 0x34
 800f962:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 800f966:	4608      	mov	r0, r1
 800f968:	4790      	blx	r2
 800f96a:	4629      	mov	r1, r5
 800f96c:	4602      	mov	r2, r0
 800f96e:	4620      	mov	r0, r4
 800f970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f974:	f7ff baf8 	b.w	800ef68 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>

0800f978 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE>:
 800f978:	4b3c      	ldr	r3, [pc, #240]	; (800fa6c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xf4>)
 800f97a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f97e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 800f982:	b087      	sub	sp, #28
 800f984:	881b      	ldrh	r3, [r3, #0]
 800f986:	4604      	mov	r4, r0
 800f988:	4689      	mov	r9, r1
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d93e      	bls.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800f98e:	4b38      	ldr	r3, [pc, #224]	; (800fa70 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xf8>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	b92b      	cbnz	r3, 800f9a0 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x28>
 800f994:	4b37      	ldr	r3, [pc, #220]	; (800fa74 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xfc>)
 800f996:	21ae      	movs	r1, #174	; 0xae
 800f998:	4a37      	ldr	r2, [pc, #220]	; (800fa78 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x100>)
 800f99a:	4838      	ldr	r0, [pc, #224]	; (800fa7c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x104>)
 800f99c:	f010 fbfa 	bl	8020194 <__assert_func>
 800f9a0:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800f9a4:	4b36      	ldr	r3, [pc, #216]	; (800fa80 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x108>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800f9ac:	f1b8 0f00 	cmp.w	r8, #0
 800f9b0:	d02c      	beq.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800f9b2:	6803      	ldr	r3, [r0, #0]
 800f9b4:	6945      	ldr	r5, [r0, #20]
 800f9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b8:	2d00      	cmp	r5, #0
 800f9ba:	d052      	beq.n	800fa62 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0xea>
 800f9bc:	696f      	ldr	r7, [r5, #20]
 800f9be:	4798      	blx	r3
 800f9c0:	f897 502c 	ldrb.w	r5, [r7, #44]	; 0x2c
 800f9c4:	fb15 f000 	smulbb	r0, r5, r0
 800f9c8:	b280      	uxth	r0, r0
 800f9ca:	1c45      	adds	r5, r0, #1
 800f9cc:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 800f9d0:	122d      	asrs	r5, r5, #8
 800f9d2:	d01b      	beq.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800f9d4:	6823      	ldr	r3, [r4, #0]
 800f9d6:	4639      	mov	r1, r7
 800f9d8:	4620      	mov	r0, r4
 800f9da:	b2ed      	uxtb	r5, r5
 800f9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9e0:	4798      	blx	r3
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	4606      	mov	r6, r0
 800f9e6:	4639      	mov	r1, r7
 800f9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f9ec:	4620      	mov	r0, r4
 800f9ee:	4798      	blx	r3
 800f9f0:	4683      	mov	fp, r0
 800f9f2:	b970      	cbnz	r0, 800fa12 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x9a>
 800f9f4:	b96e      	cbnz	r6, 800fa12 <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x9a>
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	4642      	mov	r2, r8
 800f9fa:	9600      	str	r6, [sp, #0]
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	4620      	mov	r0, r4
 800fa00:	e9cd 6501 	strd	r6, r5, [sp, #4]
 800fa04:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800fa08:	463b      	mov	r3, r7
 800fa0a:	47a8      	blx	r5
 800fa0c:	b007      	add	sp, #28
 800fa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa12:	2e00      	cmp	r6, #0
 800fa14:	ddfa      	ble.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa20:	4798      	blx	r3
 800fa22:	6823      	ldr	r3, [r4, #0]
 800fa24:	4682      	mov	sl, r0
 800fa26:	4639      	mov	r1, r7
 800fa28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	4798      	blx	r3
 800fa30:	4582      	cmp	sl, r0
 800fa32:	bfde      	ittt	le
 800fa34:	4603      	movle	r3, r0
 800fa36:	4650      	movle	r0, sl
 800fa38:	469a      	movle	sl, r3
 800fa3a:	ebaa 0300 	sub.w	r3, sl, r0
 800fa3e:	fb93 f3f6 	sdiv	r3, r3, r6
 800fa42:	2b64      	cmp	r3, #100	; 0x64
 800fa44:	dce2      	bgt.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	4642      	mov	r2, r8
 800fa4a:	9000      	str	r0, [sp, #0]
 800fa4c:	4649      	mov	r1, r9
 800fa4e:	4620      	mov	r0, r4
 800fa50:	e9cd b503 	strd	fp, r5, [sp, #12]
 800fa54:	e9cd a601 	strd	sl, r6, [sp, #4]
 800fa58:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 800fa5c:	463b      	mov	r3, r7
 800fa5e:	47a8      	blx	r5
 800fa60:	e7d4      	b.n	800fa0c <_ZNK8touchgfx15GraphLabelsBase4drawERKNS_4RectE+0x94>
 800fa62:	4798      	blx	r3
 800fa64:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800fa68:	deff      	udf	#255	; 0xff
 800fa6a:	bf00      	nop
 800fa6c:	2400f20c 	.word	0x2400f20c
 800fa70:	2400f208 	.word	0x2400f208
 800fa74:	0802343e 	.word	0x0802343e
 800fa78:	08024f68 	.word	0x08024f68
 800fa7c:	080234da 	.word	0x080234da
 800fa80:	2400f210 	.word	0x2400f210

0800fa84 <_ZN8touchgfx12GraphLabelsYD0Ev>:
 800fa84:	b510      	push	{r4, lr}
 800fa86:	4604      	mov	r4, r0
 800fa88:	2150      	movs	r1, #80	; 0x50
 800fa8a:	f00f fd5c 	bl	801f546 <_ZdlPvj>
 800fa8e:	4620      	mov	r0, r4
 800fa90:	bd10      	pop	{r4, pc}

0800fa92 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih>:
 800fa92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa96:	b08d      	sub	sp, #52	; 0x34
 800fa98:	4606      	mov	r6, r0
 800fa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa9c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800faa0:	e9dd 9a18 	ldrd	r9, sl, [sp, #96]	; 0x60
 800faa4:	e9cd 1207 	strd	r1, r2, [sp, #28]
 800faa8:	e9dd 7816 	ldrd	r7, r8, [sp, #88]	; 0x58
 800faac:	930a      	str	r3, [sp, #40]	; 0x28
 800faae:	f1b9 0f00 	cmp.w	r9, #0
 800fab2:	d117      	bne.n	800fae4 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x52>
 800fab4:	2f00      	cmp	r7, #0
 800fab6:	dc7c      	bgt.n	800fbb2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x120>
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	da01      	bge.n	800fac2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800fabe:	2f00      	cmp	r7, #0
 800fac0:	d17a      	bne.n	800fbb8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800fac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fac4:	4630      	mov	r0, r6
 800fac6:	6832      	ldr	r2, [r6, #0]
 800fac8:	9318      	str	r3, [sp, #96]	; 0x60
 800faca:	2300      	movs	r3, #0
 800facc:	9907      	ldr	r1, [sp, #28]
 800face:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 800fad2:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 800fad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fada:	46a4      	mov	ip, r4
 800fadc:	b00d      	add	sp, #52	; 0x34
 800fade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae2:	4760      	bx	ip
 800fae4:	fb97 f4f9 	sdiv	r4, r7, r9
 800fae8:	1e63      	subs	r3, r4, #1
 800faea:	9305      	str	r3, [sp, #20]
 800faec:	f1ba 0f00 	cmp.w	sl, #0
 800faf0:	d122      	bne.n	800fb38 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xa6>
 800faf2:	fb03 f509 	mul.w	r5, r3, r9
 800faf6:	fb98 faf9 	sdiv	sl, r8, r9
 800fafa:	f10a 0a02 	add.w	sl, sl, #2
 800fafe:	9b05      	ldr	r3, [sp, #20]
 800fb00:	459a      	cmp	sl, r3
 800fb02:	d059      	beq.n	800fbb8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800fb04:	42af      	cmp	r7, r5
 800fb06:	dc5a      	bgt.n	800fbbe <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x12c>
 800fb08:	45a8      	cmp	r8, r5
 800fb0a:	da01      	bge.n	800fb10 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>
 800fb0c:	42af      	cmp	r7, r5
 800fb0e:	db0e      	blt.n	800fb2e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800fb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb12:	4630      	mov	r0, r6
 800fb14:	9905      	ldr	r1, [sp, #20]
 800fb16:	9302      	str	r3, [sp, #8]
 800fb18:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800fb1a:	6832      	ldr	r2, [r6, #0]
 800fb1c:	434b      	muls	r3, r1
 800fb1e:	9907      	ldr	r1, [sp, #28]
 800fb20:	e9cd 5300 	strd	r5, r3, [sp]
 800fb24:	f8d2 b090 	ldr.w	fp, [r2, #144]	; 0x90
 800fb28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb2c:	47d8      	blx	fp
 800fb2e:	9b05      	ldr	r3, [sp, #20]
 800fb30:	444d      	add	r5, r9
 800fb32:	3301      	adds	r3, #1
 800fb34:	9305      	str	r3, [sp, #20]
 800fb36:	e7e2      	b.n	800fafe <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x6c>
 800fb38:	fb97 f3fa 	sdiv	r3, r7, sl
 800fb3c:	3b01      	subs	r3, #1
 800fb3e:	9306      	str	r3, [sp, #24]
 800fb40:	9a06      	ldr	r2, [sp, #24]
 800fb42:	fb98 f3fa 	sdiv	r3, r8, sl
 800fb46:	fb02 fb0a 	mul.w	fp, r2, sl
 800fb4a:	9a05      	ldr	r2, [sp, #20]
 800fb4c:	3302      	adds	r3, #2
 800fb4e:	fb02 f509 	mul.w	r5, r2, r9
 800fb52:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb54:	45ab      	cmp	fp, r5
 800fb56:	dd1d      	ble.n	800fb94 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800fb58:	42af      	cmp	r7, r5
 800fb5a:	dc08      	bgt.n	800fb6e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xdc>
 800fb5c:	45a8      	cmp	r8, r5
 800fb5e:	da08      	bge.n	800fb72 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800fb60:	42af      	cmp	r7, r5
 800fb62:	da06      	bge.n	800fb72 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xe0>
 800fb64:	9b05      	ldr	r3, [sp, #20]
 800fb66:	444d      	add	r5, r9
 800fb68:	3301      	adds	r3, #1
 800fb6a:	9305      	str	r3, [sp, #20]
 800fb6c:	e7f2      	b.n	800fb54 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800fb6e:	45a8      	cmp	r8, r5
 800fb70:	dcf8      	bgt.n	800fb64 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800fb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb74:	4630      	mov	r0, r6
 800fb76:	9905      	ldr	r1, [sp, #20]
 800fb78:	9302      	str	r3, [sp, #8]
 800fb7a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800fb7c:	6832      	ldr	r2, [r6, #0]
 800fb7e:	434b      	muls	r3, r1
 800fb80:	9907      	ldr	r1, [sp, #28]
 800fb82:	e9cd 5300 	strd	r5, r3, [sp]
 800fb86:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800fb8a:	461c      	mov	r4, r3
 800fb8c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb90:	47a0      	blx	r4
 800fb92:	e7e7      	b.n	800fb64 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xd2>
 800fb94:	45ab      	cmp	fp, r5
 800fb96:	db04      	blt.n	800fba2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x110>
 800fb98:	9b05      	ldr	r3, [sp, #20]
 800fb9a:	444d      	add	r5, r9
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	9305      	str	r3, [sp, #20]
 800fba0:	e7f8      	b.n	800fb94 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x102>
 800fba2:	9b06      	ldr	r3, [sp, #24]
 800fba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fba6:	3301      	adds	r3, #1
 800fba8:	4293      	cmp	r3, r2
 800fbaa:	9306      	str	r3, [sp, #24]
 800fbac:	d004      	beq.n	800fbb8 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x126>
 800fbae:	44d3      	add	fp, sl
 800fbb0:	e7d0      	b.n	800fb54 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0xc2>
 800fbb2:	f1b8 0f00 	cmp.w	r8, #0
 800fbb6:	dd84      	ble.n	800fac2 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x30>
 800fbb8:	b00d      	add	sp, #52	; 0x34
 800fbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbbe:	45a8      	cmp	r8, r5
 800fbc0:	dcb5      	bgt.n	800fb2e <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x9c>
 800fbc2:	e7a5      	b.n	800fb10 <_ZNK8touchgfx15GraphLabelsBase14drawIndexRangeERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiiiih+0x7e>

0800fbc4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>:
 800fbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc8:	f1b3 0900 	subs.w	r9, r3, #0
 800fbcc:	460d      	mov	r5, r1
 800fbce:	4690      	mov	r8, r2
 800fbd0:	9f08      	ldr	r7, [sp, #32]
 800fbd2:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
 800fbd6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fbd8:	da18      	bge.n	800fc0c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800fbda:	2a01      	cmp	r2, #1
 800fbdc:	dd16      	ble.n	800fc0c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x48>
 800fbde:	232d      	movs	r3, #45	; 0x2d
 800fbe0:	f1c9 0900 	rsb	r9, r9, #0
 800fbe4:	2001      	movs	r0, #1
 800fbe6:	800b      	strh	r3, [r1, #0]
 800fbe8:	2f00      	cmp	r7, #0
 800fbea:	d111      	bne.n	800fc10 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x4c>
 800fbec:	2302      	movs	r3, #2
 800fbee:	eba8 0100 	sub.w	r1, r8, r0
 800fbf2:	4a26      	ldr	r2, [pc, #152]	; (800fc8c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800fbf4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800fbf8:	b289      	uxth	r1, r1
 800fbfa:	fb96 f3f3 	sdiv	r3, r6, r3
 800fbfe:	444b      	add	r3, r9
 800fc00:	fb93 f3f6 	sdiv	r3, r3, r6
 800fc04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc08:	f005 bbac 	b.w	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	e7eb      	b.n	800fbe8 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x24>
 800fc10:	dd39      	ble.n	800fc86 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800fc12:	eba8 0100 	sub.w	r1, r8, r0
 800fc16:	4a1d      	ldr	r2, [pc, #116]	; (800fc8c <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc8>)
 800fc18:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 800fc1c:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc20:	b289      	uxth	r1, r1
 800fc22:	fb99 f4f6 	sdiv	r4, r9, r6
 800fc26:	4623      	mov	r3, r4
 800fc28:	f005 fb9c 	bl	8015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	f005 f827 	bl	8014c80 <_ZN8touchgfx7Unicode6strlenEPKt>
 800fc32:	4580      	cmp	r8, r0
 800fc34:	dd27      	ble.n	800fc86 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xc2>
 800fc36:	f04f 0e02 	mov.w	lr, #2
 800fc3a:	f825 a010 	strh.w	sl, [r5, r0, lsl #1]
 800fc3e:	fb06 9314 	mls	r3, r6, r4, r9
 800fc42:	3001      	adds	r0, #1
 800fc44:	2200      	movs	r2, #0
 800fc46:	f04f 090a 	mov.w	r9, #10
 800fc4a:	f107 3aff 	add.w	sl, r7, #4294967295
 800fc4e:	fb96 fefe 	sdiv	lr, r6, lr
 800fc52:	4580      	cmp	r8, r0
 800fc54:	4684      	mov	ip, r0
 800fc56:	dd13      	ble.n	800fc80 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0xbc>
 800fc58:	fb09 f303 	mul.w	r3, r9, r3
 800fc5c:	4592      	cmp	sl, r2
 800fc5e:	f102 0201 	add.w	r2, r2, #1
 800fc62:	f100 0c01 	add.w	ip, r0, #1
 800fc66:	bf08      	it	eq
 800fc68:	4473      	addeq	r3, lr
 800fc6a:	4297      	cmp	r7, r2
 800fc6c:	fb93 f4f6 	sdiv	r4, r3, r6
 800fc70:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fc74:	fb06 3314 	mls	r3, r6, r4, r3
 800fc78:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
 800fc7c:	4660      	mov	r0, ip
 800fc7e:	d1e8      	bne.n	800fc52 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti+0x8e>
 800fc80:	2300      	movs	r3, #0
 800fc82:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
 800fc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08023b1e 	.word	0x08023b1e

0800fc90 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih>:
 800fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc94:	b09b      	sub	sp, #108	; 0x6c
 800fc96:	461f      	mov	r7, r3
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800fca0:	9104      	str	r1, [sp, #16]
 800fca2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fca6:	4638      	mov	r0, r7
 800fca8:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fcaa:	4616      	mov	r6, r2
 800fcac:	4798      	blx	r3
 800fcae:	f848 0d28 	str.w	r0, [r8, #-40]!
 800fcb2:	4640      	mov	r0, r8
 800fcb4:	f7f4 f99d 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fcb8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800fcbc:	1ac0      	subs	r0, r0, r3
 800fcbe:	b200      	sxth	r0, r0
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	f2c0 80f1 	blt.w	800fea8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 800fcc6:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 800fcca:	441a      	add	r2, r3
 800fccc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcd0:	1a9b      	subs	r3, r3, r2
 800fcd2:	b21b      	sxth	r3, r3
 800fcd4:	4298      	cmp	r0, r3
 800fcd6:	f280 80e7 	bge.w	800fea8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 800fcda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcdc:	2214      	movs	r2, #20
 800fcde:	4641      	mov	r1, r8
 800fce0:	4620      	mov	r0, r4
 800fce2:	9302      	str	r3, [sp, #8]
 800fce4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800fce8:	f8df b200 	ldr.w	fp, [pc, #512]	; 800feec <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x25c>
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800fcf2:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 800fef0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x260>
 800fcf6:	9300      	str	r3, [sp, #0]
 800fcf8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800fcfa:	f7ff ff63 	bl	800fbc4 <_ZNK8touchgfx15GraphLabelsBase11formatLabelEPtsiiti>
 800fcfe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800fd02:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800fef4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x264>
 800fd06:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800fd0a:	6833      	ldr	r3, [r6, #0]
 800fd0c:	f040 80cf 	bne.w	800feae <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x21e>
 800fd10:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800fd12:	f8db 3000 	ldr.w	r3, [fp]
 800fd16:	b92b      	cbnz	r3, 800fd24 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x94>
 800fd18:	4b70      	ldr	r3, [pc, #448]	; (800fedc <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x24c>)
 800fd1a:	21ae      	movs	r1, #174	; 0xae
 800fd1c:	4a70      	ldr	r2, [pc, #448]	; (800fee0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x250>)
 800fd1e:	4871      	ldr	r0, [pc, #452]	; (800fee4 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x254>)
 800fd20:	f010 fa38 	bl	8020194 <__assert_func>
 800fd24:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fd28:	f8ba 3000 	ldrh.w	r3, [sl]
 800fd2c:	428b      	cmp	r3, r1
 800fd2e:	d803      	bhi.n	800fd38 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa8>
 800fd30:	4b6d      	ldr	r3, [pc, #436]	; (800fee8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x258>)
 800fd32:	21af      	movs	r1, #175	; 0xaf
 800fd34:	4a6a      	ldr	r2, [pc, #424]	; (800fee0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x250>)
 800fd36:	e7f2      	b.n	800fd1e <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x8e>
 800fd38:	f8d9 0000 	ldr.w	r0, [r9]
 800fd3c:	f7f3 f84a 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800fd40:	4642      	mov	r2, r8
 800fd42:	4601      	mov	r1, r0
 800fd44:	4630      	mov	r0, r6
 800fd46:	47a8      	blx	r5
 800fd48:	6832      	ldr	r2, [r6, #0]
 800fd4a:	9005      	str	r0, [sp, #20]
 800fd4c:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800fd4e:	f8db 2000 	ldr.w	r2, [fp]
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	d0e0      	beq.n	800fd18 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 800fd56:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fd5a:	f8ba 2000 	ldrh.w	r2, [sl]
 800fd5e:	428a      	cmp	r2, r1
 800fd60:	d9e6      	bls.n	800fd30 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 800fd62:	f8d9 0000 	ldr.w	r0, [r9]
 800fd66:	f7f3 f835 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800fd6a:	4642      	mov	r2, r8
 800fd6c:	4601      	mov	r1, r0
 800fd6e:	4630      	mov	r0, r6
 800fd70:	47a8      	blx	r5
 800fd72:	9b05      	ldr	r3, [sp, #20]
 800fd74:	f8db 2000 	ldr.w	r2, [fp]
 800fd78:	fb13 f000 	smulbb	r0, r3, r0
 800fd7c:	6833      	ldr	r3, [r6, #0]
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd80:	b285      	uxth	r5, r0
 800fd82:	9305      	str	r3, [sp, #20]
 800fd84:	2a00      	cmp	r2, #0
 800fd86:	d0c7      	beq.n	800fd18 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 800fd88:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800fd8c:	f8ba 2000 	ldrh.w	r2, [sl]
 800fd90:	428a      	cmp	r2, r1
 800fd92:	d9cd      	bls.n	800fd30 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 800fd94:	f8d9 0000 	ldr.w	r0, [r9]
 800fd98:	f7f3 f81c 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800fd9c:	4642      	mov	r2, r8
 800fd9e:	4601      	mov	r1, r0
 800fda0:	9b05      	ldr	r3, [sp, #20]
 800fda2:	4630      	mov	r0, r6
 800fda4:	4798      	blx	r3
 800fda6:	4405      	add	r5, r0
 800fda8:	b2ad      	uxth	r5, r5
 800fdaa:	683b      	ldr	r3, [r7, #0]
 800fdac:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800fdb0:	f8b7 a0c6 	ldrh.w	sl, [r7, #198]	; 0xc6
 800fdb4:	4638      	mov	r0, r7
 800fdb6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800fdba:	2700      	movs	r7, #0
 800fdbc:	9924      	ldr	r1, [sp, #144]	; 0x90
 800fdbe:	4798      	blx	r3
 800fdc0:	f848 0d3c 	str.w	r0, [r8, #-60]!
 800fdc4:	4640      	mov	r0, r8
 800fdc6:	f7f4 f914 	bl	8003ff2 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 800fdca:	4450      	add	r0, sl
 800fdcc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800fdd0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
 800fdd4:	eba0 0055 	sub.w	r0, r0, r5, lsr #1
 800fdd8:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 800fddc:	ad07      	add	r5, sp, #28
 800fdde:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fde2:	f8ad 701c 	strh.w	r7, [sp, #28]
 800fde6:	f8ad 001e 	strh.w	r0, [sp, #30]
 800fdea:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fdee:	e88a 0003 	stmia.w	sl, {r0, r1}
 800fdf2:	9904      	ldr	r1, [sp, #16]
 800fdf4:	4650      	mov	r0, sl
 800fdf6:	f7fd f91d 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 800fdfa:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 800fdfe:	42bb      	cmp	r3, r7
 800fe00:	dd52      	ble.n	800fea8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 800fe02:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 800fe06:	42bb      	cmp	r3, r7
 800fe08:	dd4e      	ble.n	800fea8 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x218>
 800fe0a:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800fe0e:	4629      	mov	r1, r5
 800fe10:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800fe14:	4620      	mov	r0, r4
 800fe16:	1a9b      	subs	r3, r3, r2
 800fe18:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800fe1c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800fe20:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800fe2a:	6823      	ldr	r3, [r4, #0]
 800fe2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe2e:	4798      	blx	r3
 800fe30:	4b2e      	ldr	r3, [pc, #184]	; (800feec <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x25c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f43f af6f 	beq.w	800fd18 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 800fe3a:	4a2d      	ldr	r2, [pc, #180]	; (800fef0 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x260>)
 800fe3c:	f8b4 b040 	ldrh.w	fp, [r4, #64]	; 0x40
 800fe40:	8812      	ldrh	r2, [r2, #0]
 800fe42:	455a      	cmp	r2, fp
 800fe44:	f67f af74 	bls.w	800fd30 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 800fe48:	eb03 034b 	add.w	r3, r3, fp, lsl #1
 800fe4c:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800fe50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fe52:	785b      	ldrb	r3, [r3, #1]
 800fe54:	920d      	str	r2, [sp, #52]	; 0x34
 800fe56:	f3c3 0001 	ubfx	r0, r3, #0, #2
 800fe5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800fe5e:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
 800fe62:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 800fe66:	f89d 3098 	ldrb.w	r3, [sp, #152]	; 0x98
 800fe6a:	960b      	str	r6, [sp, #44]	; 0x2c
 800fe6c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800fe70:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
 800fe74:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 800fe78:	f88d 703b 	strb.w	r7, [sp, #59]	; 0x3b
 800fe7c:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
 800fe80:	f7fd fba6 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 800fe84:	4659      	mov	r1, fp
 800fe86:	4604      	mov	r4, r0
 800fe88:	f8d9 0000 	ldr.w	r0, [r9]
 800fe8c:	f7f2 ffa2 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800fe90:	ab10      	add	r3, sp, #64	; 0x40
 800fe92:	9703      	str	r7, [sp, #12]
 800fe94:	f8cd 8000 	str.w	r8, [sp]
 800fe98:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800fe9c:	4653      	mov	r3, sl
 800fe9e:	4620      	mov	r0, r4
 800fea0:	e895 0006 	ldmia.w	r5, {r1, r2}
 800fea4:	f7f2 ff48 	bl	8002d38 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800fea8:	b01b      	add	sp, #108	; 0x6c
 800feaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feae:	699d      	ldr	r5, [r3, #24]
 800feb0:	f8db 3000 	ldr.w	r3, [fp]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f43f af2f 	beq.w	800fd18 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x88>
 800feba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 800febe:	f8ba 3000 	ldrh.w	r3, [sl]
 800fec2:	428b      	cmp	r3, r1
 800fec4:	f67f af34 	bls.w	800fd30 <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0xa0>
 800fec8:	f8d9 0000 	ldr.w	r0, [r9]
 800fecc:	f7f2 ff82 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800fed0:	4642      	mov	r2, r8
 800fed2:	4601      	mov	r1, r0
 800fed4:	4630      	mov	r0, r6
 800fed6:	47a8      	blx	r5
 800fed8:	4605      	mov	r5, r0
 800feda:	e766      	b.n	800fdaa <_ZNK8touchgfx12GraphLabelsY10drawStringERKNS_4RectEPKNS_4FontEPKNS_17AbstractDataGraphEiih+0x11a>
 800fedc:	0802343e 	.word	0x0802343e
 800fee0:	08024f68 	.word	0x08024f68
 800fee4:	080234da 	.word	0x080234da
 800fee8:	08023503 	.word	0x08023503
 800feec:	2400f208 	.word	0x2400f208
 800fef0:	2400f20c 	.word	0x2400f20c
 800fef4:	2400f214 	.word	0x2400f214

0800fef8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800fef8:	4b1b      	ldr	r3, [pc, #108]	; (800ff68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800fefa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fefe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800ff00:	4604      	mov	r4, r0
 800ff02:	881b      	ldrh	r3, [r3, #0]
 800ff04:	428b      	cmp	r3, r1
 800ff06:	d92d      	bls.n	800ff64 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>
 800ff08:	4b18      	ldr	r3, [pc, #96]	; (800ff6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	b92b      	cbnz	r3, 800ff1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x22>
 800ff0e:	4b18      	ldr	r3, [pc, #96]	; (800ff70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 800ff10:	21ae      	movs	r1, #174	; 0xae
 800ff12:	4a18      	ldr	r2, [pc, #96]	; (800ff74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 800ff14:	4818      	ldr	r0, [pc, #96]	; (800ff78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 800ff16:	f010 f93d 	bl	8020194 <__assert_func>
 800ff1a:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800ff1e:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800ff22:	4b16      	ldr	r3, [pc, #88]	; (800ff7c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x84>)
 800ff24:	7855      	ldrb	r5, [r2, #1]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800ff2c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800ff30:	6833      	ldr	r3, [r6, #0]
 800ff32:	69df      	ldr	r7, [r3, #28]
 800ff34:	4b12      	ldr	r3, [pc, #72]	; (800ff80 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x88>)
 800ff36:	6818      	ldr	r0, [r3, #0]
 800ff38:	f7f2 ff4c 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 800ff3c:	6823      	ldr	r3, [r4, #0]
 800ff3e:	4680      	mov	r8, r0
 800ff40:	4620      	mov	r0, r4
 800ff42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff44:	4798      	blx	r3
 800ff46:	6823      	ldr	r3, [r4, #0]
 800ff48:	4681      	mov	r9, r0
 800ff4a:	4620      	mov	r0, r4
 800ff4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff50:	4798      	blx	r3
 800ff52:	464b      	mov	r3, r9
 800ff54:	9000      	str	r0, [sp, #0]
 800ff56:	4642      	mov	r2, r8
 800ff58:	4629      	mov	r1, r5
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	47b8      	blx	r7
 800ff5e:	b003      	add	sp, #12
 800ff60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff64:	2000      	movs	r0, #0
 800ff66:	e7fa      	b.n	800ff5e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x66>
 800ff68:	2400f20c 	.word	0x2400f20c
 800ff6c:	2400f208 	.word	0x2400f208
 800ff70:	0802343e 	.word	0x0802343e
 800ff74:	08024f96 	.word	0x08024f96
 800ff78:	080234da 	.word	0x080234da
 800ff7c:	2400f210 	.word	0x2400f210
 800ff80:	2400f214 	.word	0x2400f214

0800ff84 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800ff84:	b40e      	push	{r1, r2, r3}
 800ff86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff8a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801007c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>
 800ff8e:	b09c      	sub	sp, #112	; 0x70
 800ff90:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800ff92:	4604      	mov	r4, r0
 800ff94:	f8b9 3000 	ldrh.w	r3, [r9]
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d965      	bls.n	8010068 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe4>
 800ff9c:	ab26      	add	r3, sp, #152	; 0x98
 800ff9e:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8010080 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>
 800ffa2:	9302      	str	r3, [sp, #8]
 800ffa4:	f8da 3000 	ldr.w	r3, [sl]
 800ffa8:	b92b      	cbnz	r3, 800ffb6 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x32>
 800ffaa:	4b30      	ldr	r3, [pc, #192]	; (801006c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>)
 800ffac:	21ae      	movs	r1, #174	; 0xae
 800ffae:	4a30      	ldr	r2, [pc, #192]	; (8010070 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 800ffb0:	4830      	ldr	r0, [pc, #192]	; (8010074 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 800ffb2:	f010 f8ef 	bl	8020194 <__assert_func>
 800ffb6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8010084 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 800ffba:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800ffbe:	f8d8 3000 	ldr.w	r3, [r8]
 800ffc2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800ffc6:	682b      	ldr	r3, [r5, #0]
 800ffc8:	4628      	mov	r0, r5
 800ffca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffcc:	4798      	blx	r3
 800ffce:	4606      	mov	r6, r0
 800ffd0:	b207      	sxth	r7, r0
 800ffd2:	a803      	add	r0, sp, #12
 800ffd4:	f003 fe6a 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 800ffd8:	682b      	ldr	r3, [r5, #0]
 800ffda:	4628      	mov	r0, r5
 800ffdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffde:	4798      	blx	r3
 800ffe0:	682b      	ldr	r3, [r5, #0]
 800ffe2:	4683      	mov	fp, r0
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffe8:	4798      	blx	r3
 800ffea:	465b      	mov	r3, fp
 800ffec:	9000      	str	r0, [sp, #0]
 800ffee:	a803      	add	r0, sp, #12
 800fff0:	9925      	ldr	r1, [sp, #148]	; 0x94
 800fff2:	9a02      	ldr	r2, [sp, #8]
 800fff4:	f003 fec6 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800fff8:	f8da 3000 	ldr.w	r3, [sl]
 800fffc:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8010000:	2b00      	cmp	r3, #0
 8010002:	d0d2      	beq.n	800ffaa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x26>
 8010004:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8010006:	f8b9 0000 	ldrh.w	r0, [r9]
 801000a:	4290      	cmp	r0, r2
 801000c:	d926      	bls.n	801005c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xd8>
 801000e:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 8010012:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8010016:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801001a:	786a      	ldrb	r2, [r5, #1]
 801001c:	8925      	ldrh	r5, [r4, #8]
 801001e:	f8d8 3000 	ldr.w	r3, [r8]
 8010022:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8010026:	eba5 050c 	sub.w	r5, r5, ip
 801002a:	b22d      	sxth	r5, r5
 801002c:	9500      	str	r5, [sp, #0]
 801002e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010032:	a803      	add	r0, sp, #12
 8010034:	f001 fcea 	bl	8011a0c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010038:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801003c:	b203      	sxth	r3, r0
 801003e:	18b9      	adds	r1, r7, r2
 8010040:	2900      	cmp	r1, #0
 8010042:	dd0f      	ble.n	8010064 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe0>
 8010044:	3b01      	subs	r3, #1
 8010046:	fb13 f302 	smulbb	r3, r3, r2
 801004a:	fb16 3300 	smlabb	r3, r6, r0, r3
 801004e:	b21f      	sxth	r7, r3
 8010050:	4638      	mov	r0, r7
 8010052:	b01c      	add	sp, #112	; 0x70
 8010054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010058:	b003      	add	sp, #12
 801005a:	4770      	bx	lr
 801005c:	4b06      	ldr	r3, [pc, #24]	; (8010078 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 801005e:	21af      	movs	r1, #175	; 0xaf
 8010060:	4a03      	ldr	r2, [pc, #12]	; (8010070 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>)
 8010062:	e7a5      	b.n	800ffb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2c>
 8010064:	2b00      	cmp	r3, #0
 8010066:	dcf3      	bgt.n	8010050 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8010068:	2700      	movs	r7, #0
 801006a:	e7f1      	b.n	8010050 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801006c:	0802343e 	.word	0x0802343e
 8010070:	08024f96 	.word	0x08024f96
 8010074:	080234da 	.word	0x080234da
 8010078:	08023503 	.word	0x08023503
 801007c:	2400f20c 	.word	0x2400f20c
 8010080:	2400f208 	.word	0x2400f208
 8010084:	2400f210 	.word	0x2400f210

08010088 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8010088:	4b6d      	ldr	r3, [pc, #436]	; (8010240 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b8>)
 801008a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008e:	460c      	mov	r4, r1
 8010090:	881a      	ldrh	r2, [r3, #0]
 8010092:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8010094:	b0b9      	sub	sp, #228	; 0xe4
 8010096:	4681      	mov	r9, r0
 8010098:	428a      	cmp	r2, r1
 801009a:	9302      	str	r3, [sp, #8]
 801009c:	d809      	bhi.n	80100b2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2a>
 801009e:	2300      	movs	r3, #0
 80100a0:	f04f 32ff 	mov.w	r2, #4294967295
 80100a4:	6083      	str	r3, [r0, #8]
 80100a6:	e9c0 3200 	strd	r3, r2, [r0]
 80100aa:	4648      	mov	r0, r9
 80100ac:	b039      	add	sp, #228	; 0xe4
 80100ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b2:	4a64      	ldr	r2, [pc, #400]	; (8010244 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1bc>)
 80100b4:	6813      	ldr	r3, [r2, #0]
 80100b6:	4692      	mov	sl, r2
 80100b8:	b92b      	cbnz	r3, 80100c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x3e>
 80100ba:	4b63      	ldr	r3, [pc, #396]	; (8010248 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c0>)
 80100bc:	21ae      	movs	r1, #174	; 0xae
 80100be:	4a63      	ldr	r2, [pc, #396]	; (801024c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 80100c0:	4863      	ldr	r0, [pc, #396]	; (8010250 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c8>)
 80100c2:	f010 f867 	bl	8020194 <__assert_func>
 80100c6:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80100ca:	4b62      	ldr	r3, [pc, #392]	; (8010254 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1cc>)
 80100cc:	f8df b18c 	ldr.w	fp, [pc, #396]	; 801025c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d4>
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f8db 0000 	ldr.w	r0, [fp]
 80100d6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80100da:	f7f2 fe7b 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 80100de:	4680      	mov	r8, r0
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	4628      	mov	r0, r5
 80100e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e6:	4798      	blx	r3
 80100e8:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 80100ea:	f894 7039 	ldrb.w	r7, [r4, #57]	; 0x39
 80100ee:	4406      	add	r6, r0
 80100f0:	f8cd b00c 	str.w	fp, [sp, #12]
 80100f4:	b2b6      	uxth	r6, r6
 80100f6:	2f00      	cmp	r7, #0
 80100f8:	f040 80b2 	bne.w	8010260 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d8>
 80100fc:	a806      	add	r0, sp, #24
 80100fe:	f003 fdd5 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8010102:	682b      	ldr	r3, [r5, #0]
 8010104:	4628      	mov	r0, r5
 8010106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010108:	4798      	blx	r3
 801010a:	682b      	ldr	r3, [r5, #0]
 801010c:	4683      	mov	fp, r0
 801010e:	4628      	mov	r0, r5
 8010110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010112:	4798      	blx	r3
 8010114:	6822      	ldr	r2, [r4, #0]
 8010116:	9005      	str	r0, [sp, #20]
 8010118:	4620      	mov	r0, r4
 801011a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801011c:	4790      	blx	r2
 801011e:	6821      	ldr	r1, [r4, #0]
 8010120:	9004      	str	r0, [sp, #16]
 8010122:	4620      	mov	r0, r4
 8010124:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 8010128:	4788      	blx	r1
 801012a:	9a04      	ldr	r2, [sp, #16]
 801012c:	4641      	mov	r1, r8
 801012e:	46b8      	mov	r8, r7
 8010130:	9001      	str	r0, [sp, #4]
 8010132:	a806      	add	r0, sp, #24
 8010134:	9200      	str	r2, [sp, #0]
 8010136:	465a      	mov	r2, fp
 8010138:	9b05      	ldr	r3, [sp, #20]
 801013a:	f003 fe38 	bl	8013dae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801013e:	f8da 3000 	ldr.w	r3, [sl]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d0b9      	beq.n	80100ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 8010146:	9902      	ldr	r1, [sp, #8]
 8010148:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801014a:	8809      	ldrh	r1, [r1, #0]
 801014c:	4291      	cmp	r1, r2
 801014e:	d803      	bhi.n	8010158 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xd0>
 8010150:	4b41      	ldr	r3, [pc, #260]	; (8010258 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1d0>)
 8010152:	21af      	movs	r1, #175	; 0xaf
 8010154:	4a3d      	ldr	r2, [pc, #244]	; (801024c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1c4>)
 8010156:	e7b3      	b.n	80100c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x38>
 8010158:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801015c:	4629      	mov	r1, r5
 801015e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010162:	a806      	add	r0, sp, #24
 8010164:	785b      	ldrb	r3, [r3, #1]
 8010166:	3701      	adds	r7, #1
 8010168:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801016c:	b2bf      	uxth	r7, r7
 801016e:	f001 f9a1 	bl	80114b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010172:	4580      	cmp	r8, r0
 8010174:	bfb8      	it	lt
 8010176:	fa0f f880 	sxthlt.w	r8, r0
 801017a:	a806      	add	r0, sp, #24
 801017c:	f003 fdbe 	bl	8013cfc <_ZN8touchgfx12TextProvider11endOfStringEv>
 8010180:	2800      	cmp	r0, #0
 8010182:	d0dc      	beq.n	801013e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb6>
 8010184:	fb16 f607 	smulbb	r6, r6, r7
 8010188:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 801018a:	1bf6      	subs	r6, r6, r7
 801018c:	b2b6      	uxth	r6, r6
 801018e:	fa0f fb86 	sxth.w	fp, r6
 8010192:	f1bb 0f00 	cmp.w	fp, #0
 8010196:	dd06      	ble.n	80101a6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x11e>
 8010198:	682b      	ldr	r3, [r5, #0]
 801019a:	4628      	mov	r0, r5
 801019c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801019e:	4798      	blx	r3
 80101a0:	4430      	add	r0, r6
 80101a2:	fa0f fb80 	sxth.w	fp, r0
 80101a6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80101aa:	4620      	mov	r0, r4
 80101ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80101b0:	6823      	ldr	r3, [r4, #0]
 80101b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101b4:	bf0c      	ite	eq
 80101b6:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 80101ba:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80101be:	4798      	blx	r3
 80101c0:	2801      	cmp	r0, #1
 80101c2:	fa1f f288 	uxth.w	r2, r8
 80101c6:	f000 80f7 	beq.w	80103b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x330>
 80101ca:	2802      	cmp	r0, #2
 80101cc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80101d0:	f000 80f9 	beq.w	80103c6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x33e>
 80101d4:	7a29      	ldrb	r1, [r5, #8]
 80101d6:	b21b      	sxth	r3, r3
 80101d8:	7a68      	ldrb	r0, [r5, #9]
 80101da:	1a5b      	subs	r3, r3, r1
 80101dc:	4401      	add	r1, r0
 80101de:	b29b      	uxth	r3, r3
 80101e0:	440a      	add	r2, r1
 80101e2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80101e6:	b21e      	sxth	r6, r3
 80101e8:	b292      	uxth	r2, r2
 80101ea:	2902      	cmp	r1, #2
 80101ec:	b217      	sxth	r7, r2
 80101ee:	f000 80ed 	beq.w	80103cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x344>
 80101f2:	2903      	cmp	r1, #3
 80101f4:	f000 80f3 	beq.w	80103de <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x356>
 80101f8:	2901      	cmp	r1, #1
 80101fa:	f040 80f9 	bne.w	80103f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x368>
 80101fe:	8923      	ldrh	r3, [r4, #8]
 8010200:	463a      	mov	r2, r7
 8010202:	4635      	mov	r5, r6
 8010204:	465f      	mov	r7, fp
 8010206:	eba3 030b 	sub.w	r3, r3, fp
 801020a:	4693      	mov	fp, r2
 801020c:	b21e      	sxth	r6, r3
 801020e:	f8da 3000 	ldr.w	r3, [sl]
 8010212:	2b00      	cmp	r3, #0
 8010214:	f43f af51 	beq.w	80100ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 8010218:	9b02      	ldr	r3, [sp, #8]
 801021a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	428b      	cmp	r3, r1
 8010220:	d996      	bls.n	8010150 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 8010222:	9b03      	ldr	r3, [sp, #12]
 8010224:	6818      	ldr	r0, [r3, #0]
 8010226:	f7f2 fdd5 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 801022a:	f8a9 6000 	strh.w	r6, [r9]
 801022e:	f8a9 5002 	strh.w	r5, [r9, #2]
 8010232:	f8a9 7004 	strh.w	r7, [r9, #4]
 8010236:	f8a9 b006 	strh.w	fp, [r9, #6]
 801023a:	f8c9 0008 	str.w	r0, [r9, #8]
 801023e:	e734      	b.n	80100aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x22>
 8010240:	2400f20c 	.word	0x2400f20c
 8010244:	2400f208 	.word	0x2400f208
 8010248:	0802343e 	.word	0x0802343e
 801024c:	08024f96 	.word	0x08024f96
 8010250:	080234da 	.word	0x080234da
 8010254:	2400f210 	.word	0x2400f210
 8010258:	08023503 	.word	0x08023503
 801025c:	2400f214 	.word	0x2400f214
 8010260:	af1f      	add	r7, sp, #124	; 0x7c
 8010262:	4638      	mov	r0, r7
 8010264:	f003 fd22 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8010268:	682b      	ldr	r3, [r5, #0]
 801026a:	4628      	mov	r0, r5
 801026c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801026e:	4798      	blx	r3
 8010270:	682b      	ldr	r3, [r5, #0]
 8010272:	4683      	mov	fp, r0
 8010274:	4628      	mov	r0, r5
 8010276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010278:	4798      	blx	r3
 801027a:	6822      	ldr	r2, [r4, #0]
 801027c:	9005      	str	r0, [sp, #20]
 801027e:	4620      	mov	r0, r4
 8010280:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8010282:	4790      	blx	r2
 8010284:	6821      	ldr	r1, [r4, #0]
 8010286:	9004      	str	r0, [sp, #16]
 8010288:	4620      	mov	r0, r4
 801028a:	f8d1 1080 	ldr.w	r1, [r1, #128]	; 0x80
 801028e:	4788      	blx	r1
 8010290:	9a04      	ldr	r2, [sp, #16]
 8010292:	9001      	str	r0, [sp, #4]
 8010294:	4641      	mov	r1, r8
 8010296:	9200      	str	r2, [sp, #0]
 8010298:	4638      	mov	r0, r7
 801029a:	465a      	mov	r2, fp
 801029c:	9b05      	ldr	r3, [sp, #20]
 801029e:	f003 fd86 	bl	8013dae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80102a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80102a6:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80102aa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80102ae:	f9b4 b008 	ldrsh.w	fp, [r4, #8]
 80102b2:	bf12      	itee	ne
 80102b4:	4613      	movne	r3, r2
 80102b6:	465b      	moveq	r3, fp
 80102b8:	4693      	moveq	fp, r2
 80102ba:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 80102be:	1a9b      	subs	r3, r3, r2
 80102c0:	b29a      	uxth	r2, r3
 80102c2:	f8da 3000 	ldr.w	r3, [sl]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f43f aef7 	beq.w	80100ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x32>
 80102cc:	9802      	ldr	r0, [sp, #8]
 80102ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80102d0:	8800      	ldrh	r0, [r0, #0]
 80102d2:	4288      	cmp	r0, r1
 80102d4:	f67f af3c 	bls.w	8010150 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xc8>
 80102d8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80102dc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 80102e0:	7859      	ldrb	r1, [r3, #1]
 80102e2:	2300      	movs	r3, #0
 80102e4:	9707      	str	r7, [sp, #28]
 80102e6:	f3c1 0181 	ubfx	r1, r1, #2, #2
 80102ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80102ee:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80102f2:	f88d 1020 	strb.w	r1, [sp, #32]
 80102f6:	9509      	str	r5, [sp, #36]	; 0x24
 80102f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80102fc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8010300:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8010304:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8010308:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801030c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010310:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010314:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8010318:	b350      	cbz	r0, 8010370 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801031a:	682b      	ldr	r3, [r5, #0]
 801031c:	4628      	mov	r0, r5
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	4798      	blx	r3
 8010322:	4680      	mov	r8, r0
 8010324:	b320      	cbz	r0, 8010370 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8010326:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010328:	4641      	mov	r1, r8
 801032a:	6803      	ldr	r3, [r0, #0]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	4798      	blx	r3
 8010330:	4607      	mov	r7, r0
 8010332:	b1e8      	cbz	r0, 8010370 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 8010334:	7b43      	ldrb	r3, [r0, #13]
 8010336:	7a82      	ldrb	r2, [r0, #10]
 8010338:	005b      	lsls	r3, r3, #1
 801033a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801033e:	4313      	orrs	r3, r2
 8010340:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010344:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8010348:	2b04      	cmp	r3, #4
 801034a:	d111      	bne.n	8010370 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e8>
 801034c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801034e:	463a      	mov	r2, r7
 8010350:	4641      	mov	r1, r8
 8010352:	6803      	ldr	r3, [r0, #0]
 8010354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010356:	4798      	blx	r3
 8010358:	7b7b      	ldrb	r3, [r7, #13]
 801035a:	005b      	lsls	r3, r3, #1
 801035c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010360:	7abb      	ldrb	r3, [r7, #10]
 8010362:	4313      	orrs	r3, r2
 8010364:	4418      	add	r0, r3
 8010366:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801036a:	4418      	add	r0, r3
 801036c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
 8010370:	b233      	sxth	r3, r6
 8010372:	2700      	movs	r7, #0
 8010374:	005a      	lsls	r2, r3, #1
 8010376:	46b8      	mov	r8, r7
 8010378:	455a      	cmp	r2, fp
 801037a:	a806      	add	r0, sp, #24
 801037c:	9305      	str	r3, [sp, #20]
 801037e:	f107 0701 	add.w	r7, r7, #1
 8010382:	bfd4      	ite	le
 8010384:	2100      	movle	r1, #0
 8010386:	2101      	movgt	r1, #1
 8010388:	9204      	str	r2, [sp, #16]
 801038a:	f001 fa70 	bl	801186e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801038e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8010392:	ebab 0b06 	sub.w	fp, fp, r6
 8010396:	b2bf      	uxth	r7, r7
 8010398:	4588      	cmp	r8, r1
 801039a:	fa0f fb8b 	sxth.w	fp, fp
 801039e:	bfb8      	it	lt
 80103a0:	fa0f f881 	sxthlt.w	r8, r1
 80103a4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80103a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103ac:	2900      	cmp	r1, #0
 80103ae:	f43f aee9 	beq.w	8010184 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80103b2:	455b      	cmp	r3, fp
 80103b4:	dbe0      	blt.n	8010378 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f0>
 80103b6:	e6e5      	b.n	8010184 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 80103b8:	eba6 0308 	sub.w	r3, r6, r8
 80103bc:	f04f 0802 	mov.w	r8, #2
 80103c0:	fb93 f3f8 	sdiv	r3, r3, r8
 80103c4:	e706      	b.n	80101d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 80103c6:	4413      	add	r3, r2
 80103c8:	1af3      	subs	r3, r6, r3
 80103ca:	e703      	b.n	80101d4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14c>
 80103cc:	8926      	ldrh	r6, [r4, #8]
 80103ce:	8965      	ldrh	r5, [r4, #10]
 80103d0:	1ab2      	subs	r2, r6, r2
 80103d2:	eba5 050b 	sub.w	r5, r5, fp
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	b22d      	sxth	r5, r5
 80103da:	b21e      	sxth	r6, r3
 80103dc:	e717      	b.n	801020e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 80103de:	8965      	ldrh	r5, [r4, #10]
 80103e0:	2600      	movs	r6, #0
 80103e2:	1aaa      	subs	r2, r5, r2
 80103e4:	1ad3      	subs	r3, r2, r3
 80103e6:	b21d      	sxth	r5, r3
 80103e8:	463b      	mov	r3, r7
 80103ea:	465f      	mov	r7, fp
 80103ec:	469b      	mov	fp, r3
 80103ee:	e70e      	b.n	801020e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>
 80103f0:	2500      	movs	r5, #0
 80103f2:	e70c      	b.n	801020e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x186>

080103f4 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80103f4:	b508      	push	{r3, lr}
 80103f6:	4b0b      	ldr	r3, [pc, #44]	; (8010424 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x30>)
 80103f8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d90e      	bls.n	801041e <_ZNK8touchgfx8TextArea12getAlignmentEv+0x2a>
 8010400:	4b09      	ldr	r3, [pc, #36]	; (8010428 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x34>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	b92b      	cbnz	r3, 8010412 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x1e>
 8010406:	4b09      	ldr	r3, [pc, #36]	; (801042c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x38>)
 8010408:	21ae      	movs	r1, #174	; 0xae
 801040a:	4a09      	ldr	r2, [pc, #36]	; (8010430 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x3c>)
 801040c:	4809      	ldr	r0, [pc, #36]	; (8010434 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x40>)
 801040e:	f00f fec1 	bl	8020194 <__assert_func>
 8010412:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010416:	7858      	ldrb	r0, [r3, #1]
 8010418:	f000 0003 	and.w	r0, r0, #3
 801041c:	bd08      	pop	{r3, pc}
 801041e:	2000      	movs	r0, #0
 8010420:	e7fc      	b.n	801041c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x28>
 8010422:	bf00      	nop
 8010424:	2400f20c 	.word	0x2400f20c
 8010428:	2400f208 	.word	0x2400f208
 801042c:	0802343e 	.word	0x0802343e
 8010430:	08024f96 	.word	0x08024f96
 8010434:	080234da 	.word	0x080234da

08010438 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8010438:	4b16      	ldr	r3, [pc, #88]	; (8010494 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x5c>)
 801043a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010440:	4604      	mov	r4, r0
 8010442:	881b      	ldrh	r3, [r3, #0]
 8010444:	428b      	cmp	r3, r1
 8010446:	d921      	bls.n	801048c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x54>
 8010448:	6803      	ldr	r3, [r0, #0]
 801044a:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801044c:	4b12      	ldr	r3, [pc, #72]	; (8010498 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x60>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	b92b      	cbnz	r3, 801045e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x26>
 8010452:	4b12      	ldr	r3, [pc, #72]	; (801049c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x64>)
 8010454:	21ae      	movs	r1, #174	; 0xae
 8010456:	4a12      	ldr	r2, [pc, #72]	; (80104a0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x68>)
 8010458:	4812      	ldr	r0, [pc, #72]	; (80104a4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x6c>)
 801045a:	f00f fe9b 	bl	8020194 <__assert_func>
 801045e:	4b12      	ldr	r3, [pc, #72]	; (80104a8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x70>)
 8010460:	6818      	ldr	r0, [r3, #0]
 8010462:	f7f2 fcb7 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	4606      	mov	r6, r0
 801046a:	4620      	mov	r0, r4
 801046c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801046e:	4798      	blx	r3
 8010470:	6823      	ldr	r3, [r4, #0]
 8010472:	4607      	mov	r7, r0
 8010474:	4620      	mov	r0, r4
 8010476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801047a:	4798      	blx	r3
 801047c:	463a      	mov	r2, r7
 801047e:	4603      	mov	r3, r0
 8010480:	4631      	mov	r1, r6
 8010482:	4620      	mov	r0, r4
 8010484:	46ac      	mov	ip, r5
 8010486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801048a:	4760      	bx	ip
 801048c:	2000      	movs	r0, #0
 801048e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010492:	bf00      	nop
 8010494:	2400f20c 	.word	0x2400f20c
 8010498:	2400f208 	.word	0x2400f208
 801049c:	0802343e 	.word	0x0802343e
 80104a0:	08024f96 	.word	0x08024f96
 80104a4:	080234da 	.word	0x080234da
 80104a8:	2400f214 	.word	0x2400f214

080104ac <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	6803      	ldr	r3, [r0, #0]
 80104b0:	4604      	mov	r4, r0
 80104b2:	4615      	mov	r5, r2
 80104b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b6:	4798      	blx	r3
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	4629      	mov	r1, r5
 80104bc:	4620      	mov	r0, r4
 80104be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80104c4:	4718      	bx	r3
	...

080104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4b0e      	ldr	r3, [pc, #56]	; (8010504 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80104cc:	4604      	mov	r4, r0
 80104ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d214      	bcs.n	8010500 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80104d6:	6803      	ldr	r3, [r0, #0]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104da:	4798      	blx	r3
 80104dc:	6823      	ldr	r3, [r4, #0]
 80104de:	4605      	mov	r5, r0
 80104e0:	4620      	mov	r0, r4
 80104e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e4:	4798      	blx	r3
 80104e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80104ea:	b22d      	sxth	r5, r5
 80104ec:	4601      	mov	r1, r0
 80104ee:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80104f2:	bf06      	itte	eq
 80104f4:	4602      	moveq	r2, r0
 80104f6:	4629      	moveq	r1, r5
 80104f8:	462a      	movne	r2, r5
 80104fa:	4620      	mov	r0, r4
 80104fc:	f7ff ffd6 	bl	80104ac <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8010500:	bd38      	pop	{r3, r4, r5, pc}
 8010502:	bf00      	nop
 8010504:	2400f20c 	.word	0x2400f20c

08010508 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8010508:	b530      	push	{r4, r5, lr}
 801050a:	888b      	ldrh	r3, [r1, #4]
 801050c:	b085      	sub	sp, #20
 801050e:	4604      	mov	r4, r0
 8010510:	8583      	strh	r3, [r0, #44]	; 0x2c
 8010512:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8010516:	b923      	cbnz	r3, 8010522 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8010518:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801051c:	b90b      	cbnz	r3, 8010522 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801051e:	f7ff ffd3 	bl	80104c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8010522:	6823      	ldr	r3, [r4, #0]
 8010524:	466d      	mov	r5, sp
 8010526:	4621      	mov	r1, r4
 8010528:	343c      	adds	r4, #60	; 0x3c
 801052a:	4628      	mov	r0, r5
 801052c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010530:	4798      	blx	r3
 8010532:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801053a:	b005      	add	sp, #20
 801053c:	bd30      	pop	{r4, r5, pc}

0801053e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801053e:	2300      	movs	r3, #0
 8010540:	8083      	strh	r3, [r0, #4]
 8010542:	80c3      	strh	r3, [r0, #6]
 8010544:	8003      	strh	r3, [r0, #0]
 8010546:	8043      	strh	r3, [r0, #2]
 8010548:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801054c:	2bff      	cmp	r3, #255	; 0xff
 801054e:	bf01      	itttt	eq
 8010550:	890b      	ldrheq	r3, [r1, #8]
 8010552:	8083      	strheq	r3, [r0, #4]
 8010554:	894b      	ldrheq	r3, [r1, #10]
 8010556:	80c3      	strheq	r3, [r0, #6]
 8010558:	4770      	bx	lr
	...

0801055c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801055c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801055e:	4604      	mov	r4, r0
 8010560:	466b      	mov	r3, sp
 8010562:	6808      	ldr	r0, [r1, #0]
 8010564:	6849      	ldr	r1, [r1, #4]
 8010566:	c303      	stmia	r3!, {r0, r1}
 8010568:	6823      	ldr	r3, [r4, #0]
 801056a:	4669      	mov	r1, sp
 801056c:	4620      	mov	r0, r4
 801056e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010570:	4798      	blx	r3
 8010572:	4b08      	ldr	r3, [pc, #32]	; (8010594 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801057a:	b10a      	cbz	r2, 8010580 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801057c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801057e:	b900      	cbnz	r0, 8010582 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010580:	6898      	ldr	r0, [r3, #8]
 8010582:	6803      	ldr	r3, [r0, #0]
 8010584:	4669      	mov	r1, sp
 8010586:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010588:	6a1d      	ldr	r5, [r3, #32]
 801058a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801058e:	47a8      	blx	r5
 8010590:	b003      	add	sp, #12
 8010592:	bd30      	pop	{r4, r5, pc}
 8010594:	2400f198 	.word	0x2400f198

08010598 <_ZN8touchgfx3BoxD1Ev>:
 8010598:	4770      	bx	lr

0801059a <_ZN8touchgfx3BoxD0Ev>:
 801059a:	b510      	push	{r4, lr}
 801059c:	4604      	mov	r4, r0
 801059e:	212c      	movs	r1, #44	; 0x2c
 80105a0:	f00e ffd1 	bl	801f546 <_ZdlPvj>
 80105a4:	4620      	mov	r0, r4
 80105a6:	bd10      	pop	{r4, pc}

080105a8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80105a8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80105ac:	b12a      	cbz	r2, 80105ba <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80105ae:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80105b2:	b112      	cbz	r2, 80105ba <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80105b4:	6803      	ldr	r3, [r0, #0]
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	4718      	bx	r3
 80105ba:	4770      	bx	lr

080105bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80105bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c0:	4d38      	ldr	r5, [pc, #224]	; (80106a4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe8>)
 80105c2:	b08c      	sub	sp, #48	; 0x30
 80105c4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80105c6:	4604      	mov	r4, r0
 80105c8:	882b      	ldrh	r3, [r5, #0]
 80105ca:	4689      	mov	r9, r1
 80105cc:	4293      	cmp	r3, r2
 80105ce:	d965      	bls.n	801069c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe0>
 80105d0:	4e35      	ldr	r6, [pc, #212]	; (80106a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xec>)
 80105d2:	6833      	ldr	r3, [r6, #0]
 80105d4:	b92b      	cbnz	r3, 80105e2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x26>
 80105d6:	4b35      	ldr	r3, [pc, #212]	; (80106ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf0>)
 80105d8:	21ae      	movs	r1, #174	; 0xae
 80105da:	4a35      	ldr	r2, [pc, #212]	; (80106b0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf4>)
 80105dc:	4835      	ldr	r0, [pc, #212]	; (80106b4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf8>)
 80105de:	f00f fdd9 	bl	8020194 <__assert_func>
 80105e2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80105e6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80105ea:	4b33      	ldr	r3, [pc, #204]	; (80106b8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xfc>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	d052      	beq.n	801069c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xe0>
 80105f6:	784b      	ldrb	r3, [r1, #1]
 80105f8:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 80105fc:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8010600:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010604:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8010608:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801060c:	4b2b      	ldr	r3, [pc, #172]	; (80106bc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x100>)
 801060e:	f890 8038 	ldrb.w	r8, [r0, #56]	; 0x38
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 8010618:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 801061c:	9207      	str	r2, [sp, #28]
 801061e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8010620:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010624:	f88d a020 	strb.w	sl, [sp, #32]
 8010628:	f88d 8022 	strb.w	r8, [sp, #34]	; 0x22
 801062c:	9009      	str	r0, [sp, #36]	; 0x24
 801062e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8010632:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8010636:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801063a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 801063e:	b10a      	cbz	r2, 8010644 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x88>
 8010640:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8010642:	b907      	cbnz	r7, 8010646 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x8a>
 8010644:	689f      	ldr	r7, [r3, #8]
 8010646:	f10d 0814 	add.w	r8, sp, #20
 801064a:	4621      	mov	r1, r4
 801064c:	4640      	mov	r0, r8
 801064e:	f002 fea3 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010652:	6833      	ldr	r3, [r6, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d0be      	beq.n	80105d6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x1a>
 8010658:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801065a:	882b      	ldrh	r3, [r5, #0]
 801065c:	428b      	cmp	r3, r1
 801065e:	d803      	bhi.n	8010668 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xac>
 8010660:	4b17      	ldr	r3, [pc, #92]	; (80106c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x104>)
 8010662:	21af      	movs	r1, #175	; 0xaf
 8010664:	4a12      	ldr	r2, [pc, #72]	; (80106b0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xf4>)
 8010666:	e7b9      	b.n	80105dc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x20>
 8010668:	4b16      	ldr	r3, [pc, #88]	; (80106c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x108>)
 801066a:	6818      	ldr	r0, [r3, #0]
 801066c:	f7f2 fbb2 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 8010670:	6823      	ldr	r3, [r4, #0]
 8010672:	4605      	mov	r5, r0
 8010674:	4620      	mov	r0, r4
 8010676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010678:	4798      	blx	r3
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	4606      	mov	r6, r0
 801067e:	4620      	mov	r0, r4
 8010680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010684:	4798      	blx	r3
 8010686:	ab07      	add	r3, sp, #28
 8010688:	9501      	str	r5, [sp, #4]
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	464b      	mov	r3, r9
 801068e:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8010692:	4638      	mov	r0, r7
 8010694:	e898 0006 	ldmia.w	r8, {r1, r2}
 8010698:	f7f2 fb4e 	bl	8002d38 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801069c:	b00c      	add	sp, #48	; 0x30
 801069e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106a2:	bf00      	nop
 80106a4:	2400f20c 	.word	0x2400f20c
 80106a8:	2400f208 	.word	0x2400f208
 80106ac:	0802343e 	.word	0x0802343e
 80106b0:	0802502c 	.word	0x0802502c
 80106b4:	080234da 	.word	0x080234da
 80106b8:	2400f210 	.word	0x2400f210
 80106bc:	2400f198 	.word	0x2400f198
 80106c0:	08023503 	.word	0x08023503
 80106c4:	2400f214 	.word	0x2400f214

080106c8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80106c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106cc:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80106d0:	b0a0      	sub	sp, #128	; 0x80
 80106d2:	4604      	mov	r4, r0
 80106d4:	b193      	cbz	r3, 80106fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80106d6:	4b33      	ldr	r3, [pc, #204]	; (80107a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80106d8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	428b      	cmp	r3, r1
 80106de:	d90d      	bls.n	80106fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80106e0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	dd09      	ble.n	80106fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80106e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	dd05      	ble.n	80106fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80106f0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80106f4:	b12b      	cbz	r3, 8010702 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80106f6:	6803      	ldr	r3, [r0, #0]
 80106f8:	695b      	ldr	r3, [r3, #20]
 80106fa:	4798      	blx	r3
 80106fc:	b020      	add	sp, #128	; 0x80
 80106fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010702:	4b29      	ldr	r3, [pc, #164]	; (80107a8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xe0>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	b92b      	cbnz	r3, 8010714 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x4c>
 8010708:	4b28      	ldr	r3, [pc, #160]	; (80107ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xe4>)
 801070a:	21ae      	movs	r1, #174	; 0xae
 801070c:	4a28      	ldr	r2, [pc, #160]	; (80107b0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xe8>)
 801070e:	4829      	ldr	r0, [pc, #164]	; (80107b4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xec>)
 8010710:	f00f fd40 	bl	8020194 <__assert_func>
 8010714:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8010718:	4b27      	ldr	r3, [pc, #156]	; (80107b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xf0>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010720:	4b26      	ldr	r3, [pc, #152]	; (80107bc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xf4>)
 8010722:	6818      	ldr	r0, [r3, #0]
 8010724:	f7f2 fb56 	bl	8002dd4 <_ZNK8touchgfx5Texts7getTextEt>
 8010728:	4606      	mov	r6, r0
 801072a:	a807      	add	r0, sp, #28
 801072c:	f003 fabe 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8010730:	682b      	ldr	r3, [r5, #0]
 8010732:	4628      	mov	r0, r5
 8010734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010736:	4798      	blx	r3
 8010738:	682b      	ldr	r3, [r5, #0]
 801073a:	4607      	mov	r7, r0
 801073c:	4628      	mov	r0, r5
 801073e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010740:	4798      	blx	r3
 8010742:	6823      	ldr	r3, [r4, #0]
 8010744:	4605      	mov	r5, r0
 8010746:	4620      	mov	r0, r4
 8010748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801074a:	4798      	blx	r3
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	4680      	mov	r8, r0
 8010750:	4620      	mov	r0, r4
 8010752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010756:	4798      	blx	r3
 8010758:	462b      	mov	r3, r5
 801075a:	463a      	mov	r2, r7
 801075c:	4631      	mov	r1, r6
 801075e:	e9cd 8000 	strd	r8, r0, [sp]
 8010762:	a807      	add	r0, sp, #28
 8010764:	f003 fb23 	bl	8013dae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8010768:	a807      	add	r0, sp, #28
 801076a:	f003 ff17 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801076e:	280a      	cmp	r0, #10
 8010770:	d103      	bne.n	801077a <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xb2>
 8010772:	6823      	ldr	r3, [r4, #0]
 8010774:	4620      	mov	r0, r4
 8010776:	695b      	ldr	r3, [r3, #20]
 8010778:	e7bf      	b.n	80106fa <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 801077a:	a807      	add	r0, sp, #28
 801077c:	f003 ff0e 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010780:	2800      	cmp	r0, #0
 8010782:	d1f4      	bne.n	801076e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa6>
 8010784:	ad04      	add	r5, sp, #16
 8010786:	4621      	mov	r1, r4
 8010788:	4628      	mov	r0, r5
 801078a:	f7ff fc7d 	bl	8010088 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801078e:	ab02      	add	r3, sp, #8
 8010790:	6822      	ldr	r2, [r4, #0]
 8010792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8010796:	6912      	ldr	r2, [r2, #16]
 8010798:	e883 0003 	stmia.w	r3, {r0, r1}
 801079c:	4619      	mov	r1, r3
 801079e:	4620      	mov	r0, r4
 80107a0:	4790      	blx	r2
 80107a2:	e7ab      	b.n	80106fc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80107a4:	2400f20c 	.word	0x2400f20c
 80107a8:	2400f208 	.word	0x2400f208
 80107ac:	0802343e 	.word	0x0802343e
 80107b0:	0802502c 	.word	0x0802502c
 80107b4:	080234da 	.word	0x080234da
 80107b8:	2400f210 	.word	0x2400f210
 80107bc:	2400f214 	.word	0x2400f214

080107c0 <_ZN8touchgfx5ImageD1Ev>:
 80107c0:	4770      	bx	lr

080107c2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80107c2:	b570      	push	{r4, r5, r6, lr}
 80107c4:	880b      	ldrh	r3, [r1, #0]
 80107c6:	460d      	mov	r5, r1
 80107c8:	4604      	mov	r4, r0
 80107ca:	84c3      	strh	r3, [r0, #38]	; 0x26
 80107cc:	4608      	mov	r0, r1
 80107ce:	f004 ff4f 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80107d2:	4606      	mov	r6, r0
 80107d4:	4628      	mov	r0, r5
 80107d6:	f004 ff8f 	bl	80156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80107da:	6823      	ldr	r3, [r4, #0]
 80107dc:	4605      	mov	r5, r0
 80107de:	b231      	sxth	r1, r6
 80107e0:	4620      	mov	r0, r4
 80107e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e4:	4798      	blx	r3
 80107e6:	6823      	ldr	r3, [r4, #0]
 80107e8:	b229      	sxth	r1, r5
 80107ea:	4620      	mov	r0, r4
 80107ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107f2:	4718      	bx	r3

080107f4 <_ZN8touchgfx5ImageD0Ev>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	4604      	mov	r4, r0
 80107f8:	212c      	movs	r1, #44	; 0x2c
 80107fa:	f00e fea4 	bl	801f546 <_ZdlPvj>
 80107fe:	4620      	mov	r0, r4
 8010800:	bd10      	pop	{r4, pc}

08010802 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8010802:	b510      	push	{r4, lr}
 8010804:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8010808:	4604      	mov	r4, r0
 801080a:	2bff      	cmp	r3, #255	; 0xff
 801080c:	d006      	beq.n	801081c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801080e:	2300      	movs	r3, #0
 8010810:	8003      	strh	r3, [r0, #0]
 8010812:	8043      	strh	r3, [r0, #2]
 8010814:	8083      	strh	r3, [r0, #4]
 8010816:	80c3      	strh	r3, [r0, #6]
 8010818:	4620      	mov	r0, r4
 801081a:	bd10      	pop	{r4, pc}
 801081c:	3126      	adds	r1, #38	; 0x26
 801081e:	f004 ffaf 	bl	8015780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010822:	e7f9      	b.n	8010818 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010824 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010824:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8010828:	b12a      	cbz	r2, 8010836 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801082a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801082e:	b112      	cbz	r2, 8010836 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8010830:	6803      	ldr	r3, [r0, #0]
 8010832:	695b      	ldr	r3, [r3, #20]
 8010834:	4718      	bx	r3
 8010836:	4770      	bx	lr

08010838 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801083c:	4604      	mov	r4, r0
 801083e:	b088      	sub	sp, #32
 8010840:	2500      	movs	r5, #0
 8010842:	460f      	mov	r7, r1
 8010844:	f854 3b26 	ldr.w	r3, [r4], #38
 8010848:	a904      	add	r1, sp, #16
 801084a:	4606      	mov	r6, r0
 801084c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010852:	4798      	blx	r3
 8010854:	4620      	mov	r0, r4
 8010856:	f004 ff0b 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801085a:	4680      	mov	r8, r0
 801085c:	4620      	mov	r0, r4
 801085e:	f004 ff4b 	bl	80156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010862:	9506      	str	r5, [sp, #24]
 8010864:	ad06      	add	r5, sp, #24
 8010866:	f8ad 001e 	strh.w	r0, [sp, #30]
 801086a:	4639      	mov	r1, r7
 801086c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8010870:	4628      	mov	r0, r5
 8010872:	f7fc fbdf 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8010876:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801087a:	2b00      	cmp	r3, #0
 801087c:	dd19      	ble.n	80108b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801087e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8010882:	2b00      	cmp	r3, #0
 8010884:	dd15      	ble.n	80108b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8010886:	4b0c      	ldr	r3, [pc, #48]	; (80108b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801088e:	b10a      	cbz	r2, 8010894 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8010890:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010892:	b900      	cbnz	r0, 8010896 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8010894:	6898      	ldr	r0, [r3, #8]
 8010896:	2701      	movs	r7, #1
 8010898:	6801      	ldr	r1, [r0, #0]
 801089a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801089e:	9702      	str	r7, [sp, #8]
 80108a0:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80108a4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80108a8:	e9cd 5600 	strd	r5, r6, [sp]
 80108ac:	688d      	ldr	r5, [r1, #8]
 80108ae:	4621      	mov	r1, r4
 80108b0:	47a8      	blx	r5
 80108b2:	b008      	add	sp, #32
 80108b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b8:	2400f198 	.word	0x2400f198

080108bc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80108bc:	4b02      	ldr	r3, [pc, #8]	; (80108c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80108be:	6018      	str	r0, [r3, #0]
 80108c0:	4b02      	ldr	r3, [pc, #8]	; (80108cc <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80108c2:	6019      	str	r1, [r3, #0]
 80108c4:	4770      	bx	lr
 80108c6:	bf00      	nop
 80108c8:	2400f1a0 	.word	0x2400f1a0
 80108cc:	2400f1b4 	.word	0x2400f1b4

080108d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4c2b      	ldr	r4, [pc, #172]	; (8010980 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb0>)
 80108d4:	4b2b      	ldr	r3, [pc, #172]	; (8010984 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb4>)
 80108d6:	6821      	ldr	r1, [r4, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	4281      	cmp	r1, r0
 80108dc:	4d2a      	ldr	r5, [pc, #168]	; (8010988 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xb8>)
 80108de:	492b      	ldr	r1, [pc, #172]	; (801098c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xbc>)
 80108e0:	d108      	bne.n	80108f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80108e2:	682b      	ldr	r3, [r5, #0]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d105      	bne.n	80108f4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x24>
 80108e8:	6808      	ldr	r0, [r1, #0]
 80108ea:	280f      	cmp	r0, #15
 80108ec:	bf94      	ite	ls
 80108ee:	2000      	movls	r0, #0
 80108f0:	2001      	movhi	r0, #1
 80108f2:	bd38      	pop	{r3, r4, r5, pc}
 80108f4:	4b26      	ldr	r3, [pc, #152]	; (8010990 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc0>)
 80108f6:	6020      	str	r0, [r4, #0]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	602a      	str	r2, [r5, #0]
 80108fc:	4298      	cmp	r0, r3
 80108fe:	d905      	bls.n	801090c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x3c>
 8010900:	4b24      	ldr	r3, [pc, #144]	; (8010994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010902:	2135      	movs	r1, #53	; 0x35
 8010904:	4a24      	ldr	r2, [pc, #144]	; (8010998 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010906:	4825      	ldr	r0, [pc, #148]	; (801099c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xcc>)
 8010908:	f00f fc44 	bl	8020194 <__assert_func>
 801090c:	f010 0403 	ands.w	r4, r0, #3
 8010910:	bf1f      	itttt	ne
 8010912:	f1c4 0504 	rsbne	r5, r4, #4
 8010916:	3b04      	subne	r3, #4
 8010918:	1952      	addne	r2, r2, r5
 801091a:	191b      	addne	r3, r3, r4
 801091c:	4d20      	ldr	r5, [pc, #128]	; (80109a0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd0>)
 801091e:	4402      	add	r2, r0
 8010920:	1a1b      	subs	r3, r3, r0
 8010922:	3001      	adds	r0, #1
 8010924:	602a      	str	r2, [r5, #0]
 8010926:	f020 0401 	bic.w	r4, r0, #1
 801092a:	42a3      	cmp	r3, r4
 801092c:	d203      	bcs.n	8010936 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x66>
 801092e:	4b19      	ldr	r3, [pc, #100]	; (8010994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010930:	2148      	movs	r1, #72	; 0x48
 8010932:	4a19      	ldr	r2, [pc, #100]	; (8010998 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010934:	e7e7      	b.n	8010906 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 8010936:	f010 0002 	ands.w	r0, r0, #2
 801093a:	bf1f      	itttt	ne
 801093c:	f1c0 0504 	rsbne	r5, r0, #4
 8010940:	1952      	addne	r2, r2, r5
 8010942:	1f05      	subne	r5, r0, #4
 8010944:	195b      	addne	r3, r3, r5
 8010946:	4422      	add	r2, r4
 8010948:	4d16      	ldr	r5, [pc, #88]	; (80109a4 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd4>)
 801094a:	1b1b      	subs	r3, r3, r4
 801094c:	602a      	str	r2, [r5, #0]
 801094e:	429c      	cmp	r4, r3
 8010950:	d903      	bls.n	801095a <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x8a>
 8010952:	4b10      	ldr	r3, [pc, #64]	; (8010994 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc4>)
 8010954:	215b      	movs	r1, #91	; 0x5b
 8010956:	4a10      	ldr	r2, [pc, #64]	; (8010998 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 8010958:	e7d5      	b.n	8010906 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801095a:	b120      	cbz	r0, 8010966 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x96>
 801095c:	f1c0 0504 	rsb	r5, r0, #4
 8010960:	3804      	subs	r0, #4
 8010962:	442a      	add	r2, r5
 8010964:	4403      	add	r3, r0
 8010966:	1b1b      	subs	r3, r3, r4
 8010968:	4422      	add	r2, r4
 801096a:	480f      	ldr	r0, [pc, #60]	; (80109a8 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xd8>)
 801096c:	2b0f      	cmp	r3, #15
 801096e:	600b      	str	r3, [r1, #0]
 8010970:	6002      	str	r2, [r0, #0]
 8010972:	d803      	bhi.n	801097c <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xac>
 8010974:	4b0d      	ldr	r3, [pc, #52]	; (80109ac <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xdc>)
 8010976:	216e      	movs	r1, #110	; 0x6e
 8010978:	4a07      	ldr	r2, [pc, #28]	; (8010998 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0xc8>)
 801097a:	e7c4      	b.n	8010906 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x36>
 801097c:	2001      	movs	r0, #1
 801097e:	e7b8      	b.n	80108f2 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj+0x22>
 8010980:	2400f1a8 	.word	0x2400f1a8
 8010984:	2400f1a0 	.word	0x2400f1a0
 8010988:	2400f1b0 	.word	0x2400f1b0
 801098c:	2400f1b8 	.word	0x2400f1b8
 8010990:	2400f1b4 	.word	0x2400f1b4
 8010994:	080250c8 	.word	0x080250c8
 8010998:	08025190 	.word	0x08025190
 801099c:	08025101 	.word	0x08025101
 80109a0:	2400f1bc 	.word	0x2400f1bc
 80109a4:	2400f1ac 	.word	0x2400f1ac
 80109a8:	2400f1a4 	.word	0x2400f1a4
 80109ac:	0802514b 	.word	0x0802514b

080109b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>:
 80109b0:	4b04      	ldr	r3, [pc, #16]	; (80109c4 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x14>)
 80109b2:	6818      	ldr	r0, [r3, #0]
 80109b4:	b120      	cbz	r0, 80109c0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x10>
 80109b6:	4b04      	ldr	r3, [pc, #16]	; (80109c8 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv+0x18>)
 80109b8:	6818      	ldr	r0, [r3, #0]
 80109ba:	3000      	adds	r0, #0
 80109bc:	bf18      	it	ne
 80109be:	2001      	movne	r0, #1
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	2400f1a0 	.word	0x2400f1a0
 80109c8:	2400f1b4 	.word	0x2400f1b4

080109cc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>:
 80109cc:	4b01      	ldr	r3, [pc, #4]	; (80109d4 <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv+0x8>)
 80109ce:	6818      	ldr	r0, [r3, #0]
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	2400f1a8 	.word	0x2400f1a8

080109d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>:
 80109d8:	4b01      	ldr	r3, [pc, #4]	; (80109e0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv+0x8>)
 80109da:	6818      	ldr	r0, [r3, #0]
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	2400f1b0 	.word	0x2400f1b0

080109e4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>:
 80109e4:	4b01      	ldr	r3, [pc, #4]	; (80109ec <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv+0x8>)
 80109e6:	6818      	ldr	r0, [r3, #0]
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	2400f1bc 	.word	0x2400f1bc

080109f0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>:
 80109f0:	4b01      	ldr	r3, [pc, #4]	; (80109f8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv+0x8>)
 80109f2:	6818      	ldr	r0, [r3, #0]
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	2400f1ac 	.word	0x2400f1ac

080109fc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80109fc:	4b01      	ldr	r3, [pc, #4]	; (8010a04 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80109fe:	6818      	ldr	r0, [r3, #0]
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	2400f1a4 	.word	0x2400f1a4

08010a08 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8010a08:	4b01      	ldr	r3, [pc, #4]	; (8010a10 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8010a0a:	6818      	ldr	r0, [r3, #0]
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	2400f1b8 	.word	0x2400f1b8

08010a14 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8010a14:	b510      	push	{r4, lr}
 8010a16:	6803      	ldr	r3, [r0, #0]
 8010a18:	460c      	mov	r4, r1
 8010a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1c:	4798      	blx	r3
 8010a1e:	1b03      	subs	r3, r0, r4
 8010a20:	4258      	negs	r0, r3
 8010a22:	4158      	adcs	r0, r3
 8010a24:	bd10      	pop	{r4, pc}
	...

08010a28 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8010a28:	4b01      	ldr	r3, [pc, #4]	; (8010a30 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8010a2a:	6019      	str	r1, [r3, #0]
 8010a2c:	4770      	bx	lr
 8010a2e:	bf00      	nop
 8010a30:	2400f1c0 	.word	0x2400f1c0

08010a34 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a38:	4696      	mov	lr, r2
 8010a3a:	b097      	sub	sp, #92	; 0x5c
 8010a3c:	4605      	mov	r5, r0
 8010a3e:	4614      	mov	r4, r2
 8010a40:	460e      	mov	r6, r1
 8010a42:	461f      	mov	r7, r3
 8010a44:	f10d 0c1c 	add.w	ip, sp, #28
 8010a48:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8010a4c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8010a50:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8010a54:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a5c:	f8de 3000 	ldr.w	r3, [lr]
 8010a60:	f104 0e14 	add.w	lr, r4, #20
 8010a64:	f8cc 3000 	str.w	r3, [ip]
 8010a68:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010a6c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a74:	f8de 3000 	ldr.w	r3, [lr]
 8010a78:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010a7c:	f8cc 3000 	str.w	r3, [ip]
 8010a80:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010a84:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a8c:	f8de 3000 	ldr.w	r3, [lr]
 8010a90:	4631      	mov	r1, r6
 8010a92:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a94:	4628      	mov	r0, r5
 8010a96:	f8cc 3000 	str.w	r3, [ip]
 8010a9a:	682b      	ldr	r3, [r5, #0]
 8010a9c:	9201      	str	r2, [sp, #4]
 8010a9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010aa0:	f8cd 8008 	str.w	r8, [sp, #8]
 8010aa4:	9200      	str	r2, [sp, #0]
 8010aa6:	aa07      	add	r2, sp, #28
 8010aa8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010aac:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8010ab0:	463b      	mov	r3, r7
 8010ab2:	47d8      	blx	fp
 8010ab4:	46a6      	mov	lr, r4
 8010ab6:	f10d 0c1c 	add.w	ip, sp, #28
 8010aba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010abe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ac2:	f8de 3000 	ldr.w	r3, [lr]
 8010ac6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8010aca:	343c      	adds	r4, #60	; 0x3c
 8010acc:	f8cc 3000 	str.w	r3, [ip]
 8010ad0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010ad4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010adc:	f8de 3000 	ldr.w	r3, [lr]
 8010ae0:	f8cc 3000 	str.w	r3, [ip]
 8010ae4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8010ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010aea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aee:	6823      	ldr	r3, [r4, #0]
 8010af0:	4631      	mov	r1, r6
 8010af2:	4628      	mov	r0, r5
 8010af4:	f8cc 3000 	str.w	r3, [ip]
 8010af8:	682b      	ldr	r3, [r5, #0]
 8010afa:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8010afe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010b00:	f8cd 8008 	str.w	r8, [sp, #8]
 8010b04:	9201      	str	r2, [sp, #4]
 8010b06:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010b08:	9200      	str	r2, [sp, #0]
 8010b0a:	aa07      	add	r2, sp, #28
 8010b0c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8010b0e:	463b      	mov	r3, r7
 8010b10:	47a0      	blx	r4
 8010b12:	b017      	add	sp, #92	; 0x5c
 8010b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b18 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8010b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1c:	b08d      	sub	sp, #52	; 0x34
 8010b1e:	4688      	mov	r8, r1
 8010b20:	f8d3 c000 	ldr.w	ip, [r3]
 8010b24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010b26:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8010b2a:	680f      	ldr	r7, [r1, #0]
 8010b2c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8010b30:	eba7 070c 	sub.w	r7, r7, ip
 8010b34:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8010b38:	edd3 6a07 	vldr	s13, [r3, #28]
 8010b3c:	42bc      	cmp	r4, r7
 8010b3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b40:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8010b44:	bfa8      	it	ge
 8010b46:	463c      	movge	r4, r7
 8010b48:	f9b1 9000 	ldrsh.w	r9, [r1]
 8010b4c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8010b50:	ee07 4a90 	vmov	s15, r4
 8010b54:	eb09 0e0c 	add.w	lr, r9, ip
 8010b58:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8010b5c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8010b60:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8010b64:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8010b68:	4571      	cmp	r1, lr
 8010b6a:	ee25 4a04 	vmul.f32	s8, s10, s8
 8010b6e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8010b72:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010b76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b7a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8010b7e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8010b82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010b86:	ee36 0a84 	vadd.f32	s0, s13, s8
 8010b8a:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010b8e:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010b92:	f340 808c 	ble.w	8010cae <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8010b96:	eba1 060e 	sub.w	r6, r1, lr
 8010b9a:	fb96 f5f4 	sdiv	r5, r6, r4
 8010b9e:	ee07 5a10 	vmov	s14, r5
 8010ba2:	2d00      	cmp	r5, #0
 8010ba4:	fb04 6615 	mls	r6, r4, r5, r6
 8010ba8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010bac:	eea7 0a04 	vfma.f32	s0, s14, s8
 8010bb0:	eee7 0a24 	vfma.f32	s1, s14, s9
 8010bb4:	eea7 1a05 	vfma.f32	s2, s14, s10
 8010bb8:	dd12      	ble.n	8010be0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8010bba:	ee70 6a44 	vsub.f32	s13, s0, s8
 8010bbe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8010bc2:	ee31 2a45 	vsub.f32	s4, s2, s10
 8010bc6:	eef5 6a40 	vcmp.f32	s13, #0.0
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	bf14      	ite	ne
 8010bd0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8010bd4:	eeb0 7a67 	vmoveq.f32	s14, s15
 8010bd8:	ee61 1a87 	vmul.f32	s3, s3, s14
 8010bdc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8010be0:	fb05 f204 	mul.w	r2, r5, r4
 8010be4:	1abf      	subs	r7, r7, r2
 8010be6:	4494      	add	ip, r2
 8010be8:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8010bec:	4411      	add	r1, r2
 8010bee:	eb09 020c 	add.w	r2, r9, ip
 8010bf2:	b209      	sxth	r1, r1
 8010bf4:	443a      	add	r2, r7
 8010bf6:	428a      	cmp	r2, r1
 8010bf8:	bfc4      	itt	gt
 8010bfa:	eba1 0209 	subgt.w	r2, r1, r9
 8010bfe:	eba2 070c 	subgt.w	r7, r2, ip
 8010c02:	2f00      	cmp	r7, #0
 8010c04:	dd50      	ble.n	8010ca8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8010c06:	fb97 f1f4 	sdiv	r1, r7, r4
 8010c0a:	fb04 7211 	mls	r2, r4, r1, r7
 8010c0e:	b90a      	cbnz	r2, 8010c14 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8010c10:	3901      	subs	r1, #1
 8010c12:	4622      	mov	r2, r4
 8010c14:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8010c18:	6840      	ldr	r0, [r0, #4]
 8010c1a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8010c1e:	44b6      	add	lr, r6
 8010c20:	f8d0 a000 	ldr.w	sl, [r0]
 8010c24:	2900      	cmp	r1, #0
 8010c26:	bfcc      	ite	gt
 8010c28:	46a1      	movgt	r9, r4
 8010c2a:	4691      	movle	r9, r2
 8010c2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010c2e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010c30:	fb04 e505 	mla	r5, r4, r5, lr
 8010c34:	eef0 6a42 	vmov.f32	s13, s4
 8010c38:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8010c3c:	9008      	str	r0, [sp, #32]
 8010c3e:	eeb0 7a61 	vmov.f32	s14, s3
 8010c42:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010c44:	695b      	ldr	r3, [r3, #20]
 8010c46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8010c4a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8010c4e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8010c52:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010c54:	445b      	add	r3, fp
 8010c56:	9307      	str	r3, [sp, #28]
 8010c58:	ee16 3a90 	vmov	r3, s13
 8010c5c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8010c60:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8010c64:	ee21 3a23 	vmul.f32	s6, s2, s7
 8010c68:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8010c6c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010c70:	ee17 7a90 	vmov	r7, s15
 8010c74:	ee73 7a42 	vsub.f32	s15, s6, s4
 8010c78:	fb97 f7f4 	sdiv	r7, r7, r4
 8010c7c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8010c80:	ee17 ca90 	vmov	ip, s15
 8010c84:	fb9c fcf4 	sdiv	ip, ip, r4
 8010c88:	fb0c 3306 	mla	r3, ip, r6, r3
 8010c8c:	9302      	str	r3, [sp, #8]
 8010c8e:	ee17 3a10 	vmov	r3, s14
 8010c92:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8010c96:	fb07 3706 	mla	r7, r7, r6, r3
 8010c9a:	eba9 0306 	sub.w	r3, r9, r6
 8010c9e:	e9cd 4700 	strd	r4, r7, [sp]
 8010ca2:	f8da 4008 	ldr.w	r4, [sl, #8]
 8010ca6:	47a0      	blx	r4
 8010ca8:	b00d      	add	sp, #52	; 0x34
 8010caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cae:	2500      	movs	r5, #0
 8010cb0:	462e      	mov	r6, r5
 8010cb2:	e799      	b.n	8010be8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08010cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb8:	b0db      	sub	sp, #364	; 0x16c
 8010cba:	461d      	mov	r5, r3
 8010cbc:	4614      	mov	r4, r2
 8010cbe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8010cc2:	910f      	str	r1, [sp, #60]	; 0x3c
 8010cc4:	4629      	mov	r1, r5
 8010cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8010cc8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8010ccc:	9009      	str	r0, [sp, #36]	; 0x24
 8010cce:	930b      	str	r3, [sp, #44]	; 0x2c
 8010cd0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8010cd4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8010cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8010cda:	6803      	ldr	r3, [r0, #0]
 8010cdc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8010cde:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ce2:	47b8      	blx	r7
 8010ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ce6:	6058      	str	r0, [r3, #4]
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	f000 83a1 	beq.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010cee:	682b      	ldr	r3, [r5, #0]
 8010cf0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010cf4:	ed94 7a02 	vldr	s14, [r4, #8]
 8010cf8:	9314      	str	r3, [sp, #80]	; 0x50
 8010cfa:	686b      	ldr	r3, [r5, #4]
 8010cfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d00:	9315      	str	r3, [sp, #84]	; 0x54
 8010d02:	4bc1      	ldr	r3, [pc, #772]	; (8011008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010d04:	7819      	ldrb	r1, [r3, #0]
 8010d06:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010d0a:	2900      	cmp	r1, #0
 8010d0c:	bf16      	itet	ne
 8010d0e:	4619      	movne	r1, r3
 8010d10:	4611      	moveq	r1, r2
 8010d12:	4613      	movne	r3, r2
 8010d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d18:	9116      	str	r1, [sp, #88]	; 0x58
 8010d1a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8010d1e:	f240 8387 	bls.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d22:	ed94 7a07 	vldr	s14, [r4, #28]
 8010d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d2e:	f240 837f 	bls.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d32:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3e:	f240 8377 	bls.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d42:	6822      	ldr	r2, [r4, #0]
 8010d44:	4bb1      	ldr	r3, [pc, #708]	; (801100c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8010d46:	429a      	cmp	r2, r3
 8010d48:	f2c0 8372 	blt.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d4c:	49b0      	ldr	r1, [pc, #704]	; (8011010 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8010d4e:	6963      	ldr	r3, [r4, #20]
 8010d50:	428a      	cmp	r2, r1
 8010d52:	f300 836d 	bgt.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d56:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010d5a:	48ae      	ldr	r0, [pc, #696]	; (8011014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8010d5c:	33ff      	adds	r3, #255	; 0xff
 8010d5e:	4283      	cmp	r3, r0
 8010d60:	f200 8366 	bhi.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010d66:	4dac      	ldr	r5, [pc, #688]	; (8011018 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8010d68:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8010d6c:	33ff      	adds	r3, #255	; 0xff
 8010d6e:	42ab      	cmp	r3, r5
 8010d70:	f200 835e 	bhi.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d74:	6862      	ldr	r2, [r4, #4]
 8010d76:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8010d7a:	33ff      	adds	r3, #255	; 0xff
 8010d7c:	4283      	cmp	r3, r0
 8010d7e:	f200 8357 	bhi.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d82:	69a1      	ldr	r1, [r4, #24]
 8010d84:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8010d88:	33ff      	adds	r3, #255	; 0xff
 8010d8a:	4283      	cmp	r3, r0
 8010d8c:	f200 8350 	bhi.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010d92:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8010d96:	30ff      	adds	r0, #255	; 0xff
 8010d98:	42a8      	cmp	r0, r5
 8010d9a:	f200 8349 	bhi.w	8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010d9e:	428a      	cmp	r2, r1
 8010da0:	f280 8110 	bge.w	8010fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8010da4:	429a      	cmp	r2, r3
 8010da6:	f300 8119 	bgt.w	8010fdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8010daa:	4299      	cmp	r1, r3
 8010dac:	f280 811d 	bge.w	8010fea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8010db0:	2502      	movs	r5, #2
 8010db2:	2701      	movs	r7, #1
 8010db4:	46a9      	mov	r9, r5
 8010db6:	46b8      	mov	r8, r7
 8010db8:	f04f 0a00 	mov.w	sl, #0
 8010dbc:	4621      	mov	r1, r4
 8010dbe:	a849      	add	r0, sp, #292	; 0x124
 8010dc0:	f003 fd36 	bl	8014830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010dc4:	4622      	mov	r2, r4
 8010dc6:	4653      	mov	r3, sl
 8010dc8:	a949      	add	r1, sp, #292	; 0x124
 8010dca:	f8cd 9000 	str.w	r9, [sp]
 8010dce:	a819      	add	r0, sp, #100	; 0x64
 8010dd0:	f003 fe5e 	bl	8014a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010dd4:	4622      	mov	r2, r4
 8010dd6:	4653      	mov	r3, sl
 8010dd8:	a949      	add	r1, sp, #292	; 0x124
 8010dda:	f8cd 8000 	str.w	r8, [sp]
 8010dde:	a829      	add	r0, sp, #164	; 0xa4
 8010de0:	f003 fe56 	bl	8014a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010de4:	4643      	mov	r3, r8
 8010de6:	4622      	mov	r2, r4
 8010de8:	a949      	add	r1, sp, #292	; 0x124
 8010dea:	f8cd 9000 	str.w	r9, [sp]
 8010dee:	a839      	add	r0, sp, #228	; 0xe4
 8010df0:	f003 fe4e 	bl	8014a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010df4:	42af      	cmp	r7, r5
 8010df6:	af12      	add	r7, sp, #72	; 0x48
 8010df8:	bfb7      	itett	lt
 8010dfa:	2300      	movlt	r3, #0
 8010dfc:	2301      	movge	r3, #1
 8010dfe:	ad29      	addlt	r5, sp, #164	; 0xa4
 8010e00:	ac19      	addlt	r4, sp, #100	; 0x64
 8010e02:	bfb1      	iteee	lt
 8010e04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010e06:	ad19      	addge	r5, sp, #100	; 0x64
 8010e08:	930e      	strge	r3, [sp, #56]	; 0x38
 8010e0a:	ac29      	addge	r4, sp, #164	; 0xa4
 8010e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010e12:	e887 0003 	stmia.w	r7, {r0, r1}
 8010e16:	b928      	cbnz	r0, 8010e24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8010e18:	4b80      	ldr	r3, [pc, #512]	; (801101c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8010e1a:	6818      	ldr	r0, [r3, #0]
 8010e1c:	6803      	ldr	r3, [r0, #0]
 8010e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e20:	4798      	blx	r3
 8010e22:	6038      	str	r0, [r7, #0]
 8010e24:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010e26:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8010e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010e2e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8010e30:	930c      	str	r3, [sp, #48]	; 0x30
 8010e32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010e34:	6963      	ldr	r3, [r4, #20]
 8010e36:	440b      	add	r3, r1
 8010e38:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8010e3c:	4408      	add	r0, r1
 8010e3e:	b200      	sxth	r0, r0
 8010e40:	4283      	cmp	r3, r0
 8010e42:	900d      	str	r0, [sp, #52]	; 0x34
 8010e44:	f280 80dd 	bge.w	8011002 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	da08      	bge.n	8010e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010e4c:	2a00      	cmp	r2, #0
 8010e4e:	dd06      	ble.n	8010e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8010e50:	1acb      	subs	r3, r1, r3
 8010e52:	429a      	cmp	r2, r3
 8010e54:	f2c0 80e4 	blt.w	8011020 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f300 80e2 	bgt.w	8011022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8010e5e:	6967      	ldr	r7, [r4, #20]
 8010e60:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010e66:	443b      	add	r3, r7
 8010e68:	461f      	mov	r7, r3
 8010e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e6c:	1bdf      	subs	r7, r3, r7
 8010e6e:	4297      	cmp	r7, r2
 8010e70:	bfa8      	it	ge
 8010e72:	4617      	movge	r7, r2
 8010e74:	2f00      	cmp	r7, #0
 8010e76:	f340 8166 	ble.w	8011146 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8010e7a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010e7c:	6829      	ldr	r1, [r5, #0]
 8010e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010e82:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010e86:	4411      	add	r1, r2
 8010e88:	6820      	ldr	r0, [r4, #0]
 8010e8a:	4299      	cmp	r1, r3
 8010e8c:	dd1a      	ble.n	8010ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010e8e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010e92:	4402      	add	r2, r0
 8010e94:	440b      	add	r3, r1
 8010e96:	b21b      	sxth	r3, r3
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	dc13      	bgt.n	8010ec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010e9e:	a912      	add	r1, sp, #72	; 0x48
 8010ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	9206      	str	r2, [sp, #24]
 8010ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010eaa:	9500      	str	r5, [sp, #0]
 8010eac:	9205      	str	r2, [sp, #20]
 8010eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eb0:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010eb4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010eb6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010eba:	aa49      	add	r2, sp, #292	; 0x124
 8010ebc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8010ec0:	4623      	mov	r3, r4
 8010ec2:	47c8      	blx	r9
 8010ec4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010ec8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010ecc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8010ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ed4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010ed8:	68a1      	ldr	r1, [r4, #8]
 8010eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ede:	ed94 6a08 	vldr	s12, [r4, #32]
 8010ee2:	edd4 6a07 	vldr	s13, [r4, #28]
 8010ee6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010eea:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010eee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010ef2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010ef6:	edc4 6a07 	vstr	s13, [r4, #28]
 8010efa:	441a      	add	r2, r3
 8010efc:	6963      	ldr	r3, [r4, #20]
 8010efe:	3301      	adds	r3, #1
 8010f00:	6022      	str	r2, [r4, #0]
 8010f02:	6163      	str	r3, [r4, #20]
 8010f04:	69a3      	ldr	r3, [r4, #24]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	61a3      	str	r3, [r4, #24]
 8010f0a:	6923      	ldr	r3, [r4, #16]
 8010f0c:	440b      	add	r3, r1
 8010f0e:	68e1      	ldr	r1, [r4, #12]
 8010f10:	428b      	cmp	r3, r1
 8010f12:	6123      	str	r3, [r4, #16]
 8010f14:	db15      	blt.n	8010f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8010f16:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010f1a:	3201      	adds	r2, #1
 8010f1c:	1a5b      	subs	r3, r3, r1
 8010f1e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010f22:	6022      	str	r2, [r4, #0]
 8010f24:	6123      	str	r3, [r4, #16]
 8010f26:	edc4 6a07 	vstr	s13, [r4, #28]
 8010f2a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8010f2e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010f32:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010f36:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f3e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010f42:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010f46:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010f4a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010f4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f52:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010f56:	68a9      	ldr	r1, [r5, #8]
 8010f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f5c:	ed95 6a08 	vldr	s12, [r5, #32]
 8010f60:	edd5 6a07 	vldr	s13, [r5, #28]
 8010f64:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010f68:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010f6c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010f74:	edc5 6a07 	vstr	s13, [r5, #28]
 8010f78:	441a      	add	r2, r3
 8010f7a:	696b      	ldr	r3, [r5, #20]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	602a      	str	r2, [r5, #0]
 8010f80:	616b      	str	r3, [r5, #20]
 8010f82:	69ab      	ldr	r3, [r5, #24]
 8010f84:	3b01      	subs	r3, #1
 8010f86:	61ab      	str	r3, [r5, #24]
 8010f88:	692b      	ldr	r3, [r5, #16]
 8010f8a:	440b      	add	r3, r1
 8010f8c:	68e9      	ldr	r1, [r5, #12]
 8010f8e:	428b      	cmp	r3, r1
 8010f90:	612b      	str	r3, [r5, #16]
 8010f92:	db15      	blt.n	8010fc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8010f94:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010f98:	3201      	adds	r2, #1
 8010f9a:	1a5b      	subs	r3, r3, r1
 8010f9c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010fa0:	602a      	str	r2, [r5, #0]
 8010fa2:	612b      	str	r3, [r5, #16]
 8010fa4:	edc5 6a07 	vstr	s13, [r5, #28]
 8010fa8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010fac:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010fb0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010fb4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fbc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010fc0:	3f01      	subs	r7, #1
 8010fc2:	e757      	b.n	8010e74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010fc4:	4299      	cmp	r1, r3
 8010fc6:	dc13      	bgt.n	8010ff0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	da14      	bge.n	8010ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8010fcc:	2502      	movs	r5, #2
 8010fce:	2703      	movs	r7, #3
 8010fd0:	f04f 0800 	mov.w	r8, #0
 8010fd4:	46a9      	mov	r9, r5
 8010fd6:	f04f 0a01 	mov.w	sl, #1
 8010fda:	e6ef      	b.n	8010dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010fdc:	2501      	movs	r5, #1
 8010fde:	2700      	movs	r7, #0
 8010fe0:	46a9      	mov	r9, r5
 8010fe2:	46b8      	mov	r8, r7
 8010fe4:	f04f 0a02 	mov.w	sl, #2
 8010fe8:	e6e8      	b.n	8010dbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010fea:	2501      	movs	r5, #1
 8010fec:	2702      	movs	r7, #2
 8010fee:	e6e1      	b.n	8010db4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8010ff0:	2500      	movs	r5, #0
 8010ff2:	2701      	movs	r7, #1
 8010ff4:	e7f4      	b.n	8010fe0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010ff6:	2702      	movs	r7, #2
 8010ff8:	2503      	movs	r5, #3
 8010ffa:	f04f 0900 	mov.w	r9, #0
 8010ffe:	46b8      	mov	r8, r7
 8011000:	e7e9      	b.n	8010fd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011002:	4613      	mov	r3, r2
 8011004:	e728      	b.n	8010e58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011006:	bf00      	nop
 8011008:	2400f190 	.word	0x2400f190
 801100c:	fffd8f01 	.word	0xfffd8f01
 8011010:	00027100 	.word	0x00027100
 8011014:	0004e1ff 	.word	0x0004e1ff
 8011018:	0004e1fe 	.word	0x0004e1fe
 801101c:	2400f198 	.word	0x2400f198
 8011020:	4613      	mov	r3, r2
 8011022:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011024:	469e      	mov	lr, r3
 8011026:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011028:	469c      	mov	ip, r3
 801102a:	9111      	str	r1, [sp, #68]	; 0x44
 801102c:	f04f 0900 	mov.w	r9, #0
 8011030:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8011034:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8011038:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801103c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8011040:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8011044:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8011048:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801104c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8011050:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8011054:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8011058:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801105c:	f1bc 0f00 	cmp.w	ip, #0
 8011060:	d147      	bne.n	80110f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011062:	eb03 0c07 	add.w	ip, r3, r7
 8011066:	1ad7      	subs	r7, r2, r3
 8011068:	f1b9 0f00 	cmp.w	r9, #0
 801106c:	d009      	beq.n	8011082 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801106e:	9029      	str	r0, [sp, #164]	; 0xa4
 8011070:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8011074:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8011078:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801107c:	912d      	str	r1, [sp, #180]	; 0xb4
 801107e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8011082:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011084:	f04f 0800 	mov.w	r8, #0
 8011088:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801108c:	9111      	str	r1, [sp, #68]	; 0x44
 801108e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011092:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011096:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801109a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801109e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80110a2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80110a6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80110aa:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80110ae:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80110b2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80110b6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80110ba:	f1be 0f00 	cmp.w	lr, #0
 80110be:	d031      	beq.n	8011124 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80110c0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80110c2:	4450      	add	r0, sl
 80110c4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80110c8:	4431      	add	r1, r6
 80110ca:	ee37 7a04 	vadd.f32	s14, s14, s8
 80110ce:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80110d2:	4549      	cmp	r1, r9
 80110d4:	db08      	blt.n	80110e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80110d6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80110da:	3001      	adds	r0, #1
 80110dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80110e0:	eba1 0109 	sub.w	r1, r1, r9
 80110e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80110e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80110ec:	f04f 0801 	mov.w	r8, #1
 80110f0:	e7e3      	b.n	80110ba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80110f2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80110f4:	4450      	add	r0, sl
 80110f6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80110fa:	4431      	add	r1, r6
 80110fc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011100:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011104:	4541      	cmp	r1, r8
 8011106:	db08      	blt.n	801111a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011108:	ee76 6a85 	vadd.f32	s13, s13, s10
 801110c:	3001      	adds	r0, #1
 801110e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011112:	eba1 0108 	sub.w	r1, r1, r8
 8011116:	ee77 7a86 	vadd.f32	s15, s15, s12
 801111a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801111e:	f04f 0901 	mov.w	r9, #1
 8011122:	e79b      	b.n	801105c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011124:	449c      	add	ip, r3
 8011126:	1aff      	subs	r7, r7, r3
 8011128:	f1b8 0f00 	cmp.w	r8, #0
 801112c:	d009      	beq.n	8011142 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801112e:	9019      	str	r0, [sp, #100]	; 0x64
 8011130:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011134:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011138:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801113c:	911d      	str	r1, [sp, #116]	; 0x74
 801113e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011142:	1ad2      	subs	r2, r2, r3
 8011144:	e68b      	b.n	8010e5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011146:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011148:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801114a:	2b00      	cmp	r3, #0
 801114c:	f000 80d1 	beq.w	80112f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011150:	ad19      	add	r5, sp, #100	; 0x64
 8011152:	ac39      	add	r4, sp, #228	; 0xe4
 8011154:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011156:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801115a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801115e:	930c      	str	r3, [sp, #48]	; 0x30
 8011160:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011162:	6963      	ldr	r3, [r4, #20]
 8011164:	440b      	add	r3, r1
 8011166:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801116a:	4408      	add	r0, r1
 801116c:	b200      	sxth	r0, r0
 801116e:	4283      	cmp	r3, r0
 8011170:	900d      	str	r0, [sp, #52]	; 0x34
 8011172:	f280 80c1 	bge.w	80112f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011176:	428b      	cmp	r3, r1
 8011178:	da08      	bge.n	801118c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801117a:	2a00      	cmp	r2, #0
 801117c:	dd06      	ble.n	801118c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801117e:	1acb      	subs	r3, r1, r3
 8011180:	429a      	cmp	r2, r3
 8011182:	f2c0 80bb 	blt.w	80112fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011186:	2b00      	cmp	r3, #0
 8011188:	f300 80b9 	bgt.w	80112fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801118c:	6967      	ldr	r7, [r4, #20]
 801118e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011194:	443b      	add	r3, r7
 8011196:	461f      	mov	r7, r3
 8011198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801119a:	1bdf      	subs	r7, r3, r7
 801119c:	4297      	cmp	r7, r2
 801119e:	bfa8      	it	ge
 80111a0:	4617      	movge	r7, r2
 80111a2:	2f00      	cmp	r7, #0
 80111a4:	f340 813c 	ble.w	8011420 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80111a8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80111aa:	6829      	ldr	r1, [r5, #0]
 80111ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80111b0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80111b4:	4411      	add	r1, r2
 80111b6:	6820      	ldr	r0, [r4, #0]
 80111b8:	4299      	cmp	r1, r3
 80111ba:	dd1a      	ble.n	80111f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80111bc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80111c0:	4402      	add	r2, r0
 80111c2:	440b      	add	r3, r1
 80111c4:	b21b      	sxth	r3, r3
 80111c6:	429a      	cmp	r2, r3
 80111c8:	dc13      	bgt.n	80111f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80111ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80111cc:	a912      	add	r1, sp, #72	; 0x48
 80111ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	9206      	str	r2, [sp, #24]
 80111d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111d8:	9500      	str	r5, [sp, #0]
 80111da:	9205      	str	r2, [sp, #20]
 80111dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111de:	e9cd b203 	strd	fp, r2, [sp, #12]
 80111e2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80111e4:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80111e8:	aa49      	add	r2, sp, #292	; 0x124
 80111ea:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80111ee:	4623      	mov	r3, r4
 80111f0:	47c8      	blx	r9
 80111f2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80111f6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80111fa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80111fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011202:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011206:	68a1      	ldr	r1, [r4, #8]
 8011208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801120c:	ed94 6a08 	vldr	s12, [r4, #32]
 8011210:	edd4 6a07 	vldr	s13, [r4, #28]
 8011214:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011218:	ee76 6a86 	vadd.f32	s13, s13, s12
 801121c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011220:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011224:	edc4 6a07 	vstr	s13, [r4, #28]
 8011228:	441a      	add	r2, r3
 801122a:	6963      	ldr	r3, [r4, #20]
 801122c:	3301      	adds	r3, #1
 801122e:	6022      	str	r2, [r4, #0]
 8011230:	6163      	str	r3, [r4, #20]
 8011232:	69a3      	ldr	r3, [r4, #24]
 8011234:	3b01      	subs	r3, #1
 8011236:	61a3      	str	r3, [r4, #24]
 8011238:	6923      	ldr	r3, [r4, #16]
 801123a:	440b      	add	r3, r1
 801123c:	68e1      	ldr	r1, [r4, #12]
 801123e:	428b      	cmp	r3, r1
 8011240:	6123      	str	r3, [r4, #16]
 8011242:	db15      	blt.n	8011270 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011244:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011248:	3201      	adds	r2, #1
 801124a:	1a5b      	subs	r3, r3, r1
 801124c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011250:	6022      	str	r2, [r4, #0]
 8011252:	6123      	str	r3, [r4, #16]
 8011254:	edc4 6a07 	vstr	s13, [r4, #28]
 8011258:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801125c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011260:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011264:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801126c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011270:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011274:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011278:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801127c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011280:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011284:	68a9      	ldr	r1, [r5, #8]
 8011286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801128a:	ed95 6a08 	vldr	s12, [r5, #32]
 801128e:	edd5 6a07 	vldr	s13, [r5, #28]
 8011292:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011296:	ee76 6a86 	vadd.f32	s13, s13, s12
 801129a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801129e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112a2:	edc5 6a07 	vstr	s13, [r5, #28]
 80112a6:	441a      	add	r2, r3
 80112a8:	696b      	ldr	r3, [r5, #20]
 80112aa:	3301      	adds	r3, #1
 80112ac:	602a      	str	r2, [r5, #0]
 80112ae:	616b      	str	r3, [r5, #20]
 80112b0:	69ab      	ldr	r3, [r5, #24]
 80112b2:	3b01      	subs	r3, #1
 80112b4:	61ab      	str	r3, [r5, #24]
 80112b6:	692b      	ldr	r3, [r5, #16]
 80112b8:	440b      	add	r3, r1
 80112ba:	68e9      	ldr	r1, [r5, #12]
 80112bc:	428b      	cmp	r3, r1
 80112be:	612b      	str	r3, [r5, #16]
 80112c0:	db15      	blt.n	80112ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80112c2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80112c6:	3201      	adds	r2, #1
 80112c8:	1a5b      	subs	r3, r3, r1
 80112ca:	ee76 6a26 	vadd.f32	s13, s12, s13
 80112ce:	602a      	str	r2, [r5, #0]
 80112d0:	612b      	str	r3, [r5, #16]
 80112d2:	edc5 6a07 	vstr	s13, [r5, #28]
 80112d6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80112da:	ee36 7a87 	vadd.f32	s14, s13, s14
 80112de:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80112e2:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80112e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112ea:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80112ee:	3f01      	subs	r7, #1
 80112f0:	e757      	b.n	80111a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80112f2:	ad39      	add	r5, sp, #228	; 0xe4
 80112f4:	ac19      	add	r4, sp, #100	; 0x64
 80112f6:	e72d      	b.n	8011154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80112f8:	4613      	mov	r3, r2
 80112fa:	e744      	b.n	8011186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80112fc:	4613      	mov	r3, r2
 80112fe:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8011300:	469e      	mov	lr, r3
 8011302:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8011306:	461f      	mov	r7, r3
 8011308:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801130c:	f04f 0900 	mov.w	r9, #0
 8011310:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8011314:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011318:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801131c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8011320:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8011324:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8011326:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801132a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801132e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8011332:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8011336:	960e      	str	r6, [sp, #56]	; 0x38
 8011338:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801133c:	2f00      	cmp	r7, #0
 801133e:	d146      	bne.n	80113ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011340:	449c      	add	ip, r3
 8011342:	1ad7      	subs	r7, r2, r3
 8011344:	f1b9 0f00 	cmp.w	r9, #0
 8011348:	d009      	beq.n	801135e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801134a:	9039      	str	r0, [sp, #228]	; 0xe4
 801134c:	913d      	str	r1, [sp, #244]	; 0xf4
 801134e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8011352:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011356:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801135a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801135e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011360:	f04f 0800 	mov.w	r8, #0
 8011364:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011368:	910e      	str	r1, [sp, #56]	; 0x38
 801136a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801136e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011372:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011376:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801137a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801137e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011382:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011386:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801138a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801138e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011392:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011396:	f1be 0f00 	cmp.w	lr, #0
 801139a:	d030      	beq.n	80113fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801139c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801139e:	4450      	add	r0, sl
 80113a0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80113a4:	4431      	add	r1, r6
 80113a6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80113aa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80113ae:	4549      	cmp	r1, r9
 80113b0:	db08      	blt.n	80113c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80113b2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80113b6:	3001      	adds	r0, #1
 80113b8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80113bc:	eba1 0109 	sub.w	r1, r1, r9
 80113c0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80113c4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80113c8:	f04f 0801 	mov.w	r8, #1
 80113cc:	e7e3      	b.n	8011396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80113ce:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80113d0:	4450      	add	r0, sl
 80113d2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80113d6:	4431      	add	r1, r6
 80113d8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80113dc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80113e0:	4541      	cmp	r1, r8
 80113e2:	db08      	blt.n	80113f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 80113e4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80113e8:	3001      	adds	r0, #1
 80113ea:	ee37 7a25 	vadd.f32	s14, s14, s11
 80113ee:	eba1 0108 	sub.w	r1, r1, r8
 80113f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80113f6:	3f01      	subs	r7, #1
 80113f8:	f04f 0901 	mov.w	r9, #1
 80113fc:	e79e      	b.n	801133c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80113fe:	449c      	add	ip, r3
 8011400:	1aff      	subs	r7, r7, r3
 8011402:	f1b8 0f00 	cmp.w	r8, #0
 8011406:	d009      	beq.n	801141c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011408:	9019      	str	r0, [sp, #100]	; 0x64
 801140a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801140e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011412:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011416:	911d      	str	r1, [sp, #116]	; 0x74
 8011418:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801141c:	1ad2      	subs	r2, r2, r3
 801141e:	e6b5      	b.n	801118c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011420:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	b923      	cbnz	r3, 8011430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011426:	4b04      	ldr	r3, [pc, #16]	; (8011438 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011428:	6818      	ldr	r0, [r3, #0]
 801142a:	6803      	ldr	r3, [r0, #0]
 801142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142e:	4798      	blx	r3
 8011430:	b05b      	add	sp, #364	; 0x16c
 8011432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011436:	bf00      	nop
 8011438:	2400f198 	.word	0x2400f198

0801143c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	4604      	mov	r4, r0
 8011440:	2500      	movs	r5, #0
 8011442:	9804      	ldr	r0, [sp, #16]
 8011444:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8011448:	8025      	strh	r5, [r4, #0]
 801144a:	6061      	str	r1, [r4, #4]
 801144c:	7223      	strb	r3, [r4, #8]
 801144e:	7266      	strb	r6, [r4, #9]
 8011450:	60e0      	str	r0, [r4, #12]
 8011452:	8222      	strh	r2, [r4, #16]
 8011454:	8265      	strh	r5, [r4, #18]
 8011456:	82a5      	strh	r5, [r4, #20]
 8011458:	82e5      	strh	r5, [r4, #22]
 801145a:	8325      	strh	r5, [r4, #24]
 801145c:	8365      	strh	r5, [r4, #26]
 801145e:	83a5      	strh	r5, [r4, #28]
 8011460:	77a5      	strb	r5, [r4, #30]
 8011462:	b32e      	cbz	r6, 80114b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011464:	6803      	ldr	r3, [r0, #0]
 8011466:	695b      	ldr	r3, [r3, #20]
 8011468:	4798      	blx	r3
 801146a:	4606      	mov	r6, r0
 801146c:	b300      	cbz	r0, 80114b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801146e:	68e0      	ldr	r0, [r4, #12]
 8011470:	4631      	mov	r1, r6
 8011472:	6803      	ldr	r3, [r0, #0]
 8011474:	68db      	ldr	r3, [r3, #12]
 8011476:	4798      	blx	r3
 8011478:	4605      	mov	r5, r0
 801147a:	b1c8      	cbz	r0, 80114b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801147c:	7b43      	ldrb	r3, [r0, #13]
 801147e:	7a82      	ldrb	r2, [r0, #10]
 8011480:	005b      	lsls	r3, r3, #1
 8011482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011486:	4313      	orrs	r3, r2
 8011488:	83a3      	strh	r3, [r4, #28]
 801148a:	7a63      	ldrb	r3, [r4, #9]
 801148c:	2b04      	cmp	r3, #4
 801148e:	d10f      	bne.n	80114b0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011490:	68e0      	ldr	r0, [r4, #12]
 8011492:	462a      	mov	r2, r5
 8011494:	4631      	mov	r1, r6
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801149a:	4798      	blx	r3
 801149c:	7b6b      	ldrb	r3, [r5, #13]
 801149e:	005b      	lsls	r3, r3, #1
 80114a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80114a4:	7aab      	ldrb	r3, [r5, #10]
 80114a6:	4313      	orrs	r3, r2
 80114a8:	4418      	add	r0, r3
 80114aa:	8ba3      	ldrh	r3, [r4, #28]
 80114ac:	4418      	add	r0, r3
 80114ae:	83a0      	strh	r0, [r4, #28]
 80114b0:	4620      	mov	r0, r4
 80114b2:	bd70      	pop	{r4, r5, r6, pc}

080114b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 80114b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b8:	2400      	movs	r4, #0
 80114ba:	b085      	sub	sp, #20
 80114bc:	4681      	mov	r9, r0
 80114be:	4688      	mov	r8, r1
 80114c0:	4692      	mov	sl, r2
 80114c2:	469b      	mov	fp, r3
 80114c4:	4627      	mov	r7, r4
 80114c6:	4625      	mov	r5, r4
 80114c8:	4626      	mov	r6, r4
 80114ca:	4554      	cmp	r4, sl
 80114cc:	da2a      	bge.n	8011524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80114ce:	2300      	movs	r3, #0
 80114d0:	9303      	str	r3, [sp, #12]
 80114d2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80114d6:	429d      	cmp	r5, r3
 80114d8:	d004      	beq.n	80114e4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 80114da:	f242 030b 	movw	r3, #8203	; 0x200b
 80114de:	429d      	cmp	r5, r3
 80114e0:	bf18      	it	ne
 80114e2:	462f      	movne	r7, r5
 80114e4:	ab03      	add	r3, sp, #12
 80114e6:	4642      	mov	r2, r8
 80114e8:	4659      	mov	r1, fp
 80114ea:	4648      	mov	r0, r9
 80114ec:	f002 ff5c 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80114f0:	4605      	mov	r5, r0
 80114f2:	b1b8      	cbz	r0, 8011524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80114f4:	280a      	cmp	r0, #10
 80114f6:	d015      	beq.n	8011524 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80114f8:	9a03      	ldr	r2, [sp, #12]
 80114fa:	b18a      	cbz	r2, 8011520 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80114fc:	7b50      	ldrb	r0, [r2, #13]
 80114fe:	4639      	mov	r1, r7
 8011500:	7a93      	ldrb	r3, [r2, #10]
 8011502:	0040      	lsls	r0, r0, #1
 8011504:	8895      	ldrh	r5, [r2, #4]
 8011506:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801150a:	4303      	orrs	r3, r0
 801150c:	4640      	mov	r0, r8
 801150e:	9301      	str	r3, [sp, #4]
 8011510:	f8d8 3000 	ldr.w	r3, [r8]
 8011514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011516:	4798      	blx	r3
 8011518:	9b01      	ldr	r3, [sp, #4]
 801151a:	4418      	add	r0, r3
 801151c:	4406      	add	r6, r0
 801151e:	b2b6      	uxth	r6, r6
 8011520:	3401      	adds	r4, #1
 8011522:	e7d2      	b.n	80114ca <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8011524:	4630      	mov	r0, r6
 8011526:	b005      	add	sp, #20
 8011528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801152c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801152c:	2a02      	cmp	r2, #2
 801152e:	b530      	push	{r4, r5, lr}
 8011530:	d011      	beq.n	8011556 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8011532:	2a03      	cmp	r2, #3
 8011534:	d01c      	beq.n	8011570 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8011536:	2a01      	cmp	r2, #1
 8011538:	d10c      	bne.n	8011554 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801153a:	888b      	ldrh	r3, [r1, #4]
 801153c:	8801      	ldrh	r1, [r0, #0]
 801153e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8011542:	1a5b      	subs	r3, r3, r1
 8011544:	8844      	ldrh	r4, [r0, #2]
 8011546:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801154a:	1a9b      	subs	r3, r3, r2
 801154c:	8004      	strh	r4, [r0, #0]
 801154e:	8081      	strh	r1, [r0, #4]
 8011550:	8043      	strh	r3, [r0, #2]
 8011552:	80c2      	strh	r2, [r0, #6]
 8011554:	bd30      	pop	{r4, r5, pc}
 8011556:	88cb      	ldrh	r3, [r1, #6]
 8011558:	8842      	ldrh	r2, [r0, #2]
 801155a:	1a9b      	subs	r3, r3, r2
 801155c:	88c2      	ldrh	r2, [r0, #6]
 801155e:	1a9b      	subs	r3, r3, r2
 8011560:	888a      	ldrh	r2, [r1, #4]
 8011562:	8801      	ldrh	r1, [r0, #0]
 8011564:	8043      	strh	r3, [r0, #2]
 8011566:	1a52      	subs	r2, r2, r1
 8011568:	8881      	ldrh	r1, [r0, #4]
 801156a:	1a52      	subs	r2, r2, r1
 801156c:	8002      	strh	r2, [r0, #0]
 801156e:	e7f1      	b.n	8011554 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8011570:	88cb      	ldrh	r3, [r1, #6]
 8011572:	8841      	ldrh	r1, [r0, #2]
 8011574:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011578:	1a5b      	subs	r3, r3, r1
 801157a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801157e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8011582:	1a9b      	subs	r3, r3, r2
 8011584:	8045      	strh	r5, [r0, #2]
 8011586:	8082      	strh	r2, [r0, #4]
 8011588:	8003      	strh	r3, [r0, #0]
 801158a:	80c4      	strh	r4, [r0, #6]
 801158c:	e7e2      	b.n	8011554 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801158e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801158e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011592:	b09f      	sub	sp, #124	; 0x7c
 8011594:	9116      	str	r1, [sp, #88]	; 0x58
 8011596:	9317      	str	r3, [sp, #92]	; 0x5c
 8011598:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801159a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801159c:	8809      	ldrh	r1, [r1, #0]
 801159e:	889b      	ldrh	r3, [r3, #4]
 80115a0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80115a4:	440b      	add	r3, r1
 80115a6:	9212      	str	r2, [sp, #72]	; 0x48
 80115a8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80115ac:	b21b      	sxth	r3, r3
 80115ae:	9011      	str	r0, [sp, #68]	; 0x44
 80115b0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80115b4:	9310      	str	r3, [sp, #64]	; 0x40
 80115b6:	f8d8 3000 	ldr.w	r3, [r8]
 80115ba:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 80115be:	7a59      	ldrb	r1, [r3, #9]
 80115c0:	7a1b      	ldrb	r3, [r3, #8]
 80115c2:	9114      	str	r1, [sp, #80]	; 0x50
 80115c4:	9315      	str	r3, [sp, #84]	; 0x54
 80115c6:	2a00      	cmp	r2, #0
 80115c8:	d067      	beq.n	801169a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10c>
 80115ca:	f898 3010 	ldrb.w	r3, [r8, #16]
 80115ce:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80115d0:	2b04      	cmp	r3, #4
 80115d2:	bf14      	ite	ne
 80115d4:	2301      	movne	r3, #1
 80115d6:	2302      	moveq	r3, #2
 80115d8:	4413      	add	r3, r2
 80115da:	f04f 0900 	mov.w	r9, #0
 80115de:	930f      	str	r3, [sp, #60]	; 0x3c
 80115e0:	464c      	mov	r4, r9
 80115e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80115e6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80115ea:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80115ee:	4293      	cmp	r3, r2
 80115f0:	f280 808c 	bge.w	801170c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 80115f4:	2300      	movs	r3, #0
 80115f6:	931c      	str	r3, [sp, #112]	; 0x70
 80115f8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80115fc:	429c      	cmp	r4, r3
 80115fe:	d006      	beq.n	801160e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x80>
 8011600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011602:	f242 020b 	movw	r2, #8203	; 0x200b
 8011606:	4294      	cmp	r4, r2
 8011608:	bf18      	it	ne
 801160a:	4623      	movne	r3, r4
 801160c:	930d      	str	r3, [sp, #52]	; 0x34
 801160e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011610:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8011612:	f8d8 2000 	ldr.w	r2, [r8]
 8011616:	428b      	cmp	r3, r1
 8011618:	db41      	blt.n	801169e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x110>
 801161a:	6813      	ldr	r3, [r2, #0]
 801161c:	4610      	mov	r0, r2
 801161e:	695b      	ldr	r3, [r3, #20]
 8011620:	4798      	blx	r3
 8011622:	4604      	mov	r4, r0
 8011624:	f8d8 0000 	ldr.w	r0, [r8]
 8011628:	aa1d      	add	r2, sp, #116	; 0x74
 801162a:	4621      	mov	r1, r4
 801162c:	6803      	ldr	r3, [r0, #0]
 801162e:	689e      	ldr	r6, [r3, #8]
 8011630:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8011634:	47b0      	blx	r6
 8011636:	901c      	str	r0, [sp, #112]	; 0x70
 8011638:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801163c:	429c      	cmp	r4, r3
 801163e:	f000 80ea 	beq.w	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8011642:	f242 030b 	movw	r3, #8203	; 0x200b
 8011646:	429c      	cmp	r4, r3
 8011648:	f000 80e5 	beq.w	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801164c:	2c00      	cmp	r4, #0
 801164e:	f000 80f7 	beq.w	8011840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8011652:	2c0a      	cmp	r4, #10
 8011654:	d060      	beq.n	8011718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 8011656:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011658:	b36a      	cbz	r2, 80116b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x128>
 801165a:	8894      	ldrh	r4, [r2, #4]
 801165c:	f1bb 0f00 	cmp.w	fp, #0
 8011660:	d03b      	beq.n	80116da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14c>
 8011662:	f892 900d 	ldrb.w	r9, [r2, #13]
 8011666:	f1bb 0f01 	cmp.w	fp, #1
 801166a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801166e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8011672:	f892 900a 	ldrb.w	r9, [r2, #10]
 8011676:	ea49 0903 	orr.w	r9, r9, r3
 801167a:	d134      	bne.n	80116e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x158>
 801167c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801167e:	eba5 0509 	sub.w	r5, r5, r9
 8011682:	2b00      	cmp	r3, #0
 8011684:	d14f      	bne.n	8011726 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 8011686:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011688:	eb09 0305 	add.w	r3, r9, r5
 801168c:	4413      	add	r3, r2
 801168e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8011690:	f9b2 2000 	ldrsh.w	r2, [r2]
 8011694:	4293      	cmp	r3, r2
 8011696:	da51      	bge.n	801173c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8011698:	e038      	b.n	801170c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17e>
 801169a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801169c:	e79d      	b.n	80115da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801169e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80116a2:	4659      	mov	r1, fp
 80116a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80116a6:	9301      	str	r3, [sp, #4]
 80116a8:	ab1d      	add	r3, sp, #116	; 0x74
 80116aa:	9300      	str	r3, [sp, #0]
 80116ac:	ab1c      	add	r3, sp, #112	; 0x70
 80116ae:	f002 fed3 	bl	8014458 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80116b2:	4604      	mov	r4, r0
 80116b4:	e7c0      	b.n	8011638 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xaa>
 80116b6:	f8d8 0000 	ldr.w	r0, [r8]
 80116ba:	6803      	ldr	r3, [r0, #0]
 80116bc:	691b      	ldr	r3, [r3, #16]
 80116be:	4798      	blx	r3
 80116c0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80116c4:	4298      	cmp	r0, r3
 80116c6:	f000 80a6 	beq.w	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80116ca:	f242 030b 	movw	r3, #8203	; 0x200b
 80116ce:	4298      	cmp	r0, r3
 80116d0:	f000 80a1 	beq.w	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80116d4:	f1bb 0f00 	cmp.w	fp, #0
 80116d8:	d100      	bne.n	80116dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 80116da:	444d      	add	r5, r9
 80116dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116de:	2a00      	cmp	r2, #0
 80116e0:	d1bf      	bne.n	8011662 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd4>
 80116e2:	4691      	mov	r9, r2
 80116e4:	e097      	b.n	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80116e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f000 80ab 	beq.w	8011844 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 80116ee:	f1bb 0f00 	cmp.w	fp, #0
 80116f2:	d118      	bne.n	8011726 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x198>
 80116f4:	f8d8 0000 	ldr.w	r0, [r8]
 80116f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80116fa:	6803      	ldr	r3, [r0, #0]
 80116fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116fe:	4798      	blx	r3
 8011700:	4405      	add	r5, r0
 8011702:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011706:	1aeb      	subs	r3, r5, r3
 8011708:	4293      	cmp	r3, r2
 801170a:	dd17      	ble.n	801173c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 801170c:	2c00      	cmp	r4, #0
 801170e:	f000 8097 	beq.w	8011840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 8011712:	2c0a      	cmp	r4, #10
 8011714:	f040 8085 	bne.w	8011822 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 8011718:	240a      	movs	r4, #10
 801171a:	fab4 f084 	clz	r0, r4
 801171e:	0940      	lsrs	r0, r0, #5
 8011720:	b01f      	add	sp, #124	; 0x7c
 8011722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011726:	f8d8 0000 	ldr.w	r0, [r8]
 801172a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801172c:	6803      	ldr	r3, [r0, #0]
 801172e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011730:	4798      	blx	r3
 8011732:	f1bb 0f01 	cmp.w	fp, #1
 8011736:	eba5 0500 	sub.w	r5, r5, r0
 801173a:	d0a4      	beq.n	8011686 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xf8>
 801173c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801173e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8011740:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8011744:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011748:	7b43      	ldrb	r3, [r0, #13]
 801174a:	4429      	add	r1, r5
 801174c:	015b      	lsls	r3, r3, #5
 801174e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011752:	7983      	ldrb	r3, [r0, #6]
 8011754:	4313      	orrs	r3, r2
 8011756:	440b      	add	r3, r1
 8011758:	42b3      	cmp	r3, r6
 801175a:	db5c      	blt.n	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 801175c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801175e:	4299      	cmp	r1, r3
 8011760:	da59      	bge.n	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 8011762:	f8d8 0000 	ldr.w	r0, [r8]
 8011766:	42ae      	cmp	r6, r5
 8011768:	6803      	ldr	r3, [r0, #0]
 801176a:	bfcc      	ite	gt
 801176c:	1b76      	subgt	r6, r6, r5
 801176e:	2600      	movle	r6, #0
 8011770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011772:	bfc8      	it	gt
 8011774:	b2b6      	uxthgt	r6, r6
 8011776:	4798      	blx	r3
 8011778:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801177a:	7b5a      	ldrb	r2, [r3, #13]
 801177c:	00d1      	lsls	r1, r2, #3
 801177e:	f401 7780 	and.w	r7, r1, #256	; 0x100
 8011782:	7a19      	ldrb	r1, [r3, #8]
 8011784:	4339      	orrs	r1, r7
 8011786:	0657      	lsls	r7, r2, #25
 8011788:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801178a:	bf48      	it	mi
 801178c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8011790:	4407      	add	r7, r0
 8011792:	bf48      	it	mi
 8011794:	b209      	sxthmi	r1, r1
 8011796:	1a7f      	subs	r7, r7, r1
 8011798:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801179a:	b2bf      	uxth	r7, r7
 801179c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80117a0:	fa0f fa87 	sxth.w	sl, r7
 80117a4:	4551      	cmp	r1, sl
 80117a6:	dd3a      	ble.n	801181e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80117a8:	0112      	lsls	r2, r2, #4
 80117aa:	79d8      	ldrb	r0, [r3, #7]
 80117ac:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80117b0:	4302      	orrs	r2, r0
 80117b2:	4492      	add	sl, r2
 80117b4:	4551      	cmp	r1, sl
 80117b6:	dc2e      	bgt.n	8011816 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x288>
 80117b8:	1bcf      	subs	r7, r1, r7
 80117ba:	468a      	mov	sl, r1
 80117bc:	b2bf      	uxth	r7, r7
 80117be:	9319      	str	r3, [sp, #100]	; 0x64
 80117c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80117c2:	f8d8 0000 	ldr.w	r0, [r8]
 80117c6:	681a      	ldr	r2, [r3, #0]
 80117c8:	6801      	ldr	r1, [r0, #0]
 80117ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80117cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80117ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80117d0:	9218      	str	r2, [sp, #96]	; 0x60
 80117d2:	6b89      	ldr	r1, [r1, #56]	; 0x38
 80117d4:	4788      	blx	r1
 80117d6:	f898 1006 	ldrb.w	r1, [r8, #6]
 80117da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80117dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80117de:	f898 100e 	ldrb.w	r1, [r8, #14]
 80117e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80117e4:	910a      	str	r1, [sp, #40]	; 0x28
 80117e6:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80117ea:	9109      	str	r1, [sp, #36]	; 0x24
 80117ec:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80117f0:	9305      	str	r3, [sp, #20]
 80117f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80117f4:	9206      	str	r2, [sp, #24]
 80117f6:	e9cd a601 	strd	sl, r6, [sp, #4]
 80117fa:	442e      	add	r6, r5
 80117fc:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8011800:	b236      	sxth	r6, r6
 8011802:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011804:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8011808:	9600      	str	r6, [sp, #0]
 801180a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8011814:	47b0      	blx	r6
 8011816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011818:	3301      	adds	r3, #1
 801181a:	930e      	str	r3, [sp, #56]	; 0x38
 801181c:	e6e5      	b.n	80115ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801181e:	2700      	movs	r7, #0
 8011820:	e7cd      	b.n	80117be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x230>
 8011822:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8011824:	3501      	adds	r5, #1
 8011826:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8011828:	429d      	cmp	r5, r3
 801182a:	f6bf af76 	bge.w	801171a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801182e:	4659      	mov	r1, fp
 8011830:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8011832:	f7f1 fa3d 	bl	8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011836:	4604      	mov	r4, r0
 8011838:	b110      	cbz	r0, 8011840 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b2>
 801183a:	280a      	cmp	r0, #10
 801183c:	d1f2      	bne.n	8011824 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801183e:	e76b      	b.n	8011718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18a>
 8011840:	2400      	movs	r4, #0
 8011842:	e76a      	b.n	801171a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8011844:	f1bb 0f00 	cmp.w	fp, #0
 8011848:	f43f af5b 	beq.w	8011702 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801184c:	e776      	b.n	801173c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0801184e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801184e:	b530      	push	{r4, r5, lr}
 8011850:	8a44      	ldrh	r4, [r0, #18]
 8011852:	8ac5      	ldrh	r5, [r0, #22]
 8011854:	82c3      	strh	r3, [r0, #22]
 8011856:	442c      	add	r4, r5
 8011858:	1ae4      	subs	r4, r4, r3
 801185a:	8b03      	ldrh	r3, [r0, #24]
 801185c:	8244      	strh	r4, [r0, #18]
 801185e:	8a84      	ldrh	r4, [r0, #20]
 8011860:	4422      	add	r2, r4
 8011862:	440c      	add	r4, r1
 8011864:	1a59      	subs	r1, r3, r1
 8011866:	8342      	strh	r2, [r0, #26]
 8011868:	8284      	strh	r4, [r0, #20]
 801186a:	8301      	strh	r1, [r0, #24]
 801186c:	bd30      	pop	{r4, r5, pc}

0801186e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801186e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011872:	7a43      	ldrb	r3, [r0, #9]
 8011874:	b087      	sub	sp, #28
 8011876:	4604      	mov	r4, r0
 8011878:	460f      	mov	r7, r1
 801187a:	1eda      	subs	r2, r3, #3
 801187c:	b2d2      	uxtb	r2, r2
 801187e:	2900      	cmp	r1, #0
 8011880:	d036      	beq.n	80118f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 8011882:	2a01      	cmp	r2, #1
 8011884:	d932      	bls.n	80118ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8011886:	1e58      	subs	r0, r3, #1
 8011888:	f1d0 0b00 	rsbs	fp, r0, #0
 801188c:	eb4b 0b00 	adc.w	fp, fp, r0
 8011890:	1e99      	subs	r1, r3, #2
 8011892:	424b      	negs	r3, r1
 8011894:	414b      	adcs	r3, r1
 8011896:	9303      	str	r3, [sp, #12]
 8011898:	2300      	movs	r3, #0
 801189a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801189e:	2500      	movs	r5, #0
 80118a0:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80118a4:	46a9      	mov	r9, r5
 80118a6:	8265      	strh	r5, [r4, #18]
 80118a8:	82a5      	strh	r5, [r4, #20]
 80118aa:	2300      	movs	r3, #0
 80118ac:	9305      	str	r3, [sp, #20]
 80118ae:	8823      	ldrh	r3, [r4, #0]
 80118b0:	2b20      	cmp	r3, #32
 80118b2:	d02b      	beq.n	801190c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80118b4:	eba3 020a 	sub.w	r2, r3, sl
 80118b8:	4256      	negs	r6, r2
 80118ba:	4156      	adcs	r6, r2
 80118bc:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d004      	beq.n	80118ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80118c4:	4553      	cmp	r3, sl
 80118c6:	bf16      	itet	ne
 80118c8:	4699      	movne	r9, r3
 80118ca:	2601      	moveq	r6, #1
 80118cc:	2600      	movne	r6, #0
 80118ce:	ab05      	add	r3, sp, #20
 80118d0:	68e2      	ldr	r2, [r4, #12]
 80118d2:	7a21      	ldrb	r1, [r4, #8]
 80118d4:	6860      	ldr	r0, [r4, #4]
 80118d6:	f002 fd67 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80118da:	8020      	strh	r0, [r4, #0]
 80118dc:	b9c8      	cbnz	r0, 8011912 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 80118de:	8b22      	ldrh	r2, [r4, #24]
 80118e0:	2300      	movs	r3, #0
 80118e2:	4611      	mov	r1, r2
 80118e4:	4620      	mov	r0, r4
 80118e6:	f7ff ffb2 	bl	801184e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80118ea:	e066      	b.n	80119ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80118ec:	468b      	mov	fp, r1
 80118ee:	e7cf      	b.n	8011890 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 80118f0:	3b01      	subs	r3, #1
 80118f2:	2a01      	cmp	r2, #1
 80118f4:	9103      	str	r1, [sp, #12]
 80118f6:	468b      	mov	fp, r1
 80118f8:	bf8c      	ite	hi
 80118fa:	2200      	movhi	r2, #0
 80118fc:	2201      	movls	r2, #1
 80118fe:	2b01      	cmp	r3, #1
 8011900:	9202      	str	r2, [sp, #8]
 8011902:	bf8c      	ite	hi
 8011904:	2300      	movhi	r3, #0
 8011906:	2301      	movls	r3, #1
 8011908:	9301      	str	r3, [sp, #4]
 801190a:	e7c8      	b.n	801189e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801190c:	4699      	mov	r9, r3
 801190e:	2601      	movs	r6, #1
 8011910:	e7dd      	b.n	80118ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8011912:	8ae3      	ldrh	r3, [r4, #22]
 8011914:	280a      	cmp	r0, #10
 8011916:	f103 0301 	add.w	r3, r3, #1
 801191a:	82e3      	strh	r3, [r4, #22]
 801191c:	d0df      	beq.n	80118de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801191e:	9a05      	ldr	r2, [sp, #20]
 8011920:	bb42      	cbnz	r2, 8011974 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8011922:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8011926:	4298      	cmp	r0, r3
 8011928:	d001      	beq.n	801192e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801192a:	4550      	cmp	r0, sl
 801192c:	d1bd      	bne.n	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801192e:	8823      	ldrh	r3, [r4, #0]
 8011930:	8b21      	ldrh	r1, [r4, #24]
 8011932:	2b20      	cmp	r3, #32
 8011934:	d001      	beq.n	801193a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 8011936:	4553      	cmp	r3, sl
 8011938:	d131      	bne.n	801199e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801193a:	2e00      	cmp	r6, #0
 801193c:	bf0a      	itet	eq
 801193e:	460d      	moveq	r5, r1
 8011940:	4630      	movne	r0, r6
 8011942:	2001      	moveq	r0, #1
 8011944:	440a      	add	r2, r1
 8011946:	8aa3      	ldrh	r3, [r4, #20]
 8011948:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801194c:	b292      	uxth	r2, r2
 801194e:	8322      	strh	r2, [r4, #24]
 8011950:	4413      	add	r3, r2
 8011952:	2f00      	cmp	r7, #0
 8011954:	d03a      	beq.n	80119cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 8011956:	f1bb 0f00 	cmp.w	fp, #0
 801195a:	d102      	bne.n	8011962 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801195c:	9903      	ldr	r1, [sp, #12]
 801195e:	b301      	cbz	r1, 80119a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8011960:	b1f8      	cbz	r0, 80119a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 8011962:	8ba1      	ldrh	r1, [r4, #28]
 8011964:	4419      	add	r1, r3
 8011966:	458c      	cmp	ip, r1
 8011968:	da2a      	bge.n	80119c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801196a:	8a61      	ldrh	r1, [r4, #18]
 801196c:	b341      	cbz	r1, 80119c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801196e:	4563      	cmp	r3, ip
 8011970:	dd9b      	ble.n	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011972:	e01c      	b.n	80119ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 8011974:	8893      	ldrh	r3, [r2, #4]
 8011976:	4649      	mov	r1, r9
 8011978:	8023      	strh	r3, [r4, #0]
 801197a:	f892 800d 	ldrb.w	r8, [r2, #13]
 801197e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8011982:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8011986:	f892 800a 	ldrb.w	r8, [r2, #10]
 801198a:	ea48 0800 	orr.w	r8, r8, r0
 801198e:	68e0      	ldr	r0, [r4, #12]
 8011990:	6803      	ldr	r3, [r0, #0]
 8011992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011994:	4798      	blx	r3
 8011996:	eb08 0200 	add.w	r2, r8, r0
 801199a:	b292      	uxth	r2, r2
 801199c:	e7c7      	b.n	801192e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801199e:	2000      	movs	r0, #0
 80119a0:	e7d0      	b.n	8011944 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80119a2:	4563      	cmp	r3, ip
 80119a4:	dd81      	ble.n	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119a6:	8a63      	ldrh	r3, [r4, #18]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f43f af7e 	beq.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119ae:	2301      	movs	r3, #1
 80119b0:	8ba2      	ldrh	r2, [r4, #28]
 80119b2:	77a3      	strb	r3, [r4, #30]
 80119b4:	8b63      	ldrh	r3, [r4, #26]
 80119b6:	4413      	add	r3, r2
 80119b8:	8363      	strh	r3, [r4, #26]
 80119ba:	b007      	add	sp, #28
 80119bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119c0:	2300      	movs	r3, #0
 80119c2:	4611      	mov	r1, r2
 80119c4:	4620      	mov	r0, r4
 80119c6:	f7ff ff42 	bl	801184e <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80119ca:	e76e      	b.n	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119cc:	4563      	cmp	r3, ip
 80119ce:	dd14      	ble.n	80119fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 80119d0:	9b02      	ldr	r3, [sp, #8]
 80119d2:	b113      	cbz	r3, 80119da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 80119d4:	2301      	movs	r3, #1
 80119d6:	460a      	mov	r2, r1
 80119d8:	e783      	b.n	80118e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 80119da:	9b01      	ldr	r3, [sp, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f43f af64 	beq.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	f47f af61 	bne.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119e8:	b116      	cbz	r6, 80119f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 80119ea:	2301      	movs	r3, #1
 80119ec:	462a      	mov	r2, r5
 80119ee:	e779      	b.n	80118e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 80119f0:	8a63      	ldrh	r3, [r4, #18]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	f43f af59 	beq.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80119f8:	e7df      	b.n	80119ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 80119fa:	2800      	cmp	r0, #0
 80119fc:	f47f af55 	bne.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011a00:	2e00      	cmp	r6, #0
 8011a02:	f43f af52 	beq.w	80118aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8011a06:	2301      	movs	r3, #1
 8011a08:	462a      	mov	r2, r5
 8011a0a:	e7db      	b.n	80119c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08011a0c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8011a0c:	b530      	push	{r4, r5, lr}
 8011a0e:	4605      	mov	r5, r0
 8011a10:	b08b      	sub	sp, #44	; 0x2c
 8011a12:	b191      	cbz	r1, 8011a3a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 8011a14:	2401      	movs	r4, #1
 8011a16:	e9cd 3100 	strd	r3, r1, [sp]
 8011a1a:	4613      	mov	r3, r2
 8011a1c:	4601      	mov	r1, r0
 8011a1e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8011a22:	a802      	add	r0, sp, #8
 8011a24:	f7ff fd0a 	bl	801143c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011a28:	2100      	movs	r1, #0
 8011a2a:	a802      	add	r0, sp, #8
 8011a2c:	f7ff ff1f 	bl	801186e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011a30:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011a34:	b163      	cbz	r3, 8011a50 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8011a36:	3401      	adds	r4, #1
 8011a38:	e7f6      	b.n	8011a28 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8011a3a:	2401      	movs	r4, #1
 8011a3c:	f002 fdae 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011a40:	280a      	cmp	r0, #10
 8011a42:	4628      	mov	r0, r5
 8011a44:	bf08      	it	eq
 8011a46:	3401      	addeq	r4, #1
 8011a48:	f002 fda8 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d1f7      	bne.n	8011a40 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8011a50:	b2a0      	uxth	r0, r4
 8011a52:	b00b      	add	sp, #44	; 0x2c
 8011a54:	bd30      	pop	{r4, r5, pc}

08011a56 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8011a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5a:	b0e5      	sub	sp, #404	; 0x194
 8011a5c:	4689      	mov	r9, r1
 8011a5e:	461c      	mov	r4, r3
 8011a60:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 8011a64:	900a      	str	r0, [sp, #40]	; 0x28
 8011a66:	f1ba 0f00 	cmp.w	sl, #0
 8011a6a:	f000 80b4 	beq.w	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	f000 80b0 	beq.w	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011a76:	7ba3      	ldrb	r3, [r4, #14]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f000 80ac 	beq.w	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011a7e:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8011a82:	6810      	ldr	r0, [r2, #0]
 8011a84:	6851      	ldr	r1, [r2, #4]
 8011a86:	2500      	movs	r5, #0
 8011a88:	4643      	mov	r3, r8
 8011a8a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8011a8e:	950f      	str	r5, [sp, #60]	; 0x3c
 8011a90:	af19      	add	r7, sp, #100	; 0x64
 8011a92:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011a96:	79a2      	ldrb	r2, [r4, #6]
 8011a98:	c303      	stmia	r3!, {r0, r1}
 8011a9a:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8011a9e:	a90f      	add	r1, sp, #60	; 0x3c
 8011aa0:	4640      	mov	r0, r8
 8011aa2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8011aa6:	f7ff fd41 	bl	801152c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011aaa:	a90f      	add	r1, sp, #60	; 0x3c
 8011aac:	79a2      	ldrb	r2, [r4, #6]
 8011aae:	4608      	mov	r0, r1
 8011ab0:	f7ff fd3c 	bl	801152c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8011ab4:	4638      	mov	r0, r7
 8011ab6:	f002 f8f9 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8011aba:	6820      	ldr	r0, [r4, #0]
 8011abc:	6803      	ldr	r3, [r0, #0]
 8011abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ac0:	4798      	blx	r3
 8011ac2:	4606      	mov	r6, r0
 8011ac4:	6820      	ldr	r0, [r4, #0]
 8011ac6:	6803      	ldr	r3, [r0, #0]
 8011ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011aca:	4798      	blx	r3
 8011acc:	4633      	mov	r3, r6
 8011ace:	9000      	str	r0, [sp, #0]
 8011ad0:	4651      	mov	r1, sl
 8011ad2:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8011ad4:	4638      	mov	r0, r7
 8011ad6:	f002 f955 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011ada:	7923      	ldrb	r3, [r4, #4]
 8011adc:	6820      	ldr	r0, [r4, #0]
 8011ade:	9308      	str	r3, [sp, #32]
 8011ae0:	6803      	ldr	r3, [r0, #0]
 8011ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ae4:	4798      	blx	r3
 8011ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aea:	181e      	adds	r6, r3, r0
 8011aec:	42ae      	cmp	r6, r5
 8011aee:	dd06      	ble.n	8011afe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8011af0:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8011af4:	4282      	cmp	r2, r0
 8011af6:	bfa4      	itt	ge
 8011af8:	189d      	addge	r5, r3, r2
 8011afa:	fb95 f5f6 	sdivge	r5, r5, r6
 8011afe:	a832      	add	r0, sp, #200	; 0xc8
 8011b00:	f002 f8d4 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8011b04:	7c23      	ldrb	r3, [r4, #16]
 8011b06:	b17b      	cbz	r3, 8011b28 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 8011b08:	6820      	ldr	r0, [r4, #0]
 8011b0a:	6803      	ldr	r3, [r0, #0]
 8011b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b0e:	4798      	blx	r3
 8011b10:	4683      	mov	fp, r0
 8011b12:	6820      	ldr	r0, [r4, #0]
 8011b14:	6803      	ldr	r3, [r0, #0]
 8011b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b18:	4798      	blx	r3
 8011b1a:	465b      	mov	r3, fp
 8011b1c:	9000      	str	r0, [sp, #0]
 8011b1e:	4651      	mov	r1, sl
 8011b20:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8011b22:	a832      	add	r0, sp, #200	; 0xc8
 8011b24:	f002 f92e 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8011b28:	7be1      	ldrb	r1, [r4, #15]
 8011b2a:	a811      	add	r0, sp, #68	; 0x44
 8011b2c:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011b30:	7963      	ldrb	r3, [r4, #5]
 8011b32:	1a52      	subs	r2, r2, r1
 8011b34:	7c21      	ldrb	r1, [r4, #16]
 8011b36:	9101      	str	r1, [sp, #4]
 8011b38:	b292      	uxth	r2, r2
 8011b3a:	6821      	ldr	r1, [r4, #0]
 8011b3c:	9100      	str	r1, [sp, #0]
 8011b3e:	a932      	add	r1, sp, #200	; 0xc8
 8011b40:	f7ff fc7c 	bl	801143c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 8011b44:	7c23      	ldrb	r3, [r4, #16]
 8011b46:	b9bb      	cbnz	r3, 8011b78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 8011b48:	fa1f fa86 	uxth.w	sl, r6
 8011b4c:	2d00      	cmp	r5, #0
 8011b4e:	dd45      	ble.n	8011bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8011b50:	4638      	mov	r0, r7
 8011b52:	f002 fd23 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d03d      	beq.n	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011b5a:	280a      	cmp	r0, #10
 8011b5c:	d1f6      	bne.n	8011b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8011b5e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011b62:	3d01      	subs	r5, #1
 8011b64:	4453      	add	r3, sl
 8011b66:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011b6a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8011b6e:	eba3 030a 	sub.w	r3, r3, sl
 8011b72:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8011b76:	e7e9      	b.n	8011b4c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8011b78:	0073      	lsls	r3, r6, #1
 8011b7a:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8011b7e:	fa1f fa86 	uxth.w	sl, r6
 8011b82:	9309      	str	r3, [sp, #36]	; 0x24
 8011b84:	2d00      	cmp	r5, #0
 8011b86:	dd29      	ble.n	8011bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8011b88:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011b8c:	a811      	add	r0, sp, #68	; 0x44
 8011b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b90:	428b      	cmp	r3, r1
 8011b92:	bfd4      	ite	le
 8011b94:	2100      	movle	r1, #0
 8011b96:	2101      	movgt	r1, #1
 8011b98:	f7ff fe69 	bl	801186e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011b9c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	455b      	cmp	r3, fp
 8011ba6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ba8:	d005      	beq.n	8011bb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8011baa:	7961      	ldrb	r1, [r4, #5]
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7f1 f87f 	bl	8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bb4:	e7f4      	b.n	8011ba0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8011bb6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011bba:	3d01      	subs	r5, #1
 8011bbc:	4453      	add	r3, sl
 8011bbe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011bc2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8011bc6:	eba3 030a 	sub.w	r3, r3, sl
 8011bca:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8011bce:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1d6      	bne.n	8011b84 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8011bd6:	b065      	add	sp, #404	; 0x194
 8011bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bdc:	0075      	lsls	r5, r6, #1
 8011bde:	f04f 0a00 	mov.w	sl, #0
 8011be2:	7c23      	ldrb	r3, [r4, #16]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d066      	beq.n	8011cb6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8011be8:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8011bec:	a811      	add	r0, sp, #68	; 0x44
 8011bee:	428d      	cmp	r5, r1
 8011bf0:	bfd4      	ite	le
 8011bf2:	2100      	movle	r1, #0
 8011bf4:	2101      	movgt	r1, #1
 8011bf6:	f7ff fe3a 	bl	801186e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011bfa:	9b08      	ldr	r3, [sp, #32]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d055      	beq.n	8011cac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011c00:	f894 b010 	ldrb.w	fp, [r4, #16]
 8011c04:	2264      	movs	r2, #100	; 0x64
 8011c06:	4639      	mov	r1, r7
 8011c08:	a84b      	add	r0, sp, #300	; 0x12c
 8011c0a:	f00e fc35 	bl	8020478 <memcpy>
 8011c0e:	f1bb 0f00 	cmp.w	fp, #0
 8011c12:	d058      	beq.n	8011cc6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 8011c14:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8011c18:	7922      	ldrb	r2, [r4, #4]
 8011c1a:	2a01      	cmp	r2, #1
 8011c1c:	d13c      	bne.n	8011c98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8011c1e:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8011c22:	1ac0      	subs	r0, r0, r3
 8011c24:	2302      	movs	r3, #2
 8011c26:	fb90 f0f3 	sdiv	r0, r0, r3
 8011c2a:	b200      	sxth	r0, r0
 8011c2c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011c30:	4418      	add	r0, r3
 8011c32:	7c23      	ldrb	r3, [r4, #16]
 8011c34:	b200      	sxth	r0, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d03a      	beq.n	8011cb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8011c3a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8011c3e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8011c42:	9000      	str	r0, [sp, #0]
 8011c44:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8011c48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011c4a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8011c4e:	e9cd a703 	strd	sl, r7, [sp, #12]
 8011c52:	e9cd 8401 	strd	r8, r4, [sp, #4]
 8011c56:	464a      	mov	r2, r9
 8011c58:	2100      	movs	r1, #0
 8011c5a:	f7ff fc98 	bl	801158e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d1b9      	bne.n	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011c62:	b2b2      	uxth	r2, r6
 8011c64:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8011c68:	4611      	mov	r1, r2
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8011c70:	b21b      	sxth	r3, r3
 8011c72:	1a52      	subs	r2, r2, r1
 8011c74:	7c21      	ldrb	r1, [r4, #16]
 8011c76:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8011c7a:	b212      	sxth	r2, r2
 8011c7c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 8011c80:	b109      	cbz	r1, 8011c86 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 8011c82:	42b2      	cmp	r2, r6
 8011c84:	dba7      	blt.n	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011c86:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8011c8a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8011c8e:	440a      	add	r2, r1
 8011c90:	b212      	sxth	r2, r2
 8011c92:	4293      	cmp	r3, r2
 8011c94:	dda5      	ble.n	8011be2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8011c96:	e79e      	b.n	8011bd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8011c98:	2a02      	cmp	r2, #2
 8011c9a:	d105      	bne.n	8011ca8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8011c9c:	7be2      	ldrb	r2, [r4, #15]
 8011c9e:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 8011ca2:	1a80      	subs	r0, r0, r2
 8011ca4:	1ac0      	subs	r0, r0, r3
 8011ca6:	e7c0      	b.n	8011c2a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8011ca8:	2000      	movs	r0, #0
 8011caa:	e7bf      	b.n	8011c2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8011cac:	7be0      	ldrb	r0, [r4, #15]
 8011cae:	e7bd      	b.n	8011c2c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8011cb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011cb4:	e7c3      	b.n	8011c3e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8011cb6:	9b08      	ldr	r3, [sp, #32]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d0f7      	beq.n	8011cac <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8011cbc:	2264      	movs	r2, #100	; 0x64
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	a84b      	add	r0, sp, #300	; 0x12c
 8011cc2:	f00e fbd9 	bl	8020478 <memcpy>
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011ccc:	6821      	ldr	r1, [r4, #0]
 8011cce:	a84b      	add	r0, sp, #300	; 0x12c
 8011cd0:	f7ff fbf0 	bl	80114b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8011cd4:	b203      	sxth	r3, r0
 8011cd6:	e79f      	b.n	8011c18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08011cd8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011cd8:	2b02      	cmp	r3, #2
 8011cda:	b510      	push	{r4, lr}
 8011cdc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011ce0:	d00b      	beq.n	8011cfa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 8011ce2:	2b03      	cmp	r3, #3
 8011ce4:	d00e      	beq.n	8011d04 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 8011ce6:	2b01      	cmp	r3, #1
 8011ce8:	d001      	beq.n	8011cee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 8011cea:	1860      	adds	r0, r4, r1
 8011cec:	bd10      	pop	{r4, pc}
 8011cee:	8880      	ldrh	r0, [r0, #4]
 8011cf0:	4420      	add	r0, r4
 8011cf2:	b200      	sxth	r0, r0
 8011cf4:	1a80      	subs	r0, r0, r2
 8011cf6:	3801      	subs	r0, #1
 8011cf8:	e7f8      	b.n	8011cec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 8011cfa:	8880      	ldrh	r0, [r0, #4]
 8011cfc:	4420      	add	r0, r4
 8011cfe:	b200      	sxth	r0, r0
 8011d00:	1a40      	subs	r0, r0, r1
 8011d02:	e7f8      	b.n	8011cf6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011d04:	18a0      	adds	r0, r4, r2
 8011d06:	e7f1      	b.n	8011cec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

08011d08 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011d10:	d006      	beq.n	8011d20 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 8011d12:	2b03      	cmp	r3, #3
 8011d14:	d00a      	beq.n	8011d2c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	bf14      	ite	ne
 8011d1a:	18a0      	addne	r0, r4, r2
 8011d1c:	1860      	addeq	r0, r4, r1
 8011d1e:	bd10      	pop	{r4, pc}
 8011d20:	88c0      	ldrh	r0, [r0, #6]
 8011d22:	4420      	add	r0, r4
 8011d24:	b200      	sxth	r0, r0
 8011d26:	1a80      	subs	r0, r0, r2
 8011d28:	3801      	subs	r0, #1
 8011d2a:	e7f8      	b.n	8011d1e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 8011d2c:	88c0      	ldrh	r0, [r0, #6]
 8011d2e:	4420      	add	r0, r4
 8011d30:	b200      	sxth	r0, r0
 8011d32:	1a40      	subs	r0, r0, r1
 8011d34:	e7f8      	b.n	8011d28 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

08011d38 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011d38:	4b01      	ldr	r3, [pc, #4]	; (8011d40 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	601a      	str	r2, [r3, #0]
 8011d3e:	4770      	bx	lr
 8011d40:	2400f1c0 	.word	0x2400f1c0

08011d44 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011d44:	4603      	mov	r3, r0
 8011d46:	b1c8      	cbz	r0, 8011d7c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011d48:	0c02      	lsrs	r2, r0, #16
 8011d4a:	0412      	lsls	r2, r2, #16
 8011d4c:	b9a2      	cbnz	r2, 8011d78 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8011d4e:	0403      	lsls	r3, r0, #16
 8011d50:	2010      	movs	r0, #16
 8011d52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011d56:	bf04      	itt	eq
 8011d58:	021b      	lsleq	r3, r3, #8
 8011d5a:	3008      	addeq	r0, #8
 8011d5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011d60:	bf04      	itt	eq
 8011d62:	011b      	lsleq	r3, r3, #4
 8011d64:	3004      	addeq	r0, #4
 8011d66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011d6a:	bf04      	itt	eq
 8011d6c:	009b      	lsleq	r3, r3, #2
 8011d6e:	3002      	addeq	r0, #2
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	db04      	blt.n	8011d7e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011d74:	3001      	adds	r0, #1
 8011d76:	4770      	bx	lr
 8011d78:	2000      	movs	r0, #0
 8011d7a:	e7ea      	b.n	8011d52 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011d7c:	2020      	movs	r0, #32
 8011d7e:	4770      	bx	lr

08011d80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	b087      	sub	sp, #28
 8011d86:	4681      	mov	r9, r0
 8011d88:	4698      	mov	r8, r3
 8011d8a:	4610      	mov	r0, r2
 8011d8c:	460d      	mov	r5, r1
 8011d8e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8011d92:	b981      	cbnz	r1, 8011db6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8011d94:	b14b      	cbz	r3, 8011daa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8011d96:	460b      	mov	r3, r1
 8011d98:	464a      	mov	r2, r9
 8011d9a:	4641      	mov	r1, r8
 8011d9c:	e9cd 4700 	strd	r4, r7, [sp]
 8011da0:	f7ff ffee 	bl	8011d80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011da4:	b007      	add	sp, #28
 8011da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011daa:	f04f 33ff 	mov.w	r3, #4294967295
 8011dae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8011db2:	603b      	str	r3, [r7, #0]
 8011db4:	e7f6      	b.n	8011da4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011db6:	fa32 fa01 	lsrs.w	sl, r2, r1
 8011dba:	d107      	bne.n	8011dcc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8011dbc:	fb09 f602 	mul.w	r6, r9, r2
 8011dc0:	fbb6 f0f4 	udiv	r0, r6, r4
 8011dc4:	fb04 6610 	mls	r6, r4, r0, r6
 8011dc8:	603e      	str	r6, [r7, #0]
 8011dca:	e7eb      	b.n	8011da4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8011dcc:	2601      	movs	r6, #1
 8011dce:	fa09 fb01 	lsl.w	fp, r9, r1
 8011dd2:	408e      	lsls	r6, r1
 8011dd4:	fbbb f3f4 	udiv	r3, fp, r4
 8011dd8:	3e01      	subs	r6, #1
 8011dda:	9302      	str	r3, [sp, #8]
 8011ddc:	fb0a f303 	mul.w	r3, sl, r3
 8011de0:	4016      	ands	r6, r2
 8011de2:	9303      	str	r3, [sp, #12]
 8011de4:	4630      	mov	r0, r6
 8011de6:	f7ff ffad 	bl	8011d44 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011dea:	464a      	mov	r2, r9
 8011dec:	460b      	mov	r3, r1
 8011dee:	4601      	mov	r1, r0
 8011df0:	4630      	mov	r0, r6
 8011df2:	e9cd 4700 	strd	r4, r7, [sp]
 8011df6:	f7ff ffc3 	bl	8011d80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011dfa:	9b02      	ldr	r3, [sp, #8]
 8011dfc:	4606      	mov	r6, r0
 8011dfe:	eb05 0108 	add.w	r1, r5, r8
 8011e02:	fb04 bb13 	mls	fp, r4, r3, fp
 8011e06:	4658      	mov	r0, fp
 8011e08:	f7ff ff9c 	bl	8011d44 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011e0c:	ab05      	add	r3, sp, #20
 8011e0e:	465a      	mov	r2, fp
 8011e10:	e9cd 4300 	strd	r4, r3, [sp]
 8011e14:	4603      	mov	r3, r0
 8011e16:	4650      	mov	r0, sl
 8011e18:	f7ff ffb2 	bl	8011d80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011e1c:	6839      	ldr	r1, [r7, #0]
 8011e1e:	9a05      	ldr	r2, [sp, #20]
 8011e20:	9b03      	ldr	r3, [sp, #12]
 8011e22:	4411      	add	r1, r2
 8011e24:	fbb1 f2f4 	udiv	r2, r1, r4
 8011e28:	18d3      	adds	r3, r2, r3
 8011e2a:	fb04 1412 	mls	r4, r4, r2, r1
 8011e2e:	441e      	add	r6, r3
 8011e30:	603c      	str	r4, [r7, #0]
 8011e32:	4430      	add	r0, r6
 8011e34:	e7b6      	b.n	8011da4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011e36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	f1b0 0900 	subs.w	r9, r0, #0
 8011e40:	461d      	mov	r5, r3
 8011e42:	4617      	mov	r7, r2
 8011e44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011e46:	bfbb      	ittet	lt
 8011e48:	f1c9 0900 	rsblt	r9, r9, #0
 8011e4c:	f04f 36ff 	movlt.w	r6, #4294967295
 8011e50:	2601      	movge	r6, #1
 8011e52:	6823      	ldrlt	r3, [r4, #0]
 8011e54:	bfbc      	itt	lt
 8011e56:	425b      	neglt	r3, r3
 8011e58:	6023      	strlt	r3, [r4, #0]
 8011e5a:	2a00      	cmp	r2, #0
 8011e5c:	da04      	bge.n	8011e68 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	4257      	negs	r7, r2
 8011e62:	4276      	negs	r6, r6
 8011e64:	425b      	negs	r3, r3
 8011e66:	6023      	str	r3, [r4, #0]
 8011e68:	2d00      	cmp	r5, #0
 8011e6a:	4638      	mov	r0, r7
 8011e6c:	bfba      	itte	lt
 8011e6e:	426d      	neglt	r5, r5
 8011e70:	f04f 38ff 	movlt.w	r8, #4294967295
 8011e74:	f04f 0801 	movge.w	r8, #1
 8011e78:	f7ff ff64 	bl	8011d44 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011e7c:	ab03      	add	r3, sp, #12
 8011e7e:	463a      	mov	r2, r7
 8011e80:	e9cd 5300 	strd	r5, r3, [sp]
 8011e84:	4603      	mov	r3, r0
 8011e86:	4648      	mov	r0, r9
 8011e88:	f7ff ff7a 	bl	8011d80 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	9a03      	ldr	r2, [sp, #12]
 8011e90:	4546      	cmp	r6, r8
 8011e92:	441a      	add	r2, r3
 8011e94:	fb92 f3f5 	sdiv	r3, r2, r5
 8011e98:	4418      	add	r0, r3
 8011e9a:	fb05 2313 	mls	r3, r5, r3, r2
 8011e9e:	bf18      	it	ne
 8011ea0:	4240      	negne	r0, r0
 8011ea2:	1c72      	adds	r2, r6, #1
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	d105      	bne.n	8011eb4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f1c3 0200 	rsb	r2, r3, #0
 8011eae:	db0b      	blt.n	8011ec8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011eb0:	6022      	str	r2, [r4, #0]
 8011eb2:	e006      	b.n	8011ec2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011eb4:	2e01      	cmp	r6, #1
 8011eb6:	d104      	bne.n	8011ec2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	da02      	bge.n	8011ec2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011ebc:	442b      	add	r3, r5
 8011ebe:	3801      	subs	r0, #1
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	b005      	add	sp, #20
 8011ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ec8:	3801      	subs	r0, #1
 8011eca:	1b52      	subs	r2, r2, r5
 8011ecc:	e7f0      	b.n	8011eb0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08011ed0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011ed0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011ed4:	4c1c      	ldr	r4, [pc, #112]	; (8011f48 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011ed6:	4605      	mov	r5, r0
 8011ed8:	6807      	ldr	r7, [r0, #0]
 8011eda:	69a3      	ldr	r3, [r4, #24]
 8011edc:	b92b      	cbnz	r3, 8011eea <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8011ede:	6840      	ldr	r0, [r0, #4]
 8011ee0:	e9c5 7000 	strd	r7, r0, [r5]
 8011ee4:	b004      	add	sp, #16
 8011ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eea:	f04f 0802 	mov.w	r8, #2
 8011eee:	68a2      	ldr	r2, [r4, #8]
 8011ef0:	ae04      	add	r6, sp, #16
 8011ef2:	6820      	ldr	r0, [r4, #0]
 8011ef4:	fb93 f1f8 	sdiv	r1, r3, r8
 8011ef8:	440a      	add	r2, r1
 8011efa:	69e1      	ldr	r1, [r4, #28]
 8011efc:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011f00:	463a      	mov	r2, r7
 8011f02:	9600      	str	r6, [sp, #0]
 8011f04:	f7ff ff97 	bl	8011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011f08:	69a3      	ldr	r3, [r4, #24]
 8011f0a:	4607      	mov	r7, r0
 8011f0c:	686a      	ldr	r2, [r5, #4]
 8011f0e:	6a21      	ldr	r1, [r4, #32]
 8011f10:	9600      	str	r6, [sp, #0]
 8011f12:	6860      	ldr	r0, [r4, #4]
 8011f14:	f7ff ff8f 	bl	8011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011f18:	69a3      	ldr	r3, [r4, #24]
 8011f1a:	6962      	ldr	r2, [r4, #20]
 8011f1c:	4407      	add	r7, r0
 8011f1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011f20:	9600      	str	r6, [sp, #0]
 8011f22:	68e0      	ldr	r0, [r4, #12]
 8011f24:	fb93 f8f8 	sdiv	r8, r3, r8
 8011f28:	4442      	add	r2, r8
 8011f2a:	9203      	str	r2, [sp, #12]
 8011f2c:	682a      	ldr	r2, [r5, #0]
 8011f2e:	f7ff ff82 	bl	8011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011f32:	4680      	mov	r8, r0
 8011f34:	9600      	str	r6, [sp, #0]
 8011f36:	69a3      	ldr	r3, [r4, #24]
 8011f38:	686a      	ldr	r2, [r5, #4]
 8011f3a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011f3c:	6920      	ldr	r0, [r4, #16]
 8011f3e:	f7ff ff7a 	bl	8011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011f42:	4440      	add	r0, r8
 8011f44:	e7cc      	b.n	8011ee0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011f46:	bf00      	nop
 8011f48:	2400f1c4 	.word	0x2400f1c4

08011f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011f4c:	4b07      	ldr	r3, [pc, #28]	; (8011f6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d109      	bne.n	8011f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011f54:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011f58:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011f5c:	8003      	strh	r3, [r0, #0]
 8011f5e:	4b04      	ldr	r3, [pc, #16]	; (8011f70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011f60:	881b      	ldrh	r3, [r3, #0]
 8011f62:	3b01      	subs	r3, #1
 8011f64:	1a9b      	subs	r3, r3, r2
 8011f66:	800b      	strh	r3, [r1, #0]
 8011f68:	4770      	bx	lr
 8011f6a:	bf00      	nop
 8011f6c:	2400f190 	.word	0x2400f190
 8011f70:	2400f18c 	.word	0x2400f18c

08011f74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8011f74:	4b07      	ldr	r3, [pc, #28]	; (8011f94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8011f76:	b510      	push	{r4, lr}
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b01      	cmp	r3, #1
 8011f7c:	d108      	bne.n	8011f90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8011f7e:	4b06      	ldr	r3, [pc, #24]	; (8011f98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011f80:	880c      	ldrh	r4, [r1, #0]
 8011f82:	881b      	ldrh	r3, [r3, #0]
 8011f84:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	1b1b      	subs	r3, r3, r4
 8011f8c:	8003      	strh	r3, [r0, #0]
 8011f8e:	800a      	strh	r2, [r1, #0]
 8011f90:	bd10      	pop	{r4, pc}
 8011f92:	bf00      	nop
 8011f94:	2400f190 	.word	0x2400f190
 8011f98:	2400f18c 	.word	0x2400f18c

08011f9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8011f9c:	4b0a      	ldr	r3, [pc, #40]	; (8011fc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8011f9e:	b510      	push	{r4, lr}
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	2b01      	cmp	r3, #1
 8011fa4:	d10e      	bne.n	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011fa6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011faa:	8843      	ldrh	r3, [r0, #2]
 8011fac:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011fb0:	18ca      	adds	r2, r1, r3
 8011fb2:	4b06      	ldr	r3, [pc, #24]	; (8011fcc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011fb4:	8044      	strh	r4, [r0, #2]
 8011fb6:	881b      	ldrh	r3, [r3, #0]
 8011fb8:	1a9b      	subs	r3, r3, r2
 8011fba:	8003      	strh	r3, [r0, #0]
 8011fbc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011fc0:	8081      	strh	r1, [r0, #4]
 8011fc2:	80c3      	strh	r3, [r0, #6]
 8011fc4:	bd10      	pop	{r4, pc}
 8011fc6:	bf00      	nop
 8011fc8:	2400f190 	.word	0x2400f190
 8011fcc:	2400f18c 	.word	0x2400f18c

08011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011fd0:	4b08      	ldr	r3, [pc, #32]	; (8011ff4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011fd2:	781b      	ldrb	r3, [r3, #0]
 8011fd4:	2b01      	cmp	r3, #1
 8011fd6:	d10c      	bne.n	8011ff2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011fd8:	8803      	ldrh	r3, [r0, #0]
 8011fda:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011fde:	8842      	ldrh	r2, [r0, #2]
 8011fe0:	8002      	strh	r2, [r0, #0]
 8011fe2:	185a      	adds	r2, r3, r1
 8011fe4:	4b04      	ldr	r3, [pc, #16]	; (8011ff8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	1a9b      	subs	r3, r3, r2
 8011fea:	8043      	strh	r3, [r0, #2]
 8011fec:	88c3      	ldrh	r3, [r0, #6]
 8011fee:	80c1      	strh	r1, [r0, #6]
 8011ff0:	8083      	strh	r3, [r0, #4]
 8011ff2:	4770      	bx	lr
 8011ff4:	2400f190 	.word	0x2400f190
 8011ff8:	2400f18c 	.word	0x2400f18c

08011ffc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011ffc:	4b07      	ldr	r3, [pc, #28]	; (801201c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011ffe:	b510      	push	{r4, lr}
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	2b01      	cmp	r3, #1
 8012004:	d108      	bne.n	8012018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012006:	f9b1 3000 	ldrsh.w	r3, [r1]
 801200a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801200e:	8003      	strh	r3, [r0, #0]
 8012010:	8893      	ldrh	r3, [r2, #4]
 8012012:	3b01      	subs	r3, #1
 8012014:	1b1b      	subs	r3, r3, r4
 8012016:	800b      	strh	r3, [r1, #0]
 8012018:	bd10      	pop	{r4, pc}
 801201a:	bf00      	nop
 801201c:	2400f190 	.word	0x2400f190

08012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012020:	4b0a      	ldr	r3, [pc, #40]	; (801204c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012022:	460a      	mov	r2, r1
 8012024:	b510      	push	{r4, lr}
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d10d      	bne.n	8012048 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801202c:	8881      	ldrh	r1, [r0, #4]
 801202e:	8803      	ldrh	r3, [r0, #0]
 8012030:	440b      	add	r3, r1
 8012032:	4601      	mov	r1, r0
 8012034:	3b01      	subs	r3, #1
 8012036:	f821 3b02 	strh.w	r3, [r1], #2
 801203a:	f7ff ffdf 	bl	8011ffc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801203e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012042:	88c2      	ldrh	r2, [r0, #6]
 8012044:	80c3      	strh	r3, [r0, #6]
 8012046:	8082      	strh	r2, [r0, #4]
 8012048:	bd10      	pop	{r4, pc}
 801204a:	bf00      	nop
 801204c:	2400f190 	.word	0x2400f190

08012050 <_ZN8touchgfx11Application13requestRedrawEv>:
 8012050:	4b06      	ldr	r3, [pc, #24]	; (801206c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8012052:	2100      	movs	r1, #0
 8012054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012058:	4b05      	ldr	r3, [pc, #20]	; (8012070 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801205a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801205e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012062:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8012066:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801206a:	4770      	bx	lr
 801206c:	2400f18c 	.word	0x2400f18c
 8012070:	2400f18e 	.word	0x2400f18e

08012074 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012074:	4b03      	ldr	r3, [pc, #12]	; (8012084 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012076:	6818      	ldr	r0, [r3, #0]
 8012078:	b110      	cbz	r0, 8012080 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801207a:	6803      	ldr	r3, [r0, #0]
 801207c:	699b      	ldr	r3, [r3, #24]
 801207e:	4718      	bx	r3
 8012080:	4770      	bx	lr
 8012082:	bf00      	nop
 8012084:	2400f1f4 	.word	0x2400f1f4

08012088 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012088:	4770      	bx	lr
	...

0801208c <_ZN8touchgfx11Application4drawEv>:
 801208c:	4b09      	ldr	r3, [pc, #36]	; (80120b4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801208e:	b507      	push	{r0, r1, r2, lr}
 8012090:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012094:	2100      	movs	r1, #0
 8012096:	4b08      	ldr	r3, [pc, #32]	; (80120b8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012098:	9100      	str	r1, [sp, #0]
 801209a:	4669      	mov	r1, sp
 801209c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80120a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80120a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120a8:	6803      	ldr	r3, [r0, #0]
 80120aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ac:	4798      	blx	r3
 80120ae:	b003      	add	sp, #12
 80120b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80120b4:	2400f18c 	.word	0x2400f18c
 80120b8:	2400f18e 	.word	0x2400f18e

080120bc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80120bc:	4b03      	ldr	r3, [pc, #12]	; (80120cc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80120be:	6818      	ldr	r0, [r3, #0]
 80120c0:	b110      	cbz	r0, 80120c8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80120c2:	6803      	ldr	r3, [r0, #0]
 80120c4:	69db      	ldr	r3, [r3, #28]
 80120c6:	4718      	bx	r3
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop
 80120cc:	2400f1f4 	.word	0x2400f1f4

080120d0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80120d0:	4b03      	ldr	r3, [pc, #12]	; (80120e0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80120d2:	6818      	ldr	r0, [r3, #0]
 80120d4:	b110      	cbz	r0, 80120dc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80120d6:	6803      	ldr	r3, [r0, #0]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	4718      	bx	r3
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop
 80120e0:	2400f1f4 	.word	0x2400f1f4

080120e4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80120e4:	2300      	movs	r3, #0
 80120e6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 80120ea:	4770      	bx	lr

080120ec <_ZN8touchgfx11Application14handleKeyEventEh>:
 80120ec:	4b03      	ldr	r3, [pc, #12]	; (80120fc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80120ee:	6818      	ldr	r0, [r3, #0]
 80120f0:	b110      	cbz	r0, 80120f8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80120f2:	6803      	ldr	r3, [r0, #0]
 80120f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120f6:	4718      	bx	r3
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	2400f1f4 	.word	0x2400f1f4

08012100 <_ZN8touchgfx11ApplicationD1Ev>:
 8012100:	4770      	bx	lr

08012102 <_ZN8touchgfx11ApplicationD0Ev>:
 8012102:	b510      	push	{r4, lr}
 8012104:	4604      	mov	r4, r0
 8012106:	f44f 719c 	mov.w	r1, #312	; 0x138
 801210a:	f00d fa1c 	bl	801f546 <_ZdlPvj>
 801210e:	4620      	mov	r0, r4
 8012110:	bd10      	pop	{r4, pc}
	...

08012114 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	4d38      	ldr	r5, [pc, #224]	; (80121f8 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 8012118:	4604      	mov	r4, r0
 801211a:	6828      	ldr	r0, [r5, #0]
 801211c:	b140      	cbz	r0, 8012130 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801211e:	7a03      	ldrb	r3, [r0, #8]
 8012120:	b933      	cbnz	r3, 8012130 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012122:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8012126:	6803      	ldr	r3, [r0, #0]
 8012128:	689b      	ldr	r3, [r3, #8]
 801212a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801212e:	4718      	bx	r3
 8012130:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8012134:	b97b      	cbnz	r3, 8012156 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012136:	b170      	cbz	r0, 8012156 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012138:	7a03      	ldrb	r3, [r0, #8]
 801213a:	b163      	cbz	r3, 8012156 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801213c:	4b2f      	ldr	r3, [pc, #188]	; (80121fc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801213e:	6818      	ldr	r0, [r3, #0]
 8012140:	b110      	cbz	r0, 8012148 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012142:	6803      	ldr	r3, [r0, #0]
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	4798      	blx	r3
 8012148:	6828      	ldr	r0, [r5, #0]
 801214a:	6803      	ldr	r3, [r0, #0]
 801214c:	68db      	ldr	r3, [r3, #12]
 801214e:	4798      	blx	r3
 8012150:	2301      	movs	r3, #1
 8012152:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8012156:	2500      	movs	r5, #0
 8012158:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801215c:	42a8      	cmp	r0, r5
 801215e:	dd0c      	ble.n	801217a <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8012160:	1963      	adds	r3, r4, r5
 8012162:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012166:	b132      	cbz	r2, 8012176 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8012168:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801216c:	4413      	add	r3, r2
 801216e:	6858      	ldr	r0, [r3, #4]
 8012170:	6803      	ldr	r3, [r0, #0]
 8012172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012174:	4798      	blx	r3
 8012176:	3501      	adds	r5, #1
 8012178:	e7ee      	b.n	8012158 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801217a:	2300      	movs	r3, #0
 801217c:	461a      	mov	r2, r3
 801217e:	4298      	cmp	r0, r3
 8012180:	d10f      	bne.n	80121a2 <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 8012182:	1d25      	adds	r5, r4, #4
 8012184:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 8012188:	4291      	cmp	r1, r2
 801218a:	dd2d      	ble.n	80121e8 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801218c:	1e48      	subs	r0, r1, #1
 801218e:	b280      	uxth	r0, r0
 8012190:	4288      	cmp	r0, r1
 8012192:	d31a      	bcc.n	80121ca <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 8012194:	4b1a      	ldr	r3, [pc, #104]	; (8012200 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 8012196:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 801219a:	4a1a      	ldr	r2, [pc, #104]	; (8012204 <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801219c:	481a      	ldr	r0, [pc, #104]	; (8012208 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801219e:	f00d fff9 	bl	8020194 <__assert_func>
 80121a2:	18e1      	adds	r1, r4, r3
 80121a4:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 80121a8:	b16d      	cbz	r5, 80121c6 <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d00a      	beq.n	80121c4 <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 80121ae:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 80121b2:	4431      	add	r1, r6
 80121b4:	684e      	ldr	r6, [r1, #4]
 80121b6:	b291      	uxth	r1, r2
 80121b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80121bc:	604e      	str	r6, [r1, #4]
 80121be:	18a1      	adds	r1, r4, r2
 80121c0:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 80121c4:	3201      	adds	r2, #1
 80121c6:	3301      	adds	r3, #1
 80121c8:	e7d9      	b.n	801217e <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 80121ca:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 80121ce:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80121d2:	3304      	adds	r3, #4
 80121d4:	428b      	cmp	r3, r1
 80121d6:	d004      	beq.n	80121e2 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 80121d8:	f853 6f04 	ldr.w	r6, [r3, #4]!
 80121dc:	f843 6c04 	str.w	r6, [r3, #-4]
 80121e0:	e7f8      	b.n	80121d4 <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 80121e2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80121e6:	e7cd      	b.n	8012184 <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 80121e8:	4b04      	ldr	r3, [pc, #16]	; (80121fc <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 80121ea:	6818      	ldr	r0, [r3, #0]
 80121ec:	b110      	cbz	r0, 80121f4 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 80121ee:	6803      	ldr	r3, [r0, #0]
 80121f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121f2:	e79a      	b.n	801212a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80121f4:	bd70      	pop	{r4, r5, r6, pc}
 80121f6:	bf00      	nop
 80121f8:	2400f1f8 	.word	0x2400f1f8
 80121fc:	2400f1f4 	.word	0x2400f1f4
 8012200:	0802520f 	.word	0x0802520f
 8012204:	08025404 	.word	0x08025404
 8012208:	0802521d 	.word	0x0802521d

0801220c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801220c:	b570      	push	{r4, r5, r6, lr}
 801220e:	4606      	mov	r6, r0
 8012210:	460c      	mov	r4, r1
 8012212:	b929      	cbnz	r1, 8012220 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 8012214:	4b0c      	ldr	r3, [pc, #48]	; (8012248 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 8012216:	215e      	movs	r1, #94	; 0x5e
 8012218:	4a0c      	ldr	r2, [pc, #48]	; (801224c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801221a:	480d      	ldr	r0, [pc, #52]	; (8012250 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801221c:	f00d ffba 	bl	8020194 <__assert_func>
 8012220:	2300      	movs	r3, #0
 8012222:	4d0c      	ldr	r5, [pc, #48]	; (8012254 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 8012224:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8012228:	6828      	ldr	r0, [r5, #0]
 801222a:	b110      	cbz	r0, 8012232 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801222c:	6803      	ldr	r3, [r0, #0]
 801222e:	695b      	ldr	r3, [r3, #20]
 8012230:	4798      	blx	r3
 8012232:	602c      	str	r4, [r5, #0]
 8012234:	4620      	mov	r0, r4
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	68db      	ldr	r3, [r3, #12]
 801223a:	4798      	blx	r3
 801223c:	6833      	ldr	r3, [r6, #0]
 801223e:	4630      	mov	r0, r6
 8012240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012246:	4718      	bx	r3
 8012248:	080251db 	.word	0x080251db
 801224c:	080252c4 	.word	0x080252c4
 8012250:	080251e5 	.word	0x080251e5
 8012254:	2400f1f4 	.word	0x2400f1f4

08012258 <_ZN8touchgfx4Rect10restrictToEss>:
 8012258:	f9b0 3000 	ldrsh.w	r3, [r0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	b510      	push	{r4, lr}
 8012260:	da04      	bge.n	801226c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012262:	8884      	ldrh	r4, [r0, #4]
 8012264:	4423      	add	r3, r4
 8012266:	8083      	strh	r3, [r0, #4]
 8012268:	2300      	movs	r3, #0
 801226a:	8003      	strh	r3, [r0, #0]
 801226c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012270:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012274:	1b09      	subs	r1, r1, r4
 8012276:	428b      	cmp	r3, r1
 8012278:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801227c:	bfc8      	it	gt
 801227e:	8081      	strhgt	r1, [r0, #4]
 8012280:	2b00      	cmp	r3, #0
 8012282:	da04      	bge.n	801228e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012284:	88c1      	ldrh	r1, [r0, #6]
 8012286:	440b      	add	r3, r1
 8012288:	80c3      	strh	r3, [r0, #6]
 801228a:	2300      	movs	r3, #0
 801228c:	8043      	strh	r3, [r0, #2]
 801228e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012292:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012296:	1a52      	subs	r2, r2, r1
 8012298:	4293      	cmp	r3, r2
 801229a:	bfc8      	it	gt
 801229c:	80c2      	strhgt	r2, [r0, #6]
 801229e:	bd10      	pop	{r4, pc}

080122a0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80122a0:	4b10      	ldr	r3, [pc, #64]	; (80122e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80122a2:	b510      	push	{r4, lr}
 80122a4:	460c      	mov	r4, r1
 80122a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122aa:	4b0f      	ldr	r3, [pc, #60]	; (80122e8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80122ac:	4620      	mov	r0, r4
 80122ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80122b2:	f7ff ffd1 	bl	8012258 <_ZN8touchgfx4Rect10restrictToEss>
 80122b6:	4b0d      	ldr	r3, [pc, #52]	; (80122ec <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	b190      	cbz	r0, 80122e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80122bc:	6803      	ldr	r3, [r0, #0]
 80122be:	4621      	mov	r1, r4
 80122c0:	689b      	ldr	r3, [r3, #8]
 80122c2:	4798      	blx	r3
 80122c4:	4b0a      	ldr	r3, [pc, #40]	; (80122f0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80122c6:	6818      	ldr	r0, [r3, #0]
 80122c8:	b118      	cbz	r0, 80122d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80122ca:	6803      	ldr	r3, [r0, #0]
 80122cc:	4621      	mov	r1, r4
 80122ce:	689b      	ldr	r3, [r3, #8]
 80122d0:	4798      	blx	r3
 80122d2:	4b08      	ldr	r3, [pc, #32]	; (80122f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80122d4:	4621      	mov	r1, r4
 80122d6:	6818      	ldr	r0, [r3, #0]
 80122d8:	6803      	ldr	r3, [r0, #0]
 80122da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122de:	69db      	ldr	r3, [r3, #28]
 80122e0:	4718      	bx	r3
 80122e2:	bd10      	pop	{r4, pc}
 80122e4:	2400f18e 	.word	0x2400f18e
 80122e8:	2400f18c 	.word	0x2400f18c
 80122ec:	2400f1f4 	.word	0x2400f1f4
 80122f0:	2400f1f0 	.word	0x2400f1f0
 80122f4:	2400f198 	.word	0x2400f198

080122f8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	4606      	mov	r6, r0
 80122fc:	4608      	mov	r0, r1
 80122fe:	460f      	mov	r7, r1
 8012300:	f7fa fedb 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012304:	b9e8      	cbnz	r0, 8012342 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012306:	f9b7 5000 	ldrsh.w	r5, [r7]
 801230a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801230e:	42a5      	cmp	r5, r4
 8012310:	db17      	blt.n	8012342 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012312:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012316:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801231a:	429a      	cmp	r2, r3
 801231c:	db11      	blt.n	8012342 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801231e:	88b9      	ldrh	r1, [r7, #4]
 8012320:	440d      	add	r5, r1
 8012322:	88b1      	ldrh	r1, [r6, #4]
 8012324:	440c      	add	r4, r1
 8012326:	b22d      	sxth	r5, r5
 8012328:	b224      	sxth	r4, r4
 801232a:	42a5      	cmp	r5, r4
 801232c:	dc09      	bgt.n	8012342 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801232e:	88f8      	ldrh	r0, [r7, #6]
 8012330:	4410      	add	r0, r2
 8012332:	88f2      	ldrh	r2, [r6, #6]
 8012334:	4413      	add	r3, r2
 8012336:	b200      	sxth	r0, r0
 8012338:	b21b      	sxth	r3, r3
 801233a:	4298      	cmp	r0, r3
 801233c:	bfcc      	ite	gt
 801233e:	2000      	movgt	r0, #0
 8012340:	2001      	movle	r0, #1
 8012342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012344 <_ZN8touchgfx11Application11getInstanceEv>:
 8012344:	4b01      	ldr	r3, [pc, #4]	; (801234c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012346:	6818      	ldr	r0, [r3, #0]
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop
 801234c:	2400f204 	.word	0x2400f204

08012350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8012350:	2300      	movs	r3, #0
 8012352:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8012356:	30a8      	adds	r0, #168	; 0xa8
 8012358:	f820 3c24 	strh.w	r3, [r0, #-36]
 801235c:	f802 3b01 	strb.w	r3, [r2], #1
 8012360:	4282      	cmp	r2, r0
 8012362:	d1fb      	bne.n	801235c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8012364:	4770      	bx	lr

08012366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012366:	4603      	mov	r3, r0
 8012368:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801236c:	2200      	movs	r2, #0
 801236e:	801a      	strh	r2, [r3, #0]
 8012370:	3308      	adds	r3, #8
 8012372:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012376:	f823 2c04 	strh.w	r2, [r3, #-4]
 801237a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801237e:	428b      	cmp	r3, r1
 8012380:	d1f5      	bne.n	801236e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012382:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012386:	4770      	bx	lr

08012388 <_ZN8touchgfx11ApplicationC1Ev>:
 8012388:	b570      	push	{r4, r5, r6, lr}
 801238a:	4b19      	ldr	r3, [pc, #100]	; (80123f0 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801238c:	2500      	movs	r5, #0
 801238e:	4604      	mov	r4, r0
 8012390:	30a8      	adds	r0, #168	; 0xa8
 8012392:	f840 3ca8 	str.w	r3, [r0, #-168]
 8012396:	f820 5c24 	strh.w	r5, [r0, #-36]
 801239a:	f7ff ffe4 	bl	8012366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801239e:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80123a2:	f7ff ffe0 	bl	8012366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80123a6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80123aa:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80123ae:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80123b2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80123b6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80123ba:	490e      	ldr	r1, [pc, #56]	; (80123f4 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80123bc:	480e      	ldr	r0, [pc, #56]	; (80123f8 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80123be:	f00b fba1 	bl	801db04 <CRC_Lock>
 80123c2:	4e0e      	ldr	r6, [pc, #56]	; (80123fc <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80123c4:	4b0e      	ldr	r3, [pc, #56]	; (8012400 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80123c6:	b158      	cbz	r0, 80123e0 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80123c8:	801d      	strh	r5, [r3, #0]
 80123ca:	2300      	movs	r3, #0
 80123cc:	4a0d      	ldr	r2, [pc, #52]	; (8012404 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80123ce:	4620      	mov	r0, r4
 80123d0:	6013      	str	r3, [r2, #0]
 80123d2:	4a0d      	ldr	r2, [pc, #52]	; (8012408 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80123d4:	6033      	str	r3, [r6, #0]
 80123d6:	6013      	str	r3, [r2, #0]
 80123d8:	f7ff ffba 	bl	8012350 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80123dc:	4620      	mov	r0, r4
 80123de:	bd70      	pop	{r4, r5, r6, pc}
 80123e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80123e4:	2002      	movs	r0, #2
 80123e6:	801a      	strh	r2, [r3, #0]
 80123e8:	6030      	str	r0, [r6, #0]
 80123ea:	f001 fae5 	bl	80139b8 <_ZN8touchgfx6Screen4drawEv>
 80123ee:	e7ec      	b.n	80123ca <_ZN8touchgfx11ApplicationC1Ev+0x42>
 80123f0:	08025280 	.word	0x08025280
 80123f4:	b5e8b5cd 	.word	0xb5e8b5cd
 80123f8:	f407a5c2 	.word	0xf407a5c2
 80123fc:	2400f1f4 	.word	0x2400f1f4
 8012400:	24000060 	.word	0x24000060
 8012404:	2400f204 	.word	0x2400f204
 8012408:	2400f1f8 	.word	0x2400f1f8

0801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801240c:	b510      	push	{r4, lr}
 801240e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012412:	428b      	cmp	r3, r1
 8012414:	d806      	bhi.n	8012424 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 8012416:	4b0b      	ldr	r3, [pc, #44]	; (8012444 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 8012418:	f240 11dd 	movw	r1, #477	; 0x1dd
 801241c:	4a0a      	ldr	r2, [pc, #40]	; (8012448 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801241e:	480b      	ldr	r0, [pc, #44]	; (801244c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 8012420:	f00d feb8 	bl	8020194 <__assert_func>
 8012424:	3b01      	subs	r3, #1
 8012426:	b29b      	uxth	r3, r3
 8012428:	428b      	cmp	r3, r1
 801242a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801242e:	d908      	bls.n	8012442 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 8012430:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012434:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801243e:	685a      	ldr	r2, [r3, #4]
 8012440:	6062      	str	r2, [r4, #4]
 8012442:	bd10      	pop	{r4, pc}
 8012444:	0802520f 	.word	0x0802520f
 8012448:	08025308 	.word	0x08025308
 801244c:	0802521d 	.word	0x0802521d

08012450 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 8012450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012452:	466b      	mov	r3, sp
 8012454:	4604      	mov	r4, r0
 8012456:	e883 0006 	stmia.w	r3, {r1, r2}
 801245a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801245e:	2a07      	cmp	r2, #7
 8012460:	d906      	bls.n	8012470 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 8012462:	4b09      	ldr	r3, [pc, #36]	; (8012488 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 8012464:	f240 11a3 	movw	r1, #419	; 0x1a3
 8012468:	4a08      	ldr	r2, [pc, #32]	; (801248c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801246a:	4809      	ldr	r0, [pc, #36]	; (8012490 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801246c:	f00d fe92 	bl	8020194 <__assert_func>
 8012470:	1c51      	adds	r1, r2, #1
 8012472:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8012476:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801247a:	cb03      	ldmia	r3!, {r0, r1}
 801247c:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 8012480:	6069      	str	r1, [r5, #4]
 8012482:	b003      	add	sp, #12
 8012484:	bd30      	pop	{r4, r5, pc}
 8012486:	bf00      	nop
 8012488:	08025246 	.word	0x08025246
 801248c:	0802539e 	.word	0x0802539e
 8012490:	0802521d 	.word	0x0802521d

08012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	b08d      	sub	sp, #52	; 0x34
 801249a:	4b94      	ldr	r3, [pc, #592]	; (80126ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801249c:	4683      	mov	fp, r0
 801249e:	ac08      	add	r4, sp, #32
 80124a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80124a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124a8:	4620      	mov	r0, r4
 80124aa:	4b91      	ldr	r3, [pc, #580]	; (80126f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 80124ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 80124b0:	f7ff fed2 	bl	8012258 <_ZN8touchgfx4Rect10restrictToEss>
 80124b4:	4620      	mov	r0, r4
 80124b6:	f7fa fe00 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d16a      	bne.n	8012594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80124be:	9402      	str	r4, [sp, #8]
 80124c0:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 80124c4:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80124c8:	2400      	movs	r4, #0
 80124ca:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 80124ce:	9301      	str	r3, [sp, #4]
 80124d0:	36a0      	adds	r6, #160	; 0xa0
 80124d2:	42a5      	cmp	r5, r4
 80124d4:	d00d      	beq.n	80124f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 80124d6:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 80124da:	9802      	ldr	r0, [sp, #8]
 80124dc:	f7ff ff0c 	bl	80122f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 80124e0:	b128      	cbz	r0, 80124ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 80124e2:	1e69      	subs	r1, r5, #1
 80124e4:	9801      	ldr	r0, [sp, #4]
 80124e6:	1b09      	subs	r1, r1, r4
 80124e8:	b289      	uxth	r1, r1
 80124ea:	f7ff ff8f 	bl	801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80124ee:	3401      	adds	r4, #1
 80124f0:	e7ef      	b.n	80124d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80124f2:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80124f6:	1e7b      	subs	r3, r7, #1
 80124f8:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80124fc:	9703      	str	r7, [sp, #12]
 80124fe:	9300      	str	r3, [sp, #0]
 8012500:	2400      	movs	r4, #0
 8012502:	4655      	mov	r5, sl
 8012504:	9704      	str	r7, [sp, #16]
 8012506:	4626      	mov	r6, r4
 8012508:	9b04      	ldr	r3, [sp, #16]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d078      	beq.n	8012600 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801250e:	9902      	ldr	r1, [sp, #8]
 8012510:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012514:	f7fb fffc 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012518:	b360      	cbz	r0, 8012574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801251a:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801251e:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 8012522:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 8012526:	45e6      	cmp	lr, ip
 8012528:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801252c:	db35      	blt.n	801259a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801252e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012532:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8012536:	4472      	add	r2, lr
 8012538:	4463      	add	r3, ip
 801253a:	b212      	sxth	r2, r2
 801253c:	b21b      	sxth	r3, r3
 801253e:	429a      	cmp	r2, r3
 8012540:	dc2b      	bgt.n	801259a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012542:	fa1f f288 	uxth.w	r2, r8
 8012546:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801254a:	45c1      	cmp	r9, r8
 801254c:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012550:	4413      	add	r3, r2
 8012552:	fa1f fc89 	uxth.w	ip, r9
 8012556:	b29b      	uxth	r3, r3
 8012558:	fa0f fe83 	sxth.w	lr, r3
 801255c:	db0f      	blt.n	801257e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801255e:	eba3 030c 	sub.w	r3, r3, ip
 8012562:	1ac9      	subs	r1, r1, r3
 8012564:	b209      	sxth	r1, r1
 8012566:	2900      	cmp	r1, #0
 8012568:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801256c:	dd12      	ble.n	8012594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801256e:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 8012572:	4604      	mov	r4, r0
 8012574:	9b04      	ldr	r3, [sp, #16]
 8012576:	3d08      	subs	r5, #8
 8012578:	3b01      	subs	r3, #1
 801257a:	9304      	str	r3, [sp, #16]
 801257c:	e7c4      	b.n	8012508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801257e:	4461      	add	r1, ip
 8012580:	b209      	sxth	r1, r1
 8012582:	4571      	cmp	r1, lr
 8012584:	dc3a      	bgt.n	80125fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012586:	eba2 020c 	sub.w	r2, r2, ip
 801258a:	b212      	sxth	r2, r2
 801258c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012590:	2a00      	cmp	r2, #0
 8012592:	dcee      	bgt.n	8012572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012594:	b00d      	add	sp, #52	; 0x34
 8012596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259a:	45c1      	cmp	r9, r8
 801259c:	db2e      	blt.n	80125fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801259e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80125a2:	4499      	add	r9, r3
 80125a4:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80125a8:	4498      	add	r8, r3
 80125aa:	fa0f f989 	sxth.w	r9, r9
 80125ae:	fa0f f888 	sxth.w	r8, r8
 80125b2:	45c1      	cmp	r9, r8
 80125b4:	dc22      	bgt.n	80125fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80125b6:	fa1f f28c 	uxth.w	r2, ip
 80125ba:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80125be:	45e6      	cmp	lr, ip
 80125c0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80125c4:	4413      	add	r3, r2
 80125c6:	fa1f f88e 	uxth.w	r8, lr
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	fa0f f983 	sxth.w	r9, r3
 80125d0:	db0a      	blt.n	80125e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 80125d2:	eba3 0308 	sub.w	r3, r3, r8
 80125d6:	1ac9      	subs	r1, r1, r3
 80125d8:	b209      	sxth	r1, r1
 80125da:	2900      	cmp	r1, #0
 80125dc:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80125e0:	ddd8      	ble.n	8012594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80125e2:	f8ad 9020 	strh.w	r9, [sp, #32]
 80125e6:	e7c4      	b.n	8012572 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80125e8:	4441      	add	r1, r8
 80125ea:	b209      	sxth	r1, r1
 80125ec:	4549      	cmp	r1, r9
 80125ee:	dc05      	bgt.n	80125fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80125f0:	eba2 0208 	sub.w	r2, r2, r8
 80125f4:	b212      	sxth	r2, r2
 80125f6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 80125fa:	e7c9      	b.n	8012590 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80125fc:	4606      	mov	r6, r0
 80125fe:	e7b9      	b.n	8012574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8012600:	2c00      	cmp	r4, #0
 8012602:	f47f af7d 	bne.w	8012500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8012606:	2e00      	cmp	r6, #0
 8012608:	f000 81e0 	beq.w	80129cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 801260c:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 8012610:	4655      	mov	r5, sl
 8012612:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 8012616:	b2b9      	uxth	r1, r7
 8012618:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801261c:	b2b3      	uxth	r3, r6
 801261e:	9104      	str	r1, [sp, #16]
 8012620:	9804      	ldr	r0, [sp, #16]
 8012622:	441a      	add	r2, r3
 8012624:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8012628:	b292      	uxth	r2, r2
 801262a:	4401      	add	r1, r0
 801262c:	fa0f f882 	sxth.w	r8, r2
 8012630:	b289      	uxth	r1, r1
 8012632:	9105      	str	r1, [sp, #20]
 8012634:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 8012638:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801263c:	9b03      	ldr	r3, [sp, #12]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d058      	beq.n	80126f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 8012642:	9902      	ldr	r1, [sp, #8]
 8012644:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8012648:	f7fb ff62 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801264c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012650:	b1d8      	cbz	r0, 801268a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8012652:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 8012656:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801265a:	4576      	cmp	r6, lr
 801265c:	dc26      	bgt.n	80126ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801265e:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 8012662:	44f4      	add	ip, lr
 8012664:	fa0f fc8c 	sxth.w	ip, ip
 8012668:	45e0      	cmp	r8, ip
 801266a:	db1f      	blt.n	80126ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801266c:	428f      	cmp	r7, r1
 801266e:	fa1f fc81 	uxth.w	ip, r1
 8012672:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8012676:	dc0f      	bgt.n	8012698 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8012678:	9805      	ldr	r0, [sp, #20]
 801267a:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801267e:	eba0 0c0c 	sub.w	ip, r0, ip
 8012682:	eba1 010c 	sub.w	r1, r1, ip
 8012686:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801268a:	4620      	mov	r0, r4
 801268c:	9903      	ldr	r1, [sp, #12]
 801268e:	3d08      	subs	r5, #8
 8012690:	4604      	mov	r4, r0
 8012692:	3901      	subs	r1, #1
 8012694:	9103      	str	r1, [sp, #12]
 8012696:	e7cf      	b.n	8012638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8012698:	4461      	add	r1, ip
 801269a:	b209      	sxth	r1, r1
 801269c:	4549      	cmp	r1, r9
 801269e:	dcf5      	bgt.n	801268c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80126a0:	9904      	ldr	r1, [sp, #16]
 80126a2:	eba1 0c0c 	sub.w	ip, r1, ip
 80126a6:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 80126aa:	e7ee      	b.n	801268a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80126ac:	428f      	cmp	r7, r1
 80126ae:	dced      	bgt.n	801268c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80126b0:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 80126b4:	4461      	add	r1, ip
 80126b6:	b209      	sxth	r1, r1
 80126b8:	4589      	cmp	r9, r1
 80126ba:	dbe7      	blt.n	801268c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80126bc:	4576      	cmp	r6, lr
 80126be:	fa1f fc8e 	uxth.w	ip, lr
 80126c2:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 80126c6:	dc08      	bgt.n	80126da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 80126c8:	eba2 0c0c 	sub.w	ip, r2, ip
 80126cc:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 80126d0:	eba1 010c 	sub.w	r1, r1, ip
 80126d4:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 80126d8:	e7d7      	b.n	801268a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80126da:	4461      	add	r1, ip
 80126dc:	b209      	sxth	r1, r1
 80126de:	4588      	cmp	r8, r1
 80126e0:	dbd4      	blt.n	801268c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 80126e2:	eba3 0c0c 	sub.w	ip, r3, ip
 80126e6:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80126ea:	e7ce      	b.n	801268a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80126ec:	2400f18e 	.word	0x2400f18e
 80126f0:	2400f18c 	.word	0x2400f18c
 80126f4:	2c00      	cmp	r4, #0
 80126f6:	f000 8169 	beq.w	80129cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 80126fa:	9b00      	ldr	r3, [sp, #0]
 80126fc:	3301      	adds	r3, #1
 80126fe:	f000 8165 	beq.w	80129cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x538>
 8012702:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8012706:	9802      	ldr	r0, [sp, #8]
 8012708:	4621      	mov	r1, r4
 801270a:	f7ff fdf5 	bl	80122f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801270e:	b120      	cbz	r0, 801271a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 8012710:	f8bd 1000 	ldrh.w	r1, [sp]
 8012714:	9801      	ldr	r0, [sp, #4]
 8012716:	f7ff fe79 	bl	801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801271a:	9902      	ldr	r1, [sp, #8]
 801271c:	4620      	mov	r0, r4
 801271e:	f7fb fef7 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012722:	2800      	cmp	r0, #0
 8012724:	f000 809b 	beq.w	801285e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8012728:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801272c:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8012730:	fa1f f288 	uxth.w	r2, r8
 8012734:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 8012738:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801273c:	19d5      	adds	r5, r2, r7
 801273e:	b2a1      	uxth	r1, r4
 8012740:	45a0      	cmp	r8, r4
 8012742:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8012746:	fa1f f985 	uxth.w	r9, r5
 801274a:	440b      	add	r3, r1
 801274c:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 8012750:	fa0f f589 	sxth.w	r5, r9
 8012754:	b29b      	uxth	r3, r3
 8012756:	9503      	str	r5, [sp, #12]
 8012758:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801275c:	9507      	str	r5, [sp, #28]
 801275e:	f340 809d 	ble.w	801289c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x408>
 8012762:	1a52      	subs	r2, r2, r1
 8012764:	4584      	cmp	ip, r0
 8012766:	fa0f fe83 	sxth.w	lr, r3
 801276a:	b292      	uxth	r2, r2
 801276c:	b215      	sxth	r5, r2
 801276e:	dd2f      	ble.n	80127d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33c>
 8012770:	9e00      	ldr	r6, [sp, #0]
 8012772:	fa1f fc8c 	uxth.w	ip, ip
 8012776:	b280      	uxth	r0, r0
 8012778:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801277c:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 8012780:	9e03      	ldr	r6, [sp, #12]
 8012782:	ebac 0300 	sub.w	r3, ip, r0
 8012786:	448c      	add	ip, r1
 8012788:	eba6 060e 	sub.w	r6, r6, lr
 801278c:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 8012790:	b29b      	uxth	r3, r3
 8012792:	4470      	add	r0, lr
 8012794:	fa0f fc8c 	sxth.w	ip, ip
 8012798:	b21c      	sxth	r4, r3
 801279a:	b200      	sxth	r0, r0
 801279c:	4366      	muls	r6, r4
 801279e:	ebac 0000 	sub.w	r0, ip, r0
 80127a2:	4368      	muls	r0, r5
 80127a4:	4286      	cmp	r6, r0
 80127a6:	db09      	blt.n	80127bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x328>
 80127a8:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 80127ac:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 80127b0:	4417      	add	r7, r2
 80127b2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80127b6:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80127ba:	e681      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80127bc:	440b      	add	r3, r1
 80127be:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 80127c2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80127c6:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 80127ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80127ce:	e677      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80127d0:	9e03      	ldr	r6, [sp, #12]
 80127d2:	45b6      	cmp	lr, r6
 80127d4:	da28      	bge.n	8012828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 80127d6:	9b00      	ldr	r3, [sp, #0]
 80127d8:	eba6 060e 	sub.w	r6, r6, lr
 80127dc:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 80127e0:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 80127e4:	eb04 030c 	add.w	r3, r4, ip
 80127e8:	fa1f f883 	uxth.w	r8, r3
 80127ec:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 80127f0:	4403      	add	r3, r0
 80127f2:	fa0f f988 	sxth.w	r9, r8
 80127f6:	eba0 000c 	sub.w	r0, r0, ip
 80127fa:	eba3 0308 	sub.w	r3, r3, r8
 80127fe:	4368      	muls	r0, r5
 8012800:	b29b      	uxth	r3, r3
 8012802:	fa0f f883 	sxth.w	r8, r3
 8012806:	fb08 f606 	mul.w	r6, r8, r6
 801280a:	42b0      	cmp	r0, r6
 801280c:	dc06      	bgt.n	801281c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801280e:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 8012812:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 8012816:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801281a:	e7c9      	b.n	80127b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31c>
 801281c:	4423      	add	r3, r4
 801281e:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 8012822:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012826:	e64b      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012828:	eba3 0309 	sub.w	r3, r3, r9
 801282c:	9807      	ldr	r0, [sp, #28]
 801282e:	b29b      	uxth	r3, r3
 8012830:	2806      	cmp	r0, #6
 8012832:	fa0f fc83 	sxth.w	ip, r3
 8012836:	d818      	bhi.n	801286a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 8012838:	4652      	mov	r2, sl
 801283a:	ab0a      	add	r3, sp, #40	; 0x28
 801283c:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 8012840:	6851      	ldr	r1, [r2, #4]
 8012842:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 8012846:	c303      	stmia	r3!, {r0, r1}
 8012848:	9b03      	ldr	r3, [sp, #12]
 801284a:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801284e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 8012852:	ab0a      	add	r3, sp, #40	; 0x28
 8012854:	9801      	ldr	r0, [sp, #4]
 8012856:	e893 0006 	ldmia.w	r3, {r1, r2}
 801285a:	f7ff fdf9 	bl	8012450 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801285e:	9b00      	ldr	r3, [sp, #0]
 8012860:	f1aa 0a08 	sub.w	sl, sl, #8
 8012864:	3b01      	subs	r3, #1
 8012866:	9300      	str	r3, [sp, #0]
 8012868:	e747      	b.n	80126fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801286a:	9800      	ldr	r0, [sp, #0]
 801286c:	45ac      	cmp	ip, r5
 801286e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8012872:	db0c      	blt.n	801288e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fa>
 8012874:	4417      	add	r7, r2
 8012876:	4458      	add	r0, fp
 8012878:	f8ad 4020 	strh.w	r4, [sp, #32]
 801287c:	b2bf      	uxth	r7, r7
 801287e:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 8012882:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8012886:	440f      	add	r7, r1
 8012888:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801288c:	e618      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801288e:	4458      	add	r0, fp
 8012890:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8012894:	443b      	add	r3, r7
 8012896:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801289a:	e611      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801289c:	fa1f f18c 	uxth.w	r1, ip
 80128a0:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 80128a4:	b282      	uxth	r2, r0
 80128a6:	4584      	cmp	ip, r0
 80128a8:	eb01 0e05 	add.w	lr, r1, r5
 80128ac:	9204      	str	r2, [sp, #16]
 80128ae:	fa1f fe8e 	uxth.w	lr, lr
 80128b2:	9e04      	ldr	r6, [sp, #16]
 80128b4:	fa0f f28e 	sxth.w	r2, lr
 80128b8:	9205      	str	r2, [sp, #20]
 80128ba:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 80128be:	4432      	add	r2, r6
 80128c0:	b292      	uxth	r2, r2
 80128c2:	9206      	str	r2, [sp, #24]
 80128c4:	da26      	bge.n	8012914 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x480>
 80128c6:	eba3 0309 	sub.w	r3, r3, r9
 80128ca:	eba2 020e 	sub.w	r2, r2, lr
 80128ce:	eba0 000c 	sub.w	r0, r0, ip
 80128d2:	eba4 0408 	sub.w	r4, r4, r8
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	b292      	uxth	r2, r2
 80128da:	fa0f fa83 	sxth.w	sl, r3
 80128de:	b211      	sxth	r1, r2
 80128e0:	fb0a f000 	mul.w	r0, sl, r0
 80128e4:	434c      	muls	r4, r1
 80128e6:	42a0      	cmp	r0, r4
 80128e8:	9800      	ldr	r0, [sp, #0]
 80128ea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 80128ee:	dc06      	bgt.n	80128fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80128f0:	4458      	add	r0, fp
 80128f2:	9a05      	ldr	r2, [sp, #20]
 80128f4:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 80128f8:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80128fc:	e7ca      	b.n	8012894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 80128fe:	eb0b 0300 	add.w	r3, fp, r0
 8012902:	9903      	ldr	r1, [sp, #12]
 8012904:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 8012908:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801290c:	442a      	add	r2, r5
 801290e:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8012912:	e5d5      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012914:	9e04      	ldr	r6, [sp, #16]
 8012916:	9a03      	ldr	r2, [sp, #12]
 8012918:	1b89      	subs	r1, r1, r6
 801291a:	b21e      	sxth	r6, r3
 801291c:	b289      	uxth	r1, r1
 801291e:	4296      	cmp	r6, r2
 8012920:	fa0f fc81 	sxth.w	ip, r1
 8012924:	dd25      	ble.n	8012972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4de>
 8012926:	eba3 0309 	sub.w	r3, r3, r9
 801292a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801292e:	9e05      	ldr	r6, [sp, #20]
 8012930:	eba4 0408 	sub.w	r4, r4, r8
 8012934:	b29b      	uxth	r3, r3
 8012936:	eba6 0902 	sub.w	r9, r6, r2
 801293a:	fb0c f404 	mul.w	r4, ip, r4
 801293e:	b218      	sxth	r0, r3
 8012940:	9a00      	ldr	r2, [sp, #0]
 8012942:	fb00 f909 	mul.w	r9, r0, r9
 8012946:	00d2      	lsls	r2, r2, #3
 8012948:	454c      	cmp	r4, r9
 801294a:	db03      	blt.n	8012954 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801294c:	445a      	add	r2, fp
 801294e:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 8012952:	e79f      	b.n	8012894 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x400>
 8012954:	eb0b 0302 	add.w	r3, fp, r2
 8012958:	9a03      	ldr	r2, [sp, #12]
 801295a:	4429      	add	r1, r5
 801295c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8012960:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 8012964:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8012968:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801296c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012970:	e5a6      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012972:	9b06      	ldr	r3, [sp, #24]
 8012974:	9c07      	ldr	r4, [sp, #28]
 8012976:	eba3 020e 	sub.w	r2, r3, lr
 801297a:	2c06      	cmp	r4, #6
 801297c:	b292      	uxth	r2, r2
 801297e:	b213      	sxth	r3, r2
 8012980:	d80d      	bhi.n	801299e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50a>
 8012982:	4651      	mov	r1, sl
 8012984:	aa0a      	add	r2, sp, #40	; 0x28
 8012986:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801298a:	6849      	ldr	r1, [r1, #4]
 801298c:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 8012990:	9b05      	ldr	r3, [sp, #20]
 8012992:	c203      	stmia	r2!, {r0, r1}
 8012994:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 8012998:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801299c:	e759      	b.n	8012852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801299e:	9c00      	ldr	r4, [sp, #0]
 80129a0:	4563      	cmp	r3, ip
 80129a2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80129a6:	db0d      	blt.n	80129c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x530>
 80129a8:	4429      	add	r1, r5
 80129aa:	9a04      	ldr	r2, [sp, #16]
 80129ac:	445c      	add	r4, fp
 80129ae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80129b2:	b289      	uxth	r1, r1
 80129b4:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 80129b8:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 80129bc:	4411      	add	r1, r2
 80129be:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 80129c2:	e57d      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80129c4:	445c      	add	r4, fp
 80129c6:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 80129ca:	e79f      	b.n	801290c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x478>
 80129cc:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80129d0:	2f07      	cmp	r7, #7
 80129d2:	d806      	bhi.n	80129e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54e>
 80129d4:	ab08      	add	r3, sp, #32
 80129d6:	9801      	ldr	r0, [sp, #4]
 80129d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80129dc:	f7ff fd38 	bl	8012450 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 80129e0:	e5d8      	b.n	8012594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80129e2:	f107 39ff 	add.w	r9, r7, #4294967295
 80129e6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80129ea:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 80129ee:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80129f2:	f04f 35ff 	mov.w	r5, #4294967295
 80129f6:	2400      	movs	r4, #0
 80129f8:	9304      	str	r3, [sp, #16]
 80129fa:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80129fe:	f109 32ff 	add.w	r2, r9, #4294967295
 8012a02:	9300      	str	r3, [sp, #0]
 8012a04:	4690      	mov	r8, r2
 8012a06:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8012a0a:	9303      	str	r3, [sp, #12]
 8012a0c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012a10:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012a14:	6818      	ldr	r0, [r3, #0]
 8012a16:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8012a1a:	9206      	str	r2, [sp, #24]
 8012a1c:	bf16      	itet	ne
 8012a1e:	9904      	ldrne	r1, [sp, #16]
 8012a20:	f8dd e008 	ldreq.w	lr, [sp, #8]
 8012a24:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 8012a28:	9305      	str	r3, [sp, #20]
 8012a2a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012a2e:	f8be 6004 	ldrh.w	r6, [lr, #4]
 8012a32:	fb16 f601 	smulbb	r6, r6, r1
 8012a36:	6859      	ldr	r1, [r3, #4]
 8012a38:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012a3c:	4671      	mov	r1, lr
 8012a3e:	a80a      	add	r0, sp, #40	; 0x28
 8012a40:	f7fc fb43 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012a44:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8012a48:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8012a4c:	9b03      	ldr	r3, [sp, #12]
 8012a4e:	9a00      	ldr	r2, [sp, #0]
 8012a50:	fb11 f100 	smulbb	r1, r1, r0
 8012a54:	2008      	movs	r0, #8
 8012a56:	fb02 6603 	mla	r6, r2, r3, r6
 8012a5a:	1b8e      	subs	r6, r1, r6
 8012a5c:	fb91 f1f0 	sdiv	r1, r1, r0
 8012a60:	42b1      	cmp	r1, r6
 8012a62:	dc21      	bgt.n	8012aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 8012a64:	4556      	cmp	r6, sl
 8012a66:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8012a6a:	da03      	bge.n	8012a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e0>
 8012a6c:	b1e6      	cbz	r6, 8012aa8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x614>
 8012a6e:	46b2      	mov	sl, r6
 8012a70:	4645      	mov	r5, r8
 8012a72:	464c      	mov	r4, r9
 8012a74:	f108 38ff 	add.w	r8, r8, #4294967295
 8012a78:	f118 0f02 	cmn.w	r8, #2
 8012a7c:	d1c8      	bne.n	8012a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 8012a7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012a82:	f1a7 0708 	sub.w	r7, r7, #8
 8012a86:	4691      	mov	r9, r2
 8012a88:	d1b7      	bne.n	80129fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x566>
 8012a8a:	9b01      	ldr	r3, [sp, #4]
 8012a8c:	b2a6      	uxth	r6, r4
 8012a8e:	00e4      	lsls	r4, r4, #3
 8012a90:	1918      	adds	r0, r3, r4
 8012a92:	1c6b      	adds	r3, r5, #1
 8012a94:	d10b      	bne.n	8012aae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x61a>
 8012a96:	4601      	mov	r1, r0
 8012a98:	9802      	ldr	r0, [sp, #8]
 8012a9a:	f7fc fb16 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012a9e:	4631      	mov	r1, r6
 8012aa0:	9801      	ldr	r0, [sp, #4]
 8012aa2:	f7ff fcb3 	bl	801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012aa6:	e50b      	b.n	80124c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012aa8:	4645      	mov	r5, r8
 8012aaa:	464c      	mov	r4, r9
 8012aac:	e7ed      	b.n	8012a8a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f6>
 8012aae:	9b01      	ldr	r3, [sp, #4]
 8012ab0:	00ed      	lsls	r5, r5, #3
 8012ab2:	445c      	add	r4, fp
 8012ab4:	1959      	adds	r1, r3, r5
 8012ab6:	445d      	add	r5, fp
 8012ab8:	f7fc fb07 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012abc:	9b02      	ldr	r3, [sp, #8]
 8012abe:	cb03      	ldmia	r3!, {r0, r1}
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8012ac6:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 8012aca:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 8012ace:	6861      	ldr	r1, [r4, #4]
 8012ad0:	c303      	stmia	r3!, {r0, r1}
 8012ad2:	e7e4      	b.n	8012a9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x60a>

08012ad4 <_ZN8touchgfx11Application10invalidateEv>:
 8012ad4:	4b09      	ldr	r3, [pc, #36]	; (8012afc <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	2100      	movs	r1, #0
 8012ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ade:	4b08      	ldr	r3, [pc, #32]	; (8012b00 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8012ae0:	9100      	str	r1, [sp, #0]
 8012ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ae6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012aea:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012aee:	ab02      	add	r3, sp, #8
 8012af0:	e913 0006 	ldmdb	r3, {r1, r2}
 8012af4:	b002      	add	sp, #8
 8012af6:	f7ff bccd 	b.w	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012afa:	bf00      	nop
 8012afc:	2400f18c 	.word	0x2400f18c
 8012b00:	2400f18e 	.word	0x2400f18e

08012b04 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 8012b0c:	b09b      	sub	sp, #108	; 0x6c
 8012b0e:	4604      	mov	r4, r0
 8012b10:	4630      	mov	r0, r6
 8012b12:	f7fa fad2 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b16:	4605      	mov	r5, r0
 8012b18:	b940      	cbnz	r0, 8012b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012b20:	f7ff fcb8 	bl	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012b24:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 8012b28:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012b2c:	4bc6      	ldr	r3, [pc, #792]	; (8012e48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	b33b      	cbz	r3, 8012b82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 8012b32:	4dc6      	ldr	r5, [pc, #792]	; (8012e4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8012b34:	4628      	mov	r0, r5
 8012b36:	f7fa fac0 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012b3a:	4606      	mov	r6, r0
 8012b3c:	bb08      	cbnz	r0, 8012b82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x7e>
 8012b3e:	4628      	mov	r0, r5
 8012b40:	f7ff fa2c 	bl	8011f9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012b44:	6829      	ldr	r1, [r5, #0]
 8012b46:	686a      	ldr	r2, [r5, #4]
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f7ff fca3 	bl	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012b4e:	802e      	strh	r6, [r5, #0]
 8012b50:	806e      	strh	r6, [r5, #2]
 8012b52:	80ae      	strh	r6, [r5, #4]
 8012b54:	80ee      	strh	r6, [r5, #6]
 8012b56:	4dbe      	ldr	r5, [pc, #760]	; (8012e50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012b58:	a809      	add	r0, sp, #36	; 0x24
 8012b5a:	f7ff fc04 	bl	8012366 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012b5e:	882f      	ldrh	r7, [r5, #0]
 8012b60:	463e      	mov	r6, r7
 8012b62:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012b66:	42b3      	cmp	r3, r6
 8012b68:	d912      	bls.n	8012b90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8c>
 8012b6a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012b6e:	3601      	adds	r6, #1
 8012b70:	a809      	add	r0, sp, #36	; 0x24
 8012b72:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8012b76:	b2b6      	uxth	r6, r6
 8012b78:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8012b7c:	f7ff fc68 	bl	8012450 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8012b80:	e7ef      	b.n	8012b62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5e>
 8012b82:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1e5      	bne.n	8012b56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52>
 8012b8a:	b01b      	add	sp, #108	; 0x6c
 8012b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b90:	463e      	mov	r6, r7
 8012b92:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 8012b96:	42b3      	cmp	r3, r6
 8012b98:	d90b      	bls.n	8012bb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8012b9a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012b9e:	3601      	adds	r6, #1
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 8012ba6:	b2b6      	uxth	r6, r6
 8012ba8:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8012bac:	f7ff fc72 	bl	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8012bb0:	e7ef      	b.n	8012b92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x8e>
 8012bb2:	4ea8      	ldr	r6, [pc, #672]	; (8012e54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012bb4:	6833      	ldr	r3, [r6, #0]
 8012bb6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	f040 80d2 	bne.w	8012d64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x260>
 8012bc0:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	f8b4 c0e8 	ldrh.w	ip, [r4, #232]	; 0xe8
 8012bca:	2700      	movs	r7, #0
 8012bcc:	33aa      	adds	r3, #170	; 0xaa
 8012bce:	458c      	cmp	ip, r1
 8012bd0:	f103 0308 	add.w	r3, r3, #8
 8012bd4:	dd0a      	ble.n	8012bec <_ZN8touchgfx11Application15drawCachedAreasEv+0xe8>
 8012bd6:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 8012bda:	3101      	adds	r1, #1
 8012bdc:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 8012be0:	4402      	add	r2, r0
 8012be2:	b212      	sxth	r2, r2
 8012be4:	4297      	cmp	r7, r2
 8012be6:	bfb8      	it	lt
 8012be8:	4617      	movlt	r7, r2
 8012bea:	e7f0      	b.n	8012bce <_ZN8touchgfx11Application15drawCachedAreasEv+0xca>
 8012bec:	4b9a      	ldr	r3, [pc, #616]	; (8012e58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012bee:	f8b3 9000 	ldrh.w	r9, [r3]
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f1b9 0f0f 	cmp.w	r9, #15
 8012bf8:	bf8c      	ite	hi
 8012bfa:	ea4f 09d9 	movhi.w	r9, r9, lsr #3
 8012bfe:	f04f 0901 	movls.w	r9, #1
 8012c02:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012c06:	f8bd 801a 	ldrh.w	r8, [sp, #26]
 8012c0a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012c0e:	4440      	add	r0, r8
 8012c10:	fa0f f880 	sxth.w	r8, r0
 8012c14:	6830      	ldr	r0, [r6, #0]
 8012c16:	4547      	cmp	r7, r8
 8012c18:	6803      	ldr	r3, [r0, #0]
 8012c1a:	f340 8086 	ble.w	8012d2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x226>
 8012c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012c22:	4798      	blx	r3
 8012c24:	eb08 0309 	add.w	r3, r8, r9
 8012c28:	4298      	cmp	r0, r3
 8012c2a:	da08      	bge.n	8012c3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8012c2c:	4287      	cmp	r7, r0
 8012c2e:	dd06      	ble.n	8012c3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8012c30:	4580      	cmp	r8, r0
 8012c32:	dd70      	ble.n	8012d16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 8012c34:	f1b8 0f00 	cmp.w	r8, #0
 8012c38:	dd6d      	ble.n	8012d16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x212>
 8012c3a:	4638      	mov	r0, r7
 8012c3c:	e004      	b.n	8012c48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x144>
 8012c3e:	4580      	cmp	r8, r0
 8012c40:	dcfb      	bgt.n	8012c3a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8012c42:	42b8      	cmp	r0, r7
 8012c44:	bfa8      	it	ge
 8012c46:	4638      	movge	r0, r7
 8012c48:	4b84      	ldr	r3, [pc, #528]	; (8012e5c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8012c4a:	eba0 0008 	sub.w	r0, r0, r8
 8012c4e:	2200      	movs	r2, #0
 8012c50:	f8ad 8016 	strh.w	r8, [sp, #22]
 8012c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c58:	f8b5 8000 	ldrh.w	r8, [r5]
 8012c5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012c60:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012c64:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012c68:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012c6c:	4543      	cmp	r3, r8
 8012c6e:	d9ca      	bls.n	8012c06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 8012c70:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 8012c74:	ab07      	add	r3, sp, #28
 8012c76:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8012c7a:	6851      	ldr	r1, [r2, #4]
 8012c7c:	c303      	stmia	r3!, {r0, r1}
 8012c7e:	a905      	add	r1, sp, #20
 8012c80:	a807      	add	r0, sp, #28
 8012c82:	f7fb fc45 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012c86:	2800      	cmp	r0, #0
 8012c88:	d04c      	beq.n	8012d24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x220>
 8012c8a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012c8e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012c92:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8012c96:	4686      	mov	lr, r0
 8012c98:	4290      	cmp	r0, r2
 8012c9a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8012c9e:	4450      	add	r0, sl
 8012ca0:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012ca4:	bfb8      	it	lt
 8012ca6:	4696      	movlt	lr, r2
 8012ca8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012cac:	4452      	add	r2, sl
 8012cae:	b280      	uxth	r0, r0
 8012cb0:	4299      	cmp	r1, r3
 8012cb2:	468c      	mov	ip, r1
 8012cb4:	b292      	uxth	r2, r2
 8012cb6:	f8ad e01c 	strh.w	lr, [sp, #28]
 8012cba:	fa0f fb80 	sxth.w	fp, r0
 8012cbe:	bfb8      	it	lt
 8012cc0:	469c      	movlt	ip, r3
 8012cc2:	fa0f fa82 	sxth.w	sl, r2
 8012cc6:	f8ad c01e 	strh.w	ip, [sp, #30]
 8012cca:	45d3      	cmp	fp, sl
 8012ccc:	bfb8      	it	lt
 8012cce:	4602      	movlt	r2, r0
 8012cd0:	eba2 020e 	sub.w	r2, r2, lr
 8012cd4:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012cd8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8012cdc:	4411      	add	r1, r2
 8012cde:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	b289      	uxth	r1, r1
 8012ce6:	b29b      	uxth	r3, r3
 8012ce8:	b208      	sxth	r0, r1
 8012cea:	b21a      	sxth	r2, r3
 8012cec:	4290      	cmp	r0, r2
 8012cee:	bfb8      	it	lt
 8012cf0:	460b      	movlt	r3, r1
 8012cf2:	eba3 030c 	sub.w	r3, r3, ip
 8012cf6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012cfa:	a807      	add	r0, sp, #28
 8012cfc:	f7fa f9dd 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012d00:	b920      	cbnz	r0, 8012d0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x208>
 8012d02:	6823      	ldr	r3, [r4, #0]
 8012d04:	a907      	add	r1, sp, #28
 8012d06:	4620      	mov	r0, r4
 8012d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d0a:	4798      	blx	r3
 8012d0c:	f108 0801 	add.w	r8, r8, #1
 8012d10:	fa1f f888 	uxth.w	r8, r8
 8012d14:	e7a8      	b.n	8012c68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x164>
 8012d16:	6830      	ldr	r0, [r6, #0]
 8012d18:	2101      	movs	r1, #1
 8012d1a:	6803      	ldr	r3, [r0, #0]
 8012d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012d20:	4798      	blx	r3
 8012d22:	e770      	b.n	8012c06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x102>
 8012d24:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012d28:	e7e7      	b.n	8012cfa <_ZN8touchgfx11Application15drawCachedAreasEv+0x1f6>
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2c:	4798      	blx	r3
 8012d2e:	4b4c      	ldr	r3, [pc, #304]	; (8012e60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f43f af29 	beq.w	8012b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	882d      	ldrh	r5, [r5, #0]
 8012d3c:	34ea      	adds	r4, #234	; 0xea
 8012d3e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8012d42:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8012d46:	42ab      	cmp	r3, r5
 8012d48:	f67f af1f 	bls.w	8012b8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x86>
 8012d4c:	ab1a      	add	r3, sp, #104	; 0x68
 8012d4e:	4620      	mov	r0, r4
 8012d50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012d54:	3501      	adds	r5, #1
 8012d56:	3b44      	subs	r3, #68	; 0x44
 8012d58:	b2ad      	uxth	r5, r5
 8012d5a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8012d5e:	f7ff fb77 	bl	8012450 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 8012d62:	e7ee      	b.n	8012d42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 8012d64:	2b02      	cmp	r3, #2
 8012d66:	f040 8137 	bne.w	8012fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>
 8012d6a:	4b3e      	ldr	r3, [pc, #248]	; (8012e64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d02c      	beq.n	8012dcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c8>
 8012d72:	f104 0aa8 	add.w	sl, r4, #168	; 0xa8
 8012d76:	882a      	ldrh	r2, [r5, #0]
 8012d78:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 8012d7c:	3201      	adds	r2, #1
 8012d7e:	b292      	uxth	r2, r2
 8012d80:	2900      	cmp	r1, #0
 8012d82:	d0d4      	beq.n	8012d2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8012d84:	f8b4 70aa 	ldrh.w	r7, [r4, #170]	; 0xaa
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8012d8e:	f04f 0900 	mov.w	r9, #0
 8012d92:	441f      	add	r7, r3
 8012d94:	b23f      	sxth	r7, r7
 8012d96:	b283      	uxth	r3, r0
 8012d98:	ea4f 08c9 	mov.w	r8, r9, lsl #3
 8012d9c:	4299      	cmp	r1, r3
 8012d9e:	f240 80c5 	bls.w	8012f2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x428>
 8012da2:	44a0      	add	r8, r4
 8012da4:	eb04 0bc0 	add.w	fp, r4, r0, lsl #3
 8012da8:	4684      	mov	ip, r0
 8012daa:	f9b8 30aa 	ldrsh.w	r3, [r8, #170]	; 0xaa
 8012dae:	f9bb e0aa 	ldrsh.w	lr, [fp, #170]	; 0xaa
 8012db2:	4573      	cmp	r3, lr
 8012db4:	f340 80a7 	ble.w	8012f06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8012db8:	f8bb 70ae 	ldrh.w	r7, [fp, #174]	; 0xae
 8012dbc:	4477      	add	r7, lr
 8012dbe:	b23f      	sxth	r7, r7
 8012dc0:	429f      	cmp	r7, r3
 8012dc2:	bfa8      	it	ge
 8012dc4:	461f      	movge	r7, r3
 8012dc6:	3001      	adds	r0, #1
 8012dc8:	46e1      	mov	r9, ip
 8012dca:	e7e4      	b.n	8012d96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x292>
 8012dcc:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8012dd0:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8012dd4:	f1bb 0f00 	cmp.w	fp, #0
 8012dd8:	d0a9      	beq.n	8012d2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8012dda:	882b      	ldrh	r3, [r5, #0]
 8012ddc:	f04f 0800 	mov.w	r8, #0
 8012de0:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8012de4:	3301      	adds	r3, #1
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	b299      	uxth	r1, r3
 8012dea:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8012dee:	458b      	cmp	fp, r1
 8012df0:	d93a      	bls.n	8012e68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 8012df2:	4427      	add	r7, r4
 8012df4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8012df8:	469c      	mov	ip, r3
 8012dfa:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8012dfe:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8012e02:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8012e06:	4408      	add	r0, r1
 8012e08:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8012e0c:	4471      	add	r1, lr
 8012e0e:	b200      	sxth	r0, r0
 8012e10:	b209      	sxth	r1, r1
 8012e12:	4288      	cmp	r0, r1
 8012e14:	da06      	bge.n	8012e24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 8012e16:	4586      	cmp	lr, r0
 8012e18:	4672      	mov	r2, lr
 8012e1a:	bfb8      	it	lt
 8012e1c:	4602      	movlt	r2, r0
 8012e1e:	3301      	adds	r3, #1
 8012e20:	46e0      	mov	r8, ip
 8012e22:	e7e1      	b.n	8012de8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e4>
 8012e24:	d10b      	bne.n	8012e3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 8012e26:	f9b7 c0ae 	ldrsh.w	ip, [r7, #174]	; 0xae
 8012e2a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8012e2e:	458c      	cmp	ip, r1
 8012e30:	bfb4      	ite	lt
 8012e32:	469c      	movlt	ip, r3
 8012e34:	46c4      	movge	ip, r8
 8012e36:	4572      	cmp	r2, lr
 8012e38:	bfb8      	it	lt
 8012e3a:	4672      	movlt	r2, lr
 8012e3c:	e7ef      	b.n	8012e1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8012e3e:	428a      	cmp	r2, r1
 8012e40:	46c4      	mov	ip, r8
 8012e42:	bfb8      	it	lt
 8012e44:	460a      	movlt	r2, r1
 8012e46:	e7ea      	b.n	8012e1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31a>
 8012e48:	2400f1f0 	.word	0x2400f1f0
 8012e4c:	2400f1fc 	.word	0x2400f1fc
 8012e50:	24000060 	.word	0x24000060
 8012e54:	2400f198 	.word	0x2400f198
 8012e58:	2400f18e 	.word	0x2400f18e
 8012e5c:	2400f18c 	.word	0x2400f18c
 8012e60:	2400f196 	.word	0x2400f196
 8012e64:	2400f190 	.word	0x2400f190
 8012e68:	19e1      	adds	r1, r4, r7
 8012e6a:	ab07      	add	r3, sp, #28
 8012e6c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8012e70:	6849      	ldr	r1, [r1, #4]
 8012e72:	c303      	stmia	r3!, {r0, r1}
 8012e74:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012e78:	a807      	add	r0, sp, #28
 8012e7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012e7e:	2b13      	cmp	r3, #19
 8012e80:	440b      	add	r3, r1
 8012e82:	bfd8      	it	le
 8012e84:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012e88:	1a9b      	subs	r3, r3, r2
 8012e8a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012e8e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012e92:	f7ff f89d 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012e96:	a807      	add	r0, sp, #28
 8012e98:	f7fa f90f 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e9c:	2800      	cmp	r0, #0
 8012e9e:	d197      	bne.n	8012dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8012ea0:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8012ea4:	4427      	add	r7, r4
 8012ea6:	6830      	ldr	r0, [r6, #0]
 8012ea8:	f1bc 0f14 	cmp.w	ip, #20
 8012eac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8012eb4:	bfa8      	it	ge
 8012eb6:	f04f 0c14 	movge.w	ip, #20
 8012eba:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012ebe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012ec2:	fa1f fc8c 	uxth.w	ip, ip
 8012ec6:	f8cd c000 	str.w	ip, [sp]
 8012eca:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8012ece:	47d0      	blx	sl
 8012ed0:	4682      	mov	sl, r0
 8012ed2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012ed6:	a807      	add	r0, sp, #28
 8012ed8:	f7ff f860 	bl	8011f9c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	a907      	add	r1, sp, #28
 8012ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ee4:	4798      	blx	r3
 8012ee6:	f8b7 00ac 	ldrh.w	r0, [r7, #172]	; 0xac
 8012eea:	eba0 000a 	sub.w	r0, r0, sl
 8012eee:	b200      	sxth	r0, r0
 8012ef0:	f8a7 00ac 	strh.w	r0, [r7, #172]	; 0xac
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	f47f af6b 	bne.w	8012dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8012efa:	fa1f f188 	uxth.w	r1, r8
 8012efe:	4648      	mov	r0, r9
 8012f00:	f7ff fa84 	bl	801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012f04:	e764      	b.n	8012dd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2cc>
 8012f06:	d10c      	bne.n	8012f22 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41e>
 8012f08:	f9b8 e0ac 	ldrsh.w	lr, [r8, #172]	; 0xac
 8012f0c:	f9bb c0ac 	ldrsh.w	ip, [fp, #172]	; 0xac
 8012f10:	45e6      	cmp	lr, ip
 8012f12:	bfb4      	ite	lt
 8012f14:	4684      	movlt	ip, r0
 8012f16:	46cc      	movge	ip, r9
 8012f18:	f8bb e0ae 	ldrh.w	lr, [fp, #174]	; 0xae
 8012f1c:	4473      	add	r3, lr
 8012f1e:	b21b      	sxth	r3, r3
 8012f20:	e74e      	b.n	8012dc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2bc>
 8012f22:	4577      	cmp	r7, lr
 8012f24:	46cc      	mov	ip, r9
 8012f26:	bfa8      	it	ge
 8012f28:	4677      	movge	r7, lr
 8012f2a:	e74c      	b.n	8012dc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c2>
 8012f2c:	eb0a 0008 	add.w	r0, sl, r8
 8012f30:	44a0      	add	r8, r4
 8012f32:	f9b8 b0ae 	ldrsh.w	fp, [r8, #174]	; 0xae
 8012f36:	f1bb 0f13 	cmp.w	fp, #19
 8012f3a:	bfdc      	itt	le
 8012f3c:	f8b8 70aa 	ldrhle.w	r7, [r8, #170]	; 0xaa
 8012f40:	445f      	addle	r7, fp
 8012f42:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012f46:	bfd8      	it	le
 8012f48:	b23f      	sxthle	r7, r7
 8012f4a:	f7fa f8b6 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012f4e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012f52:	2800      	cmp	r0, #0
 8012f54:	f47f af14 	bne.w	8012d80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27c>
 8012f58:	f9b8 20aa 	ldrsh.w	r2, [r8, #170]	; 0xaa
 8012f5c:	fa1f fb8b 	uxth.w	fp, fp
 8012f60:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012f64:	1abf      	subs	r7, r7, r2
 8012f66:	f9b8 10a8 	ldrsh.w	r1, [r8, #168]	; 0xa8
 8012f6a:	f9b8 30ac 	ldrsh.w	r3, [r8, #172]	; 0xac
 8012f6e:	2f14      	cmp	r7, #20
 8012f70:	6830      	ldr	r0, [r6, #0]
 8012f72:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012f76:	b289      	uxth	r1, r1
 8012f78:	bfa8      	it	ge
 8012f7a:	2714      	movge	r7, #20
 8012f7c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012f80:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012f84:	b292      	uxth	r2, r2
 8012f86:	f8d0 c000 	ldr.w	ip, [r0]
 8012f8a:	b2bf      	uxth	r7, r7
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	455f      	cmp	r7, fp
 8012f90:	bf94      	ite	ls
 8012f92:	9700      	strls	r7, [sp, #0]
 8012f94:	f8cd b000 	strhi.w	fp, [sp]
 8012f98:	f8dc 7090 	ldr.w	r7, [ip, #144]	; 0x90
 8012f9c:	47b8      	blx	r7
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012fa4:	a907      	add	r1, sp, #28
 8012fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fa8:	4620      	mov	r0, r4
 8012faa:	4798      	blx	r3
 8012fac:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012fb0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8012fb4:	f8b8 20aa 	ldrh.w	r2, [r8, #170]	; 0xaa
 8012fb8:	1a5b      	subs	r3, r3, r1
 8012fba:	440a      	add	r2, r1
 8012fbc:	b21b      	sxth	r3, r3
 8012fbe:	f8a8 20aa 	strh.w	r2, [r8, #170]	; 0xaa
 8012fc2:	f8a8 30ae 	strh.w	r3, [r8, #174]	; 0xae
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	f47f aed5 	bne.w	8012d76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 8012fcc:	fa1f f189 	uxth.w	r1, r9
 8012fd0:	4650      	mov	r0, sl
 8012fd2:	f7ff fa1b 	bl	801240c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012fd6:	e6ce      	b.n	8012d76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x272>
 8012fd8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8012fdc:	42bb      	cmp	r3, r7
 8012fde:	f67f aea6 	bls.w	8012d2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x22a>
 8012fe2:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012fe6:	ab07      	add	r3, sp, #28
 8012fe8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8012fec:	6851      	ldr	r1, [r2, #4]
 8012fee:	c303      	stmia	r3!, {r0, r1}
 8012ff0:	a807      	add	r0, sp, #28
 8012ff2:	f7fa f862 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ff6:	b920      	cbnz	r0, 8013002 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4fe>
 8012ff8:	6823      	ldr	r3, [r4, #0]
 8012ffa:	a907      	add	r1, sp, #28
 8012ffc:	4620      	mov	r0, r4
 8012ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013000:	4798      	blx	r3
 8013002:	3701      	adds	r7, #1
 8013004:	b2bf      	uxth	r7, r7
 8013006:	e7e7      	b.n	8012fd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x4d4>

08013008 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013008:	4b03      	ldr	r3, [pc, #12]	; (8013018 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801300a:	2200      	movs	r2, #0
 801300c:	801a      	strh	r2, [r3, #0]
 801300e:	805a      	strh	r2, [r3, #2]
 8013010:	809a      	strh	r2, [r3, #4]
 8013012:	80da      	strh	r2, [r3, #6]
 8013014:	4770      	bx	lr
 8013016:	bf00      	nop
 8013018:	2400f1fc 	.word	0x2400f1fc

0801301c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013020:	b09d      	sub	sp, #116	; 0x74
 8013022:	4606      	mov	r6, r0
 8013024:	4614      	mov	r4, r2
 8013026:	468a      	mov	sl, r1
 8013028:	a803      	add	r0, sp, #12
 801302a:	461d      	mov	r5, r3
 801302c:	f000 fe3e 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8013030:	6833      	ldr	r3, [r6, #0]
 8013032:	4630      	mov	r0, r6
 8013034:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801303a:	4798      	blx	r3
 801303c:	6833      	ldr	r3, [r6, #0]
 801303e:	4607      	mov	r7, r0
 8013040:	4630      	mov	r0, r6
 8013042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013044:	4798      	blx	r3
 8013046:	462a      	mov	r2, r5
 8013048:	2500      	movs	r5, #0
 801304a:	4621      	mov	r1, r4
 801304c:	9000      	str	r0, [sp, #0]
 801304e:	463b      	mov	r3, r7
 8013050:	462c      	mov	r4, r5
 8013052:	46a9      	mov	r9, r5
 8013054:	46a8      	mov	r8, r5
 8013056:	a803      	add	r0, sp, #12
 8013058:	f000 fe94 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801305c:	2300      	movs	r3, #0
 801305e:	9302      	str	r3, [sp, #8]
 8013060:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013064:	429c      	cmp	r4, r3
 8013066:	d002      	beq.n	801306e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013068:	455c      	cmp	r4, fp
 801306a:	bf18      	it	ne
 801306c:	4625      	movne	r5, r4
 801306e:	ab02      	add	r3, sp, #8
 8013070:	4632      	mov	r2, r6
 8013072:	4651      	mov	r1, sl
 8013074:	a803      	add	r0, sp, #12
 8013076:	f001 f997 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801307a:	4604      	mov	r4, r0
 801307c:	b108      	cbz	r0, 8013082 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801307e:	280a      	cmp	r0, #10
 8013080:	d10a      	bne.n	8013098 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013082:	45c1      	cmp	r9, r8
 8013084:	bf38      	it	cc
 8013086:	46c1      	movcc	r9, r8
 8013088:	f04f 0800 	mov.w	r8, #0
 801308c:	2c00      	cmp	r4, #0
 801308e:	d1e5      	bne.n	801305c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013090:	4648      	mov	r0, r9
 8013092:	b01d      	add	sp, #116	; 0x74
 8013094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013098:	9a02      	ldr	r2, [sp, #8]
 801309a:	2a00      	cmp	r2, #0
 801309c:	d0de      	beq.n	801305c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801309e:	7b57      	ldrb	r7, [r2, #13]
 80130a0:	4629      	mov	r1, r5
 80130a2:	6833      	ldr	r3, [r6, #0]
 80130a4:	007f      	lsls	r7, r7, #1
 80130a6:	8894      	ldrh	r4, [r2, #4]
 80130a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130aa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80130ae:	7a97      	ldrb	r7, [r2, #10]
 80130b0:	4307      	orrs	r7, r0
 80130b2:	4630      	mov	r0, r6
 80130b4:	4798      	blx	r3
 80130b6:	4438      	add	r0, r7
 80130b8:	4480      	add	r8, r0
 80130ba:	fa1f f888 	uxth.w	r8, r8
 80130be:	e7e5      	b.n	801308c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080130c0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80130c0:	b508      	push	{r3, lr}
 80130c2:	6803      	ldr	r3, [r0, #0]
 80130c4:	68db      	ldr	r3, [r3, #12]
 80130c6:	4798      	blx	r3
 80130c8:	b128      	cbz	r0, 80130d6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80130ca:	7b43      	ldrb	r3, [r0, #13]
 80130cc:	7a80      	ldrb	r0, [r0, #10]
 80130ce:	005b      	lsls	r3, r3, #1
 80130d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130d4:	4318      	orrs	r0, r3
 80130d6:	bd08      	pop	{r3, pc}

080130d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80130d8:	b40e      	push	{r1, r2, r3}
 80130da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130dc:	b09e      	sub	sp, #120	; 0x78
 80130de:	4605      	mov	r5, r0
 80130e0:	ab23      	add	r3, sp, #140	; 0x8c
 80130e2:	a805      	add	r0, sp, #20
 80130e4:	f853 4b04 	ldr.w	r4, [r3], #4
 80130e8:	9303      	str	r3, [sp, #12]
 80130ea:	f000 fddf 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 80130ee:	682b      	ldr	r3, [r5, #0]
 80130f0:	4628      	mov	r0, r5
 80130f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130f4:	4798      	blx	r3
 80130f6:	682b      	ldr	r3, [r5, #0]
 80130f8:	4606      	mov	r6, r0
 80130fa:	4628      	mov	r0, r5
 80130fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130fe:	4798      	blx	r3
 8013100:	4633      	mov	r3, r6
 8013102:	4621      	mov	r1, r4
 8013104:	ae1e      	add	r6, sp, #120	; 0x78
 8013106:	2400      	movs	r4, #0
 8013108:	9000      	str	r0, [sp, #0]
 801310a:	9a03      	ldr	r2, [sp, #12]
 801310c:	a805      	add	r0, sp, #20
 801310e:	f000 fe39 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013112:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013116:	462a      	mov	r2, r5
 8013118:	4633      	mov	r3, r6
 801311a:	4621      	mov	r1, r4
 801311c:	a805      	add	r0, sp, #20
 801311e:	f001 f943 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013122:	b300      	cbz	r0, 8013166 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013124:	280a      	cmp	r0, #10
 8013126:	d01a      	beq.n	801315e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013128:	9f04      	ldr	r7, [sp, #16]
 801312a:	b1c7      	cbz	r7, 801315e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801312c:	7b78      	ldrb	r0, [r7, #13]
 801312e:	7a3b      	ldrb	r3, [r7, #8]
 8013130:	00c1      	lsls	r1, r0, #3
 8013132:	88aa      	ldrh	r2, [r5, #4]
 8013134:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013138:	4319      	orrs	r1, r3
 801313a:	0643      	lsls	r3, r0, #25
 801313c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013140:	bf48      	it	mi
 8013142:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8013146:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801314a:	bf48      	it	mi
 801314c:	b219      	sxthmi	r1, r3
 801314e:	79fb      	ldrb	r3, [r7, #7]
 8013150:	4303      	orrs	r3, r0
 8013152:	4413      	add	r3, r2
 8013154:	1a5b      	subs	r3, r3, r1
 8013156:	b29b      	uxth	r3, r3
 8013158:	42a3      	cmp	r3, r4
 801315a:	bfc8      	it	gt
 801315c:	b21c      	sxthgt	r4, r3
 801315e:	4633      	mov	r3, r6
 8013160:	462a      	mov	r2, r5
 8013162:	2100      	movs	r1, #0
 8013164:	e7da      	b.n	801311c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013166:	b2a0      	uxth	r0, r4
 8013168:	b01e      	add	sp, #120	; 0x78
 801316a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801316e:	b003      	add	sp, #12
 8013170:	4770      	bx	lr

08013172 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013172:	b40e      	push	{r1, r2, r3}
 8013174:	b570      	push	{r4, r5, r6, lr}
 8013176:	b09d      	sub	sp, #116	; 0x74
 8013178:	4604      	mov	r4, r0
 801317a:	ab21      	add	r3, sp, #132	; 0x84
 801317c:	a803      	add	r0, sp, #12
 801317e:	f853 5b04 	ldr.w	r5, [r3], #4
 8013182:	9302      	str	r3, [sp, #8]
 8013184:	f000 fd92 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	4620      	mov	r0, r4
 801318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801318e:	4798      	blx	r3
 8013190:	6823      	ldr	r3, [r4, #0]
 8013192:	4606      	mov	r6, r0
 8013194:	4620      	mov	r0, r4
 8013196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013198:	2401      	movs	r4, #1
 801319a:	4798      	blx	r3
 801319c:	4633      	mov	r3, r6
 801319e:	9000      	str	r0, [sp, #0]
 80131a0:	4629      	mov	r1, r5
 80131a2:	9a02      	ldr	r2, [sp, #8]
 80131a4:	a803      	add	r0, sp, #12
 80131a6:	f000 fded 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80131aa:	a803      	add	r0, sp, #12
 80131ac:	f001 f9f6 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80131b0:	b2a3      	uxth	r3, r4
 80131b2:	b138      	cbz	r0, 80131c4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 80131b4:	280a      	cmp	r0, #10
 80131b6:	a803      	add	r0, sp, #12
 80131b8:	bf04      	itt	eq
 80131ba:	3301      	addeq	r3, #1
 80131bc:	b21c      	sxtheq	r4, r3
 80131be:	f001 f9ed 	bl	801459c <_ZN8touchgfx12TextProvider11getNextCharEv>
 80131c2:	e7f5      	b.n	80131b0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80131c4:	4618      	mov	r0, r3
 80131c6:	b01d      	add	sp, #116	; 0x74
 80131c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131cc:	b003      	add	sp, #12
 80131ce:	4770      	bx	lr

080131d0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80131d0:	b40e      	push	{r1, r2, r3}
 80131d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131d4:	b09e      	sub	sp, #120	; 0x78
 80131d6:	4604      	mov	r4, r0
 80131d8:	ab23      	add	r3, sp, #140	; 0x8c
 80131da:	a805      	add	r0, sp, #20
 80131dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80131e0:	9303      	str	r3, [sp, #12]
 80131e2:	f000 fd63 	bl	8013cac <_ZN8touchgfx12TextProviderC1Ev>
 80131e6:	6823      	ldr	r3, [r4, #0]
 80131e8:	4620      	mov	r0, r4
 80131ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131ec:	4798      	blx	r3
 80131ee:	6823      	ldr	r3, [r4, #0]
 80131f0:	4606      	mov	r6, r0
 80131f2:	4620      	mov	r0, r4
 80131f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131f6:	4798      	blx	r3
 80131f8:	4633      	mov	r3, r6
 80131fa:	4629      	mov	r1, r5
 80131fc:	9000      	str	r0, [sp, #0]
 80131fe:	9a03      	ldr	r2, [sp, #12]
 8013200:	a805      	add	r0, sp, #20
 8013202:	f000 fdbf 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013206:	ad1e      	add	r5, sp, #120	; 0x78
 8013208:	2100      	movs	r1, #0
 801320a:	26ff      	movs	r6, #255	; 0xff
 801320c:	4622      	mov	r2, r4
 801320e:	a805      	add	r0, sp, #20
 8013210:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013214:	462b      	mov	r3, r5
 8013216:	f001 f8c7 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801321a:	b1d8      	cbz	r0, 8013254 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801321c:	280a      	cmp	r0, #10
 801321e:	d012      	beq.n	8013246 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013220:	9804      	ldr	r0, [sp, #16]
 8013222:	b180      	cbz	r0, 8013246 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013224:	7b47      	ldrb	r7, [r0, #13]
 8013226:	7922      	ldrb	r2, [r4, #4]
 8013228:	00fb      	lsls	r3, r7, #3
 801322a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801322e:	7a03      	ldrb	r3, [r0, #8]
 8013230:	430b      	orrs	r3, r1
 8013232:	0679      	lsls	r1, r7, #25
 8013234:	bf44      	itt	mi
 8013236:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801323a:	b21b      	sxthmi	r3, r3
 801323c:	1ad3      	subs	r3, r2, r3
 801323e:	b2db      	uxtb	r3, r3
 8013240:	429e      	cmp	r6, r3
 8013242:	bf28      	it	cs
 8013244:	461e      	movcs	r6, r3
 8013246:	462b      	mov	r3, r5
 8013248:	4622      	mov	r2, r4
 801324a:	2100      	movs	r1, #0
 801324c:	a805      	add	r0, sp, #20
 801324e:	f001 f8ab 	bl	80143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013252:	e7e2      	b.n	801321a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8013254:	4630      	mov	r0, r6
 8013256:	b01e      	add	sp, #120	; 0x78
 8013258:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801325c:	b003      	add	sp, #12
 801325e:	4770      	bx	lr

08013260 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013260:	b513      	push	{r0, r1, r4, lr}
 8013262:	6803      	ldr	r3, [r0, #0]
 8013264:	2400      	movs	r4, #0
 8013266:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801326a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801326e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013272:	4669      	mov	r1, sp
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	9400      	str	r4, [sp, #0]
 8013278:	f8ad 2006 	strh.w	r2, [sp, #6]
 801327c:	4798      	blx	r3
 801327e:	b002      	add	sp, #8
 8013280:	bd10      	pop	{r4, pc}

08013282 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013282:	b538      	push	{r3, r4, r5, lr}
 8013284:	680b      	ldr	r3, [r1, #0]
 8013286:	460c      	mov	r4, r1
 8013288:	4605      	mov	r5, r0
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	4798      	blx	r3
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	4620      	mov	r0, r4
 8013292:	4629      	mov	r1, r5
 8013294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013296:	4798      	blx	r3
 8013298:	4628      	mov	r0, r5
 801329a:	bd38      	pop	{r3, r4, r5, pc}

0801329c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801329c:	b410      	push	{r4}
 801329e:	880a      	ldrh	r2, [r1, #0]
 80132a0:	8884      	ldrh	r4, [r0, #4]
 80132a2:	4422      	add	r2, r4
 80132a4:	800a      	strh	r2, [r1, #0]
 80132a6:	884a      	ldrh	r2, [r1, #2]
 80132a8:	88c4      	ldrh	r4, [r0, #6]
 80132aa:	4422      	add	r2, r4
 80132ac:	804a      	strh	r2, [r1, #2]
 80132ae:	6940      	ldr	r0, [r0, #20]
 80132b0:	b120      	cbz	r0, 80132bc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80132b2:	6803      	ldr	r3, [r0, #0]
 80132b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ba:	4718      	bx	r3
 80132bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132c0:	4770      	bx	lr

080132c2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80132c2:	b570      	push	{r4, r5, r6, lr}
 80132c4:	8882      	ldrh	r2, [r0, #4]
 80132c6:	460c      	mov	r4, r1
 80132c8:	880b      	ldrh	r3, [r1, #0]
 80132ca:	4605      	mov	r5, r0
 80132cc:	4413      	add	r3, r2
 80132ce:	800b      	strh	r3, [r1, #0]
 80132d0:	884b      	ldrh	r3, [r1, #2]
 80132d2:	88c2      	ldrh	r2, [r0, #6]
 80132d4:	4413      	add	r3, r2
 80132d6:	804b      	strh	r3, [r1, #2]
 80132d8:	1d01      	adds	r1, r0, #4
 80132da:	4620      	mov	r0, r4
 80132dc:	f7f9 feaa 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 80132e0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	dd0b      	ble.n	8013300 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80132e8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	dd07      	ble.n	8013300 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80132f0:	6968      	ldr	r0, [r5, #20]
 80132f2:	b128      	cbz	r0, 8013300 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80132f4:	6803      	ldr	r3, [r0, #0]
 80132f6:	4621      	mov	r1, r4
 80132f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132fe:	4718      	bx	r3
 8013300:	bd70      	pop	{r4, r5, r6, pc}
	...

08013304 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013304:	b570      	push	{r4, r5, r6, lr}
 8013306:	8882      	ldrh	r2, [r0, #4]
 8013308:	460c      	mov	r4, r1
 801330a:	880b      	ldrh	r3, [r1, #0]
 801330c:	4605      	mov	r5, r0
 801330e:	4413      	add	r3, r2
 8013310:	800b      	strh	r3, [r1, #0]
 8013312:	884b      	ldrh	r3, [r1, #2]
 8013314:	88c2      	ldrh	r2, [r0, #6]
 8013316:	4413      	add	r3, r2
 8013318:	804b      	strh	r3, [r1, #2]
 801331a:	1d01      	adds	r1, r0, #4
 801331c:	4620      	mov	r0, r4
 801331e:	f7f9 fe89 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8013322:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	dd18      	ble.n	801335c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801332a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801332e:	2b00      	cmp	r3, #0
 8013330:	dd14      	ble.n	801335c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013332:	6968      	ldr	r0, [r5, #20]
 8013334:	b128      	cbz	r0, 8013342 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013336:	6803      	ldr	r3, [r0, #0]
 8013338:	4621      	mov	r1, r4
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013340:	4718      	bx	r3
 8013342:	4b07      	ldr	r3, [pc, #28]	; (8013360 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	3304      	adds	r3, #4
 8013348:	429d      	cmp	r5, r3
 801334a:	d107      	bne.n	801335c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801334c:	f7fe fffa 	bl	8012344 <_ZN8touchgfx11Application11getInstanceEv>
 8013350:	6821      	ldr	r1, [r4, #0]
 8013352:	6862      	ldr	r2, [r4, #4]
 8013354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013358:	f7ff b89c 	b.w	8012494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801335c:	bd70      	pop	{r4, r5, r6, pc}
 801335e:	bf00      	nop
 8013360:	2400f1f4 	.word	0x2400f1f4

08013364 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	4604      	mov	r4, r0
 8013368:	4616      	mov	r6, r2
 801336a:	460d      	mov	r5, r1
 801336c:	b901      	cbnz	r1, 8013370 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801336e:	b192      	cbz	r2, 8013396 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013370:	6823      	ldr	r3, [r4, #0]
 8013372:	4620      	mov	r0, r4
 8013374:	699b      	ldr	r3, [r3, #24]
 8013376:	4798      	blx	r3
 8013378:	88e2      	ldrh	r2, [r4, #6]
 801337a:	88a1      	ldrh	r1, [r4, #4]
 801337c:	4620      	mov	r0, r4
 801337e:	4432      	add	r2, r6
 8013380:	4429      	add	r1, r5
 8013382:	b212      	sxth	r2, r2
 8013384:	b209      	sxth	r1, r1
 8013386:	f7ef fafa 	bl	800297e <_ZN8touchgfx8Drawable5setXYEss>
 801338a:	6823      	ldr	r3, [r4, #0]
 801338c:	4620      	mov	r0, r4
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013394:	4718      	bx	r3
 8013396:	bd70      	pop	{r4, r5, r6, pc}

08013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013398:	b510      	push	{r4, lr}
 801339a:	2300      	movs	r3, #0
 801339c:	4604      	mov	r4, r0
 801339e:	4608      	mov	r0, r1
 80133a0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80133a4:	8023      	strh	r3, [r4, #0]
 80133a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80133aa:	8063      	strh	r3, [r4, #2]
 80133ac:	6803      	ldr	r3, [r0, #0]
 80133ae:	80a1      	strh	r1, [r4, #4]
 80133b0:	4621      	mov	r1, r4
 80133b2:	80e2      	strh	r2, [r4, #6]
 80133b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b6:	4798      	blx	r3
 80133b8:	4620      	mov	r0, r4
 80133ba:	bd10      	pop	{r4, pc}

080133bc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80133bc:	b530      	push	{r4, r5, lr}
 80133be:	8083      	strh	r3, [r0, #4]
 80133c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80133c4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80133c8:	7183      	strb	r3, [r0, #6]
 80133ca:	79c3      	ldrb	r3, [r0, #7]
 80133cc:	6101      	str	r1, [r0, #16]
 80133ce:	f365 0306 	bfi	r3, r5, #0, #7
 80133d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80133d6:	8282      	strh	r2, [r0, #20]
 80133d8:	f365 13c7 	bfi	r3, r5, #7, #1
 80133dc:	71c3      	strb	r3, [r0, #7]
 80133de:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80133e2:	7203      	strb	r3, [r0, #8]
 80133e4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80133e8:	7243      	strb	r3, [r0, #9]
 80133ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80133ee:	8143      	strh	r3, [r0, #10]
 80133f0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80133f4:	8183      	strh	r3, [r0, #12]
 80133f6:	4b01      	ldr	r3, [pc, #4]	; (80133fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 80133f8:	6003      	str	r3, [r0, #0]
 80133fa:	bd30      	pop	{r4, r5, pc}
 80133fc:	08025508 	.word	0x08025508

08013400 <_ZNK8touchgfx9ConstFont4findEt>:
 8013400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013402:	6904      	ldr	r4, [r0, #16]
 8013404:	b3bc      	cbz	r4, 8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013406:	88a3      	ldrh	r3, [r4, #4]
 8013408:	8a82      	ldrh	r2, [r0, #20]
 801340a:	1acb      	subs	r3, r1, r3
 801340c:	f102 32ff 	add.w	r2, r2, #4294967295
 8013410:	d431      	bmi.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013412:	4293      	cmp	r3, r2
 8013414:	dd0c      	ble.n	8013430 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013416:	230e      	movs	r3, #14
 8013418:	fb03 4302 	mla	r3, r3, r2, r4
 801341c:	889b      	ldrh	r3, [r3, #4]
 801341e:	1a5b      	subs	r3, r3, r1
 8013420:	1ad3      	subs	r3, r2, r3
 8013422:	429a      	cmp	r2, r3
 8013424:	db27      	blt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013426:	2b00      	cmp	r3, #0
 8013428:	bfbc      	itt	lt
 801342a:	2302      	movlt	r3, #2
 801342c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013430:	2500      	movs	r5, #0
 8013432:	260e      	movs	r6, #14
 8013434:	4295      	cmp	r5, r2
 8013436:	dc1e      	bgt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013438:	fb06 4003 	mla	r0, r6, r3, r4
 801343c:	8887      	ldrh	r7, [r0, #4]
 801343e:	42b9      	cmp	r1, r7
 8013440:	d01a      	beq.n	8013478 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013442:	d20d      	bcs.n	8013460 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013444:	1e5a      	subs	r2, r3, #1
 8013446:	4295      	cmp	r5, r2
 8013448:	dc15      	bgt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801344a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801344e:	1a5b      	subs	r3, r3, r1
 8013450:	1ad3      	subs	r3, r2, r3
 8013452:	429a      	cmp	r2, r3
 8013454:	db0f      	blt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013456:	429d      	cmp	r5, r3
 8013458:	ddec      	ble.n	8013434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801345a:	1953      	adds	r3, r2, r5
 801345c:	105b      	asrs	r3, r3, #1
 801345e:	e7e9      	b.n	8013434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013460:	1c5d      	adds	r5, r3, #1
 8013462:	42aa      	cmp	r2, r5
 8013464:	db07      	blt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013466:	8a43      	ldrh	r3, [r0, #18]
 8013468:	1acb      	subs	r3, r1, r3
 801346a:	442b      	add	r3, r5
 801346c:	429d      	cmp	r5, r3
 801346e:	dc02      	bgt.n	8013476 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013470:	429a      	cmp	r2, r3
 8013472:	dadf      	bge.n	8013434 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013474:	e7f1      	b.n	801345a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013476:	2000      	movs	r0, #0
 8013478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801347a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801347a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801347c:	4604      	mov	r4, r0
 801347e:	4617      	mov	r7, r2
 8013480:	461e      	mov	r6, r3
 8013482:	b911      	cbnz	r1, 801348a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013484:	2500      	movs	r5, #0
 8013486:	4628      	mov	r0, r5
 8013488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801348a:	290a      	cmp	r1, #10
 801348c:	d0fa      	beq.n	8013484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801348e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8013492:	4291      	cmp	r1, r2
 8013494:	d0f6      	beq.n	8013484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013496:	f242 020b 	movw	r2, #8203	; 0x200b
 801349a:	4291      	cmp	r1, r2
 801349c:	d0f2      	beq.n	8013484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801349e:	f7ff ffaf 	bl	8013400 <_ZNK8touchgfx9ConstFont4findEt>
 80134a2:	4605      	mov	r5, r0
 80134a4:	b950      	cbnz	r0, 80134bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80134a6:	6823      	ldr	r3, [r4, #0]
 80134a8:	4620      	mov	r0, r4
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	4798      	blx	r3
 80134ae:	4601      	mov	r1, r0
 80134b0:	4620      	mov	r0, r4
 80134b2:	f7ff ffa5 	bl	8013400 <_ZNK8touchgfx9ConstFont4findEt>
 80134b6:	4605      	mov	r5, r0
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d0e3      	beq.n	8013484 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80134bc:	6823      	ldr	r3, [r4, #0]
 80134be:	4629      	mov	r1, r5
 80134c0:	4620      	mov	r0, r4
 80134c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80134c4:	4798      	blx	r3
 80134c6:	6038      	str	r0, [r7, #0]
 80134c8:	6823      	ldr	r3, [r4, #0]
 80134ca:	4620      	mov	r0, r4
 80134cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134ce:	4798      	blx	r3
 80134d0:	7030      	strb	r0, [r6, #0]
 80134d2:	e7d8      	b.n	8013486 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080134d4 <_ZN8touchgfx6memsetEPvhm>:
 80134d4:	4402      	add	r2, r0
 80134d6:	4290      	cmp	r0, r2
 80134d8:	d002      	beq.n	80134e0 <_ZN8touchgfx6memsetEPvhm+0xc>
 80134da:	f800 1b01 	strb.w	r1, [r0], #1
 80134de:	e7fa      	b.n	80134d6 <_ZN8touchgfx6memsetEPvhm+0x2>
 80134e0:	4770      	bx	lr

080134e2 <_ZN8touchgfx4clzuEm>:
 80134e2:	4603      	mov	r3, r0
 80134e4:	b1c8      	cbz	r0, 801351a <_ZN8touchgfx4clzuEm+0x38>
 80134e6:	0c02      	lsrs	r2, r0, #16
 80134e8:	0412      	lsls	r2, r2, #16
 80134ea:	b9a2      	cbnz	r2, 8013516 <_ZN8touchgfx4clzuEm+0x34>
 80134ec:	0403      	lsls	r3, r0, #16
 80134ee:	2010      	movs	r0, #16
 80134f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80134f4:	bf04      	itt	eq
 80134f6:	021b      	lsleq	r3, r3, #8
 80134f8:	3008      	addeq	r0, #8
 80134fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80134fe:	bf04      	itt	eq
 8013500:	011b      	lsleq	r3, r3, #4
 8013502:	3004      	addeq	r0, #4
 8013504:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013508:	bf04      	itt	eq
 801350a:	009b      	lsleq	r3, r3, #2
 801350c:	3002      	addeq	r0, #2
 801350e:	2b00      	cmp	r3, #0
 8013510:	db04      	blt.n	801351c <_ZN8touchgfx4clzuEm+0x3a>
 8013512:	3001      	adds	r0, #1
 8013514:	4770      	bx	lr
 8013516:	2000      	movs	r0, #0
 8013518:	e7ea      	b.n	80134f0 <_ZN8touchgfx4clzuEm+0xe>
 801351a:	2020      	movs	r0, #32
 801351c:	4770      	bx	lr

0801351e <_ZN8touchgfx7muldivuEmmmRm>:
 801351e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013522:	4680      	mov	r8, r0
 8013524:	460f      	mov	r7, r1
 8013526:	4615      	mov	r5, r2
 8013528:	461e      	mov	r6, r3
 801352a:	f7ff ffda 	bl	80134e2 <_ZN8touchgfx4clzuEm>
 801352e:	b998      	cbnz	r0, 8013558 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 8013530:	4608      	mov	r0, r1
 8013532:	f7ff ffd6 	bl	80134e2 <_ZN8touchgfx4clzuEm>
 8013536:	2800      	cmp	r0, #0
 8013538:	dd08      	ble.n	801354c <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801353a:	4633      	mov	r3, r6
 801353c:	462a      	mov	r2, r5
 801353e:	4641      	mov	r1, r8
 8013540:	4638      	mov	r0, r7
 8013542:	f7ff ffec 	bl	801351e <_ZN8touchgfx7muldivuEmmmRm>
 8013546:	b003      	add	sp, #12
 8013548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354c:	f04f 33ff 	mov.w	r3, #4294967295
 8013550:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013554:	6033      	str	r3, [r6, #0]
 8013556:	e7f6      	b.n	8013546 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 8013558:	fa31 f900 	lsrs.w	r9, r1, r0
 801355c:	fb01 f308 	mul.w	r3, r1, r8
 8013560:	d105      	bne.n	801356e <_ZN8touchgfx7muldivuEmmmRm+0x50>
 8013562:	fbb3 f0f5 	udiv	r0, r3, r5
 8013566:	fb05 3510 	mls	r5, r5, r0, r3
 801356a:	6035      	str	r5, [r6, #0]
 801356c:	e7eb      	b.n	8013546 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801356e:	2301      	movs	r3, #1
 8013570:	fa08 fb00 	lsl.w	fp, r8, r0
 8013574:	462a      	mov	r2, r5
 8013576:	4641      	mov	r1, r8
 8013578:	fa03 f000 	lsl.w	r0, r3, r0
 801357c:	4633      	mov	r3, r6
 801357e:	fbbb faf5 	udiv	sl, fp, r5
 8013582:	3801      	subs	r0, #1
 8013584:	fb09 f40a 	mul.w	r4, r9, sl
 8013588:	4038      	ands	r0, r7
 801358a:	f7ff ffc8 	bl	801351e <_ZN8touchgfx7muldivuEmmmRm>
 801358e:	462a      	mov	r2, r5
 8013590:	4607      	mov	r7, r0
 8013592:	ab01      	add	r3, sp, #4
 8013594:	fb05 b11a 	mls	r1, r5, sl, fp
 8013598:	4648      	mov	r0, r9
 801359a:	f7ff ffc0 	bl	801351e <_ZN8touchgfx7muldivuEmmmRm>
 801359e:	9b01      	ldr	r3, [sp, #4]
 80135a0:	6832      	ldr	r2, [r6, #0]
 80135a2:	441a      	add	r2, r3
 80135a4:	fbb2 f3f5 	udiv	r3, r2, r5
 80135a8:	441c      	add	r4, r3
 80135aa:	fb05 2513 	mls	r5, r5, r3, r2
 80135ae:	443c      	add	r4, r7
 80135b0:	4420      	add	r0, r4
 80135b2:	e7da      	b.n	801356a <_ZN8touchgfx7muldivuEmmmRm+0x4c>

080135b4 <_ZN8touchgfx6muldivElllRl>:
 80135b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135b6:	2800      	cmp	r0, #0
 80135b8:	461e      	mov	r6, r3
 80135ba:	bfba      	itte	lt
 80135bc:	4240      	neglt	r0, r0
 80135be:	f04f 34ff 	movlt.w	r4, #4294967295
 80135c2:	2401      	movge	r4, #1
 80135c4:	2900      	cmp	r1, #0
 80135c6:	bfbc      	itt	lt
 80135c8:	4249      	neglt	r1, r1
 80135ca:	4264      	neglt	r4, r4
 80135cc:	2a00      	cmp	r2, #0
 80135ce:	bfb6      	itet	lt
 80135d0:	4265      	neglt	r5, r4
 80135d2:	4625      	movge	r5, r4
 80135d4:	4252      	neglt	r2, r2
 80135d6:	4288      	cmp	r0, r1
 80135d8:	bfc2      	ittt	gt
 80135da:	4603      	movgt	r3, r0
 80135dc:	4608      	movgt	r0, r1
 80135de:	4619      	movgt	r1, r3
 80135e0:	ab01      	add	r3, sp, #4
 80135e2:	f7ff ff9c 	bl	801351e <_ZN8touchgfx7muldivuEmmmRm>
 80135e6:	9b01      	ldr	r3, [sp, #4]
 80135e8:	4368      	muls	r0, r5
 80135ea:	435c      	muls	r4, r3
 80135ec:	6034      	str	r4, [r6, #0]
 80135ee:	b002      	add	sp, #8
 80135f0:	bd70      	pop	{r4, r5, r6, pc}

080135f2 <_ZN8touchgfx6muldivElll>:
 80135f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80135f4:	4606      	mov	r6, r0
 80135f6:	ab01      	add	r3, sp, #4
 80135f8:	460d      	mov	r5, r1
 80135fa:	4614      	mov	r4, r2
 80135fc:	f7ff ffda 	bl	80135b4 <_ZN8touchgfx6muldivElllRl>
 8013600:	2e00      	cmp	r6, #0
 8013602:	db20      	blt.n	8013646 <_ZN8touchgfx6muldivElll+0x54>
 8013604:	bf14      	ite	ne
 8013606:	2301      	movne	r3, #1
 8013608:	2300      	moveq	r3, #0
 801360a:	2d00      	cmp	r5, #0
 801360c:	db1e      	blt.n	801364c <_ZN8touchgfx6muldivElll+0x5a>
 801360e:	bf14      	ite	ne
 8013610:	2201      	movne	r2, #1
 8013612:	2200      	moveq	r2, #0
 8013614:	2c00      	cmp	r4, #0
 8013616:	fb03 f202 	mul.w	r2, r3, r2
 801361a:	db1a      	blt.n	8013652 <_ZN8touchgfx6muldivElll+0x60>
 801361c:	bf14      	ite	ne
 801361e:	2301      	movne	r3, #1
 8013620:	2300      	moveq	r3, #0
 8013622:	4353      	muls	r3, r2
 8013624:	2b01      	cmp	r3, #1
 8013626:	d117      	bne.n	8013658 <_ZN8touchgfx6muldivElll+0x66>
 8013628:	2c00      	cmp	r4, #0
 801362a:	9b01      	ldr	r3, [sp, #4]
 801362c:	bfb8      	it	lt
 801362e:	4264      	neglt	r4, r4
 8013630:	2b00      	cmp	r3, #0
 8013632:	f104 0401 	add.w	r4, r4, #1
 8013636:	bfb8      	it	lt
 8013638:	425b      	neglt	r3, r3
 801363a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801363e:	db00      	blt.n	8013642 <_ZN8touchgfx6muldivElll+0x50>
 8013640:	3001      	adds	r0, #1
 8013642:	b002      	add	sp, #8
 8013644:	bd70      	pop	{r4, r5, r6, pc}
 8013646:	f04f 33ff 	mov.w	r3, #4294967295
 801364a:	e7de      	b.n	801360a <_ZN8touchgfx6muldivElll+0x18>
 801364c:	f04f 32ff 	mov.w	r2, #4294967295
 8013650:	e7e0      	b.n	8013614 <_ZN8touchgfx6muldivElll+0x22>
 8013652:	f04f 33ff 	mov.w	r3, #4294967295
 8013656:	e7e4      	b.n	8013622 <_ZN8touchgfx6muldivElll+0x30>
 8013658:	3301      	adds	r3, #1
 801365a:	d1f2      	bne.n	8013642 <_ZN8touchgfx6muldivElll+0x50>
 801365c:	9b01      	ldr	r3, [sp, #4]
 801365e:	2c00      	cmp	r4, #0
 8013660:	bfb8      	it	lt
 8013662:	4264      	neglt	r4, r4
 8013664:	2b00      	cmp	r3, #0
 8013666:	bfb8      	it	lt
 8013668:	425b      	neglt	r3, r3
 801366a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801366e:	bfc8      	it	gt
 8013670:	f100 30ff 	addgt.w	r0, r0, #4294967295
 8013674:	e7e5      	b.n	8013642 <_ZN8touchgfx6muldivElll+0x50>

08013676 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013676:	2000      	movs	r0, #0
 8013678:	4770      	bx	lr

0801367a <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801367a:	2001      	movs	r0, #1
 801367c:	4770      	bx	lr

0801367e <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801367e:	2002      	movs	r0, #2
 8013680:	4770      	bx	lr

08013682 <_ZN8touchgfx6ScreenD1Ev>:
 8013682:	4770      	bx	lr

08013684 <_ZN8touchgfx12GestureEventD1Ev>:
 8013684:	4770      	bx	lr

08013686 <_ZN8touchgfx9DragEventD1Ev>:
 8013686:	4770      	bx	lr

08013688 <_ZN8touchgfx10ClickEventD1Ev>:
 8013688:	4770      	bx	lr

0801368a <_ZN8touchgfx10ClickEventD0Ev>:
 801368a:	b510      	push	{r4, lr}
 801368c:	4604      	mov	r4, r0
 801368e:	210c      	movs	r1, #12
 8013690:	f00b ff59 	bl	801f546 <_ZdlPvj>
 8013694:	4620      	mov	r0, r4
 8013696:	bd10      	pop	{r4, pc}

08013698 <_ZN8touchgfx9DragEventD0Ev>:
 8013698:	b510      	push	{r4, lr}
 801369a:	4604      	mov	r4, r0
 801369c:	2110      	movs	r1, #16
 801369e:	f00b ff52 	bl	801f546 <_ZdlPvj>
 80136a2:	4620      	mov	r0, r4
 80136a4:	bd10      	pop	{r4, pc}

080136a6 <_ZN8touchgfx12GestureEventD0Ev>:
 80136a6:	b510      	push	{r4, lr}
 80136a8:	4604      	mov	r4, r0
 80136aa:	210c      	movs	r1, #12
 80136ac:	f00b ff4b 	bl	801f546 <_ZdlPvj>
 80136b0:	4620      	mov	r0, r4
 80136b2:	bd10      	pop	{r4, pc}

080136b4 <_ZN8touchgfx6ScreenD0Ev>:
 80136b4:	b510      	push	{r4, lr}
 80136b6:	4604      	mov	r4, r0
 80136b8:	213c      	movs	r1, #60	; 0x3c
 80136ba:	f00b ff44 	bl	801f546 <_ZdlPvj>
 80136be:	4620      	mov	r0, r4
 80136c0:	bd10      	pop	{r4, pc}
	...

080136c4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80136c4:	b530      	push	{r4, r5, lr}
 80136c6:	460d      	mov	r5, r1
 80136c8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80136ca:	b087      	sub	sp, #28
 80136cc:	4604      	mov	r4, r0
 80136ce:	b301      	cbz	r1, 8013712 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 80136d0:	a801      	add	r0, sp, #4
 80136d2:	f7ff fe61 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80136d6:	892a      	ldrh	r2, [r5, #8]
 80136d8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80136dc:	7928      	ldrb	r0, [r5, #4]
 80136de:	1ad2      	subs	r2, r2, r3
 80136e0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80136e2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 80136e6:	441a      	add	r2, r3
 80136e8:	896b      	ldrh	r3, [r5, #10]
 80136ea:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 80136ee:	f88d 0010 	strb.w	r0, [sp, #16]
 80136f2:	1b5b      	subs	r3, r3, r5
 80136f4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80136f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80136f8:	442b      	add	r3, r5
 80136fa:	4d07      	ldr	r5, [pc, #28]	; (8013718 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 80136fc:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013700:	a903      	add	r1, sp, #12
 8013702:	9503      	str	r5, [sp, #12]
 8013704:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013708:	f8ad 3016 	strh.w	r3, [sp, #22]
 801370c:	6803      	ldr	r3, [r0, #0]
 801370e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013710:	4798      	blx	r3
 8013712:	b007      	add	sp, #28
 8013714:	bd30      	pop	{r4, r5, pc}
 8013716:	bf00      	nop
 8013718:	08025588 	.word	0x08025588

0801371c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013720:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013722:	b08a      	sub	sp, #40	; 0x28
 8013724:	4604      	mov	r4, r0
 8013726:	460d      	mov	r5, r1
 8013728:	b113      	cbz	r3, 8013730 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801372a:	790b      	ldrb	r3, [r1, #4]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d044      	beq.n	80137ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013730:	f104 0804 	add.w	r8, r4, #4
 8013734:	a803      	add	r0, sp, #12
 8013736:	4641      	mov	r1, r8
 8013738:	f7ff fe2e 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801373c:	792b      	ldrb	r3, [r5, #4]
 801373e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013742:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013746:	b983      	cbnz	r3, 801376a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013748:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801374c:	892a      	ldrh	r2, [r5, #8]
 801374e:	88e9      	ldrh	r1, [r5, #6]
 8013750:	4640      	mov	r0, r8
 8013752:	1b92      	subs	r2, r2, r6
 8013754:	9301      	str	r3, [sp, #4]
 8013756:	1bc9      	subs	r1, r1, r7
 8013758:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801375c:	b212      	sxth	r2, r2
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	b209      	sxth	r1, r1
 8013762:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8013766:	f7f9 fb83 	bl	800ce70 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801376a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801376c:	b329      	cbz	r1, 80137ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801376e:	a805      	add	r0, sp, #20
 8013770:	f7ff fe12 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013774:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013778:	792b      	ldrb	r3, [r5, #4]
 801377a:	a907      	add	r1, sp, #28
 801377c:	1abf      	subs	r7, r7, r2
 801377e:	88ea      	ldrh	r2, [r5, #6]
 8013780:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8013782:	4417      	add	r7, r2
 8013784:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8013786:	f88d 3020 	strb.w	r3, [sp, #32]
 801378a:	4417      	add	r7, r2
 801378c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013790:	1ab6      	subs	r6, r6, r2
 8013792:	892a      	ldrh	r2, [r5, #8]
 8013794:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8013798:	4416      	add	r6, r2
 801379a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801379c:	4416      	add	r6, r2
 801379e:	4a08      	ldr	r2, [pc, #32]	; (80137c0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80137a0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80137a4:	2600      	movs	r6, #0
 80137a6:	9207      	str	r2, [sp, #28]
 80137a8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80137ac:	6803      	ldr	r3, [r0, #0]
 80137ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137b0:	4798      	blx	r3
 80137b2:	792b      	ldrb	r3, [r5, #4]
 80137b4:	b10b      	cbz	r3, 80137ba <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80137b6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80137ba:	b00a      	add	sp, #40	; 0x28
 80137bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c0:	08025560 	.word	0x08025560

080137c4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80137c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c8:	460c      	mov	r4, r1
 80137ca:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80137cc:	b088      	sub	sp, #32
 80137ce:	4605      	mov	r5, r0
 80137d0:	2900      	cmp	r1, #0
 80137d2:	d06d      	beq.n	80138b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 80137d4:	4668      	mov	r0, sp
 80137d6:	f7ff fddf 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80137da:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 80137dc:	88e3      	ldrh	r3, [r4, #6]
 80137de:	f9bd 8000 	ldrsh.w	r8, [sp]
 80137e2:	440b      	add	r3, r1
 80137e4:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 80137e8:	b21b      	sxth	r3, r3
 80137ea:	4543      	cmp	r3, r8
 80137ec:	db31      	blt.n	8013852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80137ee:	f8bd c004 	ldrh.w	ip, [sp, #4]
 80137f2:	44c4      	add	ip, r8
 80137f4:	fa0f fc8c 	sxth.w	ip, ip
 80137f8:	4563      	cmp	r3, ip
 80137fa:	da2a      	bge.n	8013852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80137fc:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 80137fe:	8926      	ldrh	r6, [r4, #8]
 8013800:	4416      	add	r6, r2
 8013802:	b236      	sxth	r6, r6
 8013804:	42be      	cmp	r6, r7
 8013806:	db24      	blt.n	8013852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013808:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801380c:	4438      	add	r0, r7
 801380e:	b200      	sxth	r0, r0
 8013810:	4286      	cmp	r6, r0
 8013812:	da1e      	bge.n	8013852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013814:	8963      	ldrh	r3, [r4, #10]
 8013816:	4419      	add	r1, r3
 8013818:	b209      	sxth	r1, r1
 801381a:	4541      	cmp	r1, r8
 801381c:	db08      	blt.n	8013830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801381e:	4561      	cmp	r1, ip
 8013820:	da06      	bge.n	8013830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013822:	89a3      	ldrh	r3, [r4, #12]
 8013824:	441a      	add	r2, r3
 8013826:	b212      	sxth	r2, r2
 8013828:	42ba      	cmp	r2, r7
 801382a:	db01      	blt.n	8013830 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801382c:	4282      	cmp	r2, r0
 801382e:	db10      	blt.n	8013852 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013830:	4b21      	ldr	r3, [pc, #132]	; (80138b8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8013832:	a904      	add	r1, sp, #16
 8013834:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013836:	9304      	str	r3, [sp, #16]
 8013838:	2302      	movs	r3, #2
 801383a:	f88d 3014 	strb.w	r3, [sp, #20]
 801383e:	2300      	movs	r3, #0
 8013840:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013844:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013848:	f8ad 301a 	strh.w	r3, [sp, #26]
 801384c:	6803      	ldr	r3, [r0, #0]
 801384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013850:	4798      	blx	r3
 8013852:	1d29      	adds	r1, r5, #4
 8013854:	a802      	add	r0, sp, #8
 8013856:	f7ff fd9f 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801385a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801385e:	88e0      	ldrh	r0, [r4, #6]
 8013860:	eba3 0808 	sub.w	r8, r3, r8
 8013864:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013868:	7921      	ldrb	r1, [r4, #4]
 801386a:	fa1f f888 	uxth.w	r8, r8
 801386e:	1bdf      	subs	r7, r3, r7
 8013870:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8013874:	b2bb      	uxth	r3, r7
 8013876:	4440      	add	r0, r8
 8013878:	8922      	ldrh	r2, [r4, #8]
 801387a:	8967      	ldrh	r7, [r4, #10]
 801387c:	4460      	add	r0, ip
 801387e:	89a4      	ldrh	r4, [r4, #12]
 8013880:	441a      	add	r2, r3
 8013882:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8013884:	44b8      	add	r8, r7
 8013886:	4423      	add	r3, r4
 8013888:	f8ad 0016 	strh.w	r0, [sp, #22]
 801388c:	4432      	add	r2, r6
 801388e:	44e0      	add	r8, ip
 8013890:	4433      	add	r3, r6
 8013892:	4c0a      	ldr	r4, [pc, #40]	; (80138bc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8013894:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8013896:	f88d 1014 	strb.w	r1, [sp, #20]
 801389a:	a904      	add	r1, sp, #16
 801389c:	9404      	str	r4, [sp, #16]
 801389e:	f8ad 2018 	strh.w	r2, [sp, #24]
 80138a2:	f8ad 801a 	strh.w	r8, [sp, #26]
 80138a6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80138aa:	6803      	ldr	r3, [r0, #0]
 80138ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ae:	4798      	blx	r3
 80138b0:	b008      	add	sp, #32
 80138b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138b6:	bf00      	nop
 80138b8:	08025560 	.word	0x08025560
 80138bc:	08025574 	.word	0x08025574

080138c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80138c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80138c2:	4604      	mov	r4, r0
 80138c4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80138c8:	3201      	adds	r2, #1
 80138ca:	d112      	bne.n	80138f2 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80138cc:	2500      	movs	r5, #0
 80138ce:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80138d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80138d6:	6803      	ldr	r3, [r0, #0]
 80138d8:	9500      	str	r5, [sp, #0]
 80138da:	466d      	mov	r5, sp
 80138dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80138e0:	f8ad 2006 	strh.w	r2, [sp, #6]
 80138e4:	4629      	mov	r1, r5
 80138e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138e8:	4798      	blx	r3
 80138ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80138ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80138f2:	4620      	mov	r0, r4
 80138f4:	b003      	add	sp, #12
 80138f6:	bd30      	pop	{r4, r5, pc}

080138f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80138f8:	b513      	push	{r0, r1, r4, lr}
 80138fa:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80138fe:	4604      	mov	r4, r0
 8013900:	3301      	adds	r3, #1
 8013902:	d109      	bne.n	8013918 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8013904:	4601      	mov	r1, r0
 8013906:	4668      	mov	r0, sp
 8013908:	f7ff fd46 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801390c:	f8bd 3000 	ldrh.w	r3, [sp]
 8013910:	8423      	strh	r3, [r4, #32]
 8013912:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013916:	8463      	strh	r3, [r4, #34]	; 0x22
 8013918:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801391c:	b002      	add	sp, #8
 801391e:	bd10      	pop	{r4, pc}

08013920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8013920:	b513      	push	{r0, r1, r4, lr}
 8013922:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8013926:	4604      	mov	r4, r0
 8013928:	3301      	adds	r3, #1
 801392a:	d109      	bne.n	8013940 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801392c:	4601      	mov	r1, r0
 801392e:	4668      	mov	r0, sp
 8013930:	f7ff fd32 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013934:	f8bd 3000 	ldrh.w	r3, [sp]
 8013938:	8423      	strh	r3, [r4, #32]
 801393a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801393e:	8463      	strh	r3, [r4, #34]	; 0x22
 8013940:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8013944:	b002      	add	sp, #8
 8013946:	bd10      	pop	{r4, pc}

08013948 <_ZN8touchgfx6ScreenC1Ev>:
 8013948:	b570      	push	{r4, r5, r6, lr}
 801394a:	4b17      	ldr	r3, [pc, #92]	; (80139a8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801394c:	4605      	mov	r5, r0
 801394e:	4a17      	ldr	r2, [pc, #92]	; (80139ac <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8013950:	2101      	movs	r1, #1
 8013952:	f845 3b04 	str.w	r3, [r5], #4
 8013956:	2300      	movs	r3, #0
 8013958:	6042      	str	r2, [r0, #4]
 801395a:	4604      	mov	r4, r0
 801395c:	8103      	strh	r3, [r0, #8]
 801395e:	8143      	strh	r3, [r0, #10]
 8013960:	8183      	strh	r3, [r0, #12]
 8013962:	81c3      	strh	r3, [r0, #14]
 8013964:	8203      	strh	r3, [r0, #16]
 8013966:	8243      	strh	r3, [r0, #18]
 8013968:	8283      	strh	r3, [r0, #20]
 801396a:	82c3      	strh	r3, [r0, #22]
 801396c:	6203      	str	r3, [r0, #32]
 801396e:	8483      	strh	r3, [r0, #36]	; 0x24
 8013970:	84c3      	strh	r3, [r0, #38]	; 0x26
 8013972:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8013976:	6343      	str	r3, [r0, #52]	; 0x34
 8013978:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801397c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013980:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8013984:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8013988:	4b09      	ldr	r3, [pc, #36]	; (80139b0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801398a:	4628      	mov	r0, r5
 801398c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013990:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8013992:	4a08      	ldr	r2, [pc, #32]	; (80139b4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8013994:	f9b2 1000 	ldrsh.w	r1, [r2]
 8013998:	4798      	blx	r3
 801399a:	6863      	ldr	r3, [r4, #4]
 801399c:	4628      	mov	r0, r5
 801399e:	4631      	mov	r1, r6
 80139a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139a2:	4798      	blx	r3
 80139a4:	4620      	mov	r0, r4
 80139a6:	bd70      	pop	{r4, r5, r6, pc}
 80139a8:	0802559c 	.word	0x0802559c
 80139ac:	08024004 	.word	0x08024004
 80139b0:	2400f18e 	.word	0x2400f18e
 80139b4:	2400f18c 	.word	0x2400f18c

080139b8 <_ZN8touchgfx6Screen4drawEv>:
 80139b8:	4b09      	ldr	r3, [pc, #36]	; (80139e0 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80139ba:	b507      	push	{r0, r1, r2, lr}
 80139bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80139c0:	2100      	movs	r1, #0
 80139c2:	4b08      	ldr	r3, [pc, #32]	; (80139e4 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 80139c4:	9100      	str	r1, [sp, #0]
 80139c6:	4669      	mov	r1, sp
 80139c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80139cc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80139d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80139d4:	6803      	ldr	r3, [r0, #0]
 80139d6:	689b      	ldr	r3, [r3, #8]
 80139d8:	4798      	blx	r3
 80139da:	b003      	add	sp, #12
 80139dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80139e0:	2400f18c 	.word	0x2400f18c
 80139e4:	2400f18e 	.word	0x2400f18e

080139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80139e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139ec:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80139f0:	b089      	sub	sp, #36	; 0x24
 80139f2:	4680      	mov	r8, r0
 80139f4:	460c      	mov	r4, r1
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	4615      	mov	r5, r2
 80139fa:	dd0e      	ble.n	8013a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80139fc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	dd0a      	ble.n	8013a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013a04:	4628      	mov	r0, r5
 8013a06:	f7ff ff5b 	bl	80138c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	f7fa fd80 	bl	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013a10:	69eb      	ldr	r3, [r5, #28]
 8013a12:	b928      	cbnz	r0, 8013a20 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8013a14:	461d      	mov	r5, r3
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d1f4      	bne.n	8013a04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8013a1a:	b009      	add	sp, #36	; 0x24
 8013a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a20:	ae04      	add	r6, sp, #16
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f000 80b5 	beq.w	8013b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013a28:	682b      	ldr	r3, [r5, #0]
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	a802      	add	r0, sp, #8
 8013a2e:	68db      	ldr	r3, [r3, #12]
 8013a30:	4798      	blx	r3
 8013a32:	4628      	mov	r0, r5
 8013a34:	f7ff ff60 	bl	80138f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013a38:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8013a3c:	4407      	add	r7, r0
 8013a3e:	4628      	mov	r0, r5
 8013a40:	f7ff ff6e 	bl	8013920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013a44:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8013a48:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8013a4c:	b23f      	sxth	r7, r7
 8013a4e:	4418      	add	r0, r3
 8013a50:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013a54:	4621      	mov	r1, r4
 8013a56:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a5a:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013a5e:	4630      	mov	r0, r6
 8013a60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a64:	f8ad 7010 	strh.w	r7, [sp, #16]
 8013a68:	f7f9 fae4 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	f7ff ff27 	bl	80138c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013a72:	ab06      	add	r3, sp, #24
 8013a74:	4602      	mov	r2, r0
 8013a76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013a7a:	e883 0003 	stmia.w	r3, {r0, r1}
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7f9 fad7 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8013a86:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013a8a:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013a8e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8013a92:	4299      	cmp	r1, r3
 8013a94:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8013a98:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8013a9c:	d10b      	bne.n	8013ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013a9e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013aa2:	4552      	cmp	r2, sl
 8013aa4:	d107      	bne.n	8013ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013aa6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013aaa:	455a      	cmp	r2, fp
 8013aac:	d103      	bne.n	8013ab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8013aae:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013ab2:	454a      	cmp	r2, r9
 8013ab4:	d06d      	beq.n	8013b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013ab6:	f1bb 0f00 	cmp.w	fp, #0
 8013aba:	dd65      	ble.n	8013b88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013abc:	f1b9 0f00 	cmp.w	r9, #0
 8013ac0:	dd62      	ble.n	8013b88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8013ac2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8013ac6:	fa1f f08a 	uxth.w	r0, sl
 8013aca:	4552      	cmp	r2, sl
 8013acc:	9000      	str	r0, [sp, #0]
 8013ace:	da12      	bge.n	8013af6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8013ad0:	9301      	str	r3, [sp, #4]
 8013ad2:	9b00      	ldr	r3, [sp, #0]
 8013ad4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013ad8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013adc:	1a9a      	subs	r2, r3, r2
 8013ade:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013ae2:	4631      	mov	r1, r6
 8013ae4:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013ae8:	4640      	mov	r0, r8
 8013aea:	f8ad 2016 	strh.w	r2, [sp, #22]
 8013aee:	69ea      	ldr	r2, [r5, #28]
 8013af0:	f7ff ff7a 	bl	80139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013af4:	9b01      	ldr	r3, [sp, #4]
 8013af6:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013afa:	b29f      	uxth	r7, r3
 8013afc:	429a      	cmp	r2, r3
 8013afe:	da0d      	bge.n	8013b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8013b00:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013b04:	1aba      	subs	r2, r7, r2
 8013b06:	f8ad a012 	strh.w	sl, [sp, #18]
 8013b0a:	4631      	mov	r1, r6
 8013b0c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013b10:	4640      	mov	r0, r8
 8013b12:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013b16:	69ea      	ldr	r2, [r5, #28]
 8013b18:	f7ff ff66 	bl	80139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013b1c:	8822      	ldrh	r2, [r4, #0]
 8013b1e:	445f      	add	r7, fp
 8013b20:	88a3      	ldrh	r3, [r4, #4]
 8013b22:	b2bf      	uxth	r7, r7
 8013b24:	4413      	add	r3, r2
 8013b26:	b23a      	sxth	r2, r7
 8013b28:	b29b      	uxth	r3, r3
 8013b2a:	b219      	sxth	r1, r3
 8013b2c:	4291      	cmp	r1, r2
 8013b2e:	dd0d      	ble.n	8013b4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8013b30:	1bdb      	subs	r3, r3, r7
 8013b32:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013b36:	f8ad a012 	strh.w	sl, [sp, #18]
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b40:	4640      	mov	r0, r8
 8013b42:	f8ad 9016 	strh.w	r9, [sp, #22]
 8013b46:	69ea      	ldr	r2, [r5, #28]
 8013b48:	f7ff ff4e 	bl	80139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013b4c:	88e2      	ldrh	r2, [r4, #6]
 8013b4e:	8863      	ldrh	r3, [r4, #2]
 8013b50:	4413      	add	r3, r2
 8013b52:	9a00      	ldr	r2, [sp, #0]
 8013b54:	444a      	add	r2, r9
 8013b56:	b29b      	uxth	r3, r3
 8013b58:	fa1f f982 	uxth.w	r9, r2
 8013b5c:	b219      	sxth	r1, r3
 8013b5e:	fa0f f289 	sxth.w	r2, r9
 8013b62:	428a      	cmp	r2, r1
 8013b64:	da15      	bge.n	8013b92 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8013b66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013b6a:	eba3 0309 	sub.w	r3, r3, r9
 8013b6e:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013b72:	f8ad 1014 	strh.w	r1, [sp, #20]
 8013b76:	4631      	mov	r1, r6
 8013b78:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013b7c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013b80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b84:	69ea      	ldr	r2, [r5, #28]
 8013b86:	e001      	b.n	8013b8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8013b88:	69ea      	ldr	r2, [r5, #28]
 8013b8a:	4621      	mov	r1, r4
 8013b8c:	4640      	mov	r0, r8
 8013b8e:	f7ff ff2b 	bl	80139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013b92:	4628      	mov	r0, r5
 8013b94:	f7ff fe94 	bl	80138c0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8013b98:	6861      	ldr	r1, [r4, #4]
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	4633      	mov	r3, r6
 8013b9e:	6820      	ldr	r0, [r4, #0]
 8013ba0:	c303      	stmia	r3!, {r0, r1}
 8013ba2:	4611      	mov	r1, r2
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	f7f9 fa45 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8013baa:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f77f af33 	ble.w	8013a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013bb4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f77f af2e 	ble.w	8013a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f7ff fe9a 	bl	80138f8 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013bc4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8013bc8:	1a18      	subs	r0, r3, r0
 8013bca:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013bce:	4628      	mov	r0, r5
 8013bd0:	f7ff fea6 	bl	8013920 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013bd4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8013bd8:	4631      	mov	r1, r6
 8013bda:	1a18      	subs	r0, r3, r0
 8013bdc:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013be0:	4628      	mov	r0, r5
 8013be2:	682b      	ldr	r3, [r5, #0]
 8013be4:	689b      	ldr	r3, [r3, #8]
 8013be6:	4798      	blx	r3
 8013be8:	e717      	b.n	8013a1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08013bea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8013bea:	b570      	push	{r4, r5, r6, lr}
 8013bec:	1d06      	adds	r6, r0, #4
 8013bee:	b086      	sub	sp, #24
 8013bf0:	460c      	mov	r4, r1
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	4631      	mov	r1, r6
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	a802      	add	r0, sp, #8
 8013bfa:	9301      	str	r3, [sp, #4]
 8013bfc:	f7ff fbcc 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c00:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8013c04:	8822      	ldrh	r2, [r4, #0]
 8013c06:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8013c0a:	1ad2      	subs	r2, r2, r3
 8013c0c:	8863      	ldrh	r3, [r4, #2]
 8013c0e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8013c12:	1a5b      	subs	r3, r3, r1
 8013c14:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013c18:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013c1c:	aa01      	add	r2, sp, #4
 8013c1e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8013c22:	4630      	mov	r0, r6
 8013c24:	f8ad 1016 	strh.w	r1, [sp, #22]
 8013c28:	a904      	add	r1, sp, #16
 8013c2a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013c2e:	f7f9 fad9 	bl	800d1e4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8013c32:	9a01      	ldr	r2, [sp, #4]
 8013c34:	b11a      	cbz	r2, 8013c3e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8013c36:	4621      	mov	r1, r4
 8013c38:	4628      	mov	r0, r5
 8013c3a:	f7ff fed5 	bl	80139e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013c3e:	b006      	add	sp, #24
 8013c40:	bd70      	pop	{r4, r5, r6, pc}

08013c42 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8013c42:	4602      	mov	r2, r0
 8013c44:	b530      	push	{r4, r5, lr}
 8013c46:	4604      	mov	r4, r0
 8013c48:	b085      	sub	sp, #20
 8013c4a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8013c4e:	460d      	mov	r5, r1
 8013c50:	466b      	mov	r3, sp
 8013c52:	6851      	ldr	r1, [r2, #4]
 8013c54:	c303      	stmia	r3!, {r0, r1}
 8013c56:	4629      	mov	r1, r5
 8013c58:	4668      	mov	r0, sp
 8013c5a:	f7f9 f9eb 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 8013c5e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013c62:	b12b      	cbz	r3, 8013c70 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8013c64:	4669      	mov	r1, sp
 8013c66:	4620      	mov	r0, r4
 8013c68:	f7ff ffbf 	bl	8013bea <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013c6c:	b005      	add	sp, #20
 8013c6e:	bd30      	pop	{r4, r5, pc}
 8013c70:	3404      	adds	r4, #4
 8013c72:	a802      	add	r0, sp, #8
 8013c74:	4621      	mov	r1, r4
 8013c76:	f7ff fb8f 	bl	8013398 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013c7a:	f8bd 3000 	ldrh.w	r3, [sp]
 8013c7e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013c82:	4669      	mov	r1, sp
 8013c84:	4620      	mov	r0, r4
 8013c86:	1a9b      	subs	r3, r3, r2
 8013c88:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013c8c:	f8ad 3000 	strh.w	r3, [sp]
 8013c90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013c94:	1a9b      	subs	r3, r3, r2
 8013c96:	f8ad 3002 	strh.w	r3, [sp, #2]
 8013c9a:	f7f9 fa6a 	bl	800d172 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8013c9e:	e7e5      	b.n	8013c6c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08013ca0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	680a      	ldr	r2, [r1, #0]
 8013ca4:	1d01      	adds	r1, r0, #4
 8013ca6:	6992      	ldr	r2, [r2, #24]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	4710      	bx	r2

08013cac <_ZN8touchgfx12TextProviderC1Ev>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	2500      	movs	r5, #0
 8013cb0:	2302      	movs	r3, #2
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	220e      	movs	r2, #14
 8013cb6:	7403      	strb	r3, [r0, #16]
 8013cb8:	4629      	mov	r1, r5
 8013cba:	6145      	str	r5, [r0, #20]
 8013cbc:	7605      	strb	r5, [r0, #24]
 8013cbe:	83c5      	strh	r5, [r0, #30]
 8013cc0:	8405      	strh	r5, [r0, #32]
 8013cc2:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013cc4:	8705      	strh	r5, [r0, #56]	; 0x38
 8013cc6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8013cc8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8013ccc:	e9c0 5500 	strd	r5, r5, [r0]
 8013cd0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8013cd4:	304c      	adds	r0, #76	; 0x4c
 8013cd6:	f00c fbdd 	bl	8020494 <memset>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	4620      	mov	r0, r4
 8013cde:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8013ce2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013ce6:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8013cea:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8013cee:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8013cf2:	f7ef f81f 	bl	8002d34 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	bd38      	pop	{r3, r4, r5, pc}
	...

08013cfc <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8013cfc:	b508      	push	{r3, lr}
 8013cfe:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8013d00:	b92b      	cbnz	r3, 8013d0e <_ZN8touchgfx12TextProvider11endOfStringEv+0x12>
 8013d02:	4b07      	ldr	r3, [pc, #28]	; (8013d20 <_ZN8touchgfx12TextProvider11endOfStringEv+0x24>)
 8013d04:	21c0      	movs	r1, #192	; 0xc0
 8013d06:	4a07      	ldr	r2, [pc, #28]	; (8013d24 <_ZN8touchgfx12TextProvider11endOfStringEv+0x28>)
 8013d08:	4807      	ldr	r0, [pc, #28]	; (8013d28 <_ZN8touchgfx12TextProvider11endOfStringEv+0x2c>)
 8013d0a:	f00c fa43 	bl	8020194 <__assert_func>
 8013d0e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013d10:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013d14:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8013d16:	fab0 f080 	clz	r0, r0
 8013d1a:	0940      	lsrs	r0, r0, #5
 8013d1c:	bd08      	pop	{r3, pc}
 8013d1e:	bf00      	nop
 8013d20:	08023128 	.word	0x08023128
 8013d24:	080257f7 	.word	0x080257f7
 8013d28:	08023208 	.word	0x08023208

08013d2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8013d2c:	b530      	push	{r4, r5, lr}
 8013d2e:	2500      	movs	r5, #0
 8013d30:	2401      	movs	r4, #1
 8013d32:	6843      	ldr	r3, [r0, #4]
 8013d34:	b913      	cbnz	r3, 8013d3c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8013d36:	6803      	ldr	r3, [r0, #0]
 8013d38:	b313      	cbz	r3, 8013d80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8013d3a:	6043      	str	r3, [r0, #4]
 8013d3c:	7e03      	ldrb	r3, [r0, #24]
 8013d3e:	b143      	cbz	r3, 8013d52 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8013d40:	6943      	ldr	r3, [r0, #20]
 8013d42:	b12b      	cbz	r3, 8013d50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013d44:	881a      	ldrh	r2, [r3, #0]
 8013d46:	b11a      	cbz	r2, 8013d50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8013d48:	1c9a      	adds	r2, r3, #2
 8013d4a:	6142      	str	r2, [r0, #20]
 8013d4c:	8818      	ldrh	r0, [r3, #0]
 8013d4e:	bd30      	pop	{r4, r5, pc}
 8013d50:	7605      	strb	r5, [r0, #24]
 8013d52:	6843      	ldr	r3, [r0, #4]
 8013d54:	8819      	ldrh	r1, [r3, #0]
 8013d56:	b199      	cbz	r1, 8013d80 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8013d58:	1c9a      	adds	r2, r3, #2
 8013d5a:	2902      	cmp	r1, #2
 8013d5c:	6042      	str	r2, [r0, #4]
 8013d5e:	d1f5      	bne.n	8013d4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8013d60:	7c03      	ldrb	r3, [r0, #16]
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d8e5      	bhi.n	8013d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013d66:	1c5a      	adds	r2, r3, #1
 8013d68:	3302      	adds	r3, #2
 8013d6a:	7402      	strb	r2, [r0, #16]
 8013d6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8013d70:	6143      	str	r3, [r0, #20]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d0dd      	beq.n	8013d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013d76:	881b      	ldrh	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d0da      	beq.n	8013d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013d7c:	7604      	strb	r4, [r0, #24]
 8013d7e:	e7d8      	b.n	8013d32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013d80:	2000      	movs	r0, #0
 8013d82:	e7e4      	b.n	8013d4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8013d84:	6001      	str	r1, [r0, #0]
 8013d86:	2100      	movs	r1, #0
 8013d88:	b430      	push	{r4, r5}
 8013d8a:	6041      	str	r1, [r0, #4]
 8013d8c:	6815      	ldr	r5, [r2, #0]
 8013d8e:	6085      	str	r5, [r0, #8]
 8013d90:	6852      	ldr	r2, [r2, #4]
 8013d92:	6443      	str	r3, [r0, #68]	; 0x44
 8013d94:	9b02      	ldr	r3, [sp, #8]
 8013d96:	60c2      	str	r2, [r0, #12]
 8013d98:	7401      	strb	r1, [r0, #16]
 8013d9a:	6141      	str	r1, [r0, #20]
 8013d9c:	7601      	strb	r1, [r0, #24]
 8013d9e:	8701      	strh	r1, [r0, #56]	; 0x38
 8013da0:	8401      	strh	r1, [r0, #32]
 8013da2:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8013da6:	6483      	str	r3, [r0, #72]	; 0x48
 8013da8:	bc30      	pop	{r4, r5}
 8013daa:	f7ee bfc3 	b.w	8002d34 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08013dae <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8013dae:	b408      	push	{r3}
 8013db0:	b510      	push	{r4, lr}
 8013db2:	b085      	sub	sp, #20
 8013db4:	ac07      	add	r4, sp, #28
 8013db6:	f854 3b04 	ldr.w	r3, [r4], #4
 8013dba:	9300      	str	r3, [sp, #0]
 8013dbc:	4613      	mov	r3, r2
 8013dbe:	4622      	mov	r2, r4
 8013dc0:	9403      	str	r4, [sp, #12]
 8013dc2:	f7ff ffdf 	bl	8013d84 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013dc6:	b005      	add	sp, #20
 8013dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dcc:	b001      	add	sp, #4
 8013dce:	4770      	bx	lr

08013dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8013dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	4608      	mov	r0, r1
 8013dd6:	b1f1      	cbz	r1, 8013e16 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8013dd8:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8013ddc:	460b      	mov	r3, r1
 8013dde:	f101 0708 	add.w	r7, r1, #8
 8013de2:	4622      	mov	r2, r4
 8013de4:	6818      	ldr	r0, [r3, #0]
 8013de6:	3308      	adds	r3, #8
 8013de8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013dec:	4626      	mov	r6, r4
 8013dee:	42bb      	cmp	r3, r7
 8013df0:	c603      	stmia	r6!, {r0, r1}
 8013df2:	4634      	mov	r4, r6
 8013df4:	d1f6      	bne.n	8013de4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8013df6:	6818      	ldr	r0, [r3, #0]
 8013df8:	6030      	str	r0, [r6, #0]
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	889b      	ldrh	r3, [r3, #4]
 8013dfe:	80b3      	strh	r3, [r6, #4]
 8013e00:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8013e04:	015b      	lsls	r3, r3, #5
 8013e06:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013e0a:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8013e0e:	430b      	orrs	r3, r1
 8013e10:	425b      	negs	r3, r3
 8013e12:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8013e18:	b538      	push	{r3, r4, r5, lr}
 8013e1a:	460c      	mov	r4, r1
 8013e1c:	6811      	ldr	r1, [r2, #0]
 8013e1e:	4610      	mov	r0, r2
 8013e20:	68cd      	ldr	r5, [r1, #12]
 8013e22:	4619      	mov	r1, r3
 8013e24:	47a8      	blx	r5
 8013e26:	2800      	cmp	r0, #0
 8013e28:	bf08      	it	eq
 8013e2a:	4620      	moveq	r0, r4
 8013e2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08013e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8013e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e32:	4604      	mov	r4, r0
 8013e34:	4615      	mov	r5, r2
 8013e36:	4608      	mov	r0, r1
 8013e38:	b93a      	cbnz	r2, 8013e4a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8013e3a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8013e3e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8013e42:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8013e46:	4628      	mov	r0, r5
 8013e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e4a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8013e4e:	8893      	ldrh	r3, [r2, #4]
 8013e50:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8013e54:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013e58:	79ee      	ldrb	r6, [r5, #7]
 8013e5a:	4316      	orrs	r6, r2
 8013e5c:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 8013e60:	189a      	adds	r2, r3, r2
 8013e62:	b2b7      	uxth	r7, r6
 8013e64:	b291      	uxth	r1, r2
 8013e66:	291d      	cmp	r1, #29
 8013e68:	f200 8084 	bhi.w	8013f74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	10f6      	asrs	r6, r6, #3
 8013e70:	408a      	lsls	r2, r1
 8013e72:	4978      	ldr	r1, [pc, #480]	; (8014054 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 8013e74:	420a      	tst	r2, r1
 8013e76:	d12e      	bne.n	8013ed6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 8013e78:	f412 7f60 	tst.w	r2, #896	; 0x380
 8013e7c:	d07a      	beq.n	8013f74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 8013e7e:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8013e82:	462b      	mov	r3, r5
 8013e84:	f105 0e08 	add.w	lr, r5, #8
 8013e88:	4615      	mov	r5, r2
 8013e8a:	6818      	ldr	r0, [r3, #0]
 8013e8c:	3308      	adds	r3, #8
 8013e8e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013e92:	4694      	mov	ip, r2
 8013e94:	4573      	cmp	r3, lr
 8013e96:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013e9a:	4662      	mov	r2, ip
 8013e9c:	d1f5      	bne.n	8013e8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 8013e9e:	6818      	ldr	r0, [r3, #0]
 8013ea0:	f8cc 0000 	str.w	r0, [ip]
 8013ea4:	889b      	ldrh	r3, [r3, #4]
 8013ea6:	f8ac 3004 	strh.w	r3, [ip, #4]
 8013eaa:	b2b3      	uxth	r3, r6
 8013eac:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8013eb0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8013eb4:	1aca      	subs	r2, r1, r3
 8013eb6:	1bcf      	subs	r7, r1, r7
 8013eb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8013ebc:	b292      	uxth	r2, r2
 8013ebe:	1afb      	subs	r3, r7, r3
 8013ec0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8013ec4:	10d2      	asrs	r2, r2, #3
 8013ec6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8013eca:	4302      	orrs	r2, r0
 8013ecc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8013ed0:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8013ed4:	e7b7      	b.n	8013e46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013ed6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013ed8:	b92b      	cbnz	r3, 8013ee6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 8013eda:	4b5f      	ldr	r3, [pc, #380]	; (8014058 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 8013edc:	21c0      	movs	r1, #192	; 0xc0
 8013ede:	4a5f      	ldr	r2, [pc, #380]	; (801405c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 8013ee0:	485f      	ldr	r0, [pc, #380]	; (8014060 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 8013ee2:	f00c f957 	bl	8020194 <__assert_func>
 8013ee6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013ee8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013eec:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8013eee:	f640 6333 	movw	r3, #3635	; 0xe33
 8013ef2:	4299      	cmp	r1, r3
 8013ef4:	d110      	bne.n	8013f18 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 8013ef6:	6803      	ldr	r3, [r0, #0]
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	4798      	blx	r3
 8013efc:	7b41      	ldrb	r1, [r0, #13]
 8013efe:	00cb      	lsls	r3, r1, #3
 8013f00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013f04:	7a03      	ldrb	r3, [r0, #8]
 8013f06:	0648      	lsls	r0, r1, #25
 8013f08:	ea43 0302 	orr.w	r3, r3, r2
 8013f0c:	bf44      	itt	mi
 8013f0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013f12:	b21b      	sxthmi	r3, r3
 8013f14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013f18:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8013f1c:	462a      	mov	r2, r5
 8013f1e:	f105 0c08 	add.w	ip, r5, #8
 8013f22:	443b      	add	r3, r7
 8013f24:	4433      	add	r3, r6
 8013f26:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013f2a:	b29b      	uxth	r3, r3
 8013f2c:	4635      	mov	r5, r6
 8013f2e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013f32:	6810      	ldr	r0, [r2, #0]
 8013f34:	3208      	adds	r2, #8
 8013f36:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013f3a:	4637      	mov	r7, r6
 8013f3c:	4562      	cmp	r2, ip
 8013f3e:	c703      	stmia	r7!, {r0, r1}
 8013f40:	463e      	mov	r6, r7
 8013f42:	d1f6      	bne.n	8013f32 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 8013f44:	6810      	ldr	r0, [r2, #0]
 8013f46:	6038      	str	r0, [r7, #0]
 8013f48:	8892      	ldrh	r2, [r2, #4]
 8013f4a:	80ba      	strh	r2, [r7, #4]
 8013f4c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013f50:	10db      	asrs	r3, r3, #3
 8013f52:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013f56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8013f64:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013f68:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8013f6c:	1a9b      	subs	r3, r3, r2
 8013f6e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8013f72:	e768      	b.n	8013e46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013f74:	f023 0204 	bic.w	r2, r3, #4
 8013f78:	f640 611b 	movw	r1, #3611	; 0xe1b
 8013f7c:	428a      	cmp	r2, r1
 8013f7e:	d003      	beq.n	8013f88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 8013f80:	f640 621d 	movw	r2, #3613	; 0xe1d
 8013f84:	4293      	cmp	r3, r2
 8013f86:	d120      	bne.n	8013fca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	4629      	mov	r1, r5
 8013f8e:	4620      	mov	r0, r4
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	f7ff ff41 	bl	8013e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013f96:	7b41      	ldrb	r1, [r0, #13]
 8013f98:	00cb      	lsls	r3, r1, #3
 8013f9a:	0649      	lsls	r1, r1, #25
 8013f9c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013fa0:	7a03      	ldrb	r3, [r0, #8]
 8013fa2:	ea43 0302 	orr.w	r3, r3, r2
 8013fa6:	bf44      	itt	mi
 8013fa8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013fac:	b21b      	sxthmi	r3, r3
 8013fae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013fb2:	7b6b      	ldrb	r3, [r5, #13]
 8013fb4:	7aaa      	ldrb	r2, [r5, #10]
 8013fb6:	005b      	lsls	r3, r3, #1
 8013fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fbc:	4313      	orrs	r3, r2
 8013fbe:	115a      	asrs	r2, r3, #5
 8013fc0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8013fc4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013fc8:	e035      	b.n	8014036 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 8013fca:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8013fce:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8013fd2:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8013fd6:	7a2a      	ldrb	r2, [r5, #8]
 8013fd8:	ea42 0201 	orr.w	r2, r2, r1
 8013fdc:	f640 6109 	movw	r1, #3593	; 0xe09
 8013fe0:	bf1c      	itt	ne
 8013fe2:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8013fe6:	b212      	sxthne	r2, r2
 8013fe8:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8013fec:	f023 0210 	bic.w	r2, r3, #16
 8013ff0:	428a      	cmp	r2, r1
 8013ff2:	d003      	beq.n	8013ffc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 8013ff4:	f640 6213 	movw	r2, #3603	; 0xe13
 8013ff8:	4293      	cmp	r3, r2
 8013ffa:	d129      	bne.n	8014050 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 8013ffc:	7b6e      	ldrb	r6, [r5, #13]
 8013ffe:	4629      	mov	r1, r5
 8014000:	0076      	lsls	r6, r6, #1
 8014002:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014006:	7aae      	ldrb	r6, [r5, #10]
 8014008:	4316      	orrs	r6, r2
 801400a:	f640 6213 	movw	r2, #3603	; 0xe13
 801400e:	4293      	cmp	r3, r2
 8014010:	4602      	mov	r2, r0
 8014012:	4620      	mov	r0, r4
 8014014:	bf16      	itet	ne
 8014016:	f103 33ff 	addne.w	r3, r3, #4294967295
 801401a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801401e:	b29b      	uxthne	r3, r3
 8014020:	f7ff fefa 	bl	8013e18 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014024:	7b43      	ldrb	r3, [r0, #13]
 8014026:	7a82      	ldrb	r2, [r0, #10]
 8014028:	005b      	lsls	r3, r3, #1
 801402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801402e:	4313      	orrs	r3, r2
 8014030:	1af6      	subs	r6, r6, r3
 8014032:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8014036:	7b69      	ldrb	r1, [r5, #13]
 8014038:	00cb      	lsls	r3, r1, #3
 801403a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801403e:	7a2b      	ldrb	r3, [r5, #8]
 8014040:	4313      	orrs	r3, r2
 8014042:	064a      	lsls	r2, r1, #25
 8014044:	bf44      	itt	mi
 8014046:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801404a:	b21b      	sxthmi	r3, r3
 801404c:	1bdb      	subs	r3, r3, r7
 801404e:	e73f      	b.n	8013ed0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 8014050:	2300      	movs	r3, #0
 8014052:	e7b7      	b.n	8013fc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 8014054:	3fc00079 	.word	0x3fc00079
 8014058:	08023128 	.word	0x08023128
 801405c:	080257f7 	.word	0x080257f7
 8014060:	08023208 	.word	0x08023208

08014064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014068:	4604      	mov	r4, r0
 801406a:	b942      	cbnz	r2, 801407e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801406c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014070:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8014074:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014078:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801407c:	e046      	b.n	801410c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801407e:	7b51      	ldrb	r1, [r2, #13]
 8014080:	8893      	ldrh	r3, [r2, #4]
 8014082:	010f      	lsls	r7, r1, #4
 8014084:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8014088:	79d7      	ldrb	r7, [r2, #7]
 801408a:	4307      	orrs	r7, r0
 801408c:	2f04      	cmp	r7, #4
 801408e:	b2bd      	uxth	r5, r7
 8014090:	bfcc      	ite	gt
 8014092:	08bf      	lsrgt	r7, r7, #2
 8014094:	2701      	movle	r7, #1
 8014096:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801409a:	f200 80ab 	bhi.w	80141f4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801409e:	f240 60e7 	movw	r0, #1767	; 0x6e7
 80140a2:	4283      	cmp	r3, r0
 80140a4:	d216      	bcs.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80140a6:	f240 605b 	movw	r0, #1627	; 0x65b
 80140aa:	4283      	cmp	r3, r0
 80140ac:	d859      	bhi.n	8014162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 80140ae:	f240 6057 	movw	r0, #1623	; 0x657
 80140b2:	4283      	cmp	r3, r0
 80140b4:	d20e      	bcs.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80140b6:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80140ba:	d24a      	bcs.n	8014152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 80140bc:	f240 604e 	movw	r0, #1614	; 0x64e
 80140c0:	4283      	cmp	r3, r0
 80140c2:	d207      	bcs.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80140c4:	f240 601a 	movw	r0, #1562	; 0x61a
 80140c8:	4283      	cmp	r3, r0
 80140ca:	d02a      	beq.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80140cc:	d821      	bhi.n	8014112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 80140ce:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80140d2:	d35b      	bcc.n	801418c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80140d4:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80140d8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80140dc:	f040 80d0 	bne.w	8014280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80140e0:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80140e4:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80140e8:	f040 80ca 	bne.w	8014280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 80140ec:	00cb      	lsls	r3, r1, #3
 80140ee:	0649      	lsls	r1, r1, #25
 80140f0:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80140f4:	7a13      	ldrb	r3, [r2, #8]
 80140f6:	ea43 0300 	orr.w	r3, r3, r0
 80140fa:	bf44      	itt	mi
 80140fc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014100:	b21b      	sxthmi	r3, r3
 8014102:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014106:	1b5d      	subs	r5, r3, r5
 8014108:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801410c:	4610      	mov	r0, r2
 801410e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014112:	f240 604b 	movw	r0, #1611	; 0x64b
 8014116:	4283      	cmp	r3, r0
 8014118:	d338      	bcc.n	801418c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801411a:	f240 604c 	movw	r0, #1612	; 0x64c
 801411e:	4283      	cmp	r3, r0
 8014120:	d9d8      	bls.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014122:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8014126:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801412a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801412e:	f040 80f2 	bne.w	8014316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 8014132:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014136:	f040 80ee 	bne.w	8014316 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801413a:	00cb      	lsls	r3, r1, #3
 801413c:	064e      	lsls	r6, r1, #25
 801413e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014142:	7a13      	ldrb	r3, [r2, #8]
 8014144:	ea43 0300 	orr.w	r3, r3, r0
 8014148:	bf44      	itt	mi
 801414a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801414e:	b21b      	sxthmi	r3, r3
 8014150:	e7d9      	b.n	8014106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 8014152:	f240 6054 	movw	r0, #1620	; 0x654
 8014156:	4283      	cmp	r3, r0
 8014158:	d8e3      	bhi.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801415a:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801415e:	d9e0      	bls.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014160:	e7b8      	b.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014162:	f240 6074 	movw	r0, #1652	; 0x674
 8014166:	4283      	cmp	r3, r0
 8014168:	d0b4      	beq.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801416a:	d82d      	bhi.n	80141c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801416c:	f240 605e 	movw	r0, #1630	; 0x65e
 8014170:	4283      	cmp	r3, r0
 8014172:	d804      	bhi.n	801417e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 8014174:	f240 605d 	movw	r0, #1629	; 0x65d
 8014178:	4283      	cmp	r3, r0
 801417a:	d3d2      	bcc.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801417c:	e7aa      	b.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801417e:	f240 605f 	movw	r0, #1631	; 0x65f
 8014182:	4283      	cmp	r3, r0
 8014184:	d0cd      	beq.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014186:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801418a:	d0a3      	beq.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801418c:	00cb      	lsls	r3, r1, #3
 801418e:	0649      	lsls	r1, r1, #25
 8014190:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014194:	7a13      	ldrb	r3, [r2, #8]
 8014196:	ea43 0300 	orr.w	r3, r3, r0
 801419a:	bf44      	itt	mi
 801419c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80141a0:	b21b      	sxthmi	r3, r3
 80141a2:	1b5d      	subs	r5, r3, r5
 80141a4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80141a8:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80141ac:	7b53      	ldrb	r3, [r2, #13]
 80141ae:	015b      	lsls	r3, r3, #5
 80141b0:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80141b4:	7993      	ldrb	r3, [r2, #6]
 80141b6:	430b      	orrs	r3, r1
 80141b8:	2105      	movs	r1, #5
 80141ba:	005b      	lsls	r3, r3, #1
 80141bc:	fb93 f3f1 	sdiv	r3, r3, r1
 80141c0:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80141c4:	440b      	add	r3, r1
 80141c6:	e757      	b.n	8014078 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80141c8:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80141cc:	4283      	cmp	r3, r0
 80141ce:	d809      	bhi.n	80141e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 80141d0:	f240 60df 	movw	r0, #1759	; 0x6df
 80141d4:	4283      	cmp	r3, r0
 80141d6:	f4bf af7d 	bcs.w	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80141da:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80141de:	2b05      	cmp	r3, #5
 80141e0:	d8d4      	bhi.n	801418c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80141e2:	e777      	b.n	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 80141e4:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80141e8:	4283      	cmp	r3, r0
 80141ea:	d09a      	beq.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 80141ec:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80141f0:	4283      	cmp	r3, r0
 80141f2:	e7ca      	b.n	801418a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 80141f4:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80141f8:	d22b      	bcs.n	8014252 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 80141fa:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80141fe:	4283      	cmp	r3, r0
 8014200:	d28f      	bcs.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014202:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014206:	4283      	cmp	r3, r0
 8014208:	d816      	bhi.n	8014238 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801420a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801420e:	4283      	cmp	r3, r0
 8014210:	f4bf af60 	bcs.w	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014214:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014218:	4283      	cmp	r3, r0
 801421a:	d80a      	bhi.n	8014232 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801421c:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8014220:	4283      	cmp	r3, r0
 8014222:	f4bf af57 	bcs.w	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014226:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801422a:	4283      	cmp	r3, r0
 801422c:	f43f af79 	beq.w	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014230:	e7ac      	b.n	801418c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014232:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014236:	e7f8      	b.n	801422a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 8014238:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801423c:	4283      	cmp	r3, r0
 801423e:	d802      	bhi.n	8014246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 8014240:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014244:	e798      	b.n	8014178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 8014246:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801424a:	4283      	cmp	r3, r0
 801424c:	f47f af42 	bne.w	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014250:	e767      	b.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014252:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014256:	4283      	cmp	r3, r0
 8014258:	f43f af63 	beq.w	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801425c:	d802      	bhi.n	8014264 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801425e:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014262:	e7f2      	b.n	801424a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 8014264:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014268:	4283      	cmp	r3, r0
 801426a:	d805      	bhi.n	8014278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801426c:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014270:	4283      	cmp	r3, r0
 8014272:	f4ff af2f 	bcc.w	80140d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 8014276:	e754      	b.n	8014122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 8014278:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801427c:	4283      	cmp	r3, r0
 801427e:	e7af      	b.n	80141e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 8014280:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014284:	4617      	mov	r7, r2
 8014286:	f102 0808 	add.w	r8, r2, #8
 801428a:	4666      	mov	r6, ip
 801428c:	6838      	ldr	r0, [r7, #0]
 801428e:	3708      	adds	r7, #8
 8014290:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014294:	46e6      	mov	lr, ip
 8014296:	4547      	cmp	r7, r8
 8014298:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801429c:	46f4      	mov	ip, lr
 801429e:	d1f5      	bne.n	801428c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 80142a0:	6838      	ldr	r0, [r7, #0]
 80142a2:	f8ce 0000 	str.w	r0, [lr]
 80142a6:	88b9      	ldrh	r1, [r7, #4]
 80142a8:	f8ae 1004 	strh.w	r1, [lr, #4]
 80142ac:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80142b0:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80142b4:	d009      	beq.n	80142ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80142b6:	7b51      	ldrb	r1, [r2, #13]
 80142b8:	7992      	ldrb	r2, [r2, #6]
 80142ba:	0149      	lsls	r1, r1, #5
 80142bc:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80142c0:	4311      	orrs	r1, r2
 80142c2:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80142c6:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80142ca:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80142ce:	d00d      	beq.n	80142ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 80142d0:	442b      	add	r3, r5
 80142d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80142dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80142e0:	10db      	asrs	r3, r3, #3
 80142e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80142e6:	4313      	orrs	r3, r2
 80142e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80142ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80142f0:	00cb      	lsls	r3, r1, #3
 80142f2:	064f      	lsls	r7, r1, #25
 80142f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80142f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80142fc:	ea43 0302 	orr.w	r3, r3, r2
 8014300:	bf44      	itt	mi
 8014302:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014306:	b21b      	sxthmi	r3, r3
 8014308:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801430c:	1b5d      	subs	r5, r3, r5
 801430e:	4632      	mov	r2, r6
 8014310:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014314:	e6fa      	b.n	801410c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 8014316:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801431a:	4694      	mov	ip, r2
 801431c:	f102 0908 	add.w	r9, r2, #8
 8014320:	4676      	mov	r6, lr
 8014322:	f8dc 0000 	ldr.w	r0, [ip]
 8014326:	f10c 0c08 	add.w	ip, ip, #8
 801432a:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801432e:	46f0      	mov	r8, lr
 8014330:	45cc      	cmp	ip, r9
 8014332:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014336:	46c6      	mov	lr, r8
 8014338:	d1f3      	bne.n	8014322 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801433a:	f8dc 0000 	ldr.w	r0, [ip]
 801433e:	f8c8 0000 	str.w	r0, [r8]
 8014342:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8014346:	f8a8 1004 	strh.w	r1, [r8, #4]
 801434a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801434e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014352:	d009      	beq.n	8014368 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 8014354:	7b51      	ldrb	r1, [r2, #13]
 8014356:	7992      	ldrb	r2, [r2, #6]
 8014358:	0149      	lsls	r1, r1, #5
 801435a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801435e:	4311      	orrs	r1, r2
 8014360:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014364:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014368:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801436c:	d00d      	beq.n	801438a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801436e:	1bdb      	subs	r3, r3, r7
 8014370:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014374:	b29b      	uxth	r3, r3
 8014376:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801437a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801437e:	10db      	asrs	r3, r3, #3
 8014380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014384:	4313      	orrs	r3, r2
 8014386:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801438a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801438e:	00cb      	lsls	r3, r1, #3
 8014390:	0648      	lsls	r0, r1, #25
 8014392:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014396:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801439a:	ea43 0302 	orr.w	r3, r3, r2
 801439e:	bf44      	itt	mi
 80143a0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80143a4:	b21b      	sxthmi	r3, r3
 80143a6:	e7b1      	b.n	801430c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

080143a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80143a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ac:	461e      	mov	r6, r3
 80143ae:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 80143b0:	4604      	mov	r4, r0
 80143b2:	4617      	mov	r7, r2
 80143b4:	b92b      	cbnz	r3, 80143c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 80143b6:	4b25      	ldr	r3, [pc, #148]	; (801444c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 80143b8:	21c0      	movs	r1, #192	; 0xc0
 80143ba:	4a25      	ldr	r2, [pc, #148]	; (8014450 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 80143bc:	4825      	ldr	r0, [pc, #148]	; (8014454 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 80143be:	f00b fee9 	bl	8020194 <__assert_func>
 80143c2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80143c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80143c8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80143cc:	f7ee fc70 	bl	8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80143d0:	4605      	mov	r5, r0
 80143d2:	b918      	cbnz	r0, 80143dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 80143d4:	6030      	str	r0, [r6, #0]
 80143d6:	4628      	mov	r0, r5
 80143d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	4601      	mov	r1, r0
 80143e0:	4638      	mov	r0, r7
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	4798      	blx	r3
 80143e6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80143ea:	4602      	mov	r2, r0
 80143ec:	6030      	str	r0, [r6, #0]
 80143ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80143f2:	d213      	bcs.n	801441c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 80143f4:	4643      	mov	r3, r8
 80143f6:	4639      	mov	r1, r7
 80143f8:	4620      	mov	r0, r4
 80143fa:	f7ff fe33 	bl	8014064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80143fe:	6030      	str	r0, [r6, #0]
 8014400:	6833      	ldr	r3, [r6, #0]
 8014402:	b143      	cbz	r3, 8014416 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 8014404:	7b5a      	ldrb	r2, [r3, #13]
 8014406:	7a9b      	ldrb	r3, [r3, #10]
 8014408:	0052      	lsls	r2, r2, #1
 801440a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801440e:	4313      	orrs	r3, r2
 8014410:	bf0c      	ite	eq
 8014412:	2301      	moveq	r3, #1
 8014414:	2300      	movne	r3, #0
 8014416:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801441a:	e7dc      	b.n	80143d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801441c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014420:	b29b      	uxth	r3, r3
 8014422:	2b7f      	cmp	r3, #127	; 0x7f
 8014424:	d804      	bhi.n	8014430 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 8014426:	4639      	mov	r1, r7
 8014428:	4620      	mov	r0, r4
 801442a:	f7ff fd01 	bl	8013e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801442e:	e7e6      	b.n	80143fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 8014430:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014434:	2b00      	cmp	r3, #0
 8014436:	d0e3      	beq.n	8014400 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8014438:	f640 1302 	movw	r3, #2306	; 0x902
 801443c:	429d      	cmp	r5, r3
 801443e:	d1df      	bne.n	8014400 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 8014440:	4601      	mov	r1, r0
 8014442:	4620      	mov	r0, r4
 8014444:	f7ff fcc4 	bl	8013dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014448:	e7d9      	b.n	80143fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801444a:	bf00      	nop
 801444c:	08023128 	.word	0x08023128
 8014450:	080257f7 	.word	0x080257f7
 8014454:	08023208 	.word	0x08023208

08014458 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801445c:	461e      	mov	r6, r3
 801445e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8014460:	4604      	mov	r4, r0
 8014462:	4617      	mov	r7, r2
 8014464:	b92b      	cbnz	r3, 8014472 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 8014466:	4b26      	ldr	r3, [pc, #152]	; (8014500 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 8014468:	21c0      	movs	r1, #192	; 0xc0
 801446a:	4a26      	ldr	r2, [pc, #152]	; (8014504 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801446c:	4826      	ldr	r0, [pc, #152]	; (8014508 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801446e:	f00b fe91 	bl	8020194 <__assert_func>
 8014472:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014474:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014478:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801447c:	f7ee fc18 	bl	8002cb0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014480:	4605      	mov	r5, r0
 8014482:	b918      	cbnz	r0, 801448c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 8014484:	6030      	str	r0, [r6, #0]
 8014486:	4628      	mov	r0, r5
 8014488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	4601      	mov	r1, r0
 8014490:	4638      	mov	r0, r7
 8014492:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014496:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801449a:	47c8      	blx	r9
 801449c:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80144a0:	4602      	mov	r2, r0
 80144a2:	6030      	str	r0, [r6, #0]
 80144a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80144a8:	d213      	bcs.n	80144d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 80144aa:	4643      	mov	r3, r8
 80144ac:	4639      	mov	r1, r7
 80144ae:	4620      	mov	r0, r4
 80144b0:	f7ff fdd8 	bl	8014064 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80144b4:	6030      	str	r0, [r6, #0]
 80144b6:	6833      	ldr	r3, [r6, #0]
 80144b8:	b143      	cbz	r3, 80144cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 80144ba:	7b5a      	ldrb	r2, [r3, #13]
 80144bc:	7a9b      	ldrb	r3, [r3, #10]
 80144be:	0052      	lsls	r2, r2, #1
 80144c0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80144c4:	4313      	orrs	r3, r2
 80144c6:	bf0c      	ite	eq
 80144c8:	2301      	moveq	r3, #1
 80144ca:	2300      	movne	r3, #0
 80144cc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80144d0:	e7d9      	b.n	8014486 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 80144d2:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	2b7f      	cmp	r3, #127	; 0x7f
 80144da:	d804      	bhi.n	80144e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 80144dc:	4639      	mov	r1, r7
 80144de:	4620      	mov	r0, r4
 80144e0:	f7ff fca6 	bl	8013e30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80144e4:	e7e6      	b.n	80144b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 80144e6:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0e3      	beq.n	80144b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80144ee:	f640 1302 	movw	r3, #2306	; 0x902
 80144f2:	429d      	cmp	r5, r3
 80144f4:	d1df      	bne.n	80144b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 80144f6:	4601      	mov	r1, r0
 80144f8:	4620      	mov	r0, r4
 80144fa:	f7ff fc69 	bl	8013dd0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80144fe:	e7d9      	b.n	80144b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 8014500:	08023128 	.word	0x08023128
 8014504:	080257f7 	.word	0x080257f7
 8014508:	08023208 	.word	0x08023208

0801450c <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801450c:	b510      	push	{r4, lr}
 801450e:	4604      	mov	r4, r0
 8014510:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8014514:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014516:	b9d9      	cbnz	r1, 8014550 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 8014518:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801451a:	2b0a      	cmp	r3, #10
 801451c:	d037      	beq.n	801458e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801451e:	4620      	mov	r0, r4
 8014520:	f7ff fc04 	bl	8013d2c <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014524:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014526:	2b09      	cmp	r3, #9
 8014528:	d906      	bls.n	8014538 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801452a:	4b19      	ldr	r3, [pc, #100]	; (8014590 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801452c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8014530:	4a18      	ldr	r2, [pc, #96]	; (8014594 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 8014532:	4819      	ldr	r0, [pc, #100]	; (8014598 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 8014534:	f00b fe2e 	bl	8020194 <__assert_func>
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	8722      	strh	r2, [r4, #56]	; 0x38
 801453c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801453e:	4413      	add	r3, r2
 8014540:	b29b      	uxth	r3, r3
 8014542:	2b09      	cmp	r3, #9
 8014544:	bf88      	it	hi
 8014546:	3b0a      	subhi	r3, #10
 8014548:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801454c:	8458      	strh	r0, [r3, #34]	; 0x22
 801454e:	e7e3      	b.n	8014518 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 8014550:	2b0a      	cmp	r3, #10
 8014552:	d01c      	beq.n	801458e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 8014554:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8014556:	3901      	subs	r1, #1
 8014558:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801455c:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801455e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8014562:	1c51      	adds	r1, r2, #1
 8014564:	b289      	uxth	r1, r1
 8014566:	2901      	cmp	r1, #1
 8014568:	bf8a      	itet	hi
 801456a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801456e:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8014570:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8014572:	2b09      	cmp	r3, #9
 8014574:	d8d9      	bhi.n	801452a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 8014576:	1c5a      	adds	r2, r3, #1
 8014578:	8722      	strh	r2, [r4, #56]	; 0x38
 801457a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801457c:	4413      	add	r3, r2
 801457e:	b29b      	uxth	r3, r3
 8014580:	2b09      	cmp	r3, #9
 8014582:	bf88      	it	hi
 8014584:	3b0a      	subhi	r3, #10
 8014586:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801458a:	8458      	strh	r0, [r3, #34]	; 0x22
 801458c:	e7c0      	b.n	8014510 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801458e:	bd10      	pop	{r4, pc}
 8014590:	080255c8 	.word	0x080255c8
 8014594:	0802594d 	.word	0x0802594d
 8014598:	08023208 	.word	0x08023208

0801459c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801459c:	b538      	push	{r3, r4, r5, lr}
 801459e:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80145a0:	4604      	mov	r4, r0
 80145a2:	b92a      	cbnz	r2, 80145b0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 80145a4:	4b13      	ldr	r3, [pc, #76]	; (80145f4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 80145a6:	21d5      	movs	r1, #213	; 0xd5
 80145a8:	4a13      	ldr	r2, [pc, #76]	; (80145f8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 80145aa:	4814      	ldr	r0, [pc, #80]	; (80145fc <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 80145ac:	f00b fdf2 	bl	8020194 <__assert_func>
 80145b0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80145b2:	3a01      	subs	r2, #1
 80145b4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 80145b8:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 80145ba:	8702      	strh	r2, [r0, #56]	; 0x38
 80145bc:	1c5a      	adds	r2, r3, #1
 80145be:	b292      	uxth	r2, r2
 80145c0:	2a09      	cmp	r2, #9
 80145c2:	bf8a      	itet	hi
 80145c4:	3b09      	subhi	r3, #9
 80145c6:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80145c8:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80145ca:	f7ff ff9f 	bl	801450c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80145ce:	8c23      	ldrh	r3, [r4, #32]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	bf9c      	itt	ls
 80145d4:	3301      	addls	r3, #1
 80145d6:	8423      	strhls	r3, [r4, #32]
 80145d8:	8be3      	ldrh	r3, [r4, #30]
 80145da:	b90b      	cbnz	r3, 80145e0 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 80145dc:	2302      	movs	r3, #2
 80145de:	83e3      	strh	r3, [r4, #30]
 80145e0:	8be3      	ldrh	r3, [r4, #30]
 80145e2:	4628      	mov	r0, r5
 80145e4:	3b01      	subs	r3, #1
 80145e6:	b29b      	uxth	r3, r3
 80145e8:	83e3      	strh	r3, [r4, #30]
 80145ea:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80145ee:	8365      	strh	r5, [r4, #26]
 80145f0:	bd38      	pop	{r3, r4, r5, pc}
 80145f2:	bf00      	nop
 80145f4:	08023128 	.word	0x08023128
 80145f8:	080258a2 	.word	0x080258a2
 80145fc:	08023208 	.word	0x08023208

08014600 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014600:	428a      	cmp	r2, r1
 8014602:	b538      	push	{r3, r4, r5, lr}
 8014604:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8014606:	d90c      	bls.n	8014622 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 8014608:	b92c      	cbnz	r4, 8014616 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801460a:	4b1c      	ldr	r3, [pc, #112]	; (801467c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801460c:	21e1      	movs	r1, #225	; 0xe1
 801460e:	4a1c      	ldr	r2, [pc, #112]	; (8014680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 8014610:	481c      	ldr	r0, [pc, #112]	; (8014684 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 8014612:	f00b fdbf 	bl	8020194 <__assert_func>
 8014616:	3c01      	subs	r4, #1
 8014618:	4b1b      	ldr	r3, [pc, #108]	; (8014688 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801461a:	4a1c      	ldr	r2, [pc, #112]	; (801468c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801461c:	21c5      	movs	r1, #197	; 0xc5
 801461e:	8704      	strh	r4, [r0, #56]	; 0x38
 8014620:	e7f6      	b.n	8014610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 8014622:	428c      	cmp	r4, r1
 8014624:	d203      	bcs.n	801462e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 8014626:	4b1a      	ldr	r3, [pc, #104]	; (8014690 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 8014628:	21cb      	movs	r1, #203	; 0xcb
 801462a:	4a1a      	ldr	r2, [pc, #104]	; (8014694 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801462c:	e7f0      	b.n	8014610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801462e:	1a64      	subs	r4, r4, r1
 8014630:	250a      	movs	r5, #10
 8014632:	8704      	strh	r4, [r0, #56]	; 0x38
 8014634:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8014636:	4421      	add	r1, r4
 8014638:	b289      	uxth	r1, r1
 801463a:	2909      	cmp	r1, #9
 801463c:	bf88      	it	hi
 801463e:	390a      	subhi	r1, #10
 8014640:	86c1      	strh	r1, [r0, #54]	; 0x36
 8014642:	b1ba      	cbz	r2, 8014674 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 8014644:	3a01      	subs	r2, #1
 8014646:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8014648:	b292      	uxth	r2, r2
 801464a:	2909      	cmp	r1, #9
 801464c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014650:	d903      	bls.n	801465a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 8014652:	4b11      	ldr	r3, [pc, #68]	; (8014698 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 8014654:	21e6      	movs	r1, #230	; 0xe6
 8014656:	4a11      	ldr	r2, [pc, #68]	; (801469c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 8014658:	e7da      	b.n	8014610 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801465a:	3101      	adds	r1, #1
 801465c:	8701      	strh	r1, [r0, #56]	; 0x38
 801465e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014660:	b901      	cbnz	r1, 8014664 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 8014662:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014664:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8014666:	3901      	subs	r1, #1
 8014668:	b289      	uxth	r1, r1
 801466a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801466c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014670:	844c      	strh	r4, [r1, #34]	; 0x22
 8014672:	e7e6      	b.n	8014642 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 8014674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014678:	f7ff bf48 	b.w	801450c <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801467c:	08023128 	.word	0x08023128
 8014680:	0802567b 	.word	0x0802567b
 8014684:	08023208 	.word	0x08023208
 8014688:	08023234 	.word	0x08023234
 801468c:	08025725 	.word	0x08025725
 8014690:	080255d4 	.word	0x080255d4
 8014694:	080259fc 	.word	0x080259fc
 8014698:	080255e0 	.word	0x080255e0
 801469c:	080255f3 	.word	0x080255f3

080146a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80146a0:	3a01      	subs	r2, #1
 80146a2:	b570      	push	{r4, r5, r6, lr}
 80146a4:	b292      	uxth	r2, r2
 80146a6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80146aa:	42b2      	cmp	r2, r6
 80146ac:	d019      	beq.n	80146e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 80146ae:	8c04      	ldrh	r4, [r0, #32]
 80146b0:	f831 5b02 	ldrh.w	r5, [r1], #2
 80146b4:	4294      	cmp	r4, r2
 80146b6:	d805      	bhi.n	80146c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 80146b8:	4b19      	ldr	r3, [pc, #100]	; (8014720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80146ba:	4a1a      	ldr	r2, [pc, #104]	; (8014724 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 80146bc:	21c5      	movs	r1, #197	; 0xc5
 80146be:	481a      	ldr	r0, [pc, #104]	; (8014728 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 80146c0:	f00b fd68 	bl	8020194 <__assert_func>
 80146c4:	8bc4      	ldrh	r4, [r0, #30]
 80146c6:	4414      	add	r4, r2
 80146c8:	3a01      	subs	r2, #1
 80146ca:	b2a4      	uxth	r4, r4
 80146cc:	b292      	uxth	r2, r2
 80146ce:	2c01      	cmp	r4, #1
 80146d0:	bf88      	it	hi
 80146d2:	3c02      	subhi	r4, #2
 80146d4:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80146d8:	8b64      	ldrh	r4, [r4, #26]
 80146da:	42ac      	cmp	r4, r5
 80146dc:	d0e5      	beq.n	80146aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 80146de:	2000      	movs	r0, #0
 80146e0:	bd70      	pop	{r4, r5, r6, pc}
 80146e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80146e6:	2400      	movs	r4, #0
 80146e8:	4413      	add	r3, r2
 80146ea:	b2a2      	uxth	r2, r4
 80146ec:	429a      	cmp	r2, r3
 80146ee:	da14      	bge.n	801471a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 80146f0:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 80146f2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80146f6:	4296      	cmp	r6, r2
 80146f8:	d802      	bhi.n	8014700 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 80146fa:	4b09      	ldr	r3, [pc, #36]	; (8014720 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 80146fc:	4a0b      	ldr	r2, [pc, #44]	; (801472c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 80146fe:	e7dd      	b.n	80146bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 8014700:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8014702:	3401      	adds	r4, #1
 8014704:	4432      	add	r2, r6
 8014706:	b292      	uxth	r2, r2
 8014708:	2a09      	cmp	r2, #9
 801470a:	bf88      	it	hi
 801470c:	3a0a      	subhi	r2, #10
 801470e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014712:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8014714:	42aa      	cmp	r2, r5
 8014716:	d0e8      	beq.n	80146ea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 8014718:	e7e1      	b.n	80146de <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801471a:	2001      	movs	r0, #1
 801471c:	e7e0      	b.n	80146e0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801471e:	bf00      	nop
 8014720:	08023234 	.word	0x08023234
 8014724:	08025a80 	.word	0x08025a80
 8014728:	08023208 	.word	0x08023208
 801472c:	08025725 	.word	0x08025725

08014730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014734:	4605      	mov	r5, r0
 8014736:	4616      	mov	r6, r2
 8014738:	1c8c      	adds	r4, r1, #2
 801473a:	8809      	ldrh	r1, [r1, #0]
 801473c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014740:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014744:	42b3      	cmp	r3, r6
 8014746:	d124      	bne.n	8014792 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014748:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801474c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014750:	f001 070f 	and.w	r7, r1, #15
 8014754:	4652      	mov	r2, sl
 8014756:	f8cd 8000 	str.w	r8, [sp]
 801475a:	464b      	mov	r3, r9
 801475c:	4621      	mov	r1, r4
 801475e:	4628      	mov	r0, r5
 8014760:	f7ff ff9e 	bl	80146a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014764:	4683      	mov	fp, r0
 8014766:	b168      	cbz	r0, 8014784 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014768:	eb0a 0109 	add.w	r1, sl, r9
 801476c:	463a      	mov	r2, r7
 801476e:	4628      	mov	r0, r5
 8014770:	4441      	add	r1, r8
 8014772:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014776:	4649      	mov	r1, r9
 8014778:	f7ff ff42 	bl	8014600 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801477c:	4658      	mov	r0, fp
 801477e:	b003      	add	sp, #12
 8014780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014784:	eb07 010a 	add.w	r1, r7, sl
 8014788:	4449      	add	r1, r9
 801478a:	4441      	add	r1, r8
 801478c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014790:	e7d2      	b.n	8014738 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014792:	f04f 0b00 	mov.w	fp, #0
 8014796:	e7f1      	b.n	801477c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014798:	b570      	push	{r4, r5, r6, lr}
 801479a:	8810      	ldrh	r0, [r2, #0]
 801479c:	4298      	cmp	r0, r3
 801479e:	d817      	bhi.n	80147d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80147a0:	1e48      	subs	r0, r1, #1
 80147a2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80147a6:	4298      	cmp	r0, r3
 80147a8:	d312      	bcc.n	80147d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80147aa:	2400      	movs	r4, #0
 80147ac:	428c      	cmp	r4, r1
 80147ae:	d20f      	bcs.n	80147d0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80147b0:	1860      	adds	r0, r4, r1
 80147b2:	1040      	asrs	r0, r0, #1
 80147b4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80147b8:	0085      	lsls	r5, r0, #2
 80147ba:	42b3      	cmp	r3, r6
 80147bc:	d902      	bls.n	80147c4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80147be:	3001      	adds	r0, #1
 80147c0:	b284      	uxth	r4, r0
 80147c2:	e7f3      	b.n	80147ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80147c4:	d201      	bcs.n	80147ca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80147c6:	b281      	uxth	r1, r0
 80147c8:	e7f0      	b.n	80147ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80147ca:	442a      	add	r2, r5
 80147cc:	8850      	ldrh	r0, [r2, #2]
 80147ce:	bd70      	pop	{r4, r5, r6, pc}
 80147d0:	2000      	movs	r0, #0
 80147d2:	e7fc      	b.n	80147ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080147d4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80147d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147d8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80147da:	4604      	mov	r4, r0
 80147dc:	260b      	movs	r6, #11
 80147de:	886f      	ldrh	r7, [r5, #2]
 80147e0:	087f      	lsrs	r7, r7, #1
 80147e2:	3e01      	subs	r6, #1
 80147e4:	d01b      	beq.n	801481e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 80147e6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80147e8:	b92b      	cbnz	r3, 80147f6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 80147ea:	4b0e      	ldr	r3, [pc, #56]	; (8014824 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 80147ec:	21c0      	movs	r1, #192	; 0xc0
 80147ee:	4a0e      	ldr	r2, [pc, #56]	; (8014828 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 80147f0:	480e      	ldr	r0, [pc, #56]	; (801482c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 80147f2:	f00b fccf 	bl	8020194 <__assert_func>
 80147f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80147f8:	462a      	mov	r2, r5
 80147fa:	4639      	mov	r1, r7
 80147fc:	4620      	mov	r0, r4
 80147fe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014802:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014806:	4643      	mov	r3, r8
 8014808:	f7ff ffc6 	bl	8014798 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801480c:	b138      	cbz	r0, 801481e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801480e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014812:	4642      	mov	r2, r8
 8014814:	4620      	mov	r0, r4
 8014816:	f7ff ff8b 	bl	8014730 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801481a:	2800      	cmp	r0, #0
 801481c:	d1e1      	bne.n	80147e2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801481e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014822:	bf00      	nop
 8014824:	08023128 	.word	0x08023128
 8014828:	080257f7 	.word	0x080257f7
 801482c:	08023208 	.word	0x08023208

08014830 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014830:	b570      	push	{r4, r5, r6, lr}
 8014832:	694a      	ldr	r2, [r1, #20]
 8014834:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8014836:	684b      	ldr	r3, [r1, #4]
 8014838:	1b54      	subs	r4, r2, r5
 801483a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801483c:	f000 8106 	beq.w	8014a4c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014840:	1b9b      	subs	r3, r3, r6
 8014842:	d003      	beq.n	801484c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014844:	4363      	muls	r3, r4
 8014846:	2210      	movs	r2, #16
 8014848:	fb93 f3f2 	sdiv	r3, r3, r2
 801484c:	680c      	ldr	r4, [r1, #0]
 801484e:	698a      	ldr	r2, [r1, #24]
 8014850:	1b65      	subs	r5, r4, r5
 8014852:	f000 80fd 	beq.w	8014a50 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014856:	1b92      	subs	r2, r2, r6
 8014858:	d003      	beq.n	8014862 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801485a:	436a      	muls	r2, r5
 801485c:	2410      	movs	r4, #16
 801485e:	fb92 f2f4 	sdiv	r2, r2, r4
 8014862:	1a9b      	subs	r3, r3, r2
 8014864:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8014a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801486c:	460a      	mov	r2, r1
 801486e:	ee07 3a90 	vmov	s15, r3
 8014872:	f100 040c 	add.w	r4, r0, #12
 8014876:	4603      	mov	r3, r0
 8014878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801487c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014880:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014884:	eeb1 6a43 	vneg.f32	s12, s6
 8014888:	edd2 7a02 	vldr	s15, [r2, #8]
 801488c:	3214      	adds	r2, #20
 801488e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014892:	ece3 6a01 	vstmia	r3!, {s13}
 8014896:	429c      	cmp	r4, r3
 8014898:	ed52 7a02 	vldr	s15, [r2, #-8]
 801489c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80148a0:	edc3 7a02 	vstr	s15, [r3, #8]
 80148a4:	ed52 7a01 	vldr	s15, [r2, #-4]
 80148a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80148ac:	edc3 7a05 	vstr	s15, [r3, #20]
 80148b0:	d1ea      	bne.n	8014888 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80148b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80148b4:	698b      	ldr	r3, [r1, #24]
 80148b6:	edd0 4a02 	vldr	s9, [r0, #8]
 80148ba:	1a9b      	subs	r3, r3, r2
 80148bc:	edd0 3a00 	vldr	s7, [r0]
 80148c0:	edd0 6a01 	vldr	s13, [r0, #4]
 80148c4:	ee07 3a90 	vmov	s15, r3
 80148c8:	684b      	ldr	r3, [r1, #4]
 80148ca:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80148ce:	ed90 5a05 	vldr	s10, [r0, #20]
 80148d2:	1a9b      	subs	r3, r3, r2
 80148d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148d8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80148dc:	ed90 2a03 	vldr	s4, [r0, #12]
 80148e0:	ee07 3a10 	vmov	s14, r3
 80148e4:	edd0 5a04 	vldr	s11, [r0, #16]
 80148e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80148ec:	ed90 1a07 	vldr	s2, [r0, #28]
 80148f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80148f4:	edd0 2a06 	vldr	s5, [r0, #24]
 80148f8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80148fc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014900:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014904:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014908:	eee6 7a87 	vfma.f32	s15, s13, s14
 801490c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014910:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8014914:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014916:	694a      	ldr	r2, [r1, #20]
 8014918:	1b13      	subs	r3, r2, r4
 801491a:	ee07 3a10 	vmov	s14, r3
 801491e:	680b      	ldr	r3, [r1, #0]
 8014920:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014924:	1b1b      	subs	r3, r3, r4
 8014926:	ee27 7a04 	vmul.f32	s14, s14, s8
 801492a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801492e:	ee07 3a10 	vmov	s14, r3
 8014932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014936:	ee27 7a04 	vmul.f32	s14, s14, s8
 801493a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801493e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8014942:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8014946:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014948:	698b      	ldr	r3, [r1, #24]
 801494a:	1a9b      	subs	r3, r3, r2
 801494c:	ee06 3a90 	vmov	s13, r3
 8014950:	684b      	ldr	r3, [r1, #4]
 8014952:	1a9b      	subs	r3, r3, r2
 8014954:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014958:	ee07 3a10 	vmov	s14, r3
 801495c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8014960:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014964:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8014968:	ee27 7a04 	vmul.f32	s14, s14, s8
 801496c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8014970:	ee66 6a83 	vmul.f32	s13, s13, s6
 8014974:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8014978:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801497a:	694a      	ldr	r2, [r1, #20]
 801497c:	1b13      	subs	r3, r2, r4
 801497e:	ee07 3a10 	vmov	s14, r3
 8014982:	680b      	ldr	r3, [r1, #0]
 8014984:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014988:	1b1b      	subs	r3, r3, r4
 801498a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801498e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8014992:	ee07 3a10 	vmov	s14, r3
 8014996:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801499a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801499e:	eea5 5a87 	vfma.f32	s10, s11, s14
 80149a2:	edd0 5a08 	vldr	s11, [r0, #32]
 80149a6:	ee31 1a65 	vsub.f32	s2, s2, s11
 80149aa:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80149ae:	ee25 5a06 	vmul.f32	s10, s10, s12
 80149b2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80149b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80149b8:	698b      	ldr	r3, [r1, #24]
 80149ba:	1a9b      	subs	r3, r3, r2
 80149bc:	ee07 3a10 	vmov	s14, r3
 80149c0:	684b      	ldr	r3, [r1, #4]
 80149c2:	1a9b      	subs	r3, r3, r2
 80149c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149c8:	ee01 3a90 	vmov	s3, r3
 80149cc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80149d0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80149d4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80149d8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80149dc:	eea1 7a21 	vfma.f32	s14, s2, s3
 80149e0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80149e4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80149e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80149ea:	694a      	ldr	r2, [r1, #20]
 80149ec:	1b13      	subs	r3, r2, r4
 80149ee:	ee03 3a10 	vmov	s6, r3
 80149f2:	680b      	ldr	r3, [r1, #0]
 80149f4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80149f8:	1b1b      	subs	r3, r3, r4
 80149fa:	ee23 3a04 	vmul.f32	s6, s6, s8
 80149fe:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8014a02:	ee03 3a10 	vmov	s6, r3
 8014a06:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8014a0a:	ee23 4a04 	vmul.f32	s8, s6, s8
 8014a0e:	eee1 5a04 	vfma.f32	s11, s2, s8
 8014a12:	ee25 6a86 	vmul.f32	s12, s11, s12
 8014a16:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8014a1a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8014a1e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8014a22:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8014a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2a:	dd13      	ble.n	8014a54 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8014a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a30:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8014a34:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014a36:	eee3 7a87 	vfma.f32	s15, s7, s14
 8014a3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a42:	dd15      	ble.n	8014a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8014a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a48:	6403      	str	r3, [r0, #64]	; 0x40
 8014a4a:	bd70      	pop	{r4, r5, r6, pc}
 8014a4c:	4623      	mov	r3, r4
 8014a4e:	e6fd      	b.n	801484c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014a50:	462a      	mov	r2, r5
 8014a52:	e706      	b.n	8014862 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014a54:	d502      	bpl.n	8014a5c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8014a56:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014a5a:	e7e9      	b.n	8014a30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8014a5c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8014a60:	eea3 2a85 	vfma.f32	s4, s7, s10
 8014a64:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8014a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a6c:	dade      	bge.n	8014a2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8014a6e:	e7f2      	b.n	8014a56 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8014a70:	d502      	bpl.n	8014a78 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8014a72:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8014a76:	e7e7      	b.n	8014a48 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8014a78:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8014a7c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8014a80:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8014a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a88:	dadc      	bge.n	8014a44 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8014a8a:	e7f2      	b.n	8014a72 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8014a8c:	3d800000 	.word	0x3d800000

08014a90 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8014a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a94:	2714      	movs	r7, #20
 8014a96:	435f      	muls	r7, r3
 8014a98:	eb02 0c07 	add.w	ip, r2, r7
 8014a9c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8014aa0:	f115 0e0f 	adds.w	lr, r5, #15
 8014aa4:	d433      	bmi.n	8014b0e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x7e>
 8014aa6:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8014aaa:	9c08      	ldr	r4, [sp, #32]
 8014aac:	2614      	movs	r6, #20
 8014aae:	f8c0 e014 	str.w	lr, [r0, #20]
 8014ab2:	4366      	muls	r6, r4
 8014ab4:	eb02 0806 	add.w	r8, r2, r6
 8014ab8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014abc:	f115 040f 	adds.w	r4, r5, #15
 8014ac0:	d431      	bmi.n	8014b26 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x96>
 8014ac2:	1124      	asrs	r4, r4, #4
 8014ac4:	eba4 040e 	sub.w	r4, r4, lr
 8014ac8:	6184      	str	r4, [r0, #24]
 8014aca:	2c00      	cmp	r4, #0
 8014acc:	f000 80aa 	beq.w	8014c24 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x194>
 8014ad0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8014ad4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8014ad8:	5995      	ldr	r5, [r2, r6]
 8014ada:	eba4 0809 	sub.w	r8, r4, r9
 8014ade:	59d4      	ldr	r4, [r2, r7]
 8014ae0:	eba5 0a04 	sub.w	sl, r5, r4
 8014ae4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8014ae8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8014aec:	2e00      	cmp	r6, #0
 8014aee:	fb0e fe05 	mul.w	lr, lr, r5
 8014af2:	fb0a ee19 	mls	lr, sl, r9, lr
 8014af6:	fb08 e404 	mla	r4, r8, r4, lr
 8014afa:	f104 34ff 	add.w	r4, r4, #4294967295
 8014afe:	4434      	add	r4, r6
 8014b00:	dc1d      	bgt.n	8014b3e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xae>
 8014b02:	4b5b      	ldr	r3, [pc, #364]	; (8014c70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e0>)
 8014b04:	21f7      	movs	r1, #247	; 0xf7
 8014b06:	4a5b      	ldr	r2, [pc, #364]	; (8014c74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e4>)
 8014b08:	485b      	ldr	r0, [pc, #364]	; (8014c78 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1e8>)
 8014b0a:	f00b fb43 	bl	8020194 <__assert_func>
 8014b0e:	2410      	movs	r4, #16
 8014b10:	f1c5 0501 	rsb	r5, r5, #1
 8014b14:	fb9e fef4 	sdiv	lr, lr, r4
 8014b18:	f015 050f 	ands.w	r5, r5, #15
 8014b1c:	bf18      	it	ne
 8014b1e:	2501      	movne	r5, #1
 8014b20:	ebae 0e05 	sub.w	lr, lr, r5
 8014b24:	e7c1      	b.n	8014aaa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1a>
 8014b26:	f04f 0910 	mov.w	r9, #16
 8014b2a:	f1c5 0501 	rsb	r5, r5, #1
 8014b2e:	fb94 f4f9 	sdiv	r4, r4, r9
 8014b32:	f015 050f 	ands.w	r5, r5, #15
 8014b36:	bf18      	it	ne
 8014b38:	2501      	movne	r5, #1
 8014b3a:	1b64      	subs	r4, r4, r5
 8014b3c:	e7c2      	b.n	8014ac4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x34>
 8014b3e:	2c00      	cmp	r4, #0
 8014b40:	db72      	blt.n	8014c28 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x198>
 8014b42:	fb94 fef6 	sdiv	lr, r4, r6
 8014b46:	fb06 441e 	mls	r4, r6, lr, r4
 8014b4a:	f8c0 e000 	str.w	lr, [r0]
 8014b4e:	6104      	str	r4, [r0, #16]
 8014b50:	2d00      	cmp	r5, #0
 8014b52:	db7b      	blt.n	8014c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1bc>
 8014b54:	fb95 f4f6 	sdiv	r4, r5, r6
 8014b58:	fb06 5514 	mls	r5, r6, r4, r5
 8014b5c:	6044      	str	r4, [r0, #4]
 8014b5e:	6085      	str	r5, [r0, #8]
 8014b60:	60c6      	str	r6, [r0, #12]
 8014b62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014b66:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8014b6a:	6945      	ldr	r5, [r0, #20]
 8014b6c:	59d2      	ldr	r2, [r2, r7]
 8014b6e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8014b72:	eddf 6a42 	vldr	s13, [pc, #264]	; 8014c7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1ec>
 8014b76:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014b7a:	ee07 4a10 	vmov	s14, r4
 8014b7e:	6804      	ldr	r4, [r0, #0]
 8014b80:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8014b84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b88:	ee07 2a90 	vmov	s15, r2
 8014b8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014b98:	edd3 6a00 	vldr	s13, [r3]
 8014b9c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014ba0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8014ba4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8014ba8:	edc0 6a07 	vstr	s13, [r0, #28]
 8014bac:	edd0 6a01 	vldr	s13, [r0, #4]
 8014bb0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8014bb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8014bb8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8014bbc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014bc0:	ed80 6a08 	vstr	s12, [r0, #32]
 8014bc4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8014bc6:	6242      	str	r2, [r0, #36]	; 0x24
 8014bc8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8014bcc:	ed93 6a03 	vldr	s12, [r3, #12]
 8014bd0:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014bd4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014bd8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8014bdc:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8014be0:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8014be4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8014be8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8014bec:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8014bf0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8014bf2:	6302      	str	r2, [r0, #48]	; 0x30
 8014bf4:	ed93 6a06 	vldr	s12, [r3, #24]
 8014bf8:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8014bfc:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014c00:	eeb0 7a46 	vmov.f32	s14, s12
 8014c04:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8014c08:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014c0c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8014c10:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8014c14:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8014c18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c1c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8014c20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8014c22:	63c3      	str	r3, [r0, #60]	; 0x3c
 8014c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c28:	4264      	negs	r4, r4
 8014c2a:	fb94 fef6 	sdiv	lr, r4, r6
 8014c2e:	f1ce 0800 	rsb	r8, lr, #0
 8014c32:	fb06 441e 	mls	r4, r6, lr, r4
 8014c36:	f8c0 8000 	str.w	r8, [r0]
 8014c3a:	6104      	str	r4, [r0, #16]
 8014c3c:	2c00      	cmp	r4, #0
 8014c3e:	d087      	beq.n	8014b50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xc0>
 8014c40:	ea6f 0e0e 	mvn.w	lr, lr
 8014c44:	1b34      	subs	r4, r6, r4
 8014c46:	f8c0 e000 	str.w	lr, [r0]
 8014c4a:	e780      	b.n	8014b4e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xbe>
 8014c4c:	426d      	negs	r5, r5
 8014c4e:	fb95 f4f6 	sdiv	r4, r5, r6
 8014c52:	f1c4 0e00 	rsb	lr, r4, #0
 8014c56:	fb06 5514 	mls	r5, r6, r4, r5
 8014c5a:	f8c0 e004 	str.w	lr, [r0, #4]
 8014c5e:	6085      	str	r5, [r0, #8]
 8014c60:	2d00      	cmp	r5, #0
 8014c62:	f43f af7d 	beq.w	8014b60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xd0>
 8014c66:	43e4      	mvns	r4, r4
 8014c68:	1b75      	subs	r5, r6, r5
 8014c6a:	6044      	str	r4, [r0, #4]
 8014c6c:	e777      	b.n	8014b5e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0xce>
 8014c6e:	bf00      	nop
 8014c70:	08025b51 	.word	0x08025b51
 8014c74:	08025b90 	.word	0x08025b90
 8014c78:	08025b61 	.word	0x08025b61
 8014c7c:	3d800000 	.word	0x3d800000

08014c80 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8014c80:	4602      	mov	r2, r0
 8014c82:	b148      	cbz	r0, 8014c98 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8014c84:	2300      	movs	r3, #0
 8014c86:	b298      	uxth	r0, r3
 8014c88:	3301      	adds	r3, #1
 8014c8a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8014c8e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8014c92:	2900      	cmp	r1, #0
 8014c94:	d1f7      	bne.n	8014c86 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8014c96:	4770      	bx	lr
 8014c98:	4770      	bx	lr

08014c9a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8014c9a:	b530      	push	{r4, r5, lr}
 8014c9c:	4604      	mov	r4, r0
 8014c9e:	b159      	cbz	r1, 8014cb8 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8014ca0:	b148      	cbz	r0, 8014cb6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	b298      	uxth	r0, r3
 8014ca6:	4282      	cmp	r2, r0
 8014ca8:	d905      	bls.n	8014cb6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8014caa:	5ccd      	ldrb	r5, [r1, r3]
 8014cac:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8014cb0:	3301      	adds	r3, #1
 8014cb2:	2d00      	cmp	r5, #0
 8014cb4:	d1f6      	bne.n	8014ca4 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8014cb6:	bd30      	pop	{r4, r5, pc}
 8014cb8:	4608      	mov	r0, r1
 8014cba:	e7fc      	b.n	8014cb6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08014cbc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8014cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cbe:	468c      	mov	ip, r1
 8014cc0:	b08b      	sub	sp, #44	; 0x2c
 8014cc2:	2100      	movs	r1, #0
 8014cc4:	ae01      	add	r6, sp, #4
 8014cc6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014cca:	211f      	movs	r1, #31
 8014ccc:	fbb0 f7f3 	udiv	r7, r0, r3
 8014cd0:	fb03 0517 	mls	r5, r3, r7, r0
 8014cd4:	4638      	mov	r0, r7
 8014cd6:	b2ec      	uxtb	r4, r5
 8014cd8:	2d09      	cmp	r5, #9
 8014cda:	bfd4      	ite	le
 8014cdc:	3430      	addle	r4, #48	; 0x30
 8014cde:	3457      	addgt	r4, #87	; 0x57
 8014ce0:	b2e4      	uxtb	r4, r4
 8014ce2:	558c      	strb	r4, [r1, r6]
 8014ce4:	1e4c      	subs	r4, r1, #1
 8014ce6:	b92f      	cbnz	r7, 8014cf4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8014ce8:	4431      	add	r1, r6
 8014cea:	4660      	mov	r0, ip
 8014cec:	f7ff ffd5 	bl	8014c9a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8014cf0:	b00b      	add	sp, #44	; 0x2c
 8014cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014cf4:	4621      	mov	r1, r4
 8014cf6:	e7e9      	b.n	8014ccc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08014cf8 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8014cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cfa:	4607      	mov	r7, r0
 8014cfc:	b08b      	sub	sp, #44	; 0x2c
 8014cfe:	4608      	mov	r0, r1
 8014d00:	b341      	cbz	r1, 8014d54 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8014d02:	1e99      	subs	r1, r3, #2
 8014d04:	2922      	cmp	r1, #34	; 0x22
 8014d06:	d825      	bhi.n	8014d54 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8014d08:	2100      	movs	r1, #0
 8014d0a:	463c      	mov	r4, r7
 8014d0c:	261f      	movs	r6, #31
 8014d0e:	f10d 0c04 	add.w	ip, sp, #4
 8014d12:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8014d16:	1e71      	subs	r1, r6, #1
 8014d18:	fb94 fef3 	sdiv	lr, r4, r3
 8014d1c:	fb03 441e 	mls	r4, r3, lr, r4
 8014d20:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8014d24:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8014d28:	b2ec      	uxtb	r4, r5
 8014d2a:	2d09      	cmp	r5, #9
 8014d2c:	bfd4      	ite	le
 8014d2e:	3430      	addle	r4, #48	; 0x30
 8014d30:	3457      	addgt	r4, #87	; 0x57
 8014d32:	b2e4      	uxtb	r4, r4
 8014d34:	f80c 4006 	strb.w	r4, [ip, r6]
 8014d38:	4674      	mov	r4, lr
 8014d3a:	b96c      	cbnz	r4, 8014d58 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8014d3c:	2f00      	cmp	r7, #0
 8014d3e:	da05      	bge.n	8014d4c <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8014d40:	ab0a      	add	r3, sp, #40	; 0x28
 8014d42:	4419      	add	r1, r3
 8014d44:	232d      	movs	r3, #45	; 0x2d
 8014d46:	f801 3c24 	strb.w	r3, [r1, #-36]
 8014d4a:	1eb1      	subs	r1, r6, #2
 8014d4c:	3101      	adds	r1, #1
 8014d4e:	4461      	add	r1, ip
 8014d50:	f7ff ffa3 	bl	8014c9a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8014d54:	b00b      	add	sp, #44	; 0x2c
 8014d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d58:	460e      	mov	r6, r1
 8014d5a:	e7dc      	b.n	8014d16 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08014d5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8014d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d60:	b085      	sub	sp, #20
 8014d62:	4691      	mov	r9, r2
 8014d64:	6802      	ldr	r2, [r0, #0]
 8014d66:	4688      	mov	r8, r1
 8014d68:	461c      	mov	r4, r3
 8014d6a:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8014d6e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8014d72:	4683      	mov	fp, r0
 8014d74:	4610      	mov	r0, r2
 8014d76:	9103      	str	r1, [sp, #12]
 8014d78:	9302      	str	r3, [sp, #8]
 8014d7a:	9201      	str	r2, [sp, #4]
 8014d7c:	f7ff ff80 	bl	8014c80 <_ZN8touchgfx7Unicode6strlenEPKt>
 8014d80:	f1b8 0f00 	cmp.w	r8, #0
 8014d84:	bf0c      	ite	eq
 8014d86:	4684      	moveq	ip, r0
 8014d88:	f100 0c01 	addne.w	ip, r0, #1
 8014d8c:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8014d90:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8014d94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014d96:	fa1f fc8c 	uxth.w	ip, ip
 8014d9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014d9c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8014da0:	9903      	ldr	r1, [sp, #12]
 8014da2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014da6:	d041      	beq.n	8014e2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8014da8:	d834      	bhi.n	8014e14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8014daa:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8014dae:	d059      	beq.n	8014e64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8014db0:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8014db4:	d03a      	beq.n	8014e2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8014db6:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8014dba:	d034      	beq.n	8014e26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8014dbc:	2400      	movs	r4, #0
 8014dbe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8014dc2:	3a01      	subs	r2, #1
 8014dc4:	b169      	cbz	r1, 8014de2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014dc6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014dc8:	458c      	cmp	ip, r1
 8014dca:	da09      	bge.n	8014de0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8014dcc:	eba1 010c 	sub.w	r1, r1, ip
 8014dd0:	b289      	uxth	r1, r1
 8014dd2:	b933      	cbnz	r3, 8014de2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014dd4:	2e00      	cmp	r6, #0
 8014dd6:	d051      	beq.n	8014e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d04f      	beq.n	8014e7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8014ddc:	440c      	add	r4, r1
 8014dde:	b2a4      	uxth	r4, r4
 8014de0:	2100      	movs	r1, #0
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	4293      	cmp	r3, r2
 8014de6:	da07      	bge.n	8014df8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8014de8:	f1b8 0f00 	cmp.w	r8, #0
 8014dec:	d004      	beq.n	8014df8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8014dee:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8014df2:	682b      	ldr	r3, [r5, #0]
 8014df4:	3301      	adds	r3, #1
 8014df6:	602b      	str	r3, [r5, #0]
 8014df8:	2730      	movs	r7, #48	; 0x30
 8014dfa:	2c00      	cmp	r4, #0
 8014dfc:	d04e      	beq.n	8014e9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014dfe:	682e      	ldr	r6, [r5, #0]
 8014e00:	3c01      	subs	r4, #1
 8014e02:	42b2      	cmp	r2, r6
 8014e04:	b2a4      	uxth	r4, r4
 8014e06:	dd49      	ble.n	8014e9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014e08:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8014e0c:	682b      	ldr	r3, [r5, #0]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	602b      	str	r3, [r5, #0]
 8014e12:	e7f2      	b.n	8014dfa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8014e14:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8014e18:	d01d      	beq.n	8014e56 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8014e1a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8014e1e:	d002      	beq.n	8014e26 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8014e20:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8014e24:	e7c9      	b.n	8014dba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8014e26:	4684      	mov	ip, r0
 8014e28:	f04f 0800 	mov.w	r8, #0
 8014e2c:	2c00      	cmp	r4, #0
 8014e2e:	d0c6      	beq.n	8014dbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014e30:	b947      	cbnz	r7, 8014e44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8014e32:	2801      	cmp	r0, #1
 8014e34:	d106      	bne.n	8014e44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8014e36:	8814      	ldrh	r4, [r2, #0]
 8014e38:	2c30      	cmp	r4, #48	; 0x30
 8014e3a:	bf02      	ittt	eq
 8014e3c:	3202      	addeq	r2, #2
 8014e3e:	4638      	moveq	r0, r7
 8014e40:	f8cb 2000 	streq.w	r2, [fp]
 8014e44:	45bc      	cmp	ip, r7
 8014e46:	da14      	bge.n	8014e72 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8014e48:	b2bf      	uxth	r7, r7
 8014e4a:	eba7 040c 	sub.w	r4, r7, ip
 8014e4e:	46bc      	mov	ip, r7
 8014e50:	b2a4      	uxth	r4, r4
 8014e52:	2600      	movs	r6, #0
 8014e54:	e7b3      	b.n	8014dbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014e56:	4684      	mov	ip, r0
 8014e58:	b16c      	cbz	r4, 8014e76 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8014e5a:	42b8      	cmp	r0, r7
 8014e5c:	dd00      	ble.n	8014e60 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8014e5e:	b2b8      	uxth	r0, r7
 8014e60:	2400      	movs	r4, #0
 8014e62:	e003      	b.n	8014e6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8014e64:	f04f 0c01 	mov.w	ip, #1
 8014e68:	2400      	movs	r4, #0
 8014e6a:	4660      	mov	r0, ip
 8014e6c:	4626      	mov	r6, r4
 8014e6e:	46a0      	mov	r8, r4
 8014e70:	e7a5      	b.n	8014dbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014e72:	2400      	movs	r4, #0
 8014e74:	e7ed      	b.n	8014e52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8014e76:	4626      	mov	r6, r4
 8014e78:	46a0      	mov	r8, r4
 8014e7a:	e7a0      	b.n	8014dbe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8014e7c:	2900      	cmp	r1, #0
 8014e7e:	d0b0      	beq.n	8014de2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014e80:	2720      	movs	r7, #32
 8014e82:	682e      	ldr	r6, [r5, #0]
 8014e84:	2900      	cmp	r1, #0
 8014e86:	d0ac      	beq.n	8014de2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8014e88:	3901      	subs	r1, #1
 8014e8a:	4296      	cmp	r6, r2
 8014e8c:	b289      	uxth	r1, r1
 8014e8e:	daa7      	bge.n	8014de0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8014e90:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8014e94:	682b      	ldr	r3, [r5, #0]
 8014e96:	3301      	adds	r3, #1
 8014e98:	602b      	str	r3, [r5, #0]
 8014e9a:	e7f2      	b.n	8014e82 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8014e9c:	b188      	cbz	r0, 8014ec2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8014e9e:	682b      	ldr	r3, [r5, #0]
 8014ea0:	3801      	subs	r0, #1
 8014ea2:	429a      	cmp	r2, r3
 8014ea4:	b280      	uxth	r0, r0
 8014ea6:	dd0c      	ble.n	8014ec2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8014ea8:	f8db 3000 	ldr.w	r3, [fp]
 8014eac:	1c9c      	adds	r4, r3, #2
 8014eae:	f8cb 4000 	str.w	r4, [fp]
 8014eb2:	881c      	ldrh	r4, [r3, #0]
 8014eb4:	682b      	ldr	r3, [r5, #0]
 8014eb6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8014eba:	682b      	ldr	r3, [r5, #0]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	602b      	str	r3, [r5, #0]
 8014ec0:	e7ec      	b.n	8014e9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8014ec2:	2620      	movs	r6, #32
 8014ec4:	b151      	cbz	r1, 8014edc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8014ec6:	6828      	ldr	r0, [r5, #0]
 8014ec8:	3901      	subs	r1, #1
 8014eca:	4282      	cmp	r2, r0
 8014ecc:	b289      	uxth	r1, r1
 8014ece:	dd05      	ble.n	8014edc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8014ed0:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8014ed4:	682b      	ldr	r3, [r5, #0]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	602b      	str	r3, [r5, #0]
 8014eda:	e7f3      	b.n	8014ec4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8014edc:	b005      	add	sp, #20
 8014ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ee2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8014ee2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ee6:	2400      	movs	r4, #0
 8014ee8:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8014eec:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8014ef0:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8014ef4:	8014      	strh	r4, [r2, #0]
 8014ef6:	701c      	strb	r4, [r3, #0]
 8014ef8:	f888 4000 	strb.w	r4, [r8]
 8014efc:	f88c 4000 	strb.w	r4, [ip]
 8014f00:	f88e 4000 	strb.w	r4, [lr]
 8014f04:	703c      	strb	r4, [r7, #0]
 8014f06:	6804      	ldr	r4, [r0, #0]
 8014f08:	b1a4      	cbz	r4, 8014f34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8014f0a:	8824      	ldrh	r4, [r4, #0]
 8014f0c:	f04f 0901 	mov.w	r9, #1
 8014f10:	b314      	cbz	r4, 8014f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8014f12:	2c2b      	cmp	r4, #43	; 0x2b
 8014f14:	d001      	beq.n	8014f1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8014f16:	2c20      	cmp	r4, #32
 8014f18:	d110      	bne.n	8014f3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8014f1a:	8014      	strh	r4, [r2, #0]
 8014f1c:	6804      	ldr	r4, [r0, #0]
 8014f1e:	b10c      	cbz	r4, 8014f24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8014f20:	3402      	adds	r4, #2
 8014f22:	6004      	str	r4, [r0, #0]
 8014f24:	680c      	ldr	r4, [r1, #0]
 8014f26:	b10c      	cbz	r4, 8014f2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8014f28:	3401      	adds	r4, #1
 8014f2a:	600c      	str	r4, [r1, #0]
 8014f2c:	6804      	ldr	r4, [r0, #0]
 8014f2e:	b17c      	cbz	r4, 8014f50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8014f30:	8824      	ldrh	r4, [r4, #0]
 8014f32:	e7ed      	b.n	8014f10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8014f34:	680c      	ldr	r4, [r1, #0]
 8014f36:	b17c      	cbz	r4, 8014f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8014f38:	7824      	ldrb	r4, [r4, #0]
 8014f3a:	e7e7      	b.n	8014f0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8014f3c:	2c2d      	cmp	r4, #45	; 0x2d
 8014f3e:	d102      	bne.n	8014f46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8014f40:	f883 9000 	strb.w	r9, [r3]
 8014f44:	e7ea      	b.n	8014f1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8014f46:	2c23      	cmp	r4, #35	; 0x23
 8014f48:	d107      	bne.n	8014f5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8014f4a:	f888 9000 	strb.w	r9, [r8]
 8014f4e:	e7e5      	b.n	8014f1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8014f50:	680c      	ldr	r4, [r1, #0]
 8014f52:	b10c      	cbz	r4, 8014f58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8014f54:	7824      	ldrb	r4, [r4, #0]
 8014f56:	e7db      	b.n	8014f10 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8014f58:	2400      	movs	r4, #0
 8014f5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014f5e:	2b09      	cmp	r3, #9
 8014f60:	d901      	bls.n	8014f66 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8014f62:	2c2a      	cmp	r4, #42	; 0x2a
 8014f64:	d122      	bne.n	8014fac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8014f66:	2301      	movs	r3, #1
 8014f68:	2c30      	cmp	r4, #48	; 0x30
 8014f6a:	f88e 3000 	strb.w	r3, [lr]
 8014f6e:	d10d      	bne.n	8014f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8014f70:	f88c 3000 	strb.w	r3, [ip]
 8014f74:	6803      	ldr	r3, [r0, #0]
 8014f76:	b10b      	cbz	r3, 8014f7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8014f78:	3302      	adds	r3, #2
 8014f7a:	6003      	str	r3, [r0, #0]
 8014f7c:	680b      	ldr	r3, [r1, #0]
 8014f7e:	b10b      	cbz	r3, 8014f84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8014f80:	3301      	adds	r3, #1
 8014f82:	600b      	str	r3, [r1, #0]
 8014f84:	6803      	ldr	r3, [r0, #0]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d02f      	beq.n	8014fea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8014f8a:	881c      	ldrh	r4, [r3, #0]
 8014f8c:	2c2a      	cmp	r4, #42	; 0x2a
 8014f8e:	d135      	bne.n	8014ffc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8014f90:	f04f 33ff 	mov.w	r3, #4294967295
 8014f94:	6033      	str	r3, [r6, #0]
 8014f96:	6803      	ldr	r3, [r0, #0]
 8014f98:	b10b      	cbz	r3, 8014f9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8014f9a:	3302      	adds	r3, #2
 8014f9c:	6003      	str	r3, [r0, #0]
 8014f9e:	680b      	ldr	r3, [r1, #0]
 8014fa0:	b10b      	cbz	r3, 8014fa6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	600b      	str	r3, [r1, #0]
 8014fa6:	6803      	ldr	r3, [r0, #0]
 8014fa8:	b31b      	cbz	r3, 8014ff2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8014faa:	881c      	ldrh	r4, [r3, #0]
 8014fac:	2c2e      	cmp	r4, #46	; 0x2e
 8014fae:	d11a      	bne.n	8014fe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	703b      	strb	r3, [r7, #0]
 8014fb4:	6803      	ldr	r3, [r0, #0]
 8014fb6:	b10b      	cbz	r3, 8014fbc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8014fb8:	3302      	adds	r3, #2
 8014fba:	6003      	str	r3, [r0, #0]
 8014fbc:	680b      	ldr	r3, [r1, #0]
 8014fbe:	b10b      	cbz	r3, 8014fc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	600b      	str	r3, [r1, #0]
 8014fc4:	6803      	ldr	r3, [r0, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d036      	beq.n	8015038 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8014fca:	881b      	ldrh	r3, [r3, #0]
 8014fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8014fce:	d137      	bne.n	8015040 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	602b      	str	r3, [r5, #0]
 8014fd6:	6803      	ldr	r3, [r0, #0]
 8014fd8:	b10b      	cbz	r3, 8014fde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8014fda:	3302      	adds	r3, #2
 8014fdc:	6003      	str	r3, [r0, #0]
 8014fde:	680b      	ldr	r3, [r1, #0]
 8014fe0:	b10b      	cbz	r3, 8014fe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	600b      	str	r3, [r1, #0]
 8014fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fea:	680c      	ldr	r4, [r1, #0]
 8014fec:	b134      	cbz	r4, 8014ffc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8014fee:	7824      	ldrb	r4, [r4, #0]
 8014ff0:	e7cc      	b.n	8014f8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8014ff2:	680b      	ldr	r3, [r1, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d0f6      	beq.n	8014fe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8014ff8:	781c      	ldrb	r4, [r3, #0]
 8014ffa:	e7d7      	b.n	8014fac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	220a      	movs	r2, #10
 8015000:	6033      	str	r3, [r6, #0]
 8015002:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015006:	fa1f f38c 	uxth.w	r3, ip
 801500a:	2b09      	cmp	r3, #9
 801500c:	d8ce      	bhi.n	8014fac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801500e:	6833      	ldr	r3, [r6, #0]
 8015010:	fb02 c303 	mla	r3, r2, r3, ip
 8015014:	6033      	str	r3, [r6, #0]
 8015016:	6803      	ldr	r3, [r0, #0]
 8015018:	b10b      	cbz	r3, 801501e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801501a:	3302      	adds	r3, #2
 801501c:	6003      	str	r3, [r0, #0]
 801501e:	680b      	ldr	r3, [r1, #0]
 8015020:	b10b      	cbz	r3, 8015026 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8015022:	3301      	adds	r3, #1
 8015024:	600b      	str	r3, [r1, #0]
 8015026:	6803      	ldr	r3, [r0, #0]
 8015028:	b10b      	cbz	r3, 801502e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801502a:	881c      	ldrh	r4, [r3, #0]
 801502c:	e7e9      	b.n	8015002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801502e:	680c      	ldr	r4, [r1, #0]
 8015030:	2c00      	cmp	r4, #0
 8015032:	d0e6      	beq.n	8015002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8015034:	7824      	ldrb	r4, [r4, #0]
 8015036:	e7e4      	b.n	8015002 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8015038:	680b      	ldr	r3, [r1, #0]
 801503a:	b10b      	cbz	r3, 8015040 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	e7c5      	b.n	8014fcc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8015040:	2200      	movs	r2, #0
 8015042:	240a      	movs	r4, #10
 8015044:	602a      	str	r2, [r5, #0]
 8015046:	3b30      	subs	r3, #48	; 0x30
 8015048:	682a      	ldr	r2, [r5, #0]
 801504a:	b29e      	uxth	r6, r3
 801504c:	2e09      	cmp	r6, #9
 801504e:	d813      	bhi.n	8015078 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8015050:	fb04 3302 	mla	r3, r4, r2, r3
 8015054:	602b      	str	r3, [r5, #0]
 8015056:	6803      	ldr	r3, [r0, #0]
 8015058:	b10b      	cbz	r3, 801505e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801505a:	3302      	adds	r3, #2
 801505c:	6003      	str	r3, [r0, #0]
 801505e:	680b      	ldr	r3, [r1, #0]
 8015060:	b10b      	cbz	r3, 8015066 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8015062:	3301      	adds	r3, #1
 8015064:	600b      	str	r3, [r1, #0]
 8015066:	6803      	ldr	r3, [r0, #0]
 8015068:	b10b      	cbz	r3, 801506e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801506a:	881b      	ldrh	r3, [r3, #0]
 801506c:	e7eb      	b.n	8015046 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801506e:	680b      	ldr	r3, [r1, #0]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d0e8      	beq.n	8015046 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	e7e6      	b.n	8015046 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8015078:	2a06      	cmp	r2, #6
 801507a:	bfa8      	it	ge
 801507c:	2206      	movge	r2, #6
 801507e:	602a      	str	r2, [r5, #0]
 8015080:	e7b1      	b.n	8014fe6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08015082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8015082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015086:	b0a3      	sub	sp, #140	; 0x8c
 8015088:	2600      	movs	r6, #0
 801508a:	4607      	mov	r7, r0
 801508c:	4688      	mov	r8, r1
 801508e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8015092:	4631      	mov	r1, r6
 8015094:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8015096:	4648      	mov	r0, r9
 8015098:	960d      	str	r6, [sp, #52]	; 0x34
 801509a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801509e:	2242      	movs	r2, #66	; 0x42
 80150a0:	f00b f9f8 	bl	8020494 <memset>
 80150a4:	b15f      	cbz	r7, 80150be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80150a6:	f108 3aff 	add.w	sl, r8, #4294967295
 80150aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150ae:	b152      	cbz	r2, 80150c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80150b0:	8812      	ldrh	r2, [r2, #0]
 80150b2:	b10a      	cbz	r2, 80150b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80150b4:	459a      	cmp	sl, r3
 80150b6:	dc2e      	bgt.n	8015116 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80150b8:	2200      	movs	r2, #0
 80150ba:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80150be:	4638      	mov	r0, r7
 80150c0:	b023      	add	sp, #140	; 0x8c
 80150c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c6:	9a08      	ldr	r2, [sp, #32]
 80150c8:	2a00      	cmp	r2, #0
 80150ca:	d0f5      	beq.n	80150b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80150cc:	7812      	ldrb	r2, [r2, #0]
 80150ce:	e7f0      	b.n	80150b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 80150d0:	2d00      	cmp	r5, #0
 80150d2:	d0ea      	beq.n	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80150d4:	782a      	ldrb	r2, [r5, #0]
 80150d6:	b142      	cbz	r2, 80150ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 80150d8:	2a25      	cmp	r2, #37	; 0x25
 80150da:	d001      	beq.n	80150e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 80150dc:	459a      	cmp	sl, r3
 80150de:	dc08      	bgt.n	80150f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 80150e0:	f1bb 0f00 	cmp.w	fp, #0
 80150e4:	d121      	bne.n	801512a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 80150e6:	2d00      	cmp	r5, #0
 80150e8:	d0df      	beq.n	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80150ea:	782a      	ldrb	r2, [r5, #0]
 80150ec:	f04f 0b00 	mov.w	fp, #0
 80150f0:	e01d      	b.n	801512e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 80150f2:	f1bb 0f00 	cmp.w	fp, #0
 80150f6:	d077      	beq.n	80151e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 80150f8:	f8bb 2000 	ldrh.w	r2, [fp]
 80150fc:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8015100:	f1bb 0f00 	cmp.w	fp, #0
 8015104:	d002      	beq.n	801510c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8015106:	f10b 0202 	add.w	r2, fp, #2
 801510a:	9209      	str	r2, [sp, #36]	; 0x24
 801510c:	b10d      	cbz	r5, 8015112 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801510e:	3501      	adds	r5, #1
 8015110:	9508      	str	r5, [sp, #32]
 8015112:	3301      	adds	r3, #1
 8015114:	930d      	str	r3, [sp, #52]	; 0x34
 8015116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015118:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801511c:	f1bb 0f00 	cmp.w	fp, #0
 8015120:	d0d6      	beq.n	80150d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8015122:	f8bb 2000 	ldrh.w	r2, [fp]
 8015126:	2a00      	cmp	r2, #0
 8015128:	d1d6      	bne.n	80150d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801512a:	f8bb 2000 	ldrh.w	r2, [fp]
 801512e:	2a00      	cmp	r2, #0
 8015130:	d0bb      	beq.n	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015132:	459a      	cmp	sl, r3
 8015134:	ddb9      	ble.n	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015136:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801513a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801513e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8015142:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8015146:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801514a:	960e      	str	r6, [sp, #56]	; 0x38
 801514c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8015150:	960f      	str	r6, [sp, #60]	; 0x3c
 8015152:	f1bb 0f00 	cmp.w	fp, #0
 8015156:	d002      	beq.n	801515e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8015158:	f10b 0302 	add.w	r3, fp, #2
 801515c:	9309      	str	r3, [sp, #36]	; 0x24
 801515e:	b10d      	cbz	r5, 8015164 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8015160:	1c6b      	adds	r3, r5, #1
 8015162:	9308      	str	r3, [sp, #32]
 8015164:	ab0f      	add	r3, sp, #60	; 0x3c
 8015166:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801516a:	a908      	add	r1, sp, #32
 801516c:	a809      	add	r0, sp, #36	; 0x24
 801516e:	9305      	str	r3, [sp, #20]
 8015170:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8015174:	9304      	str	r3, [sp, #16]
 8015176:	ab0e      	add	r3, sp, #56	; 0x38
 8015178:	9303      	str	r3, [sp, #12]
 801517a:	ab0c      	add	r3, sp, #48	; 0x30
 801517c:	9302      	str	r3, [sp, #8]
 801517e:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8015182:	9301      	str	r3, [sp, #4]
 8015184:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801518e:	f7ff fea8 	bl	8014ee2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8015192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015194:	2b00      	cmp	r3, #0
 8015196:	bfbf      	itttt	lt
 8015198:	6823      	ldrlt	r3, [r4, #0]
 801519a:	3404      	addlt	r4, #4
 801519c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80151a0:	930e      	strlt	r3, [sp, #56]	; 0x38
 80151a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	bfbe      	ittt	lt
 80151a8:	6823      	ldrlt	r3, [r4, #0]
 80151aa:	3404      	addlt	r4, #4
 80151ac:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80151b0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80151b4:	bfb8      	it	lt
 80151b6:	930f      	strlt	r3, [sp, #60]	; 0x3c
 80151b8:	b1d9      	cbz	r1, 80151f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 80151ba:	880b      	ldrh	r3, [r1, #0]
 80151bc:	2b69      	cmp	r3, #105	; 0x69
 80151be:	d01f      	beq.n	8015200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80151c0:	d82f      	bhi.n	8015222 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 80151c2:	2b58      	cmp	r3, #88	; 0x58
 80151c4:	d01c      	beq.n	8015200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 80151c6:	d818      	bhi.n	80151fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 80151c8:	2b25      	cmp	r3, #37	; 0x25
 80151ca:	d034      	beq.n	8015236 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 80151cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151ce:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 80151d2:	f1bb 0f00 	cmp.w	fp, #0
 80151d6:	f000 80b7 	beq.w	8015348 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 80151da:	f8bb 5000 	ldrh.w	r5, [fp]
 80151de:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 80151e2:	3301      	adds	r3, #1
 80151e4:	930d      	str	r3, [sp, #52]	; 0x34
 80151e6:	e029      	b.n	801523c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80151e8:	b10d      	cbz	r5, 80151ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 80151ea:	782a      	ldrb	r2, [r5, #0]
 80151ec:	e786      	b.n	80150fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80151ee:	462a      	mov	r2, r5
 80151f0:	e784      	b.n	80150fc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 80151f2:	2a00      	cmp	r2, #0
 80151f4:	d0ea      	beq.n	80151cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 80151f6:	7813      	ldrb	r3, [r2, #0]
 80151f8:	e7e0      	b.n	80151bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 80151fa:	3b63      	subs	r3, #99	; 0x63
 80151fc:	2b01      	cmp	r3, #1
 80151fe:	d8e5      	bhi.n	80151cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 8015200:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8015204:	b329      	cbz	r1, 8015252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 8015206:	880b      	ldrh	r3, [r1, #0]
 8015208:	2b69      	cmp	r3, #105	; 0x69
 801520a:	d063      	beq.n	80152d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801520c:	d825      	bhi.n	801525a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801520e:	2b63      	cmp	r3, #99	; 0x63
 8015210:	d038      	beq.n	8015284 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 8015212:	2b64      	cmp	r3, #100	; 0x64
 8015214:	d05e      	beq.n	80152d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 8015216:	2b58      	cmp	r3, #88	; 0x58
 8015218:	d07a      	beq.n	8015310 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801521a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801521e:	4625      	mov	r5, r4
 8015220:	e036      	b.n	8015290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015222:	2b73      	cmp	r3, #115	; 0x73
 8015224:	d0ec      	beq.n	8015200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015226:	d802      	bhi.n	801522e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 8015228:	2b6f      	cmp	r3, #111	; 0x6f
 801522a:	d1cf      	bne.n	80151cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801522c:	e7e8      	b.n	8015200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801522e:	2b75      	cmp	r3, #117	; 0x75
 8015230:	d0e6      	beq.n	8015200 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 8015232:	2b78      	cmp	r3, #120	; 0x78
 8015234:	e7f9      	b.n	801522a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 8015236:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015238:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801523e:	b10b      	cbz	r3, 8015244 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 8015240:	3302      	adds	r3, #2
 8015242:	9309      	str	r3, [sp, #36]	; 0x24
 8015244:	9b08      	ldr	r3, [sp, #32]
 8015246:	2b00      	cmp	r3, #0
 8015248:	f43f af2f 	beq.w	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801524c:	3301      	adds	r3, #1
 801524e:	9308      	str	r3, [sp, #32]
 8015250:	e72b      	b.n	80150aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8015252:	2a00      	cmp	r2, #0
 8015254:	d0e1      	beq.n	801521a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015256:	7813      	ldrb	r3, [r2, #0]
 8015258:	e7d6      	b.n	8015208 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801525a:	2b73      	cmp	r3, #115	; 0x73
 801525c:	d036      	beq.n	80152cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801525e:	d807      	bhi.n	8015270 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 8015260:	2b6f      	cmp	r3, #111	; 0x6f
 8015262:	d1da      	bne.n	801521a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015264:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015266:	1d25      	adds	r5, r4, #4
 8015268:	2308      	movs	r3, #8
 801526a:	eba8 0202 	sub.w	r2, r8, r2
 801526e:	e049      	b.n	8015304 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015270:	2b75      	cmp	r3, #117	; 0x75
 8015272:	d042      	beq.n	80152fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 8015274:	2b78      	cmp	r3, #120	; 0x78
 8015276:	d1d0      	bne.n	801521a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 8015278:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801527a:	1d25      	adds	r5, r4, #4
 801527c:	2310      	movs	r3, #16
 801527e:	eba8 0202 	sub.w	r2, r8, r2
 8015282:	e03f      	b.n	8015304 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 8015284:	7823      	ldrb	r3, [r4, #0]
 8015286:	1d25      	adds	r5, r4, #4
 8015288:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801528c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8015290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015292:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8015296:	2b00      	cmp	r3, #0
 8015298:	d051      	beq.n	801533e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801529a:	881a      	ldrh	r2, [r3, #0]
 801529c:	a80d      	add	r0, sp, #52	; 0x34
 801529e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 80152a2:	462c      	mov	r4, r5
 80152a4:	9005      	str	r0, [sp, #20]
 80152a6:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 80152aa:	9004      	str	r0, [sp, #16]
 80152ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80152ae:	9003      	str	r0, [sp, #12]
 80152b0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 80152b4:	9002      	str	r0, [sp, #8]
 80152b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80152b8:	9001      	str	r0, [sp, #4]
 80152ba:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 80152be:	e9cd 8706 	strd	r8, r7, [sp, #24]
 80152c2:	9000      	str	r0, [sp, #0]
 80152c4:	a810      	add	r0, sp, #64	; 0x40
 80152c6:	f7ff fd49 	bl	8014d5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80152ca:	e7b7      	b.n	801523c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 80152cc:	1d25      	adds	r5, r4, #4
 80152ce:	6823      	ldr	r3, [r4, #0]
 80152d0:	9310      	str	r3, [sp, #64]	; 0x40
 80152d2:	e7dd      	b.n	8015290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80152d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152d6:	230a      	movs	r3, #10
 80152d8:	4649      	mov	r1, r9
 80152da:	6820      	ldr	r0, [r4, #0]
 80152dc:	eba8 0202 	sub.w	r2, r8, r2
 80152e0:	1d25      	adds	r5, r4, #4
 80152e2:	b292      	uxth	r2, r2
 80152e4:	f7ff fd08 	bl	8014cf8 <_ZN8touchgfx7Unicode4itoaElPtti>
 80152e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80152ec:	2b2d      	cmp	r3, #45	; 0x2d
 80152ee:	d1cf      	bne.n	8015290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 80152f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80152f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80152f6:	3302      	adds	r3, #2
 80152f8:	e7ea      	b.n	80152d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 80152fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152fc:	1d25      	adds	r5, r4, #4
 80152fe:	230a      	movs	r3, #10
 8015300:	eba8 0202 	sub.w	r2, r8, r2
 8015304:	b292      	uxth	r2, r2
 8015306:	4649      	mov	r1, r9
 8015308:	6820      	ldr	r0, [r4, #0]
 801530a:	f7ff fcd7 	bl	8014cbc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801530e:	e7bf      	b.n	8015290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015312:	2310      	movs	r3, #16
 8015314:	4649      	mov	r1, r9
 8015316:	6820      	ldr	r0, [r4, #0]
 8015318:	eba8 0202 	sub.w	r2, r8, r2
 801531c:	1d25      	adds	r5, r4, #4
 801531e:	b292      	uxth	r2, r2
 8015320:	f7ff fccc 	bl	8014cbc <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8015324:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8015328:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801532c:	2b00      	cmp	r3, #0
 801532e:	d0af      	beq.n	8015290 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 8015330:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8015334:	2919      	cmp	r1, #25
 8015336:	d8f7      	bhi.n	8015328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 8015338:	3b20      	subs	r3, #32
 801533a:	8013      	strh	r3, [r2, #0]
 801533c:	e7f4      	b.n	8015328 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801533e:	9a08      	ldr	r2, [sp, #32]
 8015340:	2a00      	cmp	r2, #0
 8015342:	d0ab      	beq.n	801529c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8015344:	7812      	ldrb	r2, [r2, #0]
 8015346:	e7a9      	b.n	801529c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 8015348:	2d00      	cmp	r5, #0
 801534a:	f43f af48 	beq.w	80151de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801534e:	782d      	ldrb	r5, [r5, #0]
 8015350:	e745      	b.n	80151de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

08015352 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8015352:	b507      	push	{r0, r1, r2, lr}
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	4613      	mov	r3, r2
 8015358:	2200      	movs	r2, #0
 801535a:	f7ff fe92 	bl	8015082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801535e:	b003      	add	sp, #12
 8015360:	f85d fb04 	ldr.w	pc, [sp], #4

08015364 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8015364:	b40c      	push	{r2, r3}
 8015366:	b507      	push	{r0, r1, r2, lr}
 8015368:	ab04      	add	r3, sp, #16
 801536a:	f853 2b04 	ldr.w	r2, [r3], #4
 801536e:	9301      	str	r3, [sp, #4]
 8015370:	f7ff ffef 	bl	8015352 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8015374:	b003      	add	sp, #12
 8015376:	f85d eb04 	ldr.w	lr, [sp], #4
 801537a:	b002      	add	sp, #8
 801537c:	4770      	bx	lr
	...

08015380 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015380:	4b01      	ldr	r3, [pc, #4]	; (8015388 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015382:	6018      	str	r0, [r3, #0]
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	2400f218 	.word	0x2400f218

0801538c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801538c:	4b06      	ldr	r3, [pc, #24]	; (80153a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801538e:	881a      	ldrh	r2, [r3, #0]
 8015390:	4282      	cmp	r2, r0
 8015392:	d807      	bhi.n	80153a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015394:	4b05      	ldr	r3, [pc, #20]	; (80153ac <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015396:	881b      	ldrh	r3, [r3, #0]
 8015398:	4413      	add	r3, r2
 801539a:	4298      	cmp	r0, r3
 801539c:	bfac      	ite	ge
 801539e:	2000      	movge	r0, #0
 80153a0:	2001      	movlt	r0, #1
 80153a2:	4770      	bx	lr
 80153a4:	2000      	movs	r0, #0
 80153a6:	4770      	bx	lr
 80153a8:	2400f238 	.word	0x2400f238
 80153ac:	2400f23c 	.word	0x2400f23c

080153b0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80153b0:	b508      	push	{r3, lr}
 80153b2:	4601      	mov	r1, r0
 80153b4:	f7ff ffea 	bl	801538c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80153b8:	b118      	cbz	r0, 80153c2 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80153ba:	4b02      	ldr	r3, [pc, #8]	; (80153c4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80153c2:	bd08      	pop	{r3, pc}
 80153c4:	2400f21c 	.word	0x2400f21c

080153c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80153c8:	b538      	push	{r3, r4, r5, lr}
 80153ca:	4604      	mov	r4, r0
 80153cc:	f7ff ffde 	bl	801538c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80153d0:	b188      	cbz	r0, 80153f6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 80153d2:	4b09      	ldr	r3, [pc, #36]	; (80153f8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 80153d4:	881a      	ldrh	r2, [r3, #0]
 80153d6:	4b09      	ldr	r3, [pc, #36]	; (80153fc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 80153d8:	1aa4      	subs	r4, r4, r2
 80153da:	220e      	movs	r2, #14
 80153dc:	681d      	ldr	r5, [r3, #0]
 80153de:	4362      	muls	r2, r4
 80153e0:	18ac      	adds	r4, r5, r2
 80153e2:	7b23      	ldrb	r3, [r4, #12]
 80153e4:	f013 0320 	ands.w	r3, r3, #32
 80153e8:	bf17      	itett	ne
 80153ea:	680b      	ldrne	r3, [r1, #0]
 80153ec:	4618      	moveq	r0, r3
 80153ee:	50ab      	strne	r3, [r5, r2]
 80153f0:	684b      	ldrne	r3, [r1, #4]
 80153f2:	bf18      	it	ne
 80153f4:	6063      	strne	r3, [r4, #4]
 80153f6:	bd38      	pop	{r3, r4, r5, pc}
 80153f8:	2400f238 	.word	0x2400f238
 80153fc:	2400f220 	.word	0x2400f220

08015400 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8015400:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015404:	4606      	mov	r6, r0
 8015406:	460c      	mov	r4, r1
 8015408:	f7ff ffc0 	bl	801538c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801540c:	b918      	cbnz	r0, 8015416 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801540e:	2000      	movs	r0, #0
 8015410:	b002      	add	sp, #8
 8015412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015416:	4608      	mov	r0, r1
 8015418:	f7f7 fe4f 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 801541c:	2800      	cmp	r0, #0
 801541e:	d1f6      	bne.n	801540e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015420:	4b3f      	ldr	r3, [pc, #252]	; (8015520 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8015422:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8015524 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8015426:	881d      	ldrh	r5, [r3, #0]
 8015428:	f8d9 a000 	ldr.w	sl, [r9]
 801542c:	46c8      	mov	r8, r9
 801542e:	1b73      	subs	r3, r6, r5
 8015430:	250e      	movs	r5, #14
 8015432:	435d      	muls	r5, r3
 8015434:	eb0a 0705 	add.w	r7, sl, r5
 8015438:	7b3b      	ldrb	r3, [r7, #12]
 801543a:	f013 0f20 	tst.w	r3, #32
 801543e:	d0e6      	beq.n	801540e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015440:	4621      	mov	r1, r4
 8015442:	4638      	mov	r0, r7
 8015444:	f7fc ff58 	bl	80122f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015448:	2800      	cmp	r0, #0
 801544a:	d1e1      	bne.n	8015410 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801544c:	4639      	mov	r1, r7
 801544e:	4620      	mov	r0, r4
 8015450:	f7fc ff52 	bl	80122f8 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015454:	b108      	cbz	r0, 801545a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015456:	4621      	mov	r1, r4
 8015458:	e020      	b.n	801549c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801545a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801545e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8015462:	429a      	cmp	r2, r3
 8015464:	d11e      	bne.n	80154a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015466:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801546a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801546e:	429a      	cmp	r2, r3
 8015470:	d118      	bne.n	80154a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015472:	6820      	ldr	r0, [r4, #0]
 8015474:	466b      	mov	r3, sp
 8015476:	6861      	ldr	r1, [r4, #4]
 8015478:	c303      	stmia	r3!, {r0, r1}
 801547a:	4639      	mov	r1, r7
 801547c:	4668      	mov	r0, sp
 801547e:	f7f9 fe24 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015482:	f8d9 3000 	ldr.w	r3, [r9]
 8015486:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801548a:	442b      	add	r3, r5
 801548c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015490:	4413      	add	r3, r2
 8015492:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015496:	4293      	cmp	r3, r2
 8015498:	dc04      	bgt.n	80154a4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801549a:	4669      	mov	r1, sp
 801549c:	4630      	mov	r0, r6
 801549e:	f7ff ff93 	bl	80153c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80154a2:	e7b5      	b.n	8015410 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80154a4:	f8d8 3000 	ldr.w	r3, [r8]
 80154a8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80154ac:	442b      	add	r3, r5
 80154ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80154b2:	4291      	cmp	r1, r2
 80154b4:	d119      	bne.n	80154ea <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80154b6:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80154ba:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80154be:	4291      	cmp	r1, r2
 80154c0:	d113      	bne.n	80154ea <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80154c2:	6820      	ldr	r0, [r4, #0]
 80154c4:	466a      	mov	r2, sp
 80154c6:	6861      	ldr	r1, [r4, #4]
 80154c8:	c203      	stmia	r2!, {r0, r1}
 80154ca:	4619      	mov	r1, r3
 80154cc:	4668      	mov	r0, sp
 80154ce:	f7f9 fdfc 	bl	800f0ca <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80154d2:	f8d8 3000 	ldr.w	r3, [r8]
 80154d6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80154da:	442b      	add	r3, r5
 80154dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154e0:	4413      	add	r3, r2
 80154e2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80154e6:	4293      	cmp	r3, r2
 80154e8:	ddd7      	ble.n	801549a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80154ea:	4620      	mov	r0, r4
 80154ec:	f7f7 fde5 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 80154f0:	b990      	cbnz	r0, 8015518 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80154f2:	88a7      	ldrh	r7, [r4, #4]
 80154f4:	88e3      	ldrh	r3, [r4, #6]
 80154f6:	fb17 f703 	smulbb	r7, r7, r3
 80154fa:	f8d8 3000 	ldr.w	r3, [r8]
 80154fe:	441d      	add	r5, r3
 8015500:	4628      	mov	r0, r5
 8015502:	f7f7 fdda 	bl	800d0ba <_ZNK8touchgfx4Rect7isEmptyEv>
 8015506:	b948      	cbnz	r0, 801551c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8015508:	88ab      	ldrh	r3, [r5, #4]
 801550a:	88ea      	ldrh	r2, [r5, #6]
 801550c:	fb13 f302 	smulbb	r3, r3, r2
 8015510:	42bb      	cmp	r3, r7
 8015512:	f4bf af7c 	bcs.w	801540e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015516:	e79e      	b.n	8015456 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8015518:	2700      	movs	r7, #0
 801551a:	e7ee      	b.n	80154fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801551c:	2300      	movs	r3, #0
 801551e:	e7f7      	b.n	8015510 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8015520:	2400f238 	.word	0x2400f238
 8015524:	2400f220 	.word	0x2400f220

08015528 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015528:	b5f0      	push	{r4, r5, r6, r7, lr}
 801552a:	4c24      	ldr	r4, [pc, #144]	; (80155bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801552c:	6823      	ldr	r3, [r4, #0]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d042      	beq.n	80155b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015532:	4a23      	ldr	r2, [pc, #140]	; (80155c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015534:	4d23      	ldr	r5, [pc, #140]	; (80155c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015536:	8811      	ldrh	r1, [r2, #0]
 8015538:	f8b5 c000 	ldrh.w	ip, [r5]
 801553c:	4822      	ldr	r0, [pc, #136]	; (80155c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801553e:	4461      	add	r1, ip
 8015540:	1c4a      	adds	r2, r1, #1
 8015542:	008f      	lsls	r7, r1, #2
 8015544:	f022 0201 	bic.w	r2, r2, #1
 8015548:	19de      	adds	r6, r3, r7
 801554a:	0412      	lsls	r2, r2, #16
 801554c:	6006      	str	r6, [r0, #0]
 801554e:	4e1f      	ldr	r6, [pc, #124]	; (80155cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015550:	0c12      	lsrs	r2, r2, #16
 8015552:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015556:	19da      	adds	r2, r3, r7
 8015558:	6032      	str	r2, [r6, #0]
 801555a:	220e      	movs	r2, #14
 801555c:	fb02 f20c 	mul.w	r2, r2, ip
 8015560:	3203      	adds	r2, #3
 8015562:	f022 0203 	bic.w	r2, r2, #3
 8015566:	443a      	add	r2, r7
 8015568:	4f19      	ldr	r7, [pc, #100]	; (80155d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801556a:	4413      	add	r3, r2
 801556c:	603b      	str	r3, [r7, #0]
 801556e:	2300      	movs	r3, #0
 8015570:	4f18      	ldr	r7, [pc, #96]	; (80155d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015572:	469c      	mov	ip, r3
 8015574:	803b      	strh	r3, [r7, #0]
 8015576:	4f18      	ldr	r7, [pc, #96]	; (80155d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015578:	683f      	ldr	r7, [r7, #0]
 801557a:	1aba      	subs	r2, r7, r2
 801557c:	4f17      	ldr	r7, [pc, #92]	; (80155dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801557e:	603a      	str	r2, [r7, #0]
 8015580:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015584:	4a16      	ldr	r2, [pc, #88]	; (80155e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015586:	8013      	strh	r3, [r2, #0]
 8015588:	428b      	cmp	r3, r1
 801558a:	d10d      	bne.n	80155a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801558c:	882d      	ldrh	r5, [r5, #0]
 801558e:	2300      	movs	r3, #0
 8015590:	6830      	ldr	r0, [r6, #0]
 8015592:	240e      	movs	r4, #14
 8015594:	429d      	cmp	r5, r3
 8015596:	d90f      	bls.n	80155b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015598:	fb04 0203 	mla	r2, r4, r3, r0
 801559c:	3301      	adds	r3, #1
 801559e:	7b11      	ldrb	r1, [r2, #12]
 80155a0:	f36f 1145 	bfc	r1, #5, #1
 80155a4:	7311      	strb	r1, [r2, #12]
 80155a6:	e7f5      	b.n	8015594 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80155a8:	6822      	ldr	r2, [r4, #0]
 80155aa:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80155ae:	6802      	ldr	r2, [r0, #0]
 80155b0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80155b4:	3301      	adds	r3, #1
 80155b6:	e7e7      	b.n	8015588 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80155b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155ba:	bf00      	nop
 80155bc:	2400f21c 	.word	0x2400f21c
 80155c0:	2400f238 	.word	0x2400f238
 80155c4:	2400f23c 	.word	0x2400f23c
 80155c8:	2400f230 	.word	0x2400f230
 80155cc:	2400f220 	.word	0x2400f220
 80155d0:	2400f228 	.word	0x2400f228
 80155d4:	2400f23a 	.word	0x2400f23a
 80155d8:	2400f224 	.word	0x2400f224
 80155dc:	2400f234 	.word	0x2400f234
 80155e0:	2400f22c 	.word	0x2400f22c

080155e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80155e4:	4b10      	ldr	r3, [pc, #64]	; (8015628 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 80155e6:	b510      	push	{r4, lr}
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	b9db      	cbnz	r3, 8015624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80155ec:	b1d1      	cbz	r1, 8015624 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 80155ee:	4b0f      	ldr	r3, [pc, #60]	; (801562c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 80155f0:	240e      	movs	r4, #14
 80155f2:	801a      	strh	r2, [r3, #0]
 80155f4:	b292      	uxth	r2, r2
 80155f6:	4b0e      	ldr	r3, [pc, #56]	; (8015630 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	4413      	add	r3, r2
 80155fc:	4362      	muls	r2, r4
 80155fe:	2406      	movs	r4, #6
 8015600:	fb04 2203 	mla	r2, r4, r3, r2
 8015604:	428a      	cmp	r2, r1
 8015606:	d305      	bcc.n	8015614 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 8015608:	4b0a      	ldr	r3, [pc, #40]	; (8015634 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801560a:	2134      	movs	r1, #52	; 0x34
 801560c:	4a0a      	ldr	r2, [pc, #40]	; (8015638 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801560e:	480b      	ldr	r0, [pc, #44]	; (801563c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 8015610:	f00a fdc0 	bl	8020194 <__assert_func>
 8015614:	4b0a      	ldr	r3, [pc, #40]	; (8015640 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8015616:	6019      	str	r1, [r3, #0]
 8015618:	4b0a      	ldr	r3, [pc, #40]	; (8015644 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801561a:	6018      	str	r0, [r3, #0]
 801561c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015620:	f7ff bf82 	b.w	8015528 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015624:	bd10      	pop	{r4, pc}
 8015626:	bf00      	nop
 8015628:	2400f228 	.word	0x2400f228
 801562c:	2400f23c 	.word	0x2400f23c
 8015630:	2400f238 	.word	0x2400f238
 8015634:	08025c2e 	.word	0x08025c2e
 8015638:	08025cc3 	.word	0x08025cc3
 801563c:	08025c09 	.word	0x08025c09
 8015640:	2400f224 	.word	0x2400f224
 8015644:	2400f21c 	.word	0x2400f21c

08015648 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015648:	b470      	push	{r4, r5, r6}
 801564a:	4c07      	ldr	r4, [pc, #28]	; (8015668 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801564c:	4605      	mov	r5, r0
 801564e:	4610      	mov	r0, r2
 8015650:	9a03      	ldr	r2, [sp, #12]
 8015652:	6826      	ldr	r6, [r4, #0]
 8015654:	b936      	cbnz	r6, 8015664 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015656:	6025      	str	r5, [r4, #0]
 8015658:	4c04      	ldr	r4, [pc, #16]	; (801566c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801565a:	8021      	strh	r1, [r4, #0]
 801565c:	4619      	mov	r1, r3
 801565e:	bc70      	pop	{r4, r5, r6}
 8015660:	f7ff bfc0 	b.w	80155e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015664:	bc70      	pop	{r4, r5, r6}
 8015666:	4770      	bx	lr
 8015668:	2400f240 	.word	0x2400f240
 801566c:	2400f238 	.word	0x2400f238

08015670 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015670:	b508      	push	{r3, lr}
 8015672:	4b17      	ldr	r3, [pc, #92]	; (80156d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015674:	6819      	ldr	r1, [r3, #0]
 8015676:	b931      	cbnz	r1, 8015686 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 8015678:	4b16      	ldr	r3, [pc, #88]	; (80156d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801567a:	f240 4184 	movw	r1, #1156	; 0x484
 801567e:	4a16      	ldr	r2, [pc, #88]	; (80156d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 8015680:	4816      	ldr	r0, [pc, #88]	; (80156dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 8015682:	f00a fd87 	bl	8020194 <__assert_func>
 8015686:	4a16      	ldr	r2, [pc, #88]	; (80156e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 8015688:	8803      	ldrh	r3, [r0, #0]
 801568a:	8812      	ldrh	r2, [r2, #0]
 801568c:	4293      	cmp	r3, r2
 801568e:	d204      	bcs.n	801569a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8015690:	2214      	movs	r2, #20
 8015692:	fb02 1303 	mla	r3, r2, r3, r1
 8015696:	8918      	ldrh	r0, [r3, #8]
 8015698:	bd08      	pop	{r3, pc}
 801569a:	4912      	ldr	r1, [pc, #72]	; (80156e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x74>)
 801569c:	8809      	ldrh	r1, [r1, #0]
 801569e:	4411      	add	r1, r2
 80156a0:	428b      	cmp	r3, r1
 80156a2:	da06      	bge.n	80156b2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 80156a4:	1a9b      	subs	r3, r3, r2
 80156a6:	4a10      	ldr	r2, [pc, #64]	; (80156e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x78>)
 80156a8:	210e      	movs	r1, #14
 80156aa:	6812      	ldr	r2, [r2, #0]
 80156ac:	fb01 2303 	mla	r3, r1, r3, r2
 80156b0:	e7f1      	b.n	8015696 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80156b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80156b6:	4293      	cmp	r3, r2
 80156b8:	d107      	bne.n	80156ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x5a>
 80156ba:	4b0c      	ldr	r3, [pc, #48]	; (80156ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x7c>)
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	b913      	cbnz	r3, 80156c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x56>
 80156c0:	4b0b      	ldr	r3, [pc, #44]	; (80156f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x80>)
 80156c2:	8818      	ldrh	r0, [r3, #0]
 80156c4:	e7e8      	b.n	8015698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80156c6:	4b0b      	ldr	r3, [pc, #44]	; (80156f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x84>)
 80156c8:	e7fb      	b.n	80156c2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x52>
 80156ca:	2000      	movs	r0, #0
 80156cc:	e7e4      	b.n	8015698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 80156ce:	bf00      	nop
 80156d0:	2400f240 	.word	0x2400f240
 80156d4:	08025c87 	.word	0x08025c87
 80156d8:	08025d70 	.word	0x08025d70
 80156dc:	08025c09 	.word	0x08025c09
 80156e0:	2400f238 	.word	0x2400f238
 80156e4:	2400f23c 	.word	0x2400f23c
 80156e8:	2400f220 	.word	0x2400f220
 80156ec:	2400f190 	.word	0x2400f190
 80156f0:	2400f192 	.word	0x2400f192
 80156f4:	2400f194 	.word	0x2400f194

080156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80156f8:	b508      	push	{r3, lr}
 80156fa:	4b17      	ldr	r3, [pc, #92]	; (8015758 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80156fc:	6819      	ldr	r1, [r3, #0]
 80156fe:	b931      	cbnz	r1, 801570e <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 8015700:	4b16      	ldr	r3, [pc, #88]	; (801575c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8015702:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8015706:	4a16      	ldr	r2, [pc, #88]	; (8015760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 8015708:	4816      	ldr	r0, [pc, #88]	; (8015764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801570a:	f00a fd43 	bl	8020194 <__assert_func>
 801570e:	4a16      	ldr	r2, [pc, #88]	; (8015768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 8015710:	8803      	ldrh	r3, [r0, #0]
 8015712:	8812      	ldrh	r2, [r2, #0]
 8015714:	4293      	cmp	r3, r2
 8015716:	d204      	bcs.n	8015722 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8015718:	2214      	movs	r2, #20
 801571a:	fb02 1303 	mla	r3, r2, r3, r1
 801571e:	8958      	ldrh	r0, [r3, #10]
 8015720:	bd08      	pop	{r3, pc}
 8015722:	4912      	ldr	r1, [pc, #72]	; (801576c <_ZNK8touchgfx6Bitmap9getHeightEv+0x74>)
 8015724:	8809      	ldrh	r1, [r1, #0]
 8015726:	4411      	add	r1, r2
 8015728:	428b      	cmp	r3, r1
 801572a:	da06      	bge.n	801573a <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801572c:	1a9b      	subs	r3, r3, r2
 801572e:	4a10      	ldr	r2, [pc, #64]	; (8015770 <_ZNK8touchgfx6Bitmap9getHeightEv+0x78>)
 8015730:	210e      	movs	r1, #14
 8015732:	6812      	ldr	r2, [r2, #0]
 8015734:	fb01 2303 	mla	r3, r1, r3, r2
 8015738:	e7f1      	b.n	801571e <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801573a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801573e:	4293      	cmp	r3, r2
 8015740:	d107      	bne.n	8015752 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5a>
 8015742:	4b0c      	ldr	r3, [pc, #48]	; (8015774 <_ZNK8touchgfx6Bitmap9getHeightEv+0x7c>)
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	b913      	cbnz	r3, 801574e <_ZNK8touchgfx6Bitmap9getHeightEv+0x56>
 8015748:	4b0b      	ldr	r3, [pc, #44]	; (8015778 <_ZNK8touchgfx6Bitmap9getHeightEv+0x80>)
 801574a:	8818      	ldrh	r0, [r3, #0]
 801574c:	e7e8      	b.n	8015720 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801574e:	4b0b      	ldr	r3, [pc, #44]	; (801577c <_ZNK8touchgfx6Bitmap9getHeightEv+0x84>)
 8015750:	e7fb      	b.n	801574a <_ZNK8touchgfx6Bitmap9getHeightEv+0x52>
 8015752:	2000      	movs	r0, #0
 8015754:	e7e4      	b.n	8015720 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 8015756:	bf00      	nop
 8015758:	2400f240 	.word	0x2400f240
 801575c:	08025c87 	.word	0x08025c87
 8015760:	08025d9c 	.word	0x08025d9c
 8015764:	08025c09 	.word	0x08025c09
 8015768:	2400f238 	.word	0x2400f238
 801576c:	2400f23c 	.word	0x2400f23c
 8015770:	2400f220 	.word	0x2400f220
 8015774:	2400f190 	.word	0x2400f190
 8015778:	2400f194 	.word	0x2400f194
 801577c:	2400f192 	.word	0x2400f192

08015780 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8015780:	4b23      	ldr	r3, [pc, #140]	; (8015810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8015782:	b510      	push	{r4, lr}
 8015784:	681c      	ldr	r4, [r3, #0]
 8015786:	b934      	cbnz	r4, 8015796 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 8015788:	4b22      	ldr	r3, [pc, #136]	; (8015814 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801578a:	f240 41ac 	movw	r1, #1196	; 0x4ac
 801578e:	4a22      	ldr	r2, [pc, #136]	; (8015818 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8015790:	4822      	ldr	r0, [pc, #136]	; (801581c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015792:	f00a fcff 	bl	8020194 <__assert_func>
 8015796:	4a22      	ldr	r2, [pc, #136]	; (8015820 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015798:	880b      	ldrh	r3, [r1, #0]
 801579a:	8812      	ldrh	r2, [r2, #0]
 801579c:	4293      	cmp	r3, r2
 801579e:	d211      	bcs.n	80157c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 80157a0:	2214      	movs	r2, #20
 80157a2:	fb02 4303 	mla	r3, r2, r3, r4
 80157a6:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80157aa:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80157ae:	8a1a      	ldrh	r2, [r3, #16]
 80157b0:	8a5b      	ldrh	r3, [r3, #18]
 80157b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80157b6:	8004      	strh	r4, [r0, #0]
 80157b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157bc:	8041      	strh	r1, [r0, #2]
 80157be:	8082      	strh	r2, [r0, #4]
 80157c0:	80c3      	strh	r3, [r0, #6]
 80157c2:	e00e      	b.n	80157e2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 80157c4:	4917      	ldr	r1, [pc, #92]	; (8015824 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80157c6:	8809      	ldrh	r1, [r1, #0]
 80157c8:	4411      	add	r1, r2
 80157ca:	428b      	cmp	r3, r1
 80157cc:	da0a      	bge.n	80157e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 80157ce:	1a9b      	subs	r3, r3, r2
 80157d0:	4a15      	ldr	r2, [pc, #84]	; (8015828 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80157d2:	210e      	movs	r1, #14
 80157d4:	6812      	ldr	r2, [r2, #0]
 80157d6:	fb01 2303 	mla	r3, r1, r3, r2
 80157da:	681a      	ldr	r2, [r3, #0]
 80157dc:	6002      	str	r2, [r0, #0]
 80157de:	685a      	ldr	r2, [r3, #4]
 80157e0:	6042      	str	r2, [r0, #4]
 80157e2:	bd10      	pop	{r4, pc}
 80157e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80157e8:	4293      	cmp	r3, r2
 80157ea:	d10b      	bne.n	8015804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 80157ec:	4b0f      	ldr	r3, [pc, #60]	; (801582c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80157ee:	f9b3 1000 	ldrsh.w	r1, [r3]
 80157f2:	4b0f      	ldr	r3, [pc, #60]	; (8015830 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 80157f4:	8081      	strh	r1, [r0, #4]
 80157f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157fa:	2300      	movs	r3, #0
 80157fc:	80c2      	strh	r2, [r0, #6]
 80157fe:	8003      	strh	r3, [r0, #0]
 8015800:	8043      	strh	r3, [r0, #2]
 8015802:	e7ee      	b.n	80157e2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 8015804:	2300      	movs	r3, #0
 8015806:	8003      	strh	r3, [r0, #0]
 8015808:	8043      	strh	r3, [r0, #2]
 801580a:	8083      	strh	r3, [r0, #4]
 801580c:	e7d8      	b.n	80157c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801580e:	bf00      	nop
 8015810:	2400f240 	.word	0x2400f240
 8015814:	08025c87 	.word	0x08025c87
 8015818:	08025d09 	.word	0x08025d09
 801581c:	08025c09 	.word	0x08025c09
 8015820:	2400f238 	.word	0x2400f238
 8015824:	2400f23c 	.word	0x2400f23c
 8015828:	2400f220 	.word	0x2400f220
 801582c:	2400f18c 	.word	0x2400f18c
 8015830:	2400f18e 	.word	0x2400f18e

08015834 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8015834:	b508      	push	{r3, lr}
 8015836:	4b12      	ldr	r3, [pc, #72]	; (8015880 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8015838:	6819      	ldr	r1, [r3, #0]
 801583a:	b931      	cbnz	r1, 801584a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801583c:	4b11      	ldr	r3, [pc, #68]	; (8015884 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801583e:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8015842:	4a11      	ldr	r2, [pc, #68]	; (8015888 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015844:	4811      	ldr	r0, [pc, #68]	; (801588c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015846:	f00a fca5 	bl	8020194 <__assert_func>
 801584a:	8803      	ldrh	r3, [r0, #0]
 801584c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015850:	4293      	cmp	r3, r2
 8015852:	d012      	beq.n	801587a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8015854:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015858:	4293      	cmp	r3, r2
 801585a:	d103      	bne.n	8015864 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801585c:	4b0c      	ldr	r3, [pc, #48]	; (8015890 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8015862:	bd08      	pop	{r3, pc}
 8015864:	4a0b      	ldr	r2, [pc, #44]	; (8015894 <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 8015866:	6812      	ldr	r2, [r2, #0]
 8015868:	b11a      	cbz	r2, 8015872 <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801586a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801586e:	2800      	cmp	r0, #0
 8015870:	d1f7      	bne.n	8015862 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 8015872:	2214      	movs	r2, #20
 8015874:	4353      	muls	r3, r2
 8015876:	58c8      	ldr	r0, [r1, r3]
 8015878:	e7f3      	b.n	8015862 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801587a:	2000      	movs	r0, #0
 801587c:	e7f1      	b.n	8015862 <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801587e:	bf00      	nop
 8015880:	2400f240 	.word	0x2400f240
 8015884:	08025c87 	.word	0x08025c87
 8015888:	08025d3f 	.word	0x08025d3f
 801588c:	08025c09 	.word	0x08025c09
 8015890:	2400f198 	.word	0x2400f198
 8015894:	2400f21c 	.word	0x2400f21c

08015898 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8015898:	8802      	ldrh	r2, [r0, #0]
 801589a:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801589e:	429a      	cmp	r2, r3
 80158a0:	d845      	bhi.n	801592e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80158a2:	4b24      	ldr	r3, [pc, #144]	; (8015934 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80158a4:	8818      	ldrh	r0, [r3, #0]
 80158a6:	4282      	cmp	r2, r0
 80158a8:	d221      	bcs.n	80158ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 80158aa:	4b23      	ldr	r3, [pc, #140]	; (8015938 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80158ac:	6819      	ldr	r1, [r3, #0]
 80158ae:	2314      	movs	r3, #20
 80158b0:	fb03 1302 	mla	r3, r3, r2, r1
 80158b4:	6858      	ldr	r0, [r3, #4]
 80158b6:	2800      	cmp	r0, #0
 80158b8:	d03a      	beq.n	8015930 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80158ba:	4920      	ldr	r1, [pc, #128]	; (801593c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80158bc:	6809      	ldr	r1, [r1, #0]
 80158be:	2900      	cmp	r1, #0
 80158c0:	d036      	beq.n	8015930 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80158c2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80158c6:	2900      	cmp	r1, #0
 80158c8:	d032      	beq.n	8015930 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 80158ca:	891a      	ldrh	r2, [r3, #8]
 80158cc:	8958      	ldrh	r0, [r3, #10]
 80158ce:	4350      	muls	r0, r2
 80158d0:	7c5a      	ldrb	r2, [r3, #17]
 80158d2:	7cdb      	ldrb	r3, [r3, #19]
 80158d4:	0952      	lsrs	r2, r2, #5
 80158d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80158da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80158de:	2b0b      	cmp	r3, #11
 80158e0:	bf18      	it	ne
 80158e2:	0040      	lslne	r0, r0, #1
 80158e4:	3003      	adds	r0, #3
 80158e6:	f020 0003 	bic.w	r0, r0, #3
 80158ea:	4408      	add	r0, r1
 80158ec:	4770      	bx	lr
 80158ee:	4b14      	ldr	r3, [pc, #80]	; (8015940 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 80158f0:	881b      	ldrh	r3, [r3, #0]
 80158f2:	4403      	add	r3, r0
 80158f4:	429a      	cmp	r2, r3
 80158f6:	da1a      	bge.n	801592e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 80158f8:	4b12      	ldr	r3, [pc, #72]	; (8015944 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 80158fa:	1a10      	subs	r0, r2, r0
 80158fc:	210e      	movs	r1, #14
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	fb01 3000 	mla	r0, r1, r0, r3
 8015904:	7b03      	ldrb	r3, [r0, #12]
 8015906:	f003 031f 	and.w	r3, r3, #31
 801590a:	2b0b      	cmp	r3, #11
 801590c:	d10b      	bne.n	8015926 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801590e:	8903      	ldrh	r3, [r0, #8]
 8015910:	8940      	ldrh	r0, [r0, #10]
 8015912:	4358      	muls	r0, r3
 8015914:	4b09      	ldr	r3, [pc, #36]	; (801593c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015916:	3003      	adds	r0, #3
 8015918:	6819      	ldr	r1, [r3, #0]
 801591a:	f020 0303 	bic.w	r3, r0, #3
 801591e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015922:	4418      	add	r0, r3
 8015924:	4770      	bx	lr
 8015926:	2b0d      	cmp	r3, #13
 8015928:	d101      	bne.n	801592e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801592a:	300d      	adds	r0, #13
 801592c:	4770      	bx	lr
 801592e:	2000      	movs	r0, #0
 8015930:	4770      	bx	lr
 8015932:	bf00      	nop
 8015934:	2400f238 	.word	0x2400f238
 8015938:	2400f240 	.word	0x2400f240
 801593c:	2400f21c 	.word	0x2400f21c
 8015940:	2400f23c 	.word	0x2400f23c
 8015944:	2400f220 	.word	0x2400f220

08015948 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015948:	4b17      	ldr	r3, [pc, #92]	; (80159a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801594a:	b510      	push	{r4, lr}
 801594c:	6819      	ldr	r1, [r3, #0]
 801594e:	8803      	ldrh	r3, [r0, #0]
 8015950:	b1e9      	cbz	r1, 801598e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 8015952:	4a16      	ldr	r2, [pc, #88]	; (80159ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015954:	8812      	ldrh	r2, [r2, #0]
 8015956:	429a      	cmp	r2, r3
 8015958:	d90a      	bls.n	8015970 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801595a:	2214      	movs	r2, #20
 801595c:	fb02 1303 	mla	r3, r2, r3, r1
 8015960:	7c58      	ldrb	r0, [r3, #17]
 8015962:	0942      	lsrs	r2, r0, #5
 8015964:	7cd8      	ldrb	r0, [r3, #19]
 8015966:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801596a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801596e:	bd10      	pop	{r4, pc}
 8015970:	490f      	ldr	r1, [pc, #60]	; (80159b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015972:	8809      	ldrh	r1, [r1, #0]
 8015974:	4411      	add	r1, r2
 8015976:	428b      	cmp	r3, r1
 8015978:	da09      	bge.n	801598e <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801597a:	1a9b      	subs	r3, r3, r2
 801597c:	4a0d      	ldr	r2, [pc, #52]	; (80159b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801597e:	210e      	movs	r1, #14
 8015980:	6812      	ldr	r2, [r2, #0]
 8015982:	fb01 2303 	mla	r3, r1, r3, r2
 8015986:	7b18      	ldrb	r0, [r3, #12]
 8015988:	f000 001f 	and.w	r0, r0, #31
 801598c:	e7ef      	b.n	801596e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801598e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015992:	4293      	cmp	r3, r2
 8015994:	d106      	bne.n	80159a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8015996:	f7f7 fe1b 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 801599a:	6803      	ldr	r3, [r0, #0]
 801599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a2:	4718      	bx	r3
 80159a4:	2000      	movs	r0, #0
 80159a6:	e7e2      	b.n	801596e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80159a8:	2400f240 	.word	0x2400f240
 80159ac:	2400f238 	.word	0x2400f238
 80159b0:	2400f23c 	.word	0x2400f23c
 80159b4:	2400f220 	.word	0x2400f220

080159b8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80159b8:	2018      	movs	r0, #24
 80159ba:	4770      	bx	lr

080159bc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80159bc:	2001      	movs	r0, #1
 80159be:	4770      	bx	lr

080159c0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80159c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159c4:	b085      	sub	sp, #20
 80159c6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80159c8:	9203      	str	r2, [sp, #12]
 80159ca:	6870      	ldr	r0, [r6, #4]
 80159cc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80159d0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80159d4:	9101      	str	r1, [sp, #4]
 80159d6:	fa1f f885 	uxth.w	r8, r5
 80159da:	43ed      	mvns	r5, r5
 80159dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80159e0:	b2ed      	uxtb	r5, r5
 80159e2:	fb00 2404 	mla	r4, r0, r4, r2
 80159e6:	6832      	ldr	r2, [r6, #0]
 80159e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80159ec:	4414      	add	r4, r2
 80159ee:	f8dc 2000 	ldr.w	r2, [ip]
 80159f2:	9202      	str	r2, [sp, #8]
 80159f4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80159f8:	f102 0e04 	add.w	lr, r2, #4
 80159fc:	9a01      	ldr	r2, [sp, #4]
 80159fe:	2a00      	cmp	r2, #0
 8015a00:	dc03      	bgt.n	8015a0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015a02:	9a03      	ldr	r2, [sp, #12]
 8015a04:	2a00      	cmp	r2, #0
 8015a06:	f340 8116 	ble.w	8015c36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a0c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015a10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015a16:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015a1a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	dd0e      	ble.n	8015a40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015a22:	1406      	asrs	r6, r0, #16
 8015a24:	d405      	bmi.n	8015a32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a26:	4556      	cmp	r6, sl
 8015a28:	da03      	bge.n	8015a32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a2a:	1416      	asrs	r6, r2, #16
 8015a2c:	d401      	bmi.n	8015a32 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a2e:	454e      	cmp	r6, r9
 8015a30:	db07      	blt.n	8015a42 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015a32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015a34:	3b01      	subs	r3, #1
 8015a36:	3403      	adds	r4, #3
 8015a38:	4430      	add	r0, r6
 8015a3a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015a3c:	4432      	add	r2, r6
 8015a3e:	e7ee      	b.n	8015a1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015a40:	d063      	beq.n	8015b0a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015a42:	1e5e      	subs	r6, r3, #1
 8015a44:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015a46:	fb07 0706 	mla	r7, r7, r6, r0
 8015a4a:	143f      	asrs	r7, r7, #16
 8015a4c:	d454      	bmi.n	8015af8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a4e:	4557      	cmp	r7, sl
 8015a50:	da52      	bge.n	8015af8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a52:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015a54:	fb07 2606 	mla	r6, r7, r6, r2
 8015a58:	1436      	asrs	r6, r6, #16
 8015a5a:	d44d      	bmi.n	8015af8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a5c:	454e      	cmp	r6, r9
 8015a5e:	da4b      	bge.n	8015af8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a60:	1ce6      	adds	r6, r4, #3
 8015a62:	4699      	mov	r9, r3
 8015a64:	f1b9 0f00 	cmp.w	r9, #0
 8015a68:	f106 0603 	add.w	r6, r6, #3
 8015a6c:	dd48      	ble.n	8015b00 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015a6e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015a72:	1417      	asrs	r7, r2, #16
 8015a74:	9902      	ldr	r1, [sp, #8]
 8015a76:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015a7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8015a7e:	fb0b 1707 	mla	r7, fp, r7, r1
 8015a82:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015a86:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015a88:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015a8c:	fb1b fb05 	smulbb	fp, fp, r5
 8015a90:	4408      	add	r0, r1
 8015a92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015a94:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015a98:	440a      	add	r2, r1
 8015a9a:	eb0e 0a07 	add.w	sl, lr, r7
 8015a9e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015aa2:	fb07 b708 	mla	r7, r7, r8, fp
 8015aa6:	b2bf      	uxth	r7, r7
 8015aa8:	f107 0b01 	add.w	fp, r7, #1
 8015aac:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ab0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015ab4:	fb1b fb05 	smulbb	fp, fp, r5
 8015ab8:	123f      	asrs	r7, r7, #8
 8015aba:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015abe:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015ac2:	fb07 b708 	mla	r7, r7, r8, fp
 8015ac6:	b2bf      	uxth	r7, r7
 8015ac8:	f107 0b01 	add.w	fp, r7, #1
 8015acc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ad0:	123f      	asrs	r7, r7, #8
 8015ad2:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015ad6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015ada:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015ade:	fb1a fa05 	smulbb	sl, sl, r5
 8015ae2:	fb07 a708 	mla	r7, r7, r8, sl
 8015ae6:	b2bf      	uxth	r7, r7
 8015ae8:	f107 0a01 	add.w	sl, r7, #1
 8015aec:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015af0:	123f      	asrs	r7, r7, #8
 8015af2:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015af6:	e7b5      	b.n	8015a64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015af8:	2700      	movs	r7, #0
 8015afa:	1bde      	subs	r6, r3, r7
 8015afc:	2e00      	cmp	r6, #0
 8015afe:	dc42      	bgt.n	8015b86 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015b00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b08:	441c      	add	r4, r3
 8015b0a:	9b01      	ldr	r3, [sp, #4]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	f340 8092 	ble.w	8015c36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015b16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b18:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015b1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015b20:	eef0 6a62 	vmov.f32	s13, s5
 8015b24:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015b28:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015b2c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b30:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015b34:	eef0 6a43 	vmov.f32	s13, s6
 8015b38:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b3c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015b40:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015b44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015b48:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015b4c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015b50:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015b54:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015b58:	ee12 2a90 	vmov	r2, s5
 8015b5c:	eef0 2a47 	vmov.f32	s5, s14
 8015b60:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b64:	ee13 2a10 	vmov	r2, s6
 8015b68:	9311      	str	r3, [sp, #68]	; 0x44
 8015b6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b6c:	eeb0 3a67 	vmov.f32	s6, s15
 8015b70:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b74:	9312      	str	r3, [sp, #72]	; 0x48
 8015b76:	9b01      	ldr	r3, [sp, #4]
 8015b78:	9a03      	ldr	r2, [sp, #12]
 8015b7a:	3b01      	subs	r3, #1
 8015b7c:	9301      	str	r3, [sp, #4]
 8015b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b80:	bf08      	it	eq
 8015b82:	4613      	moveq	r3, r2
 8015b84:	e73a      	b.n	80159fc <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015b86:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015b8a:	d44e      	bmi.n	8015c2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b8c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015b90:	4556      	cmp	r6, sl
 8015b92:	dd4a      	ble.n	8015c2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b94:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015b98:	d447      	bmi.n	8015c2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015b9a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015b9e:	4559      	cmp	r1, fp
 8015ba0:	dd43      	ble.n	8015c2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015ba2:	fa0f f986 	sxth.w	r9, r6
 8015ba6:	9902      	ldr	r1, [sp, #8]
 8015ba8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015bac:	fb0b 1909 	mla	r9, fp, r9, r1
 8015bb0:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015bb4:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015bb8:	fb1b fb05 	smulbb	fp, fp, r5
 8015bbc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015bc0:	eb0e 0a09 	add.w	sl, lr, r9
 8015bc4:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015bc8:	fb09 b908 	mla	r9, r9, r8, fp
 8015bcc:	fa1f f989 	uxth.w	r9, r9
 8015bd0:	f109 0b01 	add.w	fp, r9, #1
 8015bd4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015bd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015bdc:	f804 9006 	strb.w	r9, [r4, r6]
 8015be0:	4426      	add	r6, r4
 8015be2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015be6:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015bea:	fb1b fb05 	smulbb	fp, fp, r5
 8015bee:	fb09 b908 	mla	r9, r9, r8, fp
 8015bf2:	fa1f f989 	uxth.w	r9, r9
 8015bf6:	f109 0b01 	add.w	fp, r9, #1
 8015bfa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015bfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c02:	f886 9001 	strb.w	r9, [r6, #1]
 8015c06:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015c0a:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015c0e:	fb1a fa05 	smulbb	sl, sl, r5
 8015c12:	fb09 a908 	mla	r9, r9, r8, sl
 8015c16:	fa1f f989 	uxth.w	r9, r9
 8015c1a:	f109 0a01 	add.w	sl, r9, #1
 8015c1e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015c22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c26:	f886 9002 	strb.w	r9, [r6, #2]
 8015c2a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015c2c:	3701      	adds	r7, #1
 8015c2e:	4408      	add	r0, r1
 8015c30:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015c32:	440a      	add	r2, r1
 8015c34:	e761      	b.n	8015afa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015c36:	b005      	add	sp, #20
 8015c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c40:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015c42:	4693      	mov	fp, r2
 8015c44:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c4a:	6868      	ldr	r0, [r5, #4]
 8015c4c:	6877      	ldr	r7, [r6, #4]
 8015c4e:	9100      	str	r1, [sp, #0]
 8015c50:	3704      	adds	r7, #4
 8015c52:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015c56:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8015c5a:	fb00 2404 	mla	r4, r0, r4, r2
 8015c5e:	682a      	ldr	r2, [r5, #0]
 8015c60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015c64:	4414      	add	r4, r2
 8015c66:	6832      	ldr	r2, [r6, #0]
 8015c68:	9201      	str	r2, [sp, #4]
 8015c6a:	9a00      	ldr	r2, [sp, #0]
 8015c6c:	2a00      	cmp	r2, #0
 8015c6e:	dc03      	bgt.n	8015c78 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015c70:	f1bb 0f00 	cmp.w	fp, #0
 8015c74:	f340 80bc 	ble.w	8015df0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015c7a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015c7e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015c82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c84:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015c88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	dd0c      	ble.n	8015caa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015c90:	1405      	asrs	r5, r0, #16
 8015c92:	d405      	bmi.n	8015ca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c94:	4555      	cmp	r5, sl
 8015c96:	da03      	bge.n	8015ca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c98:	1415      	asrs	r5, r2, #16
 8015c9a:	d401      	bmi.n	8015ca0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015c9c:	454d      	cmp	r5, r9
 8015c9e:	db05      	blt.n	8015cac <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015ca0:	4440      	add	r0, r8
 8015ca2:	4472      	add	r2, lr
 8015ca4:	3b01      	subs	r3, #1
 8015ca6:	3403      	adds	r4, #3
 8015ca8:	e7f0      	b.n	8015c8c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015caa:	d03f      	beq.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015cac:	1e5d      	subs	r5, r3, #1
 8015cae:	fb08 0c05 	mla	ip, r8, r5, r0
 8015cb2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015cb6:	d42e      	bmi.n	8015d16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cb8:	45d4      	cmp	ip, sl
 8015cba:	da2c      	bge.n	8015d16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cbc:	fb0e 2505 	mla	r5, lr, r5, r2
 8015cc0:	142d      	asrs	r5, r5, #16
 8015cc2:	d428      	bmi.n	8015d16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cc4:	454d      	cmp	r5, r9
 8015cc6:	da26      	bge.n	8015d16 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cc8:	1ce5      	adds	r5, r4, #3
 8015cca:	469c      	mov	ip, r3
 8015ccc:	f1bc 0f00 	cmp.w	ip, #0
 8015cd0:	f105 0503 	add.w	r5, r5, #3
 8015cd4:	dd25      	ble.n	8015d22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015cd6:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015cda:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015cde:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015ce2:	4472      	add	r2, lr
 8015ce4:	468a      	mov	sl, r1
 8015ce6:	9901      	ldr	r1, [sp, #4]
 8015ce8:	fb0a 1909 	mla	r9, sl, r9, r1
 8015cec:	1401      	asrs	r1, r0, #16
 8015cee:	4440      	add	r0, r8
 8015cf0:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015cf4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015cf8:	eb07 0a09 	add.w	sl, r7, r9
 8015cfc:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015d00:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015d04:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015d08:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015d0c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015d10:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015d14:	e7da      	b.n	8015ccc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015d16:	2500      	movs	r5, #0
 8015d18:	eba3 0c05 	sub.w	ip, r3, r5
 8015d1c:	f1bc 0f00 	cmp.w	ip, #0
 8015d20:	dc3b      	bgt.n	8015d9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015d22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d2a:	441c      	add	r4, r3
 8015d2c:	9b00      	ldr	r3, [sp, #0]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	dd5e      	ble.n	8015df0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015d32:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015d36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d38:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015d3c:	eeb0 6a62 	vmov.f32	s12, s5
 8015d40:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015d44:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015d48:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d4c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015d50:	eeb0 6a43 	vmov.f32	s12, s6
 8015d54:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d58:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015d5c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015d60:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015d64:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015d68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015d6c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015d70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015d74:	ee12 2a90 	vmov	r2, s5
 8015d78:	eef0 2a47 	vmov.f32	s5, s14
 8015d7c:	fb92 f8f3 	sdiv	r8, r2, r3
 8015d80:	ee13 2a10 	vmov	r2, s6
 8015d84:	eeb0 3a67 	vmov.f32	s6, s15
 8015d88:	fb92 fef3 	sdiv	lr, r2, r3
 8015d8c:	9b00      	ldr	r3, [sp, #0]
 8015d8e:	3b01      	subs	r3, #1
 8015d90:	9300      	str	r3, [sp, #0]
 8015d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d94:	bf08      	it	eq
 8015d96:	465b      	moveq	r3, fp
 8015d98:	e767      	b.n	8015c6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015d9a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015d9e:	d423      	bmi.n	8015de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015da0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015da4:	45cc      	cmp	ip, r9
 8015da6:	dd1f      	ble.n	8015de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015da8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015dac:	d41c      	bmi.n	8015de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dae:	68f1      	ldr	r1, [r6, #12]
 8015db0:	4551      	cmp	r1, sl
 8015db2:	dd19      	ble.n	8015de8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015db4:	fa0f fc8c 	sxth.w	ip, ip
 8015db8:	9901      	ldr	r1, [sp, #4]
 8015dba:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015dbe:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015dc2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015dc6:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015dca:	eb07 090c 	add.w	r9, r7, ip
 8015dce:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015dd2:	f804 a00c 	strb.w	sl, [r4, ip]
 8015dd6:	44a4      	add	ip, r4
 8015dd8:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015ddc:	f88c a001 	strb.w	sl, [ip, #1]
 8015de0:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015de4:	f88c 9002 	strb.w	r9, [ip, #2]
 8015de8:	4440      	add	r0, r8
 8015dea:	4472      	add	r2, lr
 8015dec:	3501      	adds	r5, #1
 8015dee:	e793      	b.n	8015d18 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015df0:	b003      	add	sp, #12
 8015df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015df6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015df6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dfa:	b085      	sub	sp, #20
 8015dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e00:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015e02:	9202      	str	r2, [sp, #8]
 8015e04:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8015e08:	6860      	ldr	r0, [r4, #4]
 8015e0a:	9203      	str	r2, [sp, #12]
 8015e0c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015e10:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015e14:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8015e18:	fb00 2505 	mla	r5, r0, r5, r2
 8015e1c:	6822      	ldr	r2, [r4, #0]
 8015e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e22:	4415      	add	r5, r2
 8015e24:	f8dc 2000 	ldr.w	r2, [ip]
 8015e28:	9200      	str	r2, [sp, #0]
 8015e2a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015e2e:	3204      	adds	r2, #4
 8015e30:	9201      	str	r2, [sp, #4]
 8015e32:	2900      	cmp	r1, #0
 8015e34:	dc03      	bgt.n	8015e3e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015e36:	9a02      	ldr	r2, [sp, #8]
 8015e38:	2a00      	cmp	r2, #0
 8015e3a:	f340 8127 	ble.w	801608c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e40:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015e44:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015e48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015e4a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015e4e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	dd0d      	ble.n	8015e72 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015e56:	1422      	asrs	r2, r4, #16
 8015e58:	d405      	bmi.n	8015e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e5a:	4542      	cmp	r2, r8
 8015e5c:	da03      	bge.n	8015e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e5e:	1402      	asrs	r2, r0, #16
 8015e60:	d401      	bmi.n	8015e66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e62:	42ba      	cmp	r2, r7
 8015e64:	db06      	blt.n	8015e74 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015e66:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015e68:	4474      	add	r4, lr
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	3503      	adds	r5, #3
 8015e6e:	4410      	add	r0, r2
 8015e70:	e7ef      	b.n	8015e52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015e72:	d075      	beq.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015e74:	1e5a      	subs	r2, r3, #1
 8015e76:	fb0e 4602 	mla	r6, lr, r2, r4
 8015e7a:	1436      	asrs	r6, r6, #16
 8015e7c:	d465      	bmi.n	8015f4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e7e:	4546      	cmp	r6, r8
 8015e80:	da63      	bge.n	8015f4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e82:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015e84:	fb06 0202 	mla	r2, r6, r2, r0
 8015e88:	1412      	asrs	r2, r2, #16
 8015e8a:	d45e      	bmi.n	8015f4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e8c:	42ba      	cmp	r2, r7
 8015e8e:	da5c      	bge.n	8015f4a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e90:	1cef      	adds	r7, r5, #3
 8015e92:	4699      	mov	r9, r3
 8015e94:	f1b9 0f00 	cmp.w	r9, #0
 8015e98:	dd5d      	ble.n	8015f56 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8015e9a:	1402      	asrs	r2, r0, #16
 8015e9c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015ea0:	1426      	asrs	r6, r4, #16
 8015ea2:	4692      	mov	sl, r2
 8015ea4:	9a00      	ldr	r2, [sp, #0]
 8015ea6:	fb08 220a 	mla	r2, r8, sl, r2
 8015eaa:	5d92      	ldrb	r2, [r2, r6]
 8015eac:	9e01      	ldr	r6, [sp, #4]
 8015eae:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015eb2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015eb6:	d041      	beq.n	8015f3c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015eb8:	9a03      	ldr	r2, [sp, #12]
 8015eba:	fa5f fb86 	uxtb.w	fp, r6
 8015ebe:	fb02 f808 	mul.w	r8, r2, r8
 8015ec2:	f108 0201 	add.w	r2, r8, #1
 8015ec6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015eca:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015ece:	1212      	asrs	r2, r2, #8
 8015ed0:	fa1f fa82 	uxth.w	sl, r2
 8015ed4:	43d2      	mvns	r2, r2
 8015ed6:	fb1b fb0a 	smulbb	fp, fp, sl
 8015eda:	b2d2      	uxtb	r2, r2
 8015edc:	fb08 b802 	mla	r8, r8, r2, fp
 8015ee0:	fa1f f888 	uxth.w	r8, r8
 8015ee4:	f108 0b01 	add.w	fp, r8, #1
 8015ee8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015eec:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015ef0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015ef4:	fb1b fb0a 	smulbb	fp, fp, sl
 8015ef8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015efc:	fb16 fa0a 	smulbb	sl, r6, sl
 8015f00:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015f04:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015f08:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8015f0c:	fb06 aa02 	mla	sl, r6, r2, sl
 8015f10:	fb08 b802 	mla	r8, r8, r2, fp
 8015f14:	fa1f fa8a 	uxth.w	sl, sl
 8015f18:	fa1f f888 	uxth.w	r8, r8
 8015f1c:	f10a 0601 	add.w	r6, sl, #1
 8015f20:	f108 0b01 	add.w	fp, r8, #1
 8015f24:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015f28:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015f2c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015f30:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015f34:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015f38:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015f3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015f3e:	4474      	add	r4, lr
 8015f40:	3703      	adds	r7, #3
 8015f42:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f46:	4410      	add	r0, r2
 8015f48:	e7a4      	b.n	8015e94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015f4a:	f04f 0800 	mov.w	r8, #0
 8015f4e:	eba3 0208 	sub.w	r2, r3, r8
 8015f52:	2a00      	cmp	r2, #0
 8015f54:	dc3b      	bgt.n	8015fce <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8015f56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f5a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f5e:	441d      	add	r5, r3
 8015f60:	2900      	cmp	r1, #0
 8015f62:	f340 8093 	ble.w	801608c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015f66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015f6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f70:	3901      	subs	r1, #1
 8015f72:	eeb0 6a62 	vmov.f32	s12, s5
 8015f76:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015f7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f7e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f82:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015f86:	eeb0 6a43 	vmov.f32	s12, s6
 8015f8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f8e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015f92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f96:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015fa2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015fa6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015faa:	ee12 2a90 	vmov	r2, s5
 8015fae:	eef0 2a47 	vmov.f32	s5, s14
 8015fb2:	fb92 fef3 	sdiv	lr, r2, r3
 8015fb6:	ee13 2a10 	vmov	r2, s6
 8015fba:	eeb0 3a67 	vmov.f32	s6, s15
 8015fbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8015fc2:	9a02      	ldr	r2, [sp, #8]
 8015fc4:	9312      	str	r3, [sp, #72]	; 0x48
 8015fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fc8:	bf08      	it	eq
 8015fca:	4613      	moveq	r3, r2
 8015fcc:	e731      	b.n	8015e32 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015fce:	1427      	asrs	r7, r4, #16
 8015fd0:	d456      	bmi.n	8016080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015fd2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015fd6:	42be      	cmp	r6, r7
 8015fd8:	dd52      	ble.n	8016080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015fda:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015fde:	d44f      	bmi.n	8016080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015fe0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015fe4:	454a      	cmp	r2, r9
 8015fe6:	dd4b      	ble.n	8016080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015fe8:	9a00      	ldr	r2, [sp, #0]
 8015fea:	b236      	sxth	r6, r6
 8015fec:	fb09 2606 	mla	r6, r9, r6, r2
 8015ff0:	5df2      	ldrb	r2, [r6, r7]
 8015ff2:	9e01      	ldr	r6, [sp, #4]
 8015ff4:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8015ff8:	0e3a      	lsrs	r2, r7, #24
 8015ffa:	d041      	beq.n	8016080 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015ffc:	9e03      	ldr	r6, [sp, #12]
 8015ffe:	fa5f fb87 	uxtb.w	fp, r7
 8016002:	4372      	muls	r2, r6
 8016004:	1c56      	adds	r6, r2, #1
 8016006:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801600a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801600e:	1212      	asrs	r2, r2, #8
 8016010:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016014:	fa1f fa82 	uxth.w	sl, r2
 8016018:	43d2      	mvns	r2, r2
 801601a:	fb1b fb0a 	smulbb	fp, fp, sl
 801601e:	b2d2      	uxtb	r2, r2
 8016020:	fb09 b902 	mla	r9, r9, r2, fp
 8016024:	fa1f f989 	uxth.w	r9, r9
 8016028:	f109 0b01 	add.w	fp, r9, #1
 801602c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016030:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016034:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016038:	fb1b fb0a 	smulbb	fp, fp, sl
 801603c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016040:	fb17 fa0a 	smulbb	sl, r7, sl
 8016044:	f805 9006 	strb.w	r9, [r5, r6]
 8016048:	442e      	add	r6, r5
 801604a:	78b7      	ldrb	r7, [r6, #2]
 801604c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016050:	fb07 aa02 	mla	sl, r7, r2, sl
 8016054:	fb09 b902 	mla	r9, r9, r2, fp
 8016058:	fa1f fa8a 	uxth.w	sl, sl
 801605c:	fa1f f989 	uxth.w	r9, r9
 8016060:	f10a 0701 	add.w	r7, sl, #1
 8016064:	f109 0b01 	add.w	fp, r9, #1
 8016068:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801606c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016070:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016074:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016078:	f886 a002 	strb.w	sl, [r6, #2]
 801607c:	f886 9001 	strb.w	r9, [r6, #1]
 8016080:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016082:	4474      	add	r4, lr
 8016084:	f108 0801 	add.w	r8, r8, #1
 8016088:	4410      	add	r0, r2
 801608a:	e760      	b.n	8015f4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801608c:	b005      	add	sp, #20
 801608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016092 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016092:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016096:	b085      	sub	sp, #20
 8016098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801609c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801609e:	9203      	str	r2, [sp, #12]
 80160a0:	6868      	ldr	r0, [r5, #4]
 80160a2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80160a6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80160aa:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80160ae:	fb00 2404 	mla	r4, r0, r4, r2
 80160b2:	682a      	ldr	r2, [r5, #0]
 80160b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80160b8:	4414      	add	r4, r2
 80160ba:	f8dc 2000 	ldr.w	r2, [ip]
 80160be:	9201      	str	r2, [sp, #4]
 80160c0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80160c4:	3204      	adds	r2, #4
 80160c6:	9202      	str	r2, [sp, #8]
 80160c8:	2900      	cmp	r1, #0
 80160ca:	dc03      	bgt.n	80160d4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80160cc:	9a03      	ldr	r2, [sp, #12]
 80160ce:	2a00      	cmp	r2, #0
 80160d0:	f340 8137 	ble.w	8016342 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80160d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160d6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80160da:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80160de:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80160e0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80160e4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	dd0d      	ble.n	8016108 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80160ec:	1405      	asrs	r5, r0, #16
 80160ee:	d405      	bmi.n	80160fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80160f0:	4545      	cmp	r5, r8
 80160f2:	da03      	bge.n	80160fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80160f4:	1415      	asrs	r5, r2, #16
 80160f6:	d401      	bmi.n	80160fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80160f8:	42bd      	cmp	r5, r7
 80160fa:	db06      	blt.n	801610a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80160fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80160fe:	4470      	add	r0, lr
 8016100:	3b01      	subs	r3, #1
 8016102:	3403      	adds	r4, #3
 8016104:	442a      	add	r2, r5
 8016106:	e7ef      	b.n	80160e8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016108:	d070      	beq.n	80161ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801610a:	1e5d      	subs	r5, r3, #1
 801610c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016110:	1436      	asrs	r6, r6, #16
 8016112:	d462      	bmi.n	80161da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016114:	4546      	cmp	r6, r8
 8016116:	da60      	bge.n	80161da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016118:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801611a:	fb06 2505 	mla	r5, r6, r5, r2
 801611e:	142d      	asrs	r5, r5, #16
 8016120:	d45b      	bmi.n	80161da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016122:	42bd      	cmp	r5, r7
 8016124:	da59      	bge.n	80161da <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016126:	1ce5      	adds	r5, r4, #3
 8016128:	469a      	mov	sl, r3
 801612a:	f1ba 0f00 	cmp.w	sl, #0
 801612e:	dd58      	ble.n	80161e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8016130:	1416      	asrs	r6, r2, #16
 8016132:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016136:	1407      	asrs	r7, r0, #16
 8016138:	46b1      	mov	r9, r6
 801613a:	9e01      	ldr	r6, [sp, #4]
 801613c:	fb08 6609 	mla	r6, r8, r9, r6
 8016140:	5df6      	ldrb	r6, [r6, r7]
 8016142:	9f02      	ldr	r7, [sp, #8]
 8016144:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8016148:	0e37      	lsrs	r7, r6, #24
 801614a:	2fff      	cmp	r7, #255	; 0xff
 801614c:	f000 80f0 	beq.w	8016330 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016150:	fa5f f887 	uxtb.w	r8, r7
 8016154:	b3d7      	cbz	r7, 80161cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016156:	fa1f f788 	uxth.w	r7, r8
 801615a:	ea6f 0808 	mvn.w	r8, r8
 801615e:	fa5f fb86 	uxtb.w	fp, r6
 8016162:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8016166:	fa5f f888 	uxtb.w	r8, r8
 801616a:	fb1b fb07 	smulbb	fp, fp, r7
 801616e:	fb09 b908 	mla	r9, r9, r8, fp
 8016172:	fa1f f989 	uxth.w	r9, r9
 8016176:	f109 0b01 	add.w	fp, r9, #1
 801617a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801617e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8016182:	fb1b fb08 	smulbb	fp, fp, r8
 8016186:	ea4f 2929 	mov.w	r9, r9, asr #8
 801618a:	f805 9c03 	strb.w	r9, [r5, #-3]
 801618e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8016192:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016196:	fb09 b907 	mla	r9, r9, r7, fp
 801619a:	fa1f f989 	uxth.w	r9, r9
 801619e:	f109 0b01 	add.w	fp, r9, #1
 80161a2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161aa:	f805 9c02 	strb.w	r9, [r5, #-2]
 80161ae:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80161b2:	fb19 f808 	smulbb	r8, r9, r8
 80161b6:	fb06 8607 	mla	r6, r6, r7, r8
 80161ba:	b2b6      	uxth	r6, r6
 80161bc:	f106 0801 	add.w	r8, r6, #1
 80161c0:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80161c4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80161c8:	f805 8c01 	strb.w	r8, [r5, #-1]
 80161cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80161ce:	4470      	add	r0, lr
 80161d0:	3503      	adds	r5, #3
 80161d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161d6:	4432      	add	r2, r6
 80161d8:	e7a7      	b.n	801612a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80161da:	2600      	movs	r6, #0
 80161dc:	1b9d      	subs	r5, r3, r6
 80161de:	2d00      	cmp	r5, #0
 80161e0:	dc3b      	bgt.n	801625a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80161e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161ea:	441c      	add	r4, r3
 80161ec:	2900      	cmp	r1, #0
 80161ee:	f340 80a8 	ble.w	8016342 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80161f2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80161f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80161fc:	3901      	subs	r1, #1
 80161fe:	eeb0 6a62 	vmov.f32	s12, s5
 8016202:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016206:	ee31 1a05 	vadd.f32	s2, s2, s10
 801620a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801620e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016212:	eeb0 6a43 	vmov.f32	s12, s6
 8016216:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801621a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801621e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016222:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016226:	ee77 2a62 	vsub.f32	s5, s14, s5
 801622a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801622e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016232:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016236:	ee12 2a90 	vmov	r2, s5
 801623a:	eef0 2a47 	vmov.f32	s5, s14
 801623e:	fb92 fef3 	sdiv	lr, r2, r3
 8016242:	ee13 2a10 	vmov	r2, s6
 8016246:	eeb0 3a67 	vmov.f32	s6, s15
 801624a:	fb92 f3f3 	sdiv	r3, r2, r3
 801624e:	9a03      	ldr	r2, [sp, #12]
 8016250:	9312      	str	r3, [sp, #72]	; 0x48
 8016252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016254:	bf08      	it	eq
 8016256:	4613      	moveq	r3, r2
 8016258:	e736      	b.n	80160c8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801625a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801625e:	d457      	bmi.n	8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016260:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016264:	4547      	cmp	r7, r8
 8016266:	dd53      	ble.n	8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016268:	ea5f 4922 	movs.w	r9, r2, asr #16
 801626c:	d450      	bmi.n	8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801626e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016272:	454d      	cmp	r5, r9
 8016274:	dd4c      	ble.n	8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016276:	9d01      	ldr	r5, [sp, #4]
 8016278:	b23f      	sxth	r7, r7
 801627a:	fb09 5707 	mla	r7, r9, r7, r5
 801627e:	f817 5008 	ldrb.w	r5, [r7, r8]
 8016282:	9f02      	ldr	r7, [sp, #8]
 8016284:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8016288:	0e2f      	lsrs	r7, r5, #24
 801628a:	2fff      	cmp	r7, #255	; 0xff
 801628c:	d045      	beq.n	801631a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801628e:	fa5f f987 	uxtb.w	r9, r7
 8016292:	b3ef      	cbz	r7, 8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016294:	fa1f f889 	uxth.w	r8, r9
 8016298:	ea6f 0909 	mvn.w	r9, r9
 801629c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80162a0:	fa5f fb85 	uxtb.w	fp, r5
 80162a4:	f814 a007 	ldrb.w	sl, [r4, r7]
 80162a8:	fa5f f989 	uxtb.w	r9, r9
 80162ac:	fb1b fb08 	smulbb	fp, fp, r8
 80162b0:	fb0a ba09 	mla	sl, sl, r9, fp
 80162b4:	fa1f fa8a 	uxth.w	sl, sl
 80162b8:	f10a 0b01 	add.w	fp, sl, #1
 80162bc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80162c0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80162c4:	f804 a007 	strb.w	sl, [r4, r7]
 80162c8:	4427      	add	r7, r4
 80162ca:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80162ce:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80162d2:	f897 b001 	ldrb.w	fp, [r7, #1]
 80162d6:	fb1b fb09 	smulbb	fp, fp, r9
 80162da:	fb0a ba08 	mla	sl, sl, r8, fp
 80162de:	fa1f fa8a 	uxth.w	sl, sl
 80162e2:	f10a 0b01 	add.w	fp, sl, #1
 80162e6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80162ea:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80162ee:	f887 a001 	strb.w	sl, [r7, #1]
 80162f2:	f897 a002 	ldrb.w	sl, [r7, #2]
 80162f6:	fb1a f909 	smulbb	r9, sl, r9
 80162fa:	fb05 9508 	mla	r5, r5, r8, r9
 80162fe:	b2ad      	uxth	r5, r5
 8016300:	f105 0901 	add.w	r9, r5, #1
 8016304:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016308:	ea4f 2929 	mov.w	r9, r9, asr #8
 801630c:	f887 9002 	strb.w	r9, [r7, #2]
 8016310:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016312:	4470      	add	r0, lr
 8016314:	3601      	adds	r6, #1
 8016316:	442a      	add	r2, r5
 8016318:	e760      	b.n	80161dc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801631a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801631e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8016322:	55e5      	strb	r5, [r4, r7]
 8016324:	4427      	add	r7, r4
 8016326:	0c2d      	lsrs	r5, r5, #16
 8016328:	f887 8001 	strb.w	r8, [r7, #1]
 801632c:	70bd      	strb	r5, [r7, #2]
 801632e:	e7ef      	b.n	8016310 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016330:	0a37      	lsrs	r7, r6, #8
 8016332:	f805 6c03 	strb.w	r6, [r5, #-3]
 8016336:	0c36      	lsrs	r6, r6, #16
 8016338:	f805 7c02 	strb.w	r7, [r5, #-2]
 801633c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8016340:	e744      	b.n	80161cc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016342:	b005      	add	sp, #20
 8016344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016348 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801634c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801634e:	9201      	str	r2, [sp, #4]
 8016350:	6870      	ldr	r0, [r6, #4]
 8016352:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016356:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801635a:	fa1f fe85 	uxth.w	lr, r5
 801635e:	43ed      	mvns	r5, r5
 8016360:	f8dc 8000 	ldr.w	r8, [ip]
 8016364:	b2ed      	uxtb	r5, r5
 8016366:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801636a:	fb00 2404 	mla	r4, r0, r4, r2
 801636e:	6832      	ldr	r2, [r6, #0]
 8016370:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016374:	4414      	add	r4, r2
 8016376:	2900      	cmp	r1, #0
 8016378:	dc03      	bgt.n	8016382 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801637a:	9a01      	ldr	r2, [sp, #4]
 801637c:	2a00      	cmp	r2, #0
 801637e:	f340 810d 	ble.w	801659c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016382:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016384:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8016388:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801638c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801638e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016392:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016396:	2b00      	cmp	r3, #0
 8016398:	dd0e      	ble.n	80163b8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801639a:	1406      	asrs	r6, r0, #16
 801639c:	d405      	bmi.n	80163aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801639e:	4556      	cmp	r6, sl
 80163a0:	da03      	bge.n	80163aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163a2:	1416      	asrs	r6, r2, #16
 80163a4:	d401      	bmi.n	80163aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163a6:	454e      	cmp	r6, r9
 80163a8:	db07      	blt.n	80163ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80163aa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80163ac:	3b01      	subs	r3, #1
 80163ae:	3403      	adds	r4, #3
 80163b0:	4430      	add	r0, r6
 80163b2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80163b4:	4432      	add	r2, r6
 80163b6:	e7ee      	b.n	8016396 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80163b8:	d060      	beq.n	801647c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80163ba:	1e5e      	subs	r6, r3, #1
 80163bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80163be:	fb07 0706 	mla	r7, r7, r6, r0
 80163c2:	143f      	asrs	r7, r7, #16
 80163c4:	d451      	bmi.n	801646a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163c6:	4557      	cmp	r7, sl
 80163c8:	da4f      	bge.n	801646a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163ca:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80163cc:	fb07 2606 	mla	r6, r7, r6, r2
 80163d0:	1436      	asrs	r6, r6, #16
 80163d2:	d44a      	bmi.n	801646a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163d4:	454e      	cmp	r6, r9
 80163d6:	da48      	bge.n	801646a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163d8:	1ce6      	adds	r6, r4, #3
 80163da:	4699      	mov	r9, r3
 80163dc:	f1b9 0f00 	cmp.w	r9, #0
 80163e0:	f106 0603 	add.w	r6, r6, #3
 80163e4:	dd45      	ble.n	8016472 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80163e6:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80163ea:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80163ee:	1417      	asrs	r7, r2, #16
 80163f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80163f4:	fb0b a707 	mla	r7, fp, r7, sl
 80163f8:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80163fc:	fb1b fb05 	smulbb	fp, fp, r5
 8016400:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016404:	eb08 0a07 	add.w	sl, r8, r7
 8016408:	f818 7007 	ldrb.w	r7, [r8, r7]
 801640c:	fb07 b70e 	mla	r7, r7, lr, fp
 8016410:	b2bf      	uxth	r7, r7
 8016412:	f107 0b01 	add.w	fp, r7, #1
 8016416:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801641a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801641e:	fb1b fb05 	smulbb	fp, fp, r5
 8016422:	123f      	asrs	r7, r7, #8
 8016424:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016428:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801642c:	fb07 b70e 	mla	r7, r7, lr, fp
 8016430:	b2bf      	uxth	r7, r7
 8016432:	f107 0b01 	add.w	fp, r7, #1
 8016436:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801643a:	123f      	asrs	r7, r7, #8
 801643c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016440:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016444:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016448:	fb1a fa05 	smulbb	sl, sl, r5
 801644c:	fb07 a70e 	mla	r7, r7, lr, sl
 8016450:	b2bf      	uxth	r7, r7
 8016452:	f107 0a01 	add.w	sl, r7, #1
 8016456:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801645a:	123f      	asrs	r7, r7, #8
 801645c:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016460:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016462:	4438      	add	r0, r7
 8016464:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016466:	443a      	add	r2, r7
 8016468:	e7b8      	b.n	80163dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801646a:	2700      	movs	r7, #0
 801646c:	1bde      	subs	r6, r3, r7
 801646e:	2e00      	cmp	r6, #0
 8016470:	dc3f      	bgt.n	80164f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8016472:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016476:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801647a:	441c      	add	r4, r3
 801647c:	2900      	cmp	r1, #0
 801647e:	f340 808d 	ble.w	801659c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016488:	ee30 0a04 	vadd.f32	s0, s0, s8
 801648c:	3901      	subs	r1, #1
 801648e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016492:	eef0 6a62 	vmov.f32	s13, s5
 8016496:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801649a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801649e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164a2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80164a6:	eef0 6a43 	vmov.f32	s13, s6
 80164aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164ae:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80164b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80164b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80164ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80164be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80164c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80164c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80164ca:	ee12 2a90 	vmov	r2, s5
 80164ce:	eef0 2a47 	vmov.f32	s5, s14
 80164d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80164d6:	ee13 2a10 	vmov	r2, s6
 80164da:	930f      	str	r3, [sp, #60]	; 0x3c
 80164dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164de:	eeb0 3a67 	vmov.f32	s6, s15
 80164e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80164e6:	9a01      	ldr	r2, [sp, #4]
 80164e8:	9310      	str	r3, [sp, #64]	; 0x40
 80164ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164ec:	bf08      	it	eq
 80164ee:	4613      	moveq	r3, r2
 80164f0:	e741      	b.n	8016376 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80164f2:	ea5f 4920 	movs.w	r9, r0, asr #16
 80164f6:	d44b      	bmi.n	8016590 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80164f8:	f8dc b008 	ldr.w	fp, [ip, #8]
 80164fc:	45cb      	cmp	fp, r9
 80164fe:	dd47      	ble.n	8016590 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016500:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016504:	d444      	bmi.n	8016590 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016506:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801650a:	4556      	cmp	r6, sl
 801650c:	dd40      	ble.n	8016590 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801650e:	fa0f f68b 	sxth.w	r6, fp
 8016512:	fb0a 9906 	mla	r9, sl, r6, r9
 8016516:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801651a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801651e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016522:	fb1b fb05 	smulbb	fp, fp, r5
 8016526:	eb08 0a09 	add.w	sl, r8, r9
 801652a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801652e:	fb09 b90e 	mla	r9, r9, lr, fp
 8016532:	fa1f f989 	uxth.w	r9, r9
 8016536:	f109 0b01 	add.w	fp, r9, #1
 801653a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801653e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016542:	f804 9006 	strb.w	r9, [r4, r6]
 8016546:	4426      	add	r6, r4
 8016548:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801654c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016550:	fb1b fb05 	smulbb	fp, fp, r5
 8016554:	fb09 b90e 	mla	r9, r9, lr, fp
 8016558:	fa1f f989 	uxth.w	r9, r9
 801655c:	f109 0b01 	add.w	fp, r9, #1
 8016560:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016564:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016568:	f886 9001 	strb.w	r9, [r6, #1]
 801656c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016570:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016574:	fb1a fa05 	smulbb	sl, sl, r5
 8016578:	fb09 a90e 	mla	r9, r9, lr, sl
 801657c:	fa1f f989 	uxth.w	r9, r9
 8016580:	f109 0a01 	add.w	sl, r9, #1
 8016584:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016588:	ea4f 2929 	mov.w	r9, r9, asr #8
 801658c:	f886 9002 	strb.w	r9, [r6, #2]
 8016590:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016592:	3701      	adds	r7, #1
 8016594:	4430      	add	r0, r6
 8016596:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016598:	4432      	add	r2, r6
 801659a:	e767      	b.n	801646c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801659c:	b003      	add	sp, #12
 801659e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80165a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80165a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165ac:	9201      	str	r2, [sp, #4]
 80165ae:	6868      	ldr	r0, [r5, #4]
 80165b0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80165b2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80165b6:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80165ba:	fb00 2404 	mla	r4, r0, r4, r2
 80165be:	682a      	ldr	r2, [r5, #0]
 80165c0:	f8d7 8000 	ldr.w	r8, [r7]
 80165c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80165c8:	4414      	add	r4, r2
 80165ca:	2900      	cmp	r1, #0
 80165cc:	dc03      	bgt.n	80165d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80165ce:	9a01      	ldr	r2, [sp, #4]
 80165d0:	2a00      	cmp	r2, #0
 80165d2:	f340 80af 	ble.w	8016734 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80165d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165d8:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80165dc:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80165e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165e2:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80165e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	dd0c      	ble.n	8016608 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80165ee:	1405      	asrs	r5, r0, #16
 80165f0:	d405      	bmi.n	80165fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80165f2:	4555      	cmp	r5, sl
 80165f4:	da03      	bge.n	80165fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80165f6:	1415      	asrs	r5, r2, #16
 80165f8:	d401      	bmi.n	80165fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80165fa:	454d      	cmp	r5, r9
 80165fc:	db05      	blt.n	801660a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80165fe:	4470      	add	r0, lr
 8016600:	4462      	add	r2, ip
 8016602:	3b01      	subs	r3, #1
 8016604:	3403      	adds	r4, #3
 8016606:	e7f0      	b.n	80165ea <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016608:	d038      	beq.n	801667c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801660a:	1e5d      	subs	r5, r3, #1
 801660c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016610:	1436      	asrs	r6, r6, #16
 8016612:	d42a      	bmi.n	801666a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016614:	4556      	cmp	r6, sl
 8016616:	da28      	bge.n	801666a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016618:	fb0c 2505 	mla	r5, ip, r5, r2
 801661c:	142d      	asrs	r5, r5, #16
 801661e:	d424      	bmi.n	801666a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016620:	454d      	cmp	r5, r9
 8016622:	da22      	bge.n	801666a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016624:	1ce6      	adds	r6, r4, #3
 8016626:	4699      	mov	r9, r3
 8016628:	f1b9 0f00 	cmp.w	r9, #0
 801662c:	f106 0603 	add.w	r6, r6, #3
 8016630:	dd1f      	ble.n	8016672 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016632:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016636:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801663a:	1415      	asrs	r5, r2, #16
 801663c:	4470      	add	r0, lr
 801663e:	4462      	add	r2, ip
 8016640:	f109 39ff 	add.w	r9, r9, #4294967295
 8016644:	fb0b a505 	mla	r5, fp, r5, sl
 8016648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801664c:	eb08 0a05 	add.w	sl, r8, r5
 8016650:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016654:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016658:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801665c:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016660:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016664:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016668:	e7de      	b.n	8016628 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801666a:	2600      	movs	r6, #0
 801666c:	1b9d      	subs	r5, r3, r6
 801666e:	2d00      	cmp	r5, #0
 8016670:	dc38      	bgt.n	80166e4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016672:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801667a:	441c      	add	r4, r3
 801667c:	2900      	cmp	r1, #0
 801667e:	dd59      	ble.n	8016734 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016680:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016684:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016686:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801668a:	3901      	subs	r1, #1
 801668c:	eeb0 6a62 	vmov.f32	s12, s5
 8016690:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016694:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016698:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801669c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80166a0:	eeb0 6a43 	vmov.f32	s12, s6
 80166a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80166a8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80166ac:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80166b0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80166b4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80166b8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80166bc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80166c0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80166c4:	ee12 2a90 	vmov	r2, s5
 80166c8:	eef0 2a47 	vmov.f32	s5, s14
 80166cc:	fb92 fef3 	sdiv	lr, r2, r3
 80166d0:	ee13 2a10 	vmov	r2, s6
 80166d4:	eeb0 3a67 	vmov.f32	s6, s15
 80166d8:	fb92 fcf3 	sdiv	ip, r2, r3
 80166dc:	9a01      	ldr	r2, [sp, #4]
 80166de:	bf08      	it	eq
 80166e0:	4613      	moveq	r3, r2
 80166e2:	e772      	b.n	80165ca <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80166e4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80166e8:	d420      	bmi.n	801672c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80166ea:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80166ee:	45cb      	cmp	fp, r9
 80166f0:	dd1c      	ble.n	801672c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80166f2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80166f6:	d419      	bmi.n	801672c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80166f8:	68fd      	ldr	r5, [r7, #12]
 80166fa:	4555      	cmp	r5, sl
 80166fc:	dd16      	ble.n	801672c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80166fe:	fa0f f58b 	sxth.w	r5, fp
 8016702:	fb0a 9505 	mla	r5, sl, r5, r9
 8016706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801670a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801670e:	eb08 0b05 	add.w	fp, r8, r5
 8016712:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016716:	f804 9005 	strb.w	r9, [r4, r5]
 801671a:	4425      	add	r5, r4
 801671c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016720:	f885 9001 	strb.w	r9, [r5, #1]
 8016724:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016728:	f885 9002 	strb.w	r9, [r5, #2]
 801672c:	4470      	add	r0, lr
 801672e:	4462      	add	r2, ip
 8016730:	3601      	adds	r6, #1
 8016732:	e79b      	b.n	801666c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016734:	b003      	add	sp, #12
 8016736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801673a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801673a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801673e:	b085      	sub	sp, #20
 8016740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016744:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016746:	9202      	str	r2, [sp, #8]
 8016748:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801674c:	6860      	ldr	r0, [r4, #4]
 801674e:	9203      	str	r2, [sp, #12]
 8016750:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016754:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016758:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801675c:	fb00 2505 	mla	r5, r0, r5, r2
 8016760:	6822      	ldr	r2, [r4, #0]
 8016762:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016766:	4415      	add	r5, r2
 8016768:	f8dc 2000 	ldr.w	r2, [ip]
 801676c:	9201      	str	r2, [sp, #4]
 801676e:	2900      	cmp	r1, #0
 8016770:	dc03      	bgt.n	801677a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016772:	9a02      	ldr	r2, [sp, #8]
 8016774:	2a00      	cmp	r2, #0
 8016776:	f340 8122 	ble.w	80169be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801677a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801677c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016780:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016786:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801678a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801678e:	2b00      	cmp	r3, #0
 8016790:	dd0d      	ble.n	80167ae <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8016792:	1422      	asrs	r2, r4, #16
 8016794:	d405      	bmi.n	80167a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016796:	4542      	cmp	r2, r8
 8016798:	da03      	bge.n	80167a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801679a:	1402      	asrs	r2, r0, #16
 801679c:	d401      	bmi.n	80167a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801679e:	42ba      	cmp	r2, r7
 80167a0:	db06      	blt.n	80167b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80167a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80167a4:	4474      	add	r4, lr
 80167a6:	3b01      	subs	r3, #1
 80167a8:	3503      	adds	r5, #3
 80167aa:	4410      	add	r0, r2
 80167ac:	e7ef      	b.n	801678e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80167ae:	d072      	beq.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80167b0:	1e5a      	subs	r2, r3, #1
 80167b2:	fb0e 4602 	mla	r6, lr, r2, r4
 80167b6:	1436      	asrs	r6, r6, #16
 80167b8:	d462      	bmi.n	8016880 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167ba:	4546      	cmp	r6, r8
 80167bc:	da60      	bge.n	8016880 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167be:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80167c0:	fb06 0202 	mla	r2, r6, r2, r0
 80167c4:	1412      	asrs	r2, r2, #16
 80167c6:	d45b      	bmi.n	8016880 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167c8:	42ba      	cmp	r2, r7
 80167ca:	da59      	bge.n	8016880 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167cc:	1cef      	adds	r7, r5, #3
 80167ce:	4699      	mov	r9, r3
 80167d0:	f1b9 0f00 	cmp.w	r9, #0
 80167d4:	dd5a      	ble.n	801688c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80167d6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80167da:	1426      	asrs	r6, r4, #16
 80167dc:	1402      	asrs	r2, r0, #16
 80167de:	fb08 6202 	mla	r2, r8, r2, r6
 80167e2:	9e01      	ldr	r6, [sp, #4]
 80167e4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80167e8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80167ec:	d041      	beq.n	8016872 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80167ee:	9a03      	ldr	r2, [sp, #12]
 80167f0:	fa5f fb86 	uxtb.w	fp, r6
 80167f4:	fb02 f808 	mul.w	r8, r2, r8
 80167f8:	f108 0201 	add.w	r2, r8, #1
 80167fc:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016800:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016804:	1212      	asrs	r2, r2, #8
 8016806:	fa1f fa82 	uxth.w	sl, r2
 801680a:	43d2      	mvns	r2, r2
 801680c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016810:	b2d2      	uxtb	r2, r2
 8016812:	fb08 b802 	mla	r8, r8, r2, fp
 8016816:	fa1f f888 	uxth.w	r8, r8
 801681a:	f108 0b01 	add.w	fp, r8, #1
 801681e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016822:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016826:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801682a:	fb1b fb0a 	smulbb	fp, fp, sl
 801682e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016832:	fb16 fa0a 	smulbb	sl, r6, sl
 8016836:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801683a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801683e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016842:	fb06 aa02 	mla	sl, r6, r2, sl
 8016846:	fb08 b802 	mla	r8, r8, r2, fp
 801684a:	fa1f fa8a 	uxth.w	sl, sl
 801684e:	fa1f f888 	uxth.w	r8, r8
 8016852:	f10a 0601 	add.w	r6, sl, #1
 8016856:	f108 0b01 	add.w	fp, r8, #1
 801685a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801685e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016862:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016866:	ea4f 2828 	mov.w	r8, r8, asr #8
 801686a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801686e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016872:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016874:	4474      	add	r4, lr
 8016876:	3703      	adds	r7, #3
 8016878:	f109 39ff 	add.w	r9, r9, #4294967295
 801687c:	4410      	add	r0, r2
 801687e:	e7a7      	b.n	80167d0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016880:	f04f 0800 	mov.w	r8, #0
 8016884:	eba3 0208 	sub.w	r2, r3, r8
 8016888:	2a00      	cmp	r2, #0
 801688a:	dc3b      	bgt.n	8016904 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801688c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016890:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016894:	441d      	add	r5, r3
 8016896:	2900      	cmp	r1, #0
 8016898:	f340 8091 	ble.w	80169be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801689c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168a6:	3901      	subs	r1, #1
 80168a8:	eeb0 6a62 	vmov.f32	s12, s5
 80168ac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168b8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80168bc:	eeb0 6a43 	vmov.f32	s12, s6
 80168c0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168c4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80168c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80168d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80168d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80168d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80168dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80168e0:	ee12 2a90 	vmov	r2, s5
 80168e4:	eef0 2a47 	vmov.f32	s5, s14
 80168e8:	fb92 fef3 	sdiv	lr, r2, r3
 80168ec:	ee13 2a10 	vmov	r2, s6
 80168f0:	eeb0 3a67 	vmov.f32	s6, s15
 80168f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80168f8:	9a02      	ldr	r2, [sp, #8]
 80168fa:	9312      	str	r3, [sp, #72]	; 0x48
 80168fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80168fe:	bf08      	it	eq
 8016900:	4613      	moveq	r3, r2
 8016902:	e734      	b.n	801676e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016904:	1427      	asrs	r7, r4, #16
 8016906:	d454      	bmi.n	80169b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016908:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801690c:	42be      	cmp	r6, r7
 801690e:	dd50      	ble.n	80169b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016910:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016914:	d44d      	bmi.n	80169b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016916:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801691a:	454a      	cmp	r2, r9
 801691c:	dd49      	ble.n	80169b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801691e:	b236      	sxth	r6, r6
 8016920:	9a01      	ldr	r2, [sp, #4]
 8016922:	fb09 7606 	mla	r6, r9, r6, r7
 8016926:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801692a:	0e3a      	lsrs	r2, r7, #24
 801692c:	d041      	beq.n	80169b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801692e:	9e03      	ldr	r6, [sp, #12]
 8016930:	fa5f fb87 	uxtb.w	fp, r7
 8016934:	4372      	muls	r2, r6
 8016936:	1c56      	adds	r6, r2, #1
 8016938:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801693c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016940:	1212      	asrs	r2, r2, #8
 8016942:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016946:	fa1f fa82 	uxth.w	sl, r2
 801694a:	43d2      	mvns	r2, r2
 801694c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016950:	b2d2      	uxtb	r2, r2
 8016952:	fb09 b902 	mla	r9, r9, r2, fp
 8016956:	fa1f f989 	uxth.w	r9, r9
 801695a:	f109 0b01 	add.w	fp, r9, #1
 801695e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016962:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016966:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801696a:	fb1b fb0a 	smulbb	fp, fp, sl
 801696e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016972:	fb17 fa0a 	smulbb	sl, r7, sl
 8016976:	f805 9006 	strb.w	r9, [r5, r6]
 801697a:	442e      	add	r6, r5
 801697c:	78b7      	ldrb	r7, [r6, #2]
 801697e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016982:	fb07 aa02 	mla	sl, r7, r2, sl
 8016986:	fb09 b902 	mla	r9, r9, r2, fp
 801698a:	fa1f fa8a 	uxth.w	sl, sl
 801698e:	fa1f f989 	uxth.w	r9, r9
 8016992:	f10a 0701 	add.w	r7, sl, #1
 8016996:	f109 0b01 	add.w	fp, r9, #1
 801699a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801699e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169a2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80169a6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169aa:	f886 a002 	strb.w	sl, [r6, #2]
 80169ae:	f886 9001 	strb.w	r9, [r6, #1]
 80169b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169b4:	4474      	add	r4, lr
 80169b6:	f108 0801 	add.w	r8, r8, #1
 80169ba:	4410      	add	r0, r2
 80169bc:	e762      	b.n	8016884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80169be:	b005      	add	sp, #20
 80169c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169c4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80169c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80169ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80169ce:	9201      	str	r2, [sp, #4]
 80169d0:	6860      	ldr	r0, [r4, #4]
 80169d2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80169d6:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80169da:	fb00 2505 	mla	r5, r0, r5, r2
 80169de:	6822      	ldr	r2, [r4, #0]
 80169e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169e4:	4415      	add	r5, r2
 80169e6:	f8dc 2000 	ldr.w	r2, [ip]
 80169ea:	9200      	str	r2, [sp, #0]
 80169ec:	2900      	cmp	r1, #0
 80169ee:	dc03      	bgt.n	80169f8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80169f0:	9a01      	ldr	r2, [sp, #4]
 80169f2:	2a00      	cmp	r2, #0
 80169f4:	f340 812b 	ble.w	8016c4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80169f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169fa:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80169fe:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016a02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a04:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016a08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	dd0e      	ble.n	8016a2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016a10:	1422      	asrs	r2, r4, #16
 8016a12:	d405      	bmi.n	8016a20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a14:	4572      	cmp	r2, lr
 8016a16:	da03      	bge.n	8016a20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a18:	1402      	asrs	r2, r0, #16
 8016a1a:	d401      	bmi.n	8016a20 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a1c:	42ba      	cmp	r2, r7
 8016a1e:	db07      	blt.n	8016a30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016a22:	3b01      	subs	r3, #1
 8016a24:	3503      	adds	r5, #3
 8016a26:	4414      	add	r4, r2
 8016a28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a2a:	4410      	add	r0, r2
 8016a2c:	e7ee      	b.n	8016a0c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016a2e:	d06f      	beq.n	8016b10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016a30:	1e5a      	subs	r2, r3, #1
 8016a32:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016a34:	fb06 4602 	mla	r6, r6, r2, r4
 8016a38:	1436      	asrs	r6, r6, #16
 8016a3a:	d45e      	bmi.n	8016afa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a3c:	4576      	cmp	r6, lr
 8016a3e:	da5c      	bge.n	8016afa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a40:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016a42:	fb06 0202 	mla	r2, r6, r2, r0
 8016a46:	1412      	asrs	r2, r2, #16
 8016a48:	d457      	bmi.n	8016afa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a4a:	42ba      	cmp	r2, r7
 8016a4c:	da55      	bge.n	8016afa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a4e:	1cee      	adds	r6, r5, #3
 8016a50:	469a      	mov	sl, r3
 8016a52:	f1ba 0f00 	cmp.w	sl, #0
 8016a56:	dd56      	ble.n	8016b06 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a58:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016a5c:	1427      	asrs	r7, r4, #16
 8016a5e:	1402      	asrs	r2, r0, #16
 8016a60:	fb0e 7202 	mla	r2, lr, r2, r7
 8016a64:	9f00      	ldr	r7, [sp, #0]
 8016a66:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016a6a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016a6e:	d03c      	beq.n	8016aea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016a70:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016a74:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016a78:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016a7c:	fa5f f28e 	uxtb.w	r2, lr
 8016a80:	b2ff      	uxtb	r7, r7
 8016a82:	f000 80dd 	beq.w	8016c40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016a86:	fa1f f882 	uxth.w	r8, r2
 8016a8a:	43d2      	mvns	r2, r2
 8016a8c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016a90:	fb17 f708 	smulbb	r7, r7, r8
 8016a94:	b2d2      	uxtb	r2, r2
 8016a96:	fb19 f908 	smulbb	r9, r9, r8
 8016a9a:	fb0e 7702 	mla	r7, lr, r2, r7
 8016a9e:	fb1b f808 	smulbb	r8, fp, r8
 8016aa2:	b2bf      	uxth	r7, r7
 8016aa4:	f107 0e01 	add.w	lr, r7, #1
 8016aa8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016aac:	123f      	asrs	r7, r7, #8
 8016aae:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016ab2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016ab6:	fb07 9902 	mla	r9, r7, r2, r9
 8016aba:	fa1f f989 	uxth.w	r9, r9
 8016abe:	f109 0701 	add.w	r7, r9, #1
 8016ac2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016ac6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016aca:	fb07 8802 	mla	r8, r7, r2, r8
 8016ace:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ad2:	fa1f f888 	uxth.w	r8, r8
 8016ad6:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016ada:	f108 0201 	add.w	r2, r8, #1
 8016ade:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016ae2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016ae6:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016aea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016aec:	3603      	adds	r6, #3
 8016aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016af2:	4414      	add	r4, r2
 8016af4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016af6:	4410      	add	r0, r2
 8016af8:	e7ab      	b.n	8016a52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016afa:	f04f 0e00 	mov.w	lr, #0
 8016afe:	eba3 020e 	sub.w	r2, r3, lr
 8016b02:	2a00      	cmp	r2, #0
 8016b04:	dc3d      	bgt.n	8016b82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016b06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b0a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b0e:	441d      	add	r5, r3
 8016b10:	2900      	cmp	r1, #0
 8016b12:	f340 809c 	ble.w	8016c4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016b16:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b1c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b20:	3901      	subs	r1, #1
 8016b22:	eeb0 6a62 	vmov.f32	s12, s5
 8016b26:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b2a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b2e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b32:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016b36:	eeb0 6a43 	vmov.f32	s12, s6
 8016b3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b3e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016b42:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b46:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b4e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b56:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b5a:	ee12 2a90 	vmov	r2, s5
 8016b5e:	eef0 2a47 	vmov.f32	s5, s14
 8016b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b66:	ee13 2a10 	vmov	r2, s6
 8016b6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b6e:	eeb0 3a67 	vmov.f32	s6, s15
 8016b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b76:	9a01      	ldr	r2, [sp, #4]
 8016b78:	9310      	str	r3, [sp, #64]	; 0x40
 8016b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b7c:	bf08      	it	eq
 8016b7e:	4613      	moveq	r3, r2
 8016b80:	e734      	b.n	80169ec <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016b82:	1427      	asrs	r7, r4, #16
 8016b84:	d44d      	bmi.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b86:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016b8a:	42be      	cmp	r6, r7
 8016b8c:	dd49      	ble.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b8e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016b92:	d446      	bmi.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b94:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016b98:	4542      	cmp	r2, r8
 8016b9a:	dd42      	ble.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b9c:	b236      	sxth	r6, r6
 8016b9e:	9a00      	ldr	r2, [sp, #0]
 8016ba0:	fb08 7606 	mla	r6, r8, r6, r7
 8016ba4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016ba8:	0e3a      	lsrs	r2, r7, #24
 8016baa:	d03a      	beq.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bac:	2aff      	cmp	r2, #255	; 0xff
 8016bae:	b2d6      	uxtb	r6, r2
 8016bb0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016bb4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016bb8:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016bbc:	b2ff      	uxtb	r7, r7
 8016bbe:	d037      	beq.n	8016c30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016bc0:	fa1f f986 	uxth.w	r9, r6
 8016bc4:	4472      	add	r2, lr
 8016bc6:	43f6      	mvns	r6, r6
 8016bc8:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016bcc:	fb17 f709 	smulbb	r7, r7, r9
 8016bd0:	fb1a fa09 	smulbb	sl, sl, r9
 8016bd4:	b2f6      	uxtb	r6, r6
 8016bd6:	fb1b f909 	smulbb	r9, fp, r9
 8016bda:	fb08 7706 	mla	r7, r8, r6, r7
 8016bde:	b2bf      	uxth	r7, r7
 8016be0:	f107 0801 	add.w	r8, r7, #1
 8016be4:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016be8:	123f      	asrs	r7, r7, #8
 8016bea:	54af      	strb	r7, [r5, r2]
 8016bec:	442a      	add	r2, r5
 8016bee:	7857      	ldrb	r7, [r2, #1]
 8016bf0:	fb07 aa06 	mla	sl, r7, r6, sl
 8016bf4:	fa1f fa8a 	uxth.w	sl, sl
 8016bf8:	f10a 0701 	add.w	r7, sl, #1
 8016bfc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016c00:	7897      	ldrb	r7, [r2, #2]
 8016c02:	fb07 9906 	mla	r9, r7, r6, r9
 8016c06:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016c0a:	fa1f f989 	uxth.w	r9, r9
 8016c0e:	f882 a001 	strb.w	sl, [r2, #1]
 8016c12:	f109 0601 	add.w	r6, r9, #1
 8016c16:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016c1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c1e:	f882 9002 	strb.w	r9, [r2, #2]
 8016c22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c24:	f10e 0e01 	add.w	lr, lr, #1
 8016c28:	4414      	add	r4, r2
 8016c2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c2c:	4410      	add	r0, r2
 8016c2e:	e766      	b.n	8016afe <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016c30:	4472      	add	r2, lr
 8016c32:	54af      	strb	r7, [r5, r2]
 8016c34:	442a      	add	r2, r5
 8016c36:	f882 a001 	strb.w	sl, [r2, #1]
 8016c3a:	f882 b002 	strb.w	fp, [r2, #2]
 8016c3e:	e7f0      	b.n	8016c22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016c40:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016c44:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016c48:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016c4c:	e74d      	b.n	8016aea <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016c4e:	b003      	add	sp, #12
 8016c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016c54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c58:	b087      	sub	sp, #28
 8016c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c5e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016c60:	9204      	str	r2, [sp, #16]
 8016c62:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016c66:	6860      	ldr	r0, [r4, #4]
 8016c68:	9205      	str	r2, [sp, #20]
 8016c6a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016c6e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8016c72:	9101      	str	r1, [sp, #4]
 8016c74:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016c78:	fb00 2505 	mla	r5, r0, r5, r2
 8016c7c:	6822      	ldr	r2, [r4, #0]
 8016c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c82:	4415      	add	r5, r2
 8016c84:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016c88:	3201      	adds	r2, #1
 8016c8a:	f022 0201 	bic.w	r2, r2, #1
 8016c8e:	9202      	str	r2, [sp, #8]
 8016c90:	f8dc 2000 	ldr.w	r2, [ip]
 8016c94:	9203      	str	r2, [sp, #12]
 8016c96:	9a01      	ldr	r2, [sp, #4]
 8016c98:	2a00      	cmp	r2, #0
 8016c9a:	dc03      	bgt.n	8016ca4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016c9c:	9a04      	ldr	r2, [sp, #16]
 8016c9e:	2a00      	cmp	r2, #0
 8016ca0:	f340 8135 	ble.w	8016f0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016ca4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ca6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016caa:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016cae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cb0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016cb4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	dd0d      	ble.n	8016cd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016cbc:	1422      	asrs	r2, r4, #16
 8016cbe:	d405      	bmi.n	8016ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016cc0:	4542      	cmp	r2, r8
 8016cc2:	da03      	bge.n	8016ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016cc4:	1402      	asrs	r2, r0, #16
 8016cc6:	d401      	bmi.n	8016ccc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016cc8:	42ba      	cmp	r2, r7
 8016cca:	db06      	blt.n	8016cda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016ccc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016cce:	4474      	add	r4, lr
 8016cd0:	3b01      	subs	r3, #1
 8016cd2:	3503      	adds	r5, #3
 8016cd4:	4410      	add	r0, r2
 8016cd6:	e7ef      	b.n	8016cb8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016cd8:	d077      	beq.n	8016dca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016cda:	1e5a      	subs	r2, r3, #1
 8016cdc:	fb0e 4602 	mla	r6, lr, r2, r4
 8016ce0:	1436      	asrs	r6, r6, #16
 8016ce2:	d469      	bmi.n	8016db8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016ce4:	4546      	cmp	r6, r8
 8016ce6:	da67      	bge.n	8016db8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016ce8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016cea:	fb06 0202 	mla	r2, r6, r2, r0
 8016cee:	1412      	asrs	r2, r2, #16
 8016cf0:	d462      	bmi.n	8016db8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016cf2:	42ba      	cmp	r2, r7
 8016cf4:	da60      	bge.n	8016db8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016cf6:	1cee      	adds	r6, r5, #3
 8016cf8:	4699      	mov	r9, r3
 8016cfa:	f1b9 0f00 	cmp.w	r9, #0
 8016cfe:	dd5f      	ble.n	8016dc0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016d00:	1422      	asrs	r2, r4, #16
 8016d02:	9902      	ldr	r1, [sp, #8]
 8016d04:	1407      	asrs	r7, r0, #16
 8016d06:	fb01 2707 	mla	r7, r1, r7, r2
 8016d0a:	9903      	ldr	r1, [sp, #12]
 8016d0c:	087a      	lsrs	r2, r7, #1
 8016d0e:	5c8a      	ldrb	r2, [r1, r2]
 8016d10:	07f9      	lsls	r1, r7, #31
 8016d12:	bf54      	ite	pl
 8016d14:	f002 020f 	andpl.w	r2, r2, #15
 8016d18:	1112      	asrmi	r2, r2, #4
 8016d1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016d1e:	b2d2      	uxtb	r2, r2
 8016d20:	2a00      	cmp	r2, #0
 8016d22:	d042      	beq.n	8016daa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016d24:	497b      	ldr	r1, [pc, #492]	; (8016f14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016d26:	680f      	ldr	r7, [r1, #0]
 8016d28:	9905      	ldr	r1, [sp, #20]
 8016d2a:	fa5f fb87 	uxtb.w	fp, r7
 8016d2e:	434a      	muls	r2, r1
 8016d30:	f102 0801 	add.w	r8, r2, #1
 8016d34:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016d38:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016d3c:	1212      	asrs	r2, r2, #8
 8016d3e:	fa1f fa82 	uxth.w	sl, r2
 8016d42:	43d2      	mvns	r2, r2
 8016d44:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d48:	b2d2      	uxtb	r2, r2
 8016d4a:	fb08 b802 	mla	r8, r8, r2, fp
 8016d4e:	fa1f f888 	uxth.w	r8, r8
 8016d52:	f108 0b01 	add.w	fp, r8, #1
 8016d56:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016d5a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016d5e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016d62:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d66:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016d6a:	fb17 fa0a 	smulbb	sl, r7, sl
 8016d6e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016d72:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016d76:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016d7a:	fb07 aa02 	mla	sl, r7, r2, sl
 8016d7e:	fb08 b802 	mla	r8, r8, r2, fp
 8016d82:	fa1f fa8a 	uxth.w	sl, sl
 8016d86:	fa1f f888 	uxth.w	r8, r8
 8016d8a:	f10a 0701 	add.w	r7, sl, #1
 8016d8e:	f108 0b01 	add.w	fp, r8, #1
 8016d92:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016d96:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016d9a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016da2:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016da6:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016daa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016dac:	4474      	add	r4, lr
 8016dae:	3603      	adds	r6, #3
 8016db0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016db4:	4410      	add	r0, r2
 8016db6:	e7a0      	b.n	8016cfa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016db8:	2700      	movs	r7, #0
 8016dba:	1bda      	subs	r2, r3, r7
 8016dbc:	2a00      	cmp	r2, #0
 8016dbe:	dc3e      	bgt.n	8016e3e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016dc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016dc8:	441d      	add	r5, r3
 8016dca:	9b01      	ldr	r3, [sp, #4]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f340 809e 	ble.w	8016f0e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016dd2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dd8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ddc:	eeb0 6a62 	vmov.f32	s12, s5
 8016de0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016de4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016de8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016dec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016df0:	eeb0 6a43 	vmov.f32	s12, s6
 8016df4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016df8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016dfc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e04:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e08:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e0c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e10:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e14:	ee12 2a90 	vmov	r2, s5
 8016e18:	eef0 2a47 	vmov.f32	s5, s14
 8016e1c:	fb92 fef3 	sdiv	lr, r2, r3
 8016e20:	ee13 2a10 	vmov	r2, s6
 8016e24:	eeb0 3a67 	vmov.f32	s6, s15
 8016e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e2c:	9314      	str	r3, [sp, #80]	; 0x50
 8016e2e:	9b01      	ldr	r3, [sp, #4]
 8016e30:	9a04      	ldr	r2, [sp, #16]
 8016e32:	3b01      	subs	r3, #1
 8016e34:	9301      	str	r3, [sp, #4]
 8016e36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e38:	bf08      	it	eq
 8016e3a:	4613      	moveq	r3, r2
 8016e3c:	e72b      	b.n	8016c96 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016e3e:	1426      	asrs	r6, r4, #16
 8016e40:	d460      	bmi.n	8016f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e42:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016e46:	42b2      	cmp	r2, r6
 8016e48:	dd5c      	ble.n	8016f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e4a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016e4e:	d459      	bmi.n	8016f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e50:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016e54:	4542      	cmp	r2, r8
 8016e56:	dd55      	ble.n	8016f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e58:	9a02      	ldr	r2, [sp, #8]
 8016e5a:	9903      	ldr	r1, [sp, #12]
 8016e5c:	fb08 6602 	mla	r6, r8, r2, r6
 8016e60:	0872      	lsrs	r2, r6, #1
 8016e62:	07f6      	lsls	r6, r6, #31
 8016e64:	5c8a      	ldrb	r2, [r1, r2]
 8016e66:	bf54      	ite	pl
 8016e68:	f002 020f 	andpl.w	r2, r2, #15
 8016e6c:	1112      	asrmi	r2, r2, #4
 8016e6e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016e72:	b2d2      	uxtb	r2, r2
 8016e74:	2a00      	cmp	r2, #0
 8016e76:	d045      	beq.n	8016f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e78:	4926      	ldr	r1, [pc, #152]	; (8016f14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016e7a:	f8d1 8000 	ldr.w	r8, [r1]
 8016e7e:	9905      	ldr	r1, [sp, #20]
 8016e80:	fa5f fb88 	uxtb.w	fp, r8
 8016e84:	434a      	muls	r2, r1
 8016e86:	1c56      	adds	r6, r2, #1
 8016e88:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016e8c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016e90:	1212      	asrs	r2, r2, #8
 8016e92:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016e96:	fa1f fa82 	uxth.w	sl, r2
 8016e9a:	43d2      	mvns	r2, r2
 8016e9c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ea0:	b2d2      	uxtb	r2, r2
 8016ea2:	fb09 b902 	mla	r9, r9, r2, fp
 8016ea6:	fa1f f989 	uxth.w	r9, r9
 8016eaa:	f109 0b01 	add.w	fp, r9, #1
 8016eae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016eb2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016eb6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8016eba:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ebe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ec2:	fb18 fa0a 	smulbb	sl, r8, sl
 8016ec6:	f805 9006 	strb.w	r9, [r5, r6]
 8016eca:	442e      	add	r6, r5
 8016ecc:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016ed0:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016ed4:	fb08 aa02 	mla	sl, r8, r2, sl
 8016ed8:	fb09 b902 	mla	r9, r9, r2, fp
 8016edc:	fa1f fa8a 	uxth.w	sl, sl
 8016ee0:	fa1f f989 	uxth.w	r9, r9
 8016ee4:	f10a 0801 	add.w	r8, sl, #1
 8016ee8:	f109 0b01 	add.w	fp, r9, #1
 8016eec:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8016ef0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016ef4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016ef8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016efc:	f886 a002 	strb.w	sl, [r6, #2]
 8016f00:	f886 9001 	strb.w	r9, [r6, #1]
 8016f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f06:	4474      	add	r4, lr
 8016f08:	3701      	adds	r7, #1
 8016f0a:	4410      	add	r0, r2
 8016f0c:	e755      	b.n	8016dba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8016f0e:	b007      	add	sp, #28
 8016f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f14:	2400f1c0 	.word	0x2400f1c0

08016f18 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1c:	b085      	sub	sp, #20
 8016f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016f24:	9203      	str	r2, [sp, #12]
 8016f26:	6860      	ldr	r0, [r4, #4]
 8016f28:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016f2c:	9100      	str	r1, [sp, #0]
 8016f2e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8016f32:	fb00 2606 	mla	r6, r0, r6, r2
 8016f36:	6822      	ldr	r2, [r4, #0]
 8016f38:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016f3c:	4416      	add	r6, r2
 8016f3e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016f42:	3201      	adds	r2, #1
 8016f44:	f022 0201 	bic.w	r2, r2, #1
 8016f48:	9201      	str	r2, [sp, #4]
 8016f4a:	f8dc 2000 	ldr.w	r2, [ip]
 8016f4e:	9202      	str	r2, [sp, #8]
 8016f50:	9a00      	ldr	r2, [sp, #0]
 8016f52:	2a00      	cmp	r2, #0
 8016f54:	dc03      	bgt.n	8016f5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016f56:	9a03      	ldr	r2, [sp, #12]
 8016f58:	2a00      	cmp	r2, #0
 8016f5a:	f340 8140 	ble.w	80171de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8016f5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f60:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016f64:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8016f68:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016f6a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016f6e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	dd0e      	ble.n	8016f94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016f76:	142a      	asrs	r2, r5, #16
 8016f78:	d405      	bmi.n	8016f86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f7a:	4572      	cmp	r2, lr
 8016f7c:	da03      	bge.n	8016f86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f7e:	1422      	asrs	r2, r4, #16
 8016f80:	d401      	bmi.n	8016f86 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f82:	42ba      	cmp	r2, r7
 8016f84:	db07      	blt.n	8016f96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f88:	3b01      	subs	r3, #1
 8016f8a:	3603      	adds	r6, #3
 8016f8c:	4415      	add	r5, r2
 8016f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f90:	4414      	add	r4, r2
 8016f92:	e7ee      	b.n	8016f72 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016f94:	d072      	beq.n	801707c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f96:	1e5a      	subs	r2, r3, #1
 8016f98:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016f9a:	fb00 5002 	mla	r0, r0, r2, r5
 8016f9e:	1400      	asrs	r0, r0, #16
 8016fa0:	d463      	bmi.n	801706a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fa2:	4570      	cmp	r0, lr
 8016fa4:	da61      	bge.n	801706a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fa6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016fa8:	fb00 4202 	mla	r2, r0, r2, r4
 8016fac:	1412      	asrs	r2, r2, #16
 8016fae:	d45c      	bmi.n	801706a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fb0:	42ba      	cmp	r2, r7
 8016fb2:	da5a      	bge.n	801706a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fb4:	1cf0      	adds	r0, r6, #3
 8016fb6:	469a      	mov	sl, r3
 8016fb8:	f1ba 0f00 	cmp.w	sl, #0
 8016fbc:	dd59      	ble.n	8017072 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016fbe:	142a      	asrs	r2, r5, #16
 8016fc0:	9901      	ldr	r1, [sp, #4]
 8016fc2:	1427      	asrs	r7, r4, #16
 8016fc4:	fb01 2707 	mla	r7, r1, r7, r2
 8016fc8:	9902      	ldr	r1, [sp, #8]
 8016fca:	087a      	lsrs	r2, r7, #1
 8016fcc:	5c8a      	ldrb	r2, [r1, r2]
 8016fce:	07f9      	lsls	r1, r7, #31
 8016fd0:	bf54      	ite	pl
 8016fd2:	f002 020f 	andpl.w	r2, r2, #15
 8016fd6:	1112      	asrmi	r2, r2, #4
 8016fd8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016fdc:	b2d2      	uxtb	r2, r2
 8016fde:	2a00      	cmp	r2, #0
 8016fe0:	d03b      	beq.n	801705a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016fe2:	4980      	ldr	r1, [pc, #512]	; (80171e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8016fe4:	2aff      	cmp	r2, #255	; 0xff
 8016fe6:	680f      	ldr	r7, [r1, #0]
 8016fe8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016fec:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016ff0:	b2ff      	uxtb	r7, r7
 8016ff2:	f000 80ed 	beq.w	80171d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8016ff6:	fa1f f882 	uxth.w	r8, r2
 8016ffa:	43d2      	mvns	r2, r2
 8016ffc:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017000:	fb17 f708 	smulbb	r7, r7, r8
 8017004:	b2d2      	uxtb	r2, r2
 8017006:	fb19 f908 	smulbb	r9, r9, r8
 801700a:	fb0e 7702 	mla	r7, lr, r2, r7
 801700e:	fb1b f808 	smulbb	r8, fp, r8
 8017012:	b2bf      	uxth	r7, r7
 8017014:	f107 0e01 	add.w	lr, r7, #1
 8017018:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801701c:	123f      	asrs	r7, r7, #8
 801701e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017022:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017026:	fb07 9902 	mla	r9, r7, r2, r9
 801702a:	fa1f f989 	uxth.w	r9, r9
 801702e:	f109 0701 	add.w	r7, r9, #1
 8017032:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017036:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801703a:	fb07 8802 	mla	r8, r7, r2, r8
 801703e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017042:	fa1f f888 	uxth.w	r8, r8
 8017046:	f800 9c02 	strb.w	r9, [r0, #-2]
 801704a:	f108 0201 	add.w	r2, r8, #1
 801704e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017052:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017056:	f800 8c01 	strb.w	r8, [r0, #-1]
 801705a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801705c:	3003      	adds	r0, #3
 801705e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017062:	4415      	add	r5, r2
 8017064:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017066:	4414      	add	r4, r2
 8017068:	e7a6      	b.n	8016fb8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801706a:	2700      	movs	r7, #0
 801706c:	1bda      	subs	r2, r3, r7
 801706e:	2a00      	cmp	r2, #0
 8017070:	dc40      	bgt.n	80170f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8017072:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017076:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801707a:	441e      	add	r6, r3
 801707c:	9b00      	ldr	r3, [sp, #0]
 801707e:	2b00      	cmp	r3, #0
 8017080:	f340 80ad 	ble.w	80171de <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017084:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801708a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801708e:	eeb0 6a62 	vmov.f32	s12, s5
 8017092:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017096:	ee31 1a05 	vadd.f32	s2, s2, s10
 801709a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801709e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80170a2:	eeb0 6a43 	vmov.f32	s12, s6
 80170a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170aa:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80170ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80170b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80170ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80170be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80170c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80170c6:	ee12 2a90 	vmov	r2, s5
 80170ca:	eef0 2a47 	vmov.f32	s5, s14
 80170ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80170d2:	ee13 2a10 	vmov	r2, s6
 80170d6:	9311      	str	r3, [sp, #68]	; 0x44
 80170d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170da:	eeb0 3a67 	vmov.f32	s6, s15
 80170de:	fb92 f3f3 	sdiv	r3, r2, r3
 80170e2:	9312      	str	r3, [sp, #72]	; 0x48
 80170e4:	9b00      	ldr	r3, [sp, #0]
 80170e6:	9a03      	ldr	r2, [sp, #12]
 80170e8:	3b01      	subs	r3, #1
 80170ea:	9300      	str	r3, [sp, #0]
 80170ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170ee:	bf08      	it	eq
 80170f0:	4613      	moveq	r3, r2
 80170f2:	e72d      	b.n	8016f50 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80170f4:	1428      	asrs	r0, r5, #16
 80170f6:	d45c      	bmi.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80170f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80170fc:	4282      	cmp	r2, r0
 80170fe:	dd58      	ble.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017100:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017104:	d455      	bmi.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017106:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801710a:	4572      	cmp	r2, lr
 801710c:	dd51      	ble.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801710e:	9a01      	ldr	r2, [sp, #4]
 8017110:	9902      	ldr	r1, [sp, #8]
 8017112:	fb0e 0002 	mla	r0, lr, r2, r0
 8017116:	0842      	lsrs	r2, r0, #1
 8017118:	07c0      	lsls	r0, r0, #31
 801711a:	5c8a      	ldrb	r2, [r1, r2]
 801711c:	bf54      	ite	pl
 801711e:	f002 020f 	andpl.w	r2, r2, #15
 8017122:	1112      	asrmi	r2, r2, #4
 8017124:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017128:	b2d2      	uxtb	r2, r2
 801712a:	2a00      	cmp	r2, #0
 801712c:	d041      	beq.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801712e:	492d      	ldr	r1, [pc, #180]	; (80171e4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017130:	2aff      	cmp	r2, #255	; 0xff
 8017132:	6808      	ldr	r0, [r1, #0]
 8017134:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017138:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801713c:	fa5f fe80 	uxtb.w	lr, r0
 8017140:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8017144:	d03b      	beq.n	80171be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017146:	fa1f f982 	uxth.w	r9, r2
 801714a:	4438      	add	r0, r7
 801714c:	43d2      	mvns	r2, r2
 801714e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8017152:	fb1e fe09 	smulbb	lr, lr, r9
 8017156:	fb1a fa09 	smulbb	sl, sl, r9
 801715a:	b2d2      	uxtb	r2, r2
 801715c:	fb1b f909 	smulbb	r9, fp, r9
 8017160:	fb08 ee02 	mla	lr, r8, r2, lr
 8017164:	fa1f fe8e 	uxth.w	lr, lr
 8017168:	f10e 0801 	add.w	r8, lr, #1
 801716c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8017170:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017174:	f806 e000 	strb.w	lr, [r6, r0]
 8017178:	4430      	add	r0, r6
 801717a:	f890 e001 	ldrb.w	lr, [r0, #1]
 801717e:	fb0e aa02 	mla	sl, lr, r2, sl
 8017182:	fa1f fa8a 	uxth.w	sl, sl
 8017186:	f10a 0e01 	add.w	lr, sl, #1
 801718a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801718e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8017192:	fb0e 9902 	mla	r9, lr, r2, r9
 8017196:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801719a:	fa1f f989 	uxth.w	r9, r9
 801719e:	f880 a001 	strb.w	sl, [r0, #1]
 80171a2:	f109 0201 	add.w	r2, r9, #1
 80171a6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80171aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171ae:	f880 9002 	strb.w	r9, [r0, #2]
 80171b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171b4:	3701      	adds	r7, #1
 80171b6:	4415      	add	r5, r2
 80171b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171ba:	4414      	add	r4, r2
 80171bc:	e756      	b.n	801706c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80171be:	4438      	add	r0, r7
 80171c0:	f806 e000 	strb.w	lr, [r6, r0]
 80171c4:	4430      	add	r0, r6
 80171c6:	f880 a001 	strb.w	sl, [r0, #1]
 80171ca:	f880 b002 	strb.w	fp, [r0, #2]
 80171ce:	e7f0      	b.n	80171b2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80171d0:	f800 7c03 	strb.w	r7, [r0, #-3]
 80171d4:	f800 9c02 	strb.w	r9, [r0, #-2]
 80171d8:	f800 bc01 	strb.w	fp, [r0, #-1]
 80171dc:	e73d      	b.n	801705a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80171de:	b005      	add	sp, #20
 80171e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e4:	2400f1c0 	.word	0x2400f1c0

080171e8 <_ZN8touchgfx8LCD24bppD1Ev>:
 80171e8:	4770      	bx	lr

080171ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80171ea:	4770      	bx	lr

080171ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80171ec:	4770      	bx	lr

080171ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80171ee:	4770      	bx	lr

080171f0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80171f0:	4770      	bx	lr

080171f2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80171f2:	4770      	bx	lr

080171f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80171f4:	4770      	bx	lr

080171f6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80171f6:	4770      	bx	lr

080171f8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80171f8:	4770      	bx	lr

080171fa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80171fa:	4770      	bx	lr

080171fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 80171fc:	4770      	bx	lr

080171fe <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 80171fe:	4770      	bx	lr

08017200 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017200:	4770      	bx	lr

08017202 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017202:	4770      	bx	lr

08017204 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017204:	4770      	bx	lr

08017206 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017206:	4770      	bx	lr

08017208 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017208:	4770      	bx	lr

0801720a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801720a:	4770      	bx	lr

0801720c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801720c:	4770      	bx	lr

0801720e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801720e:	4770      	bx	lr

08017210 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017210:	4770      	bx	lr
	...

08017214 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017214:	2bff      	cmp	r3, #255	; 0xff
 8017216:	b508      	push	{r3, lr}
 8017218:	d04f      	beq.n	80172ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801721a:	2a2c      	cmp	r2, #44	; 0x2c
 801721c:	d032      	beq.n	8017284 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x70>
 801721e:	d80f      	bhi.n	8017240 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2c>
 8017220:	2a08      	cmp	r2, #8
 8017222:	d046      	beq.n	80172b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017224:	d805      	bhi.n	8017232 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1e>
 8017226:	2a04      	cmp	r2, #4
 8017228:	d041      	beq.n	80172ae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801722a:	2a05      	cmp	r2, #5
 801722c:	d03d      	beq.n	80172aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801722e:	2000      	movs	r0, #0
 8017230:	e027      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017232:	2a0a      	cmp	r2, #10
 8017234:	d03d      	beq.n	80172b2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017236:	d301      	bcc.n	801723c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017238:	2a0b      	cmp	r2, #11
 801723a:	d1f8      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801723c:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801723e:	e020      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017240:	2a30      	cmp	r2, #48	; 0x30
 8017242:	d038      	beq.n	80172b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017244:	d808      	bhi.n	8017258 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x44>
 8017246:	2a2e      	cmp	r2, #46	; 0x2e
 8017248:	684b      	ldr	r3, [r1, #4]
 801724a:	d029      	beq.n	80172a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801724c:	d90b      	bls.n	8017266 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d1ec      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017254:	6a00      	ldr	r0, [r0, #32]
 8017256:	e014      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017258:	2a32      	cmp	r2, #50	; 0x32
 801725a:	d02c      	beq.n	80172b6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801725c:	d301      	bcc.n	8017262 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4e>
 801725e:	2a33      	cmp	r2, #51	; 0x33
 8017260:	d1e5      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017262:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017264:	e00d      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017266:	781b      	ldrb	r3, [r3, #0]
 8017268:	2b01      	cmp	r3, #1
 801726a:	d009      	beq.n	8017280 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 801726c:	d3f2      	bcc.n	8017254 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x40>
 801726e:	2b02      	cmp	r3, #2
 8017270:	d1dd      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017272:	4b39      	ldr	r3, [pc, #228]	; (8017358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017274:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8017278:	4a38      	ldr	r2, [pc, #224]	; (801735c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801727a:	4839      	ldr	r0, [pc, #228]	; (8017360 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x14c>)
 801727c:	f008 ff8a 	bl	8020194 <__assert_func>
 8017280:	6900      	ldr	r0, [r0, #16]
 8017282:	bd08      	pop	{r3, pc}
 8017284:	684b      	ldr	r3, [r1, #4]
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	2b01      	cmp	r3, #1
 801728a:	d007      	beq.n	801729c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801728c:	d30b      	bcc.n	80172a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801728e:	2b02      	cmp	r3, #2
 8017290:	d1cd      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017292:	4b31      	ldr	r3, [pc, #196]	; (8017358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017294:	f240 412c 	movw	r1, #1068	; 0x42c
 8017298:	4a30      	ldr	r2, [pc, #192]	; (801735c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801729a:	e7ee      	b.n	801727a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801729c:	6880      	ldr	r0, [r0, #8]
 801729e:	e7f0      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172a0:	781b      	ldrb	r3, [r3, #0]
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d1c3      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172a6:	6980      	ldr	r0, [r0, #24]
 80172a8:	e7eb      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80172ac:	e7e9      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172ae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80172b0:	e7e7      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80172b4:	e7e5      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172b6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80172b8:	e7e3      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172ba:	2a2c      	cmp	r2, #44	; 0x2c
 80172bc:	d030      	beq.n	8017320 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x10c>
 80172be:	d80f      	bhi.n	80172e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xcc>
 80172c0:	2a08      	cmp	r2, #8
 80172c2:	d044      	beq.n	801734e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80172c4:	d805      	bhi.n	80172d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 80172c6:	2a04      	cmp	r2, #4
 80172c8:	d03f      	beq.n	801734a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 80172ca:	2a05      	cmp	r2, #5
 80172cc:	d1af      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80172d0:	e7d7      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172d2:	2a0a      	cmp	r2, #10
 80172d4:	d03b      	beq.n	801734e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 80172d6:	d301      	bcc.n	80172dc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 80172d8:	2a0b      	cmp	r2, #11
 80172da:	d1a8      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172dc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80172de:	e7d0      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172e0:	2a30      	cmp	r2, #48	; 0x30
 80172e2:	d036      	beq.n	8017352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80172e4:	d808      	bhi.n	80172f8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe4>
 80172e6:	2a2e      	cmp	r2, #46	; 0x2e
 80172e8:	684b      	ldr	r3, [r1, #4]
 80172ea:	d028      	beq.n	801733e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 80172ec:	d90b      	bls.n	8017306 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf2>
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d19c      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80172f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80172f6:	e7c4      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 80172f8:	2a32      	cmp	r2, #50	; 0x32
 80172fa:	d02a      	beq.n	8017352 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 80172fc:	d301      	bcc.n	8017302 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 80172fe:	2a33      	cmp	r2, #51	; 0x33
 8017300:	d195      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017302:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017304:	e7bd      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	2b01      	cmp	r3, #1
 801730a:	d007      	beq.n	801731c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x108>
 801730c:	d3f2      	bcc.n	80172f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 801730e:	2b02      	cmp	r3, #2
 8017310:	d18d      	bne.n	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017312:	4b11      	ldr	r3, [pc, #68]	; (8017358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017314:	f240 415d 	movw	r1, #1117	; 0x45d
 8017318:	4a10      	ldr	r2, [pc, #64]	; (801735c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 801731a:	e7ae      	b.n	801727a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801731c:	6940      	ldr	r0, [r0, #20]
 801731e:	e7b0      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017320:	684b      	ldr	r3, [r1, #4]
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	2b01      	cmp	r3, #1
 8017326:	d008      	beq.n	801733a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8017328:	d30d      	bcc.n	8017346 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801732a:	2b02      	cmp	r3, #2
 801732c:	f47f af7f 	bne.w	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017330:	4b09      	ldr	r3, [pc, #36]	; (8017358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x144>)
 8017332:	f240 4169 	movw	r1, #1129	; 0x469
 8017336:	4a09      	ldr	r2, [pc, #36]	; (801735c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x148>)
 8017338:	e79f      	b.n	801727a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801733a:	68c0      	ldr	r0, [r0, #12]
 801733c:	e7a1      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	2b00      	cmp	r3, #0
 8017342:	f47f af74 	bne.w	801722e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017346:	69c0      	ldr	r0, [r0, #28]
 8017348:	e79b      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801734a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801734c:	e799      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801734e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017350:	e797      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017352:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017354:	e795      	b.n	8017282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017356:	bf00      	nop
 8017358:	08025ee5 	.word	0x08025ee5
 801735c:	0802665f 	.word	0x0802665f
 8017360:	08025f31 	.word	0x08025f31

08017364 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8017364:	b508      	push	{r3, lr}
 8017366:	4b06      	ldr	r3, [pc, #24]	; (8017380 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x1c>)
 8017368:	8818      	ldrh	r0, [r3, #0]
 801736a:	b928      	cbnz	r0, 8017378 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x14>
 801736c:	4b05      	ldr	r3, [pc, #20]	; (8017384 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x20>)
 801736e:	2151      	movs	r1, #81	; 0x51
 8017370:	4a05      	ldr	r2, [pc, #20]	; (8017388 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x24>)
 8017372:	4806      	ldr	r0, [pc, #24]	; (801738c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0x28>)
 8017374:	f008 ff0e 	bl	8020194 <__assert_func>
 8017378:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801737c:	b280      	uxth	r0, r0
 801737e:	bd08      	pop	{r3, pc}
 8017380:	2400f192 	.word	0x2400f192
 8017384:	0802612b 	.word	0x0802612b
 8017388:	08026624 	.word	0x08026624
 801738c:	0802616d 	.word	0x0802616d

08017390 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017392:	4606      	mov	r6, r0
 8017394:	b087      	sub	sp, #28
 8017396:	4615      	mov	r5, r2
 8017398:	461f      	mov	r7, r3
 801739a:	b353      	cbz	r3, 80173f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801739c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	dd26      	ble.n	80173f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173a4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	dd22      	ble.n	80173f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173ac:	6808      	ldr	r0, [r1, #0]
 80173ae:	aa04      	add	r2, sp, #16
 80173b0:	6849      	ldr	r1, [r1, #4]
 80173b2:	4c1b      	ldr	r4, [pc, #108]	; (8017420 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80173b4:	c203      	stmia	r2!, {r0, r1}
 80173b6:	a804      	add	r0, sp, #16
 80173b8:	f7fa fe0a 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80173bc:	6820      	ldr	r0, [r4, #0]
 80173be:	6803      	ldr	r3, [r0, #0]
 80173c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c2:	4798      	blx	r3
 80173c4:	2fff      	cmp	r7, #255	; 0xff
 80173c6:	d016      	beq.n	80173f6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80173c8:	f010 0f08 	tst.w	r0, #8
 80173cc:	6820      	ldr	r0, [r4, #0]
 80173ce:	d015      	beq.n	80173fc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 80173d0:	2400      	movs	r4, #0
 80173d2:	6801      	ldr	r1, [r0, #0]
 80173d4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80173d8:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80173dc:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80173e0:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80173e4:	9401      	str	r4, [sp, #4]
 80173e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80173ea:	9400      	str	r4, [sp, #0]
 80173ec:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80173ee:	4629      	mov	r1, r5
 80173f0:	47a0      	blx	r4
 80173f2:	b007      	add	sp, #28
 80173f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173f6:	f010 0f02 	tst.w	r0, #2
 80173fa:	e7e7      	b.n	80173cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80173fc:	6803      	ldr	r3, [r0, #0]
 80173fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017400:	4798      	blx	r3
 8017402:	4b08      	ldr	r3, [pc, #32]	; (8017424 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8017404:	4601      	mov	r1, r0
 8017406:	4630      	mov	r0, r6
 8017408:	881a      	ldrh	r2, [r3, #0]
 801740a:	6833      	ldr	r3, [r6, #0]
 801740c:	e9cd 5700 	strd	r5, r7, [sp]
 8017410:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017412:	ab04      	add	r3, sp, #16
 8017414:	47a8      	blx	r5
 8017416:	6820      	ldr	r0, [r4, #0]
 8017418:	6803      	ldr	r3, [r0, #0]
 801741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801741c:	4798      	blx	r3
 801741e:	e7e8      	b.n	80173f2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017420:	2400f198 	.word	0x2400f198
 8017424:	2400f192 	.word	0x2400f192

08017428 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8017428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801742c:	b08b      	sub	sp, #44	; 0x2c
 801742e:	460d      	mov	r5, r1
 8017430:	4616      	mov	r6, r2
 8017432:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8017436:	f1b8 0f00 	cmp.w	r8, #0
 801743a:	d047      	beq.n	80174cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801743c:	6810      	ldr	r0, [r2, #0]
 801743e:	ac06      	add	r4, sp, #24
 8017440:	6851      	ldr	r1, [r2, #4]
 8017442:	4f51      	ldr	r7, [pc, #324]	; (8017588 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8017444:	c403      	stmia	r4!, {r0, r1}
 8017446:	6818      	ldr	r0, [r3, #0]
 8017448:	ac08      	add	r4, sp, #32
 801744a:	6859      	ldr	r1, [r3, #4]
 801744c:	c403      	stmia	r4!, {r0, r1}
 801744e:	a806      	add	r0, sp, #24
 8017450:	f7fa fdbe 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017454:	4631      	mov	r1, r6
 8017456:	a808      	add	r0, sp, #32
 8017458:	f7fa fde2 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801745c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017460:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017464:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017468:	6838      	ldr	r0, [r7, #0]
 801746a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801746e:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8017472:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8017476:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801747a:	440d      	add	r5, r1
 801747c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017480:	440a      	add	r2, r1
 8017482:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017486:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801748a:	4413      	add	r3, r2
 801748c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017490:	6803      	ldr	r3, [r0, #0]
 8017492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017494:	4798      	blx	r3
 8017496:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801749a:	d01a      	beq.n	80174d2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801749c:	f010 0f04 	tst.w	r0, #4
 80174a0:	6838      	ldr	r0, [r7, #0]
 80174a2:	d019      	beq.n	80174d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 80174a4:	2100      	movs	r1, #0
 80174a6:	6807      	ldr	r7, [r0, #0]
 80174a8:	b2a4      	uxth	r4, r4
 80174aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80174ae:	b2b6      	uxth	r6, r6
 80174b0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80174b4:	9401      	str	r4, [sp, #4]
 80174b6:	9600      	str	r6, [sp, #0]
 80174b8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80174bc:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80174c0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80174c4:	9102      	str	r1, [sp, #8]
 80174c6:	4629      	mov	r1, r5
 80174c8:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80174ca:	47a0      	blx	r4
 80174cc:	b00b      	add	sp, #44	; 0x2c
 80174ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174d2:	f010 0f01 	tst.w	r0, #1
 80174d6:	e7e3      	b.n	80174a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80174d8:	6803      	ldr	r3, [r0, #0]
 80174da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174dc:	4798      	blx	r3
 80174de:	4a2b      	ldr	r2, [pc, #172]	; (801758c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80174e0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 80174e4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80174e8:	8813      	ldrh	r3, [r2, #0]
 80174ea:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80174ee:	fb03 f404 	mul.w	r4, r3, r4
 80174f2:	fb03 c101 	mla	r1, r3, r1, ip
 80174f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80174fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80174fe:	4408      	add	r0, r1
 8017500:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8017504:	4404      	add	r4, r0
 8017506:	d02e      	beq.n	8017566 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8017508:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801750c:	1b9b      	subs	r3, r3, r6
 801750e:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8017512:	1b96      	subs	r6, r2, r6
 8017514:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017518:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801751c:	42a0      	cmp	r0, r4
 801751e:	d22d      	bcs.n	801757c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8017520:	eb00 0e01 	add.w	lr, r0, r1
 8017524:	4570      	cmp	r0, lr
 8017526:	d210      	bcs.n	801754a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8017528:	f890 9000 	ldrb.w	r9, [r0]
 801752c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017530:	fb19 f90c 	smulbb	r9, r9, ip
 8017534:	fb02 9208 	mla	r2, r2, r8, r9
 8017538:	b292      	uxth	r2, r2
 801753a:	f102 0901 	add.w	r9, r2, #1
 801753e:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8017542:	1212      	asrs	r2, r2, #8
 8017544:	f800 2b01 	strb.w	r2, [r0], #1
 8017548:	e7ec      	b.n	8017524 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801754a:	4418      	add	r0, r3
 801754c:	4435      	add	r5, r6
 801754e:	e7e5      	b.n	801751c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017550:	8813      	ldrh	r3, [r2, #0]
 8017552:	1b9b      	subs	r3, r3, r6
 8017554:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017558:	4418      	add	r0, r3
 801755a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801755e:	1b9b      	subs	r3, r3, r6
 8017560:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017564:	441d      	add	r5, r3
 8017566:	42a0      	cmp	r0, r4
 8017568:	d208      	bcs.n	801757c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801756a:	eb00 0c01 	add.w	ip, r0, r1
 801756e:	4560      	cmp	r0, ip
 8017570:	d2ee      	bcs.n	8017550 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017576:	f800 3b01 	strb.w	r3, [r0], #1
 801757a:	e7f8      	b.n	801756e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801757c:	6838      	ldr	r0, [r7, #0]
 801757e:	6803      	ldr	r3, [r0, #0]
 8017580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017582:	4798      	blx	r3
 8017584:	e7a2      	b.n	80174cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8017586:	bf00      	nop
 8017588:	2400f198 	.word	0x2400f198
 801758c:	2400f192 	.word	0x2400f192

08017590 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017592:	2300      	movs	r3, #0
 8017594:	b085      	sub	sp, #20
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	4b41      	ldr	r3, [pc, #260]	; (80176a0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801759a:	781b      	ldrb	r3, [r3, #0]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d136      	bne.n	801760e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 80175a0:	4a40      	ldr	r2, [pc, #256]	; (80176a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80175a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80175a6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d131      	bne.n	8017612 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 80175ae:	4b3e      	ldr	r3, [pc, #248]	; (80176a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80175b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175b4:	ac02      	add	r4, sp, #8
 80175b6:	6808      	ldr	r0, [r1, #0]
 80175b8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80175bc:	ab02      	add	r3, sp, #8
 80175be:	6849      	ldr	r1, [r1, #4]
 80175c0:	4d3a      	ldr	r5, [pc, #232]	; (80176ac <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 80175c2:	c303      	stmia	r3!, {r0, r1}
 80175c4:	4669      	mov	r1, sp
 80175c6:	4620      	mov	r0, r4
 80175c8:	f7fa fd2a 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80175cc:	4668      	mov	r0, sp
 80175ce:	f7fa fcff 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80175d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80175d6:	f8bd 2000 	ldrh.w	r2, [sp]
 80175da:	462e      	mov	r6, r5
 80175dc:	6828      	ldr	r0, [r5, #0]
 80175de:	4413      	add	r3, r2
 80175e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80175e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80175e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80175ec:	4413      	add	r3, r2
 80175ee:	f8ad 300a 	strh.w	r3, [sp, #10]
 80175f2:	6803      	ldr	r3, [r0, #0]
 80175f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175f6:	4798      	blx	r3
 80175f8:	f010 0f01 	tst.w	r0, #1
 80175fc:	d00b      	beq.n	8017616 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80175fe:	6828      	ldr	r0, [r5, #0]
 8017600:	6803      	ldr	r3, [r0, #0]
 8017602:	e894 0006 	ldmia.w	r4, {r1, r2}
 8017606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017608:	4798      	blx	r3
 801760a:	b005      	add	sp, #20
 801760c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801760e:	4a26      	ldr	r2, [pc, #152]	; (80176a8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017610:	e7c7      	b.n	80175a2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8017612:	4b24      	ldr	r3, [pc, #144]	; (80176a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017614:	e7cc      	b.n	80175b0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8017616:	6830      	ldr	r0, [r6, #0]
 8017618:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801761c:	6803      	ldr	r3, [r0, #0]
 801761e:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8017622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017624:	4798      	blx	r3
 8017626:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801762a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801762e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8017632:	fb14 3402 	smlabb	r4, r4, r2, r3
 8017636:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801763a:	4404      	add	r4, r0
 801763c:	6830      	ldr	r0, [r6, #0]
 801763e:	6803      	ldr	r3, [r0, #0]
 8017640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017642:	4798      	blx	r3
 8017644:	4917      	ldr	r1, [pc, #92]	; (80176a4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017646:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801764a:	880b      	ldrh	r3, [r1, #0]
 801764c:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017650:	fb03 c202 	mla	r2, r3, r2, ip
 8017654:	437b      	muls	r3, r7
 8017656:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801765a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801765e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017662:	4410      	add	r0, r2
 8017664:	18c2      	adds	r2, r0, r3
 8017666:	4290      	cmp	r0, r2
 8017668:	d214      	bcs.n	8017694 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801766a:	eb00 0c07 	add.w	ip, r0, r7
 801766e:	4560      	cmp	r0, ip
 8017670:	d204      	bcs.n	801767c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017672:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017676:	f800 3b01 	strb.w	r3, [r0], #1
 801767a:	e7f8      	b.n	801766e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801767c:	880b      	ldrh	r3, [r1, #0]
 801767e:	1b5b      	subs	r3, r3, r5
 8017680:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017684:	4418      	add	r0, r3
 8017686:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801768a:	1b5b      	subs	r3, r3, r5
 801768c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017690:	441c      	add	r4, r3
 8017692:	e7e8      	b.n	8017666 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017694:	6830      	ldr	r0, [r6, #0]
 8017696:	6803      	ldr	r3, [r0, #0]
 8017698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801769a:	4798      	blx	r3
 801769c:	e7b5      	b.n	801760a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801769e:	bf00      	nop
 80176a0:	2400f190 	.word	0x2400f190
 80176a4:	2400f192 	.word	0x2400f192
 80176a8:	2400f194 	.word	0x2400f194
 80176ac:	2400f198 	.word	0x2400f198

080176b0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80176b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b4:	4698      	mov	r8, r3
 80176b6:	4b24      	ldr	r3, [pc, #144]	; (8017748 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x98>)
 80176b8:	b089      	sub	sp, #36	; 0x24
 80176ba:	4605      	mov	r5, r0
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	468a      	mov	sl, r1
 80176c0:	4693      	mov	fp, r2
 80176c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80176c6:	2b02      	cmp	r3, #2
 80176c8:	d106      	bne.n	80176d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28>
 80176ca:	4b20      	ldr	r3, [pc, #128]	; (801774c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x9c>)
 80176cc:	f240 11eb 	movw	r1, #491	; 0x1eb
 80176d0:	4a1f      	ldr	r2, [pc, #124]	; (8017750 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 80176d2:	4820      	ldr	r0, [pc, #128]	; (8017754 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa4>)
 80176d4:	f008 fd5e 	bl	8020194 <__assert_func>
 80176d8:	ac08      	add	r4, sp, #32
 80176da:	f824 8d0c 	strh.w	r8, [r4, #-12]!
 80176de:	4620      	mov	r0, r4
 80176e0:	f7fe f932 	bl	8015948 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80176e4:	682b      	ldr	r3, [r5, #0]
 80176e6:	4606      	mov	r6, r0
 80176e8:	4628      	mov	r0, r5
 80176ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80176ec:	4798      	blx	r3
 80176ee:	4286      	cmp	r6, r0
 80176f0:	d004      	beq.n	80176fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4c>
 80176f2:	4b19      	ldr	r3, [pc, #100]	; (8017758 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa8>)
 80176f4:	f240 11ed 	movw	r1, #493	; 0x1ed
 80176f8:	4a15      	ldr	r2, [pc, #84]	; (8017750 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 80176fa:	e7ea      	b.n	80176d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 80176fc:	4620      	mov	r0, r4
 80176fe:	f7fe f899 	bl	8015834 <_ZNK8touchgfx6Bitmap7getDataEv>
 8017702:	4606      	mov	r6, r0
 8017704:	b920      	cbnz	r0, 8017710 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x60>
 8017706:	4b15      	ldr	r3, [pc, #84]	; (801775c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xac>)
 8017708:	f240 11ef 	movw	r1, #495	; 0x1ef
 801770c:	4a10      	ldr	r2, [pc, #64]	; (8017750 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xa0>)
 801770e:	e7e0      	b.n	80176d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x22>
 8017710:	682b      	ldr	r3, [r5, #0]
 8017712:	4620      	mov	r0, r4
 8017714:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8017718:	f7fd ffaa 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801771c:	4607      	mov	r7, r0
 801771e:	4620      	mov	r0, r4
 8017720:	f7fd ffea 	bl	80156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017724:	465b      	mov	r3, fp
 8017726:	b200      	sxth	r0, r0
 8017728:	4652      	mov	r2, sl
 801772a:	b23f      	sxth	r7, r7
 801772c:	4629      	mov	r1, r5
 801772e:	9002      	str	r0, [sp, #8]
 8017730:	a806      	add	r0, sp, #24
 8017732:	e9cd 6700 	strd	r6, r7, [sp]
 8017736:	47c8      	blx	r9
 8017738:	a906      	add	r1, sp, #24
 801773a:	4640      	mov	r0, r8
 801773c:	f7fd fe60 	bl	8015400 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8017740:	4630      	mov	r0, r6
 8017742:	b009      	add	sp, #36	; 0x24
 8017744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017748:	2400f198 	.word	0x2400f198
 801774c:	08025fb1 	.word	0x08025fb1
 8017750:	0802679c 	.word	0x0802679c
 8017754:	08025f31 	.word	0x08025f31
 8017758:	08026063 	.word	0x08026063
 801775c:	080260b8 	.word	0x080260b8

08017760 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017760:	b510      	push	{r4, lr}
 8017762:	4604      	mov	r4, r0
 8017764:	2158      	movs	r1, #88	; 0x58
 8017766:	f007 feee 	bl	801f546 <_ZdlPvj>
 801776a:	4620      	mov	r0, r4
 801776c:	bd10      	pop	{r4, pc}

0801776e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801776e:	b510      	push	{r4, lr}
 8017770:	4604      	mov	r4, r0
 8017772:	2104      	movs	r1, #4
 8017774:	f007 fee7 	bl	801f546 <_ZdlPvj>
 8017778:	4620      	mov	r0, r4
 801777a:	bd10      	pop	{r4, pc}

0801777c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801777c:	b510      	push	{r4, lr}
 801777e:	4604      	mov	r4, r0
 8017780:	2104      	movs	r1, #4
 8017782:	f007 fee0 	bl	801f546 <_ZdlPvj>
 8017786:	4620      	mov	r0, r4
 8017788:	bd10      	pop	{r4, pc}

0801778a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801778a:	b510      	push	{r4, lr}
 801778c:	4604      	mov	r4, r0
 801778e:	2104      	movs	r1, #4
 8017790:	f007 fed9 	bl	801f546 <_ZdlPvj>
 8017794:	4620      	mov	r0, r4
 8017796:	bd10      	pop	{r4, pc}

08017798 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017798:	b510      	push	{r4, lr}
 801779a:	4604      	mov	r4, r0
 801779c:	2104      	movs	r1, #4
 801779e:	f007 fed2 	bl	801f546 <_ZdlPvj>
 80177a2:	4620      	mov	r0, r4
 80177a4:	bd10      	pop	{r4, pc}

080177a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80177a6:	b510      	push	{r4, lr}
 80177a8:	4604      	mov	r4, r0
 80177aa:	2104      	movs	r1, #4
 80177ac:	f007 fecb 	bl	801f546 <_ZdlPvj>
 80177b0:	4620      	mov	r0, r4
 80177b2:	bd10      	pop	{r4, pc}

080177b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80177b4:	b510      	push	{r4, lr}
 80177b6:	4604      	mov	r4, r0
 80177b8:	2104      	movs	r1, #4
 80177ba:	f007 fec4 	bl	801f546 <_ZdlPvj>
 80177be:	4620      	mov	r0, r4
 80177c0:	bd10      	pop	{r4, pc}

080177c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80177c2:	b510      	push	{r4, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	2104      	movs	r1, #4
 80177c8:	f007 febd 	bl	801f546 <_ZdlPvj>
 80177cc:	4620      	mov	r0, r4
 80177ce:	bd10      	pop	{r4, pc}

080177d0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	4604      	mov	r4, r0
 80177d4:	2104      	movs	r1, #4
 80177d6:	f007 feb6 	bl	801f546 <_ZdlPvj>
 80177da:	4620      	mov	r0, r4
 80177dc:	bd10      	pop	{r4, pc}

080177de <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80177de:	b510      	push	{r4, lr}
 80177e0:	4604      	mov	r4, r0
 80177e2:	2104      	movs	r1, #4
 80177e4:	f007 feaf 	bl	801f546 <_ZdlPvj>
 80177e8:	4620      	mov	r0, r4
 80177ea:	bd10      	pop	{r4, pc}

080177ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	4604      	mov	r4, r0
 80177f0:	2104      	movs	r1, #4
 80177f2:	f007 fea8 	bl	801f546 <_ZdlPvj>
 80177f6:	4620      	mov	r0, r4
 80177f8:	bd10      	pop	{r4, pc}

080177fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80177fa:	b510      	push	{r4, lr}
 80177fc:	4604      	mov	r4, r0
 80177fe:	2104      	movs	r1, #4
 8017800:	f007 fea1 	bl	801f546 <_ZdlPvj>
 8017804:	4620      	mov	r0, r4
 8017806:	bd10      	pop	{r4, pc}

08017808 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017808:	b510      	push	{r4, lr}
 801780a:	4604      	mov	r4, r0
 801780c:	2104      	movs	r1, #4
 801780e:	f007 fe9a 	bl	801f546 <_ZdlPvj>
 8017812:	4620      	mov	r0, r4
 8017814:	bd10      	pop	{r4, pc}

08017816 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017816:	b510      	push	{r4, lr}
 8017818:	4604      	mov	r4, r0
 801781a:	2104      	movs	r1, #4
 801781c:	f007 fe93 	bl	801f546 <_ZdlPvj>
 8017820:	4620      	mov	r0, r4
 8017822:	bd10      	pop	{r4, pc}

08017824 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017824:	b510      	push	{r4, lr}
 8017826:	4604      	mov	r4, r0
 8017828:	2104      	movs	r1, #4
 801782a:	f007 fe8c 	bl	801f546 <_ZdlPvj>
 801782e:	4620      	mov	r0, r4
 8017830:	bd10      	pop	{r4, pc}

08017832 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017832:	b510      	push	{r4, lr}
 8017834:	4604      	mov	r4, r0
 8017836:	2104      	movs	r1, #4
 8017838:	f007 fe85 	bl	801f546 <_ZdlPvj>
 801783c:	4620      	mov	r0, r4
 801783e:	bd10      	pop	{r4, pc}

08017840 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017840:	b510      	push	{r4, lr}
 8017842:	4604      	mov	r4, r0
 8017844:	2104      	movs	r1, #4
 8017846:	f007 fe7e 	bl	801f546 <_ZdlPvj>
 801784a:	4620      	mov	r0, r4
 801784c:	bd10      	pop	{r4, pc}

0801784e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801784e:	b510      	push	{r4, lr}
 8017850:	4604      	mov	r4, r0
 8017852:	2104      	movs	r1, #4
 8017854:	f007 fe77 	bl	801f546 <_ZdlPvj>
 8017858:	4620      	mov	r0, r4
 801785a:	bd10      	pop	{r4, pc}

0801785c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	2104      	movs	r1, #4
 8017862:	f007 fe70 	bl	801f546 <_ZdlPvj>
 8017866:	4620      	mov	r0, r4
 8017868:	bd10      	pop	{r4, pc}

0801786a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801786a:	b510      	push	{r4, lr}
 801786c:	4604      	mov	r4, r0
 801786e:	2104      	movs	r1, #4
 8017870:	f007 fe69 	bl	801f546 <_ZdlPvj>
 8017874:	4620      	mov	r0, r4
 8017876:	bd10      	pop	{r4, pc}

08017878 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017878:	b510      	push	{r4, lr}
 801787a:	4604      	mov	r4, r0
 801787c:	2104      	movs	r1, #4
 801787e:	f007 fe62 	bl	801f546 <_ZdlPvj>
 8017882:	4620      	mov	r0, r4
 8017884:	bd10      	pop	{r4, pc}

08017886 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8017886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801788a:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801788e:	9c06      	ldr	r4, [sp, #24]
 8017890:	2800      	cmp	r0, #0
 8017892:	d06e      	beq.n	8017972 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017894:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8017898:	2d00      	cmp	r5, #0
 801789a:	dd6a      	ble.n	8017972 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801789c:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80178a0:	f1bc 0f00 	cmp.w	ip, #0
 80178a4:	dd65      	ble.n	8017972 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80178a6:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80178aa:	28ff      	cmp	r0, #255	; 0xff
 80178ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80178b0:	f3c4 2707 	ubfx	r7, r4, #8, #8
 80178b4:	fb02 3306 	mla	r3, r2, r6, r3
 80178b8:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80178bc:	b2e4      	uxtb	r4, r4
 80178be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80178c2:	4419      	add	r1, r3
 80178c4:	fb02 f30c 	mul.w	r3, r2, ip
 80178c8:	eba2 0205 	sub.w	r2, r2, r5
 80178cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80178d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80178d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80178d8:	440b      	add	r3, r1
 80178da:	d03e      	beq.n	801795a <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 80178dc:	fa1f fc80 	uxth.w	ip, r0
 80178e0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80178e4:	fb06 f60c 	mul.w	r6, r6, ip
 80178e8:	b280      	uxth	r0, r0
 80178ea:	fb07 f70c 	mul.w	r7, r7, ip
 80178ee:	fb04 f40c 	mul.w	r4, r4, ip
 80178f2:	4299      	cmp	r1, r3
 80178f4:	d23d      	bcs.n	8017972 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80178f6:	eb01 0c05 	add.w	ip, r1, r5
 80178fa:	458c      	cmp	ip, r1
 80178fc:	f101 0e03 	add.w	lr, r1, #3
 8017900:	d928      	bls.n	8017954 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8017902:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017906:	fb11 f100 	smulbb	r1, r1, r0
 801790a:	4421      	add	r1, r4
 801790c:	b289      	uxth	r1, r1
 801790e:	f101 0801 	add.w	r8, r1, #1
 8017912:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017916:	1209      	asrs	r1, r1, #8
 8017918:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801791c:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8017920:	fb11 f100 	smulbb	r1, r1, r0
 8017924:	4439      	add	r1, r7
 8017926:	b289      	uxth	r1, r1
 8017928:	f101 0801 	add.w	r8, r1, #1
 801792c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017930:	1209      	asrs	r1, r1, #8
 8017932:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8017936:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801793a:	fb11 f100 	smulbb	r1, r1, r0
 801793e:	4431      	add	r1, r6
 8017940:	b289      	uxth	r1, r1
 8017942:	f101 0801 	add.w	r8, r1, #1
 8017946:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801794a:	1209      	asrs	r1, r1, #8
 801794c:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8017950:	4671      	mov	r1, lr
 8017952:	e7d2      	b.n	80178fa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8017954:	4411      	add	r1, r2
 8017956:	e7cc      	b.n	80178f2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8017958:	4411      	add	r1, r2
 801795a:	4299      	cmp	r1, r3
 801795c:	d209      	bcs.n	8017972 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801795e:	1948      	adds	r0, r1, r5
 8017960:	4281      	cmp	r1, r0
 8017962:	d2f9      	bcs.n	8017958 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8017964:	700c      	strb	r4, [r1, #0]
 8017966:	3103      	adds	r1, #3
 8017968:	f801 7c02 	strb.w	r7, [r1, #-2]
 801796c:	f801 6c01 	strb.w	r6, [r1, #-1]
 8017970:	e7f6      	b.n	8017960 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8017972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08017978 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8017978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801797c:	b093      	sub	sp, #76	; 0x4c
 801797e:	4699      	mov	r9, r3
 8017980:	4605      	mov	r5, r0
 8017982:	460e      	mov	r6, r1
 8017984:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	; 0x74
 8017988:	4617      	mov	r7, r2
 801798a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801798c:	9304      	str	r3, [sp, #16]
 801798e:	4b8c      	ldr	r3, [pc, #560]	; (8017bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>)
 8017990:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801799a:	2b02      	cmp	r3, #2
 801799c:	d106      	bne.n	80179ac <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x34>
 801799e:	4b89      	ldr	r3, [pc, #548]	; (8017bc4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x24c>)
 80179a0:	f240 11f7 	movw	r1, #503	; 0x1f7
 80179a4:	4a88      	ldr	r2, [pc, #544]	; (8017bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 80179a6:	4889      	ldr	r0, [pc, #548]	; (8017bcc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x254>)
 80179a8:	f008 fbf4 	bl	8020194 <__assert_func>
 80179ac:	b924      	cbnz	r4, 80179b8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x40>
 80179ae:	4b88      	ldr	r3, [pc, #544]	; (8017bd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x258>)
 80179b0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80179b4:	4a84      	ldr	r2, [pc, #528]	; (8017bc8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x250>)
 80179b6:	e7f6      	b.n	80179a6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x2e>
 80179b8:	f9b9 3002 	ldrsh.w	r3, [r9, #2]
 80179bc:	4649      	mov	r1, r9
 80179be:	f9b9 2000 	ldrsh.w	r2, [r9]
 80179c2:	a80c      	add	r0, sp, #48	; 0x30
 80179c4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80179c8:	9b04      	ldr	r3, [sp, #16]
 80179ca:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80179ce:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80179d2:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
 80179d6:	f7f5 fb2d 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 80179da:	4639      	mov	r1, r7
 80179dc:	a80c      	add	r0, sp, #48	; 0x30
 80179de:	f7f5 fb29 	bl	800d034 <_ZN8touchgfx4RectaNERKS0_>
 80179e2:	4b7c      	ldr	r3, [pc, #496]	; (8017bd4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x25c>)
 80179e4:	8818      	ldrh	r0, [r3, #0]
 80179e6:	4b7c      	ldr	r3, [pc, #496]	; (8017bd8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x260>)
 80179e8:	fa0f fc80 	sxth.w	ip, r0
 80179ec:	8819      	ldrh	r1, [r3, #0]
 80179ee:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80179f2:	b20f      	sxth	r7, r1
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	da07      	bge.n	8017a08 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x90>
 80179f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80179fc:	4413      	add	r3, r2
 80179fe:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017a02:	2300      	movs	r3, #0
 8017a04:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017a08:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017a0c:	f9bd e034 	ldrsh.w	lr, [sp, #52]	; 0x34
 8017a10:	ebac 0302 	sub.w	r3, ip, r2
 8017a14:	459e      	cmp	lr, r3
 8017a16:	bfc4      	itt	gt
 8017a18:	1a83      	subgt	r3, r0, r2
 8017a1a:	f8ad 3034 	strhgt.w	r3, [sp, #52]	; 0x34
 8017a1e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	da07      	bge.n	8017a36 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xbe>
 8017a26:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8017a2a:	4463      	add	r3, ip
 8017a2c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017a30:	2300      	movs	r3, #0
 8017a32:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017a36:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017a3a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8017a3e:	1aff      	subs	r7, r7, r3
 8017a40:	45bc      	cmp	ip, r7
 8017a42:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8017be0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x268>
 8017a46:	bfc8      	it	gt
 8017a48:	1acf      	subgt	r7, r1, r3
 8017a4a:	f89c c000 	ldrb.w	ip, [ip]
 8017a4e:	bfc8      	it	gt
 8017a50:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8017a54:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8017a58:	f1bc 0f00 	cmp.w	ip, #0
 8017a5c:	d174      	bne.n	8017b48 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d0>
 8017a5e:	4287      	cmp	r7, r0
 8017a60:	bf14      	ite	ne
 8017a62:	2100      	movne	r1, #0
 8017a64:	2101      	moveq	r1, #1
 8017a66:	2f00      	cmp	r7, #0
 8017a68:	9107      	str	r1, [sp, #28]
 8017a6a:	dd71      	ble.n	8017b50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8017a6c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8017a70:	2900      	cmp	r1, #0
 8017a72:	9103      	str	r1, [sp, #12]
 8017a74:	dd6c      	ble.n	8017b50 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d8>
 8017a76:	f8b9 1000 	ldrh.w	r1, [r9]
 8017a7a:	a80e      	add	r0, sp, #56	; 0x38
 8017a7c:	f8ad 8046 	strh.w	r8, [sp, #70]	; 0x46
 8017a80:	f04f 0803 	mov.w	r8, #3
 8017a84:	1a52      	subs	r2, r2, r1
 8017a86:	a910      	add	r1, sp, #64	; 0x40
 8017a88:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8017a8c:	b212      	sxth	r2, r2
 8017a8e:	9205      	str	r2, [sp, #20]
 8017a90:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 8017a94:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8017bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8017a98:	1a9b      	subs	r3, r3, r2
 8017a9a:	b21b      	sxth	r3, r3
 8017a9c:	9306      	str	r3, [sp, #24]
 8017a9e:	9b05      	ldr	r3, [sp, #20]
 8017aa0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017aa4:	9b06      	ldr	r3, [sp, #24]
 8017aa6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017aaa:	9b03      	ldr	r3, [sp, #12]
 8017aac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	9310      	str	r3, [sp, #64]	; 0x40
 8017ab4:	9b04      	ldr	r3, [sp, #16]
 8017ab6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8017aba:	f7fa fab1 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017abe:	a90c      	add	r1, sp, #48	; 0x30
 8017ac0:	4608      	mov	r0, r1
 8017ac2:	910b      	str	r1, [sp, #44]	; 0x2c
 8017ac4:	f7fa fa84 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ac8:	a810      	add	r0, sp, #64	; 0x40
 8017aca:	f7fa fa81 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ace:	4b43      	ldr	r3, [pc, #268]	; (8017bdc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x264>)
 8017ad0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	881b      	ldrh	r3, [r3, #0]
 8017ad8:	9308      	str	r3, [sp, #32]
 8017ada:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017ade:	b21b      	sxth	r3, r3
 8017ae0:	9302      	str	r3, [sp, #8]
 8017ae2:	6833      	ldr	r3, [r6, #0]
 8017ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ae6:	4798      	blx	r3
 8017ae8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017aec:	9a02      	ldr	r2, [sp, #8]
 8017aee:	4682      	mov	sl, r0
 8017af0:	f8d9 0000 	ldr.w	r0, [r9]
 8017af4:	fb13 f202 	smulbb	r2, r3, r2
 8017af8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017afc:	fb13 2308 	smlabb	r3, r3, r8, r2
 8017b00:	441c      	add	r4, r3
 8017b02:	6803      	ldr	r3, [r0, #0]
 8017b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b06:	4798      	blx	r3
 8017b08:	900a      	str	r0, [sp, #40]	; 0x28
 8017b0a:	f8d9 0000 	ldr.w	r0, [r9]
 8017b0e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017b12:	6802      	ldr	r2, [r0, #0]
 8017b14:	9309      	str	r3, [sp, #36]	; 0x24
 8017b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017b18:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017b1c:	4790      	blx	r2
 8017b1e:	f010 0f01 	tst.w	r0, #1
 8017b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b24:	d01d      	beq.n	8017b62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ea>
 8017b26:	f8d9 0000 	ldr.w	r0, [r9]
 8017b2a:	9a04      	ldr	r2, [sp, #16]
 8017b2c:	6803      	ldr	r3, [r0, #0]
 8017b2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b30:	9200      	str	r2, [sp, #0]
 8017b32:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017b34:	4623      	mov	r3, r4
 8017b36:	c906      	ldmia	r1, {r1, r2}
 8017b38:	47b0      	blx	r6
 8017b3a:	9b05      	ldr	r3, [sp, #20]
 8017b3c:	80af      	strh	r7, [r5, #4]
 8017b3e:	802b      	strh	r3, [r5, #0]
 8017b40:	9b06      	ldr	r3, [sp, #24]
 8017b42:	806b      	strh	r3, [r5, #2]
 8017b44:	9b03      	ldr	r3, [sp, #12]
 8017b46:	e007      	b.n	8017b58 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e0>
 8017b48:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8017b4c:	4288      	cmp	r0, r1
 8017b4e:	e787      	b.n	8017a60 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe8>
 8017b50:	2300      	movs	r3, #0
 8017b52:	802b      	strh	r3, [r5, #0]
 8017b54:	806b      	strh	r3, [r5, #2]
 8017b56:	80ab      	strh	r3, [r5, #4]
 8017b58:	4628      	mov	r0, r5
 8017b5a:	80eb      	strh	r3, [r5, #6]
 8017b5c:	b013      	add	sp, #76	; 0x4c
 8017b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b64:	fb0a f606 	mul.w	r6, sl, r6
 8017b68:	fb12 6608 	smlabb	r6, r2, r8, r6
 8017b6c:	9a07      	ldr	r2, [sp, #28]
 8017b6e:	441e      	add	r6, r3
 8017b70:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017b74:	b16a      	cbz	r2, 8017b92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8017b76:	9a08      	ldr	r2, [sp, #32]
 8017b78:	4593      	cmp	fp, r2
 8017b7a:	d10a      	bne.n	8017b92 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21a>
 8017b7c:	f8d9 0000 	ldr.w	r0, [r9]
 8017b80:	fb03 f30a 	mul.w	r3, r3, sl
 8017b84:	4621      	mov	r1, r4
 8017b86:	6802      	ldr	r2, [r0, #0]
 8017b88:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8017b8c:	4632      	mov	r2, r6
 8017b8e:	47c8      	blx	r9
 8017b90:	e7d3      	b.n	8017b3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8017b92:	9a02      	ldr	r2, [sp, #8]
 8017b94:	f8df b028 	ldr.w	fp, [pc, #40]	; 8017bc0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x248>
 8017b98:	fb02 4803 	mla	r8, r2, r3, r4
 8017b9c:	4544      	cmp	r4, r8
 8017b9e:	d2cc      	bcs.n	8017b3a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8017ba0:	f8db 0000 	ldr.w	r0, [fp]
 8017ba4:	4621      	mov	r1, r4
 8017ba6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017baa:	6802      	ldr	r2, [r0, #0]
 8017bac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017bb0:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 8017bb4:	4632      	mov	r2, r6
 8017bb6:	47c8      	blx	r9
 8017bb8:	9b02      	ldr	r3, [sp, #8]
 8017bba:	4456      	add	r6, sl
 8017bbc:	441c      	add	r4, r3
 8017bbe:	e7ed      	b.n	8017b9c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8017bc0:	2400f198 	.word	0x2400f198
 8017bc4:	08025fb1 	.word	0x08025fb1
 8017bc8:	08026709 	.word	0x08026709
 8017bcc:	08025f31 	.word	0x08025f31
 8017bd0:	08025f63 	.word	0x08025f63
 8017bd4:	2400f18c 	.word	0x2400f18c
 8017bd8:	2400f18e 	.word	0x2400f18e
 8017bdc:	2400f192 	.word	0x2400f192
 8017be0:	2400f190 	.word	0x2400f190

08017be4 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017be4:	2200      	movs	r2, #0
 8017be6:	490c      	ldr	r1, [pc, #48]	; (8017c18 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017be8:	6042      	str	r2, [r0, #4]
 8017bea:	6001      	str	r1, [r0, #0]
 8017bec:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017bf0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017bf4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017bf8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017bfc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017c00:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017c04:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017c08:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017c0c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017c10:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017c14:	4770      	bx	lr
 8017c16:	bf00      	nop
 8017c18:	0802634c 	.word	0x0802634c

08017c1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c20:	b091      	sub	sp, #68	; 0x44
 8017c22:	880d      	ldrh	r5, [r1, #0]
 8017c24:	4607      	mov	r7, r0
 8017c26:	4688      	mov	r8, r1
 8017c28:	4616      	mov	r6, r2
 8017c2a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017c2e:	b12d      	cbz	r5, 8017c3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x20>
 8017c30:	4b69      	ldr	r3, [pc, #420]	; (8017dd8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1bc>)
 8017c32:	215e      	movs	r1, #94	; 0x5e
 8017c34:	4a69      	ldr	r2, [pc, #420]	; (8017ddc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017c36:	486a      	ldr	r0, [pc, #424]	; (8017de0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8017c38:	f008 faac 	bl	8020194 <__assert_func>
 8017c3c:	6810      	ldr	r0, [r2, #0]
 8017c3e:	ac0c      	add	r4, sp, #48	; 0x30
 8017c40:	6851      	ldr	r1, [r2, #4]
 8017c42:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8017de4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>
 8017c46:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8017de8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8017c4a:	c403      	stmia	r4!, {r0, r1}
 8017c4c:	6818      	ldr	r0, [r3, #0]
 8017c4e:	ac0e      	add	r4, sp, #56	; 0x38
 8017c50:	6859      	ldr	r1, [r3, #4]
 8017c52:	c403      	stmia	r4!, {r0, r1}
 8017c54:	a80c      	add	r0, sp, #48	; 0x30
 8017c56:	f7fa f9bb 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017c5a:	4631      	mov	r1, r6
 8017c5c:	a80e      	add	r0, sp, #56	; 0x38
 8017c5e:	f7fa f9df 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017c62:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017c66:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017c6a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017c6e:	f8da 0000 	ldr.w	r0, [sl]
 8017c72:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017c76:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017c7a:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017c7e:	440f      	add	r7, r1
 8017c80:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017c84:	440a      	add	r2, r1
 8017c86:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017c8a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017c8e:	4413      	add	r3, r2
 8017c90:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017c94:	6803      	ldr	r3, [r0, #0]
 8017c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c98:	4798      	blx	r3
 8017c9a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017c9e:	f8da 0000 	ldr.w	r0, [sl]
 8017ca2:	d01e      	beq.n	8017ce2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc6>
 8017ca4:	6801      	ldr	r1, [r0, #0]
 8017ca6:	2201      	movs	r2, #1
 8017ca8:	9509      	str	r5, [sp, #36]	; 0x24
 8017caa:	250b      	movs	r5, #11
 8017cac:	b2a4      	uxth	r4, r4
 8017cae:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017cb2:	b2b6      	uxth	r6, r6
 8017cb4:	e9cd 5207 	strd	r5, r2, [sp, #28]
 8017cb8:	f8bb 5000 	ldrh.w	r5, [fp]
 8017cbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8017cc0:	9602      	str	r6, [sp, #8]
 8017cc2:	9401      	str	r4, [sp, #4]
 8017cc4:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017cc8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017ccc:	9203      	str	r2, [sp, #12]
 8017cce:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017cd2:	9200      	str	r2, [sp, #0]
 8017cd4:	4642      	mov	r2, r8
 8017cd6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017cd8:	4639      	mov	r1, r7
 8017cda:	47a0      	blx	r4
 8017cdc:	b011      	add	sp, #68	; 0x44
 8017cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ce2:	6803      	ldr	r3, [r0, #0]
 8017ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ce6:	4798      	blx	r3
 8017ce8:	f8bb 5000 	ldrh.w	r5, [fp]
 8017cec:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017cf0:	f04f 0e04 	mov.w	lr, #4
 8017cf4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017cf8:	436e      	muls	r6, r5
 8017cfa:	fb05 2303 	mla	r3, r5, r3, r2
 8017cfe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017d02:	1b2d      	subs	r5, r5, r4
 8017d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017d08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d0c:	4418      	add	r0, r3
 8017d0e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017d12:	1982      	adds	r2, r0, r6
 8017d14:	1b1b      	subs	r3, r3, r4
 8017d16:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d1c:	4290      	cmp	r0, r2
 8017d1e:	d254      	bcs.n	8017dca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ae>
 8017d20:	eb00 0a04 	add.w	sl, r0, r4
 8017d24:	4550      	cmp	r0, sl
 8017d26:	d24c      	bcs.n	8017dc2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a6>
 8017d28:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017d2c:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017d30:	eb08 0c01 	add.w	ip, r8, r1
 8017d34:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017d38:	b173      	cbz	r3, 8017d58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8017d3a:	2bff      	cmp	r3, #255	; 0xff
 8017d3c:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017d40:	d10c      	bne.n	8017d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8017d42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017d46:	d109      	bne.n	8017d5c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x140>
 8017d48:	f880 b000 	strb.w	fp, [r0]
 8017d4c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017d50:	7043      	strb	r3, [r0, #1]
 8017d52:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017d56:	7083      	strb	r3, [r0, #2]
 8017d58:	3003      	adds	r0, #3
 8017d5a:	e7e3      	b.n	8017d24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x108>
 8017d5c:	fb09 f103 	mul.w	r1, r9, r3
 8017d60:	1c4b      	adds	r3, r1, #1
 8017d62:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017d66:	7801      	ldrb	r1, [r0, #0]
 8017d68:	121b      	asrs	r3, r3, #8
 8017d6a:	b29e      	uxth	r6, r3
 8017d6c:	43db      	mvns	r3, r3
 8017d6e:	fb1b fb06 	smulbb	fp, fp, r6
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	fb01 b103 	mla	r1, r1, r3, fp
 8017d78:	b289      	uxth	r1, r1
 8017d7a:	f101 0b01 	add.w	fp, r1, #1
 8017d7e:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017d82:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017d86:	fb1b fb03 	smulbb	fp, fp, r3
 8017d8a:	1209      	asrs	r1, r1, #8
 8017d8c:	7001      	strb	r1, [r0, #0]
 8017d8e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017d92:	fb01 b106 	mla	r1, r1, r6, fp
 8017d96:	b289      	uxth	r1, r1
 8017d98:	f101 0b01 	add.w	fp, r1, #1
 8017d9c:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017da0:	1209      	asrs	r1, r1, #8
 8017da2:	7041      	strb	r1, [r0, #1]
 8017da4:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017da8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017dac:	fb1c f303 	smulbb	r3, ip, r3
 8017db0:	fb01 3606 	mla	r6, r1, r6, r3
 8017db4:	b2b6      	uxth	r6, r6
 8017db6:	1c73      	adds	r3, r6, #1
 8017db8:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017dbc:	1236      	asrs	r6, r6, #8
 8017dbe:	7086      	strb	r6, [r0, #2]
 8017dc0:	e7ca      	b.n	8017d58 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 8017dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc4:	4428      	add	r0, r5
 8017dc6:	441f      	add	r7, r3
 8017dc8:	e7a8      	b.n	8017d1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x100>
 8017dca:	4b06      	ldr	r3, [pc, #24]	; (8017de4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017dcc:	6818      	ldr	r0, [r3, #0]
 8017dce:	6803      	ldr	r3, [r0, #0]
 8017dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd2:	4798      	blx	r3
 8017dd4:	e782      	b.n	8017cdc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017dd6:	bf00      	nop
 8017dd8:	08025e95 	.word	0x08025e95
 8017ddc:	0802652b 	.word	0x0802652b
 8017de0:	08025f31 	.word	0x08025f31
 8017de4:	2400f198 	.word	0x2400f198
 8017de8:	2400f192 	.word	0x2400f192

08017dec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017df0:	f8b1 9000 	ldrh.w	r9, [r1]
 8017df4:	b091      	sub	sp, #68	; 0x44
 8017df6:	4604      	mov	r4, r0
 8017df8:	460e      	mov	r6, r1
 8017dfa:	f1b9 0f01 	cmp.w	r9, #1
 8017dfe:	4690      	mov	r8, r2
 8017e00:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017e04:	d005      	beq.n	8017e12 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x26>
 8017e06:	4b69      	ldr	r3, [pc, #420]	; (8017fac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8017e08:	21ac      	movs	r1, #172	; 0xac
 8017e0a:	4a69      	ldr	r2, [pc, #420]	; (8017fb0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8017e0c:	4869      	ldr	r0, [pc, #420]	; (8017fb4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8017e0e:	f008 f9c1 	bl	8020194 <__assert_func>
 8017e12:	6810      	ldr	r0, [r2, #0]
 8017e14:	ad0c      	add	r5, sp, #48	; 0x30
 8017e16:	6851      	ldr	r1, [r2, #4]
 8017e18:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8017fb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>
 8017e1c:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8017fbc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 8017e20:	c503      	stmia	r5!, {r0, r1}
 8017e22:	6818      	ldr	r0, [r3, #0]
 8017e24:	ad0e      	add	r5, sp, #56	; 0x38
 8017e26:	6859      	ldr	r1, [r3, #4]
 8017e28:	c503      	stmia	r5!, {r0, r1}
 8017e2a:	a80c      	add	r0, sp, #48	; 0x30
 8017e2c:	f7fa f8d0 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e30:	4641      	mov	r1, r8
 8017e32:	a80e      	add	r0, sp, #56	; 0x38
 8017e34:	f7fa f8f4 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e38:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017e3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e40:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017e44:	f8da 0000 	ldr.w	r0, [sl]
 8017e48:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017e4c:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017e50:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017e54:	440c      	add	r4, r1
 8017e56:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017e5a:	440a      	add	r2, r1
 8017e5c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017e60:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017e64:	4413      	add	r3, r2
 8017e66:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017e6a:	6803      	ldr	r3, [r0, #0]
 8017e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e6e:	4798      	blx	r3
 8017e70:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017e74:	f8da 0000 	ldr.w	r0, [sl]
 8017e78:	d020      	beq.n	8017ebc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd0>
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	f04f 0c0b 	mov.w	ip, #11
 8017e80:	6801      	ldr	r1, [r0, #0]
 8017e82:	b2ad      	uxth	r5, r5
 8017e84:	f8cd c01c 	str.w	ip, [sp, #28]
 8017e88:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017e8c:	e9cd 9208 	strd	r9, r2, [sp, #32]
 8017e90:	f8bb c000 	ldrh.w	ip, [fp]
 8017e94:	9704      	str	r7, [sp, #16]
 8017e96:	9502      	str	r5, [sp, #8]
 8017e98:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8017e9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017ea0:	9203      	str	r2, [sp, #12]
 8017ea2:	fa1f f288 	uxth.w	r2, r8
 8017ea6:	9201      	str	r2, [sp, #4]
 8017ea8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017eac:	9200      	str	r2, [sp, #0]
 8017eae:	4632      	mov	r2, r6
 8017eb0:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8017eb2:	4621      	mov	r1, r4
 8017eb4:	47a8      	blx	r5
 8017eb6:	b011      	add	sp, #68	; 0x44
 8017eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ebc:	6803      	ldr	r3, [r0, #0]
 8017ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ec0:	4798      	blx	r3
 8017ec2:	f8bb 2000 	ldrh.w	r2, [fp]
 8017ec6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017eca:	f04f 0e03 	mov.w	lr, #3
 8017ece:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8017ed2:	4355      	muls	r5, r2
 8017ed4:	fa1f fc87 	uxth.w	ip, r7
 8017ed8:	fb02 1303 	mla	r3, r2, r3, r1
 8017edc:	eba2 0208 	sub.w	r2, r2, r8
 8017ee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ee4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ee8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017eec:	4418      	add	r0, r3
 8017eee:	920b      	str	r2, [sp, #44]	; 0x2c
 8017ef0:	1943      	adds	r3, r0, r5
 8017ef2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017ef6:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017efa:	eba2 0208 	sub.w	r2, r2, r8
 8017efe:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f02:	b2ad      	uxth	r5, r5
 8017f04:	4298      	cmp	r0, r3
 8017f06:	d24a      	bcs.n	8017f9e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b2>
 8017f08:	eb00 0908 	add.w	r9, r0, r8
 8017f0c:	4621      	mov	r1, r4
 8017f0e:	4548      	cmp	r0, r9
 8017f10:	460c      	mov	r4, r1
 8017f12:	d240      	bcs.n	8017f96 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8017f14:	f04f 0a04 	mov.w	sl, #4
 8017f18:	7824      	ldrb	r4, [r4, #0]
 8017f1a:	2fff      	cmp	r7, #255	; 0xff
 8017f1c:	f101 0101 	add.w	r1, r1, #1
 8017f20:	fb1e a404 	smlabb	r4, lr, r4, sl
 8017f24:	eb06 0a04 	add.w	sl, r6, r4
 8017f28:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017f2c:	d02b      	beq.n	8017f86 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017f2e:	7804      	ldrb	r4, [r0, #0]
 8017f30:	fb14 f405 	smulbb	r4, r4, r5
 8017f34:	fb0b 440c 	mla	r4, fp, ip, r4
 8017f38:	b2a4      	uxth	r4, r4
 8017f3a:	f104 0b01 	add.w	fp, r4, #1
 8017f3e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017f42:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017f46:	fb1b fb05 	smulbb	fp, fp, r5
 8017f4a:	1224      	asrs	r4, r4, #8
 8017f4c:	7004      	strb	r4, [r0, #0]
 8017f4e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017f52:	fb04 b40c 	mla	r4, r4, ip, fp
 8017f56:	b2a4      	uxth	r4, r4
 8017f58:	f104 0b01 	add.w	fp, r4, #1
 8017f5c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017f60:	1224      	asrs	r4, r4, #8
 8017f62:	7044      	strb	r4, [r0, #1]
 8017f64:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017f68:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017f6c:	fb1a fa05 	smulbb	sl, sl, r5
 8017f70:	fb04 a40c 	mla	r4, r4, ip, sl
 8017f74:	b2a4      	uxth	r4, r4
 8017f76:	f104 0a01 	add.w	sl, r4, #1
 8017f7a:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017f7e:	1224      	asrs	r4, r4, #8
 8017f80:	7084      	strb	r4, [r0, #2]
 8017f82:	3003      	adds	r0, #3
 8017f84:	e7c3      	b.n	8017f0e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x122>
 8017f86:	f880 b000 	strb.w	fp, [r0]
 8017f8a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017f8e:	7044      	strb	r4, [r0, #1]
 8017f90:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017f94:	e7f4      	b.n	8017f80 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x194>
 8017f96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017f98:	4420      	add	r0, r4
 8017f9a:	188c      	adds	r4, r1, r2
 8017f9c:	e7b2      	b.n	8017f04 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 8017f9e:	4b06      	ldr	r3, [pc, #24]	; (8017fb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1cc>)
 8017fa0:	6818      	ldr	r0, [r3, #0]
 8017fa2:	6803      	ldr	r3, [r0, #0]
 8017fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa6:	4798      	blx	r3
 8017fa8:	e785      	b.n	8017eb6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xca>
 8017faa:	bf00      	nop
 8017fac:	08025e14 	.word	0x08025e14
 8017fb0:	0802641e 	.word	0x0802641e
 8017fb4:	08025f31 	.word	0x08025f31
 8017fb8:	2400f198 	.word	0x2400f198
 8017fbc:	2400f192 	.word	0x2400f192

08017fc0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	780d      	ldrb	r5, [r1, #0]
 8017fc4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8017fc8:	2d01      	cmp	r5, #1
 8017fca:	d00d      	beq.n	8017fe8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x28>
 8017fcc:	d307      	bcc.n	8017fde <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1e>
 8017fce:	2d02      	cmp	r5, #2
 8017fd0:	d10f      	bne.n	8017ff2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x32>
 8017fd2:	4b08      	ldr	r3, [pc, #32]	; (8017ff4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>)
 8017fd4:	2151      	movs	r1, #81	; 0x51
 8017fd6:	4a08      	ldr	r2, [pc, #32]	; (8017ff8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x38>)
 8017fd8:	4808      	ldr	r0, [pc, #32]	; (8017ffc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x3c>)
 8017fda:	f008 f8db 	bl	8020194 <__assert_func>
 8017fde:	9404      	str	r4, [sp, #16]
 8017fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fe4:	f7ff be1a 	b.w	8017c1c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017fe8:	9404      	str	r4, [sp, #16]
 8017fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017fee:	f7ff befd 	b.w	8017dec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}
 8017ff4:	08025dc9 	.word	0x08025dc9
 8017ff8:	0802639c 	.word	0x0802639c
 8017ffc:	08025f31 	.word	0x08025f31

08018000 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8018000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018004:	4605      	mov	r5, r0
 8018006:	b08f      	sub	sp, #60	; 0x3c
 8018008:	460c      	mov	r4, r1
 801800a:	461f      	mov	r7, r3
 801800c:	2b00      	cmp	r3, #0
 801800e:	d052      	beq.n	80180b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8018010:	6808      	ldr	r0, [r1, #0]
 8018012:	ab0a      	add	r3, sp, #40	; 0x28
 8018014:	6849      	ldr	r1, [r1, #4]
 8018016:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80181e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801801a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80181e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801801e:	c303      	stmia	r3!, {r0, r1}
 8018020:	6810      	ldr	r0, [r2, #0]
 8018022:	ab0c      	add	r3, sp, #48	; 0x30
 8018024:	6851      	ldr	r1, [r2, #4]
 8018026:	c303      	stmia	r3!, {r0, r1}
 8018028:	a80a      	add	r0, sp, #40	; 0x28
 801802a:	f7f9 ffd1 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801802e:	4621      	mov	r1, r4
 8018030:	a80c      	add	r0, sp, #48	; 0x30
 8018032:	f7f9 fff5 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018036:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801803a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801803e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018042:	f8d8 0000 	ldr.w	r0, [r8]
 8018046:	fb11 2103 	smlabb	r1, r1, r3, r2
 801804a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801804e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8018052:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8018056:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801805a:	440a      	add	r2, r1
 801805c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8018060:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8018064:	4413      	add	r3, r2
 8018066:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801806a:	6803      	ldr	r3, [r0, #0]
 801806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801806e:	4798      	blx	r3
 8018070:	2fff      	cmp	r7, #255	; 0xff
 8018072:	d023      	beq.n	80180bc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8018074:	f010 0f04 	tst.w	r0, #4
 8018078:	f8d8 0000 	ldr.w	r0, [r8]
 801807c:	d021      	beq.n	80180c2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801807e:	2100      	movs	r1, #0
 8018080:	f04f 0e01 	mov.w	lr, #1
 8018084:	f8d0 c000 	ldr.w	ip, [r0]
 8018088:	b2a4      	uxth	r4, r4
 801808a:	9106      	str	r1, [sp, #24]
 801808c:	b2b6      	uxth	r6, r6
 801808e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018092:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8018096:	e9cd e107 	strd	lr, r1, [sp, #28]
 801809a:	f8b9 e000 	ldrh.w	lr, [r9]
 801809e:	9703      	str	r7, [sp, #12]
 80180a0:	9401      	str	r4, [sp, #4]
 80180a2:	9600      	str	r6, [sp, #0]
 80180a4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80180a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80180ac:	9102      	str	r1, [sp, #8]
 80180ae:	4629      	mov	r1, r5
 80180b0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80180b4:	47a0      	blx	r4
 80180b6:	b00f      	add	sp, #60	; 0x3c
 80180b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180bc:	f010 0f01 	tst.w	r0, #1
 80180c0:	e7da      	b.n	8018078 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80180c2:	6803      	ldr	r3, [r0, #0]
 80180c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180c6:	4798      	blx	r3
 80180c8:	f8b9 1000 	ldrh.w	r1, [r9]
 80180cc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80180d0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80180d4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80180d8:	434c      	muls	r4, r1
 80180da:	2fff      	cmp	r7, #255	; 0xff
 80180dc:	fb01 2303 	mla	r3, r1, r3, r2
 80180e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80180e4:	eba1 0106 	sub.w	r1, r1, r6
 80180e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80180f0:	4418      	add	r0, r3
 80180f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80180f6:	eba3 0606 	sub.w	r6, r3, r6
 80180fa:	4404      	add	r4, r0
 80180fc:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8018100:	d04a      	beq.n	8018198 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8018102:	43fa      	mvns	r2, r7
 8018104:	b2bb      	uxth	r3, r7
 8018106:	b2d7      	uxtb	r7, r2
 8018108:	42a0      	cmp	r0, r4
 801810a:	d263      	bcs.n	80181d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801810c:	eb00 0e0c 	add.w	lr, r0, ip
 8018110:	4586      	cmp	lr, r0
 8018112:	f100 0803 	add.w	r8, r0, #3
 8018116:	d93a      	bls.n	801818e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8018118:	f835 2b02 	ldrh.w	r2, [r5], #2
 801811c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8018120:	00d0      	lsls	r0, r2, #3
 8018122:	fb19 f907 	smulbb	r9, r9, r7
 8018126:	b2c0      	uxtb	r0, r0
 8018128:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801812c:	fb00 9003 	mla	r0, r0, r3, r9
 8018130:	b280      	uxth	r0, r0
 8018132:	f100 0901 	add.w	r9, r0, #1
 8018136:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801813a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801813e:	fb19 f907 	smulbb	r9, r9, r7
 8018142:	1200      	asrs	r0, r0, #8
 8018144:	f808 0c03 	strb.w	r0, [r8, #-3]
 8018148:	10d0      	asrs	r0, r2, #3
 801814a:	1212      	asrs	r2, r2, #8
 801814c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018150:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8018154:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8018158:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801815c:	fb00 9003 	mla	r0, r0, r3, r9
 8018160:	b280      	uxth	r0, r0
 8018162:	f100 0901 	add.w	r9, r0, #1
 8018166:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801816a:	1200      	asrs	r0, r0, #8
 801816c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8018170:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8018174:	fb10 f007 	smulbb	r0, r0, r7
 8018178:	fb02 0203 	mla	r2, r2, r3, r0
 801817c:	b292      	uxth	r2, r2
 801817e:	1c50      	adds	r0, r2, #1
 8018180:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018184:	4640      	mov	r0, r8
 8018186:	1212      	asrs	r2, r2, #8
 8018188:	f808 2c01 	strb.w	r2, [r8, #-1]
 801818c:	e7c0      	b.n	8018110 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801818e:	4408      	add	r0, r1
 8018190:	4435      	add	r5, r6
 8018192:	e7b9      	b.n	8018108 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8018194:	4408      	add	r0, r1
 8018196:	4435      	add	r5, r6
 8018198:	42a0      	cmp	r0, r4
 801819a:	d21b      	bcs.n	80181d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801819c:	eb00 070c 	add.w	r7, r0, ip
 80181a0:	42b8      	cmp	r0, r7
 80181a2:	d2f7      	bcs.n	8018194 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80181a4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80181a8:	3003      	adds	r0, #3
 80181aa:	00da      	lsls	r2, r3, #3
 80181ac:	b2d2      	uxtb	r2, r2
 80181ae:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80181b2:	f800 2c03 	strb.w	r2, [r0, #-3]
 80181b6:	10da      	asrs	r2, r3, #3
 80181b8:	121b      	asrs	r3, r3, #8
 80181ba:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80181be:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80181c2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80181c6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80181ca:	f800 2c02 	strb.w	r2, [r0, #-2]
 80181ce:	f800 3c01 	strb.w	r3, [r0, #-1]
 80181d2:	e7e5      	b.n	80181a0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80181d4:	4b02      	ldr	r3, [pc, #8]	; (80181e0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80181d6:	6818      	ldr	r0, [r3, #0]
 80181d8:	6803      	ldr	r3, [r0, #0]
 80181da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181dc:	4798      	blx	r3
 80181de:	e76a      	b.n	80180b6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80181e0:	2400f198 	.word	0x2400f198
 80181e4:	2400f192 	.word	0x2400f192

080181e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80181e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181ec:	b08a      	sub	sp, #40	; 0x28
 80181ee:	460d      	mov	r5, r1
 80181f0:	4604      	mov	r4, r0
 80181f2:	461e      	mov	r6, r3
 80181f4:	6808      	ldr	r0, [r1, #0]
 80181f6:	ab06      	add	r3, sp, #24
 80181f8:	6849      	ldr	r1, [r1, #4]
 80181fa:	4f5d      	ldr	r7, [pc, #372]	; (8018370 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80181fc:	c303      	stmia	r3!, {r0, r1}
 80181fe:	6810      	ldr	r0, [r2, #0]
 8018200:	ab08      	add	r3, sp, #32
 8018202:	6851      	ldr	r1, [r2, #4]
 8018204:	c303      	stmia	r3!, {r0, r1}
 8018206:	a806      	add	r0, sp, #24
 8018208:	f7f9 fee2 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801820c:	4629      	mov	r1, r5
 801820e:	a808      	add	r0, sp, #32
 8018210:	f7f9 ff06 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018214:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018218:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801821c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018220:	6838      	ldr	r0, [r7, #0]
 8018222:	fb11 2103 	smlabb	r1, r1, r3, r2
 8018226:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801822a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801822e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8018232:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8018236:	440a      	add	r2, r1
 8018238:	f8ad 2020 	strh.w	r2, [sp, #32]
 801823c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018240:	4413      	add	r3, r2
 8018242:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018246:	6803      	ldr	r3, [r0, #0]
 8018248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801824a:	4798      	blx	r3
 801824c:	2eff      	cmp	r6, #255	; 0xff
 801824e:	d119      	bne.n	8018284 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8018250:	f010 0f20 	tst.w	r0, #32
 8018254:	6838      	ldr	r0, [r7, #0]
 8018256:	d018      	beq.n	801828a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8018258:	b2ad      	uxth	r5, r5
 801825a:	2700      	movs	r7, #0
 801825c:	6801      	ldr	r1, [r0, #0]
 801825e:	9501      	str	r5, [sp, #4]
 8018260:	fa1f f588 	uxth.w	r5, r8
 8018264:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018268:	9500      	str	r5, [sp, #0]
 801826a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801826e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8018272:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8018276:	9602      	str	r6, [sp, #8]
 8018278:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801827a:	4621      	mov	r1, r4
 801827c:	47a8      	blx	r5
 801827e:	b00a      	add	sp, #40	; 0x28
 8018280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018284:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018288:	e7e4      	b.n	8018254 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801828a:	6803      	ldr	r3, [r0, #0]
 801828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801828e:	4798      	blx	r3
 8018290:	4b38      	ldr	r3, [pc, #224]	; (8018374 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8018292:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018296:	f8b3 c000 	ldrh.w	ip, [r3]
 801829a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801829e:	fb0c f505 	mul.w	r5, ip, r5
 80182a2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80182a6:	fb0c 2303 	mla	r3, ip, r3, r2
 80182aa:	ebac 0c08 	sub.w	ip, ip, r8
 80182ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182b2:	ebae 0e08 	sub.w	lr, lr, r8
 80182b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80182be:	4418      	add	r0, r3
 80182c0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80182c4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 80182c8:	4405      	add	r5, r0
 80182ca:	42a8      	cmp	r0, r5
 80182cc:	d24a      	bcs.n	8018364 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 80182ce:	eb00 0803 	add.w	r8, r0, r3
 80182d2:	4540      	cmp	r0, r8
 80182d4:	d243      	bcs.n	801835e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 80182d6:	78e2      	ldrb	r2, [r4, #3]
 80182d8:	b15a      	cbz	r2, 80182f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 80182da:	2aff      	cmp	r2, #255	; 0xff
 80182dc:	f894 9000 	ldrb.w	r9, [r4]
 80182e0:	d10a      	bne.n	80182f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80182e2:	2eff      	cmp	r6, #255	; 0xff
 80182e4:	d108      	bne.n	80182f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80182e6:	f880 9000 	strb.w	r9, [r0]
 80182ea:	7862      	ldrb	r2, [r4, #1]
 80182ec:	7042      	strb	r2, [r0, #1]
 80182ee:	78a2      	ldrb	r2, [r4, #2]
 80182f0:	7082      	strb	r2, [r0, #2]
 80182f2:	3003      	adds	r0, #3
 80182f4:	3404      	adds	r4, #4
 80182f6:	e7ec      	b.n	80182d2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80182f8:	4372      	muls	r2, r6
 80182fa:	1c51      	adds	r1, r2, #1
 80182fc:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8018300:	1209      	asrs	r1, r1, #8
 8018302:	fa1f fa81 	uxth.w	sl, r1
 8018306:	43c9      	mvns	r1, r1
 8018308:	fb19 f90a 	smulbb	r9, r9, sl
 801830c:	b2ca      	uxtb	r2, r1
 801830e:	7801      	ldrb	r1, [r0, #0]
 8018310:	fb01 9902 	mla	r9, r1, r2, r9
 8018314:	fa1f f989 	uxth.w	r9, r9
 8018318:	f109 0101 	add.w	r1, r9, #1
 801831c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8018320:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018324:	f880 9000 	strb.w	r9, [r0]
 8018328:	f890 9001 	ldrb.w	r9, [r0, #1]
 801832c:	7861      	ldrb	r1, [r4, #1]
 801832e:	fb19 f902 	smulbb	r9, r9, r2
 8018332:	fb01 910a 	mla	r1, r1, sl, r9
 8018336:	b289      	uxth	r1, r1
 8018338:	f101 0901 	add.w	r9, r1, #1
 801833c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8018340:	1209      	asrs	r1, r1, #8
 8018342:	7041      	strb	r1, [r0, #1]
 8018344:	7881      	ldrb	r1, [r0, #2]
 8018346:	f894 9002 	ldrb.w	r9, [r4, #2]
 801834a:	fb11 f202 	smulbb	r2, r1, r2
 801834e:	fb09 220a 	mla	r2, r9, sl, r2
 8018352:	b292      	uxth	r2, r2
 8018354:	1c51      	adds	r1, r2, #1
 8018356:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801835a:	1212      	asrs	r2, r2, #8
 801835c:	e7c8      	b.n	80182f0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801835e:	4460      	add	r0, ip
 8018360:	4474      	add	r4, lr
 8018362:	e7b2      	b.n	80182ca <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8018364:	6838      	ldr	r0, [r7, #0]
 8018366:	6803      	ldr	r3, [r0, #0]
 8018368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801836a:	4798      	blx	r3
 801836c:	e787      	b.n	801827e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801836e:	bf00      	nop
 8018370:	2400f198 	.word	0x2400f198
 8018374:	2400f192 	.word	0x2400f192

08018378 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8018378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801837c:	b085      	sub	sp, #20
 801837e:	4606      	mov	r6, r0
 8018380:	460c      	mov	r4, r1
 8018382:	4691      	mov	r9, r2
 8018384:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8018388:	4698      	mov	r8, r3
 801838a:	b31d      	cbz	r5, 80183d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801838c:	4608      	mov	r0, r1
 801838e:	f7fd f96f 	bl	8015670 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018392:	4607      	mov	r7, r0
 8018394:	4620      	mov	r0, r4
 8018396:	f7fd f9af 	bl	80156f8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801839a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801839e:	4620      	mov	r0, r4
 80183a0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80183a4:	f8ad 800a 	strh.w	r8, [sp, #10]
 80183a8:	f8ad 700c 	strh.w	r7, [sp, #12]
 80183ac:	f7fd facc 	bl	8015948 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80183b0:	280b      	cmp	r0, #11
 80183b2:	d838      	bhi.n	8018426 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xae>
 80183b4:	e8df f000 	tbb	[pc, r0]
 80183b8:	37062920 	.word	0x37062920
 80183bc:	37373737 	.word	0x37373737
 80183c0:	11373737 	.word	0x11373737
 80183c4:	4620      	mov	r0, r4
 80183c6:	f7fd fa35 	bl	8015834 <_ZNK8touchgfx6Bitmap7getDataEv>
 80183ca:	462b      	mov	r3, r5
 80183cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183ce:	a902      	add	r1, sp, #8
 80183d0:	f7ff ff0a 	bl	80181e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80183d4:	b005      	add	sp, #20
 80183d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183da:	4620      	mov	r0, r4
 80183dc:	f7fd fa2a 	bl	8015834 <_ZNK8touchgfx6Bitmap7getDataEv>
 80183e0:	4606      	mov	r6, r0
 80183e2:	4620      	mov	r0, r4
 80183e4:	f7fd fa58 	bl	8015898 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80183e8:	9500      	str	r5, [sp, #0]
 80183ea:	4601      	mov	r1, r0
 80183ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183ee:	aa02      	add	r2, sp, #8
 80183f0:	4630      	mov	r0, r6
 80183f2:	f7ff fde5 	bl	8017fc0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80183f6:	e7ed      	b.n	80183d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80183f8:	4620      	mov	r0, r4
 80183fa:	f7fd fa1b 	bl	8015834 <_ZNK8touchgfx6Bitmap7getDataEv>
 80183fe:	462b      	mov	r3, r5
 8018400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018402:	a902      	add	r1, sp, #8
 8018404:	f7ff fdfc 	bl	8018000 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8018408:	e7e4      	b.n	80183d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801840a:	6833      	ldr	r3, [r6, #0]
 801840c:	4620      	mov	r0, r4
 801840e:	68df      	ldr	r7, [r3, #12]
 8018410:	f7fd fa10 	bl	8015834 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018414:	2300      	movs	r3, #0
 8018416:	4601      	mov	r1, r0
 8018418:	aa02      	add	r2, sp, #8
 801841a:	4630      	mov	r0, r6
 801841c:	e9cd 5300 	strd	r5, r3, [sp]
 8018420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018422:	47b8      	blx	r7
 8018424:	e7d6      	b.n	80183d4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018426:	4b03      	ldr	r3, [pc, #12]	; (8018434 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbc>)
 8018428:	2145      	movs	r1, #69	; 0x45
 801842a:	4a03      	ldr	r2, [pc, #12]	; (8018438 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>)
 801842c:	4803      	ldr	r0, [pc, #12]	; (801843c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>)
 801842e:	f007 feb1 	bl	8020194 <__assert_func>
 8018432:	bf00      	nop
 8018434:	08025e62 	.word	0x08025e62
 8018438:	080264a7 	.word	0x080264a7
 801843c:	08025f31 	.word	0x08025f31

08018440 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8018440:	b570      	push	{r4, r5, r6, lr}
 8018442:	9c04      	ldr	r4, [sp, #16]
 8018444:	4605      	mov	r5, r0
 8018446:	4608      	mov	r0, r1
 8018448:	4619      	mov	r1, r3
 801844a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801844e:	2a0d      	cmp	r2, #13
 8018450:	d826      	bhi.n	80184a0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>
 8018452:	e8df f002 	tbb	[pc, r2]
 8018456:	1107      	.short	0x1107
 8018458:	1e1e1e0c 	.word	0x1e1e1e0c
 801845c:	1e1e1e1e 	.word	0x1e1e1e1e
 8018460:	1e1e1e1e 	.word	0x1e1e1e1e
 8018464:	4622      	mov	r2, r4
 8018466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801846a:	f7ff bdc9 	b.w	8018000 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801846e:	4622      	mov	r2, r4
 8018470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018474:	f7ff beb8 	b.w	80181e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018478:	682a      	ldr	r2, [r5, #0]
 801847a:	2600      	movs	r6, #0
 801847c:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8018480:	68d6      	ldr	r6, [r2, #12]
 8018482:	4623      	mov	r3, r4
 8018484:	460a      	mov	r2, r1
 8018486:	4601      	mov	r1, r0
 8018488:	46b4      	mov	ip, r6
 801848a:	4628      	mov	r0, r5
 801848c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018490:	4760      	bx	ip
 8018492:	4b04      	ldr	r3, [pc, #16]	; (80184a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 8018494:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8018498:	4a03      	ldr	r2, [pc, #12]	; (80184a8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 801849a:	4804      	ldr	r0, [pc, #16]	; (80184ac <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 801849c:	f007 fe7a 	bl	8020194 <__assert_func>
 80184a0:	bd70      	pop	{r4, r5, r6, pc}
 80184a2:	bf00      	nop
 80184a4:	080260f6 	.word	0x080260f6
 80184a8:	08026822 	.word	0x08026822
 80184ac:	08025f31 	.word	0x08025f31

080184b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80184b0:	b158      	cbz	r0, 80184ca <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1a>
 80184b2:	2902      	cmp	r1, #2
 80184b4:	d00f      	beq.n	80184d6 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x26>
 80184b6:	2903      	cmp	r1, #3
 80184b8:	d010      	beq.n	80184dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80184ba:	2901      	cmp	r1, #1
 80184bc:	d101      	bne.n	80184c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80184be:	2001      	movs	r0, #1
 80184c0:	4770      	bx	lr
 80184c2:	4b08      	ldr	r3, [pc, #32]	; (80184e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80184c4:	8819      	ldrh	r1, [r3, #0]
 80184c6:	4248      	negs	r0, r1
 80184c8:	4770      	bx	lr
 80184ca:	2902      	cmp	r1, #2
 80184cc:	d006      	beq.n	80184dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x2c>
 80184ce:	2903      	cmp	r1, #3
 80184d0:	d0f7      	beq.n	80184c2 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x12>
 80184d2:	2901      	cmp	r1, #1
 80184d4:	d1f3      	bne.n	80184be <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0xe>
 80184d6:	4b03      	ldr	r3, [pc, #12]	; (80184e4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x34>)
 80184d8:	8818      	ldrh	r0, [r3, #0]
 80184da:	4770      	bx	lr
 80184dc:	f04f 30ff 	mov.w	r0, #4294967295
 80184e0:	4770      	bx	lr
 80184e2:	bf00      	nop
 80184e4:	2400f192 	.word	0x2400f192

080184e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80184e8:	b170      	cbz	r0, 8018508 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x20>
 80184ea:	2902      	cmp	r1, #2
 80184ec:	d012      	beq.n	8018514 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x2c>
 80184ee:	2903      	cmp	r1, #3
 80184f0:	d006      	beq.n	8018500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 80184f2:	2901      	cmp	r1, #1
 80184f4:	d001      	beq.n	80184fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 80184f6:	2001      	movs	r0, #1
 80184f8:	4770      	bx	lr
 80184fa:	4b08      	ldr	r3, [pc, #32]	; (801851c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 80184fc:	8818      	ldrh	r0, [r3, #0]
 80184fe:	4770      	bx	lr
 8018500:	4b06      	ldr	r3, [pc, #24]	; (801851c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x34>)
 8018502:	8818      	ldrh	r0, [r3, #0]
 8018504:	4240      	negs	r0, r0
 8018506:	4770      	bx	lr
 8018508:	2902      	cmp	r1, #2
 801850a:	d0f9      	beq.n	8018500 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x18>
 801850c:	2903      	cmp	r1, #3
 801850e:	d0f2      	beq.n	80184f6 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0xe>
 8018510:	2901      	cmp	r1, #1
 8018512:	d1f2      	bne.n	80184fa <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x12>
 8018514:	f04f 30ff 	mov.w	r0, #4294967295
 8018518:	4770      	bx	lr
 801851a:	bf00      	nop
 801851c:	2400f192 	.word	0x2400f192

08018520 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8018520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018524:	b097      	sub	sp, #92	; 0x5c
 8018526:	910b      	str	r1, [sp, #44]	; 0x2c
 8018528:	a912      	add	r1, sp, #72	; 0x48
 801852a:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801852e:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8018532:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8018536:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 801853a:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801853e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018542:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8018546:	930a      	str	r3, [sp, #40]	; 0x28
 8018548:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801854c:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8018550:	9311      	str	r3, [sp, #68]	; 0x44
 8018552:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8018556:	798d      	ldrb	r5, [r1, #6]
 8018558:	930c      	str	r3, [sp, #48]	; 0x30
 801855a:	7b4b      	ldrb	r3, [r1, #13]
 801855c:	0158      	lsls	r0, r3, #5
 801855e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8018562:	4328      	orrs	r0, r5
 8018564:	9009      	str	r0, [sp, #36]	; 0x24
 8018566:	f000 817d 	beq.w	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801856a:	011b      	lsls	r3, r3, #4
 801856c:	79c8      	ldrb	r0, [r1, #7]
 801856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018572:	4303      	orrs	r3, r0
 8018574:	930e      	str	r3, [sp, #56]	; 0x38
 8018576:	f000 8175 	beq.w	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801857a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801857e:	b29b      	uxth	r3, r3
 8018580:	2f00      	cmp	r7, #0
 8018582:	f000 8117 	beq.w	80187b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x294>
 8018586:	1aff      	subs	r7, r7, r3
 8018588:	b2bf      	uxth	r7, r7
 801858a:	043b      	lsls	r3, r7, #16
 801858c:	d502      	bpl.n	8018594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801858e:	1bf6      	subs	r6, r6, r7
 8018590:	2700      	movs	r7, #0
 8018592:	b236      	sxth	r6, r6
 8018594:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018598:	a812      	add	r0, sp, #72	; 0x48
 801859a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801859e:	428e      	cmp	r6, r1
 80185a0:	b28b      	uxth	r3, r1
 80185a2:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80185a6:	bfbf      	itttt	lt
 80185a8:	18ff      	addlt	r7, r7, r3
 80185aa:	1bbe      	sublt	r6, r7, r6
 80185ac:	b2b7      	uxthlt	r7, r6
 80185ae:	460e      	movlt	r6, r1
 80185b0:	8891      	ldrh	r1, [r2, #4]
 80185b2:	440b      	add	r3, r1
 80185b4:	4631      	mov	r1, r6
 80185b6:	b21b      	sxth	r3, r3
 80185b8:	9310      	str	r3, [sp, #64]	; 0x40
 80185ba:	88d3      	ldrh	r3, [r2, #6]
 80185bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185be:	449a      	add	sl, r3
 80185c0:	fa0f f38a 	sxth.w	r3, sl
 80185c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80185c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80185ca:	4bb6      	ldr	r3, [pc, #728]	; (80188a4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80185cc:	f893 b000 	ldrb.w	fp, [r3]
 80185d0:	f10b 3cff 	add.w	ip, fp, #4294967295
 80185d4:	f1dc 0300 	rsbs	r3, ip, #0
 80185d8:	eb43 030c 	adc.w	r3, r3, ip
 80185dc:	930d      	str	r3, [sp, #52]	; 0x34
 80185de:	464b      	mov	r3, r9
 80185e0:	f7f9 fb7a 	bl	8011cd8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 80185e4:	4631      	mov	r1, r6
 80185e6:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 80185ea:	464b      	mov	r3, r9
 80185ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185ee:	a812      	add	r0, sp, #72	; 0x48
 80185f0:	f7f9 fb8a 	bl	8011d08 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 80185f4:	a916      	add	r1, sp, #88	; 0x58
 80185f6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80185fa:	a815      	add	r0, sp, #84	; 0x54
 80185fc:	f7f9 fca6 	bl	8011f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8018600:	f1b9 0f00 	cmp.w	r9, #0
 8018604:	f040 80d9 	bne.w	80187ba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x29a>
 8018608:	f1bb 0f01 	cmp.w	fp, #1
 801860c:	f040 80dd 	bne.w	80187ca <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2aa>
 8018610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018612:	b153      	cbz	r3, 801862a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8018614:	2508      	movs	r5, #8
 8018616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018618:	fb95 f3f8 	sdiv	r3, r5, r8
 801861c:	1e5d      	subs	r5, r3, #1
 801861e:	4415      	add	r5, r2
 8018620:	fb95 f5f3 	sdiv	r5, r5, r3
 8018624:	fb15 f503 	smulbb	r5, r5, r3
 8018628:	b2ad      	uxth	r5, r5
 801862a:	b907      	cbnz	r7, 801862e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801862c:	b16c      	cbz	r4, 801864a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801862e:	fb04 7305 	mla	r3, r4, r5, r7
 8018632:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018634:	ebaa 0a04 	sub.w	sl, sl, r4
 8018638:	fb08 f303 	mul.w	r3, r8, r3
 801863c:	fa1f fa8a 	uxth.w	sl, sl
 8018640:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8018644:	f003 0407 	and.w	r4, r3, #7
 8018648:	9226      	str	r2, [sp, #152]	; 0x98
 801864a:	4649      	mov	r1, r9
 801864c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801864e:	f7ff ff2f 	bl	80184b0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8018652:	4649      	mov	r1, r9
 8018654:	4683      	mov	fp, r0
 8018656:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018658:	f7ff ff46 	bl	80184e8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801865c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801865e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018660:	4681      	mov	r9, r0
 8018662:	1a9b      	subs	r3, r3, r2
 8018664:	459a      	cmp	sl, r3
 8018666:	bfa8      	it	ge
 8018668:	469a      	movge	sl, r3
 801866a:	f1ba 0f00 	cmp.w	sl, #0
 801866e:	f340 80f9 	ble.w	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 8018672:	1bf6      	subs	r6, r6, r7
 8018674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018676:	1b9e      	subs	r6, r3, r6
 8018678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801867a:	429e      	cmp	r6, r3
 801867c:	bfd4      	ite	le
 801867e:	ebc7 0706 	rsble	r7, r7, r6
 8018682:	ebc7 0703 	rsbgt	r7, r7, r3
 8018686:	2f00      	cmp	r7, #0
 8018688:	f340 80ec 	ble.w	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 801868c:	1bed      	subs	r5, r5, r7
 801868e:	fb08 f305 	mul.w	r3, r8, r5
 8018692:	930d      	str	r3, [sp, #52]	; 0x34
 8018694:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018696:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801869a:	930e      	str	r3, [sp, #56]	; 0x38
 801869c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801869e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80186a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	9310      	str	r3, [sp, #64]	; 0x40
 80186aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	f040 80de 	bne.w	801886e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34e>
 80186b2:	4b7d      	ldr	r3, [pc, #500]	; (80188a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80186b4:	6818      	ldr	r0, [r3, #0]
 80186b6:	6803      	ldr	r3, [r0, #0]
 80186b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186ba:	4798      	blx	r3
 80186bc:	2301      	movs	r3, #1
 80186be:	4a7b      	ldr	r2, [pc, #492]	; (80188ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80186c0:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80186c4:	fb07 9b1b 	mls	fp, r7, fp, r9
 80186c8:	fa03 f308 	lsl.w	r3, r3, r8
 80186cc:	8811      	ldrh	r1, [r2, #0]
 80186ce:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80186d2:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80186d6:	3b01      	subs	r3, #1
 80186d8:	fb06 bb07 	mla	fp, r6, r7, fp
 80186dc:	b2db      	uxtb	r3, r3
 80186de:	930a      	str	r3, [sp, #40]	; 0x28
 80186e0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80186e4:	fb01 2303 	mla	r3, r1, r3, r2
 80186e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80186ec:	18c3      	adds	r3, r0, r3
 80186ee:	9309      	str	r3, [sp, #36]	; 0x24
 80186f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80186f2:	781a      	ldrb	r2, [r3, #0]
 80186f4:	4122      	asrs	r2, r4
 80186f6:	b2d2      	uxtb	r2, r2
 80186f8:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80186fc:	f0c0 80d8 	bcc.w	80188b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8018700:	46be      	mov	lr, r7
 8018702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018704:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8018708:	f0c0 80ba 	bcc.w	8018880 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x360>
 801870c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801870e:	4013      	ands	r3, r2
 8018710:	d041      	beq.n	8018796 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8018712:	20ff      	movs	r0, #255	; 0xff
 8018714:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018716:	fb90 f5f5 	sdiv	r5, r0, r5
 801871a:	436b      	muls	r3, r5
 801871c:	2bfe      	cmp	r3, #254	; 0xfe
 801871e:	dd03      	ble.n	8018728 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 8018720:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018722:	4285      	cmp	r5, r0
 8018724:	f000 80a5 	beq.w	8018872 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x352>
 8018728:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801872a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801872c:	fb15 f303 	smulbb	r3, r5, r3
 8018730:	b29b      	uxth	r3, r3
 8018732:	1c5d      	adds	r5, r3, #1
 8018734:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8018738:	780d      	ldrb	r5, [r1, #0]
 801873a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801873e:	fa1f fc83 	uxth.w	ip, r3
 8018742:	43db      	mvns	r3, r3
 8018744:	fb10 f90c 	smulbb	r9, r0, ip
 8018748:	b2db      	uxtb	r3, r3
 801874a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801874c:	fb05 9503 	mla	r5, r5, r3, r9
 8018750:	b2ad      	uxth	r5, r5
 8018752:	f105 0901 	add.w	r9, r5, #1
 8018756:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801875a:	fb10 f90c 	smulbb	r9, r0, ip
 801875e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018760:	122d      	asrs	r5, r5, #8
 8018762:	fb10 fc0c 	smulbb	ip, r0, ip
 8018766:	700d      	strb	r5, [r1, #0]
 8018768:	784d      	ldrb	r5, [r1, #1]
 801876a:	fb05 9503 	mla	r5, r5, r3, r9
 801876e:	b2ad      	uxth	r5, r5
 8018770:	f105 0901 	add.w	r9, r5, #1
 8018774:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8018778:	122d      	asrs	r5, r5, #8
 801877a:	704d      	strb	r5, [r1, #1]
 801877c:	788d      	ldrb	r5, [r1, #2]
 801877e:	fb05 cc03 	mla	ip, r5, r3, ip
 8018782:	fa1f fc8c 	uxth.w	ip, ip
 8018786:	f10c 0301 	add.w	r3, ip, #1
 801878a:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801878e:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018792:	f881 c002 	strb.w	ip, [r1, #2]
 8018796:	4444      	add	r4, r8
 8018798:	4431      	add	r1, r6
 801879a:	b2a4      	uxth	r4, r4
 801879c:	2c07      	cmp	r4, #7
 801879e:	bf89      	itett	hi
 80187a0:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80187a2:	fa42 f208 	asrls.w	r2, r2, r8
 80187a6:	2400      	movhi	r4, #0
 80187a8:	785a      	ldrbhi	r2, [r3, #1]
 80187aa:	bf8a      	itet	hi
 80187ac:	3301      	addhi	r3, #1
 80187ae:	b2d2      	uxtbls	r2, r2
 80187b0:	9326      	strhi	r3, [sp, #152]	; 0x98
 80187b2:	e7a7      	b.n	8018704 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e4>
 80187b4:	441e      	add	r6, r3
 80187b6:	b236      	sxth	r6, r6
 80187b8:	e6ec      	b.n	8018594 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80187ba:	f1b9 0f01 	cmp.w	r9, #1
 80187be:	f47f af27 	bne.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187c2:	f1bb 0f01 	cmp.w	fp, #1
 80187c6:	f47f af23 	bne.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187ca:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 80188a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>
 80187ce:	f8db 0000 	ldr.w	r0, [fp]
 80187d2:	6803      	ldr	r3, [r0, #0]
 80187d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80187d6:	4798      	blx	r3
 80187d8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80187dc:	465a      	mov	r2, fp
 80187de:	d006      	beq.n	80187ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 80187e0:	f1b8 0f04 	cmp.w	r8, #4
 80187e4:	d141      	bne.n	801886a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34a>
 80187e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80187e8:	3300      	adds	r3, #0
 80187ea:	bf18      	it	ne
 80187ec:	2301      	movne	r3, #1
 80187ee:	0580      	lsls	r0, r0, #22
 80187f0:	d567      	bpl.n	80188c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80187f2:	f1b8 0f08 	cmp.w	r8, #8
 80187f6:	d164      	bne.n	80188c2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a2>
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	bf0c      	ite	eq
 80187fc:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8018800:	f44f 7180 	movne.w	r1, #256	; 0x100
 8018804:	2f00      	cmp	r7, #0
 8018806:	f47f af03 	bne.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801880a:	2c00      	cmp	r4, #0
 801880c:	f47f af00 	bne.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018812:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018814:	18f3      	adds	r3, r6, r3
 8018816:	4283      	cmp	r3, r0
 8018818:	f73f aefa 	bgt.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801881c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801881e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018820:	4403      	add	r3, r0
 8018822:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018824:	4283      	cmp	r3, r0
 8018826:	f73f aef3 	bgt.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801882a:	f1b8 0f08 	cmp.w	r8, #8
 801882e:	6810      	ldr	r0, [r2, #0]
 8018830:	f04f 0600 	mov.w	r6, #0
 8018834:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8018838:	bf18      	it	ne
 801883a:	3501      	addne	r5, #1
 801883c:	6804      	ldr	r4, [r0, #0]
 801883e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018842:	bf18      	it	ne
 8018844:	f025 0501 	bicne.w	r5, r5, #1
 8018848:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801884c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801884e:	bf18      	it	ne
 8018850:	b2ad      	uxthne	r5, r5
 8018852:	9104      	str	r1, [sp, #16]
 8018854:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8018856:	e9cd 5a00 	strd	r5, sl, [sp]
 801885a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801885e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018860:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018862:	47a0      	blx	r4
 8018864:	b017      	add	sp, #92	; 0x5c
 8018866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801886a:	2300      	movs	r3, #0
 801886c:	e7bf      	b.n	80187ee <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801886e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018870:	e724      	b.n	80186bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19c>
 8018872:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018874:	700b      	strb	r3, [r1, #0]
 8018876:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018878:	704b      	strb	r3, [r1, #1]
 801887a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801887c:	708b      	strb	r3, [r1, #2]
 801887e:	e78a      	b.n	8018796 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x276>
 8018880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018882:	b153      	cbz	r3, 801889a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 8018884:	441c      	add	r4, r3
 8018886:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018888:	b2a4      	uxth	r4, r4
 801888a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801888e:	f004 0407 	and.w	r4, r4, #7
 8018892:	781a      	ldrb	r2, [r3, #0]
 8018894:	9326      	str	r3, [sp, #152]	; 0x98
 8018896:	4122      	asrs	r2, r4
 8018898:	b2d2      	uxtb	r2, r2
 801889a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801889c:	445b      	add	r3, fp
 801889e:	9309      	str	r3, [sp, #36]	; 0x24
 80188a0:	e72a      	b.n	80186f8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d8>
 80188a2:	bf00      	nop
 80188a4:	2400f190 	.word	0x2400f190
 80188a8:	2400f198 	.word	0x2400f198
 80188ac:	2400f192 	.word	0x2400f192
 80188b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d1d6      	bne.n	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80188b6:	4b06      	ldr	r3, [pc, #24]	; (80188d0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 80188b8:	6818      	ldr	r0, [r3, #0]
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188be:	4798      	blx	r3
 80188c0:	e7d0      	b.n	8018864 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	f43f aea4 	beq.w	8018610 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80188c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80188cc:	e79a      	b.n	8018804 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e4>
 80188ce:	bf00      	nop
 80188d0:	2400f198 	.word	0x2400f198

080188d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80188d4:	b538      	push	{r3, r4, r5, lr}
 80188d6:	4c15      	ldr	r4, [pc, #84]	; (801892c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80188d8:	4605      	mov	r5, r0
 80188da:	7823      	ldrb	r3, [r4, #0]
 80188dc:	f3bf 8f5b 	dmb	ish
 80188e0:	07da      	lsls	r2, r3, #31
 80188e2:	d40b      	bmi.n	80188fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80188e4:	4620      	mov	r0, r4
 80188e6:	f006 fe30 	bl	801f54a <__cxa_guard_acquire>
 80188ea:	b138      	cbz	r0, 80188fc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80188ec:	4620      	mov	r0, r4
 80188ee:	f006 fe38 	bl	801f562 <__cxa_guard_release>
 80188f2:	4a0f      	ldr	r2, [pc, #60]	; (8018930 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80188f4:	490f      	ldr	r1, [pc, #60]	; (8018934 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80188f6:	4810      	ldr	r0, [pc, #64]	; (8018938 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80188f8:	f006 fe20 	bl	801f53c <__aeabi_atexit>
 80188fc:	4c0f      	ldr	r4, [pc, #60]	; (801893c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80188fe:	7823      	ldrb	r3, [r4, #0]
 8018900:	f3bf 8f5b 	dmb	ish
 8018904:	07db      	lsls	r3, r3, #31
 8018906:	d40b      	bmi.n	8018920 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018908:	4620      	mov	r0, r4
 801890a:	f006 fe1e 	bl	801f54a <__cxa_guard_acquire>
 801890e:	b138      	cbz	r0, 8018920 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018910:	4620      	mov	r0, r4
 8018912:	f006 fe26 	bl	801f562 <__cxa_guard_release>
 8018916:	4a06      	ldr	r2, [pc, #24]	; (8018930 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018918:	4909      	ldr	r1, [pc, #36]	; (8018940 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801891a:	480a      	ldr	r0, [pc, #40]	; (8018944 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801891c:	f006 fe0e 	bl	801f53c <__aeabi_atexit>
 8018920:	4b05      	ldr	r3, [pc, #20]	; (8018938 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018922:	612b      	str	r3, [r5, #16]
 8018924:	4b07      	ldr	r3, [pc, #28]	; (8018944 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018926:	616b      	str	r3, [r5, #20]
 8018928:	bd38      	pop	{r3, r4, r5, pc}
 801892a:	bf00      	nop
 801892c:	2400f284 	.word	0x2400f284
 8018930:	24000000 	.word	0x24000000
 8018934:	0801720d 	.word	0x0801720d
 8018938:	240000a4 	.word	0x240000a4
 801893c:	2400f288 	.word	0x2400f288
 8018940:	0801720b 	.word	0x0801720b
 8018944:	240000a8 	.word	0x240000a8

08018948 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8018948:	b538      	push	{r3, r4, r5, lr}
 801894a:	4c15      	ldr	r4, [pc, #84]	; (80189a0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801894c:	4605      	mov	r5, r0
 801894e:	7823      	ldrb	r3, [r4, #0]
 8018950:	f3bf 8f5b 	dmb	ish
 8018954:	07da      	lsls	r2, r3, #31
 8018956:	d40b      	bmi.n	8018970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018958:	4620      	mov	r0, r4
 801895a:	f006 fdf6 	bl	801f54a <__cxa_guard_acquire>
 801895e:	b138      	cbz	r0, 8018970 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018960:	4620      	mov	r0, r4
 8018962:	f006 fdfe 	bl	801f562 <__cxa_guard_release>
 8018966:	4a0f      	ldr	r2, [pc, #60]	; (80189a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018968:	490f      	ldr	r1, [pc, #60]	; (80189a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801896a:	4810      	ldr	r0, [pc, #64]	; (80189ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801896c:	f006 fde6 	bl	801f53c <__aeabi_atexit>
 8018970:	4c0f      	ldr	r4, [pc, #60]	; (80189b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018972:	7823      	ldrb	r3, [r4, #0]
 8018974:	f3bf 8f5b 	dmb	ish
 8018978:	07db      	lsls	r3, r3, #31
 801897a:	d40b      	bmi.n	8018994 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801897c:	4620      	mov	r0, r4
 801897e:	f006 fde4 	bl	801f54a <__cxa_guard_acquire>
 8018982:	b138      	cbz	r0, 8018994 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018984:	4620      	mov	r0, r4
 8018986:	f006 fdec 	bl	801f562 <__cxa_guard_release>
 801898a:	4a06      	ldr	r2, [pc, #24]	; (80189a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801898c:	4909      	ldr	r1, [pc, #36]	; (80189b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801898e:	480a      	ldr	r0, [pc, #40]	; (80189b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018990:	f006 fdd4 	bl	801f53c <__aeabi_atexit>
 8018994:	4b05      	ldr	r3, [pc, #20]	; (80189ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018996:	60ab      	str	r3, [r5, #8]
 8018998:	4b07      	ldr	r3, [pc, #28]	; (80189b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801899a:	60eb      	str	r3, [r5, #12]
 801899c:	bd38      	pop	{r3, r4, r5, pc}
 801899e:	bf00      	nop
 80189a0:	2400f264 	.word	0x2400f264
 80189a4:	24000000 	.word	0x24000000
 80189a8:	08017211 	.word	0x08017211
 80189ac:	24000084 	.word	0x24000084
 80189b0:	2400f268 	.word	0x2400f268
 80189b4:	0801720f 	.word	0x0801720f
 80189b8:	24000088 	.word	0x24000088

080189bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80189bc:	b510      	push	{r4, lr}
 80189be:	4604      	mov	r4, r0
 80189c0:	f7ff ff88 	bl	80188d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80189c4:	4620      	mov	r0, r4
 80189c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189ca:	f7ff bfbd 	b.w	8018948 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080189d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80189d0:	b538      	push	{r3, r4, r5, lr}
 80189d2:	4c15      	ldr	r4, [pc, #84]	; (8018a28 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80189d4:	4605      	mov	r5, r0
 80189d6:	7823      	ldrb	r3, [r4, #0]
 80189d8:	f3bf 8f5b 	dmb	ish
 80189dc:	07da      	lsls	r2, r3, #31
 80189de:	d40b      	bmi.n	80189f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80189e0:	4620      	mov	r0, r4
 80189e2:	f006 fdb2 	bl	801f54a <__cxa_guard_acquire>
 80189e6:	b138      	cbz	r0, 80189f8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80189e8:	4620      	mov	r0, r4
 80189ea:	f006 fdba 	bl	801f562 <__cxa_guard_release>
 80189ee:	4a0f      	ldr	r2, [pc, #60]	; (8018a2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80189f0:	490f      	ldr	r1, [pc, #60]	; (8018a30 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80189f2:	4810      	ldr	r0, [pc, #64]	; (8018a34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80189f4:	f006 fda2 	bl	801f53c <__aeabi_atexit>
 80189f8:	4c0f      	ldr	r4, [pc, #60]	; (8018a38 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80189fa:	7823      	ldrb	r3, [r4, #0]
 80189fc:	f3bf 8f5b 	dmb	ish
 8018a00:	07db      	lsls	r3, r3, #31
 8018a02:	d40b      	bmi.n	8018a1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018a04:	4620      	mov	r0, r4
 8018a06:	f006 fda0 	bl	801f54a <__cxa_guard_acquire>
 8018a0a:	b138      	cbz	r0, 8018a1c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	f006 fda8 	bl	801f562 <__cxa_guard_release>
 8018a12:	4a06      	ldr	r2, [pc, #24]	; (8018a2c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018a14:	4909      	ldr	r1, [pc, #36]	; (8018a3c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8018a16:	480a      	ldr	r0, [pc, #40]	; (8018a40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a18:	f006 fd90 	bl	801f53c <__aeabi_atexit>
 8018a1c:	4b05      	ldr	r3, [pc, #20]	; (8018a34 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018a1e:	622b      	str	r3, [r5, #32]
 8018a20:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018a22:	626b      	str	r3, [r5, #36]	; 0x24
 8018a24:	bd38      	pop	{r3, r4, r5, pc}
 8018a26:	bf00      	nop
 8018a28:	2400f28c 	.word	0x2400f28c
 8018a2c:	24000000 	.word	0x24000000
 8018a30:	08017205 	.word	0x08017205
 8018a34:	240000ac 	.word	0x240000ac
 8018a38:	2400f290 	.word	0x2400f290
 8018a3c:	08017203 	.word	0x08017203
 8018a40:	240000b0 	.word	0x240000b0

08018a44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018a44:	b538      	push	{r3, r4, r5, lr}
 8018a46:	4c15      	ldr	r4, [pc, #84]	; (8018a9c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8018a48:	4605      	mov	r5, r0
 8018a4a:	7823      	ldrb	r3, [r4, #0]
 8018a4c:	f3bf 8f5b 	dmb	ish
 8018a50:	07da      	lsls	r2, r3, #31
 8018a52:	d40b      	bmi.n	8018a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a54:	4620      	mov	r0, r4
 8018a56:	f006 fd78 	bl	801f54a <__cxa_guard_acquire>
 8018a5a:	b138      	cbz	r0, 8018a6c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a5c:	4620      	mov	r0, r4
 8018a5e:	f006 fd80 	bl	801f562 <__cxa_guard_release>
 8018a62:	4a0f      	ldr	r2, [pc, #60]	; (8018aa0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a64:	490f      	ldr	r1, [pc, #60]	; (8018aa4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018a66:	4810      	ldr	r0, [pc, #64]	; (8018aa8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a68:	f006 fd68 	bl	801f53c <__aeabi_atexit>
 8018a6c:	4c0f      	ldr	r4, [pc, #60]	; (8018aac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018a6e:	7823      	ldrb	r3, [r4, #0]
 8018a70:	f3bf 8f5b 	dmb	ish
 8018a74:	07db      	lsls	r3, r3, #31
 8018a76:	d40b      	bmi.n	8018a90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f006 fd66 	bl	801f54a <__cxa_guard_acquire>
 8018a7e:	b138      	cbz	r0, 8018a90 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a80:	4620      	mov	r0, r4
 8018a82:	f006 fd6e 	bl	801f562 <__cxa_guard_release>
 8018a86:	4a06      	ldr	r2, [pc, #24]	; (8018aa0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a88:	4909      	ldr	r1, [pc, #36]	; (8018ab0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018a8a:	480a      	ldr	r0, [pc, #40]	; (8018ab4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a8c:	f006 fd56 	bl	801f53c <__aeabi_atexit>
 8018a90:	4b05      	ldr	r3, [pc, #20]	; (8018aa8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a92:	61ab      	str	r3, [r5, #24]
 8018a94:	4b07      	ldr	r3, [pc, #28]	; (8018ab4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a96:	61eb      	str	r3, [r5, #28]
 8018a98:	bd38      	pop	{r3, r4, r5, pc}
 8018a9a:	bf00      	nop
 8018a9c:	2400f26c 	.word	0x2400f26c
 8018aa0:	24000000 	.word	0x24000000
 8018aa4:	08017209 	.word	0x08017209
 8018aa8:	2400008c 	.word	0x2400008c
 8018aac:	2400f270 	.word	0x2400f270
 8018ab0:	08017207 	.word	0x08017207
 8018ab4:	24000090 	.word	0x24000090

08018ab8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018ab8:	b510      	push	{r4, lr}
 8018aba:	4604      	mov	r4, r0
 8018abc:	f7ff ff88 	bl	80189d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac6:	f7ff bfbd 	b.w	8018a44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018acc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	4c15      	ldr	r4, [pc, #84]	; (8018b24 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8018ad0:	4605      	mov	r5, r0
 8018ad2:	7823      	ldrb	r3, [r4, #0]
 8018ad4:	f3bf 8f5b 	dmb	ish
 8018ad8:	07da      	lsls	r2, r3, #31
 8018ada:	d40b      	bmi.n	8018af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018adc:	4620      	mov	r0, r4
 8018ade:	f006 fd34 	bl	801f54a <__cxa_guard_acquire>
 8018ae2:	b138      	cbz	r0, 8018af4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f006 fd3c 	bl	801f562 <__cxa_guard_release>
 8018aea:	4a0f      	ldr	r2, [pc, #60]	; (8018b28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018aec:	490f      	ldr	r1, [pc, #60]	; (8018b2c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8018aee:	4810      	ldr	r0, [pc, #64]	; (8018b30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018af0:	f006 fd24 	bl	801f53c <__aeabi_atexit>
 8018af4:	4c0f      	ldr	r4, [pc, #60]	; (8018b34 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018af6:	7823      	ldrb	r3, [r4, #0]
 8018af8:	f3bf 8f5b 	dmb	ish
 8018afc:	07db      	lsls	r3, r3, #31
 8018afe:	d40b      	bmi.n	8018b18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018b00:	4620      	mov	r0, r4
 8018b02:	f006 fd22 	bl	801f54a <__cxa_guard_acquire>
 8018b06:	b138      	cbz	r0, 8018b18 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018b08:	4620      	mov	r0, r4
 8018b0a:	f006 fd2a 	bl	801f562 <__cxa_guard_release>
 8018b0e:	4a06      	ldr	r2, [pc, #24]	; (8018b28 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018b10:	4909      	ldr	r1, [pc, #36]	; (8018b38 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018b12:	480a      	ldr	r0, [pc, #40]	; (8018b3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018b14:	f006 fd12 	bl	801f53c <__aeabi_atexit>
 8018b18:	4b05      	ldr	r3, [pc, #20]	; (8018b30 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018b1a:	632b      	str	r3, [r5, #48]	; 0x30
 8018b1c:	4b07      	ldr	r3, [pc, #28]	; (8018b3c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018b1e:	636b      	str	r3, [r5, #52]	; 0x34
 8018b20:	bd38      	pop	{r3, r4, r5, pc}
 8018b22:	bf00      	nop
 8018b24:	2400f274 	.word	0x2400f274
 8018b28:	24000000 	.word	0x24000000
 8018b2c:	080171fd 	.word	0x080171fd
 8018b30:	24000094 	.word	0x24000094
 8018b34:	2400f278 	.word	0x2400f278
 8018b38:	080171fb 	.word	0x080171fb
 8018b3c:	24000098 	.word	0x24000098

08018b40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018b40:	b538      	push	{r3, r4, r5, lr}
 8018b42:	4c15      	ldr	r4, [pc, #84]	; (8018b98 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018b44:	4605      	mov	r5, r0
 8018b46:	7823      	ldrb	r3, [r4, #0]
 8018b48:	f3bf 8f5b 	dmb	ish
 8018b4c:	07da      	lsls	r2, r3, #31
 8018b4e:	d40b      	bmi.n	8018b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018b50:	4620      	mov	r0, r4
 8018b52:	f006 fcfa 	bl	801f54a <__cxa_guard_acquire>
 8018b56:	b138      	cbz	r0, 8018b68 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018b58:	4620      	mov	r0, r4
 8018b5a:	f006 fd02 	bl	801f562 <__cxa_guard_release>
 8018b5e:	4a0f      	ldr	r2, [pc, #60]	; (8018b9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018b60:	490f      	ldr	r1, [pc, #60]	; (8018ba0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018b62:	4810      	ldr	r0, [pc, #64]	; (8018ba4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018b64:	f006 fcea 	bl	801f53c <__aeabi_atexit>
 8018b68:	4c0f      	ldr	r4, [pc, #60]	; (8018ba8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018b6a:	7823      	ldrb	r3, [r4, #0]
 8018b6c:	f3bf 8f5b 	dmb	ish
 8018b70:	07db      	lsls	r3, r3, #31
 8018b72:	d40b      	bmi.n	8018b8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018b74:	4620      	mov	r0, r4
 8018b76:	f006 fce8 	bl	801f54a <__cxa_guard_acquire>
 8018b7a:	b138      	cbz	r0, 8018b8c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f006 fcf0 	bl	801f562 <__cxa_guard_release>
 8018b82:	4a06      	ldr	r2, [pc, #24]	; (8018b9c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018b84:	4909      	ldr	r1, [pc, #36]	; (8018bac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018b86:	480a      	ldr	r0, [pc, #40]	; (8018bb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018b88:	f006 fcd8 	bl	801f53c <__aeabi_atexit>
 8018b8c:	4b05      	ldr	r3, [pc, #20]	; (8018ba4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018b8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8018b90:	4b07      	ldr	r3, [pc, #28]	; (8018bb0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018b92:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018b94:	bd38      	pop	{r3, r4, r5, pc}
 8018b96:	bf00      	nop
 8018b98:	2400f24c 	.word	0x2400f24c
 8018b9c:	24000000 	.word	0x24000000
 8018ba0:	08017201 	.word	0x08017201
 8018ba4:	2400006c 	.word	0x2400006c
 8018ba8:	2400f250 	.word	0x2400f250
 8018bac:	080171ff 	.word	0x080171ff
 8018bb0:	24000070 	.word	0x24000070

08018bb4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018bb4:	b510      	push	{r4, lr}
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	f7ff ff88 	bl	8018acc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018bc2:	f7ff bfbd 	b.w	8018b40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018bc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018bc8:	b538      	push	{r3, r4, r5, lr}
 8018bca:	4c15      	ldr	r4, [pc, #84]	; (8018c20 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018bcc:	4605      	mov	r5, r0
 8018bce:	7823      	ldrb	r3, [r4, #0]
 8018bd0:	f3bf 8f5b 	dmb	ish
 8018bd4:	07da      	lsls	r2, r3, #31
 8018bd6:	d40b      	bmi.n	8018bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018bd8:	4620      	mov	r0, r4
 8018bda:	f006 fcb6 	bl	801f54a <__cxa_guard_acquire>
 8018bde:	b138      	cbz	r0, 8018bf0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018be0:	4620      	mov	r0, r4
 8018be2:	f006 fcbe 	bl	801f562 <__cxa_guard_release>
 8018be6:	4a0f      	ldr	r2, [pc, #60]	; (8018c24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018be8:	490f      	ldr	r1, [pc, #60]	; (8018c28 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018bea:	4810      	ldr	r0, [pc, #64]	; (8018c2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018bec:	f006 fca6 	bl	801f53c <__aeabi_atexit>
 8018bf0:	4c0f      	ldr	r4, [pc, #60]	; (8018c30 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018bf2:	7823      	ldrb	r3, [r4, #0]
 8018bf4:	f3bf 8f5b 	dmb	ish
 8018bf8:	07db      	lsls	r3, r3, #31
 8018bfa:	d40b      	bmi.n	8018c14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018bfc:	4620      	mov	r0, r4
 8018bfe:	f006 fca4 	bl	801f54a <__cxa_guard_acquire>
 8018c02:	b138      	cbz	r0, 8018c14 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018c04:	4620      	mov	r0, r4
 8018c06:	f006 fcac 	bl	801f562 <__cxa_guard_release>
 8018c0a:	4a06      	ldr	r2, [pc, #24]	; (8018c24 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018c0c:	4909      	ldr	r1, [pc, #36]	; (8018c34 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018c0e:	480a      	ldr	r0, [pc, #40]	; (8018c38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018c10:	f006 fc94 	bl	801f53c <__aeabi_atexit>
 8018c14:	4b05      	ldr	r3, [pc, #20]	; (8018c2c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018c16:	642b      	str	r3, [r5, #64]	; 0x40
 8018c18:	4b07      	ldr	r3, [pc, #28]	; (8018c38 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018c1a:	646b      	str	r3, [r5, #68]	; 0x44
 8018c1c:	bd38      	pop	{r3, r4, r5, pc}
 8018c1e:	bf00      	nop
 8018c20:	2400f27c 	.word	0x2400f27c
 8018c24:	24000000 	.word	0x24000000
 8018c28:	080171f5 	.word	0x080171f5
 8018c2c:	2400009c 	.word	0x2400009c
 8018c30:	2400f280 	.word	0x2400f280
 8018c34:	080171f3 	.word	0x080171f3
 8018c38:	240000a0 	.word	0x240000a0

08018c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018c3c:	b538      	push	{r3, r4, r5, lr}
 8018c3e:	4c15      	ldr	r4, [pc, #84]	; (8018c94 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018c40:	4605      	mov	r5, r0
 8018c42:	7823      	ldrb	r3, [r4, #0]
 8018c44:	f3bf 8f5b 	dmb	ish
 8018c48:	07da      	lsls	r2, r3, #31
 8018c4a:	d40b      	bmi.n	8018c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	f006 fc7c 	bl	801f54a <__cxa_guard_acquire>
 8018c52:	b138      	cbz	r0, 8018c64 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018c54:	4620      	mov	r0, r4
 8018c56:	f006 fc84 	bl	801f562 <__cxa_guard_release>
 8018c5a:	4a0f      	ldr	r2, [pc, #60]	; (8018c98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018c5c:	490f      	ldr	r1, [pc, #60]	; (8018c9c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018c5e:	4810      	ldr	r0, [pc, #64]	; (8018ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018c60:	f006 fc6c 	bl	801f53c <__aeabi_atexit>
 8018c64:	4c0f      	ldr	r4, [pc, #60]	; (8018ca4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018c66:	7823      	ldrb	r3, [r4, #0]
 8018c68:	f3bf 8f5b 	dmb	ish
 8018c6c:	07db      	lsls	r3, r3, #31
 8018c6e:	d40b      	bmi.n	8018c88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018c70:	4620      	mov	r0, r4
 8018c72:	f006 fc6a 	bl	801f54a <__cxa_guard_acquire>
 8018c76:	b138      	cbz	r0, 8018c88 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018c78:	4620      	mov	r0, r4
 8018c7a:	f006 fc72 	bl	801f562 <__cxa_guard_release>
 8018c7e:	4a06      	ldr	r2, [pc, #24]	; (8018c98 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018c80:	4909      	ldr	r1, [pc, #36]	; (8018ca8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018c82:	480a      	ldr	r0, [pc, #40]	; (8018cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018c84:	f006 fc5a 	bl	801f53c <__aeabi_atexit>
 8018c88:	4b05      	ldr	r3, [pc, #20]	; (8018ca0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018c8a:	63ab      	str	r3, [r5, #56]	; 0x38
 8018c8c:	4b07      	ldr	r3, [pc, #28]	; (8018cac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018c8e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018c90:	bd38      	pop	{r3, r4, r5, pc}
 8018c92:	bf00      	nop
 8018c94:	2400f25c 	.word	0x2400f25c
 8018c98:	24000000 	.word	0x24000000
 8018c9c:	080171f9 	.word	0x080171f9
 8018ca0:	2400007c 	.word	0x2400007c
 8018ca4:	2400f260 	.word	0x2400f260
 8018ca8:	080171f7 	.word	0x080171f7
 8018cac:	24000080 	.word	0x24000080

08018cb0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018cb0:	b510      	push	{r4, lr}
 8018cb2:	4604      	mov	r4, r0
 8018cb4:	f7ff ff88 	bl	8018bc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018cbe:	f7ff bfbd 	b.w	8018c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018cc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018cc4:	b538      	push	{r3, r4, r5, lr}
 8018cc6:	4c15      	ldr	r4, [pc, #84]	; (8018d1c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018cc8:	4605      	mov	r5, r0
 8018cca:	7823      	ldrb	r3, [r4, #0]
 8018ccc:	f3bf 8f5b 	dmb	ish
 8018cd0:	07da      	lsls	r2, r3, #31
 8018cd2:	d40b      	bmi.n	8018cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018cd4:	4620      	mov	r0, r4
 8018cd6:	f006 fc38 	bl	801f54a <__cxa_guard_acquire>
 8018cda:	b138      	cbz	r0, 8018cec <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f006 fc40 	bl	801f562 <__cxa_guard_release>
 8018ce2:	4a0f      	ldr	r2, [pc, #60]	; (8018d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018ce4:	490f      	ldr	r1, [pc, #60]	; (8018d24 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018ce6:	4810      	ldr	r0, [pc, #64]	; (8018d28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018ce8:	f006 fc28 	bl	801f53c <__aeabi_atexit>
 8018cec:	4c0f      	ldr	r4, [pc, #60]	; (8018d2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018cee:	7823      	ldrb	r3, [r4, #0]
 8018cf0:	f3bf 8f5b 	dmb	ish
 8018cf4:	07db      	lsls	r3, r3, #31
 8018cf6:	d40b      	bmi.n	8018d10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018cf8:	4620      	mov	r0, r4
 8018cfa:	f006 fc26 	bl	801f54a <__cxa_guard_acquire>
 8018cfe:	b138      	cbz	r0, 8018d10 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018d00:	4620      	mov	r0, r4
 8018d02:	f006 fc2e 	bl	801f562 <__cxa_guard_release>
 8018d06:	4a06      	ldr	r2, [pc, #24]	; (8018d20 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018d08:	4909      	ldr	r1, [pc, #36]	; (8018d30 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018d0a:	480a      	ldr	r0, [pc, #40]	; (8018d34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018d0c:	f006 fc16 	bl	801f53c <__aeabi_atexit>
 8018d10:	4b05      	ldr	r3, [pc, #20]	; (8018d28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018d12:	652b      	str	r3, [r5, #80]	; 0x50
 8018d14:	4b07      	ldr	r3, [pc, #28]	; (8018d34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018d16:	656b      	str	r3, [r5, #84]	; 0x54
 8018d18:	bd38      	pop	{r3, r4, r5, pc}
 8018d1a:	bf00      	nop
 8018d1c:	2400f254 	.word	0x2400f254
 8018d20:	24000000 	.word	0x24000000
 8018d24:	080171ed 	.word	0x080171ed
 8018d28:	24000074 	.word	0x24000074
 8018d2c:	2400f258 	.word	0x2400f258
 8018d30:	080171eb 	.word	0x080171eb
 8018d34:	24000078 	.word	0x24000078

08018d38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018d38:	b538      	push	{r3, r4, r5, lr}
 8018d3a:	4c15      	ldr	r4, [pc, #84]	; (8018d90 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018d3c:	4605      	mov	r5, r0
 8018d3e:	7823      	ldrb	r3, [r4, #0]
 8018d40:	f3bf 8f5b 	dmb	ish
 8018d44:	07da      	lsls	r2, r3, #31
 8018d46:	d40b      	bmi.n	8018d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018d48:	4620      	mov	r0, r4
 8018d4a:	f006 fbfe 	bl	801f54a <__cxa_guard_acquire>
 8018d4e:	b138      	cbz	r0, 8018d60 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018d50:	4620      	mov	r0, r4
 8018d52:	f006 fc06 	bl	801f562 <__cxa_guard_release>
 8018d56:	4a0f      	ldr	r2, [pc, #60]	; (8018d94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018d58:	490f      	ldr	r1, [pc, #60]	; (8018d98 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018d5a:	4810      	ldr	r0, [pc, #64]	; (8018d9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018d5c:	f006 fbee 	bl	801f53c <__aeabi_atexit>
 8018d60:	4c0f      	ldr	r4, [pc, #60]	; (8018da0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018d62:	7823      	ldrb	r3, [r4, #0]
 8018d64:	f3bf 8f5b 	dmb	ish
 8018d68:	07db      	lsls	r3, r3, #31
 8018d6a:	d40b      	bmi.n	8018d84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f006 fbec 	bl	801f54a <__cxa_guard_acquire>
 8018d72:	b138      	cbz	r0, 8018d84 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018d74:	4620      	mov	r0, r4
 8018d76:	f006 fbf4 	bl	801f562 <__cxa_guard_release>
 8018d7a:	4a06      	ldr	r2, [pc, #24]	; (8018d94 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018d7c:	4909      	ldr	r1, [pc, #36]	; (8018da4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018d7e:	480a      	ldr	r0, [pc, #40]	; (8018da8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018d80:	f006 fbdc 	bl	801f53c <__aeabi_atexit>
 8018d84:	4b05      	ldr	r3, [pc, #20]	; (8018d9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018d86:	64ab      	str	r3, [r5, #72]	; 0x48
 8018d88:	4b07      	ldr	r3, [pc, #28]	; (8018da8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018d8a:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018d8c:	bd38      	pop	{r3, r4, r5, pc}
 8018d8e:	bf00      	nop
 8018d90:	2400f244 	.word	0x2400f244
 8018d94:	24000000 	.word	0x24000000
 8018d98:	080171f1 	.word	0x080171f1
 8018d9c:	24000064 	.word	0x24000064
 8018da0:	2400f248 	.word	0x2400f248
 8018da4:	080171ef 	.word	0x080171ef
 8018da8:	24000068 	.word	0x24000068

08018dac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018dac:	b510      	push	{r4, lr}
 8018dae:	4604      	mov	r4, r0
 8018db0:	f7ff ff88 	bl	8018cc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018db4:	4620      	mov	r0, r4
 8018db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dba:	f7ff bfbd 	b.w	8018d38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018dbe <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018dbe:	b510      	push	{r4, lr}
 8018dc0:	4604      	mov	r4, r0
 8018dc2:	f7ff fff3 	bl	8018dac <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018dc6:	4620      	mov	r0, r4
 8018dc8:	f7ff ff72 	bl	8018cb0 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018dcc:	4620      	mov	r0, r4
 8018dce:	f7ff fe73 	bl	8018ab8 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018dd2:	4620      	mov	r0, r4
 8018dd4:	f7ff fdf2 	bl	80189bc <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018dd8:	4620      	mov	r0, r4
 8018dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018dde:	f7ff bee9 	b.w	8018bb4 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08018de4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de8:	b087      	sub	sp, #28
 8018dea:	7888      	ldrb	r0, [r1, #2]
 8018dec:	4616      	mov	r6, r2
 8018dee:	9001      	str	r0, [sp, #4]
 8018df0:	7848      	ldrb	r0, [r1, #1]
 8018df2:	9100      	str	r1, [sp, #0]
 8018df4:	9002      	str	r0, [sp, #8]
 8018df6:	7808      	ldrb	r0, [r1, #0]
 8018df8:	9901      	ldr	r1, [sp, #4]
 8018dfa:	9003      	str	r0, [sp, #12]
 8018dfc:	9802      	ldr	r0, [sp, #8]
 8018dfe:	f9bd e040 	ldrsh.w	lr, [sp, #64]	; 0x40
 8018e02:	0200      	lsls	r0, r0, #8
 8018e04:	f9bd 9044 	ldrsh.w	r9, [sp, #68]	; 0x44
 8018e08:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8018e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8018e10:	9903      	ldr	r1, [sp, #12]
 8018e12:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8018e16:	4308      	orrs	r0, r1
 8018e18:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8018e1c:	e9dd c512 	ldrd	ip, r5, [sp, #72]	; 0x48
 8018e20:	9005      	str	r0, [sp, #20]
 8018e22:	fb05 ca0e 	mla	sl, r5, lr, ip
 8018e26:	2d00      	cmp	r5, #0
 8018e28:	eb06 080a 	add.w	r8, r6, sl
 8018e2c:	db4a      	blt.n	8018ec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8018e2e:	45a9      	cmp	r9, r5
 8018e30:	dd48      	ble.n	8018ec4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe0>
 8018e32:	f1bc 0f00 	cmp.w	ip, #0
 8018e36:	db43      	blt.n	8018ec0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8018e38:	45e6      	cmp	lr, ip
 8018e3a:	dd41      	ble.n	8018ec0 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xdc>
 8018e3c:	f816 600a 	ldrb.w	r6, [r6, sl]
 8018e40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018e44:	441e      	add	r6, r3
 8018e46:	f11c 0001 	adds.w	r0, ip, #1
 8018e4a:	d43e      	bmi.n	8018eca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e4c:	4586      	cmp	lr, r0
 8018e4e:	dd3c      	ble.n	8018eca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e50:	2a00      	cmp	r2, #0
 8018e52:	d03a      	beq.n	8018eca <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xe6>
 8018e54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018e58:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018e5c:	4418      	add	r0, r3
 8018e5e:	3501      	adds	r5, #1
 8018e60:	d437      	bmi.n	8018ed2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018e62:	45a9      	cmp	r9, r5
 8018e64:	dd35      	ble.n	8018ed2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018e66:	b3a4      	cbz	r4, 8018ed2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xee>
 8018e68:	f1bc 0f00 	cmp.w	ip, #0
 8018e6c:	db2f      	blt.n	8018ece <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8018e6e:	45e6      	cmp	lr, ip
 8018e70:	dd2d      	ble.n	8018ece <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xea>
 8018e72:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018e76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e7a:	441d      	add	r5, r3
 8018e7c:	f11c 0c01 	adds.w	ip, ip, #1
 8018e80:	d42a      	bmi.n	8018ed8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018e82:	45e6      	cmp	lr, ip
 8018e84:	dd28      	ble.n	8018ed8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018e86:	b33a      	cbz	r2, 8018ed8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf4>
 8018e88:	44c6      	add	lr, r8
 8018e8a:	f89e c001 	ldrb.w	ip, [lr, #1]
 8018e8e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018e92:	4463      	add	r3, ip
 8018e94:	ea6f 0c07 	mvn.w	ip, r7
 8018e98:	2a0f      	cmp	r2, #15
 8018e9a:	f896 a000 	ldrb.w	sl, [r6]
 8018e9e:	fa5f fc8c 	uxtb.w	ip, ip
 8018ea2:	f890 b000 	ldrb.w	fp, [r0]
 8018ea6:	f895 9000 	ldrb.w	r9, [r5]
 8018eaa:	7819      	ldrb	r1, [r3, #0]
 8018eac:	d801      	bhi.n	8018eb2 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xce>
 8018eae:	2c0f      	cmp	r4, #15
 8018eb0:	d914      	bls.n	8018edc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xf8>
 8018eb2:	4b40      	ldr	r3, [pc, #256]	; (8018fb4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d0>)
 8018eb4:	f240 115b 	movw	r1, #347	; 0x15b
 8018eb8:	4a3f      	ldr	r2, [pc, #252]	; (8018fb8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d4>)
 8018eba:	4840      	ldr	r0, [pc, #256]	; (8018fbc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1d8>)
 8018ebc:	f007 f96a 	bl	8020194 <__assert_func>
 8018ec0:	ae05      	add	r6, sp, #20
 8018ec2:	e7c0      	b.n	8018e46 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x62>
 8018ec4:	a805      	add	r0, sp, #20
 8018ec6:	4606      	mov	r6, r0
 8018ec8:	e7c9      	b.n	8018e5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8018eca:	a805      	add	r0, sp, #20
 8018ecc:	e7c7      	b.n	8018e5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x7a>
 8018ece:	ad05      	add	r5, sp, #20
 8018ed0:	e7d4      	b.n	8018e7c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x98>
 8018ed2:	ab05      	add	r3, sp, #20
 8018ed4:	461d      	mov	r5, r3
 8018ed6:	e7dd      	b.n	8018e94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8018ed8:	ab05      	add	r3, sp, #20
 8018eda:	e7db      	b.n	8018e94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xb0>
 8018edc:	b292      	uxth	r2, r2
 8018ede:	b2a4      	uxth	r4, r4
 8018ee0:	fa1f fc8c 	uxth.w	ip, ip
 8018ee4:	fb02 f804 	mul.w	r8, r2, r4
 8018ee8:	0112      	lsls	r2, r2, #4
 8018eea:	b2bf      	uxth	r7, r7
 8018eec:	ebc8 1404 	rsb	r4, r8, r4, lsl #4
 8018ef0:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 8018ef4:	eba2 0208 	sub.w	r2, r2, r8
 8018ef8:	b2a4      	uxth	r4, r4
 8018efa:	b292      	uxth	r2, r2
 8018efc:	ebae 0e04 	sub.w	lr, lr, r4
 8018f00:	fb02 fb0b 	mul.w	fp, r2, fp
 8018f04:	fa1f fe8e 	uxth.w	lr, lr
 8018f08:	fb0e ba0a 	mla	sl, lr, sl, fp
 8018f0c:	fb04 aa09 	mla	sl, r4, r9, sl
 8018f10:	fb08 aa01 	mla	sl, r8, r1, sl
 8018f14:	9903      	ldr	r1, [sp, #12]
 8018f16:	fb11 f90c 	smulbb	r9, r1, ip
 8018f1a:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8018f1e:	9900      	ldr	r1, [sp, #0]
 8018f20:	fb0a 9a07 	mla	sl, sl, r7, r9
 8018f24:	fa1f fa8a 	uxth.w	sl, sl
 8018f28:	f10a 0901 	add.w	r9, sl, #1
 8018f2c:	eb09 2a1a 	add.w	sl, r9, sl, lsr #8
 8018f30:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018f34:	f881 a000 	strb.w	sl, [r1]
 8018f38:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018f3c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8018f40:	fb02 fa0a 	mul.w	sl, r2, sl
 8018f44:	9902      	ldr	r1, [sp, #8]
 8018f46:	fb0e aa09 	mla	sl, lr, r9, sl
 8018f4a:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018f4e:	fb04 aa09 	mla	sl, r4, r9, sl
 8018f52:	f893 9001 	ldrb.w	r9, [r3, #1]
 8018f56:	fb08 a909 	mla	r9, r8, r9, sl
 8018f5a:	fb11 fa0c 	smulbb	sl, r1, ip
 8018f5e:	9900      	ldr	r1, [sp, #0]
 8018f60:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018f64:	fb09 a907 	mla	r9, r9, r7, sl
 8018f68:	fa1f f989 	uxth.w	r9, r9
 8018f6c:	f109 0a01 	add.w	sl, r9, #1
 8018f70:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8018f74:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f78:	f881 9001 	strb.w	r9, [r1, #1]
 8018f7c:	7880      	ldrb	r0, [r0, #2]
 8018f7e:	78b6      	ldrb	r6, [r6, #2]
 8018f80:	4342      	muls	r2, r0
 8018f82:	78a8      	ldrb	r0, [r5, #2]
 8018f84:	789b      	ldrb	r3, [r3, #2]
 8018f86:	fb0e 2206 	mla	r2, lr, r6, r2
 8018f8a:	fb04 2400 	mla	r4, r4, r0, r2
 8018f8e:	fb08 4803 	mla	r8, r8, r3, r4
 8018f92:	9b01      	ldr	r3, [sp, #4]
 8018f94:	fb13 fc0c 	smulbb	ip, r3, ip
 8018f98:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018f9c:	fb08 c707 	mla	r7, r8, r7, ip
 8018fa0:	b2bf      	uxth	r7, r7
 8018fa2:	f107 0c01 	add.w	ip, r7, #1
 8018fa6:	eb0c 2717 	add.w	r7, ip, r7, lsr #8
 8018faa:	123f      	asrs	r7, r7, #8
 8018fac:	708f      	strb	r7, [r1, #2]
 8018fae:	b007      	add	sp, #28
 8018fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fb4:	080261a0 	.word	0x080261a0
 8018fb8:	080265b6 	.word	0x080265b6
 8018fbc:	0802616d 	.word	0x0802616d

08018fc0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fc4:	ed2d 8b08 	vpush	{d8-d11}
 8018fc8:	b093      	sub	sp, #76	; 0x4c
 8018fca:	eeb0 aa40 	vmov.f32	s20, s0
 8018fce:	eef0 9a60 	vmov.f32	s19, s1
 8018fd2:	9210      	str	r2, [sp, #64]	; 0x40
 8018fd4:	eeb0 9a41 	vmov.f32	s18, s2
 8018fd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018fda:	eeb0 8a62 	vmov.f32	s16, s5
 8018fde:	9309      	str	r3, [sp, #36]	; 0x24
 8018fe0:	eef0 8a43 	vmov.f32	s17, s6
 8018fe4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8018fe8:	eef0 ba44 	vmov.f32	s23, s8
 8018fec:	9011      	str	r0, [sp, #68]	; 0x44
 8018fee:	eeb0 ba64 	vmov.f32	s22, s9
 8018ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8018ff4:	eef0 aa45 	vmov.f32	s21, s10
 8018ff8:	6850      	ldr	r0, [r2, #4]
 8018ffa:	910d      	str	r1, [sp, #52]	; 0x34
 8018ffc:	6812      	ldr	r2, [r2, #0]
 8018ffe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019002:	fb00 1303 	mla	r3, r0, r3, r1
 8019006:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801900a:	18d3      	adds	r3, r2, r3
 801900c:	930a      	str	r3, [sp, #40]	; 0x28
 801900e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	930c      	str	r3, [sp, #48]	; 0x30
 8019014:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019016:	685c      	ldr	r4, [r3, #4]
 8019018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801901a:	3404      	adds	r4, #4
 801901c:	43db      	mvns	r3, r3
 801901e:	b2db      	uxtb	r3, r3
 8019020:	930b      	str	r3, [sp, #44]	; 0x2c
 8019022:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019024:	2b00      	cmp	r3, #0
 8019026:	dc03      	bgt.n	8019030 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019028:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801902a:	2b00      	cmp	r3, #0
 801902c:	f340 8250 	ble.w	80194d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8019030:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019032:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019036:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801903a:	1e48      	subs	r0, r1, #1
 801903c:	1e55      	subs	r5, r2, #1
 801903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019040:	2b00      	cmp	r3, #0
 8019042:	f340 80ee 	ble.w	8019222 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8019046:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8019048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801904a:	1436      	asrs	r6, r6, #16
 801904c:	ea4f 4323 	mov.w	r3, r3, asr #16
 8019050:	d406      	bmi.n	8019060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019052:	4286      	cmp	r6, r0
 8019054:	da04      	bge.n	8019060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019056:	2b00      	cmp	r3, #0
 8019058:	db02      	blt.n	8019060 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801905a:	42ab      	cmp	r3, r5
 801905c:	f2c0 80e2 	blt.w	8019224 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019060:	3601      	adds	r6, #1
 8019062:	f100 80cf 	bmi.w	8019204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019066:	42b1      	cmp	r1, r6
 8019068:	f2c0 80cc 	blt.w	8019204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801906c:	3301      	adds	r3, #1
 801906e:	f100 80c9 	bmi.w	8019204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019072:	429a      	cmp	r2, r3
 8019074:	f2c0 80c6 	blt.w	8019204 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019078:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 801907c:	f1bb 0f00 	cmp.w	fp, #0
 8019080:	f340 80f1 	ble.w	8019266 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019084:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019086:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019088:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801908a:	141d      	asrs	r5, r3, #16
 801908c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801908e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019092:	68c7      	ldr	r7, [r0, #12]
 8019094:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8019096:	1418      	asrs	r0, r3, #16
 8019098:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801909c:	6892      	ldr	r2, [r2, #8]
 801909e:	f100 8137 	bmi.w	8019310 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190a2:	f102 3cff 	add.w	ip, r2, #4294967295
 80190a6:	4560      	cmp	r0, ip
 80190a8:	f280 8132 	bge.w	8019310 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190ac:	2d00      	cmp	r5, #0
 80190ae:	f2c0 812f 	blt.w	8019310 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190b2:	f107 3cff 	add.w	ip, r7, #4294967295
 80190b6:	4565      	cmp	r5, ip
 80190b8:	f280 812a 	bge.w	8019310 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80190bc:	b212      	sxth	r2, r2
 80190be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80190c0:	fb05 0002 	mla	r0, r5, r2, r0
 80190c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80190c6:	f817 c000 	ldrb.w	ip, [r7, r0]
 80190ca:	4405      	add	r5, r0
 80190cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80190d0:	eb04 0e0c 	add.w	lr, r4, ip
 80190d4:	f1b8 0f00 	cmp.w	r8, #0
 80190d8:	f000 810c 	beq.w	80192f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80190dc:	786f      	ldrb	r7, [r5, #1]
 80190de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80190e2:	4427      	add	r7, r4
 80190e4:	2900      	cmp	r1, #0
 80190e6:	f000 810d 	beq.w	8019304 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80190ea:	18a8      	adds	r0, r5, r2
 80190ec:	5caa      	ldrb	r2, [r5, r2]
 80190ee:	7840      	ldrb	r0, [r0, #1]
 80190f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80190f4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80190f8:	4422      	add	r2, r4
 80190fa:	4420      	add	r0, r4
 80190fc:	fa1f f388 	uxth.w	r3, r8
 8019100:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8019104:	b289      	uxth	r1, r1
 8019106:	f897 c000 	ldrb.w	ip, [r7]
 801910a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801910e:	fb03 f901 	mul.w	r9, r3, r1
 8019112:	011b      	lsls	r3, r3, #4
 8019114:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019118:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801911c:	eba3 0309 	sub.w	r3, r3, r9
 8019120:	b289      	uxth	r1, r1
 8019122:	b29b      	uxth	r3, r3
 8019124:	eba8 0801 	sub.w	r8, r8, r1
 8019128:	fb03 fc0c 	mul.w	ip, r3, ip
 801912c:	fa1f f888 	uxth.w	r8, r8
 8019130:	930f      	str	r3, [sp, #60]	; 0x3c
 8019132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019134:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019138:	f892 a000 	ldrb.w	sl, [r2]
 801913c:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019140:	f890 a000 	ldrb.w	sl, [r0]
 8019144:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019148:	f896 a000 	ldrb.w	sl, [r6]
 801914c:	fb1a fa03 	smulbb	sl, sl, r3
 8019150:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019156:	fb0c ac05 	mla	ip, ip, r5, sl
 801915a:	fa1f fc8c 	uxth.w	ip, ip
 801915e:	f10c 0a01 	add.w	sl, ip, #1
 8019162:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019166:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801916a:	f886 a000 	strb.w	sl, [r6]
 801916e:	f897 c001 	ldrb.w	ip, [r7, #1]
 8019172:	f89e a001 	ldrb.w	sl, [lr, #1]
 8019176:	fb03 fc0c 	mul.w	ip, r3, ip
 801917a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801917c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8019180:	f892 a001 	ldrb.w	sl, [r2, #1]
 8019184:	fb01 cc0a 	mla	ip, r1, sl, ip
 8019188:	f890 a001 	ldrb.w	sl, [r0, #1]
 801918c:	fb09 cc0a 	mla	ip, r9, sl, ip
 8019190:	f896 a001 	ldrb.w	sl, [r6, #1]
 8019194:	fb1a fa03 	smulbb	sl, sl, r3
 8019198:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801919c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801919e:	fb0c ac05 	mla	ip, ip, r5, sl
 80191a2:	fa1f fc8c 	uxth.w	ip, ip
 80191a6:	f10c 0a01 	add.w	sl, ip, #1
 80191aa:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80191ae:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80191b2:	f886 c001 	strb.w	ip, [r6, #1]
 80191b6:	78bf      	ldrb	r7, [r7, #2]
 80191b8:	f89e c002 	ldrb.w	ip, [lr, #2]
 80191bc:	437b      	muls	r3, r7
 80191be:	fb08 330c 	mla	r3, r8, ip, r3
 80191c2:	f892 c002 	ldrb.w	ip, [r2, #2]
 80191c6:	7882      	ldrb	r2, [r0, #2]
 80191c8:	fb01 310c 	mla	r1, r1, ip, r3
 80191cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80191ce:	fb09 1902 	mla	r9, r9, r2, r1
 80191d2:	78b1      	ldrb	r1, [r6, #2]
 80191d4:	fb11 f103 	smulbb	r1, r1, r3
 80191d8:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80191dc:	fb09 1505 	mla	r5, r9, r5, r1
 80191e0:	b2ad      	uxth	r5, r5
 80191e2:	1c6b      	adds	r3, r5, #1
 80191e4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80191e8:	122d      	asrs	r5, r5, #8
 80191ea:	70b5      	strb	r5, [r6, #2]
 80191ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80191ee:	3603      	adds	r6, #3
 80191f0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80191f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80191f6:	4413      	add	r3, r2
 80191f8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80191fa:	9325      	str	r3, [sp, #148]	; 0x94
 80191fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80191fe:	4413      	add	r3, r2
 8019200:	9326      	str	r3, [sp, #152]	; 0x98
 8019202:	e73b      	b.n	801907c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 8019204:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019206:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8019208:	4433      	add	r3, r6
 801920a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 801920c:	9325      	str	r3, [sp, #148]	; 0x94
 801920e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019210:	4433      	add	r3, r6
 8019212:	9326      	str	r3, [sp, #152]	; 0x98
 8019214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019216:	3b01      	subs	r3, #1
 8019218:	9309      	str	r3, [sp, #36]	; 0x24
 801921a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801921c:	3303      	adds	r3, #3
 801921e:	930a      	str	r3, [sp, #40]	; 0x28
 8019220:	e70d      	b.n	801903e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019222:	d028      	beq.n	8019276 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019226:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019228:	3b01      	subs	r3, #1
 801922a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801922c:	fb00 5003 	mla	r0, r0, r3, r5
 8019230:	1400      	asrs	r0, r0, #16
 8019232:	f53f af21 	bmi.w	8019078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019236:	3901      	subs	r1, #1
 8019238:	4288      	cmp	r0, r1
 801923a:	f6bf af1d 	bge.w	8019078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801923e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019240:	9826      	ldr	r0, [sp, #152]	; 0x98
 8019242:	fb01 0303 	mla	r3, r1, r3, r0
 8019246:	141b      	asrs	r3, r3, #16
 8019248:	f53f af16 	bmi.w	8019078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801924c:	3a01      	subs	r2, #1
 801924e:	4293      	cmp	r3, r2
 8019250:	f6bf af12 	bge.w	8019078 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8019254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019256:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801925a:	1cdf      	adds	r7, r3, #3
 801925c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8019260:	f1b9 0f00 	cmp.w	r9, #0
 8019264:	dc73      	bgt.n	801934e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8019266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801926a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801926e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019272:	441a      	add	r2, r3
 8019274:	920a      	str	r2, [sp, #40]	; 0x28
 8019276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019278:	2b00      	cmp	r3, #0
 801927a:	f340 8129 	ble.w	80194d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 801927e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019282:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019284:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8019288:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801928c:	eef0 6a48 	vmov.f32	s13, s16
 8019290:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8019294:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8019298:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801929c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80192a0:	eef0 6a68 	vmov.f32	s13, s17
 80192a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80192a8:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80192ac:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80192b0:	ee69 7a27 	vmul.f32	s15, s18, s15
 80192b4:	ee37 8a48 	vsub.f32	s16, s14, s16
 80192b8:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80192bc:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80192c0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80192c4:	ee18 2a10 	vmov	r2, s16
 80192c8:	eeb0 8a47 	vmov.f32	s16, s14
 80192cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80192d0:	ee18 2a90 	vmov	r2, s17
 80192d4:	9327      	str	r3, [sp, #156]	; 0x9c
 80192d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80192d8:	eef0 8a67 	vmov.f32	s17, s15
 80192dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80192e0:	9328      	str	r3, [sp, #160]	; 0xa0
 80192e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192e6:	3b01      	subs	r3, #1
 80192e8:	930d      	str	r3, [sp, #52]	; 0x34
 80192ea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80192ec:	bf08      	it	eq
 80192ee:	4613      	moveq	r3, r2
 80192f0:	9309      	str	r3, [sp, #36]	; 0x24
 80192f2:	e696      	b.n	8019022 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80192f4:	b149      	cbz	r1, 801930a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80192f6:	5caa      	ldrb	r2, [r5, r2]
 80192f8:	4670      	mov	r0, lr
 80192fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192fe:	4422      	add	r2, r4
 8019300:	4677      	mov	r7, lr
 8019302:	e6fb      	b.n	80190fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8019304:	4670      	mov	r0, lr
 8019306:	4672      	mov	r2, lr
 8019308:	e6f8      	b.n	80190fc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 801930a:	4670      	mov	r0, lr
 801930c:	4672      	mov	r2, lr
 801930e:	e7f7      	b.n	8019300 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8019310:	f110 0c01 	adds.w	ip, r0, #1
 8019314:	f53f af6a 	bmi.w	80191ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019318:	4562      	cmp	r2, ip
 801931a:	f6ff af67 	blt.w	80191ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801931e:	f115 0c01 	adds.w	ip, r5, #1
 8019322:	f53f af63 	bmi.w	80191ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8019326:	4567      	cmp	r7, ip
 8019328:	f6ff af60 	blt.w	80191ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801932c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801932e:	b23f      	sxth	r7, r7
 8019330:	b212      	sxth	r2, r2
 8019332:	9002      	str	r0, [sp, #8]
 8019334:	9701      	str	r7, [sp, #4]
 8019336:	9200      	str	r2, [sp, #0]
 8019338:	9811      	ldr	r0, [sp, #68]	; 0x44
 801933a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801933c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8019340:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8019344:	4623      	mov	r3, r4
 8019346:	4631      	mov	r1, r6
 8019348:	f7ff fd4c 	bl	8018de4 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801934c:	e74e      	b.n	80191ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 801934e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8019350:	9826      	ldr	r0, [sp, #152]	; 0x98
 8019352:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019356:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8019358:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801935a:	1400      	asrs	r0, r0, #16
 801935c:	142d      	asrs	r5, r5, #16
 801935e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019360:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019364:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8019368:	fb02 5000 	mla	r0, r2, r0, r5
 801936c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801936e:	f815 e000 	ldrb.w	lr, [r5, r0]
 8019372:	eb05 0c00 	add.w	ip, r5, r0
 8019376:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801937a:	eb04 060e 	add.w	r6, r4, lr
 801937e:	2b00      	cmp	r3, #0
 8019380:	f000 8097 	beq.w	80194b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 8019384:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8019388:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801938c:	4425      	add	r5, r4
 801938e:	2900      	cmp	r1, #0
 8019390:	f000 8098 	beq.w	80194c4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8019394:	eb0c 0002 	add.w	r0, ip, r2
 8019398:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801939c:	7840      	ldrb	r0, [r0, #1]
 801939e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80193a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80193a6:	4422      	add	r2, r4
 80193a8:	4420      	add	r0, r4
 80193aa:	b29b      	uxth	r3, r3
 80193ac:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80193b0:	b289      	uxth	r1, r1
 80193b2:	f895 e000 	ldrb.w	lr, [r5]
 80193b6:	3703      	adds	r7, #3
 80193b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80193bc:	fb03 f801 	mul.w	r8, r3, r1
 80193c0:	011b      	lsls	r3, r3, #4
 80193c2:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 80193c6:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80193ca:	eba3 0308 	sub.w	r3, r3, r8
 80193ce:	b289      	uxth	r1, r1
 80193d0:	b29b      	uxth	r3, r3
 80193d2:	ebac 0c01 	sub.w	ip, ip, r1
 80193d6:	fb03 fe0e 	mul.w	lr, r3, lr
 80193da:	fa1f fc8c 	uxth.w	ip, ip
 80193de:	930f      	str	r3, [sp, #60]	; 0x3c
 80193e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80193e2:	fb0c ee0b 	mla	lr, ip, fp, lr
 80193e6:	f892 b000 	ldrb.w	fp, [r2]
 80193ea:	fb01 ee0b 	mla	lr, r1, fp, lr
 80193ee:	f890 b000 	ldrb.w	fp, [r0]
 80193f2:	fb08 ee0b 	mla	lr, r8, fp, lr
 80193f6:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80193fa:	fb1b fb03 	smulbb	fp, fp, r3
 80193fe:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8019402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019404:	fb0e be0a 	mla	lr, lr, sl, fp
 8019408:	fa1f fe8e 	uxth.w	lr, lr
 801940c:	f10e 0b01 	add.w	fp, lr, #1
 8019410:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8019414:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019418:	f807 ec06 	strb.w	lr, [r7, #-6]
 801941c:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019420:	f896 b001 	ldrb.w	fp, [r6, #1]
 8019424:	fb03 fe0e 	mul.w	lr, r3, lr
 8019428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801942a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801942e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019432:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019436:	f890 b001 	ldrb.w	fp, [r0, #1]
 801943a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801943e:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8019442:	fb1b fb03 	smulbb	fp, fp, r3
 8019446:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801944a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801944c:	fb0e be0a 	mla	lr, lr, sl, fp
 8019450:	fa1f fe8e 	uxth.w	lr, lr
 8019454:	f10e 0b01 	add.w	fp, lr, #1
 8019458:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801945c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019460:	f807 ec05 	strb.w	lr, [r7, #-5]
 8019464:	78ad      	ldrb	r5, [r5, #2]
 8019466:	78b6      	ldrb	r6, [r6, #2]
 8019468:	436b      	muls	r3, r5
 801946a:	7895      	ldrb	r5, [r2, #2]
 801946c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801946e:	fb0c 3306 	mla	r3, ip, r6, r3
 8019472:	fb01 3305 	mla	r3, r1, r5, r3
 8019476:	7885      	ldrb	r5, [r0, #2]
 8019478:	fb08 3805 	mla	r8, r8, r5, r3
 801947c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8019480:	fb13 f302 	smulbb	r3, r3, r2
 8019484:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8019488:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801948a:	fb08 380a 	mla	r8, r8, sl, r3
 801948e:	fa1f f888 	uxth.w	r8, r8
 8019492:	f108 0301 	add.w	r3, r8, #1
 8019496:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801949a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801949c:	4413      	add	r3, r2
 801949e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80194a0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80194a4:	9325      	str	r3, [sp, #148]	; 0x94
 80194a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80194a8:	f807 8c04 	strb.w	r8, [r7, #-4]
 80194ac:	4413      	add	r3, r2
 80194ae:	9326      	str	r3, [sp, #152]	; 0x98
 80194b0:	e6d6      	b.n	8019260 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80194b2:	b151      	cbz	r1, 80194ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80194b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80194b8:	4630      	mov	r0, r6
 80194ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194be:	4422      	add	r2, r4
 80194c0:	4635      	mov	r5, r6
 80194c2:	e772      	b.n	80193aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80194c4:	4630      	mov	r0, r6
 80194c6:	4632      	mov	r2, r6
 80194c8:	e76f      	b.n	80193aa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80194ca:	4630      	mov	r0, r6
 80194cc:	4632      	mov	r2, r6
 80194ce:	e7f7      	b.n	80194c0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80194d0:	b013      	add	sp, #76	; 0x4c
 80194d2:	ecbd 8b08 	vpop	{d8-d11}
 80194d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080194dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 80194dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e0:	784d      	ldrb	r5, [r1, #1]
 80194e2:	f891 9002 	ldrb.w	r9, [r1, #2]
 80194e6:	022d      	lsls	r5, r5, #8
 80194e8:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80194ec:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80194f0:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80194f4:	f891 9000 	ldrb.w	r9, [r1]
 80194f8:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80194fc:	ea45 0509 	orr.w	r5, r5, r9
 8019500:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8019504:	e9dd 460e 	ldrd	r4, r6, [sp, #56]	; 0x38
 8019508:	9501      	str	r5, [sp, #4]
 801950a:	fb06 470c 	mla	r7, r6, ip, r4
 801950e:	2e00      	cmp	r6, #0
 8019510:	eb02 0e07 	add.w	lr, r2, r7
 8019514:	db46      	blt.n	80195a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 8019516:	45b0      	cmp	r8, r6
 8019518:	dd44      	ble.n	80195a4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc8>
 801951a:	2c00      	cmp	r4, #0
 801951c:	db40      	blt.n	80195a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 801951e:	45a4      	cmp	ip, r4
 8019520:	dd3e      	ble.n	80195a0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xc4>
 8019522:	5dd7      	ldrb	r7, [r2, r7]
 8019524:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019528:	441f      	add	r7, r3
 801952a:	1c62      	adds	r2, r4, #1
 801952c:	d43d      	bmi.n	80195aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 801952e:	4594      	cmp	ip, r2
 8019530:	dd3b      	ble.n	80195aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8019532:	f1ba 0f00 	cmp.w	sl, #0
 8019536:	d038      	beq.n	80195aa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xce>
 8019538:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801953c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019540:	441d      	add	r5, r3
 8019542:	3601      	adds	r6, #1
 8019544:	d435      	bmi.n	80195b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 8019546:	45b0      	cmp	r8, r6
 8019548:	dd33      	ble.n	80195b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801954a:	b390      	cbz	r0, 80195b2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd6>
 801954c:	2c00      	cmp	r4, #0
 801954e:	db2e      	blt.n	80195ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8019550:	45a4      	cmp	ip, r4
 8019552:	dd2c      	ble.n	80195ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xd2>
 8019554:	f81e 600c 	ldrb.w	r6, [lr, ip]
 8019558:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801955c:	441e      	add	r6, r3
 801955e:	1c62      	adds	r2, r4, #1
 8019560:	d42a      	bmi.n	80195b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8019562:	4594      	cmp	ip, r2
 8019564:	dd28      	ble.n	80195b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 8019566:	f1ba 0f00 	cmp.w	sl, #0
 801956a:	d025      	beq.n	80195b8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xdc>
 801956c:	44f4      	add	ip, lr
 801956e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019572:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019576:	4413      	add	r3, r2
 8019578:	f1ba 0f0f 	cmp.w	sl, #15
 801957c:	f897 8000 	ldrb.w	r8, [r7]
 8019580:	f895 9000 	ldrb.w	r9, [r5]
 8019584:	f896 e000 	ldrb.w	lr, [r6]
 8019588:	f893 c000 	ldrb.w	ip, [r3]
 801958c:	d801      	bhi.n	8019592 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xb6>
 801958e:	280f      	cmp	r0, #15
 8019590:	d914      	bls.n	80195bc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xe0>
 8019592:	4b29      	ldr	r3, [pc, #164]	; (8019638 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x15c>)
 8019594:	f240 115b 	movw	r1, #347	; 0x15b
 8019598:	4a28      	ldr	r2, [pc, #160]	; (801963c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x160>)
 801959a:	4829      	ldr	r0, [pc, #164]	; (8019640 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x164>)
 801959c:	f006 fdfa 	bl	8020194 <__assert_func>
 80195a0:	af01      	add	r7, sp, #4
 80195a2:	e7c2      	b.n	801952a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x4e>
 80195a4:	ad01      	add	r5, sp, #4
 80195a6:	462f      	mov	r7, r5
 80195a8:	e7cb      	b.n	8019542 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80195aa:	ad01      	add	r5, sp, #4
 80195ac:	e7c9      	b.n	8019542 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x66>
 80195ae:	ae01      	add	r6, sp, #4
 80195b0:	e7d5      	b.n	801955e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x82>
 80195b2:	ab01      	add	r3, sp, #4
 80195b4:	461e      	mov	r6, r3
 80195b6:	e7df      	b.n	8019578 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80195b8:	ab01      	add	r3, sp, #4
 80195ba:	e7dd      	b.n	8019578 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x9c>
 80195bc:	fa1f f48a 	uxth.w	r4, sl
 80195c0:	b280      	uxth	r0, r0
 80195c2:	fb04 fa00 	mul.w	sl, r4, r0
 80195c6:	0124      	lsls	r4, r4, #4
 80195c8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80195cc:	f5c4 7b80 	rsb	fp, r4, #256	; 0x100
 80195d0:	b282      	uxth	r2, r0
 80195d2:	eba4 000a 	sub.w	r0, r4, sl
 80195d6:	ebab 0b02 	sub.w	fp, fp, r2
 80195da:	b280      	uxth	r0, r0
 80195dc:	fa1f fb8b 	uxth.w	fp, fp
 80195e0:	fb00 f909 	mul.w	r9, r0, r9
 80195e4:	fb0b 9808 	mla	r8, fp, r8, r9
 80195e8:	fb02 8e0e 	mla	lr, r2, lr, r8
 80195ec:	fb0a ec0c 	mla	ip, sl, ip, lr
 80195f0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80195f4:	f881 c000 	strb.w	ip, [r1]
 80195f8:	786c      	ldrb	r4, [r5, #1]
 80195fa:	f897 c001 	ldrb.w	ip, [r7, #1]
 80195fe:	4344      	muls	r4, r0
 8019600:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8019604:	7874      	ldrb	r4, [r6, #1]
 8019606:	fb02 cc04 	mla	ip, r2, r4, ip
 801960a:	785c      	ldrb	r4, [r3, #1]
 801960c:	fb0a c404 	mla	r4, sl, r4, ip
 8019610:	1224      	asrs	r4, r4, #8
 8019612:	704c      	strb	r4, [r1, #1]
 8019614:	78ad      	ldrb	r5, [r5, #2]
 8019616:	78bc      	ldrb	r4, [r7, #2]
 8019618:	4368      	muls	r0, r5
 801961a:	fb0b 0b04 	mla	fp, fp, r4, r0
 801961e:	78b0      	ldrb	r0, [r6, #2]
 8019620:	fb02 b000 	mla	r0, r2, r0, fp
 8019624:	789a      	ldrb	r2, [r3, #2]
 8019626:	fb0a 0a02 	mla	sl, sl, r2, r0
 801962a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801962e:	f881 a002 	strb.w	sl, [r1, #2]
 8019632:	b003      	add	sp, #12
 8019634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019638:	080261a0 	.word	0x080261a0
 801963c:	080265b6 	.word	0x080265b6
 8019640:	0802616d 	.word	0x0802616d

08019644 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019648:	ed2d 8b0a 	vpush	{d8-d12}
 801964c:	b08d      	sub	sp, #52	; 0x34
 801964e:	eeb0 aa40 	vmov.f32	s20, s0
 8019652:	eef0 9a60 	vmov.f32	s19, s1
 8019656:	900b      	str	r0, [sp, #44]	; 0x2c
 8019658:	eeb0 9a41 	vmov.f32	s18, s2
 801965c:	9306      	str	r3, [sp, #24]
 801965e:	eeb0 8a62 	vmov.f32	s16, s5
 8019662:	eef0 8a43 	vmov.f32	s17, s6
 8019666:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8019668:	eeb0 ca44 	vmov.f32	s24, s8
 801966c:	eef0 ba64 	vmov.f32	s23, s9
 8019670:	eeb0 ba45 	vmov.f32	s22, s10
 8019674:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8019678:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 801967c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801967e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8019682:	6850      	ldr	r0, [r2, #4]
 8019684:	6812      	ldr	r2, [r2, #0]
 8019686:	fb00 1303 	mla	r3, r0, r3, r1
 801968a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801968e:	18d3      	adds	r3, r2, r3
 8019690:	9307      	str	r3, [sp, #28]
 8019692:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019694:	681b      	ldr	r3, [r3, #0]
 8019696:	9308      	str	r3, [sp, #32]
 8019698:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801969a:	685d      	ldr	r5, [r3, #4]
 801969c:	3504      	adds	r5, #4
 801969e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	dc03      	bgt.n	80196ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80196a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	f340 81e6 	ble.w	8019a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80196ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80196ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80196b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80196b6:	1e48      	subs	r0, r1, #1
 80196b8:	1e56      	subs	r6, r2, #1
 80196ba:	9b06      	ldr	r3, [sp, #24]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	f340 80bd 	ble.w	801983c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80196c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80196c4:	1427      	asrs	r7, r4, #16
 80196c6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80196ca:	d406      	bmi.n	80196da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196cc:	4287      	cmp	r7, r0
 80196ce:	da04      	bge.n	80196da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	db02      	blt.n	80196da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80196d4:	42b3      	cmp	r3, r6
 80196d6:	f2c0 80b2 	blt.w	801983e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80196da:	3701      	adds	r7, #1
 80196dc:	f100 80a1 	bmi.w	8019822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80196e0:	42b9      	cmp	r1, r7
 80196e2:	f2c0 809e 	blt.w	8019822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80196e6:	3301      	adds	r3, #1
 80196e8:	f100 809b 	bmi.w	8019822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80196ec:	429a      	cmp	r2, r3
 80196ee:	f2c0 8098 	blt.w	8019822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80196f2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80196f6:	f1bb 0f00 	cmp.w	fp, #0
 80196fa:	f340 80bf 	ble.w	801987c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80196fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019700:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8019702:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019704:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019708:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801970c:	1420      	asrs	r0, r4, #16
 801970e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019710:	ea4f 4723 	mov.w	r7, r3, asr #16
 8019714:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019718:	6892      	ldr	r2, [r2, #8]
 801971a:	f100 8103 	bmi.w	8019924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801971e:	f102 3eff 	add.w	lr, r2, #4294967295
 8019722:	4570      	cmp	r0, lr
 8019724:	f280 80fe 	bge.w	8019924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019728:	2f00      	cmp	r7, #0
 801972a:	f2c0 80fb 	blt.w	8019924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801972e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8019732:	4577      	cmp	r7, lr
 8019734:	f280 80f6 	bge.w	8019924 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8019738:	b212      	sxth	r2, r2
 801973a:	fb07 0002 	mla	r0, r7, r2, r0
 801973e:	9f08      	ldr	r7, [sp, #32]
 8019740:	f817 8000 	ldrb.w	r8, [r7, r0]
 8019744:	eb07 0e00 	add.w	lr, r7, r0
 8019748:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801974c:	eb05 0c08 	add.w	ip, r5, r8
 8019750:	2b00      	cmp	r3, #0
 8019752:	f000 80d8 	beq.w	8019906 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8019756:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801975a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801975e:	442f      	add	r7, r5
 8019760:	2900      	cmp	r1, #0
 8019762:	f000 80d9 	beq.w	8019918 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8019766:	eb0e 0002 	add.w	r0, lr, r2
 801976a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801976e:	7840      	ldrb	r0, [r0, #1]
 8019770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019774:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019778:	442a      	add	r2, r5
 801977a:	4428      	add	r0, r5
 801977c:	b29b      	uxth	r3, r3
 801977e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8019782:	b289      	uxth	r1, r1
 8019784:	f897 8000 	ldrb.w	r8, [r7]
 8019788:	fb03 f901 	mul.w	r9, r3, r1
 801978c:	011b      	lsls	r3, r3, #4
 801978e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019792:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8019796:	eba3 0309 	sub.w	r3, r3, r9
 801979a:	b289      	uxth	r1, r1
 801979c:	b29b      	uxth	r3, r3
 801979e:	ebae 0e01 	sub.w	lr, lr, r1
 80197a2:	fb03 f808 	mul.w	r8, r3, r8
 80197a6:	fa1f fe8e 	uxth.w	lr, lr
 80197aa:	fb0e 880a 	mla	r8, lr, sl, r8
 80197ae:	f892 a000 	ldrb.w	sl, [r2]
 80197b2:	fb01 880a 	mla	r8, r1, sl, r8
 80197b6:	f890 a000 	ldrb.w	sl, [r0]
 80197ba:	fb09 880a 	mla	r8, r9, sl, r8
 80197be:	ea4f 2828 	mov.w	r8, r8, asr #8
 80197c2:	f886 8000 	strb.w	r8, [r6]
 80197c6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80197ca:	f89c a001 	ldrb.w	sl, [ip, #1]
 80197ce:	fb03 f808 	mul.w	r8, r3, r8
 80197d2:	fb0e 880a 	mla	r8, lr, sl, r8
 80197d6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80197da:	fb01 880a 	mla	r8, r1, sl, r8
 80197de:	f890 a001 	ldrb.w	sl, [r0, #1]
 80197e2:	fb09 880a 	mla	r8, r9, sl, r8
 80197e6:	ea4f 2828 	mov.w	r8, r8, asr #8
 80197ea:	f886 8001 	strb.w	r8, [r6, #1]
 80197ee:	78bf      	ldrb	r7, [r7, #2]
 80197f0:	f89c c002 	ldrb.w	ip, [ip, #2]
 80197f4:	437b      	muls	r3, r7
 80197f6:	7892      	ldrb	r2, [r2, #2]
 80197f8:	fb0e 330c 	mla	r3, lr, ip, r3
 80197fc:	fb01 3102 	mla	r1, r1, r2, r3
 8019800:	7882      	ldrb	r2, [r0, #2]
 8019802:	fb09 1902 	mla	r9, r9, r2, r1
 8019806:	ea4f 2929 	mov.w	r9, r9, asr #8
 801980a:	f886 9002 	strb.w	r9, [r6, #2]
 801980e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019810:	3603      	adds	r6, #3
 8019812:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019814:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019818:	441c      	add	r4, r3
 801981a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801981c:	4413      	add	r3, r2
 801981e:	9322      	str	r3, [sp, #136]	; 0x88
 8019820:	e769      	b.n	80196f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8019822:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019824:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8019826:	441c      	add	r4, r3
 8019828:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801982a:	443b      	add	r3, r7
 801982c:	9322      	str	r3, [sp, #136]	; 0x88
 801982e:	9b06      	ldr	r3, [sp, #24]
 8019830:	3b01      	subs	r3, #1
 8019832:	9306      	str	r3, [sp, #24]
 8019834:	9b07      	ldr	r3, [sp, #28]
 8019836:	3303      	adds	r3, #3
 8019838:	9307      	str	r3, [sp, #28]
 801983a:	e73e      	b.n	80196ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801983c:	d026      	beq.n	801988c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801983e:	9b06      	ldr	r3, [sp, #24]
 8019840:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8019842:	3b01      	subs	r3, #1
 8019844:	fb00 4003 	mla	r0, r0, r3, r4
 8019848:	1400      	asrs	r0, r0, #16
 801984a:	f53f af52 	bmi.w	80196f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801984e:	3901      	subs	r1, #1
 8019850:	4288      	cmp	r0, r1
 8019852:	f6bf af4e 	bge.w	80196f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019856:	9924      	ldr	r1, [sp, #144]	; 0x90
 8019858:	9822      	ldr	r0, [sp, #136]	; 0x88
 801985a:	fb01 0303 	mla	r3, r1, r3, r0
 801985e:	141b      	asrs	r3, r3, #16
 8019860:	f53f af47 	bmi.w	80196f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8019864:	3a01      	subs	r2, #1
 8019866:	4293      	cmp	r3, r2
 8019868:	f6bf af43 	bge.w	80196f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801986c:	9b07      	ldr	r3, [sp, #28]
 801986e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019872:	f103 0803 	add.w	r8, r3, #3
 8019876:	f1ba 0f00 	cmp.w	sl, #0
 801987a:	dc71      	bgt.n	8019960 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801987c:	9b06      	ldr	r3, [sp, #24]
 801987e:	9a07      	ldr	r2, [sp, #28]
 8019880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019884:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019888:	441a      	add	r2, r3
 801988a:	9207      	str	r2, [sp, #28]
 801988c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801988e:	2b00      	cmp	r3, #0
 8019890:	f340 80f2 	ble.w	8019a78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8019894:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8019898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801989a:	ee79 9aab 	vadd.f32	s19, s19, s23
 801989e:	eef0 6a48 	vmov.f32	s13, s16
 80198a2:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 80198a6:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80198aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198ae:	ee16 4a90 	vmov	r4, s13
 80198b2:	eef0 6a68 	vmov.f32	s13, s17
 80198b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80198ba:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 80198be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80198c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80198c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80198ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80198ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80198d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80198d6:	ee18 2a10 	vmov	r2, s16
 80198da:	eeb0 8a47 	vmov.f32	s16, s14
 80198de:	fb92 f3f3 	sdiv	r3, r2, r3
 80198e2:	ee18 2a90 	vmov	r2, s17
 80198e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80198e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80198ea:	eef0 8a67 	vmov.f32	s17, s15
 80198ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80198f2:	9324      	str	r3, [sp, #144]	; 0x90
 80198f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198f8:	3b01      	subs	r3, #1
 80198fa:	9309      	str	r3, [sp, #36]	; 0x24
 80198fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80198fe:	bf08      	it	eq
 8019900:	4613      	moveq	r3, r2
 8019902:	9306      	str	r3, [sp, #24]
 8019904:	e6cb      	b.n	801969e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019906:	b151      	cbz	r1, 801991e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8019908:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801990c:	4660      	mov	r0, ip
 801990e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019912:	442a      	add	r2, r5
 8019914:	4667      	mov	r7, ip
 8019916:	e731      	b.n	801977c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8019918:	4660      	mov	r0, ip
 801991a:	4662      	mov	r2, ip
 801991c:	e72e      	b.n	801977c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801991e:	4660      	mov	r0, ip
 8019920:	4662      	mov	r2, ip
 8019922:	e7f7      	b.n	8019914 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8019924:	f110 0e01 	adds.w	lr, r0, #1
 8019928:	f53f af71 	bmi.w	801980e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801992c:	4572      	cmp	r2, lr
 801992e:	f6ff af6e 	blt.w	801980e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019932:	f117 0e01 	adds.w	lr, r7, #1
 8019936:	f53f af6a 	bmi.w	801980e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801993a:	45f4      	cmp	ip, lr
 801993c:	f6ff af67 	blt.w	801980e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019940:	b212      	sxth	r2, r2
 8019942:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019946:	fa0f f38c 	sxth.w	r3, ip
 801994a:	9200      	str	r2, [sp, #0]
 801994c:	4631      	mov	r1, r6
 801994e:	9a08      	ldr	r2, [sp, #32]
 8019950:	9301      	str	r3, [sp, #4]
 8019952:	462b      	mov	r3, r5
 8019954:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8019958:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801995a:	f7ff fdbf 	bl	80194dc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801995e:	e756      	b.n	801980e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8019960:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8019962:	1426      	asrs	r6, r4, #16
 8019964:	9822      	ldr	r0, [sp, #136]	; 0x88
 8019966:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801996a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801996e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8019970:	1400      	asrs	r0, r0, #16
 8019972:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019976:	fb02 6000 	mla	r0, r2, r0, r6
 801997a:	9e08      	ldr	r6, [sp, #32]
 801997c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8019980:	eb06 0c00 	add.w	ip, r6, r0
 8019984:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019988:	eb05 070e 	add.w	r7, r5, lr
 801998c:	2b00      	cmp	r3, #0
 801998e:	d064      	beq.n	8019a5a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x416>
 8019990:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8019994:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019998:	442e      	add	r6, r5
 801999a:	2900      	cmp	r1, #0
 801999c:	d066      	beq.n	8019a6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 801999e:	eb0c 0002 	add.w	r0, ip, r2
 80199a2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80199a6:	7840      	ldrb	r0, [r0, #1]
 80199a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80199ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80199b0:	442a      	add	r2, r5
 80199b2:	4428      	add	r0, r5
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80199ba:	b289      	uxth	r1, r1
 80199bc:	f896 e000 	ldrb.w	lr, [r6]
 80199c0:	f108 0803 	add.w	r8, r8, #3
 80199c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80199c8:	fb03 f901 	mul.w	r9, r3, r1
 80199cc:	011b      	lsls	r3, r3, #4
 80199ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80199d2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80199d6:	eba3 0309 	sub.w	r3, r3, r9
 80199da:	b289      	uxth	r1, r1
 80199dc:	b29b      	uxth	r3, r3
 80199de:	ebac 0c01 	sub.w	ip, ip, r1
 80199e2:	fb03 fe0e 	mul.w	lr, r3, lr
 80199e6:	fa1f fc8c 	uxth.w	ip, ip
 80199ea:	fb0c ee0b 	mla	lr, ip, fp, lr
 80199ee:	f892 b000 	ldrb.w	fp, [r2]
 80199f2:	fb01 ee0b 	mla	lr, r1, fp, lr
 80199f6:	f890 b000 	ldrb.w	fp, [r0]
 80199fa:	fb09 ee0b 	mla	lr, r9, fp, lr
 80199fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019a02:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019a06:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019a0a:	f897 b001 	ldrb.w	fp, [r7, #1]
 8019a0e:	fb03 fe0e 	mul.w	lr, r3, lr
 8019a12:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019a16:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019a1a:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019a1e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019a22:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019a26:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019a2a:	f808 ec05 	strb.w	lr, [r8, #-5]
 8019a2e:	78b6      	ldrb	r6, [r6, #2]
 8019a30:	78bf      	ldrb	r7, [r7, #2]
 8019a32:	4373      	muls	r3, r6
 8019a34:	7896      	ldrb	r6, [r2, #2]
 8019a36:	7882      	ldrb	r2, [r0, #2]
 8019a38:	fb0c 3307 	mla	r3, ip, r7, r3
 8019a3c:	fb01 3306 	mla	r3, r1, r6, r3
 8019a40:	fb09 3902 	mla	r9, r9, r2, r3
 8019a44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8019a46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8019a48:	441c      	add	r4, r3
 8019a4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8019a4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a50:	4413      	add	r3, r2
 8019a52:	f808 9c04 	strb.w	r9, [r8, #-4]
 8019a56:	9322      	str	r3, [sp, #136]	; 0x88
 8019a58:	e70d      	b.n	8019876 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019a5a:	b151      	cbz	r1, 8019a72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 8019a5c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a60:	4638      	mov	r0, r7
 8019a62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019a66:	442a      	add	r2, r5
 8019a68:	463e      	mov	r6, r7
 8019a6a:	e7a3      	b.n	80199b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019a6c:	4638      	mov	r0, r7
 8019a6e:	463a      	mov	r2, r7
 8019a70:	e7a0      	b.n	80199b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8019a72:	4638      	mov	r0, r7
 8019a74:	463a      	mov	r2, r7
 8019a76:	e7f7      	b.n	8019a68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8019a78:	b00d      	add	sp, #52	; 0x34
 8019a7a:	ecbd 8b0a 	vpop	{d8-d12}
 8019a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08019a84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8019a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a88:	e9dd 050e 	ldrd	r0, r5, [sp, #56]	; 0x38
 8019a8c:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019a90:	2d00      	cmp	r5, #0
 8019a92:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019a96:	fb05 040e 	mla	r4, r5, lr, r0
 8019a9a:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8019a9e:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8019aa2:	eb02 0804 	add.w	r8, r2, r4
 8019aa6:	db40      	blt.n	8019b2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019aa8:	45a9      	cmp	r9, r5
 8019aaa:	dd3e      	ble.n	8019b2a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa6>
 8019aac:	2800      	cmp	r0, #0
 8019aae:	db3a      	blt.n	8019b26 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019ab0:	4586      	cmp	lr, r0
 8019ab2:	dd38      	ble.n	8019b26 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xa2>
 8019ab4:	5d12      	ldrb	r2, [r2, r4]
 8019ab6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019aba:	1c42      	adds	r2, r0, #1
 8019abc:	d438      	bmi.n	8019b30 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019abe:	4596      	cmp	lr, r2
 8019ac0:	dd36      	ble.n	8019b30 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xac>
 8019ac2:	b3bf      	cbz	r7, 8019b34 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb0>
 8019ac4:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019ac8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8019acc:	3501      	adds	r5, #1
 8019ace:	d435      	bmi.n	8019b3c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019ad0:	45a9      	cmp	r9, r5
 8019ad2:	dd33      	ble.n	8019b3c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb8>
 8019ad4:	f1bc 0f00 	cmp.w	ip, #0
 8019ad8:	d033      	beq.n	8019b42 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xbe>
 8019ada:	2800      	cmp	r0, #0
 8019adc:	db2c      	blt.n	8019b38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019ade:	4586      	cmp	lr, r0
 8019ae0:	dd2a      	ble.n	8019b38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xb4>
 8019ae2:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019ae6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019aea:	3001      	adds	r0, #1
 8019aec:	d42c      	bmi.n	8019b48 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019aee:	4586      	cmp	lr, r0
 8019af0:	dd2a      	ble.n	8019b48 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc4>
 8019af2:	b35f      	cbz	r7, 8019b4c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xc8>
 8019af4:	44c6      	add	lr, r8
 8019af6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019afa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019afe:	2f0f      	cmp	r7, #15
 8019b00:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019b04:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8019b08:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019b0c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019b10:	d802      	bhi.n	8019b18 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x94>
 8019b12:	f1bc 0f0f 	cmp.w	ip, #15
 8019b16:	d91b      	bls.n	8019b50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0xcc>
 8019b18:	4b77      	ldr	r3, [pc, #476]	; (8019cf8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>)
 8019b1a:	f240 115b 	movw	r1, #347	; 0x15b
 8019b1e:	4a77      	ldr	r2, [pc, #476]	; (8019cfc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>)
 8019b20:	4877      	ldr	r0, [pc, #476]	; (8019d00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x27c>)
 8019b22:	f006 fb37 	bl	8020194 <__assert_func>
 8019b26:	2600      	movs	r6, #0
 8019b28:	e7c7      	b.n	8019aba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x36>
 8019b2a:	2400      	movs	r4, #0
 8019b2c:	4626      	mov	r6, r4
 8019b2e:	e7cd      	b.n	8019acc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b30:	2400      	movs	r4, #0
 8019b32:	e7cb      	b.n	8019acc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b34:	463c      	mov	r4, r7
 8019b36:	e7c9      	b.n	8019acc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x48>
 8019b38:	2500      	movs	r5, #0
 8019b3a:	e7d6      	b.n	8019aea <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x66>
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	4615      	mov	r5, r2
 8019b40:	e7dd      	b.n	8019afe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b42:	4662      	mov	r2, ip
 8019b44:	4665      	mov	r5, ip
 8019b46:	e7da      	b.n	8019afe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b48:	2200      	movs	r2, #0
 8019b4a:	e7d8      	b.n	8019afe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b4c:	463a      	mov	r2, r7
 8019b4e:	e7d6      	b.n	8019afe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x7a>
 8019b50:	b2bf      	uxth	r7, r7
 8019b52:	fa1f f08c 	uxth.w	r0, ip
 8019b56:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 8019b5a:	fb00 fe07 	mul.w	lr, r0, r7
 8019b5e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019b62:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8019b66:	ebac 070e 	sub.w	r7, ip, lr
 8019b6a:	b280      	uxth	r0, r0
 8019b6c:	b2bf      	uxth	r7, r7
 8019b6e:	1a1b      	subs	r3, r3, r0
 8019b70:	fb07 fc0a 	mul.w	ip, r7, sl
 8019b74:	b29b      	uxth	r3, r3
 8019b76:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019b7a:	9300      	str	r3, [sp, #0]
 8019b7c:	fb00 cc09 	mla	ip, r0, r9, ip
 8019b80:	fb0e cc08 	mla	ip, lr, r8, ip
 8019b84:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019b88:	9301      	str	r3, [sp, #4]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	f000 80b0 	beq.w	8019cf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26c>
 8019b90:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019b94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019b98:	fb0b fc0c 	mul.w	ip, fp, ip
 8019b9c:	fb0b f606 	mul.w	r6, fp, r6
 8019ba0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019ba4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019ba8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019bac:	44dc      	add	ip, fp
 8019bae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019bb2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8019bb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bba:	fb0a fb0b 	mul.w	fp, sl, fp
 8019bbe:	fb0a fa04 	mul.w	sl, sl, r4
 8019bc2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019bc6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019bca:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8019bce:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019bd2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019bd6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019bda:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8019bde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019be2:	0a36      	lsrs	r6, r6, #8
 8019be4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019be8:	44dc      	add	ip, fp
 8019bea:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019bee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019bf2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019bf6:	fb09 fb0b 	mul.w	fp, r9, fp
 8019bfa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bfe:	fb09 f905 	mul.w	r9, r9, r5
 8019c02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019c06:	ea4f 241b 	mov.w	r4, fp, lsr #8
 8019c0a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019c0e:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019c12:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019c16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019c1a:	fb0c fc07 	mul.w	ip, ip, r7
 8019c1e:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019c22:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019c26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019c2a:	445c      	add	r4, fp
 8019c2c:	fb08 f505 	mul.w	r5, r8, r5
 8019c30:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019c34:	fb08 f802 	mul.w	r8, r8, r2
 8019c38:	0a24      	lsrs	r4, r4, #8
 8019c3a:	0a2a      	lsrs	r2, r5, #8
 8019c3c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019c40:	fb07 f70a 	mul.w	r7, r7, sl
 8019c44:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019c48:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019c4c:	4415      	add	r5, r2
 8019c4e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019c52:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019c56:	9a00      	ldr	r2, [sp, #0]
 8019c58:	0a2d      	lsrs	r5, r5, #8
 8019c5a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019c5e:	fb03 cc02 	mla	ip, r3, r2, ip
 8019c62:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019c66:	fb02 7306 	mla	r3, r2, r6, r7
 8019c6a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019c6e:	9a01      	ldr	r2, [sp, #4]
 8019c70:	fb05 c50e 	mla	r5, r5, lr, ip
 8019c74:	fb0e 3e08 	mla	lr, lr, r8, r3
 8019c78:	f409 437f 	and.w	r3, r9, #65280	; 0xff00
 8019c7c:	fb04 5400 	mla	r4, r4, r0, r5
 8019c80:	fb00 e303 	mla	r3, r0, r3, lr
 8019c84:	0a24      	lsrs	r4, r4, #8
 8019c86:	0a1b      	lsrs	r3, r3, #8
 8019c88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8019c8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019c90:	431c      	orrs	r4, r3
 8019c92:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	b2e0      	uxtb	r0, r4
 8019c9a:	435a      	muls	r2, r3
 8019c9c:	fb10 f003 	smulbb	r0, r0, r3
 8019ca0:	1c55      	adds	r5, r2, #1
 8019ca2:	eb05 2512 	add.w	r5, r5, r2, lsr #8
 8019ca6:	780a      	ldrb	r2, [r1, #0]
 8019ca8:	ea6f 2515 	mvn.w	r5, r5, lsr #8
 8019cac:	b2ed      	uxtb	r5, r5
 8019cae:	fb02 0205 	mla	r2, r2, r5, r0
 8019cb2:	b292      	uxth	r2, r2
 8019cb4:	1c50      	adds	r0, r2, #1
 8019cb6:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019cba:	7848      	ldrb	r0, [r1, #1]
 8019cbc:	fb10 f005 	smulbb	r0, r0, r5
 8019cc0:	1212      	asrs	r2, r2, #8
 8019cc2:	700a      	strb	r2, [r1, #0]
 8019cc4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8019cc8:	0c24      	lsrs	r4, r4, #16
 8019cca:	fb02 0203 	mla	r2, r2, r3, r0
 8019cce:	b292      	uxth	r2, r2
 8019cd0:	1c50      	adds	r0, r2, #1
 8019cd2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019cd6:	1212      	asrs	r2, r2, #8
 8019cd8:	704a      	strb	r2, [r1, #1]
 8019cda:	788a      	ldrb	r2, [r1, #2]
 8019cdc:	fb12 f505 	smulbb	r5, r2, r5
 8019ce0:	fb04 5303 	mla	r3, r4, r3, r5
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	1c5a      	adds	r2, r3, #1
 8019ce8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019cec:	121b      	asrs	r3, r3, #8
 8019cee:	708b      	strb	r3, [r1, #2]
 8019cf0:	b003      	add	sp, #12
 8019cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cf6:	bf00      	nop
 8019cf8:	080261a0 	.word	0x080261a0
 8019cfc:	080265b6 	.word	0x080265b6
 8019d00:	0802616d 	.word	0x0802616d

08019d04 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d08:	ed2d 8b08 	vpush	{d8-d11}
 8019d0c:	b09f      	sub	sp, #124	; 0x7c
 8019d0e:	eeb0 aa40 	vmov.f32	s20, s0
 8019d12:	eef0 9a60 	vmov.f32	s19, s1
 8019d16:	921b      	str	r2, [sp, #108]	; 0x6c
 8019d18:	eeb0 9a41 	vmov.f32	s18, s2
 8019d1c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8019d1e:	eeb0 8a62 	vmov.f32	s16, s5
 8019d22:	9309      	str	r3, [sp, #36]	; 0x24
 8019d24:	eef0 8a43 	vmov.f32	s17, s6
 8019d28:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 8019d2c:	eef0 ba44 	vmov.f32	s23, s8
 8019d30:	901d      	str	r0, [sp, #116]	; 0x74
 8019d32:	eeb0 ba64 	vmov.f32	s22, s9
 8019d36:	931c      	str	r3, [sp, #112]	; 0x70
 8019d38:	eef0 aa45 	vmov.f32	s21, s10
 8019d3c:	6850      	ldr	r0, [r2, #4]
 8019d3e:	9119      	str	r1, [sp, #100]	; 0x64
 8019d40:	6812      	ldr	r2, [r2, #0]
 8019d42:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8019d44:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8019d48:	fb00 1303 	mla	r3, r0, r3, r1
 8019d4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d50:	18d3      	adds	r3, r2, r3
 8019d52:	930c      	str	r3, [sp, #48]	; 0x30
 8019d54:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	9312      	str	r3, [sp, #72]	; 0x48
 8019d5a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d5c:	685e      	ldr	r6, [r3, #4]
 8019d5e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019d62:	3604      	adds	r6, #4
 8019d64:	930d      	str	r3, [sp, #52]	; 0x34
 8019d66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	dc03      	bgt.n	8019d74 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	f340 8378 	ble.w	801a464 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 8019d74:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019d76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019d7a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019d7e:	1e48      	subs	r0, r1, #1
 8019d80:	1e57      	subs	r7, r2, #1
 8019d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	f340 818c 	ble.w	801a0a2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8019d8a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8019d8c:	142b      	asrs	r3, r5, #16
 8019d8e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019d92:	d406      	bmi.n	8019da2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019d94:	4584      	cmp	ip, r0
 8019d96:	da04      	bge.n	8019da2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	db02      	blt.n	8019da2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019d9c:	42bb      	cmp	r3, r7
 8019d9e:	f2c0 8181 	blt.w	801a0a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a0>
 8019da2:	f11c 0c01 	adds.w	ip, ip, #1
 8019da6:	f100 816f 	bmi.w	801a088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019daa:	4561      	cmp	r1, ip
 8019dac:	f2c0 816c 	blt.w	801a088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019db0:	3301      	adds	r3, #1
 8019db2:	f100 8169 	bmi.w	801a088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019db6:	429a      	cmp	r2, r3
 8019db8:	f2c0 8166 	blt.w	801a088 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8019dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019dc0:	931a      	str	r3, [sp, #104]	; 0x68
 8019dc2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	f340 818c 	ble.w	801a0e2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 8019dca:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019dcc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019dd0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019dd4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019dd8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8019dda:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019dde:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8019de0:	141b      	asrs	r3, r3, #16
 8019de2:	f100 81d0 	bmi.w	801a186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8019dea:	4543      	cmp	r3, r8
 8019dec:	f280 81cb 	bge.w	801a186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019df0:	f1bc 0f00 	cmp.w	ip, #0
 8019df4:	f2c0 81c7 	blt.w	801a186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019df8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019dfc:	45c4      	cmp	ip, r8
 8019dfe:	f280 81c2 	bge.w	801a186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 8019e02:	b200      	sxth	r0, r0
 8019e04:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e06:	fb0c 3300 	mla	r3, ip, r0, r3
 8019e0a:	eb04 0803 	add.w	r8, r4, r3
 8019e0e:	5ce3      	ldrb	r3, [r4, r3]
 8019e10:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019e14:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019e18:	2a00      	cmp	r2, #0
 8019e1a:	f000 81a9 	beq.w	801a170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46c>
 8019e1e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019e22:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019e26:	940e      	str	r4, [sp, #56]	; 0x38
 8019e28:	0e24      	lsrs	r4, r4, #24
 8019e2a:	9415      	str	r4, [sp, #84]	; 0x54
 8019e2c:	b179      	cbz	r1, 8019e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8019e2e:	eb08 0c00 	add.w	ip, r8, r0
 8019e32:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019e36:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019e3a:	900a      	str	r0, [sp, #40]	; 0x28
 8019e3c:	0e00      	lsrs	r0, r0, #24
 8019e3e:	9013      	str	r0, [sp, #76]	; 0x4c
 8019e40:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019e44:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019e48:	900f      	str	r0, [sp, #60]	; 0x3c
 8019e4a:	0e00      	lsrs	r0, r0, #24
 8019e4c:	9016      	str	r0, [sp, #88]	; 0x58
 8019e4e:	b292      	uxth	r2, r2
 8019e50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019e52:	b289      	uxth	r1, r1
 8019e54:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e56:	fb02 f901 	mul.w	r9, r2, r1
 8019e5a:	0112      	lsls	r2, r2, #4
 8019e5c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019e60:	eba2 0809 	sub.w	r8, r2, r9
 8019e64:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019e68:	b289      	uxth	r1, r1
 8019e6a:	fa1f f888 	uxth.w	r8, r8
 8019e6e:	1a52      	subs	r2, r2, r1
 8019e70:	fb08 f000 	mul.w	r0, r8, r0
 8019e74:	b292      	uxth	r2, r2
 8019e76:	fb02 000e 	mla	r0, r2, lr, r0
 8019e7a:	fb01 0004 	mla	r0, r1, r4, r0
 8019e7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e80:	fb09 0004 	mla	r0, r9, r4, r0
 8019e84:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	f000 80f2 	beq.w	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8019e8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019e92:	d01b      	beq.n	8019ecc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8019e94:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019e98:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e9c:	fb0e fa0a 	mul.w	sl, lr, sl
 8019ea0:	fb0e fe03 	mul.w	lr, lr, r3
 8019ea4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019ea8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019eac:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019eb0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019eb4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019eb8:	4453      	add	r3, sl
 8019eba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ebe:	0a1b      	lsrs	r3, r3, #8
 8019ec0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019ec4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019ec8:	ea43 030c 	orr.w	r3, r3, ip
 8019ecc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019ece:	2cff      	cmp	r4, #255	; 0xff
 8019ed0:	d021      	beq.n	8019f16 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8019ed2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ed4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019ed8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019eda:	fb04 fb0b 	mul.w	fp, r4, fp
 8019ede:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ee0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019ee6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019eea:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019eee:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ef2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ef6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019efa:	44de      	add	lr, fp
 8019efc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019f00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f10:	ea4e 040a 	orr.w	r4, lr, sl
 8019f14:	940e      	str	r4, [sp, #56]	; 0x38
 8019f16:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f18:	2cff      	cmp	r4, #255	; 0xff
 8019f1a:	d021      	beq.n	8019f60 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25c>
 8019f1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019f1e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f24:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019f2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f2e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019f30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019f34:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019f38:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f3c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019f44:	44de      	add	lr, fp
 8019f46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019f4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019f5a:	ea4e 040a 	orr.w	r4, lr, sl
 8019f5e:	940a      	str	r4, [sp, #40]	; 0x28
 8019f60:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f62:	2cff      	cmp	r4, #255	; 0xff
 8019f64:	d021      	beq.n	8019faa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8019f66:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019f68:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019f6c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f6e:	fb04 fb0b 	mul.w	fp, r4, fp
 8019f72:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019f74:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019f78:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019f7a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019f7e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019f82:	fb04 fa0a 	mul.w	sl, r4, sl
 8019f86:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019f8a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019f8e:	44de      	add	lr, fp
 8019f90:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019f94:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019f98:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019f9c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019fa0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019fa4:	ea4e 040a 	orr.w	r4, lr, sl
 8019fa8:	940f      	str	r4, [sp, #60]	; 0x3c
 8019faa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019fac:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019fb4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019fb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019fba:	fb08 fc0c 	mul.w	ip, r8, ip
 8019fbe:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019fc2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019fc6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019fc8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019fcc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019fd0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019fd2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019fd6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019fda:	fb08 f80e 	mul.w	r8, r8, lr
 8019fde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019fe2:	fb02 8303 	mla	r3, r2, r3, r8
 8019fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019fe8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019fec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019ff0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ff2:	fb01 330a 	mla	r3, r1, sl, r3
 8019ff6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019ffa:	fb09 3901 	mla	r9, r9, r1, r3
 8019ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a000:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a002:	4343      	muls	r3, r0
 801a004:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a008:	1c58      	adds	r0, r3, #1
 801a00a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a00e:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a012:	ea4c 0c09 	orr.w	ip, ip, r9
 801a016:	783b      	ldrb	r3, [r7, #0]
 801a018:	fa5f f28c 	uxtb.w	r2, ip
 801a01c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801a020:	fb12 f201 	smulbb	r2, r2, r1
 801a024:	b2c0      	uxtb	r0, r0
 801a026:	fb03 2300 	mla	r3, r3, r0, r2
 801a02a:	b29b      	uxth	r3, r3
 801a02c:	1c5a      	adds	r2, r3, #1
 801a02e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a032:	787a      	ldrb	r2, [r7, #1]
 801a034:	fb12 f200 	smulbb	r2, r2, r0
 801a038:	121b      	asrs	r3, r3, #8
 801a03a:	703b      	strb	r3, [r7, #0]
 801a03c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a040:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a044:	fb03 2301 	mla	r3, r3, r1, r2
 801a048:	b29b      	uxth	r3, r3
 801a04a:	1c5a      	adds	r2, r3, #1
 801a04c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a050:	121b      	asrs	r3, r3, #8
 801a052:	707b      	strb	r3, [r7, #1]
 801a054:	78bb      	ldrb	r3, [r7, #2]
 801a056:	fb13 f000 	smulbb	r0, r3, r0
 801a05a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801a05e:	fa1f fc8c 	uxth.w	ip, ip
 801a062:	f10c 0301 	add.w	r3, ip, #1
 801a066:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801a06a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a06e:	f887 c002 	strb.w	ip, [r7, #2]
 801a072:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a074:	3703      	adds	r7, #3
 801a076:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a078:	441a      	add	r2, r3
 801a07a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a07c:	441d      	add	r5, r3
 801a07e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a080:	9231      	str	r2, [sp, #196]	; 0xc4
 801a082:	3b01      	subs	r3, #1
 801a084:	931a      	str	r3, [sp, #104]	; 0x68
 801a086:	e69c      	b.n	8019dc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 801a088:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a08a:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a08c:	441c      	add	r4, r3
 801a08e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a090:	441d      	add	r5, r3
 801a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a094:	9431      	str	r4, [sp, #196]	; 0xc4
 801a096:	3b01      	subs	r3, #1
 801a098:	9309      	str	r3, [sp, #36]	; 0x24
 801a09a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a09c:	3303      	adds	r3, #3
 801a09e:	930c      	str	r3, [sp, #48]	; 0x30
 801a0a0:	e66f      	b.n	8019d82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801a0a2:	d026      	beq.n	801a0f2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0a6:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801a0a8:	3b01      	subs	r3, #1
 801a0aa:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a0ac:	fb00 4003 	mla	r0, r0, r3, r4
 801a0b0:	1400      	asrs	r0, r0, #16
 801a0b2:	f53f ae83 	bmi.w	8019dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0b6:	3901      	subs	r1, #1
 801a0b8:	4288      	cmp	r0, r1
 801a0ba:	f6bf ae7f 	bge.w	8019dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0be:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801a0c0:	fb01 5303 	mla	r3, r1, r3, r5
 801a0c4:	141b      	asrs	r3, r3, #16
 801a0c6:	f53f ae79 	bmi.w	8019dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0ca:	3a01      	subs	r2, #1
 801a0cc:	4293      	cmp	r3, r2
 801a0ce:	f6bf ae75 	bge.w	8019dbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 801a0d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0d4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801a0d8:	f103 0e03 	add.w	lr, r3, #3
 801a0dc:	f1bb 0f00 	cmp.w	fp, #0
 801a0e0:	dc71      	bgt.n	801a1c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a0e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a0ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a0ee:	4423      	add	r3, r4
 801a0f0:	930c      	str	r3, [sp, #48]	; 0x30
 801a0f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	f340 81b5 	ble.w	801a464 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x760>
 801a0fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a0fe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a100:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801a104:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801a108:	eef0 6a48 	vmov.f32	s13, s16
 801a10c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801a110:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801a114:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a118:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 801a11c:	eef0 6a68 	vmov.f32	s13, s17
 801a120:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a124:	ee16 5a90 	vmov	r5, s13
 801a128:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801a12c:	ee69 7a27 	vmul.f32	s15, s18, s15
 801a130:	ee37 8a48 	vsub.f32	s16, s14, s16
 801a134:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801a138:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801a13c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801a140:	ee18 2a10 	vmov	r2, s16
 801a144:	eeb0 8a47 	vmov.f32	s16, s14
 801a148:	fb92 f3f3 	sdiv	r3, r2, r3
 801a14c:	ee18 2a90 	vmov	r2, s17
 801a150:	9333      	str	r3, [sp, #204]	; 0xcc
 801a152:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a154:	eef0 8a67 	vmov.f32	s17, s15
 801a158:	fb92 f3f3 	sdiv	r3, r2, r3
 801a15c:	9334      	str	r3, [sp, #208]	; 0xd0
 801a15e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a160:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a162:	3b01      	subs	r3, #1
 801a164:	9319      	str	r3, [sp, #100]	; 0x64
 801a166:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a168:	bf08      	it	eq
 801a16a:	4613      	moveq	r3, r2
 801a16c:	9309      	str	r3, [sp, #36]	; 0x24
 801a16e:	e5fa      	b.n	8019d66 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801a170:	2900      	cmp	r1, #0
 801a172:	f43f ae6c 	beq.w	8019e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a176:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a17a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a17e:	900a      	str	r0, [sp, #40]	; 0x28
 801a180:	0e00      	lsrs	r0, r0, #24
 801a182:	9013      	str	r0, [sp, #76]	; 0x4c
 801a184:	e663      	b.n	8019e4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801a186:	f113 0801 	adds.w	r8, r3, #1
 801a18a:	f53f af72 	bmi.w	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a18e:	4540      	cmp	r0, r8
 801a190:	f6ff af6f 	blt.w	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a194:	f11c 0801 	adds.w	r8, ip, #1
 801a198:	f53f af6b 	bmi.w	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a19c:	45c6      	cmp	lr, r8
 801a19e:	f6ff af68 	blt.w	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1a2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a1a4:	b200      	sxth	r0, r0
 801a1a6:	9302      	str	r3, [sp, #8]
 801a1a8:	fa0f f38e 	sxth.w	r3, lr
 801a1ac:	9000      	str	r0, [sp, #0]
 801a1ae:	9301      	str	r3, [sp, #4]
 801a1b0:	4633      	mov	r3, r6
 801a1b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a1b4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a1b8:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a1bc:	4639      	mov	r1, r7
 801a1be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a1c0:	f7ff fc60 	bl	8019a84 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801a1c4:	e755      	b.n	801a072 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a1c6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801a1c8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a1cc:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 801a1ce:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a1d2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801a1d4:	1427      	asrs	r7, r4, #16
 801a1d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a1d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a1dc:	142b      	asrs	r3, r5, #16
 801a1de:	fb01 7303 	mla	r3, r1, r3, r7
 801a1e2:	18e7      	adds	r7, r4, r3
 801a1e4:	5ce3      	ldrb	r3, [r4, r3]
 801a1e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a1ea:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a1ee:	2a00      	cmp	r2, #0
 801a1f0:	f000 812e 	beq.w	801a450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>
 801a1f4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a1f8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a1fc:	9410      	str	r4, [sp, #64]	; 0x40
 801a1fe:	0e24      	lsrs	r4, r4, #24
 801a200:	9417      	str	r4, [sp, #92]	; 0x5c
 801a202:	b170      	cbz	r0, 801a222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a204:	eb07 0801 	add.w	r8, r7, r1
 801a208:	5c79      	ldrb	r1, [r7, r1]
 801a20a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a20e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a210:	0e09      	lsrs	r1, r1, #24
 801a212:	9114      	str	r1, [sp, #80]	; 0x50
 801a214:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a218:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a21c:	9111      	str	r1, [sp, #68]	; 0x44
 801a21e:	0e09      	lsrs	r1, r1, #24
 801a220:	9118      	str	r1, [sp, #96]	; 0x60
 801a222:	b292      	uxth	r2, r2
 801a224:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a226:	b280      	uxth	r0, r0
 801a228:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a22a:	fb02 f900 	mul.w	r9, r2, r0
 801a22e:	0112      	lsls	r2, r2, #4
 801a230:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a234:	eba2 0809 	sub.w	r8, r2, r9
 801a238:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a23c:	b280      	uxth	r0, r0
 801a23e:	fa1f f888 	uxth.w	r8, r8
 801a242:	1a12      	subs	r2, r2, r0
 801a244:	fb08 f101 	mul.w	r1, r8, r1
 801a248:	b292      	uxth	r2, r2
 801a24a:	fb02 110c 	mla	r1, r2, ip, r1
 801a24e:	fb00 1104 	mla	r1, r0, r4, r1
 801a252:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a254:	fb09 1104 	mla	r1, r9, r4, r1
 801a258:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a25c:	2900      	cmp	r1, #0
 801a25e:	f000 80ec 	beq.w	801a43a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801a262:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a266:	d019      	beq.n	801a29c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 801a268:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a26c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a270:	fb0c fa0a 	mul.w	sl, ip, sl
 801a274:	fb0c fc03 	mul.w	ip, ip, r3
 801a278:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a27c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a280:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a284:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a288:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a28c:	4453      	add	r3, sl
 801a28e:	0a3f      	lsrs	r7, r7, #8
 801a290:	0a1b      	lsrs	r3, r3, #8
 801a292:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a296:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a29a:	433b      	orrs	r3, r7
 801a29c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a29e:	2cff      	cmp	r4, #255	; 0xff
 801a2a0:	d020      	beq.n	801a2e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e0>
 801a2a2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a2a4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a2a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a2aa:	4367      	muls	r7, r4
 801a2ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a2ae:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a2b2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a2b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a2b8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a2bc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a2c4:	44bc      	add	ip, r7
 801a2c6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a2ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a2ce:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a2d2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a2d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a2da:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a2de:	ea4c 040a 	orr.w	r4, ip, sl
 801a2e2:	9410      	str	r4, [sp, #64]	; 0x40
 801a2e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2e6:	2cff      	cmp	r4, #255	; 0xff
 801a2e8:	d020      	beq.n	801a32c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 801a2ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a2ec:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a2f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a2f2:	4367      	muls	r7, r4
 801a2f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a2f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a2fa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a2fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a300:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a304:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a308:	fb04 fa0a 	mul.w	sl, r4, sl
 801a30c:	44bc      	add	ip, r7
 801a30e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a312:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a316:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a31a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a31e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a322:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a326:	ea4c 040a 	orr.w	r4, ip, sl
 801a32a:	940b      	str	r4, [sp, #44]	; 0x2c
 801a32c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a32e:	2cff      	cmp	r4, #255	; 0xff
 801a330:	d020      	beq.n	801a374 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801a332:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a334:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a338:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a33a:	4367      	muls	r7, r4
 801a33c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a33e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a342:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a346:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a348:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a34c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a350:	fb04 fa0a 	mul.w	sl, r4, sl
 801a354:	44bc      	add	ip, r7
 801a356:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a35a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a35e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a362:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a366:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a36a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a36e:	ea4c 040a 	orr.w	r4, ip, sl
 801a372:	9411      	str	r4, [sp, #68]	; 0x44
 801a374:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a376:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a37a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a37e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a382:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a384:	fb08 f707 	mul.w	r7, r8, r7
 801a388:	fb02 770c 	mla	r7, r2, ip, r7
 801a38c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a390:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a392:	fb00 770c 	mla	r7, r0, ip, r7
 801a396:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a39a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a39c:	fb09 770c 	mla	r7, r9, ip, r7
 801a3a0:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a3a4:	fb08 f80c 	mul.w	r8, r8, ip
 801a3a8:	0a3f      	lsrs	r7, r7, #8
 801a3aa:	fb02 8303 	mla	r3, r2, r3, r8
 801a3ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a3b0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a3b4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a3b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a3ba:	fb00 330a 	mla	r3, r0, sl, r3
 801a3be:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a3c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a3c4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a3c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a3ca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a3ce:	434b      	muls	r3, r1
 801a3d0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a3d4:	1c59      	adds	r1, r3, #1
 801a3d6:	ea47 070c 	orr.w	r7, r7, ip
 801a3da:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a3de:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a3e2:	b2fa      	uxtb	r2, r7
 801a3e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a3e8:	fb12 f200 	smulbb	r2, r2, r0
 801a3ec:	b2c9      	uxtb	r1, r1
 801a3ee:	fb03 2301 	mla	r3, r3, r1, r2
 801a3f2:	b29b      	uxth	r3, r3
 801a3f4:	1c5a      	adds	r2, r3, #1
 801a3f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a3fa:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a3fe:	fb12 f201 	smulbb	r2, r2, r1
 801a402:	121b      	asrs	r3, r3, #8
 801a404:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a408:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a40c:	0c3f      	lsrs	r7, r7, #16
 801a40e:	fb03 2300 	mla	r3, r3, r0, r2
 801a412:	b29b      	uxth	r3, r3
 801a414:	1c5a      	adds	r2, r3, #1
 801a416:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a41a:	121b      	asrs	r3, r3, #8
 801a41c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a420:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a424:	fb13 f101 	smulbb	r1, r3, r1
 801a428:	fb07 1700 	mla	r7, r7, r0, r1
 801a42c:	b2bf      	uxth	r7, r7
 801a42e:	1c7b      	adds	r3, r7, #1
 801a430:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a434:	123f      	asrs	r7, r7, #8
 801a436:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a43a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801a43c:	f10e 0e03 	add.w	lr, lr, #3
 801a440:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801a442:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a446:	441a      	add	r2, r3
 801a448:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801a44a:	9231      	str	r2, [sp, #196]	; 0xc4
 801a44c:	441d      	add	r5, r3
 801a44e:	e645      	b.n	801a0dc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 801a450:	2800      	cmp	r0, #0
 801a452:	f43f aee6 	beq.w	801a222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a456:	5c79      	ldrb	r1, [r7, r1]
 801a458:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a45c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a45e:	0e09      	lsrs	r1, r1, #24
 801a460:	9114      	str	r1, [sp, #80]	; 0x50
 801a462:	e6de      	b.n	801a222 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51e>
 801a464:	b01f      	add	sp, #124	; 0x7c
 801a466:	ecbd 8b08 	vpop	{d8-d11}
 801a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a470 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a474:	e9dd 040e 	ldrd	r0, r4, [sp, #56]	; 0x38
 801a478:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 801a47c:	2c00      	cmp	r4, #0
 801a47e:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801a482:	fb04 060c 	mla	r6, r4, ip, r0
 801a486:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 801a48a:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 801a48e:	eb02 0e06 	add.w	lr, r2, r6
 801a492:	db3d      	blt.n	801a510 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a494:	45a0      	cmp	r8, r4
 801a496:	dd3b      	ble.n	801a510 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa0>
 801a498:	2800      	cmp	r0, #0
 801a49a:	db37      	blt.n	801a50c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a49c:	4584      	cmp	ip, r0
 801a49e:	dd35      	ble.n	801a50c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a4a0:	5d92      	ldrb	r2, [r2, r6]
 801a4a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a4a6:	1c46      	adds	r6, r0, #1
 801a4a8:	d435      	bmi.n	801a516 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a4aa:	45b4      	cmp	ip, r6
 801a4ac:	dd33      	ble.n	801a516 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xa6>
 801a4ae:	b3a5      	cbz	r5, 801a51a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xaa>
 801a4b0:	f89e 6001 	ldrb.w	r6, [lr, #1]
 801a4b4:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 801a4b8:	3401      	adds	r4, #1
 801a4ba:	d432      	bmi.n	801a522 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a4bc:	45a0      	cmp	r8, r4
 801a4be:	dd30      	ble.n	801a522 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb2>
 801a4c0:	b397      	cbz	r7, 801a528 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xb8>
 801a4c2:	2800      	cmp	r0, #0
 801a4c4:	db2b      	blt.n	801a51e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a4c6:	4584      	cmp	ip, r0
 801a4c8:	dd29      	ble.n	801a51e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xae>
 801a4ca:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801a4ce:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801a4d2:	3001      	adds	r0, #1
 801a4d4:	d42b      	bmi.n	801a52e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a4d6:	4584      	cmp	ip, r0
 801a4d8:	dd29      	ble.n	801a52e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xbe>
 801a4da:	b355      	cbz	r5, 801a532 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc2>
 801a4dc:	44f4      	add	ip, lr
 801a4de:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801a4e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a4e6:	2d0f      	cmp	r5, #15
 801a4e8:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801a4ec:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a4f0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801a4f4:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801a4f8:	d801      	bhi.n	801a4fe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x8e>
 801a4fa:	2f0f      	cmp	r7, #15
 801a4fc:	d91b      	bls.n	801a536 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0xc6>
 801a4fe:	4b7f      	ldr	r3, [pc, #508]	; (801a6fc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x28c>)
 801a500:	f240 115b 	movw	r1, #347	; 0x15b
 801a504:	4a7e      	ldr	r2, [pc, #504]	; (801a700 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x290>)
 801a506:	487f      	ldr	r0, [pc, #508]	; (801a704 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x294>)
 801a508:	f005 fe44 	bl	8020194 <__assert_func>
 801a50c:	2200      	movs	r2, #0
 801a50e:	e7ca      	b.n	801a4a6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x36>
 801a510:	2600      	movs	r6, #0
 801a512:	4632      	mov	r2, r6
 801a514:	e7d0      	b.n	801a4b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a516:	2600      	movs	r6, #0
 801a518:	e7ce      	b.n	801a4b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a51a:	462e      	mov	r6, r5
 801a51c:	e7cc      	b.n	801a4b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x48>
 801a51e:	2400      	movs	r4, #0
 801a520:	e7d7      	b.n	801a4d2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x62>
 801a522:	2300      	movs	r3, #0
 801a524:	461c      	mov	r4, r3
 801a526:	e7de      	b.n	801a4e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a528:	463b      	mov	r3, r7
 801a52a:	463c      	mov	r4, r7
 801a52c:	e7db      	b.n	801a4e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a52e:	2300      	movs	r3, #0
 801a530:	e7d9      	b.n	801a4e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a532:	462b      	mov	r3, r5
 801a534:	e7d7      	b.n	801a4e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x76>
 801a536:	b2a8      	uxth	r0, r5
 801a538:	b2bf      	uxth	r7, r7
 801a53a:	fb07 fe00 	mul.w	lr, r7, r0
 801a53e:	0100      	lsls	r0, r0, #4
 801a540:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801a544:	eba0 0c0e 	sub.w	ip, r0, lr
 801a548:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801a54c:	b2bf      	uxth	r7, r7
 801a54e:	fa1f fc8c 	uxth.w	ip, ip
 801a552:	1bc5      	subs	r5, r0, r7
 801a554:	fb0c f00a 	mul.w	r0, ip, sl
 801a558:	b2ad      	uxth	r5, r5
 801a55a:	fb05 000b 	mla	r0, r5, fp, r0
 801a55e:	fb07 0009 	mla	r0, r7, r9, r0
 801a562:	fb0e 0008 	mla	r0, lr, r8, r0
 801a566:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a56a:	9001      	str	r0, [sp, #4]
 801a56c:	2800      	cmp	r0, #0
 801a56e:	f000 80c2 	beq.w	801a6f6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x286>
 801a572:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a576:	d018      	beq.n	801a5aa <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x13a>
 801a578:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801a57c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a580:	fb0b f000 	mul.w	r0, fp, r0
 801a584:	fb0b fb02 	mul.w	fp, fp, r2
 801a588:	0a02      	lsrs	r2, r0, #8
 801a58a:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a58e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a592:	4402      	add	r2, r0
 801a594:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801a598:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801a59c:	0a12      	lsrs	r2, r2, #8
 801a59e:	0a00      	lsrs	r0, r0, #8
 801a5a0:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a5a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a5a8:	4302      	orrs	r2, r0
 801a5aa:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801a5ae:	d01a      	beq.n	801a5e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x176>
 801a5b0:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a5b4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a5b8:	fb0a f000 	mul.w	r0, sl, r0
 801a5bc:	fb0a fa06 	mul.w	sl, sl, r6
 801a5c0:	0a06      	lsrs	r6, r0, #8
 801a5c2:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801a5c6:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a5ca:	4406      	add	r6, r0
 801a5cc:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a5d0:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a5d4:	0a36      	lsrs	r6, r6, #8
 801a5d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a5da:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801a5de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a5e2:	ea46 060a 	orr.w	r6, r6, sl
 801a5e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a5ea:	d01b      	beq.n	801a624 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1b4>
 801a5ec:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801a5f0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a5f4:	fb09 fa0a 	mul.w	sl, r9, sl
 801a5f8:	fb09 f004 	mul.w	r0, r9, r4
 801a5fc:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801a600:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a604:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801a608:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a60c:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801a610:	4454      	add	r4, sl
 801a612:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a616:	0a24      	lsrs	r4, r4, #8
 801a618:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a61c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801a620:	ea44 0409 	orr.w	r4, r4, r9
 801a624:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801a628:	d01b      	beq.n	801a662 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x1f2>
 801a62a:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801a62e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a632:	fb08 f909 	mul.w	r9, r8, r9
 801a636:	fb08 f003 	mul.w	r0, r8, r3
 801a63a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801a63e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801a642:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801a646:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a64a:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801a64e:	444b      	add	r3, r9
 801a650:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a654:	0a1b      	lsrs	r3, r3, #8
 801a656:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a65a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a65e:	ea43 0308 	orr.w	r3, r3, r8
 801a662:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801a666:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a66a:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801a66e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a672:	fb0c f000 	mul.w	r0, ip, r0
 801a676:	fb0c f606 	mul.w	r6, ip, r6
 801a67a:	fb05 0808 	mla	r8, r5, r8, r0
 801a67e:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801a682:	fb05 6502 	mla	r5, r5, r2, r6
 801a686:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801a68a:	fb07 8800 	mla	r8, r7, r0, r8
 801a68e:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801a692:	fb07 5704 	mla	r7, r7, r4, r5
 801a696:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a69a:	fb0e 8000 	mla	r0, lr, r0, r8
 801a69e:	780a      	ldrb	r2, [r1, #0]
 801a6a0:	fb0e 7e03 	mla	lr, lr, r3, r7
 801a6a4:	9b01      	ldr	r3, [sp, #4]
 801a6a6:	0a00      	lsrs	r0, r0, #8
 801a6a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a6ac:	43db      	mvns	r3, r3
 801a6ae:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a6b2:	b2db      	uxtb	r3, r3
 801a6b4:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a6b8:	ea40 0e0e 	orr.w	lr, r0, lr
 801a6bc:	fb02 f003 	mul.w	r0, r2, r3
 801a6c0:	1c42      	adds	r2, r0, #1
 801a6c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a6c6:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801a6ca:	700a      	strb	r2, [r1, #0]
 801a6cc:	784a      	ldrb	r2, [r1, #1]
 801a6ce:	435a      	muls	r2, r3
 801a6d0:	1c50      	adds	r0, r2, #1
 801a6d2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801a6d6:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801a6da:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a6de:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a6e2:	704a      	strb	r2, [r1, #1]
 801a6e4:	788a      	ldrb	r2, [r1, #2]
 801a6e6:	4353      	muls	r3, r2
 801a6e8:	1c5a      	adds	r2, r3, #1
 801a6ea:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a6ee:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801a6f2:	f881 e002 	strb.w	lr, [r1, #2]
 801a6f6:	b003      	add	sp, #12
 801a6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6fc:	080261a0 	.word	0x080261a0
 801a700:	080265b6 	.word	0x080265b6
 801a704:	0802616d 	.word	0x0802616d

0801a708 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a70c:	ed2d 8b0a 	vpush	{d8-d12}
 801a710:	b09b      	sub	sp, #108	; 0x6c
 801a712:	eeb0 aa40 	vmov.f32	s20, s0
 801a716:	eef0 9a60 	vmov.f32	s19, s1
 801a71a:	9218      	str	r2, [sp, #96]	; 0x60
 801a71c:	eeb0 9a41 	vmov.f32	s18, s2
 801a720:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801a722:	eeb0 8a62 	vmov.f32	s16, s5
 801a726:	9019      	str	r0, [sp, #100]	; 0x64
 801a728:	eef0 8a43 	vmov.f32	s17, s6
 801a72c:	6850      	ldr	r0, [r2, #4]
 801a72e:	eeb0 ca44 	vmov.f32	s24, s8
 801a732:	9116      	str	r1, [sp, #88]	; 0x58
 801a734:	eef0 ba64 	vmov.f32	s23, s9
 801a738:	9307      	str	r3, [sp, #28]
 801a73a:	eeb0 ba45 	vmov.f32	s22, s10
 801a73e:	6812      	ldr	r2, [r2, #0]
 801a740:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801a744:	9d30      	ldr	r5, [sp, #192]	; 0xc0
 801a746:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801a74a:	fb00 1303 	mla	r3, r0, r3, r1
 801a74e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a752:	18d3      	adds	r3, r2, r3
 801a754:	930a      	str	r3, [sp, #40]	; 0x28
 801a756:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	930f      	str	r3, [sp, #60]	; 0x3c
 801a75c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a75e:	685e      	ldr	r6, [r3, #4]
 801a760:	3604      	adds	r6, #4
 801a762:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a764:	2b00      	cmp	r3, #0
 801a766:	dc03      	bgt.n	801a770 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801a768:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	f340 834f 	ble.w	801ae0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801a770:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a772:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a776:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a77a:	1e48      	subs	r0, r1, #1
 801a77c:	1e57      	subs	r7, r2, #1
 801a77e:	9b07      	ldr	r3, [sp, #28]
 801a780:	2b00      	cmp	r3, #0
 801a782:	f340 8178 	ble.w	801aa76 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801a786:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801a788:	142b      	asrs	r3, r5, #16
 801a78a:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a78e:	d406      	bmi.n	801a79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a790:	4584      	cmp	ip, r0
 801a792:	da04      	bge.n	801a79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a794:	2b00      	cmp	r3, #0
 801a796:	db02      	blt.n	801a79e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a798:	42bb      	cmp	r3, r7
 801a79a:	f2c0 816d 	blt.w	801aa78 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801a79e:	f11c 0c01 	adds.w	ip, ip, #1
 801a7a2:	f100 815b 	bmi.w	801aa5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7a6:	4561      	cmp	r1, ip
 801a7a8:	f2c0 8158 	blt.w	801aa5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	f100 8155 	bmi.w	801aa5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7b2:	429a      	cmp	r2, r3
 801a7b4:	f2c0 8152 	blt.w	801aa5c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 801a7b8:	9b07      	ldr	r3, [sp, #28]
 801a7ba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a7bc:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	f340 8178 	ble.w	801aab6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 801a7c6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a7c8:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a7cc:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a7d0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a7d4:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801a7d6:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a7da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801a7dc:	141b      	asrs	r3, r3, #16
 801a7de:	f100 81ba 	bmi.w	801ab56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a7e2:	f101 38ff 	add.w	r8, r1, #4294967295
 801a7e6:	4543      	cmp	r3, r8
 801a7e8:	f280 81b5 	bge.w	801ab56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a7ec:	f1bc 0f00 	cmp.w	ip, #0
 801a7f0:	f2c0 81b1 	blt.w	801ab56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a7f4:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a7f8:	45c4      	cmp	ip, r8
 801a7fa:	f280 81ac 	bge.w	801ab56 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801a7fe:	b209      	sxth	r1, r1
 801a800:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a802:	fb0c 3301 	mla	r3, ip, r1, r3
 801a806:	eb04 0803 	add.w	r8, r4, r3
 801a80a:	5ce3      	ldrb	r3, [r4, r3]
 801a80c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a810:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a814:	2a00      	cmp	r2, #0
 801a816:	f000 8193 	beq.w	801ab40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801a81a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a81e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a822:	940b      	str	r4, [sp, #44]	; 0x2c
 801a824:	0e24      	lsrs	r4, r4, #24
 801a826:	9412      	str	r4, [sp, #72]	; 0x48
 801a828:	b178      	cbz	r0, 801a84a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801a82a:	eb08 0c01 	add.w	ip, r8, r1
 801a82e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a832:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a836:	9108      	str	r1, [sp, #32]
 801a838:	0e09      	lsrs	r1, r1, #24
 801a83a:	9110      	str	r1, [sp, #64]	; 0x40
 801a83c:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a840:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a844:	910c      	str	r1, [sp, #48]	; 0x30
 801a846:	0e09      	lsrs	r1, r1, #24
 801a848:	9113      	str	r1, [sp, #76]	; 0x4c
 801a84a:	b292      	uxth	r2, r2
 801a84c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a84e:	b280      	uxth	r0, r0
 801a850:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a852:	fb02 f900 	mul.w	r9, r2, r0
 801a856:	0112      	lsls	r2, r2, #4
 801a858:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a85c:	eba2 0809 	sub.w	r8, r2, r9
 801a860:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a864:	b280      	uxth	r0, r0
 801a866:	fa1f f888 	uxth.w	r8, r8
 801a86a:	1a12      	subs	r2, r2, r0
 801a86c:	fb08 f101 	mul.w	r1, r8, r1
 801a870:	b292      	uxth	r2, r2
 801a872:	fb02 110e 	mla	r1, r2, lr, r1
 801a876:	fb00 1104 	mla	r1, r0, r4, r1
 801a87a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a87c:	fb09 1104 	mla	r1, r9, r4, r1
 801a880:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a884:	2900      	cmp	r1, #0
 801a886:	f000 80de 	beq.w	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801a88a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a88e:	d01b      	beq.n	801a8c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 801a890:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a894:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a898:	fb0e fa0a 	mul.w	sl, lr, sl
 801a89c:	fb0e fe03 	mul.w	lr, lr, r3
 801a8a0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a8a4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a8a8:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a8ac:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8b0:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a8b4:	4453      	add	r3, sl
 801a8b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a8ba:	0a1b      	lsrs	r3, r3, #8
 801a8bc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a8c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a8c4:	ea43 030c 	orr.w	r3, r3, ip
 801a8c8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8ca:	2cff      	cmp	r4, #255	; 0xff
 801a8cc:	d021      	beq.n	801a912 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801a8ce:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a8d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a8d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8d6:	fb04 fb0b 	mul.w	fp, r4, fp
 801a8da:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a8dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a8e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a8e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a8e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a8ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801a8ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a8f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a8f6:	44de      	add	lr, fp
 801a8f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a8fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a904:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a908:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a90c:	ea4e 040a 	orr.w	r4, lr, sl
 801a910:	940b      	str	r4, [sp, #44]	; 0x2c
 801a912:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a914:	2cff      	cmp	r4, #255	; 0xff
 801a916:	d021      	beq.n	801a95c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801a918:	9c08      	ldr	r4, [sp, #32]
 801a91a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a91e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a920:	fb04 fb0b 	mul.w	fp, r4, fp
 801a924:	9c08      	ldr	r4, [sp, #32]
 801a926:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a92a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a92c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a930:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a934:	fb04 fa0a 	mul.w	sl, r4, sl
 801a938:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a93c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a940:	44de      	add	lr, fp
 801a942:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a946:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a94a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a94e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a952:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a956:	ea4e 040a 	orr.w	r4, lr, sl
 801a95a:	9408      	str	r4, [sp, #32]
 801a95c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a95e:	2cff      	cmp	r4, #255	; 0xff
 801a960:	d021      	beq.n	801a9a6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801a962:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a964:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a968:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a96a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a96e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a970:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a974:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a976:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a97a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a97e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a982:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a986:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a98a:	44de      	add	lr, fp
 801a98c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a990:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a998:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a99c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a9a0:	ea4e 040a 	orr.w	r4, lr, sl
 801a9a4:	940c      	str	r4, [sp, #48]	; 0x30
 801a9a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a9a8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a9ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a9b0:	43c9      	mvns	r1, r1
 801a9b2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a9b6:	9c08      	ldr	r4, [sp, #32]
 801a9b8:	b2c9      	uxtb	r1, r1
 801a9ba:	fb08 fc0c 	mul.w	ip, r8, ip
 801a9be:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a9c2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a9c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a9c8:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a9cc:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a9d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a9d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a9d6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a9da:	fb08 f80e 	mul.w	r8, r8, lr
 801a9de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a9e2:	fb02 8303 	mla	r3, r2, r3, r8
 801a9e6:	9a08      	ldr	r2, [sp, #32]
 801a9e8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a9ec:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9f2:	fb00 330a 	mla	r3, r0, sl, r3
 801a9f6:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a9fa:	fb09 3900 	mla	r9, r9, r0, r3
 801a9fe:	783b      	ldrb	r3, [r7, #0]
 801aa00:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801aa04:	fb03 f201 	mul.w	r2, r3, r1
 801aa08:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801aa0c:	1c53      	adds	r3, r2, #1
 801aa0e:	ea4c 0c09 	orr.w	ip, ip, r9
 801aa12:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa16:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801aa1a:	703b      	strb	r3, [r7, #0]
 801aa1c:	787b      	ldrb	r3, [r7, #1]
 801aa1e:	434b      	muls	r3, r1
 801aa20:	1c5a      	adds	r2, r3, #1
 801aa22:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aa26:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801aa2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801aa2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801aa32:	707b      	strb	r3, [r7, #1]
 801aa34:	78bb      	ldrb	r3, [r7, #2]
 801aa36:	4359      	muls	r1, r3
 801aa38:	1c4b      	adds	r3, r1, #1
 801aa3a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801aa3e:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801aa42:	f887 c002 	strb.w	ip, [r7, #2]
 801aa46:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801aa48:	3703      	adds	r7, #3
 801aa4a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801aa4c:	441a      	add	r2, r3
 801aa4e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa50:	441d      	add	r5, r3
 801aa52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa54:	922f      	str	r2, [sp, #188]	; 0xbc
 801aa56:	3b01      	subs	r3, #1
 801aa58:	9317      	str	r3, [sp, #92]	; 0x5c
 801aa5a:	e6b0      	b.n	801a7be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801aa5c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801aa5e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801aa60:	441c      	add	r4, r3
 801aa62:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801aa64:	441d      	add	r5, r3
 801aa66:	9b07      	ldr	r3, [sp, #28]
 801aa68:	942f      	str	r4, [sp, #188]	; 0xbc
 801aa6a:	3b01      	subs	r3, #1
 801aa6c:	9307      	str	r3, [sp, #28]
 801aa6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa70:	3303      	adds	r3, #3
 801aa72:	930a      	str	r3, [sp, #40]	; 0x28
 801aa74:	e683      	b.n	801a77e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801aa76:	d026      	beq.n	801aac6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801aa78:	9b07      	ldr	r3, [sp, #28]
 801aa7a:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801aa7c:	3b01      	subs	r3, #1
 801aa7e:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801aa80:	fb00 4003 	mla	r0, r0, r3, r4
 801aa84:	1400      	asrs	r0, r0, #16
 801aa86:	f53f ae97 	bmi.w	801a7b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa8a:	3901      	subs	r1, #1
 801aa8c:	4288      	cmp	r0, r1
 801aa8e:	f6bf ae93 	bge.w	801a7b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa92:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801aa94:	fb01 5303 	mla	r3, r1, r3, r5
 801aa98:	141b      	asrs	r3, r3, #16
 801aa9a:	f53f ae8d 	bmi.w	801a7b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aa9e:	3a01      	subs	r2, #1
 801aaa0:	4293      	cmp	r3, r2
 801aaa2:	f6bf ae89 	bge.w	801a7b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801aaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aaa8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801aaac:	f103 0e03 	add.w	lr, r3, #3
 801aab0:	f1bb 0f00 	cmp.w	fp, #0
 801aab4:	dc6d      	bgt.n	801ab92 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 801aab6:	9b07      	ldr	r3, [sp, #28]
 801aab8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aabe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aac2:	4423      	add	r3, r4
 801aac4:	930a      	str	r3, [sp, #40]	; 0x28
 801aac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	f340 81a0 	ble.w	801ae0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801aace:	ee3a aa0c 	vadd.f32	s20, s20, s24
 801aad2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801aad4:	ee79 9aab 	vadd.f32	s19, s19, s23
 801aad8:	eef0 6a48 	vmov.f32	s13, s16
 801aadc:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 801aae0:	ee39 9a0b 	vadd.f32	s18, s18, s22
 801aae4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aae8:	edcd 6a2f 	vstr	s13, [sp, #188]	; 0xbc
 801aaec:	eef0 6a68 	vmov.f32	s13, s17
 801aaf0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aaf4:	ee16 5a90 	vmov	r5, s13
 801aaf8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801aafc:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ab00:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ab04:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ab08:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ab0c:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ab10:	ee18 2a10 	vmov	r2, s16
 801ab14:	eeb0 8a47 	vmov.f32	s16, s14
 801ab18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab1c:	ee18 2a90 	vmov	r2, s17
 801ab20:	9331      	str	r3, [sp, #196]	; 0xc4
 801ab22:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ab24:	eef0 8a67 	vmov.f32	s17, s15
 801ab28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab2c:	9332      	str	r3, [sp, #200]	; 0xc8
 801ab2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ab30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab32:	3b01      	subs	r3, #1
 801ab34:	9316      	str	r3, [sp, #88]	; 0x58
 801ab36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ab38:	bf08      	it	eq
 801ab3a:	4613      	moveq	r3, r2
 801ab3c:	9307      	str	r3, [sp, #28]
 801ab3e:	e610      	b.n	801a762 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ab40:	2800      	cmp	r0, #0
 801ab42:	f43f ae82 	beq.w	801a84a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ab46:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ab4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ab4e:	9108      	str	r1, [sp, #32]
 801ab50:	0e09      	lsrs	r1, r1, #24
 801ab52:	9110      	str	r1, [sp, #64]	; 0x40
 801ab54:	e679      	b.n	801a84a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801ab56:	f113 0801 	adds.w	r8, r3, #1
 801ab5a:	f53f af74 	bmi.w	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab5e:	4541      	cmp	r1, r8
 801ab60:	f6ff af71 	blt.w	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab64:	f11c 0801 	adds.w	r8, ip, #1
 801ab68:	f53f af6d 	bmi.w	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab6c:	45c6      	cmp	lr, r8
 801ab6e:	f6ff af6a 	blt.w	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab72:	b209      	sxth	r1, r1
 801ab74:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ab78:	fa0f f38e 	sxth.w	r3, lr
 801ab7c:	9100      	str	r1, [sp, #0]
 801ab7e:	4639      	mov	r1, r7
 801ab80:	9301      	str	r3, [sp, #4]
 801ab82:	4633      	mov	r3, r6
 801ab84:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ab88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ab8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ab8c:	f7ff fc70 	bl	801a470 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801ab90:	e759      	b.n	801aa46 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ab92:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801ab94:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ab98:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 801ab9a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ab9e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801aba0:	1427      	asrs	r7, r4, #16
 801aba2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aba4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aba8:	142b      	asrs	r3, r5, #16
 801abaa:	fb01 7303 	mla	r3, r1, r3, r7
 801abae:	18e7      	adds	r7, r4, r3
 801abb0:	5ce3      	ldrb	r3, [r4, r3]
 801abb2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801abb6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801abba:	2a00      	cmp	r2, #0
 801abbc:	f000 811d 	beq.w	801adfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801abc0:	f897 8001 	ldrb.w	r8, [r7, #1]
 801abc4:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801abc8:	940d      	str	r4, [sp, #52]	; 0x34
 801abca:	0e24      	lsrs	r4, r4, #24
 801abcc:	9414      	str	r4, [sp, #80]	; 0x50
 801abce:	b170      	cbz	r0, 801abee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801abd0:	eb07 0801 	add.w	r8, r7, r1
 801abd4:	5c79      	ldrb	r1, [r7, r1]
 801abd6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801abda:	9109      	str	r1, [sp, #36]	; 0x24
 801abdc:	0e09      	lsrs	r1, r1, #24
 801abde:	9111      	str	r1, [sp, #68]	; 0x44
 801abe0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801abe4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801abe8:	910e      	str	r1, [sp, #56]	; 0x38
 801abea:	0e09      	lsrs	r1, r1, #24
 801abec:	9115      	str	r1, [sp, #84]	; 0x54
 801abee:	b292      	uxth	r2, r2
 801abf0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801abf2:	b280      	uxth	r0, r0
 801abf4:	fb02 f900 	mul.w	r9, r2, r0
 801abf8:	0112      	lsls	r2, r2, #4
 801abfa:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801abfe:	eba2 0809 	sub.w	r8, r2, r9
 801ac02:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801ac06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ac08:	b280      	uxth	r0, r0
 801ac0a:	fa1f f888 	uxth.w	r8, r8
 801ac0e:	1a09      	subs	r1, r1, r0
 801ac10:	fb08 f202 	mul.w	r2, r8, r2
 801ac14:	b289      	uxth	r1, r1
 801ac16:	fb01 220c 	mla	r2, r1, ip, r2
 801ac1a:	fb00 2204 	mla	r2, r0, r4, r2
 801ac1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ac20:	fb09 2204 	mla	r2, r9, r4, r2
 801ac24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ac28:	2a00      	cmp	r2, #0
 801ac2a:	f000 80db 	beq.w	801ade4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 801ac2e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ac32:	d019      	beq.n	801ac68 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x560>
 801ac34:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ac38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ac3c:	fb0c fa0a 	mul.w	sl, ip, sl
 801ac40:	fb0c fc03 	mul.w	ip, ip, r3
 801ac44:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ac48:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ac4c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ac50:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ac54:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ac58:	4453      	add	r3, sl
 801ac5a:	0a3f      	lsrs	r7, r7, #8
 801ac5c:	0a1b      	lsrs	r3, r3, #8
 801ac5e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ac62:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ac66:	433b      	orrs	r3, r7
 801ac68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac6a:	2cff      	cmp	r4, #255	; 0xff
 801ac6c:	d020      	beq.n	801acb0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a8>
 801ac6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ac70:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ac74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac76:	4367      	muls	r7, r4
 801ac78:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ac7a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ac7e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ac82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ac84:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ac88:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ac8c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ac90:	44bc      	add	ip, r7
 801ac92:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ac96:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac9a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ac9e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aca2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801aca6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801acaa:	ea4c 040a 	orr.w	r4, ip, sl
 801acae:	940d      	str	r4, [sp, #52]	; 0x34
 801acb0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acb2:	2cff      	cmp	r4, #255	; 0xff
 801acb4:	d020      	beq.n	801acf8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f0>
 801acb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acb8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801acbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801acbe:	4367      	muls	r7, r4
 801acc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801acc2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801acc6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801acca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801accc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801acd0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acd4:	fb04 fa0a 	mul.w	sl, r4, sl
 801acd8:	44bc      	add	ip, r7
 801acda:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801acde:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ace2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ace6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801acea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801acee:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801acf2:	ea4c 040a 	orr.w	r4, ip, sl
 801acf6:	9409      	str	r4, [sp, #36]	; 0x24
 801acf8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801acfa:	2cff      	cmp	r4, #255	; 0xff
 801acfc:	d020      	beq.n	801ad40 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x638>
 801acfe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad00:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad04:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad06:	4367      	muls	r7, r4
 801ad08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad0a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ad0e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ad12:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ad14:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ad18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad1c:	fb04 fa0a 	mul.w	sl, r4, sl
 801ad20:	44bc      	add	ip, r7
 801ad22:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ad26:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad2a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ad2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ad32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ad36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ad3a:	ea4c 040a 	orr.w	r4, ip, sl
 801ad3e:	940e      	str	r4, [sp, #56]	; 0x38
 801ad40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ad42:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ad46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ad4a:	43d2      	mvns	r2, r2
 801ad4c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ad50:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ad52:	b2d2      	uxtb	r2, r2
 801ad54:	fb08 f707 	mul.w	r7, r8, r7
 801ad58:	fb01 770c 	mla	r7, r1, ip, r7
 801ad5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ad60:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ad62:	fb00 770c 	mla	r7, r0, ip, r7
 801ad66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ad6a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ad6c:	fb09 770c 	mla	r7, r9, ip, r7
 801ad70:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ad74:	fb08 f80c 	mul.w	r8, r8, ip
 801ad78:	0a3f      	lsrs	r7, r7, #8
 801ad7a:	fb01 8303 	mla	r3, r1, r3, r8
 801ad7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ad80:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ad84:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ad88:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ad8a:	fb00 330a 	mla	r3, r0, sl, r3
 801ad8e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ad92:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ad96:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ad9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ad9e:	fb03 f102 	mul.w	r1, r3, r2
 801ada2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ada6:	1c4b      	adds	r3, r1, #1
 801ada8:	ea47 070c 	orr.w	r7, r7, ip
 801adac:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801adb0:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801adb4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801adb8:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801adbc:	4353      	muls	r3, r2
 801adbe:	1c59      	adds	r1, r3, #1
 801adc0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801adc4:	0a3b      	lsrs	r3, r7, #8
 801adc6:	0c3f      	lsrs	r7, r7, #16
 801adc8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801adcc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801add0:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801add4:	435a      	muls	r2, r3
 801add6:	1c53      	adds	r3, r2, #1
 801add8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801addc:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ade0:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ade4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801ade6:	f10e 0e03 	add.w	lr, lr, #3
 801adea:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801adec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801adf0:	441a      	add	r2, r3
 801adf2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801adf4:	922f      	str	r2, [sp, #188]	; 0xbc
 801adf6:	441d      	add	r5, r3
 801adf8:	e65a      	b.n	801aab0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801adfa:	2800      	cmp	r0, #0
 801adfc:	f43f aef7 	beq.w	801abee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ae00:	5c79      	ldrb	r1, [r7, r1]
 801ae02:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ae06:	9109      	str	r1, [sp, #36]	; 0x24
 801ae08:	0e09      	lsrs	r1, r1, #24
 801ae0a:	9111      	str	r1, [sp, #68]	; 0x44
 801ae0c:	e6ef      	b.n	801abee <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ae0e:	b01b      	add	sp, #108	; 0x6c
 801ae10:	ecbd 8b0a 	vpop	{d8-d12}
 801ae14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae1c:	b08d      	sub	sp, #52	; 0x34
 801ae1e:	e9dd 5717 	ldrd	r5, r7, [sp, #92]	; 0x5c
 801ae22:	9103      	str	r1, [sp, #12]
 801ae24:	fb07 5803 	mla	r8, r7, r3, r5
 801ae28:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ae2c:	9803      	ldr	r0, [sp, #12]
 801ae2e:	2f00      	cmp	r7, #0
 801ae30:	910b      	str	r1, [sp, #44]	; 0x2c
 801ae32:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae36:	9903      	ldr	r1, [sp, #12]
 801ae38:	9c03      	ldr	r4, [sp, #12]
 801ae3a:	eb02 0608 	add.w	r6, r2, r8
 801ae3e:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801ae42:	f89d c064 	ldrb.w	ip, [sp, #100]	; 0x64
 801ae46:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801ae4a:	7809      	ldrb	r1, [r1, #0]
 801ae4c:	7840      	ldrb	r0, [r0, #1]
 801ae4e:	78a4      	ldrb	r4, [r4, #2]
 801ae50:	db51      	blt.n	801aef6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ae52:	45be      	cmp	lr, r7
 801ae54:	dd4f      	ble.n	801aef6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xde>
 801ae56:	2d00      	cmp	r5, #0
 801ae58:	db49      	blt.n	801aeee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ae5a:	42ab      	cmp	r3, r5
 801ae5c:	dd47      	ble.n	801aeee <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xd6>
 801ae5e:	f812 2008 	ldrb.w	r2, [r2, r8]
 801ae62:	9204      	str	r2, [sp, #16]
 801ae64:	7872      	ldrb	r2, [r6, #1]
 801ae66:	9205      	str	r2, [sp, #20]
 801ae68:	78b2      	ldrb	r2, [r6, #2]
 801ae6a:	9206      	str	r2, [sp, #24]
 801ae6c:	1c6a      	adds	r2, r5, #1
 801ae6e:	d449      	bmi.n	801af04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ae70:	4293      	cmp	r3, r2
 801ae72:	dd47      	ble.n	801af04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ae74:	f1bc 0f00 	cmp.w	ip, #0
 801ae78:	d044      	beq.n	801af04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xec>
 801ae7a:	7972      	ldrb	r2, [r6, #5]
 801ae7c:	f896 b003 	ldrb.w	fp, [r6, #3]
 801ae80:	f896 a004 	ldrb.w	sl, [r6, #4]
 801ae84:	9201      	str	r2, [sp, #4]
 801ae86:	3701      	adds	r7, #1
 801ae88:	d444      	bmi.n	801af14 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801ae8a:	45be      	cmp	lr, r7
 801ae8c:	dd42      	ble.n	801af14 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xfc>
 801ae8e:	f1b9 0f00 	cmp.w	r9, #0
 801ae92:	f000 80c1 	beq.w	801b018 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x200>
 801ae96:	2d00      	cmp	r5, #0
 801ae98:	db38      	blt.n	801af0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801ae9a:	42ab      	cmp	r3, r5
 801ae9c:	dd36      	ble.n	801af0c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xf4>
 801ae9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801aea2:	f816 8002 	ldrb.w	r8, [r6, r2]
 801aea6:	2203      	movs	r2, #3
 801aea8:	fb03 6702 	mla	r7, r3, r2, r6
 801aeac:	fb03 6202 	mla	r2, r3, r2, r6
 801aeb0:	787f      	ldrb	r7, [r7, #1]
 801aeb2:	f892 e002 	ldrb.w	lr, [r2, #2]
 801aeb6:	9702      	str	r7, [sp, #8]
 801aeb8:	3501      	adds	r5, #1
 801aeba:	d432      	bmi.n	801af22 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801aebc:	42ab      	cmp	r3, r5
 801aebe:	dd30      	ble.n	801af22 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x10a>
 801aec0:	f1bc 0f00 	cmp.w	ip, #0
 801aec4:	d031      	beq.n	801af2a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x112>
 801aec6:	2703      	movs	r7, #3
 801aec8:	fb13 7207 	smlabb	r2, r3, r7, r7
 801aecc:	5cb5      	ldrb	r5, [r6, r2]
 801aece:	fb03 6207 	mla	r2, r3, r7, r6
 801aed2:	fb03 6307 	mla	r3, r3, r7, r6
 801aed6:	7912      	ldrb	r2, [r2, #4]
 801aed8:	795e      	ldrb	r6, [r3, #5]
 801aeda:	f1bc 0f0f 	cmp.w	ip, #15
 801aede:	d927      	bls.n	801af30 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x118>
 801aee0:	4b53      	ldr	r3, [pc, #332]	; (801b030 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x218>)
 801aee2:	f240 115b 	movw	r1, #347	; 0x15b
 801aee6:	4a53      	ldr	r2, [pc, #332]	; (801b034 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x21c>)
 801aee8:	4853      	ldr	r0, [pc, #332]	; (801b038 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x220>)
 801aeea:	f005 f953 	bl	8020194 <__assert_func>
 801aeee:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801aef2:	9104      	str	r1, [sp, #16]
 801aef4:	e7ba      	b.n	801ae6c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x54>
 801aef6:	9401      	str	r4, [sp, #4]
 801aef8:	4682      	mov	sl, r0
 801aefa:	468b      	mov	fp, r1
 801aefc:	9104      	str	r1, [sp, #16]
 801aefe:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801af02:	e7c0      	b.n	801ae86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801af04:	9401      	str	r4, [sp, #4]
 801af06:	4682      	mov	sl, r0
 801af08:	468b      	mov	fp, r1
 801af0a:	e7bc      	b.n	801ae86 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x6e>
 801af0c:	46a6      	mov	lr, r4
 801af0e:	9002      	str	r0, [sp, #8]
 801af10:	4688      	mov	r8, r1
 801af12:	e7d1      	b.n	801aeb8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xa0>
 801af14:	4626      	mov	r6, r4
 801af16:	4602      	mov	r2, r0
 801af18:	460d      	mov	r5, r1
 801af1a:	46a6      	mov	lr, r4
 801af1c:	9002      	str	r0, [sp, #8]
 801af1e:	4688      	mov	r8, r1
 801af20:	e7db      	b.n	801aeda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801af22:	4626      	mov	r6, r4
 801af24:	4602      	mov	r2, r0
 801af26:	460d      	mov	r5, r1
 801af28:	e7d7      	b.n	801aeda <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc2>
 801af2a:	4626      	mov	r6, r4
 801af2c:	4602      	mov	r2, r0
 801af2e:	460d      	mov	r5, r1
 801af30:	f1b9 0f0f 	cmp.w	r9, #15
 801af34:	d8d4      	bhi.n	801aee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801af36:	fa1f f38c 	uxth.w	r3, ip
 801af3a:	fa1f fc89 	uxth.w	ip, r9
 801af3e:	fb03 f70c 	mul.w	r7, r3, ip
 801af42:	011b      	lsls	r3, r3, #4
 801af44:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801af48:	9707      	str	r7, [sp, #28]
 801af4a:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801af4e:	fa1f fc8c 	uxth.w	ip, ip
 801af52:	eba7 070c 	sub.w	r7, r7, ip
 801af56:	b2bf      	uxth	r7, r7
 801af58:	9709      	str	r7, [sp, #36]	; 0x24
 801af5a:	9f07      	ldr	r7, [sp, #28]
 801af5c:	1bdb      	subs	r3, r3, r7
 801af5e:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801af62:	b29b      	uxth	r3, r3
 801af64:	9708      	str	r7, [sp, #32]
 801af66:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801af68:	930a      	str	r3, [sp, #40]	; 0x28
 801af6a:	ea6f 0907 	mvn.w	r9, r7
 801af6e:	fb03 fb0b 	mul.w	fp, r3, fp
 801af72:	9f04      	ldr	r7, [sp, #16]
 801af74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af76:	fa5f f989 	uxtb.w	r9, r9
 801af7a:	fb03 bb07 	mla	fp, r3, r7, fp
 801af7e:	9f07      	ldr	r7, [sp, #28]
 801af80:	fb11 f109 	smulbb	r1, r1, r9
 801af84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af86:	fb0c b808 	mla	r8, ip, r8, fp
 801af8a:	fb10 f009 	smulbb	r0, r0, r9
 801af8e:	fb14 f409 	smulbb	r4, r4, r9
 801af92:	fb07 8805 	mla	r8, r7, r5, r8
 801af96:	9d08      	ldr	r5, [sp, #32]
 801af98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801af9a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801af9e:	fb08 1805 	mla	r8, r8, r5, r1
 801afa2:	9d05      	ldr	r5, [sp, #20]
 801afa4:	fa1f f888 	uxth.w	r8, r8
 801afa8:	f108 0101 	add.w	r1, r8, #1
 801afac:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801afb0:	9903      	ldr	r1, [sp, #12]
 801afb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801afb6:	f881 8000 	strb.w	r8, [r1]
 801afba:	fb03 f10a 	mul.w	r1, r3, sl
 801afbe:	fb07 1105 	mla	r1, r7, r5, r1
 801afc2:	9d02      	ldr	r5, [sp, #8]
 801afc4:	fb0c 1105 	mla	r1, ip, r5, r1
 801afc8:	9d07      	ldr	r5, [sp, #28]
 801afca:	fb05 1102 	mla	r1, r5, r2, r1
 801afce:	9a08      	ldr	r2, [sp, #32]
 801afd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801afd4:	fb01 0102 	mla	r1, r1, r2, r0
 801afd8:	9a03      	ldr	r2, [sp, #12]
 801afda:	b289      	uxth	r1, r1
 801afdc:	1c48      	adds	r0, r1, #1
 801afde:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801afe2:	1209      	asrs	r1, r1, #8
 801afe4:	7051      	strb	r1, [r2, #1]
 801afe6:	9a01      	ldr	r2, [sp, #4]
 801afe8:	4353      	muls	r3, r2
 801afea:	9a06      	ldr	r2, [sp, #24]
 801afec:	fb07 3702 	mla	r7, r7, r2, r3
 801aff0:	9b08      	ldr	r3, [sp, #32]
 801aff2:	fb0c 7c0e 	mla	ip, ip, lr, r7
 801aff6:	fb05 c606 	mla	r6, r5, r6, ip
 801affa:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801affe:	fb06 4603 	mla	r6, r6, r3, r4
 801b002:	9b03      	ldr	r3, [sp, #12]
 801b004:	b2b6      	uxth	r6, r6
 801b006:	f106 0e01 	add.w	lr, r6, #1
 801b00a:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801b00e:	1236      	asrs	r6, r6, #8
 801b010:	709e      	strb	r6, [r3, #2]
 801b012:	b00d      	add	sp, #52	; 0x34
 801b014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b018:	f1bc 0f0f 	cmp.w	ip, #15
 801b01c:	f63f af60 	bhi.w	801aee0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xc8>
 801b020:	4626      	mov	r6, r4
 801b022:	4602      	mov	r2, r0
 801b024:	460d      	mov	r5, r1
 801b026:	46a6      	mov	lr, r4
 801b028:	9002      	str	r0, [sp, #8]
 801b02a:	4688      	mov	r8, r1
 801b02c:	e783      	b.n	801af36 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x11e>
 801b02e:	bf00      	nop
 801b030:	080261a0 	.word	0x080261a0
 801b034:	080265b6 	.word	0x080265b6
 801b038:	0802616d 	.word	0x0802616d

0801b03c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b040:	ed2d 8b08 	vpush	{d8-d11}
 801b044:	b09f      	sub	sp, #124	; 0x7c
 801b046:	eeb0 aa40 	vmov.f32	s20, s0
 801b04a:	eef0 9a60 	vmov.f32	s19, s1
 801b04e:	920e      	str	r2, [sp, #56]	; 0x38
 801b050:	eeb0 9a41 	vmov.f32	s18, s2
 801b054:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801b056:	eeb0 8a62 	vmov.f32	s16, s5
 801b05a:	9307      	str	r3, [sp, #28]
 801b05c:	eef0 8a43 	vmov.f32	s17, s6
 801b060:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 801b064:	eef0 ba44 	vmov.f32	s23, s8
 801b068:	901d      	str	r0, [sp, #116]	; 0x74
 801b06a:	eeb0 ba64 	vmov.f32	s22, s9
 801b06e:	930c      	str	r3, [sp, #48]	; 0x30
 801b070:	eef0 aa45 	vmov.f32	s21, s10
 801b074:	6850      	ldr	r0, [r2, #4]
 801b076:	910b      	str	r1, [sp, #44]	; 0x2c
 801b078:	6812      	ldr	r2, [r2, #0]
 801b07a:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 801b07e:	e9dd a831 	ldrd	sl, r8, [sp, #196]	; 0xc4
 801b082:	fb00 1303 	mla	r3, r0, r3, r1
 801b086:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b08a:	18d3      	adds	r3, r2, r3
 801b08c:	9308      	str	r3, [sp, #32]
 801b08e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	930a      	str	r3, [sp, #40]	; 0x28
 801b094:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b096:	43db      	mvns	r3, r3
 801b098:	b2db      	uxtb	r3, r3
 801b09a:	9309      	str	r3, [sp, #36]	; 0x24
 801b09c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	dc03      	bgt.n	801b0aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b0a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	f340 81f5 	ble.w	801b494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b0aa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b0ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b0b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b0b4:	1e48      	subs	r0, r1, #1
 801b0b6:	1e54      	subs	r4, r2, #1
 801b0b8:	9b07      	ldr	r3, [sp, #28]
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	f340 80d5 	ble.w	801b26a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801b0c0:	ea5f 452a 	movs.w	r5, sl, asr #16
 801b0c4:	ea4f 4328 	mov.w	r3, r8, asr #16
 801b0c8:	d406      	bmi.n	801b0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b0ca:	4285      	cmp	r5, r0
 801b0cc:	da04      	bge.n	801b0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	db02      	blt.n	801b0d8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801b0d2:	42a3      	cmp	r3, r4
 801b0d4:	f2c0 80ca 	blt.w	801b26c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801b0d8:	3501      	adds	r5, #1
 801b0da:	f100 80bb 	bmi.w	801b254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b0de:	42a9      	cmp	r1, r5
 801b0e0:	f2c0 80b8 	blt.w	801b254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b0e4:	3301      	adds	r3, #1
 801b0e6:	f100 80b5 	bmi.w	801b254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b0ea:	429a      	cmp	r2, r3
 801b0ec:	f2c0 80b2 	blt.w	801b254 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801b0f0:	9b07      	ldr	r3, [sp, #28]
 801b0f2:	9d08      	ldr	r5, [sp, #32]
 801b0f4:	930d      	str	r3, [sp, #52]	; 0x34
 801b0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0f8:	2b00      	cmp	r3, #0
 801b0fa:	f340 80d6 	ble.w	801b2aa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801b0fe:	9838      	ldr	r0, [sp, #224]	; 0xe0
 801b100:	ea4f 4428 	mov.w	r4, r8, asr #16
 801b104:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 801b106:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801b10a:	68c6      	ldr	r6, [r0, #12]
 801b10c:	ea5f 402a 	movs.w	r0, sl, asr #16
 801b110:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801b114:	689b      	ldr	r3, [r3, #8]
 801b116:	f100 810f 	bmi.w	801b338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b11a:	1e5f      	subs	r7, r3, #1
 801b11c:	42b8      	cmp	r0, r7
 801b11e:	f280 810b 	bge.w	801b338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b122:	2c00      	cmp	r4, #0
 801b124:	f2c0 8108 	blt.w	801b338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b128:	1e77      	subs	r7, r6, #1
 801b12a:	42bc      	cmp	r4, r7
 801b12c:	f280 8104 	bge.w	801b338 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 801b130:	b21b      	sxth	r3, r3
 801b132:	fb04 0003 	mla	r0, r4, r3, r0
 801b136:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b138:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b13c:	1826      	adds	r6, r4, r0
 801b13e:	5c24      	ldrb	r4, [r4, r0]
 801b140:	78b7      	ldrb	r7, [r6, #2]
 801b142:	7870      	ldrb	r0, [r6, #1]
 801b144:	970f      	str	r7, [sp, #60]	; 0x3c
 801b146:	7977      	ldrb	r7, [r6, #5]
 801b148:	f896 e003 	ldrb.w	lr, [r6, #3]
 801b14c:	f896 c004 	ldrb.w	ip, [r6, #4]
 801b150:	9710      	str	r7, [sp, #64]	; 0x40
 801b152:	b1c9      	cbz	r1, 801b188 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801b154:	f04f 0b03 	mov.w	fp, #3
 801b158:	f06f 0904 	mvn.w	r9, #4
 801b15c:	3605      	adds	r6, #5
 801b15e:	fb13 930b 	smlabb	r3, r3, fp, r9
 801b162:	eb06 0b03 	add.w	fp, r6, r3
 801b166:	5cf3      	ldrb	r3, [r6, r3]
 801b168:	9311      	str	r3, [sp, #68]	; 0x44
 801b16a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801b16e:	9313      	str	r3, [sp, #76]	; 0x4c
 801b170:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b174:	9315      	str	r3, [sp, #84]	; 0x54
 801b176:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801b17a:	9312      	str	r3, [sp, #72]	; 0x48
 801b17c:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801b180:	9314      	str	r3, [sp, #80]	; 0x50
 801b182:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801b186:	9316      	str	r3, [sp, #88]	; 0x58
 801b188:	b292      	uxth	r2, r2
 801b18a:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801b18c:	b289      	uxth	r1, r1
 801b18e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b192:	fb02 f601 	mul.w	r6, r2, r1
 801b196:	0112      	lsls	r2, r2, #4
 801b198:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801b19c:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801b1a0:	1b92      	subs	r2, r2, r6
 801b1a2:	b289      	uxth	r1, r1
 801b1a4:	b292      	uxth	r2, r2
 801b1a6:	eba9 0901 	sub.w	r9, r9, r1
 801b1aa:	fb02 fe0e 	mul.w	lr, r2, lr
 801b1ae:	fa1f f989 	uxth.w	r9, r9
 801b1b2:	fb02 fc0c 	mul.w	ip, r2, ip
 801b1b6:	fb09 e404 	mla	r4, r9, r4, lr
 801b1ba:	f895 e000 	ldrb.w	lr, [r5]
 801b1be:	fb09 c000 	mla	r0, r9, r0, ip
 801b1c2:	fb01 4407 	mla	r4, r1, r7, r4
 801b1c6:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801b1c8:	fb06 4407 	mla	r4, r6, r7, r4
 801b1cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b1ce:	fb1e fe07 	smulbb	lr, lr, r7
 801b1d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b1d6:	fb04 e403 	mla	r4, r4, r3, lr
 801b1da:	b2a4      	uxth	r4, r4
 801b1dc:	f104 0e01 	add.w	lr, r4, #1
 801b1e0:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801b1e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1e6:	fb01 0004 	mla	r0, r1, r4, r0
 801b1ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b1ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b1f0:	fb06 0004 	mla	r0, r6, r4, r0
 801b1f4:	786c      	ldrb	r4, [r5, #1]
 801b1f6:	f885 e000 	strb.w	lr, [r5]
 801b1fa:	fb14 f407 	smulbb	r4, r4, r7
 801b1fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b202:	fb00 4003 	mla	r0, r0, r3, r4
 801b206:	b280      	uxth	r0, r0
 801b208:	1c44      	adds	r4, r0, #1
 801b20a:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b20e:	1200      	asrs	r0, r0, #8
 801b210:	7068      	strb	r0, [r5, #1]
 801b212:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b214:	4342      	muls	r2, r0
 801b216:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b218:	fb09 2200 	mla	r2, r9, r0, r2
 801b21c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b21e:	fb01 2100 	mla	r1, r1, r0, r2
 801b222:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b224:	fb06 1602 	mla	r6, r6, r2, r1
 801b228:	78a9      	ldrb	r1, [r5, #2]
 801b22a:	fb11 f107 	smulbb	r1, r1, r7
 801b22e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b232:	fb06 1303 	mla	r3, r6, r3, r1
 801b236:	b29b      	uxth	r3, r3
 801b238:	1c5e      	adds	r6, r3, #1
 801b23a:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b23e:	121b      	asrs	r3, r3, #8
 801b240:	70ab      	strb	r3, [r5, #2]
 801b242:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b244:	3503      	adds	r5, #3
 801b246:	449a      	add	sl, r3
 801b248:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b24a:	4498      	add	r8, r3
 801b24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b24e:	3b01      	subs	r3, #1
 801b250:	930d      	str	r3, [sp, #52]	; 0x34
 801b252:	e750      	b.n	801b0f6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801b254:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b256:	449a      	add	sl, r3
 801b258:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b25a:	4498      	add	r8, r3
 801b25c:	9b07      	ldr	r3, [sp, #28]
 801b25e:	3b01      	subs	r3, #1
 801b260:	9307      	str	r3, [sp, #28]
 801b262:	9b08      	ldr	r3, [sp, #32]
 801b264:	3303      	adds	r3, #3
 801b266:	9308      	str	r3, [sp, #32]
 801b268:	e726      	b.n	801b0b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b26a:	d026      	beq.n	801b2ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b26c:	9b07      	ldr	r3, [sp, #28]
 801b26e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 801b270:	3b01      	subs	r3, #1
 801b272:	fb00 a003 	mla	r0, r0, r3, sl
 801b276:	1400      	asrs	r0, r0, #16
 801b278:	f53f af3a 	bmi.w	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b27c:	3901      	subs	r1, #1
 801b27e:	4288      	cmp	r0, r1
 801b280:	f6bf af36 	bge.w	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b284:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801b286:	fb01 8303 	mla	r3, r1, r3, r8
 801b28a:	141b      	asrs	r3, r3, #16
 801b28c:	f53f af30 	bmi.w	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b290:	3a01      	subs	r2, #1
 801b292:	4293      	cmp	r3, r2
 801b294:	f6bf af2c 	bge.w	801b0f0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801b298:	9b08      	ldr	r3, [sp, #32]
 801b29a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b29e:	1cdd      	adds	r5, r3, #3
 801b2a0:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b2a4:	f1bc 0f00 	cmp.w	ip, #0
 801b2a8:	dc5f      	bgt.n	801b36a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801b2aa:	9b07      	ldr	r3, [sp, #28]
 801b2ac:	9a08      	ldr	r2, [sp, #32]
 801b2ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b2b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b2b6:	441a      	add	r2, r3
 801b2b8:	9208      	str	r2, [sp, #32]
 801b2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	f340 80e9 	ble.w	801b494 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x458>
 801b2c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b2c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b2c8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b2cc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b2d0:	eef0 6a48 	vmov.f32	s13, s16
 801b2d4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b2d8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b2dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2e0:	ee16 aa90 	vmov	sl, s13
 801b2e4:	eef0 6a68 	vmov.f32	s13, s17
 801b2e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b2ec:	ee16 8a90 	vmov	r8, s13
 801b2f0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b2f4:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b2f8:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b2fc:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b300:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b304:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b308:	ee18 2a10 	vmov	r2, s16
 801b30c:	eeb0 8a47 	vmov.f32	s16, s14
 801b310:	fb92 f3f3 	sdiv	r3, r2, r3
 801b314:	ee18 2a90 	vmov	r2, s17
 801b318:	9333      	str	r3, [sp, #204]	; 0xcc
 801b31a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b31c:	eef0 8a67 	vmov.f32	s17, s15
 801b320:	fb92 f3f3 	sdiv	r3, r2, r3
 801b324:	9334      	str	r3, [sp, #208]	; 0xd0
 801b326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b32a:	3b01      	subs	r3, #1
 801b32c:	930b      	str	r3, [sp, #44]	; 0x2c
 801b32e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b330:	bf08      	it	eq
 801b332:	4613      	moveq	r3, r2
 801b334:	9307      	str	r3, [sp, #28]
 801b336:	e6b1      	b.n	801b09c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b338:	1c47      	adds	r7, r0, #1
 801b33a:	d482      	bmi.n	801b242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b33c:	42bb      	cmp	r3, r7
 801b33e:	db80      	blt.n	801b242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b340:	1c67      	adds	r7, r4, #1
 801b342:	f53f af7e 	bmi.w	801b242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b346:	42be      	cmp	r6, r7
 801b348:	f6ff af7b 	blt.w	801b242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b34c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b34e:	b236      	sxth	r6, r6
 801b350:	9001      	str	r0, [sp, #4]
 801b352:	b21b      	sxth	r3, r3
 801b354:	9600      	str	r6, [sp, #0]
 801b356:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b358:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b35c:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b360:	4629      	mov	r1, r5
 801b362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b364:	f7ff fd58 	bl	801ae18 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b368:	e76b      	b.n	801b242 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801b36a:	9938      	ldr	r1, [sp, #224]	; 0xe0
 801b36c:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b370:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b374:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b378:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b37c:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b380:	fb07 0101 	mla	r1, r7, r1, r0
 801b384:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b386:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b38a:	1844      	adds	r4, r0, r1
 801b38c:	5c40      	ldrb	r0, [r0, r1]
 801b38e:	78a6      	ldrb	r6, [r4, #2]
 801b390:	7861      	ldrb	r1, [r4, #1]
 801b392:	960f      	str	r6, [sp, #60]	; 0x3c
 801b394:	78e6      	ldrb	r6, [r4, #3]
 801b396:	910d      	str	r1, [sp, #52]	; 0x34
 801b398:	9610      	str	r6, [sp, #64]	; 0x40
 801b39a:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b39e:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b3a2:	b192      	cbz	r2, 801b3ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 801b3a4:	f06f 0604 	mvn.w	r6, #4
 801b3a8:	2103      	movs	r1, #3
 801b3aa:	3405      	adds	r4, #5
 801b3ac:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b3b0:	19e6      	adds	r6, r4, r7
 801b3b2:	5de4      	ldrb	r4, [r4, r7]
 801b3b4:	9417      	str	r4, [sp, #92]	; 0x5c
 801b3b6:	7874      	ldrb	r4, [r6, #1]
 801b3b8:	9419      	str	r4, [sp, #100]	; 0x64
 801b3ba:	78b4      	ldrb	r4, [r6, #2]
 801b3bc:	941b      	str	r4, [sp, #108]	; 0x6c
 801b3be:	78f4      	ldrb	r4, [r6, #3]
 801b3c0:	9418      	str	r4, [sp, #96]	; 0x60
 801b3c2:	7934      	ldrb	r4, [r6, #4]
 801b3c4:	941a      	str	r4, [sp, #104]	; 0x68
 801b3c6:	7974      	ldrb	r4, [r6, #5]
 801b3c8:	941c      	str	r4, [sp, #112]	; 0x70
 801b3ca:	b29b      	uxth	r3, r3
 801b3cc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b3ce:	b292      	uxth	r2, r2
 801b3d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b3d2:	3503      	adds	r5, #3
 801b3d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b3d8:	fb03 f402 	mul.w	r4, r3, r2
 801b3dc:	011b      	lsls	r3, r3, #4
 801b3de:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b3e2:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b3e6:	1b1b      	subs	r3, r3, r4
 801b3e8:	b292      	uxth	r2, r2
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	1ab6      	subs	r6, r6, r2
 801b3ee:	435f      	muls	r7, r3
 801b3f0:	b2b6      	uxth	r6, r6
 801b3f2:	fb03 f909 	mul.w	r9, r3, r9
 801b3f6:	fb03 fb0b 	mul.w	fp, r3, fp
 801b3fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b3fc:	fb06 7000 	mla	r0, r6, r0, r7
 801b400:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b402:	fb06 bb03 	mla	fp, r6, r3, fp
 801b406:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b408:	fb02 0007 	mla	r0, r2, r7, r0
 801b40c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b40e:	fb02 bb03 	mla	fp, r2, r3, fp
 801b412:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b414:	fb04 0007 	mla	r0, r4, r7, r0
 801b418:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b41c:	fb17 f701 	smulbb	r7, r7, r1
 801b420:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b424:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b426:	fb00 700e 	mla	r0, r0, lr, r7
 801b42a:	fb06 9101 	mla	r1, r6, r1, r9
 801b42e:	b280      	uxth	r0, r0
 801b430:	1c47      	adds	r7, r0, #1
 801b432:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b436:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b438:	1200      	asrs	r0, r0, #8
 801b43a:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b43e:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b440:	fb02 1100 	mla	r1, r2, r0, r1
 801b444:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b446:	fb04 1100 	mla	r1, r4, r0, r1
 801b44a:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b44e:	fb04 b403 	mla	r4, r4, r3, fp
 801b452:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b456:	fb10 f007 	smulbb	r0, r0, r7
 801b45a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b45e:	fb13 f307 	smulbb	r3, r3, r7
 801b462:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b466:	fb01 010e 	mla	r1, r1, lr, r0
 801b46a:	fb04 340e 	mla	r4, r4, lr, r3
 801b46e:	b289      	uxth	r1, r1
 801b470:	b2a4      	uxth	r4, r4
 801b472:	1c48      	adds	r0, r1, #1
 801b474:	1c63      	adds	r3, r4, #1
 801b476:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b47a:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b47e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 801b480:	1209      	asrs	r1, r1, #8
 801b482:	1224      	asrs	r4, r4, #8
 801b484:	449a      	add	sl, r3
 801b486:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b488:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b48c:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b490:	4498      	add	r8, r3
 801b492:	e707      	b.n	801b2a4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801b494:	b01f      	add	sp, #124	; 0x7c
 801b496:	ecbd 8b08 	vpop	{d8-d11}
 801b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801b4a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a4:	b085      	sub	sp, #20
 801b4a6:	784d      	ldrb	r5, [r1, #1]
 801b4a8:	788e      	ldrb	r6, [r1, #2]
 801b4aa:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801b4ae:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 801b4b2:	9403      	str	r4, [sp, #12]
 801b4b4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801b4b8:	780c      	ldrb	r4, [r1, #0]
 801b4ba:	e9dd c70f 	ldrd	ip, r7, [sp, #60]	; 0x3c
 801b4be:	fb07 ce03 	mla	lr, r7, r3, ip
 801b4c2:	2f00      	cmp	r7, #0
 801b4c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b4c8:	eb02 0b0e 	add.w	fp, r2, lr
 801b4cc:	db56      	blt.n	801b57c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b4ce:	45b9      	cmp	r9, r7
 801b4d0:	dd54      	ble.n	801b57c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xdc>
 801b4d2:	f1bc 0f00 	cmp.w	ip, #0
 801b4d6:	db4d      	blt.n	801b574 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b4d8:	4563      	cmp	r3, ip
 801b4da:	dd4b      	ble.n	801b574 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xd4>
 801b4dc:	f812 200e 	ldrb.w	r2, [r2, lr]
 801b4e0:	9200      	str	r2, [sp, #0]
 801b4e2:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801b4e6:	9201      	str	r2, [sp, #4]
 801b4e8:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801b4ec:	9202      	str	r2, [sp, #8]
 801b4ee:	f11c 0201 	adds.w	r2, ip, #1
 801b4f2:	d44a      	bmi.n	801b58a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b4f4:	4293      	cmp	r3, r2
 801b4f6:	dd48      	ble.n	801b58a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b4f8:	2800      	cmp	r0, #0
 801b4fa:	d046      	beq.n	801b58a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xea>
 801b4fc:	f89b e003 	ldrb.w	lr, [fp, #3]
 801b500:	f89b 8004 	ldrb.w	r8, [fp, #4]
 801b504:	f89b a005 	ldrb.w	sl, [fp, #5]
 801b508:	3701      	adds	r7, #1
 801b50a:	d446      	bmi.n	801b59a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b50c:	45b9      	cmp	r9, r7
 801b50e:	dd44      	ble.n	801b59a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xfa>
 801b510:	9a03      	ldr	r2, [sp, #12]
 801b512:	2a00      	cmp	r2, #0
 801b514:	d045      	beq.n	801b5a2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x102>
 801b516:	f1bc 0f00 	cmp.w	ip, #0
 801b51a:	db3a      	blt.n	801b592 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b51c:	4563      	cmp	r3, ip
 801b51e:	dd38      	ble.n	801b592 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xf2>
 801b520:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b524:	f04f 0903 	mov.w	r9, #3
 801b528:	f81b 7002 	ldrb.w	r7, [fp, r2]
 801b52c:	fb03 b209 	mla	r2, r3, r9, fp
 801b530:	fb03 b909 	mla	r9, r3, r9, fp
 801b534:	7852      	ldrb	r2, [r2, #1]
 801b536:	f899 9002 	ldrb.w	r9, [r9, #2]
 801b53a:	f11c 0c01 	adds.w	ip, ip, #1
 801b53e:	d40d      	bmi.n	801b55c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b540:	4563      	cmp	r3, ip
 801b542:	dd0b      	ble.n	801b55c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b544:	b160      	cbz	r0, 801b560 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc0>
 801b546:	2603      	movs	r6, #3
 801b548:	fb13 6406 	smlabb	r4, r3, r6, r6
 801b54c:	fb03 b506 	mla	r5, r3, r6, fp
 801b550:	fb03 b306 	mla	r3, r3, r6, fp
 801b554:	f81b 4004 	ldrb.w	r4, [fp, r4]
 801b558:	792d      	ldrb	r5, [r5, #4]
 801b55a:	795e      	ldrb	r6, [r3, #5]
 801b55c:	280f      	cmp	r0, #15
 801b55e:	d802      	bhi.n	801b566 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b560:	9b03      	ldr	r3, [sp, #12]
 801b562:	2b0f      	cmp	r3, #15
 801b564:	d922      	bls.n	801b5ac <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x10c>
 801b566:	4b2f      	ldr	r3, [pc, #188]	; (801b624 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x184>)
 801b568:	f240 115b 	movw	r1, #347	; 0x15b
 801b56c:	4a2e      	ldr	r2, [pc, #184]	; (801b628 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x188>)
 801b56e:	482f      	ldr	r0, [pc, #188]	; (801b62c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x18c>)
 801b570:	f004 fe10 	bl	8020194 <__assert_func>
 801b574:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b578:	9400      	str	r4, [sp, #0]
 801b57a:	e7b8      	b.n	801b4ee <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x4e>
 801b57c:	46b2      	mov	sl, r6
 801b57e:	46a8      	mov	r8, r5
 801b580:	46a6      	mov	lr, r4
 801b582:	9400      	str	r4, [sp, #0]
 801b584:	e9cd 5601 	strd	r5, r6, [sp, #4]
 801b588:	e7be      	b.n	801b508 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b58a:	46b2      	mov	sl, r6
 801b58c:	46a8      	mov	r8, r5
 801b58e:	46a6      	mov	lr, r4
 801b590:	e7ba      	b.n	801b508 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x68>
 801b592:	46b1      	mov	r9, r6
 801b594:	462a      	mov	r2, r5
 801b596:	4627      	mov	r7, r4
 801b598:	e7cf      	b.n	801b53a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b59a:	46b1      	mov	r9, r6
 801b59c:	462a      	mov	r2, r5
 801b59e:	4627      	mov	r7, r4
 801b5a0:	e7dc      	b.n	801b55c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xbc>
 801b5a2:	280f      	cmp	r0, #15
 801b5a4:	d8df      	bhi.n	801b566 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xc6>
 801b5a6:	46b1      	mov	r9, r6
 801b5a8:	462a      	mov	r2, r5
 801b5aa:	4627      	mov	r7, r4
 801b5ac:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 801b5b0:	b280      	uxth	r0, r0
 801b5b2:	fb00 f30b 	mul.w	r3, r0, fp
 801b5b6:	0100      	lsls	r0, r0, #4
 801b5b8:	ebc3 1b0b 	rsb	fp, r3, fp, lsl #4
 801b5bc:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 801b5c0:	1ac0      	subs	r0, r0, r3
 801b5c2:	fa1f fb8b 	uxth.w	fp, fp
 801b5c6:	b280      	uxth	r0, r0
 801b5c8:	ebac 0c0b 	sub.w	ip, ip, fp
 801b5cc:	9003      	str	r0, [sp, #12]
 801b5ce:	fa1f fc8c 	uxth.w	ip, ip
 801b5d2:	fb00 fe0e 	mul.w	lr, r0, lr
 801b5d6:	9800      	ldr	r0, [sp, #0]
 801b5d8:	fb0c ee00 	mla	lr, ip, r0, lr
 801b5dc:	9803      	ldr	r0, [sp, #12]
 801b5de:	fb00 f808 	mul.w	r8, r0, r8
 801b5e2:	9801      	ldr	r0, [sp, #4]
 801b5e4:	fb0b ee07 	mla	lr, fp, r7, lr
 801b5e8:	fb0c 8800 	mla	r8, ip, r0, r8
 801b5ec:	fb03 ee04 	mla	lr, r3, r4, lr
 801b5f0:	fb0b 8202 	mla	r2, fp, r2, r8
 801b5f4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b5f8:	fb03 2505 	mla	r5, r3, r5, r2
 801b5fc:	9a03      	ldr	r2, [sp, #12]
 801b5fe:	f881 e000 	strb.w	lr, [r1]
 801b602:	fb02 f00a 	mul.w	r0, r2, sl
 801b606:	9a02      	ldr	r2, [sp, #8]
 801b608:	122d      	asrs	r5, r5, #8
 801b60a:	fb0c 0c02 	mla	ip, ip, r2, r0
 801b60e:	704d      	strb	r5, [r1, #1]
 801b610:	fb0b c909 	mla	r9, fp, r9, ip
 801b614:	fb03 9606 	mla	r6, r3, r6, r9
 801b618:	1236      	asrs	r6, r6, #8
 801b61a:	708e      	strb	r6, [r1, #2]
 801b61c:	b005      	add	sp, #20
 801b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b622:	bf00      	nop
 801b624:	080261a0 	.word	0x080261a0
 801b628:	080265b6 	.word	0x080265b6
 801b62c:	0802616d 	.word	0x0802616d

0801b630 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b634:	ed2d 8b08 	vpush	{d8-d11}
 801b638:	b09b      	sub	sp, #108	; 0x6c
 801b63a:	eeb0 aa40 	vmov.f32	s20, s0
 801b63e:	eef0 9a60 	vmov.f32	s19, s1
 801b642:	920b      	str	r2, [sp, #44]	; 0x2c
 801b644:	eeb0 9a41 	vmov.f32	s18, s2
 801b648:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 801b64a:	eeb0 8a62 	vmov.f32	s16, s5
 801b64e:	9019      	str	r0, [sp, #100]	; 0x64
 801b650:	eef0 8a43 	vmov.f32	s17, s6
 801b654:	6850      	ldr	r0, [r2, #4]
 801b656:	eef0 ba44 	vmov.f32	s23, s8
 801b65a:	9109      	str	r1, [sp, #36]	; 0x24
 801b65c:	eeb0 ba64 	vmov.f32	s22, s9
 801b660:	9306      	str	r3, [sp, #24]
 801b662:	eef0 aa45 	vmov.f32	s21, s10
 801b666:	6812      	ldr	r2, [r2, #0]
 801b668:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 801b66c:	e9dd b42d 	ldrd	fp, r4, [sp, #180]	; 0xb4
 801b670:	fb00 1303 	mla	r3, r0, r3, r1
 801b674:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b678:	18d3      	adds	r3, r2, r3
 801b67a:	9307      	str	r3, [sp, #28]
 801b67c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	9308      	str	r3, [sp, #32]
 801b682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b684:	2b00      	cmp	r3, #0
 801b686:	dc03      	bgt.n	801b690 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801b688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	f340 81ab 	ble.w	801b9e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801b690:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b692:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b696:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b69a:	1e48      	subs	r0, r1, #1
 801b69c:	1e55      	subs	r5, r2, #1
 801b69e:	9b06      	ldr	r3, [sp, #24]
 801b6a0:	2b00      	cmp	r3, #0
 801b6a2:	f340 80b1 	ble.w	801b808 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801b6a6:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b6aa:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b6ae:	d406      	bmi.n	801b6be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6b0:	4286      	cmp	r6, r0
 801b6b2:	da04      	bge.n	801b6be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	db02      	blt.n	801b6be <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b6b8:	42ab      	cmp	r3, r5
 801b6ba:	f2c0 80a6 	blt.w	801b80a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801b6be:	3601      	adds	r6, #1
 801b6c0:	f100 8097 	bmi.w	801b7f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b6c4:	42b1      	cmp	r1, r6
 801b6c6:	f2c0 8094 	blt.w	801b7f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b6ca:	3301      	adds	r3, #1
 801b6cc:	f100 8091 	bmi.w	801b7f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b6d0:	429a      	cmp	r2, r3
 801b6d2:	f2c0 808e 	blt.w	801b7f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801b6d6:	9b06      	ldr	r3, [sp, #24]
 801b6d8:	9e07      	ldr	r6, [sp, #28]
 801b6da:	930a      	str	r3, [sp, #40]	; 0x28
 801b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	f340 80b0 	ble.w	801b844 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801b6e4:	9834      	ldr	r0, [sp, #208]	; 0xd0
 801b6e6:	1425      	asrs	r5, r4, #16
 801b6e8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 801b6ea:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b6ee:	68c7      	ldr	r7, [r0, #12]
 801b6f0:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b6f4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b6f8:	689b      	ldr	r3, [r3, #8]
 801b6fa:	f100 80ea 	bmi.w	801b8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b6fe:	f103 3cff 	add.w	ip, r3, #4294967295
 801b702:	4560      	cmp	r0, ip
 801b704:	f280 80e5 	bge.w	801b8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b708:	2d00      	cmp	r5, #0
 801b70a:	f2c0 80e2 	blt.w	801b8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b70e:	f107 3cff 	add.w	ip, r7, #4294967295
 801b712:	4565      	cmp	r5, ip
 801b714:	f280 80dd 	bge.w	801b8d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801b718:	b21b      	sxth	r3, r3
 801b71a:	fb05 0003 	mla	r0, r5, r3, r0
 801b71e:	9d08      	ldr	r5, [sp, #32]
 801b720:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b724:	182f      	adds	r7, r5, r0
 801b726:	5c2d      	ldrb	r5, [r5, r0]
 801b728:	7878      	ldrb	r0, [r7, #1]
 801b72a:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b72e:	900c      	str	r0, [sp, #48]	; 0x30
 801b730:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b734:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b738:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b73c:	b1c9      	cbz	r1, 801b772 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b73e:	f04f 0c03 	mov.w	ip, #3
 801b742:	f06f 0004 	mvn.w	r0, #4
 801b746:	3705      	adds	r7, #5
 801b748:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b74c:	eb07 0c03 	add.w	ip, r7, r3
 801b750:	5cfb      	ldrb	r3, [r7, r3]
 801b752:	930d      	str	r3, [sp, #52]	; 0x34
 801b754:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b758:	930f      	str	r3, [sp, #60]	; 0x3c
 801b75a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b75e:	9311      	str	r3, [sp, #68]	; 0x44
 801b760:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b764:	930e      	str	r3, [sp, #56]	; 0x38
 801b766:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b76a:	9310      	str	r3, [sp, #64]	; 0x40
 801b76c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b770:	9312      	str	r3, [sp, #72]	; 0x48
 801b772:	b292      	uxth	r2, r2
 801b774:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b776:	b289      	uxth	r1, r1
 801b778:	fb02 f301 	mul.w	r3, r2, r1
 801b77c:	0112      	lsls	r2, r2, #4
 801b77e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b782:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b786:	1ad2      	subs	r2, r2, r3
 801b788:	b289      	uxth	r1, r1
 801b78a:	b292      	uxth	r2, r2
 801b78c:	1a7f      	subs	r7, r7, r1
 801b78e:	fb02 f909 	mul.w	r9, r2, r9
 801b792:	b2bf      	uxth	r7, r7
 801b794:	fb02 f808 	mul.w	r8, r2, r8
 801b798:	fb02 fa0a 	mul.w	sl, r2, sl
 801b79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b79e:	fb07 9905 	mla	r9, r7, r5, r9
 801b7a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b7a4:	fb07 8800 	mla	r8, r7, r0, r8
 801b7a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b7aa:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b7ae:	fb01 9905 	mla	r9, r1, r5, r9
 801b7b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b7b4:	fb01 8800 	mla	r8, r1, r0, r8
 801b7b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b7ba:	fb01 a102 	mla	r1, r1, r2, sl
 801b7be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b7c0:	fb03 9905 	mla	r9, r3, r5, r9
 801b7c4:	fb03 8800 	mla	r8, r3, r0, r8
 801b7c8:	fb03 1302 	mla	r3, r3, r2, r1
 801b7cc:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b7d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b7d4:	121b      	asrs	r3, r3, #8
 801b7d6:	f886 9000 	strb.w	r9, [r6]
 801b7da:	f886 8001 	strb.w	r8, [r6, #1]
 801b7de:	70b3      	strb	r3, [r6, #2]
 801b7e0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b7e2:	3603      	adds	r6, #3
 801b7e4:	449b      	add	fp, r3
 801b7e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b7e8:	441c      	add	r4, r3
 801b7ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7ec:	3b01      	subs	r3, #1
 801b7ee:	930a      	str	r3, [sp, #40]	; 0x28
 801b7f0:	e774      	b.n	801b6dc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 801b7f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b7f4:	449b      	add	fp, r3
 801b7f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b7f8:	441c      	add	r4, r3
 801b7fa:	9b06      	ldr	r3, [sp, #24]
 801b7fc:	3b01      	subs	r3, #1
 801b7fe:	9306      	str	r3, [sp, #24]
 801b800:	9b07      	ldr	r3, [sp, #28]
 801b802:	3303      	adds	r3, #3
 801b804:	9307      	str	r3, [sp, #28]
 801b806:	e74a      	b.n	801b69e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801b808:	d024      	beq.n	801b854 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801b80a:	9b06      	ldr	r3, [sp, #24]
 801b80c:	982f      	ldr	r0, [sp, #188]	; 0xbc
 801b80e:	3b01      	subs	r3, #1
 801b810:	fb00 b003 	mla	r0, r0, r3, fp
 801b814:	1400      	asrs	r0, r0, #16
 801b816:	f53f af5e 	bmi.w	801b6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b81a:	3901      	subs	r1, #1
 801b81c:	4288      	cmp	r0, r1
 801b81e:	f6bf af5a 	bge.w	801b6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b822:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801b824:	fb01 4303 	mla	r3, r1, r3, r4
 801b828:	141b      	asrs	r3, r3, #16
 801b82a:	f53f af54 	bmi.w	801b6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b82e:	3a01      	subs	r2, #1
 801b830:	4293      	cmp	r3, r2
 801b832:	f6bf af50 	bge.w	801b6d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801b836:	9b07      	ldr	r3, [sp, #28]
 801b838:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b83c:	1cde      	adds	r6, r3, #3
 801b83e:	f1be 0f00 	cmp.w	lr, #0
 801b842:	dc5f      	bgt.n	801b904 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 801b844:	9b06      	ldr	r3, [sp, #24]
 801b846:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b84a:	9b07      	ldr	r3, [sp, #28]
 801b84c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b850:	4423      	add	r3, r4
 801b852:	9307      	str	r3, [sp, #28]
 801b854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b856:	2b00      	cmp	r3, #0
 801b858:	f340 80c5 	ble.w	801b9e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b6>
 801b85c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b860:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b862:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801b866:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801b86a:	eef0 6a48 	vmov.f32	s13, s16
 801b86e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801b872:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801b876:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b87a:	ee16 ba90 	vmov	fp, s13
 801b87e:	eef0 6a68 	vmov.f32	s13, s17
 801b882:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b886:	ee16 4a90 	vmov	r4, s13
 801b88a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801b88e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801b892:	ee37 8a48 	vsub.f32	s16, s14, s16
 801b896:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801b89a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801b89e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801b8a2:	ee18 2a10 	vmov	r2, s16
 801b8a6:	eeb0 8a47 	vmov.f32	s16, s14
 801b8aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8ae:	ee18 2a90 	vmov	r2, s17
 801b8b2:	932f      	str	r3, [sp, #188]	; 0xbc
 801b8b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b8b6:	eef0 8a67 	vmov.f32	s17, s15
 801b8ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801b8be:	9330      	str	r3, [sp, #192]	; 0xc0
 801b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b8c8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b8ca:	bf08      	it	eq
 801b8cc:	4613      	moveq	r3, r2
 801b8ce:	9306      	str	r3, [sp, #24]
 801b8d0:	e6d7      	b.n	801b682 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b8d2:	f110 0c01 	adds.w	ip, r0, #1
 801b8d6:	d483      	bmi.n	801b7e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b8d8:	4563      	cmp	r3, ip
 801b8da:	db81      	blt.n	801b7e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b8dc:	f115 0c01 	adds.w	ip, r5, #1
 801b8e0:	f53f af7e 	bmi.w	801b7e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b8e4:	4567      	cmp	r7, ip
 801b8e6:	f6ff af7b 	blt.w	801b7e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b8ea:	b23f      	sxth	r7, r7
 801b8ec:	b21b      	sxth	r3, r3
 801b8ee:	9700      	str	r7, [sp, #0]
 801b8f0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801b8f4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801b8f8:	9a08      	ldr	r2, [sp, #32]
 801b8fa:	4631      	mov	r1, r6
 801b8fc:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b8fe:	f7ff fdcf 	bl	801b4a0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b902:	e76d      	b.n	801b7e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 801b904:	9934      	ldr	r1, [sp, #208]	; 0xd0
 801b906:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b90a:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b90e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b912:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b916:	1421      	asrs	r1, r4, #16
 801b918:	930a      	str	r3, [sp, #40]	; 0x28
 801b91a:	fb0c 0101 	mla	r1, ip, r1, r0
 801b91e:	9808      	ldr	r0, [sp, #32]
 801b920:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b924:	1845      	adds	r5, r0, r1
 801b926:	5c40      	ldrb	r0, [r0, r1]
 801b928:	796f      	ldrb	r7, [r5, #5]
 801b92a:	7869      	ldrb	r1, [r5, #1]
 801b92c:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b930:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b934:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b938:	970c      	str	r7, [sp, #48]	; 0x30
 801b93a:	b1a2      	cbz	r2, 801b966 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 801b93c:	2703      	movs	r7, #3
 801b93e:	f06f 0304 	mvn.w	r3, #4
 801b942:	3505      	adds	r5, #5
 801b944:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b948:	eb05 070c 	add.w	r7, r5, ip
 801b94c:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b950:	9513      	str	r5, [sp, #76]	; 0x4c
 801b952:	787d      	ldrb	r5, [r7, #1]
 801b954:	9515      	str	r5, [sp, #84]	; 0x54
 801b956:	78bd      	ldrb	r5, [r7, #2]
 801b958:	9517      	str	r5, [sp, #92]	; 0x5c
 801b95a:	78fd      	ldrb	r5, [r7, #3]
 801b95c:	9514      	str	r5, [sp, #80]	; 0x50
 801b95e:	793d      	ldrb	r5, [r7, #4]
 801b960:	9516      	str	r5, [sp, #88]	; 0x58
 801b962:	797d      	ldrb	r5, [r7, #5]
 801b964:	9518      	str	r5, [sp, #96]	; 0x60
 801b966:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b96a:	b292      	uxth	r2, r2
 801b96c:	3603      	adds	r6, #3
 801b96e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b972:	fb03 f502 	mul.w	r5, r3, r2
 801b976:	011b      	lsls	r3, r3, #4
 801b978:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b97c:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b980:	1b5b      	subs	r3, r3, r5
 801b982:	b292      	uxth	r2, r2
 801b984:	b29b      	uxth	r3, r3
 801b986:	1abf      	subs	r7, r7, r2
 801b988:	fb03 f909 	mul.w	r9, r3, r9
 801b98c:	b2bf      	uxth	r7, r7
 801b98e:	fb03 fa0a 	mul.w	sl, r3, sl
 801b992:	fb07 9901 	mla	r9, r7, r1, r9
 801b996:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b998:	fb07 aa00 	mla	sl, r7, r0, sl
 801b99c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b99e:	fb02 9901 	mla	r9, r2, r1, r9
 801b9a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b9a4:	fb02 aa00 	mla	sl, r2, r0, sl
 801b9a8:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b9aa:	fb05 9901 	mla	r9, r5, r1, r9
 801b9ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b9b0:	fb05 aa00 	mla	sl, r5, r0, sl
 801b9b4:	434b      	muls	r3, r1
 801b9b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b9b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b9bc:	fb07 3308 	mla	r3, r7, r8, r3
 801b9c0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9c4:	f806 ac06 	strb.w	sl, [r6, #-6]
 801b9c8:	fb02 3201 	mla	r2, r2, r1, r3
 801b9cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b9ce:	f806 9c05 	strb.w	r9, [r6, #-5]
 801b9d2:	fb05 2503 	mla	r5, r5, r3, r2
 801b9d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 801b9d8:	122d      	asrs	r5, r5, #8
 801b9da:	449b      	add	fp, r3
 801b9dc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801b9de:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b9e2:	441c      	add	r4, r3
 801b9e4:	e72b      	b.n	801b83e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b9e6:	b01b      	add	sp, #108	; 0x6c
 801b9e8:	ecbd 8b08 	vpop	{d8-d11}
 801b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b9f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b9f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9f4:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801b9f8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801b9fc:	fb04 5603 	mla	r6, r4, r3, r5
 801ba00:	2c00      	cmp	r4, #0
 801ba02:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801ba06:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801ba0a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801ba0e:	db36      	blt.n	801ba7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801ba10:	45a6      	cmp	lr, r4
 801ba12:	dd34      	ble.n	801ba7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8e>
 801ba14:	2d00      	cmp	r5, #0
 801ba16:	db30      	blt.n	801ba7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801ba18:	42ab      	cmp	r3, r5
 801ba1a:	dd2e      	ble.n	801ba7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8a>
 801ba1c:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801ba20:	1c6e      	adds	r6, r5, #1
 801ba22:	d42f      	bmi.n	801ba84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801ba24:	42b3      	cmp	r3, r6
 801ba26:	dd2d      	ble.n	801ba84 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x94>
 801ba28:	b370      	cbz	r0, 801ba88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x98>
 801ba2a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801ba2e:	3401      	adds	r4, #1
 801ba30:	d42e      	bmi.n	801ba90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801ba32:	45a6      	cmp	lr, r4
 801ba34:	dd2c      	ble.n	801ba90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa0>
 801ba36:	b377      	cbz	r7, 801ba96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xa6>
 801ba38:	2d00      	cmp	r5, #0
 801ba3a:	db27      	blt.n	801ba8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801ba3c:	42ab      	cmp	r3, r5
 801ba3e:	dd25      	ble.n	801ba8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x9c>
 801ba40:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801ba44:	3501      	adds	r5, #1
 801ba46:	d429      	bmi.n	801ba9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801ba48:	42ab      	cmp	r3, r5
 801ba4a:	dd27      	ble.n	801ba9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xac>
 801ba4c:	b340      	cbz	r0, 801baa0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb0>
 801ba4e:	3301      	adds	r3, #1
 801ba50:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801ba54:	280f      	cmp	r0, #15
 801ba56:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801ba5a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ba5e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801ba62:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801ba66:	d801      	bhi.n	801ba6c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x7c>
 801ba68:	2f0f      	cmp	r7, #15
 801ba6a:	d91b      	bls.n	801baa4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0xb4>
 801ba6c:	4b89      	ldr	r3, [pc, #548]	; (801bc94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a4>)
 801ba6e:	f240 115b 	movw	r1, #347	; 0x15b
 801ba72:	4a89      	ldr	r2, [pc, #548]	; (801bc98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2a8>)
 801ba74:	4889      	ldr	r0, [pc, #548]	; (801bc9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x2ac>)
 801ba76:	f004 fb8d 	bl	8020194 <__assert_func>
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	e7d0      	b.n	801ba20 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x30>
 801ba7e:	2600      	movs	r6, #0
 801ba80:	4632      	mov	r2, r6
 801ba82:	e7d4      	b.n	801ba2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801ba84:	2600      	movs	r6, #0
 801ba86:	e7d2      	b.n	801ba2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801ba88:	4606      	mov	r6, r0
 801ba8a:	e7d0      	b.n	801ba2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3e>
 801ba8c:	2400      	movs	r4, #0
 801ba8e:	e7d9      	b.n	801ba44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x54>
 801ba90:	2300      	movs	r3, #0
 801ba92:	461c      	mov	r4, r3
 801ba94:	e7de      	b.n	801ba54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801ba96:	463b      	mov	r3, r7
 801ba98:	463c      	mov	r4, r7
 801ba9a:	e7db      	b.n	801ba54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801ba9c:	2300      	movs	r3, #0
 801ba9e:	e7d9      	b.n	801ba54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801baa0:	4603      	mov	r3, r0
 801baa2:	e7d7      	b.n	801ba54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x64>
 801baa4:	b280      	uxth	r0, r0
 801baa6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801baaa:	b2bf      	uxth	r7, r7
 801baac:	fb00 fe07 	mul.w	lr, r0, r7
 801bab0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bab4:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801bab8:	eba0 0c0e 	sub.w	ip, r0, lr
 801babc:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 801bac0:	b2bf      	uxth	r7, r7
 801bac2:	fa1f fc8c 	uxth.w	ip, ip
 801bac6:	eba5 0507 	sub.w	r5, r5, r7
 801baca:	fb0c f00a 	mul.w	r0, ip, sl
 801bace:	b2ad      	uxth	r5, r5
 801bad0:	fb05 000b 	mla	r0, r5, fp, r0
 801bad4:	fb07 0009 	mla	r0, r7, r9, r0
 801bad8:	fb0e 0008 	mla	r0, lr, r8, r0
 801badc:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bae0:	9001      	str	r0, [sp, #4]
 801bae2:	d018      	beq.n	801bb16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x126>
 801bae4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801bae8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801baec:	fb0b f000 	mul.w	r0, fp, r0
 801baf0:	fb0b fb02 	mul.w	fp, fp, r2
 801baf4:	0a02      	lsrs	r2, r0, #8
 801baf6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bafa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bafe:	4402      	add	r2, r0
 801bb00:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801bb04:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801bb08:	0a12      	lsrs	r2, r2, #8
 801bb0a:	0a00      	lsrs	r0, r0, #8
 801bb0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb10:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bb14:	4302      	orrs	r2, r0
 801bb16:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801bb1a:	d01a      	beq.n	801bb52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x162>
 801bb1c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bb20:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bb24:	fb0a f000 	mul.w	r0, sl, r0
 801bb28:	fb0a fa06 	mul.w	sl, sl, r6
 801bb2c:	0a06      	lsrs	r6, r0, #8
 801bb2e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801bb32:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bb36:	4406      	add	r6, r0
 801bb38:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801bb3c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bb40:	0a36      	lsrs	r6, r6, #8
 801bb42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb46:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801bb4a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bb4e:	ea46 060a 	orr.w	r6, r6, sl
 801bb52:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801bb56:	d01b      	beq.n	801bb90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1a0>
 801bb58:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801bb5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bb60:	fb09 fa0a 	mul.w	sl, r9, sl
 801bb64:	fb09 f004 	mul.w	r0, r9, r4
 801bb68:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801bb6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bb70:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801bb74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bb78:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801bb7c:	4454      	add	r4, sl
 801bb7e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bb82:	0a24      	lsrs	r4, r4, #8
 801bb84:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bb88:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801bb8c:	ea44 0409 	orr.w	r4, r4, r9
 801bb90:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801bb94:	d01b      	beq.n	801bbce <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x1de>
 801bb96:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801bb9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bb9e:	fb08 f909 	mul.w	r9, r8, r9
 801bba2:	fb08 f003 	mul.w	r0, r8, r3
 801bba6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801bbaa:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801bbae:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801bbb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbb6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801bbba:	444b      	add	r3, r9
 801bbbc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bbc0:	0a1b      	lsrs	r3, r3, #8
 801bbc2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801bbc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bbca:	ea43 0308 	orr.w	r3, r3, r8
 801bbce:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801bbd2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bbd6:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801bbda:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bbde:	fb0c f000 	mul.w	r0, ip, r0
 801bbe2:	fb0c f606 	mul.w	r6, ip, r6
 801bbe6:	fb05 0808 	mla	r8, r5, r8, r0
 801bbea:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801bbee:	fb05 6502 	mla	r5, r5, r2, r6
 801bbf2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801bbf6:	fb07 8800 	mla	r8, r7, r0, r8
 801bbfa:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801bbfe:	fb07 5704 	mla	r7, r7, r4, r5
 801bc02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bc06:	fb0e 8000 	mla	r0, lr, r0, r8
 801bc0a:	fb0e 7e03 	mla	lr, lr, r3, r7
 801bc0e:	9b01      	ldr	r3, [sp, #4]
 801bc10:	0a00      	lsrs	r0, r0, #8
 801bc12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc16:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bc1a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bc1e:	ea40 0e0e 	orr.w	lr, r0, lr
 801bc22:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801bc26:	b280      	uxth	r0, r0
 801bc28:	fa5f f48e 	uxtb.w	r4, lr
 801bc2c:	4343      	muls	r3, r0
 801bc2e:	fb14 f400 	smulbb	r4, r4, r0
 801bc32:	1c5a      	adds	r2, r3, #1
 801bc34:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bc38:	780b      	ldrb	r3, [r1, #0]
 801bc3a:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801bc3e:	b2d2      	uxtb	r2, r2
 801bc40:	fb03 4302 	mla	r3, r3, r2, r4
 801bc44:	b29b      	uxth	r3, r3
 801bc46:	1c5c      	adds	r4, r3, #1
 801bc48:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bc4c:	784c      	ldrb	r4, [r1, #1]
 801bc4e:	fb14 f402 	smulbb	r4, r4, r2
 801bc52:	121b      	asrs	r3, r3, #8
 801bc54:	700b      	strb	r3, [r1, #0]
 801bc56:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801bc5a:	fb03 4300 	mla	r3, r3, r0, r4
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	1c5c      	adds	r4, r3, #1
 801bc62:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801bc66:	121b      	asrs	r3, r3, #8
 801bc68:	704b      	strb	r3, [r1, #1]
 801bc6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801bc6e:	f891 e002 	ldrb.w	lr, [r1, #2]
 801bc72:	fb1e fe02 	smulbb	lr, lr, r2
 801bc76:	fb03 ee00 	mla	lr, r3, r0, lr
 801bc7a:	fa1f fe8e 	uxth.w	lr, lr
 801bc7e:	f10e 0301 	add.w	r3, lr, #1
 801bc82:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801bc86:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bc8a:	f881 e002 	strb.w	lr, [r1, #2]
 801bc8e:	b003      	add	sp, #12
 801bc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc94:	080261a0 	.word	0x080261a0
 801bc98:	080265b6 	.word	0x080265b6
 801bc9c:	0802616d 	.word	0x0802616d

0801bca0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bca4:	ed2d 8b08 	vpush	{d8-d11}
 801bca8:	b09d      	sub	sp, #116	; 0x74
 801bcaa:	eeb0 aa40 	vmov.f32	s20, s0
 801bcae:	eef0 9a60 	vmov.f32	s19, s1
 801bcb2:	9219      	str	r2, [sp, #100]	; 0x64
 801bcb4:	eeb0 9a41 	vmov.f32	s18, s2
 801bcb8:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 801bcba:	eeb0 8a62 	vmov.f32	s16, s5
 801bcbe:	9307      	str	r3, [sp, #28]
 801bcc0:	eef0 8a43 	vmov.f32	s17, s6
 801bcc4:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801bcc8:	eef0 ba44 	vmov.f32	s23, s8
 801bccc:	901b      	str	r0, [sp, #108]	; 0x6c
 801bcce:	eeb0 ba64 	vmov.f32	s22, s9
 801bcd2:	931a      	str	r3, [sp, #104]	; 0x68
 801bcd4:	eef0 aa45 	vmov.f32	s21, s10
 801bcd8:	6850      	ldr	r0, [r2, #4]
 801bcda:	9117      	str	r1, [sp, #92]	; 0x5c
 801bcdc:	6812      	ldr	r2, [r2, #0]
 801bcde:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 801bce2:	e9dd 562f 	ldrd	r5, r6, [sp, #188]	; 0xbc
 801bce6:	fb00 1303 	mla	r3, r0, r3, r1
 801bcea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bcee:	18d3      	adds	r3, r2, r3
 801bcf0:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf2:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bcf4:	681b      	ldr	r3, [r3, #0]
 801bcf6:	9310      	str	r3, [sp, #64]	; 0x40
 801bcf8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801bcfc:	930b      	str	r3, [sp, #44]	; 0x2c
 801bcfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	dc03      	bgt.n	801bd0c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801bd04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	f340 8368 	ble.w	801c3dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801bd0c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bd0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bd12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bd16:	1e48      	subs	r0, r1, #1
 801bd18:	1e57      	subs	r7, r2, #1
 801bd1a:	9b07      	ldr	r3, [sp, #28]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	f340 8187 	ble.w	801c030 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x390>
 801bd22:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bd26:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bd2a:	d406      	bmi.n	801bd3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd2c:	4584      	cmp	ip, r0
 801bd2e:	da04      	bge.n	801bd3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	db02      	blt.n	801bd3a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bd34:	42bb      	cmp	r3, r7
 801bd36:	f2c0 817c 	blt.w	801c032 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801bd3a:	f11c 0c01 	adds.w	ip, ip, #1
 801bd3e:	f100 816c 	bmi.w	801c01a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd42:	4561      	cmp	r1, ip
 801bd44:	f2c0 8169 	blt.w	801c01a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd48:	3301      	adds	r3, #1
 801bd4a:	f100 8166 	bmi.w	801c01a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd4e:	429a      	cmp	r2, r3
 801bd50:	f2c0 8163 	blt.w	801c01a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801bd54:	9b07      	ldr	r3, [sp, #28]
 801bd56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bd58:	9318      	str	r3, [sp, #96]	; 0x60
 801bd5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	f340 8186 	ble.w	801c06e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801bd62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801bd64:	142a      	asrs	r2, r5, #16
 801bd66:	ea4f 4026 	mov.w	r0, r6, asr #16
 801bd6a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bd6e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801bd72:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801bd76:	f100 81cb 	bmi.w	801c110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bd7a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bd7e:	4542      	cmp	r2, r8
 801bd80:	f280 81c6 	bge.w	801c110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bd84:	2800      	cmp	r0, #0
 801bd86:	f2c0 81c3 	blt.w	801c110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bd8a:	f103 38ff 	add.w	r8, r3, #4294967295
 801bd8e:	4540      	cmp	r0, r8
 801bd90:	f280 81be 	bge.w	801c110 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801bd94:	fa0f f38e 	sxth.w	r3, lr
 801bd98:	fb00 2203 	mla	r2, r0, r3, r2
 801bd9c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bd9e:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801bda2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801bda6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bdaa:	2900      	cmp	r1, #0
 801bdac:	f000 81a6 	beq.w	801c0fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45c>
 801bdb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bdb4:	900c      	str	r0, [sp, #48]	; 0x30
 801bdb6:	0e00      	lsrs	r0, r0, #24
 801bdb8:	9013      	str	r0, [sp, #76]	; 0x4c
 801bdba:	f1bc 0f00 	cmp.w	ip, #0
 801bdbe:	d00f      	beq.n	801bde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801bdc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bdc4:	3b01      	subs	r3, #1
 801bdc6:	009b      	lsls	r3, r3, #2
 801bdc8:	3304      	adds	r3, #4
 801bdca:	eb08 0003 	add.w	r0, r8, r3
 801bdce:	f858 3003 	ldr.w	r3, [r8, r3]
 801bdd2:	9308      	str	r3, [sp, #32]
 801bdd4:	0e1b      	lsrs	r3, r3, #24
 801bdd6:	9311      	str	r3, [sp, #68]	; 0x44
 801bdd8:	6843      	ldr	r3, [r0, #4]
 801bdda:	930d      	str	r3, [sp, #52]	; 0x34
 801bddc:	0e1b      	lsrs	r3, r3, #24
 801bdde:	9314      	str	r3, [sp, #80]	; 0x50
 801bde0:	b289      	uxth	r1, r1
 801bde2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bde4:	fa1f fc8c 	uxth.w	ip, ip
 801bde8:	0108      	lsls	r0, r1, #4
 801bdea:	fb01 f90c 	mul.w	r9, r1, ip
 801bdee:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bdf2:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801bdf6:	eba0 0809 	sub.w	r8, r0, r9
 801bdfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bdfc:	fa1f f18c 	uxth.w	r1, ip
 801be00:	fa1f f888 	uxth.w	r8, r8
 801be04:	1a5b      	subs	r3, r3, r1
 801be06:	fb08 f000 	mul.w	r0, r8, r0
 801be0a:	b29b      	uxth	r3, r3
 801be0c:	fb03 000e 	mla	r0, r3, lr, r0
 801be10:	fb01 0004 	mla	r0, r1, r4, r0
 801be14:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be16:	fb09 0004 	mla	r0, r9, r4, r0
 801be1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801be1e:	2800      	cmp	r0, #0
 801be20:	f000 80f2 	beq.w	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801be24:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801be28:	d01b      	beq.n	801be62 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801be2a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801be2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801be32:	fb0e fa0a 	mul.w	sl, lr, sl
 801be36:	fb0e fe02 	mul.w	lr, lr, r2
 801be3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801be3e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801be42:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801be46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be4a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801be4e:	4452      	add	r2, sl
 801be50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be54:	0a12      	lsrs	r2, r2, #8
 801be56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801be5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be5e:	ea42 020c 	orr.w	r2, r2, ip
 801be62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801be64:	2cff      	cmp	r4, #255	; 0xff
 801be66:	d021      	beq.n	801beac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801be68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801be6a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801be6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801be70:	fb04 fb0b 	mul.w	fp, r4, fp
 801be74:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801be76:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801be7a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801be7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801be80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801be84:	fb04 fa0a 	mul.w	sl, r4, sl
 801be88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801be8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801be90:	44de      	add	lr, fp
 801be92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801be96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801be9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801be9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bea2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bea6:	ea4e 040a 	orr.w	r4, lr, sl
 801beaa:	940c      	str	r4, [sp, #48]	; 0x30
 801beac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801beae:	2cff      	cmp	r4, #255	; 0xff
 801beb0:	d021      	beq.n	801bef6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x256>
 801beb2:	9c08      	ldr	r4, [sp, #32]
 801beb4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801beb8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801beba:	fb04 fb0b 	mul.w	fp, r4, fp
 801bebe:	9c08      	ldr	r4, [sp, #32]
 801bec0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bec4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bec6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801beca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bece:	fb04 fa0a 	mul.w	sl, r4, sl
 801bed2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bed6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801beda:	44de      	add	lr, fp
 801bedc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bee0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bee4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bee8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801beec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bef0:	ea4e 040a 	orr.w	r4, lr, sl
 801bef4:	9408      	str	r4, [sp, #32]
 801bef6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bef8:	2cff      	cmp	r4, #255	; 0xff
 801befa:	d021      	beq.n	801bf40 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801befc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801befe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bf02:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf04:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bf0e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bf18:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bf24:	44de      	add	lr, fp
 801bf26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf3a:	ea4e 040a 	orr.w	r4, lr, sl
 801bf3e:	940d      	str	r4, [sp, #52]	; 0x34
 801bf40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bf42:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bf46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bf4a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf4e:	9c08      	ldr	r4, [sp, #32]
 801bf50:	fb08 fc0c 	mul.w	ip, r8, ip
 801bf54:	fb03 cc0e 	mla	ip, r3, lr, ip
 801bf58:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf5e:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bf62:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf66:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bf68:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bf6c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bf70:	fb08 f80e 	mul.w	r8, r8, lr
 801bf74:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf78:	fb03 8202 	mla	r2, r3, r2, r8
 801bf7c:	9b08      	ldr	r3, [sp, #32]
 801bf7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bf82:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801bf86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bf88:	fb01 220a 	mla	r2, r1, sl, r2
 801bf8c:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801bf90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf92:	fb09 2901 	mla	r9, r9, r1, r2
 801bf96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bf98:	4343      	muls	r3, r0
 801bf9a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bf9e:	1c58      	adds	r0, r3, #1
 801bfa0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bfa4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bfa8:	783b      	ldrb	r3, [r7, #0]
 801bfaa:	ea4c 0c09 	orr.w	ip, ip, r9
 801bfae:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801bfb2:	fa5f f28c 	uxtb.w	r2, ip
 801bfb6:	b2c0      	uxtb	r0, r0
 801bfb8:	fb12 f201 	smulbb	r2, r2, r1
 801bfbc:	fb03 2300 	mla	r3, r3, r0, r2
 801bfc0:	b29b      	uxth	r3, r3
 801bfc2:	1c5a      	adds	r2, r3, #1
 801bfc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bfc8:	787a      	ldrb	r2, [r7, #1]
 801bfca:	fb12 f200 	smulbb	r2, r2, r0
 801bfce:	121b      	asrs	r3, r3, #8
 801bfd0:	703b      	strb	r3, [r7, #0]
 801bfd2:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bfd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bfda:	fb03 2301 	mla	r3, r3, r1, r2
 801bfde:	b29b      	uxth	r3, r3
 801bfe0:	1c5a      	adds	r2, r3, #1
 801bfe2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bfe6:	121b      	asrs	r3, r3, #8
 801bfe8:	707b      	strb	r3, [r7, #1]
 801bfea:	78bb      	ldrb	r3, [r7, #2]
 801bfec:	fb13 f000 	smulbb	r0, r3, r0
 801bff0:	fb0c 0c01 	mla	ip, ip, r1, r0
 801bff4:	fa1f fc8c 	uxth.w	ip, ip
 801bff8:	f10c 0301 	add.w	r3, ip, #1
 801bffc:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c000:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c004:	f887 c002 	strb.w	ip, [r7, #2]
 801c008:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c00a:	3703      	adds	r7, #3
 801c00c:	441d      	add	r5, r3
 801c00e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c010:	441e      	add	r6, r3
 801c012:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c014:	3b01      	subs	r3, #1
 801c016:	9318      	str	r3, [sp, #96]	; 0x60
 801c018:	e69f      	b.n	801bd5a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801c01a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c01c:	441d      	add	r5, r3
 801c01e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c020:	441e      	add	r6, r3
 801c022:	9b07      	ldr	r3, [sp, #28]
 801c024:	3b01      	subs	r3, #1
 801c026:	9307      	str	r3, [sp, #28]
 801c028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c02a:	3303      	adds	r3, #3
 801c02c:	930a      	str	r3, [sp, #40]	; 0x28
 801c02e:	e674      	b.n	801bd1a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c030:	d025      	beq.n	801c07e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801c032:	9b07      	ldr	r3, [sp, #28]
 801c034:	9831      	ldr	r0, [sp, #196]	; 0xc4
 801c036:	3b01      	subs	r3, #1
 801c038:	fb00 5003 	mla	r0, r0, r3, r5
 801c03c:	1400      	asrs	r0, r0, #16
 801c03e:	f53f ae89 	bmi.w	801bd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c042:	3901      	subs	r1, #1
 801c044:	4288      	cmp	r0, r1
 801c046:	f6bf ae85 	bge.w	801bd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c04a:	9932      	ldr	r1, [sp, #200]	; 0xc8
 801c04c:	fb01 6303 	mla	r3, r1, r3, r6
 801c050:	141b      	asrs	r3, r3, #16
 801c052:	f53f ae7f 	bmi.w	801bd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c056:	3a01      	subs	r2, #1
 801c058:	4293      	cmp	r3, r2
 801c05a:	f6bf ae7b 	bge.w	801bd54 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 801c05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c060:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c064:	f103 0e03 	add.w	lr, r3, #3
 801c068:	f1bb 0f00 	cmp.w	fp, #0
 801c06c:	dc6e      	bgt.n	801c14c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801c06e:	9b07      	ldr	r3, [sp, #28]
 801c070:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c076:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c07a:	4423      	add	r3, r4
 801c07c:	930a      	str	r3, [sp, #40]	; 0x28
 801c07e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c080:	2b00      	cmp	r3, #0
 801c082:	f340 81ab 	ble.w	801c3dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c086:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c08a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c08c:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801c090:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801c094:	eef0 6a48 	vmov.f32	s13, s16
 801c098:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801c09c:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801c0a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0a4:	ee16 5a90 	vmov	r5, s13
 801c0a8:	eef0 6a68 	vmov.f32	s13, s17
 801c0ac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0b0:	ee16 6a90 	vmov	r6, s13
 801c0b4:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801c0b8:	ee69 7a27 	vmul.f32	s15, s18, s15
 801c0bc:	ee37 8a48 	vsub.f32	s16, s14, s16
 801c0c0:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801c0c4:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801c0c8:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801c0cc:	ee18 2a10 	vmov	r2, s16
 801c0d0:	eeb0 8a47 	vmov.f32	s16, s14
 801c0d4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0d8:	ee18 2a90 	vmov	r2, s17
 801c0dc:	9331      	str	r3, [sp, #196]	; 0xc4
 801c0de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c0e0:	eef0 8a67 	vmov.f32	s17, s15
 801c0e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0e8:	9332      	str	r3, [sp, #200]	; 0xc8
 801c0ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c0ec:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c0ee:	3b01      	subs	r3, #1
 801c0f0:	9317      	str	r3, [sp, #92]	; 0x5c
 801c0f2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c0f4:	bf08      	it	eq
 801c0f6:	4613      	moveq	r3, r2
 801c0f8:	9307      	str	r3, [sp, #28]
 801c0fa:	e600      	b.n	801bcfe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801c0fc:	f1bc 0f00 	cmp.w	ip, #0
 801c100:	f43f ae6e 	beq.w	801bde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c104:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801c108:	9308      	str	r3, [sp, #32]
 801c10a:	0e1b      	lsrs	r3, r3, #24
 801c10c:	9311      	str	r3, [sp, #68]	; 0x44
 801c10e:	e667      	b.n	801bde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801c110:	f112 0801 	adds.w	r8, r2, #1
 801c114:	f53f af78 	bmi.w	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c118:	45c6      	cmp	lr, r8
 801c11a:	f6ff af75 	blt.w	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c11e:	f110 0801 	adds.w	r8, r0, #1
 801c122:	f53f af71 	bmi.w	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c126:	4543      	cmp	r3, r8
 801c128:	f6ff af6e 	blt.w	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c12c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801c12e:	b21b      	sxth	r3, r3
 801c130:	9201      	str	r2, [sp, #4]
 801c132:	9300      	str	r3, [sp, #0]
 801c134:	fa0f f38e 	sxth.w	r3, lr
 801c138:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c13e:	e9cd c404 	strd	ip, r4, [sp, #16]
 801c142:	4639      	mov	r1, r7
 801c144:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c146:	f7ff fc53 	bl	801b9f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801c14a:	e75d      	b.n	801c008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 801c14c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 801c14e:	142f      	asrs	r7, r5, #16
 801c150:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c152:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c156:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c15a:	1433      	asrs	r3, r6, #16
 801c15c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c160:	fb02 7303 	mla	r3, r2, r3, r7
 801c164:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801c168:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c16c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c170:	2900      	cmp	r1, #0
 801c172:	f000 812a 	beq.w	801c3ca <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72a>
 801c176:	687c      	ldr	r4, [r7, #4]
 801c178:	940e      	str	r4, [sp, #56]	; 0x38
 801c17a:	0e24      	lsrs	r4, r4, #24
 801c17c:	9415      	str	r4, [sp, #84]	; 0x54
 801c17e:	b178      	cbz	r0, 801c1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c180:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801c184:	3a01      	subs	r2, #1
 801c186:	0092      	lsls	r2, r2, #2
 801c188:	3204      	adds	r2, #4
 801c18a:	eb07 0802 	add.w	r8, r7, r2
 801c18e:	58ba      	ldr	r2, [r7, r2]
 801c190:	9209      	str	r2, [sp, #36]	; 0x24
 801c192:	0e12      	lsrs	r2, r2, #24
 801c194:	9212      	str	r2, [sp, #72]	; 0x48
 801c196:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801c19a:	920f      	str	r2, [sp, #60]	; 0x3c
 801c19c:	0e12      	lsrs	r2, r2, #24
 801c19e:	9216      	str	r2, [sp, #88]	; 0x58
 801c1a0:	b289      	uxth	r1, r1
 801c1a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c1a4:	b280      	uxth	r0, r0
 801c1a6:	fb01 f900 	mul.w	r9, r1, r0
 801c1aa:	0109      	lsls	r1, r1, #4
 801c1ac:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c1b0:	eba1 0809 	sub.w	r8, r1, r9
 801c1b4:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801c1b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c1ba:	b280      	uxth	r0, r0
 801c1bc:	fa1f f888 	uxth.w	r8, r8
 801c1c0:	1a12      	subs	r2, r2, r0
 801c1c2:	fb08 f101 	mul.w	r1, r8, r1
 801c1c6:	b292      	uxth	r2, r2
 801c1c8:	fb02 110c 	mla	r1, r2, ip, r1
 801c1cc:	fb00 1104 	mla	r1, r0, r4, r1
 801c1d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c1d2:	fb09 1104 	mla	r1, r9, r4, r1
 801c1d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c1da:	2900      	cmp	r1, #0
 801c1dc:	f000 80ec 	beq.w	801c3b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801c1e0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801c1e4:	d019      	beq.n	801c21a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57a>
 801c1e6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c1ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c1ee:	fb0c fa0a 	mul.w	sl, ip, sl
 801c1f2:	fb0c fc03 	mul.w	ip, ip, r3
 801c1f6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c1fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c1fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801c202:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c206:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c20a:	4453      	add	r3, sl
 801c20c:	0a3f      	lsrs	r7, r7, #8
 801c20e:	0a1b      	lsrs	r3, r3, #8
 801c210:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801c214:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c218:	433b      	orrs	r3, r7
 801c21a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c21c:	2cff      	cmp	r4, #255	; 0xff
 801c21e:	d020      	beq.n	801c262 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c2>
 801c220:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c222:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c226:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c228:	4367      	muls	r7, r4
 801c22a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c22c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c230:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c234:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c236:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c23a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c23e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c242:	44bc      	add	ip, r7
 801c244:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c24c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c250:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c254:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c258:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c25c:	ea4c 040a 	orr.w	r4, ip, sl
 801c260:	940e      	str	r4, [sp, #56]	; 0x38
 801c262:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c264:	2cff      	cmp	r4, #255	; 0xff
 801c266:	d020      	beq.n	801c2aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60a>
 801c268:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c26a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c26e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c270:	4367      	muls	r7, r4
 801c272:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c274:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c278:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c27c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c27e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c282:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c286:	fb04 fa0a 	mul.w	sl, r4, sl
 801c28a:	44bc      	add	ip, r7
 801c28c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c290:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c294:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c298:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c29c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c2a4:	ea4c 040a 	orr.w	r4, ip, sl
 801c2a8:	9409      	str	r4, [sp, #36]	; 0x24
 801c2aa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2ac:	2cff      	cmp	r4, #255	; 0xff
 801c2ae:	d020      	beq.n	801c2f2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x652>
 801c2b0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c2b2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c2b6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2b8:	4367      	muls	r7, r4
 801c2ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c2bc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2c0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c2c4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c2c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c2ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2ce:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2d2:	44bc      	add	ip, r7
 801c2d4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c2d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c2e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2e8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c2ec:	ea4c 040a 	orr.w	r4, ip, sl
 801c2f0:	940f      	str	r4, [sp, #60]	; 0x3c
 801c2f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c2f4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c2f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c2fc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c300:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c302:	fb08 f707 	mul.w	r7, r8, r7
 801c306:	fb02 770c 	mla	r7, r2, ip, r7
 801c30a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c30e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c310:	fb00 770c 	mla	r7, r0, ip, r7
 801c314:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c318:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c31a:	fb09 770c 	mla	r7, r9, ip, r7
 801c31e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c322:	fb08 f80c 	mul.w	r8, r8, ip
 801c326:	0a3f      	lsrs	r7, r7, #8
 801c328:	fb02 8303 	mla	r3, r2, r3, r8
 801c32c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c32e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c332:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c338:	fb00 330a 	mla	r3, r0, sl, r3
 801c33c:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c340:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c342:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c348:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c34c:	434b      	muls	r3, r1
 801c34e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c352:	1c59      	adds	r1, r3, #1
 801c354:	ea47 070c 	orr.w	r7, r7, ip
 801c358:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c35c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c360:	b2fa      	uxtb	r2, r7
 801c362:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c366:	fb12 f200 	smulbb	r2, r2, r0
 801c36a:	b2c9      	uxtb	r1, r1
 801c36c:	fb03 2301 	mla	r3, r3, r1, r2
 801c370:	b29b      	uxth	r3, r3
 801c372:	1c5a      	adds	r2, r3, #1
 801c374:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c378:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c37c:	fb12 f201 	smulbb	r2, r2, r1
 801c380:	121b      	asrs	r3, r3, #8
 801c382:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c386:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c38a:	0c3f      	lsrs	r7, r7, #16
 801c38c:	fb03 2300 	mla	r3, r3, r0, r2
 801c390:	b29b      	uxth	r3, r3
 801c392:	1c5a      	adds	r2, r3, #1
 801c394:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c398:	121b      	asrs	r3, r3, #8
 801c39a:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c39e:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c3a2:	fb13 f101 	smulbb	r1, r3, r1
 801c3a6:	fb07 1700 	mla	r7, r7, r0, r1
 801c3aa:	b2bf      	uxth	r7, r7
 801c3ac:	1c79      	adds	r1, r7, #1
 801c3ae:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c3b2:	123f      	asrs	r7, r7, #8
 801c3b4:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c3b8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 801c3ba:	f10e 0e03 	add.w	lr, lr, #3
 801c3be:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c3c2:	441d      	add	r5, r3
 801c3c4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c3c6:	441e      	add	r6, r3
 801c3c8:	e64e      	b.n	801c068 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 801c3ca:	2800      	cmp	r0, #0
 801c3cc:	f43f aee8 	beq.w	801c1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c3d0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c3d4:	9209      	str	r2, [sp, #36]	; 0x24
 801c3d6:	0e12      	lsrs	r2, r2, #24
 801c3d8:	9212      	str	r2, [sp, #72]	; 0x48
 801c3da:	e6e1      	b.n	801c1a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 801c3dc:	b01d      	add	sp, #116	; 0x74
 801c3de:	ecbd 8b08 	vpop	{d8-d11}
 801c3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c3e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3ec:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 801c3f0:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801c3f4:	fb04 5603 	mla	r6, r4, r3, r5
 801c3f8:	2c00      	cmp	r4, #0
 801c3fa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 801c3fe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 801c402:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 801c406:	db36      	blt.n	801c476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c408:	45a6      	cmp	lr, r4
 801c40a:	dd34      	ble.n	801c476 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8e>
 801c40c:	2d00      	cmp	r5, #0
 801c40e:	db30      	blt.n	801c472 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c410:	42ab      	cmp	r3, r5
 801c412:	dd2e      	ble.n	801c472 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8a>
 801c414:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801c418:	1c6e      	adds	r6, r5, #1
 801c41a:	d42f      	bmi.n	801c47c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c41c:	42b3      	cmp	r3, r6
 801c41e:	dd2d      	ble.n	801c47c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x94>
 801c420:	b370      	cbz	r0, 801c480 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x98>
 801c422:	f8dc 6004 	ldr.w	r6, [ip, #4]
 801c426:	3401      	adds	r4, #1
 801c428:	d42e      	bmi.n	801c488 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c42a:	45a6      	cmp	lr, r4
 801c42c:	dd2c      	ble.n	801c488 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa0>
 801c42e:	b377      	cbz	r7, 801c48e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xa6>
 801c430:	2d00      	cmp	r5, #0
 801c432:	db27      	blt.n	801c484 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c434:	42ab      	cmp	r3, r5
 801c436:	dd25      	ble.n	801c484 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x9c>
 801c438:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801c43c:	3501      	adds	r5, #1
 801c43e:	d429      	bmi.n	801c494 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c440:	42ab      	cmp	r3, r5
 801c442:	dd27      	ble.n	801c494 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xac>
 801c444:	b340      	cbz	r0, 801c498 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb0>
 801c446:	3301      	adds	r3, #1
 801c448:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801c44c:	280f      	cmp	r0, #15
 801c44e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801c452:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c456:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c45a:	ea4f 6813 	mov.w	r8, r3, lsr #24
 801c45e:	d801      	bhi.n	801c464 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x7c>
 801c460:	2f0f      	cmp	r7, #15
 801c462:	d91b      	bls.n	801c49c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0xb4>
 801c464:	4b7e      	ldr	r3, [pc, #504]	; (801c660 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x278>)
 801c466:	f240 115b 	movw	r1, #347	; 0x15b
 801c46a:	4a7e      	ldr	r2, [pc, #504]	; (801c664 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x27c>)
 801c46c:	487e      	ldr	r0, [pc, #504]	; (801c668 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x280>)
 801c46e:	f003 fe91 	bl	8020194 <__assert_func>
 801c472:	2200      	movs	r2, #0
 801c474:	e7d0      	b.n	801c418 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x30>
 801c476:	2600      	movs	r6, #0
 801c478:	4632      	mov	r2, r6
 801c47a:	e7d4      	b.n	801c426 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c47c:	2600      	movs	r6, #0
 801c47e:	e7d2      	b.n	801c426 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c480:	4606      	mov	r6, r0
 801c482:	e7d0      	b.n	801c426 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3e>
 801c484:	2400      	movs	r4, #0
 801c486:	e7d9      	b.n	801c43c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x54>
 801c488:	2300      	movs	r3, #0
 801c48a:	461c      	mov	r4, r3
 801c48c:	e7de      	b.n	801c44c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c48e:	463b      	mov	r3, r7
 801c490:	463c      	mov	r4, r7
 801c492:	e7db      	b.n	801c44c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c494:	2300      	movs	r3, #0
 801c496:	e7d9      	b.n	801c44c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c498:	4603      	mov	r3, r0
 801c49a:	e7d7      	b.n	801c44c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x64>
 801c49c:	b280      	uxth	r0, r0
 801c49e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801c4a2:	b2bf      	uxth	r7, r7
 801c4a4:	fb00 fe07 	mul.w	lr, r0, r7
 801c4a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c4ac:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 801c4b0:	eba0 0c0e 	sub.w	ip, r0, lr
 801c4b4:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801c4b8:	b2bf      	uxth	r7, r7
 801c4ba:	fa1f fc8c 	uxth.w	ip, ip
 801c4be:	eba0 0507 	sub.w	r5, r0, r7
 801c4c2:	fb0c f00a 	mul.w	r0, ip, sl
 801c4c6:	b2ad      	uxth	r5, r5
 801c4c8:	fb05 000b 	mla	r0, r5, fp, r0
 801c4cc:	fb07 0009 	mla	r0, r7, r9, r0
 801c4d0:	fb0e 0008 	mla	r0, lr, r8, r0
 801c4d4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c4d8:	9001      	str	r0, [sp, #4]
 801c4da:	d018      	beq.n	801c50e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x126>
 801c4dc:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 801c4e0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c4e4:	fb0b f000 	mul.w	r0, fp, r0
 801c4e8:	fb0b fb02 	mul.w	fp, fp, r2
 801c4ec:	0a02      	lsrs	r2, r0, #8
 801c4ee:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c4f2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c4f6:	4402      	add	r2, r0
 801c4f8:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 801c4fc:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 801c500:	0a12      	lsrs	r2, r2, #8
 801c502:	0a00      	lsrs	r0, r0, #8
 801c504:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c508:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c50c:	4302      	orrs	r2, r0
 801c50e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801c512:	d01a      	beq.n	801c54a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x162>
 801c514:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c518:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c51c:	fb0a f000 	mul.w	r0, sl, r0
 801c520:	fb0a fa06 	mul.w	sl, sl, r6
 801c524:	0a06      	lsrs	r6, r0, #8
 801c526:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 801c52a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c52e:	4406      	add	r6, r0
 801c530:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801c534:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c538:	0a36      	lsrs	r6, r6, #8
 801c53a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c53e:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801c542:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c546:	ea46 060a 	orr.w	r6, r6, sl
 801c54a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801c54e:	d01b      	beq.n	801c588 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1a0>
 801c550:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 801c554:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c558:	fb09 fa0a 	mul.w	sl, r9, sl
 801c55c:	fb09 f004 	mul.w	r0, r9, r4
 801c560:	ea4f 241a 	mov.w	r4, sl, lsr #8
 801c564:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c568:	f500 7980 	add.w	r9, r0, #256	; 0x100
 801c56c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c570:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 801c574:	4454      	add	r4, sl
 801c576:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c57a:	0a24      	lsrs	r4, r4, #8
 801c57c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c580:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c584:	ea44 0409 	orr.w	r4, r4, r9
 801c588:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801c58c:	d01b      	beq.n	801c5c6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x1de>
 801c58e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 801c592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c596:	fb08 f909 	mul.w	r9, r8, r9
 801c59a:	fb08 f003 	mul.w	r0, r8, r3
 801c59e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801c5a2:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801c5a6:	f500 7880 	add.w	r8, r0, #256	; 0x100
 801c5aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5ae:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 801c5b2:	444b      	add	r3, r9
 801c5b4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c5b8:	0a1b      	lsrs	r3, r3, #8
 801c5ba:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c5be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c5c2:	ea43 0308 	orr.w	r3, r3, r8
 801c5c6:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 801c5ca:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c5ce:	f002 18ff 	and.w	r8, r2, #16711935	; 0xff00ff
 801c5d2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c5d6:	fb0c f000 	mul.w	r0, ip, r0
 801c5da:	fb0c f606 	mul.w	r6, ip, r6
 801c5de:	fb05 0808 	mla	r8, r5, r8, r0
 801c5e2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 801c5e6:	fb05 6502 	mla	r5, r5, r2, r6
 801c5ea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c5ee:	fb07 8800 	mla	r8, r7, r0, r8
 801c5f2:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 801c5f6:	fb07 5704 	mla	r7, r7, r4, r5
 801c5fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c5fe:	fb0e 8000 	mla	r0, lr, r0, r8
 801c602:	780a      	ldrb	r2, [r1, #0]
 801c604:	fb0e 7e03 	mla	lr, lr, r3, r7
 801c608:	9b01      	ldr	r3, [sp, #4]
 801c60a:	0a00      	lsrs	r0, r0, #8
 801c60c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c610:	43db      	mvns	r3, r3
 801c612:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c616:	b2db      	uxtb	r3, r3
 801c618:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c61c:	ea40 0e0e 	orr.w	lr, r0, lr
 801c620:	fb02 f003 	mul.w	r0, r2, r3
 801c624:	1c42      	adds	r2, r0, #1
 801c626:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c62a:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 801c62e:	700a      	strb	r2, [r1, #0]
 801c630:	784a      	ldrb	r2, [r1, #1]
 801c632:	435a      	muls	r2, r3
 801c634:	1c50      	adds	r0, r2, #1
 801c636:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c63a:	ea4f 221e 	mov.w	r2, lr, lsr #8
 801c63e:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c642:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c646:	704a      	strb	r2, [r1, #1]
 801c648:	788a      	ldrb	r2, [r1, #2]
 801c64a:	4353      	muls	r3, r2
 801c64c:	1c5a      	adds	r2, r3, #1
 801c64e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c652:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801c656:	f881 e002 	strb.w	lr, [r1, #2]
 801c65a:	b003      	add	sp, #12
 801c65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c660:	080261a0 	.word	0x080261a0
 801c664:	080265b6 	.word	0x080265b6
 801c668:	0802616d 	.word	0x0802616d

0801c66c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c670:	ed2d 8b08 	vpush	{d8-d11}
 801c674:	b099      	sub	sp, #100	; 0x64
 801c676:	eeb0 aa40 	vmov.f32	s20, s0
 801c67a:	eef0 9a60 	vmov.f32	s19, s1
 801c67e:	9017      	str	r0, [sp, #92]	; 0x5c
 801c680:	eeb0 9a41 	vmov.f32	s18, s2
 801c684:	9306      	str	r3, [sp, #24]
 801c686:	eeb0 8a62 	vmov.f32	s16, s5
 801c68a:	eef0 8a43 	vmov.f32	s17, s6
 801c68e:	eef0 ba44 	vmov.f32	s23, s8
 801c692:	eeb0 ba64 	vmov.f32	s22, s9
 801c696:	eef0 aa45 	vmov.f32	s21, s10
 801c69a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c69e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801c6a0:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 801c6a4:	6850      	ldr	r0, [r2, #4]
 801c6a6:	6812      	ldr	r2, [r2, #0]
 801c6a8:	fb00 1303 	mla	r3, r0, r3, r1
 801c6ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c6b0:	18d3      	adds	r3, r2, r3
 801c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6b4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c6b6:	e9dd 562b 	ldrd	r5, r6, [sp, #172]	; 0xac
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	930e      	str	r3, [sp, #56]	; 0x38
 801c6be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	dc03      	bgt.n	801c6cc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801c6c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c6c6:	2b00      	cmp	r3, #0
 801c6c8:	f340 8360 	ble.w	801cd8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801c6cc:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c6ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c6d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c6d6:	1e48      	subs	r0, r1, #1
 801c6d8:	1e57      	subs	r7, r2, #1
 801c6da:	9b06      	ldr	r3, [sp, #24]
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	f340 817b 	ble.w	801c9d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801c6e2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c6e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c6ea:	d406      	bmi.n	801c6fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c6ec:	4584      	cmp	ip, r0
 801c6ee:	da04      	bge.n	801c6fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	db02      	blt.n	801c6fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c6f4:	42bb      	cmp	r3, r7
 801c6f6:	f2c0 8170 	blt.w	801c9da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c6fa:	f11c 0c01 	adds.w	ip, ip, #1
 801c6fe:	f100 8160 	bmi.w	801c9c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c702:	4561      	cmp	r1, ip
 801c704:	f2c0 815d 	blt.w	801c9c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c708:	3301      	adds	r3, #1
 801c70a:	f100 815a 	bmi.w	801c9c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c70e:	429a      	cmp	r2, r3
 801c710:	f2c0 8157 	blt.w	801c9c2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801c714:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c718:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c71a:	f1b8 0f00 	cmp.w	r8, #0
 801c71e:	f340 8179 	ble.w	801ca14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801c722:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 801c724:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c728:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801c72a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c72e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c732:	142a      	asrs	r2, r5, #16
 801c734:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c738:	689b      	ldr	r3, [r3, #8]
 801c73a:	f100 81be 	bmi.w	801caba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c73e:	f103 39ff 	add.w	r9, r3, #4294967295
 801c742:	454a      	cmp	r2, r9
 801c744:	f280 81b9 	bge.w	801caba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c748:	f1bc 0f00 	cmp.w	ip, #0
 801c74c:	f2c0 81b5 	blt.w	801caba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c750:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c754:	45cc      	cmp	ip, r9
 801c756:	f280 81b0 	bge.w	801caba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801c75a:	b21b      	sxth	r3, r3
 801c75c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c75e:	fb0c 2203 	mla	r2, ip, r3, r2
 801c762:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c766:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c76a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c76e:	2900      	cmp	r1, #0
 801c770:	f000 8197 	beq.w	801caa2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x436>
 801c774:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c778:	940a      	str	r4, [sp, #40]	; 0x28
 801c77a:	0e24      	lsrs	r4, r4, #24
 801c77c:	9411      	str	r4, [sp, #68]	; 0x44
 801c77e:	b180      	cbz	r0, 801c7a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801c780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c784:	3b01      	subs	r3, #1
 801c786:	009b      	lsls	r3, r3, #2
 801c788:	3304      	adds	r3, #4
 801c78a:	eb09 0c03 	add.w	ip, r9, r3
 801c78e:	f859 3003 	ldr.w	r3, [r9, r3]
 801c792:	9307      	str	r3, [sp, #28]
 801c794:	0e1b      	lsrs	r3, r3, #24
 801c796:	930f      	str	r3, [sp, #60]	; 0x3c
 801c798:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c79c:	930b      	str	r3, [sp, #44]	; 0x2c
 801c79e:	0e1b      	lsrs	r3, r3, #24
 801c7a0:	9312      	str	r3, [sp, #72]	; 0x48
 801c7a2:	b289      	uxth	r1, r1
 801c7a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c7a6:	b280      	uxth	r0, r0
 801c7a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c7aa:	fb01 fa00 	mul.w	sl, r1, r0
 801c7ae:	0109      	lsls	r1, r1, #4
 801c7b0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c7b4:	eba1 090a 	sub.w	r9, r1, sl
 801c7b8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c7bc:	b280      	uxth	r0, r0
 801c7be:	fa1f f989 	uxth.w	r9, r9
 801c7c2:	1a09      	subs	r1, r1, r0
 801c7c4:	fb09 f303 	mul.w	r3, r9, r3
 801c7c8:	b289      	uxth	r1, r1
 801c7ca:	fb01 330e 	mla	r3, r1, lr, r3
 801c7ce:	fb00 3304 	mla	r3, r0, r4, r3
 801c7d2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c7d4:	fb0a 3304 	mla	r3, sl, r4, r3
 801c7d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	f000 80e8 	beq.w	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801c7e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c7e6:	d01b      	beq.n	801c820 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801c7e8:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c7ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c7f0:	fb0e fb0b 	mul.w	fp, lr, fp
 801c7f4:	fb0e fe02 	mul.w	lr, lr, r2
 801c7f8:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c7fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c800:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c804:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c808:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c80c:	445a      	add	r2, fp
 801c80e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c812:	0a12      	lsrs	r2, r2, #8
 801c814:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c818:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c81c:	ea42 020c 	orr.w	r2, r2, ip
 801c820:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c822:	2cff      	cmp	r4, #255	; 0xff
 801c824:	d021      	beq.n	801c86a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801c826:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c828:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c82c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c82e:	fb04 fc0c 	mul.w	ip, r4, ip
 801c832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c834:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c838:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c83c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c83e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c842:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c846:	fb04 fb0b 	mul.w	fp, r4, fp
 801c84a:	44e6      	add	lr, ip
 801c84c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c850:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c854:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c858:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c85c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c860:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c864:	ea4e 040b 	orr.w	r4, lr, fp
 801c868:	940a      	str	r4, [sp, #40]	; 0x28
 801c86a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c86c:	2cff      	cmp	r4, #255	; 0xff
 801c86e:	d021      	beq.n	801c8b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801c870:	9c07      	ldr	r4, [sp, #28]
 801c872:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c876:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c878:	fb04 fc0c 	mul.w	ip, r4, ip
 801c87c:	9c07      	ldr	r4, [sp, #28]
 801c87e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c882:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c886:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c888:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c88c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c890:	fb04 fb0b 	mul.w	fp, r4, fp
 801c894:	44e6      	add	lr, ip
 801c896:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c89a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c89e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c8a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c8aa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c8ae:	ea4e 040b 	orr.w	r4, lr, fp
 801c8b2:	9407      	str	r4, [sp, #28]
 801c8b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8b6:	2cff      	cmp	r4, #255	; 0xff
 801c8b8:	d021      	beq.n	801c8fe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801c8ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c8bc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8c2:	fb04 fc0c 	mul.w	ip, r4, ip
 801c8c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c8c8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c8cc:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c8d0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c8d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c8d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8da:	fb04 fb0b 	mul.w	fp, r4, fp
 801c8de:	44e6      	add	lr, ip
 801c8e0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c8e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8e8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c8ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8f0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c8f4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c8f8:	ea4e 040b 	orr.w	r4, lr, fp
 801c8fc:	940b      	str	r4, [sp, #44]	; 0x2c
 801c8fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c900:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c904:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c908:	2bff      	cmp	r3, #255	; 0xff
 801c90a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c90e:	9c07      	ldr	r4, [sp, #28]
 801c910:	fb09 fc0c 	mul.w	ip, r9, ip
 801c914:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c918:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c91c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c91e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c922:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c926:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c928:	fb0a cc0e 	mla	ip, sl, lr, ip
 801c92c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c930:	fb09 f90e 	mul.w	r9, r9, lr
 801c934:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c938:	fb01 9202 	mla	r2, r1, r2, r9
 801c93c:	9907      	ldr	r1, [sp, #28]
 801c93e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c942:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801c946:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c948:	fb00 220b 	mla	r2, r0, fp, r2
 801c94c:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c950:	fb0a 2a00 	mla	sl, sl, r0, r2
 801c954:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c958:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c95c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c960:	fa5f f08c 	uxtb.w	r0, ip
 801c964:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c968:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c96c:	f000 80a2 	beq.w	801cab4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c970:	43db      	mvns	r3, r3
 801c972:	783a      	ldrb	r2, [r7, #0]
 801c974:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c978:	b2db      	uxtb	r3, r3
 801c97a:	fb02 fe03 	mul.w	lr, r2, r3
 801c97e:	fb0a fa03 	mul.w	sl, sl, r3
 801c982:	f10e 0201 	add.w	r2, lr, #1
 801c986:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c98a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c98e:	703a      	strb	r2, [r7, #0]
 801c990:	787a      	ldrb	r2, [r7, #1]
 801c992:	fb02 f003 	mul.w	r0, r2, r3
 801c996:	f10a 0301 	add.w	r3, sl, #1
 801c99a:	1c42      	adds	r2, r0, #1
 801c99c:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c9a0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c9a4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c9a8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c9ac:	707a      	strb	r2, [r7, #1]
 801c9ae:	f887 c002 	strb.w	ip, [r7, #2]
 801c9b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c9b4:	3703      	adds	r7, #3
 801c9b6:	f108 38ff 	add.w	r8, r8, #4294967295
 801c9ba:	441d      	add	r5, r3
 801c9bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c9be:	441e      	add	r6, r3
 801c9c0:	e6ab      	b.n	801c71a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801c9c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801c9c4:	441d      	add	r5, r3
 801c9c6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801c9c8:	441e      	add	r6, r3
 801c9ca:	9b06      	ldr	r3, [sp, #24]
 801c9cc:	3b01      	subs	r3, #1
 801c9ce:	9306      	str	r3, [sp, #24]
 801c9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c9d2:	3303      	adds	r3, #3
 801c9d4:	9309      	str	r3, [sp, #36]	; 0x24
 801c9d6:	e680      	b.n	801c6da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c9d8:	d024      	beq.n	801ca24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b8>
 801c9da:	9b06      	ldr	r3, [sp, #24]
 801c9dc:	982d      	ldr	r0, [sp, #180]	; 0xb4
 801c9de:	3b01      	subs	r3, #1
 801c9e0:	fb00 5003 	mla	r0, r0, r3, r5
 801c9e4:	1400      	asrs	r0, r0, #16
 801c9e6:	f53f ae95 	bmi.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c9ea:	3901      	subs	r1, #1
 801c9ec:	4288      	cmp	r0, r1
 801c9ee:	f6bf ae91 	bge.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c9f2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 801c9f4:	fb01 6303 	mla	r3, r1, r3, r6
 801c9f8:	141b      	asrs	r3, r3, #16
 801c9fa:	f53f ae8b 	bmi.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801c9fe:	3a01      	subs	r2, #1
 801ca00:	4293      	cmp	r3, r2
 801ca02:	f6bf ae87 	bge.w	801c714 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca08:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ca0c:	1cdf      	adds	r7, r3, #3
 801ca0e:	f1bb 0f00 	cmp.w	fp, #0
 801ca12:	dc6e      	bgt.n	801caf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ca14:	9b06      	ldr	r3, [sp, #24]
 801ca16:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ca1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca1c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ca20:	4423      	add	r3, r4
 801ca22:	9309      	str	r3, [sp, #36]	; 0x24
 801ca24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	f340 81b0 	ble.w	801cd8c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x720>
 801ca2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca32:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801ca36:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801ca3a:	eef0 6a48 	vmov.f32	s13, s16
 801ca3e:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801ca42:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801ca46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca4a:	ee16 5a90 	vmov	r5, s13
 801ca4e:	eef0 6a68 	vmov.f32	s13, s17
 801ca52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca56:	ee16 6a90 	vmov	r6, s13
 801ca5a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801ca5e:	ee69 7a27 	vmul.f32	s15, s18, s15
 801ca62:	ee37 8a48 	vsub.f32	s16, s14, s16
 801ca66:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801ca6a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801ca6e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801ca72:	ee18 2a10 	vmov	r2, s16
 801ca76:	eeb0 8a47 	vmov.f32	s16, s14
 801ca7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca7e:	ee18 2a90 	vmov	r2, s17
 801ca82:	932d      	str	r3, [sp, #180]	; 0xb4
 801ca84:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca86:	eef0 8a67 	vmov.f32	s17, s15
 801ca8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca8e:	932e      	str	r3, [sp, #184]	; 0xb8
 801ca90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca92:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801ca94:	3b01      	subs	r3, #1
 801ca96:	9315      	str	r3, [sp, #84]	; 0x54
 801ca98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca9a:	bf08      	it	eq
 801ca9c:	4613      	moveq	r3, r2
 801ca9e:	9306      	str	r3, [sp, #24]
 801caa0:	e60d      	b.n	801c6be <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801caa2:	2800      	cmp	r0, #0
 801caa4:	f43f ae7d 	beq.w	801c7a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801caa8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801caac:	9307      	str	r3, [sp, #28]
 801caae:	0e1b      	lsrs	r3, r3, #24
 801cab0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cab2:	e676      	b.n	801c7a2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801cab4:	7038      	strb	r0, [r7, #0]
 801cab6:	7079      	strb	r1, [r7, #1]
 801cab8:	e779      	b.n	801c9ae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801caba:	f112 0901 	adds.w	r9, r2, #1
 801cabe:	f53f af78 	bmi.w	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cac2:	454b      	cmp	r3, r9
 801cac4:	f6ff af75 	blt.w	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cac8:	f11c 0901 	adds.w	r9, ip, #1
 801cacc:	f53f af71 	bmi.w	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cad0:	45ce      	cmp	lr, r9
 801cad2:	f6ff af6e 	blt.w	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801cad6:	b21b      	sxth	r3, r3
 801cad8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801cadc:	fa0f f28e 	sxth.w	r2, lr
 801cae0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801cae4:	9200      	str	r2, [sp, #0]
 801cae6:	4639      	mov	r1, r7
 801cae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caea:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801caec:	f7ff fc7c 	bl	801c3e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801caf0:	e75f      	b.n	801c9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 801caf2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801caf4:	1429      	asrs	r1, r5, #16
 801caf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801caf8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cafc:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801cb00:	1433      	asrs	r3, r6, #16
 801cb02:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cb06:	fb0c 1303 	mla	r3, ip, r3, r1
 801cb0a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801cb0c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801cb10:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801cb14:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cb18:	2a00      	cmp	r2, #0
 801cb1a:	f000 8129 	beq.w	801cd70 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801cb1e:	684c      	ldr	r4, [r1, #4]
 801cb20:	940c      	str	r4, [sp, #48]	; 0x30
 801cb22:	0e24      	lsrs	r4, r4, #24
 801cb24:	9413      	str	r4, [sp, #76]	; 0x4c
 801cb26:	b198      	cbz	r0, 801cb50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cb28:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801cb2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cb30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801cb34:	f10c 0c04 	add.w	ip, ip, #4
 801cb38:	eb01 080c 	add.w	r8, r1, ip
 801cb3c:	f851 100c 	ldr.w	r1, [r1, ip]
 801cb40:	9108      	str	r1, [sp, #32]
 801cb42:	0e09      	lsrs	r1, r1, #24
 801cb44:	9110      	str	r1, [sp, #64]	; 0x40
 801cb46:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cb4a:	910d      	str	r1, [sp, #52]	; 0x34
 801cb4c:	0e09      	lsrs	r1, r1, #24
 801cb4e:	9114      	str	r1, [sp, #80]	; 0x50
 801cb50:	b292      	uxth	r2, r2
 801cb52:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cb54:	b280      	uxth	r0, r0
 801cb56:	fb02 f900 	mul.w	r9, r2, r0
 801cb5a:	0112      	lsls	r2, r2, #4
 801cb5c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cb60:	eba2 0809 	sub.w	r8, r2, r9
 801cb64:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801cb68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cb6a:	b280      	uxth	r0, r0
 801cb6c:	fa1f f888 	uxth.w	r8, r8
 801cb70:	1a09      	subs	r1, r1, r0
 801cb72:	fb08 f202 	mul.w	r2, r8, r2
 801cb76:	b289      	uxth	r1, r1
 801cb78:	fb01 220e 	mla	r2, r1, lr, r2
 801cb7c:	fb00 2204 	mla	r2, r0, r4, r2
 801cb80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cb82:	fb09 2204 	mla	r2, r9, r4, r2
 801cb86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cb8a:	2a00      	cmp	r2, #0
 801cb8c:	f000 80e8 	beq.w	801cd60 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801cb90:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801cb94:	d01b      	beq.n	801cbce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x562>
 801cb96:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cb9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cb9e:	fb0e fa0a 	mul.w	sl, lr, sl
 801cba2:	fb0e fe03 	mul.w	lr, lr, r3
 801cba6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cbaa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cbae:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801cbb2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbb6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801cbba:	4453      	add	r3, sl
 801cbbc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbc0:	0a1b      	lsrs	r3, r3, #8
 801cbc2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cbc6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbca:	ea43 030c 	orr.w	r3, r3, ip
 801cbce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cbd0:	2cff      	cmp	r4, #255	; 0xff
 801cbd2:	d021      	beq.n	801cc18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ac>
 801cbd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cbd6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cbda:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cbdc:	fb04 fc0c 	mul.w	ip, r4, ip
 801cbe0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801cbe2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cbe6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cbea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801cbec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cbf0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cbf4:	fb04 fa0a 	mul.w	sl, r4, sl
 801cbf8:	44e6      	add	lr, ip
 801cbfa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cbfe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc0e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc12:	ea4e 040a 	orr.w	r4, lr, sl
 801cc16:	940c      	str	r4, [sp, #48]	; 0x30
 801cc18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc1a:	2cff      	cmp	r4, #255	; 0xff
 801cc1c:	d021      	beq.n	801cc62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5f6>
 801cc1e:	9c08      	ldr	r4, [sp, #32]
 801cc20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc26:	fb04 fc0c 	mul.w	ip, r4, ip
 801cc2a:	9c08      	ldr	r4, [sp, #32]
 801cc2c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801cc30:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc32:	fb04 fa0e 	mul.w	sl, r4, lr
 801cc36:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cc3a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cc3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc42:	44e6      	add	lr, ip
 801cc44:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cc48:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc4c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc50:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc54:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc58:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc5c:	ea4e 040a 	orr.w	r4, lr, sl
 801cc60:	9408      	str	r4, [sp, #32]
 801cc62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc64:	2cff      	cmp	r4, #255	; 0xff
 801cc66:	d021      	beq.n	801ccac <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x640>
 801cc68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cc6a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cc6e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc70:	fb04 fc0c 	mul.w	ip, r4, ip
 801cc74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cc76:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801cc7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc7e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc80:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cc84:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc88:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc8c:	44e6      	add	lr, ip
 801cc8e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801cc92:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cc96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cc9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801cc9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cca2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cca6:	ea4e 040a 	orr.w	r4, lr, sl
 801ccaa:	940d      	str	r4, [sp, #52]	; 0x34
 801ccac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ccae:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801ccb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ccb6:	2aff      	cmp	r2, #255	; 0xff
 801ccb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ccbc:	9c08      	ldr	r4, [sp, #32]
 801ccbe:	fb08 fc0c 	mul.w	ip, r8, ip
 801ccc2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ccc6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ccca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cccc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ccd0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801ccd4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ccd6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801ccda:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ccde:	fb08 f80e 	mul.w	r8, r8, lr
 801cce2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cce6:	fb01 8303 	mla	r3, r1, r3, r8
 801ccea:	9908      	ldr	r1, [sp, #32]
 801ccec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ccf0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ccf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ccf6:	fb00 330a 	mla	r3, r0, sl, r3
 801ccfa:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ccfe:	fb09 3e0e 	mla	lr, r9, lr, r3
 801cd02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cd06:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801cd0a:	ea4c 0c0e 	orr.w	ip, ip, lr
 801cd0e:	fa5f f08c 	uxtb.w	r0, ip
 801cd12:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801cd16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cd1a:	d032      	beq.n	801cd82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x716>
 801cd1c:	43d2      	mvns	r2, r2
 801cd1e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801cd22:	b2d2      	uxtb	r2, r2
 801cd24:	fb0e fe02 	mul.w	lr, lr, r2
 801cd28:	f10e 0301 	add.w	r3, lr, #1
 801cd2c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801cd30:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cd34:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801cd38:	4350      	muls	r0, r2
 801cd3a:	f807 3c03 	strb.w	r3, [r7, #-3]
 801cd3e:	1c43      	adds	r3, r0, #1
 801cd40:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801cd44:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cd48:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801cd4c:	4353      	muls	r3, r2
 801cd4e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cd52:	1c5a      	adds	r2, r3, #1
 801cd54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cd58:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801cd5c:	f807 cc01 	strb.w	ip, [r7, #-1]
 801cd60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801cd62:	3703      	adds	r7, #3
 801cd64:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cd68:	441d      	add	r5, r3
 801cd6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801cd6c:	441e      	add	r6, r3
 801cd6e:	e64e      	b.n	801ca0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a2>
 801cd70:	2800      	cmp	r0, #0
 801cd72:	f43f aeed 	beq.w	801cb50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cd76:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801cd7a:	9108      	str	r1, [sp, #32]
 801cd7c:	0e09      	lsrs	r1, r1, #24
 801cd7e:	9110      	str	r1, [sp, #64]	; 0x40
 801cd80:	e6e6      	b.n	801cb50 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801cd82:	f807 0c03 	strb.w	r0, [r7, #-3]
 801cd86:	f807 1c02 	strb.w	r1, [r7, #-2]
 801cd8a:	e7e7      	b.n	801cd5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f0>
 801cd8c:	b019      	add	sp, #100	; 0x64
 801cd8e:	ecbd 8b08 	vpop	{d8-d11}
 801cd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801cd98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801cd98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd9c:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801cda0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801cda4:	2800      	cmp	r0, #0
 801cda6:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801cdaa:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801cdae:	fb0c 0e03 	mla	lr, ip, r3, r0
 801cdb2:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801cdb6:	db6b      	blt.n	801ce90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdb8:	4580      	cmp	r8, r0
 801cdba:	dd69      	ble.n	801ce90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdbc:	f1bc 0f00 	cmp.w	ip, #0
 801cdc0:	db66      	blt.n	801ce90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdc2:	45e1      	cmp	r9, ip
 801cdc4:	dd64      	ble.n	801ce90 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf8>
 801cdc6:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801cdca:	f01e 0f01 	tst.w	lr, #1
 801cdce:	5d16      	ldrb	r6, [r2, r4]
 801cdd0:	bf0c      	ite	eq
 801cdd2:	f006 060f 	andeq.w	r6, r6, #15
 801cdd6:	1136      	asrne	r6, r6, #4
 801cdd8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cddc:	b2f6      	uxtb	r6, r6
 801cdde:	f110 0a01 	adds.w	sl, r0, #1
 801cde2:	d457      	bmi.n	801ce94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cde4:	45d0      	cmp	r8, sl
 801cde6:	dd55      	ble.n	801ce94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cde8:	f1bc 0f00 	cmp.w	ip, #0
 801cdec:	db52      	blt.n	801ce94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cdee:	45e1      	cmp	r9, ip
 801cdf0:	dd50      	ble.n	801ce94 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xfc>
 801cdf2:	2f00      	cmp	r7, #0
 801cdf4:	f000 80ac 	beq.w	801cf50 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b8>
 801cdf8:	f10e 0b01 	add.w	fp, lr, #1
 801cdfc:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801ce00:	f01b 0f01 	tst.w	fp, #1
 801ce04:	5d14      	ldrb	r4, [r2, r4]
 801ce06:	bf0c      	ite	eq
 801ce08:	f004 040f 	andeq.w	r4, r4, #15
 801ce0c:	1124      	asrne	r4, r4, #4
 801ce0e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ce12:	b2e4      	uxtb	r4, r4
 801ce14:	2d00      	cmp	r5, #0
 801ce16:	f000 8096 	beq.w	801cf46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ae>
 801ce1a:	2800      	cmp	r0, #0
 801ce1c:	f10c 0c01 	add.w	ip, ip, #1
 801ce20:	db3c      	blt.n	801ce9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce22:	4580      	cmp	r8, r0
 801ce24:	dd3a      	ble.n	801ce9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce26:	f1bc 0f00 	cmp.w	ip, #0
 801ce2a:	db37      	blt.n	801ce9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce2c:	45e1      	cmp	r9, ip
 801ce2e:	dd35      	ble.n	801ce9c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x104>
 801ce30:	eb03 0b0e 	add.w	fp, r3, lr
 801ce34:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801ce38:	f01b 0f01 	tst.w	fp, #1
 801ce3c:	5c10      	ldrb	r0, [r2, r0]
 801ce3e:	bf0c      	ite	eq
 801ce40:	f000 000f 	andeq.w	r0, r0, #15
 801ce44:	1100      	asrne	r0, r0, #4
 801ce46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ce4a:	b2c0      	uxtb	r0, r0
 801ce4c:	f1ba 0f00 	cmp.w	sl, #0
 801ce50:	db26      	blt.n	801cea0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce52:	45d0      	cmp	r8, sl
 801ce54:	dd24      	ble.n	801cea0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce56:	f1bc 0f00 	cmp.w	ip, #0
 801ce5a:	db21      	blt.n	801cea0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce5c:	45e1      	cmp	r9, ip
 801ce5e:	dd1f      	ble.n	801cea0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x108>
 801ce60:	b307      	cbz	r7, 801cea4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10c>
 801ce62:	3301      	adds	r3, #1
 801ce64:	449e      	add	lr, r3
 801ce66:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ce6a:	f01e 0f01 	tst.w	lr, #1
 801ce6e:	5cd3      	ldrb	r3, [r2, r3]
 801ce70:	bf0c      	ite	eq
 801ce72:	f003 030f 	andeq.w	r3, r3, #15
 801ce76:	111b      	asrne	r3, r3, #4
 801ce78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ce7c:	b2db      	uxtb	r3, r3
 801ce7e:	2f0f      	cmp	r7, #15
 801ce80:	d911      	bls.n	801cea6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x10e>
 801ce82:	4b35      	ldr	r3, [pc, #212]	; (801cf58 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c0>)
 801ce84:	f240 115b 	movw	r1, #347	; 0x15b
 801ce88:	4a34      	ldr	r2, [pc, #208]	; (801cf5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c4>)
 801ce8a:	4835      	ldr	r0, [pc, #212]	; (801cf60 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1c8>)
 801ce8c:	f003 f982 	bl	8020194 <__assert_func>
 801ce90:	2600      	movs	r6, #0
 801ce92:	e7a4      	b.n	801cdde <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x46>
 801ce94:	2400      	movs	r4, #0
 801ce96:	e7bd      	b.n	801ce14 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x7c>
 801ce98:	463c      	mov	r4, r7
 801ce9a:	e7be      	b.n	801ce1a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x82>
 801ce9c:	2000      	movs	r0, #0
 801ce9e:	e7d5      	b.n	801ce4c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xb4>
 801cea0:	2300      	movs	r3, #0
 801cea2:	e7ec      	b.n	801ce7e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xe6>
 801cea4:	463b      	mov	r3, r7
 801cea6:	2d0f      	cmp	r5, #15
 801cea8:	d8eb      	bhi.n	801ce82 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801ceaa:	b2bf      	uxth	r7, r7
 801ceac:	b2ad      	uxth	r5, r5
 801ceae:	fb07 f205 	mul.w	r2, r7, r5
 801ceb2:	013f      	lsls	r7, r7, #4
 801ceb4:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801ceb8:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801cebc:	1abf      	subs	r7, r7, r2
 801cebe:	b2ad      	uxth	r5, r5
 801cec0:	b2bf      	uxth	r7, r7
 801cec2:	ebac 0c05 	sub.w	ip, ip, r5
 801cec6:	437c      	muls	r4, r7
 801cec8:	fa1f fc8c 	uxth.w	ip, ip
 801cecc:	fb06 440c 	mla	r4, r6, ip, r4
 801ced0:	fb05 4400 	mla	r4, r5, r0, r4
 801ced4:	fb02 4203 	mla	r2, r2, r3, r4
 801ced8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cedc:	b38a      	cbz	r2, 801cf42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1aa>
 801cede:	4b21      	ldr	r3, [pc, #132]	; (801cf64 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1cc>)
 801cee0:	681c      	ldr	r4, [r3, #0]
 801cee2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801cee6:	b2e5      	uxtb	r5, r4
 801cee8:	4353      	muls	r3, r2
 801ceea:	1c5a      	adds	r2, r3, #1
 801ceec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cef0:	1212      	asrs	r2, r2, #8
 801cef2:	b290      	uxth	r0, r2
 801cef4:	43d2      	mvns	r2, r2
 801cef6:	fb15 f500 	smulbb	r5, r5, r0
 801cefa:	b2d3      	uxtb	r3, r2
 801cefc:	780a      	ldrb	r2, [r1, #0]
 801cefe:	fb02 5203 	mla	r2, r2, r3, r5
 801cf02:	b292      	uxth	r2, r2
 801cf04:	1c55      	adds	r5, r2, #1
 801cf06:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cf0a:	784d      	ldrb	r5, [r1, #1]
 801cf0c:	fb15 f503 	smulbb	r5, r5, r3
 801cf10:	1212      	asrs	r2, r2, #8
 801cf12:	700a      	strb	r2, [r1, #0]
 801cf14:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801cf18:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cf1c:	fb02 5200 	mla	r2, r2, r0, r5
 801cf20:	b292      	uxth	r2, r2
 801cf22:	1c55      	adds	r5, r2, #1
 801cf24:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cf28:	1212      	asrs	r2, r2, #8
 801cf2a:	704a      	strb	r2, [r1, #1]
 801cf2c:	788a      	ldrb	r2, [r1, #2]
 801cf2e:	fb12 f303 	smulbb	r3, r2, r3
 801cf32:	fb04 3300 	mla	r3, r4, r0, r3
 801cf36:	b29b      	uxth	r3, r3
 801cf38:	1c5a      	adds	r2, r3, #1
 801cf3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cf3e:	121b      	asrs	r3, r3, #8
 801cf40:	708b      	strb	r3, [r1, #2]
 801cf42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf46:	2f0f      	cmp	r7, #15
 801cf48:	d89b      	bhi.n	801ce82 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xea>
 801cf4a:	462b      	mov	r3, r5
 801cf4c:	4628      	mov	r0, r5
 801cf4e:	e7ac      	b.n	801ceaa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x112>
 801cf50:	2d00      	cmp	r5, #0
 801cf52:	d1a1      	bne.n	801ce98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x100>
 801cf54:	462c      	mov	r4, r5
 801cf56:	e7f8      	b.n	801cf4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b2>
 801cf58:	080261a0 	.word	0x080261a0
 801cf5c:	080265b6 	.word	0x080265b6
 801cf60:	0802616d 	.word	0x0802616d
 801cf64:	2400f1c0 	.word	0x2400f1c0

0801cf68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf6c:	ed2d 8b08 	vpush	{d8-d11}
 801cf70:	b097      	sub	sp, #92	; 0x5c
 801cf72:	eeb0 aa40 	vmov.f32	s20, s0
 801cf76:	eef0 9a60 	vmov.f32	s19, s1
 801cf7a:	9214      	str	r2, [sp, #80]	; 0x50
 801cf7c:	eeb0 9a41 	vmov.f32	s18, s2
 801cf80:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801cf82:	eeb0 8a62 	vmov.f32	s16, s5
 801cf86:	9309      	str	r3, [sp, #36]	; 0x24
 801cf88:	eef0 8a43 	vmov.f32	s17, s6
 801cf8c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801cf90:	eef0 ba44 	vmov.f32	s23, s8
 801cf94:	9015      	str	r0, [sp, #84]	; 0x54
 801cf96:	eeb0 ba64 	vmov.f32	s22, s9
 801cf9a:	6850      	ldr	r0, [r2, #4]
 801cf9c:	eef0 aa45 	vmov.f32	s21, s10
 801cfa0:	910c      	str	r1, [sp, #48]	; 0x30
 801cfa2:	930e      	str	r3, [sp, #56]	; 0x38
 801cfa4:	6812      	ldr	r2, [r2, #0]
 801cfa6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801cfaa:	e9dd 5629 	ldrd	r5, r6, [sp, #164]	; 0xa4
 801cfae:	fb00 1303 	mla	r3, r0, r3, r1
 801cfb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cfb6:	eb02 0a03 	add.w	sl, r2, r3
 801cfba:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cfbc:	689b      	ldr	r3, [r3, #8]
 801cfbe:	3301      	adds	r3, #1
 801cfc0:	f023 0301 	bic.w	r3, r3, #1
 801cfc4:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfc6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cfc8:	681f      	ldr	r7, [r3, #0]
 801cfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cfcc:	2b00      	cmp	r3, #0
 801cfce:	dc03      	bgt.n	801cfd8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801cfd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	f340 8247 	ble.w	801d466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801cfd8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cfda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cfde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cfe2:	1e48      	subs	r0, r1, #1
 801cfe4:	f102 3cff 	add.w	ip, r2, #4294967295
 801cfe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	f340 80e5 	ble.w	801d1ba <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801cff0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801cff4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cff8:	d406      	bmi.n	801d008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cffa:	4586      	cmp	lr, r0
 801cffc:	da04      	bge.n	801d008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801cffe:	2b00      	cmp	r3, #0
 801d000:	db02      	blt.n	801d008 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801d002:	4563      	cmp	r3, ip
 801d004:	f2c0 80da 	blt.w	801d1bc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d008:	f11e 0e01 	adds.w	lr, lr, #1
 801d00c:	f100 80cb 	bmi.w	801d1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d010:	4571      	cmp	r1, lr
 801d012:	f2c0 80c8 	blt.w	801d1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d016:	3301      	adds	r3, #1
 801d018:	f100 80c5 	bmi.w	801d1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d01c:	429a      	cmp	r2, r3
 801d01e:	f2c0 80c2 	blt.w	801d1a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801d022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d024:	46d0      	mov	r8, sl
 801d026:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d02a:	930d      	str	r3, [sp, #52]	; 0x34
 801d02c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d02e:	2b00      	cmp	r3, #0
 801d030:	f340 80e3 	ble.w	801d1fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801d034:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801d036:	1430      	asrs	r0, r6, #16
 801d038:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801d03c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d040:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d044:	142b      	asrs	r3, r5, #16
 801d046:	f100 812e 	bmi.w	801d2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d04a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801d04e:	455b      	cmp	r3, fp
 801d050:	f280 8129 	bge.w	801d2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d054:	2800      	cmp	r0, #0
 801d056:	f2c0 8126 	blt.w	801d2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d05a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801d05e:	4558      	cmp	r0, fp
 801d060:	f280 8121 	bge.w	801d2a6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d064:	fb00 3309 	mla	r3, r0, r9, r3
 801d068:	0858      	lsrs	r0, r3, #1
 801d06a:	07dc      	lsls	r4, r3, #31
 801d06c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801d070:	bf54      	ite	pl
 801d072:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d076:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d07a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d07e:	fa5f fc8c 	uxtb.w	ip, ip
 801d082:	2a00      	cmp	r2, #0
 801d084:	f000 80fe 	beq.w	801d284 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801d088:	1c58      	adds	r0, r3, #1
 801d08a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d08e:	07c0      	lsls	r0, r0, #31
 801d090:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801d094:	bf54      	ite	pl
 801d096:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d09a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d09e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d0a2:	fa5f f08e 	uxtb.w	r0, lr
 801d0a6:	9010      	str	r0, [sp, #64]	; 0x40
 801d0a8:	b1d9      	cbz	r1, 801d0e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d0aa:	444b      	add	r3, r9
 801d0ac:	0858      	lsrs	r0, r3, #1
 801d0ae:	07dc      	lsls	r4, r3, #31
 801d0b0:	f103 0301 	add.w	r3, r3, #1
 801d0b4:	5c38      	ldrb	r0, [r7, r0]
 801d0b6:	bf54      	ite	pl
 801d0b8:	f000 000f 	andpl.w	r0, r0, #15
 801d0bc:	1100      	asrmi	r0, r0, #4
 801d0be:	07dc      	lsls	r4, r3, #31
 801d0c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d0c4:	b2c0      	uxtb	r0, r0
 801d0c6:	900a      	str	r0, [sp, #40]	; 0x28
 801d0c8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801d0cc:	f817 e000 	ldrb.w	lr, [r7, r0]
 801d0d0:	bf54      	ite	pl
 801d0d2:	f00e 030f 	andpl.w	r3, lr, #15
 801d0d6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801d0da:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d0de:	b2db      	uxtb	r3, r3
 801d0e0:	9311      	str	r3, [sp, #68]	; 0x44
 801d0e2:	b292      	uxth	r2, r2
 801d0e4:	b289      	uxth	r1, r1
 801d0e6:	0113      	lsls	r3, r2, #4
 801d0e8:	fb02 f001 	mul.w	r0, r2, r1
 801d0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0ee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d0f2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801d0f6:	1a1b      	subs	r3, r3, r0
 801d0f8:	b289      	uxth	r1, r1
 801d0fa:	b29b      	uxth	r3, r3
 801d0fc:	ebae 0e01 	sub.w	lr, lr, r1
 801d100:	4353      	muls	r3, r2
 801d102:	fa1f fe8e 	uxth.w	lr, lr
 801d106:	fb0c 320e 	mla	r2, ip, lr, r3
 801d10a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d10c:	fb01 2203 	mla	r2, r1, r3, r2
 801d110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d112:	fb00 2203 	mla	r2, r0, r3, r2
 801d116:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d11a:	2a00      	cmp	r2, #0
 801d11c:	d039      	beq.n	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d11e:	4bc7      	ldr	r3, [pc, #796]	; (801d43c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d120:	6819      	ldr	r1, [r3, #0]
 801d122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d124:	fa5f fc81 	uxtb.w	ip, r1
 801d128:	435a      	muls	r2, r3
 801d12a:	1c53      	adds	r3, r2, #1
 801d12c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d130:	1212      	asrs	r2, r2, #8
 801d132:	b290      	uxth	r0, r2
 801d134:	43d2      	mvns	r2, r2
 801d136:	fb1c fc00 	smulbb	ip, ip, r0
 801d13a:	b2d3      	uxtb	r3, r2
 801d13c:	f898 2000 	ldrb.w	r2, [r8]
 801d140:	fb02 c203 	mla	r2, r2, r3, ip
 801d144:	b292      	uxth	r2, r2
 801d146:	f102 0c01 	add.w	ip, r2, #1
 801d14a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d14e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d152:	fb1c fc03 	smulbb	ip, ip, r3
 801d156:	1212      	asrs	r2, r2, #8
 801d158:	f888 2000 	strb.w	r2, [r8]
 801d15c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801d160:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801d164:	fb02 c200 	mla	r2, r2, r0, ip
 801d168:	b292      	uxth	r2, r2
 801d16a:	f102 0c01 	add.w	ip, r2, #1
 801d16e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d172:	1212      	asrs	r2, r2, #8
 801d174:	f888 2001 	strb.w	r2, [r8, #1]
 801d178:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d17c:	fb12 f303 	smulbb	r3, r2, r3
 801d180:	fb01 3300 	mla	r3, r1, r0, r3
 801d184:	b29b      	uxth	r3, r3
 801d186:	1c5a      	adds	r2, r3, #1
 801d188:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d18c:	121b      	asrs	r3, r3, #8
 801d18e:	f888 3002 	strb.w	r3, [r8, #2]
 801d192:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d194:	f108 0803 	add.w	r8, r8, #3
 801d198:	441d      	add	r5, r3
 801d19a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d19c:	441e      	add	r6, r3
 801d19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d1a0:	3b01      	subs	r3, #1
 801d1a2:	930d      	str	r3, [sp, #52]	; 0x34
 801d1a4:	e742      	b.n	801d02c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc4>
 801d1a6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d1a8:	f10a 0a03 	add.w	sl, sl, #3
 801d1ac:	441d      	add	r5, r3
 801d1ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d1b0:	441e      	add	r6, r3
 801d1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1b4:	3b01      	subs	r3, #1
 801d1b6:	9309      	str	r3, [sp, #36]	; 0x24
 801d1b8:	e716      	b.n	801cfe8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801d1ba:	d024      	beq.n	801d206 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801d1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1be:	982b      	ldr	r0, [sp, #172]	; 0xac
 801d1c0:	3b01      	subs	r3, #1
 801d1c2:	fb00 5003 	mla	r0, r0, r3, r5
 801d1c6:	1400      	asrs	r0, r0, #16
 801d1c8:	f53f af2b 	bmi.w	801d022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d1cc:	3901      	subs	r1, #1
 801d1ce:	4288      	cmp	r0, r1
 801d1d0:	f6bf af27 	bge.w	801d022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d1d4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801d1d6:	fb01 6303 	mla	r3, r1, r3, r6
 801d1da:	141b      	asrs	r3, r3, #16
 801d1dc:	f53f af21 	bmi.w	801d022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d1e0:	3a01      	subs	r2, #1
 801d1e2:	4293      	cmp	r3, r2
 801d1e4:	f6bf af1d 	bge.w	801d022 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d1e8:	f10a 0e03 	add.w	lr, sl, #3
 801d1ec:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801d1f0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801d1f4:	f1b8 0f00 	cmp.w	r8, #0
 801d1f8:	dc76      	bgt.n	801d2e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 801d1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d1fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d200:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d204:	44a2      	add	sl, r4
 801d206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d208:	2b00      	cmp	r3, #0
 801d20a:	f340 812c 	ble.w	801d466 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 801d20e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d214:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d218:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d21c:	eef0 6a48 	vmov.f32	s13, s16
 801d220:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d224:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d228:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d22c:	ee16 5a90 	vmov	r5, s13
 801d230:	eef0 6a68 	vmov.f32	s13, s17
 801d234:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d238:	ee16 6a90 	vmov	r6, s13
 801d23c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d240:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d244:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d248:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d24c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d250:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d254:	ee18 2a10 	vmov	r2, s16
 801d258:	eeb0 8a47 	vmov.f32	s16, s14
 801d25c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d260:	ee18 2a90 	vmov	r2, s17
 801d264:	932b      	str	r3, [sp, #172]	; 0xac
 801d266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d268:	eef0 8a67 	vmov.f32	s17, s15
 801d26c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d270:	932c      	str	r3, [sp, #176]	; 0xb0
 801d272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d274:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d276:	3b01      	subs	r3, #1
 801d278:	930c      	str	r3, [sp, #48]	; 0x30
 801d27a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d27c:	bf08      	it	eq
 801d27e:	4613      	moveq	r3, r2
 801d280:	9309      	str	r3, [sp, #36]	; 0x24
 801d282:	e6a2      	b.n	801cfca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801d284:	2900      	cmp	r1, #0
 801d286:	f43f af2c 	beq.w	801d0e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d28a:	eb09 0003 	add.w	r0, r9, r3
 801d28e:	0843      	lsrs	r3, r0, #1
 801d290:	07c0      	lsls	r0, r0, #31
 801d292:	5cfb      	ldrb	r3, [r7, r3]
 801d294:	bf54      	ite	pl
 801d296:	f003 030f 	andpl.w	r3, r3, #15
 801d29a:	111b      	asrmi	r3, r3, #4
 801d29c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d2a0:	b2db      	uxtb	r3, r3
 801d2a2:	930a      	str	r3, [sp, #40]	; 0x28
 801d2a4:	e71d      	b.n	801d0e2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17a>
 801d2a6:	f113 0b01 	adds.w	fp, r3, #1
 801d2aa:	f53f af72 	bmi.w	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2ae:	45dc      	cmp	ip, fp
 801d2b0:	f6ff af6f 	blt.w	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2b4:	f110 0b01 	adds.w	fp, r0, #1
 801d2b8:	f53f af6b 	bmi.w	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2bc:	45de      	cmp	lr, fp
 801d2be:	f6ff af68 	blt.w	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2c2:	9302      	str	r3, [sp, #8]
 801d2c4:	fa0f f38e 	sxth.w	r3, lr
 801d2c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d2ca:	9301      	str	r3, [sp, #4]
 801d2cc:	fa0f f38c 	sxth.w	r3, ip
 801d2d0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d2d4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801d2d8:	9300      	str	r3, [sp, #0]
 801d2da:	463a      	mov	r2, r7
 801d2dc:	464b      	mov	r3, r9
 801d2de:	4641      	mov	r1, r8
 801d2e0:	9815      	ldr	r0, [sp, #84]	; 0x54
 801d2e2:	f7ff fd59 	bl	801cd98 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801d2e6:	e754      	b.n	801d192 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d2e8:	142a      	asrs	r2, r5, #16
 801d2ea:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d2ee:	1433      	asrs	r3, r6, #16
 801d2f0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d2f4:	fb09 2303 	mla	r3, r9, r3, r2
 801d2f8:	085a      	lsrs	r2, r3, #1
 801d2fa:	07dc      	lsls	r4, r3, #31
 801d2fc:	5cba      	ldrb	r2, [r7, r2]
 801d2fe:	bf54      	ite	pl
 801d300:	f002 020f 	andpl.w	r2, r2, #15
 801d304:	1112      	asrmi	r2, r2, #4
 801d306:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d30a:	b2d2      	uxtb	r2, r2
 801d30c:	2900      	cmp	r1, #0
 801d30e:	f000 8097 	beq.w	801d440 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d312:	f103 0b01 	add.w	fp, r3, #1
 801d316:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801d31a:	f01b 0f01 	tst.w	fp, #1
 801d31e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d322:	bf0c      	ite	eq
 801d324:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d328:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d32c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d330:	fa5f f48c 	uxtb.w	r4, ip
 801d334:	9412      	str	r4, [sp, #72]	; 0x48
 801d336:	b300      	cbz	r0, 801d37a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d338:	444b      	add	r3, r9
 801d33a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d33e:	07dc      	lsls	r4, r3, #31
 801d340:	f103 0301 	add.w	r3, r3, #1
 801d344:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d348:	bf54      	ite	pl
 801d34a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d34e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d352:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d356:	fa5f f48c 	uxtb.w	r4, ip
 801d35a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d35e:	940b      	str	r4, [sp, #44]	; 0x2c
 801d360:	07dc      	lsls	r4, r3, #31
 801d362:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d366:	bf54      	ite	pl
 801d368:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d36c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d370:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d374:	fa5f f38c 	uxtb.w	r3, ip
 801d378:	9313      	str	r3, [sp, #76]	; 0x4c
 801d37a:	b289      	uxth	r1, r1
 801d37c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d37e:	b280      	uxth	r0, r0
 801d380:	fb01 f300 	mul.w	r3, r1, r0
 801d384:	0109      	lsls	r1, r1, #4
 801d386:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d38a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d38e:	1ac9      	subs	r1, r1, r3
 801d390:	b280      	uxth	r0, r0
 801d392:	b289      	uxth	r1, r1
 801d394:	ebac 0c00 	sub.w	ip, ip, r0
 801d398:	4361      	muls	r1, r4
 801d39a:	fa1f fc8c 	uxth.w	ip, ip
 801d39e:	fb02 120c 	mla	r2, r2, ip, r1
 801d3a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d3a4:	fb00 2001 	mla	r0, r0, r1, r2
 801d3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d3aa:	fb03 0302 	mla	r3, r3, r2, r0
 801d3ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d039      	beq.n	801d42a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d3b6:	4a21      	ldr	r2, [pc, #132]	; (801d43c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 801d3b8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d3bc:	6810      	ldr	r0, [r2, #0]
 801d3be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d3c0:	fa5f fc80 	uxtb.w	ip, r0
 801d3c4:	4353      	muls	r3, r2
 801d3c6:	1c5a      	adds	r2, r3, #1
 801d3c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d3cc:	121b      	asrs	r3, r3, #8
 801d3ce:	b29a      	uxth	r2, r3
 801d3d0:	43db      	mvns	r3, r3
 801d3d2:	fb1c fc02 	smulbb	ip, ip, r2
 801d3d6:	b2db      	uxtb	r3, r3
 801d3d8:	fb01 c103 	mla	r1, r1, r3, ip
 801d3dc:	b289      	uxth	r1, r1
 801d3de:	f101 0c01 	add.w	ip, r1, #1
 801d3e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d3e6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d3ea:	fb1c fc03 	smulbb	ip, ip, r3
 801d3ee:	1209      	asrs	r1, r1, #8
 801d3f0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d3f4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d3f8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d3fc:	fb01 c102 	mla	r1, r1, r2, ip
 801d400:	b289      	uxth	r1, r1
 801d402:	f101 0c01 	add.w	ip, r1, #1
 801d406:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d40a:	1209      	asrs	r1, r1, #8
 801d40c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d410:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d414:	fb11 f303 	smulbb	r3, r1, r3
 801d418:	fb00 3002 	mla	r0, r0, r2, r3
 801d41c:	b280      	uxth	r0, r0
 801d41e:	1c42      	adds	r2, r0, #1
 801d420:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d424:	1200      	asrs	r0, r0, #8
 801d426:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d42a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801d42c:	f10e 0e03 	add.w	lr, lr, #3
 801d430:	f108 38ff 	add.w	r8, r8, #4294967295
 801d434:	441d      	add	r5, r3
 801d436:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d438:	441e      	add	r6, r3
 801d43a:	e6db      	b.n	801d1f4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d43c:	2400f1c0 	.word	0x2400f1c0
 801d440:	2800      	cmp	r0, #0
 801d442:	d09a      	beq.n	801d37a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d444:	444b      	add	r3, r9
 801d446:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d44a:	07db      	lsls	r3, r3, #31
 801d44c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d450:	bf54      	ite	pl
 801d452:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d456:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d45a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d45e:	fa5f f38c 	uxtb.w	r3, ip
 801d462:	930b      	str	r3, [sp, #44]	; 0x2c
 801d464:	e789      	b.n	801d37a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801d466:	b017      	add	sp, #92	; 0x5c
 801d468:	ecbd 8b08 	vpop	{d8-d11}
 801d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d470 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d474:	e9dd 0c0c 	ldrd	r0, ip, [sp, #48]	; 0x30
 801d478:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d47c:	2800      	cmp	r0, #0
 801d47e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 801d482:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801d486:	fb0c 0e03 	mla	lr, ip, r3, r0
 801d48a:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 801d48e:	db6b      	blt.n	801d568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d490:	4580      	cmp	r8, r0
 801d492:	dd69      	ble.n	801d568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d494:	f1bc 0f00 	cmp.w	ip, #0
 801d498:	db66      	blt.n	801d568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d49a:	45e1      	cmp	r9, ip
 801d49c:	dd64      	ble.n	801d568 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf8>
 801d49e:	ea4f 045e 	mov.w	r4, lr, lsr #1
 801d4a2:	f01e 0f01 	tst.w	lr, #1
 801d4a6:	5d16      	ldrb	r6, [r2, r4]
 801d4a8:	bf0c      	ite	eq
 801d4aa:	f006 060f 	andeq.w	r6, r6, #15
 801d4ae:	1136      	asrne	r6, r6, #4
 801d4b0:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d4b4:	b2f6      	uxtb	r6, r6
 801d4b6:	f110 0a01 	adds.w	sl, r0, #1
 801d4ba:	d457      	bmi.n	801d56c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4bc:	45d0      	cmp	r8, sl
 801d4be:	dd55      	ble.n	801d56c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4c0:	f1bc 0f00 	cmp.w	ip, #0
 801d4c4:	db52      	blt.n	801d56c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4c6:	45e1      	cmp	r9, ip
 801d4c8:	dd50      	ble.n	801d56c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xfc>
 801d4ca:	2f00      	cmp	r7, #0
 801d4cc:	f000 80a5 	beq.w	801d61a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1aa>
 801d4d0:	f10e 0b01 	add.w	fp, lr, #1
 801d4d4:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801d4d8:	f01b 0f01 	tst.w	fp, #1
 801d4dc:	5d14      	ldrb	r4, [r2, r4]
 801d4de:	bf0c      	ite	eq
 801d4e0:	f004 040f 	andeq.w	r4, r4, #15
 801d4e4:	1124      	asrne	r4, r4, #4
 801d4e6:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d4ea:	b2e4      	uxtb	r4, r4
 801d4ec:	2d00      	cmp	r5, #0
 801d4ee:	f000 808f 	beq.w	801d610 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a0>
 801d4f2:	2800      	cmp	r0, #0
 801d4f4:	f10c 0c01 	add.w	ip, ip, #1
 801d4f8:	db3c      	blt.n	801d574 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d4fa:	4580      	cmp	r8, r0
 801d4fc:	dd3a      	ble.n	801d574 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d4fe:	f1bc 0f00 	cmp.w	ip, #0
 801d502:	db37      	blt.n	801d574 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d504:	45e1      	cmp	r9, ip
 801d506:	dd35      	ble.n	801d574 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x104>
 801d508:	eb03 0b0e 	add.w	fp, r3, lr
 801d50c:	ea4f 005b 	mov.w	r0, fp, lsr #1
 801d510:	f01b 0f01 	tst.w	fp, #1
 801d514:	5c10      	ldrb	r0, [r2, r0]
 801d516:	bf0c      	ite	eq
 801d518:	f000 000f 	andeq.w	r0, r0, #15
 801d51c:	1100      	asrne	r0, r0, #4
 801d51e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d522:	b2c0      	uxtb	r0, r0
 801d524:	f1ba 0f00 	cmp.w	sl, #0
 801d528:	db26      	blt.n	801d578 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d52a:	45d0      	cmp	r8, sl
 801d52c:	dd24      	ble.n	801d578 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d52e:	f1bc 0f00 	cmp.w	ip, #0
 801d532:	db21      	blt.n	801d578 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d534:	45e1      	cmp	r9, ip
 801d536:	dd1f      	ble.n	801d578 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x108>
 801d538:	b307      	cbz	r7, 801d57c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10c>
 801d53a:	3301      	adds	r3, #1
 801d53c:	449e      	add	lr, r3
 801d53e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d542:	f01e 0f01 	tst.w	lr, #1
 801d546:	5cd3      	ldrb	r3, [r2, r3]
 801d548:	bf0c      	ite	eq
 801d54a:	f003 030f 	andeq.w	r3, r3, #15
 801d54e:	111b      	asrne	r3, r3, #4
 801d550:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d554:	b2db      	uxtb	r3, r3
 801d556:	2f0f      	cmp	r7, #15
 801d558:	d911      	bls.n	801d57e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x10e>
 801d55a:	4b32      	ldr	r3, [pc, #200]	; (801d624 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b4>)
 801d55c:	f240 115b 	movw	r1, #347	; 0x15b
 801d560:	4a31      	ldr	r2, [pc, #196]	; (801d628 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1b8>)
 801d562:	4832      	ldr	r0, [pc, #200]	; (801d62c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1bc>)
 801d564:	f002 fe16 	bl	8020194 <__assert_func>
 801d568:	2600      	movs	r6, #0
 801d56a:	e7a4      	b.n	801d4b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x46>
 801d56c:	2400      	movs	r4, #0
 801d56e:	e7bd      	b.n	801d4ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x7c>
 801d570:	463c      	mov	r4, r7
 801d572:	e7be      	b.n	801d4f2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x82>
 801d574:	2000      	movs	r0, #0
 801d576:	e7d5      	b.n	801d524 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xb4>
 801d578:	2300      	movs	r3, #0
 801d57a:	e7ec      	b.n	801d556 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xe6>
 801d57c:	463b      	mov	r3, r7
 801d57e:	2d0f      	cmp	r5, #15
 801d580:	d8eb      	bhi.n	801d55a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d582:	b2bf      	uxth	r7, r7
 801d584:	b2ad      	uxth	r5, r5
 801d586:	fb07 f205 	mul.w	r2, r7, r5
 801d58a:	013f      	lsls	r7, r7, #4
 801d58c:	ebc2 1505 	rsb	r5, r2, r5, lsl #4
 801d590:	f5c7 7c80 	rsb	ip, r7, #256	; 0x100
 801d594:	1abf      	subs	r7, r7, r2
 801d596:	b2ad      	uxth	r5, r5
 801d598:	b2bf      	uxth	r7, r7
 801d59a:	ebac 0c05 	sub.w	ip, ip, r5
 801d59e:	437c      	muls	r4, r7
 801d5a0:	fa1f fc8c 	uxth.w	ip, ip
 801d5a4:	fb06 440c 	mla	r4, r6, ip, r4
 801d5a8:	fb05 4400 	mla	r4, r5, r0, r4
 801d5ac:	fb02 4303 	mla	r3, r2, r3, r4
 801d5b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d5b4:	b353      	cbz	r3, 801d60c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19c>
 801d5b6:	4a1e      	ldr	r2, [pc, #120]	; (801d630 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1c0>)
 801d5b8:	7808      	ldrb	r0, [r1, #0]
 801d5ba:	6814      	ldr	r4, [r2, #0]
 801d5bc:	b29a      	uxth	r2, r3
 801d5be:	43db      	mvns	r3, r3
 801d5c0:	b2e5      	uxtb	r5, r4
 801d5c2:	b2db      	uxtb	r3, r3
 801d5c4:	fb15 f502 	smulbb	r5, r5, r2
 801d5c8:	fb00 5003 	mla	r0, r0, r3, r5
 801d5cc:	b280      	uxth	r0, r0
 801d5ce:	1c45      	adds	r5, r0, #1
 801d5d0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d5d4:	784d      	ldrb	r5, [r1, #1]
 801d5d6:	fb15 f503 	smulbb	r5, r5, r3
 801d5da:	1200      	asrs	r0, r0, #8
 801d5dc:	7008      	strb	r0, [r1, #0]
 801d5de:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d5e2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d5e6:	fb00 5002 	mla	r0, r0, r2, r5
 801d5ea:	b280      	uxth	r0, r0
 801d5ec:	1c45      	adds	r5, r0, #1
 801d5ee:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d5f2:	1200      	asrs	r0, r0, #8
 801d5f4:	7048      	strb	r0, [r1, #1]
 801d5f6:	7888      	ldrb	r0, [r1, #2]
 801d5f8:	fb10 f303 	smulbb	r3, r0, r3
 801d5fc:	fb04 3202 	mla	r2, r4, r2, r3
 801d600:	b292      	uxth	r2, r2
 801d602:	1c53      	adds	r3, r2, #1
 801d604:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d608:	1212      	asrs	r2, r2, #8
 801d60a:	708a      	strb	r2, [r1, #2]
 801d60c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d610:	2f0f      	cmp	r7, #15
 801d612:	d8a2      	bhi.n	801d55a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xea>
 801d614:	462b      	mov	r3, r5
 801d616:	4628      	mov	r0, r5
 801d618:	e7b3      	b.n	801d582 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x112>
 801d61a:	2d00      	cmp	r5, #0
 801d61c:	d1a8      	bne.n	801d570 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x100>
 801d61e:	462c      	mov	r4, r5
 801d620:	e7f8      	b.n	801d614 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>
 801d622:	bf00      	nop
 801d624:	080261a0 	.word	0x080261a0
 801d628:	080265b6 	.word	0x080265b6
 801d62c:	0802616d 	.word	0x0802616d
 801d630:	2400f1c0 	.word	0x2400f1c0

0801d634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d638:	ed2d 8b08 	vpush	{d8-d11}
 801d63c:	b093      	sub	sp, #76	; 0x4c
 801d63e:	461c      	mov	r4, r3
 801d640:	eeb0 aa40 	vmov.f32	s20, s0
 801d644:	920c      	str	r2, [sp, #48]	; 0x30
 801d646:	eef0 9a60 	vmov.f32	s19, s1
 801d64a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d64c:	eeb0 9a41 	vmov.f32	s18, s2
 801d650:	9011      	str	r0, [sp, #68]	; 0x44
 801d652:	eeb0 8a62 	vmov.f32	s16, s5
 801d656:	6850      	ldr	r0, [r2, #4]
 801d658:	eef0 8a43 	vmov.f32	s17, s6
 801d65c:	9107      	str	r1, [sp, #28]
 801d65e:	eef0 ba44 	vmov.f32	s23, s8
 801d662:	6812      	ldr	r2, [r2, #0]
 801d664:	eeb0 ba64 	vmov.f32	s22, s9
 801d668:	eef0 aa45 	vmov.f32	s21, s10
 801d66c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d670:	e9dd 5625 	ldrd	r5, r6, [sp, #148]	; 0x94
 801d674:	fb00 1303 	mla	r3, r0, r3, r1
 801d678:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d67c:	eb02 0b03 	add.w	fp, r2, r3
 801d680:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d682:	689b      	ldr	r3, [r3, #8]
 801d684:	3301      	adds	r3, #1
 801d686:	f023 0301 	bic.w	r3, r3, #1
 801d68a:	9309      	str	r3, [sp, #36]	; 0x24
 801d68c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d68e:	f8d3 8000 	ldr.w	r8, [r3]
 801d692:	9b07      	ldr	r3, [sp, #28]
 801d694:	2b00      	cmp	r3, #0
 801d696:	dc03      	bgt.n	801d6a0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	f340 822b 	ble.w	801daf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d6a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d6a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d6a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d6aa:	1e48      	subs	r0, r1, #1
 801d6ac:	1e57      	subs	r7, r2, #1
 801d6ae:	2c00      	cmp	r4, #0
 801d6b0:	f340 80d7 	ble.w	801d862 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801d6b4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d6b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d6bc:	d406      	bmi.n	801d6cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6be:	4584      	cmp	ip, r0
 801d6c0:	da04      	bge.n	801d6cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	db02      	blt.n	801d6cc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801d6c6:	42bb      	cmp	r3, r7
 801d6c8:	f2c0 80cc 	blt.w	801d864 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801d6cc:	f11c 0c01 	adds.w	ip, ip, #1
 801d6d0:	f100 80bf 	bmi.w	801d852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d6d4:	4561      	cmp	r1, ip
 801d6d6:	f2c0 80bc 	blt.w	801d852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d6da:	3301      	adds	r3, #1
 801d6dc:	f100 80b9 	bmi.w	801d852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d6e0:	429a      	cmp	r2, r3
 801d6e2:	f2c0 80b6 	blt.w	801d852 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801d6e6:	46a2      	mov	sl, r4
 801d6e8:	465f      	mov	r7, fp
 801d6ea:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d6ee:	f1ba 0f00 	cmp.w	sl, #0
 801d6f2:	f340 80d4 	ble.w	801d89e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801d6f6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d6fa:	1430      	asrs	r0, r6, #16
 801d6fc:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d700:	9308      	str	r3, [sp, #32]
 801d702:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d704:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d708:	142b      	asrs	r3, r5, #16
 801d70a:	f100 8124 	bmi.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d70e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d712:	4293      	cmp	r3, r2
 801d714:	f280 811f 	bge.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d718:	2800      	cmp	r0, #0
 801d71a:	f2c0 811c 	blt.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d71e:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d722:	4290      	cmp	r0, r2
 801d724:	f280 8117 	bge.w	801d956 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d728:	fb00 3309 	mla	r3, r0, r9, r3
 801d72c:	0858      	lsrs	r0, r3, #1
 801d72e:	07da      	lsls	r2, r3, #31
 801d730:	9a08      	ldr	r2, [sp, #32]
 801d732:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d736:	bf54      	ite	pl
 801d738:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d73c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d740:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d744:	fa5f fc8c 	uxtb.w	ip, ip
 801d748:	2a00      	cmp	r2, #0
 801d74a:	f000 80ed 	beq.w	801d928 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d74e:	1c58      	adds	r0, r3, #1
 801d750:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d754:	07c0      	lsls	r0, r0, #31
 801d756:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d75a:	bf54      	ite	pl
 801d75c:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d760:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d764:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d768:	fa5f fe8e 	uxtb.w	lr, lr
 801d76c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d770:	b1c9      	cbz	r1, 801d7a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d772:	444b      	add	r3, r9
 801d774:	0858      	lsrs	r0, r3, #1
 801d776:	07da      	lsls	r2, r3, #31
 801d778:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d77c:	bf54      	ite	pl
 801d77e:	f000 000f 	andpl.w	r0, r0, #15
 801d782:	1100      	asrmi	r0, r0, #4
 801d784:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d788:	b2c0      	uxtb	r0, r0
 801d78a:	900a      	str	r0, [sp, #40]	; 0x28
 801d78c:	1c58      	adds	r0, r3, #1
 801d78e:	0843      	lsrs	r3, r0, #1
 801d790:	07c2      	lsls	r2, r0, #31
 801d792:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d796:	bf54      	ite	pl
 801d798:	f003 030f 	andpl.w	r3, r3, #15
 801d79c:	111b      	asrmi	r3, r3, #4
 801d79e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d7a2:	b2db      	uxtb	r3, r3
 801d7a4:	930e      	str	r3, [sp, #56]	; 0x38
 801d7a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d7aa:	b289      	uxth	r1, r1
 801d7ac:	fb02 f301 	mul.w	r3, r2, r1
 801d7b0:	0112      	lsls	r2, r2, #4
 801d7b2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d7b6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d7ba:	1ad2      	subs	r2, r2, r3
 801d7bc:	b289      	uxth	r1, r1
 801d7be:	b292      	uxth	r2, r2
 801d7c0:	1a40      	subs	r0, r0, r1
 801d7c2:	fa1f fe80 	uxth.w	lr, r0
 801d7c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d7c8:	4342      	muls	r2, r0
 801d7ca:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d7d0:	fb01 c102 	mla	r1, r1, r2, ip
 801d7d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d7d6:	fb03 1302 	mla	r3, r3, r2, r1
 801d7da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d7de:	b383      	cbz	r3, 801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d7e0:	4ac7      	ldr	r2, [pc, #796]	; (801db00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801d7e2:	2bff      	cmp	r3, #255	; 0xff
 801d7e4:	6812      	ldr	r2, [r2, #0]
 801d7e6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d7ea:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d7ee:	b2d2      	uxtb	r2, r2
 801d7f0:	f000 80ac 	beq.w	801d94c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801d7f4:	b299      	uxth	r1, r3
 801d7f6:	43db      	mvns	r3, r3
 801d7f8:	f897 c000 	ldrb.w	ip, [r7]
 801d7fc:	fb12 f201 	smulbb	r2, r2, r1
 801d800:	b2db      	uxtb	r3, r3
 801d802:	fb10 f001 	smulbb	r0, r0, r1
 801d806:	fb0c 2203 	mla	r2, ip, r3, r2
 801d80a:	fb1e f101 	smulbb	r1, lr, r1
 801d80e:	b292      	uxth	r2, r2
 801d810:	f102 0c01 	add.w	ip, r2, #1
 801d814:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d818:	1212      	asrs	r2, r2, #8
 801d81a:	703a      	strb	r2, [r7, #0]
 801d81c:	787a      	ldrb	r2, [r7, #1]
 801d81e:	fb02 0003 	mla	r0, r2, r3, r0
 801d822:	b280      	uxth	r0, r0
 801d824:	1c42      	adds	r2, r0, #1
 801d826:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d82a:	78ba      	ldrb	r2, [r7, #2]
 801d82c:	fb02 1303 	mla	r3, r2, r3, r1
 801d830:	1200      	asrs	r0, r0, #8
 801d832:	b29b      	uxth	r3, r3
 801d834:	7078      	strb	r0, [r7, #1]
 801d836:	f103 0e01 	add.w	lr, r3, #1
 801d83a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d83e:	121b      	asrs	r3, r3, #8
 801d840:	70bb      	strb	r3, [r7, #2]
 801d842:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d844:	3703      	adds	r7, #3
 801d846:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d84a:	441d      	add	r5, r3
 801d84c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d84e:	441e      	add	r6, r3
 801d850:	e74d      	b.n	801d6ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 801d852:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d854:	3c01      	subs	r4, #1
 801d856:	f10b 0b03 	add.w	fp, fp, #3
 801d85a:	441d      	add	r5, r3
 801d85c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d85e:	441e      	add	r6, r3
 801d860:	e725      	b.n	801d6ae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d862:	d021      	beq.n	801d8a8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801d864:	1e63      	subs	r3, r4, #1
 801d866:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d868:	fb00 5003 	mla	r0, r0, r3, r5
 801d86c:	1400      	asrs	r0, r0, #16
 801d86e:	f53f af3a 	bmi.w	801d6e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d872:	3901      	subs	r1, #1
 801d874:	4288      	cmp	r0, r1
 801d876:	f6bf af36 	bge.w	801d6e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d87a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d87c:	fb01 6303 	mla	r3, r1, r3, r6
 801d880:	141b      	asrs	r3, r3, #16
 801d882:	f53f af30 	bmi.w	801d6e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d886:	3a01      	subs	r2, #1
 801d888:	4293      	cmp	r3, r2
 801d88a:	f6bf af2c 	bge.w	801d6e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801d88e:	f10b 0c03 	add.w	ip, fp, #3
 801d892:	46a6      	mov	lr, r4
 801d894:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d898:	f1be 0f00 	cmp.w	lr, #0
 801d89c:	dc79      	bgt.n	801d992 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801d89e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d8a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d8a6:	44a3      	add	fp, r4
 801d8a8:	9b07      	ldr	r3, [sp, #28]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	f340 8123 	ble.w	801daf6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d8b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d8b6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 801d8ba:	ee79 9a8b 	vadd.f32	s19, s19, s22
 801d8be:	eef0 6a48 	vmov.f32	s13, s16
 801d8c2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 801d8c6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 801d8ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8ce:	ee16 5a90 	vmov	r5, s13
 801d8d2:	eef0 6a68 	vmov.f32	s13, s17
 801d8d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d8da:	ee16 6a90 	vmov	r6, s13
 801d8de:	ee29 7aa7 	vmul.f32	s14, s19, s15
 801d8e2:	ee69 7a27 	vmul.f32	s15, s18, s15
 801d8e6:	ee37 8a48 	vsub.f32	s16, s14, s16
 801d8ea:	ee77 8ae8 	vsub.f32	s17, s15, s17
 801d8ee:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 801d8f2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 801d8f6:	ee18 2a10 	vmov	r2, s16
 801d8fa:	eeb0 8a47 	vmov.f32	s16, s14
 801d8fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801d902:	ee18 2a90 	vmov	r2, s17
 801d906:	9327      	str	r3, [sp, #156]	; 0x9c
 801d908:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d90a:	eef0 8a67 	vmov.f32	s17, s15
 801d90e:	fb92 f3f3 	sdiv	r3, r2, r3
 801d912:	9328      	str	r3, [sp, #160]	; 0xa0
 801d914:	9b07      	ldr	r3, [sp, #28]
 801d916:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d918:	3b01      	subs	r3, #1
 801d91a:	9307      	str	r3, [sp, #28]
 801d91c:	bf08      	it	eq
 801d91e:	4614      	moveq	r4, r2
 801d920:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d922:	bf18      	it	ne
 801d924:	461c      	movne	r4, r3
 801d926:	e6b4      	b.n	801d692 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801d928:	2900      	cmp	r1, #0
 801d92a:	f43f af3c 	beq.w	801d7a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d92e:	eb09 0003 	add.w	r0, r9, r3
 801d932:	0843      	lsrs	r3, r0, #1
 801d934:	07c0      	lsls	r0, r0, #31
 801d936:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d93a:	bf54      	ite	pl
 801d93c:	f003 030f 	andpl.w	r3, r3, #15
 801d940:	111b      	asrmi	r3, r3, #4
 801d942:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d946:	b2db      	uxtb	r3, r3
 801d948:	930a      	str	r3, [sp, #40]	; 0x28
 801d94a:	e72c      	b.n	801d7a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x172>
 801d94c:	703a      	strb	r2, [r7, #0]
 801d94e:	7078      	strb	r0, [r7, #1]
 801d950:	f887 e002 	strb.w	lr, [r7, #2]
 801d954:	e775      	b.n	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d956:	1c5a      	adds	r2, r3, #1
 801d958:	f53f af73 	bmi.w	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d95c:	4594      	cmp	ip, r2
 801d95e:	f6ff af70 	blt.w	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d962:	1c42      	adds	r2, r0, #1
 801d964:	f53f af6d 	bmi.w	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d968:	4596      	cmp	lr, r2
 801d96a:	f6ff af6a 	blt.w	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d96e:	9302      	str	r3, [sp, #8]
 801d970:	fa0f f38e 	sxth.w	r3, lr
 801d974:	9a08      	ldr	r2, [sp, #32]
 801d976:	9301      	str	r3, [sp, #4]
 801d978:	fa0f f38c 	sxth.w	r3, ip
 801d97c:	9105      	str	r1, [sp, #20]
 801d97e:	4639      	mov	r1, r7
 801d980:	9300      	str	r3, [sp, #0]
 801d982:	464b      	mov	r3, r9
 801d984:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d988:	4642      	mov	r2, r8
 801d98a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d98c:	f7ff fd70 	bl	801d470 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d990:	e757      	b.n	801d842 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801d992:	142a      	asrs	r2, r5, #16
 801d994:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d998:	1433      	asrs	r3, r6, #16
 801d99a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801d99e:	fb09 2303 	mla	r3, r9, r3, r2
 801d9a2:	085a      	lsrs	r2, r3, #1
 801d9a4:	07d9      	lsls	r1, r3, #31
 801d9a6:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d9aa:	bf54      	ite	pl
 801d9ac:	f002 020f 	andpl.w	r2, r2, #15
 801d9b0:	1112      	asrmi	r2, r2, #4
 801d9b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d9b6:	b2d2      	uxtb	r2, r2
 801d9b8:	2800      	cmp	r0, #0
 801d9ba:	f000 8085 	beq.w	801dac8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801d9be:	f103 0a01 	add.w	sl, r3, #1
 801d9c2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801d9c6:	f01a 0f01 	tst.w	sl, #1
 801d9ca:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d9ce:	bf0c      	ite	eq
 801d9d0:	f001 010f 	andeq.w	r1, r1, #15
 801d9d4:	1109      	asrne	r1, r1, #4
 801d9d6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d9da:	b2c9      	uxtb	r1, r1
 801d9dc:	910f      	str	r1, [sp, #60]	; 0x3c
 801d9de:	b1df      	cbz	r7, 801da18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801d9e0:	444b      	add	r3, r9
 801d9e2:	0859      	lsrs	r1, r3, #1
 801d9e4:	f013 0f01 	tst.w	r3, #1
 801d9e8:	f103 0301 	add.w	r3, r3, #1
 801d9ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d9f0:	bf0c      	ite	eq
 801d9f2:	f001 010f 	andeq.w	r1, r1, #15
 801d9f6:	1109      	asrne	r1, r1, #4
 801d9f8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d9fc:	b2c9      	uxtb	r1, r1
 801d9fe:	910b      	str	r1, [sp, #44]	; 0x2c
 801da00:	0859      	lsrs	r1, r3, #1
 801da02:	07db      	lsls	r3, r3, #31
 801da04:	f818 1001 	ldrb.w	r1, [r8, r1]
 801da08:	bf54      	ite	pl
 801da0a:	f001 010f 	andpl.w	r1, r1, #15
 801da0e:	1109      	asrmi	r1, r1, #4
 801da10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801da14:	b2c9      	uxtb	r1, r1
 801da16:	9110      	str	r1, [sp, #64]	; 0x40
 801da18:	b280      	uxth	r0, r0
 801da1a:	b2bf      	uxth	r7, r7
 801da1c:	fb00 f307 	mul.w	r3, r0, r7
 801da20:	0100      	lsls	r0, r0, #4
 801da22:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801da26:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801da2a:	1ac0      	subs	r0, r0, r3
 801da2c:	b2bf      	uxth	r7, r7
 801da2e:	b280      	uxth	r0, r0
 801da30:	1bc9      	subs	r1, r1, r7
 801da32:	fa1f fa81 	uxth.w	sl, r1
 801da36:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801da38:	4348      	muls	r0, r1
 801da3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801da3c:	fb02 020a 	mla	r2, r2, sl, r0
 801da40:	fb07 2701 	mla	r7, r7, r1, r2
 801da44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da46:	fb03 7302 	mla	r3, r3, r2, r7
 801da4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801da4e:	b393      	cbz	r3, 801dab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801da50:	4a2b      	ldr	r2, [pc, #172]	; (801db00 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>)
 801da52:	2bff      	cmp	r3, #255	; 0xff
 801da54:	6811      	ldr	r1, [r2, #0]
 801da56:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801da5a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801da5e:	b2c9      	uxtb	r1, r1
 801da60:	d042      	beq.n	801dae8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801da62:	b298      	uxth	r0, r3
 801da64:	43db      	mvns	r3, r3
 801da66:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801da6a:	fb11 f100 	smulbb	r1, r1, r0
 801da6e:	b2db      	uxtb	r3, r3
 801da70:	fb17 f700 	smulbb	r7, r7, r0
 801da74:	fb02 1103 	mla	r1, r2, r3, r1
 801da78:	fb1a f000 	smulbb	r0, sl, r0
 801da7c:	b289      	uxth	r1, r1
 801da7e:	1c4a      	adds	r2, r1, #1
 801da80:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801da84:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801da88:	fb02 7703 	mla	r7, r2, r3, r7
 801da8c:	1209      	asrs	r1, r1, #8
 801da8e:	b2bf      	uxth	r7, r7
 801da90:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801da94:	1c7a      	adds	r2, r7, #1
 801da96:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801da9a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801da9e:	fb02 0303 	mla	r3, r2, r3, r0
 801daa2:	123f      	asrs	r7, r7, #8
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801daaa:	1c5a      	adds	r2, r3, #1
 801daac:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801dab0:	121b      	asrs	r3, r3, #8
 801dab2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801dab6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801dab8:	f10c 0c03 	add.w	ip, ip, #3
 801dabc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801dac0:	441d      	add	r5, r3
 801dac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dac4:	441e      	add	r6, r3
 801dac6:	e6e7      	b.n	801d898 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801dac8:	2f00      	cmp	r7, #0
 801daca:	d0a5      	beq.n	801da18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dacc:	444b      	add	r3, r9
 801dace:	0859      	lsrs	r1, r3, #1
 801dad0:	07db      	lsls	r3, r3, #31
 801dad2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801dad6:	bf54      	ite	pl
 801dad8:	f001 010f 	andpl.w	r1, r1, #15
 801dadc:	1109      	asrmi	r1, r1, #4
 801dade:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801dae2:	b2c9      	uxtb	r1, r1
 801dae4:	910b      	str	r1, [sp, #44]	; 0x2c
 801dae6:	e797      	b.n	801da18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dae8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801daec:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801daf0:	f80c ac01 	strb.w	sl, [ip, #-1]
 801daf4:	e7df      	b.n	801dab6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x482>
 801daf6:	b013      	add	sp, #76	; 0x4c
 801daf8:	ecbd 8b08 	vpop	{d8-d11}
 801dafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db00:	2400f1c0 	.word	0x2400f1c0

0801db04 <CRC_Lock>:
 801db04:	4a20      	ldr	r2, [pc, #128]	; (801db88 <CRC_Lock+0x84>)
 801db06:	b530      	push	{r4, r5, lr}
 801db08:	6813      	ldr	r3, [r2, #0]
 801db0a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801db0e:	f24c 2540 	movw	r5, #49728	; 0xc240
 801db12:	f023 0301 	bic.w	r3, r3, #1
 801db16:	6013      	str	r3, [r2, #0]
 801db18:	4b1c      	ldr	r3, [pc, #112]	; (801db8c <CRC_Lock+0x88>)
 801db1a:	681a      	ldr	r2, [r3, #0]
 801db1c:	4022      	ands	r2, r4
 801db1e:	42aa      	cmp	r2, r5
 801db20:	d005      	beq.n	801db2e <CRC_Lock+0x2a>
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	f24c 2270 	movw	r2, #49776	; 0xc270
 801db28:	4023      	ands	r3, r4
 801db2a:	4293      	cmp	r3, r2
 801db2c:	d124      	bne.n	801db78 <CRC_Lock+0x74>
 801db2e:	4b18      	ldr	r3, [pc, #96]	; (801db90 <CRC_Lock+0x8c>)
 801db30:	681b      	ldr	r3, [r3, #0]
 801db32:	bb0b      	cbnz	r3, 801db78 <CRC_Lock+0x74>
 801db34:	4b17      	ldr	r3, [pc, #92]	; (801db94 <CRC_Lock+0x90>)
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801db3c:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801db40:	d00d      	beq.n	801db5e <CRC_Lock+0x5a>
 801db42:	681a      	ldr	r2, [r3, #0]
 801db44:	f240 4483 	movw	r4, #1155	; 0x483
 801db48:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801db4c:	42a2      	cmp	r2, r4
 801db4e:	d006      	beq.n	801db5e <CRC_Lock+0x5a>
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	f240 4285 	movw	r2, #1157	; 0x485
 801db56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801db5a:	4293      	cmp	r3, r2
 801db5c:	d10c      	bne.n	801db78 <CRC_Lock+0x74>
 801db5e:	4b0e      	ldr	r3, [pc, #56]	; (801db98 <CRC_Lock+0x94>)
 801db60:	2201      	movs	r2, #1
 801db62:	601a      	str	r2, [r3, #0]
 801db64:	681a      	ldr	r2, [r3, #0]
 801db66:	2a00      	cmp	r2, #0
 801db68:	d1fc      	bne.n	801db64 <CRC_Lock+0x60>
 801db6a:	4b0c      	ldr	r3, [pc, #48]	; (801db9c <CRC_Lock+0x98>)
 801db6c:	6018      	str	r0, [r3, #0]
 801db6e:	6818      	ldr	r0, [r3, #0]
 801db70:	1a43      	subs	r3, r0, r1
 801db72:	4258      	negs	r0, r3
 801db74:	4158      	adcs	r0, r3
 801db76:	bd30      	pop	{r4, r5, pc}
 801db78:	4b09      	ldr	r3, [pc, #36]	; (801dba0 <CRC_Lock+0x9c>)
 801db7a:	2201      	movs	r2, #1
 801db7c:	601a      	str	r2, [r3, #0]
 801db7e:	681a      	ldr	r2, [r3, #0]
 801db80:	2a00      	cmp	r2, #0
 801db82:	d1fc      	bne.n	801db7e <CRC_Lock+0x7a>
 801db84:	4b07      	ldr	r3, [pc, #28]	; (801dba4 <CRC_Lock+0xa0>)
 801db86:	e7f1      	b.n	801db6c <CRC_Lock+0x68>
 801db88:	e0002000 	.word	0xe0002000
 801db8c:	e000ed00 	.word	0xe000ed00
 801db90:	e0042000 	.word	0xe0042000
 801db94:	5c001000 	.word	0x5c001000
 801db98:	58024c08 	.word	0x58024c08
 801db9c:	58024c00 	.word	0x58024c00
 801dba0:	40023008 	.word	0x40023008
 801dba4:	40023000 	.word	0x40023000

0801dba8 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801dba8:	6101      	str	r1, [r0, #16]
 801dbaa:	4770      	bx	lr

0801dbac <_ZN8touchgfx8Gestures4tickEv>:
 801dbac:	7b83      	ldrb	r3, [r0, #14]
 801dbae:	b14b      	cbz	r3, 801dbc4 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801dbb0:	8903      	ldrh	r3, [r0, #8]
 801dbb2:	3301      	adds	r3, #1
 801dbb4:	b29b      	uxth	r3, r3
 801dbb6:	2b07      	cmp	r3, #7
 801dbb8:	8103      	strh	r3, [r0, #8]
 801dbba:	bf81      	itttt	hi
 801dbbc:	2300      	movhi	r3, #0
 801dbbe:	8143      	strhhi	r3, [r0, #10]
 801dbc0:	8183      	strhhi	r3, [r0, #12]
 801dbc2:	7383      	strbhi	r3, [r0, #14]
 801dbc4:	4770      	bx	lr
	...

0801dbc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801dbc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801dbcc:	4698      	mov	r8, r3
 801dbce:	8883      	ldrh	r3, [r0, #4]
 801dbd0:	4604      	mov	r4, r0
 801dbd2:	4617      	mov	r7, r2
 801dbd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dbd8:	eba8 0303 	sub.w	r3, r8, r3
 801dbdc:	4a19      	ldr	r2, [pc, #100]	; (801dc44 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801dbde:	460e      	mov	r6, r1
 801dbe0:	b21b      	sxth	r3, r3
 801dbe2:	88c1      	ldrh	r1, [r0, #6]
 801dbe4:	9200      	str	r2, [sp, #0]
 801dbe6:	2000      	movs	r0, #0
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	8aa2      	ldrh	r2, [r4, #20]
 801dbec:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801dbf0:	bfb8      	it	lt
 801dbf2:	425b      	neglt	r3, r3
 801dbf4:	f88d 0004 	strb.w	r0, [sp, #4]
 801dbf8:	f8ad 1008 	strh.w	r1, [sp, #8]
 801dbfc:	b21b      	sxth	r3, r3
 801dbfe:	f8ad 800a 	strh.w	r8, [sp, #10]
 801dc02:	f8ad 500c 	strh.w	r5, [sp, #12]
 801dc06:	4293      	cmp	r3, r2
 801dc08:	dc07      	bgt.n	801dc1a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801dc0a:	1a69      	subs	r1, r5, r1
 801dc0c:	b209      	sxth	r1, r1
 801dc0e:	2900      	cmp	r1, #0
 801dc10:	bfb8      	it	lt
 801dc12:	4249      	neglt	r1, r1
 801dc14:	b209      	sxth	r1, r1
 801dc16:	428a      	cmp	r2, r1
 801dc18:	da10      	bge.n	801dc3c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801dc1a:	6920      	ldr	r0, [r4, #16]
 801dc1c:	4669      	mov	r1, sp
 801dc1e:	eba8 0606 	sub.w	r6, r8, r6
 801dc22:	1bef      	subs	r7, r5, r7
 801dc24:	6803      	ldr	r3, [r0, #0]
 801dc26:	685b      	ldr	r3, [r3, #4]
 801dc28:	4798      	blx	r3
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	2001      	movs	r0, #1
 801dc2e:	8166      	strh	r6, [r4, #10]
 801dc30:	8123      	strh	r3, [r4, #8]
 801dc32:	81a7      	strh	r7, [r4, #12]
 801dc34:	f8a4 8004 	strh.w	r8, [r4, #4]
 801dc38:	80e5      	strh	r5, [r4, #6]
 801dc3a:	73a0      	strb	r0, [r4, #14]
 801dc3c:	b004      	add	sp, #16
 801dc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc42:	bf00      	nop
 801dc44:	08025574 	.word	0x08025574

0801dc48 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc4a:	461e      	mov	r6, r3
 801dc4c:	1e4b      	subs	r3, r1, #1
 801dc4e:	b085      	sub	sp, #20
 801dc50:	4604      	mov	r4, r0
 801dc52:	2b01      	cmp	r3, #1
 801dc54:	460d      	mov	r5, r1
 801dc56:	4617      	mov	r7, r2
 801dc58:	d84b      	bhi.n	801dcf2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801dc5a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801dc5e:	1cd3      	adds	r3, r2, #3
 801dc60:	b29b      	uxth	r3, r3
 801dc62:	2b06      	cmp	r3, #6
 801dc64:	d916      	bls.n	801dc94 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801dc66:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801dd08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801dc6a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dc6e:	f8cd c004 	str.w	ip, [sp, #4]
 801dc72:	f04f 0c00 	mov.w	ip, #0
 801dc76:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dc7a:	6900      	ldr	r0, [r0, #16]
 801dc7c:	f8ad 100c 	strh.w	r1, [sp, #12]
 801dc80:	a901      	add	r1, sp, #4
 801dc82:	f88d c008 	strb.w	ip, [sp, #8]
 801dc86:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dc8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dc8e:	6803      	ldr	r3, [r0, #0]
 801dc90:	689b      	ldr	r3, [r3, #8]
 801dc92:	4798      	blx	r3
 801dc94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dc98:	1cd3      	adds	r3, r2, #3
 801dc9a:	b29b      	uxth	r3, r3
 801dc9c:	2b06      	cmp	r3, #6
 801dc9e:	d916      	bls.n	801dcce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dca0:	f8df c064 	ldr.w	ip, [pc, #100]	; 801dd08 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801dca4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801dca8:	f8cd c004 	str.w	ip, [sp, #4]
 801dcac:	f04f 0c01 	mov.w	ip, #1
 801dcb0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801dcb4:	6920      	ldr	r0, [r4, #16]
 801dcb6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801dcba:	a901      	add	r1, sp, #4
 801dcbc:	f88d c008 	strb.w	ip, [sp, #8]
 801dcc0:	f8ad 200a 	strh.w	r2, [sp, #10]
 801dcc4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dcc8:	6803      	ldr	r3, [r0, #0]
 801dcca:	689b      	ldr	r3, [r3, #8]
 801dccc:	4798      	blx	r3
 801dcce:	4b0d      	ldr	r3, [pc, #52]	; (801dd04 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801dcd0:	a901      	add	r1, sp, #4
 801dcd2:	6920      	ldr	r0, [r4, #16]
 801dcd4:	9301      	str	r3, [sp, #4]
 801dcd6:	2300      	movs	r3, #0
 801dcd8:	f88d 5008 	strb.w	r5, [sp, #8]
 801dcdc:	f8ad 700a 	strh.w	r7, [sp, #10]
 801dce0:	f8ad 600c 	strh.w	r6, [sp, #12]
 801dce4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801dce8:	6803      	ldr	r3, [r0, #0]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	4798      	blx	r3
 801dcee:	b005      	add	sp, #20
 801dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dcf2:	2900      	cmp	r1, #0
 801dcf4:	d1eb      	bne.n	801dcce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dcf6:	80a2      	strh	r2, [r4, #4]
 801dcf8:	80c6      	strh	r6, [r0, #6]
 801dcfa:	60a1      	str	r1, [r4, #8]
 801dcfc:	81a1      	strh	r1, [r4, #12]
 801dcfe:	73a1      	strb	r1, [r4, #14]
 801dd00:	e7e5      	b.n	801dcce <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801dd02:	bf00      	nop
 801dd04:	08025560 	.word	0x08025560
 801dd08:	08025588 	.word	0x08025588

0801dd0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>:
 801dd0c:	10c9      	asrs	r1, r1, #3
 801dd0e:	2900      	cmp	r1, #0
 801dd10:	bfb8      	it	lt
 801dd12:	4249      	neglt	r1, r1
 801dd14:	2801      	cmp	r0, #1
 801dd16:	d108      	bne.n	801dd2a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801dd18:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801dd1c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801dd20:	4601      	mov	r1, r0
 801dd22:	dd02      	ble.n	801dd2a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14+0x1e>
 801dd24:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 801dd28:	4770      	bx	lr
 801dd2a:	29ff      	cmp	r1, #255	; 0xff
 801dd2c:	bfa8      	it	ge
 801dd2e:	21ff      	movge	r1, #255	; 0xff
 801dd30:	4608      	mov	r0, r1
 801dd32:	4770      	bx	lr

0801dd34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>:
 801dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd38:	688c      	ldr	r4, [r1, #8]
 801dd3a:	b087      	sub	sp, #28
 801dd3c:	4607      	mov	r7, r0
 801dd3e:	2c00      	cmp	r4, #0
 801dd40:	db2b      	blt.n	801dd9a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801dd42:	6803      	ldr	r3, [r0, #0]
 801dd44:	691a      	ldr	r2, [r3, #16]
 801dd46:	42a2      	cmp	r2, r4
 801dd48:	dd27      	ble.n	801dd9a <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x66>
 801dd4a:	685a      	ldr	r2, [r3, #4]
 801dd4c:	695e      	ldr	r6, [r3, #20]
 801dd4e:	68cd      	ldr	r5, [r1, #12]
 801dd50:	fb06 2604 	mla	r6, r6, r4, r2
 801dd54:	f8d1 901c 	ldr.w	r9, [r1, #28]
 801dd58:	698a      	ldr	r2, [r1, #24]
 801dd5a:	f893 a008 	ldrb.w	sl, [r3, #8]
 801dd5e:	f8d1 8020 	ldr.w	r8, [r1, #32]
 801dd62:	9205      	str	r2, [sp, #20]
 801dd64:	f839 2f02 	ldrh.w	r2, [r9, #2]!
 801dd68:	9b05      	ldr	r3, [sp, #20]
 801dd6a:	6839      	ldr	r1, [r7, #0]
 801dd6c:	eb03 0c02 	add.w	ip, r3, r2
 801dd70:	f838 3f02 	ldrh.w	r3, [r8, #2]!
 801dd74:	68c9      	ldr	r1, [r1, #12]
 801dd76:	1898      	adds	r0, r3, r2
 801dd78:	4288      	cmp	r0, r1
 801dd7a:	db02      	blt.n	801dd82 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x4e>
 801dd7c:	1a8b      	subs	r3, r1, r2
 801dd7e:	2b00      	cmp	r3, #0
 801dd80:	dd09      	ble.n	801dd96 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x62>
 801dd82:	6878      	ldr	r0, [r7, #4]
 801dd84:	6801      	ldr	r1, [r0, #0]
 801dd86:	9400      	str	r4, [sp, #0]
 801dd88:	e9cd 3c01 	strd	r3, ip, [sp, #4]
 801dd8c:	4653      	mov	r3, sl
 801dd8e:	f8d1 b008 	ldr.w	fp, [r1, #8]
 801dd92:	4631      	mov	r1, r6
 801dd94:	47d8      	blx	fp
 801dd96:	3d01      	subs	r5, #1
 801dd98:	d1e4      	bne.n	801dd64 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE+0x30>
 801dd9a:	b007      	add	sp, #28
 801dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dda0 <_ZN8touchgfx10Rasterizer6lineToEii>:
 801dda0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801dda4:	b90b      	cbnz	r3, 801ddaa <_ZN8touchgfx10Rasterizer6lineToEii+0xa>
 801dda6:	f001 b991 	b.w	801f0cc <_ZN8touchgfx7Outline6lineToEii>
 801ddaa:	4770      	bx	lr

0801ddac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 801ddac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ddb0:	4604      	mov	r4, r0
 801ddb2:	2600      	movs	r6, #0
 801ddb4:	4b8f      	ldr	r3, [pc, #572]	; (801dff4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x248>)
 801ddb6:	f100 0518 	add.w	r5, r0, #24
 801ddba:	f104 0730 	add.w	r7, r4, #48	; 0x30
 801ddbe:	b086      	sub	sp, #24
 801ddc0:	4690      	mov	r8, r2
 801ddc2:	e9c0 3100 	strd	r3, r1, [r0]
 801ddc6:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801ddca:	e9c0 6604 	strd	r6, r6, [r0, #16]
 801ddce:	4628      	mov	r0, r5
 801ddd0:	f001 fba0 	bl	801f514 <_ZN8touchgfx15RenderingBufferC1Ev>
 801ddd4:	4638      	mov	r0, r7
 801ddd6:	f000 fb45 	bl	801e464 <_ZN8touchgfx7OutlineC1Ev>
 801ddda:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801ddde:	f001 fb41 	bl	801f464 <_ZN8touchgfx8ScanlineC1Ev>
 801dde2:	2301      	movs	r3, #1
 801dde4:	f884 609c 	strb.w	r6, [r4, #156]	; 0x9c
 801dde8:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
 801ddec:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 801ddf0:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801ddf4:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 801ddf8:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 801ddfc:	e9c4 662a 	strd	r6, r6, [r4, #168]	; 0xa8
 801de00:	e9c4 662d 	strd	r6, r6, [r4, #180]	; 0xb4
 801de04:	f7f2 fdd4 	bl	80109b0 <_ZN8touchgfx20CanvasWidgetRenderer9hasBufferEv>
 801de08:	b928      	cbnz	r0, 801de16 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x6a>
 801de0a:	4b7b      	ldr	r3, [pc, #492]	; (801dff8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x24c>)
 801de0c:	212a      	movs	r1, #42	; 0x2a
 801de0e:	4a7b      	ldr	r2, [pc, #492]	; (801dffc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801de10:	487b      	ldr	r0, [pc, #492]	; (801e000 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x254>)
 801de12:	f002 f9bf 	bl	8020194 <__assert_func>
 801de16:	f9b8 2000 	ldrsh.w	r2, [r8]
 801de1a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 801de1e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801de22:	4410      	add	r0, r2
 801de24:	9602      	str	r6, [sp, #8]
 801de26:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 801de2a:	b280      	uxth	r0, r0
 801de2c:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 801de30:	fa0f fa80 	sxth.w	sl, r0
 801de34:	f1ba 0f00 	cmp.w	sl, #0
 801de38:	dd70      	ble.n	801df1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801de3a:	4591      	cmp	r9, r2
 801de3c:	dd6e      	ble.n	801df1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801de3e:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 801de42:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801de46:	440b      	add	r3, r1
 801de48:	b29b      	uxth	r3, r3
 801de4a:	b21e      	sxth	r6, r3
 801de4c:	2e00      	cmp	r6, #0
 801de4e:	dd65      	ble.n	801df1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801de50:	458e      	cmp	lr, r1
 801de52:	dd63      	ble.n	801df1c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x170>
 801de54:	45d1      	cmp	r9, sl
 801de56:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 801de5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801de5e:	bfb8      	it	lt
 801de60:	fa1f f089 	uxthlt.w	r0, r9
 801de64:	45b6      	cmp	lr, r6
 801de66:	f8ad 2008 	strh.w	r2, [sp, #8]
 801de6a:	bfb8      	it	lt
 801de6c:	fa1f f38e 	uxthlt.w	r3, lr
 801de70:	1a80      	subs	r0, r0, r2
 801de72:	f8ad 100a 	strh.w	r1, [sp, #10]
 801de76:	1a5b      	subs	r3, r3, r1
 801de78:	f8ad 000c 	strh.w	r0, [sp, #12]
 801de7c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801de80:	f10d 0808 	add.w	r8, sp, #8
 801de84:	ae04      	add	r6, sp, #16
 801de86:	e898 0003 	ldmia.w	r8, {r0, r1}
 801de8a:	e886 0003 	stmia.w	r6, {r0, r1}
 801de8e:	f8dc 3000 	ldr.w	r3, [ip]
 801de92:	4660      	mov	r0, ip
 801de94:	4631      	mov	r1, r6
 801de96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de98:	4798      	blx	r3
 801de9a:	6861      	ldr	r1, [r4, #4]
 801de9c:	4640      	mov	r0, r8
 801de9e:	3104      	adds	r1, #4
 801dea0:	f7f4 f8be 	bl	8012020 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801dea4:	4630      	mov	r0, r6
 801dea6:	f7f4 f893 	bl	8011fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801deaa:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 801deae:	f7f2 fd0f 	bl	80108d0 <_ZN8touchgfx20CanvasWidgetRenderer16setScanlineWidthEj>
 801deb2:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
 801deb6:	4638      	mov	r0, r7
 801deb8:	f000 fab0 	bl	801e41c <_ZN8touchgfx7Outline5resetEv>
 801debc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801dec0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801dec4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 801dec8:	015b      	lsls	r3, r3, #5
 801deca:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
 801dece:	0152      	lsls	r2, r2, #5
 801ded0:	60e3      	str	r3, [r4, #12]
 801ded2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ded6:	60a2      	str	r2, [r4, #8]
 801ded8:	015b      	lsls	r3, r3, #5
 801deda:	6123      	str	r3, [r4, #16]
 801dedc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801dee0:	015b      	lsls	r3, r3, #5
 801dee2:	6163      	str	r3, [r4, #20]
 801dee4:	4b47      	ldr	r3, [pc, #284]	; (801e004 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x258>)
 801dee6:	6818      	ldr	r0, [r3, #0]
 801dee8:	6803      	ldr	r3, [r0, #0]
 801deea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801deec:	4798      	blx	r3
 801deee:	4606      	mov	r6, r0
 801def0:	f7ef fb6e 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 801def4:	6803      	ldr	r3, [r0, #0]
 801def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801def8:	4798      	blx	r3
 801defa:	4607      	mov	r7, r0
 801defc:	f7ef fb68 	bl	800d5d0 <_ZN8touchgfx3HAL3lcdEv>
 801df00:	6803      	ldr	r3, [r0, #0]
 801df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df04:	4798      	blx	r3
 801df06:	280d      	cmp	r0, #13
 801df08:	d854      	bhi.n	801dfb4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x208>
 801df0a:	e8df f000 	tbb	[pc, r0]
 801df0e:	554b      	.short	0x554b
 801df10:	2b6e0a66 	.word	0x2b6e0a66
 801df14:	5f5f5f3b 	.word	0x5f5f5f3b
 801df18:	6e6e5f5f 	.word	0x6e6e5f5f
 801df1c:	2300      	movs	r3, #0
 801df1e:	9303      	str	r3, [sp, #12]
 801df20:	e7ae      	b.n	801de80 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xd4>
 801df22:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df26:	2108      	movs	r1, #8
 801df28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df2c:	fb92 f1f1 	sdiv	r1, r2, r1
 801df30:	fb07 1303 	mla	r3, r7, r3, r1
 801df34:	441e      	add	r6, r3
 801df36:	4253      	negs	r3, r2
 801df38:	f002 0207 	and.w	r2, r2, #7
 801df3c:	f003 0307 	and.w	r3, r3, #7
 801df40:	bf58      	it	pl
 801df42:	425a      	negpl	r2, r3
 801df44:	b2d2      	uxtb	r2, r2
 801df46:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801df4a:	4628      	mov	r0, r5
 801df4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801df50:	6721      	str	r1, [r4, #112]	; 0x70
 801df52:	e9cd 1700 	strd	r1, r7, [sp]
 801df56:	4631      	mov	r1, r6
 801df58:	f001 fae8 	bl	801f52c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>
 801df5c:	4620      	mov	r0, r4
 801df5e:	b006      	add	sp, #24
 801df60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df64:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df68:	2104      	movs	r1, #4
 801df6a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df6e:	fb92 f1f1 	sdiv	r1, r2, r1
 801df72:	fb07 1303 	mla	r3, r7, r3, r1
 801df76:	441e      	add	r6, r3
 801df78:	4253      	negs	r3, r2
 801df7a:	f002 0203 	and.w	r2, r2, #3
 801df7e:	f003 0303 	and.w	r3, r3, #3
 801df82:	e7dd      	b.n	801df40 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x194>
 801df84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801df88:	2102      	movs	r1, #2
 801df8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801df8e:	2a00      	cmp	r2, #0
 801df90:	fb92 f1f1 	sdiv	r1, r2, r1
 801df94:	f002 0201 	and.w	r2, r2, #1
 801df98:	fb07 1303 	mla	r3, r7, r3, r1
 801df9c:	bfb8      	it	lt
 801df9e:	4252      	neglt	r2, r2
 801dfa0:	441e      	add	r6, r3
 801dfa2:	e7cf      	b.n	801df44 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x198>
 801dfa4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dfa8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dfac:	437b      	muls	r3, r7
 801dfae:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801dfb2:	441e      	add	r6, r3
 801dfb4:	2200      	movs	r2, #0
 801dfb6:	e7c6      	b.n	801df46 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x19a>
 801dfb8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dfbc:	2103      	movs	r1, #3
 801dfbe:	fb07 f203 	mul.w	r2, r7, r3
 801dfc2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801dfc6:	fb13 2301 	smlabb	r3, r3, r1, r2
 801dfca:	e7f2      	b.n	801dfb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801dfcc:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dfd0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dfd4:	fb07 2303 	mla	r3, r7, r3, r2
 801dfd8:	e7eb      	b.n	801dfb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801dfda:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801dfde:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801dfe2:	437b      	muls	r3, r7
 801dfe4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801dfe8:	e7e3      	b.n	801dfb2 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x206>
 801dfea:	4b07      	ldr	r3, [pc, #28]	; (801e008 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x25c>)
 801dfec:	2169      	movs	r1, #105	; 0x69
 801dfee:	4a03      	ldr	r2, [pc, #12]	; (801dffc <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x250>)
 801dff0:	e70e      	b.n	801de10 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x64>
 801dff2:	bf00      	nop
 801dff4:	08026970 	.word	0x08026970
 801dff8:	080268b9 	.word	0x080268b9
 801dffc:	08026978 	.word	0x08026978
 801e000:	08026915 	.word	0x08026915
 801e004:	2400f198 	.word	0x2400f198
 801e008:	08026949 	.word	0x08026949

0801e00c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>:
 801e00c:	6812      	ldr	r2, [r2, #0]
 801e00e:	2a00      	cmp	r2, #0
 801e010:	db0b      	blt.n	801e02a <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x1e>
 801e012:	9800      	ldr	r0, [sp, #0]
 801e014:	6800      	ldr	r0, [r0, #0]
 801e016:	4290      	cmp	r0, r2
 801e018:	bfd4      	ite	le
 801e01a:	2002      	movle	r0, #2
 801e01c:	2000      	movgt	r0, #0
 801e01e:	680a      	ldr	r2, [r1, #0]
 801e020:	2a00      	cmp	r2, #0
 801e022:	da04      	bge.n	801e02e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x22>
 801e024:	f040 0004 	orr.w	r0, r0, #4
 801e028:	4770      	bx	lr
 801e02a:	2001      	movs	r0, #1
 801e02c:	e7f7      	b.n	801e01e <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_+0x12>
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	4293      	cmp	r3, r2
 801e032:	bfd8      	it	le
 801e034:	f040 0008 	orrle.w	r0, r0, #8
 801e038:	4770      	bx	lr
	...

0801e03c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801e03c:	4b07      	ldr	r3, [pc, #28]	; (801e05c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 801e03e:	b510      	push	{r4, lr}
 801e040:	781b      	ldrb	r3, [r3, #0]
 801e042:	2b01      	cmp	r3, #1
 801e044:	d108      	bne.n	801e058 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 801e046:	6843      	ldr	r3, [r0, #4]
 801e048:	6814      	ldr	r4, [r2, #0]
 801e04a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e04e:	680b      	ldr	r3, [r1, #0]
 801e050:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801e054:	6013      	str	r3, [r2, #0]
 801e056:	600c      	str	r4, [r1, #0]
 801e058:	bd10      	pop	{r4, pc}
 801e05a:	bf00      	nop
 801e05c:	2400f190 	.word	0x2400f190

0801e060 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801e060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e062:	b085      	sub	sp, #20
 801e064:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e068:	4604      	mov	r4, r0
 801e06a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e06e:	b33b      	cbz	r3, 801e0c0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x60>
 801e070:	aa02      	add	r2, sp, #8
 801e072:	a903      	add	r1, sp, #12
 801e074:	f7ff ffe2 	bl	801e03c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e078:	68a3      	ldr	r3, [r4, #8]
 801e07a:	9e03      	ldr	r6, [sp, #12]
 801e07c:	aa02      	add	r2, sp, #8
 801e07e:	9f02      	ldr	r7, [sp, #8]
 801e080:	a903      	add	r1, sp, #12
 801e082:	1af6      	subs	r6, r6, r3
 801e084:	68e3      	ldr	r3, [r4, #12]
 801e086:	4620      	mov	r0, r4
 801e088:	1aff      	subs	r7, r7, r3
 801e08a:	f104 0314 	add.w	r3, r4, #20
 801e08e:	9603      	str	r6, [sp, #12]
 801e090:	9300      	str	r3, [sp, #0]
 801e092:	f104 0310 	add.w	r3, r4, #16
 801e096:	9702      	str	r7, [sp, #8]
 801e098:	f7ff ffb8 	bl	801e00c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801e09c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 801e0a0:	4605      	mov	r5, r0
 801e0a2:	b97b      	cbnz	r3, 801e0c4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x64>
 801e0a4:	463a      	mov	r2, r7
 801e0a6:	4631      	mov	r1, r6
 801e0a8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e0ac:	f7ff fe78 	bl	801dda0 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e0b0:	9b03      	ldr	r3, [sp, #12]
 801e0b2:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
 801e0b6:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 801e0ba:	9b02      	ldr	r3, [sp, #8]
 801e0bc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 801e0c0:	b005      	add	sp, #20
 801e0c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0c4:	b110      	cbz	r0, 801e0cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6c>
 801e0c6:	ea13 0200 	ands.w	r2, r3, r0
 801e0ca:	d11c      	bne.n	801e106 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 801e0cc:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
 801e0d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 801e0d4:	e9d4 122a 	ldrd	r1, r2, [r4, #168]	; 0xa8
 801e0d8:	b188      	cbz	r0, 801e0fe <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 801e0da:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
 801e0de:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e0e2:	b913      	cbnz	r3, 801e0ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x8a>
 801e0e4:	4630      	mov	r0, r6
 801e0e6:	f001 f821 	bl	801f12c <_ZN8touchgfx7Outline6moveToEii>
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801e0f6:	4630      	mov	r0, r6
 801e0f8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801e0fc:	e7d6      	b.n	801e0ac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4c>
 801e0fe:	4630      	mov	r0, r6
 801e100:	f7ff fe4e 	bl	801dda0 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e104:	e7f7      	b.n	801e0f6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x96>
 801e106:	4615      	mov	r5, r2
 801e108:	e7d2      	b.n	801e0b0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x50>

0801e10a <_ZN8touchgfx6Canvas5closeEv>:
 801e10a:	b538      	push	{r3, r4, r5, lr}
 801e10c:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801e110:	4604      	mov	r4, r0
 801e112:	b993      	cbnz	r3, 801e13a <_ZN8touchgfx6Canvas5closeEv+0x30>
 801e114:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
 801e118:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
 801e11c:	4213      	tst	r3, r2
 801e11e:	d10c      	bne.n	801e13a <_ZN8touchgfx6Canvas5closeEv+0x30>
 801e120:	f100 0530 	add.w	r5, r0, #48	; 0x30
 801e124:	b123      	cbz	r3, 801e130 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801e126:	e9d0 122a 	ldrd	r1, r2, [r0, #168]	; 0xa8
 801e12a:	4628      	mov	r0, r5
 801e12c:	f7ff fe38 	bl	801dda0 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e130:	4628      	mov	r0, r5
 801e132:	e9d4 122d 	ldrd	r1, r2, [r4, #180]	; 0xb4
 801e136:	f7ff fe33 	bl	801dda0 <_ZN8touchgfx10Rasterizer6lineToEii>
 801e13a:	2300      	movs	r3, #0
 801e13c:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e140:	bd38      	pop	{r3, r4, r5, pc}

0801e142 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801e142:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e144:	b085      	sub	sp, #20
 801e146:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e14a:	4604      	mov	r4, r0
 801e14c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801e150:	b353      	cbz	r3, 801e1a8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>
 801e152:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5
 801e156:	b90b      	cbnz	r3, 801e15c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x1a>
 801e158:	f7ff ffd7 	bl	801e10a <_ZN8touchgfx6Canvas5closeEv>
 801e15c:	aa02      	add	r2, sp, #8
 801e15e:	a903      	add	r1, sp, #12
 801e160:	4620      	mov	r0, r4
 801e162:	f7ff ff6b 	bl	801e03c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801e166:	68a3      	ldr	r3, [r4, #8]
 801e168:	9d03      	ldr	r5, [sp, #12]
 801e16a:	aa02      	add	r2, sp, #8
 801e16c:	9e02      	ldr	r6, [sp, #8]
 801e16e:	a903      	add	r1, sp, #12
 801e170:	1aed      	subs	r5, r5, r3
 801e172:	68e3      	ldr	r3, [r4, #12]
 801e174:	4620      	mov	r0, r4
 801e176:	1af6      	subs	r6, r6, r3
 801e178:	f104 0314 	add.w	r3, r4, #20
 801e17c:	9503      	str	r5, [sp, #12]
 801e17e:	9300      	str	r3, [sp, #0]
 801e180:	f104 0310 	add.w	r3, r4, #16
 801e184:	9602      	str	r6, [sp, #8]
 801e186:	f7ff ff41 	bl	801e00c <_ZNK8touchgfx6Canvas9isOutsideERKNS_7CWRUtil2Q5ES4_S4_S4_>
 801e18a:	4607      	mov	r7, r0
 801e18c:	b170      	cbz	r0, 801e1ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x6a>
 801e18e:	2301      	movs	r3, #1
 801e190:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e194:	9a03      	ldr	r2, [sp, #12]
 801e196:	9b02      	ldr	r3, [sp, #8]
 801e198:	f8c4 20b4 	str.w	r2, [r4, #180]	; 0xb4
 801e19c:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
 801e1a0:	f884 70b0 	strb.w	r7, [r4, #176]	; 0xb0
 801e1a4:	e9c4 232a 	strd	r2, r3, [r4, #168]	; 0xa8
 801e1a8:	b005      	add	sp, #20
 801e1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e1ac:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 801e1b0:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1
 801e1b4:	b92b      	cbnz	r3, 801e1c2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x80>
 801e1b6:	4632      	mov	r2, r6
 801e1b8:	4629      	mov	r1, r5
 801e1ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e1be:	f000 ffb5 	bl	801f12c <_ZN8touchgfx7Outline6moveToEii>
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 801e1c8:	2301      	movs	r3, #1
 801e1ca:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 801e1ce:	e7e1      	b.n	801e194 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x52>

0801e1d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>:
 801e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1d4:	4604      	mov	r4, r0
 801e1d6:	b087      	sub	sp, #28
 801e1d8:	9105      	str	r1, [sp, #20]
 801e1da:	f001 f8ec 	bl	801f3b6 <_ZN8touchgfx7Outline8getCellsEv>
 801e1de:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801e1e2:	4605      	mov	r5, r0
 801e1e4:	f1b9 0f00 	cmp.w	r9, #0
 801e1e8:	d103      	bne.n	801e1f2 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x22>
 801e1ea:	2001      	movs	r0, #1
 801e1ec:	b007      	add	sp, #28
 801e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1f2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 801e1f6:	2e00      	cmp	r6, #0
 801e1f8:	d139      	bne.n	801e26e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x9e>
 801e1fa:	f104 0848 	add.w	r8, r4, #72	; 0x48
 801e1fe:	f105 0708 	add.w	r7, r5, #8
 801e202:	4640      	mov	r0, r8
 801e204:	f001 f919 	bl	801f43a <_ZN8touchgfx8Scanline5resetEv>
 801e208:	f109 33ff 	add.w	r3, r9, #4294967295
 801e20c:	9303      	str	r3, [sp, #12]
 801e20e:	f9b5 b000 	ldrsh.w	fp, [r5]
 801e212:	f9b5 9002 	ldrsh.w	r9, [r5, #2]
 801e216:	46da      	mov	sl, fp
 801e218:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801e21c:	eb0b 4009 	add.w	r0, fp, r9, lsl #16
 801e220:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801e224:	9b03      	ldr	r3, [sp, #12]
 801e226:	4416      	add	r6, r2
 801e228:	9504      	str	r5, [sp, #16]
 801e22a:	463d      	mov	r5, r7
 801e22c:	3b01      	subs	r3, #1
 801e22e:	9303      	str	r3, [sp, #12]
 801e230:	3301      	adds	r3, #1
 801e232:	d01e      	beq.n	801e272 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa2>
 801e234:	3708      	adds	r7, #8
 801e236:	f937 cc06 	ldrsh.w	ip, [r7, #-6]
 801e23a:	f937 2c08 	ldrsh.w	r2, [r7, #-8]
 801e23e:	eb02 420c 	add.w	r2, r2, ip, lsl #16
 801e242:	4290      	cmp	r0, r2
 801e244:	d11e      	bne.n	801e284 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xb4>
 801e246:	f937 2c02 	ldrsh.w	r2, [r7, #-2]
 801e24a:	4411      	add	r1, r2
 801e24c:	f937 2c04 	ldrsh.w	r2, [r7, #-4]
 801e250:	e7e8      	b.n	801e224 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x54>
 801e252:	1c91      	adds	r1, r2, #2
 801e254:	f04f 0301 	mov.w	r3, #1
 801e258:	65e1      	str	r1, [r4, #92]	; 0x5c
 801e25a:	8053      	strh	r3, [r2, #2]
 801e25c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801e25e:	1c91      	adds	r1, r2, #2
 801e260:	65a1      	str	r1, [r4, #88]	; 0x58
 801e262:	f8a2 b002 	strh.w	fp, [r2, #2]
 801e266:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e268:	3201      	adds	r2, #1
 801e26a:	6562      	str	r2, [r4, #84]	; 0x54
 801e26c:	e03a      	b.n	801e2e4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x114>
 801e26e:	2000      	movs	r0, #0
 801e270:	e7bc      	b.n	801e1ec <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1c>
 801e272:	b951      	cbnz	r1, 801e28a <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xba>
 801e274:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e276:	2b00      	cmp	r3, #0
 801e278:	d0b7      	beq.n	801e1ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801e27a:	4641      	mov	r1, r8
 801e27c:	9805      	ldr	r0, [sp, #20]
 801e27e:	f7ff fd59 	bl	801dd34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e282:	e7b2      	b.n	801e1ea <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x1a>
 801e284:	2900      	cmp	r1, #0
 801e286:	d035      	beq.n	801e2f4 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x124>
 801e288:	9504      	str	r5, [sp, #16]
 801e28a:	ebc1 1186 	rsb	r1, r1, r6, lsl #6
 801e28e:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801e292:	f7ff fd3b 	bl	801dd0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801e296:	4605      	mov	r5, r0
 801e298:	b330      	cbz	r0, 801e2e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e29a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801e29c:	b182      	cbz	r2, 801e2c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801e29e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 801e2a0:	4591      	cmp	r9, r2
 801e2a2:	d00d      	beq.n	801e2c0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xf0>
 801e2a4:	4641      	mov	r1, r8
 801e2a6:	9805      	ldr	r0, [sp, #20]
 801e2a8:	f7ff fd44 	bl	801dd34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e2ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e2b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 801e2b2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801e2b6:	65e2      	str	r2, [r4, #92]	; 0x5c
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e2bc:	6563      	str	r3, [r4, #84]	; 0x54
 801e2be:	65a2      	str	r2, [r4, #88]	; 0x58
 801e2c0:	f1bb 0f00 	cmp.w	fp, #0
 801e2c4:	db10      	blt.n	801e2e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e2c6:	f7f2 fb81 	bl	80109cc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801e2ca:	4583      	cmp	fp, r0
 801e2cc:	da0c      	bge.n	801e2e8 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x118>
 801e2ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801e2d0:	f802 500b 	strb.w	r5, [r2, fp]
 801e2d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 801e2d6:	3201      	adds	r2, #1
 801e2d8:	4593      	cmp	fp, r2
 801e2da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801e2dc:	d1b9      	bne.n	801e252 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x82>
 801e2de:	8811      	ldrh	r1, [r2, #0]
 801e2e0:	3101      	adds	r1, #1
 801e2e2:	8011      	strh	r1, [r2, #0]
 801e2e4:	e9c4 b913 	strd	fp, r9, [r4, #76]	; 0x4c
 801e2e8:	9b03      	ldr	r3, [sp, #12]
 801e2ea:	3301      	adds	r3, #1
 801e2ec:	d0c2      	beq.n	801e274 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0xa4>
 801e2ee:	f10b 0a01 	add.w	sl, fp, #1
 801e2f2:	9d04      	ldr	r5, [sp, #16]
 801e2f4:	f9b5 3000 	ldrsh.w	r3, [r5]
 801e2f8:	4553      	cmp	r3, sl
 801e2fa:	dd88      	ble.n	801e20e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801e2fc:	01b1      	lsls	r1, r6, #6
 801e2fe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 801e302:	f7ff fd03 	bl	801dd0c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.14>
 801e306:	4683      	mov	fp, r0
 801e308:	2800      	cmp	r0, #0
 801e30a:	d080      	beq.n	801e20e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>
 801e30c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801e30e:	b183      	cbz	r3, 801e332 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801e310:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801e312:	4599      	cmp	r9, r3
 801e314:	d00d      	beq.n	801e332 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x162>
 801e316:	4641      	mov	r1, r8
 801e318:	9805      	ldr	r0, [sp, #20]
 801e31a:	f7ff fd0b 	bl	801dd34 <_ZN8touchgfx8Renderer6renderERKNS_8ScanlineE>
 801e31e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e322:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801e326:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801e328:	65e3      	str	r3, [r4, #92]	; 0x5c
 801e32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e32c:	65a3      	str	r3, [r4, #88]	; 0x58
 801e32e:	2300      	movs	r3, #0
 801e330:	6563      	str	r3, [r4, #84]	; 0x54
 801e332:	f9b5 3000 	ldrsh.w	r3, [r5]
 801e336:	464a      	mov	r2, r9
 801e338:	f8cd b000 	str.w	fp, [sp]
 801e33c:	4651      	mov	r1, sl
 801e33e:	eba3 030a 	sub.w	r3, r3, sl
 801e342:	4640      	mov	r0, r8
 801e344:	f001 f8a4 	bl	801f490 <_ZN8touchgfx8Scanline7addSpanEiijj>
 801e348:	e761      	b.n	801e20e <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_+0x3e>

0801e34a <_ZN8touchgfx6Canvas6renderEh>:
 801e34a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e34c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
 801e350:	4604      	mov	r4, r0
 801e352:	460d      	mov	r5, r1
 801e354:	b913      	cbnz	r3, 801e35c <_ZN8touchgfx6Canvas6renderEh+0x12>
 801e356:	2001      	movs	r0, #1
 801e358:	b003      	add	sp, #12
 801e35a:	bd30      	pop	{r4, r5, pc}
 801e35c:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 801e360:	2b00      	cmp	r3, #0
 801e362:	d12f      	bne.n	801e3c4 <_ZN8touchgfx6Canvas6renderEh+0x7a>
 801e364:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d0f4      	beq.n	801e356 <_ZN8touchgfx6Canvas6renderEh+0xc>
 801e36c:	6840      	ldr	r0, [r0, #4]
 801e36e:	6803      	ldr	r3, [r0, #0]
 801e370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e372:	4798      	blx	r3
 801e374:	fb10 f105 	smulbb	r1, r0, r5
 801e378:	b288      	uxth	r0, r1
 801e37a:	1c41      	adds	r1, r0, #1
 801e37c:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e380:	120d      	asrs	r5, r1, #8
 801e382:	d0e8      	beq.n	801e356 <_ZN8touchgfx6Canvas6renderEh+0xc>
 801e384:	4620      	mov	r0, r4
 801e386:	f7ff fec0 	bl	801e10a <_ZN8touchgfx6Canvas5closeEv>
 801e38a:	6860      	ldr	r0, [r4, #4]
 801e38c:	6803      	ldr	r3, [r0, #0]
 801e38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e390:	4798      	blx	r3
 801e392:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
 801e396:	f9b4 30a2 	ldrsh.w	r3, [r4, #162]	; 0xa2
 801e39a:	8082      	strh	r2, [r0, #4]
 801e39c:	80c3      	strh	r3, [r0, #6]
 801e39e:	6860      	ldr	r0, [r4, #4]
 801e3a0:	6803      	ldr	r3, [r0, #0]
 801e3a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e3a4:	4798      	blx	r3
 801e3a6:	7205      	strb	r5, [r0, #8]
 801e3a8:	6860      	ldr	r0, [r4, #4]
 801e3aa:	6803      	ldr	r3, [r0, #0]
 801e3ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e3ae:	4798      	blx	r3
 801e3b0:	f104 0318 	add.w	r3, r4, #24
 801e3b4:	4669      	mov	r1, sp
 801e3b6:	e9cd 3000 	strd	r3, r0, [sp]
 801e3ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801e3be:	f7ff ff07 	bl	801e1d0 <_ZN8touchgfx10Rasterizer6renderINS_8RendererEEEbRT_>
 801e3c2:	e7c9      	b.n	801e358 <_ZN8touchgfx6Canvas6renderEh+0xe>
 801e3c4:	2000      	movs	r0, #0
 801e3c6:	e7c7      	b.n	801e358 <_ZN8touchgfx6Canvas6renderEh+0xe>

0801e3c8 <_ZN8touchgfx6CanvasD1Ev>:
 801e3c8:	b538      	push	{r3, r4, r5, lr}
 801e3ca:	4605      	mov	r5, r0
 801e3cc:	4b08      	ldr	r3, [pc, #32]	; (801e3f0 <_ZN8touchgfx6CanvasD1Ev+0x28>)
 801e3ce:	4604      	mov	r4, r0
 801e3d0:	f845 3b30 	str.w	r3, [r5], #48
 801e3d4:	4b07      	ldr	r3, [pc, #28]	; (801e3f4 <_ZN8touchgfx6CanvasD1Ev+0x2c>)
 801e3d6:	6818      	ldr	r0, [r3, #0]
 801e3d8:	6803      	ldr	r3, [r0, #0]
 801e3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3dc:	4798      	blx	r3
 801e3de:	4628      	mov	r0, r5
 801e3e0:	f000 f814 	bl	801e40c <_ZN8touchgfx7OutlineD1Ev>
 801e3e4:	f104 0018 	add.w	r0, r4, #24
 801e3e8:	f001 f88b 	bl	801f502 <_ZN8touchgfx15RenderingBufferD1Ev>
 801e3ec:	4620      	mov	r0, r4
 801e3ee:	bd38      	pop	{r3, r4, r5, pc}
 801e3f0:	08026970 	.word	0x08026970
 801e3f4:	2400f198 	.word	0x2400f198

0801e3f8 <_ZN8touchgfx6CanvasD0Ev>:
 801e3f8:	b510      	push	{r4, lr}
 801e3fa:	4604      	mov	r4, r0
 801e3fc:	f7ff ffe4 	bl	801e3c8 <_ZN8touchgfx6CanvasD1Ev>
 801e400:	21bc      	movs	r1, #188	; 0xbc
 801e402:	4620      	mov	r0, r4
 801e404:	f001 f89f 	bl	801f546 <_ZdlPvj>
 801e408:	4620      	mov	r0, r4
 801e40a:	bd10      	pop	{r4, pc}

0801e40c <_ZN8touchgfx7OutlineD1Ev>:
 801e40c:	4770      	bx	lr

0801e40e <_ZN8touchgfx7OutlineD0Ev>:
 801e40e:	b510      	push	{r4, lr}
 801e410:	4604      	mov	r4, r0
 801e412:	2148      	movs	r1, #72	; 0x48
 801e414:	f001 f897 	bl	801f546 <_ZdlPvj>
 801e418:	4620      	mov	r0, r4
 801e41a:	bd10      	pop	{r4, pc}

0801e41c <_ZN8touchgfx7Outline5resetEv>:
 801e41c:	b510      	push	{r4, lr}
 801e41e:	4604      	mov	r4, r0
 801e420:	f7f2 faec 	bl	80109fc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801e424:	60e0      	str	r0, [r4, #12]
 801e426:	f7f2 faef 	bl	8010a08 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801e42a:	68e3      	ldr	r3, [r4, #12]
 801e42c:	2200      	movs	r2, #0
 801e42e:	08c0      	lsrs	r0, r0, #3
 801e430:	6123      	str	r3, [r4, #16]
 801e432:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801e436:	6060      	str	r0, [r4, #4]
 801e438:	82a3      	strh	r3, [r4, #20]
 801e43a:	82e3      	strh	r3, [r4, #22]
 801e43c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e43e:	60a2      	str	r2, [r4, #8]
 801e440:	f023 0301 	bic.w	r3, r3, #1
 801e444:	8322      	strh	r2, [r4, #24]
 801e446:	8362      	strh	r2, [r4, #26]
 801e448:	f043 0302 	orr.w	r3, r3, #2
 801e44c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801e450:	63e3      	str	r3, [r4, #60]	; 0x3c
 801e452:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e456:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801e45a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801e45e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801e462:	bd10      	pop	{r4, pc}

0801e464 <_ZN8touchgfx7OutlineC1Ev>:
 801e464:	4b0f      	ldr	r3, [pc, #60]	; (801e4a4 <_ZN8touchgfx7OutlineC1Ev+0x40>)
 801e466:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e46a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801e46e:	b510      	push	{r4, lr}
 801e470:	6003      	str	r3, [r0, #0]
 801e472:	2300      	movs	r3, #0
 801e474:	4604      	mov	r4, r0
 801e476:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801e47a:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801e47e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e482:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801e486:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801e48a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 801e48e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 801e492:	e9c0 110d 	strd	r1, r1, [r0, #52]	; 0x34
 801e496:	e9c0 320f 	strd	r3, r2, [r0, #60]	; 0x3c
 801e49a:	f7ff ffbf 	bl	801e41c <_ZN8touchgfx7Outline5resetEv>
 801e49e:	4620      	mov	r0, r4
 801e4a0:	bd10      	pop	{r4, pc}
 801e4a2:	bf00      	nop
 801e4a4:	08026a40 	.word	0x08026a40

0801e4a8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801e4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4ac:	b095      	sub	sp, #84	; 0x54
 801e4ae:	4604      	mov	r4, r0
 801e4b0:	1155      	asrs	r5, r2, #5
 801e4b2:	f002 061f 	and.w	r6, r2, #31
 801e4b6:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e4b8:	1157      	asrs	r7, r2, #5
 801e4ba:	9304      	str	r3, [sp, #16]
 801e4bc:	1153      	asrs	r3, r2, #5
 801e4be:	9300      	str	r3, [sp, #0]
 801e4c0:	1143      	asrs	r3, r0, #5
 801e4c2:	930c      	str	r3, [sp, #48]	; 0x30
 801e4c4:	f000 031f 	and.w	r3, r0, #31
 801e4c8:	9303      	str	r3, [sp, #12]
 801e4ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e4cc:	42ab      	cmp	r3, r5
 801e4ce:	bfc8      	it	gt
 801e4d0:	462b      	movgt	r3, r5
 801e4d2:	ea4f 1562 	mov.w	r5, r2, asr #5
 801e4d6:	bfc8      	it	gt
 801e4d8:	6323      	strgt	r3, [r4, #48]	; 0x30
 801e4da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e4dc:	42ab      	cmp	r3, r5
 801e4de:	bfd8      	it	le
 801e4e0:	462b      	movle	r3, r5
 801e4e2:	ea4f 1560 	mov.w	r5, r0, asr #5
 801e4e6:	bfdc      	itt	le
 801e4e8:	3301      	addle	r3, #1
 801e4ea:	63a3      	strle	r3, [r4, #56]	; 0x38
 801e4ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e4ee:	42ab      	cmp	r3, r5
 801e4f0:	bfc8      	it	gt
 801e4f2:	462b      	movgt	r3, r5
 801e4f4:	ea4f 1560 	mov.w	r5, r0, asr #5
 801e4f8:	bfc8      	it	gt
 801e4fa:	6323      	strgt	r3, [r4, #48]	; 0x30
 801e4fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801e4fe:	42ab      	cmp	r3, r5
 801e500:	bfd8      	it	le
 801e502:	462b      	movle	r3, r5
 801e504:	ea4f 1561 	mov.w	r5, r1, asr #5
 801e508:	bfdc      	itt	le
 801e50a:	3301      	addle	r3, #1
 801e50c:	63a3      	strle	r3, [r4, #56]	; 0x38
 801e50e:	9b04      	ldr	r3, [sp, #16]
 801e510:	eba3 0a01 	sub.w	sl, r3, r1
 801e514:	1143      	asrs	r3, r0, #5
 801e516:	429f      	cmp	r7, r3
 801e518:	f040 811d 	bne.w	801e756 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ae>
 801e51c:	9b04      	ldr	r3, [sp, #16]
 801e51e:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801e522:	9b03      	ldr	r3, [sp, #12]
 801e524:	429e      	cmp	r6, r3
 801e526:	d131      	bne.n	801e58c <_ZN8touchgfx7Outline10renderLineEiiii+0xe4>
 801e528:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801e52c:	fa0f fb8b 	sxth.w	fp, fp
 801e530:	f9bd 2000 	ldrsh.w	r2, [sp]
 801e534:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801e538:	eb0b 4002 	add.w	r0, fp, r2, lsl #16
 801e53c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801e540:	4281      	cmp	r1, r0
 801e542:	f000 80e6 	beq.w	801e712 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801e546:	8b60      	ldrh	r0, [r4, #26]
 801e548:	8b21      	ldrh	r1, [r4, #24]
 801e54a:	4301      	orrs	r1, r0
 801e54c:	d00b      	beq.n	801e566 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e54e:	2b00      	cmp	r3, #0
 801e550:	db09      	blt.n	801e566 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e552:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e554:	428b      	cmp	r3, r1
 801e556:	da06      	bge.n	801e566 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e558:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801e55c:	4299      	cmp	r1, r3
 801e55e:	d308      	bcc.n	801e572 <_ZN8touchgfx7Outline10renderLineEiiii+0xca>
 801e560:	2301      	movs	r3, #1
 801e562:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801e566:	f8a4 b014 	strh.w	fp, [r4, #20]
 801e56a:	2300      	movs	r3, #0
 801e56c:	82e2      	strh	r2, [r4, #22]
 801e56e:	8323      	strh	r3, [r4, #24]
 801e570:	e01f      	b.n	801e5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801e572:	f104 0314 	add.w	r3, r4, #20
 801e576:	6925      	ldr	r5, [r4, #16]
 801e578:	cb03      	ldmia	r3!, {r0, r1}
 801e57a:	6028      	str	r0, [r5, #0]
 801e57c:	6069      	str	r1, [r5, #4]
 801e57e:	6923      	ldr	r3, [r4, #16]
 801e580:	3308      	adds	r3, #8
 801e582:	6123      	str	r3, [r4, #16]
 801e584:	68a3      	ldr	r3, [r4, #8]
 801e586:	3301      	adds	r3, #1
 801e588:	60a3      	str	r3, [r4, #8]
 801e58a:	e7ec      	b.n	801e566 <_ZN8touchgfx7Outline10renderLineEiiii+0xbe>
 801e58c:	9b04      	ldr	r3, [sp, #16]
 801e58e:	45ab      	cmp	fp, r5
 801e590:	f001 011f 	and.w	r1, r1, #31
 801e594:	8b20      	ldrh	r0, [r4, #24]
 801e596:	f003 031f 	and.w	r3, r3, #31
 801e59a:	8b62      	ldrh	r2, [r4, #26]
 801e59c:	9305      	str	r3, [sp, #20]
 801e59e:	9b03      	ldr	r3, [sp, #12]
 801e5a0:	eba3 0306 	sub.w	r3, r3, r6
 801e5a4:	d107      	bne.n	801e5b6 <_ZN8touchgfx7Outline10renderLineEiiii+0x10e>
 801e5a6:	4418      	add	r0, r3
 801e5a8:	8320      	strh	r0, [r4, #24]
 801e5aa:	9805      	ldr	r0, [sp, #20]
 801e5ac:	4401      	add	r1, r0
 801e5ae:	fb03 2301 	mla	r3, r3, r1, r2
 801e5b2:	8363      	strh	r3, [r4, #26]
 801e5b4:	e0ad      	b.n	801e712 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801e5b6:	f1ba 0f00 	cmp.w	sl, #0
 801e5ba:	db33      	blt.n	801e624 <_ZN8touchgfx7Outline10renderLineEiiii+0x17c>
 801e5bc:	2701      	movs	r7, #1
 801e5be:	f1c1 0c20 	rsb	ip, r1, #32
 801e5c2:	9702      	str	r7, [sp, #8]
 801e5c4:	2720      	movs	r7, #32
 801e5c6:	fb03 f30c 	mul.w	r3, r3, ip
 801e5ca:	9701      	str	r7, [sp, #4]
 801e5cc:	9f01      	ldr	r7, [sp, #4]
 801e5ce:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801e5d2:	4439      	add	r1, r7
 801e5d4:	fb93 fcfa 	sdiv	ip, r3, sl
 801e5d8:	fb0a 331c 	mls	r3, sl, ip, r3
 801e5dc:	2b00      	cmp	r3, #0
 801e5de:	bfbc      	itt	lt
 801e5e0:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801e5e4:	4453      	addlt	r3, sl
 801e5e6:	fb0c 2101 	mla	r1, ip, r1, r2
 801e5ea:	9a02      	ldr	r2, [sp, #8]
 801e5ec:	4460      	add	r0, ip
 801e5ee:	4415      	add	r5, r2
 801e5f0:	f9bd 2000 	ldrsh.w	r2, [sp]
 801e5f4:	b200      	sxth	r0, r0
 801e5f6:	0417      	lsls	r7, r2, #16
 801e5f8:	9200      	str	r2, [sp, #0]
 801e5fa:	fa0f fe85 	sxth.w	lr, r5
 801e5fe:	8320      	strh	r0, [r4, #24]
 801e600:	9704      	str	r7, [sp, #16]
 801e602:	b209      	sxth	r1, r1
 801e604:	f9b4 7014 	ldrsh.w	r7, [r4, #20]
 801e608:	9a04      	ldr	r2, [sp, #16]
 801e60a:	eb07 4708 	add.w	r7, r7, r8, lsl #16
 801e60e:	8361      	strh	r1, [r4, #26]
 801e610:	eb0e 0902 	add.w	r9, lr, r2
 801e614:	454f      	cmp	r7, r9
 801e616:	d10d      	bne.n	801e634 <_ZN8touchgfx7Outline10renderLineEiiii+0x18c>
 801e618:	4ba0      	ldr	r3, [pc, #640]	; (801e89c <_ZN8touchgfx7Outline10renderLineEiiii+0x3f4>)
 801e61a:	2176      	movs	r1, #118	; 0x76
 801e61c:	4aa0      	ldr	r2, [pc, #640]	; (801e8a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x3f8>)
 801e61e:	48a1      	ldr	r0, [pc, #644]	; (801e8a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3fc>)
 801e620:	f001 fdb8 	bl	8020194 <__assert_func>
 801e624:	f04f 37ff 	mov.w	r7, #4294967295
 801e628:	434b      	muls	r3, r1
 801e62a:	f1ca 0a00 	rsb	sl, sl, #0
 801e62e:	9702      	str	r7, [sp, #8]
 801e630:	2700      	movs	r7, #0
 801e632:	e7ca      	b.n	801e5ca <_ZN8touchgfx7Outline10renderLineEiiii+0x122>
 801e634:	ea50 0201 	orrs.w	r2, r0, r1
 801e638:	d00c      	beq.n	801e654 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e63a:	f1b8 0f00 	cmp.w	r8, #0
 801e63e:	db09      	blt.n	801e654 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e640:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e642:	4588      	cmp	r8, r1
 801e644:	da06      	bge.n	801e654 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e646:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e64a:	4288      	cmp	r0, r1
 801e64c:	d364      	bcc.n	801e718 <_ZN8touchgfx7Outline10renderLineEiiii+0x270>
 801e64e:	2101      	movs	r1, #1
 801e650:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e654:	2100      	movs	r1, #0
 801e656:	9a00      	ldr	r2, [sp, #0]
 801e658:	45ab      	cmp	fp, r5
 801e65a:	f8a4 e014 	strh.w	lr, [r4, #20]
 801e65e:	82e2      	strh	r2, [r4, #22]
 801e660:	4466      	add	r6, ip
 801e662:	8321      	strh	r1, [r4, #24]
 801e664:	8361      	strh	r1, [r4, #26]
 801e666:	d04b      	beq.n	801e700 <_ZN8touchgfx7Outline10renderLineEiiii+0x258>
 801e668:	9a03      	ldr	r2, [sp, #12]
 801e66a:	eba3 030a 	sub.w	r3, r3, sl
 801e66e:	f04f 0800 	mov.w	r8, #0
 801e672:	1b91      	subs	r1, r2, r6
 801e674:	448c      	add	ip, r1
 801e676:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
 801e67a:	fb9c f7fa 	sdiv	r7, ip, sl
 801e67e:	fb0a cc17 	mls	ip, sl, r7, ip
 801e682:	f1bc 0f00 	cmp.w	ip, #0
 801e686:	bfbc      	itt	lt
 801e688:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801e68c:	44d4      	addlt	ip, sl
 801e68e:	1c7a      	adds	r2, r7, #1
 801e690:	9207      	str	r2, [sp, #28]
 801e692:	eb13 030c 	adds.w	r3, r3, ip
 801e696:	9a02      	ldr	r2, [sp, #8]
 801e698:	bf54      	ite	pl
 801e69a:	9807      	ldrpl	r0, [sp, #28]
 801e69c:	4638      	movmi	r0, r7
 801e69e:	4415      	add	r5, r2
 801e6a0:	9a04      	ldr	r2, [sp, #16]
 801e6a2:	fa0f fe80 	sxth.w	lr, r0
 801e6a6:	4406      	add	r6, r0
 801e6a8:	ea4f 1140 	mov.w	r1, r0, lsl #5
 801e6ac:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801e6b0:	fa0f f985 	sxth.w	r9, r5
 801e6b4:	bf58      	it	pl
 801e6b6:	eba3 030a 	subpl.w	r3, r3, sl
 801e6ba:	4410      	add	r0, r2
 801e6bc:	b209      	sxth	r1, r1
 801e6be:	444a      	add	r2, r9
 801e6c0:	f8a4 e018 	strh.w	lr, [r4, #24]
 801e6c4:	8361      	strh	r1, [r4, #26]
 801e6c6:	4290      	cmp	r0, r2
 801e6c8:	d0a6      	beq.n	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801e6ca:	ea5e 0201 	orrs.w	r2, lr, r1
 801e6ce:	d00d      	beq.n	801e6ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e6d0:	9a00      	ldr	r2, [sp, #0]
 801e6d2:	2a00      	cmp	r2, #0
 801e6d4:	db0a      	blt.n	801e6ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e6d6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e6d8:	428a      	cmp	r2, r1
 801e6da:	da07      	bge.n	801e6ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e6dc:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e6e0:	4288      	cmp	r0, r1
 801e6e2:	d329      	bcc.n	801e738 <_ZN8touchgfx7Outline10renderLineEiiii+0x290>
 801e6e4:	f04f 0201 	mov.w	r2, #1
 801e6e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801e6ec:	9a00      	ldr	r2, [sp, #0]
 801e6ee:	45ab      	cmp	fp, r5
 801e6f0:	f8a4 9014 	strh.w	r9, [r4, #20]
 801e6f4:	82e2      	strh	r2, [r4, #22]
 801e6f6:	f8a4 8018 	strh.w	r8, [r4, #24]
 801e6fa:	f8a4 801a 	strh.w	r8, [r4, #26]
 801e6fe:	d1c8      	bne.n	801e692 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ea>
 801e700:	9b03      	ldr	r3, [sp, #12]
 801e702:	9a01      	ldr	r2, [sp, #4]
 801e704:	1b9e      	subs	r6, r3, r6
 801e706:	9b05      	ldr	r3, [sp, #20]
 801e708:	3320      	adds	r3, #32
 801e70a:	8326      	strh	r6, [r4, #24]
 801e70c:	1a9b      	subs	r3, r3, r2
 801e70e:	435e      	muls	r6, r3
 801e710:	8366      	strh	r6, [r4, #26]
 801e712:	b015      	add	sp, #84	; 0x54
 801e714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e718:	f104 0714 	add.w	r7, r4, #20
 801e71c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801e720:	cf03      	ldmia	r7!, {r0, r1}
 801e722:	f8c8 0000 	str.w	r0, [r8]
 801e726:	f8c8 1004 	str.w	r1, [r8, #4]
 801e72a:	6921      	ldr	r1, [r4, #16]
 801e72c:	3108      	adds	r1, #8
 801e72e:	6121      	str	r1, [r4, #16]
 801e730:	68a1      	ldr	r1, [r4, #8]
 801e732:	3101      	adds	r1, #1
 801e734:	60a1      	str	r1, [r4, #8]
 801e736:	e78d      	b.n	801e654 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ac>
 801e738:	f104 0e14 	add.w	lr, r4, #20
 801e73c:	6922      	ldr	r2, [r4, #16]
 801e73e:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801e742:	9206      	str	r2, [sp, #24]
 801e744:	6010      	str	r0, [r2, #0]
 801e746:	6051      	str	r1, [r2, #4]
 801e748:	6921      	ldr	r1, [r4, #16]
 801e74a:	3108      	adds	r1, #8
 801e74c:	6121      	str	r1, [r4, #16]
 801e74e:	68a1      	ldr	r1, [r4, #8]
 801e750:	3101      	adds	r1, #1
 801e752:	60a1      	str	r1, [r4, #8]
 801e754:	e7ca      	b.n	801e6ec <_ZN8touchgfx7Outline10renderLineEiiii+0x244>
 801e756:	eba0 0b02 	sub.w	fp, r0, r2
 801e75a:	f1ba 0f00 	cmp.w	sl, #0
 801e75e:	f040 80a3 	bne.w	801e8a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801e762:	f1bb 0f00 	cmp.w	fp, #0
 801e766:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801e76a:	8b62      	ldrh	r2, [r4, #26]
 801e76c:	b22d      	sxth	r5, r5
 801e76e:	bfa8      	it	ge
 801e770:	f04f 0a20 	movge.w	sl, #32
 801e774:	f001 033e 	and.w	r3, r1, #62	; 0x3e
 801e778:	8b21      	ldrh	r1, [r4, #24]
 801e77a:	bfb8      	it	lt
 801e77c:	f04f 39ff 	movlt.w	r9, #4294967295
 801e780:	ebaa 0606 	sub.w	r6, sl, r6
 801e784:	bfa8      	it	ge
 801e786:	f04f 0901 	movge.w	r9, #1
 801e78a:	f9b4 0016 	ldrsh.w	r0, [r4, #22]
 801e78e:	4431      	add	r1, r6
 801e790:	fb06 2603 	mla	r6, r6, r3, r2
 801e794:	9a00      	ldr	r2, [sp, #0]
 801e796:	f9b4 c014 	ldrsh.w	ip, [r4, #20]
 801e79a:	b209      	sxth	r1, r1
 801e79c:	444a      	add	r2, r9
 801e79e:	b236      	sxth	r6, r6
 801e7a0:	eb0c 4c00 	add.w	ip, ip, r0, lsl #16
 801e7a4:	8321      	strh	r1, [r4, #24]
 801e7a6:	b217      	sxth	r7, r2
 801e7a8:	8366      	strh	r6, [r4, #26]
 801e7aa:	eb05 4e07 	add.w	lr, r5, r7, lsl #16
 801e7ae:	45f4      	cmp	ip, lr
 801e7b0:	f43f af32 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801e7b4:	4331      	orrs	r1, r6
 801e7b6:	d00b      	beq.n	801e7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e7b8:	2800      	cmp	r0, #0
 801e7ba:	db09      	blt.n	801e7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e7bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e7be:	4288      	cmp	r0, r1
 801e7c0:	da06      	bge.n	801e7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e7c2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e7c6:	4288      	cmp	r0, r1
 801e7c8:	d33b      	bcc.n	801e842 <_ZN8touchgfx7Outline10renderLineEiiii+0x39a>
 801e7ca:	2101      	movs	r1, #1
 801e7cc:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e7d0:	f1aa 0610 	sub.w	r6, sl, #16
 801e7d4:	82e7      	strh	r7, [r4, #22]
 801e7d6:	2700      	movs	r7, #0
 801e7d8:	82a5      	strh	r5, [r4, #20]
 801e7da:	0076      	lsls	r6, r6, #1
 801e7dc:	8327      	strh	r7, [r4, #24]
 801e7de:	fb06 fc03 	mul.w	ip, r6, r3
 801e7e2:	b236      	sxth	r6, r6
 801e7e4:	8367      	strh	r7, [r4, #26]
 801e7e6:	fa0f fc8c 	sxth.w	ip, ip
 801e7ea:	ea46 010c 	orr.w	r1, r6, ip
 801e7ee:	9100      	str	r1, [sp, #0]
 801e7f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e7f2:	428a      	cmp	r2, r1
 801e7f4:	d046      	beq.n	801e884 <_ZN8touchgfx7Outline10renderLineEiiii+0x3dc>
 801e7f6:	444a      	add	r2, r9
 801e7f8:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 801e7fc:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801e800:	fa0f f882 	sxth.w	r8, r2
 801e804:	8326      	strh	r6, [r4, #24]
 801e806:	eb00 4001 	add.w	r0, r0, r1, lsl #16
 801e80a:	f8a4 c01a 	strh.w	ip, [r4, #26]
 801e80e:	eb05 4e08 	add.w	lr, r5, r8, lsl #16
 801e812:	4570      	cmp	r0, lr
 801e814:	f43f af00 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801e818:	9800      	ldr	r0, [sp, #0]
 801e81a:	b160      	cbz	r0, 801e836 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801e81c:	2900      	cmp	r1, #0
 801e81e:	db0a      	blt.n	801e836 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801e820:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801e822:	4281      	cmp	r1, r0
 801e824:	da07      	bge.n	801e836 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801e826:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e82a:	4288      	cmp	r0, r1
 801e82c:	d319      	bcc.n	801e862 <_ZN8touchgfx7Outline10renderLineEiiii+0x3ba>
 801e82e:	f04f 0101 	mov.w	r1, #1
 801e832:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e836:	82a5      	strh	r5, [r4, #20]
 801e838:	f8a4 8016 	strh.w	r8, [r4, #22]
 801e83c:	8327      	strh	r7, [r4, #24]
 801e83e:	8367      	strh	r7, [r4, #26]
 801e840:	e7d6      	b.n	801e7f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x348>
 801e842:	f104 0614 	add.w	r6, r4, #20
 801e846:	f8d4 c010 	ldr.w	ip, [r4, #16]
 801e84a:	ce03      	ldmia	r6!, {r0, r1}
 801e84c:	f8cc 0000 	str.w	r0, [ip]
 801e850:	f8cc 1004 	str.w	r1, [ip, #4]
 801e854:	6921      	ldr	r1, [r4, #16]
 801e856:	3108      	adds	r1, #8
 801e858:	6121      	str	r1, [r4, #16]
 801e85a:	68a1      	ldr	r1, [r4, #8]
 801e85c:	3101      	adds	r1, #1
 801e85e:	60a1      	str	r1, [r4, #8]
 801e860:	e7b6      	b.n	801e7d0 <_ZN8touchgfx7Outline10renderLineEiiii+0x328>
 801e862:	f104 0e14 	add.w	lr, r4, #20
 801e866:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e86a:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801e86e:	f8cb 0000 	str.w	r0, [fp]
 801e872:	f8cb 1004 	str.w	r1, [fp, #4]
 801e876:	6921      	ldr	r1, [r4, #16]
 801e878:	3108      	adds	r1, #8
 801e87a:	6121      	str	r1, [r4, #16]
 801e87c:	68a1      	ldr	r1, [r4, #8]
 801e87e:	3101      	adds	r1, #1
 801e880:	60a1      	str	r1, [r4, #8]
 801e882:	e7d8      	b.n	801e836 <_ZN8touchgfx7Outline10renderLineEiiii+0x38e>
 801e884:	9a03      	ldr	r2, [sp, #12]
 801e886:	8b61      	ldrh	r1, [r4, #26]
 801e888:	f1a2 0e20 	sub.w	lr, r2, #32
 801e88c:	8b22      	ldrh	r2, [r4, #24]
 801e88e:	44d6      	add	lr, sl
 801e890:	4472      	add	r2, lr
 801e892:	fb0e 1303 	mla	r3, lr, r3, r1
 801e896:	8322      	strh	r2, [r4, #24]
 801e898:	e68b      	b.n	801e5b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x10a>
 801e89a:	bf00      	nop
 801e89c:	080269c7 	.word	0x080269c7
 801e8a0:	08026a48 	.word	0x08026a48
 801e8a4:	080269f8 	.word	0x080269f8
 801e8a8:	f1bb 0f00 	cmp.w	fp, #0
 801e8ac:	f2c0 8124 	blt.w	801eaf8 <_ZN8touchgfx7Outline10renderLineEiiii+0x650>
 801e8b0:	2201      	movs	r2, #1
 801e8b2:	f1c6 0320 	rsb	r3, r6, #32
 801e8b6:	920b      	str	r2, [sp, #44]	; 0x2c
 801e8b8:	2220      	movs	r2, #32
 801e8ba:	fb0a f303 	mul.w	r3, sl, r3
 801e8be:	f9b4 8016 	ldrsh.w	r8, [r4, #22]
 801e8c2:	9202      	str	r2, [sp, #8]
 801e8c4:	fb93 fcfb 	sdiv	ip, r3, fp
 801e8c8:	fb0b 331c 	mls	r3, fp, ip, r3
 801e8cc:	2b00      	cmp	r3, #0
 801e8ce:	9308      	str	r3, [sp, #32]
 801e8d0:	bfbe      	ittt	lt
 801e8d2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801e8d6:	445b      	addlt	r3, fp
 801e8d8:	9308      	strlt	r3, [sp, #32]
 801e8da:	eb0c 0301 	add.w	r3, ip, r1
 801e8de:	9301      	str	r3, [sp, #4]
 801e8e0:	115b      	asrs	r3, r3, #5
 801e8e2:	9305      	str	r3, [sp, #20]
 801e8e4:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 801e8e8:	eb03 4308 	add.w	r3, r3, r8, lsl #16
 801e8ec:	461f      	mov	r7, r3
 801e8ee:	9b02      	ldr	r3, [sp, #8]
 801e8f0:	42b3      	cmp	r3, r6
 801e8f2:	f040 8117 	bne.w	801eb24 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 801e8f6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801e8fa:	f9bd 3000 	ldrsh.w	r3, [sp]
 801e8fe:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801e902:	42b9      	cmp	r1, r7
 801e904:	d016      	beq.n	801e934 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801e906:	8b60      	ldrh	r0, [r4, #26]
 801e908:	8b21      	ldrh	r1, [r4, #24]
 801e90a:	4301      	orrs	r1, r0
 801e90c:	d00d      	beq.n	801e92a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801e90e:	f1b8 0f00 	cmp.w	r8, #0
 801e912:	db0a      	blt.n	801e92a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801e914:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e916:	4541      	cmp	r1, r8
 801e918:	dd07      	ble.n	801e92a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801e91a:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801e91e:	4288      	cmp	r0, r1
 801e920:	f0c0 80f3 	bcc.w	801eb0a <_ZN8touchgfx7Outline10renderLineEiiii+0x662>
 801e924:	2101      	movs	r1, #1
 801e926:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801e92a:	82e3      	strh	r3, [r4, #22]
 801e92c:	2300      	movs	r3, #0
 801e92e:	82a2      	strh	r2, [r4, #20]
 801e930:	8323      	strh	r3, [r4, #24]
 801e932:	8363      	strh	r3, [r4, #26]
 801e934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e936:	9a00      	ldr	r2, [sp, #0]
 801e938:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801e93c:	441a      	add	r2, r3
 801e93e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801e942:	4691      	mov	r9, r2
 801e944:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801e948:	fa0f f589 	sxth.w	r5, r9
 801e94c:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801e950:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801e954:	4281      	cmp	r1, r0
 801e956:	d015      	beq.n	801e984 <_ZN8touchgfx7Outline10renderLineEiiii+0x4dc>
 801e958:	8b60      	ldrh	r0, [r4, #26]
 801e95a:	8b21      	ldrh	r1, [r4, #24]
 801e95c:	4301      	orrs	r1, r0
 801e95e:	d00c      	beq.n	801e97a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801e960:	2a00      	cmp	r2, #0
 801e962:	db0a      	blt.n	801e97a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801e964:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e966:	428a      	cmp	r2, r1
 801e968:	da07      	bge.n	801e97a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801e96a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801e96e:	4291      	cmp	r1, r2
 801e970:	f0c0 81ae 	bcc.w	801ecd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x828>
 801e974:	2201      	movs	r2, #1
 801e976:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801e97a:	82a3      	strh	r3, [r4, #20]
 801e97c:	2300      	movs	r3, #0
 801e97e:	82e5      	strh	r5, [r4, #22]
 801e980:	8323      	strh	r3, [r4, #24]
 801e982:	8363      	strh	r3, [r4, #26]
 801e984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e986:	454b      	cmp	r3, r9
 801e988:	f000 808a 	beq.w	801eaa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x5f8>
 801e98c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 801e990:	fb93 f2fb 	sdiv	r2, r3, fp
 801e994:	fb0b 3312 	mls	r3, fp, r2, r3
 801e998:	9205      	str	r2, [sp, #20]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	9307      	str	r3, [sp, #28]
 801e99e:	da04      	bge.n	801e9aa <_ZN8touchgfx7Outline10renderLineEiiii+0x502>
 801e9a0:	1e53      	subs	r3, r2, #1
 801e9a2:	9305      	str	r3, [sp, #20]
 801e9a4:	9b07      	ldr	r3, [sp, #28]
 801e9a6:	445b      	add	r3, fp
 801e9a8:	9307      	str	r3, [sp, #28]
 801e9aa:	9b08      	ldr	r3, [sp, #32]
 801e9ac:	f04f 0a00 	mov.w	sl, #0
 801e9b0:	eba3 030b 	sub.w	r3, r3, fp
 801e9b4:	9308      	str	r3, [sp, #32]
 801e9b6:	e9dd c301 	ldrd	ip, r3, [sp, #4]
 801e9ba:	f1c3 0320 	rsb	r3, r3, #32
 801e9be:	930a      	str	r3, [sp, #40]	; 0x28
 801e9c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9c2:	9b02      	ldr	r3, [sp, #8]
 801e9c4:	1a9b      	subs	r3, r3, r2
 801e9c6:	9309      	str	r3, [sp, #36]	; 0x24
 801e9c8:	9902      	ldr	r1, [sp, #8]
 801e9ca:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801e9ce:	f9b4 8014 	ldrsh.w	r8, [r4, #20]
 801e9d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e9d6:	eb08 4806 	add.w	r8, r8, r6, lsl #16
 801e9da:	189b      	adds	r3, r3, r2
 801e9dc:	9308      	str	r3, [sp, #32]
 801e9de:	bf57      	itett	pl
 801e9e0:	eba3 030b 	subpl.w	r3, r3, fp
 801e9e4:	9b05      	ldrmi	r3, [sp, #20]
 801e9e6:	9308      	strpl	r3, [sp, #32]
 801e9e8:	9b05      	ldrpl	r3, [sp, #20]
 801e9ea:	bf58      	it	pl
 801e9ec:	3301      	addpl	r3, #1
 801e9ee:	9300      	str	r3, [sp, #0]
 801e9f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e9f4:	4413      	add	r3, r2
 801e9f6:	9301      	str	r3, [sp, #4]
 801e9f8:	115b      	asrs	r3, r3, #5
 801e9fa:	9306      	str	r3, [sp, #24]
 801e9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9fe:	428b      	cmp	r3, r1
 801ea00:	f040 8180 	bne.w	801ed04 <_ZN8touchgfx7Outline10renderLineEiiii+0x85c>
 801ea04:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801ea08:	fa0f f389 	sxth.w	r3, r9
 801ea0c:	eb02 4103 	add.w	r1, r2, r3, lsl #16
 801ea10:	4541      	cmp	r1, r8
 801ea12:	d017      	beq.n	801ea44 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801ea14:	8b60      	ldrh	r0, [r4, #26]
 801ea16:	8b21      	ldrh	r1, [r4, #24]
 801ea18:	4301      	orrs	r1, r0
 801ea1a:	d00d      	beq.n	801ea38 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ea1c:	2e00      	cmp	r6, #0
 801ea1e:	db0b      	blt.n	801ea38 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ea20:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ea22:	42b1      	cmp	r1, r6
 801ea24:	dd08      	ble.n	801ea38 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ea26:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ea2a:	4288      	cmp	r0, r1
 801ea2c:	f0c0 815d 	bcc.w	801ecea <_ZN8touchgfx7Outline10renderLineEiiii+0x842>
 801ea30:	f04f 0101 	mov.w	r1, #1
 801ea34:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ea38:	82a2      	strh	r2, [r4, #20]
 801ea3a:	82e3      	strh	r3, [r4, #22]
 801ea3c:	f8a4 a018 	strh.w	sl, [r4, #24]
 801ea40:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801ea44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ea46:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 801ea4a:	4499      	add	r9, r3
 801ea4c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801ea50:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801ea54:	fa0f f589 	sxth.w	r5, r9
 801ea58:	eb01 4102 	add.w	r1, r1, r2, lsl #16
 801ea5c:	eb03 4005 	add.w	r0, r3, r5, lsl #16
 801ea60:	4281      	cmp	r1, r0
 801ea62:	f43f add9 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ea66:	8b60      	ldrh	r0, [r4, #26]
 801ea68:	8b21      	ldrh	r1, [r4, #24]
 801ea6a:	4301      	orrs	r1, r0
 801ea6c:	d00d      	beq.n	801ea8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ea6e:	2a00      	cmp	r2, #0
 801ea70:	db0b      	blt.n	801ea8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ea72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ea74:	428a      	cmp	r2, r1
 801ea76:	da08      	bge.n	801ea8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801ea78:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801ea7c:	4291      	cmp	r1, r2
 801ea7e:	f0c0 8228 	bcc.w	801eed2 <_ZN8touchgfx7Outline10renderLineEiiii+0xa2a>
 801ea82:	f04f 0201 	mov.w	r2, #1
 801ea86:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801ea8a:	82a3      	strh	r3, [r4, #20]
 801ea8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea8e:	82e5      	strh	r5, [r4, #22]
 801ea90:	454b      	cmp	r3, r9
 801ea92:	f8a4 a018 	strh.w	sl, [r4, #24]
 801ea96:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801ea9a:	f8dd c004 	ldr.w	ip, [sp, #4]
 801ea9e:	d193      	bne.n	801e9c8 <_ZN8touchgfx7Outline10renderLineEiiii+0x520>
 801eaa0:	9b02      	ldr	r3, [sp, #8]
 801eaa2:	f1c3 0e20 	rsb	lr, r3, #32
 801eaa6:	9b04      	ldr	r3, [sp, #16]
 801eaa8:	ea4f 1b63 	mov.w	fp, r3, asr #5
 801eaac:	9b03      	ldr	r3, [sp, #12]
 801eaae:	459e      	cmp	lr, r3
 801eab0:	f040 8229 	bne.w	801ef06 <_ZN8touchgfx7Outline10renderLineEiiii+0xa5e>
 801eab4:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801eab8:	fa0f f58b 	sxth.w	r5, fp
 801eabc:	fa0f f289 	sxth.w	r2, r9
 801eac0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 801eac4:	eb05 4002 	add.w	r0, r5, r2, lsl #16
 801eac8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801eacc:	4281      	cmp	r1, r0
 801eace:	f43f ae20 	beq.w	801e712 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801ead2:	8b60      	ldrh	r0, [r4, #26]
 801ead4:	8b21      	ldrh	r1, [r4, #24]
 801ead6:	4301      	orrs	r1, r0
 801ead8:	d00c      	beq.n	801eaf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801eada:	2b00      	cmp	r3, #0
 801eadc:	db0a      	blt.n	801eaf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801eade:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801eae0:	428b      	cmp	r3, r1
 801eae2:	da07      	bge.n	801eaf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801eae4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801eae8:	4299      	cmp	r1, r3
 801eaea:	f0c0 81ff 	bcc.w	801eeec <_ZN8touchgfx7Outline10renderLineEiiii+0xa44>
 801eaee:	2301      	movs	r3, #1
 801eaf0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801eaf4:	82a5      	strh	r5, [r4, #20]
 801eaf6:	e538      	b.n	801e56a <_ZN8touchgfx7Outline10renderLineEiiii+0xc2>
 801eaf8:	f04f 32ff 	mov.w	r2, #4294967295
 801eafc:	fb0a f306 	mul.w	r3, sl, r6
 801eb00:	f1cb 0b00 	rsb	fp, fp, #0
 801eb04:	920b      	str	r2, [sp, #44]	; 0x2c
 801eb06:	2200      	movs	r2, #0
 801eb08:	e6d9      	b.n	801e8be <_ZN8touchgfx7Outline10renderLineEiiii+0x416>
 801eb0a:	f104 0514 	add.w	r5, r4, #20
 801eb0e:	6926      	ldr	r6, [r4, #16]
 801eb10:	cd03      	ldmia	r5!, {r0, r1}
 801eb12:	6030      	str	r0, [r6, #0]
 801eb14:	6071      	str	r1, [r6, #4]
 801eb16:	6921      	ldr	r1, [r4, #16]
 801eb18:	3108      	adds	r1, #8
 801eb1a:	6121      	str	r1, [r4, #16]
 801eb1c:	68a1      	ldr	r1, [r4, #8]
 801eb1e:	3101      	adds	r1, #1
 801eb20:	60a1      	str	r1, [r4, #8]
 801eb22:	e702      	b.n	801e92a <_ZN8touchgfx7Outline10renderLineEiiii+0x482>
 801eb24:	9b01      	ldr	r3, [sp, #4]
 801eb26:	f001 011f 	and.w	r1, r1, #31
 801eb2a:	8b20      	ldrh	r0, [r4, #24]
 801eb2c:	f003 031f 	and.w	r3, r3, #31
 801eb30:	f8b4 901a 	ldrh.w	r9, [r4, #26]
 801eb34:	930d      	str	r3, [sp, #52]	; 0x34
 801eb36:	9b02      	ldr	r3, [sp, #8]
 801eb38:	1b9a      	subs	r2, r3, r6
 801eb3a:	9b05      	ldr	r3, [sp, #20]
 801eb3c:	42ab      	cmp	r3, r5
 801eb3e:	d107      	bne.n	801eb50 <_ZN8touchgfx7Outline10renderLineEiiii+0x6a8>
 801eb40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801eb42:	4410      	add	r0, r2
 801eb44:	4419      	add	r1, r3
 801eb46:	8320      	strh	r0, [r4, #24]
 801eb48:	fb02 9201 	mla	r2, r2, r1, r9
 801eb4c:	8362      	strh	r2, [r4, #26]
 801eb4e:	e6f1      	b.n	801e934 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801eb50:	f1bc 0f00 	cmp.w	ip, #0
 801eb54:	f2c0 8093 	blt.w	801ec7e <_ZN8touchgfx7Outline10renderLineEiiii+0x7d6>
 801eb58:	f1c1 0320 	rsb	r3, r1, #32
 801eb5c:	435a      	muls	r2, r3
 801eb5e:	2301      	movs	r3, #1
 801eb60:	9309      	str	r3, [sp, #36]	; 0x24
 801eb62:	2320      	movs	r3, #32
 801eb64:	9307      	str	r3, [sp, #28]
 801eb66:	9b07      	ldr	r3, [sp, #28]
 801eb68:	fb92 fefc 	sdiv	lr, r2, ip
 801eb6c:	fb0c 221e 	mls	r2, ip, lr, r2
 801eb70:	4419      	add	r1, r3
 801eb72:	2a00      	cmp	r2, #0
 801eb74:	bfbc      	itt	lt
 801eb76:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801eb7a:	4462      	addlt	r2, ip
 801eb7c:	fb0e 9101 	mla	r1, lr, r1, r9
 801eb80:	4470      	add	r0, lr
 801eb82:	b20b      	sxth	r3, r1
 801eb84:	9909      	ldr	r1, [sp, #36]	; 0x24
 801eb86:	b200      	sxth	r0, r0
 801eb88:	440d      	add	r5, r1
 801eb8a:	f9bd 1000 	ldrsh.w	r1, [sp]
 801eb8e:	8320      	strh	r0, [r4, #24]
 801eb90:	fa0f f985 	sxth.w	r9, r5
 801eb94:	9106      	str	r1, [sp, #24]
 801eb96:	0409      	lsls	r1, r1, #16
 801eb98:	8363      	strh	r3, [r4, #26]
 801eb9a:	910a      	str	r1, [sp, #40]	; 0x28
 801eb9c:	4449      	add	r1, r9
 801eb9e:	42b9      	cmp	r1, r7
 801eba0:	f43f ad3a 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801eba4:	4303      	orrs	r3, r0
 801eba6:	d00c      	beq.n	801ebc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801eba8:	f1b8 0f00 	cmp.w	r8, #0
 801ebac:	db09      	blt.n	801ebc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801ebae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ebb0:	4543      	cmp	r3, r8
 801ebb2:	dd06      	ble.n	801ebc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801ebb4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801ebb8:	4299      	cmp	r1, r3
 801ebba:	d368      	bcc.n	801ec8e <_ZN8touchgfx7Outline10renderLineEiiii+0x7e6>
 801ebbc:	2301      	movs	r3, #1
 801ebbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801ebc2:	9b06      	ldr	r3, [sp, #24]
 801ebc4:	4476      	add	r6, lr
 801ebc6:	f8a4 9014 	strh.w	r9, [r4, #20]
 801ebca:	82e3      	strh	r3, [r4, #22]
 801ebcc:	2300      	movs	r3, #0
 801ebce:	8323      	strh	r3, [r4, #24]
 801ebd0:	8363      	strh	r3, [r4, #26]
 801ebd2:	9b05      	ldr	r3, [sp, #20]
 801ebd4:	42ab      	cmp	r3, r5
 801ebd6:	d048      	beq.n	801ec6a <_ZN8touchgfx7Outline10renderLineEiiii+0x7c2>
 801ebd8:	9b02      	ldr	r3, [sp, #8]
 801ebda:	eba2 020c 	sub.w	r2, r2, ip
 801ebde:	1b9b      	subs	r3, r3, r6
 801ebe0:	4473      	add	r3, lr
 801ebe2:	015b      	lsls	r3, r3, #5
 801ebe4:	fb93 f8fc 	sdiv	r8, r3, ip
 801ebe8:	fb0c 3318 	mls	r3, ip, r8, r3
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	bfbc      	itt	lt
 801ebf0:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801ebf4:	4463      	addlt	r3, ip
 801ebf6:	f108 0101 	add.w	r1, r8, #1
 801ebfa:	910f      	str	r1, [sp, #60]	; 0x3c
 801ebfc:	18d2      	adds	r2, r2, r3
 801ebfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801ec00:	bf56      	itet	pl
 801ec02:	980f      	ldrpl	r0, [sp, #60]	; 0x3c
 801ec04:	4640      	movmi	r0, r8
 801ec06:	eba2 020c 	subpl.w	r2, r2, ip
 801ec0a:	fa0f fe80 	sxth.w	lr, r0
 801ec0e:	4406      	add	r6, r0
 801ec10:	0141      	lsls	r1, r0, #5
 801ec12:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ec14:	f8a4 e018 	strh.w	lr, [r4, #24]
 801ec18:	4405      	add	r5, r0
 801ec1a:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801ec1e:	b209      	sxth	r1, r1
 801ec20:	fa0f f985 	sxth.w	r9, r5
 801ec24:	4438      	add	r0, r7
 801ec26:	8361      	strh	r1, [r4, #26]
 801ec28:	444f      	add	r7, r9
 801ec2a:	42b8      	cmp	r0, r7
 801ec2c:	f43f acf4 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ec30:	ea5e 0101 	orrs.w	r1, lr, r1
 801ec34:	d00e      	beq.n	801ec54 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ec36:	9906      	ldr	r1, [sp, #24]
 801ec38:	2900      	cmp	r1, #0
 801ec3a:	db0b      	blt.n	801ec54 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ec3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ec3e:	9806      	ldr	r0, [sp, #24]
 801ec40:	4288      	cmp	r0, r1
 801ec42:	da07      	bge.n	801ec54 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ec44:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ec48:	4288      	cmp	r0, r1
 801ec4a:	d330      	bcc.n	801ecae <_ZN8touchgfx7Outline10renderLineEiiii+0x806>
 801ec4c:	f04f 0101 	mov.w	r1, #1
 801ec50:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801ec54:	9906      	ldr	r1, [sp, #24]
 801ec56:	f8a4 9014 	strh.w	r9, [r4, #20]
 801ec5a:	82e1      	strh	r1, [r4, #22]
 801ec5c:	f04f 0100 	mov.w	r1, #0
 801ec60:	8321      	strh	r1, [r4, #24]
 801ec62:	8361      	strh	r1, [r4, #26]
 801ec64:	9905      	ldr	r1, [sp, #20]
 801ec66:	42a9      	cmp	r1, r5
 801ec68:	d1c8      	bne.n	801ebfc <_ZN8touchgfx7Outline10renderLineEiiii+0x754>
 801ec6a:	9b02      	ldr	r3, [sp, #8]
 801ec6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ec6e:	1b9e      	subs	r6, r3, r6
 801ec70:	9b07      	ldr	r3, [sp, #28]
 801ec72:	3120      	adds	r1, #32
 801ec74:	8326      	strh	r6, [r4, #24]
 801ec76:	1ac9      	subs	r1, r1, r3
 801ec78:	434e      	muls	r6, r1
 801ec7a:	8366      	strh	r6, [r4, #26]
 801ec7c:	e65a      	b.n	801e934 <_ZN8touchgfx7Outline10renderLineEiiii+0x48c>
 801ec7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ec82:	434a      	muls	r2, r1
 801ec84:	f1cc 0c00 	rsb	ip, ip, #0
 801ec88:	9309      	str	r3, [sp, #36]	; 0x24
 801ec8a:	2300      	movs	r3, #0
 801ec8c:	e76a      	b.n	801eb64 <_ZN8touchgfx7Outline10renderLineEiiii+0x6bc>
 801ec8e:	f104 0314 	add.w	r3, r4, #20
 801ec92:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801ec96:	cb03      	ldmia	r3!, {r0, r1}
 801ec98:	f8c8 0000 	str.w	r0, [r8]
 801ec9c:	f8c8 1004 	str.w	r1, [r8, #4]
 801eca0:	6923      	ldr	r3, [r4, #16]
 801eca2:	3308      	adds	r3, #8
 801eca4:	6123      	str	r3, [r4, #16]
 801eca6:	68a3      	ldr	r3, [r4, #8]
 801eca8:	3301      	adds	r3, #1
 801ecaa:	60a3      	str	r3, [r4, #8]
 801ecac:	e789      	b.n	801ebc2 <_ZN8touchgfx7Outline10renderLineEiiii+0x71a>
 801ecae:	6921      	ldr	r1, [r4, #16]
 801ecb0:	f104 0e14 	add.w	lr, r4, #20
 801ecb4:	910e      	str	r1, [sp, #56]	; 0x38
 801ecb6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 801ecb8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
 801ecbc:	6038      	str	r0, [r7, #0]
 801ecbe:	4638      	mov	r0, r7
 801ecc0:	6079      	str	r1, [r7, #4]
 801ecc2:	6921      	ldr	r1, [r4, #16]
 801ecc4:	3108      	adds	r1, #8
 801ecc6:	6121      	str	r1, [r4, #16]
 801ecc8:	68a1      	ldr	r1, [r4, #8]
 801ecca:	3101      	adds	r1, #1
 801eccc:	60a1      	str	r1, [r4, #8]
 801ecce:	e7c1      	b.n	801ec54 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ac>
 801ecd0:	f104 0214 	add.w	r2, r4, #20
 801ecd4:	6926      	ldr	r6, [r4, #16]
 801ecd6:	ca03      	ldmia	r2!, {r0, r1}
 801ecd8:	6030      	str	r0, [r6, #0]
 801ecda:	6071      	str	r1, [r6, #4]
 801ecdc:	6922      	ldr	r2, [r4, #16]
 801ecde:	3208      	adds	r2, #8
 801ece0:	6122      	str	r2, [r4, #16]
 801ece2:	68a2      	ldr	r2, [r4, #8]
 801ece4:	3201      	adds	r2, #1
 801ece6:	60a2      	str	r2, [r4, #8]
 801ece8:	e647      	b.n	801e97a <_ZN8touchgfx7Outline10renderLineEiiii+0x4d2>
 801ecea:	f104 0514 	add.w	r5, r4, #20
 801ecee:	6926      	ldr	r6, [r4, #16]
 801ecf0:	cd03      	ldmia	r5!, {r0, r1}
 801ecf2:	6030      	str	r0, [r6, #0]
 801ecf4:	6071      	str	r1, [r6, #4]
 801ecf6:	6921      	ldr	r1, [r4, #16]
 801ecf8:	3108      	adds	r1, #8
 801ecfa:	6121      	str	r1, [r4, #16]
 801ecfc:	68a1      	ldr	r1, [r4, #8]
 801ecfe:	3101      	adds	r1, #1
 801ed00:	60a1      	str	r1, [r4, #8]
 801ed02:	e699      	b.n	801ea38 <_ZN8touchgfx7Outline10renderLineEiiii+0x590>
 801ed04:	9b01      	ldr	r3, [sp, #4]
 801ed06:	ea4f 176c 	mov.w	r7, ip, asr #5
 801ed0a:	8b20      	ldrh	r0, [r4, #24]
 801ed0c:	f00c 0c1f 	and.w	ip, ip, #31
 801ed10:	f003 031f 	and.w	r3, r3, #31
 801ed14:	f8b4 e01a 	ldrh.w	lr, [r4, #26]
 801ed18:	9310      	str	r3, [sp, #64]	; 0x40
 801ed1a:	9b06      	ldr	r3, [sp, #24]
 801ed1c:	429f      	cmp	r7, r3
 801ed1e:	d10a      	bne.n	801ed36 <_ZN8touchgfx7Outline10renderLineEiiii+0x88e>
 801ed20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed22:	4418      	add	r0, r3
 801ed24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ed26:	449c      	add	ip, r3
 801ed28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed2a:	8320      	strh	r0, [r4, #24]
 801ed2c:	fb03 ee0c 	mla	lr, r3, ip, lr
 801ed30:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801ed34:	e686      	b.n	801ea44 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801ed36:	9b00      	ldr	r3, [sp, #0]
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	f2c0 80a0 	blt.w	801ee7e <_ZN8touchgfx7Outline10renderLineEiiii+0x9d6>
 801ed3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ed40:	f1cc 0320 	rsb	r3, ip, #32
 801ed44:	434b      	muls	r3, r1
 801ed46:	2101      	movs	r1, #1
 801ed48:	910e      	str	r1, [sp, #56]	; 0x38
 801ed4a:	2120      	movs	r1, #32
 801ed4c:	9a00      	ldr	r2, [sp, #0]
 801ed4e:	910d      	str	r1, [sp, #52]	; 0x34
 801ed50:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ed52:	fb93 f5f2 	sdiv	r5, r3, r2
 801ed56:	fb02 3315 	mls	r3, r2, r5, r3
 801ed5a:	448c      	add	ip, r1
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	bfbc      	itt	lt
 801ed60:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801ed64:	189b      	addlt	r3, r3, r2
 801ed66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed68:	fb05 ec0c 	mla	ip, r5, ip, lr
 801ed6c:	4428      	add	r0, r5
 801ed6e:	4417      	add	r7, r2
 801ed70:	fa0f f18c 	sxth.w	r1, ip
 801ed74:	fa0f fc89 	sxth.w	ip, r9
 801ed78:	fa0f fe87 	sxth.w	lr, r7
 801ed7c:	8361      	strh	r1, [r4, #26]
 801ed7e:	ea4f 420c 	mov.w	r2, ip, lsl #16
 801ed82:	b200      	sxth	r0, r0
 801ed84:	920f      	str	r2, [sp, #60]	; 0x3c
 801ed86:	4472      	add	r2, lr
 801ed88:	8320      	strh	r0, [r4, #24]
 801ed8a:	4542      	cmp	r2, r8
 801ed8c:	f43f ac44 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ed90:	ea50 0201 	orrs.w	r2, r0, r1
 801ed94:	d00c      	beq.n	801edb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801ed96:	2e00      	cmp	r6, #0
 801ed98:	db0a      	blt.n	801edb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801ed9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ed9c:	42b1      	cmp	r1, r6
 801ed9e:	dd07      	ble.n	801edb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801eda0:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801eda4:	4288      	cmp	r0, r1
 801eda6:	d375      	bcc.n	801ee94 <_ZN8touchgfx7Outline10renderLineEiiii+0x9ec>
 801eda8:	f04f 0201 	mov.w	r2, #1
 801edac:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801edb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801edb2:	f8a4 e014 	strh.w	lr, [r4, #20]
 801edb6:	1956      	adds	r6, r2, r5
 801edb8:	9a06      	ldr	r2, [sp, #24]
 801edba:	f8a4 c016 	strh.w	ip, [r4, #22]
 801edbe:	42ba      	cmp	r2, r7
 801edc0:	f8a4 a018 	strh.w	sl, [r4, #24]
 801edc4:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801edc8:	d04c      	beq.n	801ee64 <_ZN8touchgfx7Outline10renderLineEiiii+0x9bc>
 801edca:	9a02      	ldr	r2, [sp, #8]
 801edcc:	1b91      	subs	r1, r2, r6
 801edce:	9a00      	ldr	r2, [sp, #0]
 801edd0:	440d      	add	r5, r1
 801edd2:	016d      	lsls	r5, r5, #5
 801edd4:	fb95 fef2 	sdiv	lr, r5, r2
 801edd8:	fb02 551e 	mls	r5, r2, lr, r5
 801eddc:	2d00      	cmp	r5, #0
 801edde:	bfbc      	itt	lt
 801ede0:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801ede4:	18ad      	addlt	r5, r5, r2
 801ede6:	9a00      	ldr	r2, [sp, #0]
 801ede8:	1a9b      	subs	r3, r3, r2
 801edea:	f10e 0201 	add.w	r2, lr, #1
 801edee:	9213      	str	r2, [sp, #76]	; 0x4c
 801edf0:	195b      	adds	r3, r3, r5
 801edf2:	bf57      	itett	pl
 801edf4:	9a00      	ldrpl	r2, [sp, #0]
 801edf6:	4670      	movmi	r0, lr
 801edf8:	9813      	ldrpl	r0, [sp, #76]	; 0x4c
 801edfa:	1a9b      	subpl	r3, r3, r2
 801edfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801edfe:	fa0f f880 	sxth.w	r8, r0
 801ee02:	4406      	add	r6, r0
 801ee04:	4417      	add	r7, r2
 801ee06:	0141      	lsls	r1, r0, #5
 801ee08:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801ee0c:	b23a      	sxth	r2, r7
 801ee0e:	f8a4 8018 	strh.w	r8, [r4, #24]
 801ee12:	b209      	sxth	r1, r1
 801ee14:	9211      	str	r2, [sp, #68]	; 0x44
 801ee16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ee18:	8361      	strh	r1, [r4, #26]
 801ee1a:	1882      	adds	r2, r0, r2
 801ee1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ee1e:	9212      	str	r2, [sp, #72]	; 0x48
 801ee20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee22:	4402      	add	r2, r0
 801ee24:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee26:	4290      	cmp	r0, r2
 801ee28:	f43f abf6 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ee2c:	ea58 0201 	orrs.w	r2, r8, r1
 801ee30:	d00d      	beq.n	801ee4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801ee32:	f1bc 0f00 	cmp.w	ip, #0
 801ee36:	db0a      	blt.n	801ee4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801ee38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ee3a:	458c      	cmp	ip, r1
 801ee3c:	da07      	bge.n	801ee4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801ee3e:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801ee42:	4288      	cmp	r0, r1
 801ee44:	d336      	bcc.n	801eeb4 <_ZN8touchgfx7Outline10renderLineEiiii+0xa0c>
 801ee46:	f04f 0201 	mov.w	r2, #1
 801ee4a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 801ee4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ee50:	f8a4 c016 	strh.w	ip, [r4, #22]
 801ee54:	82a2      	strh	r2, [r4, #20]
 801ee56:	9a06      	ldr	r2, [sp, #24]
 801ee58:	f8a4 a018 	strh.w	sl, [r4, #24]
 801ee5c:	42ba      	cmp	r2, r7
 801ee5e:	f8a4 a01a 	strh.w	sl, [r4, #26]
 801ee62:	d1c5      	bne.n	801edf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x948>
 801ee64:	9b02      	ldr	r3, [sp, #8]
 801ee66:	1b9e      	subs	r6, r3, r6
 801ee68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ee6a:	f103 0c20 	add.w	ip, r3, #32
 801ee6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee70:	8326      	strh	r6, [r4, #24]
 801ee72:	ebac 0c03 	sub.w	ip, ip, r3
 801ee76:	fb06 f60c 	mul.w	r6, r6, ip
 801ee7a:	8366      	strh	r6, [r4, #26]
 801ee7c:	e5e2      	b.n	801ea44 <_ZN8touchgfx7Outline10renderLineEiiii+0x59c>
 801ee7e:	9a00      	ldr	r2, [sp, #0]
 801ee80:	f04f 31ff 	mov.w	r1, #4294967295
 801ee84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ee86:	4252      	negs	r2, r2
 801ee88:	910e      	str	r1, [sp, #56]	; 0x38
 801ee8a:	fb03 f30c 	mul.w	r3, r3, ip
 801ee8e:	2100      	movs	r1, #0
 801ee90:	9200      	str	r2, [sp, #0]
 801ee92:	e75b      	b.n	801ed4c <_ZN8touchgfx7Outline10renderLineEiiii+0x8a4>
 801ee94:	f104 0614 	add.w	r6, r4, #20
 801ee98:	f8d4 8010 	ldr.w	r8, [r4, #16]
 801ee9c:	ce03      	ldmia	r6!, {r0, r1}
 801ee9e:	f8c8 0000 	str.w	r0, [r8]
 801eea2:	f8c8 1004 	str.w	r1, [r8, #4]
 801eea6:	6921      	ldr	r1, [r4, #16]
 801eea8:	3108      	adds	r1, #8
 801eeaa:	6121      	str	r1, [r4, #16]
 801eeac:	68a1      	ldr	r1, [r4, #8]
 801eeae:	3101      	adds	r1, #1
 801eeb0:	60a1      	str	r1, [r4, #8]
 801eeb2:	e77d      	b.n	801edb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x908>
 801eeb4:	f104 0814 	add.w	r8, r4, #20
 801eeb8:	6922      	ldr	r2, [r4, #16]
 801eeba:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801eebe:	9212      	str	r2, [sp, #72]	; 0x48
 801eec0:	6010      	str	r0, [r2, #0]
 801eec2:	6051      	str	r1, [r2, #4]
 801eec4:	6921      	ldr	r1, [r4, #16]
 801eec6:	3108      	adds	r1, #8
 801eec8:	6121      	str	r1, [r4, #16]
 801eeca:	68a1      	ldr	r1, [r4, #8]
 801eecc:	3101      	adds	r1, #1
 801eece:	60a1      	str	r1, [r4, #8]
 801eed0:	e7bd      	b.n	801ee4e <_ZN8touchgfx7Outline10renderLineEiiii+0x9a6>
 801eed2:	f104 0214 	add.w	r2, r4, #20
 801eed6:	6926      	ldr	r6, [r4, #16]
 801eed8:	ca03      	ldmia	r2!, {r0, r1}
 801eeda:	6030      	str	r0, [r6, #0]
 801eedc:	6071      	str	r1, [r6, #4]
 801eede:	6922      	ldr	r2, [r4, #16]
 801eee0:	3208      	adds	r2, #8
 801eee2:	6122      	str	r2, [r4, #16]
 801eee4:	68a2      	ldr	r2, [r4, #8]
 801eee6:	3201      	adds	r2, #1
 801eee8:	60a2      	str	r2, [r4, #8]
 801eeea:	e5ce      	b.n	801ea8a <_ZN8touchgfx7Outline10renderLineEiiii+0x5e2>
 801eeec:	f104 0314 	add.w	r3, r4, #20
 801eef0:	6926      	ldr	r6, [r4, #16]
 801eef2:	cb03      	ldmia	r3!, {r0, r1}
 801eef4:	6030      	str	r0, [r6, #0]
 801eef6:	6071      	str	r1, [r6, #4]
 801eef8:	6923      	ldr	r3, [r4, #16]
 801eefa:	3308      	adds	r3, #8
 801eefc:	6123      	str	r3, [r4, #16]
 801eefe:	68a3      	ldr	r3, [r4, #8]
 801ef00:	3301      	adds	r3, #1
 801ef02:	60a3      	str	r3, [r4, #8]
 801ef04:	e5f6      	b.n	801eaf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x64c>
 801ef06:	9b01      	ldr	r3, [sp, #4]
 801ef08:	8b20      	ldrh	r0, [r4, #24]
 801ef0a:	ea4f 1c63 	mov.w	ip, r3, asr #5
 801ef0e:	f003 021f 	and.w	r2, r3, #31
 801ef12:	9b04      	ldr	r3, [sp, #16]
 801ef14:	45dc      	cmp	ip, fp
 801ef16:	8b66      	ldrh	r6, [r4, #26]
 801ef18:	f003 031f 	and.w	r3, r3, #31
 801ef1c:	9305      	str	r3, [sp, #20]
 801ef1e:	9b03      	ldr	r3, [sp, #12]
 801ef20:	eba3 050e 	sub.w	r5, r3, lr
 801ef24:	d108      	bne.n	801ef38 <_ZN8touchgfx7Outline10renderLineEiiii+0xa90>
 801ef26:	9b05      	ldr	r3, [sp, #20]
 801ef28:	4428      	add	r0, r5
 801ef2a:	441a      	add	r2, r3
 801ef2c:	8320      	strh	r0, [r4, #24]
 801ef2e:	fb05 6502 	mla	r5, r5, r2, r6
 801ef32:	8365      	strh	r5, [r4, #26]
 801ef34:	f7ff bbed 	b.w	801e712 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801ef38:	9b04      	ldr	r3, [sp, #16]
 801ef3a:	9901      	ldr	r1, [sp, #4]
 801ef3c:	1a5b      	subs	r3, r3, r1
 801ef3e:	9300      	str	r3, [sp, #0]
 801ef40:	f100 809c 	bmi.w	801f07c <_ZN8touchgfx7Outline10renderLineEiiii+0xbd4>
 801ef44:	f1c2 0120 	rsb	r1, r2, #32
 801ef48:	434d      	muls	r5, r1
 801ef4a:	2101      	movs	r1, #1
 801ef4c:	9102      	str	r1, [sp, #8]
 801ef4e:	2120      	movs	r1, #32
 801ef50:	9b00      	ldr	r3, [sp, #0]
 801ef52:	9101      	str	r1, [sp, #4]
 801ef54:	9901      	ldr	r1, [sp, #4]
 801ef56:	fb95 f7f3 	sdiv	r7, r5, r3
 801ef5a:	fb03 5517 	mls	r5, r3, r7, r5
 801ef5e:	440a      	add	r2, r1
 801ef60:	2d00      	cmp	r5, #0
 801ef62:	bfbc      	itt	lt
 801ef64:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801ef68:	18ed      	addlt	r5, r5, r3
 801ef6a:	fb07 6202 	mla	r2, r7, r2, r6
 801ef6e:	f9b4 6016 	ldrsh.w	r6, [r4, #22]
 801ef72:	4438      	add	r0, r7
 801ef74:	b211      	sxth	r1, r2
 801ef76:	9a02      	ldr	r2, [sp, #8]
 801ef78:	b200      	sxth	r0, r0
 801ef7a:	4494      	add	ip, r2
 801ef7c:	fa0f f289 	sxth.w	r2, r9
 801ef80:	f9b4 9014 	ldrsh.w	r9, [r4, #20]
 801ef84:	0413      	lsls	r3, r2, #16
 801ef86:	8320      	strh	r0, [r4, #24]
 801ef88:	fa0f f88c 	sxth.w	r8, ip
 801ef8c:	8361      	strh	r1, [r4, #26]
 801ef8e:	eb09 4906 	add.w	r9, r9, r6, lsl #16
 801ef92:	9304      	str	r3, [sp, #16]
 801ef94:	eb08 0a03 	add.w	sl, r8, r3
 801ef98:	45d1      	cmp	r9, sl
 801ef9a:	f43f ab3d 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801ef9e:	ea50 0301 	orrs.w	r3, r0, r1
 801efa2:	d00b      	beq.n	801efbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801efa4:	2e00      	cmp	r6, #0
 801efa6:	db09      	blt.n	801efbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801efa8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801efaa:	428e      	cmp	r6, r1
 801efac:	da06      	bge.n	801efbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801efae:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801efb2:	4288      	cmp	r0, r1
 801efb4:	d36b      	bcc.n	801f08e <_ZN8touchgfx7Outline10renderLineEiiii+0xbe6>
 801efb6:	2101      	movs	r1, #1
 801efb8:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 801efbc:	2100      	movs	r1, #0
 801efbe:	45e3      	cmp	fp, ip
 801efc0:	f8a4 8014 	strh.w	r8, [r4, #20]
 801efc4:	44be      	add	lr, r7
 801efc6:	82e2      	strh	r2, [r4, #22]
 801efc8:	8321      	strh	r1, [r4, #24]
 801efca:	8361      	strh	r1, [r4, #26]
 801efcc:	d047      	beq.n	801f05e <_ZN8touchgfx7Outline10renderLineEiiii+0xbb6>
 801efce:	9b03      	ldr	r3, [sp, #12]
 801efd0:	f04f 0900 	mov.w	r9, #0
 801efd4:	eba3 060e 	sub.w	r6, r3, lr
 801efd8:	9b00      	ldr	r3, [sp, #0]
 801efda:	443e      	add	r6, r7
 801efdc:	0176      	lsls	r6, r6, #5
 801efde:	fb96 f7f3 	sdiv	r7, r6, r3
 801efe2:	fb03 6617 	mls	r6, r3, r7, r6
 801efe6:	428e      	cmp	r6, r1
 801efe8:	bfbc      	itt	lt
 801efea:	f107 37ff 	addlt.w	r7, r7, #4294967295
 801efee:	18f6      	addlt	r6, r6, r3
 801eff0:	9b00      	ldr	r3, [sp, #0]
 801eff2:	1aed      	subs	r5, r5, r3
 801eff4:	1c7b      	adds	r3, r7, #1
 801eff6:	9307      	str	r3, [sp, #28]
 801eff8:	19ad      	adds	r5, r5, r6
 801effa:	bf57      	itett	pl
 801effc:	9b00      	ldrpl	r3, [sp, #0]
 801effe:	4638      	movmi	r0, r7
 801f000:	9807      	ldrpl	r0, [sp, #28]
 801f002:	1aed      	subpl	r5, r5, r3
 801f004:	9b02      	ldr	r3, [sp, #8]
 801f006:	fa0f f880 	sxth.w	r8, r0
 801f00a:	4486      	add	lr, r0
 801f00c:	449c      	add	ip, r3
 801f00e:	0141      	lsls	r1, r0, #5
 801f010:	9b04      	ldr	r3, [sp, #16]
 801f012:	fa0f fa8c 	sxth.w	sl, ip
 801f016:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
 801f01a:	b209      	sxth	r1, r1
 801f01c:	f8a4 8018 	strh.w	r8, [r4, #24]
 801f020:	4418      	add	r0, r3
 801f022:	4453      	add	r3, sl
 801f024:	8361      	strh	r1, [r4, #26]
 801f026:	4298      	cmp	r0, r3
 801f028:	f43f aaf6 	beq.w	801e618 <_ZN8touchgfx7Outline10renderLineEiiii+0x170>
 801f02c:	ea58 0301 	orrs.w	r3, r8, r1
 801f030:	d00c      	beq.n	801f04c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f032:	2a00      	cmp	r2, #0
 801f034:	db0a      	blt.n	801f04c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f036:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f038:	428a      	cmp	r2, r1
 801f03a:	da07      	bge.n	801f04c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>
 801f03c:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 801f040:	4288      	cmp	r0, r1
 801f042:	d334      	bcc.n	801f0ae <_ZN8touchgfx7Outline10renderLineEiiii+0xc06>
 801f044:	f04f 0301 	mov.w	r3, #1
 801f048:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f04c:	45e3      	cmp	fp, ip
 801f04e:	f8a4 a014 	strh.w	sl, [r4, #20]
 801f052:	82e2      	strh	r2, [r4, #22]
 801f054:	f8a4 9018 	strh.w	r9, [r4, #24]
 801f058:	f8a4 901a 	strh.w	r9, [r4, #26]
 801f05c:	d1cc      	bne.n	801eff8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb50>
 801f05e:	9b03      	ldr	r3, [sp, #12]
 801f060:	9e05      	ldr	r6, [sp, #20]
 801f062:	eba3 0e0e 	sub.w	lr, r3, lr
 801f066:	9b01      	ldr	r3, [sp, #4]
 801f068:	3620      	adds	r6, #32
 801f06a:	f8a4 e018 	strh.w	lr, [r4, #24]
 801f06e:	1af6      	subs	r6, r6, r3
 801f070:	fb0e fe06 	mul.w	lr, lr, r6
 801f074:	f8a4 e01a 	strh.w	lr, [r4, #26]
 801f078:	f7ff bb4b 	b.w	801e712 <_ZN8touchgfx7Outline10renderLineEiiii+0x26a>
 801f07c:	9b00      	ldr	r3, [sp, #0]
 801f07e:	f04f 31ff 	mov.w	r1, #4294967295
 801f082:	4355      	muls	r5, r2
 801f084:	425b      	negs	r3, r3
 801f086:	9102      	str	r1, [sp, #8]
 801f088:	2100      	movs	r1, #0
 801f08a:	9300      	str	r3, [sp, #0]
 801f08c:	e760      	b.n	801ef50 <_ZN8touchgfx7Outline10renderLineEiiii+0xaa8>
 801f08e:	f104 0614 	add.w	r6, r4, #20
 801f092:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801f096:	ce03      	ldmia	r6!, {r0, r1}
 801f098:	f8c9 0000 	str.w	r0, [r9]
 801f09c:	f8c9 1004 	str.w	r1, [r9, #4]
 801f0a0:	6921      	ldr	r1, [r4, #16]
 801f0a2:	3108      	adds	r1, #8
 801f0a4:	6121      	str	r1, [r4, #16]
 801f0a6:	68a1      	ldr	r1, [r4, #8]
 801f0a8:	3101      	adds	r1, #1
 801f0aa:	60a1      	str	r1, [r4, #8]
 801f0ac:	e786      	b.n	801efbc <_ZN8touchgfx7Outline10renderLineEiiii+0xb14>
 801f0ae:	f104 0814 	add.w	r8, r4, #20
 801f0b2:	6923      	ldr	r3, [r4, #16]
 801f0b4:	e8b8 0003 	ldmia.w	r8!, {r0, r1}
 801f0b8:	9306      	str	r3, [sp, #24]
 801f0ba:	6018      	str	r0, [r3, #0]
 801f0bc:	6059      	str	r1, [r3, #4]
 801f0be:	6921      	ldr	r1, [r4, #16]
 801f0c0:	3108      	adds	r1, #8
 801f0c2:	6121      	str	r1, [r4, #16]
 801f0c4:	68a1      	ldr	r1, [r4, #8]
 801f0c6:	3101      	adds	r1, #1
 801f0c8:	60a1      	str	r1, [r4, #8]
 801f0ca:	e7bf      	b.n	801f04c <_ZN8touchgfx7Outline10renderLineEiiii+0xba4>

0801f0cc <_ZN8touchgfx7Outline6lineToEii>:
 801f0cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f0ce:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f0d0:	4604      	mov	r4, r0
 801f0d2:	460d      	mov	r5, r1
 801f0d4:	4616      	mov	r6, r2
 801f0d6:	079b      	lsls	r3, r3, #30
 801f0d8:	d526      	bpl.n	801f128 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f0da:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801f0de:	ea85 0001 	eor.w	r0, r5, r1
 801f0e2:	ea86 0302 	eor.w	r3, r6, r2
 801f0e6:	4303      	orrs	r3, r0
 801f0e8:	d01e      	beq.n	801f128 <_ZN8touchgfx7Outline6lineToEii+0x5c>
 801f0ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f0ec:	114b      	asrs	r3, r1, #5
 801f0ee:	9600      	str	r6, [sp, #0]
 801f0f0:	4283      	cmp	r3, r0
 801f0f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f0f4:	bfb8      	it	lt
 801f0f6:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f0f8:	3301      	adds	r3, #1
 801f0fa:	4283      	cmp	r3, r0
 801f0fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801f0fe:	bfc8      	it	gt
 801f100:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f102:	116b      	asrs	r3, r5, #5
 801f104:	4283      	cmp	r3, r0
 801f106:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801f108:	bfb8      	it	lt
 801f10a:	62e3      	strlt	r3, [r4, #44]	; 0x2c
 801f10c:	3301      	adds	r3, #1
 801f10e:	4283      	cmp	r3, r0
 801f110:	4620      	mov	r0, r4
 801f112:	bfc8      	it	gt
 801f114:	6363      	strgt	r3, [r4, #52]	; 0x34
 801f116:	462b      	mov	r3, r5
 801f118:	f7ff f9c6 	bl	801e4a8 <_ZN8touchgfx7Outline10renderLineEiiii>
 801f11c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f11e:	f043 0301 	orr.w	r3, r3, #1
 801f122:	e9c4 5607 	strd	r5, r6, [r4, #28]
 801f126:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f128:	b002      	add	sp, #8
 801f12a:	bd70      	pop	{r4, r5, r6, pc}

0801f12c <_ZN8touchgfx7Outline6moveToEii>:
 801f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f12e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f130:	4615      	mov	r5, r2
 801f132:	4604      	mov	r4, r0
 801f134:	460e      	mov	r6, r1
 801f136:	079a      	lsls	r2, r3, #30
 801f138:	d401      	bmi.n	801f13e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801f13a:	f7ff f96f 	bl	801e41c <_ZN8touchgfx7Outline5resetEv>
 801f13e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f140:	07db      	lsls	r3, r3, #31
 801f142:	d504      	bpl.n	801f14e <_ZN8touchgfx7Outline6moveToEii+0x22>
 801f144:	4620      	mov	r0, r4
 801f146:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
 801f14a:	f7ff ffbf 	bl	801f0cc <_ZN8touchgfx7Outline6lineToEii>
 801f14e:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801f152:	f346 1c4f 	sbfx	ip, r6, #5, #16
 801f156:	f345 174f 	sbfx	r7, r5, #5, #16
 801f15a:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 801f15e:	eb0c 4107 	add.w	r1, ip, r7, lsl #16
 801f162:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 801f166:	428a      	cmp	r2, r1
 801f168:	d015      	beq.n	801f196 <_ZN8touchgfx7Outline6moveToEii+0x6a>
 801f16a:	8b61      	ldrh	r1, [r4, #26]
 801f16c:	8b22      	ldrh	r2, [r4, #24]
 801f16e:	430a      	orrs	r2, r1
 801f170:	d00b      	beq.n	801f18a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f172:	2b00      	cmp	r3, #0
 801f174:	db09      	blt.n	801f18a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f176:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f178:	4293      	cmp	r3, r2
 801f17a:	da06      	bge.n	801f18a <_ZN8touchgfx7Outline6moveToEii+0x5e>
 801f17c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 801f180:	429a      	cmp	r2, r3
 801f182:	d30d      	bcc.n	801f1a0 <_ZN8touchgfx7Outline6moveToEii+0x74>
 801f184:	2301      	movs	r3, #1
 801f186:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f18a:	2300      	movs	r3, #0
 801f18c:	f8a4 c014 	strh.w	ip, [r4, #20]
 801f190:	82e7      	strh	r7, [r4, #22]
 801f192:	8323      	strh	r3, [r4, #24]
 801f194:	8363      	strh	r3, [r4, #26]
 801f196:	61e6      	str	r6, [r4, #28]
 801f198:	62a5      	str	r5, [r4, #40]	; 0x28
 801f19a:	e9c4 5608 	strd	r5, r6, [r4, #32]
 801f19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1a0:	f104 0314 	add.w	r3, r4, #20
 801f1a4:	6922      	ldr	r2, [r4, #16]
 801f1a6:	cb03      	ldmia	r3!, {r0, r1}
 801f1a8:	6010      	str	r0, [r2, #0]
 801f1aa:	6051      	str	r1, [r2, #4]
 801f1ac:	6923      	ldr	r3, [r4, #16]
 801f1ae:	3308      	adds	r3, #8
 801f1b0:	6123      	str	r3, [r4, #16]
 801f1b2:	68a3      	ldr	r3, [r4, #8]
 801f1b4:	3301      	adds	r3, #1
 801f1b6:	60a3      	str	r3, [r4, #8]
 801f1b8:	e7e7      	b.n	801f18a <_ZN8touchgfx7Outline6moveToEii+0x5e>

0801f1ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801f1ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1be:	b0d1      	sub	sp, #324	; 0x144
 801f1c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801f1c4:	466c      	mov	r4, sp
 801f1c6:	1a0d      	subs	r5, r1, r0
 801f1c8:	f100 0208 	add.w	r2, r0, #8
 801f1cc:	2d48      	cmp	r5, #72	; 0x48
 801f1ce:	f340 80ba 	ble.w	801f346 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801f1d2:	112d      	asrs	r5, r5, #4
 801f1d4:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
 801f1d8:	f9b0 7006 	ldrsh.w	r7, [r0, #6]
 801f1dc:	eb00 03c5 	add.w	r3, r0, r5, lsl #3
 801f1e0:	f9b0 8000 	ldrsh.w	r8, [r0]
 801f1e4:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
 801f1e8:	681e      	ldr	r6, [r3, #0]
 801f1ea:	6006      	str	r6, [r0, #0]
 801f1ec:	685e      	ldr	r6, [r3, #4]
 801f1ee:	6046      	str	r6, [r0, #4]
 801f1f0:	f820 8035 	strh.w	r8, [r0, r5, lsl #3]
 801f1f4:	f8a3 e002 	strh.w	lr, [r3, #2]
 801f1f8:	f8a3 c004 	strh.w	ip, [r3, #4]
 801f1fc:	80df      	strh	r7, [r3, #6]
 801f1fe:	f1a1 0308 	sub.w	r3, r1, #8
 801f202:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801f206:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801f20a:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801f20e:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801f212:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801f216:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f21a:	4565      	cmp	r5, ip
 801f21c:	da0f      	bge.n	801f23e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x84>
 801f21e:	681d      	ldr	r5, [r3, #0]
 801f220:	f9b0 e00c 	ldrsh.w	lr, [r0, #12]
 801f224:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 801f228:	6015      	str	r5, [r2, #0]
 801f22a:	685d      	ldr	r5, [r3, #4]
 801f22c:	6055      	str	r5, [r2, #4]
 801f22e:	f821 7c08 	strh.w	r7, [r1, #-8]
 801f232:	f821 6c06 	strh.w	r6, [r1, #-6]
 801f236:	f821 ec04 	strh.w	lr, [r1, #-4]
 801f23a:	f821 cc02 	strh.w	ip, [r1, #-2]
 801f23e:	f9b0 7000 	ldrsh.w	r7, [r0]
 801f242:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801f246:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 801f24a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f24e:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f252:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801f256:	45ac      	cmp	ip, r5
 801f258:	da0d      	bge.n	801f276 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xbc>
 801f25a:	6815      	ldr	r5, [r2, #0]
 801f25c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801f260:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801f264:	6005      	str	r5, [r0, #0]
 801f266:	6855      	ldr	r5, [r2, #4]
 801f268:	8107      	strh	r7, [r0, #8]
 801f26a:	6045      	str	r5, [r0, #4]
 801f26c:	8146      	strh	r6, [r0, #10]
 801f26e:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801f272:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801f276:	f931 cc06 	ldrsh.w	ip, [r1, #-6]
 801f27a:	f9b0 7000 	ldrsh.w	r7, [r0]
 801f27e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801f282:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801f286:	eb05 450c 	add.w	r5, r5, ip, lsl #16
 801f28a:	eb07 4c06 	add.w	ip, r7, r6, lsl #16
 801f28e:	4565      	cmp	r5, ip
 801f290:	da0f      	bge.n	801f2b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801f292:	681d      	ldr	r5, [r3, #0]
 801f294:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801f298:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801f29c:	6005      	str	r5, [r0, #0]
 801f29e:	685d      	ldr	r5, [r3, #4]
 801f2a0:	6045      	str	r5, [r0, #4]
 801f2a2:	f821 7c08 	strh.w	r7, [r1, #-8]
 801f2a6:	f821 6c06 	strh.w	r6, [r1, #-6]
 801f2aa:	f821 ec04 	strh.w	lr, [r1, #-4]
 801f2ae:	f821 cc02 	strh.w	ip, [r1, #-2]
 801f2b2:	f9b2 9008 	ldrsh.w	r9, [r2, #8]
 801f2b6:	f102 0508 	add.w	r5, r2, #8
 801f2ba:	f9b2 800a 	ldrsh.w	r8, [r2, #10]
 801f2be:	f9b0 e000 	ldrsh.w	lr, [r0]
 801f2c2:	462f      	mov	r7, r5
 801f2c4:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801f2c8:	eb09 4608 	add.w	r6, r9, r8, lsl #16
 801f2cc:	eb0e 4a0c 	add.w	sl, lr, ip, lsl #16
 801f2d0:	4556      	cmp	r6, sl
 801f2d2:	db18      	blt.n	801f306 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x14c>
 801f2d4:	3b08      	subs	r3, #8
 801f2d6:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 801f2da:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f2de:	eb06 460b 	add.w	r6, r6, fp, lsl #16
 801f2e2:	45b2      	cmp	sl, r6
 801f2e4:	dbf6      	blt.n	801f2d4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x11a>
 801f2e6:	42ab      	cmp	r3, r5
 801f2e8:	681e      	ldr	r6, [r3, #0]
 801f2ea:	d30e      	bcc.n	801f30a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x150>
 801f2ec:	f9b2 700c 	ldrsh.w	r7, [r2, #12]
 801f2f0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 801f2f4:	602e      	str	r6, [r5, #0]
 801f2f6:	685e      	ldr	r6, [r3, #4]
 801f2f8:	606e      	str	r6, [r5, #4]
 801f2fa:	f8a3 9000 	strh.w	r9, [r3]
 801f2fe:	f8a3 8002 	strh.w	r8, [r3, #2]
 801f302:	809f      	strh	r7, [r3, #4]
 801f304:	80da      	strh	r2, [r3, #6]
 801f306:	462a      	mov	r2, r5
 801f308:	e7d3      	b.n	801f2b2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xf8>
 801f30a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801f30e:	6006      	str	r6, [r0, #0]
 801f310:	685e      	ldr	r6, [r3, #4]
 801f312:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801f316:	6046      	str	r6, [r0, #4]
 801f318:	1a1e      	subs	r6, r3, r0
 801f31a:	80da      	strh	r2, [r3, #6]
 801f31c:	1b4a      	subs	r2, r1, r5
 801f31e:	f8a3 e000 	strh.w	lr, [r3]
 801f322:	10d2      	asrs	r2, r2, #3
 801f324:	f8a3 c002 	strh.w	ip, [r3, #2]
 801f328:	f8a3 8004 	strh.w	r8, [r3, #4]
 801f32c:	ebb2 0fe6 	cmp.w	r2, r6, asr #3
 801f330:	bfb5      	itete	lt
 801f332:	e9c4 0300 	strdlt	r0, r3, [r4]
 801f336:	4607      	movge	r7, r0
 801f338:	460b      	movlt	r3, r1
 801f33a:	e9c4 5100 	strdge	r5, r1, [r4]
 801f33e:	4638      	mov	r0, r7
 801f340:	3408      	adds	r4, #8
 801f342:	4619      	mov	r1, r3
 801f344:	e73f      	b.n	801f1c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801f346:	4291      	cmp	r1, r2
 801f348:	d925      	bls.n	801f396 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1dc>
 801f34a:	f1a2 0310 	sub.w	r3, r2, #16
 801f34e:	f9b3 c010 	ldrsh.w	ip, [r3, #16]
 801f352:	f9b3 7012 	ldrsh.w	r7, [r3, #18]
 801f356:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 801f35a:	f9b3 5008 	ldrsh.w	r5, [r3, #8]
 801f35e:	eb0c 4607 	add.w	r6, ip, r7, lsl #16
 801f362:	eb05 450e 	add.w	r5, r5, lr, lsl #16
 801f366:	42ae      	cmp	r6, r5
 801f368:	da13      	bge.n	801f392 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1d8>
 801f36a:	461d      	mov	r5, r3
 801f36c:	f9b3 8014 	ldrsh.w	r8, [r3, #20]
 801f370:	f9b3 e016 	ldrsh.w	lr, [r3, #22]
 801f374:	3b08      	subs	r3, #8
 801f376:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801f37a:	619e      	str	r6, [r3, #24]
 801f37c:	42a8      	cmp	r0, r5
 801f37e:	686e      	ldr	r6, [r5, #4]
 801f380:	f8a3 c010 	strh.w	ip, [r3, #16]
 801f384:	61de      	str	r6, [r3, #28]
 801f386:	825f      	strh	r7, [r3, #18]
 801f388:	f8a3 8014 	strh.w	r8, [r3, #20]
 801f38c:	f8a3 e016 	strh.w	lr, [r3, #22]
 801f390:	d1dd      	bne.n	801f34e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x194>
 801f392:	3208      	adds	r2, #8
 801f394:	e7d7      	b.n	801f346 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x18c>
 801f396:	466b      	mov	r3, sp
 801f398:	429c      	cmp	r4, r3
 801f39a:	d903      	bls.n	801f3a4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1ea>
 801f39c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801f3a0:	3c08      	subs	r4, #8
 801f3a2:	e710      	b.n	801f1c6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xc>
 801f3a4:	b051      	add	sp, #324	; 0x144
 801f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3aa <_ZN8touchgfx7Outline9sortCellsEv>:
 801f3aa:	6881      	ldr	r1, [r0, #8]
 801f3ac:	b111      	cbz	r1, 801f3b4 <_ZN8touchgfx7Outline9sortCellsEv+0xa>
 801f3ae:	68c0      	ldr	r0, [r0, #12]
 801f3b0:	f7ff bf03 	b.w	801f1ba <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801f3b4:	4770      	bx	lr

0801f3b6 <_ZN8touchgfx7Outline8getCellsEv>:
 801f3b6:	b510      	push	{r4, lr}
 801f3b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801f3ba:	4604      	mov	r4, r0
 801f3bc:	07da      	lsls	r2, r3, #31
 801f3be:	d507      	bpl.n	801f3d0 <_ZN8touchgfx7Outline8getCellsEv+0x1a>
 801f3c0:	e9d0 1209 	ldrd	r1, r2, [r0, #36]	; 0x24
 801f3c4:	f7ff fe82 	bl	801f0cc <_ZN8touchgfx7Outline6lineToEii>
 801f3c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f3ca:	f023 0301 	bic.w	r3, r3, #1
 801f3ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f3d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f3d2:	079b      	lsls	r3, r3, #30
 801f3d4:	d51a      	bpl.n	801f40c <_ZN8touchgfx7Outline8getCellsEv+0x56>
 801f3d6:	8b62      	ldrh	r2, [r4, #26]
 801f3d8:	8b23      	ldrh	r3, [r4, #24]
 801f3da:	4313      	orrs	r3, r2
 801f3dc:	d00d      	beq.n	801f3fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f3de:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	db09      	blt.n	801f3fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f3e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801f3e8:	4293      	cmp	r3, r2
 801f3ea:	da06      	bge.n	801f3fa <_ZN8touchgfx7Outline8getCellsEv+0x44>
 801f3ec:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 801f3f0:	429a      	cmp	r2, r3
 801f3f2:	d80d      	bhi.n	801f410 <_ZN8touchgfx7Outline8getCellsEv+0x5a>
 801f3f4:	2301      	movs	r3, #1
 801f3f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801f3fa:	68a0      	ldr	r0, [r4, #8]
 801f3fc:	b138      	cbz	r0, 801f40e <_ZN8touchgfx7Outline8getCellsEv+0x58>
 801f3fe:	4620      	mov	r0, r4
 801f400:	f7ff ffd3 	bl	801f3aa <_ZN8touchgfx7Outline9sortCellsEv>
 801f404:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801f406:	f023 0302 	bic.w	r3, r3, #2
 801f40a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801f40c:	68e0      	ldr	r0, [r4, #12]
 801f40e:	bd10      	pop	{r4, pc}
 801f410:	f104 0314 	add.w	r3, r4, #20
 801f414:	6922      	ldr	r2, [r4, #16]
 801f416:	cb03      	ldmia	r3!, {r0, r1}
 801f418:	6010      	str	r0, [r2, #0]
 801f41a:	6051      	str	r1, [r2, #4]
 801f41c:	6923      	ldr	r3, [r4, #16]
 801f41e:	3308      	adds	r3, #8
 801f420:	6123      	str	r3, [r4, #16]
 801f422:	68a3      	ldr	r3, [r4, #8]
 801f424:	3301      	adds	r3, #1
 801f426:	60a3      	str	r3, [r4, #8]
 801f428:	e7e7      	b.n	801f3fa <_ZN8touchgfx7Outline8getCellsEv+0x44>

0801f42a <_ZN8touchgfx8ScanlineD1Ev>:
 801f42a:	4770      	bx	lr

0801f42c <_ZN8touchgfx8ScanlineD0Ev>:
 801f42c:	b510      	push	{r4, lr}
 801f42e:	4604      	mov	r4, r0
 801f430:	2124      	movs	r1, #36	; 0x24
 801f432:	f000 f888 	bl	801f546 <_ZdlPvj>
 801f436:	4620      	mov	r0, r4
 801f438:	bd10      	pop	{r4, pc}

0801f43a <_ZN8touchgfx8Scanline5resetEv>:
 801f43a:	b510      	push	{r4, lr}
 801f43c:	4604      	mov	r4, r0
 801f43e:	f7f1 facb 	bl	80109d8 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCoversEv>
 801f442:	61a0      	str	r0, [r4, #24]
 801f444:	f7f1 face 	bl	80109e4 <_ZN8touchgfx20CanvasWidgetRenderer23getScanlineStartIndicesEv>
 801f448:	61e0      	str	r0, [r4, #28]
 801f44a:	f7f1 fad1 	bl	80109f0 <_ZN8touchgfx20CanvasWidgetRenderer17getScanlineCountsEv>
 801f44e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f452:	6220      	str	r0, [r4, #32]
 801f454:	6160      	str	r0, [r4, #20]
 801f456:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801f45a:	69e3      	ldr	r3, [r4, #28]
 801f45c:	6123      	str	r3, [r4, #16]
 801f45e:	2300      	movs	r3, #0
 801f460:	60e3      	str	r3, [r4, #12]
 801f462:	bd10      	pop	{r4, pc}

0801f464 <_ZN8touchgfx8ScanlineC1Ev>:
 801f464:	4b09      	ldr	r3, [pc, #36]	; (801f48c <_ZN8touchgfx8ScanlineC1Ev+0x28>)
 801f466:	b510      	push	{r4, lr}
 801f468:	6003      	str	r3, [r0, #0]
 801f46a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801f46e:	4604      	mov	r4, r0
 801f470:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801f474:	2300      	movs	r3, #0
 801f476:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f47a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801f47e:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801f482:	f7ff ffda 	bl	801f43a <_ZN8touchgfx8Scanline5resetEv>
 801f486:	4620      	mov	r0, r4
 801f488:	bd10      	pop	{r4, pc}
 801f48a:	bf00      	nop
 801f48c:	08026a80 	.word	0x08026a80

0801f490 <_ZN8touchgfx8Scanline7addSpanEiijj>:
 801f490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f494:	1e0c      	subs	r4, r1, #0
 801f496:	4605      	mov	r5, r0
 801f498:	4617      	mov	r7, r2
 801f49a:	461e      	mov	r6, r3
 801f49c:	da03      	bge.n	801f4a6 <_ZN8touchgfx8Scanline7addSpanEiijj+0x16>
 801f49e:	4426      	add	r6, r4
 801f4a0:	2e01      	cmp	r6, #1
 801f4a2:	d421      	bmi.n	801f4e8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801f4a4:	2400      	movs	r4, #0
 801f4a6:	f7f1 fa91 	bl	80109cc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f4aa:	42a0      	cmp	r0, r4
 801f4ac:	dd1c      	ble.n	801f4e8 <_ZN8touchgfx8Scanline7addSpanEiijj+0x58>
 801f4ae:	eb04 0806 	add.w	r8, r4, r6
 801f4b2:	f7f1 fa8b 	bl	80109cc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f4b6:	4580      	cmp	r8, r0
 801f4b8:	d902      	bls.n	801f4c0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x30>
 801f4ba:	f7f1 fa87 	bl	80109cc <_ZN8touchgfx20CanvasWidgetRenderer16getScanlineWidthEv>
 801f4be:	1b06      	subs	r6, r0, r4
 801f4c0:	69a8      	ldr	r0, [r5, #24]
 801f4c2:	4632      	mov	r2, r6
 801f4c4:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801f4c8:	4420      	add	r0, r4
 801f4ca:	f7f4 f803 	bl	80134d4 <_ZN8touchgfx6memsetEPvhm>
 801f4ce:	686b      	ldr	r3, [r5, #4]
 801f4d0:	b2b2      	uxth	r2, r6
 801f4d2:	3301      	adds	r3, #1
 801f4d4:	42a3      	cmp	r3, r4
 801f4d6:	696b      	ldr	r3, [r5, #20]
 801f4d8:	d108      	bne.n	801f4ec <_ZN8touchgfx8Scanline7addSpanEiijj+0x5c>
 801f4da:	8819      	ldrh	r1, [r3, #0]
 801f4dc:	440a      	add	r2, r1
 801f4de:	801a      	strh	r2, [r3, #0]
 801f4e0:	3c01      	subs	r4, #1
 801f4e2:	4434      	add	r4, r6
 801f4e4:	e9c5 4701 	strd	r4, r7, [r5, #4]
 801f4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4ec:	1c99      	adds	r1, r3, #2
 801f4ee:	6169      	str	r1, [r5, #20]
 801f4f0:	805a      	strh	r2, [r3, #2]
 801f4f2:	692b      	ldr	r3, [r5, #16]
 801f4f4:	1c9a      	adds	r2, r3, #2
 801f4f6:	612a      	str	r2, [r5, #16]
 801f4f8:	805c      	strh	r4, [r3, #2]
 801f4fa:	68eb      	ldr	r3, [r5, #12]
 801f4fc:	3301      	adds	r3, #1
 801f4fe:	60eb      	str	r3, [r5, #12]
 801f500:	e7ee      	b.n	801f4e0 <_ZN8touchgfx8Scanline7addSpanEiijj+0x50>

0801f502 <_ZN8touchgfx15RenderingBufferD1Ev>:
 801f502:	4770      	bx	lr

0801f504 <_ZN8touchgfx15RenderingBufferD0Ev>:
 801f504:	b510      	push	{r4, lr}
 801f506:	4604      	mov	r4, r0
 801f508:	2118      	movs	r1, #24
 801f50a:	f000 f81c 	bl	801f546 <_ZdlPvj>
 801f50e:	4620      	mov	r0, r4
 801f510:	bd10      	pop	{r4, pc}
	...

0801f514 <_ZN8touchgfx15RenderingBufferC1Ev>:
 801f514:	4a04      	ldr	r2, [pc, #16]	; (801f528 <_ZN8touchgfx15RenderingBufferC1Ev+0x14>)
 801f516:	6002      	str	r2, [r0, #0]
 801f518:	2200      	movs	r2, #0
 801f51a:	6042      	str	r2, [r0, #4]
 801f51c:	7202      	strb	r2, [r0, #8]
 801f51e:	6142      	str	r2, [r0, #20]
 801f520:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801f524:	4770      	bx	lr
 801f526:	bf00      	nop
 801f528:	08026a90 	.word	0x08026a90

0801f52c <_ZN8touchgfx15RenderingBuffer6attachEPhhjji>:
 801f52c:	60c3      	str	r3, [r0, #12]
 801f52e:	9b00      	ldr	r3, [sp, #0]
 801f530:	6041      	str	r1, [r0, #4]
 801f532:	6103      	str	r3, [r0, #16]
 801f534:	9b01      	ldr	r3, [sp, #4]
 801f536:	7202      	strb	r2, [r0, #8]
 801f538:	6143      	str	r3, [r0, #20]
 801f53a:	4770      	bx	lr

0801f53c <__aeabi_atexit>:
 801f53c:	460b      	mov	r3, r1
 801f53e:	4601      	mov	r1, r0
 801f540:	4618      	mov	r0, r3
 801f542:	f000 be4b 	b.w	80201dc <__cxa_atexit>

0801f546 <_ZdlPvj>:
 801f546:	f000 b812 	b.w	801f56e <_ZdlPv>

0801f54a <__cxa_guard_acquire>:
 801f54a:	6803      	ldr	r3, [r0, #0]
 801f54c:	07db      	lsls	r3, r3, #31
 801f54e:	d406      	bmi.n	801f55e <__cxa_guard_acquire+0x14>
 801f550:	7843      	ldrb	r3, [r0, #1]
 801f552:	b103      	cbz	r3, 801f556 <__cxa_guard_acquire+0xc>
 801f554:	deff      	udf	#255	; 0xff
 801f556:	2301      	movs	r3, #1
 801f558:	7043      	strb	r3, [r0, #1]
 801f55a:	4618      	mov	r0, r3
 801f55c:	4770      	bx	lr
 801f55e:	2000      	movs	r0, #0
 801f560:	4770      	bx	lr

0801f562 <__cxa_guard_release>:
 801f562:	2301      	movs	r3, #1
 801f564:	6003      	str	r3, [r0, #0]
 801f566:	4770      	bx	lr

0801f568 <__cxa_pure_virtual>:
 801f568:	b508      	push	{r3, lr}
 801f56a:	f000 f80f 	bl	801f58c <_ZSt9terminatev>

0801f56e <_ZdlPv>:
 801f56e:	f000 bf7b 	b.w	8020468 <free>

0801f572 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801f572:	b508      	push	{r3, lr}
 801f574:	4780      	blx	r0
 801f576:	f000 fe05 	bl	8020184 <abort>
	...

0801f57c <_ZSt13get_terminatev>:
 801f57c:	4b02      	ldr	r3, [pc, #8]	; (801f588 <_ZSt13get_terminatev+0xc>)
 801f57e:	6818      	ldr	r0, [r3, #0]
 801f580:	f3bf 8f5b 	dmb	ish
 801f584:	4770      	bx	lr
 801f586:	bf00      	nop
 801f588:	240000b4 	.word	0x240000b4

0801f58c <_ZSt9terminatev>:
 801f58c:	b508      	push	{r3, lr}
 801f58e:	f7ff fff5 	bl	801f57c <_ZSt13get_terminatev>
 801f592:	f7ff ffee 	bl	801f572 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0801f598 <cos>:
 801f598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f59a:	eeb0 7b40 	vmov.f64	d7, d0
 801f59e:	ee17 3a90 	vmov	r3, s15
 801f5a2:	4a21      	ldr	r2, [pc, #132]	; (801f628 <cos+0x90>)
 801f5a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f5a8:	4293      	cmp	r3, r2
 801f5aa:	dc06      	bgt.n	801f5ba <cos+0x22>
 801f5ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 801f620 <cos+0x88>
 801f5b0:	b005      	add	sp, #20
 801f5b2:	f85d eb04 	ldr.w	lr, [sp], #4
 801f5b6:	f000 b97f 	b.w	801f8b8 <__kernel_cos>
 801f5ba:	4a1c      	ldr	r2, [pc, #112]	; (801f62c <cos+0x94>)
 801f5bc:	4293      	cmp	r3, r2
 801f5be:	dd04      	ble.n	801f5ca <cos+0x32>
 801f5c0:	ee30 0b40 	vsub.f64	d0, d0, d0
 801f5c4:	b005      	add	sp, #20
 801f5c6:	f85d fb04 	ldr.w	pc, [sp], #4
 801f5ca:	4668      	mov	r0, sp
 801f5cc:	f000 f830 	bl	801f630 <__ieee754_rem_pio2>
 801f5d0:	f000 0003 	and.w	r0, r0, #3
 801f5d4:	2801      	cmp	r0, #1
 801f5d6:	d009      	beq.n	801f5ec <cos+0x54>
 801f5d8:	2802      	cmp	r0, #2
 801f5da:	d010      	beq.n	801f5fe <cos+0x66>
 801f5dc:	b9b0      	cbnz	r0, 801f60c <cos+0x74>
 801f5de:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f5e2:	ed9d 0b00 	vldr	d0, [sp]
 801f5e6:	f000 f967 	bl	801f8b8 <__kernel_cos>
 801f5ea:	e7eb      	b.n	801f5c4 <cos+0x2c>
 801f5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f5f0:	ed9d 0b00 	vldr	d0, [sp]
 801f5f4:	f000 fc64 	bl	801fec0 <__kernel_sin>
 801f5f8:	eeb1 0b40 	vneg.f64	d0, d0
 801f5fc:	e7e2      	b.n	801f5c4 <cos+0x2c>
 801f5fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f602:	ed9d 0b00 	vldr	d0, [sp]
 801f606:	f000 f957 	bl	801f8b8 <__kernel_cos>
 801f60a:	e7f5      	b.n	801f5f8 <cos+0x60>
 801f60c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801f610:	ed9d 0b00 	vldr	d0, [sp]
 801f614:	2001      	movs	r0, #1
 801f616:	f000 fc53 	bl	801fec0 <__kernel_sin>
 801f61a:	e7d3      	b.n	801f5c4 <cos+0x2c>
 801f61c:	f3af 8000 	nop.w
	...
 801f628:	3fe921fb 	.word	0x3fe921fb
 801f62c:	7fefffff 	.word	0x7fefffff

0801f630 <__ieee754_rem_pio2>:
 801f630:	b570      	push	{r4, r5, r6, lr}
 801f632:	eeb0 7b40 	vmov.f64	d7, d0
 801f636:	ee17 5a90 	vmov	r5, s15
 801f63a:	4b99      	ldr	r3, [pc, #612]	; (801f8a0 <__ieee754_rem_pio2+0x270>)
 801f63c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f640:	429e      	cmp	r6, r3
 801f642:	b088      	sub	sp, #32
 801f644:	4604      	mov	r4, r0
 801f646:	dc07      	bgt.n	801f658 <__ieee754_rem_pio2+0x28>
 801f648:	2200      	movs	r2, #0
 801f64a:	2300      	movs	r3, #0
 801f64c:	ed84 0b00 	vstr	d0, [r4]
 801f650:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801f654:	2000      	movs	r0, #0
 801f656:	e01b      	b.n	801f690 <__ieee754_rem_pio2+0x60>
 801f658:	4b92      	ldr	r3, [pc, #584]	; (801f8a4 <__ieee754_rem_pio2+0x274>)
 801f65a:	429e      	cmp	r6, r3
 801f65c:	dc3b      	bgt.n	801f6d6 <__ieee754_rem_pio2+0xa6>
 801f65e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801f662:	2d00      	cmp	r5, #0
 801f664:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801f860 <__ieee754_rem_pio2+0x230>
 801f668:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801f66c:	dd19      	ble.n	801f6a2 <__ieee754_rem_pio2+0x72>
 801f66e:	ee30 7b46 	vsub.f64	d7, d0, d6
 801f672:	429e      	cmp	r6, r3
 801f674:	d00e      	beq.n	801f694 <__ieee754_rem_pio2+0x64>
 801f676:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801f868 <__ieee754_rem_pio2+0x238>
 801f67a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801f67e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801f682:	ed84 5b00 	vstr	d5, [r4]
 801f686:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f68a:	ed84 7b02 	vstr	d7, [r4, #8]
 801f68e:	2001      	movs	r0, #1
 801f690:	b008      	add	sp, #32
 801f692:	bd70      	pop	{r4, r5, r6, pc}
 801f694:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801f870 <__ieee754_rem_pio2+0x240>
 801f698:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f69c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801f878 <__ieee754_rem_pio2+0x248>
 801f6a0:	e7eb      	b.n	801f67a <__ieee754_rem_pio2+0x4a>
 801f6a2:	429e      	cmp	r6, r3
 801f6a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 801f6a8:	d00e      	beq.n	801f6c8 <__ieee754_rem_pio2+0x98>
 801f6aa:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801f868 <__ieee754_rem_pio2+0x238>
 801f6ae:	ee37 5b06 	vadd.f64	d5, d7, d6
 801f6b2:	ee37 7b45 	vsub.f64	d7, d7, d5
 801f6b6:	ed84 5b00 	vstr	d5, [r4]
 801f6ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f6be:	f04f 30ff 	mov.w	r0, #4294967295
 801f6c2:	ed84 7b02 	vstr	d7, [r4, #8]
 801f6c6:	e7e3      	b.n	801f690 <__ieee754_rem_pio2+0x60>
 801f6c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801f870 <__ieee754_rem_pio2+0x240>
 801f6cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f6d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801f878 <__ieee754_rem_pio2+0x248>
 801f6d4:	e7eb      	b.n	801f6ae <__ieee754_rem_pio2+0x7e>
 801f6d6:	4b74      	ldr	r3, [pc, #464]	; (801f8a8 <__ieee754_rem_pio2+0x278>)
 801f6d8:	429e      	cmp	r6, r3
 801f6da:	dc70      	bgt.n	801f7be <__ieee754_rem_pio2+0x18e>
 801f6dc:	f000 fc48 	bl	801ff70 <fabs>
 801f6e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801f6e4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801f880 <__ieee754_rem_pio2+0x250>
 801f6e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801f6ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801f6f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801f6f4:	ee17 0a90 	vmov	r0, s15
 801f6f8:	eeb1 4b45 	vneg.f64	d4, d5
 801f6fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801f860 <__ieee754_rem_pio2+0x230>
 801f700:	eea5 0b47 	vfms.f64	d0, d5, d7
 801f704:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801f868 <__ieee754_rem_pio2+0x238>
 801f708:	281f      	cmp	r0, #31
 801f70a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801f70e:	ee30 6b47 	vsub.f64	d6, d0, d7
 801f712:	dc08      	bgt.n	801f726 <__ieee754_rem_pio2+0xf6>
 801f714:	4b65      	ldr	r3, [pc, #404]	; (801f8ac <__ieee754_rem_pio2+0x27c>)
 801f716:	1e42      	subs	r2, r0, #1
 801f718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f71c:	42b3      	cmp	r3, r6
 801f71e:	d002      	beq.n	801f726 <__ieee754_rem_pio2+0xf6>
 801f720:	ed84 6b00 	vstr	d6, [r4]
 801f724:	e026      	b.n	801f774 <__ieee754_rem_pio2+0x144>
 801f726:	ee16 3a90 	vmov	r3, s13
 801f72a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801f72e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801f732:	2b10      	cmp	r3, #16
 801f734:	ea4f 5226 	mov.w	r2, r6, asr #20
 801f738:	ddf2      	ble.n	801f720 <__ieee754_rem_pio2+0xf0>
 801f73a:	eeb0 6b40 	vmov.f64	d6, d0
 801f73e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801f870 <__ieee754_rem_pio2+0x240>
 801f742:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801f878 <__ieee754_rem_pio2+0x248>
 801f746:	eea4 6b07 	vfma.f64	d6, d4, d7
 801f74a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801f74e:	eea4 0b07 	vfma.f64	d0, d4, d7
 801f752:	eeb0 7b40 	vmov.f64	d7, d0
 801f756:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801f75a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801f75e:	ee13 3a90 	vmov	r3, s7
 801f762:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801f766:	1ad3      	subs	r3, r2, r3
 801f768:	2b31      	cmp	r3, #49	; 0x31
 801f76a:	dc17      	bgt.n	801f79c <__ieee754_rem_pio2+0x16c>
 801f76c:	eeb0 0b46 	vmov.f64	d0, d6
 801f770:	ed84 3b00 	vstr	d3, [r4]
 801f774:	ed94 6b00 	vldr	d6, [r4]
 801f778:	2d00      	cmp	r5, #0
 801f77a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801f77e:	ee30 0b47 	vsub.f64	d0, d0, d7
 801f782:	ed84 0b02 	vstr	d0, [r4, #8]
 801f786:	da83      	bge.n	801f690 <__ieee754_rem_pio2+0x60>
 801f788:	eeb1 6b46 	vneg.f64	d6, d6
 801f78c:	eeb1 0b40 	vneg.f64	d0, d0
 801f790:	ed84 6b00 	vstr	d6, [r4]
 801f794:	ed84 0b02 	vstr	d0, [r4, #8]
 801f798:	4240      	negs	r0, r0
 801f79a:	e779      	b.n	801f690 <__ieee754_rem_pio2+0x60>
 801f79c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801f888 <__ieee754_rem_pio2+0x258>
 801f7a0:	eeb0 0b46 	vmov.f64	d0, d6
 801f7a4:	eea4 0b03 	vfma.f64	d0, d4, d3
 801f7a8:	ee36 7b40 	vsub.f64	d7, d6, d0
 801f7ac:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801f890 <__ieee754_rem_pio2+0x260>
 801f7b0:	eea4 7b03 	vfma.f64	d7, d4, d3
 801f7b4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801f7b8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801f7bc:	e7b0      	b.n	801f720 <__ieee754_rem_pio2+0xf0>
 801f7be:	4b3c      	ldr	r3, [pc, #240]	; (801f8b0 <__ieee754_rem_pio2+0x280>)
 801f7c0:	429e      	cmp	r6, r3
 801f7c2:	dd06      	ble.n	801f7d2 <__ieee754_rem_pio2+0x1a2>
 801f7c4:	ee30 7b40 	vsub.f64	d7, d0, d0
 801f7c8:	ed80 7b02 	vstr	d7, [r0, #8]
 801f7cc:	ed80 7b00 	vstr	d7, [r0]
 801f7d0:	e740      	b.n	801f654 <__ieee754_rem_pio2+0x24>
 801f7d2:	1532      	asrs	r2, r6, #20
 801f7d4:	ee10 0a10 	vmov	r0, s0
 801f7d8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801f7dc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801f7e0:	ec41 0b17 	vmov	d7, r0, r1
 801f7e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801f7e8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801f898 <__ieee754_rem_pio2+0x268>
 801f7ec:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801f7f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f7f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801f7f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801f7fc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801f800:	a902      	add	r1, sp, #8
 801f802:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801f806:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f80a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801f80e:	ee27 7b05 	vmul.f64	d7, d7, d5
 801f812:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f816:	2603      	movs	r6, #3
 801f818:	4608      	mov	r0, r1
 801f81a:	ed91 7b04 	vldr	d7, [r1, #16]
 801f81e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801f822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f826:	4633      	mov	r3, r6
 801f828:	f1a1 0108 	sub.w	r1, r1, #8
 801f82c:	f106 36ff 	add.w	r6, r6, #4294967295
 801f830:	d0f3      	beq.n	801f81a <__ieee754_rem_pio2+0x1ea>
 801f832:	4920      	ldr	r1, [pc, #128]	; (801f8b4 <__ieee754_rem_pio2+0x284>)
 801f834:	9101      	str	r1, [sp, #4]
 801f836:	2102      	movs	r1, #2
 801f838:	9100      	str	r1, [sp, #0]
 801f83a:	4621      	mov	r1, r4
 801f83c:	f000 f8a8 	bl	801f990 <__kernel_rem_pio2>
 801f840:	2d00      	cmp	r5, #0
 801f842:	f6bf af25 	bge.w	801f690 <__ieee754_rem_pio2+0x60>
 801f846:	ed94 7b00 	vldr	d7, [r4]
 801f84a:	eeb1 7b47 	vneg.f64	d7, d7
 801f84e:	ed84 7b00 	vstr	d7, [r4]
 801f852:	ed94 7b02 	vldr	d7, [r4, #8]
 801f856:	eeb1 7b47 	vneg.f64	d7, d7
 801f85a:	ed84 7b02 	vstr	d7, [r4, #8]
 801f85e:	e79b      	b.n	801f798 <__ieee754_rem_pio2+0x168>
 801f860:	54400000 	.word	0x54400000
 801f864:	3ff921fb 	.word	0x3ff921fb
 801f868:	1a626331 	.word	0x1a626331
 801f86c:	3dd0b461 	.word	0x3dd0b461
 801f870:	1a600000 	.word	0x1a600000
 801f874:	3dd0b461 	.word	0x3dd0b461
 801f878:	2e037073 	.word	0x2e037073
 801f87c:	3ba3198a 	.word	0x3ba3198a
 801f880:	6dc9c883 	.word	0x6dc9c883
 801f884:	3fe45f30 	.word	0x3fe45f30
 801f888:	2e000000 	.word	0x2e000000
 801f88c:	3ba3198a 	.word	0x3ba3198a
 801f890:	252049c1 	.word	0x252049c1
 801f894:	397b839a 	.word	0x397b839a
 801f898:	00000000 	.word	0x00000000
 801f89c:	41700000 	.word	0x41700000
 801f8a0:	3fe921fb 	.word	0x3fe921fb
 801f8a4:	4002d97b 	.word	0x4002d97b
 801f8a8:	413921fb 	.word	0x413921fb
 801f8ac:	08026a98 	.word	0x08026a98
 801f8b0:	7fefffff 	.word	0x7fefffff
 801f8b4:	08026b18 	.word	0x08026b18

0801f8b8 <__kernel_cos>:
 801f8b8:	ee10 1a90 	vmov	r1, s1
 801f8bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801f8c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f8c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801f8c8:	da05      	bge.n	801f8d6 <__kernel_cos+0x1e>
 801f8ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f8ce:	ee17 3a90 	vmov	r3, s15
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d03d      	beq.n	801f952 <__kernel_cos+0x9a>
 801f8d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 801f8da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 801f958 <__kernel_cos+0xa0>
 801f8de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801f960 <__kernel_cos+0xa8>
 801f8e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 801f8e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801f968 <__kernel_cos+0xb0>
 801f8ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 801f8ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 801f970 <__kernel_cos+0xb8>
 801f8f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 801f8f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801f978 <__kernel_cos+0xc0>
 801f8fa:	4b23      	ldr	r3, [pc, #140]	; (801f988 <__kernel_cos+0xd0>)
 801f8fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 801f900:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 801f980 <__kernel_cos+0xc8>
 801f904:	4299      	cmp	r1, r3
 801f906:	eea7 6b03 	vfma.f64	d6, d7, d3
 801f90a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801f90e:	ee26 5b03 	vmul.f64	d5, d6, d3
 801f912:	ee23 7b07 	vmul.f64	d7, d3, d7
 801f916:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801f91a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801f91e:	dc04      	bgt.n	801f92a <__kernel_cos+0x72>
 801f920:	ee37 6b46 	vsub.f64	d6, d7, d6
 801f924:	ee34 0b46 	vsub.f64	d0, d4, d6
 801f928:	4770      	bx	lr
 801f92a:	4b18      	ldr	r3, [pc, #96]	; (801f98c <__kernel_cos+0xd4>)
 801f92c:	4299      	cmp	r1, r3
 801f92e:	dc0d      	bgt.n	801f94c <__kernel_cos+0x94>
 801f930:	2200      	movs	r2, #0
 801f932:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801f936:	ec43 2b15 	vmov	d5, r2, r3
 801f93a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801f93e:	ee37 7b45 	vsub.f64	d7, d7, d5
 801f942:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f946:	ee30 0b47 	vsub.f64	d0, d0, d7
 801f94a:	4770      	bx	lr
 801f94c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801f950:	e7f3      	b.n	801f93a <__kernel_cos+0x82>
 801f952:	eeb0 0b44 	vmov.f64	d0, d4
 801f956:	4770      	bx	lr
 801f958:	be8838d4 	.word	0xbe8838d4
 801f95c:	bda8fae9 	.word	0xbda8fae9
 801f960:	bdb4b1c4 	.word	0xbdb4b1c4
 801f964:	3e21ee9e 	.word	0x3e21ee9e
 801f968:	809c52ad 	.word	0x809c52ad
 801f96c:	be927e4f 	.word	0xbe927e4f
 801f970:	19cb1590 	.word	0x19cb1590
 801f974:	3efa01a0 	.word	0x3efa01a0
 801f978:	16c15177 	.word	0x16c15177
 801f97c:	bf56c16c 	.word	0xbf56c16c
 801f980:	5555554c 	.word	0x5555554c
 801f984:	3fa55555 	.word	0x3fa55555
 801f988:	3fd33332 	.word	0x3fd33332
 801f98c:	3fe90000 	.word	0x3fe90000

0801f990 <__kernel_rem_pio2>:
 801f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f994:	ed2d 8b06 	vpush	{d8-d10}
 801f998:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801f99c:	460f      	mov	r7, r1
 801f99e:	9002      	str	r0, [sp, #8]
 801f9a0:	49c5      	ldr	r1, [pc, #788]	; (801fcb8 <__kernel_rem_pio2+0x328>)
 801f9a2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801f9a4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801f9a8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801f9ac:	9301      	str	r3, [sp, #4]
 801f9ae:	f112 0f14 	cmn.w	r2, #20
 801f9b2:	bfa8      	it	ge
 801f9b4:	2018      	movge	r0, #24
 801f9b6:	f103 31ff 	add.w	r1, r3, #4294967295
 801f9ba:	bfb8      	it	lt
 801f9bc:	2000      	movlt	r0, #0
 801f9be:	f06f 0417 	mvn.w	r4, #23
 801f9c2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801fca0 <__kernel_rem_pio2+0x310>
 801f9c6:	bfa4      	itt	ge
 801f9c8:	f1a2 0a03 	subge.w	sl, r2, #3
 801f9cc:	fb9a f0f0 	sdivge	r0, sl, r0
 801f9d0:	fb00 4404 	mla	r4, r0, r4, r4
 801f9d4:	1a46      	subs	r6, r0, r1
 801f9d6:	4414      	add	r4, r2
 801f9d8:	eb09 0c01 	add.w	ip, r9, r1
 801f9dc:	ad1a      	add	r5, sp, #104	; 0x68
 801f9de:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	4562      	cmp	r2, ip
 801f9e6:	dd10      	ble.n	801fa0a <__kernel_rem_pio2+0x7a>
 801f9e8:	9a01      	ldr	r2, [sp, #4]
 801f9ea:	ab1a      	add	r3, sp, #104	; 0x68
 801f9ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801f9f0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801f9f4:	f04f 0c00 	mov.w	ip, #0
 801f9f8:	45cc      	cmp	ip, r9
 801f9fa:	dc26      	bgt.n	801fa4a <__kernel_rem_pio2+0xba>
 801f9fc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801fca0 <__kernel_rem_pio2+0x310>
 801fa00:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801fa04:	4616      	mov	r6, r2
 801fa06:	2500      	movs	r5, #0
 801fa08:	e015      	b.n	801fa36 <__kernel_rem_pio2+0xa6>
 801fa0a:	42d6      	cmn	r6, r2
 801fa0c:	d409      	bmi.n	801fa22 <__kernel_rem_pio2+0x92>
 801fa0e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801fa12:	ee07 3a90 	vmov	s15, r3
 801fa16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fa1a:	eca5 7b02 	vstmia	r5!, {d7}
 801fa1e:	3201      	adds	r2, #1
 801fa20:	e7e0      	b.n	801f9e4 <__kernel_rem_pio2+0x54>
 801fa22:	eeb0 7b46 	vmov.f64	d7, d6
 801fa26:	e7f8      	b.n	801fa1a <__kernel_rem_pio2+0x8a>
 801fa28:	ecb8 5b02 	vldmia	r8!, {d5}
 801fa2c:	ed96 6b00 	vldr	d6, [r6]
 801fa30:	3501      	adds	r5, #1
 801fa32:	eea5 7b06 	vfma.f64	d7, d5, d6
 801fa36:	428d      	cmp	r5, r1
 801fa38:	f1a6 0608 	sub.w	r6, r6, #8
 801fa3c:	ddf4      	ble.n	801fa28 <__kernel_rem_pio2+0x98>
 801fa3e:	ecaa 7b02 	vstmia	sl!, {d7}
 801fa42:	f10c 0c01 	add.w	ip, ip, #1
 801fa46:	3208      	adds	r2, #8
 801fa48:	e7d6      	b.n	801f9f8 <__kernel_rem_pio2+0x68>
 801fa4a:	ab06      	add	r3, sp, #24
 801fa4c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801fca8 <__kernel_rem_pio2+0x318>
 801fa50:	ed9f ab97 	vldr	d10, [pc, #604]	; 801fcb0 <__kernel_rem_pio2+0x320>
 801fa54:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801fa58:	9303      	str	r3, [sp, #12]
 801fa5a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801fa5e:	464d      	mov	r5, r9
 801fa60:	00eb      	lsls	r3, r5, #3
 801fa62:	9304      	str	r3, [sp, #16]
 801fa64:	ab92      	add	r3, sp, #584	; 0x248
 801fa66:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801fa6a:	f10d 0b18 	add.w	fp, sp, #24
 801fa6e:	ab6a      	add	r3, sp, #424	; 0x1a8
 801fa70:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801fa74:	465e      	mov	r6, fp
 801fa76:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	2800      	cmp	r0, #0
 801fa7e:	f1a2 0208 	sub.w	r2, r2, #8
 801fa82:	dc4c      	bgt.n	801fb1e <__kernel_rem_pio2+0x18e>
 801fa84:	4620      	mov	r0, r4
 801fa86:	9105      	str	r1, [sp, #20]
 801fa88:	f000 faf2 	bl	8020070 <scalbn>
 801fa8c:	eeb0 8b40 	vmov.f64	d8, d0
 801fa90:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801fa94:	ee28 0b00 	vmul.f64	d0, d8, d0
 801fa98:	f000 fa76 	bl	801ff88 <floor>
 801fa9c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801faa0:	eea0 8b47 	vfms.f64	d8, d0, d7
 801faa4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801faa8:	2c00      	cmp	r4, #0
 801faaa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801faae:	ee17 8a90 	vmov	r8, s15
 801fab2:	ee38 8b40 	vsub.f64	d8, d8, d0
 801fab6:	9905      	ldr	r1, [sp, #20]
 801fab8:	dd43      	ble.n	801fb42 <__kernel_rem_pio2+0x1b2>
 801faba:	1e68      	subs	r0, r5, #1
 801fabc:	ab06      	add	r3, sp, #24
 801fabe:	f1c4 0c18 	rsb	ip, r4, #24
 801fac2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801fac6:	fa46 f20c 	asr.w	r2, r6, ip
 801faca:	4490      	add	r8, r2
 801facc:	fa02 f20c 	lsl.w	r2, r2, ip
 801fad0:	1ab6      	subs	r6, r6, r2
 801fad2:	f1c4 0217 	rsb	r2, r4, #23
 801fad6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801fada:	4116      	asrs	r6, r2
 801fadc:	2e00      	cmp	r6, #0
 801fade:	dd3f      	ble.n	801fb60 <__kernel_rem_pio2+0x1d0>
 801fae0:	f04f 0c00 	mov.w	ip, #0
 801fae4:	f108 0801 	add.w	r8, r8, #1
 801fae8:	4660      	mov	r0, ip
 801faea:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801faee:	4565      	cmp	r5, ip
 801faf0:	dc6e      	bgt.n	801fbd0 <__kernel_rem_pio2+0x240>
 801faf2:	2c00      	cmp	r4, #0
 801faf4:	dd04      	ble.n	801fb00 <__kernel_rem_pio2+0x170>
 801faf6:	2c01      	cmp	r4, #1
 801faf8:	d07f      	beq.n	801fbfa <__kernel_rem_pio2+0x26a>
 801fafa:	2c02      	cmp	r4, #2
 801fafc:	f000 8087 	beq.w	801fc0e <__kernel_rem_pio2+0x27e>
 801fb00:	2e02      	cmp	r6, #2
 801fb02:	d12d      	bne.n	801fb60 <__kernel_rem_pio2+0x1d0>
 801fb04:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801fb08:	ee30 8b48 	vsub.f64	d8, d0, d8
 801fb0c:	b340      	cbz	r0, 801fb60 <__kernel_rem_pio2+0x1d0>
 801fb0e:	4620      	mov	r0, r4
 801fb10:	9105      	str	r1, [sp, #20]
 801fb12:	f000 faad 	bl	8020070 <scalbn>
 801fb16:	9905      	ldr	r1, [sp, #20]
 801fb18:	ee38 8b40 	vsub.f64	d8, d8, d0
 801fb1c:	e020      	b.n	801fb60 <__kernel_rem_pio2+0x1d0>
 801fb1e:	ee20 7b09 	vmul.f64	d7, d0, d9
 801fb22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801fb26:	3801      	subs	r0, #1
 801fb28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801fb2c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801fb30:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801fb34:	eca6 0a01 	vstmia	r6!, {s0}
 801fb38:	ed92 0b00 	vldr	d0, [r2]
 801fb3c:	ee37 0b00 	vadd.f64	d0, d7, d0
 801fb40:	e79c      	b.n	801fa7c <__kernel_rem_pio2+0xec>
 801fb42:	d105      	bne.n	801fb50 <__kernel_rem_pio2+0x1c0>
 801fb44:	1e6a      	subs	r2, r5, #1
 801fb46:	ab06      	add	r3, sp, #24
 801fb48:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801fb4c:	15f6      	asrs	r6, r6, #23
 801fb4e:	e7c5      	b.n	801fadc <__kernel_rem_pio2+0x14c>
 801fb50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801fb54:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801fb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb5c:	da36      	bge.n	801fbcc <__kernel_rem_pio2+0x23c>
 801fb5e:	2600      	movs	r6, #0
 801fb60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801fb64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb68:	f040 80aa 	bne.w	801fcc0 <__kernel_rem_pio2+0x330>
 801fb6c:	f105 3bff 	add.w	fp, r5, #4294967295
 801fb70:	4658      	mov	r0, fp
 801fb72:	2200      	movs	r2, #0
 801fb74:	4548      	cmp	r0, r9
 801fb76:	da52      	bge.n	801fc1e <__kernel_rem_pio2+0x28e>
 801fb78:	2a00      	cmp	r2, #0
 801fb7a:	f000 8081 	beq.w	801fc80 <__kernel_rem_pio2+0x2f0>
 801fb7e:	ab06      	add	r3, sp, #24
 801fb80:	3c18      	subs	r4, #24
 801fb82:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	f000 8087 	beq.w	801fc9a <__kernel_rem_pio2+0x30a>
 801fb8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801fb90:	4620      	mov	r0, r4
 801fb92:	f000 fa6d 	bl	8020070 <scalbn>
 801fb96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801fb9a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801fca8 <__kernel_rem_pio2+0x318>
 801fb9e:	a96a      	add	r1, sp, #424	; 0x1a8
 801fba0:	f103 0208 	add.w	r2, r3, #8
 801fba4:	1888      	adds	r0, r1, r2
 801fba6:	4659      	mov	r1, fp
 801fba8:	2900      	cmp	r1, #0
 801fbaa:	f280 80b7 	bge.w	801fd1c <__kernel_rem_pio2+0x38c>
 801fbae:	4659      	mov	r1, fp
 801fbb0:	2900      	cmp	r1, #0
 801fbb2:	f2c0 80d5 	blt.w	801fd60 <__kernel_rem_pio2+0x3d0>
 801fbb6:	a86a      	add	r0, sp, #424	; 0x1a8
 801fbb8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801fbbc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801fca0 <__kernel_rem_pio2+0x310>
 801fbc0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801fcbc <__kernel_rem_pio2+0x32c>
 801fbc4:	2400      	movs	r4, #0
 801fbc6:	ebab 0001 	sub.w	r0, fp, r1
 801fbca:	e0be      	b.n	801fd4a <__kernel_rem_pio2+0x3ba>
 801fbcc:	2602      	movs	r6, #2
 801fbce:	e787      	b.n	801fae0 <__kernel_rem_pio2+0x150>
 801fbd0:	f8db 2000 	ldr.w	r2, [fp]
 801fbd4:	b958      	cbnz	r0, 801fbee <__kernel_rem_pio2+0x25e>
 801fbd6:	b122      	cbz	r2, 801fbe2 <__kernel_rem_pio2+0x252>
 801fbd8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801fbdc:	f8cb 2000 	str.w	r2, [fp]
 801fbe0:	2201      	movs	r2, #1
 801fbe2:	f10c 0c01 	add.w	ip, ip, #1
 801fbe6:	f10b 0b04 	add.w	fp, fp, #4
 801fbea:	4610      	mov	r0, r2
 801fbec:	e77f      	b.n	801faee <__kernel_rem_pio2+0x15e>
 801fbee:	ebae 0202 	sub.w	r2, lr, r2
 801fbf2:	f8cb 2000 	str.w	r2, [fp]
 801fbf6:	4602      	mov	r2, r0
 801fbf8:	e7f3      	b.n	801fbe2 <__kernel_rem_pio2+0x252>
 801fbfa:	f105 3cff 	add.w	ip, r5, #4294967295
 801fbfe:	ab06      	add	r3, sp, #24
 801fc00:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801fc04:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801fc08:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801fc0c:	e778      	b.n	801fb00 <__kernel_rem_pio2+0x170>
 801fc0e:	f105 3cff 	add.w	ip, r5, #4294967295
 801fc12:	ab06      	add	r3, sp, #24
 801fc14:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801fc18:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801fc1c:	e7f4      	b.n	801fc08 <__kernel_rem_pio2+0x278>
 801fc1e:	ab06      	add	r3, sp, #24
 801fc20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801fc24:	3801      	subs	r0, #1
 801fc26:	431a      	orrs	r2, r3
 801fc28:	e7a4      	b.n	801fb74 <__kernel_rem_pio2+0x1e4>
 801fc2a:	f10c 0c01 	add.w	ip, ip, #1
 801fc2e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801fc32:	2800      	cmp	r0, #0
 801fc34:	d0f9      	beq.n	801fc2a <__kernel_rem_pio2+0x29a>
 801fc36:	9b04      	ldr	r3, [sp, #16]
 801fc38:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801fc3c:	eb0d 0203 	add.w	r2, sp, r3
 801fc40:	9b01      	ldr	r3, [sp, #4]
 801fc42:	18e8      	adds	r0, r5, r3
 801fc44:	ab1a      	add	r3, sp, #104	; 0x68
 801fc46:	1c6e      	adds	r6, r5, #1
 801fc48:	3a98      	subs	r2, #152	; 0x98
 801fc4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801fc4e:	4465      	add	r5, ip
 801fc50:	42b5      	cmp	r5, r6
 801fc52:	f6ff af05 	blt.w	801fa60 <__kernel_rem_pio2+0xd0>
 801fc56:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801fc5a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801fc5e:	ee07 3a90 	vmov	s15, r3
 801fc62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fc66:	f04f 0c00 	mov.w	ip, #0
 801fc6a:	eca0 7b02 	vstmia	r0!, {d7}
 801fc6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801fca0 <__kernel_rem_pio2+0x310>
 801fc72:	4680      	mov	r8, r0
 801fc74:	458c      	cmp	ip, r1
 801fc76:	dd07      	ble.n	801fc88 <__kernel_rem_pio2+0x2f8>
 801fc78:	eca2 7b02 	vstmia	r2!, {d7}
 801fc7c:	3601      	adds	r6, #1
 801fc7e:	e7e7      	b.n	801fc50 <__kernel_rem_pio2+0x2c0>
 801fc80:	9a03      	ldr	r2, [sp, #12]
 801fc82:	f04f 0c01 	mov.w	ip, #1
 801fc86:	e7d2      	b.n	801fc2e <__kernel_rem_pio2+0x29e>
 801fc88:	ecbe 5b02 	vldmia	lr!, {d5}
 801fc8c:	ed38 6b02 	vldmdb	r8!, {d6}
 801fc90:	f10c 0c01 	add.w	ip, ip, #1
 801fc94:	eea5 7b06 	vfma.f64	d7, d5, d6
 801fc98:	e7ec      	b.n	801fc74 <__kernel_rem_pio2+0x2e4>
 801fc9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fc9e:	e76e      	b.n	801fb7e <__kernel_rem_pio2+0x1ee>
	...
 801fcac:	3e700000 	.word	0x3e700000
 801fcb0:	00000000 	.word	0x00000000
 801fcb4:	41700000 	.word	0x41700000
 801fcb8:	08026c60 	.word	0x08026c60
 801fcbc:	08026c20 	.word	0x08026c20
 801fcc0:	4260      	negs	r0, r4
 801fcc2:	eeb0 0b48 	vmov.f64	d0, d8
 801fcc6:	f000 f9d3 	bl	8020070 <scalbn>
 801fcca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801fea8 <__kernel_rem_pio2+0x518>
 801fcce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801fcd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcd6:	db18      	blt.n	801fd0a <__kernel_rem_pio2+0x37a>
 801fcd8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801feb0 <__kernel_rem_pio2+0x520>
 801fcdc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801fce0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801fce4:	aa06      	add	r2, sp, #24
 801fce6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801fcea:	eea5 0b46 	vfms.f64	d0, d5, d6
 801fcee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801fcf2:	f105 0b01 	add.w	fp, r5, #1
 801fcf6:	ee10 3a10 	vmov	r3, s0
 801fcfa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801fcfe:	ee17 3a10 	vmov	r3, s14
 801fd02:	3418      	adds	r4, #24
 801fd04:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801fd08:	e740      	b.n	801fb8c <__kernel_rem_pio2+0x1fc>
 801fd0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801fd0e:	aa06      	add	r2, sp, #24
 801fd10:	ee10 3a10 	vmov	r3, s0
 801fd14:	46ab      	mov	fp, r5
 801fd16:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801fd1a:	e737      	b.n	801fb8c <__kernel_rem_pio2+0x1fc>
 801fd1c:	ac06      	add	r4, sp, #24
 801fd1e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801fd22:	9401      	str	r4, [sp, #4]
 801fd24:	ee07 4a90 	vmov	s15, r4
 801fd28:	3901      	subs	r1, #1
 801fd2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fd2e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801fd32:	ee20 0b06 	vmul.f64	d0, d0, d6
 801fd36:	ed20 7b02 	vstmdb	r0!, {d7}
 801fd3a:	e735      	b.n	801fba8 <__kernel_rem_pio2+0x218>
 801fd3c:	ecbc 5b02 	vldmia	ip!, {d5}
 801fd40:	ecb5 6b02 	vldmia	r5!, {d6}
 801fd44:	3401      	adds	r4, #1
 801fd46:	eea5 7b06 	vfma.f64	d7, d5, d6
 801fd4a:	454c      	cmp	r4, r9
 801fd4c:	dc01      	bgt.n	801fd52 <__kernel_rem_pio2+0x3c2>
 801fd4e:	4284      	cmp	r4, r0
 801fd50:	ddf4      	ble.n	801fd3c <__kernel_rem_pio2+0x3ac>
 801fd52:	ac42      	add	r4, sp, #264	; 0x108
 801fd54:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801fd58:	ed80 7b00 	vstr	d7, [r0]
 801fd5c:	3901      	subs	r1, #1
 801fd5e:	e727      	b.n	801fbb0 <__kernel_rem_pio2+0x220>
 801fd60:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801fd62:	2902      	cmp	r1, #2
 801fd64:	dc0a      	bgt.n	801fd7c <__kernel_rem_pio2+0x3ec>
 801fd66:	2900      	cmp	r1, #0
 801fd68:	dc2c      	bgt.n	801fdc4 <__kernel_rem_pio2+0x434>
 801fd6a:	d045      	beq.n	801fdf8 <__kernel_rem_pio2+0x468>
 801fd6c:	f008 0007 	and.w	r0, r8, #7
 801fd70:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801fd74:	ecbd 8b06 	vpop	{d8-d10}
 801fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd7c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801fd7e:	2a03      	cmp	r2, #3
 801fd80:	d1f4      	bne.n	801fd6c <__kernel_rem_pio2+0x3dc>
 801fd82:	aa42      	add	r2, sp, #264	; 0x108
 801fd84:	4413      	add	r3, r2
 801fd86:	461a      	mov	r2, r3
 801fd88:	4619      	mov	r1, r3
 801fd8a:	4658      	mov	r0, fp
 801fd8c:	2800      	cmp	r0, #0
 801fd8e:	f1a1 0108 	sub.w	r1, r1, #8
 801fd92:	dc54      	bgt.n	801fe3e <__kernel_rem_pio2+0x4ae>
 801fd94:	4659      	mov	r1, fp
 801fd96:	2901      	cmp	r1, #1
 801fd98:	f1a2 0208 	sub.w	r2, r2, #8
 801fd9c:	dc5f      	bgt.n	801fe5e <__kernel_rem_pio2+0x4ce>
 801fd9e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801feb8 <__kernel_rem_pio2+0x528>
 801fda2:	3308      	adds	r3, #8
 801fda4:	f1bb 0f01 	cmp.w	fp, #1
 801fda8:	dc69      	bgt.n	801fe7e <__kernel_rem_pio2+0x4ee>
 801fdaa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801fdae:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801fdb2:	2e00      	cmp	r6, #0
 801fdb4:	d16a      	bne.n	801fe8c <__kernel_rem_pio2+0x4fc>
 801fdb6:	ed87 5b00 	vstr	d5, [r7]
 801fdba:	ed87 6b02 	vstr	d6, [r7, #8]
 801fdbe:	ed87 7b04 	vstr	d7, [r7, #16]
 801fdc2:	e7d3      	b.n	801fd6c <__kernel_rem_pio2+0x3dc>
 801fdc4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801feb8 <__kernel_rem_pio2+0x528>
 801fdc8:	ab42      	add	r3, sp, #264	; 0x108
 801fdca:	441a      	add	r2, r3
 801fdcc:	465b      	mov	r3, fp
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	da26      	bge.n	801fe20 <__kernel_rem_pio2+0x490>
 801fdd2:	b35e      	cbz	r6, 801fe2c <__kernel_rem_pio2+0x49c>
 801fdd4:	eeb1 7b46 	vneg.f64	d7, d6
 801fdd8:	ed87 7b00 	vstr	d7, [r7]
 801fddc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801fde0:	aa44      	add	r2, sp, #272	; 0x110
 801fde2:	2301      	movs	r3, #1
 801fde4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801fde8:	459b      	cmp	fp, r3
 801fdea:	da22      	bge.n	801fe32 <__kernel_rem_pio2+0x4a2>
 801fdec:	b10e      	cbz	r6, 801fdf2 <__kernel_rem_pio2+0x462>
 801fdee:	eeb1 7b47 	vneg.f64	d7, d7
 801fdf2:	ed87 7b02 	vstr	d7, [r7, #8]
 801fdf6:	e7b9      	b.n	801fd6c <__kernel_rem_pio2+0x3dc>
 801fdf8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801feb8 <__kernel_rem_pio2+0x528>
 801fdfc:	ab42      	add	r3, sp, #264	; 0x108
 801fdfe:	441a      	add	r2, r3
 801fe00:	f1bb 0f00 	cmp.w	fp, #0
 801fe04:	da05      	bge.n	801fe12 <__kernel_rem_pio2+0x482>
 801fe06:	b10e      	cbz	r6, 801fe0c <__kernel_rem_pio2+0x47c>
 801fe08:	eeb1 7b47 	vneg.f64	d7, d7
 801fe0c:	ed87 7b00 	vstr	d7, [r7]
 801fe10:	e7ac      	b.n	801fd6c <__kernel_rem_pio2+0x3dc>
 801fe12:	ed32 6b02 	vldmdb	r2!, {d6}
 801fe16:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fe1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801fe1e:	e7ef      	b.n	801fe00 <__kernel_rem_pio2+0x470>
 801fe20:	ed32 7b02 	vldmdb	r2!, {d7}
 801fe24:	3b01      	subs	r3, #1
 801fe26:	ee36 6b07 	vadd.f64	d6, d6, d7
 801fe2a:	e7d0      	b.n	801fdce <__kernel_rem_pio2+0x43e>
 801fe2c:	eeb0 7b46 	vmov.f64	d7, d6
 801fe30:	e7d2      	b.n	801fdd8 <__kernel_rem_pio2+0x448>
 801fe32:	ecb2 6b02 	vldmia	r2!, {d6}
 801fe36:	3301      	adds	r3, #1
 801fe38:	ee37 7b06 	vadd.f64	d7, d7, d6
 801fe3c:	e7d4      	b.n	801fde8 <__kernel_rem_pio2+0x458>
 801fe3e:	ed91 7b00 	vldr	d7, [r1]
 801fe42:	ed91 5b02 	vldr	d5, [r1, #8]
 801fe46:	3801      	subs	r0, #1
 801fe48:	ee37 6b05 	vadd.f64	d6, d7, d5
 801fe4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801fe50:	ed81 6b00 	vstr	d6, [r1]
 801fe54:	ee37 7b05 	vadd.f64	d7, d7, d5
 801fe58:	ed81 7b02 	vstr	d7, [r1, #8]
 801fe5c:	e796      	b.n	801fd8c <__kernel_rem_pio2+0x3fc>
 801fe5e:	ed92 7b00 	vldr	d7, [r2]
 801fe62:	ed92 5b02 	vldr	d5, [r2, #8]
 801fe66:	3901      	subs	r1, #1
 801fe68:	ee37 6b05 	vadd.f64	d6, d7, d5
 801fe6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801fe70:	ed82 6b00 	vstr	d6, [r2]
 801fe74:	ee37 7b05 	vadd.f64	d7, d7, d5
 801fe78:	ed82 7b02 	vstr	d7, [r2, #8]
 801fe7c:	e78b      	b.n	801fd96 <__kernel_rem_pio2+0x406>
 801fe7e:	ed33 6b02 	vldmdb	r3!, {d6}
 801fe82:	f10b 3bff 	add.w	fp, fp, #4294967295
 801fe86:	ee37 7b06 	vadd.f64	d7, d7, d6
 801fe8a:	e78b      	b.n	801fda4 <__kernel_rem_pio2+0x414>
 801fe8c:	eeb1 5b45 	vneg.f64	d5, d5
 801fe90:	eeb1 6b46 	vneg.f64	d6, d6
 801fe94:	ed87 5b00 	vstr	d5, [r7]
 801fe98:	eeb1 7b47 	vneg.f64	d7, d7
 801fe9c:	ed87 6b02 	vstr	d6, [r7, #8]
 801fea0:	e78d      	b.n	801fdbe <__kernel_rem_pio2+0x42e>
 801fea2:	bf00      	nop
 801fea4:	f3af 8000 	nop.w
 801fea8:	00000000 	.word	0x00000000
 801feac:	41700000 	.word	0x41700000
 801feb0:	00000000 	.word	0x00000000
 801feb4:	3e700000 	.word	0x3e700000
	...

0801fec0 <__kernel_sin>:
 801fec0:	ee10 3a90 	vmov	r3, s1
 801fec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801fec8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801fecc:	da04      	bge.n	801fed8 <__kernel_sin+0x18>
 801fece:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801fed2:	ee17 3a90 	vmov	r3, s15
 801fed6:	b35b      	cbz	r3, 801ff30 <__kernel_sin+0x70>
 801fed8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801fedc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801fee0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801ff38 <__kernel_sin+0x78>
 801fee4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ff40 <__kernel_sin+0x80>
 801fee8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801feec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ff48 <__kernel_sin+0x88>
 801fef0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801fef4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ff50 <__kernel_sin+0x90>
 801fef8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801fefc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ff58 <__kernel_sin+0x98>
 801ff00:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ff04:	b930      	cbnz	r0, 801ff14 <__kernel_sin+0x54>
 801ff06:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ff60 <__kernel_sin+0xa0>
 801ff0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ff0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801ff12:	4770      	bx	lr
 801ff14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801ff18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801ff1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801ff20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801ff24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ff68 <__kernel_sin+0xa8>
 801ff28:	eea5 1b07 	vfma.f64	d1, d5, d7
 801ff2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ff30:	4770      	bx	lr
 801ff32:	bf00      	nop
 801ff34:	f3af 8000 	nop.w
 801ff38:	5acfd57c 	.word	0x5acfd57c
 801ff3c:	3de5d93a 	.word	0x3de5d93a
 801ff40:	8a2b9ceb 	.word	0x8a2b9ceb
 801ff44:	be5ae5e6 	.word	0xbe5ae5e6
 801ff48:	57b1fe7d 	.word	0x57b1fe7d
 801ff4c:	3ec71de3 	.word	0x3ec71de3
 801ff50:	19c161d5 	.word	0x19c161d5
 801ff54:	bf2a01a0 	.word	0xbf2a01a0
 801ff58:	1110f8a6 	.word	0x1110f8a6
 801ff5c:	3f811111 	.word	0x3f811111
 801ff60:	55555549 	.word	0x55555549
 801ff64:	bfc55555 	.word	0xbfc55555
 801ff68:	55555549 	.word	0x55555549
 801ff6c:	3fc55555 	.word	0x3fc55555

0801ff70 <fabs>:
 801ff70:	ec51 0b10 	vmov	r0, r1, d0
 801ff74:	ee10 2a10 	vmov	r2, s0
 801ff78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ff7c:	ec43 2b10 	vmov	d0, r2, r3
 801ff80:	4770      	bx	lr
 801ff82:	0000      	movs	r0, r0
 801ff84:	0000      	movs	r0, r0
	...

0801ff88 <floor>:
 801ff88:	ee10 1a90 	vmov	r1, s1
 801ff8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ff90:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801ff94:	2b13      	cmp	r3, #19
 801ff96:	b530      	push	{r4, r5, lr}
 801ff98:	ee10 0a10 	vmov	r0, s0
 801ff9c:	ee10 5a10 	vmov	r5, s0
 801ffa0:	dc31      	bgt.n	8020006 <floor+0x7e>
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	da15      	bge.n	801ffd2 <floor+0x4a>
 801ffa6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8020060 <floor+0xd8>
 801ffaa:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ffae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ffb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffb6:	dd07      	ble.n	801ffc8 <floor+0x40>
 801ffb8:	2900      	cmp	r1, #0
 801ffba:	da4e      	bge.n	802005a <floor+0xd2>
 801ffbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ffc0:	4318      	orrs	r0, r3
 801ffc2:	d001      	beq.n	801ffc8 <floor+0x40>
 801ffc4:	4928      	ldr	r1, [pc, #160]	; (8020068 <floor+0xe0>)
 801ffc6:	2000      	movs	r0, #0
 801ffc8:	460b      	mov	r3, r1
 801ffca:	4602      	mov	r2, r0
 801ffcc:	ec43 2b10 	vmov	d0, r2, r3
 801ffd0:	e020      	b.n	8020014 <floor+0x8c>
 801ffd2:	4a26      	ldr	r2, [pc, #152]	; (802006c <floor+0xe4>)
 801ffd4:	411a      	asrs	r2, r3
 801ffd6:	ea01 0402 	and.w	r4, r1, r2
 801ffda:	4304      	orrs	r4, r0
 801ffdc:	d01a      	beq.n	8020014 <floor+0x8c>
 801ffde:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8020060 <floor+0xd8>
 801ffe2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ffe6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffee:	ddeb      	ble.n	801ffc8 <floor+0x40>
 801fff0:	2900      	cmp	r1, #0
 801fff2:	bfbe      	ittt	lt
 801fff4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801fff8:	fa40 f303 	asrlt.w	r3, r0, r3
 801fffc:	18c9      	addlt	r1, r1, r3
 801fffe:	ea21 0102 	bic.w	r1, r1, r2
 8020002:	2000      	movs	r0, #0
 8020004:	e7e0      	b.n	801ffc8 <floor+0x40>
 8020006:	2b33      	cmp	r3, #51	; 0x33
 8020008:	dd05      	ble.n	8020016 <floor+0x8e>
 802000a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802000e:	d101      	bne.n	8020014 <floor+0x8c>
 8020010:	ee30 0b00 	vadd.f64	d0, d0, d0
 8020014:	bd30      	pop	{r4, r5, pc}
 8020016:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 802001a:	f04f 32ff 	mov.w	r2, #4294967295
 802001e:	40e2      	lsrs	r2, r4
 8020020:	4202      	tst	r2, r0
 8020022:	d0f7      	beq.n	8020014 <floor+0x8c>
 8020024:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8020060 <floor+0xd8>
 8020028:	ee30 0b07 	vadd.f64	d0, d0, d7
 802002c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020034:	ddc8      	ble.n	801ffc8 <floor+0x40>
 8020036:	2900      	cmp	r1, #0
 8020038:	da02      	bge.n	8020040 <floor+0xb8>
 802003a:	2b14      	cmp	r3, #20
 802003c:	d103      	bne.n	8020046 <floor+0xbe>
 802003e:	3101      	adds	r1, #1
 8020040:	ea20 0002 	bic.w	r0, r0, r2
 8020044:	e7c0      	b.n	801ffc8 <floor+0x40>
 8020046:	2401      	movs	r4, #1
 8020048:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802004c:	fa04 f303 	lsl.w	r3, r4, r3
 8020050:	4418      	add	r0, r3
 8020052:	42a8      	cmp	r0, r5
 8020054:	bf38      	it	cc
 8020056:	1909      	addcc	r1, r1, r4
 8020058:	e7f2      	b.n	8020040 <floor+0xb8>
 802005a:	2000      	movs	r0, #0
 802005c:	4601      	mov	r1, r0
 802005e:	e7b3      	b.n	801ffc8 <floor+0x40>
 8020060:	8800759c 	.word	0x8800759c
 8020064:	7e37e43c 	.word	0x7e37e43c
 8020068:	bff00000 	.word	0xbff00000
 802006c:	000fffff 	.word	0x000fffff

08020070 <scalbn>:
 8020070:	ee10 1a90 	vmov	r1, s1
 8020074:	b510      	push	{r4, lr}
 8020076:	f3c1 540a 	ubfx	r4, r1, #20, #11
 802007a:	b98c      	cbnz	r4, 80200a0 <scalbn+0x30>
 802007c:	ee10 3a10 	vmov	r3, s0
 8020080:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020084:	430b      	orrs	r3, r1
 8020086:	d011      	beq.n	80200ac <scalbn+0x3c>
 8020088:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8020150 <scalbn+0xe0>
 802008c:	4b3c      	ldr	r3, [pc, #240]	; (8020180 <scalbn+0x110>)
 802008e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8020092:	4298      	cmp	r0, r3
 8020094:	da0b      	bge.n	80200ae <scalbn+0x3e>
 8020096:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8020158 <scalbn+0xe8>
 802009a:	ee20 0b07 	vmul.f64	d0, d0, d7
 802009e:	e005      	b.n	80200ac <scalbn+0x3c>
 80200a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80200a4:	429c      	cmp	r4, r3
 80200a6:	d107      	bne.n	80200b8 <scalbn+0x48>
 80200a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80200ac:	bd10      	pop	{r4, pc}
 80200ae:	ee10 1a90 	vmov	r1, s1
 80200b2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80200b6:	3c36      	subs	r4, #54	; 0x36
 80200b8:	4404      	add	r4, r0
 80200ba:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80200be:	429c      	cmp	r4, r3
 80200c0:	dd0d      	ble.n	80200de <scalbn+0x6e>
 80200c2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8020160 <scalbn+0xf0>
 80200c6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8020168 <scalbn+0xf8>
 80200ca:	eeb0 6b47 	vmov.f64	d6, d7
 80200ce:	ee10 3a90 	vmov	r3, s1
 80200d2:	2b00      	cmp	r3, #0
 80200d4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80200d8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80200dc:	e7e6      	b.n	80200ac <scalbn+0x3c>
 80200de:	2c00      	cmp	r4, #0
 80200e0:	dd0a      	ble.n	80200f8 <scalbn+0x88>
 80200e2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80200e6:	ec53 2b10 	vmov	r2, r3, d0
 80200ea:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80200ee:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80200f2:	ec43 2b10 	vmov	d0, r2, r3
 80200f6:	e7d9      	b.n	80200ac <scalbn+0x3c>
 80200f8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80200fc:	da19      	bge.n	8020132 <scalbn+0xc2>
 80200fe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020102:	4298      	cmp	r0, r3
 8020104:	ee10 3a90 	vmov	r3, s1
 8020108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 802010c:	dd09      	ble.n	8020122 <scalbn+0xb2>
 802010e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8020160 <scalbn+0xf0>
 8020112:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8020168 <scalbn+0xf8>
 8020116:	eeb0 7b40 	vmov.f64	d7, d0
 802011a:	2b00      	cmp	r3, #0
 802011c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8020120:	e7bb      	b.n	802009a <scalbn+0x2a>
 8020122:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8020158 <scalbn+0xe8>
 8020126:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8020170 <scalbn+0x100>
 802012a:	eeb0 7b40 	vmov.f64	d7, d0
 802012e:	2b00      	cmp	r3, #0
 8020130:	e7f4      	b.n	802011c <scalbn+0xac>
 8020132:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8020136:	ec53 2b10 	vmov	r2, r3, d0
 802013a:	3436      	adds	r4, #54	; 0x36
 802013c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8020140:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8020144:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8020178 <scalbn+0x108>
 8020148:	ec43 2b10 	vmov	d0, r2, r3
 802014c:	e7a5      	b.n	802009a <scalbn+0x2a>
 802014e:	bf00      	nop
 8020150:	00000000 	.word	0x00000000
 8020154:	43500000 	.word	0x43500000
 8020158:	c2f8f359 	.word	0xc2f8f359
 802015c:	01a56e1f 	.word	0x01a56e1f
 8020160:	8800759c 	.word	0x8800759c
 8020164:	7e37e43c 	.word	0x7e37e43c
 8020168:	8800759c 	.word	0x8800759c
 802016c:	fe37e43c 	.word	0xfe37e43c
 8020170:	c2f8f359 	.word	0xc2f8f359
 8020174:	81a56e1f 	.word	0x81a56e1f
 8020178:	00000000 	.word	0x00000000
 802017c:	3c900000 	.word	0x3c900000
 8020180:	ffff3cb0 	.word	0xffff3cb0

08020184 <abort>:
 8020184:	b508      	push	{r3, lr}
 8020186:	2006      	movs	r0, #6
 8020188:	f000 fd92 	bl	8020cb0 <raise>
 802018c:	2001      	movs	r0, #1
 802018e:	f7e1 fa07 	bl	80015a0 <_exit>
	...

08020194 <__assert_func>:
 8020194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020196:	4614      	mov	r4, r2
 8020198:	461a      	mov	r2, r3
 802019a:	4b09      	ldr	r3, [pc, #36]	; (80201c0 <__assert_func+0x2c>)
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	4605      	mov	r5, r0
 80201a0:	68d8      	ldr	r0, [r3, #12]
 80201a2:	b14c      	cbz	r4, 80201b8 <__assert_func+0x24>
 80201a4:	4b07      	ldr	r3, [pc, #28]	; (80201c4 <__assert_func+0x30>)
 80201a6:	9100      	str	r1, [sp, #0]
 80201a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80201ac:	4906      	ldr	r1, [pc, #24]	; (80201c8 <__assert_func+0x34>)
 80201ae:	462b      	mov	r3, r5
 80201b0:	f000 f828 	bl	8020204 <fiprintf>
 80201b4:	f7ff ffe6 	bl	8020184 <abort>
 80201b8:	4b04      	ldr	r3, [pc, #16]	; (80201cc <__assert_func+0x38>)
 80201ba:	461c      	mov	r4, r3
 80201bc:	e7f3      	b.n	80201a6 <__assert_func+0x12>
 80201be:	bf00      	nop
 80201c0:	240000b8 	.word	0x240000b8
 80201c4:	08026c70 	.word	0x08026c70
 80201c8:	08026c7d 	.word	0x08026c7d
 80201cc:	08026cab 	.word	0x08026cab

080201d0 <atexit>:
 80201d0:	2300      	movs	r3, #0
 80201d2:	4601      	mov	r1, r0
 80201d4:	461a      	mov	r2, r3
 80201d6:	4618      	mov	r0, r3
 80201d8:	f001 b882 	b.w	80212e0 <__register_exitproc>

080201dc <__cxa_atexit>:
 80201dc:	b510      	push	{r4, lr}
 80201de:	4c05      	ldr	r4, [pc, #20]	; (80201f4 <__cxa_atexit+0x18>)
 80201e0:	4613      	mov	r3, r2
 80201e2:	b12c      	cbz	r4, 80201f0 <__cxa_atexit+0x14>
 80201e4:	460a      	mov	r2, r1
 80201e6:	4601      	mov	r1, r0
 80201e8:	2002      	movs	r0, #2
 80201ea:	f001 f879 	bl	80212e0 <__register_exitproc>
 80201ee:	bd10      	pop	{r4, pc}
 80201f0:	4620      	mov	r0, r4
 80201f2:	e7fc      	b.n	80201ee <__cxa_atexit+0x12>
 80201f4:	080212e1 	.word	0x080212e1

080201f8 <__errno>:
 80201f8:	4b01      	ldr	r3, [pc, #4]	; (8020200 <__errno+0x8>)
 80201fa:	6818      	ldr	r0, [r3, #0]
 80201fc:	4770      	bx	lr
 80201fe:	bf00      	nop
 8020200:	240000b8 	.word	0x240000b8

08020204 <fiprintf>:
 8020204:	b40e      	push	{r1, r2, r3}
 8020206:	b503      	push	{r0, r1, lr}
 8020208:	4601      	mov	r1, r0
 802020a:	ab03      	add	r3, sp, #12
 802020c:	4805      	ldr	r0, [pc, #20]	; (8020224 <fiprintf+0x20>)
 802020e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020212:	6800      	ldr	r0, [r0, #0]
 8020214:	9301      	str	r3, [sp, #4]
 8020216:	f000 fa4f 	bl	80206b8 <_vfiprintf_r>
 802021a:	b002      	add	sp, #8
 802021c:	f85d eb04 	ldr.w	lr, [sp], #4
 8020220:	b003      	add	sp, #12
 8020222:	4770      	bx	lr
 8020224:	240000b8 	.word	0x240000b8

08020228 <__libc_init_array>:
 8020228:	b570      	push	{r4, r5, r6, lr}
 802022a:	4d0d      	ldr	r5, [pc, #52]	; (8020260 <__libc_init_array+0x38>)
 802022c:	4c0d      	ldr	r4, [pc, #52]	; (8020264 <__libc_init_array+0x3c>)
 802022e:	1b64      	subs	r4, r4, r5
 8020230:	10a4      	asrs	r4, r4, #2
 8020232:	2600      	movs	r6, #0
 8020234:	42a6      	cmp	r6, r4
 8020236:	d109      	bne.n	802024c <__libc_init_array+0x24>
 8020238:	4d0b      	ldr	r5, [pc, #44]	; (8020268 <__libc_init_array+0x40>)
 802023a:	4c0c      	ldr	r4, [pc, #48]	; (802026c <__libc_init_array+0x44>)
 802023c:	f002 f9a6 	bl	802258c <_init>
 8020240:	1b64      	subs	r4, r4, r5
 8020242:	10a4      	asrs	r4, r4, #2
 8020244:	2600      	movs	r6, #0
 8020246:	42a6      	cmp	r6, r4
 8020248:	d105      	bne.n	8020256 <__libc_init_array+0x2e>
 802024a:	bd70      	pop	{r4, r5, r6, pc}
 802024c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020250:	4798      	blx	r3
 8020252:	3601      	adds	r6, #1
 8020254:	e7ee      	b.n	8020234 <__libc_init_array+0xc>
 8020256:	f855 3b04 	ldr.w	r3, [r5], #4
 802025a:	4798      	blx	r3
 802025c:	3601      	adds	r6, #1
 802025e:	e7f2      	b.n	8020246 <__libc_init_array+0x1e>
 8020260:	0802ad5c 	.word	0x0802ad5c
 8020264:	0802ad5c 	.word	0x0802ad5c
 8020268:	0802ad5c 	.word	0x0802ad5c
 802026c:	0802ad74 	.word	0x0802ad74

08020270 <localtime_r>:
 8020270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020274:	4680      	mov	r8, r0
 8020276:	9101      	str	r1, [sp, #4]
 8020278:	f001 fa90 	bl	802179c <__gettzinfo>
 802027c:	9901      	ldr	r1, [sp, #4]
 802027e:	4605      	mov	r5, r0
 8020280:	4640      	mov	r0, r8
 8020282:	f001 fa8f 	bl	80217a4 <gmtime_r>
 8020286:	6943      	ldr	r3, [r0, #20]
 8020288:	0799      	lsls	r1, r3, #30
 802028a:	4604      	mov	r4, r0
 802028c:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8020290:	d105      	bne.n	802029e <localtime_r+0x2e>
 8020292:	2264      	movs	r2, #100	; 0x64
 8020294:	fb97 f3f2 	sdiv	r3, r7, r2
 8020298:	fb02 7313 	mls	r3, r2, r3, r7
 802029c:	bb73      	cbnz	r3, 80202fc <localtime_r+0x8c>
 802029e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80202a2:	fb97 f6f3 	sdiv	r6, r7, r3
 80202a6:	fb03 7616 	mls	r6, r3, r6, r7
 80202aa:	fab6 f386 	clz	r3, r6
 80202ae:	095b      	lsrs	r3, r3, #5
 80202b0:	4e67      	ldr	r6, [pc, #412]	; (8020450 <localtime_r+0x1e0>)
 80202b2:	2230      	movs	r2, #48	; 0x30
 80202b4:	fb02 6603 	mla	r6, r2, r3, r6
 80202b8:	f000 fdc0 	bl	8020e3c <__tz_lock>
 80202bc:	f000 fdca 	bl	8020e54 <_tzset_unlocked>
 80202c0:	4b64      	ldr	r3, [pc, #400]	; (8020454 <localtime_r+0x1e4>)
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	b34b      	cbz	r3, 802031a <localtime_r+0xaa>
 80202c6:	686b      	ldr	r3, [r5, #4]
 80202c8:	42bb      	cmp	r3, r7
 80202ca:	d119      	bne.n	8020300 <localtime_r+0x90>
 80202cc:	682f      	ldr	r7, [r5, #0]
 80202ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 80202d2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80202d6:	b9df      	cbnz	r7, 8020310 <localtime_r+0xa0>
 80202d8:	4282      	cmp	r2, r0
 80202da:	eb73 0101 	sbcs.w	r1, r3, r1
 80202de:	da23      	bge.n	8020328 <localtime_r+0xb8>
 80202e0:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80202e4:	4282      	cmp	r2, r0
 80202e6:	eb73 0701 	sbcs.w	r7, r3, r1
 80202ea:	bfb4      	ite	lt
 80202ec:	2701      	movlt	r7, #1
 80202ee:	2700      	movge	r7, #0
 80202f0:	4282      	cmp	r2, r0
 80202f2:	418b      	sbcs	r3, r1
 80202f4:	6227      	str	r7, [r4, #32]
 80202f6:	db19      	blt.n	802032c <localtime_r+0xbc>
 80202f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80202fa:	e018      	b.n	802032e <localtime_r+0xbe>
 80202fc:	2301      	movs	r3, #1
 80202fe:	e7d7      	b.n	80202b0 <localtime_r+0x40>
 8020300:	4638      	mov	r0, r7
 8020302:	f000 fcf1 	bl	8020ce8 <__tzcalc_limits>
 8020306:	2800      	cmp	r0, #0
 8020308:	d1e0      	bne.n	80202cc <localtime_r+0x5c>
 802030a:	f04f 33ff 	mov.w	r3, #4294967295
 802030e:	e004      	b.n	802031a <localtime_r+0xaa>
 8020310:	4282      	cmp	r2, r0
 8020312:	eb73 0101 	sbcs.w	r1, r3, r1
 8020316:	da02      	bge.n	802031e <localtime_r+0xae>
 8020318:	2300      	movs	r3, #0
 802031a:	6223      	str	r3, [r4, #32]
 802031c:	e7ec      	b.n	80202f8 <localtime_r+0x88>
 802031e:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8020322:	4282      	cmp	r2, r0
 8020324:	418b      	sbcs	r3, r1
 8020326:	daf7      	bge.n	8020318 <localtime_r+0xa8>
 8020328:	2301      	movs	r3, #1
 802032a:	6223      	str	r3, [r4, #32]
 802032c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802032e:	6861      	ldr	r1, [r4, #4]
 8020330:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8020334:	203c      	movs	r0, #60	; 0x3c
 8020336:	fb93 f5f2 	sdiv	r5, r3, r2
 802033a:	fb02 3315 	mls	r3, r2, r5, r3
 802033e:	fb93 f2f0 	sdiv	r2, r3, r0
 8020342:	fb00 3012 	mls	r0, r0, r2, r3
 8020346:	6823      	ldr	r3, [r4, #0]
 8020348:	1a89      	subs	r1, r1, r2
 802034a:	68a2      	ldr	r2, [r4, #8]
 802034c:	6061      	str	r1, [r4, #4]
 802034e:	1a1b      	subs	r3, r3, r0
 8020350:	1b52      	subs	r2, r2, r5
 8020352:	2b3b      	cmp	r3, #59	; 0x3b
 8020354:	6023      	str	r3, [r4, #0]
 8020356:	60a2      	str	r2, [r4, #8]
 8020358:	dd35      	ble.n	80203c6 <localtime_r+0x156>
 802035a:	3101      	adds	r1, #1
 802035c:	6061      	str	r1, [r4, #4]
 802035e:	3b3c      	subs	r3, #60	; 0x3c
 8020360:	6023      	str	r3, [r4, #0]
 8020362:	6863      	ldr	r3, [r4, #4]
 8020364:	2b3b      	cmp	r3, #59	; 0x3b
 8020366:	dd34      	ble.n	80203d2 <localtime_r+0x162>
 8020368:	3201      	adds	r2, #1
 802036a:	60a2      	str	r2, [r4, #8]
 802036c:	3b3c      	subs	r3, #60	; 0x3c
 802036e:	6063      	str	r3, [r4, #4]
 8020370:	68a3      	ldr	r3, [r4, #8]
 8020372:	2b17      	cmp	r3, #23
 8020374:	dd33      	ble.n	80203de <localtime_r+0x16e>
 8020376:	69e2      	ldr	r2, [r4, #28]
 8020378:	3201      	adds	r2, #1
 802037a:	61e2      	str	r2, [r4, #28]
 802037c:	69a2      	ldr	r2, [r4, #24]
 802037e:	3201      	adds	r2, #1
 8020380:	2a06      	cmp	r2, #6
 8020382:	bfc8      	it	gt
 8020384:	2200      	movgt	r2, #0
 8020386:	61a2      	str	r2, [r4, #24]
 8020388:	68e2      	ldr	r2, [r4, #12]
 802038a:	3b18      	subs	r3, #24
 802038c:	3201      	adds	r2, #1
 802038e:	60a3      	str	r3, [r4, #8]
 8020390:	6923      	ldr	r3, [r4, #16]
 8020392:	60e2      	str	r2, [r4, #12]
 8020394:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8020398:	428a      	cmp	r2, r1
 802039a:	dd0e      	ble.n	80203ba <localtime_r+0x14a>
 802039c:	2b0b      	cmp	r3, #11
 802039e:	eba2 0201 	sub.w	r2, r2, r1
 80203a2:	60e2      	str	r2, [r4, #12]
 80203a4:	f103 0201 	add.w	r2, r3, #1
 80203a8:	bf09      	itett	eq
 80203aa:	6963      	ldreq	r3, [r4, #20]
 80203ac:	6122      	strne	r2, [r4, #16]
 80203ae:	2200      	moveq	r2, #0
 80203b0:	3301      	addeq	r3, #1
 80203b2:	bf02      	ittt	eq
 80203b4:	6122      	streq	r2, [r4, #16]
 80203b6:	6163      	streq	r3, [r4, #20]
 80203b8:	61e2      	streq	r2, [r4, #28]
 80203ba:	f000 fd45 	bl	8020e48 <__tz_unlock>
 80203be:	4620      	mov	r0, r4
 80203c0:	b002      	add	sp, #8
 80203c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	dacb      	bge.n	8020362 <localtime_r+0xf2>
 80203ca:	3901      	subs	r1, #1
 80203cc:	6061      	str	r1, [r4, #4]
 80203ce:	333c      	adds	r3, #60	; 0x3c
 80203d0:	e7c6      	b.n	8020360 <localtime_r+0xf0>
 80203d2:	2b00      	cmp	r3, #0
 80203d4:	dacc      	bge.n	8020370 <localtime_r+0x100>
 80203d6:	3a01      	subs	r2, #1
 80203d8:	60a2      	str	r2, [r4, #8]
 80203da:	333c      	adds	r3, #60	; 0x3c
 80203dc:	e7c7      	b.n	802036e <localtime_r+0xfe>
 80203de:	2b00      	cmp	r3, #0
 80203e0:	daeb      	bge.n	80203ba <localtime_r+0x14a>
 80203e2:	69e2      	ldr	r2, [r4, #28]
 80203e4:	3a01      	subs	r2, #1
 80203e6:	61e2      	str	r2, [r4, #28]
 80203e8:	69a2      	ldr	r2, [r4, #24]
 80203ea:	3a01      	subs	r2, #1
 80203ec:	bf48      	it	mi
 80203ee:	2206      	movmi	r2, #6
 80203f0:	61a2      	str	r2, [r4, #24]
 80203f2:	68e2      	ldr	r2, [r4, #12]
 80203f4:	3318      	adds	r3, #24
 80203f6:	3a01      	subs	r2, #1
 80203f8:	60e2      	str	r2, [r4, #12]
 80203fa:	60a3      	str	r3, [r4, #8]
 80203fc:	2a00      	cmp	r2, #0
 80203fe:	d1dc      	bne.n	80203ba <localtime_r+0x14a>
 8020400:	6923      	ldr	r3, [r4, #16]
 8020402:	3b01      	subs	r3, #1
 8020404:	d405      	bmi.n	8020412 <localtime_r+0x1a2>
 8020406:	6123      	str	r3, [r4, #16]
 8020408:	6923      	ldr	r3, [r4, #16]
 802040a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802040e:	60e3      	str	r3, [r4, #12]
 8020410:	e7d3      	b.n	80203ba <localtime_r+0x14a>
 8020412:	230b      	movs	r3, #11
 8020414:	6123      	str	r3, [r4, #16]
 8020416:	6963      	ldr	r3, [r4, #20]
 8020418:	1e5a      	subs	r2, r3, #1
 802041a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802041e:	6162      	str	r2, [r4, #20]
 8020420:	079a      	lsls	r2, r3, #30
 8020422:	d105      	bne.n	8020430 <localtime_r+0x1c0>
 8020424:	2164      	movs	r1, #100	; 0x64
 8020426:	fb93 f2f1 	sdiv	r2, r3, r1
 802042a:	fb01 3212 	mls	r2, r1, r2, r3
 802042e:	b962      	cbnz	r2, 802044a <localtime_r+0x1da>
 8020430:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8020434:	fb93 f1f2 	sdiv	r1, r3, r2
 8020438:	fb02 3311 	mls	r3, r2, r1, r3
 802043c:	fab3 f383 	clz	r3, r3
 8020440:	095b      	lsrs	r3, r3, #5
 8020442:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020446:	61e3      	str	r3, [r4, #28]
 8020448:	e7de      	b.n	8020408 <localtime_r+0x198>
 802044a:	2301      	movs	r3, #1
 802044c:	e7f9      	b.n	8020442 <localtime_r+0x1d2>
 802044e:	bf00      	nop
 8020450:	08026cb0 	.word	0x08026cb0
 8020454:	2400f3c0 	.word	0x2400f3c0

08020458 <malloc>:
 8020458:	4b02      	ldr	r3, [pc, #8]	; (8020464 <malloc+0xc>)
 802045a:	4601      	mov	r1, r0
 802045c:	6818      	ldr	r0, [r3, #0]
 802045e:	f000 b88d 	b.w	802057c <_malloc_r>
 8020462:	bf00      	nop
 8020464:	240000b8 	.word	0x240000b8

08020468 <free>:
 8020468:	4b02      	ldr	r3, [pc, #8]	; (8020474 <free+0xc>)
 802046a:	4601      	mov	r1, r0
 802046c:	6818      	ldr	r0, [r3, #0]
 802046e:	f000 b819 	b.w	80204a4 <_free_r>
 8020472:	bf00      	nop
 8020474:	240000b8 	.word	0x240000b8

08020478 <memcpy>:
 8020478:	440a      	add	r2, r1
 802047a:	4291      	cmp	r1, r2
 802047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020480:	d100      	bne.n	8020484 <memcpy+0xc>
 8020482:	4770      	bx	lr
 8020484:	b510      	push	{r4, lr}
 8020486:	f811 4b01 	ldrb.w	r4, [r1], #1
 802048a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802048e:	4291      	cmp	r1, r2
 8020490:	d1f9      	bne.n	8020486 <memcpy+0xe>
 8020492:	bd10      	pop	{r4, pc}

08020494 <memset>:
 8020494:	4402      	add	r2, r0
 8020496:	4603      	mov	r3, r0
 8020498:	4293      	cmp	r3, r2
 802049a:	d100      	bne.n	802049e <memset+0xa>
 802049c:	4770      	bx	lr
 802049e:	f803 1b01 	strb.w	r1, [r3], #1
 80204a2:	e7f9      	b.n	8020498 <memset+0x4>

080204a4 <_free_r>:
 80204a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80204a6:	2900      	cmp	r1, #0
 80204a8:	d044      	beq.n	8020534 <_free_r+0x90>
 80204aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80204ae:	9001      	str	r0, [sp, #4]
 80204b0:	2b00      	cmp	r3, #0
 80204b2:	f1a1 0404 	sub.w	r4, r1, #4
 80204b6:	bfb8      	it	lt
 80204b8:	18e4      	addlt	r4, r4, r3
 80204ba:	f001 fa89 	bl	80219d0 <__malloc_lock>
 80204be:	4a1e      	ldr	r2, [pc, #120]	; (8020538 <_free_r+0x94>)
 80204c0:	9801      	ldr	r0, [sp, #4]
 80204c2:	6813      	ldr	r3, [r2, #0]
 80204c4:	b933      	cbnz	r3, 80204d4 <_free_r+0x30>
 80204c6:	6063      	str	r3, [r4, #4]
 80204c8:	6014      	str	r4, [r2, #0]
 80204ca:	b003      	add	sp, #12
 80204cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80204d0:	f001 ba84 	b.w	80219dc <__malloc_unlock>
 80204d4:	42a3      	cmp	r3, r4
 80204d6:	d908      	bls.n	80204ea <_free_r+0x46>
 80204d8:	6825      	ldr	r5, [r4, #0]
 80204da:	1961      	adds	r1, r4, r5
 80204dc:	428b      	cmp	r3, r1
 80204de:	bf01      	itttt	eq
 80204e0:	6819      	ldreq	r1, [r3, #0]
 80204e2:	685b      	ldreq	r3, [r3, #4]
 80204e4:	1949      	addeq	r1, r1, r5
 80204e6:	6021      	streq	r1, [r4, #0]
 80204e8:	e7ed      	b.n	80204c6 <_free_r+0x22>
 80204ea:	461a      	mov	r2, r3
 80204ec:	685b      	ldr	r3, [r3, #4]
 80204ee:	b10b      	cbz	r3, 80204f4 <_free_r+0x50>
 80204f0:	42a3      	cmp	r3, r4
 80204f2:	d9fa      	bls.n	80204ea <_free_r+0x46>
 80204f4:	6811      	ldr	r1, [r2, #0]
 80204f6:	1855      	adds	r5, r2, r1
 80204f8:	42a5      	cmp	r5, r4
 80204fa:	d10b      	bne.n	8020514 <_free_r+0x70>
 80204fc:	6824      	ldr	r4, [r4, #0]
 80204fe:	4421      	add	r1, r4
 8020500:	1854      	adds	r4, r2, r1
 8020502:	42a3      	cmp	r3, r4
 8020504:	6011      	str	r1, [r2, #0]
 8020506:	d1e0      	bne.n	80204ca <_free_r+0x26>
 8020508:	681c      	ldr	r4, [r3, #0]
 802050a:	685b      	ldr	r3, [r3, #4]
 802050c:	6053      	str	r3, [r2, #4]
 802050e:	4421      	add	r1, r4
 8020510:	6011      	str	r1, [r2, #0]
 8020512:	e7da      	b.n	80204ca <_free_r+0x26>
 8020514:	d902      	bls.n	802051c <_free_r+0x78>
 8020516:	230c      	movs	r3, #12
 8020518:	6003      	str	r3, [r0, #0]
 802051a:	e7d6      	b.n	80204ca <_free_r+0x26>
 802051c:	6825      	ldr	r5, [r4, #0]
 802051e:	1961      	adds	r1, r4, r5
 8020520:	428b      	cmp	r3, r1
 8020522:	bf04      	itt	eq
 8020524:	6819      	ldreq	r1, [r3, #0]
 8020526:	685b      	ldreq	r3, [r3, #4]
 8020528:	6063      	str	r3, [r4, #4]
 802052a:	bf04      	itt	eq
 802052c:	1949      	addeq	r1, r1, r5
 802052e:	6021      	streq	r1, [r4, #0]
 8020530:	6054      	str	r4, [r2, #4]
 8020532:	e7ca      	b.n	80204ca <_free_r+0x26>
 8020534:	b003      	add	sp, #12
 8020536:	bd30      	pop	{r4, r5, pc}
 8020538:	2400f294 	.word	0x2400f294

0802053c <sbrk_aligned>:
 802053c:	b570      	push	{r4, r5, r6, lr}
 802053e:	4e0e      	ldr	r6, [pc, #56]	; (8020578 <sbrk_aligned+0x3c>)
 8020540:	460c      	mov	r4, r1
 8020542:	6831      	ldr	r1, [r6, #0]
 8020544:	4605      	mov	r5, r0
 8020546:	b911      	cbnz	r1, 802054e <sbrk_aligned+0x12>
 8020548:	f000 fb7a 	bl	8020c40 <_sbrk_r>
 802054c:	6030      	str	r0, [r6, #0]
 802054e:	4621      	mov	r1, r4
 8020550:	4628      	mov	r0, r5
 8020552:	f000 fb75 	bl	8020c40 <_sbrk_r>
 8020556:	1c43      	adds	r3, r0, #1
 8020558:	d00a      	beq.n	8020570 <sbrk_aligned+0x34>
 802055a:	1cc4      	adds	r4, r0, #3
 802055c:	f024 0403 	bic.w	r4, r4, #3
 8020560:	42a0      	cmp	r0, r4
 8020562:	d007      	beq.n	8020574 <sbrk_aligned+0x38>
 8020564:	1a21      	subs	r1, r4, r0
 8020566:	4628      	mov	r0, r5
 8020568:	f000 fb6a 	bl	8020c40 <_sbrk_r>
 802056c:	3001      	adds	r0, #1
 802056e:	d101      	bne.n	8020574 <sbrk_aligned+0x38>
 8020570:	f04f 34ff 	mov.w	r4, #4294967295
 8020574:	4620      	mov	r0, r4
 8020576:	bd70      	pop	{r4, r5, r6, pc}
 8020578:	2400f298 	.word	0x2400f298

0802057c <_malloc_r>:
 802057c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020580:	1ccd      	adds	r5, r1, #3
 8020582:	f025 0503 	bic.w	r5, r5, #3
 8020586:	3508      	adds	r5, #8
 8020588:	2d0c      	cmp	r5, #12
 802058a:	bf38      	it	cc
 802058c:	250c      	movcc	r5, #12
 802058e:	2d00      	cmp	r5, #0
 8020590:	4607      	mov	r7, r0
 8020592:	db01      	blt.n	8020598 <_malloc_r+0x1c>
 8020594:	42a9      	cmp	r1, r5
 8020596:	d905      	bls.n	80205a4 <_malloc_r+0x28>
 8020598:	230c      	movs	r3, #12
 802059a:	603b      	str	r3, [r7, #0]
 802059c:	2600      	movs	r6, #0
 802059e:	4630      	mov	r0, r6
 80205a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80205a4:	4e2e      	ldr	r6, [pc, #184]	; (8020660 <_malloc_r+0xe4>)
 80205a6:	f001 fa13 	bl	80219d0 <__malloc_lock>
 80205aa:	6833      	ldr	r3, [r6, #0]
 80205ac:	461c      	mov	r4, r3
 80205ae:	bb34      	cbnz	r4, 80205fe <_malloc_r+0x82>
 80205b0:	4629      	mov	r1, r5
 80205b2:	4638      	mov	r0, r7
 80205b4:	f7ff ffc2 	bl	802053c <sbrk_aligned>
 80205b8:	1c43      	adds	r3, r0, #1
 80205ba:	4604      	mov	r4, r0
 80205bc:	d14d      	bne.n	802065a <_malloc_r+0xde>
 80205be:	6834      	ldr	r4, [r6, #0]
 80205c0:	4626      	mov	r6, r4
 80205c2:	2e00      	cmp	r6, #0
 80205c4:	d140      	bne.n	8020648 <_malloc_r+0xcc>
 80205c6:	6823      	ldr	r3, [r4, #0]
 80205c8:	4631      	mov	r1, r6
 80205ca:	4638      	mov	r0, r7
 80205cc:	eb04 0803 	add.w	r8, r4, r3
 80205d0:	f000 fb36 	bl	8020c40 <_sbrk_r>
 80205d4:	4580      	cmp	r8, r0
 80205d6:	d13a      	bne.n	802064e <_malloc_r+0xd2>
 80205d8:	6821      	ldr	r1, [r4, #0]
 80205da:	3503      	adds	r5, #3
 80205dc:	1a6d      	subs	r5, r5, r1
 80205de:	f025 0503 	bic.w	r5, r5, #3
 80205e2:	3508      	adds	r5, #8
 80205e4:	2d0c      	cmp	r5, #12
 80205e6:	bf38      	it	cc
 80205e8:	250c      	movcc	r5, #12
 80205ea:	4629      	mov	r1, r5
 80205ec:	4638      	mov	r0, r7
 80205ee:	f7ff ffa5 	bl	802053c <sbrk_aligned>
 80205f2:	3001      	adds	r0, #1
 80205f4:	d02b      	beq.n	802064e <_malloc_r+0xd2>
 80205f6:	6823      	ldr	r3, [r4, #0]
 80205f8:	442b      	add	r3, r5
 80205fa:	6023      	str	r3, [r4, #0]
 80205fc:	e00e      	b.n	802061c <_malloc_r+0xa0>
 80205fe:	6822      	ldr	r2, [r4, #0]
 8020600:	1b52      	subs	r2, r2, r5
 8020602:	d41e      	bmi.n	8020642 <_malloc_r+0xc6>
 8020604:	2a0b      	cmp	r2, #11
 8020606:	d916      	bls.n	8020636 <_malloc_r+0xba>
 8020608:	1961      	adds	r1, r4, r5
 802060a:	42a3      	cmp	r3, r4
 802060c:	6025      	str	r5, [r4, #0]
 802060e:	bf18      	it	ne
 8020610:	6059      	strne	r1, [r3, #4]
 8020612:	6863      	ldr	r3, [r4, #4]
 8020614:	bf08      	it	eq
 8020616:	6031      	streq	r1, [r6, #0]
 8020618:	5162      	str	r2, [r4, r5]
 802061a:	604b      	str	r3, [r1, #4]
 802061c:	4638      	mov	r0, r7
 802061e:	f104 060b 	add.w	r6, r4, #11
 8020622:	f001 f9db 	bl	80219dc <__malloc_unlock>
 8020626:	f026 0607 	bic.w	r6, r6, #7
 802062a:	1d23      	adds	r3, r4, #4
 802062c:	1af2      	subs	r2, r6, r3
 802062e:	d0b6      	beq.n	802059e <_malloc_r+0x22>
 8020630:	1b9b      	subs	r3, r3, r6
 8020632:	50a3      	str	r3, [r4, r2]
 8020634:	e7b3      	b.n	802059e <_malloc_r+0x22>
 8020636:	6862      	ldr	r2, [r4, #4]
 8020638:	42a3      	cmp	r3, r4
 802063a:	bf0c      	ite	eq
 802063c:	6032      	streq	r2, [r6, #0]
 802063e:	605a      	strne	r2, [r3, #4]
 8020640:	e7ec      	b.n	802061c <_malloc_r+0xa0>
 8020642:	4623      	mov	r3, r4
 8020644:	6864      	ldr	r4, [r4, #4]
 8020646:	e7b2      	b.n	80205ae <_malloc_r+0x32>
 8020648:	4634      	mov	r4, r6
 802064a:	6876      	ldr	r6, [r6, #4]
 802064c:	e7b9      	b.n	80205c2 <_malloc_r+0x46>
 802064e:	230c      	movs	r3, #12
 8020650:	603b      	str	r3, [r7, #0]
 8020652:	4638      	mov	r0, r7
 8020654:	f001 f9c2 	bl	80219dc <__malloc_unlock>
 8020658:	e7a1      	b.n	802059e <_malloc_r+0x22>
 802065a:	6025      	str	r5, [r4, #0]
 802065c:	e7de      	b.n	802061c <_malloc_r+0xa0>
 802065e:	bf00      	nop
 8020660:	2400f294 	.word	0x2400f294

08020664 <__sfputc_r>:
 8020664:	6893      	ldr	r3, [r2, #8]
 8020666:	3b01      	subs	r3, #1
 8020668:	2b00      	cmp	r3, #0
 802066a:	b410      	push	{r4}
 802066c:	6093      	str	r3, [r2, #8]
 802066e:	da08      	bge.n	8020682 <__sfputc_r+0x1e>
 8020670:	6994      	ldr	r4, [r2, #24]
 8020672:	42a3      	cmp	r3, r4
 8020674:	db01      	blt.n	802067a <__sfputc_r+0x16>
 8020676:	290a      	cmp	r1, #10
 8020678:	d103      	bne.n	8020682 <__sfputc_r+0x1e>
 802067a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802067e:	f000 bd6f 	b.w	8021160 <__swbuf_r>
 8020682:	6813      	ldr	r3, [r2, #0]
 8020684:	1c58      	adds	r0, r3, #1
 8020686:	6010      	str	r0, [r2, #0]
 8020688:	7019      	strb	r1, [r3, #0]
 802068a:	4608      	mov	r0, r1
 802068c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020690:	4770      	bx	lr

08020692 <__sfputs_r>:
 8020692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020694:	4606      	mov	r6, r0
 8020696:	460f      	mov	r7, r1
 8020698:	4614      	mov	r4, r2
 802069a:	18d5      	adds	r5, r2, r3
 802069c:	42ac      	cmp	r4, r5
 802069e:	d101      	bne.n	80206a4 <__sfputs_r+0x12>
 80206a0:	2000      	movs	r0, #0
 80206a2:	e007      	b.n	80206b4 <__sfputs_r+0x22>
 80206a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80206a8:	463a      	mov	r2, r7
 80206aa:	4630      	mov	r0, r6
 80206ac:	f7ff ffda 	bl	8020664 <__sfputc_r>
 80206b0:	1c43      	adds	r3, r0, #1
 80206b2:	d1f3      	bne.n	802069c <__sfputs_r+0xa>
 80206b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080206b8 <_vfiprintf_r>:
 80206b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206bc:	460d      	mov	r5, r1
 80206be:	b09d      	sub	sp, #116	; 0x74
 80206c0:	4614      	mov	r4, r2
 80206c2:	4698      	mov	r8, r3
 80206c4:	4606      	mov	r6, r0
 80206c6:	b118      	cbz	r0, 80206d0 <_vfiprintf_r+0x18>
 80206c8:	6983      	ldr	r3, [r0, #24]
 80206ca:	b90b      	cbnz	r3, 80206d0 <_vfiprintf_r+0x18>
 80206cc:	f000 ff84 	bl	80215d8 <__sinit>
 80206d0:	4b89      	ldr	r3, [pc, #548]	; (80208f8 <_vfiprintf_r+0x240>)
 80206d2:	429d      	cmp	r5, r3
 80206d4:	d11b      	bne.n	802070e <_vfiprintf_r+0x56>
 80206d6:	6875      	ldr	r5, [r6, #4]
 80206d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80206da:	07d9      	lsls	r1, r3, #31
 80206dc:	d405      	bmi.n	80206ea <_vfiprintf_r+0x32>
 80206de:	89ab      	ldrh	r3, [r5, #12]
 80206e0:	059a      	lsls	r2, r3, #22
 80206e2:	d402      	bmi.n	80206ea <_vfiprintf_r+0x32>
 80206e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80206e6:	f001 f90b 	bl	8021900 <__retarget_lock_acquire_recursive>
 80206ea:	89ab      	ldrh	r3, [r5, #12]
 80206ec:	071b      	lsls	r3, r3, #28
 80206ee:	d501      	bpl.n	80206f4 <_vfiprintf_r+0x3c>
 80206f0:	692b      	ldr	r3, [r5, #16]
 80206f2:	b9eb      	cbnz	r3, 8020730 <_vfiprintf_r+0x78>
 80206f4:	4629      	mov	r1, r5
 80206f6:	4630      	mov	r0, r6
 80206f8:	f000 fd84 	bl	8021204 <__swsetup_r>
 80206fc:	b1c0      	cbz	r0, 8020730 <_vfiprintf_r+0x78>
 80206fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020700:	07dc      	lsls	r4, r3, #31
 8020702:	d50e      	bpl.n	8020722 <_vfiprintf_r+0x6a>
 8020704:	f04f 30ff 	mov.w	r0, #4294967295
 8020708:	b01d      	add	sp, #116	; 0x74
 802070a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802070e:	4b7b      	ldr	r3, [pc, #492]	; (80208fc <_vfiprintf_r+0x244>)
 8020710:	429d      	cmp	r5, r3
 8020712:	d101      	bne.n	8020718 <_vfiprintf_r+0x60>
 8020714:	68b5      	ldr	r5, [r6, #8]
 8020716:	e7df      	b.n	80206d8 <_vfiprintf_r+0x20>
 8020718:	4b79      	ldr	r3, [pc, #484]	; (8020900 <_vfiprintf_r+0x248>)
 802071a:	429d      	cmp	r5, r3
 802071c:	bf08      	it	eq
 802071e:	68f5      	ldreq	r5, [r6, #12]
 8020720:	e7da      	b.n	80206d8 <_vfiprintf_r+0x20>
 8020722:	89ab      	ldrh	r3, [r5, #12]
 8020724:	0598      	lsls	r0, r3, #22
 8020726:	d4ed      	bmi.n	8020704 <_vfiprintf_r+0x4c>
 8020728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802072a:	f001 f8eb 	bl	8021904 <__retarget_lock_release_recursive>
 802072e:	e7e9      	b.n	8020704 <_vfiprintf_r+0x4c>
 8020730:	2300      	movs	r3, #0
 8020732:	9309      	str	r3, [sp, #36]	; 0x24
 8020734:	2320      	movs	r3, #32
 8020736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802073a:	f8cd 800c 	str.w	r8, [sp, #12]
 802073e:	2330      	movs	r3, #48	; 0x30
 8020740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020904 <_vfiprintf_r+0x24c>
 8020744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020748:	f04f 0901 	mov.w	r9, #1
 802074c:	4623      	mov	r3, r4
 802074e:	469a      	mov	sl, r3
 8020750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020754:	b10a      	cbz	r2, 802075a <_vfiprintf_r+0xa2>
 8020756:	2a25      	cmp	r2, #37	; 0x25
 8020758:	d1f9      	bne.n	802074e <_vfiprintf_r+0x96>
 802075a:	ebba 0b04 	subs.w	fp, sl, r4
 802075e:	d00b      	beq.n	8020778 <_vfiprintf_r+0xc0>
 8020760:	465b      	mov	r3, fp
 8020762:	4622      	mov	r2, r4
 8020764:	4629      	mov	r1, r5
 8020766:	4630      	mov	r0, r6
 8020768:	f7ff ff93 	bl	8020692 <__sfputs_r>
 802076c:	3001      	adds	r0, #1
 802076e:	f000 80aa 	beq.w	80208c6 <_vfiprintf_r+0x20e>
 8020772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020774:	445a      	add	r2, fp
 8020776:	9209      	str	r2, [sp, #36]	; 0x24
 8020778:	f89a 3000 	ldrb.w	r3, [sl]
 802077c:	2b00      	cmp	r3, #0
 802077e:	f000 80a2 	beq.w	80208c6 <_vfiprintf_r+0x20e>
 8020782:	2300      	movs	r3, #0
 8020784:	f04f 32ff 	mov.w	r2, #4294967295
 8020788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802078c:	f10a 0a01 	add.w	sl, sl, #1
 8020790:	9304      	str	r3, [sp, #16]
 8020792:	9307      	str	r3, [sp, #28]
 8020794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020798:	931a      	str	r3, [sp, #104]	; 0x68
 802079a:	4654      	mov	r4, sl
 802079c:	2205      	movs	r2, #5
 802079e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80207a2:	4858      	ldr	r0, [pc, #352]	; (8020904 <_vfiprintf_r+0x24c>)
 80207a4:	f7df fd9c 	bl	80002e0 <memchr>
 80207a8:	9a04      	ldr	r2, [sp, #16]
 80207aa:	b9d8      	cbnz	r0, 80207e4 <_vfiprintf_r+0x12c>
 80207ac:	06d1      	lsls	r1, r2, #27
 80207ae:	bf44      	itt	mi
 80207b0:	2320      	movmi	r3, #32
 80207b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80207b6:	0713      	lsls	r3, r2, #28
 80207b8:	bf44      	itt	mi
 80207ba:	232b      	movmi	r3, #43	; 0x2b
 80207bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80207c0:	f89a 3000 	ldrb.w	r3, [sl]
 80207c4:	2b2a      	cmp	r3, #42	; 0x2a
 80207c6:	d015      	beq.n	80207f4 <_vfiprintf_r+0x13c>
 80207c8:	9a07      	ldr	r2, [sp, #28]
 80207ca:	4654      	mov	r4, sl
 80207cc:	2000      	movs	r0, #0
 80207ce:	f04f 0c0a 	mov.w	ip, #10
 80207d2:	4621      	mov	r1, r4
 80207d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80207d8:	3b30      	subs	r3, #48	; 0x30
 80207da:	2b09      	cmp	r3, #9
 80207dc:	d94e      	bls.n	802087c <_vfiprintf_r+0x1c4>
 80207de:	b1b0      	cbz	r0, 802080e <_vfiprintf_r+0x156>
 80207e0:	9207      	str	r2, [sp, #28]
 80207e2:	e014      	b.n	802080e <_vfiprintf_r+0x156>
 80207e4:	eba0 0308 	sub.w	r3, r0, r8
 80207e8:	fa09 f303 	lsl.w	r3, r9, r3
 80207ec:	4313      	orrs	r3, r2
 80207ee:	9304      	str	r3, [sp, #16]
 80207f0:	46a2      	mov	sl, r4
 80207f2:	e7d2      	b.n	802079a <_vfiprintf_r+0xe2>
 80207f4:	9b03      	ldr	r3, [sp, #12]
 80207f6:	1d19      	adds	r1, r3, #4
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	9103      	str	r1, [sp, #12]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	bfbb      	ittet	lt
 8020800:	425b      	neglt	r3, r3
 8020802:	f042 0202 	orrlt.w	r2, r2, #2
 8020806:	9307      	strge	r3, [sp, #28]
 8020808:	9307      	strlt	r3, [sp, #28]
 802080a:	bfb8      	it	lt
 802080c:	9204      	strlt	r2, [sp, #16]
 802080e:	7823      	ldrb	r3, [r4, #0]
 8020810:	2b2e      	cmp	r3, #46	; 0x2e
 8020812:	d10c      	bne.n	802082e <_vfiprintf_r+0x176>
 8020814:	7863      	ldrb	r3, [r4, #1]
 8020816:	2b2a      	cmp	r3, #42	; 0x2a
 8020818:	d135      	bne.n	8020886 <_vfiprintf_r+0x1ce>
 802081a:	9b03      	ldr	r3, [sp, #12]
 802081c:	1d1a      	adds	r2, r3, #4
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	9203      	str	r2, [sp, #12]
 8020822:	2b00      	cmp	r3, #0
 8020824:	bfb8      	it	lt
 8020826:	f04f 33ff 	movlt.w	r3, #4294967295
 802082a:	3402      	adds	r4, #2
 802082c:	9305      	str	r3, [sp, #20]
 802082e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020914 <_vfiprintf_r+0x25c>
 8020832:	7821      	ldrb	r1, [r4, #0]
 8020834:	2203      	movs	r2, #3
 8020836:	4650      	mov	r0, sl
 8020838:	f7df fd52 	bl	80002e0 <memchr>
 802083c:	b140      	cbz	r0, 8020850 <_vfiprintf_r+0x198>
 802083e:	2340      	movs	r3, #64	; 0x40
 8020840:	eba0 000a 	sub.w	r0, r0, sl
 8020844:	fa03 f000 	lsl.w	r0, r3, r0
 8020848:	9b04      	ldr	r3, [sp, #16]
 802084a:	4303      	orrs	r3, r0
 802084c:	3401      	adds	r4, #1
 802084e:	9304      	str	r3, [sp, #16]
 8020850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020854:	482c      	ldr	r0, [pc, #176]	; (8020908 <_vfiprintf_r+0x250>)
 8020856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802085a:	2206      	movs	r2, #6
 802085c:	f7df fd40 	bl	80002e0 <memchr>
 8020860:	2800      	cmp	r0, #0
 8020862:	d03f      	beq.n	80208e4 <_vfiprintf_r+0x22c>
 8020864:	4b29      	ldr	r3, [pc, #164]	; (802090c <_vfiprintf_r+0x254>)
 8020866:	bb1b      	cbnz	r3, 80208b0 <_vfiprintf_r+0x1f8>
 8020868:	9b03      	ldr	r3, [sp, #12]
 802086a:	3307      	adds	r3, #7
 802086c:	f023 0307 	bic.w	r3, r3, #7
 8020870:	3308      	adds	r3, #8
 8020872:	9303      	str	r3, [sp, #12]
 8020874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020876:	443b      	add	r3, r7
 8020878:	9309      	str	r3, [sp, #36]	; 0x24
 802087a:	e767      	b.n	802074c <_vfiprintf_r+0x94>
 802087c:	fb0c 3202 	mla	r2, ip, r2, r3
 8020880:	460c      	mov	r4, r1
 8020882:	2001      	movs	r0, #1
 8020884:	e7a5      	b.n	80207d2 <_vfiprintf_r+0x11a>
 8020886:	2300      	movs	r3, #0
 8020888:	3401      	adds	r4, #1
 802088a:	9305      	str	r3, [sp, #20]
 802088c:	4619      	mov	r1, r3
 802088e:	f04f 0c0a 	mov.w	ip, #10
 8020892:	4620      	mov	r0, r4
 8020894:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020898:	3a30      	subs	r2, #48	; 0x30
 802089a:	2a09      	cmp	r2, #9
 802089c:	d903      	bls.n	80208a6 <_vfiprintf_r+0x1ee>
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d0c5      	beq.n	802082e <_vfiprintf_r+0x176>
 80208a2:	9105      	str	r1, [sp, #20]
 80208a4:	e7c3      	b.n	802082e <_vfiprintf_r+0x176>
 80208a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80208aa:	4604      	mov	r4, r0
 80208ac:	2301      	movs	r3, #1
 80208ae:	e7f0      	b.n	8020892 <_vfiprintf_r+0x1da>
 80208b0:	ab03      	add	r3, sp, #12
 80208b2:	9300      	str	r3, [sp, #0]
 80208b4:	462a      	mov	r2, r5
 80208b6:	4b16      	ldr	r3, [pc, #88]	; (8020910 <_vfiprintf_r+0x258>)
 80208b8:	a904      	add	r1, sp, #16
 80208ba:	4630      	mov	r0, r6
 80208bc:	f3af 8000 	nop.w
 80208c0:	4607      	mov	r7, r0
 80208c2:	1c78      	adds	r0, r7, #1
 80208c4:	d1d6      	bne.n	8020874 <_vfiprintf_r+0x1bc>
 80208c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80208c8:	07d9      	lsls	r1, r3, #31
 80208ca:	d405      	bmi.n	80208d8 <_vfiprintf_r+0x220>
 80208cc:	89ab      	ldrh	r3, [r5, #12]
 80208ce:	059a      	lsls	r2, r3, #22
 80208d0:	d402      	bmi.n	80208d8 <_vfiprintf_r+0x220>
 80208d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80208d4:	f001 f816 	bl	8021904 <__retarget_lock_release_recursive>
 80208d8:	89ab      	ldrh	r3, [r5, #12]
 80208da:	065b      	lsls	r3, r3, #25
 80208dc:	f53f af12 	bmi.w	8020704 <_vfiprintf_r+0x4c>
 80208e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80208e2:	e711      	b.n	8020708 <_vfiprintf_r+0x50>
 80208e4:	ab03      	add	r3, sp, #12
 80208e6:	9300      	str	r3, [sp, #0]
 80208e8:	462a      	mov	r2, r5
 80208ea:	4b09      	ldr	r3, [pc, #36]	; (8020910 <_vfiprintf_r+0x258>)
 80208ec:	a904      	add	r1, sp, #16
 80208ee:	4630      	mov	r0, r6
 80208f0:	f000 f880 	bl	80209f4 <_printf_i>
 80208f4:	e7e4      	b.n	80208c0 <_vfiprintf_r+0x208>
 80208f6:	bf00      	nop
 80208f8:	08026da4 	.word	0x08026da4
 80208fc:	08026dc4 	.word	0x08026dc4
 8020900:	08026d84 	.word	0x08026d84
 8020904:	08026d10 	.word	0x08026d10
 8020908:	08026d1a 	.word	0x08026d1a
 802090c:	00000000 	.word	0x00000000
 8020910:	08020693 	.word	0x08020693
 8020914:	08026d16 	.word	0x08026d16

08020918 <_printf_common>:
 8020918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802091c:	4616      	mov	r6, r2
 802091e:	4699      	mov	r9, r3
 8020920:	688a      	ldr	r2, [r1, #8]
 8020922:	690b      	ldr	r3, [r1, #16]
 8020924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020928:	4293      	cmp	r3, r2
 802092a:	bfb8      	it	lt
 802092c:	4613      	movlt	r3, r2
 802092e:	6033      	str	r3, [r6, #0]
 8020930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020934:	4607      	mov	r7, r0
 8020936:	460c      	mov	r4, r1
 8020938:	b10a      	cbz	r2, 802093e <_printf_common+0x26>
 802093a:	3301      	adds	r3, #1
 802093c:	6033      	str	r3, [r6, #0]
 802093e:	6823      	ldr	r3, [r4, #0]
 8020940:	0699      	lsls	r1, r3, #26
 8020942:	bf42      	ittt	mi
 8020944:	6833      	ldrmi	r3, [r6, #0]
 8020946:	3302      	addmi	r3, #2
 8020948:	6033      	strmi	r3, [r6, #0]
 802094a:	6825      	ldr	r5, [r4, #0]
 802094c:	f015 0506 	ands.w	r5, r5, #6
 8020950:	d106      	bne.n	8020960 <_printf_common+0x48>
 8020952:	f104 0a19 	add.w	sl, r4, #25
 8020956:	68e3      	ldr	r3, [r4, #12]
 8020958:	6832      	ldr	r2, [r6, #0]
 802095a:	1a9b      	subs	r3, r3, r2
 802095c:	42ab      	cmp	r3, r5
 802095e:	dc26      	bgt.n	80209ae <_printf_common+0x96>
 8020960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020964:	1e13      	subs	r3, r2, #0
 8020966:	6822      	ldr	r2, [r4, #0]
 8020968:	bf18      	it	ne
 802096a:	2301      	movne	r3, #1
 802096c:	0692      	lsls	r2, r2, #26
 802096e:	d42b      	bmi.n	80209c8 <_printf_common+0xb0>
 8020970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020974:	4649      	mov	r1, r9
 8020976:	4638      	mov	r0, r7
 8020978:	47c0      	blx	r8
 802097a:	3001      	adds	r0, #1
 802097c:	d01e      	beq.n	80209bc <_printf_common+0xa4>
 802097e:	6823      	ldr	r3, [r4, #0]
 8020980:	68e5      	ldr	r5, [r4, #12]
 8020982:	6832      	ldr	r2, [r6, #0]
 8020984:	f003 0306 	and.w	r3, r3, #6
 8020988:	2b04      	cmp	r3, #4
 802098a:	bf08      	it	eq
 802098c:	1aad      	subeq	r5, r5, r2
 802098e:	68a3      	ldr	r3, [r4, #8]
 8020990:	6922      	ldr	r2, [r4, #16]
 8020992:	bf0c      	ite	eq
 8020994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020998:	2500      	movne	r5, #0
 802099a:	4293      	cmp	r3, r2
 802099c:	bfc4      	itt	gt
 802099e:	1a9b      	subgt	r3, r3, r2
 80209a0:	18ed      	addgt	r5, r5, r3
 80209a2:	2600      	movs	r6, #0
 80209a4:	341a      	adds	r4, #26
 80209a6:	42b5      	cmp	r5, r6
 80209a8:	d11a      	bne.n	80209e0 <_printf_common+0xc8>
 80209aa:	2000      	movs	r0, #0
 80209ac:	e008      	b.n	80209c0 <_printf_common+0xa8>
 80209ae:	2301      	movs	r3, #1
 80209b0:	4652      	mov	r2, sl
 80209b2:	4649      	mov	r1, r9
 80209b4:	4638      	mov	r0, r7
 80209b6:	47c0      	blx	r8
 80209b8:	3001      	adds	r0, #1
 80209ba:	d103      	bne.n	80209c4 <_printf_common+0xac>
 80209bc:	f04f 30ff 	mov.w	r0, #4294967295
 80209c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209c4:	3501      	adds	r5, #1
 80209c6:	e7c6      	b.n	8020956 <_printf_common+0x3e>
 80209c8:	18e1      	adds	r1, r4, r3
 80209ca:	1c5a      	adds	r2, r3, #1
 80209cc:	2030      	movs	r0, #48	; 0x30
 80209ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80209d2:	4422      	add	r2, r4
 80209d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80209d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80209dc:	3302      	adds	r3, #2
 80209de:	e7c7      	b.n	8020970 <_printf_common+0x58>
 80209e0:	2301      	movs	r3, #1
 80209e2:	4622      	mov	r2, r4
 80209e4:	4649      	mov	r1, r9
 80209e6:	4638      	mov	r0, r7
 80209e8:	47c0      	blx	r8
 80209ea:	3001      	adds	r0, #1
 80209ec:	d0e6      	beq.n	80209bc <_printf_common+0xa4>
 80209ee:	3601      	adds	r6, #1
 80209f0:	e7d9      	b.n	80209a6 <_printf_common+0x8e>
	...

080209f4 <_printf_i>:
 80209f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80209f8:	7e0f      	ldrb	r7, [r1, #24]
 80209fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80209fc:	2f78      	cmp	r7, #120	; 0x78
 80209fe:	4691      	mov	r9, r2
 8020a00:	4680      	mov	r8, r0
 8020a02:	460c      	mov	r4, r1
 8020a04:	469a      	mov	sl, r3
 8020a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020a0a:	d807      	bhi.n	8020a1c <_printf_i+0x28>
 8020a0c:	2f62      	cmp	r7, #98	; 0x62
 8020a0e:	d80a      	bhi.n	8020a26 <_printf_i+0x32>
 8020a10:	2f00      	cmp	r7, #0
 8020a12:	f000 80d8 	beq.w	8020bc6 <_printf_i+0x1d2>
 8020a16:	2f58      	cmp	r7, #88	; 0x58
 8020a18:	f000 80a3 	beq.w	8020b62 <_printf_i+0x16e>
 8020a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020a24:	e03a      	b.n	8020a9c <_printf_i+0xa8>
 8020a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020a2a:	2b15      	cmp	r3, #21
 8020a2c:	d8f6      	bhi.n	8020a1c <_printf_i+0x28>
 8020a2e:	a101      	add	r1, pc, #4	; (adr r1, 8020a34 <_printf_i+0x40>)
 8020a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020a34:	08020a8d 	.word	0x08020a8d
 8020a38:	08020aa1 	.word	0x08020aa1
 8020a3c:	08020a1d 	.word	0x08020a1d
 8020a40:	08020a1d 	.word	0x08020a1d
 8020a44:	08020a1d 	.word	0x08020a1d
 8020a48:	08020a1d 	.word	0x08020a1d
 8020a4c:	08020aa1 	.word	0x08020aa1
 8020a50:	08020a1d 	.word	0x08020a1d
 8020a54:	08020a1d 	.word	0x08020a1d
 8020a58:	08020a1d 	.word	0x08020a1d
 8020a5c:	08020a1d 	.word	0x08020a1d
 8020a60:	08020bad 	.word	0x08020bad
 8020a64:	08020ad1 	.word	0x08020ad1
 8020a68:	08020b8f 	.word	0x08020b8f
 8020a6c:	08020a1d 	.word	0x08020a1d
 8020a70:	08020a1d 	.word	0x08020a1d
 8020a74:	08020bcf 	.word	0x08020bcf
 8020a78:	08020a1d 	.word	0x08020a1d
 8020a7c:	08020ad1 	.word	0x08020ad1
 8020a80:	08020a1d 	.word	0x08020a1d
 8020a84:	08020a1d 	.word	0x08020a1d
 8020a88:	08020b97 	.word	0x08020b97
 8020a8c:	682b      	ldr	r3, [r5, #0]
 8020a8e:	1d1a      	adds	r2, r3, #4
 8020a90:	681b      	ldr	r3, [r3, #0]
 8020a92:	602a      	str	r2, [r5, #0]
 8020a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020a9c:	2301      	movs	r3, #1
 8020a9e:	e0a3      	b.n	8020be8 <_printf_i+0x1f4>
 8020aa0:	6820      	ldr	r0, [r4, #0]
 8020aa2:	6829      	ldr	r1, [r5, #0]
 8020aa4:	0606      	lsls	r6, r0, #24
 8020aa6:	f101 0304 	add.w	r3, r1, #4
 8020aaa:	d50a      	bpl.n	8020ac2 <_printf_i+0xce>
 8020aac:	680e      	ldr	r6, [r1, #0]
 8020aae:	602b      	str	r3, [r5, #0]
 8020ab0:	2e00      	cmp	r6, #0
 8020ab2:	da03      	bge.n	8020abc <_printf_i+0xc8>
 8020ab4:	232d      	movs	r3, #45	; 0x2d
 8020ab6:	4276      	negs	r6, r6
 8020ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020abc:	485e      	ldr	r0, [pc, #376]	; (8020c38 <_printf_i+0x244>)
 8020abe:	230a      	movs	r3, #10
 8020ac0:	e019      	b.n	8020af6 <_printf_i+0x102>
 8020ac2:	680e      	ldr	r6, [r1, #0]
 8020ac4:	602b      	str	r3, [r5, #0]
 8020ac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020aca:	bf18      	it	ne
 8020acc:	b236      	sxthne	r6, r6
 8020ace:	e7ef      	b.n	8020ab0 <_printf_i+0xbc>
 8020ad0:	682b      	ldr	r3, [r5, #0]
 8020ad2:	6820      	ldr	r0, [r4, #0]
 8020ad4:	1d19      	adds	r1, r3, #4
 8020ad6:	6029      	str	r1, [r5, #0]
 8020ad8:	0601      	lsls	r1, r0, #24
 8020ada:	d501      	bpl.n	8020ae0 <_printf_i+0xec>
 8020adc:	681e      	ldr	r6, [r3, #0]
 8020ade:	e002      	b.n	8020ae6 <_printf_i+0xf2>
 8020ae0:	0646      	lsls	r6, r0, #25
 8020ae2:	d5fb      	bpl.n	8020adc <_printf_i+0xe8>
 8020ae4:	881e      	ldrh	r6, [r3, #0]
 8020ae6:	4854      	ldr	r0, [pc, #336]	; (8020c38 <_printf_i+0x244>)
 8020ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8020aea:	bf0c      	ite	eq
 8020aec:	2308      	moveq	r3, #8
 8020aee:	230a      	movne	r3, #10
 8020af0:	2100      	movs	r1, #0
 8020af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020af6:	6865      	ldr	r5, [r4, #4]
 8020af8:	60a5      	str	r5, [r4, #8]
 8020afa:	2d00      	cmp	r5, #0
 8020afc:	bfa2      	ittt	ge
 8020afe:	6821      	ldrge	r1, [r4, #0]
 8020b00:	f021 0104 	bicge.w	r1, r1, #4
 8020b04:	6021      	strge	r1, [r4, #0]
 8020b06:	b90e      	cbnz	r6, 8020b0c <_printf_i+0x118>
 8020b08:	2d00      	cmp	r5, #0
 8020b0a:	d04d      	beq.n	8020ba8 <_printf_i+0x1b4>
 8020b0c:	4615      	mov	r5, r2
 8020b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020b12:	fb03 6711 	mls	r7, r3, r1, r6
 8020b16:	5dc7      	ldrb	r7, [r0, r7]
 8020b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020b1c:	4637      	mov	r7, r6
 8020b1e:	42bb      	cmp	r3, r7
 8020b20:	460e      	mov	r6, r1
 8020b22:	d9f4      	bls.n	8020b0e <_printf_i+0x11a>
 8020b24:	2b08      	cmp	r3, #8
 8020b26:	d10b      	bne.n	8020b40 <_printf_i+0x14c>
 8020b28:	6823      	ldr	r3, [r4, #0]
 8020b2a:	07de      	lsls	r6, r3, #31
 8020b2c:	d508      	bpl.n	8020b40 <_printf_i+0x14c>
 8020b2e:	6923      	ldr	r3, [r4, #16]
 8020b30:	6861      	ldr	r1, [r4, #4]
 8020b32:	4299      	cmp	r1, r3
 8020b34:	bfde      	ittt	le
 8020b36:	2330      	movle	r3, #48	; 0x30
 8020b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020b40:	1b52      	subs	r2, r2, r5
 8020b42:	6122      	str	r2, [r4, #16]
 8020b44:	f8cd a000 	str.w	sl, [sp]
 8020b48:	464b      	mov	r3, r9
 8020b4a:	aa03      	add	r2, sp, #12
 8020b4c:	4621      	mov	r1, r4
 8020b4e:	4640      	mov	r0, r8
 8020b50:	f7ff fee2 	bl	8020918 <_printf_common>
 8020b54:	3001      	adds	r0, #1
 8020b56:	d14c      	bne.n	8020bf2 <_printf_i+0x1fe>
 8020b58:	f04f 30ff 	mov.w	r0, #4294967295
 8020b5c:	b004      	add	sp, #16
 8020b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b62:	4835      	ldr	r0, [pc, #212]	; (8020c38 <_printf_i+0x244>)
 8020b64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020b68:	6829      	ldr	r1, [r5, #0]
 8020b6a:	6823      	ldr	r3, [r4, #0]
 8020b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020b70:	6029      	str	r1, [r5, #0]
 8020b72:	061d      	lsls	r5, r3, #24
 8020b74:	d514      	bpl.n	8020ba0 <_printf_i+0x1ac>
 8020b76:	07df      	lsls	r7, r3, #31
 8020b78:	bf44      	itt	mi
 8020b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8020b7e:	6023      	strmi	r3, [r4, #0]
 8020b80:	b91e      	cbnz	r6, 8020b8a <_printf_i+0x196>
 8020b82:	6823      	ldr	r3, [r4, #0]
 8020b84:	f023 0320 	bic.w	r3, r3, #32
 8020b88:	6023      	str	r3, [r4, #0]
 8020b8a:	2310      	movs	r3, #16
 8020b8c:	e7b0      	b.n	8020af0 <_printf_i+0xfc>
 8020b8e:	6823      	ldr	r3, [r4, #0]
 8020b90:	f043 0320 	orr.w	r3, r3, #32
 8020b94:	6023      	str	r3, [r4, #0]
 8020b96:	2378      	movs	r3, #120	; 0x78
 8020b98:	4828      	ldr	r0, [pc, #160]	; (8020c3c <_printf_i+0x248>)
 8020b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020b9e:	e7e3      	b.n	8020b68 <_printf_i+0x174>
 8020ba0:	0659      	lsls	r1, r3, #25
 8020ba2:	bf48      	it	mi
 8020ba4:	b2b6      	uxthmi	r6, r6
 8020ba6:	e7e6      	b.n	8020b76 <_printf_i+0x182>
 8020ba8:	4615      	mov	r5, r2
 8020baa:	e7bb      	b.n	8020b24 <_printf_i+0x130>
 8020bac:	682b      	ldr	r3, [r5, #0]
 8020bae:	6826      	ldr	r6, [r4, #0]
 8020bb0:	6961      	ldr	r1, [r4, #20]
 8020bb2:	1d18      	adds	r0, r3, #4
 8020bb4:	6028      	str	r0, [r5, #0]
 8020bb6:	0635      	lsls	r5, r6, #24
 8020bb8:	681b      	ldr	r3, [r3, #0]
 8020bba:	d501      	bpl.n	8020bc0 <_printf_i+0x1cc>
 8020bbc:	6019      	str	r1, [r3, #0]
 8020bbe:	e002      	b.n	8020bc6 <_printf_i+0x1d2>
 8020bc0:	0670      	lsls	r0, r6, #25
 8020bc2:	d5fb      	bpl.n	8020bbc <_printf_i+0x1c8>
 8020bc4:	8019      	strh	r1, [r3, #0]
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	6123      	str	r3, [r4, #16]
 8020bca:	4615      	mov	r5, r2
 8020bcc:	e7ba      	b.n	8020b44 <_printf_i+0x150>
 8020bce:	682b      	ldr	r3, [r5, #0]
 8020bd0:	1d1a      	adds	r2, r3, #4
 8020bd2:	602a      	str	r2, [r5, #0]
 8020bd4:	681d      	ldr	r5, [r3, #0]
 8020bd6:	6862      	ldr	r2, [r4, #4]
 8020bd8:	2100      	movs	r1, #0
 8020bda:	4628      	mov	r0, r5
 8020bdc:	f7df fb80 	bl	80002e0 <memchr>
 8020be0:	b108      	cbz	r0, 8020be6 <_printf_i+0x1f2>
 8020be2:	1b40      	subs	r0, r0, r5
 8020be4:	6060      	str	r0, [r4, #4]
 8020be6:	6863      	ldr	r3, [r4, #4]
 8020be8:	6123      	str	r3, [r4, #16]
 8020bea:	2300      	movs	r3, #0
 8020bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020bf0:	e7a8      	b.n	8020b44 <_printf_i+0x150>
 8020bf2:	6923      	ldr	r3, [r4, #16]
 8020bf4:	462a      	mov	r2, r5
 8020bf6:	4649      	mov	r1, r9
 8020bf8:	4640      	mov	r0, r8
 8020bfa:	47d0      	blx	sl
 8020bfc:	3001      	adds	r0, #1
 8020bfe:	d0ab      	beq.n	8020b58 <_printf_i+0x164>
 8020c00:	6823      	ldr	r3, [r4, #0]
 8020c02:	079b      	lsls	r3, r3, #30
 8020c04:	d413      	bmi.n	8020c2e <_printf_i+0x23a>
 8020c06:	68e0      	ldr	r0, [r4, #12]
 8020c08:	9b03      	ldr	r3, [sp, #12]
 8020c0a:	4298      	cmp	r0, r3
 8020c0c:	bfb8      	it	lt
 8020c0e:	4618      	movlt	r0, r3
 8020c10:	e7a4      	b.n	8020b5c <_printf_i+0x168>
 8020c12:	2301      	movs	r3, #1
 8020c14:	4632      	mov	r2, r6
 8020c16:	4649      	mov	r1, r9
 8020c18:	4640      	mov	r0, r8
 8020c1a:	47d0      	blx	sl
 8020c1c:	3001      	adds	r0, #1
 8020c1e:	d09b      	beq.n	8020b58 <_printf_i+0x164>
 8020c20:	3501      	adds	r5, #1
 8020c22:	68e3      	ldr	r3, [r4, #12]
 8020c24:	9903      	ldr	r1, [sp, #12]
 8020c26:	1a5b      	subs	r3, r3, r1
 8020c28:	42ab      	cmp	r3, r5
 8020c2a:	dcf2      	bgt.n	8020c12 <_printf_i+0x21e>
 8020c2c:	e7eb      	b.n	8020c06 <_printf_i+0x212>
 8020c2e:	2500      	movs	r5, #0
 8020c30:	f104 0619 	add.w	r6, r4, #25
 8020c34:	e7f5      	b.n	8020c22 <_printf_i+0x22e>
 8020c36:	bf00      	nop
 8020c38:	08026d21 	.word	0x08026d21
 8020c3c:	08026d32 	.word	0x08026d32

08020c40 <_sbrk_r>:
 8020c40:	b538      	push	{r3, r4, r5, lr}
 8020c42:	4d06      	ldr	r5, [pc, #24]	; (8020c5c <_sbrk_r+0x1c>)
 8020c44:	2300      	movs	r3, #0
 8020c46:	4604      	mov	r4, r0
 8020c48:	4608      	mov	r0, r1
 8020c4a:	602b      	str	r3, [r5, #0]
 8020c4c:	f7e0 fcd6 	bl	80015fc <_sbrk>
 8020c50:	1c43      	adds	r3, r0, #1
 8020c52:	d102      	bne.n	8020c5a <_sbrk_r+0x1a>
 8020c54:	682b      	ldr	r3, [r5, #0]
 8020c56:	b103      	cbz	r3, 8020c5a <_sbrk_r+0x1a>
 8020c58:	6023      	str	r3, [r4, #0]
 8020c5a:	bd38      	pop	{r3, r4, r5, pc}
 8020c5c:	2400f460 	.word	0x2400f460

08020c60 <_raise_r>:
 8020c60:	291f      	cmp	r1, #31
 8020c62:	b538      	push	{r3, r4, r5, lr}
 8020c64:	4604      	mov	r4, r0
 8020c66:	460d      	mov	r5, r1
 8020c68:	d904      	bls.n	8020c74 <_raise_r+0x14>
 8020c6a:	2316      	movs	r3, #22
 8020c6c:	6003      	str	r3, [r0, #0]
 8020c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8020c72:	bd38      	pop	{r3, r4, r5, pc}
 8020c74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020c76:	b112      	cbz	r2, 8020c7e <_raise_r+0x1e>
 8020c78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020c7c:	b94b      	cbnz	r3, 8020c92 <_raise_r+0x32>
 8020c7e:	4620      	mov	r0, r4
 8020c80:	f000 f830 	bl	8020ce4 <_getpid_r>
 8020c84:	462a      	mov	r2, r5
 8020c86:	4601      	mov	r1, r0
 8020c88:	4620      	mov	r0, r4
 8020c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020c8e:	f000 b817 	b.w	8020cc0 <_kill_r>
 8020c92:	2b01      	cmp	r3, #1
 8020c94:	d00a      	beq.n	8020cac <_raise_r+0x4c>
 8020c96:	1c59      	adds	r1, r3, #1
 8020c98:	d103      	bne.n	8020ca2 <_raise_r+0x42>
 8020c9a:	2316      	movs	r3, #22
 8020c9c:	6003      	str	r3, [r0, #0]
 8020c9e:	2001      	movs	r0, #1
 8020ca0:	e7e7      	b.n	8020c72 <_raise_r+0x12>
 8020ca2:	2400      	movs	r4, #0
 8020ca4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020ca8:	4628      	mov	r0, r5
 8020caa:	4798      	blx	r3
 8020cac:	2000      	movs	r0, #0
 8020cae:	e7e0      	b.n	8020c72 <_raise_r+0x12>

08020cb0 <raise>:
 8020cb0:	4b02      	ldr	r3, [pc, #8]	; (8020cbc <raise+0xc>)
 8020cb2:	4601      	mov	r1, r0
 8020cb4:	6818      	ldr	r0, [r3, #0]
 8020cb6:	f7ff bfd3 	b.w	8020c60 <_raise_r>
 8020cba:	bf00      	nop
 8020cbc:	240000b8 	.word	0x240000b8

08020cc0 <_kill_r>:
 8020cc0:	b538      	push	{r3, r4, r5, lr}
 8020cc2:	4d07      	ldr	r5, [pc, #28]	; (8020ce0 <_kill_r+0x20>)
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	4604      	mov	r4, r0
 8020cc8:	4608      	mov	r0, r1
 8020cca:	4611      	mov	r1, r2
 8020ccc:	602b      	str	r3, [r5, #0]
 8020cce:	f7e0 fc5f 	bl	8001590 <_kill>
 8020cd2:	1c43      	adds	r3, r0, #1
 8020cd4:	d102      	bne.n	8020cdc <_kill_r+0x1c>
 8020cd6:	682b      	ldr	r3, [r5, #0]
 8020cd8:	b103      	cbz	r3, 8020cdc <_kill_r+0x1c>
 8020cda:	6023      	str	r3, [r4, #0]
 8020cdc:	bd38      	pop	{r3, r4, r5, pc}
 8020cde:	bf00      	nop
 8020ce0:	2400f460 	.word	0x2400f460

08020ce4 <_getpid_r>:
 8020ce4:	f7e0 bc52 	b.w	800158c <_getpid>

08020ce8 <__tzcalc_limits>:
 8020ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cec:	4605      	mov	r5, r0
 8020cee:	f000 fd55 	bl	802179c <__gettzinfo>
 8020cf2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8020cf6:	429d      	cmp	r5, r3
 8020cf8:	f340 8099 	ble.w	8020e2e <__tzcalc_limits+0x146>
 8020cfc:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8020d00:	18ac      	adds	r4, r5, r2
 8020d02:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8020d06:	f240 126d 	movw	r2, #365	; 0x16d
 8020d0a:	10a4      	asrs	r4, r4, #2
 8020d0c:	fb02 4403 	mla	r4, r2, r3, r4
 8020d10:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8020d14:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8020d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8020d1c:	441c      	add	r4, r3
 8020d1e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8020d22:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8020d26:	fb95 fcf3 	sdiv	ip, r5, r3
 8020d2a:	fb03 5c1c 	mls	ip, r3, ip, r5
 8020d2e:	186a      	adds	r2, r5, r1
 8020d30:	fabc f68c 	clz	r6, ip
 8020d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8020d38:	f005 0303 	and.w	r3, r5, #3
 8020d3c:	4414      	add	r4, r2
 8020d3e:	2264      	movs	r2, #100	; 0x64
 8020d40:	6045      	str	r5, [r0, #4]
 8020d42:	fb95 f7f2 	sdiv	r7, r5, r2
 8020d46:	0976      	lsrs	r6, r6, #5
 8020d48:	fb02 5717 	mls	r7, r2, r7, r5
 8020d4c:	4601      	mov	r1, r0
 8020d4e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8020d52:	9300      	str	r3, [sp, #0]
 8020d54:	f04f 0a07 	mov.w	sl, #7
 8020d58:	7a0d      	ldrb	r5, [r1, #8]
 8020d5a:	694b      	ldr	r3, [r1, #20]
 8020d5c:	2d4a      	cmp	r5, #74	; 0x4a
 8020d5e:	d12d      	bne.n	8020dbc <__tzcalc_limits+0xd4>
 8020d60:	9a00      	ldr	r2, [sp, #0]
 8020d62:	eb04 0e03 	add.w	lr, r4, r3
 8020d66:	b902      	cbnz	r2, 8020d6a <__tzcalc_limits+0x82>
 8020d68:	b917      	cbnz	r7, 8020d70 <__tzcalc_limits+0x88>
 8020d6a:	f1bc 0f00 	cmp.w	ip, #0
 8020d6e:	d123      	bne.n	8020db8 <__tzcalc_limits+0xd0>
 8020d70:	2b3b      	cmp	r3, #59	; 0x3b
 8020d72:	bfd4      	ite	le
 8020d74:	2300      	movle	r3, #0
 8020d76:	2301      	movgt	r3, #1
 8020d78:	4473      	add	r3, lr
 8020d7a:	3b01      	subs	r3, #1
 8020d7c:	698d      	ldr	r5, [r1, #24]
 8020d7e:	4a2d      	ldr	r2, [pc, #180]	; (8020e34 <__tzcalc_limits+0x14c>)
 8020d80:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8020d84:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8020d88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8020d8a:	18ed      	adds	r5, r5, r3
 8020d8c:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8020d90:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8020d94:	3128      	adds	r1, #40	; 0x28
 8020d96:	458b      	cmp	fp, r1
 8020d98:	d1de      	bne.n	8020d58 <__tzcalc_limits+0x70>
 8020d9a:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8020d9e:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8020da2:	428c      	cmp	r4, r1
 8020da4:	eb72 0303 	sbcs.w	r3, r2, r3
 8020da8:	bfb4      	ite	lt
 8020daa:	2301      	movlt	r3, #1
 8020dac:	2300      	movge	r3, #0
 8020dae:	6003      	str	r3, [r0, #0]
 8020db0:	2001      	movs	r0, #1
 8020db2:	b003      	add	sp, #12
 8020db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020db8:	2300      	movs	r3, #0
 8020dba:	e7dd      	b.n	8020d78 <__tzcalc_limits+0x90>
 8020dbc:	2d44      	cmp	r5, #68	; 0x44
 8020dbe:	d101      	bne.n	8020dc4 <__tzcalc_limits+0xdc>
 8020dc0:	4423      	add	r3, r4
 8020dc2:	e7db      	b.n	8020d7c <__tzcalc_limits+0x94>
 8020dc4:	9a00      	ldr	r2, [sp, #0]
 8020dc6:	bb62      	cbnz	r2, 8020e22 <__tzcalc_limits+0x13a>
 8020dc8:	2f00      	cmp	r7, #0
 8020dca:	bf0c      	ite	eq
 8020dcc:	4635      	moveq	r5, r6
 8020dce:	2501      	movne	r5, #1
 8020dd0:	68ca      	ldr	r2, [r1, #12]
 8020dd2:	9201      	str	r2, [sp, #4]
 8020dd4:	4a18      	ldr	r2, [pc, #96]	; (8020e38 <__tzcalc_limits+0x150>)
 8020dd6:	f04f 0930 	mov.w	r9, #48	; 0x30
 8020dda:	fb09 2505 	mla	r5, r9, r5, r2
 8020dde:	46a6      	mov	lr, r4
 8020de0:	f04f 0800 	mov.w	r8, #0
 8020de4:	3d04      	subs	r5, #4
 8020de6:	9a01      	ldr	r2, [sp, #4]
 8020de8:	f108 0801 	add.w	r8, r8, #1
 8020dec:	4542      	cmp	r2, r8
 8020dee:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8020df2:	dc18      	bgt.n	8020e26 <__tzcalc_limits+0x13e>
 8020df4:	f10e 0504 	add.w	r5, lr, #4
 8020df8:	fb95 f8fa 	sdiv	r8, r5, sl
 8020dfc:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8020e00:	eba5 0808 	sub.w	r8, r5, r8
 8020e04:	ebb3 0808 	subs.w	r8, r3, r8
 8020e08:	690b      	ldr	r3, [r1, #16]
 8020e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8020e0e:	bf48      	it	mi
 8020e10:	f108 0807 	addmi.w	r8, r8, #7
 8020e14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8020e18:	4443      	add	r3, r8
 8020e1a:	454b      	cmp	r3, r9
 8020e1c:	da05      	bge.n	8020e2a <__tzcalc_limits+0x142>
 8020e1e:	4473      	add	r3, lr
 8020e20:	e7ac      	b.n	8020d7c <__tzcalc_limits+0x94>
 8020e22:	4635      	mov	r5, r6
 8020e24:	e7d4      	b.n	8020dd0 <__tzcalc_limits+0xe8>
 8020e26:	44ce      	add	lr, r9
 8020e28:	e7dd      	b.n	8020de6 <__tzcalc_limits+0xfe>
 8020e2a:	3b07      	subs	r3, #7
 8020e2c:	e7f5      	b.n	8020e1a <__tzcalc_limits+0x132>
 8020e2e:	2000      	movs	r0, #0
 8020e30:	e7bf      	b.n	8020db2 <__tzcalc_limits+0xca>
 8020e32:	bf00      	nop
 8020e34:	00015180 	.word	0x00015180
 8020e38:	08026cb0 	.word	0x08026cb0

08020e3c <__tz_lock>:
 8020e3c:	4801      	ldr	r0, [pc, #4]	; (8020e44 <__tz_lock+0x8>)
 8020e3e:	f000 bd5e 	b.w	80218fe <__retarget_lock_acquire>
 8020e42:	bf00      	nop
 8020e44:	2400f45d 	.word	0x2400f45d

08020e48 <__tz_unlock>:
 8020e48:	4801      	ldr	r0, [pc, #4]	; (8020e50 <__tz_unlock+0x8>)
 8020e4a:	f000 bd5a 	b.w	8021902 <__retarget_lock_release>
 8020e4e:	bf00      	nop
 8020e50:	2400f45d 	.word	0x2400f45d

08020e54 <_tzset_unlocked>:
 8020e54:	4b01      	ldr	r3, [pc, #4]	; (8020e5c <_tzset_unlocked+0x8>)
 8020e56:	6818      	ldr	r0, [r3, #0]
 8020e58:	f000 b802 	b.w	8020e60 <_tzset_unlocked_r>
 8020e5c:	240000b8 	.word	0x240000b8

08020e60 <_tzset_unlocked_r>:
 8020e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e64:	b08d      	sub	sp, #52	; 0x34
 8020e66:	4607      	mov	r7, r0
 8020e68:	f000 fc98 	bl	802179c <__gettzinfo>
 8020e6c:	49b0      	ldr	r1, [pc, #704]	; (8021130 <_tzset_unlocked_r+0x2d0>)
 8020e6e:	4eb1      	ldr	r6, [pc, #708]	; (8021134 <_tzset_unlocked_r+0x2d4>)
 8020e70:	4605      	mov	r5, r0
 8020e72:	4638      	mov	r0, r7
 8020e74:	f000 fc8a 	bl	802178c <_getenv_r>
 8020e78:	4604      	mov	r4, r0
 8020e7a:	b970      	cbnz	r0, 8020e9a <_tzset_unlocked_r+0x3a>
 8020e7c:	4bae      	ldr	r3, [pc, #696]	; (8021138 <_tzset_unlocked_r+0x2d8>)
 8020e7e:	4aaf      	ldr	r2, [pc, #700]	; (802113c <_tzset_unlocked_r+0x2dc>)
 8020e80:	6018      	str	r0, [r3, #0]
 8020e82:	4baf      	ldr	r3, [pc, #700]	; (8021140 <_tzset_unlocked_r+0x2e0>)
 8020e84:	6018      	str	r0, [r3, #0]
 8020e86:	4baf      	ldr	r3, [pc, #700]	; (8021144 <_tzset_unlocked_r+0x2e4>)
 8020e88:	6830      	ldr	r0, [r6, #0]
 8020e8a:	e9c3 2200 	strd	r2, r2, [r3]
 8020e8e:	f7ff faeb 	bl	8020468 <free>
 8020e92:	6034      	str	r4, [r6, #0]
 8020e94:	b00d      	add	sp, #52	; 0x34
 8020e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e9a:	6831      	ldr	r1, [r6, #0]
 8020e9c:	2900      	cmp	r1, #0
 8020e9e:	d162      	bne.n	8020f66 <_tzset_unlocked_r+0x106>
 8020ea0:	6830      	ldr	r0, [r6, #0]
 8020ea2:	f7ff fae1 	bl	8020468 <free>
 8020ea6:	4620      	mov	r0, r4
 8020ea8:	f7df fa74 	bl	8000394 <strlen>
 8020eac:	1c41      	adds	r1, r0, #1
 8020eae:	4638      	mov	r0, r7
 8020eb0:	f7ff fb64 	bl	802057c <_malloc_r>
 8020eb4:	6030      	str	r0, [r6, #0]
 8020eb6:	2800      	cmp	r0, #0
 8020eb8:	d15a      	bne.n	8020f70 <_tzset_unlocked_r+0x110>
 8020eba:	7823      	ldrb	r3, [r4, #0]
 8020ebc:	4aa2      	ldr	r2, [pc, #648]	; (8021148 <_tzset_unlocked_r+0x2e8>)
 8020ebe:	49a3      	ldr	r1, [pc, #652]	; (802114c <_tzset_unlocked_r+0x2ec>)
 8020ec0:	2b3a      	cmp	r3, #58	; 0x3a
 8020ec2:	bf08      	it	eq
 8020ec4:	3401      	addeq	r4, #1
 8020ec6:	ae0a      	add	r6, sp, #40	; 0x28
 8020ec8:	4633      	mov	r3, r6
 8020eca:	4620      	mov	r0, r4
 8020ecc:	f000 fdbc 	bl	8021a48 <siscanf>
 8020ed0:	2800      	cmp	r0, #0
 8020ed2:	dddf      	ble.n	8020e94 <_tzset_unlocked_r+0x34>
 8020ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020ed6:	18e7      	adds	r7, r4, r3
 8020ed8:	5ce3      	ldrb	r3, [r4, r3]
 8020eda:	2b2d      	cmp	r3, #45	; 0x2d
 8020edc:	d14c      	bne.n	8020f78 <_tzset_unlocked_r+0x118>
 8020ede:	3701      	adds	r7, #1
 8020ee0:	f04f 38ff 	mov.w	r8, #4294967295
 8020ee4:	f10d 0a20 	add.w	sl, sp, #32
 8020ee8:	f10d 0b1e 	add.w	fp, sp, #30
 8020eec:	2400      	movs	r4, #0
 8020eee:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8020ef2:	4997      	ldr	r1, [pc, #604]	; (8021150 <_tzset_unlocked_r+0x2f0>)
 8020ef4:	9603      	str	r6, [sp, #12]
 8020ef6:	f8cd b000 	str.w	fp, [sp]
 8020efa:	4633      	mov	r3, r6
 8020efc:	aa07      	add	r2, sp, #28
 8020efe:	4638      	mov	r0, r7
 8020f00:	f8ad 401e 	strh.w	r4, [sp, #30]
 8020f04:	f8ad 4020 	strh.w	r4, [sp, #32]
 8020f08:	f000 fd9e 	bl	8021a48 <siscanf>
 8020f0c:	42a0      	cmp	r0, r4
 8020f0e:	ddc1      	ble.n	8020e94 <_tzset_unlocked_r+0x34>
 8020f10:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8020f14:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020f18:	f8df 9240 	ldr.w	r9, [pc, #576]	; 802115c <_tzset_unlocked_r+0x2fc>
 8020f1c:	213c      	movs	r1, #60	; 0x3c
 8020f1e:	fb01 3302 	mla	r3, r1, r2, r3
 8020f22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8020f26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020f2a:	fb01 3302 	mla	r3, r1, r2, r3
 8020f2e:	fb08 f303 	mul.w	r3, r8, r3
 8020f32:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8021144 <_tzset_unlocked_r+0x2e4>
 8020f36:	62ab      	str	r3, [r5, #40]	; 0x28
 8020f38:	4b83      	ldr	r3, [pc, #524]	; (8021148 <_tzset_unlocked_r+0x2e8>)
 8020f3a:	f8c8 3000 	str.w	r3, [r8]
 8020f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f40:	4982      	ldr	r1, [pc, #520]	; (802114c <_tzset_unlocked_r+0x2ec>)
 8020f42:	441f      	add	r7, r3
 8020f44:	464a      	mov	r2, r9
 8020f46:	4633      	mov	r3, r6
 8020f48:	4638      	mov	r0, r7
 8020f4a:	f000 fd7d 	bl	8021a48 <siscanf>
 8020f4e:	42a0      	cmp	r0, r4
 8020f50:	dc18      	bgt.n	8020f84 <_tzset_unlocked_r+0x124>
 8020f52:	f8d8 3000 	ldr.w	r3, [r8]
 8020f56:	f8c8 3004 	str.w	r3, [r8, #4]
 8020f5a:	4b77      	ldr	r3, [pc, #476]	; (8021138 <_tzset_unlocked_r+0x2d8>)
 8020f5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8020f5e:	601a      	str	r2, [r3, #0]
 8020f60:	4b77      	ldr	r3, [pc, #476]	; (8021140 <_tzset_unlocked_r+0x2e0>)
 8020f62:	601c      	str	r4, [r3, #0]
 8020f64:	e796      	b.n	8020e94 <_tzset_unlocked_r+0x34>
 8020f66:	f7df fa0b 	bl	8000380 <strcmp>
 8020f6a:	2800      	cmp	r0, #0
 8020f6c:	d198      	bne.n	8020ea0 <_tzset_unlocked_r+0x40>
 8020f6e:	e791      	b.n	8020e94 <_tzset_unlocked_r+0x34>
 8020f70:	4621      	mov	r1, r4
 8020f72:	f000 fdda 	bl	8021b2a <strcpy>
 8020f76:	e7a0      	b.n	8020eba <_tzset_unlocked_r+0x5a>
 8020f78:	2b2b      	cmp	r3, #43	; 0x2b
 8020f7a:	bf08      	it	eq
 8020f7c:	3701      	addeq	r7, #1
 8020f7e:	f04f 0801 	mov.w	r8, #1
 8020f82:	e7af      	b.n	8020ee4 <_tzset_unlocked_r+0x84>
 8020f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f86:	f8c8 9004 	str.w	r9, [r8, #4]
 8020f8a:	18fc      	adds	r4, r7, r3
 8020f8c:	5cfb      	ldrb	r3, [r7, r3]
 8020f8e:	2b2d      	cmp	r3, #45	; 0x2d
 8020f90:	f040 808b 	bne.w	80210aa <_tzset_unlocked_r+0x24a>
 8020f94:	3401      	adds	r4, #1
 8020f96:	f04f 37ff 	mov.w	r7, #4294967295
 8020f9a:	2300      	movs	r3, #0
 8020f9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020fa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020fa4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020fa8:	930a      	str	r3, [sp, #40]	; 0x28
 8020faa:	e9cd a602 	strd	sl, r6, [sp, #8]
 8020fae:	e9cd b600 	strd	fp, r6, [sp]
 8020fb2:	4967      	ldr	r1, [pc, #412]	; (8021150 <_tzset_unlocked_r+0x2f0>)
 8020fb4:	4633      	mov	r3, r6
 8020fb6:	aa07      	add	r2, sp, #28
 8020fb8:	4620      	mov	r0, r4
 8020fba:	f000 fd45 	bl	8021a48 <siscanf>
 8020fbe:	2800      	cmp	r0, #0
 8020fc0:	dc78      	bgt.n	80210b4 <_tzset_unlocked_r+0x254>
 8020fc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8020fc4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8020fc8:	652b      	str	r3, [r5, #80]	; 0x50
 8020fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fcc:	462f      	mov	r7, r5
 8020fce:	441c      	add	r4, r3
 8020fd0:	f04f 0900 	mov.w	r9, #0
 8020fd4:	7823      	ldrb	r3, [r4, #0]
 8020fd6:	2b2c      	cmp	r3, #44	; 0x2c
 8020fd8:	bf08      	it	eq
 8020fda:	3401      	addeq	r4, #1
 8020fdc:	f894 8000 	ldrb.w	r8, [r4]
 8020fe0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8020fe4:	d178      	bne.n	80210d8 <_tzset_unlocked_r+0x278>
 8020fe6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8020fea:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8020fee:	ab09      	add	r3, sp, #36	; 0x24
 8020ff0:	9300      	str	r3, [sp, #0]
 8020ff2:	4958      	ldr	r1, [pc, #352]	; (8021154 <_tzset_unlocked_r+0x2f4>)
 8020ff4:	9603      	str	r6, [sp, #12]
 8020ff6:	4633      	mov	r3, r6
 8020ff8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8020ffc:	4620      	mov	r0, r4
 8020ffe:	f000 fd23 	bl	8021a48 <siscanf>
 8021002:	2803      	cmp	r0, #3
 8021004:	f47f af46 	bne.w	8020e94 <_tzset_unlocked_r+0x34>
 8021008:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802100c:	1e4b      	subs	r3, r1, #1
 802100e:	2b0b      	cmp	r3, #11
 8021010:	f63f af40 	bhi.w	8020e94 <_tzset_unlocked_r+0x34>
 8021014:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8021018:	1e53      	subs	r3, r2, #1
 802101a:	2b04      	cmp	r3, #4
 802101c:	f63f af3a 	bhi.w	8020e94 <_tzset_unlocked_r+0x34>
 8021020:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8021024:	2b06      	cmp	r3, #6
 8021026:	f63f af35 	bhi.w	8020e94 <_tzset_unlocked_r+0x34>
 802102a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802102e:	f887 8008 	strb.w	r8, [r7, #8]
 8021032:	617b      	str	r3, [r7, #20]
 8021034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021036:	eb04 0803 	add.w	r8, r4, r3
 802103a:	2302      	movs	r3, #2
 802103c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021040:	2300      	movs	r3, #0
 8021042:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021046:	f8ad 3020 	strh.w	r3, [sp, #32]
 802104a:	930a      	str	r3, [sp, #40]	; 0x28
 802104c:	f898 3000 	ldrb.w	r3, [r8]
 8021050:	2b2f      	cmp	r3, #47	; 0x2f
 8021052:	d109      	bne.n	8021068 <_tzset_unlocked_r+0x208>
 8021054:	e9cd a602 	strd	sl, r6, [sp, #8]
 8021058:	e9cd b600 	strd	fp, r6, [sp]
 802105c:	493e      	ldr	r1, [pc, #248]	; (8021158 <_tzset_unlocked_r+0x2f8>)
 802105e:	4633      	mov	r3, r6
 8021060:	aa07      	add	r2, sp, #28
 8021062:	4640      	mov	r0, r8
 8021064:	f000 fcf0 	bl	8021a48 <siscanf>
 8021068:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802106c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8021070:	213c      	movs	r1, #60	; 0x3c
 8021072:	fb01 3302 	mla	r3, r1, r2, r3
 8021076:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802107a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802107e:	fb01 3302 	mla	r3, r1, r2, r3
 8021082:	61bb      	str	r3, [r7, #24]
 8021084:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8021086:	3728      	adds	r7, #40	; 0x28
 8021088:	4444      	add	r4, r8
 802108a:	f1b9 0f00 	cmp.w	r9, #0
 802108e:	d020      	beq.n	80210d2 <_tzset_unlocked_r+0x272>
 8021090:	6868      	ldr	r0, [r5, #4]
 8021092:	f7ff fe29 	bl	8020ce8 <__tzcalc_limits>
 8021096:	4b28      	ldr	r3, [pc, #160]	; (8021138 <_tzset_unlocked_r+0x2d8>)
 8021098:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802109a:	601a      	str	r2, [r3, #0]
 802109c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802109e:	1a9b      	subs	r3, r3, r2
 80210a0:	4a27      	ldr	r2, [pc, #156]	; (8021140 <_tzset_unlocked_r+0x2e0>)
 80210a2:	bf18      	it	ne
 80210a4:	2301      	movne	r3, #1
 80210a6:	6013      	str	r3, [r2, #0]
 80210a8:	e6f4      	b.n	8020e94 <_tzset_unlocked_r+0x34>
 80210aa:	2b2b      	cmp	r3, #43	; 0x2b
 80210ac:	bf08      	it	eq
 80210ae:	3401      	addeq	r4, #1
 80210b0:	2701      	movs	r7, #1
 80210b2:	e772      	b.n	8020f9a <_tzset_unlocked_r+0x13a>
 80210b4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80210b8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80210bc:	213c      	movs	r1, #60	; 0x3c
 80210be:	fb01 3302 	mla	r3, r1, r2, r3
 80210c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80210c6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80210ca:	fb01 3302 	mla	r3, r1, r2, r3
 80210ce:	437b      	muls	r3, r7
 80210d0:	e77a      	b.n	8020fc8 <_tzset_unlocked_r+0x168>
 80210d2:	f04f 0901 	mov.w	r9, #1
 80210d6:	e77d      	b.n	8020fd4 <_tzset_unlocked_r+0x174>
 80210d8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80210dc:	bf06      	itte	eq
 80210de:	3401      	addeq	r4, #1
 80210e0:	4643      	moveq	r3, r8
 80210e2:	2344      	movne	r3, #68	; 0x44
 80210e4:	220a      	movs	r2, #10
 80210e6:	a90b      	add	r1, sp, #44	; 0x2c
 80210e8:	4620      	mov	r0, r4
 80210ea:	9305      	str	r3, [sp, #20]
 80210ec:	f000 fdae 	bl	8021c4c <strtoul>
 80210f0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80210f4:	9b05      	ldr	r3, [sp, #20]
 80210f6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80210fa:	45a0      	cmp	r8, r4
 80210fc:	d114      	bne.n	8021128 <_tzset_unlocked_r+0x2c8>
 80210fe:	234d      	movs	r3, #77	; 0x4d
 8021100:	f1b9 0f00 	cmp.w	r9, #0
 8021104:	d107      	bne.n	8021116 <_tzset_unlocked_r+0x2b6>
 8021106:	722b      	strb	r3, [r5, #8]
 8021108:	2103      	movs	r1, #3
 802110a:	2302      	movs	r3, #2
 802110c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8021110:	f8c5 9014 	str.w	r9, [r5, #20]
 8021114:	e791      	b.n	802103a <_tzset_unlocked_r+0x1da>
 8021116:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802111a:	220b      	movs	r2, #11
 802111c:	2301      	movs	r3, #1
 802111e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8021122:	2300      	movs	r3, #0
 8021124:	63eb      	str	r3, [r5, #60]	; 0x3c
 8021126:	e788      	b.n	802103a <_tzset_unlocked_r+0x1da>
 8021128:	b280      	uxth	r0, r0
 802112a:	723b      	strb	r3, [r7, #8]
 802112c:	6178      	str	r0, [r7, #20]
 802112e:	e784      	b.n	802103a <_tzset_unlocked_r+0x1da>
 8021130:	08026d48 	.word	0x08026d48
 8021134:	2400f3bc 	.word	0x2400f3bc
 8021138:	2400f3c4 	.word	0x2400f3c4
 802113c:	08026d4b 	.word	0x08026d4b
 8021140:	2400f3c0 	.word	0x2400f3c0
 8021144:	2400011c 	.word	0x2400011c
 8021148:	2400f3af 	.word	0x2400f3af
 802114c:	08026d4f 	.word	0x08026d4f
 8021150:	08026d72 	.word	0x08026d72
 8021154:	08026d5e 	.word	0x08026d5e
 8021158:	08026d71 	.word	0x08026d71
 802115c:	2400f3a4 	.word	0x2400f3a4

08021160 <__swbuf_r>:
 8021160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021162:	460e      	mov	r6, r1
 8021164:	4614      	mov	r4, r2
 8021166:	4605      	mov	r5, r0
 8021168:	b118      	cbz	r0, 8021172 <__swbuf_r+0x12>
 802116a:	6983      	ldr	r3, [r0, #24]
 802116c:	b90b      	cbnz	r3, 8021172 <__swbuf_r+0x12>
 802116e:	f000 fa33 	bl	80215d8 <__sinit>
 8021172:	4b21      	ldr	r3, [pc, #132]	; (80211f8 <__swbuf_r+0x98>)
 8021174:	429c      	cmp	r4, r3
 8021176:	d12b      	bne.n	80211d0 <__swbuf_r+0x70>
 8021178:	686c      	ldr	r4, [r5, #4]
 802117a:	69a3      	ldr	r3, [r4, #24]
 802117c:	60a3      	str	r3, [r4, #8]
 802117e:	89a3      	ldrh	r3, [r4, #12]
 8021180:	071a      	lsls	r2, r3, #28
 8021182:	d52f      	bpl.n	80211e4 <__swbuf_r+0x84>
 8021184:	6923      	ldr	r3, [r4, #16]
 8021186:	b36b      	cbz	r3, 80211e4 <__swbuf_r+0x84>
 8021188:	6923      	ldr	r3, [r4, #16]
 802118a:	6820      	ldr	r0, [r4, #0]
 802118c:	1ac0      	subs	r0, r0, r3
 802118e:	6963      	ldr	r3, [r4, #20]
 8021190:	b2f6      	uxtb	r6, r6
 8021192:	4283      	cmp	r3, r0
 8021194:	4637      	mov	r7, r6
 8021196:	dc04      	bgt.n	80211a2 <__swbuf_r+0x42>
 8021198:	4621      	mov	r1, r4
 802119a:	4628      	mov	r0, r5
 802119c:	f000 f988 	bl	80214b0 <_fflush_r>
 80211a0:	bb30      	cbnz	r0, 80211f0 <__swbuf_r+0x90>
 80211a2:	68a3      	ldr	r3, [r4, #8]
 80211a4:	3b01      	subs	r3, #1
 80211a6:	60a3      	str	r3, [r4, #8]
 80211a8:	6823      	ldr	r3, [r4, #0]
 80211aa:	1c5a      	adds	r2, r3, #1
 80211ac:	6022      	str	r2, [r4, #0]
 80211ae:	701e      	strb	r6, [r3, #0]
 80211b0:	6963      	ldr	r3, [r4, #20]
 80211b2:	3001      	adds	r0, #1
 80211b4:	4283      	cmp	r3, r0
 80211b6:	d004      	beq.n	80211c2 <__swbuf_r+0x62>
 80211b8:	89a3      	ldrh	r3, [r4, #12]
 80211ba:	07db      	lsls	r3, r3, #31
 80211bc:	d506      	bpl.n	80211cc <__swbuf_r+0x6c>
 80211be:	2e0a      	cmp	r6, #10
 80211c0:	d104      	bne.n	80211cc <__swbuf_r+0x6c>
 80211c2:	4621      	mov	r1, r4
 80211c4:	4628      	mov	r0, r5
 80211c6:	f000 f973 	bl	80214b0 <_fflush_r>
 80211ca:	b988      	cbnz	r0, 80211f0 <__swbuf_r+0x90>
 80211cc:	4638      	mov	r0, r7
 80211ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80211d0:	4b0a      	ldr	r3, [pc, #40]	; (80211fc <__swbuf_r+0x9c>)
 80211d2:	429c      	cmp	r4, r3
 80211d4:	d101      	bne.n	80211da <__swbuf_r+0x7a>
 80211d6:	68ac      	ldr	r4, [r5, #8]
 80211d8:	e7cf      	b.n	802117a <__swbuf_r+0x1a>
 80211da:	4b09      	ldr	r3, [pc, #36]	; (8021200 <__swbuf_r+0xa0>)
 80211dc:	429c      	cmp	r4, r3
 80211de:	bf08      	it	eq
 80211e0:	68ec      	ldreq	r4, [r5, #12]
 80211e2:	e7ca      	b.n	802117a <__swbuf_r+0x1a>
 80211e4:	4621      	mov	r1, r4
 80211e6:	4628      	mov	r0, r5
 80211e8:	f000 f80c 	bl	8021204 <__swsetup_r>
 80211ec:	2800      	cmp	r0, #0
 80211ee:	d0cb      	beq.n	8021188 <__swbuf_r+0x28>
 80211f0:	f04f 37ff 	mov.w	r7, #4294967295
 80211f4:	e7ea      	b.n	80211cc <__swbuf_r+0x6c>
 80211f6:	bf00      	nop
 80211f8:	08026da4 	.word	0x08026da4
 80211fc:	08026dc4 	.word	0x08026dc4
 8021200:	08026d84 	.word	0x08026d84

08021204 <__swsetup_r>:
 8021204:	4b32      	ldr	r3, [pc, #200]	; (80212d0 <__swsetup_r+0xcc>)
 8021206:	b570      	push	{r4, r5, r6, lr}
 8021208:	681d      	ldr	r5, [r3, #0]
 802120a:	4606      	mov	r6, r0
 802120c:	460c      	mov	r4, r1
 802120e:	b125      	cbz	r5, 802121a <__swsetup_r+0x16>
 8021210:	69ab      	ldr	r3, [r5, #24]
 8021212:	b913      	cbnz	r3, 802121a <__swsetup_r+0x16>
 8021214:	4628      	mov	r0, r5
 8021216:	f000 f9df 	bl	80215d8 <__sinit>
 802121a:	4b2e      	ldr	r3, [pc, #184]	; (80212d4 <__swsetup_r+0xd0>)
 802121c:	429c      	cmp	r4, r3
 802121e:	d10f      	bne.n	8021240 <__swsetup_r+0x3c>
 8021220:	686c      	ldr	r4, [r5, #4]
 8021222:	89a3      	ldrh	r3, [r4, #12]
 8021224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021228:	0719      	lsls	r1, r3, #28
 802122a:	d42c      	bmi.n	8021286 <__swsetup_r+0x82>
 802122c:	06dd      	lsls	r5, r3, #27
 802122e:	d411      	bmi.n	8021254 <__swsetup_r+0x50>
 8021230:	2309      	movs	r3, #9
 8021232:	6033      	str	r3, [r6, #0]
 8021234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021238:	81a3      	strh	r3, [r4, #12]
 802123a:	f04f 30ff 	mov.w	r0, #4294967295
 802123e:	e03e      	b.n	80212be <__swsetup_r+0xba>
 8021240:	4b25      	ldr	r3, [pc, #148]	; (80212d8 <__swsetup_r+0xd4>)
 8021242:	429c      	cmp	r4, r3
 8021244:	d101      	bne.n	802124a <__swsetup_r+0x46>
 8021246:	68ac      	ldr	r4, [r5, #8]
 8021248:	e7eb      	b.n	8021222 <__swsetup_r+0x1e>
 802124a:	4b24      	ldr	r3, [pc, #144]	; (80212dc <__swsetup_r+0xd8>)
 802124c:	429c      	cmp	r4, r3
 802124e:	bf08      	it	eq
 8021250:	68ec      	ldreq	r4, [r5, #12]
 8021252:	e7e6      	b.n	8021222 <__swsetup_r+0x1e>
 8021254:	0758      	lsls	r0, r3, #29
 8021256:	d512      	bpl.n	802127e <__swsetup_r+0x7a>
 8021258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802125a:	b141      	cbz	r1, 802126e <__swsetup_r+0x6a>
 802125c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021260:	4299      	cmp	r1, r3
 8021262:	d002      	beq.n	802126a <__swsetup_r+0x66>
 8021264:	4630      	mov	r0, r6
 8021266:	f7ff f91d 	bl	80204a4 <_free_r>
 802126a:	2300      	movs	r3, #0
 802126c:	6363      	str	r3, [r4, #52]	; 0x34
 802126e:	89a3      	ldrh	r3, [r4, #12]
 8021270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021274:	81a3      	strh	r3, [r4, #12]
 8021276:	2300      	movs	r3, #0
 8021278:	6063      	str	r3, [r4, #4]
 802127a:	6923      	ldr	r3, [r4, #16]
 802127c:	6023      	str	r3, [r4, #0]
 802127e:	89a3      	ldrh	r3, [r4, #12]
 8021280:	f043 0308 	orr.w	r3, r3, #8
 8021284:	81a3      	strh	r3, [r4, #12]
 8021286:	6923      	ldr	r3, [r4, #16]
 8021288:	b94b      	cbnz	r3, 802129e <__swsetup_r+0x9a>
 802128a:	89a3      	ldrh	r3, [r4, #12]
 802128c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021294:	d003      	beq.n	802129e <__swsetup_r+0x9a>
 8021296:	4621      	mov	r1, r4
 8021298:	4630      	mov	r0, r6
 802129a:	f000 fb59 	bl	8021950 <__smakebuf_r>
 802129e:	89a0      	ldrh	r0, [r4, #12]
 80212a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80212a4:	f010 0301 	ands.w	r3, r0, #1
 80212a8:	d00a      	beq.n	80212c0 <__swsetup_r+0xbc>
 80212aa:	2300      	movs	r3, #0
 80212ac:	60a3      	str	r3, [r4, #8]
 80212ae:	6963      	ldr	r3, [r4, #20]
 80212b0:	425b      	negs	r3, r3
 80212b2:	61a3      	str	r3, [r4, #24]
 80212b4:	6923      	ldr	r3, [r4, #16]
 80212b6:	b943      	cbnz	r3, 80212ca <__swsetup_r+0xc6>
 80212b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80212bc:	d1ba      	bne.n	8021234 <__swsetup_r+0x30>
 80212be:	bd70      	pop	{r4, r5, r6, pc}
 80212c0:	0781      	lsls	r1, r0, #30
 80212c2:	bf58      	it	pl
 80212c4:	6963      	ldrpl	r3, [r4, #20]
 80212c6:	60a3      	str	r3, [r4, #8]
 80212c8:	e7f4      	b.n	80212b4 <__swsetup_r+0xb0>
 80212ca:	2000      	movs	r0, #0
 80212cc:	e7f7      	b.n	80212be <__swsetup_r+0xba>
 80212ce:	bf00      	nop
 80212d0:	240000b8 	.word	0x240000b8
 80212d4:	08026da4 	.word	0x08026da4
 80212d8:	08026dc4 	.word	0x08026dc4
 80212dc:	08026d84 	.word	0x08026d84

080212e0 <__register_exitproc>:
 80212e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212e4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80213a0 <__register_exitproc+0xc0>
 80212e8:	4606      	mov	r6, r0
 80212ea:	f8d8 0000 	ldr.w	r0, [r8]
 80212ee:	461f      	mov	r7, r3
 80212f0:	460d      	mov	r5, r1
 80212f2:	4691      	mov	r9, r2
 80212f4:	f000 fb04 	bl	8021900 <__retarget_lock_acquire_recursive>
 80212f8:	4b25      	ldr	r3, [pc, #148]	; (8021390 <__register_exitproc+0xb0>)
 80212fa:	681c      	ldr	r4, [r3, #0]
 80212fc:	b934      	cbnz	r4, 802130c <__register_exitproc+0x2c>
 80212fe:	4c25      	ldr	r4, [pc, #148]	; (8021394 <__register_exitproc+0xb4>)
 8021300:	601c      	str	r4, [r3, #0]
 8021302:	4b25      	ldr	r3, [pc, #148]	; (8021398 <__register_exitproc+0xb8>)
 8021304:	b113      	cbz	r3, 802130c <__register_exitproc+0x2c>
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802130c:	6863      	ldr	r3, [r4, #4]
 802130e:	2b1f      	cmp	r3, #31
 8021310:	dd07      	ble.n	8021322 <__register_exitproc+0x42>
 8021312:	f8d8 0000 	ldr.w	r0, [r8]
 8021316:	f000 faf5 	bl	8021904 <__retarget_lock_release_recursive>
 802131a:	f04f 30ff 	mov.w	r0, #4294967295
 802131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021322:	b34e      	cbz	r6, 8021378 <__register_exitproc+0x98>
 8021324:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8021328:	b988      	cbnz	r0, 802134e <__register_exitproc+0x6e>
 802132a:	4b1c      	ldr	r3, [pc, #112]	; (802139c <__register_exitproc+0xbc>)
 802132c:	b923      	cbnz	r3, 8021338 <__register_exitproc+0x58>
 802132e:	f8d8 0000 	ldr.w	r0, [r8]
 8021332:	f000 fae6 	bl	8021902 <__retarget_lock_release>
 8021336:	e7f0      	b.n	802131a <__register_exitproc+0x3a>
 8021338:	f44f 7084 	mov.w	r0, #264	; 0x108
 802133c:	f7ff f88c 	bl	8020458 <malloc>
 8021340:	2800      	cmp	r0, #0
 8021342:	d0f4      	beq.n	802132e <__register_exitproc+0x4e>
 8021344:	2300      	movs	r3, #0
 8021346:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802134a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802134e:	6863      	ldr	r3, [r4, #4]
 8021350:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021354:	2201      	movs	r2, #1
 8021356:	409a      	lsls	r2, r3
 8021358:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802135c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8021360:	4313      	orrs	r3, r2
 8021362:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8021366:	2e02      	cmp	r6, #2
 8021368:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802136c:	bf02      	ittt	eq
 802136e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8021372:	4313      	orreq	r3, r2
 8021374:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021378:	6863      	ldr	r3, [r4, #4]
 802137a:	f8d8 0000 	ldr.w	r0, [r8]
 802137e:	1c5a      	adds	r2, r3, #1
 8021380:	3302      	adds	r3, #2
 8021382:	6062      	str	r2, [r4, #4]
 8021384:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8021388:	f000 fabc 	bl	8021904 <__retarget_lock_release_recursive>
 802138c:	2000      	movs	r0, #0
 802138e:	e7c6      	b.n	802131e <__register_exitproc+0x3e>
 8021390:	2400f454 	.word	0x2400f454
 8021394:	2400f3c8 	.word	0x2400f3c8
 8021398:	08026d44 	.word	0x08026d44
 802139c:	08020459 	.word	0x08020459
 80213a0:	24000124 	.word	0x24000124

080213a4 <__sflush_r>:
 80213a4:	898a      	ldrh	r2, [r1, #12]
 80213a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213aa:	4605      	mov	r5, r0
 80213ac:	0710      	lsls	r0, r2, #28
 80213ae:	460c      	mov	r4, r1
 80213b0:	d458      	bmi.n	8021464 <__sflush_r+0xc0>
 80213b2:	684b      	ldr	r3, [r1, #4]
 80213b4:	2b00      	cmp	r3, #0
 80213b6:	dc05      	bgt.n	80213c4 <__sflush_r+0x20>
 80213b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	dc02      	bgt.n	80213c4 <__sflush_r+0x20>
 80213be:	2000      	movs	r0, #0
 80213c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80213c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80213c6:	2e00      	cmp	r6, #0
 80213c8:	d0f9      	beq.n	80213be <__sflush_r+0x1a>
 80213ca:	2300      	movs	r3, #0
 80213cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80213d0:	682f      	ldr	r7, [r5, #0]
 80213d2:	602b      	str	r3, [r5, #0]
 80213d4:	d032      	beq.n	802143c <__sflush_r+0x98>
 80213d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80213d8:	89a3      	ldrh	r3, [r4, #12]
 80213da:	075a      	lsls	r2, r3, #29
 80213dc:	d505      	bpl.n	80213ea <__sflush_r+0x46>
 80213de:	6863      	ldr	r3, [r4, #4]
 80213e0:	1ac0      	subs	r0, r0, r3
 80213e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80213e4:	b10b      	cbz	r3, 80213ea <__sflush_r+0x46>
 80213e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80213e8:	1ac0      	subs	r0, r0, r3
 80213ea:	2300      	movs	r3, #0
 80213ec:	4602      	mov	r2, r0
 80213ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80213f0:	6a21      	ldr	r1, [r4, #32]
 80213f2:	4628      	mov	r0, r5
 80213f4:	47b0      	blx	r6
 80213f6:	1c43      	adds	r3, r0, #1
 80213f8:	89a3      	ldrh	r3, [r4, #12]
 80213fa:	d106      	bne.n	802140a <__sflush_r+0x66>
 80213fc:	6829      	ldr	r1, [r5, #0]
 80213fe:	291d      	cmp	r1, #29
 8021400:	d82c      	bhi.n	802145c <__sflush_r+0xb8>
 8021402:	4a2a      	ldr	r2, [pc, #168]	; (80214ac <__sflush_r+0x108>)
 8021404:	40ca      	lsrs	r2, r1
 8021406:	07d6      	lsls	r6, r2, #31
 8021408:	d528      	bpl.n	802145c <__sflush_r+0xb8>
 802140a:	2200      	movs	r2, #0
 802140c:	6062      	str	r2, [r4, #4]
 802140e:	04d9      	lsls	r1, r3, #19
 8021410:	6922      	ldr	r2, [r4, #16]
 8021412:	6022      	str	r2, [r4, #0]
 8021414:	d504      	bpl.n	8021420 <__sflush_r+0x7c>
 8021416:	1c42      	adds	r2, r0, #1
 8021418:	d101      	bne.n	802141e <__sflush_r+0x7a>
 802141a:	682b      	ldr	r3, [r5, #0]
 802141c:	b903      	cbnz	r3, 8021420 <__sflush_r+0x7c>
 802141e:	6560      	str	r0, [r4, #84]	; 0x54
 8021420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021422:	602f      	str	r7, [r5, #0]
 8021424:	2900      	cmp	r1, #0
 8021426:	d0ca      	beq.n	80213be <__sflush_r+0x1a>
 8021428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802142c:	4299      	cmp	r1, r3
 802142e:	d002      	beq.n	8021436 <__sflush_r+0x92>
 8021430:	4628      	mov	r0, r5
 8021432:	f7ff f837 	bl	80204a4 <_free_r>
 8021436:	2000      	movs	r0, #0
 8021438:	6360      	str	r0, [r4, #52]	; 0x34
 802143a:	e7c1      	b.n	80213c0 <__sflush_r+0x1c>
 802143c:	6a21      	ldr	r1, [r4, #32]
 802143e:	2301      	movs	r3, #1
 8021440:	4628      	mov	r0, r5
 8021442:	47b0      	blx	r6
 8021444:	1c41      	adds	r1, r0, #1
 8021446:	d1c7      	bne.n	80213d8 <__sflush_r+0x34>
 8021448:	682b      	ldr	r3, [r5, #0]
 802144a:	2b00      	cmp	r3, #0
 802144c:	d0c4      	beq.n	80213d8 <__sflush_r+0x34>
 802144e:	2b1d      	cmp	r3, #29
 8021450:	d001      	beq.n	8021456 <__sflush_r+0xb2>
 8021452:	2b16      	cmp	r3, #22
 8021454:	d101      	bne.n	802145a <__sflush_r+0xb6>
 8021456:	602f      	str	r7, [r5, #0]
 8021458:	e7b1      	b.n	80213be <__sflush_r+0x1a>
 802145a:	89a3      	ldrh	r3, [r4, #12]
 802145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021460:	81a3      	strh	r3, [r4, #12]
 8021462:	e7ad      	b.n	80213c0 <__sflush_r+0x1c>
 8021464:	690f      	ldr	r7, [r1, #16]
 8021466:	2f00      	cmp	r7, #0
 8021468:	d0a9      	beq.n	80213be <__sflush_r+0x1a>
 802146a:	0793      	lsls	r3, r2, #30
 802146c:	680e      	ldr	r6, [r1, #0]
 802146e:	bf08      	it	eq
 8021470:	694b      	ldreq	r3, [r1, #20]
 8021472:	600f      	str	r7, [r1, #0]
 8021474:	bf18      	it	ne
 8021476:	2300      	movne	r3, #0
 8021478:	eba6 0807 	sub.w	r8, r6, r7
 802147c:	608b      	str	r3, [r1, #8]
 802147e:	f1b8 0f00 	cmp.w	r8, #0
 8021482:	dd9c      	ble.n	80213be <__sflush_r+0x1a>
 8021484:	6a21      	ldr	r1, [r4, #32]
 8021486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021488:	4643      	mov	r3, r8
 802148a:	463a      	mov	r2, r7
 802148c:	4628      	mov	r0, r5
 802148e:	47b0      	blx	r6
 8021490:	2800      	cmp	r0, #0
 8021492:	dc06      	bgt.n	80214a2 <__sflush_r+0xfe>
 8021494:	89a3      	ldrh	r3, [r4, #12]
 8021496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802149a:	81a3      	strh	r3, [r4, #12]
 802149c:	f04f 30ff 	mov.w	r0, #4294967295
 80214a0:	e78e      	b.n	80213c0 <__sflush_r+0x1c>
 80214a2:	4407      	add	r7, r0
 80214a4:	eba8 0800 	sub.w	r8, r8, r0
 80214a8:	e7e9      	b.n	802147e <__sflush_r+0xda>
 80214aa:	bf00      	nop
 80214ac:	20400001 	.word	0x20400001

080214b0 <_fflush_r>:
 80214b0:	b538      	push	{r3, r4, r5, lr}
 80214b2:	690b      	ldr	r3, [r1, #16]
 80214b4:	4605      	mov	r5, r0
 80214b6:	460c      	mov	r4, r1
 80214b8:	b913      	cbnz	r3, 80214c0 <_fflush_r+0x10>
 80214ba:	2500      	movs	r5, #0
 80214bc:	4628      	mov	r0, r5
 80214be:	bd38      	pop	{r3, r4, r5, pc}
 80214c0:	b118      	cbz	r0, 80214ca <_fflush_r+0x1a>
 80214c2:	6983      	ldr	r3, [r0, #24]
 80214c4:	b90b      	cbnz	r3, 80214ca <_fflush_r+0x1a>
 80214c6:	f000 f887 	bl	80215d8 <__sinit>
 80214ca:	4b14      	ldr	r3, [pc, #80]	; (802151c <_fflush_r+0x6c>)
 80214cc:	429c      	cmp	r4, r3
 80214ce:	d11b      	bne.n	8021508 <_fflush_r+0x58>
 80214d0:	686c      	ldr	r4, [r5, #4]
 80214d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d0ef      	beq.n	80214ba <_fflush_r+0xa>
 80214da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80214dc:	07d0      	lsls	r0, r2, #31
 80214de:	d404      	bmi.n	80214ea <_fflush_r+0x3a>
 80214e0:	0599      	lsls	r1, r3, #22
 80214e2:	d402      	bmi.n	80214ea <_fflush_r+0x3a>
 80214e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80214e6:	f000 fa0b 	bl	8021900 <__retarget_lock_acquire_recursive>
 80214ea:	4628      	mov	r0, r5
 80214ec:	4621      	mov	r1, r4
 80214ee:	f7ff ff59 	bl	80213a4 <__sflush_r>
 80214f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80214f4:	07da      	lsls	r2, r3, #31
 80214f6:	4605      	mov	r5, r0
 80214f8:	d4e0      	bmi.n	80214bc <_fflush_r+0xc>
 80214fa:	89a3      	ldrh	r3, [r4, #12]
 80214fc:	059b      	lsls	r3, r3, #22
 80214fe:	d4dd      	bmi.n	80214bc <_fflush_r+0xc>
 8021500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021502:	f000 f9ff 	bl	8021904 <__retarget_lock_release_recursive>
 8021506:	e7d9      	b.n	80214bc <_fflush_r+0xc>
 8021508:	4b05      	ldr	r3, [pc, #20]	; (8021520 <_fflush_r+0x70>)
 802150a:	429c      	cmp	r4, r3
 802150c:	d101      	bne.n	8021512 <_fflush_r+0x62>
 802150e:	68ac      	ldr	r4, [r5, #8]
 8021510:	e7df      	b.n	80214d2 <_fflush_r+0x22>
 8021512:	4b04      	ldr	r3, [pc, #16]	; (8021524 <_fflush_r+0x74>)
 8021514:	429c      	cmp	r4, r3
 8021516:	bf08      	it	eq
 8021518:	68ec      	ldreq	r4, [r5, #12]
 802151a:	e7da      	b.n	80214d2 <_fflush_r+0x22>
 802151c:	08026da4 	.word	0x08026da4
 8021520:	08026dc4 	.word	0x08026dc4
 8021524:	08026d84 	.word	0x08026d84

08021528 <std>:
 8021528:	2300      	movs	r3, #0
 802152a:	b510      	push	{r4, lr}
 802152c:	4604      	mov	r4, r0
 802152e:	e9c0 3300 	strd	r3, r3, [r0]
 8021532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021536:	6083      	str	r3, [r0, #8]
 8021538:	8181      	strh	r1, [r0, #12]
 802153a:	6643      	str	r3, [r0, #100]	; 0x64
 802153c:	81c2      	strh	r2, [r0, #14]
 802153e:	6183      	str	r3, [r0, #24]
 8021540:	4619      	mov	r1, r3
 8021542:	2208      	movs	r2, #8
 8021544:	305c      	adds	r0, #92	; 0x5c
 8021546:	f7fe ffa5 	bl	8020494 <memset>
 802154a:	4b05      	ldr	r3, [pc, #20]	; (8021560 <std+0x38>)
 802154c:	6263      	str	r3, [r4, #36]	; 0x24
 802154e:	4b05      	ldr	r3, [pc, #20]	; (8021564 <std+0x3c>)
 8021550:	62a3      	str	r3, [r4, #40]	; 0x28
 8021552:	4b05      	ldr	r3, [pc, #20]	; (8021568 <std+0x40>)
 8021554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021556:	4b05      	ldr	r3, [pc, #20]	; (802156c <std+0x44>)
 8021558:	6224      	str	r4, [r4, #32]
 802155a:	6323      	str	r3, [r4, #48]	; 0x30
 802155c:	bd10      	pop	{r4, pc}
 802155e:	bf00      	nop
 8021560:	08021aa1 	.word	0x08021aa1
 8021564:	08021ac7 	.word	0x08021ac7
 8021568:	08021aff 	.word	0x08021aff
 802156c:	08021b23 	.word	0x08021b23

08021570 <_cleanup_r>:
 8021570:	4901      	ldr	r1, [pc, #4]	; (8021578 <_cleanup_r+0x8>)
 8021572:	f000 b8af 	b.w	80216d4 <_fwalk_reent>
 8021576:	bf00      	nop
 8021578:	080214b1 	.word	0x080214b1

0802157c <__sfmoreglue>:
 802157c:	b570      	push	{r4, r5, r6, lr}
 802157e:	2268      	movs	r2, #104	; 0x68
 8021580:	1e4d      	subs	r5, r1, #1
 8021582:	4355      	muls	r5, r2
 8021584:	460e      	mov	r6, r1
 8021586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802158a:	f7fe fff7 	bl	802057c <_malloc_r>
 802158e:	4604      	mov	r4, r0
 8021590:	b140      	cbz	r0, 80215a4 <__sfmoreglue+0x28>
 8021592:	2100      	movs	r1, #0
 8021594:	e9c0 1600 	strd	r1, r6, [r0]
 8021598:	300c      	adds	r0, #12
 802159a:	60a0      	str	r0, [r4, #8]
 802159c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80215a0:	f7fe ff78 	bl	8020494 <memset>
 80215a4:	4620      	mov	r0, r4
 80215a6:	bd70      	pop	{r4, r5, r6, pc}

080215a8 <__sfp_lock_acquire>:
 80215a8:	4801      	ldr	r0, [pc, #4]	; (80215b0 <__sfp_lock_acquire+0x8>)
 80215aa:	f000 b9a9 	b.w	8021900 <__retarget_lock_acquire_recursive>
 80215ae:	bf00      	nop
 80215b0:	2400f45b 	.word	0x2400f45b

080215b4 <__sfp_lock_release>:
 80215b4:	4801      	ldr	r0, [pc, #4]	; (80215bc <__sfp_lock_release+0x8>)
 80215b6:	f000 b9a5 	b.w	8021904 <__retarget_lock_release_recursive>
 80215ba:	bf00      	nop
 80215bc:	2400f45b 	.word	0x2400f45b

080215c0 <__sinit_lock_acquire>:
 80215c0:	4801      	ldr	r0, [pc, #4]	; (80215c8 <__sinit_lock_acquire+0x8>)
 80215c2:	f000 b99d 	b.w	8021900 <__retarget_lock_acquire_recursive>
 80215c6:	bf00      	nop
 80215c8:	2400f45c 	.word	0x2400f45c

080215cc <__sinit_lock_release>:
 80215cc:	4801      	ldr	r0, [pc, #4]	; (80215d4 <__sinit_lock_release+0x8>)
 80215ce:	f000 b999 	b.w	8021904 <__retarget_lock_release_recursive>
 80215d2:	bf00      	nop
 80215d4:	2400f45c 	.word	0x2400f45c

080215d8 <__sinit>:
 80215d8:	b510      	push	{r4, lr}
 80215da:	4604      	mov	r4, r0
 80215dc:	f7ff fff0 	bl	80215c0 <__sinit_lock_acquire>
 80215e0:	69a3      	ldr	r3, [r4, #24]
 80215e2:	b11b      	cbz	r3, 80215ec <__sinit+0x14>
 80215e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80215e8:	f7ff bff0 	b.w	80215cc <__sinit_lock_release>
 80215ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80215f0:	6523      	str	r3, [r4, #80]	; 0x50
 80215f2:	4b13      	ldr	r3, [pc, #76]	; (8021640 <__sinit+0x68>)
 80215f4:	4a13      	ldr	r2, [pc, #76]	; (8021644 <__sinit+0x6c>)
 80215f6:	681b      	ldr	r3, [r3, #0]
 80215f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80215fa:	42a3      	cmp	r3, r4
 80215fc:	bf04      	itt	eq
 80215fe:	2301      	moveq	r3, #1
 8021600:	61a3      	streq	r3, [r4, #24]
 8021602:	4620      	mov	r0, r4
 8021604:	f000 f820 	bl	8021648 <__sfp>
 8021608:	6060      	str	r0, [r4, #4]
 802160a:	4620      	mov	r0, r4
 802160c:	f000 f81c 	bl	8021648 <__sfp>
 8021610:	60a0      	str	r0, [r4, #8]
 8021612:	4620      	mov	r0, r4
 8021614:	f000 f818 	bl	8021648 <__sfp>
 8021618:	2200      	movs	r2, #0
 802161a:	60e0      	str	r0, [r4, #12]
 802161c:	2104      	movs	r1, #4
 802161e:	6860      	ldr	r0, [r4, #4]
 8021620:	f7ff ff82 	bl	8021528 <std>
 8021624:	68a0      	ldr	r0, [r4, #8]
 8021626:	2201      	movs	r2, #1
 8021628:	2109      	movs	r1, #9
 802162a:	f7ff ff7d 	bl	8021528 <std>
 802162e:	68e0      	ldr	r0, [r4, #12]
 8021630:	2202      	movs	r2, #2
 8021632:	2112      	movs	r1, #18
 8021634:	f7ff ff78 	bl	8021528 <std>
 8021638:	2301      	movs	r3, #1
 802163a:	61a3      	str	r3, [r4, #24]
 802163c:	e7d2      	b.n	80215e4 <__sinit+0xc>
 802163e:	bf00      	nop
 8021640:	08026cac 	.word	0x08026cac
 8021644:	08021571 	.word	0x08021571

08021648 <__sfp>:
 8021648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802164a:	4607      	mov	r7, r0
 802164c:	f7ff ffac 	bl	80215a8 <__sfp_lock_acquire>
 8021650:	4b1e      	ldr	r3, [pc, #120]	; (80216cc <__sfp+0x84>)
 8021652:	681e      	ldr	r6, [r3, #0]
 8021654:	69b3      	ldr	r3, [r6, #24]
 8021656:	b913      	cbnz	r3, 802165e <__sfp+0x16>
 8021658:	4630      	mov	r0, r6
 802165a:	f7ff ffbd 	bl	80215d8 <__sinit>
 802165e:	3648      	adds	r6, #72	; 0x48
 8021660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021664:	3b01      	subs	r3, #1
 8021666:	d503      	bpl.n	8021670 <__sfp+0x28>
 8021668:	6833      	ldr	r3, [r6, #0]
 802166a:	b30b      	cbz	r3, 80216b0 <__sfp+0x68>
 802166c:	6836      	ldr	r6, [r6, #0]
 802166e:	e7f7      	b.n	8021660 <__sfp+0x18>
 8021670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021674:	b9d5      	cbnz	r5, 80216ac <__sfp+0x64>
 8021676:	4b16      	ldr	r3, [pc, #88]	; (80216d0 <__sfp+0x88>)
 8021678:	60e3      	str	r3, [r4, #12]
 802167a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802167e:	6665      	str	r5, [r4, #100]	; 0x64
 8021680:	f000 f93c 	bl	80218fc <__retarget_lock_init_recursive>
 8021684:	f7ff ff96 	bl	80215b4 <__sfp_lock_release>
 8021688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802168c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021690:	6025      	str	r5, [r4, #0]
 8021692:	61a5      	str	r5, [r4, #24]
 8021694:	2208      	movs	r2, #8
 8021696:	4629      	mov	r1, r5
 8021698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802169c:	f7fe fefa 	bl	8020494 <memset>
 80216a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80216a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80216a8:	4620      	mov	r0, r4
 80216aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80216ac:	3468      	adds	r4, #104	; 0x68
 80216ae:	e7d9      	b.n	8021664 <__sfp+0x1c>
 80216b0:	2104      	movs	r1, #4
 80216b2:	4638      	mov	r0, r7
 80216b4:	f7ff ff62 	bl	802157c <__sfmoreglue>
 80216b8:	4604      	mov	r4, r0
 80216ba:	6030      	str	r0, [r6, #0]
 80216bc:	2800      	cmp	r0, #0
 80216be:	d1d5      	bne.n	802166c <__sfp+0x24>
 80216c0:	f7ff ff78 	bl	80215b4 <__sfp_lock_release>
 80216c4:	230c      	movs	r3, #12
 80216c6:	603b      	str	r3, [r7, #0]
 80216c8:	e7ee      	b.n	80216a8 <__sfp+0x60>
 80216ca:	bf00      	nop
 80216cc:	08026cac 	.word	0x08026cac
 80216d0:	ffff0001 	.word	0xffff0001

080216d4 <_fwalk_reent>:
 80216d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80216d8:	4606      	mov	r6, r0
 80216da:	4688      	mov	r8, r1
 80216dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80216e0:	2700      	movs	r7, #0
 80216e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80216e6:	f1b9 0901 	subs.w	r9, r9, #1
 80216ea:	d505      	bpl.n	80216f8 <_fwalk_reent+0x24>
 80216ec:	6824      	ldr	r4, [r4, #0]
 80216ee:	2c00      	cmp	r4, #0
 80216f0:	d1f7      	bne.n	80216e2 <_fwalk_reent+0xe>
 80216f2:	4638      	mov	r0, r7
 80216f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80216f8:	89ab      	ldrh	r3, [r5, #12]
 80216fa:	2b01      	cmp	r3, #1
 80216fc:	d907      	bls.n	802170e <_fwalk_reent+0x3a>
 80216fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021702:	3301      	adds	r3, #1
 8021704:	d003      	beq.n	802170e <_fwalk_reent+0x3a>
 8021706:	4629      	mov	r1, r5
 8021708:	4630      	mov	r0, r6
 802170a:	47c0      	blx	r8
 802170c:	4307      	orrs	r7, r0
 802170e:	3568      	adds	r5, #104	; 0x68
 8021710:	e7e9      	b.n	80216e6 <_fwalk_reent+0x12>
	...

08021714 <_findenv_r>:
 8021714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021718:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8021788 <_findenv_r+0x74>
 802171c:	4607      	mov	r7, r0
 802171e:	4689      	mov	r9, r1
 8021720:	4616      	mov	r6, r2
 8021722:	f000 fabf 	bl	8021ca4 <__env_lock>
 8021726:	f8da 4000 	ldr.w	r4, [sl]
 802172a:	b134      	cbz	r4, 802173a <_findenv_r+0x26>
 802172c:	464b      	mov	r3, r9
 802172e:	4698      	mov	r8, r3
 8021730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021734:	b13a      	cbz	r2, 8021746 <_findenv_r+0x32>
 8021736:	2a3d      	cmp	r2, #61	; 0x3d
 8021738:	d1f9      	bne.n	802172e <_findenv_r+0x1a>
 802173a:	4638      	mov	r0, r7
 802173c:	f000 fab8 	bl	8021cb0 <__env_unlock>
 8021740:	2000      	movs	r0, #0
 8021742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021746:	eba8 0809 	sub.w	r8, r8, r9
 802174a:	46a3      	mov	fp, r4
 802174c:	f854 0b04 	ldr.w	r0, [r4], #4
 8021750:	2800      	cmp	r0, #0
 8021752:	d0f2      	beq.n	802173a <_findenv_r+0x26>
 8021754:	4642      	mov	r2, r8
 8021756:	4649      	mov	r1, r9
 8021758:	f000 f9ef 	bl	8021b3a <strncmp>
 802175c:	2800      	cmp	r0, #0
 802175e:	d1f4      	bne.n	802174a <_findenv_r+0x36>
 8021760:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8021764:	eb03 0508 	add.w	r5, r3, r8
 8021768:	f813 3008 	ldrb.w	r3, [r3, r8]
 802176c:	2b3d      	cmp	r3, #61	; 0x3d
 802176e:	d1ec      	bne.n	802174a <_findenv_r+0x36>
 8021770:	f8da 3000 	ldr.w	r3, [sl]
 8021774:	ebab 0303 	sub.w	r3, fp, r3
 8021778:	109b      	asrs	r3, r3, #2
 802177a:	4638      	mov	r0, r7
 802177c:	6033      	str	r3, [r6, #0]
 802177e:	f000 fa97 	bl	8021cb0 <__env_unlock>
 8021782:	1c68      	adds	r0, r5, #1
 8021784:	e7dd      	b.n	8021742 <_findenv_r+0x2e>
 8021786:	bf00      	nop
 8021788:	24000004 	.word	0x24000004

0802178c <_getenv_r>:
 802178c:	b507      	push	{r0, r1, r2, lr}
 802178e:	aa01      	add	r2, sp, #4
 8021790:	f7ff ffc0 	bl	8021714 <_findenv_r>
 8021794:	b003      	add	sp, #12
 8021796:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802179c <__gettzinfo>:
 802179c:	4800      	ldr	r0, [pc, #0]	; (80217a0 <__gettzinfo+0x4>)
 802179e:	4770      	bx	lr
 80217a0:	24000128 	.word	0x24000128

080217a4 <gmtime_r>:
 80217a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217a8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80217ac:	460c      	mov	r4, r1
 80217ae:	4a4f      	ldr	r2, [pc, #316]	; (80218ec <gmtime_r+0x148>)
 80217b0:	2300      	movs	r3, #0
 80217b2:	4630      	mov	r0, r6
 80217b4:	4639      	mov	r1, r7
 80217b6:	f7de fdf5 	bl	80003a4 <__aeabi_ldivmod>
 80217ba:	4639      	mov	r1, r7
 80217bc:	4605      	mov	r5, r0
 80217be:	4a4b      	ldr	r2, [pc, #300]	; (80218ec <gmtime_r+0x148>)
 80217c0:	4630      	mov	r0, r6
 80217c2:	2300      	movs	r3, #0
 80217c4:	f7de fdee 	bl	80003a4 <__aeabi_ldivmod>
 80217c8:	2a00      	cmp	r2, #0
 80217ca:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80217ce:	bfb7      	itett	lt
 80217d0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80217d4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80217d8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 80217dc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80217e0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80217e4:	fbb2 f1f0 	udiv	r1, r2, r0
 80217e8:	fb00 2211 	mls	r2, r0, r1, r2
 80217ec:	203c      	movs	r0, #60	; 0x3c
 80217ee:	60a1      	str	r1, [r4, #8]
 80217f0:	fbb2 f1f0 	udiv	r1, r2, r0
 80217f4:	fb00 2211 	mls	r2, r0, r1, r2
 80217f8:	6061      	str	r1, [r4, #4]
 80217fa:	6022      	str	r2, [r4, #0]
 80217fc:	2107      	movs	r1, #7
 80217fe:	1cda      	adds	r2, r3, #3
 8021800:	fb92 f1f1 	sdiv	r1, r2, r1
 8021804:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021808:	1a52      	subs	r2, r2, r1
 802180a:	bf48      	it	mi
 802180c:	3207      	addmi	r2, #7
 802180e:	4d38      	ldr	r5, [pc, #224]	; (80218f0 <gmtime_r+0x14c>)
 8021810:	4838      	ldr	r0, [pc, #224]	; (80218f4 <gmtime_r+0x150>)
 8021812:	61a2      	str	r2, [r4, #24]
 8021814:	2b00      	cmp	r3, #0
 8021816:	bfb7      	itett	lt
 8021818:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 802181c:	fb93 f5f5 	sdivge	r5, r3, r5
 8021820:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8021824:	fb92 f5f5 	sdivlt	r5, r2, r5
 8021828:	fb00 3005 	mla	r0, r0, r5, r3
 802182c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8021830:	fbb0 f2f2 	udiv	r2, r0, r2
 8021834:	4402      	add	r2, r0
 8021836:	f240 53b4 	movw	r3, #1460	; 0x5b4
 802183a:	fbb0 f1f3 	udiv	r1, r0, r3
 802183e:	1a52      	subs	r2, r2, r1
 8021840:	f240 1c6d 	movw	ip, #365	; 0x16d
 8021844:	492c      	ldr	r1, [pc, #176]	; (80218f8 <gmtime_r+0x154>)
 8021846:	fbb0 f1f1 	udiv	r1, r0, r1
 802184a:	2764      	movs	r7, #100	; 0x64
 802184c:	1a52      	subs	r2, r2, r1
 802184e:	fbb2 f1fc 	udiv	r1, r2, ip
 8021852:	fbb2 f3f3 	udiv	r3, r2, r3
 8021856:	fbb1 f6f7 	udiv	r6, r1, r7
 802185a:	1af3      	subs	r3, r6, r3
 802185c:	4403      	add	r3, r0
 802185e:	fb0c 3311 	mls	r3, ip, r1, r3
 8021862:	2299      	movs	r2, #153	; 0x99
 8021864:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8021868:	f10e 0e02 	add.w	lr, lr, #2
 802186c:	f103 0c01 	add.w	ip, r3, #1
 8021870:	fbbe f0f2 	udiv	r0, lr, r2
 8021874:	4342      	muls	r2, r0
 8021876:	3202      	adds	r2, #2
 8021878:	f04f 0805 	mov.w	r8, #5
 802187c:	fbb2 f2f8 	udiv	r2, r2, r8
 8021880:	ebac 0c02 	sub.w	ip, ip, r2
 8021884:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8021888:	4596      	cmp	lr, r2
 802188a:	bf94      	ite	ls
 802188c:	2202      	movls	r2, #2
 802188e:	f06f 0209 	mvnhi.w	r2, #9
 8021892:	4410      	add	r0, r2
 8021894:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8021898:	fb02 1505 	mla	r5, r2, r5, r1
 802189c:	2801      	cmp	r0, #1
 802189e:	bf98      	it	ls
 80218a0:	3501      	addls	r5, #1
 80218a2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80218a6:	d30d      	bcc.n	80218c4 <gmtime_r+0x120>
 80218a8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80218ac:	61e3      	str	r3, [r4, #28]
 80218ae:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80218b2:	2300      	movs	r3, #0
 80218b4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80218b8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80218bc:	6223      	str	r3, [r4, #32]
 80218be:	4620      	mov	r0, r4
 80218c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80218c4:	078a      	lsls	r2, r1, #30
 80218c6:	d102      	bne.n	80218ce <gmtime_r+0x12a>
 80218c8:	fb07 1616 	mls	r6, r7, r6, r1
 80218cc:	b95e      	cbnz	r6, 80218e6 <gmtime_r+0x142>
 80218ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80218d2:	fbb1 f6f2 	udiv	r6, r1, r2
 80218d6:	fb02 1216 	mls	r2, r2, r6, r1
 80218da:	fab2 f282 	clz	r2, r2
 80218de:	0952      	lsrs	r2, r2, #5
 80218e0:	333b      	adds	r3, #59	; 0x3b
 80218e2:	4413      	add	r3, r2
 80218e4:	e7e2      	b.n	80218ac <gmtime_r+0x108>
 80218e6:	2201      	movs	r2, #1
 80218e8:	e7fa      	b.n	80218e0 <gmtime_r+0x13c>
 80218ea:	bf00      	nop
 80218ec:	00015180 	.word	0x00015180
 80218f0:	00023ab1 	.word	0x00023ab1
 80218f4:	fffdc54f 	.word	0xfffdc54f
 80218f8:	00023ab0 	.word	0x00023ab0

080218fc <__retarget_lock_init_recursive>:
 80218fc:	4770      	bx	lr

080218fe <__retarget_lock_acquire>:
 80218fe:	4770      	bx	lr

08021900 <__retarget_lock_acquire_recursive>:
 8021900:	4770      	bx	lr

08021902 <__retarget_lock_release>:
 8021902:	4770      	bx	lr

08021904 <__retarget_lock_release_recursive>:
 8021904:	4770      	bx	lr

08021906 <__swhatbuf_r>:
 8021906:	b570      	push	{r4, r5, r6, lr}
 8021908:	460e      	mov	r6, r1
 802190a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802190e:	2900      	cmp	r1, #0
 8021910:	b096      	sub	sp, #88	; 0x58
 8021912:	4614      	mov	r4, r2
 8021914:	461d      	mov	r5, r3
 8021916:	da08      	bge.n	802192a <__swhatbuf_r+0x24>
 8021918:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802191c:	2200      	movs	r2, #0
 802191e:	602a      	str	r2, [r5, #0]
 8021920:	061a      	lsls	r2, r3, #24
 8021922:	d410      	bmi.n	8021946 <__swhatbuf_r+0x40>
 8021924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021928:	e00e      	b.n	8021948 <__swhatbuf_r+0x42>
 802192a:	466a      	mov	r2, sp
 802192c:	f000 f9c6 	bl	8021cbc <_fstat_r>
 8021930:	2800      	cmp	r0, #0
 8021932:	dbf1      	blt.n	8021918 <__swhatbuf_r+0x12>
 8021934:	9a01      	ldr	r2, [sp, #4]
 8021936:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802193a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802193e:	425a      	negs	r2, r3
 8021940:	415a      	adcs	r2, r3
 8021942:	602a      	str	r2, [r5, #0]
 8021944:	e7ee      	b.n	8021924 <__swhatbuf_r+0x1e>
 8021946:	2340      	movs	r3, #64	; 0x40
 8021948:	2000      	movs	r0, #0
 802194a:	6023      	str	r3, [r4, #0]
 802194c:	b016      	add	sp, #88	; 0x58
 802194e:	bd70      	pop	{r4, r5, r6, pc}

08021950 <__smakebuf_r>:
 8021950:	898b      	ldrh	r3, [r1, #12]
 8021952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021954:	079d      	lsls	r5, r3, #30
 8021956:	4606      	mov	r6, r0
 8021958:	460c      	mov	r4, r1
 802195a:	d507      	bpl.n	802196c <__smakebuf_r+0x1c>
 802195c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021960:	6023      	str	r3, [r4, #0]
 8021962:	6123      	str	r3, [r4, #16]
 8021964:	2301      	movs	r3, #1
 8021966:	6163      	str	r3, [r4, #20]
 8021968:	b002      	add	sp, #8
 802196a:	bd70      	pop	{r4, r5, r6, pc}
 802196c:	ab01      	add	r3, sp, #4
 802196e:	466a      	mov	r2, sp
 8021970:	f7ff ffc9 	bl	8021906 <__swhatbuf_r>
 8021974:	9900      	ldr	r1, [sp, #0]
 8021976:	4605      	mov	r5, r0
 8021978:	4630      	mov	r0, r6
 802197a:	f7fe fdff 	bl	802057c <_malloc_r>
 802197e:	b948      	cbnz	r0, 8021994 <__smakebuf_r+0x44>
 8021980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021984:	059a      	lsls	r2, r3, #22
 8021986:	d4ef      	bmi.n	8021968 <__smakebuf_r+0x18>
 8021988:	f023 0303 	bic.w	r3, r3, #3
 802198c:	f043 0302 	orr.w	r3, r3, #2
 8021990:	81a3      	strh	r3, [r4, #12]
 8021992:	e7e3      	b.n	802195c <__smakebuf_r+0xc>
 8021994:	4b0d      	ldr	r3, [pc, #52]	; (80219cc <__smakebuf_r+0x7c>)
 8021996:	62b3      	str	r3, [r6, #40]	; 0x28
 8021998:	89a3      	ldrh	r3, [r4, #12]
 802199a:	6020      	str	r0, [r4, #0]
 802199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80219a0:	81a3      	strh	r3, [r4, #12]
 80219a2:	9b00      	ldr	r3, [sp, #0]
 80219a4:	6163      	str	r3, [r4, #20]
 80219a6:	9b01      	ldr	r3, [sp, #4]
 80219a8:	6120      	str	r0, [r4, #16]
 80219aa:	b15b      	cbz	r3, 80219c4 <__smakebuf_r+0x74>
 80219ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80219b0:	4630      	mov	r0, r6
 80219b2:	f000 f995 	bl	8021ce0 <_isatty_r>
 80219b6:	b128      	cbz	r0, 80219c4 <__smakebuf_r+0x74>
 80219b8:	89a3      	ldrh	r3, [r4, #12]
 80219ba:	f023 0303 	bic.w	r3, r3, #3
 80219be:	f043 0301 	orr.w	r3, r3, #1
 80219c2:	81a3      	strh	r3, [r4, #12]
 80219c4:	89a0      	ldrh	r0, [r4, #12]
 80219c6:	4305      	orrs	r5, r0
 80219c8:	81a5      	strh	r5, [r4, #12]
 80219ca:	e7cd      	b.n	8021968 <__smakebuf_r+0x18>
 80219cc:	08021571 	.word	0x08021571

080219d0 <__malloc_lock>:
 80219d0:	4801      	ldr	r0, [pc, #4]	; (80219d8 <__malloc_lock+0x8>)
 80219d2:	f7ff bf95 	b.w	8021900 <__retarget_lock_acquire_recursive>
 80219d6:	bf00      	nop
 80219d8:	2400f45a 	.word	0x2400f45a

080219dc <__malloc_unlock>:
 80219dc:	4801      	ldr	r0, [pc, #4]	; (80219e4 <__malloc_unlock+0x8>)
 80219de:	f7ff bf91 	b.w	8021904 <__retarget_lock_release_recursive>
 80219e2:	bf00      	nop
 80219e4:	2400f45a 	.word	0x2400f45a

080219e8 <_realloc_r>:
 80219e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80219ec:	4680      	mov	r8, r0
 80219ee:	4614      	mov	r4, r2
 80219f0:	460e      	mov	r6, r1
 80219f2:	b921      	cbnz	r1, 80219fe <_realloc_r+0x16>
 80219f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80219f8:	4611      	mov	r1, r2
 80219fa:	f7fe bdbf 	b.w	802057c <_malloc_r>
 80219fe:	b92a      	cbnz	r2, 8021a0c <_realloc_r+0x24>
 8021a00:	f7fe fd50 	bl	80204a4 <_free_r>
 8021a04:	4625      	mov	r5, r4
 8021a06:	4628      	mov	r0, r5
 8021a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a0c:	f000 f98a 	bl	8021d24 <_malloc_usable_size_r>
 8021a10:	4284      	cmp	r4, r0
 8021a12:	4607      	mov	r7, r0
 8021a14:	d802      	bhi.n	8021a1c <_realloc_r+0x34>
 8021a16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8021a1a:	d812      	bhi.n	8021a42 <_realloc_r+0x5a>
 8021a1c:	4621      	mov	r1, r4
 8021a1e:	4640      	mov	r0, r8
 8021a20:	f7fe fdac 	bl	802057c <_malloc_r>
 8021a24:	4605      	mov	r5, r0
 8021a26:	2800      	cmp	r0, #0
 8021a28:	d0ed      	beq.n	8021a06 <_realloc_r+0x1e>
 8021a2a:	42bc      	cmp	r4, r7
 8021a2c:	4622      	mov	r2, r4
 8021a2e:	4631      	mov	r1, r6
 8021a30:	bf28      	it	cs
 8021a32:	463a      	movcs	r2, r7
 8021a34:	f7fe fd20 	bl	8020478 <memcpy>
 8021a38:	4631      	mov	r1, r6
 8021a3a:	4640      	mov	r0, r8
 8021a3c:	f7fe fd32 	bl	80204a4 <_free_r>
 8021a40:	e7e1      	b.n	8021a06 <_realloc_r+0x1e>
 8021a42:	4635      	mov	r5, r6
 8021a44:	e7df      	b.n	8021a06 <_realloc_r+0x1e>
	...

08021a48 <siscanf>:
 8021a48:	b40e      	push	{r1, r2, r3}
 8021a4a:	b510      	push	{r4, lr}
 8021a4c:	b09f      	sub	sp, #124	; 0x7c
 8021a4e:	ac21      	add	r4, sp, #132	; 0x84
 8021a50:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021a54:	f854 2b04 	ldr.w	r2, [r4], #4
 8021a58:	9201      	str	r2, [sp, #4]
 8021a5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021a5e:	9004      	str	r0, [sp, #16]
 8021a60:	9008      	str	r0, [sp, #32]
 8021a62:	f7de fc97 	bl	8000394 <strlen>
 8021a66:	4b0c      	ldr	r3, [pc, #48]	; (8021a98 <siscanf+0x50>)
 8021a68:	9005      	str	r0, [sp, #20]
 8021a6a:	9009      	str	r0, [sp, #36]	; 0x24
 8021a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8021a6e:	480b      	ldr	r0, [pc, #44]	; (8021a9c <siscanf+0x54>)
 8021a70:	9a01      	ldr	r2, [sp, #4]
 8021a72:	6800      	ldr	r0, [r0, #0]
 8021a74:	9403      	str	r4, [sp, #12]
 8021a76:	2300      	movs	r3, #0
 8021a78:	9311      	str	r3, [sp, #68]	; 0x44
 8021a7a:	9316      	str	r3, [sp, #88]	; 0x58
 8021a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021a80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021a84:	a904      	add	r1, sp, #16
 8021a86:	4623      	mov	r3, r4
 8021a88:	f000 f9ae 	bl	8021de8 <__ssvfiscanf_r>
 8021a8c:	b01f      	add	sp, #124	; 0x7c
 8021a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a92:	b003      	add	sp, #12
 8021a94:	4770      	bx	lr
 8021a96:	bf00      	nop
 8021a98:	08021ac3 	.word	0x08021ac3
 8021a9c:	240000b8 	.word	0x240000b8

08021aa0 <__sread>:
 8021aa0:	b510      	push	{r4, lr}
 8021aa2:	460c      	mov	r4, r1
 8021aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021aa8:	f000 fc68 	bl	802237c <_read_r>
 8021aac:	2800      	cmp	r0, #0
 8021aae:	bfab      	itete	ge
 8021ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8021ab4:	181b      	addge	r3, r3, r0
 8021ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021aba:	bfac      	ite	ge
 8021abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8021abe:	81a3      	strhlt	r3, [r4, #12]
 8021ac0:	bd10      	pop	{r4, pc}

08021ac2 <__seofread>:
 8021ac2:	2000      	movs	r0, #0
 8021ac4:	4770      	bx	lr

08021ac6 <__swrite>:
 8021ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021aca:	461f      	mov	r7, r3
 8021acc:	898b      	ldrh	r3, [r1, #12]
 8021ace:	05db      	lsls	r3, r3, #23
 8021ad0:	4605      	mov	r5, r0
 8021ad2:	460c      	mov	r4, r1
 8021ad4:	4616      	mov	r6, r2
 8021ad6:	d505      	bpl.n	8021ae4 <__swrite+0x1e>
 8021ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021adc:	2302      	movs	r3, #2
 8021ade:	2200      	movs	r2, #0
 8021ae0:	f000 f90e 	bl	8021d00 <_lseek_r>
 8021ae4:	89a3      	ldrh	r3, [r4, #12]
 8021ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021aee:	81a3      	strh	r3, [r4, #12]
 8021af0:	4632      	mov	r2, r6
 8021af2:	463b      	mov	r3, r7
 8021af4:	4628      	mov	r0, r5
 8021af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021afa:	f000 b8b1 	b.w	8021c60 <_write_r>

08021afe <__sseek>:
 8021afe:	b510      	push	{r4, lr}
 8021b00:	460c      	mov	r4, r1
 8021b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b06:	f000 f8fb 	bl	8021d00 <_lseek_r>
 8021b0a:	1c43      	adds	r3, r0, #1
 8021b0c:	89a3      	ldrh	r3, [r4, #12]
 8021b0e:	bf15      	itete	ne
 8021b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8021b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021b1a:	81a3      	strheq	r3, [r4, #12]
 8021b1c:	bf18      	it	ne
 8021b1e:	81a3      	strhne	r3, [r4, #12]
 8021b20:	bd10      	pop	{r4, pc}

08021b22 <__sclose>:
 8021b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b26:	f000 b8ad 	b.w	8021c84 <_close_r>

08021b2a <strcpy>:
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021b30:	f803 2b01 	strb.w	r2, [r3], #1
 8021b34:	2a00      	cmp	r2, #0
 8021b36:	d1f9      	bne.n	8021b2c <strcpy+0x2>
 8021b38:	4770      	bx	lr

08021b3a <strncmp>:
 8021b3a:	b510      	push	{r4, lr}
 8021b3c:	b17a      	cbz	r2, 8021b5e <strncmp+0x24>
 8021b3e:	4603      	mov	r3, r0
 8021b40:	3901      	subs	r1, #1
 8021b42:	1884      	adds	r4, r0, r2
 8021b44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021b48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8021b4c:	4290      	cmp	r0, r2
 8021b4e:	d101      	bne.n	8021b54 <strncmp+0x1a>
 8021b50:	42a3      	cmp	r3, r4
 8021b52:	d101      	bne.n	8021b58 <strncmp+0x1e>
 8021b54:	1a80      	subs	r0, r0, r2
 8021b56:	bd10      	pop	{r4, pc}
 8021b58:	2800      	cmp	r0, #0
 8021b5a:	d1f3      	bne.n	8021b44 <strncmp+0xa>
 8021b5c:	e7fa      	b.n	8021b54 <strncmp+0x1a>
 8021b5e:	4610      	mov	r0, r2
 8021b60:	e7f9      	b.n	8021b56 <strncmp+0x1c>
	...

08021b64 <_strtoul_l.constprop.0>:
 8021b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b68:	4f36      	ldr	r7, [pc, #216]	; (8021c44 <_strtoul_l.constprop.0+0xe0>)
 8021b6a:	4686      	mov	lr, r0
 8021b6c:	460d      	mov	r5, r1
 8021b6e:	4628      	mov	r0, r5
 8021b70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021b74:	5de6      	ldrb	r6, [r4, r7]
 8021b76:	f016 0608 	ands.w	r6, r6, #8
 8021b7a:	d1f8      	bne.n	8021b6e <_strtoul_l.constprop.0+0xa>
 8021b7c:	2c2d      	cmp	r4, #45	; 0x2d
 8021b7e:	d12f      	bne.n	8021be0 <_strtoul_l.constprop.0+0x7c>
 8021b80:	782c      	ldrb	r4, [r5, #0]
 8021b82:	2601      	movs	r6, #1
 8021b84:	1c85      	adds	r5, r0, #2
 8021b86:	2b00      	cmp	r3, #0
 8021b88:	d057      	beq.n	8021c3a <_strtoul_l.constprop.0+0xd6>
 8021b8a:	2b10      	cmp	r3, #16
 8021b8c:	d109      	bne.n	8021ba2 <_strtoul_l.constprop.0+0x3e>
 8021b8e:	2c30      	cmp	r4, #48	; 0x30
 8021b90:	d107      	bne.n	8021ba2 <_strtoul_l.constprop.0+0x3e>
 8021b92:	7828      	ldrb	r0, [r5, #0]
 8021b94:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8021b98:	2858      	cmp	r0, #88	; 0x58
 8021b9a:	d149      	bne.n	8021c30 <_strtoul_l.constprop.0+0xcc>
 8021b9c:	786c      	ldrb	r4, [r5, #1]
 8021b9e:	2310      	movs	r3, #16
 8021ba0:	3502      	adds	r5, #2
 8021ba2:	f04f 38ff 	mov.w	r8, #4294967295
 8021ba6:	2700      	movs	r7, #0
 8021ba8:	fbb8 f8f3 	udiv	r8, r8, r3
 8021bac:	fb03 f908 	mul.w	r9, r3, r8
 8021bb0:	ea6f 0909 	mvn.w	r9, r9
 8021bb4:	4638      	mov	r0, r7
 8021bb6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8021bba:	f1bc 0f09 	cmp.w	ip, #9
 8021bbe:	d814      	bhi.n	8021bea <_strtoul_l.constprop.0+0x86>
 8021bc0:	4664      	mov	r4, ip
 8021bc2:	42a3      	cmp	r3, r4
 8021bc4:	dd22      	ble.n	8021c0c <_strtoul_l.constprop.0+0xa8>
 8021bc6:	2f00      	cmp	r7, #0
 8021bc8:	db1d      	blt.n	8021c06 <_strtoul_l.constprop.0+0xa2>
 8021bca:	4580      	cmp	r8, r0
 8021bcc:	d31b      	bcc.n	8021c06 <_strtoul_l.constprop.0+0xa2>
 8021bce:	d101      	bne.n	8021bd4 <_strtoul_l.constprop.0+0x70>
 8021bd0:	45a1      	cmp	r9, r4
 8021bd2:	db18      	blt.n	8021c06 <_strtoul_l.constprop.0+0xa2>
 8021bd4:	fb00 4003 	mla	r0, r0, r3, r4
 8021bd8:	2701      	movs	r7, #1
 8021bda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8021bde:	e7ea      	b.n	8021bb6 <_strtoul_l.constprop.0+0x52>
 8021be0:	2c2b      	cmp	r4, #43	; 0x2b
 8021be2:	bf04      	itt	eq
 8021be4:	782c      	ldrbeq	r4, [r5, #0]
 8021be6:	1c85      	addeq	r5, r0, #2
 8021be8:	e7cd      	b.n	8021b86 <_strtoul_l.constprop.0+0x22>
 8021bea:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8021bee:	f1bc 0f19 	cmp.w	ip, #25
 8021bf2:	d801      	bhi.n	8021bf8 <_strtoul_l.constprop.0+0x94>
 8021bf4:	3c37      	subs	r4, #55	; 0x37
 8021bf6:	e7e4      	b.n	8021bc2 <_strtoul_l.constprop.0+0x5e>
 8021bf8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8021bfc:	f1bc 0f19 	cmp.w	ip, #25
 8021c00:	d804      	bhi.n	8021c0c <_strtoul_l.constprop.0+0xa8>
 8021c02:	3c57      	subs	r4, #87	; 0x57
 8021c04:	e7dd      	b.n	8021bc2 <_strtoul_l.constprop.0+0x5e>
 8021c06:	f04f 37ff 	mov.w	r7, #4294967295
 8021c0a:	e7e6      	b.n	8021bda <_strtoul_l.constprop.0+0x76>
 8021c0c:	2f00      	cmp	r7, #0
 8021c0e:	da07      	bge.n	8021c20 <_strtoul_l.constprop.0+0xbc>
 8021c10:	2322      	movs	r3, #34	; 0x22
 8021c12:	f8ce 3000 	str.w	r3, [lr]
 8021c16:	f04f 30ff 	mov.w	r0, #4294967295
 8021c1a:	b932      	cbnz	r2, 8021c2a <_strtoul_l.constprop.0+0xc6>
 8021c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021c20:	b106      	cbz	r6, 8021c24 <_strtoul_l.constprop.0+0xc0>
 8021c22:	4240      	negs	r0, r0
 8021c24:	2a00      	cmp	r2, #0
 8021c26:	d0f9      	beq.n	8021c1c <_strtoul_l.constprop.0+0xb8>
 8021c28:	b107      	cbz	r7, 8021c2c <_strtoul_l.constprop.0+0xc8>
 8021c2a:	1e69      	subs	r1, r5, #1
 8021c2c:	6011      	str	r1, [r2, #0]
 8021c2e:	e7f5      	b.n	8021c1c <_strtoul_l.constprop.0+0xb8>
 8021c30:	2430      	movs	r4, #48	; 0x30
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	d1b5      	bne.n	8021ba2 <_strtoul_l.constprop.0+0x3e>
 8021c36:	2308      	movs	r3, #8
 8021c38:	e7b3      	b.n	8021ba2 <_strtoul_l.constprop.0+0x3e>
 8021c3a:	2c30      	cmp	r4, #48	; 0x30
 8021c3c:	d0a9      	beq.n	8021b92 <_strtoul_l.constprop.0+0x2e>
 8021c3e:	230a      	movs	r3, #10
 8021c40:	e7af      	b.n	8021ba2 <_strtoul_l.constprop.0+0x3e>
 8021c42:	bf00      	nop
 8021c44:	08026de5 	.word	0x08026de5

08021c48 <_strtoul_r>:
 8021c48:	f7ff bf8c 	b.w	8021b64 <_strtoul_l.constprop.0>

08021c4c <strtoul>:
 8021c4c:	4613      	mov	r3, r2
 8021c4e:	460a      	mov	r2, r1
 8021c50:	4601      	mov	r1, r0
 8021c52:	4802      	ldr	r0, [pc, #8]	; (8021c5c <strtoul+0x10>)
 8021c54:	6800      	ldr	r0, [r0, #0]
 8021c56:	f7ff bf85 	b.w	8021b64 <_strtoul_l.constprop.0>
 8021c5a:	bf00      	nop
 8021c5c:	240000b8 	.word	0x240000b8

08021c60 <_write_r>:
 8021c60:	b538      	push	{r3, r4, r5, lr}
 8021c62:	4d07      	ldr	r5, [pc, #28]	; (8021c80 <_write_r+0x20>)
 8021c64:	4604      	mov	r4, r0
 8021c66:	4608      	mov	r0, r1
 8021c68:	4611      	mov	r1, r2
 8021c6a:	2200      	movs	r2, #0
 8021c6c:	602a      	str	r2, [r5, #0]
 8021c6e:	461a      	mov	r2, r3
 8021c70:	f7df fcaa 	bl	80015c8 <_write>
 8021c74:	1c43      	adds	r3, r0, #1
 8021c76:	d102      	bne.n	8021c7e <_write_r+0x1e>
 8021c78:	682b      	ldr	r3, [r5, #0]
 8021c7a:	b103      	cbz	r3, 8021c7e <_write_r+0x1e>
 8021c7c:	6023      	str	r3, [r4, #0]
 8021c7e:	bd38      	pop	{r3, r4, r5, pc}
 8021c80:	2400f460 	.word	0x2400f460

08021c84 <_close_r>:
 8021c84:	b538      	push	{r3, r4, r5, lr}
 8021c86:	4d06      	ldr	r5, [pc, #24]	; (8021ca0 <_close_r+0x1c>)
 8021c88:	2300      	movs	r3, #0
 8021c8a:	4604      	mov	r4, r0
 8021c8c:	4608      	mov	r0, r1
 8021c8e:	602b      	str	r3, [r5, #0]
 8021c90:	f7df fca8 	bl	80015e4 <_close>
 8021c94:	1c43      	adds	r3, r0, #1
 8021c96:	d102      	bne.n	8021c9e <_close_r+0x1a>
 8021c98:	682b      	ldr	r3, [r5, #0]
 8021c9a:	b103      	cbz	r3, 8021c9e <_close_r+0x1a>
 8021c9c:	6023      	str	r3, [r4, #0]
 8021c9e:	bd38      	pop	{r3, r4, r5, pc}
 8021ca0:	2400f460 	.word	0x2400f460

08021ca4 <__env_lock>:
 8021ca4:	4801      	ldr	r0, [pc, #4]	; (8021cac <__env_lock+0x8>)
 8021ca6:	f7ff be2b 	b.w	8021900 <__retarget_lock_acquire_recursive>
 8021caa:	bf00      	nop
 8021cac:	2400f459 	.word	0x2400f459

08021cb0 <__env_unlock>:
 8021cb0:	4801      	ldr	r0, [pc, #4]	; (8021cb8 <__env_unlock+0x8>)
 8021cb2:	f7ff be27 	b.w	8021904 <__retarget_lock_release_recursive>
 8021cb6:	bf00      	nop
 8021cb8:	2400f459 	.word	0x2400f459

08021cbc <_fstat_r>:
 8021cbc:	b538      	push	{r3, r4, r5, lr}
 8021cbe:	4d07      	ldr	r5, [pc, #28]	; (8021cdc <_fstat_r+0x20>)
 8021cc0:	2300      	movs	r3, #0
 8021cc2:	4604      	mov	r4, r0
 8021cc4:	4608      	mov	r0, r1
 8021cc6:	4611      	mov	r1, r2
 8021cc8:	602b      	str	r3, [r5, #0]
 8021cca:	f7df fc8e 	bl	80015ea <_fstat>
 8021cce:	1c43      	adds	r3, r0, #1
 8021cd0:	d102      	bne.n	8021cd8 <_fstat_r+0x1c>
 8021cd2:	682b      	ldr	r3, [r5, #0]
 8021cd4:	b103      	cbz	r3, 8021cd8 <_fstat_r+0x1c>
 8021cd6:	6023      	str	r3, [r4, #0]
 8021cd8:	bd38      	pop	{r3, r4, r5, pc}
 8021cda:	bf00      	nop
 8021cdc:	2400f460 	.word	0x2400f460

08021ce0 <_isatty_r>:
 8021ce0:	b538      	push	{r3, r4, r5, lr}
 8021ce2:	4d06      	ldr	r5, [pc, #24]	; (8021cfc <_isatty_r+0x1c>)
 8021ce4:	2300      	movs	r3, #0
 8021ce6:	4604      	mov	r4, r0
 8021ce8:	4608      	mov	r0, r1
 8021cea:	602b      	str	r3, [r5, #0]
 8021cec:	f7df fc82 	bl	80015f4 <_isatty>
 8021cf0:	1c43      	adds	r3, r0, #1
 8021cf2:	d102      	bne.n	8021cfa <_isatty_r+0x1a>
 8021cf4:	682b      	ldr	r3, [r5, #0]
 8021cf6:	b103      	cbz	r3, 8021cfa <_isatty_r+0x1a>
 8021cf8:	6023      	str	r3, [r4, #0]
 8021cfa:	bd38      	pop	{r3, r4, r5, pc}
 8021cfc:	2400f460 	.word	0x2400f460

08021d00 <_lseek_r>:
 8021d00:	b538      	push	{r3, r4, r5, lr}
 8021d02:	4d07      	ldr	r5, [pc, #28]	; (8021d20 <_lseek_r+0x20>)
 8021d04:	4604      	mov	r4, r0
 8021d06:	4608      	mov	r0, r1
 8021d08:	4611      	mov	r1, r2
 8021d0a:	2200      	movs	r2, #0
 8021d0c:	602a      	str	r2, [r5, #0]
 8021d0e:	461a      	mov	r2, r3
 8021d10:	f7df fc72 	bl	80015f8 <_lseek>
 8021d14:	1c43      	adds	r3, r0, #1
 8021d16:	d102      	bne.n	8021d1e <_lseek_r+0x1e>
 8021d18:	682b      	ldr	r3, [r5, #0]
 8021d1a:	b103      	cbz	r3, 8021d1e <_lseek_r+0x1e>
 8021d1c:	6023      	str	r3, [r4, #0]
 8021d1e:	bd38      	pop	{r3, r4, r5, pc}
 8021d20:	2400f460 	.word	0x2400f460

08021d24 <_malloc_usable_size_r>:
 8021d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021d28:	1f18      	subs	r0, r3, #4
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	bfbc      	itt	lt
 8021d2e:	580b      	ldrlt	r3, [r1, r0]
 8021d30:	18c0      	addlt	r0, r0, r3
 8021d32:	4770      	bx	lr

08021d34 <_sungetc_r>:
 8021d34:	b538      	push	{r3, r4, r5, lr}
 8021d36:	1c4b      	adds	r3, r1, #1
 8021d38:	4614      	mov	r4, r2
 8021d3a:	d103      	bne.n	8021d44 <_sungetc_r+0x10>
 8021d3c:	f04f 35ff 	mov.w	r5, #4294967295
 8021d40:	4628      	mov	r0, r5
 8021d42:	bd38      	pop	{r3, r4, r5, pc}
 8021d44:	8993      	ldrh	r3, [r2, #12]
 8021d46:	f023 0320 	bic.w	r3, r3, #32
 8021d4a:	8193      	strh	r3, [r2, #12]
 8021d4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021d4e:	6852      	ldr	r2, [r2, #4]
 8021d50:	b2cd      	uxtb	r5, r1
 8021d52:	b18b      	cbz	r3, 8021d78 <_sungetc_r+0x44>
 8021d54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021d56:	4293      	cmp	r3, r2
 8021d58:	dd08      	ble.n	8021d6c <_sungetc_r+0x38>
 8021d5a:	6823      	ldr	r3, [r4, #0]
 8021d5c:	1e5a      	subs	r2, r3, #1
 8021d5e:	6022      	str	r2, [r4, #0]
 8021d60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8021d64:	6863      	ldr	r3, [r4, #4]
 8021d66:	3301      	adds	r3, #1
 8021d68:	6063      	str	r3, [r4, #4]
 8021d6a:	e7e9      	b.n	8021d40 <_sungetc_r+0xc>
 8021d6c:	4621      	mov	r1, r4
 8021d6e:	f000 fbd3 	bl	8022518 <__submore>
 8021d72:	2800      	cmp	r0, #0
 8021d74:	d0f1      	beq.n	8021d5a <_sungetc_r+0x26>
 8021d76:	e7e1      	b.n	8021d3c <_sungetc_r+0x8>
 8021d78:	6921      	ldr	r1, [r4, #16]
 8021d7a:	6823      	ldr	r3, [r4, #0]
 8021d7c:	b151      	cbz	r1, 8021d94 <_sungetc_r+0x60>
 8021d7e:	4299      	cmp	r1, r3
 8021d80:	d208      	bcs.n	8021d94 <_sungetc_r+0x60>
 8021d82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8021d86:	42a9      	cmp	r1, r5
 8021d88:	d104      	bne.n	8021d94 <_sungetc_r+0x60>
 8021d8a:	3b01      	subs	r3, #1
 8021d8c:	3201      	adds	r2, #1
 8021d8e:	6023      	str	r3, [r4, #0]
 8021d90:	6062      	str	r2, [r4, #4]
 8021d92:	e7d5      	b.n	8021d40 <_sungetc_r+0xc>
 8021d94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8021d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8021d9e:	2303      	movs	r3, #3
 8021da0:	63a3      	str	r3, [r4, #56]	; 0x38
 8021da2:	4623      	mov	r3, r4
 8021da4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8021da8:	6023      	str	r3, [r4, #0]
 8021daa:	2301      	movs	r3, #1
 8021dac:	e7dc      	b.n	8021d68 <_sungetc_r+0x34>

08021dae <__ssrefill_r>:
 8021dae:	b510      	push	{r4, lr}
 8021db0:	460c      	mov	r4, r1
 8021db2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021db4:	b169      	cbz	r1, 8021dd2 <__ssrefill_r+0x24>
 8021db6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021dba:	4299      	cmp	r1, r3
 8021dbc:	d001      	beq.n	8021dc2 <__ssrefill_r+0x14>
 8021dbe:	f7fe fb71 	bl	80204a4 <_free_r>
 8021dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021dc4:	6063      	str	r3, [r4, #4]
 8021dc6:	2000      	movs	r0, #0
 8021dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8021dca:	b113      	cbz	r3, 8021dd2 <__ssrefill_r+0x24>
 8021dcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8021dce:	6023      	str	r3, [r4, #0]
 8021dd0:	bd10      	pop	{r4, pc}
 8021dd2:	6923      	ldr	r3, [r4, #16]
 8021dd4:	6023      	str	r3, [r4, #0]
 8021dd6:	2300      	movs	r3, #0
 8021dd8:	6063      	str	r3, [r4, #4]
 8021dda:	89a3      	ldrh	r3, [r4, #12]
 8021ddc:	f043 0320 	orr.w	r3, r3, #32
 8021de0:	81a3      	strh	r3, [r4, #12]
 8021de2:	f04f 30ff 	mov.w	r0, #4294967295
 8021de6:	e7f3      	b.n	8021dd0 <__ssrefill_r+0x22>

08021de8 <__ssvfiscanf_r>:
 8021de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021dec:	460c      	mov	r4, r1
 8021dee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8021df2:	2100      	movs	r1, #0
 8021df4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8021df8:	49a6      	ldr	r1, [pc, #664]	; (8022094 <__ssvfiscanf_r+0x2ac>)
 8021dfa:	91a0      	str	r1, [sp, #640]	; 0x280
 8021dfc:	f10d 0804 	add.w	r8, sp, #4
 8021e00:	49a5      	ldr	r1, [pc, #660]	; (8022098 <__ssvfiscanf_r+0x2b0>)
 8021e02:	4fa6      	ldr	r7, [pc, #664]	; (802209c <__ssvfiscanf_r+0x2b4>)
 8021e04:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80220a0 <__ssvfiscanf_r+0x2b8>
 8021e08:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8021e0c:	4606      	mov	r6, r0
 8021e0e:	91a1      	str	r1, [sp, #644]	; 0x284
 8021e10:	9300      	str	r3, [sp, #0]
 8021e12:	7813      	ldrb	r3, [r2, #0]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	f000 815a 	beq.w	80220ce <__ssvfiscanf_r+0x2e6>
 8021e1a:	5dd9      	ldrb	r1, [r3, r7]
 8021e1c:	f011 0108 	ands.w	r1, r1, #8
 8021e20:	f102 0501 	add.w	r5, r2, #1
 8021e24:	d019      	beq.n	8021e5a <__ssvfiscanf_r+0x72>
 8021e26:	6863      	ldr	r3, [r4, #4]
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	dd0f      	ble.n	8021e4c <__ssvfiscanf_r+0x64>
 8021e2c:	6823      	ldr	r3, [r4, #0]
 8021e2e:	781a      	ldrb	r2, [r3, #0]
 8021e30:	5cba      	ldrb	r2, [r7, r2]
 8021e32:	0712      	lsls	r2, r2, #28
 8021e34:	d401      	bmi.n	8021e3a <__ssvfiscanf_r+0x52>
 8021e36:	462a      	mov	r2, r5
 8021e38:	e7eb      	b.n	8021e12 <__ssvfiscanf_r+0x2a>
 8021e3a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021e3c:	3201      	adds	r2, #1
 8021e3e:	9245      	str	r2, [sp, #276]	; 0x114
 8021e40:	6862      	ldr	r2, [r4, #4]
 8021e42:	3301      	adds	r3, #1
 8021e44:	3a01      	subs	r2, #1
 8021e46:	6062      	str	r2, [r4, #4]
 8021e48:	6023      	str	r3, [r4, #0]
 8021e4a:	e7ec      	b.n	8021e26 <__ssvfiscanf_r+0x3e>
 8021e4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021e4e:	4621      	mov	r1, r4
 8021e50:	4630      	mov	r0, r6
 8021e52:	4798      	blx	r3
 8021e54:	2800      	cmp	r0, #0
 8021e56:	d0e9      	beq.n	8021e2c <__ssvfiscanf_r+0x44>
 8021e58:	e7ed      	b.n	8021e36 <__ssvfiscanf_r+0x4e>
 8021e5a:	2b25      	cmp	r3, #37	; 0x25
 8021e5c:	d012      	beq.n	8021e84 <__ssvfiscanf_r+0x9c>
 8021e5e:	469a      	mov	sl, r3
 8021e60:	6863      	ldr	r3, [r4, #4]
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	f340 8091 	ble.w	8021f8a <__ssvfiscanf_r+0x1a2>
 8021e68:	6822      	ldr	r2, [r4, #0]
 8021e6a:	7813      	ldrb	r3, [r2, #0]
 8021e6c:	4553      	cmp	r3, sl
 8021e6e:	f040 812e 	bne.w	80220ce <__ssvfiscanf_r+0x2e6>
 8021e72:	6863      	ldr	r3, [r4, #4]
 8021e74:	3b01      	subs	r3, #1
 8021e76:	6063      	str	r3, [r4, #4]
 8021e78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8021e7a:	3201      	adds	r2, #1
 8021e7c:	3301      	adds	r3, #1
 8021e7e:	6022      	str	r2, [r4, #0]
 8021e80:	9345      	str	r3, [sp, #276]	; 0x114
 8021e82:	e7d8      	b.n	8021e36 <__ssvfiscanf_r+0x4e>
 8021e84:	9141      	str	r1, [sp, #260]	; 0x104
 8021e86:	9143      	str	r1, [sp, #268]	; 0x10c
 8021e88:	7853      	ldrb	r3, [r2, #1]
 8021e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8021e8c:	bf02      	ittt	eq
 8021e8e:	2310      	moveq	r3, #16
 8021e90:	1c95      	addeq	r5, r2, #2
 8021e92:	9341      	streq	r3, [sp, #260]	; 0x104
 8021e94:	220a      	movs	r2, #10
 8021e96:	46aa      	mov	sl, r5
 8021e98:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8021e9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8021ea0:	2b09      	cmp	r3, #9
 8021ea2:	d91d      	bls.n	8021ee0 <__ssvfiscanf_r+0xf8>
 8021ea4:	487e      	ldr	r0, [pc, #504]	; (80220a0 <__ssvfiscanf_r+0x2b8>)
 8021ea6:	2203      	movs	r2, #3
 8021ea8:	f7de fa1a 	bl	80002e0 <memchr>
 8021eac:	b140      	cbz	r0, 8021ec0 <__ssvfiscanf_r+0xd8>
 8021eae:	2301      	movs	r3, #1
 8021eb0:	eba0 0009 	sub.w	r0, r0, r9
 8021eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8021eb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021eba:	4318      	orrs	r0, r3
 8021ebc:	9041      	str	r0, [sp, #260]	; 0x104
 8021ebe:	4655      	mov	r5, sl
 8021ec0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021ec4:	2b78      	cmp	r3, #120	; 0x78
 8021ec6:	d806      	bhi.n	8021ed6 <__ssvfiscanf_r+0xee>
 8021ec8:	2b57      	cmp	r3, #87	; 0x57
 8021eca:	d810      	bhi.n	8021eee <__ssvfiscanf_r+0x106>
 8021ecc:	2b25      	cmp	r3, #37	; 0x25
 8021ece:	d0c6      	beq.n	8021e5e <__ssvfiscanf_r+0x76>
 8021ed0:	d856      	bhi.n	8021f80 <__ssvfiscanf_r+0x198>
 8021ed2:	2b00      	cmp	r3, #0
 8021ed4:	d064      	beq.n	8021fa0 <__ssvfiscanf_r+0x1b8>
 8021ed6:	2303      	movs	r3, #3
 8021ed8:	9347      	str	r3, [sp, #284]	; 0x11c
 8021eda:	230a      	movs	r3, #10
 8021edc:	9342      	str	r3, [sp, #264]	; 0x108
 8021ede:	e071      	b.n	8021fc4 <__ssvfiscanf_r+0x1dc>
 8021ee0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8021ee2:	fb02 1103 	mla	r1, r2, r3, r1
 8021ee6:	3930      	subs	r1, #48	; 0x30
 8021ee8:	9143      	str	r1, [sp, #268]	; 0x10c
 8021eea:	4655      	mov	r5, sl
 8021eec:	e7d3      	b.n	8021e96 <__ssvfiscanf_r+0xae>
 8021eee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8021ef2:	2a20      	cmp	r2, #32
 8021ef4:	d8ef      	bhi.n	8021ed6 <__ssvfiscanf_r+0xee>
 8021ef6:	a101      	add	r1, pc, #4	; (adr r1, 8021efc <__ssvfiscanf_r+0x114>)
 8021ef8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021efc:	08021faf 	.word	0x08021faf
 8021f00:	08021ed7 	.word	0x08021ed7
 8021f04:	08021ed7 	.word	0x08021ed7
 8021f08:	0802200d 	.word	0x0802200d
 8021f0c:	08021ed7 	.word	0x08021ed7
 8021f10:	08021ed7 	.word	0x08021ed7
 8021f14:	08021ed7 	.word	0x08021ed7
 8021f18:	08021ed7 	.word	0x08021ed7
 8021f1c:	08021ed7 	.word	0x08021ed7
 8021f20:	08021ed7 	.word	0x08021ed7
 8021f24:	08021ed7 	.word	0x08021ed7
 8021f28:	08022023 	.word	0x08022023
 8021f2c:	08021ff9 	.word	0x08021ff9
 8021f30:	08021f87 	.word	0x08021f87
 8021f34:	08021f87 	.word	0x08021f87
 8021f38:	08021f87 	.word	0x08021f87
 8021f3c:	08021ed7 	.word	0x08021ed7
 8021f40:	08021ffd 	.word	0x08021ffd
 8021f44:	08021ed7 	.word	0x08021ed7
 8021f48:	08021ed7 	.word	0x08021ed7
 8021f4c:	08021ed7 	.word	0x08021ed7
 8021f50:	08021ed7 	.word	0x08021ed7
 8021f54:	08022033 	.word	0x08022033
 8021f58:	08022005 	.word	0x08022005
 8021f5c:	08021fa7 	.word	0x08021fa7
 8021f60:	08021ed7 	.word	0x08021ed7
 8021f64:	08021ed7 	.word	0x08021ed7
 8021f68:	0802202f 	.word	0x0802202f
 8021f6c:	08021ed7 	.word	0x08021ed7
 8021f70:	08021ff9 	.word	0x08021ff9
 8021f74:	08021ed7 	.word	0x08021ed7
 8021f78:	08021ed7 	.word	0x08021ed7
 8021f7c:	08021faf 	.word	0x08021faf
 8021f80:	3b45      	subs	r3, #69	; 0x45
 8021f82:	2b02      	cmp	r3, #2
 8021f84:	d8a7      	bhi.n	8021ed6 <__ssvfiscanf_r+0xee>
 8021f86:	2305      	movs	r3, #5
 8021f88:	e01b      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 8021f8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021f8c:	4621      	mov	r1, r4
 8021f8e:	4630      	mov	r0, r6
 8021f90:	4798      	blx	r3
 8021f92:	2800      	cmp	r0, #0
 8021f94:	f43f af68 	beq.w	8021e68 <__ssvfiscanf_r+0x80>
 8021f98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021f9a:	2800      	cmp	r0, #0
 8021f9c:	f040 808d 	bne.w	80220ba <__ssvfiscanf_r+0x2d2>
 8021fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8021fa4:	e08f      	b.n	80220c6 <__ssvfiscanf_r+0x2de>
 8021fa6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021fa8:	f042 0220 	orr.w	r2, r2, #32
 8021fac:	9241      	str	r2, [sp, #260]	; 0x104
 8021fae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8021fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021fb4:	9241      	str	r2, [sp, #260]	; 0x104
 8021fb6:	2210      	movs	r2, #16
 8021fb8:	2b6f      	cmp	r3, #111	; 0x6f
 8021fba:	9242      	str	r2, [sp, #264]	; 0x108
 8021fbc:	bf34      	ite	cc
 8021fbe:	2303      	movcc	r3, #3
 8021fc0:	2304      	movcs	r3, #4
 8021fc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8021fc4:	6863      	ldr	r3, [r4, #4]
 8021fc6:	2b00      	cmp	r3, #0
 8021fc8:	dd42      	ble.n	8022050 <__ssvfiscanf_r+0x268>
 8021fca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021fcc:	0659      	lsls	r1, r3, #25
 8021fce:	d404      	bmi.n	8021fda <__ssvfiscanf_r+0x1f2>
 8021fd0:	6823      	ldr	r3, [r4, #0]
 8021fd2:	781a      	ldrb	r2, [r3, #0]
 8021fd4:	5cba      	ldrb	r2, [r7, r2]
 8021fd6:	0712      	lsls	r2, r2, #28
 8021fd8:	d441      	bmi.n	802205e <__ssvfiscanf_r+0x276>
 8021fda:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021fdc:	2b02      	cmp	r3, #2
 8021fde:	dc50      	bgt.n	8022082 <__ssvfiscanf_r+0x29a>
 8021fe0:	466b      	mov	r3, sp
 8021fe2:	4622      	mov	r2, r4
 8021fe4:	a941      	add	r1, sp, #260	; 0x104
 8021fe6:	4630      	mov	r0, r6
 8021fe8:	f000 f876 	bl	80220d8 <_scanf_chars>
 8021fec:	2801      	cmp	r0, #1
 8021fee:	d06e      	beq.n	80220ce <__ssvfiscanf_r+0x2e6>
 8021ff0:	2802      	cmp	r0, #2
 8021ff2:	f47f af20 	bne.w	8021e36 <__ssvfiscanf_r+0x4e>
 8021ff6:	e7cf      	b.n	8021f98 <__ssvfiscanf_r+0x1b0>
 8021ff8:	220a      	movs	r2, #10
 8021ffa:	e7dd      	b.n	8021fb8 <__ssvfiscanf_r+0x1d0>
 8021ffc:	2300      	movs	r3, #0
 8021ffe:	9342      	str	r3, [sp, #264]	; 0x108
 8022000:	2303      	movs	r3, #3
 8022002:	e7de      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 8022004:	2308      	movs	r3, #8
 8022006:	9342      	str	r3, [sp, #264]	; 0x108
 8022008:	2304      	movs	r3, #4
 802200a:	e7da      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 802200c:	4629      	mov	r1, r5
 802200e:	4640      	mov	r0, r8
 8022010:	f000 f9c6 	bl	80223a0 <__sccl>
 8022014:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802201a:	9341      	str	r3, [sp, #260]	; 0x104
 802201c:	4605      	mov	r5, r0
 802201e:	2301      	movs	r3, #1
 8022020:	e7cf      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 8022022:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022028:	9341      	str	r3, [sp, #260]	; 0x104
 802202a:	2300      	movs	r3, #0
 802202c:	e7c9      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 802202e:	2302      	movs	r3, #2
 8022030:	e7c7      	b.n	8021fc2 <__ssvfiscanf_r+0x1da>
 8022032:	9841      	ldr	r0, [sp, #260]	; 0x104
 8022034:	06c3      	lsls	r3, r0, #27
 8022036:	f53f aefe 	bmi.w	8021e36 <__ssvfiscanf_r+0x4e>
 802203a:	9b00      	ldr	r3, [sp, #0]
 802203c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802203e:	1d19      	adds	r1, r3, #4
 8022040:	9100      	str	r1, [sp, #0]
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	f010 0f01 	tst.w	r0, #1
 8022048:	bf14      	ite	ne
 802204a:	801a      	strhne	r2, [r3, #0]
 802204c:	601a      	streq	r2, [r3, #0]
 802204e:	e6f2      	b.n	8021e36 <__ssvfiscanf_r+0x4e>
 8022050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022052:	4621      	mov	r1, r4
 8022054:	4630      	mov	r0, r6
 8022056:	4798      	blx	r3
 8022058:	2800      	cmp	r0, #0
 802205a:	d0b6      	beq.n	8021fca <__ssvfiscanf_r+0x1e2>
 802205c:	e79c      	b.n	8021f98 <__ssvfiscanf_r+0x1b0>
 802205e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022060:	3201      	adds	r2, #1
 8022062:	9245      	str	r2, [sp, #276]	; 0x114
 8022064:	6862      	ldr	r2, [r4, #4]
 8022066:	3a01      	subs	r2, #1
 8022068:	2a00      	cmp	r2, #0
 802206a:	6062      	str	r2, [r4, #4]
 802206c:	dd02      	ble.n	8022074 <__ssvfiscanf_r+0x28c>
 802206e:	3301      	adds	r3, #1
 8022070:	6023      	str	r3, [r4, #0]
 8022072:	e7ad      	b.n	8021fd0 <__ssvfiscanf_r+0x1e8>
 8022074:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022076:	4621      	mov	r1, r4
 8022078:	4630      	mov	r0, r6
 802207a:	4798      	blx	r3
 802207c:	2800      	cmp	r0, #0
 802207e:	d0a7      	beq.n	8021fd0 <__ssvfiscanf_r+0x1e8>
 8022080:	e78a      	b.n	8021f98 <__ssvfiscanf_r+0x1b0>
 8022082:	2b04      	cmp	r3, #4
 8022084:	dc0e      	bgt.n	80220a4 <__ssvfiscanf_r+0x2bc>
 8022086:	466b      	mov	r3, sp
 8022088:	4622      	mov	r2, r4
 802208a:	a941      	add	r1, sp, #260	; 0x104
 802208c:	4630      	mov	r0, r6
 802208e:	f000 f87d 	bl	802218c <_scanf_i>
 8022092:	e7ab      	b.n	8021fec <__ssvfiscanf_r+0x204>
 8022094:	08021d35 	.word	0x08021d35
 8022098:	08021daf 	.word	0x08021daf
 802209c:	08026de5 	.word	0x08026de5
 80220a0:	08026d16 	.word	0x08026d16
 80220a4:	4b0b      	ldr	r3, [pc, #44]	; (80220d4 <__ssvfiscanf_r+0x2ec>)
 80220a6:	2b00      	cmp	r3, #0
 80220a8:	f43f aec5 	beq.w	8021e36 <__ssvfiscanf_r+0x4e>
 80220ac:	466b      	mov	r3, sp
 80220ae:	4622      	mov	r2, r4
 80220b0:	a941      	add	r1, sp, #260	; 0x104
 80220b2:	4630      	mov	r0, r6
 80220b4:	f3af 8000 	nop.w
 80220b8:	e798      	b.n	8021fec <__ssvfiscanf_r+0x204>
 80220ba:	89a3      	ldrh	r3, [r4, #12]
 80220bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80220c0:	bf18      	it	ne
 80220c2:	f04f 30ff 	movne.w	r0, #4294967295
 80220c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80220ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80220d0:	e7f9      	b.n	80220c6 <__ssvfiscanf_r+0x2de>
 80220d2:	bf00      	nop
 80220d4:	00000000 	.word	0x00000000

080220d8 <_scanf_chars>:
 80220d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80220dc:	4615      	mov	r5, r2
 80220de:	688a      	ldr	r2, [r1, #8]
 80220e0:	4680      	mov	r8, r0
 80220e2:	460c      	mov	r4, r1
 80220e4:	b932      	cbnz	r2, 80220f4 <_scanf_chars+0x1c>
 80220e6:	698a      	ldr	r2, [r1, #24]
 80220e8:	2a00      	cmp	r2, #0
 80220ea:	bf0c      	ite	eq
 80220ec:	2201      	moveq	r2, #1
 80220ee:	f04f 32ff 	movne.w	r2, #4294967295
 80220f2:	608a      	str	r2, [r1, #8]
 80220f4:	6822      	ldr	r2, [r4, #0]
 80220f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8022188 <_scanf_chars+0xb0>
 80220fa:	06d1      	lsls	r1, r2, #27
 80220fc:	bf5f      	itttt	pl
 80220fe:	681a      	ldrpl	r2, [r3, #0]
 8022100:	1d11      	addpl	r1, r2, #4
 8022102:	6019      	strpl	r1, [r3, #0]
 8022104:	6816      	ldrpl	r6, [r2, #0]
 8022106:	2700      	movs	r7, #0
 8022108:	69a0      	ldr	r0, [r4, #24]
 802210a:	b188      	cbz	r0, 8022130 <_scanf_chars+0x58>
 802210c:	2801      	cmp	r0, #1
 802210e:	d107      	bne.n	8022120 <_scanf_chars+0x48>
 8022110:	682a      	ldr	r2, [r5, #0]
 8022112:	7811      	ldrb	r1, [r2, #0]
 8022114:	6962      	ldr	r2, [r4, #20]
 8022116:	5c52      	ldrb	r2, [r2, r1]
 8022118:	b952      	cbnz	r2, 8022130 <_scanf_chars+0x58>
 802211a:	2f00      	cmp	r7, #0
 802211c:	d031      	beq.n	8022182 <_scanf_chars+0xaa>
 802211e:	e022      	b.n	8022166 <_scanf_chars+0x8e>
 8022120:	2802      	cmp	r0, #2
 8022122:	d120      	bne.n	8022166 <_scanf_chars+0x8e>
 8022124:	682b      	ldr	r3, [r5, #0]
 8022126:	781b      	ldrb	r3, [r3, #0]
 8022128:	f813 3009 	ldrb.w	r3, [r3, r9]
 802212c:	071b      	lsls	r3, r3, #28
 802212e:	d41a      	bmi.n	8022166 <_scanf_chars+0x8e>
 8022130:	6823      	ldr	r3, [r4, #0]
 8022132:	06da      	lsls	r2, r3, #27
 8022134:	bf5e      	ittt	pl
 8022136:	682b      	ldrpl	r3, [r5, #0]
 8022138:	781b      	ldrbpl	r3, [r3, #0]
 802213a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802213e:	682a      	ldr	r2, [r5, #0]
 8022140:	686b      	ldr	r3, [r5, #4]
 8022142:	3201      	adds	r2, #1
 8022144:	602a      	str	r2, [r5, #0]
 8022146:	68a2      	ldr	r2, [r4, #8]
 8022148:	3b01      	subs	r3, #1
 802214a:	3a01      	subs	r2, #1
 802214c:	606b      	str	r3, [r5, #4]
 802214e:	3701      	adds	r7, #1
 8022150:	60a2      	str	r2, [r4, #8]
 8022152:	b142      	cbz	r2, 8022166 <_scanf_chars+0x8e>
 8022154:	2b00      	cmp	r3, #0
 8022156:	dcd7      	bgt.n	8022108 <_scanf_chars+0x30>
 8022158:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802215c:	4629      	mov	r1, r5
 802215e:	4640      	mov	r0, r8
 8022160:	4798      	blx	r3
 8022162:	2800      	cmp	r0, #0
 8022164:	d0d0      	beq.n	8022108 <_scanf_chars+0x30>
 8022166:	6823      	ldr	r3, [r4, #0]
 8022168:	f013 0310 	ands.w	r3, r3, #16
 802216c:	d105      	bne.n	802217a <_scanf_chars+0xa2>
 802216e:	68e2      	ldr	r2, [r4, #12]
 8022170:	3201      	adds	r2, #1
 8022172:	60e2      	str	r2, [r4, #12]
 8022174:	69a2      	ldr	r2, [r4, #24]
 8022176:	b102      	cbz	r2, 802217a <_scanf_chars+0xa2>
 8022178:	7033      	strb	r3, [r6, #0]
 802217a:	6923      	ldr	r3, [r4, #16]
 802217c:	443b      	add	r3, r7
 802217e:	6123      	str	r3, [r4, #16]
 8022180:	2000      	movs	r0, #0
 8022182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022186:	bf00      	nop
 8022188:	08026de5 	.word	0x08026de5

0802218c <_scanf_i>:
 802218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022190:	4698      	mov	r8, r3
 8022192:	4b76      	ldr	r3, [pc, #472]	; (802236c <_scanf_i+0x1e0>)
 8022194:	460c      	mov	r4, r1
 8022196:	4682      	mov	sl, r0
 8022198:	4616      	mov	r6, r2
 802219a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802219e:	b087      	sub	sp, #28
 80221a0:	ab03      	add	r3, sp, #12
 80221a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80221a6:	4b72      	ldr	r3, [pc, #456]	; (8022370 <_scanf_i+0x1e4>)
 80221a8:	69a1      	ldr	r1, [r4, #24]
 80221aa:	4a72      	ldr	r2, [pc, #456]	; (8022374 <_scanf_i+0x1e8>)
 80221ac:	2903      	cmp	r1, #3
 80221ae:	bf18      	it	ne
 80221b0:	461a      	movne	r2, r3
 80221b2:	68a3      	ldr	r3, [r4, #8]
 80221b4:	9201      	str	r2, [sp, #4]
 80221b6:	1e5a      	subs	r2, r3, #1
 80221b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80221bc:	bf88      	it	hi
 80221be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80221c2:	4627      	mov	r7, r4
 80221c4:	bf82      	ittt	hi
 80221c6:	eb03 0905 	addhi.w	r9, r3, r5
 80221ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 80221ce:	60a3      	strhi	r3, [r4, #8]
 80221d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80221d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80221d8:	bf98      	it	ls
 80221da:	f04f 0900 	movls.w	r9, #0
 80221de:	6023      	str	r3, [r4, #0]
 80221e0:	463d      	mov	r5, r7
 80221e2:	f04f 0b00 	mov.w	fp, #0
 80221e6:	6831      	ldr	r1, [r6, #0]
 80221e8:	ab03      	add	r3, sp, #12
 80221ea:	7809      	ldrb	r1, [r1, #0]
 80221ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80221f0:	2202      	movs	r2, #2
 80221f2:	f7de f875 	bl	80002e0 <memchr>
 80221f6:	b328      	cbz	r0, 8022244 <_scanf_i+0xb8>
 80221f8:	f1bb 0f01 	cmp.w	fp, #1
 80221fc:	d159      	bne.n	80222b2 <_scanf_i+0x126>
 80221fe:	6862      	ldr	r2, [r4, #4]
 8022200:	b92a      	cbnz	r2, 802220e <_scanf_i+0x82>
 8022202:	6822      	ldr	r2, [r4, #0]
 8022204:	2308      	movs	r3, #8
 8022206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802220a:	6063      	str	r3, [r4, #4]
 802220c:	6022      	str	r2, [r4, #0]
 802220e:	6822      	ldr	r2, [r4, #0]
 8022210:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022214:	6022      	str	r2, [r4, #0]
 8022216:	68a2      	ldr	r2, [r4, #8]
 8022218:	1e51      	subs	r1, r2, #1
 802221a:	60a1      	str	r1, [r4, #8]
 802221c:	b192      	cbz	r2, 8022244 <_scanf_i+0xb8>
 802221e:	6832      	ldr	r2, [r6, #0]
 8022220:	1c51      	adds	r1, r2, #1
 8022222:	6031      	str	r1, [r6, #0]
 8022224:	7812      	ldrb	r2, [r2, #0]
 8022226:	f805 2b01 	strb.w	r2, [r5], #1
 802222a:	6872      	ldr	r2, [r6, #4]
 802222c:	3a01      	subs	r2, #1
 802222e:	2a00      	cmp	r2, #0
 8022230:	6072      	str	r2, [r6, #4]
 8022232:	dc07      	bgt.n	8022244 <_scanf_i+0xb8>
 8022234:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022238:	4631      	mov	r1, r6
 802223a:	4650      	mov	r0, sl
 802223c:	4790      	blx	r2
 802223e:	2800      	cmp	r0, #0
 8022240:	f040 8085 	bne.w	802234e <_scanf_i+0x1c2>
 8022244:	f10b 0b01 	add.w	fp, fp, #1
 8022248:	f1bb 0f03 	cmp.w	fp, #3
 802224c:	d1cb      	bne.n	80221e6 <_scanf_i+0x5a>
 802224e:	6863      	ldr	r3, [r4, #4]
 8022250:	b90b      	cbnz	r3, 8022256 <_scanf_i+0xca>
 8022252:	230a      	movs	r3, #10
 8022254:	6063      	str	r3, [r4, #4]
 8022256:	6863      	ldr	r3, [r4, #4]
 8022258:	4947      	ldr	r1, [pc, #284]	; (8022378 <_scanf_i+0x1ec>)
 802225a:	6960      	ldr	r0, [r4, #20]
 802225c:	1ac9      	subs	r1, r1, r3
 802225e:	f000 f89f 	bl	80223a0 <__sccl>
 8022262:	f04f 0b00 	mov.w	fp, #0
 8022266:	68a3      	ldr	r3, [r4, #8]
 8022268:	6822      	ldr	r2, [r4, #0]
 802226a:	2b00      	cmp	r3, #0
 802226c:	d03d      	beq.n	80222ea <_scanf_i+0x15e>
 802226e:	6831      	ldr	r1, [r6, #0]
 8022270:	6960      	ldr	r0, [r4, #20]
 8022272:	f891 c000 	ldrb.w	ip, [r1]
 8022276:	f810 000c 	ldrb.w	r0, [r0, ip]
 802227a:	2800      	cmp	r0, #0
 802227c:	d035      	beq.n	80222ea <_scanf_i+0x15e>
 802227e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022282:	d124      	bne.n	80222ce <_scanf_i+0x142>
 8022284:	0510      	lsls	r0, r2, #20
 8022286:	d522      	bpl.n	80222ce <_scanf_i+0x142>
 8022288:	f10b 0b01 	add.w	fp, fp, #1
 802228c:	f1b9 0f00 	cmp.w	r9, #0
 8022290:	d003      	beq.n	802229a <_scanf_i+0x10e>
 8022292:	3301      	adds	r3, #1
 8022294:	f109 39ff 	add.w	r9, r9, #4294967295
 8022298:	60a3      	str	r3, [r4, #8]
 802229a:	6873      	ldr	r3, [r6, #4]
 802229c:	3b01      	subs	r3, #1
 802229e:	2b00      	cmp	r3, #0
 80222a0:	6073      	str	r3, [r6, #4]
 80222a2:	dd1b      	ble.n	80222dc <_scanf_i+0x150>
 80222a4:	6833      	ldr	r3, [r6, #0]
 80222a6:	3301      	adds	r3, #1
 80222a8:	6033      	str	r3, [r6, #0]
 80222aa:	68a3      	ldr	r3, [r4, #8]
 80222ac:	3b01      	subs	r3, #1
 80222ae:	60a3      	str	r3, [r4, #8]
 80222b0:	e7d9      	b.n	8022266 <_scanf_i+0xda>
 80222b2:	f1bb 0f02 	cmp.w	fp, #2
 80222b6:	d1ae      	bne.n	8022216 <_scanf_i+0x8a>
 80222b8:	6822      	ldr	r2, [r4, #0]
 80222ba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80222be:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80222c2:	d1bf      	bne.n	8022244 <_scanf_i+0xb8>
 80222c4:	2310      	movs	r3, #16
 80222c6:	6063      	str	r3, [r4, #4]
 80222c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80222cc:	e7a2      	b.n	8022214 <_scanf_i+0x88>
 80222ce:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80222d2:	6022      	str	r2, [r4, #0]
 80222d4:	780b      	ldrb	r3, [r1, #0]
 80222d6:	f805 3b01 	strb.w	r3, [r5], #1
 80222da:	e7de      	b.n	802229a <_scanf_i+0x10e>
 80222dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80222e0:	4631      	mov	r1, r6
 80222e2:	4650      	mov	r0, sl
 80222e4:	4798      	blx	r3
 80222e6:	2800      	cmp	r0, #0
 80222e8:	d0df      	beq.n	80222aa <_scanf_i+0x11e>
 80222ea:	6823      	ldr	r3, [r4, #0]
 80222ec:	05db      	lsls	r3, r3, #23
 80222ee:	d50d      	bpl.n	802230c <_scanf_i+0x180>
 80222f0:	42bd      	cmp	r5, r7
 80222f2:	d909      	bls.n	8022308 <_scanf_i+0x17c>
 80222f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80222f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80222fc:	4632      	mov	r2, r6
 80222fe:	4650      	mov	r0, sl
 8022300:	4798      	blx	r3
 8022302:	f105 39ff 	add.w	r9, r5, #4294967295
 8022306:	464d      	mov	r5, r9
 8022308:	42bd      	cmp	r5, r7
 802230a:	d02d      	beq.n	8022368 <_scanf_i+0x1dc>
 802230c:	6822      	ldr	r2, [r4, #0]
 802230e:	f012 0210 	ands.w	r2, r2, #16
 8022312:	d113      	bne.n	802233c <_scanf_i+0x1b0>
 8022314:	702a      	strb	r2, [r5, #0]
 8022316:	6863      	ldr	r3, [r4, #4]
 8022318:	9e01      	ldr	r6, [sp, #4]
 802231a:	4639      	mov	r1, r7
 802231c:	4650      	mov	r0, sl
 802231e:	47b0      	blx	r6
 8022320:	6821      	ldr	r1, [r4, #0]
 8022322:	f8d8 3000 	ldr.w	r3, [r8]
 8022326:	f011 0f20 	tst.w	r1, #32
 802232a:	d013      	beq.n	8022354 <_scanf_i+0x1c8>
 802232c:	1d1a      	adds	r2, r3, #4
 802232e:	f8c8 2000 	str.w	r2, [r8]
 8022332:	681b      	ldr	r3, [r3, #0]
 8022334:	6018      	str	r0, [r3, #0]
 8022336:	68e3      	ldr	r3, [r4, #12]
 8022338:	3301      	adds	r3, #1
 802233a:	60e3      	str	r3, [r4, #12]
 802233c:	1bed      	subs	r5, r5, r7
 802233e:	44ab      	add	fp, r5
 8022340:	6925      	ldr	r5, [r4, #16]
 8022342:	445d      	add	r5, fp
 8022344:	6125      	str	r5, [r4, #16]
 8022346:	2000      	movs	r0, #0
 8022348:	b007      	add	sp, #28
 802234a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802234e:	f04f 0b00 	mov.w	fp, #0
 8022352:	e7ca      	b.n	80222ea <_scanf_i+0x15e>
 8022354:	1d1a      	adds	r2, r3, #4
 8022356:	f8c8 2000 	str.w	r2, [r8]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	f011 0f01 	tst.w	r1, #1
 8022360:	bf14      	ite	ne
 8022362:	8018      	strhne	r0, [r3, #0]
 8022364:	6018      	streq	r0, [r3, #0]
 8022366:	e7e6      	b.n	8022336 <_scanf_i+0x1aa>
 8022368:	2001      	movs	r0, #1
 802236a:	e7ed      	b.n	8022348 <_scanf_i+0x1bc>
 802236c:	080225e8 	.word	0x080225e8
 8022370:	08021c49 	.word	0x08021c49
 8022374:	08022515 	.word	0x08022515
 8022378:	08026efe 	.word	0x08026efe

0802237c <_read_r>:
 802237c:	b538      	push	{r3, r4, r5, lr}
 802237e:	4d07      	ldr	r5, [pc, #28]	; (802239c <_read_r+0x20>)
 8022380:	4604      	mov	r4, r0
 8022382:	4608      	mov	r0, r1
 8022384:	4611      	mov	r1, r2
 8022386:	2200      	movs	r2, #0
 8022388:	602a      	str	r2, [r5, #0]
 802238a:	461a      	mov	r2, r3
 802238c:	f7df f90e 	bl	80015ac <_read>
 8022390:	1c43      	adds	r3, r0, #1
 8022392:	d102      	bne.n	802239a <_read_r+0x1e>
 8022394:	682b      	ldr	r3, [r5, #0]
 8022396:	b103      	cbz	r3, 802239a <_read_r+0x1e>
 8022398:	6023      	str	r3, [r4, #0]
 802239a:	bd38      	pop	{r3, r4, r5, pc}
 802239c:	2400f460 	.word	0x2400f460

080223a0 <__sccl>:
 80223a0:	b570      	push	{r4, r5, r6, lr}
 80223a2:	780b      	ldrb	r3, [r1, #0]
 80223a4:	4604      	mov	r4, r0
 80223a6:	2b5e      	cmp	r3, #94	; 0x5e
 80223a8:	bf0b      	itete	eq
 80223aa:	784b      	ldrbeq	r3, [r1, #1]
 80223ac:	1c48      	addne	r0, r1, #1
 80223ae:	1c88      	addeq	r0, r1, #2
 80223b0:	2200      	movne	r2, #0
 80223b2:	bf08      	it	eq
 80223b4:	2201      	moveq	r2, #1
 80223b6:	1e61      	subs	r1, r4, #1
 80223b8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80223bc:	f801 2f01 	strb.w	r2, [r1, #1]!
 80223c0:	42a9      	cmp	r1, r5
 80223c2:	d1fb      	bne.n	80223bc <__sccl+0x1c>
 80223c4:	b90b      	cbnz	r3, 80223ca <__sccl+0x2a>
 80223c6:	3801      	subs	r0, #1
 80223c8:	bd70      	pop	{r4, r5, r6, pc}
 80223ca:	f082 0201 	eor.w	r2, r2, #1
 80223ce:	54e2      	strb	r2, [r4, r3]
 80223d0:	4605      	mov	r5, r0
 80223d2:	4628      	mov	r0, r5
 80223d4:	f810 1b01 	ldrb.w	r1, [r0], #1
 80223d8:	292d      	cmp	r1, #45	; 0x2d
 80223da:	d006      	beq.n	80223ea <__sccl+0x4a>
 80223dc:	295d      	cmp	r1, #93	; 0x5d
 80223de:	d0f3      	beq.n	80223c8 <__sccl+0x28>
 80223e0:	b909      	cbnz	r1, 80223e6 <__sccl+0x46>
 80223e2:	4628      	mov	r0, r5
 80223e4:	e7f0      	b.n	80223c8 <__sccl+0x28>
 80223e6:	460b      	mov	r3, r1
 80223e8:	e7f1      	b.n	80223ce <__sccl+0x2e>
 80223ea:	786e      	ldrb	r6, [r5, #1]
 80223ec:	2e5d      	cmp	r6, #93	; 0x5d
 80223ee:	d0fa      	beq.n	80223e6 <__sccl+0x46>
 80223f0:	42b3      	cmp	r3, r6
 80223f2:	dcf8      	bgt.n	80223e6 <__sccl+0x46>
 80223f4:	3502      	adds	r5, #2
 80223f6:	4619      	mov	r1, r3
 80223f8:	3101      	adds	r1, #1
 80223fa:	428e      	cmp	r6, r1
 80223fc:	5462      	strb	r2, [r4, r1]
 80223fe:	dcfb      	bgt.n	80223f8 <__sccl+0x58>
 8022400:	1af1      	subs	r1, r6, r3
 8022402:	3901      	subs	r1, #1
 8022404:	1c58      	adds	r0, r3, #1
 8022406:	42b3      	cmp	r3, r6
 8022408:	bfa8      	it	ge
 802240a:	2100      	movge	r1, #0
 802240c:	1843      	adds	r3, r0, r1
 802240e:	e7e0      	b.n	80223d2 <__sccl+0x32>

08022410 <_strtol_l.constprop.0>:
 8022410:	2b01      	cmp	r3, #1
 8022412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022416:	d001      	beq.n	802241c <_strtol_l.constprop.0+0xc>
 8022418:	2b24      	cmp	r3, #36	; 0x24
 802241a:	d906      	bls.n	802242a <_strtol_l.constprop.0+0x1a>
 802241c:	f7fd feec 	bl	80201f8 <__errno>
 8022420:	2316      	movs	r3, #22
 8022422:	6003      	str	r3, [r0, #0]
 8022424:	2000      	movs	r0, #0
 8022426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802242a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022510 <_strtol_l.constprop.0+0x100>
 802242e:	460d      	mov	r5, r1
 8022430:	462e      	mov	r6, r5
 8022432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022436:	f814 700c 	ldrb.w	r7, [r4, ip]
 802243a:	f017 0708 	ands.w	r7, r7, #8
 802243e:	d1f7      	bne.n	8022430 <_strtol_l.constprop.0+0x20>
 8022440:	2c2d      	cmp	r4, #45	; 0x2d
 8022442:	d132      	bne.n	80224aa <_strtol_l.constprop.0+0x9a>
 8022444:	782c      	ldrb	r4, [r5, #0]
 8022446:	2701      	movs	r7, #1
 8022448:	1cb5      	adds	r5, r6, #2
 802244a:	2b00      	cmp	r3, #0
 802244c:	d05b      	beq.n	8022506 <_strtol_l.constprop.0+0xf6>
 802244e:	2b10      	cmp	r3, #16
 8022450:	d109      	bne.n	8022466 <_strtol_l.constprop.0+0x56>
 8022452:	2c30      	cmp	r4, #48	; 0x30
 8022454:	d107      	bne.n	8022466 <_strtol_l.constprop.0+0x56>
 8022456:	782c      	ldrb	r4, [r5, #0]
 8022458:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802245c:	2c58      	cmp	r4, #88	; 0x58
 802245e:	d14d      	bne.n	80224fc <_strtol_l.constprop.0+0xec>
 8022460:	786c      	ldrb	r4, [r5, #1]
 8022462:	2310      	movs	r3, #16
 8022464:	3502      	adds	r5, #2
 8022466:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802246a:	f108 38ff 	add.w	r8, r8, #4294967295
 802246e:	f04f 0c00 	mov.w	ip, #0
 8022472:	fbb8 f9f3 	udiv	r9, r8, r3
 8022476:	4666      	mov	r6, ip
 8022478:	fb03 8a19 	mls	sl, r3, r9, r8
 802247c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8022480:	f1be 0f09 	cmp.w	lr, #9
 8022484:	d816      	bhi.n	80224b4 <_strtol_l.constprop.0+0xa4>
 8022486:	4674      	mov	r4, lr
 8022488:	42a3      	cmp	r3, r4
 802248a:	dd24      	ble.n	80224d6 <_strtol_l.constprop.0+0xc6>
 802248c:	f1bc 0f00 	cmp.w	ip, #0
 8022490:	db1e      	blt.n	80224d0 <_strtol_l.constprop.0+0xc0>
 8022492:	45b1      	cmp	r9, r6
 8022494:	d31c      	bcc.n	80224d0 <_strtol_l.constprop.0+0xc0>
 8022496:	d101      	bne.n	802249c <_strtol_l.constprop.0+0x8c>
 8022498:	45a2      	cmp	sl, r4
 802249a:	db19      	blt.n	80224d0 <_strtol_l.constprop.0+0xc0>
 802249c:	fb06 4603 	mla	r6, r6, r3, r4
 80224a0:	f04f 0c01 	mov.w	ip, #1
 80224a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80224a8:	e7e8      	b.n	802247c <_strtol_l.constprop.0+0x6c>
 80224aa:	2c2b      	cmp	r4, #43	; 0x2b
 80224ac:	bf04      	itt	eq
 80224ae:	782c      	ldrbeq	r4, [r5, #0]
 80224b0:	1cb5      	addeq	r5, r6, #2
 80224b2:	e7ca      	b.n	802244a <_strtol_l.constprop.0+0x3a>
 80224b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80224b8:	f1be 0f19 	cmp.w	lr, #25
 80224bc:	d801      	bhi.n	80224c2 <_strtol_l.constprop.0+0xb2>
 80224be:	3c37      	subs	r4, #55	; 0x37
 80224c0:	e7e2      	b.n	8022488 <_strtol_l.constprop.0+0x78>
 80224c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80224c6:	f1be 0f19 	cmp.w	lr, #25
 80224ca:	d804      	bhi.n	80224d6 <_strtol_l.constprop.0+0xc6>
 80224cc:	3c57      	subs	r4, #87	; 0x57
 80224ce:	e7db      	b.n	8022488 <_strtol_l.constprop.0+0x78>
 80224d0:	f04f 3cff 	mov.w	ip, #4294967295
 80224d4:	e7e6      	b.n	80224a4 <_strtol_l.constprop.0+0x94>
 80224d6:	f1bc 0f00 	cmp.w	ip, #0
 80224da:	da05      	bge.n	80224e8 <_strtol_l.constprop.0+0xd8>
 80224dc:	2322      	movs	r3, #34	; 0x22
 80224de:	6003      	str	r3, [r0, #0]
 80224e0:	4646      	mov	r6, r8
 80224e2:	b942      	cbnz	r2, 80224f6 <_strtol_l.constprop.0+0xe6>
 80224e4:	4630      	mov	r0, r6
 80224e6:	e79e      	b.n	8022426 <_strtol_l.constprop.0+0x16>
 80224e8:	b107      	cbz	r7, 80224ec <_strtol_l.constprop.0+0xdc>
 80224ea:	4276      	negs	r6, r6
 80224ec:	2a00      	cmp	r2, #0
 80224ee:	d0f9      	beq.n	80224e4 <_strtol_l.constprop.0+0xd4>
 80224f0:	f1bc 0f00 	cmp.w	ip, #0
 80224f4:	d000      	beq.n	80224f8 <_strtol_l.constprop.0+0xe8>
 80224f6:	1e69      	subs	r1, r5, #1
 80224f8:	6011      	str	r1, [r2, #0]
 80224fa:	e7f3      	b.n	80224e4 <_strtol_l.constprop.0+0xd4>
 80224fc:	2430      	movs	r4, #48	; 0x30
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d1b1      	bne.n	8022466 <_strtol_l.constprop.0+0x56>
 8022502:	2308      	movs	r3, #8
 8022504:	e7af      	b.n	8022466 <_strtol_l.constprop.0+0x56>
 8022506:	2c30      	cmp	r4, #48	; 0x30
 8022508:	d0a5      	beq.n	8022456 <_strtol_l.constprop.0+0x46>
 802250a:	230a      	movs	r3, #10
 802250c:	e7ab      	b.n	8022466 <_strtol_l.constprop.0+0x56>
 802250e:	bf00      	nop
 8022510:	08026de5 	.word	0x08026de5

08022514 <_strtol_r>:
 8022514:	f7ff bf7c 	b.w	8022410 <_strtol_l.constprop.0>

08022518 <__submore>:
 8022518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802251c:	460c      	mov	r4, r1
 802251e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022524:	4299      	cmp	r1, r3
 8022526:	d11d      	bne.n	8022564 <__submore+0x4c>
 8022528:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802252c:	f7fe f826 	bl	802057c <_malloc_r>
 8022530:	b918      	cbnz	r0, 802253a <__submore+0x22>
 8022532:	f04f 30ff 	mov.w	r0, #4294967295
 8022536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802253a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802253e:	63a3      	str	r3, [r4, #56]	; 0x38
 8022540:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022544:	6360      	str	r0, [r4, #52]	; 0x34
 8022546:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802254a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802254e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022552:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022556:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802255a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802255e:	6020      	str	r0, [r4, #0]
 8022560:	2000      	movs	r0, #0
 8022562:	e7e8      	b.n	8022536 <__submore+0x1e>
 8022564:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022566:	0077      	lsls	r7, r6, #1
 8022568:	463a      	mov	r2, r7
 802256a:	f7ff fa3d 	bl	80219e8 <_realloc_r>
 802256e:	4605      	mov	r5, r0
 8022570:	2800      	cmp	r0, #0
 8022572:	d0de      	beq.n	8022532 <__submore+0x1a>
 8022574:	eb00 0806 	add.w	r8, r0, r6
 8022578:	4601      	mov	r1, r0
 802257a:	4632      	mov	r2, r6
 802257c:	4640      	mov	r0, r8
 802257e:	f7fd ff7b 	bl	8020478 <memcpy>
 8022582:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8022586:	f8c4 8000 	str.w	r8, [r4]
 802258a:	e7e9      	b.n	8022560 <__submore+0x48>

0802258c <_init>:
 802258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802258e:	bf00      	nop
 8022590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022592:	bc08      	pop	{r3}
 8022594:	469e      	mov	lr, r3
 8022596:	4770      	bx	lr

08022598 <_fini>:
 8022598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802259a:	bf00      	nop
 802259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802259e:	bc08      	pop	{r3}
 80225a0:	469e      	mov	lr, r3
 80225a2:	4770      	bx	lr
